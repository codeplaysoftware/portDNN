/*
 * Copyright Codeplay Software Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// clang-format off
#define SNN_DATA_TYPE  ${DATA_TYPE}
#define SNN_INDEX_TYPE ${INDEX_TYPE}
#define SNN_TILE_ROW   ${TILE_ROW}
#define SNN_TILE_COL   ${TILE_COL}
#define SNN_CH_VECTOR  ${CHANNEL_VECTOR}
#define SNN_FET_VECTOR ${FEATURE_VECTOR}
#define SNN_WINDOW     ${WINDOW}
#define SNN_STRIDE     ${STRIDE}
#define SNN_CTYPE      ${CONV_TYPE}
#define SNN_LAYOUT     ${LAYOUT}
// clang-format on

#include "sycldnn/conv2d/conv_type.h"

#include "src/conv2d/tiled/kernels.h"
#include "src/conv2d/tiled/queue_tiled_kernel_impl.h"

namespace sycldnn {
namespace conv2d {
namespace internal {

#ifdef SNN_ENABLE_USM
template SNNStatus queue_tiled_kernel<
    SNN_DATA_TYPE, SNN_INDEX_TYPE, SNN_CTYPE, SNN_TILE_ROW, SNN_TILE_COL,
    SNN_CH_VECTOR, SNN_FET_VECTOR, true, SNN_WINDOW, SNN_WINDOW, SNN_STRIDE,
    layout::SNN_LAYOUT>(
    USMMemObject<SNN_DATA_TYPE const>& input,
    USMMemObject<SNN_DATA_TYPE const>& filter,
    USMMemObject<SNN_DATA_TYPE>& output, Conv2DParams const& kernel_params,
    tiled::TileInfo const& tile_info, cl::sycl::queue& queue,
    const std::vector<cl::sycl::event>& events);

template SNNStatus queue_tiled_kernel<
    SNN_DATA_TYPE, SNN_INDEX_TYPE, SNN_CTYPE, SNN_TILE_ROW, SNN_TILE_COL,
    SNN_CH_VECTOR, SNN_FET_VECTOR, false, SNN_WINDOW, SNN_WINDOW, SNN_STRIDE,
    layout::SNN_LAYOUT>(
    USMMemObject<SNN_DATA_TYPE const>& input,
    USMMemObject<SNN_DATA_TYPE const>& filter,
    USMMemObject<SNN_DATA_TYPE>& output, Conv2DParams const& kernel_params,
    tiled::TileInfo const& tile_info, cl::sycl::queue& queue,
    const std::vector<cl::sycl::event>& events);
#endif

template SNNStatus queue_tiled_kernel<
    SNN_DATA_TYPE, SNN_INDEX_TYPE, SNN_CTYPE, SNN_TILE_ROW, SNN_TILE_COL,
    SNN_CH_VECTOR, SNN_FET_VECTOR, true, SNN_WINDOW, SNN_WINDOW, SNN_STRIDE,
    layout::SNN_LAYOUT>(
    BufferMemObject<SNN_DATA_TYPE const>& input,
    BufferMemObject<SNN_DATA_TYPE const>& filter,
    BufferMemObject<SNN_DATA_TYPE>& output, Conv2DParams const& kernel_params,
    tiled::TileInfo const& tile_info, cl::sycl::queue& queue,
    const std::vector<cl::sycl::event>& events);

template SNNStatus queue_tiled_kernel<
    SNN_DATA_TYPE, SNN_INDEX_TYPE, SNN_CTYPE, SNN_TILE_ROW, SNN_TILE_COL,
    SNN_CH_VECTOR, SNN_FET_VECTOR, false, SNN_WINDOW, SNN_WINDOW, SNN_STRIDE,
    layout::SNN_LAYOUT>(
    BufferMemObject<SNN_DATA_TYPE const>& input,
    BufferMemObject<SNN_DATA_TYPE const>& filter,
    BufferMemObject<SNN_DATA_TYPE>& output, Conv2DParams const& kernel_params,
    tiled::TileInfo const& tile_info, cl::sycl::queue& queue,
    const std::vector<cl::sycl::event>& events);

}  // namespace internal
}  // namespace conv2d
}  // namespace sycldnn
