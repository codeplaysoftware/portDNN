/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;


template <typename Pair>
using InputBackpropWindow5Stride2 = WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride2, GTestTypeTriples);
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,  786., 1228.,  858., 1336.,  930.,  984.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98., 108., 118.,  74.,  80.,  54.,  58., 148., 158., 168., 104., 110.,  48.,  51., 118., 125., 132.,  76.,  80.,  63.,  66., 153., 160., 167.,  96., 100.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,  457.,  479., 1124., 1176., 1228.,  713.,  743.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,  230.,  270.,  900., 1044., 1188.,  902., 1006.,  540.,  748., 2216., 2760., 3304., 2268., 2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828., 7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396., 4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336., 202., 208., 214., 220.,  93.,  96.,  99., 102., 229., 236., 243., 250., 257., 264., 148., 152., 156., 160., 123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192., 196., 200.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096., 11120., 11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,  702.,  730.,  758.,  786., 2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,  677.,  699.,  721.,  743., 1688., 1740., 1792., 1844., 1896., 1948., 1103., 1133., 1163., 1193.,  897.,  919.,  941.,  963., 2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,  3644.,  9512., 10056., 10600., 11144., 11688., 12232.,  7676.,  8012.,  8348.,  8684.,  5100.,  5308.,  5516.,  5724., 14952., 15496., 16040., 16584., 17128., 17672., 11036., 11372., 11708., 12044.,  5150.,  5318.,  5486.,  5654., 12932., 13332., 13732., 14132., 14532., 14932.,  8502.,  8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334., 16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 2822., 2868., 2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98., 101., 104.,  66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  44.,  48.,  52.,  56.,  60.,  64.,  68.,  72., 162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200., 124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392., 402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296., 302., 308., 314., 320., 204., 208., 212., 216., 220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440., 183., 186., 189., 192., 195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320., 243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612., 619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384., 388., 392., 396., 400.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,  4664.,  2928.,  3032.,  3136.,  3240.,  2448.,  2552.,  2656.,  2760.,  5322.,  5502.,  5682.,  5862.,  2984.,  3120.,  3256.,  3392.,  6638.,  6866.,  7094.,  7322.,  3520.,  3688.,  3856.,  4024.,  4192.,  4360.,  4528.,  4696.,  4784.,  5036.,  5288.,  5540.,  5792.,  6044.,  6296.,  6548.,  9435.,  9849., 10263., 10677.,  7108.,  7408.,  7708.,  8008., 11409., 11895., 12381., 12867.,  8424.,  8772.,  9120.,  9468.,  9816., 10164., 10512., 10860.,  6608.,  6840.,  7072.,  7304.,  4592.,  4824.,  5056.,  5288., 10586., 10958., 11330., 11702.,  5128.,  5392.,  5656.,  5920., 11902., 12322., 12742., 13162.,  5664.,  5960.,  6256.,  6552.,  6848.,  7144.,  7440.,  7736.,  9280.,  9724., 10168., 10612., 11056., 11500., 11944., 12388., 17331., 18033., 18735., 19437., 12372., 12864., 13356., 13848., 19305., 20079., 20853., 21627., 13688., 14228., 14768., 15308., 15848., 16388., 16928., 17468., 10288., 10648., 11008., 11368.,  6736.,  7096.,  7456.,  7816., 15850., 16414., 16978., 17542.,  7272.,  7664.,  8056.,  8448., 17166., 17778., 18390., 19002.,  7808.,  8232.,  8656.,  9080.,  9504.,  9928., 10352., 10776., 12496., 12856., 13216., 13576., 13936., 14296., 14656., 15016., 21626., 22190., 22754., 23318., 15112., 15504., 15896., 16288., 23390., 24002., 24614., 25226., 16288., 16712., 17136., 17560., 17984., 18408., 18832., 19256.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190., 1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388., 3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908., 2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,  4022.,  4126.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,  7784.,  8328.,  8872.,  9416.,  9960., 10504., 11048., 11592., 12136., 12680., 13224., 13768.,  8412.,  8748.,  9084.,  9420.,  9756., 10092., 10428., 10764.,  5900.,  6108.,  6316.,  6524.,  4172.,  4380.,  4588.,  4796., 16104., 16648., 17192., 17736., 11624., 12168., 12712., 13256., 13800., 14344., 14888., 15432.,  8476.,  8812.,  9148.,  9484.,  9820., 10156., 10492., 10828.,  7500.,  7708.,  7916.,  8124.,  8332.,  8540.,  8748.,  8956., 20328., 20872., 21416., 21960., 22504., 23048., 23592., 24136., 24680., 25224., 25768., 26312., 15196., 15532., 15868., 16204., 16540., 16876., 17212., 17548., 10190., 10358., 10526., 10694.,   110.,   278.,   446.,   614., 14852., 15252., 15652., 16052.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,  2798.,  2966.,  3134.,  3302.,  3470.,  3638.,  3806.,  3974.,  8004.,  8404.,  8804.,  9204.,  9604., 10004., 10404., 10804., 11204., 11604., 12004., 12404.,  6646.,  6878.,  7110.,  7342.,  7574.,  7806.,  8038.,  8270.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786., 1228.,  858., 1336.,  930.,  984.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   0.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,   0.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,   0.,  34.,  38.,  98., 108., 118.,  74.,  80.,   0.,  54.,  58., 148., 158., 168., 104., 110.,   0.,  48.,  51., 118., 125., 132.,  76.,  80.,   0.,  63.,  66., 153., 160., 167.,  96., 100.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,    0.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,    0.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,    0.,  230.,  270.,  900., 1044., 1188.,  902., 1006.,    0.,  540.,  748., 2216., 2760., 3304., 2268., 2604.,    0., 1580., 1788., 4936., 5480., 6024., 3948., 4284.,    0., 2620., 2828., 7656., 8200., 8744., 5628., 5964.,    0., 2630., 2798., 6596., 6996., 7396., 4326., 4558.,    0., 3470., 3638., 8596., 8996., 9396., 5486., 5718.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,   98.,  104.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  461.,  488.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  466.,  488.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428.,  686.,  708., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,   0.,   0.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,   0.,   0.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,   0.,   0.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160.,   0.,   0., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336., 202., 208., 214., 220.,   0.,   0.,  93.,  96.,  99., 102., 229., 236., 243., 250., 257., 264., 148., 152., 156., 160.,   0.,   0., 123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192., 196., 200.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   682.,   726.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,  3709.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  3594.,  3766.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096.,  5314.,  5486., 11120., 11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,    0.,    0.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,    0.,    0.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,    0.,    0.,  702.,  730.,  758.,  786., 2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,    0.,    0.,  677.,  699.,  721.,  743., 1688., 1740., 1792., 1844., 1896., 1948., 1103., 1133., 1163., 1193.,    0.,    0.,  897.,  919.,  941.,  963., 2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,     0.,     0.,  3020.,  3228.,  3436.,  3644.,  9512., 10056., 10600., 11144., 11688., 12232.,  7676.,  8012.,  8348.,  8684.,     0.,     0.,  5100.,  5308.,  5516.,  5724., 14952., 15496., 16040., 16584., 17128., 17672., 11036., 11372., 11708., 12044.,     0.,     0.,  5150.,  5318.,  5486.,  5654., 12932., 13332., 13732., 14132., 14532., 14932.,  8502.,  8734.,  8966.,  9198.,     0.,     0.,  6830.,  6998.,  7166.,  7334., 16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  70.,   76.,   82.,   88.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  355.,  370.,  385.,  400.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868.,  550.,  564.,  578.,  592., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,  895.,  922.,  949.,  976., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212.,  910.,  932.,  954.,  976., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 1350., 1372., 1394., 1416., 2822., 2868., 2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,   0.,   0.,   0.,   0.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98., 101., 104.,  66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,   0.,   0.,   0.,   0.,  44.,  48.,  52.,  56.,  60.,  64.,  68.,  72., 162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200.,   0.,   0.,   0.,   0., 124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392., 402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296., 302., 308., 314., 320.,   0.,   0.,   0.,   0., 204., 208., 212., 216., 220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440.,   0.,   0.,   0.,   0., 183., 186., 189., 192., 195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320.,   0.,   0.,   0.,   0., 243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612., 619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384., 388., 392., 396., 400.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  450.,   494.,   538.,   582.,  1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,  4664.,   946.,   990.,  1034.,  1078.,  2928.,  3032.,  3136.,  3240.,  2448.,  2552.,  2656.,  2760.,  5322.,  5502.,  5682.,  5862.,  2984.,  3120.,  3256.,  3392.,  6638.,  6866.,  7094.,  7322.,  3520.,  3688.,  3856.,  4024.,  4192.,  4360.,  4528.,  4696.,  2159.,  2273.,  2387.,  2501.,  4784.,  5036.,  5288.,  5540.,  5792.,  6044.,  6296.,  6548.,  9435.,  9849., 10263., 10677.,  7108.,  7408.,  7708.,  8008., 11409., 11895., 12381., 12867.,  8424.,  8772.,  9120.,  9468.,  9816., 10164., 10512., 10860.,  1762.,  1870.,  1978.,  2086.,  6608.,  6840.,  7072.,  7304.,  4592.,  4824.,  5056.,  5288., 10586., 10958., 11330., 11702.,  5128.,  5392.,  5656.,  5920., 11902., 12322., 12742., 13162.,  5664.,  5960.,  6256.,  6552.,  6848.,  7144.,  7440.,  7736.,  4407.,  4617.,  4827.,  5037.,  9280.,  9724., 10168., 10612., 11056., 11500., 11944., 12388., 17331., 18033., 18735., 19437., 12372., 12864., 13356., 13848., 19305., 20079., 20853., 21627., 13688., 14228., 14768., 15308., 15848., 16388., 16928., 17468.,  2578.,  2750.,  2922.,  3094., 10288., 10648., 11008., 11368.,  6736.,  7096.,  7456.,  7816., 15850., 16414., 16978., 17542.,  7272.,  7664.,  8056.,  8448., 17166., 17778., 18390., 19002.,  7808.,  8232.,  8656.,  9080.,  9504.,  9928., 10352., 10776.,  6018.,  6190.,  6362.,  6534., 12496., 12856., 13216., 13576., 13936., 14296., 14656., 15016., 21626., 22190., 22754., 23318., 15112., 15504., 15896., 16288., 23390., 24002., 24614., 25226., 16288., 16712., 17136., 17560., 17984., 18408., 18832., 19256.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,    0.,    0.,    0.,    0.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,    0.,    0.,    0.,    0.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,    0.,    0.,    0.,    0.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310.,    0.,    0.,    0.,    0., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190.,    0.,    0.,    0.,    0., 1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388., 3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908., 2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393.,    0.,    0.,    0.,    0., 1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,     0.,     0.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,  4022.,  4126.,     0.,     0.,     0.,     0.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,  7784.,  8328.,  8872.,  9416.,  9960., 10504., 11048., 11592., 12136., 12680., 13224., 13768.,  8412.,  8748.,  9084.,  9420.,  9756., 10092., 10428., 10764.,     0.,     0.,     0.,     0.,  5900.,  6108.,  6316.,  6524.,  4172.,  4380.,  4588.,  4796., 16104., 16648., 17192., 17736., 11624., 12168., 12712., 13256., 13800., 14344., 14888., 15432.,  8476.,  8812.,  9148.,  9484.,  9820., 10156., 10492., 10828.,     0.,     0.,     0.,     0.,  7500.,  7708.,  7916.,  8124.,  8332.,  8540.,  8748.,  8956., 20328., 20872., 21416., 21960., 22504., 23048., 23592., 24136., 24680., 25224., 25768., 26312., 15196., 15532., 15868., 16204., 16540., 16876., 17212., 17548.,     0.,     0.,     0.,     0., 10190., 10358., 10526., 10694.,   110.,   278.,   446.,   614., 14852., 15252., 15652., 16052.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,     0.,     0.,     0.,     0.,  2798.,  2966.,  3134.,  3302.,  3470.,  3638.,  3806.,  3974.,  8004.,  8404.,  8804.,  9204.,  9604., 10004., 10404., 10804., 11204., 11604., 12004., 12404.,  6646.,  6878.,  7110.,  7342.,  7574.,  7806.,  8038.,  8270.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  434.,  900.,  956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  14.,  14.,  19.,  12.,  15.,   0.,   6.,   7.,  20.,  23.,  44.,  39.,  44.,  27.,  30.,   0.,  15.,  20.,  52.,  64., 115.,  96., 112.,  66.,  75.,   0.,  40.,  45., 112., 124., 220., 176., 192., 111., 120.,   0.,  65.,  70., 172., 184., 325., 256., 272., 156., 165.,   0.,  64.,  68., 152., 161., 266., 197., 208., 114., 120.,   0.,  84.,  88., 197., 206., 341., 252., 263., 144., 150.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396., 11480.,  7964., 12332.,  8532., 13184.,  9100.,  9636.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,   92.,  128.,   83.,  105.,    0.,   35.,   41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,    0.,   88.,  124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,    0.,  268.,  304.,  780.,  868., 1568., 1276., 1396.,  816.,  884.,    0.,  448.,  484., 1220., 1308., 2348., 1876., 1996., 1156., 1224.,    0.,  473.,  503., 1132., 1200., 1993., 1484., 1568.,  863.,  909.,    0.,  623.,  653., 1472., 1540., 2563., 1904., 1988., 1093., 1139.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,     0.,   230.,   270.,   900.,  1044.,  2138.,  2020.,  2292.,  1454.,  1622.,     0.,   580.,   852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,     0.,  1940.,  2212.,  5784.,  6456., 11788.,  9688., 10616.,  6244.,  6772.,     0.,  3300.,  3572.,  9144.,  9816., 17788., 14328., 15256.,  8884.,  9412.,     0.,  3630.,  3862.,  8724.,  9252., 15410., 11508., 12164.,  6710.,  7070.,     0.,  4790.,  5022., 11364., 11892., 19850., 14788., 15444.,  8510.,  8870.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  41.,   48.,  104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,  329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,  111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,  659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,  214.,  232.,  491.,  530.,  569.,  608.,  951., 1014.,  719.,  764., 1176., 1248.,  869.,  920., 1401., 1482., 1019., 1076., 1133., 1190.,  341.,  358.,  724.,  760.,  796.,  832., 1259., 1316.,  896.,  936., 1409., 1472.,  996., 1040., 1559., 1628., 1096., 1144., 1192., 1240.,  559.,  592., 1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544., 2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,  571.,  598., 1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456., 2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,  841.,  868., 1744., 1800., 1856., 1912., 2879., 2966., 1996., 2056., 3089., 3182., 2136., 2200., 3299., 3398., 2276., 2344., 2412., 2480.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  22.,  28.,  23.,  28.,  33.,  38.,  21.,  24.,  27.,  30.,   0.,   0.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  82.,  88.,  73.,  78.,  83.,  88.,  51.,  54.,  57.,  60.,   0.,   0.,  25.,  30.,  35.,  40.,  92., 104., 116., 128., 209., 230., 176., 192., 208., 224., 123., 132., 141., 150.,   0.,   0.,  75.,  80.,  85.,  90., 212., 224., 236., 248., 419., 440., 336., 352., 368., 384., 213., 222., 231., 240.,   0.,   0., 125., 130., 135., 140., 332., 344., 356., 368., 629., 650., 496., 512., 528., 544., 303., 312., 321., 330.,   0.,   0., 124., 128., 132., 136., 295., 304., 313., 322., 517., 532., 383., 394., 405., 416., 222., 228., 234., 240.,   0.,   0., 164., 168., 172., 176., 385., 394., 403., 412., 667., 682., 493., 504., 515., 526., 282., 288., 294., 300.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   784.,   836.,  1900.,  2020.,  2140.,  2260.,  3724.,  3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,  6100.,  6400.,  4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,  3880.,  4180.,  4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,  6556.,  6952., 10605., 11235.,  7744.,  8188.,  8632.,  9076.,  2604.,  2736.,  5540.,  5820.,  6100.,  6380.,  9664., 10108.,  6892.,  7204., 10852., 11344.,  7684.,  8028., 12040., 12580.,  8476.,  8852.,  9228.,  9604.,  4271.,  4529.,  9040.,  9580., 10120., 10660., 15951., 16797., 11308., 11896., 17733., 18651., 12496., 13132., 19515., 20505., 13684., 14368., 15052., 15736.,  4424.,  4636.,  9180.,  9620., 10060., 10500., 15604., 16288., 10852., 11324., 16792., 17524., 11644., 12148., 17980., 18760., 12436., 12972., 13508., 14044.,  6544.,  6756., 13580., 14020., 14460., 14900., 22444., 23128., 15572., 16044., 24112., 24844., 16684., 17188., 25780., 26560., 17796., 18332., 18868., 19404.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  557.,  599.,  516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,    0.,    0.,  148.,  184.,  220.,  256.,  612.,  700.,  788.,  876., 1456., 1612., 1260., 1380., 1500., 1620.,  900.,  968., 1036., 1104.,    0.,    0.,  508.,  544.,  580.,  616., 1492., 1580., 1668., 1756., 3016., 3172., 2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784.,    0.,    0.,  868.,  904.,  940.,  976., 2372., 2460., 2548., 2636., 4576., 4732., 3660., 3780., 3900., 4020., 2260., 2328., 2396., 2464.,    0.,    0.,  923.,  953.,  983., 1013., 2212., 2280., 2348., 2416., 3899., 4013., 2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829.,    0.,    0., 1223., 1253., 1283., 1313., 2892., 2960., 3028., 3096., 5039., 5153., 3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,  3134.,  3302.,     0.,     0.,   980.,  1252.,  1524.,  1796.,  4408.,  5080.,  5752.,  6424., 10796., 11996.,  9496., 10424., 11352., 12280.,  6868.,  7396.,  7924.,  8452.,     0.,     0.,  3700.,  3972.,  2964.,  3236.,  9848., 10520.,  7864.,  8536., 18188., 19388., 10072., 11000., 11928., 12856.,  6772.,  7300.,  7828.,  8356.,     0.,     0.,  5140.,  5412.,  5684.,  5956., 13240., 13912., 14584., 15256., 24812., 26012., 19352., 20280., 21208., 22136., 12052., 12580., 13108., 13636.,     0.,     0.,  7110.,  7342.,   150.,   382.,  9684., 10212.,  1268.,  1796., 13354., 14242.,  1604.,  2260.,  2916.,  3572.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,  2006.,  2238.,  2470.,  2702.,  5492.,  6020.,  6548.,  7076., 10714., 11602.,  8164.,  8820.,  9476., 10132.,  5270.,  5630.,  5990.,  6350.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  75.,   82.,   89.,   96.,  192.,  208.,  224.,  240.,  256.,  272.,  288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,  625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,  877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,  215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,  608.,  624.,  991., 1018., 1045., 1072.,  772.,  792.,  812.,  832., 1285., 1318., 1351., 1384.,  968.,  992., 1016., 1040., 1579., 1618., 1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,  410.,  428.,  446.,  464.,  943.,  982., 1021., 1060., 1099., 1138., 1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528., 2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802., 2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,  665.,  682.,  699.,  716., 1412., 1448., 1484., 1520., 1556., 1592., 1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872., 2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118., 3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480., 1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638., 2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088., 4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052., 5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060., 1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592., 2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912., 4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618., 4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600., 1655., 1682., 1709., 1736., 3432., 3488., 3544., 3600., 3656., 3712., 3768., 3824., 5671., 5758., 5845., 5932., 3932., 3992., 4052., 4112., 6085., 6178., 6271., 6364., 4208., 4272., 4336., 4400., 6499., 6598., 6697., 6796., 4484., 4552., 4620., 4688., 4756., 4824., 4892., 4960.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,   41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,   45.,   48.,   51.,   54.,   57.,   60.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,  102.,  105.,  108.,  111.,  114.,  117.,  120.,    0.,    0.,    0.,    0.,   45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,  172.,  184.,  196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,  336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,  255.,  264.,  273.,  282.,  291.,  300.,    0.,    0.,    0.,    0.,  145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,  436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,  656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,  435.,  444.,  453.,  462.,  471.,  480.,    0.,    0.,    0.,    0.,  245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,  676.,  688.,  700.,  712.,  724.,  736., 1237., 1258., 1279., 1300.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088.,  597.,  606.,  615.,  624.,  633.,  642.,  651.,  660.,    0.,    0.,    0.,    0.,  244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,  599.,  608.,  617.,  626.,  635.,  644., 1019., 1034., 1049., 1064.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,  779.,  788.,  797.,  806.,  815.,  824., 1319., 1334., 1349., 1364.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  488.,   540.,   592.,   644.,  1308.,  1428.,  1548.,  1668.,  1788.,  1908.,  2028.,  2148.,  3212.,  3416.,  3620.,  3824.,  2708.,  2860.,  3012.,  3164.,  4592.,  4844.,  5096.,  5348.,  3628.,  3812.,  3996.,  4180.,  5972.,  6272.,  6572.,  6872.,  4548.,  4764.,  4980.,  5196.,  5412.,  5628.,  5844.,  6060.,  1144.,  1196.,  1248.,  1300.,  3324.,  3444.,  3564.,  3684.,  2908.,  3028.,  3148.,  3268.,  6012.,  6216.,  6420.,  6624.,  3444.,  3596.,  3748.,  3900.,  7328.,  7580.,  7832.,  8084.,  3980.,  4164.,  4348.,  4532.,  8644.,  8944.,  9244.,  9544.,  4516.,  4732.,  4948.,  5164.,  5380.,  5596.,  5812.,  6028.,  2593.,  2731.,  2869.,  3007.,  5652.,  5952.,  6252.,  6552.,  6852.,  7152.,  7452.,  7752., 11025., 11511., 11997., 12483.,  8168.,  8516.,  8864.,  9212., 12999., 13557., 14115., 14673.,  9484.,  9880., 10276., 10672., 14973., 15603., 16233., 16863., 10800., 11244., 11688., 12132., 12576., 13020., 13464., 13908.,  2164.,  2296.,  2428.,  2560.,  7924.,  8204.,  8484.,  8764.,  5588.,  5868.,  6148.,  6428., 12592., 13036., 13480., 13924.,  6124.,  6436.,  6748.,  7060., 13908., 14400., 14892., 15384.,  6660.,  7004.,  7348.,  7692., 15224., 15764., 16304., 16844.,  7196.,  7572.,  7948.,  8324.,  8700.,  9076.,  9452.,  9828.,  5403.,  5661.,  5919.,  6177., 11272., 11812., 12352., 12892., 13432., 13972., 14512., 15052., 20895., 21741., 22587., 23433., 14748., 15336., 15924., 16512., 22869., 23787., 24705., 25623., 16064., 16700., 17336., 17972., 24843., 25833., 26823., 27813., 17380., 18064., 18748., 19432., 20116., 20800., 21484., 22168.,  3184.,  3396.,  3608.,  3820., 12524., 12964., 13404., 13844.,  8268.,  8708.,  9148.,  9588., 19172., 19856., 20540., 21224.,  8804.,  9276.,  9748., 10220., 20488., 21220., 21952., 22684.,  9340.,  9844., 10348., 10852., 21804., 22584., 23364., 24144.,  9876., 10412., 10948., 11484., 12020., 12556., 13092., 13628.,  7424.,  7636.,  7848.,  8060., 15308., 15748., 16188., 16628., 17068., 17508., 17948., 18388., 26324., 27008., 27692., 28376., 18244., 18716., 19188., 19660., 28088., 28820., 29552., 30284., 19420., 19924., 20428., 20932., 29852., 30632., 31412., 32192., 20596., 21132., 21668., 22204., 22740., 23276., 23812., 24348.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1148.,  1184.,  1220.,  1256.,   721.,   743.,   765.,   787.,   809.,   831.,   853.,   875.,     0.,     0.,     0.,     0.,   268.,   304.,   340.,   376.,   412.,   448.,   484.,   520.,  1156.,  1244.,  1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,  3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,  1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,     0.,     0.,     0.,     0.,   988.,  1024.,  1060.,  1096.,  1132.,  1168.,  1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,  3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,  5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,  3448.,  3516.,  3584.,     0.,     0.,     0.,     0.,  1708.,  1744.,  1780.,  1816.,  1852.,  1888.,  1924.,  1960.,  4676.,  4764.,  4852.,  4940.,  5028.,  5116.,  5204.,  5292.,  9032.,  9188.,  9344.,  9500.,  7228.,  7348.,  7468.,  7588.,  7708.,  7828.,  7948.,  8068.,  4468.,  4536.,  4604.,  4672.,  4740.,  4808.,  4876.,  4944.,     0.,     0.,     0.,     0.,  1823.,  1853.,  1883.,  1913.,  1943.,  1973.,  2003.,  2033.,  4372.,  4440.,  4508.,  4576.,  4644.,  4712.,  4780.,  4848.,  7711.,  7825.,  7939.,  8053.,  5744.,  5828.,  5912.,  5996.,  6080.,  6164.,  6248.,  6332.,  3347.,  3393.,  3439.,  3485.,  3531.,  3577.,  3623.,  3669.,     0.,     0.,     0.,     0.,  2423.,  2453.,  2483.,  2513.,  2543.,  2573.,  2603.,  2633.,  5732.,  5800.,  5868.,  5936.,  6004.,  6072.,  6140.,  6208.,  9991., 10105., 10219., 10333.,  7424.,  7508.,  7592.,  7676.,  7760.,  7844.,  7928.,  8012.,  4267.,  4313.,  4359.,  4405.,  4451.,  4497.,  4543.,  4589.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1682.,  1994.,  2306.,  2618.,  2100.,  2372.,  2644.,  2916.,  3188.,  3460.,  3732.,  4004.,  2126.,  2294.,  2462.,  2630.,  2798.,  2966.,  3134.,  3302.,     0.,     0.,     0.,     0.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  2596.,  2740.,  2884.,  3028.,  6642.,  6954.,  7266.,  7578.,  4212.,  4484.,  4756.,  5028.,  5300.,  5572.,  5844.,  6116.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   500.,   772.,  1044.,  1316.,  1588.,  1860.,  2132.,  2404.,  3768.,  4440.,  5112.,  5784.,  6456.,  7128.,  7800.,  8472., 10828., 12028., 13228., 14428.,  9688., 10616., 11544., 12472., 13400., 14328., 15256., 16184.,  8020.,  8548.,  9076.,  9604., 10132., 10660., 11188., 11716.,     0.,     0.,     0.,     0.,  5940.,  6212.,  6484.,  6756.,  5748.,  6020.,  6292.,  6564., 15928., 16600., 17272., 17944.,  7864.,  8536.,  9208.,  9880., 22796., 23996., 25196., 26396., 10072., 11000., 11928., 12856., 13784., 14712., 15640., 16568.,  1684.,  2212.,  2740.,  3268.,  3796.,  4324.,  4852.,  5380.,     0.,     0.,     0.,     0.,  2676.,  2948.,  3220.,  3492.,  3764.,  4036.,  4308.,  4580.,  9144.,  9816., 10488., 11160., 11832., 12504., 13176., 13848., 19148., 20348., 21548., 22748., 17112., 18040., 18968., 19896., 17496., 18424., 19352., 20280., 12244., 12772., 13300., 13828.,  8980.,  9508., 10036., 10564.,     0.,     0.,     0.,     0.,  6646.,  6878.,  7110.,  7342.,   150.,   382.,   614.,   846.,  9556., 10084., 10612., 11140.,  2196.,  2724.,  3252.,  3780., 14618., 15506., 16394., 17282.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3110.,  3470.,  3830.,  4190.,  4550.,  4910.,  5270.,  5630.,     0.,     0.,     0.,     0.,  3862.,  4094.,  4326.,  4558.,  4790.,  5022.,  5254.,  5486., 10644., 11172., 11700., 12228., 12756., 13284., 13812., 14340., 13434., 14322., 15210., 16098., 15908., 16564., 17220., 17876.,  9060.,  9716., 10372., 11028., 10310., 10670., 11030., 11390.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,  786., 1228.,  858., 1336.,  930.,  984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98., 108., 118.,  74.,  80.,  54.,  58., 148., 158., 168., 104., 110.,  48.,  51., 118., 125., 132.,  76.,  80.,  63.,  66., 153., 160., 167.,  96., 100.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,  230.,  270.,  900., 1044., 1188.,  902., 1006.,  540.,  748., 2216., 2760., 3304., 2268., 2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828., 7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396., 4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336., 202., 208., 214., 220.,  93.,  96.,  99., 102., 229., 236., 243., 250., 257., 264., 148., 152., 156., 160., 123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192., 196., 200.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096., 11120., 11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,  702.,  730.,  758.,  786., 2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,  677.,  699.,  721.,  743., 1688., 1740., 1792., 1844., 1896., 1948., 1103., 1133., 1163., 1193.,  897.,  919.,  941.,  963., 2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,  3644.,  9512., 10056., 10600., 11144., 11688., 12232.,  7676.,  8012.,  8348.,  8684.,  5100.,  5308.,  5516.,  5724., 14952., 15496., 16040., 16584., 17128., 17672., 11036., 11372., 11708., 12044.,  5150.,  5318.,  5486.,  5654., 12932., 13332., 13732., 14132., 14532., 14932.,  8502.,  8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334., 16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 2822., 2868., 2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98., 101., 104.,  66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  44.,  48.,  52.,  56.,  60.,  64.,  68.,  72., 162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200., 124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392., 402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296., 302., 308., 314., 320., 204., 208., 212., 216., 220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440., 183., 186., 189., 192., 195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320., 243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612., 619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384., 388., 392., 396., 400.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,  1620.,  1672.,  1724.,  1776.,  1828.,  1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,  4664.,  2928.,  3032.,  3136.,  3240.,  2448.,  2552.,  2656.,  2760.,  5322.,  5502.,  5682.,  5862.,  2984.,  3120.,  3256.,  3392.,  6638.,  6866.,  7094.,  7322.,  3520.,  3688.,  3856.,  4024.,  4192.,  4360.,  4528.,  4696.,  4784.,  5036.,  5288.,  5540.,  5792.,  6044.,  6296.,  6548.,  9435.,  9849., 10263., 10677.,  7108.,  7408.,  7708.,  8008., 11409., 11895., 12381., 12867.,  8424.,  8772.,  9120.,  9468.,  9816., 10164., 10512., 10860.,  6608.,  6840.,  7072.,  7304.,  4592.,  4824.,  5056.,  5288., 10586., 10958., 11330., 11702.,  5128.,  5392.,  5656.,  5920., 11902., 12322., 12742., 13162.,  5664.,  5960.,  6256.,  6552.,  6848.,  7144.,  7440.,  7736.,  9280.,  9724., 10168., 10612., 11056., 11500., 11944., 12388., 17331., 18033., 18735., 19437., 12372., 12864., 13356., 13848., 19305., 20079., 20853., 21627., 13688., 14228., 14768., 15308., 15848., 16388., 16928., 17468., 10288., 10648., 11008., 11368.,  6736.,  7096.,  7456.,  7816., 15850., 16414., 16978., 17542.,  7272.,  7664.,  8056.,  8448., 17166., 17778., 18390., 19002.,  7808.,  8232.,  8656.,  9080.,  9504.,  9928., 10352., 10776., 12496., 12856., 13216., 13576., 13936., 14296., 14656., 15016., 21626., 22190., 22754., 23318., 15112., 15504., 15896., 16288., 23390., 24002., 24614., 25226., 16288., 16712., 17136., 17560., 17984., 18408., 18832., 19256.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190., 1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388., 3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908., 2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,  4022.,  4126.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,  7784.,  8328.,  8872.,  9416.,  9960., 10504., 11048., 11592., 12136., 12680., 13224., 13768.,  8412.,  8748.,  9084.,  9420.,  9756., 10092., 10428., 10764.,  5900.,  6108.,  6316.,  6524.,  4172.,  4380.,  4588.,  4796., 16104., 16648., 17192., 17736., 11624., 12168., 12712., 13256., 13800., 14344., 14888., 15432.,  8476.,  8812.,  9148.,  9484.,  9820., 10156., 10492., 10828.,  7500.,  7708.,  7916.,  8124.,  8332.,  8540.,  8748.,  8956., 20328., 20872., 21416., 21960., 22504., 23048., 23592., 24136., 24680., 25224., 25768., 26312., 15196., 15532., 15868., 16204., 16540., 16876., 17212., 17548., 10190., 10358., 10526., 10694.,   110.,   278.,   446.,   614., 14852., 15252., 15652., 16052.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,  2798.,  2966.,  3134.,  3302.,  3470.,  3638.,  3806.,  3974.,  8004.,  8404.,  8804.,  9204.,  9604., 10004., 10404., 10804., 11204., 11604., 12004., 12404.,  6646.,  6878.,  7110.,  7342.,  7574.,  7806.,  8038.,  8270.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786., 1228.,  858., 1336.,  930.,  984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   0.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,   0.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,   0.,  34.,  38.,  98., 108., 118.,  74.,  80.,   0.,  54.,  58., 148., 158., 168., 104., 110.,   0.,  48.,  51., 118., 125., 132.,  76.,  80.,   0.,  63.,  66., 153., 160., 167.,  96., 100.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,    0.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,    0.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,    0.,  230.,  270.,  900., 1044., 1188.,  902., 1006.,    0.,  540.,  748., 2216., 2760., 3304., 2268., 2604.,    0., 1580., 1788., 4936., 5480., 6024., 3948., 4284.,    0., 2620., 2828., 7656., 8200., 8744., 5628., 5964.,    0., 2630., 2798., 6596., 6996., 7396., 4326., 4558.,    0., 3470., 3638., 8596., 8996., 9396., 5486., 5718.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,   98.,  104.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  461.,  488.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  466.,  488.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428.,  686.,  708., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,   0.,   0.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,   0.,   0.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,   0.,   0.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160.,   0.,   0., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336., 202., 208., 214., 220.,   0.,   0.,  93.,  96.,  99., 102., 229., 236., 243., 250., 257., 264., 148., 152., 156., 160.,   0.,   0., 123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192., 196., 200.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   682.,   726.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,  3709.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  3594.,  3766.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096.,  5314.,  5486., 11120., 11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,    0.,    0.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,    0.,    0.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,    0.,    0.,  702.,  730.,  758.,  786., 2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,    0.,    0.,  677.,  699.,  721.,  743., 1688., 1740., 1792., 1844., 1896., 1948., 1103., 1133., 1163., 1193.,    0.,    0.,  897.,  919.,  941.,  963., 2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,     0.,     0.,  3020.,  3228.,  3436.,  3644.,  9512., 10056., 10600., 11144., 11688., 12232.,  7676.,  8012.,  8348.,  8684.,     0.,     0.,  5100.,  5308.,  5516.,  5724., 14952., 15496., 16040., 16584., 17128., 17672., 11036., 11372., 11708., 12044.,     0.,     0.,  5150.,  5318.,  5486.,  5654., 12932., 13332., 13732., 14132., 14532., 14932.,  8502.,  8734.,  8966.,  9198.,     0.,     0.,  6830.,  6998.,  7166.,  7334., 16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,   70.,   76.,   82.,   88.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  355.,  370.,  385.,  400.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868.,  550.,  564.,  578.,  592., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,  895.,  922.,  949.,  976., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212.,  910.,  932.,  954.,  976., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 1350., 1372., 1394., 1416., 2822., 2868., 2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,   0.,   0.,   0.,   0.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98., 101., 104.,  66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,   0.,   0.,   0.,   0.,  44.,  48.,  52.,  56.,  60.,  64.,  68.,  72., 162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200.,   0.,   0.,   0.,   0., 124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392., 402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296., 302., 308., 314., 320.,   0.,   0.,   0.,   0., 204., 208., 212., 216., 220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440.,   0.,   0.,   0.,   0., 183., 186., 189., 192., 195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320.,   0.,   0.,   0.,   0., 243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612., 619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384., 388., 392., 396., 400.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,  1620.,  1672.,  1724.,  1776.,  1828.,   450.,   494.,   538.,   582.,  1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,  4664.,   946.,   990.,  1034.,  1078.,  2928.,  3032.,  3136.,  3240.,  2448.,  2552.,  2656.,  2760.,  5322.,  5502.,  5682.,  5862.,  2984.,  3120.,  3256.,  3392.,  6638.,  6866.,  7094.,  7322.,  3520.,  3688.,  3856.,  4024.,  4192.,  4360.,  4528.,  4696.,  2159.,  2273.,  2387.,  2501.,  4784.,  5036.,  5288.,  5540.,  5792.,  6044.,  6296.,  6548.,  9435.,  9849., 10263., 10677.,  7108.,  7408.,  7708.,  8008., 11409., 11895., 12381., 12867.,  8424.,  8772.,  9120.,  9468.,  9816., 10164., 10512., 10860.,  1762.,  1870.,  1978.,  2086.,  6608.,  6840.,  7072.,  7304.,  4592.,  4824.,  5056.,  5288., 10586., 10958., 11330., 11702.,  5128.,  5392.,  5656.,  5920., 11902., 12322., 12742., 13162.,  5664.,  5960.,  6256.,  6552.,  6848.,  7144.,  7440.,  7736.,  4407.,  4617.,  4827.,  5037.,  9280.,  9724., 10168., 10612., 11056., 11500., 11944., 12388., 17331., 18033., 18735., 19437., 12372., 12864., 13356., 13848., 19305., 20079., 20853., 21627., 13688., 14228., 14768., 15308., 15848., 16388., 16928., 17468.,  2578.,  2750.,  2922.,  3094., 10288., 10648., 11008., 11368.,  6736.,  7096.,  7456.,  7816., 15850., 16414., 16978., 17542.,  7272.,  7664.,  8056.,  8448., 17166., 17778., 18390., 19002.,  7808.,  8232.,  8656.,  9080.,  9504.,  9928., 10352., 10776.,  6018.,  6190.,  6362.,  6534., 12496., 12856., 13216., 13576., 13936., 14296., 14656., 15016., 21626., 22190., 22754., 23318., 15112., 15504., 15896., 16288., 23390., 24002., 24614., 25226., 16288., 16712., 17136., 17560., 17984., 18408., 18832., 19256.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,    0.,    0.,    0.,    0.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,    0.,    0.,    0.,    0.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,    0.,    0.,    0.,    0.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310.,    0.,    0.,    0.,    0., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190.,    0.,    0.,    0.,    0., 1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388., 3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908., 2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393.,    0.,    0.,    0.,    0., 1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,     0.,     0.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,  4022.,  4126.,     0.,     0.,     0.,     0.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,  7784.,  8328.,  8872.,  9416.,  9960., 10504., 11048., 11592., 12136., 12680., 13224., 13768.,  8412.,  8748.,  9084.,  9420.,  9756., 10092., 10428., 10764.,     0.,     0.,     0.,     0.,  5900.,  6108.,  6316.,  6524.,  4172.,  4380.,  4588.,  4796., 16104., 16648., 17192., 17736., 11624., 12168., 12712., 13256., 13800., 14344., 14888., 15432.,  8476.,  8812.,  9148.,  9484.,  9820., 10156., 10492., 10828.,     0.,     0.,     0.,     0.,  7500.,  7708.,  7916.,  8124.,  8332.,  8540.,  8748.,  8956., 20328., 20872., 21416., 21960., 22504., 23048., 23592., 24136., 24680., 25224., 25768., 26312., 15196., 15532., 15868., 16204., 16540., 16876., 17212., 17548.,     0.,     0.,     0.,     0., 10190., 10358., 10526., 10694.,   110.,   278.,   446.,   614., 14852., 15252., 15652., 16052.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,     0.,     0.,     0.,     0.,  2798.,  2966.,  3134.,  3302.,  3470.,  3638.,  3806.,  3974.,  8004.,  8404.,  8804.,  9204.,  9604., 10004., 10404., 10804., 11204., 11604., 12004., 12404.,  6646.,  6878.,  7110.,  7342.,  7574.,  7806.,  8038.,  8270.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,   24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  434.,  900.,  956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  14.,  14.,  19.,  12.,  15.,   0.,   6.,   7.,  20.,  23.,  44.,  39.,  44.,  27.,  30.,   0.,  15.,  20.,  52.,  64., 115.,  96., 112.,  66.,  75.,   0.,  40.,  45., 112., 124., 220., 176., 192., 111., 120.,   0.,  65.,  70., 172., 184., 325., 256., 272., 156., 165.,   0.,  64.,  68., 152., 161., 266., 197., 208., 114., 120.,   0.,  84.,  88., 197., 206., 341., 252., 263., 144., 150.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,   588.,   152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396., 11480.,  7964., 12332.,  8532., 13184.,  9100.,  9636.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,   92.,  128.,   83.,  105.,    0.,   35.,   41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,    0.,   88.,  124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,    0.,  268.,  304.,  780.,  868., 1568., 1276., 1396.,  816.,  884.,    0.,  448.,  484., 1220., 1308., 2348., 1876., 1996., 1156., 1224.,    0.,  473.,  503., 1132., 1200., 1993., 1484., 1568.,  863.,  909.,    0.,  623.,  653., 1472., 1540., 2563., 1904., 1988., 1093., 1139.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  3722.,  2116.,  2644.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,     0.,   230.,   270.,   900.,  1044.,  2138.,  2020.,  2292.,  1454.,  1622.,     0.,   580.,   852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,     0.,  1940.,  2212.,  5784.,  6456., 11788.,  9688., 10616.,  6244.,  6772.,     0.,  3300.,  3572.,  9144.,  9816., 17788., 14328., 15256.,  8884.,  9412.,     0.,  3630.,  3862.,  8724.,  9252., 15410., 11508., 12164.,  6710.,  7070.,     0.,  4790.,  5022., 11364., 11892., 19850., 14788., 15444.,  8510.,  8870.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  172.,  184.,  133.,  142.,  151.,  160.,   41.,   48.,  104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,  329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,  111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,  659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,  214.,  232.,  491.,  530.,  569.,  608.,  951., 1014.,  719.,  764., 1176., 1248.,  869.,  920., 1401., 1482., 1019., 1076., 1133., 1190.,  341.,  358.,  724.,  760.,  796.,  832., 1259., 1316.,  896.,  936., 1409., 1472.,  996., 1040., 1559., 1628., 1096., 1144., 1192., 1240.,  559.,  592., 1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544., 2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,  571.,  598., 1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456., 2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,  841.,  868., 1744., 1800., 1856., 1912., 2879., 2966., 1996., 2056., 3089., 3182., 2136., 2200., 3299., 3398., 2276., 2344., 2412., 2480.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  22.,  28.,  23.,  28.,  33.,  38.,  21.,  24.,  27.,  30.,   0.,   0.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  82.,  88.,  73.,  78.,  83.,  88.,  51.,  54.,  57.,  60.,   0.,   0.,  25.,  30.,  35.,  40.,  92., 104., 116., 128., 209., 230., 176., 192., 208., 224., 123., 132., 141., 150.,   0.,   0.,  75.,  80.,  85.,  90., 212., 224., 236., 248., 419., 440., 336., 352., 368., 384., 213., 222., 231., 240.,   0.,   0., 125., 130., 135., 140., 332., 344., 356., 368., 629., 650., 496., 512., 528., 544., 303., 312., 321., 330.,   0.,   0., 124., 128., 132., 136., 295., 304., 313., 322., 517., 532., 383., 394., 405., 416., 222., 228., 234., 240.,   0.,   0., 164., 168., 172., 176., 385., 394., 403., 412., 667., 682., 493., 504., 515., 526., 282., 288., 294., 300.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,  1265.,  1355.,   988.,  1056.,  1124.,  1192.,   264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   784.,   836.,  1900.,  2020.,  2140.,  2260.,  3724.,  3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,  6100.,  6400.,  4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,  3880.,  4180.,  4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,  6556.,  6952., 10605., 11235.,  7744.,  8188.,  8632.,  9076.,  2604.,  2736.,  5540.,  5820.,  6100.,  6380.,  9664., 10108.,  6892.,  7204., 10852., 11344.,  7684.,  8028., 12040., 12580.,  8476.,  8852.,  9228.,  9604.,  4271.,  4529.,  9040.,  9580., 10120., 10660., 15951., 16797., 11308., 11896., 17733., 18651., 12496., 13132., 19515., 20505., 13684., 14368., 15052., 15736.,  4424.,  4636.,  9180.,  9620., 10060., 10500., 15604., 16288., 10852., 11324., 16792., 17524., 11644., 12148., 17980., 18760., 12436., 12972., 13508., 14044.,  6544.,  6756., 13580., 14020., 14460., 14900., 22444., 23128., 15572., 16044., 24112., 24844., 16684., 17188., 25780., 26560., 17796., 18332., 18868., 19404.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  557.,  599.,  516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,    0.,    0.,  148.,  184.,  220.,  256.,  612.,  700.,  788.,  876., 1456., 1612., 1260., 1380., 1500., 1620.,  900.,  968., 1036., 1104.,    0.,    0.,  508.,  544.,  580.,  616., 1492., 1580., 1668., 1756., 3016., 3172., 2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784.,    0.,    0.,  868.,  904.,  940.,  976., 2372., 2460., 2548., 2636., 4576., 4732., 3660., 3780., 3900., 4020., 2260., 2328., 2396., 2464.,    0.,    0.,  923.,  953.,  983., 1013., 2212., 2280., 2348., 2416., 3899., 4013., 2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829.,    0.,    0., 1223., 1253., 1283., 1313., 2892., 2960., 3028., 3096., 5039., 5153., 3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,  3134.,  3302.,     0.,     0.,   980.,  1252.,  1524.,  1796.,  4408.,  5080.,  5752.,  6424., 10796., 11996.,  9496., 10424., 11352., 12280.,  6868.,  7396.,  7924.,  8452.,     0.,     0.,  3700.,  3972.,  2964.,  3236.,  9848., 10520.,  7864.,  8536., 18188., 19388., 10072., 11000., 11928., 12856.,  6772.,  7300.,  7828.,  8356.,     0.,     0.,  5140.,  5412.,  5684.,  5956., 13240., 13912., 14584., 15256., 24812., 26012., 19352., 20280., 21208., 22136., 12052., 12580., 13108., 13636.,     0.,     0.,  7110.,  7342.,   150.,   382.,  9684., 10212.,  1268.,  1796., 13354., 14242.,  1604.,  2260.,  2916.,  3572.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,  2006.,  2238.,  2470.,  2702.,  5492.,  6020.,  6548.,  7076., 10714., 11602.,  8164.,  8820.,  9476., 10132.,  5270.,  5630.,  5990.,  6350.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  332.,  344.,  356.,  368.,  257.,  266.,  275.,  284.,  293.,  302.,  311.,  320.,   75.,   82.,   89.,   96.,  192.,  208.,  224.,  240.,  256.,  272.,  288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,  625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,  877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,  215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,  608.,  624.,  991., 1018., 1045., 1072.,  772.,  792.,  812.,  832., 1285., 1318., 1351., 1384.,  968.,  992., 1016., 1040., 1579., 1618., 1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,  410.,  428.,  446.,  464.,  943.,  982., 1021., 1060., 1099., 1138., 1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528., 2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802., 2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,  665.,  682.,  699.,  716., 1412., 1448., 1484., 1520., 1556., 1592., 1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872., 2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118., 3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480., 1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638., 2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088., 4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052., 5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060., 1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592., 2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912., 4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618., 4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600., 1655., 1682., 1709., 1736., 3432., 3488., 3544., 3600., 3656., 3712., 3768., 3824., 5671., 5758., 5845., 5932., 3932., 3992., 4052., 4112., 6085., 6178., 6271., 6364., 4208., 4272., 4336., 4400., 6499., 6598., 6697., 6796., 4484., 4552., 4620., 4688., 4756., 4824., 4892., 4960.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,   41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,   45.,   48.,   51.,   54.,   57.,   60.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,  102.,  105.,  108.,  111.,  114.,  117.,  120.,    0.,    0.,    0.,    0.,   45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,  172.,  184.,  196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,  336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,  255.,  264.,  273.,  282.,  291.,  300.,    0.,    0.,    0.,    0.,  145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,  436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,  656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,  435.,  444.,  453.,  462.,  471.,  480.,    0.,    0.,    0.,    0.,  245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,  676.,  688.,  700.,  712.,  724.,  736., 1237., 1258., 1279., 1300.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088.,  597.,  606.,  615.,  624.,  633.,  642.,  651.,  660.,    0.,    0.,    0.,    0.,  244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,  599.,  608.,  617.,  626.,  635.,  644., 1019., 1034., 1049., 1064.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,  779.,  788.,  797.,  806.,  815.,  824., 1319., 1334., 1349., 1364.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,  1620.,  2461.,  2551.,  2641.,  2731.,  1924.,  1992.,  2060.,  2128.,  2196.,  2264.,  2332.,  2400.,   488.,   540.,   592.,   644.,  1308.,  1428.,  1548.,  1668.,  1788.,  1908.,  2028.,  2148.,  3212.,  3416.,  3620.,  3824.,  2708.,  2860.,  3012.,  3164.,  4592.,  4844.,  5096.,  5348.,  3628.,  3812.,  3996.,  4180.,  5972.,  6272.,  6572.,  6872.,  4548.,  4764.,  4980.,  5196.,  5412.,  5628.,  5844.,  6060.,  1144.,  1196.,  1248.,  1300.,  3324.,  3444.,  3564.,  3684.,  2908.,  3028.,  3148.,  3268.,  6012.,  6216.,  6420.,  6624.,  3444.,  3596.,  3748.,  3900.,  7328.,  7580.,  7832.,  8084.,  3980.,  4164.,  4348.,  4532.,  8644.,  8944.,  9244.,  9544.,  4516.,  4732.,  4948.,  5164.,  5380.,  5596.,  5812.,  6028.,  2593.,  2731.,  2869.,  3007.,  5652.,  5952.,  6252.,  6552.,  6852.,  7152.,  7452.,  7752., 11025., 11511., 11997., 12483.,  8168.,  8516.,  8864.,  9212., 12999., 13557., 14115., 14673.,  9484.,  9880., 10276., 10672., 14973., 15603., 16233., 16863., 10800., 11244., 11688., 12132., 12576., 13020., 13464., 13908.,  2164.,  2296.,  2428.,  2560.,  7924.,  8204.,  8484.,  8764.,  5588.,  5868.,  6148.,  6428., 12592., 13036., 13480., 13924.,  6124.,  6436.,  6748.,  7060., 13908., 14400., 14892., 15384.,  6660.,  7004.,  7348.,  7692., 15224., 15764., 16304., 16844.,  7196.,  7572.,  7948.,  8324.,  8700.,  9076.,  9452.,  9828.,  5403.,  5661.,  5919.,  6177., 11272., 11812., 12352., 12892., 13432., 13972., 14512., 15052., 20895., 21741., 22587., 23433., 14748., 15336., 15924., 16512., 22869., 23787., 24705., 25623., 16064., 16700., 17336., 17972., 24843., 25833., 26823., 27813., 17380., 18064., 18748., 19432., 20116., 20800., 21484., 22168.,  3184.,  3396.,  3608.,  3820., 12524., 12964., 13404., 13844.,  8268.,  8708.,  9148.,  9588., 19172., 19856., 20540., 21224.,  8804.,  9276.,  9748., 10220., 20488., 21220., 21952., 22684.,  9340.,  9844., 10348., 10852., 21804., 22584., 23364., 24144.,  9876., 10412., 10948., 11484., 12020., 12556., 13092., 13628.,  7424.,  7636.,  7848.,  8060., 15308., 15748., 16188., 16628., 17068., 17508., 17948., 18388., 26324., 27008., 27692., 28376., 18244., 18716., 19188., 19660., 28088., 28820., 29552., 30284., 19420., 19924., 20428., 20932., 29852., 30632., 31412., 32192., 20596., 21132., 21668., 22204., 22740., 23276., 23812., 24348.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1148.,  1184.,  1220.,  1256.,   721.,   743.,   765.,   787.,   809.,   831.,   853.,   875.,     0.,     0.,     0.,     0.,   268.,   304.,   340.,   376.,   412.,   448.,   484.,   520.,  1156.,  1244.,  1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,  3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,  1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,     0.,     0.,     0.,     0.,   988.,  1024.,  1060.,  1096.,  1132.,  1168.,  1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,  3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,  5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,  3448.,  3516.,  3584.,     0.,     0.,     0.,     0.,  1708.,  1744.,  1780.,  1816.,  1852.,  1888.,  1924.,  1960.,  4676.,  4764.,  4852.,  4940.,  5028.,  5116.,  5204.,  5292.,  9032.,  9188.,  9344.,  9500.,  7228.,  7348.,  7468.,  7588.,  7708.,  7828.,  7948.,  8068.,  4468.,  4536.,  4604.,  4672.,  4740.,  4808.,  4876.,  4944.,     0.,     0.,     0.,     0.,  1823.,  1853.,  1883.,  1913.,  1943.,  1973.,  2003.,  2033.,  4372.,  4440.,  4508.,  4576.,  4644.,  4712.,  4780.,  4848.,  7711.,  7825.,  7939.,  8053.,  5744.,  5828.,  5912.,  5996.,  6080.,  6164.,  6248.,  6332.,  3347.,  3393.,  3439.,  3485.,  3531.,  3577.,  3623.,  3669.,     0.,     0.,     0.,     0.,  2423.,  2453.,  2483.,  2513.,  2543.,  2573.,  2603.,  2633.,  5732.,  5800.,  5868.,  5936.,  6004.,  6072.,  6140.,  6208.,  9991., 10105., 10219., 10333.,  7424.,  7508.,  7592.,  7676.,  7760.,  7844.,  7928.,  8012.,  4267.,  4313.,  4359.,  4405.,  4451.,  4497.,  4543.,  4589.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1682.,  1994.,  2306.,  2618.,  2100.,  2372.,  2644.,  2916.,  3188.,  3460.,  3732.,  4004.,  2126.,  2294.,  2462.,  2630.,  2798.,  2966.,  3134.,  3302.,     0.,     0.,     0.,     0.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  2596.,  2740.,  2884.,  3028.,  6642.,  6954.,  7266.,  7578.,  4212.,  4484.,  4756.,  5028.,  5300.,  5572.,  5844.,  6116.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   500.,   772.,  1044.,  1316.,  1588.,  1860.,  2132.,  2404.,  3768.,  4440.,  5112.,  5784.,  6456.,  7128.,  7800.,  8472., 10828., 12028., 13228., 14428.,  9688., 10616., 11544., 12472., 13400., 14328., 15256., 16184.,  8020.,  8548.,  9076.,  9604., 10132., 10660., 11188., 11716.,     0.,     0.,     0.,     0.,  5940.,  6212.,  6484.,  6756.,  5748.,  6020.,  6292.,  6564., 15928., 16600., 17272., 17944.,  7864.,  8536.,  9208.,  9880., 22796., 23996., 25196., 26396., 10072., 11000., 11928., 12856., 13784., 14712., 15640., 16568.,  1684.,  2212.,  2740.,  3268.,  3796.,  4324.,  4852.,  5380.,     0.,     0.,     0.,     0.,  2676.,  2948.,  3220.,  3492.,  3764.,  4036.,  4308.,  4580.,  9144.,  9816., 10488., 11160., 11832., 12504., 13176., 13848., 19148., 20348., 21548., 22748., 17112., 18040., 18968., 19896., 17496., 18424., 19352., 20280., 12244., 12772., 13300., 13828.,  8980.,  9508., 10036., 10564.,     0.,     0.,     0.,     0.,  6646.,  6878.,  7110.,  7342.,   150.,   382.,   614.,   846.,  9556., 10084., 10612., 11140.,  2196.,  2724.,  3252.,  3780., 14618., 15506., 16394., 17282.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3110.,  3470.,  3830.,  4190.,  4550.,  4910.,  5270.,  5630.,     0.,     0.,     0.,     0.,  3862.,  4094.,  4326.,  4558.,  4790.,  5022.,  5254.,  5486., 10644., 11172., 11700., 12228., 12756., 13284., 13812., 14340., 13434., 14322., 15210., 16098., 15908., 16564., 17220., 17876.,  9060.,  9716., 10372., 11028., 10310., 10670., 11030., 11390.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  809.,  890., 1386.,  968., 1503., 1046., 1139.,  702.,  764., 1180.,  816., 1258.,  868.,  938., 1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98., 108., 118.,  74.,  80.,  59.,  68., 169., 190., 211., 128., 140.,  78.,  86., 194., 212., 230., 130., 140., 118., 126., 284., 302., 320., 180., 190.,  80.,  85., 186., 197., 208., 114., 120., 105., 110., 241., 252., 263., 144., 150.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  7840.,  8328., 12878.,  8896., 13730.,  9464., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457., 1172., 1328., 1484.,  919., 1009.,  566.,  626., 1424., 1560., 1696.,  966., 1042.,  866.,  926., 2104., 2240., 2376., 1346., 1422.,  599.,  637., 1400., 1484., 1568.,  863.,  909.,  789.,  827., 1820., 1904., 1988., 1093., 1139.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,  4284.,  2810.,  3314.,  8668.,  9868., 11068.,  6938.,  7634.,  4300.,  4764., 10888., 11944., 13000.,  7436.,  8028.,  6620.,  7084., 16168., 17224., 18280., 10396., 10988.,  4630.,  4926., 10852., 11508., 12164.,  6710.,  7070.,  6110.,  6406., 14132., 14788., 15444.,  8510.,  8870.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1537., 1618., 1699., 1780., 2646., 2772., 1849., 1936., 2871., 3006., 1999., 2092., 2185., 2278., 1342., 1404., 1466., 1528., 2264., 2360., 1566., 1632., 2414., 2516., 1666., 1736., 1806., 1876., 1962., 2024., 2086., 2148., 3224., 3320., 2226., 2292., 3434., 3536., 2366., 2436., 2506., 2576.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160., 109., 118., 127., 136., 317., 338., 359., 380., 401., 422., 244., 256., 268., 280., 148., 156., 164., 172., 370., 388., 406., 424., 442., 460., 250., 260., 270., 280., 228., 236., 244., 252., 550., 568., 586., 604., 622., 640., 350., 360., 370., 380., 155., 160., 165., 170., 361., 372., 383., 394., 405., 416., 222., 228., 234., 240., 205., 210., 215., 220., 471., 482., 493., 504., 515., 526., 282., 288., 294., 300.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096., 11864., 12500., 13136., 13772., 20475., 21465., 14324., 15008., 22257., 23319., 15512., 16244., 16976., 17708., 10432., 10920., 11408., 11896., 17626., 18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648., 15312., 15800., 16288., 16776., 25186., 25942., 17400., 17920., 26854., 27658., 18512., 19064., 19616., 20168.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,  731.,  797.,  863.,  929., 2224., 2380., 2536., 2692., 2848., 3004., 1769., 1859., 1949., 2039., 1086., 1146., 1206., 1266., 2744., 2880., 3016., 3152., 3288., 3424., 1874., 1950., 2026., 2102., 1686., 1746., 1806., 1866., 4104., 4240., 4376., 4512., 4648., 4784., 2634., 2710., 2786., 2862., 1169., 1207., 1245., 1283., 2736., 2820., 2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829., 1549., 1587., 1625., 1663., 3576., 3660., 3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  2156.,  2364.,  8232.,  8776.,  5992.,  6536.,  7080.,  7624.,  4348.,  4684.,  5020.,  5356.,  4010.,  4514.,  5018.,  5522., 11948., 13148., 14348., 15548., 16748., 17948., 10098., 10794., 11490., 12186.,  8300.,  8764.,  3852.,  4316., 15720., 16776., 10408., 11464., 12520., 13576.,  7068.,  7660.,  8252.,  8844.,  7564.,  8028.,  8492.,  8956., 18856., 19912., 20968., 22024., 23080., 24136., 12988., 13580., 14172., 14764.,  9070.,  9366.,   190.,   486., 11812., 12468.,  1604.,  2260.,  2916.,  3572.,  1670.,  2030.,  2390.,  2750.,  2558.,  2854.,  3150.,  3446.,  6852.,  7508.,  8164.,  8820.,  9476., 10132.,  5270.,  5630.,  5990.,  6350.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 2993., 3074., 3155., 3236., 3317., 3398., 3479., 3560., 5166., 5292., 5418., 5544., 3611., 3698., 3785., 3872., 5607., 5742., 5877., 6012., 3905., 3998., 4091., 4184., 4277., 4370., 4463., 4556., 2622., 2684., 2746., 2808., 2870., 2932., 2994., 3056., 4432., 4528., 4624., 4720., 3066., 3132., 3198., 3264., 4726., 4828., 4930., 5032., 3262., 3332., 3402., 3472., 3542., 3612., 3682., 3752., 3862., 3924., 3986., 4048., 4110., 4172., 4234., 4296., 6352., 6448., 6544., 6640., 4386., 4452., 4518., 4584., 6766., 6868., 6970., 7072., 4662., 4732., 4802., 4872., 4942., 5012., 5082., 5152.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,  288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,  758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  448.,  456.,  464.,  472.,  480.,  488.,  496.,  504., 1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,  305.,  310.,  315.,  320.,  325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,  405.,  410.,  415.,  420.,  425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  7856.,  8344.,  8832.,  9320.,  9808., 10296., 10784., 11272., 11786., 12542., 13298., 14054., 10472., 10992., 11512., 12032., 12526., 13330., 14134., 14938., 11136., 11688., 12240., 12792.,  9568., 10120., 10672., 11224.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310., 1411., 1477., 1543., 1609., 1675., 1741., 1807., 1873., 4328., 4484., 4640., 4796., 4952., 5108., 5264., 5420., 5576., 5732., 5888., 6044., 3469., 3559., 3649., 3739., 3829., 3919., 4009., 4099., 2126., 2186., 2246., 2306., 2366., 2426., 2486., 2546., 5384., 5520., 5656., 5792., 5928., 6064., 6200., 6336., 6472., 6608., 6744., 6880., 3690., 3766., 3842., 3918., 3994., 4070., 4146., 4222., 3326., 3386., 3446., 3506., 3566., 3626., 3686., 3746., 8104., 8240., 8376., 8512., 8648., 8784., 8920., 9056., 9192., 9328., 9464., 9600., 5210., 5286., 5362., 5438., 5514., 5590., 5666., 5742., 2309., 2347., 2385., 2423., 2461., 2499., 2537., 2575., 5408., 5492., 5576., 5660., 5744., 5828., 5912., 5996., 6080., 6164., 6248., 6332., 3347., 3393., 3439., 3485., 3531., 3577., 3623., 3669., 3069., 3107., 3145., 3183., 3221., 3259., 3297., 3335., 7088., 7172., 7256., 7340., 7424., 7508., 7592., 7676., 7760., 7844., 7928., 8012., 4267., 4313., 4359., 4405., 4451., 4497., 4543., 4589.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  2596.,  2740.,  2884.,  3028.,  3172.,  3316.,  3460.,  3604.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  3176.,  3720.,  4264.,  4808.,  5352.,  5896.,  6440.,  6984.,  7528.,  8072.,  8616.,  9160.,  5084.,  5420.,  5756.,  6092.,  6428.,  6764.,  7100.,  7436.,  4620.,  4828.,  5036.,  5244.,  4172.,  4380.,  4588.,  4796., 12776., 13320., 13864., 14408.,  6248.,  6792.,  7336.,  7880.,  8424.,  8968.,  9512., 10056.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,  2314.,  2818.,  3322.,  3826.,  4330.,  4834.,  5338.,  5842., 10316., 11516., 12716., 13916., 15116., 16316., 17516., 18716., 18636., 19836., 21036., 22236., 12322., 13018., 13714., 14410., 11778., 12474., 13170., 13866., 10924., 11388., 11852., 12316.,  7404.,  7868.,  8332.,  8796., 23336., 24392., 25448., 26504., 10664., 11720., 12776., 13832., 14888., 15944., 17000., 18056.,  2236.,  2828.,  3420.,  4012.,  4604.,  5196.,  5788.,  6380.,  5356.,  5820.,  6284.,  6748.,  7212.,  7676.,  8140.,  8604., 16040., 17096., 18152., 19208., 20264., 21320., 22376., 23432., 19112., 20168., 21224., 22280., 14076., 14668., 15260., 15852.,  9020.,  9612., 10204., 10796.,  8478.,  8774.,  9070.,  9366.,   190.,   486.,   782.,  1078., 11684., 12340., 12996., 13652.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3110.,  3470.,  3830.,  4190.,  4550.,  4910.,  5270.,  5630.,  4926.,  5222.,  5518.,  5814.,  6110.,  6406.,  6702.,  6998., 13284., 13940., 14596., 15252., 15908., 16564., 17220., 17876.,  9060.,  9716., 10372., 11028., 10310., 10670., 11030., 11390.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  388.,  809.,  890., 1386.,  968., 1503., 1046., 1139.,  340.,  702.,  764., 1180.,  816., 1258.,  868.,  938.,  490., 1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   0.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,   0.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,   0.,  34.,  38.,  98., 108., 118.,  74.,  80.,   0.,  59.,  68., 169., 190., 211., 128., 140.,   0.,  78.,  86., 194., 212., 230., 130., 140.,   0., 118., 126., 284., 302., 320., 180., 190.,   0.,  80.,  85., 186., 197., 208., 114., 120.,   0., 105., 110., 241., 252., 263., 144., 150.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2957.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  3794.,  7840.,  8328., 12878.,  8896., 13730.,  9464., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  391.,  457., 1172., 1328., 1484.,  919., 1009.,    0.,  566.,  626., 1424., 1560., 1696.,  966., 1042.,    0.,  866.,  926., 2104., 2240., 2376., 1346., 1422.,    0.,  599.,  637., 1400., 1484., 1568.,  863.,  909.,    0.,  789.,  827., 1820., 1904., 1988., 1093., 1139.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  1820.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,     0.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,     0.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,     0.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,  4284.,     0.,  2810.,  3314.,  8668.,  9868., 11068.,  6938.,  7634.,     0.,  4300.,  4764., 10888., 11944., 13000.,  7436.,  8028.,     0.,  6620.,  7084., 16168., 17224., 18280., 10396., 10988.,     0.,  4630.,  4926., 10852., 11508., 12164.,  6710.,  7070.,     0.,  6110.,  6406., 14132., 14788., 15444.,  8510.,  8870.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,   98.,  104.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  461.,  488.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  466.,  488.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428.,  737.,  776., 1537., 1618., 1699., 1780., 2646., 2772., 1849., 1936., 2871., 3006., 1999., 2092., 2185., 2278.,  650.,  680., 1342., 1404., 1466., 1528., 2264., 2360., 1566., 1632., 2414., 2516., 1666., 1736., 1806., 1876.,  950.,  980., 1962., 2024., 2086., 2148., 3224., 3320., 2226., 2292., 3434., 3536., 2366., 2436., 2506., 2576.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  14.,  16.,  18.,  20.,   0.,   0.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,   0.,   0.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136.,  82.,  88.,  94., 100.,   0.,   0.,  64.,  68.,  72.,  76., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160.,   0.,   0., 109., 118., 127., 136., 317., 338., 359., 380., 401., 422., 244., 256., 268., 280.,   0.,   0., 148., 156., 164., 172., 370., 388., 406., 424., 442., 460., 250., 260., 270., 280.,   0.,   0., 228., 236., 244., 252., 550., 568., 586., 604., 622., 640., 350., 360., 370., 380.,   0.,   0., 155., 160., 165., 170., 361., 372., 383., 394., 405., 416., 222., 228., 234., 240.,   0.,   0., 205., 210., 215., 220., 471., 482., 493., 504., 515., 526., 282., 288., 294., 300.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   682.,   726.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,  3709.,  7496.,  7940.,  8384.,  8828., 13347., 14049.,  9572., 10064., 15129., 15903., 10760., 11300., 11840., 12380.,  3594.,  3766.,  7520.,  7880.,  8240.,  8600., 12874., 13438.,  9032.,  9424., 14062., 14674.,  9824., 10248., 10672., 11096.,  5683.,  5989., 11864., 12500., 13136., 13772., 20475., 21465., 14324., 15008., 22257., 23319., 15512., 16244., 16976., 17708.,  5050.,  5286., 10432., 10920., 11408., 11896., 17626., 18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648.,  7410.,  7646., 15312., 15800., 16288., 16776., 25186., 25942., 17400., 17920., 26854., 27658., 18512., 19064., 19616., 20168.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,   95.,  109.,  123.,  137.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,    0.,    0.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,  666.,  710.,    0.,    0.,  422.,  450.,  478.,  506., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,    0.,    0.,  731.,  797.,  863.,  929., 2224., 2380., 2536., 2692., 2848., 3004., 1769., 1859., 1949., 2039.,    0.,    0., 1086., 1146., 1206., 1266., 2744., 2880., 3016., 3152., 3288., 3424., 1874., 1950., 2026., 2102.,    0.,    0., 1686., 1746., 1806., 1866., 4104., 4240., 4376., 4512., 4648., 4784., 2634., 2710., 2786., 2862.,    0.,    0., 1169., 1207., 1245., 1283., 2736., 2820., 2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829.,    0.,    0., 1549., 1587., 1625., 1663., 3576., 3660., 3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,  5324.,     0.,     0.,  3020.,  3228.,  2156.,  2364.,  8232.,  8776.,  5992.,  6536.,  7080.,  7624.,  4348.,  4684.,  5020.,  5356.,     0.,     0.,  4010.,  4514.,  5018.,  5522., 11948., 13148., 14348., 15548., 16748., 17948., 10098., 10794., 11490., 12186.,     0.,     0.,  8300.,  8764.,  3852.,  4316., 15720., 16776., 10408., 11464., 12520., 13576.,  7068.,  7660.,  8252.,  8844.,     0.,     0.,  7564.,  8028.,  8492.,  8956., 18856., 19912., 20968., 22024., 23080., 24136., 12988., 13580., 14172., 14764.,     0.,     0.,  9070.,  9366.,   190.,   486., 11812., 12468.,  1604.,  2260.,  2916.,  3572.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,  2558.,  2854.,  3150.,  3446.,  6852.,  7508.,  8164.,  8820.,  9476., 10132.,  5270.,  5630.,  5990.,  6350.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,   70.,   76.,   82.,   88.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,  750.,  768., 1198., 1228., 1258., 1288.,  910.,  932.,  954.,  976.,  998., 1020., 1042., 1064.,  355.,  370.,  385.,  400.,  833.,  866.,  899.,  932.,  965.,  998., 1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868.,  550.,  564.,  578.,  592., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,  895.,  922.,  949.,  976., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212.,  910.,  932.,  954.,  976., 1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 1435., 1474., 1513., 1552., 2993., 3074., 3155., 3236., 3317., 3398., 3479., 3560., 5166., 5292., 5418., 5544., 3611., 3698., 3785., 3872., 5607., 5742., 5877., 6012., 3905., 3998., 4091., 4184., 4277., 4370., 4463., 4556., 1270., 1300., 1330., 1360., 2622., 2684., 2746., 2808., 2870., 2932., 2994., 3056., 4432., 4528., 4624., 4720., 3066., 3132., 3198., 3264., 4726., 4828., 4930., 5032., 3262., 3332., 3402., 3472., 3542., 3612., 3682., 3752., 1870., 1900., 1930., 1960., 3862., 3924., 3986., 4048., 4110., 4172., 4234., 4296., 6352., 6448., 6544., 6640., 4386., 4452., 4518., 4584., 6766., 6868., 6970., 7072., 4662., 4732., 4802., 4872., 4942., 5012., 5082., 5152.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,    0.,    0.,    0.,    0.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,    0.,    0.,    0.,    0.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,    0.,    0.,    0.,    0.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,    0.,    0.,    0.,    0.,  288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,  758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,    0.,    0.,    0.,    0.,  448.,  456.,  464.,  472.,  480.,  488.,  496.,  504., 1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,    0.,    0.,    0.,    0.,  305.,  310.,  315.,  320.,  325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  405.,  410.,  415.,  420.,  425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  3391.,  3697.,  4003.,  4309.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516.,  3394.,  3630.,  3866.,  4102., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  3826.,  4062.,  4298.,  4534.,  7856.,  8344.,  8832.,  9320.,  9808., 10296., 10784., 11272., 11786., 12542., 13298., 14054., 10472., 10992., 11512., 12032., 12526., 13330., 14134., 14938., 11136., 11688., 12240., 12792.,  9568., 10120., 10672., 11224.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,  104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,  179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,    0.,    0.,    0.,    0.,  125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,    0.,    0.,    0.,    0.,  262.,  290.,  318.,  346.,  374.,  402.,  430.,  458., 1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342., 1386., 1430.,    0.,    0.,    0.,    0.,  822.,  850.,  878.,  906.,  934.,  962.,  990., 1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222., 2266., 2310.,    0.,    0.,    0.,    0., 1411., 1477., 1543., 1609., 1675., 1741., 1807., 1873., 4328., 4484., 4640., 4796., 4952., 5108., 5264., 5420., 5576., 5732., 5888., 6044., 3469., 3559., 3649., 3739., 3829., 3919., 4009., 4099.,    0.,    0.,    0.,    0., 2126., 2186., 2246., 2306., 2366., 2426., 2486., 2546., 5384., 5520., 5656., 5792., 5928., 6064., 6200., 6336., 6472., 6608., 6744., 6880., 3690., 3766., 3842., 3918., 3994., 4070., 4146., 4222.,    0.,    0.,    0.,    0., 3326., 3386., 3446., 3506., 3566., 3626., 3686., 3746., 8104., 8240., 8376., 8512., 8648., 8784., 8920., 9056., 9192., 9328., 9464., 9600., 5210., 5286., 5362., 5438., 5514., 5590., 5666., 5742.,    0.,    0.,    0.,    0., 2309., 2347., 2385., 2423., 2461., 2499., 2537., 2575., 5408., 5492., 5576., 5660., 5744., 5828., 5912., 5996., 6080., 6164., 6248., 6332., 3347., 3393., 3439., 3485., 3531., 3577., 3623., 3669.,    0.,    0.,    0.,    0., 3069., 3107., 3145., 3183., 3221., 3259., 3297., 3335., 7088., 7172., 7256., 7340., 7424., 7508., 7592., 7676., 7760., 7844., 7928., 8012., 4267., 4313., 4359., 4405., 4451., 4497., 4543., 4589.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1572.,  1716.,  1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,  2046.,     0.,     0.,     0.,     0.,   830.,   870.,   910.,   950.,   990.,  1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  2596.,  2740.,  2884.,  3028.,  3172.,  3316.,  3460.,  3604.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  3176.,  3720.,  4264.,  4808.,  5352.,  5896.,  6440.,  6984.,  7528.,  8072.,  8616.,  9160.,  5084.,  5420.,  5756.,  6092.,  6428.,  6764.,  7100.,  7436.,     0.,     0.,     0.,     0.,  4620.,  4828.,  5036.,  5244.,  4172.,  4380.,  4588.,  4796., 12776., 13320., 13864., 14408.,  6248.,  6792.,  7336.,  7880.,  8424.,  8968.,  9512., 10056.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,     0.,     0.,     0.,     0.,  2314.,  2818.,  3322.,  3826.,  4330.,  4834.,  5338.,  5842., 10316., 11516., 12716., 13916., 15116., 16316., 17516., 18716., 18636., 19836., 21036., 22236., 12322., 13018., 13714., 14410., 11778., 12474., 13170., 13866.,     0.,     0.,     0.,     0., 10924., 11388., 11852., 12316.,  7404.,  7868.,  8332.,  8796., 23336., 24392., 25448., 26504., 10664., 11720., 12776., 13832., 14888., 15944., 17000., 18056.,  2236.,  2828.,  3420.,  4012.,  4604.,  5196.,  5788.,  6380.,     0.,     0.,     0.,     0.,  5356.,  5820.,  6284.,  6748.,  7212.,  7676.,  8140.,  8604., 16040., 17096., 18152., 19208., 20264., 21320., 22376., 23432., 19112., 20168., 21224., 22280., 14076., 14668., 15260., 15852.,  9020.,  9612., 10204., 10796.,     0.,     0.,     0.,     0.,  8478.,  8774.,  9070.,  9366.,   190.,   486.,   782.,  1078., 11684., 12340., 12996., 13652.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3110.,  3470.,  3830.,  4190.,  4550.,  4910.,  5270.,  5630.,     0.,     0.,     0.,     0.,  4926.,  5222.,  5518.,  5814.,  6110.,  6406.,  6702.,  6998., 13284., 13940., 14596., 15252., 15908., 16564., 17220., 17876.,  9060.,  9716., 10372., 11028., 10310., 10670., 11030., 11390.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,   24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  476.,  985., 1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,  419.,  860.,  936., 1438.,  988., 1516., 1040., 1594., 1092., 1180.,  604., 1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  14.,  14.,  19.,  12.,  15.,   0.,   6.,   7.,  20.,  23.,  44.,  39.,  44.,  27.,  30.,   0.,  15.,  20.,  52.,  64., 115.,  96., 112.,  66.,  75.,   0.,  40.,  45., 112., 124., 220., 176., 192., 111., 120.,   0.,  72.,  84., 201., 228., 393., 306., 339., 192., 210.,   0., 106., 117., 256., 280., 454., 332., 360., 195., 210.,   0., 161., 172., 376., 400., 649., 472., 500., 270., 285.,   0., 112., 119., 254., 269., 428., 305., 322., 171., 180.,   0., 147., 154., 329., 344., 548., 390., 407., 216., 225.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,   588.,   152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,  8324., 12885.,  8936., 13803.,  9548., 14721., 10160., 11084.,  3232.,  6636.,  7236., 11120.,  7644., 11732.,  8052., 12344.,  8460.,  9156.,  4692.,  9636., 10236., 15740., 10804., 16592., 11372., 17444., 11940., 12636.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,   92.,  128.,   83.,  105.,    0.,   35.,   41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,    0.,   88.,  124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,    0.,  268.,  304.,  780.,  868., 1568., 1276., 1396.,  816.,  884.,    0.,  489.,  579., 1416., 1620., 2829., 2232., 2484., 1419., 1557.,    0.,  784.,  868., 1908., 2092., 3404., 2500., 2716., 1476., 1592.,    0., 1204., 1288., 2828., 3012., 4904., 3580., 3796., 2056., 2172.,    0.,  851.,  905., 1936., 2052., 3271., 2336., 2468., 1313., 1383.,    0., 1121., 1175., 2516., 2632., 4201., 2996., 3128., 1663., 1733.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  3722.,  2116.,  2644.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  3210.,  5580.,  7164.,  9326.,  6060.,  8086.,  7836.,  9918.,  8780.,  7612.,  2276.,  5400.,  3896.,  8268.,  3224.,  8188.,  3896.,  7084.,  1176.,  2104.,  3828.,  5752.,  6936.,  5820.,  4472.,  7148.,  5912.,  7452.,  5496.,  5080.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,     0.,   230.,   270.,   900.,  1044.,  2138.,  2020.,  2292.,  1454.,  1622.,     0.,   580.,   852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,     0.,  1940.,  1572.,  5144.,  4152.,  9484.,  5336.,  6264.,  3556.,  4084.,     0.,  2930.,  3626.,  8268.,  9852., 16398., 12652., 14620.,  8202.,  9282.,     0.,  6020.,  2964., 11000.,  7704., 17884.,  8888., 10584.,  5716.,  6628.,     0.,  5588.,  6244., 13464., 14904., 23884., 17368., 19064., 10276., 11188.,     0.,  6630.,   270.,  8324.,  1428., 10970.,  1636.,  2676.,  1454.,  2006.,     0.,  1966.,  2390.,  5076.,  5988.,  9458.,  6836.,  7876.,  4214.,  4766.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  172.,  184.,  133.,  142.,  151.,  160.,   41.,   48.,  104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,  329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,  111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,  659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,  214.,  232.,  491.,  530.,  569.,  608.,  951., 1014.,  719.,  764., 1176., 1248.,  869.,  920., 1401., 1482., 1019., 1076., 1133., 1190.,  341.,  358.,  724.,  760.,  796.,  832., 1259., 1316.,  896.,  936., 1409., 1472.,  996., 1040., 1559., 1628., 1096., 1144., 1192., 1240.,  559.,  592., 1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544., 2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,  571.,  598., 1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456., 2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,  904.,  952., 1871., 1970., 2069., 2168., 3201., 3354., 2219., 2324., 3426., 3588., 2369., 2480., 3651., 3822., 2519., 2636., 2753., 2870.,  801.,  838., 1644., 1720., 1796., 1872., 2759., 2876., 1896., 1976., 2909., 3032., 1996., 2080., 3059., 3188., 2096., 2184., 2272., 2360., 1171., 1208., 2404., 2480., 2556., 2632., 3929., 4046., 2696., 2776., 4139., 4262., 2836., 2920., 4349., 4478., 2976., 3064., 3152., 3240.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,    0.,    0.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,    0.,    0.,   75.,   80.,   85.,   90.,  212.,  224.,  236.,  248.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,    0.,    0.,  132.,  144.,  156.,  168.,  375.,  402.,  429.,  456.,  741.,  786.,  579.,  612.,  645.,  678.,  366.,  384.,  402.,  420.,    0.,    0.,  201.,  212.,  223.,  234.,  488.,  512.,  536.,  560.,  869.,  908.,  636.,  664.,  692.,  720.,  375.,  390.,  405.,  420.,    0.,    0.,  311.,  322.,  333.,  344.,  728.,  752.,  776.,  800., 1259., 1298.,  916.,  944.,  972., 1000.,  525.,  540.,  555.,  570.,    0.,    0.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  832.,  856.,  593.,  610.,  627.,  644.,  333.,  342.,  351.,  360.,    0.,    0.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688., 1072., 1096.,  763.,  780.,  797.,  814.,  423.,  432.,  441.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,  1265.,  1355.,   988.,  1056.,  1124.,  1192.,   264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   592.,   644.,  1708.,  1828.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  3760.,  4012.,  2060.,  2244.,  4436.,  4736.,  2340.,  2556.,  2772.,  2988.,  1349.,  1487.,  2940.,  3240.,  3540.,  3840.,  5697.,  6183.,  4216.,  4564.,  6711.,  7269.,  4892.,  5288.,  7725.,  8355.,  5568.,  6012.,  6456.,  6900.,  1132.,  1264.,  4068.,  4348.,  2900.,  3180.,  6464.,  6908.,  3180.,  3492.,  7140.,  7632.,  3460.,  3804.,  7816.,  8356.,  3740.,  4116.,  4492.,  4868.,  2799.,  3057.,  5840.,  6380.,  6920.,  7460., 10767., 11613.,  7596.,  8184., 11781., 12699.,  8272.,  8908., 12795., 13785.,  8948.,  9632., 10316., 11000.,  1672.,  1884.,  6428.,  6868.,  4300.,  4740.,  9844., 10528.,  4580.,  5052., 10520., 11252.,  4860.,  5364., 11196., 11976.,  5140.,  5676.,  6212.,  6748.,  4249.,  4627.,  8740.,  9520., 10300., 11080., 15837., 17043., 10976., 11804., 16851., 18129., 11652., 12528., 17865., 19215., 12328., 13252., 14176., 15100.,  2212.,  2504.,  8788.,  9388.,  5700.,  6300., 13224., 14148.,  5980.,  6612., 13900., 14872.,  6260.,  6924., 14576., 15596.,  6540.,  7236.,  7932.,  8628.,  5132.,  5424., 10500., 11100., 11700., 12300., 17920., 18844., 12300., 12932., 18820., 19792., 12900., 13564., 19720., 20740., 13500., 14196., 14892., 15588.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,    0.,    0.,   65.,   71.,   77.,   83.,  240.,  260.,  280.,  300.,  557.,  599.,  516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,    0.,    0.,  148.,  184.,  220.,  256.,  612.,  700.,  788.,  876., 1456., 1612., 1260., 1380., 1500., 1620.,  900.,  968., 1036., 1104.,    0.,    0.,  508.,  544.,  580.,  616., 1492., 1580., 1668., 1756., 3016., 3172., 2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784.,    0.,    0.,  909.,  999., 1089., 1179., 2676., 2880., 3084., 3288., 5397., 5739., 4272., 4524., 4776., 5028., 2733., 2871., 3009., 3147.,    0.,    0., 1504., 1588., 1672., 1756., 3676., 3860., 4044., 4228., 6580., 6880., 4836., 5052., 5268., 5484., 2864., 2980., 3096., 3212.,    0.,    0., 2344., 2428., 2512., 2596., 5516., 5700., 5884., 6068., 9580., 9880., 6996., 7212., 7428., 7644., 4024., 4140., 4256., 4372.,    0.,    0., 1661., 1715., 1769., 1823., 3784., 3900., 4016., 4132., 6401., 6587., 4572., 4704., 4836., 4968., 2573., 2643., 2713., 2783.,    0.,    0., 2201., 2255., 2309., 2363., 4944., 5060., 5176., 5292., 8261., 8447., 5892., 6024., 6156., 6288., 3273., 3343., 3413., 3483.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  4466.,  5418.,  3036.,  4620.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  3628.,  5340.,  1684.,  2468.,  4472.,  5656.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  4312.,  5240.,  4828.,  6412.,  5496.,  6680.,  3468.,  4924.,  3288.,  4216.,  3480.,  4408.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1348.,  1492.,  3426.,  3738.,  2196.,  2468.,  2740.,  3012.,   110.,   278.,   446.,   614.,     0.,     0.,   340.,   612.,   884.,  1156.,  2104.,  2776.,  3448.,  4120.,  5804.,  7004.,  5144.,  6072.,  7000.,  7928.,  4180.,  4708.,  5236.,  5764.,     0.,     0.,  3060.,  3332.,  2964.,  3236.,  8184.,  8856.,  4152.,  4824., 11788., 12988.,  5336.,  6264.,  7192.,  8120.,  1012.,  1540.,  2068.,  2596.,     0.,     0.,  1698.,  2394.,  3090.,  3786.,  7068.,  8652., 10236., 11820., 16238., 18902., 13548., 15516., 15820., 17788.,  9954., 11034.,  9426., 10506.,     0.,     0.,  7908.,  8564.,  5508.,  6164., 16344., 17784.,  7704.,  9144., 21724., 24076.,  8888., 10584., 12280., 13976.,  2020.,  2932.,  3844.,  4756.,     0.,     0.,  3972.,  4628.,  5284.,  5940., 11416., 12856., 14296., 15736., 19132., 21484., 17016., 18712., 15672., 17368., 11140., 12052.,  7204.,  8116.,     0.,     0.,  6206.,  6630.,   270.,   694.,  8260.,  9172.,  2276.,  3188., 12178., 13642.,  2612.,  3652.,  4692.,  5732.,  2558.,  3110.,  3662.,  4214.,     0.,     0.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308., 11202., 12666., 13012., 14052.,  7284.,  8324.,  8078.,  8630.,   350.,   902.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  332.,  344.,  356.,  368.,  257.,  266.,  275.,  284.,  293.,  302.,  311.,  320.,   75.,   82.,   89.,   96.,  192.,  208.,  224.,  240.,  256.,  272.,  288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,  625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,  877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,  215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,  608.,  624.,  991., 1018., 1045., 1072.,  772.,  792.,  812.,  832., 1285., 1318., 1351., 1384.,  968.,  992., 1016., 1040., 1579., 1618., 1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,  410.,  428.,  446.,  464.,  943.,  982., 1021., 1060., 1099., 1138., 1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528., 2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802., 2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,  665.,  682.,  699.,  716., 1412., 1448., 1484., 1520., 1556., 1592., 1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872., 2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118., 3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480., 1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638., 2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088., 4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052., 5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060., 1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592., 2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912., 4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618., 4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600., 1760., 1808., 1856., 1904., 3643., 3742., 3841., 3940., 4039., 4138., 4237., 4336., 6249., 6402., 6555., 6708., 4333., 4438., 4543., 4648., 6690., 6852., 7014., 7176., 4627., 4738., 4849., 4960., 7131., 7302., 7473., 7644., 4921., 5038., 5155., 5272., 5389., 5506., 5623., 5740., 1565., 1602., 1639., 1676., 3212., 3288., 3364., 3440., 3516., 3592., 3668., 3744., 5401., 5518., 5635., 5752., 3712., 3792., 3872., 3952., 5695., 5818., 5941., 6064., 3908., 3992., 4076., 4160., 5989., 6118., 6247., 6376., 4104., 4192., 4280., 4368., 4456., 4544., 4632., 4720., 2305., 2342., 2379., 2416., 4732., 4808., 4884., 4960., 5036., 5112., 5188., 5264., 7741., 7858., 7975., 8092., 5312., 5392., 5472., 5552., 8155., 8278., 8401., 8524., 5588., 5672., 5756., 5840., 8569., 8698., 8827., 8956., 5864., 5952., 6040., 6128., 6216., 6304., 6392., 6480.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,   41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,   45.,   48.,   51.,   54.,   57.,   60.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,  102.,  105.,  108.,  111.,  114.,  117.,  120.,    0.,    0.,    0.,    0.,   45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,  172.,  184.,  196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,  336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,  255.,  264.,  273.,  282.,  291.,  300.,    0.,    0.,    0.,    0.,  145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,  436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,  656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,  435.,  444.,  453.,  462.,  471.,  480.,    0.,    0.,    0.,    0.,  252.,  264.,  276.,  288.,  300.,  312.,  324.,  336.,  723.,  750.,  777.,  804.,  831.,  858.,  885.,  912., 1437., 1482., 1527., 1572., 1125., 1158., 1191., 1224., 1257., 1290., 1323., 1356.,  714.,  732.,  750.,  768.,  786.,  804.,  822.,  840.,    0.,    0.,    0.,    0.,  391.,  402.,  413.,  424.,  435.,  446.,  457.,  468.,  952.,  976., 1000., 1024., 1048., 1072., 1096., 1120., 1699., 1738., 1777., 1816., 1244., 1272., 1300., 1328., 1356., 1384., 1412., 1440.,  735.,  750.,  765.,  780.,  795.,  810.,  825.,  840.,    0.,    0.,    0.,    0.,  611.,  622.,  633.,  644.,  655.,  666.,  677.,  688., 1432., 1456., 1480., 1504., 1528., 1552., 1576., 1600., 2479., 2518., 2557., 2596., 1804., 1832., 1860., 1888., 1916., 1944., 1972., 2000., 1035., 1050., 1065., 1080., 1095., 1110., 1125., 1140.,    0.,    0.,    0.,    0.,  427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986., 1001., 1016., 1031., 1046., 1061., 1076., 1640., 1664., 1688., 1712., 1169., 1186., 1203., 1220., 1237., 1254., 1271., 1288.,  657.,  666.,  675.,  684.,  693.,  702.,  711.,  720.,    0.,    0.,    0.,    0.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616., 1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 2120., 2144., 2168., 2192., 1509., 1526., 1543., 1560., 1577., 1594., 1611., 1628.,  837.,  846.,  855.,  864.,  873.,  882.,  891.,  900.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,  1757.,  1847.,  1937.,  2027.,   964.,  1032.,  1100.,  1168.,  1236.,  1304.,  1372.,  1440.,   296.,   348.,   400.,   452.,   668.,   788.,   908.,  1028.,  1148.,  1268.,  1388.,  1508.,  1868.,  2072.,  2276.,  2480.,  1556.,  1708.,  1860.,  2012.,  2480.,  2732.,  2984.,  3236.,  1964.,  2148.,  2332.,  2516.,  3092.,  3392.,  3692.,  3992.,  2372.,  2588.,  2804.,  3020.,  3236.,  3452.,  3668.,  3884.,  1144.,  1196.,  1248.,  1300.,  2876.,  2996.,  3116.,  3236.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  4640.,  4892.,  5144.,  5396.,  1996.,  2180.,  2364.,  2548.,  5444.,  5744.,  6044.,  6344.,  2276.,  2492.,  2708.,  2924.,  3140.,  3356.,  3572.,  3788.,  1121.,  1259.,  1397.,  1535.,  2452.,  2752.,  3052.,  3352.,  3652.,  3952.,  4252.,  4552.,  5649.,  6135.,  6621.,  7107.,  4456.,  4804.,  5152.,  5500.,  6599.,  7157.,  7715.,  8273.,  5260.,  5656.,  6052.,  6448.,  7549.,  8179.,  8809.,  9439.,  6064.,  6508.,  6952.,  7396.,  6880.,  7324.,  7768.,  8212.,  2164.,  2296.,  2428.,  2560.,  6196.,  6476.,  6756.,  7036.,  2836.,  3116.,  3396.,  3676.,  7856.,  8300.,  8744.,  9188.,  3116.,  3428.,  3740.,  4052.,  8660.,  9152.,  9644., 10136.,  3396.,  3740.,  4084.,  4428.,  9464., 10004., 10544., 11084.,  3676.,  4052.,  4428.,  4804.,  5180.,  5556.,  5932.,  6308.,  2651.,  2909.,  3167.,  3425.,  5512.,  6052.,  6592.,  7132.,  7672.,  8212.,  8752.,  9292., 10399., 11245., 12091., 12937.,  8476.,  9064.,  9652., 10240., 11349., 12267., 13185., 14103.,  9280.,  9916., 10552., 11188., 12299., 13289., 14279., 15269., 10084., 10768., 11452., 12136., 10580., 11264., 11948., 12632.,  3184.,  3396.,  3608.,  3820.,  9516.,  9956., 10396., 10836.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932., 12680., 13412., 14144., 14876.,  4796.,  5300.,  5804.,  6308., 13484., 14264., 15044., 15824.,  5076.,  5612.,  6148.,  6684.,  7220.,  7756.,  8292.,  8828.,  4181.,  4559.,  4937.,  5315.,  8572.,  9352., 10132., 10912., 11692., 12472., 13252., 14032., 15149., 16355., 17561., 18767., 12496., 13324., 14152., 14980., 16099., 17377., 18655., 19933., 13300., 14176., 15052., 15928., 17049., 18399., 19749., 21099., 14104., 15028., 15952., 16876., 14280., 15204., 16128., 17052.,  4204.,  4496.,  4788.,  5080., 12836., 13436., 14036., 14636.,  5636.,  6236.,  6836.,  7436., 15896., 16820., 17744., 18668.,  5916.,  6548.,  7180.,  7812., 16700., 17672., 18644., 19616.,  6196.,  6860.,  7524.,  8188., 17504., 18524., 19544., 20564.,  6476.,  7172.,  7868.,  8564.,  9260.,  9956., 10652., 11348.,  4732.,  5024.,  5316.,  5608.,  9668., 10268., 10868., 11468., 12068., 12668., 13268., 13868., 14408., 15332., 16256., 17180., 12732., 13364., 13996., 14628., 15148., 16120., 17092., 18064., 13396., 14060., 14724., 15388., 15888., 16908., 17928., 18948., 14060., 14756., 15452., 16148., 12044., 12740., 13436., 14132.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1148.,  1184.,  1220.,  1256.,   721.,   743.,   765.,   787.,   809.,   831.,   853.,   875.,     0.,     0.,     0.,     0.,   268.,   304.,   340.,   376.,   412.,   448.,   484.,   520.,  1156.,  1244.,  1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,  3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,  1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,     0.,     0.,     0.,     0.,   988.,  1024.,  1060.,  1096.,  1132.,  1168.,  1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,  3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,  5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,  3448.,  3516.,  3584.,     0.,     0.,     0.,     0.,  1749.,  1839.,  1929.,  2019.,  2109.,  2199.,  2289.,  2379.,  5196.,  5400.,  5604.,  5808.,  6012.,  6216.,  6420.,  6624., 10533., 10875., 11217., 11559.,  8352.,  8604.,  8856.,  9108.,  9360.,  9612.,  9864., 10116.,  5361.,  5499.,  5637.,  5775.,  5913.,  6051.,  6189.,  6327.,     0.,     0.,     0.,     0.,  2944.,  3028.,  3112.,  3196.,  3280.,  3364.,  3448.,  3532.,  7212.,  7396.,  7580.,  7764.,  7948.,  8132.,  8316.,  8500., 12932., 13232., 13532., 13832.,  9508.,  9724.,  9940., 10156., 10372., 10588., 10804., 11020.,  5640.,  5756.,  5872.,  5988.,  6104.,  6220.,  6336.,  6452.,     0.,     0.,     0.,     0.,  4624.,  4708.,  4792.,  4876.,  4960.,  5044.,  5128.,  5212., 10892., 11076., 11260., 11444., 11628., 11812., 11996., 12180., 18932., 19232., 19532., 19832., 13828., 14044., 14260., 14476., 14692., 14908., 15124., 15340.,  7960.,  8076.,  8192.,  8308.,  8424.,  8540.,  8656.,  8772.,     0.,     0.,     0.,     0.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292., 12661., 12847., 13033., 13219.,  9044.,  9176.,  9308.,  9440.,  9572.,  9704.,  9836.,  9968.,  5093.,  5163.,  5233.,  5303.,  5373.,  5443.,  5513.,  5583.,     0.,     0.,     0.,     0.,  4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916., 10032., 10148., 10264., 10380., 10496., 10612., 16381., 16567., 16753., 16939., 11684., 11816., 11948., 12080., 12212., 12344., 12476., 12608.,  6493.,  6563.,  6633.,  6703.,  6773.,  6843.,  6913.,  6983.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  4418.,  5370.,  6322.,  7274.,  1020.,  2604.,  4188.,  5772.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,  1042.,  1354.,  1666.,  1978.,  2100.,  2372.,  2644.,  2916.,  1524.,  1796.,  2068.,  2340.,  2126.,  2294.,  2462.,  2630.,   110.,   278.,   446.,   614.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,   350.,   390.,   430.,   470.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  2290.,  2602.,  2914.,  3226.,  1524.,  1796.,  2068.,  2340.,  2612.,  2884.,  3156.,  3428.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   500.,   772.,  1044.,  1316.,  1588.,  1860.,  2132.,  2404.,  3128.,  3800.,  4472.,  5144.,  5816.,  6488.,  7160.,  7832.,  4812.,  6012.,  7212.,  8412.,  8024.,  8952.,  9880., 10808.,  4312.,  5240.,  6168.,  7096.,  5332.,  5860.,  6388.,  6916.,  1684.,  2212.,  2740.,  3268.,     0.,     0.,     0.,     0.,  1588.,  1860.,  2132.,  2404.,  2036.,  2308.,  2580.,  2852.,  5816.,  6488.,  7160.,  7832.,  3128.,  3800.,  4472.,  5144.,  9612., 10812., 12012., 13212.,  4312.,  5240.,  6168.,  7096.,  8024.,  8952.,  9880., 10808.,  1684.,  2212.,  2740.,  3268.,  3796.,  4324.,  4852.,  5380.,     0.,     0.,     0.,     0.,  2306.,  3002.,  3698.,  4394.,  5090.,  5786.,  6482.,  7178.,  7100.,  8684., 10268., 11852., 13436., 15020., 16604., 18188., 11182., 13846., 16510., 19174., 16748., 18716., 20684., 22652.,  9388., 11356., 13324., 15292., 10770., 11850., 12930., 14010.,  3570.,  4650.,  5730.,  6810.,     0.,     0.,     0.,     0.,  4900.,  5556.,  6212.,  6868.,  3812.,  4468.,  5124.,  5780., 12440., 13880., 15320., 16760.,  6680.,  8120.,  9560., 11000., 19548., 21900., 24252., 26604.,  7864.,  9560., 11256., 12952., 14648., 16344., 18040., 19736.,  3460.,  4372.,  5284.,  6196.,  7108.,  8020.,  8932.,  9844.,     0.,     0.,     0.,     0.,  3812.,  4468.,  5124.,  5780.,  6436.,  7092.,  7748.,  8404.,  6680.,  8120.,  9560., 11000., 12440., 13880., 15320., 16760., 11676., 14028., 16380., 18732., 14648., 16344., 18040., 19736.,  7864.,  9560., 11256., 12952.,  7108.,  8020.,  8932.,  9844.,  4996.,  5908.,  6820.,  7732.,     0.,     0.,     0.,     0.,  5358.,  5782.,  6206.,  6630.,   270.,   694.,  1118.,  1542.,  8132.,  9044.,  9956., 10868.,  3972.,  4884.,  5796.,  6708., 14594., 16058., 17522., 18986.,  4564.,  5604.,  6644.,  7684.,  8724.,  9764., 10804., 11844.,  4766.,  5318.,  5870.,  6422.,  6974.,  7526.,  8078.,  8630.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4834.,  6298.,  7762.,  9226.,  8724.,  9764., 10804., 11844.,  5076.,  6116.,  7156.,  8196.,  6974.,  7526.,  8078.,  8630.,   350.,   902.,  1454.,  2006.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,  786., 1228.,  858., 1336.,  930.,  984.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,  894.,  972., 1492., 1024., 1570., 1076., 1162., 1385., 1514., 2322., 1592., 2439., 1670., 1811., 1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492., 1610., 1828., 1938., 2956., 2010., 3064., 2082., 2200.,  952., 1094., 1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155., 1854., 2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662., 3152., 4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98., 108., 118.,  74.,  80.,  54.,  58., 148., 158., 168., 104., 110.,  48.,  51., 118., 125., 132.,  76.,  80.,  63.,  66., 153., 160., 167.,  96., 100.,   5.,  10.,  21.,  32.,  43.,  24.,  30.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,  62.,  74., 160., 186., 212., 116., 130., 122., 134., 290., 316., 342., 186., 200., 182., 194., 420., 446., 472., 256., 270., 112., 119., 254., 269., 284., 152., 160., 147., 154., 329., 344., 359., 192., 200.,   9.,  18.,  37.,  56.,  75.,  40.,  50.,  54.,  63., 132., 151., 170.,  90., 100., 110., 130., 272., 314., 356., 188., 210., 210., 230., 482., 524., 566., 298., 320., 310., 330., 692., 734., 776., 408., 430., 176., 187., 390., 413., 436., 228., 240., 231., 242., 505., 528., 551., 288., 300.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  9912., 10784., 16442., 11192., 17054., 11600., 12536., 14272., 15144., 23102., 15712., 23954., 16280., 17216.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,   29.,   67.,  140.,  224.,  308.,  173.,  219.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,  450.,  542., 1176., 1376., 1576.,  866.,  974.,  910., 1002., 2176., 2376., 2576., 1406., 1514., 1370., 1462., 3176., 3376., 3576., 1946., 2054.,  851.,  905., 1936., 2052., 2168., 1163., 1225., 1121., 1175., 2516., 2632., 2748., 1473., 1535.,   53.,  123.,  252.,  400.,  548.,  293.,  371.,  403.,  473.,  992., 1140., 1288.,  683.,  761.,  818.,  974., 2040., 2368., 2696., 1426., 1598., 1598., 1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233., 2327.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,  1580.,  1148.,  4296.,  3176.,  3720.,  2284.,  2620.,  1980.,  2188.,  5352.,  5896.,  6440.,  3964.,  4300.,  2630.,   110.,  3908.,   596.,   996.,   614.,   846.,   782.,   950.,  2196.,  2596.,  2996.,  1774.,  2006.,   190.,   486.,  1012.,  1668.,  2324.,  1310.,  1670.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,  9000., 10568., 12136.,  6684.,  7532.,  7020.,  3004., 12104.,  7912.,  9480.,  5164.,  6012.,  5884.,  6604., 14184., 15752., 17320.,  9404., 10252.,  6630.,   270.,  8324.,  1428.,  2340.,  1286.,  1774.,  1966.,  2390.,  5076.,  5988.,  6900.,  3726.,  4214.,   350.,   902.,  1844.,  3012.,  4180.,  2238.,  2854.,  3110.,  3662.,  7684.,  8852., 10020.,  5318.,  5934.,  6300.,  7532., 15784., 18376., 20968., 11100., 12460., 12460.,  4860., 19912., 12648., 15240.,  8044.,  9404.,  9788., 11020., 23016., 25608., 28200., 14844., 16204., 10630.,   430., 12740.,  2260.,  3684.,  1958.,  2702.,  3150.,  3830.,  7956.,  9380., 10804.,  5678.,  6422.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.,  930., 1008., 1086., 1164., 1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464., 1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140., 2066., 2152., 2238., 2324., 2641., 2770., 2899., 3028., 4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622., 2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764., 2466., 2568., 2670., 2772., 3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814., 3799., 3964., 4129., 4294., 2446., 2556., 2666., 2776., 4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128., 4046., 4164., 4282., 4400., 1762., 1904., 2046., 2188., 3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636., 3666., 3816., 3966., 4116., 4849., 5074., 5299., 5524., 8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310., 3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260., 4066., 4232., 4398., 4564., 5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558., 6199., 6460., 6721., 6982., 3918., 4092., 4266., 4440., 6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  104.,  108.,  112.,  116.,  286.,  296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,  220.,   93.,   96.,   99.,  102.,  229.,  236.,  243.,  250.,  257.,  264.,  148.,  152.,  156.,  160.,  123.,  126.,  129.,  132.,  299.,  306.,  313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   42.,   48.,   54.,   60.,   55.,   60.,   65.,   70.,  141.,  152.,  163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,  112.,  124.,  136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,  218.,  232.,  246.,  260.,  232.,  244.,  256.,  268.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,  372.,  386.,  400.,  352.,  364.,  376.,  388.,  814.,  840.,  866.,  892.,  918.,  944.,  498.,  512.,  526.,  540.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  553.,  568.,  296.,  304.,  312.,  320.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688.,  703.,  718.,  376.,  384.,  392.,  400.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,   70.,   80.,   90.,  100.,   99.,  108.,  117.,  126.,  245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,  200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,  712.,  354.,  376.,  398.,  420.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.,  7184.,  7800.,  8416.,  9032., 12898., 13846.,  8888.,  9536., 13606., 14602.,  9360., 10040., 10720., 11400.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352., 14960., 15832., 16704., 17576., 25426., 26758., 17304., 18208., 26326., 27706., 17904., 18840., 19776., 20712.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   702.,   730.,   758.,   786.,  2008.,  2080.,  2152.,  2224.,  2296.,  2368.,  1458.,  1502.,  1546.,  1590.,   677.,   699.,   721.,   743.,  1688.,  1740.,  1792.,  1844.,  1896.,  1948.,  1103.,  1133.,  1163.,  1193.,   897.,   919.,   941.,   963.,  2208.,  2260.,  2312.,  2364.,  2416.,  2468.,  1403.,  1433.,  1463.,  1493.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   311.,   357.,   403.,   449.,   409.,   447.,   485.,   523.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,   771.,   817.,   863.,   909.,   830.,   922.,  1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  1650.,  1758.,  1866.,  1974.,  1750.,  1842.,  1934.,  2026.,  4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730.,  2838.,  2946.,  3054.,  2670.,  2762.,  2854.,  2946.,  6200.,  6400.,  6600.,  6800.,  7000.,  7200.,  3810.,  3918.,  4026.,  4134.,  1661.,  1715.,  1769.,  1823.,  3784.,  3900.,  4016.,  4132.,  4248.,  4364.,  2279.,  2341.,  2403.,  2465.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  2899.,  2961.,  3023.,  3085.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,   527.,   605.,   683.,   761.,   753.,   823.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  2722.,  2894.,  3066.,  3238.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  2652.,  2988.,  3324.,  3660.,  2380.,  2588.,  2156.,  2364.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,  1132.,  1340.,  1548.,  1756.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  3996.,  4332.,  3004.,  3340.,  2462.,  2630.,   110.,   278.,  3844.,  4244.,   932.,  1332.,  1732.,  2132.,  1078.,  1310.,  1542.,  1774.,  1454.,  1622.,  1790.,  1958.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3398.,  3630.,   150.,   382.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,  3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,   230.,   590.,   950.,  1310.,  1644.,  2364.,  3084.,  3804.,  6504.,  8072.,  9640., 11208., 12776., 14344.,  7068.,  7916.,  8764.,  9612.,  8844.,  9564.,  5548.,  6268., 17448., 19016.,  8040.,  9608., 11176., 12744.,  1980.,  2828.,  3676.,  4524.,  4524.,  5244.,  5964.,  6684., 12776., 14344., 15912., 17480., 14312., 15880., 10460., 11308.,  6396.,  7244.,  6206.,  6630.,   270.,   694.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  2262.,  2750.,  3238.,  3726.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  7142.,  7630.,   310.,   798.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  4086.,  4702.,  5318.,  5934.,  5870.,  6422.,  6974.,  7526., 14628., 15796.,  8132.,  9300., 10468., 11636.,   390.,  1006.,  1622.,  2238.,  2988.,  4220.,  5452.,  6684., 11240., 13832., 16424., 19016., 21608., 24200., 11484., 12844., 14204., 15564., 15308., 16540.,  8940., 10172., 28328., 30920., 12776., 15368., 17960., 20552.,  3324.,  4684.,  6044.,  7404.,  7916.,  9148., 10380., 11612., 21608., 24200., 26792., 29384., 23144., 25736., 16924., 18284.,  9788., 11148.,  9950., 10630.,   430.,  1110., 12676., 14100.,  3620.,  5044.,  6468.,  7892.,  3446.,  4190.,  4934.,  5678.,  5870.,  6550.,  7230.,  7910., 15012., 16436., 17860., 19284.,  9828., 11252., 10886., 11630.,   470.,  1214.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2822.,  2868.,  2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,  4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,  3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,  1782.,  1860.,  1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,  2928.,  3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,  5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,  6962.,  7103.,  7244.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  6982.,  7092.,  7202.,  7312.,  7422.,  7532.,  7642.,  7752., 11320., 11488., 11656., 11824.,  7698.,  7812.,  7926.,  8040., 11734., 11908., 12082., 12256.,  7974.,  8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  3382.,  3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,  6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,  6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  9473.,  9698.,  9923., 10148., 10373., 10598., 10823., 11048., 15750., 16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191., 16542., 16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146., 12383., 12620.,  6942.,  7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048., 11488., 11728., 11968., 12208.,  7770.,  7932.,  8094.,  8256., 11782., 12028., 12274., 12520.,  7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128., 10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442., 13703., 13964.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024., 11142., 11316., 11490., 11664., 11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,  183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,  465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,  292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,    5.,   10.,   15.,   20.,   25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,  106.,  117.,  128.,  139.,  150.,  161.,  172.,   78.,   84.,   90.,   96.,  102.,  108.,  114.,  120.,  105.,  110.,  115.,  120.,  125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,  234.,  240.,  212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,  614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,  422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,  452.,  464.,  476.,  488.,  500.,  512.,  524.,  536., 1082., 1108., 1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,  702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,  692.,  704.,  716.,  728.,  740.,  752.,  764.,  776., 1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784., 1810., 1836., 1862., 1888.,  982.,  996., 1010., 1024., 1038., 1052., 1066., 1080.,  427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986., 1001., 1016., 1031., 1046., 1061., 1076., 1091., 1106., 1121., 1136.,  584.,  592.,  600.,  608.,  616.,  624.,  632.,  640.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616., 1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,  744.,  752.,  760.,  768.,  776.,  784.,  792.,  800.,    9.,   18.,   27.,   36.,   45.,   54.,   63.,   72.,   91.,  110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,  380.,  400.,  420.,  440.,  460.,  480.,  500.,  520.,  962., 1004., 1046., 1088., 1130., 1172., 1214., 1256., 1298., 1340., 1382., 1424.,  686.,  708.,  730.,  752.,  774.,  796.,  818.,  840.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.,  5072.,  5688.,  6304.,  6920.,  7536.,  8152.,  8768.,  9384., 11450., 12398., 13346., 14294.,  7944.,  8592.,  9240.,  9888., 12062., 13058., 14054., 15050.,  8352.,  9032.,  9712., 10392., 11072., 11752., 12432., 13112., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064., 14288., 15160., 16032., 16904., 17776., 18648., 19520., 20392., 20666., 21998., 23330., 24662., 18440., 19344., 20248., 21152., 21406., 22786., 24166., 25546., 19104., 20040., 20976., 21912., 16000., 16936., 17872., 18808.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,   822.,   850.,   878.,   906.,   934.,   962.,   990.,  1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,  1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,  3102.,  3146.,  3190.,  1337.,  1359.,  1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  1777.,  1799.,  1821.,  1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,    29.,    67.,   105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,  1040.,  1124.,  1208.,  1292.,   587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,   789.,   827.,   865.,   903.,   941.,   979.,  1017.,  1055.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,  2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,  1829.,  1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,  4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,  6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,  3974.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,  8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848., 10048., 10248., 10448.,  5378.,  5486.,  5594.,  5702.,  5810.,  5918.,  6026.,  6134.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,  5914., 12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648., 13848., 14048., 14248., 14448.,  7538.,  7646.,  7754.,  7862.,  7970.,  8078.,  8186.,  8294.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,  4759.,  4821.,  4883.,  4945.,  4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916., 10032., 10148., 10264., 10380., 10496., 10612., 10728., 10844., 10960., 11076.,  5751.,  5813.,  5875.,  5937.,  5999.,  6061.,  6123.,  6185.,    53.,   123.,   193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,  1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,   995.,  1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,  1453.,  1523.,  1593.,  1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,  2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712., 10040., 10368., 10696., 11024.,  5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,  6038.,  6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130., 13976., 14304., 14632., 14960., 15288., 15616., 15944., 16272., 16600., 16928., 17256., 17584.,  8754.,  8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,  9158.,  9314.,  9470.,  9626.,  9782.,  9938., 10094., 10250., 20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398.,  5225.,  5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827., 11624., 11804., 11984., 12164., 12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604.,  6839.,  6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,  6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547., 15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844., 17024., 17204.,  8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,  9377.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1318.,  1422.,  1526.,  1630.,    70.,   174.,   278.,   382.,   190.,   230.,   270.,   310.,   350.,   390.,   430.,   470.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1508.,  1652.,  1796.,  1940.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  3420.,  3756.,  4092.,  4428.,  1052.,  1388.,  1724.,  2060.,  1292.,  1500.,  1708.,  1916.,  1484.,  1692.,  1900.,  2108.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,  1484.,  1692.,  1900.,  2108.,  2316.,  2524.,  2732.,  2940.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  2396.,  2732.,  3068.,  3404.,  2076.,  2412.,  2748.,  3084.,  2126.,  2294.,  2462.,  2630.,   110.,   278.,   446.,   614.,  3716.,  4116.,  4516.,  4916.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2116.,  2516.,  2916.,  3316.,  2934.,  3166.,  3398.,  3630.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  4550.,  4910.,  5270.,  5630.,   230.,   590.,   950.,  1310.,  1374.,  1670.,  1966.,  2262.,  2558.,  2854.,  3150.,  3446.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  5924.,  6580.,  7236.,  7892.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,  2828.,  3548.,  4268.,  4988.,  5708.,  6428.,  7148.,  7868.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  7836.,  8684.,  9532., 10380.,  3420.,  4268.,  5116.,  5964.,  5708.,  6428.,  7148.,  7868.,  3852.,  4572.,  5292.,  6012., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  3420.,  4268.,  5116.,  5964.,  6812.,  7660.,  8508.,  9356.,  3852.,  4572.,  5292.,  6012.,  6732.,  7452.,  8172.,  8892.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  6812.,  7660.,  8508.,  9356.,  4444.,  5292.,  6140.,  6988.,  5358.,  5782.,  6206.,  6630.,   270.,   694.,  1118.,  1542.,  8132.,  9044.,  9956., 10868.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4214.,  4702.,  5190.,  5678.,  6166.,  6654.,  7142.,  7630.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4484.,  5396.,  6308.,  7220.,  6166.,  6654.,  7142.,  7630.,   310.,   798.,  1286.,  1774.,   350.,   902.,  1454.,  2006.,  2558.,  3110.,  3662.,  4214.,  5156.,  6324.,  7492.,  8660.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172.,  7782.,  8398.,  9014.,  9630.,   390.,  1006.,  1622.,  2238.,  2558.,  3110.,  3662.,  4214.,  4766.,  5318.,  5870.,  6422.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172., 10340., 11508., 12676., 13844.,   390.,  1006.,  1622.,  2238.,  2854.,  3470.,  4086.,  4702.,  5196.,  6428.,  7660.,  8892., 10124., 11356., 12588., 13820., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 12252., 13612., 14972., 16332.,  5788.,  7148.,  8508.,  9868., 10124., 11356., 12588., 13820.,  6220.,  7452.,  8684.,  9916., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152.,  5788.,  7148.,  8508.,  9868., 11228., 12588., 13948., 15308.,  6220.,  7452.,  8684.,  9916., 11148., 12380., 13612., 14844., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 11228., 12588., 13948., 15308.,  6812.,  8172.,  9532., 10892.,  8590.,  9270.,  9950., 10630.,   430.,  1110.,  1790.,  2470., 12548., 13972., 15396., 16820.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6422.,  7166.,  7910.,  8654.,  9398., 10142., 10886., 11630.,   430.,  1110.,  1790.,  2470.,  3150.,  3830.,  4510.,  5190.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6852.,  8276.,  9700., 11124.,  9398., 10142., 10886., 11630.,   470.,  1214.,  1958.,  2702.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786., 1228.,  858., 1336.,  930.,  984.,  246.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,  436.,  894.,  972., 1492., 1024., 1570., 1076., 1162.,  676., 1385., 1514., 2322., 1592., 2439., 1670., 1811.,  532., 1086., 1180., 1804., 1232., 1882., 1284., 1386.,  820., 1673., 1826., 2790., 1904., 2907., 1982., 2147.,  628., 1278., 1388., 2116., 1440., 2194., 1492., 1610.,  898., 1828., 1938., 2956., 2010., 3064., 2082., 2200.,  470.,  952., 1094., 1660., 1126., 1708., 1158., 1308.,  820., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 1252., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,  916., 1854., 2012., 3052., 2064., 3130., 2116., 2282., 1396., 2825., 3074., 4662., 3152., 4779., 3230., 3491., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 1442., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   0.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,   0.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,   0.,  34.,  38.,  98., 108., 118.,  74.,  80.,   0.,  54.,  58., 148., 158., 168., 104., 110.,   0.,  48.,  51., 118., 125., 132.,  76.,  80.,   0.,  63.,  66., 153., 160., 167.,  96., 100.,   0.,   5.,  10.,  21.,  32.,  43.,  24.,  30.,   0.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,   0.,  62.,  74., 160., 186., 212., 116., 130.,   0., 122., 134., 290., 316., 342., 186., 200.,   0., 182., 194., 420., 446., 472., 256., 270.,   0., 112., 119., 254., 269., 284., 152., 160.,   0., 147., 154., 329., 344., 359., 192., 200.,   0.,   9.,  18.,  37.,  56.,  75.,  40.,  50.,   0.,  54.,  63., 132., 151., 170.,  90., 100.,   0., 110., 130., 272., 314., 356., 188., 210.,   0., 210., 230., 482., 524., 566., 298., 320.,   0., 310., 330., 692., 734., 776., 408., 430.,   0., 176., 187., 390., 413., 436., 228., 240.,   0., 231., 242., 505., 528., 551., 288., 300.,   0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.,  1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  3366.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016.,  5213., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  4118.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776.,  6341., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  4870.,  9912., 10784., 16442., 11192., 17054., 11600., 12536.,  7010., 14272., 15144., 23102., 15712., 23954., 16280., 17216.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,    0.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,    0.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.,   29.,   67.,  140.,  224.,  308.,  173.,  219.,    0.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,    0.,  450.,  542., 1176., 1376., 1576.,  866.,  974.,    0.,  910., 1002., 2176., 2376., 2576., 1406., 1514.,    0., 1370., 1462., 3176., 3376., 3576., 1946., 2054.,    0.,  851.,  905., 1936., 2052., 2168., 1163., 1225.,    0., 1121., 1175., 2516., 2632., 2748., 1473., 1535.,    0.,   53.,  123.,  252.,  400.,  548.,  293.,  371.,    0.,  403.,  473.,  992., 1140., 1288.,  683.,  761.,    0.,  818.,  974., 2040., 2368., 2696., 1426., 1598.,    0., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,    0., 2378., 2534., 5320., 5648., 5976., 3146., 3318.,    0., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,    0., 1785., 1871., 3908., 4088., 4268., 2233., 2327.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,     0.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,     0.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,     0.,  1580.,  1148.,  4296.,  3176.,  3720.,  2284.,  2620.,     0.,  1980.,  2188.,  5352.,  5896.,  6440.,  3964.,  4300.,     0.,  2630.,   110.,  3908.,   596.,   996.,   614.,   846.,     0.,   782.,   950.,  2196.,  2596.,  2996.,  1774.,  2006.,     0.,   190.,   486.,  1012.,  1668.,  2324.,  1310.,  1670.,     0.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,     0.,  3420.,  4140.,  9000., 10568., 12136.,  6684.,  7532.,     0.,  7020.,  3004., 12104.,  7912.,  9480.,  5164.,  6012.,     0.,  5884.,  6604., 14184., 15752., 17320.,  9404., 10252.,     0.,  6630.,   270.,  8324.,  1428.,  2340.,  1286.,  1774.,     0.,  1966.,  2390.,  5076.,  5988.,  6900.,  3726.,  4214.,     0.,   350.,   902.,  1844.,  3012.,  4180.,  2238.,  2854.,     0.,  3110.,  3662.,  7684.,  8852., 10020.,  5318.,  5934.,     0.,  6300.,  7532., 15784., 18376., 20968., 11100., 12460.,     0., 12460.,  4860., 19912., 12648., 15240.,  8044.,  9404.,     0.,  9788., 11020., 23016., 25608., 28200., 14844., 16204.,     0., 10630.,   430., 12740.,  2260.,  3684.,  1958.,  2702.,     0.,  3150.,  3830.,  7956.,  9380., 10804.,  5678.,  6422.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,   98.,  104.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  461.,  488.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  466.,  488.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428.,  686.,  708., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.,  454.,  492.,  930., 1008., 1086., 1164., 1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464.,  834.,  872., 1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140., 2066., 2152., 2238., 2324., 1289., 1352., 2641., 2770., 2899., 3028., 4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622., 1018., 1064., 2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764., 2466., 2568., 2670., 2772., 1565., 1640., 3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814., 3799., 3964., 4129., 4294., 1202., 1256., 2446., 2556., 2666., 2776., 4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220., 1742., 1796., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128., 4046., 4164., 4282., 4400.,  870.,  940., 1762., 1904., 2046., 2188., 3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616., 1570., 1640., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636., 3666., 3816., 3966., 4116., 2393., 2504., 4849., 5074., 5299., 5524., 8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310., 1754., 1832., 3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260., 4066., 4232., 4398., 4564., 2669., 2792., 5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558., 6199., 6460., 6721., 6982., 1938., 2024., 3918., 4092., 4266., 4440., 6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012., 2798., 2884., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,    0.,    0.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,    0.,    0.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,    0.,    0.,  104.,  108.,  112.,  116.,  286.,  296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,  220.,    0.,    0.,   93.,   96.,   99.,  102.,  229.,  236.,  243.,  250.,  257.,  264.,  148.,  152.,  156.,  160.,    0.,    0.,  123.,  126.,  129.,  132.,  299.,  306.,  313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,    0.,    0.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   42.,   48.,   54.,   60.,    0.,    0.,   55.,   60.,   65.,   70.,  141.,  152.,  163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,    0.,    0.,  112.,  124.,  136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,  218.,  232.,  246.,  260.,    0.,    0.,  232.,  244.,  256.,  268.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,  372.,  386.,  400.,    0.,    0.,  352.,  364.,  376.,  388.,  814.,  840.,  866.,  892.,  918.,  944.,  498.,  512.,  526.,  540.,    0.,    0.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  553.,  568.,  296.,  304.,  312.,  320.,    0.,    0.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688.,  703.,  718.,  376.,  384.,  392.,  400.,    0.,    0.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,   70.,   80.,   90.,  100.,    0.,    0.,   99.,  108.,  117.,  126.,  245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,    0.,    0.,  200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,  712.,  354.,  376.,  398.,  420.,    0.,    0.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,    0.,    0.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,    0.,    0.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,    0.,    0.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,   922.,  1030.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  2283.,  2493.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3074.,  3246.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.,  3506.,  3806.,  7184.,  7800.,  8416.,  9032., 12898., 13846.,  8888.,  9536., 13606., 14602.,  9360., 10040., 10720., 11400.,  2218.,  2518.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344.,  5763.,  6261., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508.,  2650.,  3014., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848.,  6923.,  7517., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788.,  3082.,  3510., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352.,  7362.,  7790., 14960., 15832., 16704., 17576., 25426., 26758., 17304., 18208., 26326., 27706., 17904., 18840., 19776., 20712.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,   922.,  1030.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  2283.,  2493.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3074.,  3246.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,     0.,     0.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,     0.,     0.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,     0.,     0.,   702.,   730.,   758.,   786.,  2008.,  2080.,  2152.,  2224.,  2296.,  2368.,  1458.,  1502.,  1546.,  1590.,     0.,     0.,   677.,   699.,   721.,   743.,  1688.,  1740.,  1792.,  1844.,  1896.,  1948.,  1103.,  1133.,  1163.,  1193.,     0.,     0.,   897.,   919.,   941.,   963.,  2208.,  2260.,  2312.,  2364.,  2416.,  2468.,  1403.,  1433.,  1463.,  1493.,     0.,     0.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   311.,   357.,   403.,   449.,     0.,     0.,   409.,   447.,   485.,   523.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,   771.,   817.,   863.,   909.,     0.,     0.,   830.,   922.,  1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  1650.,  1758.,  1866.,  1974.,     0.,     0.,  1750.,  1842.,  1934.,  2026.,  4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730.,  2838.,  2946.,  3054.,     0.,     0.,  2670.,  2762.,  2854.,  2946.,  6200.,  6400.,  6600.,  6800.,  7000.,  7200.,  3810.,  3918.,  4026.,  4134.,     0.,     0.,  1661.,  1715.,  1769.,  1823.,  3784.,  3900.,  4016.,  4132.,  4248.,  4364.,  2279.,  2341.,  2403.,  2465.,     0.,     0.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  2899.,  2961.,  3023.,  3085.,     0.,     0.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,   527.,   605.,   683.,   761.,     0.,     0.,   753.,   823.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,     0.,     0.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  2722.,  2894.,  3066.,  3238.,     0.,     0.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,     0.,     0.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,     0.,     0.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,     0.,     0.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,     0.,     0.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  2652.,  2988.,  3324.,  3660.,     0.,     0.,  2380.,  2588.,  2156.,  2364.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,     0.,     0.,  1132.,  1340.,  1548.,  1756.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  3996.,  4332.,  3004.,  3340.,     0.,     0.,  2462.,  2630.,   110.,   278.,  3844.,  4244.,   932.,  1332.,  1732.,  2132.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,  1454.,  1622.,  1790.,  1958.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3398.,  3630.,   150.,   382.,     0.,     0.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,     0.,     0.,  3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,   230.,   590.,   950.,  1310.,     0.,     0.,  1644.,  2364.,  3084.,  3804.,  6504.,  8072.,  9640., 11208., 12776., 14344.,  7068.,  7916.,  8764.,  9612.,     0.,     0.,  8844.,  9564.,  5548.,  6268., 17448., 19016.,  8040.,  9608., 11176., 12744.,  1980.,  2828.,  3676.,  4524.,     0.,     0.,  4524.,  5244.,  5964.,  6684., 12776., 14344., 15912., 17480., 14312., 15880., 10460., 11308.,  6396.,  7244.,     0.,     0.,  6206.,  6630.,   270.,   694.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  2262.,  2750.,  3238.,  3726.,     0.,     0.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  7142.,  7630.,   310.,   798.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  4086.,  4702.,  5318.,  5934.,     0.,     0.,  5870.,  6422.,  6974.,  7526., 14628., 15796.,  8132.,  9300., 10468., 11636.,   390.,  1006.,  1622.,  2238.,     0.,     0.,  2988.,  4220.,  5452.,  6684., 11240., 13832., 16424., 19016., 21608., 24200., 11484., 12844., 14204., 15564.,     0.,     0., 15308., 16540.,  8940., 10172., 28328., 30920., 12776., 15368., 17960., 20552.,  3324.,  4684.,  6044.,  7404.,     0.,     0.,  7916.,  9148., 10380., 11612., 21608., 24200., 26792., 29384., 23144., 25736., 16924., 18284.,  9788., 11148.,     0.,     0.,  9950., 10630.,   430.,  1110., 12676., 14100.,  3620.,  5044.,  6468.,  7892.,  3446.,  4190.,  4934.,  5678.,     0.,     0.,  5870.,  6550.,  7230.,  7910., 15012., 16436., 17860., 19284.,  9828., 11252., 10886., 11630.,   470.,  1214.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   70.,    76.,    82.,    88.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   190.,   196.,   202.,   208.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   355.,   370.,   385.,   400.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,   550.,   564.,   578.,   592.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,   895.,   922.,   949.,   976.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,   910.,   932.,   954.,   976.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  1350.,  1372.,  1394.,  1416.,  2822.,  2868.,  2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,  4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,  3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,   870.,   908.,   946.,   984.,  1782.,  1860.,  1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,  2928.,  1630.,  1668.,  1706.,  1744.,  3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,  2515.,  2578.,  2641.,  2704.,  5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,  6962.,  7103.,  7244.,  1990.,  2036.,  2082.,  2128.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,  2458.,  2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  3430.,  3484.,  3538.,  3592.,  6982.,  7092.,  7202.,  7312.,  7422.,  7532.,  7642.,  7752., 11320., 11488., 11656., 11824.,  7698.,  7812.,  7926.,  8040., 11734., 11908., 12082., 12256.,  7974.,  8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  1670.,  1740.,  1810.,  1880.,  3382.,  3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,  6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,  6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,  3070.,  3140.,  3210.,  3280.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  4675.,  4786.,  4897.,  5008.,  9473.,  9698.,  9923., 10148., 10373., 10598., 10823., 11048., 15750., 16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191., 16542., 16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146., 12383., 12620.,  3430.,  3508.,  3586.,  3664.,  6942.,  7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048., 11488., 11728., 11968., 12208.,  7770.,  7932.,  8094.,  8256., 11782., 12028., 12274., 12520.,  7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128.,  5215.,  5338.,  5461.,  5584., 10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442., 13703., 13964.,  3790.,  3876.,  3962.,  4048.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024.,  5510.,  5596.,  5682.,  5768., 11142., 11316., 11490., 11664., 11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,    0.,    0.,    0.,    0.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,    0.,    0.,    0.,    0.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,    0.,    0.,    0.,    0.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,    0.,    0.,    0.,    0.,  183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,  465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,  292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,    0.,    0.,    0.,    0.,  243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,    0.,    0.,    0.,    0.,    5.,   10.,   15.,   20.,   25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,  106.,  117.,  128.,  139.,  150.,  161.,  172.,   78.,   84.,   90.,   96.,  102.,  108.,  114.,  120.,    0.,    0.,    0.,    0.,  105.,  110.,  115.,  120.,  125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,  234.,  240.,    0.,    0.,    0.,    0.,  212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,  614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,  422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,    0.,    0.,    0.,    0.,  452.,  464.,  476.,  488.,  500.,  512.,  524.,  536., 1082., 1108., 1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,  702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,    0.,    0.,    0.,    0.,  692.,  704.,  716.,  728.,  740.,  752.,  764.,  776., 1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784., 1810., 1836., 1862., 1888.,  982.,  996., 1010., 1024., 1038., 1052., 1066., 1080.,    0.,    0.,    0.,    0.,  427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986., 1001., 1016., 1031., 1046., 1061., 1076., 1091., 1106., 1121., 1136.,  584.,  592.,  600.,  608.,  616.,  624.,  632.,  640.,    0.,    0.,    0.,    0.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616., 1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,  744.,  752.,  760.,  768.,  776.,  784.,  792.,  800.,    0.,    0.,    0.,    0.,    9.,   18.,   27.,   36.,   45.,   54.,   63.,   72.,   91.,  110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,    0.,    0.,    0.,    0.,  189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,    0.,    0.,    0.,    0.,  380.,  400.,  420.,  440.,  460.,  480.,  500.,  520.,  962., 1004., 1046., 1088., 1130., 1172., 1214., 1256., 1298., 1340., 1382., 1424.,  686.,  708.,  730.,  752.,  774.,  796.,  818.,  840.,    0.,    0.,    0.,    0.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280.,    0.,    0.,    0.,    0., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,    0.,    0.,    0.,    0.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,    0.,    0.,    0.,    0.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  2754.,  2926.,  3098.,  3270.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.,  2498.,  2798.,  3098.,  3398.,  5072.,  5688.,  6304.,  6920.,  7536.,  8152.,  8768.,  9384., 11450., 12398., 13346., 14294.,  7944.,  8592.,  9240.,  9888., 12062., 13058., 14054., 15050.,  8352.,  9032.,  9712., 10392., 11072., 11752., 12432., 13112.,  4210.,  4510.,  4810.,  5110., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032.,  5839.,  6337.,  6835.,  7333., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588.,  5026.,  5390.,  5754.,  6118., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048.,  7063.,  7657.,  8251.,  8845., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124.,  5842.,  6270.,  6698.,  7126., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064.,  7042.,  7470.,  7898.,  8326., 14288., 15160., 16032., 16904., 17776., 18648., 19520., 20392., 20666., 21998., 23330., 24662., 18440., 19344., 20248., 21152., 21406., 22786., 24166., 25546., 19104., 20040., 20976., 21912., 16000., 16936., 17872., 18808.,   258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  2754.,  2926.,  3098.,  3270.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,     0.,     0.,     0.,     0.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,     0.,     0.,     0.,     0.,   822.,   850.,   878.,   906.,   934.,   962.,   990.,  1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,     0.,     0.,     0.,     0.,  1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,  3102.,  3146.,  3190.,     0.,     0.,     0.,     0.,  1337.,  1359.,  1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,     0.,     0.,     0.,     0.,  1777.,  1799.,  1821.,  1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,     0.,     0.,     0.,     0.,    29.,    67.,   105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,  1040.,  1124.,  1208.,  1292.,   587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,     0.,     0.,     0.,     0.,   789.,   827.,   865.,   903.,   941.,   979.,  1017.,  1055.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,  2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,  1829.,     0.,     0.,     0.,     0.,  1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,  4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,  6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,  3974.,     0.,     0.,     0.,     0.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,  8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848., 10048., 10248., 10448.,  5378.,  5486.,  5594.,  5702.,  5810.,  5918.,  6026.,  6134.,     0.,     0.,     0.,     0.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,  5914., 12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648., 13848., 14048., 14248., 14448.,  7538.,  7646.,  7754.,  7862.,  7970.,  8078.,  8186.,  8294.,     0.,     0.,     0.,     0.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,  4759.,  4821.,  4883.,  4945.,     0.,     0.,     0.,     0.,  4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916., 10032., 10148., 10264., 10380., 10496., 10612., 10728., 10844., 10960., 11076.,  5751.,  5813.,  5875.,  5937.,  5999.,  6061.,  6123.,  6185.,     0.,     0.,     0.,     0.,    53.,   123.,   193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,  1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,   995.,  1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,     0.,     0.,     0.,     0.,  1453.,  1523.,  1593.,  1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,     0.,     0.,     0.,     0.,  2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712., 10040., 10368., 10696., 11024.,  5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,     0.,     0.,     0.,     0.,  6038.,  6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130., 13976., 14304., 14632., 14960., 15288., 15616., 15944., 16272., 16600., 16928., 17256., 17584.,  8754.,  8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,     0.,     0.,     0.,     0.,  9158.,  9314.,  9470.,  9626.,  9782.,  9938., 10094., 10250., 20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398.,     0.,     0.,     0.,     0.,  5225.,  5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827., 11624., 11804., 11984., 12164., 12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604.,  6839.,  6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,     0.,     0.,     0.,     0.,  6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547., 15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844., 17024., 17204.,  8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,  9377.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1318.,  1422.,  1526.,  1630.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,   350.,   390.,   430.,   470.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1508.,  1652.,  1796.,  1940.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  3420.,  3756.,  4092.,  4428.,  1052.,  1388.,  1724.,  2060.,     0.,     0.,     0.,     0.,  1292.,  1500.,  1708.,  1916.,  1484.,  1692.,  1900.,  2108.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,     0.,     0.,     0.,     0.,  1484.,  1692.,  1900.,  2108.,  2316.,  2524.,  2732.,  2940.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  2396.,  2732.,  3068.,  3404.,  2076.,  2412.,  2748.,  3084.,     0.,     0.,     0.,     0.,  2126.,  2294.,  2462.,  2630.,   110.,   278.,   446.,   614.,  3716.,  4116.,  4516.,  4916.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,     0.,     0.,     0.,     0.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2116.,  2516.,  2916.,  3316.,  2934.,  3166.,  3398.,  3630.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  4550.,  4910.,  5270.,  5630.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,  2558.,  2854.,  3150.,  3446.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  5924.,  6580.,  7236.,  7892.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,  2828.,  3548.,  4268.,  4988.,  5708.,  6428.,  7148.,  7868.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  7836.,  8684.,  9532., 10380.,  3420.,  4268.,  5116.,  5964.,     0.,     0.,     0.,     0.,  5708.,  6428.,  7148.,  7868.,  3852.,  4572.,  5292.,  6012., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  3420.,  4268.,  5116.,  5964.,  6812.,  7660.,  8508.,  9356.,     0.,     0.,     0.,     0.,  3852.,  4572.,  5292.,  6012.,  6732.,  7452.,  8172.,  8892.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  6812.,  7660.,  8508.,  9356.,  4444.,  5292.,  6140.,  6988.,     0.,     0.,     0.,     0.,  5358.,  5782.,  6206.,  6630.,   270.,   694.,  1118.,  1542.,  8132.,  9044.,  9956., 10868.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4214.,  4702.,  5190.,  5678.,  6166.,  6654.,  7142.,  7630.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4484.,  5396.,  6308.,  7220.,  6166.,  6654.,  7142.,  7630.,   310.,   798.,  1286.,  1774.,     0.,     0.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2558.,  3110.,  3662.,  4214.,  5156.,  6324.,  7492.,  8660.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172.,  7782.,  8398.,  9014.,  9630.,   390.,  1006.,  1622.,  2238.,     0.,     0.,     0.,     0.,  2558.,  3110.,  3662.,  4214.,  4766.,  5318.,  5870.,  6422.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172., 10340., 11508., 12676., 13844.,   390.,  1006.,  1622.,  2238.,  2854.,  3470.,  4086.,  4702.,     0.,     0.,     0.,     0.,  5196.,  6428.,  7660.,  8892., 10124., 11356., 12588., 13820., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 12252., 13612., 14972., 16332.,  5788.,  7148.,  8508.,  9868.,     0.,     0.,     0.,     0., 10124., 11356., 12588., 13820.,  6220.,  7452.,  8684.,  9916., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152.,  5788.,  7148.,  8508.,  9868., 11228., 12588., 13948., 15308.,     0.,     0.,     0.,     0.,  6220.,  7452.,  8684.,  9916., 11148., 12380., 13612., 14844., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 11228., 12588., 13948., 15308.,  6812.,  8172.,  9532., 10892.,     0.,     0.,     0.,     0.,  8590.,  9270.,  9950., 10630.,   430.,  1110.,  1790.,  2470., 12548., 13972., 15396., 16820.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6422.,  7166.,  7910.,  8654.,  9398., 10142., 10886., 11630.,     0.,     0.,     0.,     0.,   430.,  1110.,  1790.,  2470.,  3150.,  3830.,  4510.,  5190.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6852.,  8276.,  9700., 11124.,  9398., 10142., 10886., 11630.,   470.,  1214.,  1958.,  2702.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  434.,  900.,  956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.,  304.,  620.,  716., 1093.,  748., 1141.,  780., 1189.,  812.,  920.,  539., 1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,  836., 1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,  659., 1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740., 1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,  779., 1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020., 1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,  584., 1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640., 1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580., 1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955., 1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860., 1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375., 1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140., 1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   14.,   19.,   12.,   15.,    0.,    6.,    7.,   20.,   23.,   44.,   39.,   44.,   27.,   30.,    0.,   15.,   20.,   52.,   64.,  115.,   96.,  112.,   66.,   75.,    0.,   40.,   45.,  112.,  124.,  220.,  176.,  192.,  111.,  120.,    0.,   65.,   70.,  172.,  184.,  325.,  256.,  272.,  156.,  165.,    0.,   64.,   68.,  152.,  161.,  266.,  197.,  208.,  114.,  120.,    0.,   84.,   88.,  197.,  206.,  341.,  252.,  263.,  144.,  150.,    0.,    7.,   14.,   29.,   44.,   68.,   50.,   67.,   36.,   45.,    0.,   42.,   49.,  104.,  119.,  188.,  135.,  152.,   81.,   90.,    0.,   87.,  104.,  220.,  256.,  403.,  288.,  328.,  174.,  195.,    0.,  172.,  189.,  400.,  436.,  688.,  488.,  528.,  279.,  300.,    0.,  257.,  274.,  580.,  616.,  973.,  688.,  728.,  384.,  405.,    0.,  160.,  170.,  356.,  377.,  590.,  413.,  436.,  228.,  240.,    0.,  210.,  220.,  461.,  482.,  755.,  528.,  551.,  288.,  300.,    0.,   13.,   26.,   53.,   80.,  122.,   86.,  115.,   60.,   75.,    0.,   78.,   91.,  188.,  215.,  332.,  231.,  260.,  135.,  150.,    0.,  159.,  188.,  388.,  448.,  691.,  480.,  544.,  282.,  315.,    0.,  304.,  333.,  688.,  748., 1156.,  800.,  864.,  447.,  480.,    0.,  449.,  478.,  988., 1048., 1621., 1120., 1184.,  612.,  645.,    0.,  256.,  272.,  560.,  593.,  914.,  629.,  664.,  342.,  360.,    0.,  336.,  352.,  725.,  758., 1169.,  804.,  839.,  432.,  450.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396., 11480.,  7964., 12332.,  8532., 13184.,  9100.,  9636.,  2312.,  4716.,  5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,  7076.,  4172.,  8516.,  9276., 14180.,  9684., 14792., 10092., 15404., 10500., 11356.,  6463., 13184., 14444., 21873., 14608., 22087., 14260., 21789., 14872., 15764.,  5112., 10396., 11316., 15768.,  9996., 14396.,  8164., 12512.,  8572.,  9076.,  7425., 15108., 16096., 21791., 13700., 19445., 10792., 16587., 11404., 12024.,  4324.,  8820.,  9388., 10316.,  5508.,  6384.,  1116.,  1940.,  1524.,  1676.,  5704., 11660., 12228., 13416.,  7228.,  8444.,  1716.,  2960.,  2284.,  2436.,  1016.,  2124.,  2500.,  3896.,  2748.,  4268.,  2996.,  4640.,  3244.,  3716.,  1916.,  4004.,  4380.,  6836.,  4788.,  7448.,  5196.,  8060.,  5604.,  6076.,  3079.,  6416.,  7100., 11049.,  7712., 11967.,  8324., 12885.,  8936.,  9764.,  2856.,  5884.,  6420.,  9896.,  6828., 10508.,  7236., 11120.,  7644.,  8276.,  4489.,  9236., 10160., 15639., 10772., 16557., 11384., 17475., 11996., 13064.,  3796.,  7764.,  8460., 12956.,  8868., 13568.,  9276., 14180.,  9684., 10476.,  5496., 11244., 11940., 18296., 12508., 19148., 13076., 20000., 13644., 14436.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,    92.,   128.,    83.,   105.,     0.,    35.,    41.,   128.,   148.,   295.,   272.,   308.,   193.,   215.,     0.,    88.,   124.,   340.,   428.,   788.,   676.,   796.,   476.,   544.,     0.,   268.,   304.,   780.,   868.,  1568.,  1276.,  1396.,   816.,   884.,     0.,   448.,   484.,  1220.,  1308.,  2348.,  1876.,  1996.,  1156.,  1224.,     0.,   473.,   503.,  1132.,  1200.,  1993.,  1484.,  1568.,   863.,   909.,     0.,   623.,   653.,  1472.,  1540.,  2563.,  1904.,  1988.,  1093.,  1139.,     0.,    41.,    95.,   196.,   312.,   481.,   356.,   488.,   263.,   333.,     0.,   311.,   365.,   776.,   892.,  1411.,  1016.,  1148.,   613.,   683.,     0.,   640.,   772.,  1636.,  1916.,  3020.,  2164.,  2476.,  1316.,  1480.,     0.,  1300.,  1432.,  3036.,  3316.,  5240.,  3724.,  4036.,  2136.,  2300.,     0.,  1960.,  2092.,  4436.,  4716.,  7460.,  5284.,  5596.,  2956.,  3120.,     0.,  1229.,  1307.,  2740.,  2904.,  4549.,  3188.,  3368.,  1763.,  1857.,     0.,  1619.,  1697.,  3560.,  3724.,  5839.,  4088.,  4268.,  2233.,  2327.,     0.,    77.,   179.,   364.,   576.,   877.,   620.,   848.,   443.,   561.,     0.,   587.,   689.,  1424.,  1636.,  2527.,  1760.,  1988.,  1033.,  1151.,     0.,  1192.,  1420.,  2932.,  3404.,  5252.,  3652.,  4156.,  2156.,  2416.,     0.,  2332.,  2560.,  5292.,  5764.,  8912.,  6172.,  6676.,  3456.,  3716.,     0.,  3472.,  3700.,  7652.,  8124., 12572.,  8692.,  9196.,  4756.,  5016.,     0.,  1985.,  2111.,  4348.,  4608.,  7105.,  4892.,  5168.,  2663.,  2805.,     0.,  2615.,  2741.,  5648.,  5908.,  9115.,  6272.,  6548.,  3373.,  3515.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.,  1252.,  2712.,  3640.,  5836.,  4568.,  7228.,  5496.,  7276.,  4568.,  5752.,   884.,  4984.,  2200.,  7676.,  2872.,  9452.,  3544.,  7324.,  3896.,  5080.,  2746.,  5996.,  7836.,  9918.,  8780., 10726.,  8700.,  8142.,  7596.,  5148.,  2884.,  7448.,  3896.,  7084.,  1176.,  4956.,  1528.,  5900.,  2200.,  3128.,  2514.,  5532.,  7244.,  9542.,  7164.,  9326.,  6060.,  8086.,  7836.,  7308.,  1812.,  7864.,  3544.,  7324.,  3896.,  8268.,  3224.,  8188.,  3896.,  5080.,  3236.,  6936.,  8376.,  7564.,  6936.,  5820.,  4472.,  7148.,  5912.,  6264.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  578.,  660.,  932.,  614.,  782.,    0.,  230.,  270.,  900.,  724., 1818., 1188., 1460.,  110.,  278.,    0.,  260.,  532., 1272., 1944., 3292., 2872., 3800., 2260., 2788.,    0., 1620., 1572., 4312., 2296., 6284., 2968., 3896.,  676., 1204.,    0.,  804., 1076., 2616., 3288., 5372., 4728., 4824., 3316., 2500.,    0., 1774.,  150., 2644.,  804., 4082., 1012., 1668.,  950., 1310.,    0., 1078., 1310., 2916., 3444., 3786., 4292., 2580., 2750.,  230.,    0.,  270.,  694., 1428., 2340., 3282., 1844., 2372.,  150.,  190.,    0., 2390., 2814., 5988., 3508., 4650.,  580., 1108.,   30.,   70.,    0., 1188., 1716., 3640., 4824., 6268., 3896., 4824., 1076., 1348.,    0., 3828.,  964., 6168., 2616., 5420., 2968., 3896.,  260.,  532.,    0., 2244., 2772., 6008., 7192., 5788., 5752., 2776., 1620., 1572.,    0.,  798.,   70., 1460.,  388., 2434.,  596.,  996.,  614.,  846.,    0.,  486.,  590., 1476., 1748., 2266., 2596., 1652., 1774.,  150.,    0.,  190.,  486., 1012., 1668., 2594., 2004., 2788., 1542., 1966.,    0., 1670., 1966., 4292., 2580., 5626., 3044., 3828.,  270.,  694.,    0., 1092., 1876., 3640., 4824., 7196., 3896., 4824., 2772., 3300.,    0., 5012., 3428., 7192., 1592., 6604., 1944., 2872., 1188., 1716.,    0., 2660., 3444., 6008., 7192., 8252., 5752., 3800., 3828.,  964.,    0., 3726.,  310., 1108., 1316., 2642.,  180.,  324.,  278.,  382.,    0., 2262., 2750., 3428., 3956., 1066.,  900.,  724.,  798.,   70.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,    48.,   104.,   120.,   136.,   152.,   239.,   266.,   196.,   216.,   329.,   362.,   256.,   280.,   419.,   458.,   316.,   344.,   372.,   400.,   111.,   118.,   264.,   280.,   296.,   312.,   509.,   536.,   396.,   416.,   659.,   692.,   496.,   520.,   809.,   848.,   596.,   624.,   652.,   680.,   214.,   232.,   491.,   530.,   569.,   608.,   951.,  1014.,   719.,   764.,  1176.,  1248.,   869.,   920.,  1401.,  1482.,  1019.,  1076.,  1133.,  1190.,   341.,   358.,   724.,   760.,   796.,   832.,  1259.,  1316.,   896.,   936.,  1409.,  1472.,   996.,  1040.,  1559.,  1628.,  1096.,  1144.,  1192.,  1240.,   559.,   592.,  1181.,  1250.,  1319.,  1388.,  2076.,  2184.,  1469.,  1544.,  2301.,  2418.,  1619.,  1700.,  2526.,  2652.,  1769.,  1856.,  1943.,  2030.,   571.,   598.,  1184.,  1240.,  1296.,  1352.,  2009.,  2096.,  1396.,  1456.,  2159.,  2252.,  1496.,  1560.,  2309.,  2408.,  1596.,  1664.,  1732.,  1800.,   841.,   868.,  1744.,  1800.,  1856.,  1912.,  2879.,  2966.,  1996.,  2056.,  3089.,  3182.,  2136.,  2200.,  3299.,  3398.,  2276.,  2344.,  2412.,  2480.,   561.,   608.,  1144.,  1240.,  1336.,  1432.,  2039.,  2186.,  1396.,  1496.,  2129.,  2282.,  1456.,  1560.,  2219.,  2378.,  1516.,  1624.,  1732.,  1840.,  1031.,  1078.,  2104.,  2200.,  2296.,  2392.,  3509.,  3656.,  2396.,  2496.,  3659.,  3812.,  2496.,  2600.,  3809.,  3968.,  2596.,  2704.,  2812.,  2920.,  1594.,  1672.,  3251.,  3410.,  3569.,  3728.,  5451.,  5694.,  3719.,  3884.,  5676.,  5928.,  3869.,  4040.,  5901.,  6162.,  4019.,  4196.,  4373.,  4550.,  1261.,  1318.,  2564.,  2680.,  2796.,  2912.,  4259.,  4436.,  2896.,  3016.,  4409.,  4592.,  2996.,  3120.,  4559.,  4748.,  3096.,  3224.,  3352.,  3480.,  1939.,  2032.,  3941.,  4130.,  4319.,  4508.,  6576.,  6864.,  4469.,  4664.,  6801.,  7098.,  4619.,  4820.,  7026.,  7332.,  4769.,  4976.,  5183.,  5390.,  1491.,  1558.,  3024.,  3160.,  3296.,  3432.,  5009.,  5216.,  3396.,  3536.,  5159.,  5372.,  3496.,  3640.,  5309.,  5528.,  3596.,  3744.,  3892.,  4040.,  2161.,  2228.,  4384.,  4520.,  4656.,  4792.,  7079.,  7286.,  4796.,  4936.,  7289.,  7502.,  4936.,  5080.,  7499.,  7718.,  5076.,  5224.,  5372.,  5520.,  1081.,  1168.,  2184.,  2360.,  2536.,  2712.,  3839.,  4106.,  2596.,  2776.,  3929.,  4202.,  2656.,  2840.,  4019.,  4298.,  2716.,  2904.,  3092.,  3280.,  1951.,  2038.,  3944.,  4120.,  4296.,  4472.,  6509.,  6776.,  4396.,  4576.,  6659.,  6932.,  4496.,  4680.,  6809.,  7088.,  4596.,  4784.,  4972.,  5160.,  2974.,  3112.,  6011.,  6290.,  6569.,  6848.,  9951., 10374.,  6719.,  7004., 10176., 10608.,  6869.,  7160., 10401., 10842.,  7019.,  7316.,  7613.,  7910.,  2181.,  2278.,  4404.,  4600.,  4796.,  4992.,  7259.,  7556.,  4896.,  5096.,  7409.,  7712.,  4996.,  5200.,  7559.,  7868.,  5096.,  5304.,  5512.,  5720.,  3319.,  3472.,  6701.,  7010.,  7319.,  7628., 11076., 11544.,  7469.,  7784., 11301., 11778.,  7619.,  7940., 11526., 12012.,  7769.,  8096.,  8423.,  8750.,  2411.,  2518.,  4864.,  5080.,  5296.,  5512.,  8009.,  8336.,  5396.,  5616.,  8159.,  8492.,  5496.,  5720.,  8309.,  8648.,  5596.,  5824.,  6052.,  6280.,  3481.,  3588.,  7024.,  7240.,  7456.,  7672., 11279., 11606.,  7596.,  7816., 11489., 11822.,  7736.,  7960., 11699., 12038.,  7876.,  8104.,  8332.,  8560.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,    0.,    0.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,    0.,    0.,   75.,   80.,   85.,   90.,  212.,  224.,  236.,  248.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,    0.,    0.,  125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,  496.,  512.,  528.,  544.,  303.,  312.,  321.,  330.,    0.,    0.,  124.,  128.,  132.,  136.,  295.,  304.,  313.,  322.,  517.,  532.,  383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,    0.,    0.,  164.,  168.,  172.,  176.,  385.,  394.,  403.,  412.,  667.,  682.,  493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,    0.,    0.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  112.,  136.,   83.,  100.,  117.,  134.,   63.,   72.,   81.,   90.,    0.,    0.,   77.,   84.,   91.,   98.,  193.,  208.,  223.,  238.,  352.,  376.,  253.,  270.,  287.,  304.,  153.,  162.,  171.,  180.,    0.,    0.,  157.,  174.,  191.,  208.,  404.,  440.,  476.,  512.,  749.,  806.,  536.,  576.,  616.,  656.,  327.,  348.,  369.,  390.,    0.,    0.,  327.,  344.,  361.,  378.,  764.,  800.,  836.,  872., 1319., 1376.,  936.,  976., 1016., 1056.,  537.,  558.,  579.,  600.,    0.,    0.,  497.,  514.,  531.,  548., 1124., 1160., 1196., 1232., 1889., 1946., 1336., 1376., 1416., 1456.,  747.,  768.,  789.,  810.,    0.,    0.,  310.,  320.,  330.,  340.,  691.,  712.,  733.,  754., 1147., 1180.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,    0.,    0.,  410.,  420.,  430.,  440.,  901.,  922.,  943.,  964., 1477., 1510., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  202.,  244.,  143.,  172.,  201.,  230.,  105.,  120.,  135.,  150.,    0.,    0.,  143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  622.,  664.,  433.,  462.,  491.,  520.,  255.,  270.,  285.,  300.,    0.,    0.,  289.,  318.,  347.,  376.,  716.,  776.,  836.,  896., 1289., 1382.,  896.,  960., 1024., 1088.,  531.,  564.,  597.,  630.,    0.,    0.,  579.,  608.,  637.,  666., 1316., 1376., 1436., 1496., 2219., 2312., 1536., 1600., 1664., 1728.,  861.,  894.,  927.,  960.,    0.,    0.,  869.,  898.,  927.,  956., 1916., 1976., 2036., 2096., 3149., 3242., 2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290.,    0.,    0.,  496.,  512.,  528.,  544., 1087., 1120., 1153., 1186., 1777., 1828., 1223., 1258., 1293., 1328.,  666.,  684.,  702.,  720.,    0.,    0.,  656.,  672.,  688.,  704., 1417., 1450., 1483., 1516., 2287., 2338., 1573., 1608., 1643., 1678.,  846.,  864.,  882.,  900.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   592.,   644.,  1708.,  1828.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  3760.,  4012.,  2060.,  2244.,  4436.,  4736.,  2340.,  2556.,  2772.,  2988.,  1349.,  1487.,  2940.,  3240.,  3540.,  3840.,  5697.,  6183.,  4216.,  4564.,  6711.,  7269.,  4892.,  5288.,  7725.,  8355.,  5568.,  6012.,  6456.,  6900.,  1132.,  1264.,  4068.,  4348.,  2900.,  3180.,  6464.,  6908.,  3180.,  3492.,  7140.,  7632.,  3460.,  3804.,  7816.,  8356.,  3740.,  4116.,  4492.,  4868.,  2799.,  3057.,  5840.,  6380.,  6920.,  7460., 10767., 11613.,  7596.,  8184., 11781., 12699.,  8272.,  8908., 12795., 13785.,  8948.,  9632., 10316., 11000.,  1672.,  1884.,  6428.,  6868.,  4300.,  4740.,  9844., 10528.,  4580.,  5052., 10520., 11252.,  4860.,  5364., 11196., 11976.,  5140.,  5676.,  6212.,  6748.,  3792.,  4004.,  7820.,  8260.,  8700.,  9140., 13420., 14104.,  9300.,  9772., 14320., 15052.,  9900., 10404., 15220., 16000., 10500., 11036., 11572., 12108.,  4344.,  4716.,  8860.,  9620., 10380., 11140., 15844., 17008., 10852., 11644., 16552., 17764., 11324., 12148., 17260., 18520., 11796., 12652., 13508., 14364.,  2752.,  3124., 11148., 11908.,  7100.,  7860., 16604., 17768.,  7380.,  8172., 17280., 18492.,  7660.,  8484., 17956., 19216.,  7940.,  8796.,  9652., 10508.,  7149.,  7767., 14540., 15800., 17060., 18320., 25785., 27455., 17032., 18084., 25583., 27069., 15980., 16824., 24357., 25659., 16656., 17548., 18440., 19332.,  3292.,  3744., 13508., 14428.,  8500.,  9420., 17232., 18380.,  5516.,  6212., 14132., 15072.,  1508.,  1980., 10008., 10740.,  1788.,  2292.,  2796.,  3300.,  7895.,  8377., 16032., 17020., 18008., 18996., 22087., 23349., 12860., 13640., 16765., 17843.,  6688.,  7260., 10419., 11313.,  7364.,  7984.,  8604.,  9224.,   568.,   844.,  9340.,  9908.,  2348.,  2916.,  4164.,  4784.,  2436.,  2780.,  4136.,  4548.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  2084.,  2236.,  3328.,  3604.,  6892.,  7460.,  8028.,  8596., 10172., 10792.,  5876.,  6220.,  7808.,  8220.,  2700.,  2820.,  4420.,  4624.,  3300.,  3452.,  3604.,  3756.,  1896.,  2076.,  3964.,  4340.,  4716.,  5092.,  7348.,  7936.,  5188.,  5596.,  8056.,  8692.,  5660.,  6100.,  8764.,  9448.,  6132.,  6604.,  7076.,  7548.,  1456.,  1636.,  5484.,  5860.,  3740.,  4116.,  8492.,  9080.,  4020.,  4428.,  9168.,  9804.,  4300.,  4740.,  9844., 10528.,  4580.,  5052.,  5524.,  5996.,  3669.,  3999.,  7580.,  8264.,  8948.,  9632., 13809., 14871.,  9624., 10356., 14823., 15957., 10300., 11080., 15837., 17043., 10976., 11804., 12632., 13460.,  1996.,  2256.,  7844.,  8380.,  5140.,  5676., 11872., 12700.,  5420.,  5988., 12548., 13424.,  5700.,  6300., 13224., 14148.,  5980.,  6612.,  7244.,  7876.,  5119.,  5569., 10480., 11404., 12328., 13252., 18879., 20301., 13004., 13976., 19893., 21387., 13680., 14700., 20907., 22473., 14356., 15424., 16492., 17560.,  2536.,  2876., 10204., 10900.,  6540.,  7236., 15252., 16320.,  6820.,  7548., 15928., 17044.,  7100.,  7860., 16604., 17768.,  7380.,  8172.,  8964.,  9756.,  5936.,  6276., 12108., 12804., 13500., 14196., 20620., 21688., 14100., 14828., 21520., 22636., 14700., 15460., 22420., 23584., 15300., 16092., 16884., 17676.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,     0.,     0.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1260.,  1380.,  1500.,  1620.,   900.,   968.,  1036.,  1104.,     0.,     0.,   508.,   544.,   580.,   616.,  1492.,  1580.,  1668.,  1756.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,     0.,     0.,   868.,   904.,   940.,   976.,  2372.,  2460.,  2548.,  2636.,  4576.,  4732.,  3660.,  3780.,  3900.,  4020.,  2260.,  2328.,  2396.,  2464.,     0.,     0.,   923.,   953.,   983.,  1013.,  2212.,  2280.,  2348.,  2416.,  3899.,  4013.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,  1829.,     0.,     0.,  1223.,  1253.,  1283.,  1313.,  2892.,  2960.,  3028.,  3096.,  5039.,  5153.,  3744.,  3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,     0.,     0.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   821.,  1007.,   612.,   744.,   876.,  1008.,   473.,   543.,   613.,   683.,     0.,     0.,   581.,   635.,   689.,   743.,  1464.,  1580.,  1696.,  1812.,  2681.,  2867.,  1932.,  2064.,  2196.,  2328.,  1173.,  1243.,  1313.,  1383.,     0.,     0.,  1180.,  1312.,  1444.,  1576.,  3060.,  3340.,  3620.,  3900.,  5704.,  6148.,  4092.,  4404.,  4716.,  5028.,  2508.,  2672.,  2836.,  3000.,     0.,     0.,  2500.,  2632.,  2764.,  2896.,  5860.,  6140.,  6420.,  6700., 10144., 10588.,  7212.,  7524.,  7836.,  8148.,  4148.,  4312.,  4476.,  4640.,     0.,     0.,  3820.,  3952.,  4084.,  4216.,  8660.,  8940.,  9220.,  9500., 14584., 15028., 10332., 10644., 10956., 11268.,  5788.,  5952.,  6116.,  6280.,     0.,     0.,  2399.,  2477.,  2555.,  2633.,  5356.,  5520.,  5684.,  5848.,  8903.,  9161.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,     0.,     0.,  3179.,  3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488., 11483., 11741.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  1068.,  1296.,  1524.,  1752.,   797.,   915.,  1033.,  1151.,     0.,     0.,  1097.,  1199.,  1301.,  1403.,  2688.,  2900.,  3112.,  3324.,  4805.,  5135.,  3348.,  3576.,  3804.,  4032.,  1977.,  2095.,  2213.,  2331.,     0.,     0.,  2212.,  2440.,  2668.,  2896.,  5508.,  5980.,  6452.,  6924.,  9952., 10684.,  6924.,  7428.,  7932.,  8436.,  4116.,  4376.,  4636.,  4896.,     0.,     0.,  4492.,  4720.,  4948.,  5176., 10228., 10700., 11172., 11644., 17272., 18004., 11964., 12468., 12972., 13476.,  6716.,  6976.,  7236.,  7496.,     0.,     0.,  6772.,  7000.,  7228.,  7456., 14948., 15420., 15892., 16364., 24592., 25324., 17004., 17508., 18012., 18516.,  9316.,  9576.,  9836., 10096.,     0.,     0.,  3875.,  4001.,  4127.,  4253.,  8500.,  8760.,  9020.,  9280., 13907., 14309.,  9576.,  9852., 10128., 10404.,  5219.,  5361.,  5503.,  5645.,     0.,     0.,  5135.,  5261.,  5387.,  5513., 11100., 11360., 11620., 11880., 17927., 18329., 12336., 12612., 12888., 13164.,  6639.,  6781.,  6923.,  7065.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.,  2244.,  2644.,  2456.,  3384.,  4312.,  5240.,  4572.,  6156.,  5496.,  6680.,  5580.,  7548.,  6680.,  8120.,  4220.,  6060.,  4472.,  5656.,  4152.,  5336.,   676.,  1076.,  4312.,  5240.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  6520.,  7704.,  2594.,  3418.,  4732.,  6572.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  2956.,  4412.,  2036.,  2564.,  5496.,  6680.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  4988.,  6828.,  1348.,  2004.,  6680.,  8120.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  5496.,  6680.,  2660.,  3316.,  3800.,  5240.,  6680.,  8120.,  5500.,  7340.,  6520.,  7704.,  4140.,  5852.,  4312.,  5240.,  4828.,  6412.,  5496.,  6680.,  3128.,  4312.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  626.,  938., 1140., 1412.,  852., 1124., 1118., 1286.,  110.,  278.,    0.,    0.,  110.,  150.,  190.,  230.,  548.,  692.,  516.,  660., 1250., 1562.,  852., 1124., 1396., 1668.,  110.,  278.,  446.,  614.,    0.,    0.,  340.,  612.,  884., 1156., 1784., 2456., 3128., 3800., 2796., 3996., 4312., 5240., 2456., 3384., 2836., 3364., 1012., 1540.,    0.,    0.,  884., 1156., 1108., 1380., 3128., 3800., 1784., 2456., 5196., 6396., 2456., 3384., 4312., 5240., 1012., 1540., 2068., 2596.,    0.,    0., 1108., 1380., 1652., 1924., 1784., 2456., 3128., 3800., 3564., 4764., 4312., 5240., 2456., 3384., 2068., 2596., 1780., 2308.,    0.,    0., 1542., 1774.,  150.,  382., 2580., 3108., 1268., 1796., 4714., 5602., 1604., 2260., 2916., 3572., 1670., 2030., 2390., 2750.,    0.,    0.,  150.,  382.,  614.,  846., 1268., 1796., 2324., 2852., 1754., 2642., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,    0.,    0.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2562., 3514., 3348., 3876.,  500., 1028.,  270.,  310.,   30.,   70.,    0.,    0., 1118., 1542., 1966., 2390., 4100., 5012., 2532., 3444., 4466., 5418.,  500., 1028., 1556., 2084.,   30.,   70.,  110.,  150.,    0.,    0., 2036., 2564., 3092., 3620., 3128., 4312., 5496., 6680., 3468., 4924., 3288., 4216., 3480., 4408., 1652., 1924.,  340.,  612.,    0.,    0., 3092., 3620.,  756., 1284., 5496., 6680., 3128., 4312., 6380., 7836., 3480., 4408., 5336., 6264.,  340.,  612.,  884., 1156.,    0.,    0.,  756., 1284., 1812., 2340., 3128., 4312., 5496., 6680., 4236., 5692., 5336., 6264., 1432., 2360.,  884., 1156., 1108., 1380.,    0.,    0.,  694.,  798.,   70.,  174., 1396., 1668.,  596.,  868., 2682., 3186.,  932., 1332., 1732., 2132., 1078., 1310., 1542., 1774.,    0.,    0.,   70.,  174.,  278.,  382.,  596.,  868., 1140., 1412., 1002., 1506., 1732., 2132., 1188., 1588., 1542., 1774.,  150.,  382.,    0.,    0.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 2130., 3210., 3508., 4292., 2196., 2980., 2814., 3238.,  270.,  694.,    0.,    0.,  782., 1078., 1374., 1670., 2916., 3572., 1860., 2516., 4290., 5370., 2196., 2980., 3764., 4548.,  270.,  694., 1118., 1542.,    0.,    0., 1684., 2468., 3252., 4036., 4152., 5336., 6520., 7704., 4140., 5852., 4312., 5240., 2456., 3384., 1812., 2340., 2036., 2564.,    0.,    0., 3252., 4036., 2452., 3236., 6520., 7704., 2104., 3288., 7564., 9276., 2456., 3384., 4312., 5240., 2036., 2564., 3092., 3620.,    0.,    0., 2452., 3236., 4020., 4804., 2104., 3288., 4472., 5656., 4908., 6620., 4312., 5240., 2456., 3384., 3092., 3620.,  756., 1284.,    0.,    0., 3238., 3726.,  310.,  798., 1556., 2084., 2292., 2820., 4042., 4674.,  260.,  404.,  548.,  692.,  486.,  590.,  694.,  798.,    0.,    0.,  310.,  798., 1286., 1774., 2292., 2820., 3348., 3876.,  570., 1202.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   75.,    82.,    89.,    96.,   192.,   208.,   224.,   240.,   256.,   272.,   288.,   304.,   451.,   478.,   505.,   532.,   372.,   392.,   412.,   432.,   625.,   658.,   691.,   724.,   488.,   512.,   536.,   560.,   799.,   838.,   877.,   916.,   604.,   632.,   660.,   688.,   716.,   744.,   772.,   800.,   215.,   222.,   229.,   236.,   512.,   528.,   544.,   560.,   576.,   592.,   608.,   624.,   991.,  1018.,  1045.,  1072.,   772.,   792.,   812.,   832.,  1285.,  1318.,  1351.,  1384.,   968.,   992.,  1016.,  1040.,  1579.,  1618.,  1657.,  1696.,  1164.,  1192.,  1220.,  1248.,  1276.,  1304.,  1332.,  1360.,   410.,   428.,   446.,   464.,   943.,   982.,  1021.,  1060.,  1099.,  1138.,  1177.,  1216.,  1839.,  1902.,  1965.,  2028.,  1393.,  1438.,  1483.,  1528.,  2280.,  2352.,  2424.,  2496.,  1687.,  1738.,  1789.,  1840.,  2721.,  2802.,  2883.,  2964.,  1981.,  2038.,  2095.,  2152.,  2209.,  2266.,  2323.,  2380.,   665.,   682.,   699.,   716.,  1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,  1664.,  2461.,  2518.,  2575.,  2632.,  1752.,  1792.,  1832.,  1872.,  2755.,  2818.,  2881.,  2944.,  1948.,  1992.,  2036.,  2080.,  3049.,  3118.,  3187.,  3256.,  2144.,  2192.,  2240.,  2288.,  2336.,  2384.,  2432.,  2480.,  1085.,  1118.,  1151.,  1184.,  2293.,  2362.,  2431.,  2500.,  2569.,  2638.,  2707.,  2776.,  4044.,  4152.,  4260.,  4368.,  2863.,  2938.,  3013.,  3088.,  4485.,  4602.,  4719.,  4836.,  3157.,  3238.,  3319.,  3400.,  4926.,  5052.,  5178.,  5304.,  3451.,  3538.,  3625.,  3712.,  3799.,  3886.,  3973.,  4060.,  1115.,  1142.,  1169.,  1196.,  2312.,  2368.,  2424.,  2480.,  2536.,  2592.,  2648.,  2704.,  3931.,  4018.,  4105.,  4192.,  2732.,  2792.,  2852.,  2912.,  4225.,  4318.,  4411.,  4504.,  2928.,  2992.,  3056.,  3120.,  4519.,  4618.,  4717.,  4816.,  3124.,  3192.,  3260.,  3328.,  3396.,  3464.,  3532.,  3600.,  1655.,  1682.,  1709.,  1736.,  3432.,  3488.,  3544.,  3600.,  3656.,  3712.,  3768.,  3824.,  5671.,  5758.,  5845.,  5932.,  3932.,  3992.,  4052.,  4112.,  6085.,  6178.,  6271.,  6364.,  4208.,  4272.,  4336.,  4400.,  6499.,  6598.,  6697.,  6796.,  4484.,  4552.,  4620.,  4688.,  4756.,  4824.,  4892.,  4960.,  1075.,  1122.,  1169.,  1216.,  2192.,  2288.,  2384.,  2480.,  2576.,  2672.,  2768.,  2864.,  3931.,  4078.,  4225.,  4372.,  2692.,  2792.,  2892.,  2992.,  4105.,  4258.,  4411.,  4564.,  2808.,  2912.,  3016.,  3120.,  4279.,  4438.,  4597.,  4756.,  2924.,  3032.,  3140.,  3248.,  3356.,  3464.,  3572.,  3680.,  2015.,  2062.,  2109.,  2156.,  4112.,  4208.,  4304.,  4400.,  4496.,  4592.,  4688.,  4784.,  6871.,  7018.,  7165.,  7312.,  4692.,  4792.,  4892.,  4992.,  7165.,  7318.,  7471.,  7624.,  4888.,  4992.,  5096.,  5200.,  7459.,  7618.,  7777.,  7936.,  5084.,  5192.,  5300.,  5408.,  5516.,  5624.,  5732.,  5840.,  3110.,  3188.,  3266.,  3344.,  6343.,  6502.,  6661.,  6820.,  6979.,  7138.,  7297.,  7456., 10659., 10902., 11145., 11388.,  7273.,  7438.,  7603.,  7768., 11100., 11352., 11604., 11856.,  7567.,  7738.,  7909.,  8080., 11541., 11802., 12063., 12324.,  7861.,  8038.,  8215.,  8392.,  8569.,  8746.,  8923.,  9100.,  2465.,  2522.,  2579.,  2636.,  5012.,  5128.,  5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,  8695.,  8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,  9184.,  5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,  6064.,  6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,  3878.,  3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,  8827.,  9016., 12864., 13152., 13440., 13728.,  8743.,  8938.,  9133.,  9328., 13305., 13602., 13899., 14196.,  9037.,  9238.,  9439.,  9640., 13746., 14052., 14358., 14664.,  9331.,  9538.,  9745.,  9952., 10159., 10366., 10573., 10780.,  2915.,  2982.,  3049.,  3116.,  5912.,  6048.,  6184.,  6320.,  6456.,  6592.,  6728.,  6864.,  9811., 10018., 10225., 10432.,  6652.,  6792.,  6932.,  7072., 10105., 10318., 10531., 10744.,  6848.,  6992.,  7136.,  7280., 10399., 10618., 10837., 11056.,  7044.,  7192.,  7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4255.,  4322.,  4389.,  4456.,  8632.,  8768.,  8904.,  9040.,  9176.,  9312.,  9448.,  9584., 13951., 14158., 14365., 14572.,  9452.,  9592.,  9732.,  9872., 14365., 14578., 14791., 15004.,  9728.,  9872., 10016., 10160., 14779., 14998., 15217., 15436., 10004., 10152., 10300., 10448., 10596., 10744., 10892., 11040.,  2075.,  2162.,  2249.,  2336.,  4192.,  4368.,  4544.,  4720.,  4896.,  5072.,  5248.,  5424.,  7411.,  7678.,  7945.,  8212.,  5012.,  5192.,  5372.,  5552.,  7585.,  7858.,  8131.,  8404.,  5128.,  5312.,  5496.,  5680.,  7759.,  8038.,  8317.,  8596.,  5244.,  5432.,  5620.,  5808.,  5996.,  6184.,  6372.,  6560.,  3815.,  3902.,  3989.,  4076.,  7712.,  7888.,  8064.,  8240.,  8416.,  8592.,  8768.,  8944., 12751., 13018., 13285., 13552.,  8612.,  8792.,  8972.,  9152., 13045., 13318., 13591., 13864.,  8808.,  8992.,  9176.,  9360., 13339., 13618., 13897., 14176.,  9004.,  9192.,  9380.,  9568.,  9756.,  9944., 10132., 10320.,  5810.,  5948.,  6086.,  6224., 11743., 12022., 12301., 12580., 12859., 13138., 13417., 13696., 19479., 19902., 20325., 20748., 13153., 13438., 13723., 14008., 19920., 20352., 20784., 21216., 13447., 13738., 14029., 14320., 20361., 20802., 21243., 21684., 13741., 14038., 14335., 14632., 14929., 15226., 15523., 15820.,  4265.,  4362.,  4459.,  4556.,  8612.,  8808.,  9004.,  9200.,  9396.,  9592.,  9788.,  9984., 14221., 14518., 14815., 15112.,  9592.,  9792.,  9992., 10192., 14515., 14818., 15121., 15424.,  9788.,  9992., 10196., 10400., 14809., 15118., 15427., 15736.,  9984., 10192., 10400., 10608., 10816., 11024., 11232., 11440.,  6485.,  6638.,  6791.,  6944., 13093., 13402., 13711., 14020., 14329., 14638., 14947., 15256., 21684., 22152., 22620., 23088., 14623., 14938., 15253., 15568., 22125., 22602., 23079., 23556., 14917., 15238., 15559., 15880., 22566., 23052., 23538., 24024., 15211., 15538., 15865., 16192., 16519., 16846., 17173., 17500.,  4715.,  4822.,  4929.,  5036.,  9512.,  9728.,  9944., 10160., 10376., 10592., 10808., 11024., 15691., 16018., 16345., 16672., 10572., 10792., 11012., 11232., 15985., 16318., 16651., 16984., 10768., 10992., 11216., 11440., 16279., 16618., 16957., 17296., 10964., 11192., 11420., 11648., 11876., 12104., 12332., 12560.,  6855.,  6962.,  7069.,  7176., 13832., 14048., 14264., 14480., 14696., 14912., 15128., 15344., 22231., 22558., 22885., 23212., 14972., 15192., 15412., 15632., 22645., 22978., 23311., 23644., 15248., 15472., 15696., 15920., 23059., 23398., 23737., 24076., 15524., 15752., 15980., 16208., 16436., 16664., 16892., 17120.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,   41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,   45.,   48.,   51.,   54.,   57.,   60.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,  102.,  105.,  108.,  111.,  114.,  117.,  120.,    0.,    0.,    0.,    0.,   45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,  172.,  184.,  196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,  336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,  255.,  264.,  273.,  282.,  291.,  300.,    0.,    0.,    0.,    0.,  145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,  436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,  656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,  435.,  444.,  453.,  462.,  471.,  480.,    0.,    0.,    0.,    0.,  245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,  676.,  688.,  700.,  712.,  724.,  736., 1237., 1258., 1279., 1300.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088.,  597.,  606.,  615.,  624.,  633.,  642.,  651.,  660.,    0.,    0.,    0.,    0.,  244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,  599.,  608.,  617.,  626.,  635.,  644., 1019., 1034., 1049., 1064.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,  779.,  788.,  797.,  806.,  815.,  824., 1319., 1334., 1349., 1364.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,  101.,  116.,  131.,  146.,  161.,  176.,  200.,  224.,  248.,  272.,  149.,  166.,  183.,  200.,  217.,  234.,  251.,  268.,  117.,  126.,  135.,  144.,  153.,  162.,  171.,  180.,    0.,    0.,    0.,    0.,  147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,  401.,  416.,  431.,  446.,  461.,  476.,  680.,  704.,  728.,  752.,  489.,  506.,  523.,  540.,  557.,  574.,  591.,  608.,  297.,  306.,  315.,  324.,  333.,  342.,  351.,  360.,    0.,    0.,    0.,    0.,  297.,  314.,  331.,  348.,  365.,  382.,  399.,  416.,  772.,  808.,  844.,  880.,  916.,  952.,  988., 1024., 1441., 1498., 1555., 1612., 1032., 1072., 1112., 1152., 1192., 1232., 1272., 1312.,  633.,  654.,  675.,  696.,  717.,  738.,  759.,  780.,    0.,    0.,    0.,    0.,  637.,  654.,  671.,  688.,  705.,  722.,  739.,  756., 1492., 1528., 1564., 1600., 1636., 1672., 1708., 1744., 2581., 2638., 2695., 2752., 1832., 1872., 1912., 1952., 1992., 2032., 2072., 2112., 1053., 1074., 1095., 1116., 1137., 1158., 1179., 1200.,    0.,    0.,    0.,    0.,  977.,  994., 1011., 1028., 1045., 1062., 1079., 1096., 2212., 2248., 2284., 2320., 2356., 2392., 2428., 2464., 3721., 3778., 3835., 3892., 2632., 2672., 2712., 2752., 2792., 2832., 2872., 2912., 1473., 1494., 1515., 1536., 1557., 1578., 1599., 1620.,    0.,    0.,    0.,    0.,  610.,  620.,  630.,  640.,  650.,  660.,  670.,  680., 1361., 1382., 1403., 1424., 1445., 1466., 1487., 1508., 2261., 2294., 2327., 2360., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,    0.,    0.,    0.,    0.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880., 1781., 1802., 1823., 1844., 1865., 1886., 1907., 1928., 2921., 2954., 2987., 3020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   65.,   78.,   91.,  104.,  131.,  158.,  185.,  212.,  239.,  266.,  293.,  320.,  362.,  404.,  446.,  488.,  257.,  286.,  315.,  344.,  373.,  402.,  431.,  460.,  195.,  210.,  225.,  240.,  255.,  270.,  285.,  300.,    0.,    0.,    0.,    0.,  273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,  725.,  752.,  779.,  806.,  833.,  860., 1202., 1244., 1286., 1328.,  837.,  866.,  895.,  924.,  953.,  982., 1011., 1040.,  495.,  510.,  525.,  540.,  555.,  570.,  585.,  600.,    0.,    0.,    0.,    0.,  549.,  578.,  607.,  636.,  665.,  694.,  723.,  752., 1372., 1432., 1492., 1552., 1612., 1672., 1732., 1792., 2485., 2578., 2671., 2764., 1728., 1792., 1856., 1920., 1984., 2048., 2112., 2176., 1029., 1062., 1095., 1128., 1161., 1194., 1227., 1260.,    0.,    0.,    0.,    0., 1129., 1158., 1187., 1216., 1245., 1274., 1303., 1332., 2572., 2632., 2692., 2752., 2812., 2872., 2932., 2992., 4345., 4438., 4531., 4624., 3008., 3072., 3136., 3200., 3264., 3328., 3392., 3456., 1689., 1722., 1755., 1788., 1821., 1854., 1887., 1920.,    0.,    0.,    0.,    0., 1709., 1738., 1767., 1796., 1825., 1854., 1883., 1912., 3772., 3832., 3892., 3952., 4012., 4072., 4132., 4192., 6205., 6298., 6391., 6484., 4288., 4352., 4416., 4480., 4544., 4608., 4672., 4736., 2349., 2382., 2415., 2448., 2481., 2514., 2547., 2580.,    0.,    0.,    0.,    0.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088., 2141., 2174., 2207., 2240., 2273., 2306., 2339., 2372., 3503., 3554., 3605., 3656., 2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368., 1386., 1404., 1422., 1440.,    0.,    0.,    0.,    0., 1296., 1312., 1328., 1344., 1360., 1376., 1392., 1408., 2801., 2834., 2867., 2900., 2933., 2966., 2999., 3032., 4523., 4574., 4625., 4676., 3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728., 1746., 1764., 1782., 1800.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  296.,   348.,   400.,   452.,   668.,   788.,   908.,  1028.,  1148.,  1268.,  1388.,  1508.,  1868.,  2072.,  2276.,  2480.,  1556.,  1708.,  1860.,  2012.,  2480.,  2732.,  2984.,  3236.,  1964.,  2148.,  2332.,  2516.,  3092.,  3392.,  3692.,  3992.,  2372.,  2588.,  2804.,  3020.,  3236.,  3452.,  3668.,  3884.,  1144.,  1196.,  1248.,  1300.,  2876.,  2996.,  3116.,  3236.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  4640.,  4892.,  5144.,  5396.,  1996.,  2180.,  2364.,  2548.,  5444.,  5744.,  6044.,  6344.,  2276.,  2492.,  2708.,  2924.,  3140.,  3356.,  3572.,  3788.,  1121.,  1259.,  1397.,  1535.,  2452.,  2752.,  3052.,  3352.,  3652.,  3952.,  4252.,  4552.,  5649.,  6135.,  6621.,  7107.,  4456.,  4804.,  5152.,  5500.,  6599.,  7157.,  7715.,  8273.,  5260.,  5656.,  6052.,  6448.,  7549.,  8179.,  8809.,  9439.,  6064.,  6508.,  6952.,  7396.,  6880.,  7324.,  7768.,  8212.,  2164.,  2296.,  2428.,  2560.,  6196.,  6476.,  6756.,  7036.,  2836.,  3116.,  3396.,  3676.,  7856.,  8300.,  8744.,  9188.,  3116.,  3428.,  3740.,  4052.,  8660.,  9152.,  9644., 10136.,  3396.,  3740.,  4084.,  4428.,  9464., 10004., 10544., 11084.,  3676.,  4052.,  4428.,  4804.,  5180.,  5556.,  5932.,  6308.,  2651.,  2909.,  3167.,  3425.,  5512.,  6052.,  6592.,  7132.,  7672.,  8212.,  8752.,  9292., 10399., 11245., 12091., 12937.,  8476.,  9064.,  9652., 10240., 11349., 12267., 13185., 14103.,  9280.,  9916., 10552., 11188., 12299., 13289., 14279., 15269., 10084., 10768., 11452., 12136., 10580., 11264., 11948., 12632.,  3184.,  3396.,  3608.,  3820.,  9516.,  9956., 10396., 10836.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932., 12680., 13412., 14144., 14876.,  4796.,  5300.,  5804.,  6308., 13484., 14264., 15044., 15824.,  5076.,  5612.,  6148.,  6684.,  7220.,  7756.,  8292.,  8828.,  3392.,  3604.,  3816.,  4028.,  6988.,  7428.,  7868.,  8308.,  8748.,  9188.,  9628., 10068., 10708., 11392., 12076., 12760.,  9412.,  9884., 10356., 10828., 11448., 12180., 12912., 13644., 10076., 10580., 11084., 11588., 12188., 12968., 13748., 14528., 10740., 11276., 11812., 12348.,  9364.,  9900., 10436., 10972.,  3096.,  3468.,  3840.,  4212.,  6268.,  7028.,  7788.,  8548.,  9308., 10068., 10828., 11588., 14108., 15272., 16436., 17600.,  9716., 10508., 11300., 12092., 14720., 15932., 17144., 18356., 10124., 10948., 11772., 12596., 15332., 16592., 17852., 19112., 10532., 11388., 12244., 13100., 13956., 14812., 15668., 16524.,  5224.,  5596.,  5968.,  6340., 16156., 16916., 17676., 18436.,  7036.,  7796.,  8556.,  9316., 19916., 21080., 22244., 23408.,  7316.,  8108.,  8900.,  9692., 20720., 21932., 23144., 24356.,  7596.,  8420.,  9244., 10068., 21524., 22784., 24044., 25304.,  7876.,  8732.,  9588., 10444., 11300., 12156., 13012., 13868.,  7241.,  7859.,  8477.,  9095., 14692., 15952., 17212., 18472., 19732., 20992., 22252., 23512., 24457., 26127., 27797., 29467., 19320., 20372., 21424., 22476., 23167., 24653., 26139., 27625., 16860., 17704., 18548., 19392., 19829., 21131., 22433., 23735., 17664., 18556., 19448., 20340., 15152., 16044., 16936., 17828.,  6244.,  6696.,  7148.,  7600., 19476., 20396., 21316., 22236.,  8436.,  9356., 10276., 11196., 18624., 19772., 20920., 22068.,  2380.,  3076.,  3772.,  4468., 12068., 13008., 13948., 14888.,  2468.,  2940.,  3412.,  3884., 11656., 12388., 13120., 13852.,  2748.,  3252.,  3756.,  4260.,  4764.,  5268.,  5772.,  6276.,  7555.,  8037.,  8519.,  9001., 15320., 16308., 17296., 18284., 19272., 20260., 21248., 22236., 20439., 21701., 22963., 24225., 16812., 17592., 18372., 19152., 17101., 18179., 19257., 20335., 12304., 12876., 13448., 14020., 11715., 12609., 13503., 14397., 13108., 13728., 14348., 14968.,  8228.,  8848.,  9468., 10088.,   928.,  1204.,  1480.,  1756., 10124., 10692., 11260., 11828.,  3308.,  3876.,  4444.,  5012.,  6708.,  7328.,  7948.,  8568.,  3396.,  3740.,  4084.,  4428.,  6296.,  6708.,  7120.,  7532.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  2324.,  2476.,  2628.,  2780.,  5488.,  5764.,  6040.,  6316., 11180., 11748., 12316., 12884., 13452., 14020., 14588., 15156.,  8356.,  8976.,  9596., 10216.,  8804.,  9148.,  9492.,  9836.,  2760.,  3172.,  3584.,  3996.,  2108.,  2228.,  2348.,  2468.,  3308.,  3512.,  3716.,  3920.,  2772.,  2924.,  3076.,  3228.,  2932.,  3084.,  3236.,  3388.,  1416.,  1596.,  1776.,  1956.,  2908.,  3284.,  3660.,  4036.,  4412.,  4788.,  5164.,  5540.,  6764.,  7352.,  7940.,  8528.,  4820.,  5228.,  5636.,  6044.,  7376.,  8012.,  8648.,  9284.,  5228.,  5668.,  6108.,  6548.,  7988.,  8672.,  9356., 10040.,  5636.,  6108.,  6580.,  7052.,  7524.,  7996.,  8468.,  8940.,  2776.,  2956.,  3136.,  3316.,  8188.,  8564.,  8940.,  9316.,  3676.,  4052.,  4428.,  4804., 10268., 10856., 11444., 12032.,  3956.,  4364.,  4772.,  5180., 11072., 11708., 12344., 12980.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932.,  6404.,  6876.,  7348.,  7820.,  3569.,  3899.,  4229.,  4559.,  7348.,  8032.,  8716.,  9400., 10084., 10768., 11452., 12136., 13249., 14311., 15373., 16435., 10888., 11620., 12352., 13084., 14199., 15333., 16467., 17601., 11692., 12472., 13252., 14032., 15149., 16355., 17561., 18767., 12496., 13324., 14152., 14980., 12800., 13628., 14456., 15284.,  3796.,  4056.,  4316.,  4576., 11508., 12044., 12580., 13116.,  5076.,  5612.,  6148.,  6684., 14288., 15116., 15944., 16772.,  5356.,  5924.,  6492.,  7060., 15092., 15968., 16844., 17720.,  5636.,  6236.,  6836.,  7436., 15896., 16820., 17744., 18668.,  5916.,  6548.,  7180.,  7812.,  8444.,  9076.,  9708., 10340.,  5099.,  5549.,  5999.,  6449., 10408., 11332., 12256., 13180., 14104., 15028., 15952., 16876., 17999., 19421., 20843., 22265., 14908., 15880., 16852., 17824., 18949., 20443., 21937., 23431., 15712., 16732., 17752., 18772., 19899., 21465., 23031., 24597., 16516., 17584., 18652., 19720., 16500., 17568., 18636., 19704.,  4816.,  5156.,  5496.,  5836., 14828., 15524., 16220., 16916.,  6476.,  7172.,  7868.,  8564., 18308., 19376., 20444., 21512.,  6756.,  7484.,  8212.,  8940., 19112., 20228., 21344., 22460.,  7036.,  7796.,  8556.,  9316., 19916., 21080., 22244., 23408.,  7316.,  8108.,  8900.,  9692., 10484., 11276., 12068., 12860.,  5536.,  5876.,  6216.,  6556., 11276., 11972., 12668., 13364., 14060., 14756., 15452., 16148., 16628., 17696., 18764., 19832., 14724., 15452., 16180., 16908., 17368., 18484., 19600., 20716., 15388., 16148., 16908., 17668., 18108., 19272., 20436., 21600., 16052., 16844., 17636., 18428., 13652., 14444., 15236., 16028.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1148.,  1184.,  1220.,  1256.,   721.,   743.,   765.,   787.,   809.,   831.,   853.,   875.,     0.,     0.,     0.,     0.,   268.,   304.,   340.,   376.,   412.,   448.,   484.,   520.,  1156.,  1244.,  1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,  3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,  1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,     0.,     0.,     0.,     0.,   988.,  1024.,  1060.,  1096.,   748.,   784.,   820.,   856.,  2532.,  2620.,  2708.,  2796.,  1988.,  2076.,  2164.,  2252.,  4632.,  4788.,  4944.,  5100.,  2524.,  2644.,  2764.,  2884.,  3004.,  3124.,  3244.,  3364.,  1700.,  1768.,  1836.,  1904.,  1972.,  2040.,  2108.,  2176.,     0.,     0.,     0.,     0.,  1324.,  1360.,  1396.,  1432.,  1468.,  1504.,  1540.,  1576.,  3396.,  3484.,  3572.,  3660.,  3748.,  3836.,  3924.,  4012.,  6344.,  6500.,  6656.,  6812.,  4924.,  5044.,  5164.,  5284.,  5404.,  5524.,  5644.,  5764.,  3060.,  3128.,  3196.,  3264.,  3332.,  3400.,  3468.,  3536.,     0.,     0.,     0.,     0.,  1823.,  1853.,  1883.,  1913.,    23.,    53.,    83.,   113.,  2452.,  2520.,  2588.,  2656.,   292.,   360.,   428.,   496.,  3359.,  3473.,  3587.,  3701.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,   403.,   449.,   495.,   541.,   587.,   633.,   679.,   725.,     0.,     0.,     0.,     0.,   503.,   533.,   563.,   593.,   623.,   653.,   683.,   713.,  1380.,  1448.,  1516.,  1584.,  1652.,  1720.,  1788.,  1856.,  2695.,  2809.,  2923.,  3037.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  1323.,  1369.,  1415.,  1461.,  1507.,  1553.,  1599.,  1645.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,  1100.,  1216.,  1332.,  1501.,  1687.,  1873.,  2059.,  1124.,  1256.,  1388.,  1520.,  1652.,  1784.,  1916.,  2048.,   893.,   963.,  1033.,  1103.,  1173.,  1243.,  1313.,  1383.,     0.,     0.,     0.,     0.,  1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,  2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  5221.,  5407.,  5593.,  5779.,  3764.,  3896.,  4028.,  4160.,  4292.,  4424.,  4556.,  4688.,  2293.,  2363.,  2433.,  2503.,  2573.,  2643.,  2713.,  2783.,     0.,     0.,     0.,     0.,  2260.,  2392.,  2524.,  2656.,  2788.,  2920.,  3052.,  3184.,  5908.,  6188.,  6468.,  6748.,  7028.,  7308.,  7588.,  7868., 11072., 11516., 11960., 12404.,  7948.,  8260.,  8572.,  8884.,  9196.,  9508.,  9820., 10132.,  4892.,  5056.,  5220.,  5384.,  5548.,  5712.,  5876.,  6040.,     0.,     0.,     0.,     0.,  4900.,  5032.,  5164.,  5296.,  1972.,  2104.,  2236.,  2368.,  8052.,  8332.,  8612.,  8892.,  5204.,  5484.,  5764.,  6044., 12528., 12972., 13416., 13860.,  5740.,  6052.,  6364.,  6676.,  6988.,  7300.,  7612.,  7924.,  3692.,  3856.,  4020.,  4184.,  4348.,  4512.,  4676.,  4840.,     0.,     0.,     0.,     0.,  4084.,  4216.,  4348.,  4480.,  4612.,  4744.,  4876.,  5008.,  9684.,  9964., 10244., 10524., 10804., 11084., 11364., 11644., 16928., 17372., 17816., 18260., 11980., 12292., 12604., 12916., 13228., 13540., 13852., 14164.,  6972.,  7136.,  7300.,  7464.,  7628.,  7792.,  7956.,  8120.,     0.,     0.,     0.,     0.,  4739.,  4817.,  4895.,  4973.,    59.,   137.,   215.,   293.,  5596.,  5760.,  5924.,  6088.,   748.,   912.,  1076.,  1240.,  7115.,  7373.,  7631.,  7889.,   824.,  1004.,  1184.,  1364.,  1544.,  1724.,  1904.,  2084.,   823.,   917.,  1011.,  1105.,  1199.,  1293.,  1387.,  1481.,     0.,     0.,     0.,     0.,  1307.,  1385.,  1463.,  1541.,  1619.,  1697.,  1775.,  1853.,  3372.,  3536.,  3700.,  3864.,  4028.,  4192.,  4356.,  4520.,  6259.,  6517.,  6775.,  7033.,  4424.,  4604.,  4784.,  4964.,  5144.,  5324.,  5504.,  5684.,  2703.,  2797.,  2891.,  2985.,  3079.,  3173.,  3267.,  3361.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   485.,   587.,   689.,   791.,   976.,  1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2761.,  3091.,  3421.,  3751.,  1964.,  2192.,  2420.,  2648.,  2876.,  3104.,  3332.,  3560.,  1505.,  1623.,  1741.,  1859.,  1977.,  2095.,  2213.,  2331.,     0.,     0.,     0.,     0.,  2117.,  2219.,  2321.,  2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,  6276.,  6488.,  6700.,  9361.,  9691., 10021., 10351.,  6524.,  6752.,  6980.,  7208.,  7436.,  7664.,  7892.,  8120.,  3865.,  3983.,  4101.,  4219.,  4337.,  4455.,  4573.,  4691.,     0.,     0.,     0.,     0.,  4252.,  4480.,  4708.,  4936.,  5164.,  5392.,  5620.,  5848., 10660., 11132., 11604., 12076., 12548., 13020., 13492., 13964., 19352., 20084., 20816., 21548., 13468., 13972., 14476., 14980., 15484., 15988., 16492., 16996.,  8036.,  8296.,  8556.,  8816.,  9076.,  9336.,  9596.,  9856.,     0.,     0.,     0.,     0.,  8812.,  9040.,  9268.,  9496.,  3196.,  3424.,  3652.,  3880., 13572., 14044., 14516., 14988.,  8420.,  8892.,  9364.,  9836., 20424., 21156., 21888., 22620.,  8956.,  9460.,  9964., 10468., 10972., 11476., 11980., 12484.,  5684.,  5944.,  6204.,  6464.,  6724.,  6984.,  7244.,  7504.,     0.,     0.,     0.,     0.,  6844.,  7072.,  7300.,  7528.,  7756.,  7984.,  8212.,  8440., 15972., 16444., 16916., 17388., 17860., 18332., 18804., 19276., 27512., 28244., 28976., 29708., 19036., 19540., 20044., 20548., 21052., 21556., 22060., 22564., 10884., 11144., 11404., 11664., 11924., 12184., 12444., 12704.,     0.,     0.,     0.,     0.,  7655.,  7781.,  7907.,  8033.,    95.,   221.,   347.,   473.,  8740.,  9000.,  9260.,  9520.,  1204.,  1464.,  1724.,  1984., 10871., 11273., 11675., 12077.,  1280.,  1556.,  1832.,  2108.,  2384.,  2660.,  2936.,  3212.,  1243.,  1385.,  1527.,  1669.,  1811.,  1953.,  2095.,  2237.,     0.,     0.,     0.,     0.,  2111.,  2237.,  2363.,  2489.,  2615.,  2741.,  2867.,  2993.,  5364.,  5624.,  5884.,  6144.,  6404.,  6664.,  6924.,  7184.,  9823., 10225., 10627., 11029.,  6800.,  7076.,  7352.,  7628.,  7904.,  8180.,  8456.,  8732.,  4083.,  4225.,  4367.,  4509.,  4651.,  4793.,  4935.,  5077.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,  1260.,  3228.,  5196.,  7164.,  6680.,  8120.,  9560., 11000.,  1180.,  3020.,  4860.,  6700.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3826.,  4650.,  5474.,  6298.,  1180.,  3020.,  4860.,  6700.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  3530.,  4290.,  5050.,  5810.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1180.,  3020.,  4860.,  6700.,   420.,  1076.,  1732.,  2388.,  6680.,  8120.,  9560., 11000.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   920.,  2360.,  3800.,  5240.,  6680.,  8120.,  9560., 11000.,  1180.,  3020.,  4860.,  6700.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   210.,   522.,   834.,  1146.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  4122.,  5010.,  5898.,  6786.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   570.,  1458.,  2346.,  3234.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   610.,  1562.,  2514.,  3466.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,     0.,     0.,     0.,     0.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  4418.,  5370.,  6322.,  7274.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,     0.,     0.,     0.,     0.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,     0.,     0.,     0.,     0.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,     0.,     0.,     0.,     0.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,     0.,     0.,     0.,     0.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,     0.,     0.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   330.,   834.,  1338.,  1842.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   690.,  1770.,  2850.,  3930.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,     0.,     0.,     0.,     0.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  2262.,  2750.,  3238.,  3726.,   310.,   798.,  1286.,  1774.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  2938.,  3570.,  4202.,  4834.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   310.,   798.,  1286.,  1774.,  2262.,  2750.,  3238.,  3726.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   410.,  1042.,  1674.,  2306.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,  786., 1228.,  858., 1336.,  930.,  984.,  244.,  279.,  428.,  295.,  452.,  311.,  350.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,  894.,  972., 1492., 1024., 1570., 1076., 1162., 1385., 1514., 2322., 1592., 2439., 1670., 1811., 1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492., 1610., 1828., 1938., 2956., 2010., 3064., 2082., 2200.,  468.,  535.,  812.,  551.,  836.,  567.,  638.,  952., 1094., 1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155., 1854., 2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662., 3152., 4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98., 108., 118.,  74.,  80.,  54.,  58., 148., 158., 168., 104., 110.,  48.,  51., 118., 125., 132.,  76.,  80.,  63.,  66., 153., 160., 167.,  96., 100.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,  10.,  21.,  32.,  43.,  24.,  30.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,  62.,  74., 160., 186., 212., 116., 130., 122., 134., 290., 316., 342., 186., 200., 182., 194., 420., 446., 472., 256., 270., 112., 119., 254., 269., 284., 152., 160., 147., 154., 329., 344., 359., 192., 200.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,  18.,  37.,  56.,  75.,  40.,  50.,  54.,  63., 132., 151., 170.,  90., 100., 110., 130., 272., 314., 356., 188., 210., 210., 230., 482., 524., 566., 298., 320., 310., 330., 692., 734., 776., 408., 430., 176., 187., 390., 413., 436., 228., 240., 231., 242., 505., 528., 551., 288., 300.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.,  1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  9912., 10784., 16442., 11192., 17054., 11600., 12536., 14272., 15144., 23102., 15712., 23954., 16280., 17216.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   29.,   67.,  140.,  224.,  308.,  173.,  219.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,  450.,  542., 1176., 1376., 1576.,  866.,  974.,  910., 1002., 2176., 2376., 2576., 1406., 1514., 1370., 1462., 3176., 3376., 3576., 1946., 2054.,  851.,  905., 1936., 2052., 2168., 1163., 1225., 1121., 1175., 2516., 2632., 2748., 1473., 1535.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   53.,  123.,  252.,  400.,  548.,  293.,  371.,  403.,  473.,  992., 1140., 1288.,  683.,  761.,  818.,  974., 2040., 2368., 2696., 1426., 1598., 1598., 1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233., 2327.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,  1580.,  1148.,  4296.,  3176.,  3720.,  2284.,  2620.,  1980.,  2188.,  5352.,  5896.,  6440.,  3964.,  4300.,  2630.,   110.,  3908.,   596.,   996.,   614.,   846.,   782.,   950.,  2196.,  2596.,  2996.,  1774.,  2006.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,  1012.,  1668.,  2324.,  1310.,  1670.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,  9000., 10568., 12136.,  6684.,  7532.,  7020.,  3004., 12104.,  7912.,  9480.,  5164.,  6012.,  5884.,  6604., 14184., 15752., 17320.,  9404., 10252.,  6630.,   270.,  8324.,  1428.,  2340.,  1286.,  1774.,  1966.,  2390.,  5076.,  5988.,  6900.,  3726.,  4214.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1844.,  3012.,  4180.,  2238.,  2854.,  3110.,  3662.,  7684.,  8852., 10020.,  5318.,  5934.,  6300.,  7532., 15784., 18376., 20968., 11100., 12460., 12460.,  4860., 19912., 12648., 15240.,  8044.,  9404.,  9788., 11020., 23016., 25608., 28200., 14844., 16204., 10630.,   430., 12740.,  2260.,  3684.,  1958.,  2702.,  3150.,  3830.,  7956.,  9380., 10804.,  5678.,  6422.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.,  453.,  488.,  523.,  558.,  802.,  856.,  553.,  590.,  847.,  904.,  583.,  622.,  661.,  700.,  930., 1008., 1086., 1164., 1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464., 1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140., 2066., 2152., 2238., 2324., 2641., 2770., 2899., 3028., 4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622., 2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764., 2466., 2568., 2670., 2772., 3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814., 3799., 3964., 4129., 4294., 2446., 2556., 2666., 2776., 4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128., 4046., 4164., 4282., 4400.,  869.,  936., 1003., 1070., 1522., 1624., 1033., 1102., 1567., 1672., 1063., 1134., 1205., 1276., 1762., 1904., 2046., 2188., 3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636., 3666., 3816., 3966., 4116., 4849., 5074., 5299., 5524., 8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310., 3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260., 4066., 4232., 4398., 4564., 5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558., 6199., 6460., 6721., 6982., 3918., 4092., 4266., 4440., 6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  104.,  108.,  112.,  116.,  286.,  296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,  220.,   93.,   96.,   99.,  102.,  229.,  236.,  243.,  250.,  257.,  264.,  148.,  152.,  156.,  160.,  123.,  126.,  129.,  132.,  299.,  306.,  313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   42.,   48.,   54.,   60.,   55.,   60.,   65.,   70.,  141.,  152.,  163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,  112.,  124.,  136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,  218.,  232.,  246.,  260.,  232.,  244.,  256.,  268.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,  372.,  386.,  400.,  352.,  364.,  376.,  388.,  814.,  840.,  866.,  892.,  918.,  944.,  498.,  512.,  526.,  540.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  553.,  568.,  296.,  304.,  312.,  320.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688.,  703.,  718.,  376.,  384.,  392.,  400.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,   70.,   80.,   90.,  100.,   99.,  108.,  117.,  126.,  245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,  200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,  712.,  354.,  376.,  398.,  420.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.,  3504.,  3780.,  4056.,  4332.,  6221.,  6647.,  4292.,  4584.,  6575.,  7025.,  4528.,  4836.,  5144.,  5452.,  7184.,  7800.,  8416.,  9032., 12898., 13846.,  8888.,  9536., 13606., 14602.,  9360., 10040., 10720., 11400.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352., 14960., 15832., 16704., 17576., 25426., 26758., 17304., 18208., 26326., 27706., 17904., 18840., 19776., 20712.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   702.,   730.,   758.,   786.,  2008.,  2080.,  2152.,  2224.,  2296.,  2368.,  1458.,  1502.,  1546.,  1590.,   677.,   699.,   721.,   743.,  1688.,  1740.,  1792.,  1844.,  1896.,  1948.,  1103.,  1133.,  1163.,  1193.,   897.,   919.,   941.,   963.,  2208.,  2260.,  2312.,  2364.,  2416.,  2468.,  1403.,  1433.,  1463.,  1493.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   311.,   357.,   403.,   449.,   409.,   447.,   485.,   523.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,   771.,   817.,   863.,   909.,   830.,   922.,  1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  1650.,  1758.,  1866.,  1974.,  1750.,  1842.,  1934.,  2026.,  4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730.,  2838.,  2946.,  3054.,  2670.,  2762.,  2854.,  2946.,  6200.,  6400.,  6600.,  6800.,  7000.,  7200.,  3810.,  3918.,  4026.,  4134.,  1661.,  1715.,  1769.,  1823.,  3784.,  3900.,  4016.,  4132.,  4248.,  4364.,  2279.,  2341.,  2403.,  2465.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  2899.,  2961.,  3023.,  3085.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,   527.,   605.,   683.,   761.,   753.,   823.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  2722.,  2894.,  3066.,  3238.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  2652.,  2988.,  3324.,  3660.,  2380.,  2588.,  2156.,  2364.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,  1132.,  1340.,  1548.,  1756.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  3996.,  4332.,  3004.,  3340.,  2462.,  2630.,   110.,   278.,  3844.,  4244.,   932.,  1332.,  1732.,  2132.,  1078.,  1310.,  1542.,  1774.,  1454.,  1622.,  1790.,  1958.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3398.,  3630.,   150.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,  3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,   230.,   590.,   950.,  1310.,  1644.,  2364.,  3084.,  3804.,  6504.,  8072.,  9640., 11208., 12776., 14344.,  7068.,  7916.,  8764.,  9612.,  8844.,  9564.,  5548.,  6268., 17448., 19016.,  8040.,  9608., 11176., 12744.,  1980.,  2828.,  3676.,  4524.,  4524.,  5244.,  5964.,  6684., 12776., 14344., 15912., 17480., 14312., 15880., 10460., 11308.,  6396.,  7244.,  6206.,  6630.,   270.,   694.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  2262.,  2750.,  3238.,  3726.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  7142.,  7630.,   310.,   798.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  4086.,  4702.,  5318.,  5934.,  5870.,  6422.,  6974.,  7526., 14628., 15796.,  8132.,  9300., 10468., 11636.,   390.,  1006.,  1622.,  2238.,  2988.,  4220.,  5452.,  6684., 11240., 13832., 16424., 19016., 21608., 24200., 11484., 12844., 14204., 15564., 15308., 16540.,  8940., 10172., 28328., 30920., 12776., 15368., 17960., 20552.,  3324.,  4684.,  6044.,  7404.,  7916.,  9148., 10380., 11612., 21608., 24200., 26792., 29384., 23144., 25736., 16924., 18284.,  9788., 11148.,  9950., 10630.,   430.,  1110., 12676., 14100.,  3620.,  5044.,  6468.,  7892.,  3446.,  4190.,  4934.,  5678.,  5870.,  6550.,  7230.,  7910., 15012., 16436., 17860., 19284.,  9828., 11252., 10886., 11630.,   470.,  1214.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,   248.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2822.,  2868.,  2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,  4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,  3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,   871.,   906.,   941.,   976.,  1011.,  1046.,  1081.,  1116.,  1550.,  1604.,  1658.,  1712.,  1069.,  1106.,  1143.,  1180.,  1637.,  1694.,  1751.,  1808.,  1127.,  1166.,  1205.,  1244.,  1283.,  1322.,  1361.,  1400.,  1782.,  1860.,  1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,  2928.,  3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,  5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,  6962.,  7103.,  7244.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  6982.,  7092.,  7202.,  7312.,  7422.,  7532.,  7642.,  7752., 11320., 11488., 11656., 11824.,  7698.,  7812.,  7926.,  8040., 11734., 11908., 12082., 12256.,  7974.,  8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  1671.,  1738.,  1805.,  1872.,  1939.,  2006.,  2073.,  2140.,  2942.,  3044.,  3146.,  3248.,  1997.,  2066.,  2135.,  2204.,  3029.,  3134.,  3239.,  3344.,  2055.,  2126.,  2197.,  2268.,  2339.,  2410.,  2481.,  2552.,  3382.,  3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,  6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,  6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  9473.,  9698.,  9923., 10148., 10373., 10598., 10823., 11048., 15750., 16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191., 16542., 16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146., 12383., 12620.,  6942.,  7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048., 11488., 11728., 11968., 12208.,  7770.,  7932.,  8094.,  8256., 11782., 12028., 12274., 12520.,  7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128., 10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442., 13703., 13964.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024., 11142., 11316., 11490., 11664., 11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,  183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,  465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,  292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    5.,   10.,   15.,   20.,   25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,  106.,  117.,  128.,  139.,  150.,  161.,  172.,   78.,   84.,   90.,   96.,  102.,  108.,  114.,  120.,  105.,  110.,  115.,  120.,  125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,  234.,  240.,  212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,  614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,  422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,  452.,  464.,  476.,  488.,  500.,  512.,  524.,  536., 1082., 1108., 1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,  702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,  692.,  704.,  716.,  728.,  740.,  752.,  764.,  776., 1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784., 1810., 1836., 1862., 1888.,  982.,  996., 1010., 1024., 1038., 1052., 1066., 1080.,  427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986., 1001., 1016., 1031., 1046., 1061., 1076., 1091., 1106., 1121., 1136.,  584.,  592.,  600.,  608.,  616.,  624.,  632.,  640.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616., 1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,  744.,  752.,  760.,  768.,  776.,  784.,  792.,  800.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,   18.,   27.,   36.,   45.,   54.,   63.,   72.,   91.,  110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,  380.,  400.,  420.,  440.,  460.,  480.,  500.,  520.,  962., 1004., 1046., 1088., 1130., 1172., 1214., 1256., 1298., 1340., 1382., 1424.,  686.,  708.,  730.,  752.,  774.,  796.,  818.,  840.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.,  6800.,  7076.,  7352.,  7628.,  3616.,  3892.,  4168.,  4444.,  7833.,  8259.,  8685.,  9111.,  3820.,  4112.,  4404.,  4696.,  8267.,  8717.,  9167.,  9617.,  4024.,  4332.,  4640.,  4948.,  5256.,  5564.,  5872.,  6180.,  5072.,  5688.,  6304.,  6920.,  7536.,  8152.,  8768.,  9384., 11450., 12398., 13346., 14294.,  7944.,  8592.,  9240.,  9888., 12062., 13058., 14054., 15050.,  8352.,  9032.,  9712., 10392., 11072., 11752., 12432., 13112., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064., 14288., 15160., 16032., 16904., 17776., 18648., 19520., 20392., 20666., 21998., 23330., 24662., 18440., 19344., 20248., 21152., 21406., 22786., 24166., 25546., 19104., 20040., 20976., 21912., 16000., 16936., 17872., 18808.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,   822.,   850.,   878.,   906.,   934.,   962.,   990.,  1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,  1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,  3102.,  3146.,  3190.,  1337.,  1359.,  1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  1777.,  1799.,  1821.,  1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    29.,    67.,   105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,  1040.,  1124.,  1208.,  1292.,   587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,   789.,   827.,   865.,   903.,   941.,   979.,  1017.,  1055.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,  2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,  1829.,  1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,  4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,  6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,  3974.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,  8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848., 10048., 10248., 10448.,  5378.,  5486.,  5594.,  5702.,  5810.,  5918.,  6026.,  6134.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,  5914., 12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648., 13848., 14048., 14248., 14448.,  7538.,  7646.,  7754.,  7862.,  7970.,  8078.,  8186.,  8294.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,  4759.,  4821.,  4883.,  4945.,  4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916., 10032., 10148., 10264., 10380., 10496., 10612., 10728., 10844., 10960., 11076.,  5751.,  5813.,  5875.,  5937.,  5999.,  6061.,  6123.,  6185.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    53.,   123.,   193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,  1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,   995.,  1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,  1453.,  1523.,  1593.,  1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,  2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712., 10040., 10368., 10696., 11024.,  5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,  6038.,  6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130., 13976., 14304., 14632., 14960., 15288., 15616., 15944., 16272., 16600., 16928., 17256., 17584.,  8754.,  8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,  9158.,  9314.,  9470.,  9626.,  9782.,  9938., 10094., 10250., 20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398.,  5225.,  5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827., 11624., 11804., 11984., 12164., 12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604.,  6839.,  6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,  6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547., 15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844., 17024., 17204.,  8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,  9377.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1318.,  1422.,  1526.,  1630.,    70.,   174.,   278.,   382.,   190.,   230.,   270.,   310.,   350.,   390.,   430.,   470.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1508.,  1652.,  1796.,  1940.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  3420.,  3756.,  4092.,  4428.,  1052.,  1388.,  1724.,  2060.,  1292.,  1500.,  1708.,  1916.,  1484.,  1692.,  1900.,  2108.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,  1484.,  1692.,  1900.,  2108.,  2316.,  2524.,  2732.,  2940.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  2396.,  2732.,  3068.,  3404.,  2076.,  2412.,  2748.,  3084.,  2126.,  2294.,  2462.,  2630.,   110.,   278.,   446.,   614.,  3716.,  4116.,  4516.,  4916.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2116.,  2516.,  2916.,  3316.,  2934.,  3166.,  3398.,  3630.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  4550.,  4910.,  5270.,  5630.,   230.,   590.,   950.,  1310.,  1374.,  1670.,  1966.,  2262.,  2558.,  2854.,  3150.,  3446.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  5924.,  6580.,  7236.,  7892.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,  2828.,  3548.,  4268.,  4988.,  5708.,  6428.,  7148.,  7868.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  7836.,  8684.,  9532., 10380.,  3420.,  4268.,  5116.,  5964.,  5708.,  6428.,  7148.,  7868.,  3852.,  4572.,  5292.,  6012., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  3420.,  4268.,  5116.,  5964.,  6812.,  7660.,  8508.,  9356.,  3852.,  4572.,  5292.,  6012.,  6732.,  7452.,  8172.,  8892.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  6812.,  7660.,  8508.,  9356.,  4444.,  5292.,  6140.,  6988.,  5358.,  5782.,  6206.,  6630.,   270.,   694.,  1118.,  1542.,  8132.,  9044.,  9956., 10868.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4214.,  4702.,  5190.,  5678.,  6166.,  6654.,  7142.,  7630.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4484.,  5396.,  6308.,  7220.,  6166.,  6654.,  7142.,  7630.,   310.,   798.,  1286.,  1774.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2558.,  3110.,  3662.,  4214.,  5156.,  6324.,  7492.,  8660.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172.,  7782.,  8398.,  9014.,  9630.,   390.,  1006.,  1622.,  2238.,  2558.,  3110.,  3662.,  4214.,  4766.,  5318.,  5870.,  6422.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172., 10340., 11508., 12676., 13844.,   390.,  1006.,  1622.,  2238.,  2854.,  3470.,  4086.,  4702.,  5196.,  6428.,  7660.,  8892., 10124., 11356., 12588., 13820., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 12252., 13612., 14972., 16332.,  5788.,  7148.,  8508.,  9868., 10124., 11356., 12588., 13820.,  6220.,  7452.,  8684.,  9916., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152.,  5788.,  7148.,  8508.,  9868., 11228., 12588., 13948., 15308.,  6220.,  7452.,  8684.,  9916., 11148., 12380., 13612., 14844., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 11228., 12588., 13948., 15308.,  6812.,  8172.,  9532., 10892.,  8590.,  9270.,  9950., 10630.,   430.,  1110.,  1790.,  2470., 12548., 13972., 15396., 16820.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6422.,  7166.,  7910.,  8654.,  9398., 10142., 10886., 11630.,   430.,  1110.,  1790.,  2470.,  3150.,  3830.,  4510.,  5190.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6852.,  8276.,  9700., 11124.,  9398., 10142., 10886., 11630.,   470.,  1214.,  1958.,  2702.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786., 1228.,  858., 1336.,  930.,  984.,  119.,  244.,  279.,  428.,  295.,  452.,  311.,  350.,  246.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,  436.,  894.,  972., 1492., 1024., 1570., 1076., 1162.,  676., 1385., 1514., 2322., 1592., 2439., 1670., 1811.,  532., 1086., 1180., 1804., 1232., 1882., 1284., 1386.,  820., 1673., 1826., 2790., 1904., 2907., 1982., 2147.,  628., 1278., 1388., 2116., 1440., 2194., 1492., 1610.,  898., 1828., 1938., 2956., 2010., 3064., 2082., 2200.,  231.,  468.,  535.,  812.,  551.,  836.,  567.,  638.,  470.,  952., 1094., 1660., 1126., 1708., 1158., 1308.,  820., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 1252., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,  916., 1854., 2012., 3052., 2064., 3130., 2116., 2282., 1396., 2825., 3074., 4662., 3152., 4779., 3230., 3491., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 1442., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,   8.,  10.,   0.,   6.,   7.,  20.,  23.,  26.,  18.,  20.,   0.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,   0.,  34.,  38.,  98., 108., 118.,  74.,  80.,   0.,  54.,  58., 148., 158., 168., 104., 110.,   0.,  48.,  51., 118., 125., 132.,  76.,  80.,   0.,  63.,  66., 153., 160., 167.,  96., 100.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,  10.,  21.,  32.,  43.,  24.,  30.,   0.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,   0.,  62.,  74., 160., 186., 212., 116., 130.,   0., 122., 134., 290., 316., 342., 186., 200.,   0., 182., 194., 420., 446., 472., 256., 270.,   0., 112., 119., 254., 269., 284., 152., 160.,   0., 147., 154., 329., 344., 359., 192., 200.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,  18.,  37.,  56.,  75.,  40.,  50.,   0.,  54.,  63., 132., 151., 170.,  90., 100.,   0., 110., 130., 272., 314., 356., 188., 210.,   0., 210., 230., 482., 524., 566., 298., 320.,   0., 310., 330., 692., 734., 776., 408., 430.,   0., 176., 187., 390., 413., 436., 228., 240.,   0., 231., 242., 505., 528., 551., 288., 300.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.,   905.,  1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,  1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  3366.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016.,  5213., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  4118.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776.,  6341., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  4870.,  9912., 10784., 16442., 11192., 17054., 11600., 12536.,  7010., 14272., 15144., 23102., 15712., 23954., 16280., 17216.,    41.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624., 10322.,  7192.,  7616.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  362.,  390., 1032., 1104., 1176.,  746.,  790.,    0.,  347.,  369.,  864.,  916.,  968.,  563.,  593.,    0.,  457.,  479., 1124., 1176., 1228.,  713.,  743.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   29.,   67.,  140.,  224.,  308.,  173.,  219.,    0.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,    0.,  450.,  542., 1176., 1376., 1576.,  866.,  974.,    0.,  910., 1002., 2176., 2376., 2576., 1406., 1514.,    0., 1370., 1462., 3176., 3376., 3576., 1946., 2054.,    0.,  851.,  905., 1936., 2052., 2168., 1163., 1225.,    0., 1121., 1175., 2516., 2632., 2748., 1473., 1535.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   53.,  123.,  252.,  400.,  548.,  293.,  371.,    0.,  403.,  473.,  992., 1140., 1288.,  683.,  761.,    0.,  818.,  974., 2040., 2368., 2696., 1426., 1598.,    0., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,    0., 2378., 2534., 5320., 5648., 5976., 3146., 3318.,    0., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,    0., 1785., 1871., 3908., 4088., 4268., 2233., 2327.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   382.,   486.,     0.,   230.,   270.,   900.,  1044.,  1188.,   902.,  1006.,     0.,   540.,   748.,  2216.,  2760.,  3304.,  2268.,  2604.,     0.,  1580.,  1148.,  4296.,  3176.,  3720.,  2284.,  2620.,     0.,  1980.,  2188.,  5352.,  5896.,  6440.,  3964.,  4300.,     0.,  2630.,   110.,  3908.,   596.,   996.,   614.,   846.,     0.,   782.,   950.,  2196.,  2596.,  2996.,  1774.,  2006.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,  1012.,  1668.,  2324.,  1310.,  1670.,     0.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,     0.,  3420.,  4140.,  9000., 10568., 12136.,  6684.,  7532.,     0.,  7020.,  3004., 12104.,  7912.,  9480.,  5164.,  6012.,     0.,  5884.,  6604., 14184., 15752., 17320.,  9404., 10252.,     0.,  6630.,   270.,  8324.,  1428.,  2340.,  1286.,  1774.,     0.,  1966.,  2390.,  5076.,  5988.,  6900.,  3726.,  4214.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1844.,  3012.,  4180.,  2238.,  2854.,     0.,  3110.,  3662.,  7684.,  8852., 10020.,  5318.,  5934.,     0.,  6300.,  7532., 15784., 18376., 20968., 11100., 12460.,     0., 12460.,  4860., 19912., 12648., 15240.,  8044.,  9404.,     0.,  9788., 11020., 23016., 25608., 28200., 14844., 16204.,     0., 10630.,   430., 12740.,  2260.,  3684.,  1958.,  2702.,     0.,  3150.,  3830.,  7956.,  9380., 10804.,  5678.,  6422.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,  127.,  136.,  103.,  110.,  117.,  124.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,   98.,  104.,  238.,  252.,  266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688., 1071., 1134.,  799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696., 1064., 1112.,  766.,  800., 1214., 1268.,  866.,  904.,  942.,  980.,  461.,  488.,  985., 1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,  466.,  488.,  974., 1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428.,  686.,  708., 1434., 1480., 1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.,  221.,  238.,  453.,  488.,  523.,  558.,  802.,  856.,  553.,  590.,  847.,  904.,  583.,  622.,  661.,  700.,  454.,  492.,  930., 1008., 1086., 1164., 1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464.,  834.,  872., 1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140., 2066., 2152., 2238., 2324., 1289., 1352., 2641., 2770., 2899., 3028., 4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622., 1018., 1064., 2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764., 2466., 2568., 2670., 2772., 1565., 1640., 3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814., 3799., 3964., 4129., 4294., 1202., 1256., 2446., 2556., 2666., 2776., 4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220., 1742., 1796., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128., 4046., 4164., 4282., 4400.,  429.,  462.,  869.,  936., 1003., 1070., 1522., 1624., 1033., 1102., 1567., 1672., 1063., 1134., 1205., 1276.,  870.,  940., 1762., 1904., 2046., 2188., 3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616., 1570., 1640., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636., 3666., 3816., 3966., 4116., 2393., 2504., 4849., 5074., 5299., 5524., 8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310., 1754., 1832., 3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260., 4066., 4232., 4398., 4564., 2669., 2792., 5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558., 6199., 6460., 6721., 6982., 1938., 2024., 3918., 4092., 4266., 4440., 6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012., 2798., 2884., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,    0.,    0.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,    0.,    0.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,    0.,    0.,  104.,  108.,  112.,  116.,  286.,  296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,  220.,    0.,    0.,   93.,   96.,   99.,  102.,  229.,  236.,  243.,  250.,  257.,  264.,  148.,  152.,  156.,  160.,    0.,    0.,  123.,  126.,  129.,  132.,  299.,  306.,  313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   42.,   48.,   54.,   60.,    0.,    0.,   55.,   60.,   65.,   70.,  141.,  152.,  163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,    0.,    0.,  112.,  124.,  136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,  218.,  232.,  246.,  260.,    0.,    0.,  232.,  244.,  256.,  268.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,  372.,  386.,  400.,    0.,    0.,  352.,  364.,  376.,  388.,  814.,  840.,  866.,  892.,  918.,  944.,  498.,  512.,  526.,  540.,    0.,    0.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  553.,  568.,  296.,  304.,  312.,  320.,    0.,    0.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688.,  703.,  718.,  376.,  384.,  392.,  400.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,   70.,   80.,   90.,  100.,    0.,    0.,   99.,  108.,  117.,  126.,  245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,    0.,    0.,  200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,  712.,  354.,  376.,  398.,  420.,    0.,    0.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,    0.,    0.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,    0.,    0.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,    0.,    0.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,   922.,  1030.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  2283.,  2493.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3074.,  3246.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.,  1709.,  1843.,  3504.,  3780.,  4056.,  4332.,  6221.,  6647.,  4292.,  4584.,  6575.,  7025.,  4528.,  4836.,  5144.,  5452.,  3506.,  3806.,  7184.,  7800.,  8416.,  9032., 12898., 13846.,  8888.,  9536., 13606., 14602.,  9360., 10040., 10720., 11400.,  2218.,  2518.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344.,  5763.,  6261., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508.,  2650.,  3014., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848.,  6923.,  7517., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788.,  3082.,  3510., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352.,  7362.,  7790., 14960., 15832., 16704., 17576., 25426., 26758., 17304., 18208., 26326., 27706., 17904., 18840., 19776., 20712.,    77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,   922.,  1030.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  2283.,  2493.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3074.,  3246.,  6384.,  6744.,  7104.,  7464., 11026., 11590.,  7704.,  8096., 11926., 12538.,  8304.,  8728.,  9152.,  9576.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,     0.,     0.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,     0.,     0.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,     0.,     0.,   702.,   730.,   758.,   786.,  2008.,  2080.,  2152.,  2224.,  2296.,  2368.,  1458.,  1502.,  1546.,  1590.,     0.,     0.,   677.,   699.,   721.,   743.,  1688.,  1740.,  1792.,  1844.,  1896.,  1948.,  1103.,  1133.,  1163.,  1193.,     0.,     0.,   897.,   919.,   941.,   963.,  2208.,  2260.,  2312.,  2364.,  2416.,  2468.,  1403.,  1433.,  1463.,  1493.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   311.,   357.,   403.,   449.,     0.,     0.,   409.,   447.,   485.,   523.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,   771.,   817.,   863.,   909.,     0.,     0.,   830.,   922.,  1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  1650.,  1758.,  1866.,  1974.,     0.,     0.,  1750.,  1842.,  1934.,  2026.,  4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730.,  2838.,  2946.,  3054.,     0.,     0.,  2670.,  2762.,  2854.,  2946.,  6200.,  6400.,  6600.,  6800.,  7000.,  7200.,  3810.,  3918.,  4026.,  4134.,     0.,     0.,  1661.,  1715.,  1769.,  1823.,  3784.,  3900.,  4016.,  4132.,  4248.,  4364.,  2279.,  2341.,  2403.,  2465.,     0.,     0.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  2899.,  2961.,  3023.,  3085.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,   527.,   605.,   683.,   761.,     0.,     0.,   753.,   823.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,     0.,     0.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  2722.,  2894.,  3066.,  3238.,     0.,     0.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,     0.,     0.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,     0.,     0.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,     0.,     0.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,   694.,   798.,   902.,  1006.,     0.,     0.,   430.,   470.,   510.,   550.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,     0.,     0.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  2652.,  2988.,  3324.,  3660.,     0.,     0.,  2380.,  2588.,  2156.,  2364.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,     0.,     0.,  1132.,  1340.,  1548.,  1756.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  3996.,  4332.,  3004.,  3340.,     0.,     0.,  2462.,  2630.,   110.,   278.,  3844.,  4244.,   932.,  1332.,  1732.,  2132.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,  1454.,  1622.,  1790.,  1958.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3398.,  3630.,   150.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,     0.,     0.,  3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,   230.,   590.,   950.,  1310.,     0.,     0.,  1644.,  2364.,  3084.,  3804.,  6504.,  8072.,  9640., 11208., 12776., 14344.,  7068.,  7916.,  8764.,  9612.,     0.,     0.,  8844.,  9564.,  5548.,  6268., 17448., 19016.,  8040.,  9608., 11176., 12744.,  1980.,  2828.,  3676.,  4524.,     0.,     0.,  4524.,  5244.,  5964.,  6684., 12776., 14344., 15912., 17480., 14312., 15880., 10460., 11308.,  6396.,  7244.,     0.,     0.,  6206.,  6630.,   270.,   694.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  2262.,  2750.,  3238.,  3726.,     0.,     0.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  7142.,  7630.,   310.,   798.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  4086.,  4702.,  5318.,  5934.,     0.,     0.,  5870.,  6422.,  6974.,  7526., 14628., 15796.,  8132.,  9300., 10468., 11636.,   390.,  1006.,  1622.,  2238.,     0.,     0.,  2988.,  4220.,  5452.,  6684., 11240., 13832., 16424., 19016., 21608., 24200., 11484., 12844., 14204., 15564.,     0.,     0., 15308., 16540.,  8940., 10172., 28328., 30920., 12776., 15368., 17960., 20552.,  3324.,  4684.,  6044.,  7404.,     0.,     0.,  7916.,  9148., 10380., 11612., 21608., 24200., 26792., 29384., 23144., 25736., 16924., 18284.,  9788., 11148.,     0.,     0.,  9950., 10630.,   430.,  1110., 12676., 14100.,  3620.,  5044.,  6468.,  7892.,  3446.,  4190.,  4934.,  5678.,     0.,     0.,  5870.,  6550.,  7230.,  7910., 15012., 16436., 17860., 19284.,  9828., 11252., 10886., 11630.,   470.,  1214.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,   248.,    70.,    76.,    82.,    88.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   190.,   196.,   202.,   208.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   355.,   370.,   385.,   400.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,   550.,   564.,   578.,   592.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,   895.,   922.,   949.,   976.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,   910.,   932.,   954.,   976.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  1350.,  1372.,  1394.,  1416.,  2822.,  2868.,  2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,  4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,  3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,   425.,   442.,   459.,   476.,   871.,   906.,   941.,   976.,  1011.,  1046.,  1081.,  1116.,  1550.,  1604.,  1658.,  1712.,  1069.,  1106.,  1143.,  1180.,  1637.,  1694.,  1751.,  1808.,  1127.,  1166.,  1205.,  1244.,  1283.,  1322.,  1361.,  1400.,   870.,   908.,   946.,   984.,  1782.,  1860.,  1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,  2928.,  1630.,  1668.,  1706.,  1744.,  3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,  2515.,  2578.,  2641.,  2704.,  5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,  6962.,  7103.,  7244.,  1990.,  2036.,  2082.,  2128.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,  2458.,  2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  3430.,  3484.,  3538.,  3592.,  6982.,  7092.,  7202.,  7312.,  7422.,  7532.,  7642.,  7752., 11320., 11488., 11656., 11824.,  7698.,  7812.,  7926.,  8040., 11734., 11908., 12082., 12256.,  7974.,  8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,   825.,   858.,   891.,   924.,  1671.,  1738.,  1805.,  1872.,  1939.,  2006.,  2073.,  2140.,  2942.,  3044.,  3146.,  3248.,  1997.,  2066.,  2135.,  2204.,  3029.,  3134.,  3239.,  3344.,  2055.,  2126.,  2197.,  2268.,  2339.,  2410.,  2481.,  2552.,  1670.,  1740.,  1810.,  1880.,  3382.,  3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,  6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,  6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,  3070.,  3140.,  3210.,  3280.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  4675.,  4786.,  4897.,  5008.,  9473.,  9698.,  9923., 10148., 10373., 10598., 10823., 11048., 15750., 16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191., 16542., 16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146., 12383., 12620.,  3430.,  3508.,  3586.,  3664.,  6942.,  7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048., 11488., 11728., 11968., 12208.,  7770.,  7932.,  8094.,  8256., 11782., 12028., 12274., 12520.,  7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128.,  5215.,  5338.,  5461.,  5584., 10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442., 13703., 13964.,  3790.,  3876.,  3962.,  4048.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024.,  5510.,  5596.,  5682.,  5768., 11142., 11316., 11490., 11664., 11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,    0.,    0.,    0.,    0.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,    0.,    0.,    0.,    0.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,    0.,    0.,    0.,    0.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,    0.,    0.,    0.,    0.,  183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,  465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,  292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,    0.,    0.,    0.,    0.,  243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    5.,   10.,   15.,   20.,   25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,  106.,  117.,  128.,  139.,  150.,  161.,  172.,   78.,   84.,   90.,   96.,  102.,  108.,  114.,  120.,    0.,    0.,    0.,    0.,  105.,  110.,  115.,  120.,  125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,  234.,  240.,    0.,    0.,    0.,    0.,  212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,  614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,  422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,    0.,    0.,    0.,    0.,  452.,  464.,  476.,  488.,  500.,  512.,  524.,  536., 1082., 1108., 1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,  702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,    0.,    0.,    0.,    0.,  692.,  704.,  716.,  728.,  740.,  752.,  764.,  776., 1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784., 1810., 1836., 1862., 1888.,  982.,  996., 1010., 1024., 1038., 1052., 1066., 1080.,    0.,    0.,    0.,    0.,  427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986., 1001., 1016., 1031., 1046., 1061., 1076., 1091., 1106., 1121., 1136.,  584.,  592.,  600.,  608.,  616.,  624.,  632.,  640.,    0.,    0.,    0.,    0.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616., 1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,  744.,  752.,  760.,  768.,  776.,  784.,  792.,  800.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,   18.,   27.,   36.,   45.,   54.,   63.,   72.,   91.,  110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,    0.,    0.,    0.,    0.,  189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,    0.,    0.,    0.,    0.,  380.,  400.,  420.,  440.,  460.,  480.,  500.,  520.,  962., 1004., 1046., 1088., 1130., 1172., 1214., 1256., 1298., 1340., 1382., 1424.,  686.,  708.,  730.,  752.,  774.,  796.,  818.,  840.,    0.,    0.,    0.,    0.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280.,    0.,    0.,    0.,    0., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,    0.,    0.,    0.,    0.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,    0.,    0.,    0.,    0.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  2754.,  2926.,  3098.,  3270.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.,  3317.,  3451.,  3585.,  3719.,  6800.,  7076.,  7352.,  7628.,  3616.,  3892.,  4168.,  4444.,  7833.,  8259.,  8685.,  9111.,  3820.,  4112.,  4404.,  4696.,  8267.,  8717.,  9167.,  9617.,  4024.,  4332.,  4640.,  4948.,  5256.,  5564.,  5872.,  6180.,  2498.,  2798.,  3098.,  3398.,  5072.,  5688.,  6304.,  6920.,  7536.,  8152.,  8768.,  9384., 11450., 12398., 13346., 14294.,  7944.,  8592.,  9240.,  9888., 12062., 13058., 14054., 15050.,  8352.,  9032.,  9712., 10392., 11072., 11752., 12432., 13112.,  4210.,  4510.,  4810.,  5110., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032.,  5839.,  6337.,  6835.,  7333., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588.,  5026.,  5390.,  5754.,  6118., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048.,  7063.,  7657.,  8251.,  8845., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124.,  5842.,  6270.,  6698.,  7126., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064.,  7042.,  7470.,  7898.,  8326., 14288., 15160., 16032., 16904., 17776., 18648., 19520., 20392., 20666., 21998., 23330., 24662., 18440., 19344., 20248., 21152., 21406., 22786., 24166., 25546., 19104., 20040., 20976., 21912., 16000., 16936., 17872., 18808.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  2754.,  2926.,  3098.,  3270.,  5712.,  6072.,  6432.,  6792.,  7152.,  7512.,  7872.,  8232.,  8826.,  9390.,  9954., 10518.,  7816.,  8208.,  8600.,  8992.,  9566., 10178., 10790., 11402.,  8480.,  8904.,  9328.,  9752.,  7424.,  7848.,  8272.,  8696.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,     0.,     0.,     0.,     0.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,     0.,     0.,     0.,     0.,   822.,   850.,   878.,   906.,   934.,   962.,   990.,  1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,     0.,     0.,     0.,     0.,  1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,  3102.,  3146.,  3190.,     0.,     0.,     0.,     0.,  1337.,  1359.,  1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,     0.,     0.,     0.,     0.,  1777.,  1799.,  1821.,  1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    29.,    67.,   105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,  1040.,  1124.,  1208.,  1292.,   587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,     0.,     0.,     0.,     0.,   789.,   827.,   865.,   903.,   941.,   979.,  1017.,  1055.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,  2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,  1829.,     0.,     0.,     0.,     0.,  1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,  4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,  6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,  3974.,     0.,     0.,     0.,     0.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,  8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848., 10048., 10248., 10448.,  5378.,  5486.,  5594.,  5702.,  5810.,  5918.,  6026.,  6134.,     0.,     0.,     0.,     0.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,  5914., 12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648., 13848., 14048., 14248., 14448.,  7538.,  7646.,  7754.,  7862.,  7970.,  8078.,  8186.,  8294.,     0.,     0.,     0.,     0.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,  4759.,  4821.,  4883.,  4945.,     0.,     0.,     0.,     0.,  4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916., 10032., 10148., 10264., 10380., 10496., 10612., 10728., 10844., 10960., 11076.,  5751.,  5813.,  5875.,  5937.,  5999.,  6061.,  6123.,  6185.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    53.,   123.,   193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,  1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,   995.,  1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,     0.,     0.,     0.,     0.,  1453.,  1523.,  1593.,  1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,     0.,     0.,     0.,     0.,  2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712., 10040., 10368., 10696., 11024.,  5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,     0.,     0.,     0.,     0.,  6038.,  6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130., 13976., 14304., 14632., 14960., 15288., 15616., 15944., 16272., 16600., 16928., 17256., 17584.,  8754.,  8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,     0.,     0.,     0.,     0.,  9158.,  9314.,  9470.,  9626.,  9782.,  9938., 10094., 10250., 20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398.,     0.,     0.,     0.,     0.,  5225.,  5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827., 11624., 11804., 11984., 12164., 12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604.,  6839.,  6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,     0.,     0.,     0.,     0.,  6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547., 15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844., 17024., 17204.,  8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,  9377.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   420.,   564.,   708.,   852.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1318.,  1422.,  1526.,  1630.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,   350.,   390.,   430.,   470.,   996.,  1140.,  1284.,  1428.,   932.,  1076.,  1220.,  1364.,  1508.,  1652.,  1796.,  1940.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   460.,   668.,   876.,  1084.,  1292.,  1500.,  1708.,  1916.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  3420.,  3756.,  4092.,  4428.,  1052.,  1388.,  1724.,  2060.,     0.,     0.,     0.,     0.,  1292.,  1500.,  1708.,  1916.,  1484.,  1692.,  1900.,  2108.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  1052.,  1388.,  1724.,  2060.,  2396.,  2732.,  3068.,  3404.,     0.,     0.,     0.,     0.,  1484.,  1692.,  1900.,  2108.,  2316.,  2524.,  2732.,  2940.,  2536.,  3080.,  3624.,  4168.,  4712.,  5256.,  5800.,  6344.,  2536.,  3080.,  3624.,  4168.,  2396.,  2732.,  3068.,  3404.,  2076.,  2412.,  2748.,  3084.,     0.,     0.,     0.,     0.,  2126.,  2294.,  2462.,  2630.,   110.,   278.,   446.,   614.,  3716.,  4116.,  4516.,  4916.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2006.,  2238.,  2470.,  2702.,  2934.,  3166.,  3398.,  3630.,     0.,     0.,     0.,     0.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,  1604.,  2004.,  2404.,  2804.,  3204.,  3604.,  4004.,  4404.,  2116.,  2516.,  2916.,  3316.,  2934.,  3166.,  3398.,  3630.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,  2788.,  3444.,  4100.,  4756.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  4550.,  4910.,  5270.,  5630.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,  2558.,  2854.,  3150.,  3446.,  5412.,  6068.,  6724.,  7380.,  3300.,  3956.,  4612.,  5268.,  5924.,  6580.,  7236.,  7892.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,  2828.,  3548.,  4268.,  4988.,  5708.,  6428.,  7148.,  7868.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  7836.,  8684.,  9532., 10380.,  3420.,  4268.,  5116.,  5964.,     0.,     0.,     0.,     0.,  5708.,  6428.,  7148.,  7868.,  3852.,  4572.,  5292.,  6012., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  3420.,  4268.,  5116.,  5964.,  6812.,  7660.,  8508.,  9356.,     0.,     0.,     0.,     0.,  3852.,  4572.,  5292.,  6012.,  6732.,  7452.,  8172.,  8892.,  7272.,  8840., 10408., 11976., 13544., 15112., 16680., 18248.,  7272.,  8840., 10408., 11976.,  6812.,  7660.,  8508.,  9356.,  4444.,  5292.,  6140.,  6988.,     0.,     0.,     0.,     0.,  5358.,  5782.,  6206.,  6630.,   270.,   694.,  1118.,  1542.,  8132.,  9044.,  9956., 10868.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4214.,  4702.,  5190.,  5678.,  6166.,  6654.,  7142.,  7630.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,  3972.,  4884.,  5796.,  6708.,  7620.,  8532.,  9444., 10356.,  4484.,  5396.,  6308.,  7220.,  6166.,  6654.,  7142.,  7630.,   310.,   798.,  1286.,  1774.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   350.,   902.,  1454.,  2006.,  2558.,  3110.,  3662.,  4214.,  5156.,  6324.,  7492.,  8660.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172.,  7782.,  8398.,  9014.,  9630.,   390.,  1006.,  1622.,  2238.,     0.,     0.,     0.,     0.,  2558.,  3110.,  3662.,  4214.,  4766.,  5318.,  5870.,  6422.,  9828., 10996., 12164., 13332.,  5668.,  6836.,  8004.,  9172., 10340., 11508., 12676., 13844.,   390.,  1006.,  1622.,  2238.,  2854.,  3470.,  4086.,  4702.,     0.,     0.,     0.,     0.,  5196.,  6428.,  7660.,  8892., 10124., 11356., 12588., 13820., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 12252., 13612., 14972., 16332.,  5788.,  7148.,  8508.,  9868.,     0.,     0.,     0.,     0., 10124., 11356., 12588., 13820.,  6220.,  7452.,  8684.,  9916., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152.,  5788.,  7148.,  8508.,  9868., 11228., 12588., 13948., 15308.,     0.,     0.,     0.,     0.,  6220.,  7452.,  8684.,  9916., 11148., 12380., 13612., 14844., 12008., 14600., 17192., 19784., 22376., 24968., 27560., 30152., 12008., 14600., 17192., 19784., 11228., 12588., 13948., 15308.,  6812.,  8172.,  9532., 10892.,     0.,     0.,     0.,     0.,  8590.,  9270.,  9950., 10630.,   430.,  1110.,  1790.,  2470., 12548., 13972., 15396., 16820.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6422.,  7166.,  7910.,  8654.,  9398., 10142., 10886., 11630.,     0.,     0.,     0.,     0.,   430.,  1110.,  1790.,  2470.,  3150.,  3830.,  4510.,  5190.,  6340.,  7764.,  9188., 10612., 12036., 13460., 14884., 16308.,  6852.,  8276.,  9700., 11124.,  9398., 10142., 10886., 11630.,   470.,  1214.,  1958.,  2702.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,   24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  434.,  900.,  956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.,  147.,  300.,  343.,  524.,  359.,  548.,  375.,  572.,  391.,  440.,  304.,  620.,  716., 1093.,  748., 1141.,  780., 1189.,  812.,  920.,  539., 1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,  836., 1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,  659., 1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740., 1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,  779., 1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020., 1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,  287.,  580.,  663., 1004.,  679., 1028.,  695., 1052.,  711.,  800.,  584., 1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640., 1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580., 1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955., 1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860., 1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375., 1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140., 1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   14.,   19.,   12.,   15.,    0.,    6.,    7.,   20.,   23.,   44.,   39.,   44.,   27.,   30.,    0.,   15.,   20.,   52.,   64.,  115.,   96.,  112.,   66.,   75.,    0.,   40.,   45.,  112.,  124.,  220.,  176.,  192.,  111.,  120.,    0.,   65.,   70.,  172.,  184.,  325.,  256.,  272.,  156.,  165.,    0.,   64.,   68.,  152.,  161.,  266.,  197.,  208.,  114.,  120.,    0.,   84.,   88.,  197.,  206.,  341.,  252.,  263.,  144.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   29.,   44.,   68.,   50.,   67.,   36.,   45.,    0.,   42.,   49.,  104.,  119.,  188.,  135.,  152.,   81.,   90.,    0.,   87.,  104.,  220.,  256.,  403.,  288.,  328.,  174.,  195.,    0.,  172.,  189.,  400.,  436.,  688.,  488.,  528.,  279.,  300.,    0.,  257.,  274.,  580.,  616.,  973.,  688.,  728.,  384.,  405.,    0.,  160.,  170.,  356.,  377.,  590.,  413.,  436.,  228.,  240.,    0.,  210.,  220.,  461.,  482.,  755.,  528.,  551.,  288.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   53.,   80.,  122.,   86.,  115.,   60.,   75.,    0.,   78.,   91.,  188.,  215.,  332.,  231.,  260.,  135.,  150.,    0.,  159.,  188.,  388.,  448.,  691.,  480.,  544.,  282.,  315.,    0.,  304.,  333.,  688.,  748., 1156.,  800.,  864.,  447.,  480.,    0.,  449.,  478.,  988., 1048., 1621., 1120., 1184.,  612.,  645.,    0.,  256.,  272.,  560.,  593.,  914.,  629.,  664.,  342.,  360.,    0.,  336.,  352.,  725.,  758., 1169.,  804.,  839.,  432.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,   588.,   152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396., 11480.,  7964., 12332.,  8532., 13184.,  9100.,  9636.,  1121.,  2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  4387.,  3000.,  3388.,  2312.,  4716.,  5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,  7076.,  4172.,  8516.,  9276., 14180.,  9684., 14792., 10092., 15404., 10500., 11356.,  6463., 13184., 14444., 21873., 14608., 22087., 14260., 21789., 14872., 15764.,  5112., 10396., 11316., 15768.,  9996., 14396.,  8164., 12512.,  8572.,  9076.,  7425., 15108., 16096., 21791., 13700., 19445., 10792., 16587., 11404., 12024.,  4324.,  8820.,  9388., 10316.,  5508.,  6384.,  1116.,  1940.,  1524.,  1676.,  5704., 11660., 12228., 13416.,  7228.,  8444.,  1716.,  2960.,  2284.,  2436.,   473.,   992.,  1140.,  1783.,  1264.,  1969.,  1388.,  2155.,  1512.,  1708.,  1016.,  2124.,  2500.,  3896.,  2748.,  4268.,  2996.,  4640.,  3244.,  3716.,  1916.,  4004.,  4380.,  6836.,  4788.,  7448.,  5196.,  8060.,  5604.,  6076.,  3079.,  6416.,  7100., 11049.,  7712., 11967.,  8324., 12885.,  8936.,  9764.,  2856.,  5884.,  6420.,  9896.,  6828., 10508.,  7236., 11120.,  7644.,  8276.,  4489.,  9236., 10160., 15639., 10772., 16557., 11384., 17475., 11996., 13064.,  3796.,  7764.,  8460., 12956.,  8868., 13568.,  9276., 14180.,  9684., 10476.,  5496., 11244., 11940., 18296., 12508., 19148., 13076., 20000., 13644., 14436.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,    92.,   128.,    83.,   105.,     0.,    35.,    41.,   128.,   148.,   295.,   272.,   308.,   193.,   215.,     0.,    88.,   124.,   340.,   428.,   788.,   676.,   796.,   476.,   544.,     0.,   268.,   304.,   780.,   868.,  1568.,  1276.,  1396.,   816.,   884.,     0.,   448.,   484.,  1220.,  1308.,  2348.,  1876.,  1996.,  1156.,  1224.,     0.,   473.,   503.,  1132.,  1200.,  1993.,  1484.,  1568.,   863.,   909.,     0.,   623.,   653.,  1472.,  1540.,  2563.,  1904.,  1988.,  1093.,  1139.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   196.,   312.,   481.,   356.,   488.,   263.,   333.,     0.,   311.,   365.,   776.,   892.,  1411.,  1016.,  1148.,   613.,   683.,     0.,   640.,   772.,  1636.,  1916.,  3020.,  2164.,  2476.,  1316.,  1480.,     0.,  1300.,  1432.,  3036.,  3316.,  5240.,  3724.,  4036.,  2136.,  2300.,     0.,  1960.,  2092.,  4436.,  4716.,  7460.,  5284.,  5596.,  2956.,  3120.,     0.,  1229.,  1307.,  2740.,  2904.,  4549.,  3188.,  3368.,  1763.,  1857.,     0.,  1619.,  1697.,  3560.,  3724.,  5839.,  4088.,  4268.,  2233.,  2327.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   364.,   576.,   877.,   620.,   848.,   443.,   561.,     0.,   587.,   689.,  1424.,  1636.,  2527.,  1760.,  1988.,  1033.,  1151.,     0.,  1192.,  1420.,  2932.,  3404.,  5252.,  3652.,  4156.,  2156.,  2416.,     0.,  2332.,  2560.,  5292.,  5764.,  8912.,  6172.,  6676.,  3456.,  3716.,     0.,  3472.,  3700.,  7652.,  8124., 12572.,  8692.,  9196.,  4756.,  5016.,     0.,  1985.,  2111.,  4348.,  4608.,  7105.,  4892.,  5168.,  2663.,  2805.,     0.,  2615.,  2741.,  5648.,  5908.,  9115.,  6272.,  6548.,  3373.,  3515.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  3722.,  2116.,  2644.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.,  1966.,  4292.,  2580.,  5626.,  3044.,  6578.,  3508.,  4650.,   580.,  1108.,  1252.,  2712.,  3640.,  5836.,  4568.,  7228.,  5496.,  7276.,  4568.,  5752.,   884.,  4984.,  2200.,  7676.,  2872.,  9452.,  3544.,  7324.,  3896.,  5080.,  2746.,  5996.,  7836.,  9918.,  8780., 10726.,  8700.,  8142.,  7596.,  5148.,  2884.,  7448.,  3896.,  7084.,  1176.,  4956.,  1528.,  5900.,  2200.,  3128.,  2514.,  5532.,  7244.,  9542.,  7164.,  9326.,  6060.,  8086.,  7836.,  7308.,  1812.,  7864.,  3544.,  7324.,  3896.,  8268.,  3224.,  8188.,  3896.,  5080.,  3236.,  6936.,  8376.,  7564.,  6936.,  5820.,  4472.,  7148.,  5912.,  6264.,   270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  3722.,  2116.,  2644.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  2724.,  4568.,  5496.,  6732.,  4056.,  4988.,  5496.,  6636.,  6936.,  5240.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  578.,  660.,  932.,  614.,  782.,    0.,  230.,  270.,  900.,  724., 1818., 1188., 1460.,  110.,  278.,    0.,  260.,  532., 1272., 1944., 3292., 2872., 3800., 2260., 2788.,    0., 1620., 1572., 4312., 2296., 6284., 2968., 3896.,  676., 1204.,    0.,  804., 1076., 2616., 3288., 5372., 4728., 4824., 3316., 2500.,    0., 1774.,  150., 2644.,  804., 4082., 1012., 1668.,  950., 1310.,    0., 1078., 1310., 2916., 3444., 3786., 4292., 2580., 2750.,  230.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1428., 2340., 3282., 1844., 2372.,  150.,  190.,    0., 2390., 2814., 5988., 3508., 4650.,  580., 1108.,   30.,   70.,    0., 1188., 1716., 3640., 4824., 6268., 3896., 4824., 1076., 1348.,    0., 3828.,  964., 6168., 2616., 5420., 2968., 3896.,  260.,  532.,    0., 2244., 2772., 6008., 7192., 5788., 5752., 2776., 1620., 1572.,    0.,  798.,   70., 1460.,  388., 2434.,  596.,  996.,  614.,  846.,    0.,  486.,  590., 1476., 1748., 2266., 2596., 1652., 1774.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486., 1012., 1668., 2594., 2004., 2788., 1542., 1966.,    0., 1670., 1966., 4292., 2580., 5626., 3044., 3828.,  270.,  694.,    0., 1092., 1876., 3640., 4824., 7196., 3896., 4824., 2772., 3300.,    0., 5012., 3428., 7192., 1592., 6604., 1944., 2872., 1188., 1716.,    0., 2660., 3444., 6008., 7192., 8252., 5752., 3800., 3828.,  964.,    0., 3726.,  310., 1108., 1316., 2642.,  180.,  324.,  278.,  382.,    0., 2262., 2750., 3428., 3956., 1066.,  900.,  724.,  798.,   70.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   13.,    14.,    37.,    40.,    43.,    46.,    82.,    88.,    73.,    78.,   127.,   136.,   103.,   110.,   172.,   184.,   133.,   142.,   151.,   160.,    41.,    48.,   104.,   120.,   136.,   152.,   239.,   266.,   196.,   216.,   329.,   362.,   256.,   280.,   419.,   458.,   316.,   344.,   372.,   400.,   111.,   118.,   264.,   280.,   296.,   312.,   509.,   536.,   396.,   416.,   659.,   692.,   496.,   520.,   809.,   848.,   596.,   624.,   652.,   680.,   214.,   232.,   491.,   530.,   569.,   608.,   951.,  1014.,   719.,   764.,  1176.,  1248.,   869.,   920.,  1401.,  1482.,  1019.,  1076.,  1133.,  1190.,   341.,   358.,   724.,   760.,   796.,   832.,  1259.,  1316.,   896.,   936.,  1409.,  1472.,   996.,  1040.,  1559.,  1628.,  1096.,  1144.,  1192.,  1240.,   559.,   592.,  1181.,  1250.,  1319.,  1388.,  2076.,  2184.,  1469.,  1544.,  2301.,  2418.,  1619.,  1700.,  2526.,  2652.,  1769.,  1856.,  1943.,  2030.,   571.,   598.,  1184.,  1240.,  1296.,  1352.,  2009.,  2096.,  1396.,  1456.,  2159.,  2252.,  1496.,  1560.,  2309.,  2408.,  1596.,  1664.,  1732.,  1800.,   841.,   868.,  1744.,  1800.,  1856.,  1912.,  2879.,  2966.,  1996.,  2056.,  3089.,  3182.,  2136.,  2200.,  3299.,  3398.,  2276.,  2344.,  2412.,  2480.,   273.,   294.,   557.,   600.,   643.,   686.,   982.,  1048.,   673.,   718.,  1027.,  1096.,   703.,   750.,  1072.,  1144.,   733.,   782.,   831.,   880.,   561.,   608.,  1144.,  1240.,  1336.,  1432.,  2039.,  2186.,  1396.,  1496.,  2129.,  2282.,  1456.,  1560.,  2219.,  2378.,  1516.,  1624.,  1732.,  1840.,  1031.,  1078.,  2104.,  2200.,  2296.,  2392.,  3509.,  3656.,  2396.,  2496.,  3659.,  3812.,  2496.,  2600.,  3809.,  3968.,  2596.,  2704.,  2812.,  2920.,  1594.,  1672.,  3251.,  3410.,  3569.,  3728.,  5451.,  5694.,  3719.,  3884.,  5676.,  5928.,  3869.,  4040.,  5901.,  6162.,  4019.,  4196.,  4373.,  4550.,  1261.,  1318.,  2564.,  2680.,  2796.,  2912.,  4259.,  4436.,  2896.,  3016.,  4409.,  4592.,  2996.,  3120.,  4559.,  4748.,  3096.,  3224.,  3352.,  3480.,  1939.,  2032.,  3941.,  4130.,  4319.,  4508.,  6576.,  6864.,  4469.,  4664.,  6801.,  7098.,  4619.,  4820.,  7026.,  7332.,  4769.,  4976.,  5183.,  5390.,  1491.,  1558.,  3024.,  3160.,  3296.,  3432.,  5009.,  5216.,  3396.,  3536.,  5159.,  5372.,  3496.,  3640.,  5309.,  5528.,  3596.,  3744.,  3892.,  4040.,  2161.,  2228.,  4384.,  4520.,  4656.,  4792.,  7079.,  7286.,  4796.,  4936.,  7289.,  7502.,  4936.,  5080.,  7499.,  7718.,  5076.,  5224.,  5372.,  5520.,   533.,   574.,  1077.,  1160.,  1243.,  1326.,  1882.,  2008.,  1273.,  1358.,  1927.,  2056.,  1303.,  1390.,  1972.,  2104.,  1333.,  1422.,  1511.,  1600.,  1081.,  1168.,  2184.,  2360.,  2536.,  2712.,  3839.,  4106.,  2596.,  2776.,  3929.,  4202.,  2656.,  2840.,  4019.,  4298.,  2716.,  2904.,  3092.,  3280.,  1951.,  2038.,  3944.,  4120.,  4296.,  4472.,  6509.,  6776.,  4396.,  4576.,  6659.,  6932.,  4496.,  4680.,  6809.,  7088.,  4596.,  4784.,  4972.,  5160.,  2974.,  3112.,  6011.,  6290.,  6569.,  6848.,  9951., 10374.,  6719.,  7004., 10176., 10608.,  6869.,  7160., 10401., 10842.,  7019.,  7316.,  7613.,  7910.,  2181.,  2278.,  4404.,  4600.,  4796.,  4992.,  7259.,  7556.,  4896.,  5096.,  7409.,  7712.,  4996.,  5200.,  7559.,  7868.,  5096.,  5304.,  5512.,  5720.,  3319.,  3472.,  6701.,  7010.,  7319.,  7628., 11076., 11544.,  7469.,  7784., 11301., 11778.,  7619.,  7940., 11526., 12012.,  7769.,  8096.,  8423.,  8750.,  2411.,  2518.,  4864.,  5080.,  5296.,  5512.,  8009.,  8336.,  5396.,  5616.,  8159.,  8492.,  5496.,  5720.,  8309.,  8648.,  5596.,  5824.,  6052.,  6280.,  3481.,  3588.,  7024.,  7240.,  7456.,  7672., 11279., 11606.,  7596.,  7816., 11489., 11822.,  7736.,  7960., 11699., 12038.,  7876.,  8104.,  8332.,  8560.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,    0.,    0.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,    0.,    0.,   75.,   80.,   85.,   90.,  212.,  224.,  236.,  248.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,    0.,    0.,  125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,  496.,  512.,  528.,  544.,  303.,  312.,  321.,  330.,    0.,    0.,  124.,  128.,  132.,  136.,  295.,  304.,  313.,  322.,  517.,  532.,  383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,    0.,    0.,  164.,  168.,  172.,  176.,  385.,  394.,  403.,  412.,  667.,  682.,  493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  112.,  136.,   83.,  100.,  117.,  134.,   63.,   72.,   81.,   90.,    0.,    0.,   77.,   84.,   91.,   98.,  193.,  208.,  223.,  238.,  352.,  376.,  253.,  270.,  287.,  304.,  153.,  162.,  171.,  180.,    0.,    0.,  157.,  174.,  191.,  208.,  404.,  440.,  476.,  512.,  749.,  806.,  536.,  576.,  616.,  656.,  327.,  348.,  369.,  390.,    0.,    0.,  327.,  344.,  361.,  378.,  764.,  800.,  836.,  872., 1319., 1376.,  936.,  976., 1016., 1056.,  537.,  558.,  579.,  600.,    0.,    0.,  497.,  514.,  531.,  548., 1124., 1160., 1196., 1232., 1889., 1946., 1336., 1376., 1416., 1456.,  747.,  768.,  789.,  810.,    0.,    0.,  310.,  320.,  330.,  340.,  691.,  712.,  733.,  754., 1147., 1180.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,    0.,    0.,  410.,  420.,  430.,  440.,  901.,  922.,  943.,  964., 1477., 1510., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  202.,  244.,  143.,  172.,  201.,  230.,  105.,  120.,  135.,  150.,    0.,    0.,  143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  622.,  664.,  433.,  462.,  491.,  520.,  255.,  270.,  285.,  300.,    0.,    0.,  289.,  318.,  347.,  376.,  716.,  776.,  836.,  896., 1289., 1382.,  896.,  960., 1024., 1088.,  531.,  564.,  597.,  630.,    0.,    0.,  579.,  608.,  637.,  666., 1316., 1376., 1436., 1496., 2219., 2312., 1536., 1600., 1664., 1728.,  861.,  894.,  927.,  960.,    0.,    0.,  869.,  898.,  927.,  956., 1916., 1976., 2036., 2096., 3149., 3242., 2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290.,    0.,    0.,  496.,  512.,  528.,  544., 1087., 1120., 1153., 1186., 1777., 1828., 1223., 1258., 1293., 1328.,  666.,  684.,  702.,  720.,    0.,    0.,  656.,  672.,  688.,  704., 1417., 1450., 1483., 1516., 2287., 2338., 1573., 1608., 1643., 1678.,  846.,  864.,  882.,  900.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,  1265.,  1355.,   988.,  1056.,  1124.,  1192.,   264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   592.,   644.,  1708.,  1828.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  3760.,  4012.,  2060.,  2244.,  4436.,  4736.,  2340.,  2556.,  2772.,  2988.,  1349.,  1487.,  2940.,  3240.,  3540.,  3840.,  5697.,  6183.,  4216.,  4564.,  6711.,  7269.,  4892.,  5288.,  7725.,  8355.,  5568.,  6012.,  6456.,  6900.,  1132.,  1264.,  4068.,  4348.,  2900.,  3180.,  6464.,  6908.,  3180.,  3492.,  7140.,  7632.,  3460.,  3804.,  7816.,  8356.,  3740.,  4116.,  4492.,  4868.,  2799.,  3057.,  5840.,  6380.,  6920.,  7460., 10767., 11613.,  7596.,  8184., 11781., 12699.,  8272.,  8908., 12795., 13785.,  8948.,  9632., 10316., 11000.,  1672.,  1884.,  6428.,  6868.,  4300.,  4740.,  9844., 10528.,  4580.,  5052., 10520., 11252.,  4860.,  5364., 11196., 11976.,  5140.,  5676.,  6212.,  6748.,  3792.,  4004.,  7820.,  8260.,  8700.,  9140., 13420., 14104.,  9300.,  9772., 14320., 15052.,  9900., 10404., 15220., 16000., 10500., 11036., 11572., 12108.,  2117.,  2283.,  4320.,  4660.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  7991.,  8537.,  5472.,  5844.,  8345.,  8915.,  5708.,  6096.,  6484.,  6872.,  4344.,  4716.,  8860.,  9620., 10380., 11140., 15844., 17008., 10852., 11644., 16552., 17764., 11324., 12148., 17260., 18520., 11796., 12652., 13508., 14364.,  2752.,  3124., 11148., 11908.,  7100.,  7860., 16604., 17768.,  7380.,  8172., 17280., 18492.,  7660.,  8484., 17956., 19216.,  7940.,  8796.,  9652., 10508.,  7149.,  7767., 14540., 15800., 17060., 18320., 25785., 27455., 17032., 18084., 25583., 27069., 15980., 16824., 24357., 25659., 16656., 17548., 18440., 19332.,  3292.,  3744., 13508., 14428.,  8500.,  9420., 17232., 18380.,  5516.,  6212., 14132., 15072.,  1508.,  1980., 10008., 10740.,  1788.,  2292.,  2796.,  3300.,  7895.,  8377., 16032., 17020., 18008., 18996., 22087., 23349., 12860., 13640., 16765., 17843.,  6688.,  7260., 10419., 11313.,  7364.,  7984.,  8604.,  9224.,   568.,   844.,  9340.,  9908.,  2348.,  2916.,  4164.,  4784.,  2436.,  2780.,  4136.,  4548.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  2084.,  2236.,  3328.,  3604.,  6892.,  7460.,  8028.,  8596., 10172., 10792.,  5876.,  6220.,  7808.,  8220.,  2700.,  2820.,  4420.,  4624.,  3300.,  3452.,  3604.,  3756.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  3389.,  3623.,  2404.,  2568.,  3743.,  4001.,  2640.,  2820.,  4097.,  4379.,  2876.,  3072.,  3268.,  3464.,  1896.,  2076.,  3964.,  4340.,  4716.,  5092.,  7348.,  7936.,  5188.,  5596.,  8056.,  8692.,  5660.,  6100.,  8764.,  9448.,  6132.,  6604.,  7076.,  7548.,  1456.,  1636.,  5484.,  5860.,  3740.,  4116.,  8492.,  9080.,  4020.,  4428.,  9168.,  9804.,  4300.,  4740.,  9844., 10528.,  4580.,  5052.,  5524.,  5996.,  3669.,  3999.,  7580.,  8264.,  8948.,  9632., 13809., 14871.,  9624., 10356., 14823., 15957., 10300., 11080., 15837., 17043., 10976., 11804., 12632., 13460.,  1996.,  2256.,  7844.,  8380.,  5140.,  5676., 11872., 12700.,  5420.,  5988., 12548., 13424.,  5700.,  6300., 13224., 14148.,  5980.,  6612.,  7244.,  7876.,  5119.,  5569., 10480., 11404., 12328., 13252., 18879., 20301., 13004., 13976., 19893., 21387., 13680., 14700., 20907., 22473., 14356., 15424., 16492., 17560.,  2536.,  2876., 10204., 10900.,  6540.,  7236., 15252., 16320.,  6820.,  7548., 15928., 17044.,  7100.,  7860., 16604., 17768.,  7380.,  8172.,  8964.,  9756.,  5936.,  6276., 12108., 12804., 13500., 14196., 20620., 21688., 14100., 14828., 21520., 22636., 14700., 15460., 22420., 23584., 15300., 16092., 16884., 17676.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,     0.,     0.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1260.,  1380.,  1500.,  1620.,   900.,   968.,  1036.,  1104.,     0.,     0.,   508.,   544.,   580.,   616.,  1492.,  1580.,  1668.,  1756.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,     0.,     0.,   868.,   904.,   940.,   976.,  2372.,  2460.,  2548.,  2636.,  4576.,  4732.,  3660.,  3780.,  3900.,  4020.,  2260.,  2328.,  2396.,  2464.,     0.,     0.,   923.,   953.,   983.,  1013.,  2212.,  2280.,  2348.,  2416.,  3899.,  4013.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,  1829.,     0.,     0.,  1223.,  1253.,  1283.,  1313.,  2892.,  2960.,  3028.,  3096.,  5039.,  5153.,  3744.,  3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   821.,  1007.,   612.,   744.,   876.,  1008.,   473.,   543.,   613.,   683.,     0.,     0.,   581.,   635.,   689.,   743.,  1464.,  1580.,  1696.,  1812.,  2681.,  2867.,  1932.,  2064.,  2196.,  2328.,  1173.,  1243.,  1313.,  1383.,     0.,     0.,  1180.,  1312.,  1444.,  1576.,  3060.,  3340.,  3620.,  3900.,  5704.,  6148.,  4092.,  4404.,  4716.,  5028.,  2508.,  2672.,  2836.,  3000.,     0.,     0.,  2500.,  2632.,  2764.,  2896.,  5860.,  6140.,  6420.,  6700., 10144., 10588.,  7212.,  7524.,  7836.,  8148.,  4148.,  4312.,  4476.,  4640.,     0.,     0.,  3820.,  3952.,  4084.,  4216.,  8660.,  8940.,  9220.,  9500., 14584., 15028., 10332., 10644., 10956., 11268.,  5788.,  5952.,  6116.,  6280.,     0.,     0.,  2399.,  2477.,  2555.,  2633.,  5356.,  5520.,  5684.,  5848.,  8903.,  9161.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,     0.,     0.,  3179.,  3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488., 11483., 11741.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  1068.,  1296.,  1524.,  1752.,   797.,   915.,  1033.,  1151.,     0.,     0.,  1097.,  1199.,  1301.,  1403.,  2688.,  2900.,  3112.,  3324.,  4805.,  5135.,  3348.,  3576.,  3804.,  4032.,  1977.,  2095.,  2213.,  2331.,     0.,     0.,  2212.,  2440.,  2668.,  2896.,  5508.,  5980.,  6452.,  6924.,  9952., 10684.,  6924.,  7428.,  7932.,  8436.,  4116.,  4376.,  4636.,  4896.,     0.,     0.,  4492.,  4720.,  4948.,  5176., 10228., 10700., 11172., 11644., 17272., 18004., 11964., 12468., 12972., 13476.,  6716.,  6976.,  7236.,  7496.,     0.,     0.,  6772.,  7000.,  7228.,  7456., 14948., 15420., 15892., 16364., 24592., 25324., 17004., 17508., 18012., 18516.,  9316.,  9576.,  9836., 10096.,     0.,     0.,  3875.,  4001.,  4127.,  4253.,  8500.,  8760.,  9020.,  9280., 13907., 14309.,  9576.,  9852., 10128., 10404.,  5219.,  5361.,  5503.,  5645.,     0.,     0.,  5135.,  5261.,  5387.,  5513., 11100., 11360., 11620., 11880., 17927., 18329., 12336., 12612., 12888., 13164.,  6639.,  6781.,  6923.,  7065.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.,  1374.,  1670.,  2916.,  3572.,  1860.,  2516.,  4290.,  5370.,  2196.,  2980.,  5050.,  6322.,  2532.,  3444.,  4466.,  5418.,   500.,  1028.,  1556.,  2084.,  2244.,  2644.,  2456.,  3384.,  4312.,  5240.,  4572.,  6156.,  5496.,  6680.,  5580.,  7548.,  6680.,  8120.,  4220.,  6060.,  4472.,  5656.,  4152.,  5336.,   676.,  1076.,  4312.,  5240.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  6520.,  7704.,  2594.,  3418.,  4732.,  6572.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  2956.,  4412.,  2036.,  2564.,  5496.,  6680.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  4988.,  6828.,  1348.,  2004.,  6680.,  8120.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  5496.,  6680.,  2660.,  3316.,  3800.,  5240.,  6680.,  8120.,  5500.,  7340.,  6520.,  7704.,  4140.,  5852.,  4312.,  5240.,  4828.,  6412.,  5496.,  6680.,  3128.,  4312.,   190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  3684.,  4340.,  1432.,  2360.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  626.,  938., 1140., 1412.,  852., 1124., 1118., 1286.,  110.,  278.,    0.,    0.,  110.,  150.,  190.,  230.,  548.,  692.,  516.,  660., 1250., 1562.,  852., 1124., 1396., 1668.,  110.,  278.,  446.,  614.,    0.,    0.,  340.,  612.,  884., 1156., 1784., 2456., 3128., 3800., 2796., 3996., 4312., 5240., 2456., 3384., 2836., 3364., 1012., 1540.,    0.,    0.,  884., 1156., 1108., 1380., 3128., 3800., 1784., 2456., 5196., 6396., 2456., 3384., 4312., 5240., 1012., 1540., 2068., 2596.,    0.,    0., 1108., 1380., 1652., 1924., 1784., 2456., 3128., 3800., 3564., 4764., 4312., 5240., 2456., 3384., 2068., 2596., 1780., 2308.,    0.,    0., 1542., 1774.,  150.,  382., 2580., 3108., 1268., 1796., 4714., 5602., 1604., 2260., 2916., 3572., 1670., 2030., 2390., 2750.,    0.,    0.,  150.,  382.,  614.,  846., 1268., 1796., 2324., 2852., 1754., 2642., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2562., 3514., 3348., 3876.,  500., 1028.,  270.,  310.,   30.,   70.,    0.,    0., 1118., 1542., 1966., 2390., 4100., 5012., 2532., 3444., 4466., 5418.,  500., 1028., 1556., 2084.,   30.,   70.,  110.,  150.,    0.,    0., 2036., 2564., 3092., 3620., 3128., 4312., 5496., 6680., 3468., 4924., 3288., 4216., 3480., 4408., 1652., 1924.,  340.,  612.,    0.,    0., 3092., 3620.,  756., 1284., 5496., 6680., 3128., 4312., 6380., 7836., 3480., 4408., 5336., 6264.,  340.,  612.,  884., 1156.,    0.,    0.,  756., 1284., 1812., 2340., 3128., 4312., 5496., 6680., 4236., 5692., 5336., 6264., 1432., 2360.,  884., 1156., 1108., 1380.,    0.,    0.,  694.,  798.,   70.,  174., 1396., 1668.,  596.,  868., 2682., 3186.,  932., 1332., 1732., 2132., 1078., 1310., 1542., 1774.,    0.,    0.,   70.,  174.,  278.,  382.,  596.,  868., 1140., 1412., 1002., 1506., 1732., 2132., 1188., 1588., 1542., 1774.,  150.,  382.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 2130., 3210., 3508., 4292., 2196., 2980., 2814., 3238.,  270.,  694.,    0.,    0.,  782., 1078., 1374., 1670., 2916., 3572., 1860., 2516., 4290., 5370., 2196., 2980., 3764., 4548.,  270.,  694., 1118., 1542.,    0.,    0., 1684., 2468., 3252., 4036., 4152., 5336., 6520., 7704., 4140., 5852., 4312., 5240., 2456., 3384., 1812., 2340., 2036., 2564.,    0.,    0., 3252., 4036., 2452., 3236., 6520., 7704., 2104., 3288., 7564., 9276., 2456., 3384., 4312., 5240., 2036., 2564., 3092., 3620.,    0.,    0., 2452., 3236., 4020., 4804., 2104., 3288., 4472., 5656., 4908., 6620., 4312., 5240., 2456., 3384., 3092., 3620.,  756., 1284.,    0.,    0., 3238., 3726.,  310.,  798., 1556., 2084., 2292., 2820., 4042., 4674.,  260.,  404.,  548.,  692.,  486.,  590.,  694.,  798.,    0.,    0.,  310.,  798., 1286., 1774., 2292., 2820., 3348., 3876.,  570., 1202.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   332.,   344.,   356.,   368.,   257.,   266.,   275.,   284.,   293.,   302.,   311.,   320.,    75.,    82.,    89.,    96.,   192.,   208.,   224.,   240.,   256.,   272.,   288.,   304.,   451.,   478.,   505.,   532.,   372.,   392.,   412.,   432.,   625.,   658.,   691.,   724.,   488.,   512.,   536.,   560.,   799.,   838.,   877.,   916.,   604.,   632.,   660.,   688.,   716.,   744.,   772.,   800.,   215.,   222.,   229.,   236.,   512.,   528.,   544.,   560.,   576.,   592.,   608.,   624.,   991.,  1018.,  1045.,  1072.,   772.,   792.,   812.,   832.,  1285.,  1318.,  1351.,  1384.,   968.,   992.,  1016.,  1040.,  1579.,  1618.,  1657.,  1696.,  1164.,  1192.,  1220.,  1248.,  1276.,  1304.,  1332.,  1360.,   410.,   428.,   446.,   464.,   943.,   982.,  1021.,  1060.,  1099.,  1138.,  1177.,  1216.,  1839.,  1902.,  1965.,  2028.,  1393.,  1438.,  1483.,  1528.,  2280.,  2352.,  2424.,  2496.,  1687.,  1738.,  1789.,  1840.,  2721.,  2802.,  2883.,  2964.,  1981.,  2038.,  2095.,  2152.,  2209.,  2266.,  2323.,  2380.,   665.,   682.,   699.,   716.,  1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,  1664.,  2461.,  2518.,  2575.,  2632.,  1752.,  1792.,  1832.,  1872.,  2755.,  2818.,  2881.,  2944.,  1948.,  1992.,  2036.,  2080.,  3049.,  3118.,  3187.,  3256.,  2144.,  2192.,  2240.,  2288.,  2336.,  2384.,  2432.,  2480.,  1085.,  1118.,  1151.,  1184.,  2293.,  2362.,  2431.,  2500.,  2569.,  2638.,  2707.,  2776.,  4044.,  4152.,  4260.,  4368.,  2863.,  2938.,  3013.,  3088.,  4485.,  4602.,  4719.,  4836.,  3157.,  3238.,  3319.,  3400.,  4926.,  5052.,  5178.,  5304.,  3451.,  3538.,  3625.,  3712.,  3799.,  3886.,  3973.,  4060.,  1115.,  1142.,  1169.,  1196.,  2312.,  2368.,  2424.,  2480.,  2536.,  2592.,  2648.,  2704.,  3931.,  4018.,  4105.,  4192.,  2732.,  2792.,  2852.,  2912.,  4225.,  4318.,  4411.,  4504.,  2928.,  2992.,  3056.,  3120.,  4519.,  4618.,  4717.,  4816.,  3124.,  3192.,  3260.,  3328.,  3396.,  3464.,  3532.,  3600.,  1655.,  1682.,  1709.,  1736.,  3432.,  3488.,  3544.,  3600.,  3656.,  3712.,  3768.,  3824.,  5671.,  5758.,  5845.,  5932.,  3932.,  3992.,  4052.,  4112.,  6085.,  6178.,  6271.,  6364.,  4208.,  4272.,  4336.,  4400.,  6499.,  6598.,  6697.,  6796.,  4484.,  4552.,  4620.,  4688.,  4756.,  4824.,  4892.,  4960.,   525.,   546.,   567.,   588.,  1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,  1898.,  1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,  2054.,  2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  2072.,  2144.,  2216.,  2288.,  1417.,  1466.,  1515.,  1564.,  1613.,  1662.,  1711.,  1760.,  1075.,  1122.,  1169.,  1216.,  2192.,  2288.,  2384.,  2480.,  2576.,  2672.,  2768.,  2864.,  3931.,  4078.,  4225.,  4372.,  2692.,  2792.,  2892.,  2992.,  4105.,  4258.,  4411.,  4564.,  2808.,  2912.,  3016.,  3120.,  4279.,  4438.,  4597.,  4756.,  2924.,  3032.,  3140.,  3248.,  3356.,  3464.,  3572.,  3680.,  2015.,  2062.,  2109.,  2156.,  4112.,  4208.,  4304.,  4400.,  4496.,  4592.,  4688.,  4784.,  6871.,  7018.,  7165.,  7312.,  4692.,  4792.,  4892.,  4992.,  7165.,  7318.,  7471.,  7624.,  4888.,  4992.,  5096.,  5200.,  7459.,  7618.,  7777.,  7936.,  5084.,  5192.,  5300.,  5408.,  5516.,  5624.,  5732.,  5840.,  3110.,  3188.,  3266.,  3344.,  6343.,  6502.,  6661.,  6820.,  6979.,  7138.,  7297.,  7456., 10659., 10902., 11145., 11388.,  7273.,  7438.,  7603.,  7768., 11100., 11352., 11604., 11856.,  7567.,  7738.,  7909.,  8080., 11541., 11802., 12063., 12324.,  7861.,  8038.,  8215.,  8392.,  8569.,  8746.,  8923.,  9100.,  2465.,  2522.,  2579.,  2636.,  5012.,  5128.,  5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,  8695.,  8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,  9184.,  5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,  6064.,  6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,  3878.,  3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,  8827.,  9016., 12864., 13152., 13440., 13728.,  8743.,  8938.,  9133.,  9328., 13305., 13602., 13899., 14196.,  9037.,  9238.,  9439.,  9640., 13746., 14052., 14358., 14664.,  9331.,  9538.,  9745.,  9952., 10159., 10366., 10573., 10780.,  2915.,  2982.,  3049.,  3116.,  5912.,  6048.,  6184.,  6320.,  6456.,  6592.,  6728.,  6864.,  9811., 10018., 10225., 10432.,  6652.,  6792.,  6932.,  7072., 10105., 10318., 10531., 10744.,  6848.,  6992.,  7136.,  7280., 10399., 10618., 10837., 11056.,  7044.,  7192.,  7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4255.,  4322.,  4389.,  4456.,  8632.,  8768.,  8904.,  9040.,  9176.,  9312.,  9448.,  9584., 13951., 14158., 14365., 14572.,  9452.,  9592.,  9732.,  9872., 14365., 14578., 14791., 15004.,  9728.,  9872., 10016., 10160., 14779., 14998., 15217., 15436., 10004., 10152., 10300., 10448., 10596., 10744., 10892., 11040.,  1025.,  1066.,  1107.,  1148.,  2071.,  2154.,  2237.,  2320.,  2403.,  2486.,  2569.,  2652.,  3638.,  3764.,  3890.,  4016.,  2461.,  2546.,  2631.,  2716.,  3725.,  3854.,  3983.,  4112.,  2519.,  2606.,  2693.,  2780.,  3812.,  3944.,  4076.,  4208.,  2577.,  2666.,  2755.,  2844.,  2933.,  3022.,  3111.,  3200.,  2075.,  2162.,  2249.,  2336.,  4192.,  4368.,  4544.,  4720.,  4896.,  5072.,  5248.,  5424.,  7411.,  7678.,  7945.,  8212.,  5012.,  5192.,  5372.,  5552.,  7585.,  7858.,  8131.,  8404.,  5128.,  5312.,  5496.,  5680.,  7759.,  8038.,  8317.,  8596.,  5244.,  5432.,  5620.,  5808.,  5996.,  6184.,  6372.,  6560.,  3815.,  3902.,  3989.,  4076.,  7712.,  7888.,  8064.,  8240.,  8416.,  8592.,  8768.,  8944., 12751., 13018., 13285., 13552.,  8612.,  8792.,  8972.,  9152., 13045., 13318., 13591., 13864.,  8808.,  8992.,  9176.,  9360., 13339., 13618., 13897., 14176.,  9004.,  9192.,  9380.,  9568.,  9756.,  9944., 10132., 10320.,  5810.,  5948.,  6086.,  6224., 11743., 12022., 12301., 12580., 12859., 13138., 13417., 13696., 19479., 19902., 20325., 20748., 13153., 13438., 13723., 14008., 19920., 20352., 20784., 21216., 13447., 13738., 14029., 14320., 20361., 20802., 21243., 21684., 13741., 14038., 14335., 14632., 14929., 15226., 15523., 15820.,  4265.,  4362.,  4459.,  4556.,  8612.,  8808.,  9004.,  9200.,  9396.,  9592.,  9788.,  9984., 14221., 14518., 14815., 15112.,  9592.,  9792.,  9992., 10192., 14515., 14818., 15121., 15424.,  9788.,  9992., 10196., 10400., 14809., 15118., 15427., 15736.,  9984., 10192., 10400., 10608., 10816., 11024., 11232., 11440.,  6485.,  6638.,  6791.,  6944., 13093., 13402., 13711., 14020., 14329., 14638., 14947., 15256., 21684., 22152., 22620., 23088., 14623., 14938., 15253., 15568., 22125., 22602., 23079., 23556., 14917., 15238., 15559., 15880., 22566., 23052., 23538., 24024., 15211., 15538., 15865., 16192., 16519., 16846., 17173., 17500.,  4715.,  4822.,  4929.,  5036.,  9512.,  9728.,  9944., 10160., 10376., 10592., 10808., 11024., 15691., 16018., 16345., 16672., 10572., 10792., 11012., 11232., 15985., 16318., 16651., 16984., 10768., 10992., 11216., 11440., 16279., 16618., 16957., 17296., 10964., 11192., 11420., 11648., 11876., 12104., 12332., 12560.,  6855.,  6962.,  7069.,  7176., 13832., 14048., 14264., 14480., 14696., 14912., 15128., 15344., 22231., 22558., 22885., 23212., 14972., 15192., 15412., 15632., 22645., 22978., 23311., 23644., 15248., 15472., 15696., 15920., 23059., 23398., 23737., 24076., 15524., 15752., 15980., 16208., 16436., 16664., 16892., 17120.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,   41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,   45.,   48.,   51.,   54.,   57.,   60.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,  158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,  102.,  105.,  108.,  111.,  114.,  117.,  120.,    0.,    0.,    0.,    0.,   45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,  172.,  184.,  196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,  336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,  255.,  264.,  273.,  282.,  291.,  300.,    0.,    0.,    0.,    0.,  145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,  436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,  656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,  435.,  444.,  453.,  462.,  471.,  480.,    0.,    0.,    0.,    0.,  245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,  676.,  688.,  700.,  712.,  724.,  736., 1237., 1258., 1279., 1300.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088.,  597.,  606.,  615.,  624.,  633.,  642.,  651.,  660.,    0.,    0.,    0.,    0.,  244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,  599.,  608.,  617.,  626.,  635.,  644., 1019., 1034., 1049., 1064.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,  779.,  788.,  797.,  806.,  815.,  824., 1319., 1334., 1349., 1364.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,  101.,  116.,  131.,  146.,  161.,  176.,  200.,  224.,  248.,  272.,  149.,  166.,  183.,  200.,  217.,  234.,  251.,  268.,  117.,  126.,  135.,  144.,  153.,  162.,  171.,  180.,    0.,    0.,    0.,    0.,  147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,  401.,  416.,  431.,  446.,  461.,  476.,  680.,  704.,  728.,  752.,  489.,  506.,  523.,  540.,  557.,  574.,  591.,  608.,  297.,  306.,  315.,  324.,  333.,  342.,  351.,  360.,    0.,    0.,    0.,    0.,  297.,  314.,  331.,  348.,  365.,  382.,  399.,  416.,  772.,  808.,  844.,  880.,  916.,  952.,  988., 1024., 1441., 1498., 1555., 1612., 1032., 1072., 1112., 1152., 1192., 1232., 1272., 1312.,  633.,  654.,  675.,  696.,  717.,  738.,  759.,  780.,    0.,    0.,    0.,    0.,  637.,  654.,  671.,  688.,  705.,  722.,  739.,  756., 1492., 1528., 1564., 1600., 1636., 1672., 1708., 1744., 2581., 2638., 2695., 2752., 1832., 1872., 1912., 1952., 1992., 2032., 2072., 2112., 1053., 1074., 1095., 1116., 1137., 1158., 1179., 1200.,    0.,    0.,    0.,    0.,  977.,  994., 1011., 1028., 1045., 1062., 1079., 1096., 2212., 2248., 2284., 2320., 2356., 2392., 2428., 2464., 3721., 3778., 3835., 3892., 2632., 2672., 2712., 2752., 2792., 2832., 2872., 2912., 1473., 1494., 1515., 1536., 1557., 1578., 1599., 1620.,    0.,    0.,    0.,    0.,  610.,  620.,  630.,  640.,  650.,  660.,  670.,  680., 1361., 1382., 1403., 1424., 1445., 1466., 1487., 1508., 2261., 2294., 2327., 2360., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,    0.,    0.,    0.,    0.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880., 1781., 1802., 1823., 1844., 1865., 1886., 1907., 1928., 2921., 2954., 2987., 3020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   65.,   78.,   91.,  104.,  131.,  158.,  185.,  212.,  239.,  266.,  293.,  320.,  362.,  404.,  446.,  488.,  257.,  286.,  315.,  344.,  373.,  402.,  431.,  460.,  195.,  210.,  225.,  240.,  255.,  270.,  285.,  300.,    0.,    0.,    0.,    0.,  273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,  725.,  752.,  779.,  806.,  833.,  860., 1202., 1244., 1286., 1328.,  837.,  866.,  895.,  924.,  953.,  982., 1011., 1040.,  495.,  510.,  525.,  540.,  555.,  570.,  585.,  600.,    0.,    0.,    0.,    0.,  549.,  578.,  607.,  636.,  665.,  694.,  723.,  752., 1372., 1432., 1492., 1552., 1612., 1672., 1732., 1792., 2485., 2578., 2671., 2764., 1728., 1792., 1856., 1920., 1984., 2048., 2112., 2176., 1029., 1062., 1095., 1128., 1161., 1194., 1227., 1260.,    0.,    0.,    0.,    0., 1129., 1158., 1187., 1216., 1245., 1274., 1303., 1332., 2572., 2632., 2692., 2752., 2812., 2872., 2932., 2992., 4345., 4438., 4531., 4624., 3008., 3072., 3136., 3200., 3264., 3328., 3392., 3456., 1689., 1722., 1755., 1788., 1821., 1854., 1887., 1920.,    0.,    0.,    0.,    0., 1709., 1738., 1767., 1796., 1825., 1854., 1883., 1912., 3772., 3832., 3892., 3952., 4012., 4072., 4132., 4192., 6205., 6298., 6391., 6484., 4288., 4352., 4416., 4480., 4544., 4608., 4672., 4736., 2349., 2382., 2415., 2448., 2481., 2514., 2547., 2580.,    0.,    0.,    0.,    0.,  976.,  992., 1008., 1024., 1040., 1056., 1072., 1088., 2141., 2174., 2207., 2240., 2273., 2306., 2339., 2372., 3503., 3554., 3605., 3656., 2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368., 1386., 1404., 1422., 1440.,    0.,    0.,    0.,    0., 1296., 1312., 1328., 1344., 1360., 1376., 1392., 1408., 2801., 2834., 2867., 2900., 2933., 2966., 2999., 3032., 4523., 4574., 4625., 4676., 3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728., 1746., 1764., 1782., 1800.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,  1757.,  1847.,  1937.,  2027.,   964.,  1032.,  1100.,  1168.,  1236.,  1304.,  1372.,  1440.,   296.,   348.,   400.,   452.,   668.,   788.,   908.,  1028.,  1148.,  1268.,  1388.,  1508.,  1868.,  2072.,  2276.,  2480.,  1556.,  1708.,  1860.,  2012.,  2480.,  2732.,  2984.,  3236.,  1964.,  2148.,  2332.,  2516.,  3092.,  3392.,  3692.,  3992.,  2372.,  2588.,  2804.,  3020.,  3236.,  3452.,  3668.,  3884.,  1144.,  1196.,  1248.,  1300.,  2876.,  2996.,  3116.,  3236.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  4640.,  4892.,  5144.,  5396.,  1996.,  2180.,  2364.,  2548.,  5444.,  5744.,  6044.,  6344.,  2276.,  2492.,  2708.,  2924.,  3140.,  3356.,  3572.,  3788.,  1121.,  1259.,  1397.,  1535.,  2452.,  2752.,  3052.,  3352.,  3652.,  3952.,  4252.,  4552.,  5649.,  6135.,  6621.,  7107.,  4456.,  4804.,  5152.,  5500.,  6599.,  7157.,  7715.,  8273.,  5260.,  5656.,  6052.,  6448.,  7549.,  8179.,  8809.,  9439.,  6064.,  6508.,  6952.,  7396.,  6880.,  7324.,  7768.,  8212.,  2164.,  2296.,  2428.,  2560.,  6196.,  6476.,  6756.,  7036.,  2836.,  3116.,  3396.,  3676.,  7856.,  8300.,  8744.,  9188.,  3116.,  3428.,  3740.,  4052.,  8660.,  9152.,  9644., 10136.,  3396.,  3740.,  4084.,  4428.,  9464., 10004., 10544., 11084.,  3676.,  4052.,  4428.,  4804.,  5180.,  5556.,  5932.,  6308.,  2651.,  2909.,  3167.,  3425.,  5512.,  6052.,  6592.,  7132.,  7672.,  8212.,  8752.,  9292., 10399., 11245., 12091., 12937.,  8476.,  9064.,  9652., 10240., 11349., 12267., 13185., 14103.,  9280.,  9916., 10552., 11188., 12299., 13289., 14279., 15269., 10084., 10768., 11452., 12136., 10580., 11264., 11948., 12632.,  3184.,  3396.,  3608.,  3820.,  9516.,  9956., 10396., 10836.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932., 12680., 13412., 14144., 14876.,  4796.,  5300.,  5804.,  6308., 13484., 14264., 15044., 15824.,  5076.,  5612.,  6148.,  6684.,  7220.,  7756.,  8292.,  8828.,  3392.,  3604.,  3816.,  4028.,  6988.,  7428.,  7868.,  8308.,  8748.,  9188.,  9628., 10068., 10708., 11392., 12076., 12760.,  9412.,  9884., 10356., 10828., 11448., 12180., 12912., 13644., 10076., 10580., 11084., 11588., 12188., 12968., 13748., 14528., 10740., 11276., 11812., 12348.,  9364.,  9900., 10436., 10972.,  4109.,  4275.,  4441.,  4607.,  8384.,  8724.,  9064.,  9404.,  4432.,  4772.,  5112.,  5452.,  9569., 10091., 10613., 11135.,  4636.,  4992.,  5348.,  5704., 10003., 10549., 11095., 11641.,  4840.,  5212.,  5584.,  5956., 10437., 11007., 11577., 12147.,  5044.,  5432.,  5820.,  6208.,  6596.,  6984.,  7372.,  7760.,  3096.,  3468.,  3840.,  4212.,  6268.,  7028.,  7788.,  8548.,  9308., 10068., 10828., 11588., 14108., 15272., 16436., 17600.,  9716., 10508., 11300., 12092., 14720., 15932., 17144., 18356., 10124., 10948., 11772., 12596., 15332., 16592., 17852., 19112., 10532., 11388., 12244., 13100., 13956., 14812., 15668., 16524.,  5224.,  5596.,  5968.,  6340., 16156., 16916., 17676., 18436.,  7036.,  7796.,  8556.,  9316., 19916., 21080., 22244., 23408.,  7316.,  8108.,  8900.,  9692., 20720., 21932., 23144., 24356.,  7596.,  8420.,  9244., 10068., 21524., 22784., 24044., 25304.,  7876.,  8732.,  9588., 10444., 11300., 12156., 13012., 13868.,  7241.,  7859.,  8477.,  9095., 14692., 15952., 17212., 18472., 19732., 20992., 22252., 23512., 24457., 26127., 27797., 29467., 19320., 20372., 21424., 22476., 23167., 24653., 26139., 27625., 16860., 17704., 18548., 19392., 19829., 21131., 22433., 23735., 17664., 18556., 19448., 20340., 15152., 16044., 16936., 17828.,  6244.,  6696.,  7148.,  7600., 19476., 20396., 21316., 22236.,  8436.,  9356., 10276., 11196., 18624., 19772., 20920., 22068.,  2380.,  3076.,  3772.,  4468., 12068., 13008., 13948., 14888.,  2468.,  2940.,  3412.,  3884., 11656., 12388., 13120., 13852.,  2748.,  3252.,  3756.,  4260.,  4764.,  5268.,  5772.,  6276.,  7555.,  8037.,  8519.,  9001., 15320., 16308., 17296., 18284., 19272., 20260., 21248., 22236., 20439., 21701., 22963., 24225., 16812., 17592., 18372., 19152., 17101., 18179., 19257., 20335., 12304., 12876., 13448., 14020., 11715., 12609., 13503., 14397., 13108., 13728., 14348., 14968.,  8228.,  8848.,  9468., 10088.,   928.,  1204.,  1480.,  1756., 10124., 10692., 11260., 11828.,  3308.,  3876.,  4444.,  5012.,  6708.,  7328.,  7948.,  8568.,  3396.,  3740.,  4084.,  4428.,  6296.,  6708.,  7120.,  7532.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  2324.,  2476.,  2628.,  2780.,  5488.,  5764.,  6040.,  6316., 11180., 11748., 12316., 12884., 13452., 14020., 14588., 15156.,  8356.,  8976.,  9596., 10216.,  8804.,  9148.,  9492.,  9836.,  2760.,  3172.,  3584.,  3996.,  2108.,  2228.,  2348.,  2468.,  3308.,  3512.,  3716.,  3920.,  2772.,  2924.,  3076.,  3228.,  2932.,  3084.,  3236.,  3388.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  1984.,  2132.,  2280.,  2428.,  4361.,  4595.,  4829.,  5063.,  2188.,  2352.,  2516.,  2680.,  4795.,  5053.,  5311.,  5569.,  2392.,  2572.,  2752.,  2932.,  5229.,  5511.,  5793.,  6075.,  2596.,  2792.,  2988.,  3184.,  3380.,  3576.,  3772.,  3968.,  1416.,  1596.,  1776.,  1956.,  2908.,  3284.,  3660.,  4036.,  4412.,  4788.,  5164.,  5540.,  6764.,  7352.,  7940.,  8528.,  4820.,  5228.,  5636.,  6044.,  7376.,  8012.,  8648.,  9284.,  5228.,  5668.,  6108.,  6548.,  7988.,  8672.,  9356., 10040.,  5636.,  6108.,  6580.,  7052.,  7524.,  7996.,  8468.,  8940.,  2776.,  2956.,  3136.,  3316.,  8188.,  8564.,  8940.,  9316.,  3676.,  4052.,  4428.,  4804., 10268., 10856., 11444., 12032.,  3956.,  4364.,  4772.,  5180., 11072., 11708., 12344., 12980.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932.,  6404.,  6876.,  7348.,  7820.,  3569.,  3899.,  4229.,  4559.,  7348.,  8032.,  8716.,  9400., 10084., 10768., 11452., 12136., 13249., 14311., 15373., 16435., 10888., 11620., 12352., 13084., 14199., 15333., 16467., 17601., 11692., 12472., 13252., 14032., 15149., 16355., 17561., 18767., 12496., 13324., 14152., 14980., 12800., 13628., 14456., 15284.,  3796.,  4056.,  4316.,  4576., 11508., 12044., 12580., 13116.,  5076.,  5612.,  6148.,  6684., 14288., 15116., 15944., 16772.,  5356.,  5924.,  6492.,  7060., 15092., 15968., 16844., 17720.,  5636.,  6236.,  6836.,  7436., 15896., 16820., 17744., 18668.,  5916.,  6548.,  7180.,  7812.,  8444.,  9076.,  9708., 10340.,  5099.,  5549.,  5999.,  6449., 10408., 11332., 12256., 13180., 14104., 15028., 15952., 16876., 17999., 19421., 20843., 22265., 14908., 15880., 16852., 17824., 18949., 20443., 21937., 23431., 15712., 16732., 17752., 18772., 19899., 21465., 23031., 24597., 16516., 17584., 18652., 19720., 16500., 17568., 18636., 19704.,  4816.,  5156.,  5496.,  5836., 14828., 15524., 16220., 16916.,  6476.,  7172.,  7868.,  8564., 18308., 19376., 20444., 21512.,  6756.,  7484.,  8212.,  8940., 19112., 20228., 21344., 22460.,  7036.,  7796.,  8556.,  9316., 19916., 21080., 22244., 23408.,  7316.,  8108.,  8900.,  9692., 10484., 11276., 12068., 12860.,  5536.,  5876.,  6216.,  6556., 11276., 11972., 12668., 13364., 14060., 14756., 15452., 16148., 16628., 17696., 18764., 19832., 14724., 15452., 16180., 16908., 17368., 18484., 19600., 20716., 15388., 16148., 16908., 17668., 18108., 19272., 20436., 21600., 16052., 16844., 17636., 18428., 13652., 14444., 15236., 16028.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,  1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1148.,  1184.,  1220.,  1256.,   721.,   743.,   765.,   787.,   809.,   831.,   853.,   875.,     0.,     0.,     0.,     0.,   268.,   304.,   340.,   376.,   412.,   448.,   484.,   520.,  1156.,  1244.,  1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,  3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,  1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,     0.,     0.,     0.,     0.,   988.,  1024.,  1060.,  1096.,   748.,   784.,   820.,   856.,  2532.,  2620.,  2708.,  2796.,  1988.,  2076.,  2164.,  2252.,  4632.,  4788.,  4944.,  5100.,  2524.,  2644.,  2764.,  2884.,  3004.,  3124.,  3244.,  3364.,  1700.,  1768.,  1836.,  1904.,  1972.,  2040.,  2108.,  2176.,     0.,     0.,     0.,     0.,  1324.,  1360.,  1396.,  1432.,  1468.,  1504.,  1540.,  1576.,  3396.,  3484.,  3572.,  3660.,  3748.,  3836.,  3924.,  4012.,  6344.,  6500.,  6656.,  6812.,  4924.,  5044.,  5164.,  5284.,  5404.,  5524.,  5644.,  5764.,  3060.,  3128.,  3196.,  3264.,  3332.,  3400.,  3468.,  3536.,     0.,     0.,     0.,     0.,  1823.,  1853.,  1883.,  1913.,    23.,    53.,    83.,   113.,  2452.,  2520.,  2588.,  2656.,   292.,   360.,   428.,   496.,  3359.,  3473.,  3587.,  3701.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,   403.,   449.,   495.,   541.,   587.,   633.,   679.,   725.,     0.,     0.,     0.,     0.,   503.,   533.,   563.,   593.,   623.,   653.,   683.,   713.,  1380.,  1448.,  1516.,  1584.,  1652.,  1720.,  1788.,  1856.,  2695.,  2809.,  2923.,  3037.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  1323.,  1369.,  1415.,  1461.,  1507.,  1553.,  1599.,  1645.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,  1100.,  1216.,  1332.,  1501.,  1687.,  1873.,  2059.,  1124.,  1256.,  1388.,  1520.,  1652.,  1784.,  1916.,  2048.,   893.,   963.,  1033.,  1103.,  1173.,  1243.,  1313.,  1383.,     0.,     0.,     0.,     0.,  1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,  2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  5221.,  5407.,  5593.,  5779.,  3764.,  3896.,  4028.,  4160.,  4292.,  4424.,  4556.,  4688.,  2293.,  2363.,  2433.,  2503.,  2573.,  2643.,  2713.,  2783.,     0.,     0.,     0.,     0.,  2260.,  2392.,  2524.,  2656.,  2788.,  2920.,  3052.,  3184.,  5908.,  6188.,  6468.,  6748.,  7028.,  7308.,  7588.,  7868., 11072., 11516., 11960., 12404.,  7948.,  8260.,  8572.,  8884.,  9196.,  9508.,  9820., 10132.,  4892.,  5056.,  5220.,  5384.,  5548.,  5712.,  5876.,  6040.,     0.,     0.,     0.,     0.,  4900.,  5032.,  5164.,  5296.,  1972.,  2104.,  2236.,  2368.,  8052.,  8332.,  8612.,  8892.,  5204.,  5484.,  5764.,  6044., 12528., 12972., 13416., 13860.,  5740.,  6052.,  6364.,  6676.,  6988.,  7300.,  7612.,  7924.,  3692.,  3856.,  4020.,  4184.,  4348.,  4512.,  4676.,  4840.,     0.,     0.,     0.,     0.,  4084.,  4216.,  4348.,  4480.,  4612.,  4744.,  4876.,  5008.,  9684.,  9964., 10244., 10524., 10804., 11084., 11364., 11644., 16928., 17372., 17816., 18260., 11980., 12292., 12604., 12916., 13228., 13540., 13852., 14164.,  6972.,  7136.,  7300.,  7464.,  7628.,  7792.,  7956.,  8120.,     0.,     0.,     0.,     0.,  4739.,  4817.,  4895.,  4973.,    59.,   137.,   215.,   293.,  5596.,  5760.,  5924.,  6088.,   748.,   912.,  1076.,  1240.,  7115.,  7373.,  7631.,  7889.,   824.,  1004.,  1184.,  1364.,  1544.,  1724.,  1904.,  2084.,   823.,   917.,  1011.,  1105.,  1199.,  1293.,  1387.,  1481.,     0.,     0.,     0.,     0.,  1307.,  1385.,  1463.,  1541.,  1619.,  1697.,  1775.,  1853.,  3372.,  3536.,  3700.,  3864.,  4028.,  4192.,  4356.,  4520.,  6259.,  6517.,  6775.,  7033.,  4424.,  4604.,  4784.,  4964.,  5144.,  5324.,  5504.,  5684.,  2703.,  2797.,  2891.,  2985.,  3079.,  3173.,  3267.,  3361.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   485.,   587.,   689.,   791.,   976.,  1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2761.,  3091.,  3421.,  3751.,  1964.,  2192.,  2420.,  2648.,  2876.,  3104.,  3332.,  3560.,  1505.,  1623.,  1741.,  1859.,  1977.,  2095.,  2213.,  2331.,     0.,     0.,     0.,     0.,  2117.,  2219.,  2321.,  2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,  6276.,  6488.,  6700.,  9361.,  9691., 10021., 10351.,  6524.,  6752.,  6980.,  7208.,  7436.,  7664.,  7892.,  8120.,  3865.,  3983.,  4101.,  4219.,  4337.,  4455.,  4573.,  4691.,     0.,     0.,     0.,     0.,  4252.,  4480.,  4708.,  4936.,  5164.,  5392.,  5620.,  5848., 10660., 11132., 11604., 12076., 12548., 13020., 13492., 13964., 19352., 20084., 20816., 21548., 13468., 13972., 14476., 14980., 15484., 15988., 16492., 16996.,  8036.,  8296.,  8556.,  8816.,  9076.,  9336.,  9596.,  9856.,     0.,     0.,     0.,     0.,  8812.,  9040.,  9268.,  9496.,  3196.,  3424.,  3652.,  3880., 13572., 14044., 14516., 14988.,  8420.,  8892.,  9364.,  9836., 20424., 21156., 21888., 22620.,  8956.,  9460.,  9964., 10468., 10972., 11476., 11980., 12484.,  5684.,  5944.,  6204.,  6464.,  6724.,  6984.,  7244.,  7504.,     0.,     0.,     0.,     0.,  6844.,  7072.,  7300.,  7528.,  7756.,  7984.,  8212.,  8440., 15972., 16444., 16916., 17388., 17860., 18332., 18804., 19276., 27512., 28244., 28976., 29708., 19036., 19540., 20044., 20548., 21052., 21556., 22060., 22564., 10884., 11144., 11404., 11664., 11924., 12184., 12444., 12704.,     0.,     0.,     0.,     0.,  7655.,  7781.,  7907.,  8033.,    95.,   221.,   347.,   473.,  8740.,  9000.,  9260.,  9520.,  1204.,  1464.,  1724.,  1984., 10871., 11273., 11675., 12077.,  1280.,  1556.,  1832.,  2108.,  2384.,  2660.,  2936.,  3212.,  1243.,  1385.,  1527.,  1669.,  1811.,  1953.,  2095.,  2237.,     0.,     0.,     0.,     0.,  2111.,  2237.,  2363.,  2489.,  2615.,  2741.,  2867.,  2993.,  5364.,  5624.,  5884.,  6144.,  6404.,  6664.,  6924.,  7184.,  9823., 10225., 10627., 11029.,  6800.,  7076.,  7352.,  7628.,  7904.,  8180.,  8456.,  8732.,  4083.,  4225.,  4367.,  4509.,  4651.,  4793.,  4935.,  5077.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  5898.,  7170.,  8442.,  9714.,   580.,  1492.,  2404.,  3316.,  4418.,  5370.,  6322.,  7274.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,  1260.,  3228.,  5196.,  7164.,  6680.,  8120.,  9560., 11000.,  1180.,  3020.,  4860.,  6700.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3826.,  4650.,  5474.,  6298.,  1180.,  3020.,  4860.,  6700.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  3530.,  4290.,  5050.,  5810.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1180.,  3020.,  4860.,  6700.,   420.,  1076.,  1732.,  2388.,  6680.,  8120.,  9560., 11000.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   920.,  2360.,  3800.,  5240.,  6680.,  8120.,  9560., 11000.,  1180.,  3020.,  4860.,  6700.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   210.,   522.,   834.,  1146.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  4122.,  5010.,  5898.,  6786.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   570.,  1458.,  2346.,  3234.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   610.,  1562.,  2514.,  3466.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,     0.,     0.,     0.,     0.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  4418.,  5370.,  6322.,  7274.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,     0.,     0.,     0.,     0.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,     0.,     0.,     0.,     0.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,     0.,     0.,     0.,     0.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,     0.,     0.,     0.,     0.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,     0.,     0.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   330.,   834.,  1338.,  1842.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   690.,  1770.,  2850.,  3930.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,     0.,     0.,     0.,     0.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  2262.,  2750.,  3238.,  3726.,   310.,   798.,  1286.,  1774.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  2938.,  3570.,  4202.,  4834.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   310.,   798.,  1286.,  1774.,  2262.,  2750.,  3238.,  3726.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   410.,  1042.,  1674.,  2306.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  809.,  890., 1386.,  968., 1503., 1046., 1139.,  702.,  764., 1180.,  816., 1258.,  868.,  938., 1012., 1074., 1660., 1146., 1768., 1218., 1288.,  300.,  343.,  524.,  359.,  548.,  375.,  422.,  616.,  710., 1084.,  742., 1132.,  774.,  876., 1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492., 1610., 1961., 2138., 3258., 2216., 3375., 2294., 2483., 1470., 1596., 2428., 1648., 2506., 1700., 1834., 2249., 2450., 3726., 2528., 3843., 2606., 2819., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,  580.,  663., 1004.,  679., 1028.,  695.,  782., 1176., 1350., 2044., 1382., 2092., 1414., 1596., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 3113., 3386., 5130., 3464., 5247., 3542., 3827., 2238., 2428., 3676., 2480., 3754., 2532., 2730., 3401., 3698., 5598., 3776., 5715., 3854., 4163., 2430., 2636., 3988., 2688., 4066., 2740., 2954., 3689., 4010., 6066., 4088., 6183., 4166., 4499., 2622., 2844., 4300., 2896., 4378., 2948., 3178., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,    8.,   10.,    6.,    7.,   20.,   23.,   26.,   18.,   20.,   14.,   18.,   48.,   58.,   68.,   44.,   50.,   34.,   38.,   98.,  108.,  118.,   74.,   80.,   59.,   68.,  169.,  190.,  211.,  128.,  140.,   78.,   86.,  194.,  212.,  230.,  130.,  140.,  118.,  126.,  284.,  302.,  320.,  180.,  190.,   80.,   85.,  186.,  197.,  208.,  114.,  120.,  105.,  110.,  241.,  252.,  263.,  144.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   29.,   44.,   59.,   32.,   40.,   42.,   49.,  104.,  119.,  134.,   72.,   80.,   86.,  102.,  216.,  250.,  284.,  152.,  170.,  166.,  182.,  386.,  420.,  454.,  242.,  260.,  257.,  284.,  601.,  658.,  715.,  380.,  410.,  210.,  230.,  482.,  524.,  566.,  298.,  320.,  310.,  330.,  692.,  734.,  776.,  408.,  430.,  176.,  187.,  390.,  413.,  436.,  228.,  240.,  231.,  242.,  505.,  528.,  551.,  288.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   53.,   80.,  107.,   56.,   70.,   78.,   91.,  188.,  215.,  242.,  126.,  140.,  158.,  186.,  384.,  442.,  500.,  260.,  290.,  298.,  326.,  674.,  732.,  790.,  410.,  440.,  455.,  500., 1033., 1126., 1219.,  632.,  680.,  342.,  374.,  770.,  836.,  902.,  466.,  500.,  502.,  534., 1100., 1166., 1232.,  636.,  670.,  272.,  289.,  594.,  629.,  664.,  342.,  360.,  357.,  374.,  769.,  804.,  839.,  432.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  7840.,  8328., 12878.,  8896., 13730.,  9464., 10016.,  2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  3248.,  4688.,  5432.,  8294.,  5680.,  8666.,  5928.,  6736.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  9912., 10784., 16442., 11192., 17054., 11600., 12536., 14300., 15192., 23187., 15804., 24105., 16416., 17404.,  7960.,  8448., 12938.,  8856., 13550.,  9264.,  9816., 10540., 11112., 17067., 11724., 17985., 12336., 13004.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,  1408.,  1512.,  2654.,  2080.,  3506.,  2648.,  2816.,   992.,  1140.,  1783.,  1264.,  1969.,  1388.,  1568.,  2096.,  2456.,  3830.,  2704.,  4202.,  2952.,  3376.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  8428.,  9256., 14283.,  9868., 15201., 10480., 11404.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776., 12128., 12872., 19694., 13440., 20546., 14008., 14816.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457., 1172., 1328., 1484.,  919., 1009.,  566.,  626., 1424., 1560., 1696.,  966., 1042.,  866.,  926., 2104., 2240., 2376., 1346., 1422.,  599.,  637., 1400., 1484., 1568.,  863.,  909.,  789.,  827., 1820., 1904., 1988., 1093., 1139.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   41.,   95.,  196.,  312.,  428.,  233.,  295.,  311.,  365.,  776.,  892., 1008.,  543.,  605.,  634.,  758., 1608., 1872., 2136., 1146., 1286., 1254., 1378., 2928., 3192., 3456., 1846., 1986., 1939., 2149., 4556., 5000., 5444., 2899., 3133., 1598., 1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233., 2327.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   77.,  179.,  364.,  576.,  788.,  413.,  523.,  587.,  689., 1424., 1636., 1848.,  963., 1073., 1186., 1406., 2904., 3360., 3816., 1986., 2222., 2286., 2506., 5184., 5640., 6096., 3166., 3402., 3487., 3841., 7940., 8672., 9404., 4879., 5257., 2630., 2882., 5936., 6456., 6976., 3606., 3874., 3890., 4142., 8536., 9056., 9576., 4946., 5214., 2111., 2245., 4616., 4892., 5168., 2663., 2805., 2781., 2915., 5996., 6272., 6548., 3373., 3515.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.,  4292.,  2580.,  5626.,  3044.,  6578.,  3508.,  4420.,  2504.,  3304.,  5332.,  4232.,  6724.,  5160.,  6472.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,  724.,  868.,   70.,  174.,  220.,  428., 1064., 1608., 2152., 1436., 1772., 1260., 1148., 3464., 1832., 2376.,  428.,  764.,  826., 1330., 3164., 4364., 5244., 3418., 3282., 2956., 2076., 6344., 3176., 4232.,  844., 1436., 1564., 2028., 4520., 5576., 5288., 3804., 2540., 2262.,  190., 3236., 1012., 1668.,  950., 1310., 1374., 1670., 3636., 4292., 2580., 2750.,  230.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1428., 2340., 3252., 1774., 2262., 2390., 2814., 5988., 3508., 4420.,  310.,  798., 1148., 1612., 3432., 4488., 5544., 3132., 3724., 3468.,  540., 5320., 2152., 3208., 1356., 1948., 2186., 2818., 6140., 7596., 5660., 5162., 2082., 1260., 1148., 3464., 1832., 2376.,  428.,  764.,  636.,  844., 2152., 2696., 2920., 2108., 1612., 1286.,  110., 2052.,  596.,  996.,  614.,  846.,  782.,  950., 2196., 2596., 1652., 1774.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486., 1012., 1668., 2324., 1310., 1670., 1670., 1966., 4292., 2580., 3236.,  230.,  590., 1052., 1772., 3752., 5320., 6888., 3804., 4652., 4652., 3004., 9224., 4520., 6088., 1260., 2108., 2522., 3282., 7068., 8780., 8124., 5882., 3954., 3468.,  540., 5320., 2152., 3208., 1356., 1948., 2076., 2540., 5544., 6600., 4264., 4316., 1004.,  310.,   30.,  868.,  180.,  324.,  278.,  382.,  190.,  230.,  756.,  900.,  724.,  798.,   70.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   37.,    40.,    43.,    46.,    82.,    88.,    73.,    78.,   127.,   136.,   103.,   110.,   117.,   124.,    98.,   112.,   126.,   140.,   224.,   248.,   186.,   204.,   314.,   344.,   246.,   268.,   290.,   312.,   238.,   252.,   266.,   280.,   464.,   488.,   366.,   384.,   614.,   644.,   466.,   488.,   510.,   532.,   433.,   466.,   499.,   532.,   846.,   900.,   649.,   688.,  1071.,  1134.,   799.,   844.,   889.,   934.,   606.,   636.,   666.,   696.,  1064.,  1112.,   766.,   800.,  1214.,  1268.,   866.,   904.,   942.,   980.,   985.,  1042.,  1099.,  1156.,  1746.,  1836.,  1249.,  1312.,  1971.,  2070.,  1399.,  1468.,  1537.,  1606.,   974.,  1020.,  1066.,  1112.,  1664.,  1736.,  1166.,  1216.,  1814.,  1892.,  1266.,  1320.,  1374.,  1428.,  1537.,  1618.,  1699.,  1780.,  2646.,  2772.,  1849.,  1936.,  2871.,  3006.,  1999.,  2092.,  2185.,  2278.,  1342.,  1404.,  1466.,  1528.,  2264.,  2360.,  1566.,  1632.,  2414.,  2516.,  1666.,  1736.,  1806.,  1876.,  1962.,  2024.,  2086.,  2148.,  3224.,  3320.,  2226.,  2292.,  3434.,  3536.,  2366.,  2436.,  2506.,  2576.,   557.,   600.,   643.,   686.,   982.,  1048.,   673.,   718.,  1027.,  1096.,   703.,   750.,   797.,   844.,  1138.,  1232.,  1326.,  1420.,  2024.,  2168.,  1386.,  1484.,  2114.,  2264.,  1446.,  1548.,  1650.,  1752.,  2078.,  2172.,  2266.,  2360.,  3464.,  3608.,  2366.,  2464.,  3614.,  3764.,  2466.,  2568.,  2670.,  2772.,  3193.,  3346.,  3499.,  3652.,  5346.,  5580.,  3649.,  3808.,  5571.,  5814.,  3799.,  3964.,  4129.,  4294.,  2446.,  2556.,  2666.,  2776.,  4064.,  4232.,  2766.,  2880.,  4214.,  4388.,  2866.,  2984.,  3102.,  3220.,  3745.,  3922.,  4099.,  4276.,  6246.,  6516.,  4249.,  4432.,  6471.,  6750.,  4399.,  4588.,  4777.,  4966.,  2814.,  2940.,  3066.,  3192.,  4664.,  4856.,  3166.,  3296.,  4814.,  5012.,  3266.,  3400.,  3534.,  3668.,  4297.,  4498.,  4699.,  4900.,  7146.,  7452.,  4849.,  5056.,  7371.,  7686.,  4999.,  5212.,  5425.,  5638.,  3182.,  3324.,  3466.,  3608.,  5264.,  5480.,  3566.,  3712.,  5414.,  5636.,  3666.,  3816.,  3966.,  4116.,  4602.,  4744.,  4886.,  5028.,  7424.,  7640.,  5026.,  5172.,  7634.,  7856.,  5166.,  5316.,  5466.,  5616.,  1077.,  1160.,  1243.,  1326.,  1882.,  2008.,  1273.,  1358.,  1927.,  2056.,  1303.,  1390.,  1477.,  1564.,  2178.,  2352.,  2526.,  2700.,  3824.,  4088.,  2586.,  2764.,  3914.,  4184.,  2646.,  2828.,  3010.,  3192.,  3918.,  4092.,  4266.,  4440.,  6464.,  6728.,  4366.,  4544.,  6614.,  6884.,  4466.,  4648.,  4830.,  5012.,  5953.,  6226.,  6499.,  6772.,  9846., 10260.,  6649.,  6928., 10071., 10494.,  6799.,  7084.,  7369.,  7654.,  4286.,  4476.,  4666.,  4856.,  7064.,  7352.,  4766.,  4960.,  7214.,  7508.,  4866.,  5064.,  5262.,  5460.,  6505.,  6802.,  7099.,  7396., 10746., 11196.,  7249.,  7552., 10971., 11430.,  7399.,  7708.,  8017.,  8326.,  4654.,  4860.,  5066.,  5272.,  7664.,  7976.,  5166.,  5376.,  7814.,  8132.,  5266.,  5480.,  5694.,  5908.,  7057.,  7378.,  7699.,  8020., 11646., 12132.,  7849.,  8176., 11871., 12366.,  7999.,  8332.,  8665.,  8998.,  5022.,  5244.,  5466.,  5688.,  8264.,  8600.,  5566.,  5792.,  8414.,  8756.,  5666.,  5896.,  6126.,  6356.,  7242.,  7464.,  7686.,  7908., 11624., 11960.,  7826.,  8052., 11834., 12176.,  7966.,  8196.,  8426.,  8656.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  109.,  118.,  127.,  136.,  317.,  338.,  359.,  380.,  401.,  422.,  244.,  256.,  268.,  280.,  148.,  156.,  164.,  172.,  370.,  388.,  406.,  424.,  442.,  460.,  250.,  260.,  270.,  280.,  228.,  236.,  244.,  252.,  550.,  568.,  586.,  604.,  622.,  640.,  350.,  360.,  370.,  380.,  155.,  160.,  165.,  170.,  361.,  372.,  383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,  205.,  210.,  215.,  220.,  471.,  482.,  493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  103.,  118.,   56.,   64.,   72.,   80.,   77.,   84.,   91.,   98.,  193.,  208.,  223.,  238.,  253.,  268.,  136.,  144.,  152.,  160.,  156.,  172.,  188.,  204.,  398.,  432.,  466.,  500.,  534.,  568.,  286.,  304.,  322.,  340.,  316.,  332.,  348.,  364.,  738.,  772.,  806.,  840.,  874.,  908.,  466.,  484.,  502.,  520.,  487.,  514.,  541.,  568., 1145., 1202., 1259., 1316., 1373., 1430.,  730.,  760.,  790.,  820.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  187.,  214.,   98.,  112.,  126.,  140.,  143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  457.,  484.,  238.,  252.,  266.,  280.,  288.,  316.,  344.,  372.,  710.,  768.,  826.,  884.,  942., 1000.,  490.,  520.,  550.,  580.,  568.,  596.,  624.,  652., 1290., 1348., 1406., 1464., 1522., 1580.,  790.,  820.,  850.,  880.,  865.,  910.,  955., 1000., 1973., 2066., 2159., 2252., 2345., 2438., 1216., 1264., 1312., 1360.,  652.,  684.,  716.,  748., 1474., 1540., 1606., 1672., 1738., 1804.,  898.,  932.,  966., 1000.,  972., 1004., 1036., 1068., 2134., 2200., 2266., 2332., 2398., 2464., 1238., 1272., 1306., 1340.,  527.,  544.,  561.,  578., 1153., 1188., 1223., 1258., 1293., 1328.,  666.,  684.,  702.,  720.,  697.,  714.,  731.,  748., 1503., 1538., 1573., 1608., 1643., 1678.,  846.,  864.,  882.,  900.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  7128.,  7764.,  8400.,  9036., 12987., 13977.,  9076.,  9760., 14001., 15063.,  9752., 10484., 11216., 11948.,  7168.,  7656.,  4624.,  5112., 10842., 11598.,  4904.,  5424., 11518., 12322.,  5184.,  5736.,  6288.,  6840.,  8528.,  9016.,  9504.,  9992., 14626., 15382., 10104., 10624., 15526., 16330., 10704., 11256., 11808., 12360.,  4320.,  4660.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  7991.,  8537.,  5472.,  5844.,  6216.,  6588.,  8816.,  9560., 10304., 11048., 15730., 16870., 10776., 11552., 16438., 17626., 11248., 12056., 12864., 13672., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352., 15000., 15892., 16784., 17676., 25563., 26937., 17460., 18400., 26577., 28023., 18136., 19124., 20112., 21100.,  8192.,  8680.,  1552.,  2040., 10330., 11086.,  1832.,  2352., 11006., 11810.,  2112.,  2664.,  3216.,  3768.,  5672.,  6244.,  6816.,  7388., 10611., 11505.,  7492.,  8112., 11625., 12591.,  8168.,  8836.,  9504., 10172.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  2096.,  2200.,  2304.,  2408.,  3826.,  4006.,  2904.,  3040.,  4726.,  4954.,  3504.,  3672.,  3840.,  4008.,  1872.,  2020.,  2168.,  2316.,  3389.,  3623.,  2404.,  2568.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,  3920.,  4280.,  4640.,  5000.,  7234.,  7798.,  5112.,  5504.,  7942.,  8554.,  5584.,  6008.,  6432.,  6856.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  7128.,  7764.,  8400.,  9036., 12987., 13977.,  9076.,  9760., 14001., 15063.,  9752., 10484., 11216., 11948.,  7168.,  7656.,  4624.,  5112., 10842., 11598.,  4904.,  5424., 11518., 12322.,  5184.,  5736.,  6288.,  6840.,  9448., 10276., 11104., 11932., 17043., 18321., 11780., 12656., 18057., 19407., 12456., 13380., 14304., 15228.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848., 12816., 13560., 14304., 15048., 21826., 22966., 14904., 15680., 22726., 23914., 15504., 16312., 17120., 17928.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   731.,   797.,   863.,   929.,  2224.,  2380.,  2536.,  2692.,  2848.,  3004.,  1769.,  1859.,  1949.,  2039.,  1086.,  1146.,  1206.,  1266.,  2744.,  2880.,  3016.,  3152.,  3288.,  3424.,  1874.,  1950.,  2026.,  2102.,  1686.,  1746.,  1806.,  1866.,  4104.,  4240.,  4376.,  4512.,  4648.,  4784.,  2634.,  2710.,  2786.,  2862.,  1169.,  1207.,  1245.,  1283.,  2736.,  2820.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,  1829.,  1549.,  1587.,  1625.,  1663.,  3576.,  3660.,  3744.,  3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   768.,   884.,   419.,   481.,   543.,   605.,   581.,   635.,   689.,   743.,  1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  1039.,  1101.,  1163.,  1225.,  1174.,  1298.,  1422.,  1546.,  3016.,  3280.,  3544.,  3808.,  4072.,  4336.,  2186.,  2326.,  2466.,  2606.,  2414.,  2538.,  2662.,  2786.,  5656.,  5920.,  6184.,  6448.,  6712.,  6976.,  3586.,  3726.,  3866.,  4006.,  3719.,  3929.,  4139.,  4349.,  8776.,  9220.,  9664., 10108., 10552., 10996.,  5621.,  5855.,  6089.,  6323.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1416.,  1628.,   743.,   853.,   963.,  1073.,  1097.,  1199.,  1301.,  1403.,  2688.,  2900.,  3112.,  3324.,  3536.,  3748.,  1843.,  1953.,  2063.,  2173.,  2206.,  2426.,  2646.,  2866.,  5464.,  5920.,  6376.,  6832.,  7288.,  7744.,  3794.,  4030.,  4266.,  4502.,  4406.,  4626.,  4846.,  5066., 10024., 10480., 10936., 11392., 11848., 12304.,  6154.,  6390.,  6626.,  6862.,  6707.,  7061.,  7415.,  7769., 15328., 16060., 16792., 17524., 18256., 18988.,  9473.,  9851., 10229., 10607.,  5070.,  5322.,  5574.,  5826., 11480., 12000., 12520., 13040., 13560., 14080.,  7010.,  7278.,  7546.,  7814.,  7590.,  7842.,  8094.,  8346., 16680., 17200., 17720., 18240., 18760., 19280.,  9690.,  9958., 10226., 10494.,  4121.,  4255.,  4389.,  4523.,  9024.,  9300.,  9576.,  9852., 10128., 10404.,  5219.,  5361.,  5503.,  5645.,  5461.,  5595.,  5729.,  5863., 11784., 12060., 12336., 12612., 12888., 13164.,  6639.,  6781.,  6923.,  7065.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  2916.,  3572.,  1860.,  2516.,  4290.,  5370.,  2196.,  2980.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,  110.,  150.,  190.,  230.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.,  300.,  508.,  716.,  924., 1448., 1992., 2536., 3080., 1448., 1992., 1820., 2156.,  636.,  972.,  716.,  924.,  812., 1020., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 3698., 4394., 1378., 2074., 1900., 2364., 1484., 1948., 4904., 5960., 2792., 3848., 4904., 5960., 1308., 1900., 2492., 3084., 1484., 1948., 2412., 2876., 2792., 3848., 4904., 5960., 2792., 3848., 2492., 3084., 1820., 2412., 1966., 2262.,  190.,  486., 3172., 3828., 1604., 2260., 2916., 3572., 1670., 2030., 2390., 2750.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2532., 3444., 3238., 3726.,  310.,  798., 1118., 1542., 1966., 2390., 4100., 5012., 2532., 3444., 4356., 5268.,  310.,  798., 1286., 1774., 1996., 2460., 2924., 3388., 2792., 3848., 4904., 5960., 2792., 3848., 1980., 2572., 2332., 2924., 2924., 3388.,  460.,  924., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 5058., 5882.,  946., 1770.,  716.,  924.,  812., 1020., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644.,  812., 1020., 1228., 1436., 1448., 1992., 2536., 3080., 1448., 1992., 1308., 1644., 1148., 1484., 1118., 1286.,  110.,  278., 1988., 2388.,  932., 1332., 1732., 2132., 1078., 1310., 1542., 1774.,  110.,  278.,  446.,  614.,  932., 1332., 1732., 2132., 1188., 1588., 1542., 1774.,  150.,  382.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,  782., 1078., 1374., 1670., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310., 1644., 2364., 3084., 3804., 4136., 5704., 7272., 8840., 4136., 5704., 4188., 5036., 1980., 2828., 3084., 3804., 2156., 2876., 7272., 8840., 4136., 5704., 7272., 8840., 1980., 2828., 3676., 4524., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 4370., 5322., 2562., 3514., 2924., 3388.,  460.,  924., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,  460.,  924., 1388., 1852., 2792., 3848., 4904., 5960., 2792., 3848., 3516., 4108.,  796., 1388.,  270.,  310.,   30.,   70.,  804.,  948.,  260.,  404.,  548.,  692.,  486.,  590.,  694.,  798.,   30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,   248.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2993.,  3074.,  3155.,  3236.,  3317.,  3398.,  3479.,  3560.,  5166.,  5292.,  5418.,  5544.,  3611.,  3698.,  3785.,  3872.,  5607.,  5742.,  5877.,  6012.,  3905.,  3998.,  4091.,  4184.,  4277.,  4370.,  4463.,  4556.,  2622.,  2684.,  2746.,  2808.,  2870.,  2932.,  2994.,  3056.,  4432.,  4528.,  4624.,  4720.,  3066.,  3132.,  3198.,  3264.,  4726.,  4828.,  4930.,  5032.,  3262.,  3332.,  3402.,  3472.,  3542.,  3612.,  3682.,  3752.,  3862.,  3924.,  3986.,  4048.,  4110.,  4172.,  4234.,  4296.,  6352.,  6448.,  6544.,  6640.,  4386.,  4452.,  4518.,  4584.,  6766.,  6868.,  6970.,  7072.,  4662.,  4732.,  4802.,  4872.,  4942.,  5012.,  5082.,  5152.,  1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,  1898.,  1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,  2054.,  2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  1547.,  1594.,  1641.,  1688.,  2182.,  2276.,  2370.,  2464.,  2558.,  2652.,  2746.,  2840.,  3904.,  4048.,  4192.,  4336.,  2674.,  2772.,  2870.,  2968.,  4078.,  4228.,  4378.,  4528.,  2790.,  2892.,  2994.,  3096.,  3198.,  3300.,  3402.,  3504.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  7313.,  7490.,  7667.,  7844.,  8021.,  8198.,  8375.,  8552., 12222., 12492., 12762., 13032.,  8315.,  8498.,  8681.,  8864., 12663., 12942., 13221., 13500.,  8609.,  8798.,  8987.,  9176.,  9365.,  9554.,  9743.,  9932.,  5502.,  5628.,  5754.,  5880.,  6006.,  6132.,  6258.,  6384.,  9136.,  9328.,  9520.,  9712.,  6202.,  6332.,  6462.,  6592.,  9430.,  9628.,  9826., 10024.,  6398.,  6532.,  6666.,  6800.,  6934.,  7068.,  7202.,  7336.,  8393.,  8594.,  8795.,  8996.,  9197.,  9398.,  9599.,  9800., 13986., 14292., 14598., 14904.,  9491.,  9698.,  9905., 10112., 14427., 14742., 15057., 15372.,  9785.,  9998., 10211., 10424., 10637., 10850., 11063., 11276.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  9062.,  9204.,  9346.,  9488.,  9630.,  9772.,  9914., 10056., 14632., 14848., 15064., 15280.,  9906., 10052., 10198., 10344., 15046., 15268., 15490., 15712., 10182., 10332., 10482., 10632., 10782., 10932., 11082., 11232.,  2071.,  2154.,  2237.,  2320.,  2403.,  2486.,  2569.,  2652.,  3638.,  3764.,  3890.,  4016.,  2461.,  2546.,  2631.,  2716.,  3725.,  3854.,  3983.,  4112.,  2519.,  2606.,  2693.,  2780.,  2867.,  2954.,  3041.,  3128.,  4182.,  4356.,  4530.,  4704.,  4878.,  5052.,  5226.,  5400.,  7384.,  7648.,  7912.,  8176.,  4994.,  5172.,  5350.,  5528.,  7558.,  7828.,  8098.,  8368.,  5110.,  5292.,  5474.,  5656.,  5838.,  6020.,  6202.,  6384.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024., 11633., 11906., 12179., 12452., 12725., 12998., 13271., 13544., 19278., 19692., 20106., 20520., 13019., 13298., 13577., 13856., 19719., 20142., 20565., 20988., 13313., 13598., 13883., 14168., 14453., 14738., 15023., 15308.,  8382.,  8572.,  8762.,  8952.,  9142.,  9332.,  9522.,  9712., 13840., 14128., 14416., 14704.,  9338.,  9532.,  9726.,  9920., 14134., 14428., 14722., 15016.,  9534.,  9732.,  9930., 10128., 10326., 10524., 10722., 10920., 12713., 13010., 13307., 13604., 13901., 14198., 14495., 14792., 21042., 21492., 21942., 22392., 14195., 14498., 14801., 15104., 21483., 21942., 22401., 22860., 14489., 14798., 15107., 15416., 15725., 16034., 16343., 16652.,  9102.,  9308.,  9514.,  9720.,  9926., 10132., 10338., 10544., 15016., 15328., 15640., 15952., 10122., 10332., 10542., 10752., 15310., 15628., 15946., 16264., 10318., 10532., 10746., 10960., 11174., 11388., 11602., 11816., 13793., 14114., 14435., 14756., 15077., 15398., 15719., 16040., 22806., 23292., 23778., 24264., 15371., 15698., 16025., 16352., 23247., 23742., 24237., 24732., 15665., 15998., 16331., 16664., 16997., 17330., 17663., 17996.,  9822., 10044., 10266., 10488., 10710., 10932., 11154., 11376., 16192., 16528., 16864., 17200., 10906., 11132., 11358., 11584., 16486., 16828., 17170., 17512., 11102., 11332., 11562., 11792., 12022., 12252., 12482., 12712., 14262., 14484., 14706., 14928., 15150., 15372., 15594., 15816., 22912., 23248., 23584., 23920., 15426., 15652., 15878., 16104., 23326., 23668., 24010., 24352., 15702., 15932., 16162., 16392., 16622., 16852., 17082., 17312.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,  288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,  758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  448.,  456.,  464.,  472.,  480.,  488.,  496.,  504., 1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,  305.,  310.,  315.,  320.,  325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,  405.,  410.,  415.,  420.,  425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,  101.,  116.,  131.,  146.,  161.,  176.,  191.,  206.,  221.,  236.,  104.,  112.,  120.,  128.,  136.,  144.,  152.,  160.,  147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,  401.,  416.,  431.,  446.,  461.,  476.,  491.,  506.,  521.,  536.,  264.,  272.,  280.,  288.,  296.,  304.,  312.,  320.,  296.,  312.,  328.,  344.,  360.,  376.,  392.,  408.,  762.,  796.,  830.,  864.,  898.,  932.,  966., 1000., 1034., 1068., 1102., 1136.,  554.,  572.,  590.,  608.,  626.,  644.,  662.,  680.,  616.,  632.,  648.,  664.,  680.,  696.,  712.,  728., 1442., 1476., 1510., 1544., 1578., 1612., 1646., 1680., 1714., 1748., 1782., 1816.,  914.,  932.,  950.,  968.,  986., 1004., 1022., 1040.,  947.,  974., 1001., 1028., 1055., 1082., 1109., 1136., 2233., 2290., 2347., 2404., 2461., 2518., 2575., 2632., 2689., 2746., 2803., 2860., 1430., 1460., 1490., 1520., 1550., 1580., 1610., 1640.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   65.,   78.,   91.,  104.,  131.,  158.,  185.,  212.,  239.,  266.,  293.,  320.,  347.,  374.,  401.,  428.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,  725.,  752.,  779.,  806.,  833.,  860.,  887.,  914.,  941.,  968.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,  548.,  576.,  604.,  632.,  660.,  688.,  716.,  744., 1362., 1420., 1478., 1536., 1594., 1652., 1710., 1768., 1826., 1884., 1942., 2000.,  950.,  980., 1010., 1040., 1070., 1100., 1130., 1160., 1108., 1136., 1164., 1192., 1220., 1248., 1276., 1304., 2522., 2580., 2638., 2696., 2754., 2812., 2870., 2928., 2986., 3044., 3102., 3160., 1550., 1580., 1610., 1640., 1670., 1700., 1730., 1760., 1685., 1730., 1775., 1820., 1865., 1910., 1955., 2000., 3853., 3946., 4039., 4132., 4225., 4318., 4411., 4504., 4597., 4690., 4783., 4876., 2384., 2432., 2480., 2528., 2576., 2624., 2672., 2720., 1272., 1304., 1336., 1368., 1400., 1432., 1464., 1496., 2882., 2948., 3014., 3080., 3146., 3212., 3278., 3344., 3410., 3476., 3542., 3608., 1762., 1796., 1830., 1864., 1898., 1932., 1966., 2000., 1912., 1944., 1976., 2008., 2040., 2072., 2104., 2136., 4202., 4268., 4334., 4400., 4466., 4532., 4598., 4664., 4730., 4796., 4862., 4928., 2442., 2476., 2510., 2544., 2578., 2612., 2646., 2680., 1037., 1054., 1071., 1088., 1105., 1122., 1139., 1156., 2271., 2306., 2341., 2376., 2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368., 1386., 1404., 1422., 1440., 1377., 1394., 1411., 1428., 1445., 1462., 1479., 1496., 2971., 3006., 3041., 3076., 3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728., 1746., 1764., 1782., 1800.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  7856.,  8344.,  8832.,  9320.,  9808., 10296., 10784., 11272., 11786., 12542., 13298., 14054., 10472., 10992., 11512., 12032., 12526., 13330., 14134., 14938., 11136., 11688., 12240., 12792.,  9568., 10120., 10672., 11224.,  8384.,  8724.,  9064.,  9404.,  4432.,  4772.,  5112.,  5452.,  9569., 10091., 10613., 11135.,  4636.,  4992.,  5348.,  5704., 10003., 10549., 11095., 11641.,  4840.,  5212.,  5584.,  5956.,  6328.,  6700.,  7072.,  7444.,  6192.,  6936.,  7680.,  8424.,  9168.,  9912., 10656., 11400., 13898., 15038., 16178., 17318.,  9576., 10352., 11128., 11904., 14510., 15698., 16886., 18074.,  9984., 10792., 11600., 12408., 13216., 14024., 14832., 15640., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064., 14352., 15244., 16136., 17028., 17920., 18812., 19704., 20596., 20907., 22281., 23655., 25029., 18724., 19664., 20604., 21544., 21857., 23303., 24749., 26195., 19528., 20516., 21504., 22492., 16632., 17620., 18608., 19596.,  8400.,  8888.,  9376.,  9864.,  2544.,  3032.,  3520.,  4008., 12026., 12782., 13538., 14294.,  2824.,  3344.,  3864.,  4384., 12830., 13634., 14438., 15242.,  3104.,  3656.,  4208.,  4760.,  5312.,  5864.,  6416.,  6968., 10272., 10844., 11416., 11988., 12560., 13132., 13704., 14276., 11843., 12737., 13631., 14525., 13364., 13984., 14604., 15224., 12793., 13759., 14725., 15691., 14168., 14836., 15504., 16172.,  8968.,  9636., 10304., 10972.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,  1424.,  1528.,  1632.,  1736.,  1840.,  1944.,  2048.,  2152.,  2906.,  3086.,  3266.,  3446.,  2504.,  2640.,  2776.,  2912.,  3646.,  3874.,  4102.,  4330.,  3168.,  3336.,  3504.,  3672.,  3136.,  3304.,  3472.,  3640.,  3632.,  3780.,  3928.,  4076.,  1984.,  2132.,  2280.,  2428.,  4361.,  4595.,  4829.,  5063.,  2188.,  2352.,  2516.,  2680.,  4795.,  5053.,  5311.,  5569.,  2392.,  2572.,  2752.,  2932.,  3112.,  3292.,  3472.,  3652.,  2832.,  3192.,  3552.,  3912.,  4272.,  4632.,  4992.,  5352.,  6554.,  7118.,  7682.,  8246.,  4680.,  5072.,  5464.,  5856.,  7166.,  7778.,  8390.,  9002.,  5088.,  5512.,  5936.,  6360.,  6784.,  7208.,  7632.,  8056.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  9440., 10268., 11096., 11924., 12752., 13580., 14408., 15236., 16227., 17505., 18783., 20061., 13556., 14432., 15308., 16184., 17177., 18527., 19877., 21227., 14360., 15284., 16208., 17132., 14280., 15204., 16128., 17052., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048., 12144., 12888., 13632., 14376., 15120., 15864., 16608., 17352., 17706., 18846., 19986., 21126., 15784., 16560., 17336., 18112., 18446., 19634., 20822., 22010., 16448., 17256., 18064., 18872., 13856., 14664., 15472., 16280.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,   822.,   850.,   878.,   906.,   550.,   578.,   606.,   634.,  2136.,  2208.,  2280.,  2352.,  1528.,  1600.,  1672.,  1744.,  1816.,  1888.,  1960.,  2032.,  1106.,  1150.,  1194.,  1238.,  1282.,  1326.,  1370.,  1414.,  1027.,  1093.,  1159.,  1225.,  1291.,  1357.,  1423.,  1489.,  3048.,  3204.,  3360.,  3516.,  3672.,  3828.,  3984.,  4140.,  4296.,  4452.,  4608.,  4764.,  2573.,  2663.,  2753.,  2843.,  2933.,  3023.,  3113.,  3203.,  2126.,  2186.,  2246.,  2306.,   958.,  1018.,  1078.,  1138.,  3976.,  4112.,  4248.,  4384.,  2600.,  2736.,  2872.,  3008.,  3144.,  3280.,  3416.,  3552.,  1770.,  1846.,  1922.,  1998.,  2074.,  2150.,  2226.,  2302.,  1918.,  1978.,  2038.,  2098.,  2158.,  2218.,  2278.,  2338.,  4776.,  4912.,  5048.,  5184.,  5320.,  5456.,  5592.,  5728.,  5864.,  6000.,  6136.,  6272.,  3290.,  3366.,  3442.,  3518.,  3594.,  3670.,  3746.,  3822.,  2309.,  2347.,  2385.,  2423.,    29.,    67.,   105.,   143.,  2976.,  3060.,  3144.,  3228.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,   403.,   449.,   495.,   541.,   587.,   633.,   679.,   725.,   637.,   675.,   713.,   751.,   789.,   827.,   865.,   903.,  1712.,  1796.,  1880.,  1964.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  1323.,  1369.,  1415.,  1461.,  1507.,  1553.,  1599.,  1645.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,  1100.,  1216.,  1332.,  1448.,  1564.,  1680.,  1796.,   791.,   853.,   915.,   977.,  1039.,  1101.,  1163.,  1225.,  1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,  2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  3768.,  3884.,  4000.,  4116.,  2031.,  2093.,  2155.,  2217.,  2279.,  2341.,  2403.,  2465.,  2254.,  2378.,  2502.,  2626.,  2750.,  2874.,  2998.,  3122.,  5832.,  6096.,  6360.,  6624.,  6888.,  7152.,  7416.,  7680.,  7944.,  8208.,  8472.,  8736.,  4266.,  4406.,  4546.,  4686.,  4826.,  4966.,  5106.,  5246.,  4734.,  4858.,  4982.,  5106.,  1774.,  1898.,  2022.,  2146.,  7656.,  7920.,  8184.,  8448.,  4744.,  5008.,  5272.,  5536.,  5800.,  6064.,  6328.,  6592.,  3098.,  3238.,  3378.,  3518.,  3658.,  3798.,  3938.,  4078.,  3823.,  4033.,  4243.,  4453.,  4663.,  4873.,  5083.,  5293.,  9792., 10236., 10680., 11124., 11568., 12012., 12456., 12900., 13344., 13788., 14232., 14676.,  7097.,  7331.,  7565.,  7799.,  8033.,  8267.,  8501.,  8735.,  6038.,  6194.,  6350.,  6506.,  2182.,  2338.,  2494.,  2650.,  9496.,  9824., 10152., 10480.,  5816.,  6144.,  6472.,  6800.,  7128.,  7456.,  7784.,  8112.,  3762.,  3934.,  4106.,  4278.,  4450.,  4622.,  4794.,  4966.,  4678.,  4834.,  4990.,  5146.,  5302.,  5458.,  5614.,  5770., 11064., 11392., 11720., 12048., 12376., 12704., 13032., 13360., 13688., 14016., 14344., 14672.,  7202.,  7374.,  7546.,  7718.,  7890.,  8062.,  8234.,  8406.,  5225.,  5311.,  5397.,  5483.,    65.,   151.,   237.,   323.,  6120.,  6300.,  6480.,  6660.,   824.,  1004.,  1184.,  1364.,  1544.,  1724.,  1904.,  2084.,   823.,   917.,  1011.,  1105.,  1199.,  1293.,  1387.,  1481.,  1441.,  1527.,  1613.,  1699.,  1785.,  1871.,  1957.,  2043.,  3704.,  3884.,  4064.,  4244.,  4424.,  4604.,  4784.,  4964.,  5144.,  5324.,  5504.,  5684.,  2703.,  2797.,  2891.,  2985.,  3079.,  3173.,  3267.,  3361.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   485.,   587.,   689.,   791.,   976.,  1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2672.,  2884.,  3096.,  3308.,  1403.,  1513.,  1623.,  1733.,  1843.,  1953.,  2063.,  2173.,  2117.,  2219.,  2321.,  2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,  6276.,  6488.,  6700.,  6912.,  7124.,  7336.,  7548.,  3603.,  3713.,  3823.,  3933.,  4043.,  4153.,  4263.,  4373.,  4246.,  4466.,  4686.,  4906.,  5126.,  5346.,  5566.,  5786., 10584., 11040., 11496., 11952., 12408., 12864., 13320., 13776., 14232., 14688., 15144., 15600.,  7410.,  7646.,  7882.,  8118.,  8354.,  8590.,  8826.,  9062.,  8646.,  8866.,  9086.,  9306.,  2998.,  3218.,  3438.,  3658., 13176., 13632., 14088., 14544.,  7960.,  8416.,  8872.,  9328.,  9784., 10240., 10696., 11152.,  5090.,  5326.,  5562.,  5798.,  6034.,  6270.,  6506.,  6742.,  6619.,  6973.,  7327.,  7681.,  8035.,  8389.,  8743.,  9097., 16536., 17268., 18000., 18732., 19464., 20196., 20928., 21660., 22392., 23124., 23856., 24588., 11621., 11999., 12377., 12755., 13133., 13511., 13889., 14267.,  9950., 10202., 10454., 10706.,  3406.,  3658.,  3910.,  4162., 15016., 15536., 16056., 16576.,  9032.,  9552., 10072., 10592., 11112., 11632., 12152., 12672.,  5754.,  6022.,  6290.,  6558.,  6826.,  7094.,  7362.,  7630.,  7438.,  7690.,  7942.,  8194.,  8446.,  8698.,  8950.,  9202., 17352., 17872., 18392., 18912., 19432., 19952., 20472., 20992., 21512., 22032., 22552., 23072., 11114., 11382., 11650., 11918., 12186., 12454., 12722., 12990.,  8141.,  8275.,  8409.,  8543.,   101.,   235.,   369.,   503.,  9264.,  9540.,  9816., 10092.,  1280.,  1556.,  1832.,  2108.,  2384.,  2660.,  2936.,  3212.,  1243.,  1385.,  1527.,  1669.,  1811.,  1953.,  2095.,  2237.,  2245.,  2379.,  2513.,  2647.,  2781.,  2915.,  3049.,  3183.,  5696.,  5972.,  6248.,  6524.,  6800.,  7076.,  7352.,  7628.,  7904.,  8180.,  8456.,  8732.,  4083.,  4225.,  4367.,  4509.,  4651.,  4793.,  4935.,  5077.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  5898.,  7170.,  8442.,  9714.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   140.,   348.,   556.,   764.,   972.,  1180.,  1388.,  1596.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  1564.,  1900.,  2236.,  2572.,   220.,   556.,   892.,  1228.,   972.,  1180.,  1388.,  1596.,   140.,   348.,   556.,   764.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   220.,   556.,   892.,  1228.,  1564.,  1900.,  2236.,  2572.,   330.,   834.,  1338.,  1842.,  2346.,  2850.,  3354.,  3858.,   780.,  1980.,  3180.,  4380.,  5580.,  6780.,  7980.,  9180.,   780.,  1980.,  3180.,  4380.,  3234.,  3930.,  4626.,  5322.,   450.,  1146.,  1842.,  2538.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  2262.,  2750.,  3238.,  3726.,   310.,   798.,  1286.,  1774.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   310.,   798.,  1286.,  1774.,  2262.,  2750.,  3238.,  3726.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,   410.,  1042.,  1674.,  2306.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,  3826.,  4650.,  5474.,  6298.,   530.,  1354.,  2178.,  3002.,   972.,  1180.,  1388.,  1596.,   140.,   348.,   556.,   764.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   220.,   556.,   892.,  1228.,  1564.,  1900.,  2236.,  2572.,   140.,   348.,   556.,   764.,   972.,  1180.,  1388.,  1596.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  1564.,  1900.,  2236.,  2572.,   220.,   556.,   892.,  1228.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,   460.,  1180.,  1900.,  2620.,  3340.,  4060.,  4780.,  5500.,  1000.,  2568.,  4136.,  5704.,  7272.,  8840., 10408., 11976.,  1000.,  2568.,  4136.,  5704.,  3932.,  4780.,  5628.,  6476.,   540.,  1388.,  2236.,  3084.,  3340.,  4060.,  4780.,  5500.,   460.,  1180.,  1900.,  2620.,  7272.,  8840., 10408., 11976.,  1000.,  2568.,  4136.,  5704.,  7272.,  8840., 10408., 11976.,   540.,  1388.,  2236.,  3084.,  3932.,  4780.,  5628.,  6476.,   490.,  1250.,  2010.,  2770.,  3530.,  4290.,  5050.,  5810.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  4418.,  5370.,  6322.,  7274.,   610.,  1562.,  2514.,  3466.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,   70.,  124.,  102.,  172.,  134.,  156.,   52.,  126.,  140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  244.,  521.,  578.,  918.,  656., 1035.,  734.,  803.,  244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  388.,  809.,  890., 1386.,  968., 1503., 1046., 1139.,  340.,  702.,  764., 1180.,  816., 1258.,  868.,  938.,  490., 1012., 1074., 1660., 1146., 1768., 1218., 1288.,  147.,  300.,  343.,  524.,  359.,  548.,  375.,  422.,  302.,  616.,  710., 1084.,  742., 1132.,  774.,  876.,  532., 1086., 1180., 1804., 1232., 1882., 1284., 1386.,  820., 1673., 1826., 2790., 1904., 2907., 1982., 2147.,  628., 1278., 1388., 2116., 1440., 2194., 1492., 1610.,  964., 1961., 2138., 3258., 2216., 3375., 2294., 2483.,  724., 1470., 1596., 2428., 1648., 2506., 1700., 1834., 1108., 2249., 2450., 3726., 2528., 3843., 2606., 2819.,  820., 1662., 1804., 2740., 1856., 2818., 1908., 2058., 1170., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,  287.,  580.,  663., 1004.,  679., 1028.,  695.,  782.,  582., 1176., 1350., 2044., 1382., 2092., 1414., 1596., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506., 1540., 3113., 3386., 5130., 3464., 5247., 3542., 3827., 1108., 2238., 2428., 3676., 2480., 3754., 2532., 2730., 1684., 3401., 3698., 5598., 3776., 5715., 3854., 4163., 1204., 2430., 2636., 3988., 2688., 4066., 2740., 2954., 1828., 3689., 4010., 6066., 4088., 6183., 4166., 4499., 1300., 2622., 2844., 4300., 2896., 4378., 2948., 3178., 1850., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,    8.,   10.,    0.,    6.,    7.,   20.,   23.,   26.,   18.,   20.,    0.,   14.,   18.,   48.,   58.,   68.,   44.,   50.,    0.,   34.,   38.,   98.,  108.,  118.,   74.,   80.,    0.,   59.,   68.,  169.,  190.,  211.,  128.,  140.,    0.,   78.,   86.,  194.,  212.,  230.,  130.,  140.,    0.,  118.,  126.,  284.,  302.,  320.,  180.,  190.,    0.,   80.,   85.,  186.,  197.,  208.,  114.,  120.,    0.,  105.,  110.,  241.,  252.,  263.,  144.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   29.,   44.,   59.,   32.,   40.,    0.,   42.,   49.,  104.,  119.,  134.,   72.,   80.,    0.,   86.,  102.,  216.,  250.,  284.,  152.,  170.,    0.,  166.,  182.,  386.,  420.,  454.,  242.,  260.,    0.,  257.,  284.,  601.,  658.,  715.,  380.,  410.,    0.,  210.,  230.,  482.,  524.,  566.,  298.,  320.,    0.,  310.,  330.,  692.,  734.,  776.,  408.,  430.,    0.,  176.,  187.,  390.,  413.,  436.,  228.,  240.,    0.,  231.,  242.,  505.,  528.,  551.,  288.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   53.,   80.,  107.,   56.,   70.,    0.,   78.,   91.,  188.,  215.,  242.,  126.,  140.,    0.,  158.,  186.,  384.,  442.,  500.,  260.,  290.,    0.,  298.,  326.,  674.,  732.,  790.,  410.,  440.,    0.,  455.,  500., 1033., 1126., 1219.,  632.,  680.,    0.,  342.,  374.,  770.,  836.,  902.,  466.,  500.,    0.,  502.,  534., 1100., 1166., 1232.,  636.,  670.,    0.,  272.,  289.,  594.,  629.,  664.,  342.,  360.,    0.,  357.,  374.,  769.,  804.,  839.,  432.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,   368.,   472.,   854.,   720.,  1226.,   968.,  1136.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   701.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2957.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  3794.,  7840.,  8328., 12878.,  8896., 13730.,  9464., 10016.,  1121.,  2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  3248.,  2298.,  4688.,  5432.,  8294.,  5680.,  8666.,  5928.,  6736.,  4118.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776.,  6341., 12940., 14152., 21627., 14764., 22545., 15376., 16684.,  4870.,  9912., 10784., 16442., 11192., 17054., 11600., 12536.,  7021., 14300., 15192., 23187., 15804., 24105., 16416., 17404.,  3894.,  7960.,  8448., 12938.,  8856., 13550.,  9264.,  9816.,  5141., 10540., 11112., 17067., 11724., 17985., 12336., 13004.,   358.,   888.,   992.,  1754.,  1400.,  2366.,  1808.,  1976.,   578.,  1408.,  1512.,  2654.,  2080.,  3506.,  2648.,  2816.,   473.,   992.,  1140.,  1783.,  1264.,  1969.,  1388.,  1568.,  1002.,  2096.,  2456.,  3830.,  2704.,  4202.,  2952.,  3376.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  2957.,  6172.,  6808., 10611.,  7420., 11529.,  8032.,  8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,  4085.,  8428.,  9256., 14283.,  9868., 15201., 10480., 11404.,  3366.,  6904.,  7520., 11546.,  7928., 12158.,  8336.,  9016.,  5213., 10684., 11704., 17955., 12316., 18873., 12928., 14044.,  4118.,  8408.,  9152., 13994.,  9560., 14606.,  9968., 10776.,  5938., 12128., 12872., 19694., 13440., 20546., 14008., 14816.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   53.,   67.,    0.,   35.,   41.,  128.,  148.,  168.,  123.,  137.,    0.,   82.,  110.,  312.,  384.,  456.,  306.,  350.,    0.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,    0.,  391.,  457., 1172., 1328., 1484.,  919., 1009.,    0.,  566.,  626., 1424., 1560., 1696.,  966., 1042.,    0.,  866.,  926., 2104., 2240., 2376., 1346., 1422.,    0.,  599.,  637., 1400., 1484., 1568.,  863.,  909.,    0.,  789.,  827., 1820., 1904., 1988., 1093., 1139.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   41.,   95.,  196.,  312.,  428.,  233.,  295.,    0.,  311.,  365.,  776.,  892., 1008.,  543.,  605.,    0.,  634.,  758., 1608., 1872., 2136., 1146., 1286.,    0., 1254., 1378., 2928., 3192., 3456., 1846., 1986.,    0., 1939., 2149., 4556., 5000., 5444., 2899., 3133.,    0., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,    0., 2378., 2534., 5320., 5648., 5976., 3146., 3318.,    0., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,    0., 1785., 1871., 3908., 4088., 4268., 2233., 2327.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   77.,  179.,  364.,  576.,  788.,  413.,  523.,    0.,  587.,  689., 1424., 1636., 1848.,  963., 1073.,    0., 1186., 1406., 2904., 3360., 3816., 1986., 2222.,    0., 2286., 2506., 5184., 5640., 6096., 3166., 3402.,    0., 3487., 3841., 7940., 8672., 9404., 4879., 5257.,    0., 2630., 2882., 5936., 6456., 6976., 3606., 3874.,    0., 3890., 4142., 8536., 9056., 9576., 4946., 5214.,    0., 2111., 2245., 4616., 4892., 5168., 2663., 2805.,    0., 2781., 2915., 5996., 6272., 6548., 3373., 3515.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  1820.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.,  1966.,  4292.,  2580.,  5626.,  3044.,  6578.,  3508.,  4420.,  1148.,  2504.,  3304.,  5332.,  4232.,  6724.,  5160.,  6472.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1308.,  3080.,  3880.,  6260.,  5320.,  7908.,  6760.,  6728.,   270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  2052.,   636.,  1480.,  2280.,  3796.,  3208.,  5188.,  4136.,  5448.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  2306.,  5116.,  6572.,  8342.,  8348., 10494., 10124.,  8956.,  1996.,  5160.,  2760.,  7236.,  3432.,  9012.,  4104.,  5416.,  1378.,  3260.,  4204.,  6838.,  5980.,  8990.,  7756.,  8124.,   460.,  4136.,  1736.,  6724.,  2408.,  8500.,  3080.,  4392.,  1820.,  4104.,  4904.,  5748.,  6344.,  7396.,  7784.,  5704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  382.,  486.,    0.,  230.,  270.,  900.,  724.,  868.,   70.,  174.,    0.,  220.,  428., 1064., 1608., 2152., 1436., 1772.,    0., 1260., 1148., 3464., 1832., 2376.,  428.,  764.,    0.,  826., 1330., 3164., 4364., 5244., 3418., 3282.,    0., 2956., 2076., 6344., 3176., 4232.,  844., 1436.,    0., 1564., 2028., 4520., 5576., 5288., 3804., 2540.,    0., 2262.,  190., 3236., 1012., 1668.,  950., 1310.,    0., 1374., 1670., 3636., 4292., 2580., 2750.,  230.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1428., 2340., 3252., 1774., 2262.,    0., 2390., 2814., 5988., 3508., 4420.,  310.,  798.,    0., 1148., 1612., 3432., 4488., 5544., 3132., 3724.,    0., 3468.,  540., 5320., 2152., 3208., 1356., 1948.,    0., 2186., 2818., 6140., 7596., 5660., 5162., 2082.,    0., 1260., 1148., 3464., 1832., 2376.,  428.,  764.,    0.,  636.,  844., 2152., 2696., 2920., 2108., 1612.,    0., 1286.,  110., 2052.,  596.,  996.,  614.,  846.,    0.,  782.,  950., 2196., 2596., 1652., 1774.,  150.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486., 1012., 1668., 2324., 1310., 1670.,    0., 1670., 1966., 4292., 2580., 3236.,  230.,  590.,    0., 1052., 1772., 3752., 5320., 6888., 3804., 4652.,    0., 4652., 3004., 9224., 4520., 6088., 1260., 2108.,    0., 2522., 3282., 7068., 8780., 8124., 5882., 3954.,    0., 3468.,  540., 5320., 2152., 3208., 1356., 1948.,    0., 2076., 2540., 5544., 6600., 4264., 4316., 1004.,    0.,  310.,   30.,  868.,  180.,  324.,  278.,  382.,    0.,  190.,  230.,  756.,  900.,  724.,  798.,   70.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   13.,    14.,    37.,    40.,    43.,    46.,    82.,    88.,    73.,    78.,   127.,   136.,   103.,   110.,   117.,   124.,    38.,    44.,    98.,   112.,   126.,   140.,   224.,   248.,   186.,   204.,   314.,   344.,   246.,   268.,   290.,   312.,    98.,   104.,   238.,   252.,   266.,   280.,   464.,   488.,   366.,   384.,   614.,   644.,   466.,   488.,   510.,   532.,   185.,   200.,   433.,   466.,   499.,   532.,   846.,   900.,   649.,   688.,  1071.,  1134.,   799.,   844.,   889.,   934.,   282.,   296.,   606.,   636.,   666.,   696.,  1064.,  1112.,   766.,   800.,  1214.,  1268.,   866.,   904.,   942.,   980.,   461.,   488.,   985.,  1042.,  1099.,  1156.,  1746.,  1836.,  1249.,  1312.,  1971.,  2070.,  1399.,  1468.,  1537.,  1606.,   466.,   488.,   974.,  1020.,  1066.,  1112.,  1664.,  1736.,  1166.,  1216.,  1814.,  1892.,  1266.,  1320.,  1374.,  1428.,   737.,   776.,  1537.,  1618.,  1699.,  1780.,  2646.,  2772.,  1849.,  1936.,  2871.,  3006.,  1999.,  2092.,  2185.,  2278.,   650.,   680.,  1342.,  1404.,  1466.,  1528.,  2264.,  2360.,  1566.,  1632.,  2414.,  2516.,  1666.,  1736.,  1806.,  1876.,   950.,   980.,  1962.,  2024.,  2086.,  2148.,  3224.,  3320.,  2226.,  2292.,  3434.,  3536.,  2366.,  2436.,  2506.,  2576.,   273.,   294.,   557.,   600.,   643.,   686.,   982.,  1048.,   673.,   718.,  1027.,  1096.,   703.,   750.,   797.,   844.,   558.,   604.,  1138.,  1232.,  1326.,  1420.,  2024.,  2168.,  1386.,  1484.,  2114.,  2264.,  1446.,  1548.,  1650.,  1752.,  1018.,  1064.,  2078.,  2172.,  2266.,  2360.,  3464.,  3608.,  2366.,  2464.,  3614.,  3764.,  2466.,  2568.,  2670.,  2772.,  1565.,  1640.,  3193.,  3346.,  3499.,  3652.,  5346.,  5580.,  3649.,  3808.,  5571.,  5814.,  3799.,  3964.,  4129.,  4294.,  1202.,  1256.,  2446.,  2556.,  2666.,  2776.,  4064.,  4232.,  2766.,  2880.,  4214.,  4388.,  2866.,  2984.,  3102.,  3220.,  1841.,  1928.,  3745.,  3922.,  4099.,  4276.,  6246.,  6516.,  4249.,  4432.,  6471.,  6750.,  4399.,  4588.,  4777.,  4966.,  1386.,  1448.,  2814.,  2940.,  3066.,  3192.,  4664.,  4856.,  3166.,  3296.,  4814.,  5012.,  3266.,  3400.,  3534.,  3668.,  2117.,  2216.,  4297.,  4498.,  4699.,  4900.,  7146.,  7452.,  4849.,  5056.,  7371.,  7686.,  4999.,  5212.,  5425.,  5638.,  1570.,  1640.,  3182.,  3324.,  3466.,  3608.,  5264.,  5480.,  3566.,  3712.,  5414.,  5636.,  3666.,  3816.,  3966.,  4116.,  2270.,  2340.,  4602.,  4744.,  4886.,  5028.,  7424.,  7640.,  5026.,  5172.,  7634.,  7856.,  5166.,  5316.,  5466.,  5616.,   533.,   574.,  1077.,  1160.,  1243.,  1326.,  1882.,  2008.,  1273.,  1358.,  1927.,  2056.,  1303.,  1390.,  1477.,  1564.,  1078.,  1164.,  2178.,  2352.,  2526.,  2700.,  3824.,  4088.,  2586.,  2764.,  3914.,  4184.,  2646.,  2828.,  3010.,  3192.,  1938.,  2024.,  3918.,  4092.,  4266.,  4440.,  6464.,  6728.,  4366.,  4544.,  6614.,  6884.,  4466.,  4648.,  4830.,  5012.,  2945.,  3080.,  5953.,  6226.,  6499.,  6772.,  9846., 10260.,  6649.,  6928., 10071., 10494.,  6799.,  7084.,  7369.,  7654.,  2122.,  2216.,  4286.,  4476.,  4666.,  4856.,  7064.,  7352.,  4766.,  4960.,  7214.,  7508.,  4866.,  5064.,  5262.,  5460.,  3221.,  3368.,  6505.,  6802.,  7099.,  7396., 10746., 11196.,  7249.,  7552., 10971., 11430.,  7399.,  7708.,  8017.,  8326.,  2306.,  2408.,  4654.,  4860.,  5066.,  5272.,  7664.,  7976.,  5166.,  5376.,  7814.,  8132.,  5266.,  5480.,  5694.,  5908.,  3497.,  3656.,  7057.,  7378.,  7699.,  8020., 11646., 12132.,  7849.,  8176., 11871., 12366.,  7999.,  8332.,  8665.,  8998.,  2490.,  2600.,  5022.,  5244.,  5466.,  5688.,  8264.,  8600.,  5566.,  5792.,  8414.,  8756.,  5666.,  5896.,  6126.,  6356.,  3590.,  3700.,  7242.,  7464.,  7686.,  7908., 11624., 11960.,  7826.,  8052., 11834., 12176.,  7966.,  8196.,  8426.,  8656.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   14.,   16.,   18.,   20.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,    0.,    0.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,   82.,   88.,   94.,  100.,    0.,    0.,   64.,   68.,   72.,   76.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,    0.,    0.,  109.,  118.,  127.,  136.,  317.,  338.,  359.,  380.,  401.,  422.,  244.,  256.,  268.,  280.,    0.,    0.,  148.,  156.,  164.,  172.,  370.,  388.,  406.,  424.,  442.,  460.,  250.,  260.,  270.,  280.,    0.,    0.,  228.,  236.,  244.,  252.,  550.,  568.,  586.,  604.,  622.,  640.,  350.,  360.,  370.,  380.,    0.,    0.,  155.,  160.,  165.,  170.,  361.,  372.,  383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,    0.,    0.,  205.,  210.,  215.,  220.,  471.,  482.,  493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  103.,  118.,   56.,   64.,   72.,   80.,    0.,    0.,   77.,   84.,   91.,   98.,  193.,  208.,  223.,  238.,  253.,  268.,  136.,  144.,  152.,  160.,    0.,    0.,  156.,  172.,  188.,  204.,  398.,  432.,  466.,  500.,  534.,  568.,  286.,  304.,  322.,  340.,    0.,    0.,  316.,  332.,  348.,  364.,  738.,  772.,  806.,  840.,  874.,  908.,  466.,  484.,  502.,  520.,    0.,    0.,  487.,  514.,  541.,  568., 1145., 1202., 1259., 1316., 1373., 1430.,  730.,  760.,  790.,  820.,    0.,    0.,  400.,  420.,  440.,  460.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,    0.,    0.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552.,  794.,  816.,  838.,  860.,    0.,    0.,  341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,    0.,    0.,  451.,  462.,  473.,  484.,  987., 1010., 1033., 1056., 1079., 1102.,  564.,  576.,  588.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  187.,  214.,   98.,  112.,  126.,  140.,    0.,    0.,  143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  457.,  484.,  238.,  252.,  266.,  280.,    0.,    0.,  288.,  316.,  344.,  372.,  710.,  768.,  826.,  884.,  942., 1000.,  490.,  520.,  550.,  580.,    0.,    0.,  568.,  596.,  624.,  652., 1290., 1348., 1406., 1464., 1522., 1580.,  790.,  820.,  850.,  880.,    0.,    0.,  865.,  910.,  955., 1000., 1973., 2066., 2159., 2252., 2345., 2438., 1216., 1264., 1312., 1360.,    0.,    0.,  652.,  684.,  716.,  748., 1474., 1540., 1606., 1672., 1738., 1804.,  898.,  932.,  966., 1000.,    0.,    0.,  972., 1004., 1036., 1068., 2134., 2200., 2266., 2332., 2398., 2464., 1238., 1272., 1306., 1340.,    0.,    0.,  527.,  544.,  561.,  578., 1153., 1188., 1223., 1258., 1293., 1328.,  666.,  684.,  702.,  720.,    0.,    0.,  697.,  714.,  731.,  748., 1503., 1538., 1573., 1608., 1643., 1678.,  846.,  864.,  882.,  900.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  3668.,  3968.,  5889.,  6375.,  4344.,  4692.,  5040.,  5388.,   922.,  1030.,  3392.,  3624.,  2384.,  2616.,  5434.,  5806.,  2664.,  2928.,  6110.,  6530.,  2944.,  3240.,  3536.,  3832.,  2283.,  2493.,  4808.,  5252.,  5696.,  6140.,  8931.,  9633.,  6372.,  6864.,  9945., 10719.,  7048.,  7588.,  8128.,  8668.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3443.,  3749.,  7128.,  7764.,  8400.,  9036., 12987., 13977.,  9076.,  9760., 14001., 15063.,  9752., 10484., 11216., 11948.,  1786.,  2022.,  7168.,  7656.,  4624.,  5112., 10842., 11598.,  4904.,  5424., 11518., 12322.,  5184.,  5736.,  6288.,  6840.,  4146.,  4382.,  8528.,  9016.,  9504.,  9992., 14626., 15382., 10104., 10624., 15526., 16330., 10704., 11256., 11808., 12360.,  2117.,  2283.,  4320.,  4660.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  7991.,  8537.,  5472.,  5844.,  6216.,  6588.,  4322.,  4686.,  8816.,  9560., 10304., 11048., 15730., 16870., 10776., 11552., 16438., 17626., 11248., 12056., 12864., 13672.,  2650.,  3014., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848.,  6923.,  7517., 14088., 15300., 16512., 17724., 25155., 27009., 17188., 18448., 26169., 28095., 17864., 19172., 20480., 21788.,  3082.,  3510., 12832., 13704.,  7984.,  8856., 18954., 20286.,  8264.,  9168., 19630., 21010.,  8544.,  9480., 10416., 11352.,  7379.,  7813., 15000., 15892., 16784., 17676., 25563., 26937., 17460., 18400., 26577., 28023., 18136., 19124., 20112., 21100.,   250.,   486.,  8192.,  8680.,  1552.,  2040., 10330., 11086.,  1832.,  2352., 11006., 11810.,  2112.,  2664.,  3216.,  3768.,  2715.,  2989.,  5672.,  6244.,  6816.,  7388., 10611., 11505.,  7492.,  8112., 11625., 12591.,  8168.,  8836.,  9504., 10172.,   490.,   534.,  1504.,  1608.,  1264.,  1368.,  2730.,  2910.,  1544.,  1680.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,   930.,   974.,  2096.,  2200.,  2304.,  2408.,  3826.,  4006.,  2904.,  3040.,  4726.,  4954.,  3504.,  3672.,  3840.,  4008.,   893.,   963.,  1872.,  2020.,  2168.,  2316.,  3389.,  3623.,  2404.,  2568.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,  1874.,  2046.,  3920.,  4280.,  4640.,  5000.,  7234.,  7798.,  5112.,  5504.,  7942.,  8554.,  5584.,  6008.,  6432.,  6856.,  1354.,  1526.,  5280.,  5640.,  3504.,  3864.,  8138.,  8702.,  3784.,  4176.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  3443.,  3749.,  7128.,  7764.,  8400.,  9036., 12987., 13977.,  9076.,  9760., 14001., 15063.,  9752., 10484., 11216., 11948.,  1786.,  2022.,  7168.,  7656.,  4624.,  5112., 10842., 11598.,  4904.,  5424., 11518., 12322.,  5184.,  5736.,  6288.,  6840.,  4603.,  5005.,  9448., 10276., 11104., 11932., 17043., 18321., 11780., 12656., 18057., 19407., 12456., 13380., 14304., 15228.,  2218.,  2518.,  9056.,  9672.,  5744.,  6360., 13546., 14494.,  6024.,  6672., 14222., 15218.,  6304.,  6984.,  7664.,  8344.,  5763.,  6261., 11768., 12788., 13808., 14828., 21099., 22665., 14484., 15552., 22113., 23751., 15160., 16276., 17392., 18508.,  2650.,  3014., 10944., 11688.,  6864.,  7608., 16250., 17390.,  7144.,  7920., 16926., 18114.,  7424.,  8232.,  9040.,  9848.,  6290.,  6654., 12816., 13560., 14304., 15048., 21826., 22966., 14904., 15680., 22726., 23914., 15504., 16312., 17120., 17928.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,    95.,   109.,   123.,   137.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,     0.,     0.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,   710.,     0.,     0.,   422.,   450.,   478.,   506.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,     0.,     0.,   731.,   797.,   863.,   929.,  2224.,  2380.,  2536.,  2692.,  2848.,  3004.,  1769.,  1859.,  1949.,  2039.,     0.,     0.,  1086.,  1146.,  1206.,  1266.,  2744.,  2880.,  3016.,  3152.,  3288.,  3424.,  1874.,  1950.,  2026.,  2102.,     0.,     0.,  1686.,  1746.,  1806.,  1866.,  4104.,  4240.,  4376.,  4512.,  4648.,  4784.,  2634.,  2710.,  2786.,  2862.,     0.,     0.,  1169.,  1207.,  1245.,  1283.,  2736.,  2820.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,  1829.,     0.,     0.,  1549.,  1587.,  1625.,  1663.,  3576.,  3660.,  3744.,  3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   768.,   884.,   419.,   481.,   543.,   605.,     0.,     0.,   581.,   635.,   689.,   743.,  1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  1039.,  1101.,  1163.,  1225.,     0.,     0.,  1174.,  1298.,  1422.,  1546.,  3016.,  3280.,  3544.,  3808.,  4072.,  4336.,  2186.,  2326.,  2466.,  2606.,     0.,     0.,  2414.,  2538.,  2662.,  2786.,  5656.,  5920.,  6184.,  6448.,  6712.,  6976.,  3586.,  3726.,  3866.,  4006.,     0.,     0.,  3719.,  3929.,  4139.,  4349.,  8776.,  9220.,  9664., 10108., 10552., 10996.,  5621.,  5855.,  6089.,  6323.,     0.,     0.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,     0.,     0.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032.,  6162.,  6334.,  6506.,  6678.,     0.,     0.,  2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,     0.,     0.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1416.,  1628.,   743.,   853.,   963.,  1073.,     0.,     0.,  1097.,  1199.,  1301.,  1403.,  2688.,  2900.,  3112.,  3324.,  3536.,  3748.,  1843.,  1953.,  2063.,  2173.,     0.,     0.,  2206.,  2426.,  2646.,  2866.,  5464.,  5920.,  6376.,  6832.,  7288.,  7744.,  3794.,  4030.,  4266.,  4502.,     0.,     0.,  4406.,  4626.,  4846.,  5066., 10024., 10480., 10936., 11392., 11848., 12304.,  6154.,  6390.,  6626.,  6862.,     0.,     0.,  6707.,  7061.,  7415.,  7769., 15328., 16060., 16792., 17524., 18256., 18988.,  9473.,  9851., 10229., 10607.,     0.,     0.,  5070.,  5322.,  5574.,  5826., 11480., 12000., 12520., 13040., 13560., 14080.,  7010.,  7278.,  7546.,  7814.,     0.,     0.,  7590.,  7842.,  8094.,  8346., 16680., 17200., 17720., 18240., 18760., 19280.,  9690.,  9958., 10226., 10494.,     0.,     0.,  4121.,  4255.,  4389.,  4523.,  9024.,  9300.,  9576.,  9852., 10128., 10404.,  5219.,  5361.,  5503.,  5645.,     0.,     0.,  5461.,  5595.,  5729.,  5863., 11784., 12060., 12336., 12612., 12888., 13164.,  6639.,  6781.,  6923.,  7065.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1374.,  1670.,  2916.,  3572.,  1860.,  2516.,  4290.,  5370.,  2196.,  2980.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  4904.,  5960.,  5204.,  6980.,  6088.,  7400.,  3464.,  4776.,   190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6686.,  9734., 10188., 12412.,  5996.,  8220.,  1404.,  1740.,  3720.,  4520.,  2120.,  2920.,  5956.,  7348.,  2792.,  3848.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   380.,   716.,  3720.,  4520.,  2120.,  2920.,  6980.,  8372.,  2792.,  3848.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  4904.,  5960.,  4180.,  5956.,  6088.,  7400.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,    0.,    0.,  110.,  150.,  190.,  230.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.,    0.,    0.,  300.,  508.,  716.,  924., 1448., 1992., 2536., 3080., 1448., 1992., 1820., 2156.,  636.,  972.,    0.,    0.,  716.,  924.,  812., 1020., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644.,    0.,    0., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 3698., 4394., 1378., 2074.,    0.,    0., 1900., 2364., 1484., 1948., 4904., 5960., 2792., 3848., 4904., 5960., 1308., 1900., 2492., 3084.,    0.,    0., 1484., 1948., 2412., 2876., 2792., 3848., 4904., 5960., 2792., 3848., 2492., 3084., 1820., 2412.,    0.,    0., 1966., 2262.,  190.,  486., 3172., 3828., 1604., 2260., 2916., 3572., 1670., 2030., 2390., 2750.,    0.,    0.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2532., 3444., 3238., 3726.,  310.,  798.,    0.,    0., 1118., 1542., 1966., 2390., 4100., 5012., 2532., 3444., 4356., 5268.,  310.,  798., 1286., 1774.,    0.,    0., 1996., 2460., 2924., 3388., 2792., 3848., 4904., 5960., 2792., 3848., 1980., 2572., 2332., 2924.,    0.,    0., 2924., 3388.,  460.,  924., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,    0.,    0.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 5058., 5882.,  946., 1770.,    0.,    0.,  716.,  924.,  812., 1020., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644.,    0.,    0.,  812., 1020., 1228., 1436., 1448., 1992., 2536., 3080., 1448., 1992., 1308., 1644., 1148., 1484.,    0.,    0., 1118., 1286.,  110.,  278., 1988., 2388.,  932., 1332., 1732., 2132., 1078., 1310., 1542., 1774.,    0.,    0.,  110.,  278.,  446.,  614.,  932., 1332., 1732., 2132., 1188., 1588., 1542., 1774.,  150.,  382.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 2390., 2750.,  230.,  590.,    0.,    0.,  782., 1078., 1374., 1670., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310.,    0.,    0., 1644., 2364., 3084., 3804., 4136., 5704., 7272., 8840., 4136., 5704., 4188., 5036., 1980., 2828.,    0.,    0., 3084., 3804., 2156., 2876., 7272., 8840., 4136., 5704., 7272., 8840., 1980., 2828., 3676., 4524.,    0.,    0., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 4370., 5322., 2562., 3514.,    0.,    0., 2924., 3388.,  460.,  924., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,    0.,    0.,  460.,  924., 1388., 1852., 2792., 3848., 4904., 5960., 2792., 3848., 3516., 4108.,  796., 1388.,    0.,    0.,  270.,  310.,   30.,   70.,  804.,  948.,  260.,  404.,  548.,  692.,  486.,  590.,  694.,  798.,    0.,    0.,   30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  694.,  798.,   70.,  174.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,   248.,    70.,    76.,    82.,    88.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,   624.,   190.,   196.,   202.,   208.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,  1198.,  1228.,  1258.,  1288.,   910.,   932.,   954.,   976.,   998.,  1020.,  1042.,  1064.,   355.,   370.,   385.,   400.,   833.,   866.,   899.,   932.,   965.,   998.,  1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,  1823.,  1868.,   550.,   564.,   578.,   592.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,   895.,   922.,   949.,   976.,  1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,   910.,   932.,   954.,   976.,  1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  1435.,  1474.,  1513.,  1552.,  2993.,  3074.,  3155.,  3236.,  3317.,  3398.,  3479.,  3560.,  5166.,  5292.,  5418.,  5544.,  3611.,  3698.,  3785.,  3872.,  5607.,  5742.,  5877.,  6012.,  3905.,  3998.,  4091.,  4184.,  4277.,  4370.,  4463.,  4556.,  1270.,  1300.,  1330.,  1360.,  2622.,  2684.,  2746.,  2808.,  2870.,  2932.,  2994.,  3056.,  4432.,  4528.,  4624.,  4720.,  3066.,  3132.,  3198.,  3264.,  4726.,  4828.,  4930.,  5032.,  3262.,  3332.,  3402.,  3472.,  3542.,  3612.,  3682.,  3752.,  1870.,  1900.,  1930.,  1960.,  3862.,  3924.,  3986.,  4048.,  4110.,  4172.,  4234.,  4296.,  6352.,  6448.,  6544.,  6640.,  4386.,  4452.,  4518.,  4584.,  6766.,  6868.,  6970.,  7072.,  4662.,  4732.,  4802.,  4872.,  4942.,  5012.,  5082.,  5152.,   525.,   546.,   567.,   588.,  1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,  1898.,  1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,  2054.,  2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  1547.,  1594.,  1641.,  1688.,  1070.,  1116.,  1162.,  1208.,  2182.,  2276.,  2370.,  2464.,  2558.,  2652.,  2746.,  2840.,  3904.,  4048.,  4192.,  4336.,  2674.,  2772.,  2870.,  2968.,  4078.,  4228.,  4378.,  4528.,  2790.,  2892.,  2994.,  3096.,  3198.,  3300.,  3402.,  3504.,  1990.,  2036.,  2082.,  2128.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,  5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,  7304., 10458., 10692., 10926., 11160.,  7139.,  7298.,  7457.,  7616., 10899., 11142., 11385., 11628.,  7433.,  7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,  2458.,  2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  3595.,  3682.,  3769.,  3856.,  7313.,  7490.,  7667.,  7844.,  8021.,  8198.,  8375.,  8552., 12222., 12492., 12762., 13032.,  8315.,  8498.,  8681.,  8864., 12663., 12942., 13221., 13500.,  8609.,  8798.,  8987.,  9176.,  9365.,  9554.,  9743.,  9932.,  2710.,  2772.,  2834.,  2896.,  5502.,  5628.,  5754.,  5880.,  6006.,  6132.,  6258.,  6384.,  9136.,  9328.,  9520.,  9712.,  6202.,  6332.,  6462.,  6592.,  9430.,  9628.,  9826., 10024.,  6398.,  6532.,  6666.,  6800.,  6934.,  7068.,  7202.,  7336.,  4135.,  4234.,  4333.,  4432.,  8393.,  8594.,  8795.,  8996.,  9197.,  9398.,  9599.,  9800., 13986., 14292., 14598., 14904.,  9491.,  9698.,  9905., 10112., 14427., 14742., 15057., 15372.,  9785.,  9998., 10211., 10424., 10637., 10850., 11063., 11276.,  3070.,  3140.,  3210.,  3280.,  6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216., 10312., 10528., 10744., 10960.,  6986.,  7132.,  7278.,  7424., 10606., 10828., 11050., 11272.,  7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  4470.,  4540.,  4610.,  4680.,  9062.,  9204.,  9346.,  9488.,  9630.,  9772.,  9914., 10056., 14632., 14848., 15064., 15280.,  9906., 10052., 10198., 10344., 15046., 15268., 15490., 15712., 10182., 10332., 10482., 10632., 10782., 10932., 11082., 11232.,  1025.,  1066.,  1107.,  1148.,  2071.,  2154.,  2237.,  2320.,  2403.,  2486.,  2569.,  2652.,  3638.,  3764.,  3890.,  4016.,  2461.,  2546.,  2631.,  2716.,  3725.,  3854.,  3983.,  4112.,  2519.,  2606.,  2693.,  2780.,  2867.,  2954.,  3041.,  3128.,  2070.,  2156.,  2242.,  2328.,  4182.,  4356.,  4530.,  4704.,  4878.,  5052.,  5226.,  5400.,  7384.,  7648.,  7912.,  8176.,  4994.,  5172.,  5350.,  5528.,  7558.,  7828.,  8098.,  8368.,  5110.,  5292.,  5474.,  5656.,  5838.,  6020.,  6202.,  6384.,  3790.,  3876.,  3962.,  4048.,  7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880., 12664., 12928., 13192., 13456.,  8554.,  8732.,  8910.,  9088., 12958., 13228., 13498., 13768.,  8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842., 10024.,  5755.,  5890.,  6025.,  6160., 11633., 11906., 12179., 12452., 12725., 12998., 13271., 13544., 19278., 19692., 20106., 20520., 13019., 13298., 13577., 13856., 19719., 20142., 20565., 20988., 13313., 13598., 13883., 14168., 14453., 14738., 15023., 15308.,  4150.,  4244.,  4338.,  4432.,  8382.,  8572.,  8762.,  8952.,  9142.,  9332.,  9522.,  9712., 13840., 14128., 14416., 14704.,  9338.,  9532.,  9726.,  9920., 14134., 14428., 14722., 15016.,  9534.,  9732.,  9930., 10128., 10326., 10524., 10722., 10920.,  6295.,  6442.,  6589.,  6736., 12713., 13010., 13307., 13604., 13901., 14198., 14495., 14792., 21042., 21492., 21942., 22392., 14195., 14498., 14801., 15104., 21483., 21942., 22401., 22860., 14489., 14798., 15107., 15416., 15725., 16034., 16343., 16652.,  4510.,  4612.,  4714.,  4816.,  9102.,  9308.,  9514.,  9720.,  9926., 10132., 10338., 10544., 15016., 15328., 15640., 15952., 10122., 10332., 10542., 10752., 15310., 15628., 15946., 16264., 10318., 10532., 10746., 10960., 11174., 11388., 11602., 11816.,  6835.,  6994.,  7153.,  7312., 13793., 14114., 14435., 14756., 15077., 15398., 15719., 16040., 22806., 23292., 23778., 24264., 15371., 15698., 16025., 16352., 23247., 23742., 24237., 24732., 15665., 15998., 16331., 16664., 16997., 17330., 17663., 17996.,  4870.,  4980.,  5090.,  5200.,  9822., 10044., 10266., 10488., 10710., 10932., 11154., 11376., 16192., 16528., 16864., 17200., 10906., 11132., 11358., 11584., 16486., 16828., 17170., 17512., 11102., 11332., 11562., 11792., 12022., 12252., 12482., 12712.,  7070.,  7180.,  7290.,  7400., 14262., 14484., 14706., 14928., 15150., 15372., 15594., 15816., 22912., 23248., 23584., 23920., 15426., 15652., 15878., 16104., 23326., 23668., 24010., 24352., 15702., 15932., 16162., 16392., 16622., 16852., 17082., 17312.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,   26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,    0.,    0.,    0.,    0.,   21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,  101.,  104.,   66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,    0.,    0.,    0.,    0.,   44.,   48.,   52.,   56.,   60.,   64.,   68.,   72.,  162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,  194.,  200.,    0.,    0.,    0.,    0.,  124.,  128.,  132.,  136.,  140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,  314.,  320.,    0.,    0.,    0.,    0.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,    0.,    0.,    0.,    0.,  288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,  758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,    0.,    0.,    0.,    0.,  448.,  456.,  464.,  472.,  480.,  488.,  496.,  504., 1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,    0.,    0.,    0.,    0.,  305.,  310.,  315.,  320.,  325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,  474.,  480.,    0.,    0.,    0.,    0.,  405.,  410.,  415.,  420.,  425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997., 1008., 1019., 1030., 1041., 1052.,  558.,  564.,  570.,  576.,  582.,  588.,  594.,  600.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    7.,   14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,  101.,  116.,  131.,  146.,  161.,  176.,  191.,  206.,  221.,  236.,  104.,  112.,  120.,  128.,  136.,  144.,  152.,  160.,    0.,    0.,    0.,    0.,  147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,  401.,  416.,  431.,  446.,  461.,  476.,  491.,  506.,  521.,  536.,  264.,  272.,  280.,  288.,  296.,  304.,  312.,  320.,    0.,    0.,    0.,    0.,  296.,  312.,  328.,  344.,  360.,  376.,  392.,  408.,  762.,  796.,  830.,  864.,  898.,  932.,  966., 1000., 1034., 1068., 1102., 1136.,  554.,  572.,  590.,  608.,  626.,  644.,  662.,  680.,    0.,    0.,    0.,    0.,  616.,  632.,  648.,  664.,  680.,  696.,  712.,  728., 1442., 1476., 1510., 1544., 1578., 1612., 1646., 1680., 1714., 1748., 1782., 1816.,  914.,  932.,  950.,  968.,  986., 1004., 1022., 1040.,    0.,    0.,    0.,    0.,  947.,  974., 1001., 1028., 1055., 1082., 1109., 1136., 2233., 2290., 2347., 2404., 2461., 2518., 2575., 2632., 2689., 2746., 2803., 2860., 1430., 1460., 1490., 1520., 1550., 1580., 1610., 1640.,    0.,    0.,    0.,    0.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920., 1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280.,    0.,    0.,    0.,    0., 1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,    0.,    0.,    0.,    0.,  671.,  682.,  693.,  704.,  715.,  726.,  737.,  748., 1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744.,  876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,    0.,    0.,    0.,    0.,  891.,  902.,  913.,  924.,  935.,  946.,  957.,  968., 1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   13.,   26.,   39.,   52.,   65.,   78.,   91.,  104.,  131.,  158.,  185.,  212.,  239.,  266.,  293.,  320.,  347.,  374.,  401.,  428.,  182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,    0.,    0.,    0.,    0.,  273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,  725.,  752.,  779.,  806.,  833.,  860.,  887.,  914.,  941.,  968.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,    0.,    0.,    0.,    0.,  548.,  576.,  604.,  632.,  660.,  688.,  716.,  744., 1362., 1420., 1478., 1536., 1594., 1652., 1710., 1768., 1826., 1884., 1942., 2000.,  950.,  980., 1010., 1040., 1070., 1100., 1130., 1160.,    0.,    0.,    0.,    0., 1108., 1136., 1164., 1192., 1220., 1248., 1276., 1304., 2522., 2580., 2638., 2696., 2754., 2812., 2870., 2928., 2986., 3044., 3102., 3160., 1550., 1580., 1610., 1640., 1670., 1700., 1730., 1760.,    0.,    0.,    0.,    0., 1685., 1730., 1775., 1820., 1865., 1910., 1955., 2000., 3853., 3946., 4039., 4132., 4225., 4318., 4411., 4504., 4597., 4690., 4783., 4876., 2384., 2432., 2480., 2528., 2576., 2624., 2672., 2720.,    0.,    0.,    0.,    0., 1272., 1304., 1336., 1368., 1400., 1432., 1464., 1496., 2882., 2948., 3014., 3080., 3146., 3212., 3278., 3344., 3410., 3476., 3542., 3608., 1762., 1796., 1830., 1864., 1898., 1932., 1966., 2000.,    0.,    0.,    0.,    0., 1912., 1944., 1976., 2008., 2040., 2072., 2104., 2136., 4202., 4268., 4334., 4400., 4466., 4532., 4598., 4664., 4730., 4796., 4862., 4928., 2442., 2476., 2510., 2544., 2578., 2612., 2646., 2680.,    0.,    0.,    0.,    0., 1037., 1054., 1071., 1088., 1105., 1122., 1139., 1156., 2271., 2306., 2341., 2376., 2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368., 1386., 1404., 1422., 1440.,    0.,    0.,    0.,    0., 1377., 1394., 1411., 1428., 1445., 1462., 1479., 1496., 2971., 3006., 3041., 3076., 3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728., 1746., 1764., 1782., 1800.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,   968.,  1020.,  1072.,  1124.,   258.,   302.,   346.,   390.,   592.,   696.,   800.,   904.,  1008.,  1112.,  1216.,  1320.,  1658.,  1838.,  2018.,  2198.,  1416.,  1552.,  1688.,  1824.,  2270.,  2498.,  2726.,  2954.,  1824.,  1992.,  2160.,  2328.,  2496.,  2664.,  2832.,  3000.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   943.,  1057.,  1171.,  1285.,  2096.,  2348.,  2600.,  2852.,  3104.,  3356.,  3608.,  3860.,  4827.,  5241.,  5655.,  6069.,  3908.,  4208.,  4508.,  4808.,  5777.,  6263.,  6749.,  7235.,  4712.,  5060.,  5408.,  5756.,  5400.,  5748.,  6096.,  6444.,  1762.,  1870.,  1978.,  2086.,  5136.,  5368.,  5600.,  5832.,  2352.,  2584.,  2816.,  3048.,  6618.,  6990.,  7362.,  7734.,  2632.,  2896.,  3160.,  3424.,  7422.,  7842.,  8262.,  8682.,  2912.,  3208.,  3504.,  3800.,  4096.,  4392.,  4688.,  4984.,  2167.,  2377.,  2587.,  2797.,  4544.,  4988.,  5432.,  5876.,  6320.,  6764.,  7208.,  7652.,  8627.,  9329., 10031., 10733.,  7124.,  7616.,  8108.,  8600.,  9577., 10351., 11125., 11899.,  7928.,  8468.,  9008.,  9548.,  8360.,  8900.,  9440.,  9980.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  3391.,  3697.,  4003.,  4309.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516.,  3394.,  3630.,  3866.,  4102., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  3826.,  4062.,  4298.,  4534.,  7856.,  8344.,  8832.,  9320.,  9808., 10296., 10784., 11272., 11786., 12542., 13298., 14054., 10472., 10992., 11512., 12032., 12526., 13330., 14134., 14938., 11136., 11688., 12240., 12792.,  9568., 10120., 10672., 11224.,  4109.,  4275.,  4441.,  4607.,  8384.,  8724.,  9064.,  9404.,  4432.,  4772.,  5112.,  5452.,  9569., 10091., 10613., 11135.,  4636.,  4992.,  5348.,  5704., 10003., 10549., 11095., 11641.,  4840.,  5212.,  5584.,  5956.,  6328.,  6700.,  7072.,  7444.,  3058.,  3422.,  3786.,  4150.,  6192.,  6936.,  7680.,  8424.,  9168.,  9912., 10656., 11400., 13898., 15038., 16178., 17318.,  9576., 10352., 11128., 11904., 14510., 15698., 16886., 18074.,  9984., 10792., 11600., 12408., 13216., 14024., 14832., 15640.,  5026.,  5390.,  5754.,  6118., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048.,  7063.,  7657.,  8251.,  8845., 14336., 15548., 16760., 17972., 19184., 20396., 21608., 22820., 23827., 25681., 27535., 29389., 19988., 21248., 22508., 23768., 24777., 26703., 28629., 30555., 20792., 22100., 23408., 24716., 20200., 21508., 22816., 24124.,  5842.,  6270.,  6698.,  7126., 18416., 19288., 20160., 21032.,  7952.,  8824.,  9696., 10568., 22698., 24030., 25362., 26694.,  8232.,  9136., 10040., 10944., 23502., 24882., 26262., 27642.,  8512.,  9448., 10384., 11320., 12256., 13192., 14128., 15064.,  7071.,  7505.,  7939.,  8373., 14352., 15244., 16136., 17028., 17920., 18812., 19704., 20596., 20907., 22281., 23655., 25029., 18724., 19664., 20604., 21544., 21857., 23303., 24749., 26195., 19528., 20516., 21504., 22492., 16632., 17620., 18608., 19596.,   322.,   558.,   794.,  1030.,  8400.,  8888.,  9376.,  9864.,  2544.,  3032.,  3520.,  4008., 12026., 12782., 13538., 14294.,  2824.,  3344.,  3864.,  4384., 12830., 13634., 14438., 15242.,  3104.,  3656.,  4208.,  4760.,  5312.,  5864.,  6416.,  6968.,  5031.,  5305.,  5579.,  5853., 10272., 10844., 11416., 11988., 12560., 13132., 13704., 14276., 11843., 12737., 13631., 14525., 13364., 13984., 14604., 15224., 12793., 13759., 14725., 15691., 14168., 14836., 15504., 16172.,  8968.,  9636., 10304., 10972.,   946.,   990.,  1034.,  1078.,  2480.,  2584.,  2688.,  2792.,  1232.,  1336.,  1440.,  1544.,  3402.,  3582.,  3762.,  3942.,  1512.,  1648.,  1784.,  1920.,  4206.,  4434.,  4662.,  4890.,  1792.,  1960.,  2128.,  2296.,  2464.,  2632.,  2800.,  2968.,   610.,   654.,   698.,   742.,  1424.,  1528.,  1632.,  1736.,  1840.,  1944.,  2048.,  2152.,  2906.,  3086.,  3266.,  3446.,  2504.,  2640.,  2776.,  2912.,  3646.,  3874.,  4102.,  4330.,  3168.,  3336.,  3504.,  3672.,  3136.,  3304.,  3472.,  3640.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  1984.,  2132.,  2280.,  2428.,  4361.,  4595.,  4829.,  5063.,  2188.,  2352.,  2516.,  2680.,  4795.,  5053.,  5311.,  5569.,  2392.,  2572.,  2752.,  2932.,  3112.,  3292.,  3472.,  3652.,  1378.,  1550.,  1722.,  1894.,  2832.,  3192.,  3552.,  3912.,  4272.,  4632.,  4992.,  5352.,  6554.,  7118.,  7682.,  8246.,  4680.,  5072.,  5464.,  5856.,  7166.,  7778.,  8390.,  9002.,  5088.,  5512.,  5936.,  6360.,  6784.,  7208.,  7632.,  8056.,  2578.,  2750.,  2922.,  3094.,  7792.,  8152.,  8512.,  8872.,  3472.,  3832.,  4192.,  4552.,  9834., 10398., 10962., 11526.,  3752.,  4144.,  4536.,  4928., 10638., 11250., 11862., 12474.,  4032.,  4456.,  4880.,  5304.,  5728.,  6152.,  6576.,  7000.,  3391.,  3697.,  4003.,  4309.,  6992.,  7628.,  8264.,  8900.,  9536., 10172., 10808., 11444., 12427., 13417., 14407., 15397., 10340., 11024., 11708., 12392., 13377., 14439., 15501., 16563., 11144., 11876., 12608., 13340., 11320., 12052., 12784., 13516.,  3394.,  3630.,  3866.,  4102., 10448., 10936., 11424., 11912.,  4592.,  5080.,  5568.,  6056., 13050., 13806., 14562., 15318.,  4872.,  5392.,  5912.,  6432., 13854., 14658., 15462., 16266.,  5152.,  5704.,  6256.,  6808.,  7360.,  7912.,  8464.,  9016.,  4615.,  5017.,  5419.,  5821.,  9440., 10268., 11096., 11924., 12752., 13580., 14408., 15236., 16227., 17505., 18783., 20061., 13556., 14432., 15308., 16184., 17177., 18527., 19877., 21227., 14360., 15284., 16208., 17132., 14280., 15204., 16128., 17052.,  4210.,  4510.,  4810.,  5110., 13104., 13720., 14336., 14952.,  5712.,  6328.,  6944.,  7560., 16266., 17214., 18162., 19110.,  5992.,  6640.,  7288.,  7936., 17070., 18066., 19062., 20058.,  6272.,  6952.,  7632.,  8312.,  8992.,  9672., 10352., 11032.,  5839.,  6337.,  6835.,  7333., 11888., 12908., 13928., 14948., 15968., 16988., 18008., 19028., 20027., 21593., 23159., 24725., 16772., 17840., 18908., 19976., 20977., 22615., 24253., 25891., 17576., 18692., 19808., 20924., 17240., 18356., 19472., 20588.,  5026.,  5390.,  5754.,  6118., 15760., 16504., 17248., 17992.,  6832.,  7576.,  8320.,  9064., 19482., 20622., 21762., 22902.,  7112.,  7888.,  8664.,  9440., 20286., 21474., 22662., 23850.,  7392.,  8200.,  9008.,  9816., 10624., 11432., 12240., 13048.,  5970.,  6334.,  6698.,  7062., 12144., 12888., 13632., 14376., 15120., 15864., 16608., 17352., 17706., 18846., 19986., 21126., 15784., 16560., 17336., 18112., 18446., 19634., 20822., 22010., 16448., 17256., 18064., 18872., 13856., 14664., 15472., 16280.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,   264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,   277.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,   543.,   557.,     0.,     0.,     0.,     0.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,  1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,  1386.,  1430.,     0.,     0.,     0.,     0.,   822.,   850.,   878.,   906.,   550.,   578.,   606.,   634.,  2136.,  2208.,  2280.,  2352.,  1528.,  1600.,  1672.,  1744.,  1816.,  1888.,  1960.,  2032.,  1106.,  1150.,  1194.,  1238.,  1282.,  1326.,  1370.,  1414.,     0.,     0.,     0.,     0.,  1027.,  1093.,  1159.,  1225.,  1291.,  1357.,  1423.,  1489.,  3048.,  3204.,  3360.,  3516.,  3672.,  3828.,  3984.,  4140.,  4296.,  4452.,  4608.,  4764.,  2573.,  2663.,  2753.,  2843.,  2933.,  3023.,  3113.,  3203.,     0.,     0.,     0.,     0.,  2126.,  2186.,  2246.,  2306.,   958.,  1018.,  1078.,  1138.,  3976.,  4112.,  4248.,  4384.,  2600.,  2736.,  2872.,  3008.,  3144.,  3280.,  3416.,  3552.,  1770.,  1846.,  1922.,  1998.,  2074.,  2150.,  2226.,  2302.,     0.,     0.,     0.,     0.,  1918.,  1978.,  2038.,  2098.,  2158.,  2218.,  2278.,  2338.,  4776.,  4912.,  5048.,  5184.,  5320.,  5456.,  5592.,  5728.,  5864.,  6000.,  6136.,  6272.,  3290.,  3366.,  3442.,  3518.,  3594.,  3670.,  3746.,  3822.,     0.,     0.,     0.,     0.,  2309.,  2347.,  2385.,  2423.,    29.,    67.,   105.,   143.,  2976.,  3060.,  3144.,  3228.,   368.,   452.,   536.,   620.,   704.,   788.,   872.,   956.,   403.,   449.,   495.,   541.,   587.,   633.,   679.,   725.,     0.,     0.,     0.,     0.,   637.,   675.,   713.,   751.,   789.,   827.,   865.,   903.,  1712.,  1796.,  1880.,  1964.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  1323.,  1369.,  1415.,  1461.,  1507.,  1553.,  1599.,  1645.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    41.,    95.,   149.,   203.,   257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,  1100.,  1216.,  1332.,  1448.,  1564.,  1680.,  1796.,   791.,   853.,   915.,   977.,  1039.,  1101.,  1163.,  1225.,     0.,     0.,     0.,     0.,  1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,  2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  3768.,  3884.,  4000.,  4116.,  2031.,  2093.,  2155.,  2217.,  2279.,  2341.,  2403.,  2465.,     0.,     0.,     0.,     0.,  2254.,  2378.,  2502.,  2626.,  2750.,  2874.,  2998.,  3122.,  5832.,  6096.,  6360.,  6624.,  6888.,  7152.,  7416.,  7680.,  7944.,  8208.,  8472.,  8736.,  4266.,  4406.,  4546.,  4686.,  4826.,  4966.,  5106.,  5246.,     0.,     0.,     0.,     0.,  4734.,  4858.,  4982.,  5106.,  1774.,  1898.,  2022.,  2146.,  7656.,  7920.,  8184.,  8448.,  4744.,  5008.,  5272.,  5536.,  5800.,  6064.,  6328.,  6592.,  3098.,  3238.,  3378.,  3518.,  3658.,  3798.,  3938.,  4078.,     0.,     0.,     0.,     0.,  3823.,  4033.,  4243.,  4453.,  4663.,  4873.,  5083.,  5293.,  9792., 10236., 10680., 11124., 11568., 12012., 12456., 12900., 13344., 13788., 14232., 14676.,  7097.,  7331.,  7565.,  7799.,  8033.,  8267.,  8501.,  8735.,     0.,     0.,     0.,     0.,  6038.,  6194.,  6350.,  6506.,  2182.,  2338.,  2494.,  2650.,  9496.,  9824., 10152., 10480.,  5816.,  6144.,  6472.,  6800.,  7128.,  7456.,  7784.,  8112.,  3762.,  3934.,  4106.,  4278.,  4450.,  4622.,  4794.,  4966.,     0.,     0.,     0.,     0.,  4678.,  4834.,  4990.,  5146.,  5302.,  5458.,  5614.,  5770., 11064., 11392., 11720., 12048., 12376., 12704., 13032., 13360., 13688., 14016., 14344., 14672.,  7202.,  7374.,  7546.,  7718.,  7890.,  8062.,  8234.,  8406.,     0.,     0.,     0.,     0.,  5225.,  5311.,  5397.,  5483.,    65.,   151.,   237.,   323.,  6120.,  6300.,  6480.,  6660.,   824.,  1004.,  1184.,  1364.,  1544.,  1724.,  1904.,  2084.,   823.,   917.,  1011.,  1105.,  1199.,  1293.,  1387.,  1481.,     0.,     0.,     0.,     0.,  1441.,  1527.,  1613.,  1699.,  1785.,  1871.,  1957.,  2043.,  3704.,  3884.,  4064.,  4244.,  4424.,  4604.,  4784.,  4964.,  5144.,  5324.,  5504.,  5684.,  2703.,  2797.,  2891.,  2985.,  3079.,  3173.,  3267.,  3361.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    77.,   179.,   281.,   383.,   485.,   587.,   689.,   791.,   976.,  1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2672.,  2884.,  3096.,  3308.,  1403.,  1513.,  1623.,  1733.,  1843.,  1953.,  2063.,  2173.,     0.,     0.,     0.,     0.,  2117.,  2219.,  2321.,  2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,  6276.,  6488.,  6700.,  6912.,  7124.,  7336.,  7548.,  3603.,  3713.,  3823.,  3933.,  4043.,  4153.,  4263.,  4373.,     0.,     0.,     0.,     0.,  4246.,  4466.,  4686.,  4906.,  5126.,  5346.,  5566.,  5786., 10584., 11040., 11496., 11952., 12408., 12864., 13320., 13776., 14232., 14688., 15144., 15600.,  7410.,  7646.,  7882.,  8118.,  8354.,  8590.,  8826.,  9062.,     0.,     0.,     0.,     0.,  8646.,  8866.,  9086.,  9306.,  2998.,  3218.,  3438.,  3658., 13176., 13632., 14088., 14544.,  7960.,  8416.,  8872.,  9328.,  9784., 10240., 10696., 11152.,  5090.,  5326.,  5562.,  5798.,  6034.,  6270.,  6506.,  6742.,     0.,     0.,     0.,     0.,  6619.,  6973.,  7327.,  7681.,  8035.,  8389.,  8743.,  9097., 16536., 17268., 18000., 18732., 19464., 20196., 20928., 21660., 22392., 23124., 23856., 24588., 11621., 11999., 12377., 12755., 13133., 13511., 13889., 14267.,     0.,     0.,     0.,     0.,  9950., 10202., 10454., 10706.,  3406.,  3658.,  3910.,  4162., 15016., 15536., 16056., 16576.,  9032.,  9552., 10072., 10592., 11112., 11632., 12152., 12672.,  5754.,  6022.,  6290.,  6558.,  6826.,  7094.,  7362.,  7630.,     0.,     0.,     0.,     0.,  7438.,  7690.,  7942.,  8194.,  8446.,  8698.,  8950.,  9202., 17352., 17872., 18392., 18912., 19432., 19952., 20472., 20992., 21512., 22032., 22552., 23072., 11114., 11382., 11650., 11918., 12186., 12454., 12722., 12990.,     0.,     0.,     0.,     0.,  8141.,  8275.,  8409.,  8543.,   101.,   235.,   369.,   503.,  9264.,  9540.,  9816., 10092.,  1280.,  1556.,  1832.,  2108.,  2384.,  2660.,  2936.,  3212.,  1243.,  1385.,  1527.,  1669.,  1811.,  1953.,  2095.,  2237.,     0.,     0.,     0.,     0.,  2245.,  2379.,  2513.,  2647.,  2781.,  2915.,  3049.,  3183.,  5696.,  5972.,  6248.,  6524.,  6800.,  7076.,  7352.,  7628.,  7904.,  8180.,  8456.,  8732.,  4083.,  4225.,  4367.,  4509.,  4651.,  4793.,  4935.,  5077.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  5898.,  7170.,  8442.,  9714.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1950.,  4998.,  8046., 11094., 10316., 12540., 14764., 16988.,  1420.,  3644.,  5868.,  8092.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1754.,  2130.,  2506.,  2882.,   620.,  1564.,  2508.,  3452.,  4396.,  5340.,  6284.,  7228.,  1110.,  2814.,  4518.,  6222.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   220.,   556.,   892.,  1228.,  3720.,  4520.,  5320.,  6120.,   520.,  1320.,  2120.,  2920.,  6468.,  7860.,  9252., 10644.,   680.,  1736.,  2792.,  3848.,  8244., 10020., 11796., 13572.,   840.,  2152.,  3464.,  4776.,  6088.,  7400.,  8712., 10024.,  1564.,  1900.,  2236.,  2572.,   520.,  1320.,  2120.,  2920.,  3720.,  4520.,  5320.,  6120.,   900.,  2292.,  3684.,  5076.,  4904.,  5960.,  7016.,  8072.,  1140.,  2916.,  4692.,  6468.,  6088.,  7400.,  8712., 10024.,   840.,  2152.,  3464.,  4776.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   140.,   348.,   556.,   764.,   972.,  1180.,  1388.,  1596.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  1564.,  1900.,  2236.,  2572.,   220.,   556.,   892.,  1228.,     0.,     0.,     0.,     0.,   972.,  1180.,  1388.,  1596.,   140.,   348.,   556.,   764.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   220.,   556.,   892.,  1228.,  1564.,  1900.,  2236.,  2572.,     0.,     0.,     0.,     0.,   330.,   834.,  1338.,  1842.,  2346.,  2850.,  3354.,  3858.,   780.,  1980.,  3180.,  4380.,  5580.,  6780.,  7980.,  9180.,   780.,  1980.,  3180.,  4380.,  3234.,  3930.,  4626.,  5322.,   450.,  1146.,  1842.,  2538.,     0.,     0.,     0.,     0.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,     0.,     0.,     0.,     0.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  2262.,  2750.,  3238.,  3726.,   310.,   798.,  1286.,  1774.,     0.,     0.,     0.,     0.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   310.,   798.,  1286.,  1774.,  2262.,  2750.,  3238.,  3726.,     0.,     0.,     0.,     0.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,     0.,     0.,     0.,     0.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,     0.,     0.,     0.,     0.,   410.,  1042.,  1674.,  2306.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,  3826.,  4650.,  5474.,  6298.,   530.,  1354.,  2178.,  3002.,     0.,     0.,     0.,     0.,   972.,  1180.,  1388.,  1596.,   140.,   348.,   556.,   764.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   220.,   556.,   892.,  1228.,  1564.,  1900.,  2236.,  2572.,     0.,     0.,     0.,     0.,   140.,   348.,   556.,   764.,   972.,  1180.,  1388.,  1596.,   360.,   904.,  1448.,  1992.,  2536.,  3080.,  3624.,  4168.,   360.,   904.,  1448.,  1992.,  1564.,  1900.,  2236.,  2572.,   220.,   556.,   892.,  1228.,     0.,     0.,     0.,     0.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,     0.,     0.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  1670.,  2030.,  2390.,  2750.,   230.,   590.,   950.,  1310.,     0.,     0.,     0.,     0.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   230.,   590.,   950.,  1310.,  1670.,  2030.,  2390.,  2750.,     0.,     0.,     0.,     0.,   460.,  1180.,  1900.,  2620.,  3340.,  4060.,  4780.,  5500.,  1000.,  2568.,  4136.,  5704.,  7272.,  8840., 10408., 11976.,  1000.,  2568.,  4136.,  5704.,  3932.,  4780.,  5628.,  6476.,   540.,  1388.,  2236.,  3084.,     0.,     0.,     0.,     0.,  3340.,  4060.,  4780.,  5500.,   460.,  1180.,  1900.,  2620.,  7272.,  8840., 10408., 11976.,  1000.,  2568.,  4136.,  5704.,  7272.,  8840., 10408., 11976.,   540.,  1388.,  2236.,  3084.,  3932.,  4780.,  5628.,  6476.,     0.,     0.,     0.,     0.,   490.,  1250.,  2010.,  2770.,  3530.,  4290.,  5050.,  5810.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  4418.,  5370.,  6322.,  7274.,   610.,  1562.,  2514.,  3466.,     0.,     0.,     0.,     0.,  2156.,  2620.,  3084.,  3548.,   300.,   764.,  1228.,  1692.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   380.,   972.,  1564.,  2156.,  2748.,  3340.,  3932.,  4524.,     0.,     0.,     0.,     0.,   300.,   764.,  1228.,  1692.,  2156.,  2620.,  3084.,  3548.,   680.,  1736.,  2792.,  3848.,  4904.,  5960.,  7016.,  8072.,   680.,  1736.,  2792.,  3848.,  2748.,  3340.,  3932.,  4524.,   380.,   972.,  1564.,  2156.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,   24.,   60.,   76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,   59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,  116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,  179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,  296.,  625.,  694., 1092.,  772., 1209.,  850., 1326.,  928., 1015.,  299.,  620.,  676., 1048.,  728., 1126.,  780., 1204.,  832.,  900.,  476.,  985., 1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,  419.,  860.,  936., 1438.,  988., 1516., 1040., 1594., 1092., 1180.,  604., 1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.,  182.,  370.,  423.,  644.,  439.,  668.,  455.,  692.,  471.,  530.,  374.,  760.,  876., 1333.,  908., 1381.,  940., 1429.,  972., 1100.,  659., 1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740., 1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,  779., 1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020., 1196., 2425., 2644., 4017., 2722., 4134., 2800., 4251., 2878., 3115.,  899., 1820., 1976., 2998., 2028., 3076., 2080., 3154., 2132., 2300., 1376., 2785., 3034., 4602., 3112., 4719., 3190., 4836., 3268., 3535., 1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580., 1454., 2940., 3116., 4723., 3188., 4831., 3260., 4939., 3332., 3520.,  357.,  720.,  823., 1244.,  839., 1268.,  855., 1292.,  871.,  980.,  724., 1460., 1676., 2533., 1708., 2581., 1740., 2629., 1772., 2000., 1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140., 1916., 3865., 4204., 6357., 4282., 6474., 4360., 6591., 4438., 4795., 1379., 2780., 3016., 4558., 3068., 4636., 3120., 4714., 3172., 3420., 2096., 4225., 4594., 6942., 4672., 7059., 4750., 7176., 4828., 5215., 1499., 3020., 3276., 4948., 3328., 5026., 3380., 5104., 3432., 3700., 2276., 4585., 4984., 7527., 5062., 7644., 5140., 7761., 5218., 5635., 1619., 3260., 3536., 5338., 3588., 5416., 3640., 5494., 3692., 3980., 2304., 4640., 4916., 7423., 4988., 7531., 5060., 7639., 5132., 5420.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   14.,   19.,   12.,   15.,    0.,    6.,    7.,   20.,   23.,   44.,   39.,   44.,   27.,   30.,    0.,   15.,   20.,   52.,   64.,  115.,   96.,  112.,   66.,   75.,    0.,   40.,   45.,  112.,  124.,  220.,  176.,  192.,  111.,  120.,    0.,   72.,   84.,  201.,  228.,  393.,  306.,  339.,  192.,  210.,    0.,  106.,  117.,  256.,  280.,  454.,  332.,  360.,  195.,  210.,    0.,  161.,  172.,  376.,  400.,  649.,  472.,  500.,  270.,  285.,    0.,  112.,  119.,  254.,  269.,  428.,  305.,  322.,  171.,  180.,    0.,  147.,  154.,  329.,  344.,  548.,  390.,  407.,  216.,  225.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   10.,   20.,   41.,   62.,   95.,   68.,   91.,   48.,   60.,    0.,   60.,   70.,  146.,  167.,  260.,  183.,  206.,  108.,  120.,    0.,  123.,  146.,  304.,  352.,  547.,  384.,  436.,  228.,  255.,    0.,  238.,  261.,  544.,  592.,  922.,  644.,  696.,  363.,  390.,    0.,  369.,  408.,  849.,  930., 1446., 1008., 1095.,  570.,  615.,    0.,  304.,  333.,  688.,  748., 1156.,  800.,  864.,  447.,  480.,    0.,  449.,  478.,  988., 1048., 1621., 1120., 1184.,  612.,  645.,    0.,  256.,  272.,  560.,  593.,  914.,  629.,  664.,  342.,  360.,    0.,  336.,  352.,  725.,  758., 1169.,  804.,  839.,  432.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   19.,   38.,   77.,  116.,  176.,  122.,  163.,   84.,  105.,    0.,  114.,  133.,  272.,  311.,  476.,  327.,  368.,  189.,  210.,    0.,  231.,  272.,  556.,  640.,  979.,  672.,  760.,  390.,  435.,    0.,  436.,  477.,  976., 1060., 1624., 1112., 1200.,  615.,  660.,    0.,  666.,  732., 1497., 1632., 2499., 1710., 1851.,  948., 1020.,    0.,  502.,  549., 1120., 1216., 1858., 1268., 1368.,  699.,  750.,    0.,  737.,  784., 1600., 1696., 2593., 1768., 1868.,  954., 1005.,    0.,  400.,  425.,  866.,  917., 1400.,  953., 1006.,  513.,  540.,    0.,  525.,  550., 1121., 1172., 1790., 1218., 1271.,  648.,  675.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,   588.,   152.,   396.,   516.,   920.,   764.,  1292.,  1012.,  1664.,  1260.,  1476.,   412.,   996.,  1116.,  1940.,  1524.,  2552.,  1932.,  3164.,  2340.,  2556.,   823.,  1904.,  2204.,  3705.,  2816.,  4623.,  3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,  9213.,  6488., 10131.,  7100.,  7784.,  2292.,  4756.,  5196.,  8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,  8324., 12885.,  8936., 13803.,  9548., 14721., 10160., 11084.,  3232.,  6636.,  7236., 11120.,  7644., 11732.,  8052., 12344.,  8460.,  9156.,  4692.,  9636., 10236., 15740., 10804., 16592., 11372., 17444., 11940., 12636.,  1391.,  2828.,  3248.,  4945.,  3372.,  5131.,  3496.,  5317.,  3620.,  4088.,  2852.,  5796.,  6716., 10028.,  6516.,  9696.,  5804.,  8852.,  6052.,  6556.,  5112., 10396., 11316., 15768.,  9996., 14396.,  8164., 12512.,  8572.,  9076.,  7425., 15108., 16096., 21791., 13700., 19445., 10792., 16587., 11404., 12024.,  4324.,  8820.,  9388., 10316.,  5508.,  6384.,  1116.,  1940.,  1524.,  1676.,  5827., 11912., 12628., 14029.,  7672.,  9123.,  2204.,  3705.,  2816.,  3164.,   976.,  2124.,  2340.,  3776.,  2748.,  4388.,  3156.,  5000.,  3564.,  3876.,  1669.,  3596.,  4040.,  6459.,  4652.,  7377.,  5264.,  8295.,  5876.,  6464.,  1916.,  4004.,  4380.,  6836.,  4788.,  7448.,  5196.,  8060.,  5604.,  6076.,  2816.,  5884.,  6260.,  9776.,  6828., 10628.,  7396., 11480.,  7964.,  8436.,  1013.,  2072.,  2380.,  3643.,  2504.,  3829.,  2628.,  4015.,  2752.,  3108.,  2096.,  4284.,  4980.,  7616.,  5228.,  7988.,  5476.,  8360.,  5724.,  6516.,  3796.,  7764.,  8460., 12956.,  8868., 13568.,  9276., 14180.,  9684., 10476.,  5899., 12056., 13220., 20229., 13832., 21147., 14444., 21873., 14608., 15660.,  4736.,  9644., 10500., 16016., 10908., 16628., 11316., 15768.,  9996., 10692.,  6861., 13980., 14872., 22707., 15484., 23625., 16096., 21791., 13700., 14480.,  3948.,  8068.,  8572., 13124.,  8980., 13736.,  9388., 10316.,  5508.,  5852.,  5263., 10784., 11404., 17505., 12016., 18423., 12628., 14029.,  7672.,  8180.,   600.,  1372.,  1524.,  2552.,  1932.,  3164.,  2340.,  3776.,  2748.,  2996.,   940.,  2132.,  2284.,  3812.,  2852.,  4664.,  3420.,  5516.,  3988.,  4236.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,    92.,   128.,    83.,   105.,     0.,    35.,    41.,   128.,   148.,   295.,   272.,   308.,   193.,   215.,     0.,    88.,   124.,   340.,   428.,   788.,   676.,   796.,   476.,   544.,     0.,   268.,   304.,   780.,   868.,  1568.,  1276.,  1396.,   816.,   884.,     0.,   489.,   579.,  1416.,  1620.,  2829.,  2232.,  2484.,  1419.,  1557.,     0.,   784.,   868.,  1908.,  2092.,  3404.,  2500.,  2716.,  1476.,  1592.,     0.,  1204.,  1288.,  2828.,  3012.,  4904.,  3580.,  3796.,  2056.,  2172.,     0.,   851.,   905.,  1936.,  2052.,  3271.,  2336.,  2468.,  1313.,  1383.,     0.,  1121.,  1175.,  2516.,  2632.,  4201.,  2996.,  3128.,  1663.,  1733.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    59.,   137.,   280.,   444.,   679.,   488.,   668.,   353.,   447.,     0.,   449.,   527.,  1100.,  1264.,  1969.,  1388.,  1568.,   823.,   917.,     0.,   916.,  1096.,  2284.,  2660.,  4136.,  2908.,  3316.,  1736.,  1948.,     0.,  1816.,  1996.,  4164.,  4540.,  7076.,  4948.,  5356.,  2796.,  3008.,     0.,  2811.,  3117.,  6492.,  7128., 11091.,  7740.,  8424.,  4389.,  4743.,     0.,  2332.,  2560.,  5292.,  5764.,  8912.,  6172.,  6676.,  3456.,  3716.,     0.,  3472.,  3700.,  7652.,  8124., 12572.,  8692.,  9196.,  4756.,  5016.,     0.,  1985.,  2111.,  4348.,  4608.,  7105.,  4892.,  5168.,  2663.,  2805.,     0.,  2615.,  2741.,  5648.,  5908.,  9115.,  6272.,  6548.,  3373.,  3515.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   113.,   263.,   532.,   840.,  1273.,   884.,  1208.,   623.,   789.,     0.,   863.,  1013.,  2072.,  2380.,  3643.,  2504.,  2828.,  1453.,  1619.,     0.,  1744.,  2068.,  4228.,  4892.,  7484.,  5140.,  5836.,  2996.,  3352.,     0.,  3364.,  3688.,  7548.,  8212., 12584.,  8620.,  9316.,  4776.,  5132.,     0.,  5133.,  5655., 11568., 12636., 19353., 13248., 14364.,  7359.,  7929.,     0.,  3880.,  4252.,  8676.,  9436., 14420.,  9844., 10636.,  5436.,  5840.,     0.,  5740.,  6112., 12476., 13236., 20240., 13804., 14596.,  7456.,  7860.,     0.,  3119.,  3317.,  6760.,  7164., 10939.,  7448.,  7868.,  4013.,  4227.,     0.,  4109.,  4307.,  8780.,  9184., 14029.,  9548.,  9968.,  5083.,  5297.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  270.,   900.,   724.,  1818.,  1188.,  2770.,  1652.,  3722.,  2116.,  2644.,   740.,  1688.,  2616.,  4300.,  3544.,  5372.,  3640.,  5420.,  2712.,  3384.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1818.,  4140.,  5468.,  8734.,  7244.,  9542.,  7164.,  9326.,  6060.,  5660.,  1348.,  6424.,  2872.,  9452.,  3544.,  7324.,  3896.,  8268.,  3224.,  4152.,  3442.,  7068.,  8780., 10726.,  8700.,  8142.,  7596.,  6902.,  5468.,  6476.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  3210.,  5580.,  7164.,  9326.,  6060.,  8086.,  7836.,  9918.,  8780.,  7612.,  2276.,  5400.,  3896.,  8268.,  3224.,  8188.,  3896.,  7084.,  1176.,  2104.,  3828.,  5752.,  6936.,  5820.,  4472.,  7148.,  5912.,  7452.,  5496.,  5080.,   694.,  1748.,  1188.,  2770.,  1652.,  3722.,  2116.,  4674.,  2580.,  3236.,  1076.,  2360.,  3544.,  5372.,  3640.,  5420.,  2712.,  4444.,  3640.,  4568.,  2884.,  7448.,  3896.,  7084.,  1176.,  4956.,  1528.,  5900.,  2200.,  3128.,  2514.,  5532.,  7244.,  9542.,  7164.,  9326.,  6060.,  8086.,  7836.,  7308.,  1812.,  7864.,  3544.,  7324.,  3896.,  8268.,  3224.,  8188.,  3896.,  5080.,  3306.,  7116.,  8700.,  8142.,  7596.,  6902.,  5468.,  8734.,  7244.,  8124.,   420.,  3544.,  1528.,  5900.,  2200.,  7676.,  2872.,  9452.,  3544.,  4984.,  2050.,  4604.,  6060.,  8086.,  7836.,  9918.,  8780., 10726.,  8700.,  6892.,  2420.,  6008.,  3224.,  8188.,  3896.,  7084.,  1176.,  4956.,  1528.,  2200.,  1540.,  3544.,  4472.,  7148.,  5912.,  7452.,  5496.,  6732.,  4056.,  2872.,  1118.,  2596.,  1652.,  3722.,  2116.,  4674.,  2580.,  5626.,  3044.,  3828.,  1412.,  2712.,  3640.,  5420.,  2712.,  4444.,  3640.,  5836.,  4568.,  5752.,  3348.,  6008.,  1176.,  4956.,  1528.,  5900.,  2200.,  7676.,  2872.,  4056.,  3210.,  5580.,  7164.,  9326.,  6060.,  8086.,  7836.,  9918.,  8780.,  7612.,  2276.,  5400.,  3896.,  8268.,  3224.,  8188.,  3896.,  7084.,  1176.,  2104.,  4002.,  6140.,  7596.,  6902.,  5468.,  8734.,  7244.,  9542.,  7164.,  7404.,   884.,  4984.,  2200.,  7676.,  2872.,  9452.,  3544.,  7324.,  3896.,  5080.,  2746.,  5996.,  7836.,  9918.,  8780., 10726.,  8700.,  8142.,  7596.,  5148.,  2884.,  7448.,  3896.,  7084.,  1176.,  4956.,  1528.,  5900.,  2200.,  3128.,  2132.,  4728.,  5912.,  7452.,  5496.,  6732.,  4056.,  4988.,  5496.,  4056.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  578.,  660.,  932.,  614.,  782.,    0.,  230.,  270.,  900.,  724., 1818., 1188., 1460.,  110.,  278.,    0.,  260.,  532., 1272., 1944., 3292., 2872., 3800., 2260., 2788.,    0., 1620., 1572., 4312., 2296., 6284., 2968., 3896.,  676., 1204.,    0., 1074., 1770., 4044., 5628., 8654., 6572., 7196., 3466., 2690.,    0., 4164., 2964., 8632., 4312., 8732., 1592., 2776.,  980., 1380.,    0., 2196., 2852., 6168., 7608., 8972., 7192., 6008., 2980.,  500.,    0., 3238.,  270., 4420., 1428., 2650., 1316., 1844.,  110.,  150.,    0., 1966., 2390., 5076., 5988., 3698., 3956.,  580.,  310.,   30.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   70.,  174.,  388.,  660., 1082.,  996., 1396.,  846., 1078.,    0.,  590.,  694., 1748., 1188., 2770., 1652., 2052.,  150.,  382.,    0.,  468.,  868., 1944., 2872., 4684., 3800., 4984., 2852., 3508.,    0., 2468., 2036., 5752., 2968., 8060., 3640., 4824.,  884., 1540.,    0., 1578., 2466., 5116., 6572., 9462., 6492., 6476., 4546., 3450.,    0., 5012., 3428., 7192., 1592., 6604., 1944., 2872., 1188., 1716.,    0., 2660., 3444., 6008., 7192., 8252., 5752., 3800., 3828.,  964.,    0., 3726.,  310., 1108., 1316., 2642.,  180.,  324.,  278.,  382.,    0., 2262., 2750., 3428., 3956., 1066.,  900.,  724.,  798.,   70.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  110.,  278.,  596.,  996., 1586., 1332., 1860., 1078., 1374.,    0.,  950., 1118., 2596., 1652., 3722., 2116., 2644.,  190.,  486.,    0.,  676., 1204., 2616., 3800., 6076., 4728., 6168., 3444., 4228.,    0., 3316., 2500., 7192., 3640., 9836., 4312., 5752., 1092., 1876.,    0., 1762., 2330., 5164., 6492., 9246., 8268., 8124., 5626., 4210.,    0., 2980.,  500., 4728., 1944., 7548., 2616., 3800., 1396., 2052.,    0., 1780., 2180., 4824., 5752., 6508., 7192., 4984., 4676., 1428.,    0.,  310.,   30.,  868.,  180., 1610.,  388.,  660.,  446.,  614.,    0.,  190.,  230.,  756.,  900., 1506., 1748., 1188., 1286.,  110.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   13.,    14.,    37.,    40.,    43.,    46.,    82.,    88.,    73.,    78.,   127.,   136.,   103.,   110.,   172.,   184.,   133.,   142.,   151.,   160.,    41.,    48.,   104.,   120.,   136.,   152.,   239.,   266.,   196.,   216.,   329.,   362.,   256.,   280.,   419.,   458.,   316.,   344.,   372.,   400.,   111.,   118.,   264.,   280.,   296.,   312.,   509.,   536.,   396.,   416.,   659.,   692.,   496.,   520.,   809.,   848.,   596.,   624.,   652.,   680.,   214.,   232.,   491.,   530.,   569.,   608.,   951.,  1014.,   719.,   764.,  1176.,  1248.,   869.,   920.,  1401.,  1482.,  1019.,  1076.,  1133.,  1190.,   341.,   358.,   724.,   760.,   796.,   832.,  1259.,  1316.,   896.,   936.,  1409.,  1472.,   996.,  1040.,  1559.,  1628.,  1096.,  1144.,  1192.,  1240.,   559.,   592.,  1181.,  1250.,  1319.,  1388.,  2076.,  2184.,  1469.,  1544.,  2301.,  2418.,  1619.,  1700.,  2526.,  2652.,  1769.,  1856.,  1943.,  2030.,   571.,   598.,  1184.,  1240.,  1296.,  1352.,  2009.,  2096.,  1396.,  1456.,  2159.,  2252.,  1496.,  1560.,  2309.,  2408.,  1596.,  1664.,  1732.,  1800.,   904.,   952.,  1871.,  1970.,  2069.,  2168.,  3201.,  3354.,  2219.,  2324.,  3426.,  3588.,  2369.,  2480.,  3651.,  3822.,  2519.,  2636.,  2753.,  2870.,   801.,   838.,  1644.,  1720.,  1796.,  1872.,  2759.,  2876.,  1896.,  1976.,  2909.,  3032.,  1996.,  2080.,  3059.,  3188.,  2096.,  2184.,  2272.,  2360.,  1171.,  1208.,  2404.,  2480.,  2556.,  2632.,  3929.,  4046.,  2696.,  2776.,  4139.,  4262.,  2836.,  2920.,  4349.,  4478.,  2976.,  3064.,  3152.,  3240.,   338.,   364.,   687.,   740.,   793.,   846.,  1207.,  1288.,   823.,   878.,  1252.,  1336.,   853.,   910.,  1297.,  1384.,   883.,   942.,  1001.,  1060.,   691.,   748.,  1404.,  1520.,  1636.,  1752.,  2489.,  2666.,  1696.,  1816.,  2579.,  2762.,  1756.,  1880.,  2669.,  2858.,  1816.,  1944.,  2072.,  2200.,  1261.,  1318.,  2564.,  2680.,  2796.,  2912.,  4259.,  4436.,  2896.,  3016.,  4409.,  4592.,  2996.,  3120.,  4559.,  4748.,  3096.,  3224.,  3352.,  3480.,  1939.,  2032.,  3941.,  4130.,  4319.,  4508.,  6576.,  6864.,  4469.,  4664.,  6801.,  7098.,  4619.,  4820.,  7026.,  7332.,  4769.,  4976.,  5183.,  5390.,  1491.,  1558.,  3024.,  3160.,  3296.,  3432.,  5009.,  5216.,  3396.,  3536.,  5159.,  5372.,  3496.,  3640.,  5309.,  5528.,  3596.,  3744.,  3892.,  4040.,  2284.,  2392.,  4631.,  4850.,  5069.,  5288.,  7701.,  8034.,  5219.,  5444.,  7926.,  8268.,  5369.,  5600.,  8151.,  8502.,  5519.,  5756.,  5993.,  6230.,  1721.,  1798.,  3484.,  3640.,  3796.,  3952.,  5759.,  5996.,  3896.,  4056.,  5909.,  6152.,  3996.,  4160.,  6059.,  6308.,  4096.,  4264.,  4432.,  4600.,  2629.,  2752.,  5321.,  5570.,  5819.,  6068.,  8826.,  9204.,  5969.,  6224.,  9051.,  9438.,  6119.,  6380.,  9276.,  9672.,  6269.,  6536.,  6803.,  7070.,  1951.,  2038.,  3944.,  4120.,  4296.,  4472.,  6509.,  6776.,  4396.,  4576.,  6659.,  6932.,  4496.,  4680.,  6809.,  7088.,  4596.,  4784.,  4972.,  5160.,  2821.,  2908.,  5704.,  5880.,  6056.,  6232.,  9179.,  9446.,  6196.,  6376.,  9389.,  9662.,  6336.,  6520.,  9599.,  9878.,  6476.,  6664.,  6852.,  7040.,   663.,   714.,  1337.,  1440.,  1543.,  1646.,  2332.,  2488.,  1573.,  1678.,  2377.,  2536.,  1603.,  1710.,  2422.,  2584.,  1633.,  1742.,  1851.,  1960.,  1341.,  1448.,  2704.,  2920.,  3136.,  3352.,  4739.,  5066.,  3196.,  3416.,  4829.,  5162.,  3256.,  3480.,  4919.,  5258.,  3316.,  3544.,  3772.,  4000.,  2411.,  2518.,  4864.,  5080.,  5296.,  5512.,  8009.,  8336.,  5396.,  5616.,  8159.,  8492.,  5496.,  5720.,  8309.,  8648.,  5596.,  5824.,  6052.,  6280.,  3664.,  3832.,  7391.,  7730.,  8069.,  8408., 12201., 12714.,  8219.,  8564., 12426., 12948.,  8369.,  8720., 12651., 13182.,  8519.,  8876.,  9233.,  9590.,  2641.,  2758.,  5324.,  5560.,  5796.,  6032.,  8759.,  9116.,  5896.,  6136.,  8909.,  9272.,  5996.,  6240.,  9059.,  9428.,  6096.,  6344.,  6592.,  6840.,  4009.,  4192.,  8081.,  8450.,  8819.,  9188., 13326., 13884.,  8969.,  9344., 13551., 14118.,  9119.,  9500., 13776., 14352.,  9269.,  9656., 10043., 10430.,  2871.,  2998.,  5784.,  6040.,  6296.,  6552.,  9509.,  9896.,  6396.,  6656.,  9659., 10052.,  6496.,  6760.,  9809., 10208.,  6596.,  6864.,  7132.,  7400.,  4354.,  4552.,  8771.,  9170.,  9569.,  9968., 14451., 15054.,  9719., 10124., 14676., 15288.,  9869., 10280., 14901., 15522., 10019., 10436., 10853., 11270.,  3101.,  3238.,  6244.,  6520.,  6796.,  7072., 10259., 10676.,  6896.,  7176., 10409., 10832.,  6996.,  7280., 10559., 10988.,  7096.,  7384.,  7672.,  7960.,  4471.,  4608.,  9004.,  9280.,  9556.,  9832., 14429., 14846.,  9696.,  9976., 14639., 15062.,  9836., 10120., 14849., 15278.,  9976., 10264., 10552., 10840.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,    0.,    0.,   11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,    0.,    0.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,    0.,    0.,   75.,   80.,   85.,   90.,  212.,  224.,  236.,  248.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,    0.,    0.,  132.,  144.,  156.,  168.,  375.,  402.,  429.,  456.,  741.,  786.,  579.,  612.,  645.,  678.,  366.,  384.,  402.,  420.,    0.,    0.,  201.,  212.,  223.,  234.,  488.,  512.,  536.,  560.,  869.,  908.,  636.,  664.,  692.,  720.,  375.,  390.,  405.,  420.,    0.,    0.,  311.,  322.,  333.,  344.,  728.,  752.,  776.,  800., 1259., 1298.,  916.,  944.,  972., 1000.,  525.,  540.,  555.,  570.,    0.,    0.,  217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  832.,  856.,  593.,  610.,  627.,  644.,  333.,  342.,  351.,  360.,    0.,    0.,  287.,  294.,  301.,  308.,  643.,  658.,  673.,  688., 1072., 1096.,  763.,  780.,  797.,  814.,  423.,  432.,  441.,  450.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   10.,   20.,   30.,   40.,   61.,   82.,  103.,  124.,  157.,  190.,  113.,  136.,  159.,  182.,   84.,   96.,  108.,  120.,    0.,    0.,  110.,  120.,  130.,  140.,  271.,  292.,  313.,  334.,  487.,  520.,  343.,  366.,  389.,  412.,  204.,  216.,  228.,  240.,    0.,    0.,  223.,  246.,  269.,  292.,  560.,  608.,  656.,  704., 1019., 1094.,  716.,  768.,  820.,  872.,  429.,  456.,  483.,  510.,    0.,    0.,  453.,  476.,  499.,  522., 1040., 1088., 1136., 1184., 1769., 1844., 1236., 1288., 1340., 1392.,  699.,  726.,  753.,  780.,    0.,    0.,  699.,  738.,  777.,  816., 1617., 1698., 1779., 1860., 2766., 2892., 1929., 2016., 2103., 2190., 1095., 1140., 1185., 1230.,    0.,    0.,  579.,  608.,  637.,  666., 1316., 1376., 1436., 1496., 2219., 2312., 1536., 1600., 1664., 1728.,  861.,  894.,  927.,  960.,    0.,    0.,  869.,  898.,  927.,  956., 1916., 1976., 2036., 2096., 3149., 3242., 2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290.,    0.,    0.,  496.,  512.,  528.,  544., 1087., 1120., 1153., 1186., 1777., 1828., 1223., 1258., 1293., 1328.,  666.,  684.,  702.,  720.,    0.,    0.,  656.,  672.,  688.,  704., 1417., 1450., 1483., 1516., 2287., 2338., 1573., 1608., 1643., 1678.,  846.,  864.,  882.,  900.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   19.,   38.,   57.,   76.,  115.,  154.,  193.,  232.,  292.,  352.,  203.,  244.,  285.,  326.,  147.,  168.,  189.,  210.,    0.,    0.,  209.,  228.,  247.,  266.,  505.,  544.,  583.,  622.,  892.,  952.,  613.,  654.,  695.,  736.,  357.,  378.,  399.,  420.,    0.,    0.,  421.,  462.,  503.,  544., 1028., 1112., 1196., 1280., 1829., 1958., 1256., 1344., 1432., 1520.,  735.,  780.,  825.,  870.,    0.,    0.,  831.,  872.,  913.,  954., 1868., 1952., 2036., 2120., 3119., 3248., 2136., 2224., 2312., 2400., 1185., 1230., 1275., 1320.,    0.,    0., 1266., 1332., 1398., 1464., 2859., 2994., 3129., 3264., 4791., 4998., 3279., 3420., 3561., 3702., 1824., 1896., 1968., 2040.,    0.,    0.,  957., 1004., 1051., 1098., 2144., 2240., 2336., 2432., 3569., 3716., 2436., 2536., 2636., 2736., 1347., 1398., 1449., 1500.,    0.,    0., 1427., 1474., 1521., 1568., 3104., 3200., 3296., 3392., 5039., 5186., 3436., 3536., 3636., 3736., 1857., 1908., 1959., 2010.,    0.,    0.,  775.,  800.,  825.,  850., 1681., 1732., 1783., 1834., 2722., 2800., 1853., 1906., 1959., 2012.,  999., 1026., 1053., 1080.,    0.,    0., 1025., 1050., 1075., 1100., 2191., 2242., 2293., 2344., 3502., 3580., 2383., 2436., 2489., 2542., 1269., 1296., 1323., 1350.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,   977.,   752.,   804.,  1265.,  1355.,   988.,  1056.,  1124.,  1192.,   264.,   316.,   700.,   820.,   940.,  1060.,  1684.,  1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,  2788.,  3004.,   592.,   644.,  1708.,  1828.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  3760.,  4012.,  2060.,  2244.,  4436.,  4736.,  2340.,  2556.,  2772.,  2988.,  1349.,  1487.,  2940.,  3240.,  3540.,  3840.,  5697.,  6183.,  4216.,  4564.,  6711.,  7269.,  4892.,  5288.,  7725.,  8355.,  5568.,  6012.,  6456.,  6900.,  1132.,  1264.,  4068.,  4348.,  2900.,  3180.,  6464.,  6908.,  3180.,  3492.,  7140.,  7632.,  3460.,  3804.,  7816.,  8356.,  3740.,  4116.,  4492.,  4868.,  2799.,  3057.,  5840.,  6380.,  6920.,  7460., 10767., 11613.,  7596.,  8184., 11781., 12699.,  8272.,  8908., 12795., 13785.,  8948.,  9632., 10316., 11000.,  1672.,  1884.,  6428.,  6868.,  4300.,  4740.,  9844., 10528.,  4580.,  5052., 10520., 11252.,  4860.,  5364., 11196., 11976.,  5140.,  5676.,  6212.,  6748.,  4249.,  4627.,  8740.,  9520., 10300., 11080., 15837., 17043., 10976., 11804., 16851., 18129., 11652., 12528., 17865., 19215., 12328., 13252., 14176., 15100.,  2212.,  2504.,  8788.,  9388.,  5700.,  6300., 13224., 14148.,  5980.,  6612., 13900., 14872.,  6260.,  6924., 14576., 15596.,  6540.,  7236.,  7932.,  8628.,  5132.,  5424., 10500., 11100., 11700., 12300., 17920., 18844., 12300., 12932., 18820., 19792., 12900., 13564., 19720., 20740., 13500., 14196., 14892., 15588.,  2627.,  2833.,  5340.,  5760.,  6180.,  6600.,  9407., 10049.,  6416.,  6852.,  9761., 10427.,  6652.,  7104., 10115., 10805.,  6888.,  7356.,  7824.,  8292.,  5364.,  5816., 10900., 11820., 12740., 13660., 19192., 20340., 12508., 13204., 18684., 19624., 11252., 11724., 17152., 17884., 11724., 12228., 12732., 13236.,  3292.,  3744., 13508., 14428.,  8500.,  9420., 17232., 18380.,  5516.,  6212., 14132., 15072.,  1508.,  1980., 10008., 10740.,  1788.,  2292.,  2796.,  3300.,  7895.,  8377., 16032., 17020., 18008., 18996., 22087., 23349., 12860., 13640., 16765., 17843.,  6688.,  7260., 10419., 11313.,  7364.,  7984.,  8604.,  9224.,   568.,   844.,  9340.,  9908.,  2348.,  2916.,  4164.,  4784.,  2436.,  2780.,  4136.,  4548.,  1500.,  1620.,  3084.,  3288.,  1780.,  1932.,  2084.,  2236.,  3521.,  3867.,  7284.,  8000.,  8716.,  9432., 11221., 12075.,  6640.,  7148.,  8971.,  9641.,  3540.,  3840.,  5697.,  6183.,  4216.,  4564.,  4912.,  5260.,   916.,  1016.,  3124.,  3340.,  2340.,  2556.,  5112.,  5460.,  2620.,  2868.,  5788.,  6184.,  2900.,  3180.,  6464.,  6908.,  3180.,  3492.,  3804.,  4116.,  2219.,  2429.,  4680.,  5124.,  5568.,  6012.,  8739.,  9441.,  6244.,  6736.,  9753., 10527.,  6920.,  7460., 10767., 11613.,  7596.,  8184.,  8772.,  9360.,  1456.,  1636.,  5484.,  5860.,  3740.,  4116.,  8492.,  9080.,  4020.,  4428.,  9168.,  9804.,  4300.,  4740.,  9844., 10528.,  4580.,  5052.,  5524.,  5996.,  3256.,  3436.,  6748.,  7124.,  7500.,  7876., 11620., 12208.,  8100.,  8508., 12520., 13156.,  8700.,  9140., 13420., 14104.,  9300.,  9772., 10244., 10716.,  1913.,  2063.,  3912.,  4220.,  4528.,  4836.,  6929.,  7403.,  4764.,  5088.,  7283.,  7781.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  5948.,  6304.,  3936.,  4276.,  8044.,  8740.,  9436., 10132., 14428., 15496.,  9908., 10636., 15136., 16252., 10380., 11140., 15844., 17008., 10852., 11644., 12436., 13228.,  2536.,  2876., 10204., 10900.,  6540.,  7236., 15252., 16320.,  6820.,  7548., 15928., 17044.,  7100.,  7860., 16604., 17768.,  7380.,  8172.,  8964.,  9756.,  6569.,  7139., 13380., 14544., 15708., 16872., 23949., 25731., 16384., 17596., 24963., 26817., 17060., 18320., 25785., 27455., 17032., 18084., 19136., 20188.,  3076.,  3496., 12564., 13420.,  7940.,  8796., 18632., 19940.,  8220.,  9108., 19308., 20664.,  8500.,  9420., 17232., 18380.,  5516.,  6212.,  6908.,  7604.,  7315.,  7749., 14872., 15764., 16656., 17548., 25371., 26745., 17332., 18272., 26385., 27831., 18008., 18996., 22087., 23349., 12860., 13640., 14420., 15200.,   352.,   596.,  8396.,  8900.,  1788.,  2292., 10684., 11464.,  2068.,  2604., 11360., 12188.,  2348.,  2916.,  4164.,  4784.,  2436.,  2780.,  3124.,  3468.,  2941.,  3239.,  6124.,  6744.,  7364.,  7984., 11433., 12399.,  8040.,  8708., 12447., 13485.,  8716.,  9432., 11221., 12075.,  6640.,  7148.,  7656.,  8164.,   700.,   768.,  2180.,  2332.,  1780.,  1932.,  3760.,  4012.,  2060.,  2244.,  4436.,  4736.,  2340.,  2556.,  5112.,  5460.,  2620.,  2868.,  3116.,  3364.,  1380.,  1448.,  2996.,  3148.,  3300.,  3452.,  5320.,  5572.,  3900.,  4084.,  6220.,  6520.,  4500.,  4716.,  7120.,  7468.,  5100.,  5348.,  5596.,  5844.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,     0.,     0.,    65.,    71.,    77.,    83.,   240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,     0.,     0.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1260.,  1380.,  1500.,  1620.,   900.,   968.,  1036.,  1104.,     0.,     0.,   508.,   544.,   388.,   424.,  1300.,  1388.,  1028.,  1116.,  2376.,  2532.,  1308.,  1428.,  1548.,  1668.,   876.,   944.,  1012.,  1080.,     0.,     0.,   717.,   807.,   897.,   987.,  2036.,  2240.,  2444.,  2648.,  4053.,  4395.,  3120.,  3372.,  3624.,  3876.,  2029.,  2167.,  2305.,  2443.,     0.,     0.,  1504.,  1588.,   712.,   796.,  2716.,  2900.,  1868.,  2052.,  4404.,  4704.,  2148.,  2364.,  2580.,  2796.,  1392.,  1508.,  1624.,  1740.,     0.,     0.,  1384.,  1468.,  1552.,  1636.,  3340.,  3524.,  3708.,  3892.,  5932.,  6232.,  4308.,  4524.,  4740.,  4956.,  2552.,  2668.,  2784.,  2900.,     0.,     0.,  1661.,  1715.,    41.,    95.,  2056.,  2172.,   304.,   420.,  2689.,  2875.,   348.,   480.,   612.,   744.,   333.,   403.,   473.,   543.,     0.,     0.,   473.,   527.,   581.,   635.,  1232.,  1348.,  1464.,  1580.,  2309.,  2495.,  1668.,  1800.,  1932.,  2064.,  1033.,  1103.,  1173.,  1243.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    59.,   137.,   215.,   293.,   436.,   600.,   764.,   928.,  1163.,  1421.,   840.,  1020.,  1200.,  1380.,   635.,   729.,   823.,   917.,     0.,     0.,   839.,   917.,   995.,  1073.,  2076.,  2240.,  2404.,  2568.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,  1575.,  1669.,  1763.,  1857.,     0.,     0.,  1696.,  1876.,  2056.,  2236.,  4284.,  4660.,  5036.,  5412.,  7828.,  8416.,  5508.,  5916.,  6324.,  6732.,  3312.,  3524.,  3736.,  3948.,     0.,     0.,  3496.,  3676.,  1360.,  1540.,  5548.,  5924.,  3548.,  3924.,  8460.,  9048.,  3828.,  4236.,  4644.,  5052.,  2424.,  2636.,  2848.,  3060.,     0.,     0.,  2895.,  3201.,  3507.,  3813.,  7256.,  7892.,  8528.,  9164., 13179., 14169.,  9204.,  9888., 10572., 11256.,  5503.,  5857.,  6211.,  6565.,     0.,     0.,  4492.,  4720.,  1684.,  1912.,  6964.,  7436.,  4388.,  4860., 10488., 11220.,  4668.,  5172.,  5676.,  6180.,  2940.,  3200.,  3460.,  3720.,     0.,     0.,  3508.,  3736.,  3964.,  4192.,  8164.,  8636.,  9108.,  9580., 14032., 14764.,  9708., 10212., 10716., 11220.,  5540.,  5800.,  6060.,  6320.,     0.,     0.,  3875.,  4001.,    95.,   221.,  4468.,  4728.,   700.,   960.,  5587.,  5989.,   744.,  1020.,  1296.,  1572.,   675.,   817.,   959.,  1101.,     0.,     0.,  1103.,  1229.,  1355.,  1481.,  2780.,  3040.,  3300.,  3560.,  5063.,  5465.,  3504.,  3780.,  4056.,  4332.,  2095.,  2237.,  2379.,  2521.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   113.,   263.,   413.,   563.,   832.,  1140.,  1448.,  1756.,  2189.,  2663.,  1524.,  1848.,  2172.,  2496.,  1121.,  1287.,  1453.,  1619.,     0.,     0.,  1613.,  1763.,  1913.,  2063.,  3912.,  4220.,  4528.,  4836.,  6929.,  7403.,  4764.,  5088.,  5412.,  5736.,  2781.,  2947.,  3113.,  3279.,     0.,     0.,  3244.,  3568.,  3892.,  4216.,  7956.,  8620.,  9284.,  9948., 14200., 15220.,  9756., 10452., 11148., 11844.,  5724.,  6080.,  6436.,  6792.,     0.,     0.,  6484.,  6808.,  2332.,  2656.,  9796., 10460.,  6068.,  6732., 14544., 15564.,  6348.,  7044.,  7740.,  8436.,  3972.,  4328.,  4684.,  5040.,     0.,     0.,  5073.,  5595.,  6117.,  6639., 12476., 13544., 14612., 15680., 22305., 23943., 15288., 16404., 17520., 18636.,  8977.,  9547., 10117., 10687.,     0.,     0.,  7480.,  7852.,  2656.,  3028., 11212., 11972.,  6908.,  7668., 16572., 17736.,  7188.,  7980.,  8772.,  9564.,  4488.,  4892.,  5296.,  5700.,     0.,     0.,  5632.,  6004.,  6376.,  6748., 12988., 13748., 14508., 15268., 22132., 23296., 15108., 15900., 16692., 17484.,  8528.,  8932.,  9336.,  9740.,     0.,     0.,  6089.,  6287.,   149.,   347.,  6880.,  7284.,  1096.,  1500.,  8485.,  9103.,  1140.,  1560.,  1980.,  2400.,  1017.,  1231.,  1445.,  1659.,     0.,     0.,  1733.,  1931.,  2129.,  2327.,  4328.,  4732.,  5136.,  5540.,  7817.,  8435.,  5340.,  5760.,  6180.,  6600.,  3157.,  3371.,  3585.,  3799.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  1784.,  2456.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  3980.,  5436.,  1012.,  1540.,  5496.,  6680.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  4466.,  5418.,  3036.,  4620.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  3628.,  5340.,  1684.,  2468.,  4472.,  5656.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  4312.,  5240.,  4828.,  6412.,  5496.,  6680.,  3468.,  4924.,  3288.,  4216.,  3480.,  4408.,   486.,   590.,  1140.,  1412.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  3530.,  4418.,  1860.,  2516.,  3172.,  3828.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  3564.,  4764.,  4312.,  5240.,  2456.,  3384.,  2036.,  2564.,  5496.,  6680.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  4988.,  6828.,  1348.,  2004.,  6680.,  8120.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  5496.,  6680.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,   340.,   612.,  3128.,  3800.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  6680.,  8120.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  4316.,  5900.,  1700.,  2100.,  4312.,  5240.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  3128.,  3800.,  2500.,  2900.,  2456.,  3384.,  4312.,  5240.,  4828.,  6412.,  5496.,  6680.,  3468.,  4924.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  1784.,  2456.,   782.,   950.,  1732.,  2132.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  3530.,  4418.,  1860.,  2516.,  4290.,  5370.,  2196.,  2980.,  3764.,  4548.,  2404.,  3060.,  3480.,  4408.,  5336.,  6264.,  2876.,  4204.,  3128.,  3800.,  3564.,  4764.,  4312.,  5240.,  4572.,  6156.,  5496.,  6680.,  3128.,  4312.,  2372.,  3028.,  5336.,  6264.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  5496.,  6680.,  4466.,  5418.,  3036.,  4620.,  6204.,  7788.,  6286.,  8694.,  6636.,  8092.,  5302.,  7774.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  3628.,  5340.,  1684.,  2468.,  4472.,  5656.,  4152.,  5336.,  8332., 10044.,  2456.,  3384.,  6716.,  8300.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  5222.,  7566.,  6204.,  7788.,  5340.,  6924.,   676.,  1076.,  4312.,  5240.,  2456.,  3384.,  7740.,  9324.,  3128.,  4312.,  9516., 11484.,  3800.,  5240.,  7900.,  9740.,  4152.,  5336.,  6520.,  7704.,  2594.,  3418.,  4732.,  6572.,  8412., 10252.,  6366.,  8902.,  8844., 10556.,  5382.,  7982.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  2956.,  4412.,  2036.,  2564.,  5496.,  6680.,  3128.,  4312.,  7148.,  8604.,  1432.,  2360.,  5532.,  6860.,  1784.,  2456.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  3288.,  4216.,  4156.,  5484.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  2456.,  3384.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1140.,  1412.,   852.,  1124.,  1118.,  1286.,   110.,   278.,     0.,     0.,   110.,   150.,   190.,   230.,   548.,   692.,   516.,   660.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,     0.,     0.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  4312.,  5240.,  2456.,  3384.,  2836.,  3364.,  1012.,  1540.,     0.,     0.,   884.,  1156.,  1108.,  1380.,  3128.,  3800.,  1784.,  2456.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,     0.,     0.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278.,  7660.,  9116.,  2956.,  4412.,  2338.,  2906.,  1810.,  2378.,     0.,     0.,  2660.,  3316.,  2116.,  2772.,  6680.,  8120.,  3800.,  5240.,  9180., 11020.,  2104.,  3288.,  4472.,  5656.,  1700.,  2100.,  2500.,  2900.,     0.,     0.,  2116.,  2772.,  3428.,  4084.,  3800.,  5240.,  6680.,  8120.,  4220.,  6060.,  4472.,  5656.,  4152.,  5336.,  2500.,  2900.,   420.,   820.,     0.,     0.,  2814.,  3238.,   270.,   694.,  4356.,  5268.,  2276.,  3188.,  4370.,  5322.,  2292.,  2820.,  3348.,  3876.,   190.,   230.,   270.,   310.,     0.,     0.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2562.,  3514.,  3348.,  3876.,   500.,  1028.,   270.,   310.,    30.,    70.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  1732.,  2132.,  1188.,  1588.,  1542.,  1774.,   150.,   382.,     0.,     0.,   278.,   382.,   486.,   590.,  1140.,  1412.,   852.,  1124.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,     0.,     0.,   676.,  1076.,  1476.,  1876.,  2456.,  3384.,  4312.,  5240.,  3804.,  5388.,  5496.,  6680.,  3128.,  4312.,  3428.,  4084.,  1348.,  2004.,     0.,     0.,  1476.,  1876.,  1444.,  1844.,  4312.,  5240.,  2456.,  3384.,  6972.,  8556.,  3128.,  4312.,  5496.,  6680.,  1348.,  2004.,  2660.,  3316.,     0.,     0.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  6044.,  7372.,  3644.,  4972.,  3354.,  4114.,  2186.,  2946.,     0.,     0.,  3252.,  4036.,  2452.,  3236.,  6520.,  7704.,  2104.,  3288.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,     0.,     0.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  4312.,  5240.,  2456.,  3384.,  3092.,  3620.,   756.,  1284.,     0.,     0.,  3238.,  3726.,   310.,   798.,  1556.,  2084.,  2292.,  2820.,  4042.,  4674.,   260.,   404.,   548.,   692.,   486.,   590.,   694.,   798.,     0.,     0.,   310.,   798.,  1286.,  1774.,  2292.,  2820.,  3348.,  3876.,   570.,  1202.,   548.,   692.,   516.,   660.,   694.,   798.,    70.,   174.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   110.,   278.,   446.,   614.,   932.,  1332.,  1732.,  2132.,  1378.,  2074.,  2324.,  2852.,  1524.,  2052.,  1966.,  2262.,   190.,   486.,     0.,     0.,   446.,   614.,   782.,   950.,  1732.,  2132.,  1188.,  1588.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,   190.,   486.,   782.,  1078.,     0.,     0.,  1012.,  1540.,  2068.,  2596.,  3128.,  4312.,  5496.,  6680.,  4812.,  6780.,  6680.,  8120.,  3800.,  5240.,  4020.,  4804.,  1684.,  2468.,     0.,     0.,  2068.,  2596.,  1780.,  2308.,  5496.,  6680.,  3128.,  4312.,  8748., 10716.,  3800.,  5240.,  6680.,  8120.,  1684.,  2468.,  3252.,  4036.,     0.,     0.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486.,  7820.,  9532.,  4652.,  6364.,  4370.,  5322.,  2562.,  3514.,     0.,     0.,  2500.,  2900.,   420.,   820.,  4312.,  5240.,  2456.,  3384.,  7996.,  9580.,  3128.,  4312.,  5496.,  6680.,  2372.,  3028.,  3684.,  4340.,     0.,     0.,   420.,   820.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  5496.,  6680.,  3128.,  4312.,  3684.,  4340.,  1092.,  1748.,     0.,     0.,   270.,   310.,    30.,    70.,   804.,   948.,   260.,   404.,  1666.,  1978.,   596.,   868.,  1140.,  1412.,   782.,   950.,  1118.,  1286.,     0.,     0.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1140.,  1412.,   852.,  1124.,  1118.,  1286.,   110.,   278.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,   220.,   332.,   344.,   356.,   368.,   257.,   266.,   275.,   284.,   293.,   302.,   311.,   320.,    75.,    82.,    89.,    96.,   192.,   208.,   224.,   240.,   256.,   272.,   288.,   304.,   451.,   478.,   505.,   532.,   372.,   392.,   412.,   432.,   625.,   658.,   691.,   724.,   488.,   512.,   536.,   560.,   799.,   838.,   877.,   916.,   604.,   632.,   660.,   688.,   716.,   744.,   772.,   800.,   215.,   222.,   229.,   236.,   512.,   528.,   544.,   560.,   576.,   592.,   608.,   624.,   991.,  1018.,  1045.,  1072.,   772.,   792.,   812.,   832.,  1285.,  1318.,  1351.,  1384.,   968.,   992.,  1016.,  1040.,  1579.,  1618.,  1657.,  1696.,  1164.,  1192.,  1220.,  1248.,  1276.,  1304.,  1332.,  1360.,   410.,   428.,   446.,   464.,   943.,   982.,  1021.,  1060.,  1099.,  1138.,  1177.,  1216.,  1839.,  1902.,  1965.,  2028.,  1393.,  1438.,  1483.,  1528.,  2280.,  2352.,  2424.,  2496.,  1687.,  1738.,  1789.,  1840.,  2721.,  2802.,  2883.,  2964.,  1981.,  2038.,  2095.,  2152.,  2209.,  2266.,  2323.,  2380.,   665.,   682.,   699.,   716.,  1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,  1664.,  2461.,  2518.,  2575.,  2632.,  1752.,  1792.,  1832.,  1872.,  2755.,  2818.,  2881.,  2944.,  1948.,  1992.,  2036.,  2080.,  3049.,  3118.,  3187.,  3256.,  2144.,  2192.,  2240.,  2288.,  2336.,  2384.,  2432.,  2480.,  1085.,  1118.,  1151.,  1184.,  2293.,  2362.,  2431.,  2500.,  2569.,  2638.,  2707.,  2776.,  4044.,  4152.,  4260.,  4368.,  2863.,  2938.,  3013.,  3088.,  4485.,  4602.,  4719.,  4836.,  3157.,  3238.,  3319.,  3400.,  4926.,  5052.,  5178.,  5304.,  3451.,  3538.,  3625.,  3712.,  3799.,  3886.,  3973.,  4060.,  1115.,  1142.,  1169.,  1196.,  2312.,  2368.,  2424.,  2480.,  2536.,  2592.,  2648.,  2704.,  3931.,  4018.,  4105.,  4192.,  2732.,  2792.,  2852.,  2912.,  4225.,  4318.,  4411.,  4504.,  2928.,  2992.,  3056.,  3120.,  4519.,  4618.,  4717.,  4816.,  3124.,  3192.,  3260.,  3328.,  3396.,  3464.,  3532.,  3600.,  1760.,  1808.,  1856.,  1904.,  3643.,  3742.,  3841.,  3940.,  4039.,  4138.,  4237.,  4336.,  6249.,  6402.,  6555.,  6708.,  4333.,  4438.,  4543.,  4648.,  6690.,  6852.,  7014.,  7176.,  4627.,  4738.,  4849.,  4960.,  7131.,  7302.,  7473.,  7644.,  4921.,  5038.,  5155.,  5272.,  5389.,  5506.,  5623.,  5740.,  1565.,  1602.,  1639.,  1676.,  3212.,  3288.,  3364.,  3440.,  3516.,  3592.,  3668.,  3744.,  5401.,  5518.,  5635.,  5752.,  3712.,  3792.,  3872.,  3952.,  5695.,  5818.,  5941.,  6064.,  3908.,  3992.,  4076.,  4160.,  5989.,  6118.,  6247.,  6376.,  4104.,  4192.,  4280.,  4368.,  4456.,  4544.,  4632.,  4720.,  2305.,  2342.,  2379.,  2416.,  4732.,  4808.,  4884.,  4960.,  5036.,  5112.,  5188.,  5264.,  7741.,  7858.,  7975.,  8092.,  5312.,  5392.,  5472.,  5552.,  8155.,  8278.,  8401.,  8524.,  5588.,  5672.,  5756.,  5840.,  8569.,  8698.,  8827.,  8956.,  5864.,  5952.,  6040.,  6128.,  6216.,  6304.,  6392.,  6480.,   650.,   676.,   702.,   728.,  1321.,  1374.,  1427.,  1480.,  1533.,  1586.,  1639.,  1692.,  2333.,  2414.,  2495.,  2576.,  1591.,  1646.,  1701.,  1756.,  2420.,  2504.,  2588.,  2672.,  1649.,  1706.,  1763.,  1820.,  2507.,  2594.,  2681.,  2768.,  1707.,  1766.,  1825.,  1884.,  1943.,  2002.,  2061.,  2120.,  1325.,  1382.,  1439.,  1496.,  2692.,  2808.,  2924.,  3040.,  3156.,  3272.,  3388.,  3504.,  4801.,  4978.,  5155.,  5332.,  3272.,  3392.,  3512.,  3632.,  4975.,  5158.,  5341.,  5524.,  3388.,  3512.,  3636.,  3760.,  5149.,  5338.,  5527.,  5716.,  3504.,  3632.,  3760.,  3888.,  4016.,  4144.,  4272.,  4400.,  2465.,  2522.,  2579.,  2636.,  5012.,  5128.,  5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,  8695.,  8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,  9184.,  5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,  6064.,  6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,  3878.,  3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,  8827.,  9016., 12864., 13152., 13440., 13728.,  8743.,  8938.,  9133.,  9328., 13305., 13602., 13899., 14196.,  9037.,  9238.,  9439.,  9640., 13746., 14052., 14358., 14664.,  9331.,  9538.,  9745.,  9952., 10159., 10366., 10573., 10780.,  2915.,  2982.,  3049.,  3116.,  5912.,  6048.,  6184.,  6320.,  6456.,  6592.,  6728.,  6864.,  9811., 10018., 10225., 10432.,  6652.,  6792.,  6932.,  7072., 10105., 10318., 10531., 10744.,  6848.,  6992.,  7136.,  7280., 10399., 10618., 10837., 11056.,  7044.,  7192.,  7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4460.,  4568.,  4676.,  4784.,  9043.,  9262.,  9481.,  9700.,  9919., 10138., 10357., 10576., 15069., 15402., 15735., 16068., 10213., 10438., 10663., 10888., 15510., 15852., 16194., 16536., 10507., 10738., 10969., 11200., 15951., 16302., 16653., 17004., 10801., 11038., 11275., 11512., 11749., 11986., 12223., 12460.,  3365.,  3442.,  3519.,  3596.,  6812.,  6968.,  7124.,  7280.,  7436.,  7592.,  7748.,  7904., 11281., 11518., 11755., 11992.,  7632.,  7792.,  7952.,  8112., 11575., 11818., 12061., 12304.,  7828.,  7992.,  8156.,  8320., 11869., 12118., 12367., 12616.,  8024.,  8192.,  8360.,  8528.,  8696.,  8864.,  9032.,  9200.,  5135.,  5258.,  5381.,  5504., 10393., 10642., 10891., 11140., 11389., 11638., 11887., 12136., 17274., 17652., 18030., 18408., 11683., 11938., 12193., 12448., 17715., 18102., 18489., 18876., 11977., 12238., 12499., 12760., 18156., 18552., 18948., 19344., 12271., 12538., 12805., 13072., 13339., 13606., 13873., 14140.,  3815.,  3902.,  3989.,  4076.,  7712.,  7888.,  8064.,  8240.,  8416.,  8592.,  8768.,  8944., 12751., 13018., 13285., 13552.,  8612.,  8792.,  8972.,  9152., 13045., 13318., 13591., 13864.,  8808.,  8992.,  9176.,  9360., 13339., 13618., 13897., 14176.,  9004.,  9192.,  9380.,  9568.,  9756.,  9944., 10132., 10320.,  5555.,  5642.,  5729.,  5816., 11232., 11408., 11584., 11760., 11936., 12112., 12288., 12464., 18091., 18358., 18625., 18892., 12212., 12392., 12572., 12752., 18505., 18778., 19051., 19324., 12488., 12672., 12856., 13040., 18919., 19198., 19477., 19756., 12764., 12952., 13140., 13328., 13516., 13704., 13892., 14080.,  1275.,  1326.,  1377.,  1428.,  2571.,  2674.,  2777.,  2880.,  2983.,  3086.,  3189.,  3292.,  4508.,  4664.,  4820.,  4976.,  3041.,  3146.,  3251.,  3356.,  4595.,  4754.,  4913.,  5072.,  3099.,  3206.,  3313.,  3420.,  4682.,  4844.,  5006.,  5168.,  3157.,  3266.,  3375.,  3484.,  3593.,  3702.,  3811.,  3920.,  2575.,  2682.,  2789.,  2896.,  5192.,  5408.,  5624.,  5840.,  6056.,  6272.,  6488.,  6704.,  9151.,  9478.,  9805., 10132.,  6172.,  6392.,  6612.,  6832.,  9325.,  9658.,  9991., 10324.,  6288.,  6512.,  6736.,  6960.,  9499.,  9838., 10177., 10516.,  6404.,  6632.,  6860.,  7088.,  7316.,  7544.,  7772.,  8000.,  4715.,  4822.,  4929.,  5036.,  9512.,  9728.,  9944., 10160., 10376., 10592., 10808., 11024., 15691., 16018., 16345., 16672., 10572., 10792., 11012., 11232., 15985., 16318., 16651., 16984., 10768., 10992., 11216., 11440., 16279., 16618., 16957., 17296., 10964., 11192., 11420., 11648., 11876., 12104., 12332., 12560.,  7160.,  7328.,  7496.,  7664., 14443., 14782., 15121., 15460., 15799., 16138., 16477., 16816., 23889., 24402., 24915., 25428., 16093., 16438., 16783., 17128., 24330., 24852., 25374., 25896., 16387., 16738., 17089., 17440., 24771., 25302., 25833., 26364., 16681., 17038., 17395., 17752., 18109., 18466., 18823., 19180.,  5165.,  5282.,  5399.,  5516., 10412., 10648., 10884., 11120., 11356., 11592., 11828., 12064., 17161., 17518., 17875., 18232., 11552., 11792., 12032., 12272., 17455., 17818., 18181., 18544., 11748., 11992., 12236., 12480., 17749., 18118., 18487., 18856., 11944., 12192., 12440., 12688., 12936., 13184., 13432., 13680.,  7835.,  8018.,  8201.,  8384., 15793., 16162., 16531., 16900., 17269., 17638., 18007., 18376., 26094., 26652., 27210., 27768., 17563., 17938., 18313., 18688., 26535., 27102., 27669., 28236., 17857., 18238., 18619., 19000., 26976., 27552., 28128., 28704., 18151., 18538., 18925., 19312., 19699., 20086., 20473., 20860.,  5615.,  5742.,  5869.,  5996., 11312., 11568., 11824., 12080., 12336., 12592., 12848., 13104., 18631., 19018., 19405., 19792., 12532., 12792., 13052., 13312., 18925., 19318., 19711., 20104., 12728., 12992., 13256., 13520., 19219., 19618., 20017., 20416., 12924., 13192., 13460., 13728., 13996., 14264., 14532., 14800.,  8510.,  8708.,  8906.,  9104., 17143., 17542., 17941., 18340., 18739., 19138., 19537., 19936., 28299., 28902., 29505., 30108., 19033., 19438., 19843., 20248., 28740., 29352., 29964., 30576., 19327., 19738., 20149., 20560., 29181., 29802., 30423., 31044., 19621., 20038., 20455., 20872., 21289., 21706., 22123., 22540.,  6065.,  6202.,  6339.,  6476., 12212., 12488., 12764., 13040., 13316., 13592., 13868., 14144., 20101., 20518., 20935., 21352., 13512., 13792., 14072., 14352., 20395., 20818., 21241., 21664., 13708., 13992., 14276., 14560., 20689., 21118., 21547., 21976., 13904., 14192., 14480., 14768., 15056., 15344., 15632., 15920.,  8805.,  8942.,  9079.,  9216., 17732., 18008., 18284., 18560., 18836., 19112., 19388., 19664., 28441., 28858., 29275., 29692., 19112., 19392., 19672., 19952., 28855., 29278., 29701., 30124., 19388., 19672., 19956., 20240., 29269., 29698., 30127., 30556., 19664., 19952., 20240., 20528., 20816., 21104., 21392., 21680.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     5.,     6.,     7.,     8.,    11.,    14.,    17.,    20.,    23.,    26.,    29.,    32.,    38.,    44.,    50.,    56.,    41.,    46.,    51.,    56.,    61.,    66.,    71.,    76.,    39.,    42.,    45.,    48.,    51.,    54.,    57.,    60.,     0.,     0.,     0.,     0.,    21.,    22.,    23.,    24.,    25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,   158.,   164.,   170.,   176.,   141.,   146.,   151.,   156.,   161.,   166.,   171.,   176.,    99.,   102.,   105.,   108.,   111.,   114.,   117.,   120.,     0.,     0.,     0.,     0.,    45.,    50.,    55.,    60.,    65.,    70.,    75.,    80.,   172.,   184.,   196.,   208.,   220.,   232.,   244.,   256.,   397.,   418.,   439.,   460.,   336.,   352.,   368.,   384.,   400.,   416.,   432.,   448.,   237.,   246.,   255.,   264.,   273.,   282.,   291.,   300.,     0.,     0.,     0.,     0.,   145.,   150.,   155.,   160.,   165.,   170.,   175.,   180.,   412.,   424.,   436.,   448.,   460.,   472.,   484.,   496.,   817.,   838.,   859.,   880.,   656.,   672.,   688.,   704.,   720.,   736.,   752.,   768.,   417.,   426.,   435.,   444.,   453.,   462.,   471.,   480.,     0.,     0.,     0.,     0.,   252.,   264.,   276.,   288.,   300.,   312.,   324.,   336.,   723.,   750.,   777.,   804.,   831.,   858.,   885.,   912.,  1437.,  1482.,  1527.,  1572.,  1125.,  1158.,  1191.,  1224.,  1257.,  1290.,  1323.,  1356.,   714.,   732.,   750.,   768.,   786.,   804.,   822.,   840.,     0.,     0.,     0.,     0.,   391.,   402.,   413.,   424.,   435.,   446.,   457.,   468.,   952.,   976.,  1000.,  1024.,  1048.,  1072.,  1096.,  1120.,  1699.,  1738.,  1777.,  1816.,  1244.,  1272.,  1300.,  1328.,  1356.,  1384.,  1412.,  1440.,   735.,   750.,   765.,   780.,   795.,   810.,   825.,   840.,     0.,     0.,     0.,     0.,   611.,   622.,   633.,   644.,   655.,   666.,   677.,   688.,  1432.,  1456.,  1480.,  1504.,  1528.,  1552.,  1576.,  1600.,  2479.,  2518.,  2557.,  2596.,  1804.,  1832.,  1860.,  1888.,  1916.,  1944.,  1972.,  2000.,  1035.,  1050.,  1065.,  1080.,  1095.,  1110.,  1125.,  1140.,     0.,     0.,     0.,     0.,   427.,   434.,   441.,   448.,   455.,   462.,   469.,   476.,   971.,   986.,  1001.,  1016.,  1031.,  1046.,  1061.,  1076.,  1640.,  1664.,  1688.,  1712.,  1169.,  1186.,  1203.,  1220.,  1237.,  1254.,  1271.,  1288.,   657.,   666.,   675.,   684.,   693.,   702.,   711.,   720.,     0.,     0.,     0.,     0.,   567.,   574.,   581.,   588.,   595.,   602.,   609.,   616.,  1271.,  1286.,  1301.,  1316.,  1331.,  1346.,  1361.,  1376.,  2120.,  2144.,  2168.,  2192.,  1509.,  1526.,  1543.,  1560.,  1577.,  1594.,  1611.,  1628.,   837.,   846.,   855.,   864.,   873.,   882.,   891.,   900.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    10.,    20.,    30.,    40.,    50.,    60.,    70.,    80.,   101.,   122.,   143.,   164.,   185.,   206.,   227.,   248.,   281.,   314.,   347.,   380.,   203.,   226.,   249.,   272.,   295.,   318.,   341.,   364.,   156.,   168.,   180.,   192.,   204.,   216.,   228.,   240.,     0.,     0.,     0.,     0.,   210.,   220.,   230.,   240.,   250.,   260.,   270.,   280.,   521.,   542.,   563.,   584.,   605.,   626.,   647.,   668.,   941.,   974.,  1007.,  1040.,   663.,   686.,   709.,   732.,   755.,   778.,   801.,   824.,   396.,   408.,   420.,   432.,   444.,   456.,   468.,   480.,     0.,     0.,     0.,     0.,   423.,   446.,   469.,   492.,   515.,   538.,   561.,   584.,  1072.,  1120.,  1168.,  1216.,  1264.,  1312.,  1360.,  1408.,  1963.,  2038.,  2113.,  2188.,  1380.,  1432.,  1484.,  1536.,  1588.,  1640.,  1692.,  1744.,   831.,   858.,   885.,   912.,   939.,   966.,   993.,  1020.,     0.,     0.,     0.,     0.,   883.,   906.,   929.,   952.,   975.,   998.,  1021.,  1044.,  2032.,  2080.,  2128.,  2176.,  2224.,  2272.,  2320.,  2368.,  3463.,  3538.,  3613.,  3688.,  2420.,  2472.,  2524.,  2576.,  2628.,  2680.,  2732.,  2784.,  1371.,  1398.,  1425.,  1452.,  1479.,  1506.,  1533.,  1560.,     0.,     0.,     0.,     0.,  1359.,  1398.,  1437.,  1476.,  1515.,  1554.,  1593.,  1632.,  3153.,  3234.,  3315.,  3396.,  3477.,  3558.,  3639.,  3720.,  5406.,  5532.,  5658.,  5784.,  3771.,  3858.,  3945.,  4032.,  4119.,  4206.,  4293.,  4380.,  2145.,  2190.,  2235.,  2280.,  2325.,  2370.,  2415.,  2460.,     0.,     0.,     0.,     0.,  1129.,  1158.,  1187.,  1216.,  1245.,  1274.,  1303.,  1332.,  2572.,  2632.,  2692.,  2752.,  2812.,  2872.,  2932.,  2992.,  4345.,  4438.,  4531.,  4624.,  3008.,  3072.,  3136.,  3200.,  3264.,  3328.,  3392.,  3456.,  1689.,  1722.,  1755.,  1788.,  1821.,  1854.,  1887.,  1920.,     0.,     0.,     0.,     0.,  1709.,  1738.,  1767.,  1796.,  1825.,  1854.,  1883.,  1912.,  3772.,  3832.,  3892.,  3952.,  4012.,  4072.,  4132.,  4192.,  6205.,  6298.,  6391.,  6484.,  4288.,  4352.,  4416.,  4480.,  4544.,  4608.,  4672.,  4736.,  2349.,  2382.,  2415.,  2448.,  2481.,  2514.,  2547.,  2580.,     0.,     0.,     0.,     0.,   976.,   992.,  1008.,  1024.,  1040.,  1056.,  1072.,  1088.,  2141.,  2174.,  2207.,  2240.,  2273.,  2306.,  2339.,  2372.,  3503.,  3554.,  3605.,  3656.,  2411.,  2446.,  2481.,  2516.,  2551.,  2586.,  2621.,  2656.,  1314.,  1332.,  1350.,  1368.,  1386.,  1404.,  1422.,  1440.,     0.,     0.,     0.,     0.,  1296.,  1312.,  1328.,  1344.,  1360.,  1376.,  1392.,  1408.,  2801.,  2834.,  2867.,  2900.,  2933.,  2966.,  2999.,  3032.,  4523.,  4574.,  4625.,  4676.,  3111.,  3146.,  3181.,  3216.,  3251.,  3286.,  3321.,  3356.,  1674.,  1692.,  1710.,  1728.,  1746.,  1764.,  1782.,  1800.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    19.,    38.,    57.,    76.,    95.,   114.,   133.,   152.,   191.,   230.,   269.,   308.,   347.,   386.,   425.,   464.,   524.,   584.,   644.,   704.,   365.,   406.,   447.,   488.,   529.,   570.,   611.,   652.,   273.,   294.,   315.,   336.,   357.,   378.,   399.,   420.,     0.,     0.,     0.,     0.,   399.,   418.,   437.,   456.,   475.,   494.,   513.,   532.,   971.,  1010.,  1049.,  1088.,  1127.,  1166.,  1205.,  1244.,  1724.,  1784.,  1844.,  1904.,  1185.,  1226.,  1267.,  1308.,  1349.,  1390.,  1431.,  1472.,   693.,   714.,   735.,   756.,   777.,   798.,   819.,   840.,     0.,     0.,     0.,     0.,   801.,   842.,   883.,   924.,   965.,  1006.,  1047.,  1088.,  1972.,  2056.,  2140.,  2224.,  2308.,  2392.,  2476.,  2560.,  3529.,  3658.,  3787.,  3916.,  2424.,  2512.,  2600.,  2688.,  2776.,  2864.,  2952.,  3040.,  1425.,  1470.,  1515.,  1560.,  1605.,  1650.,  1695.,  1740.,     0.,     0.,     0.,     0.,  1621.,  1662.,  1703.,  1744.,  1785.,  1826.,  1867.,  1908.,  3652.,  3736.,  3820.,  3904.,  3988.,  4072.,  4156.,  4240.,  6109.,  6238.,  6367.,  6496.,  4184.,  4272.,  4360.,  4448.,  4536.,  4624.,  4712.,  4800.,  2325.,  2370.,  2415.,  2460.,  2505.,  2550.,  2595.,  2640.,     0.,     0.,     0.,     0.,  2466.,  2532.,  2598.,  2664.,  2730.,  2796.,  2862.,  2928.,  5583.,  5718.,  5853.,  5988.,  6123.,  6258.,  6393.,  6528.,  9375.,  9582.,  9789.,  9996.,  6417.,  6558.,  6699.,  6840.,  6981.,  7122.,  7263.,  7404.,  3576.,  3648.,  3720.,  3792.,  3864.,  3936.,  4008.,  4080.,     0.,     0.,     0.,     0.,  1867.,  1914.,  1961.,  2008.,  2055.,  2102.,  2149.,  2196.,  4192.,  4288.,  4384.,  4480.,  4576.,  4672.,  4768.,  4864.,  6991.,  7138.,  7285.,  7432.,  4772.,  4872.,  4972.,  5072.,  5172.,  5272.,  5372.,  5472.,  2643.,  2694.,  2745.,  2796.,  2847.,  2898.,  2949.,  3000.,     0.,     0.,     0.,     0.,  2807.,  2854.,  2901.,  2948.,  2995.,  3042.,  3089.,  3136.,  6112.,  6208.,  6304.,  6400.,  6496.,  6592.,  6688.,  6784.,  9931., 10078., 10225., 10372.,  6772.,  6872.,  6972.,  7072.,  7172.,  7272.,  7372.,  7472.,  3663.,  3714.,  3765.,  3816.,  3867.,  3918.,  3969.,  4020.,     0.,     0.,     0.,     0.,  1525.,  1550.,  1575.,  1600.,  1625.,  1650.,  1675.,  1700.,  3311.,  3362.,  3413.,  3464.,  3515.,  3566.,  3617.,  3668.,  5366.,  5444.,  5522.,  5600.,  3653.,  3706.,  3759.,  3812.,  3865.,  3918.,  3971.,  4024.,  1971.,  1998.,  2025.,  2052.,  2079.,  2106.,  2133.,  2160.,     0.,     0.,     0.,     0.,  2025.,  2050.,  2075.,  2100.,  2125.,  2150.,  2175.,  2200.,  4331.,  4382.,  4433.,  4484.,  4535.,  4586.,  4637.,  4688.,  6926.,  7004.,  7082.,  7160.,  4713.,  4766.,  4819.,  4872.,  4925.,  4978.,  5031.,  5084.,  2511.,  2538.,  2565.,  2592.,  2619.,  2646.,  2673.,  2700.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,  1323.,  1389.,  1455.,  1521.,   760.,   812.,   864.,   916.,  1757.,  1847.,  1937.,  2027.,   964.,  1032.,  1100.,  1168.,  1236.,  1304.,  1372.,  1440.,   296.,   348.,   400.,   452.,   668.,   788.,   908.,  1028.,  1148.,  1268.,  1388.,  1508.,  1868.,  2072.,  2276.,  2480.,  1556.,  1708.,  1860.,  2012.,  2480.,  2732.,  2984.,  3236.,  1964.,  2148.,  2332.,  2516.,  3092.,  3392.,  3692.,  3992.,  2372.,  2588.,  2804.,  3020.,  3236.,  3452.,  3668.,  3884.,  1144.,  1196.,  1248.,  1300.,  2876.,  2996.,  3116.,  3236.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  4640.,  4892.,  5144.,  5396.,  1996.,  2180.,  2364.,  2548.,  5444.,  5744.,  6044.,  6344.,  2276.,  2492.,  2708.,  2924.,  3140.,  3356.,  3572.,  3788.,  1121.,  1259.,  1397.,  1535.,  2452.,  2752.,  3052.,  3352.,  3652.,  3952.,  4252.,  4552.,  5649.,  6135.,  6621.,  7107.,  4456.,  4804.,  5152.,  5500.,  6599.,  7157.,  7715.,  8273.,  5260.,  5656.,  6052.,  6448.,  7549.,  8179.,  8809.,  9439.,  6064.,  6508.,  6952.,  7396.,  6880.,  7324.,  7768.,  8212.,  2164.,  2296.,  2428.,  2560.,  6196.,  6476.,  6756.,  7036.,  2836.,  3116.,  3396.,  3676.,  7856.,  8300.,  8744.,  9188.,  3116.,  3428.,  3740.,  4052.,  8660.,  9152.,  9644., 10136.,  3396.,  3740.,  4084.,  4428.,  9464., 10004., 10544., 11084.,  3676.,  4052.,  4428.,  4804.,  5180.,  5556.,  5932.,  6308.,  2651.,  2909.,  3167.,  3425.,  5512.,  6052.,  6592.,  7132.,  7672.,  8212.,  8752.,  9292., 10399., 11245., 12091., 12937.,  8476.,  9064.,  9652., 10240., 11349., 12267., 13185., 14103.,  9280.,  9916., 10552., 11188., 12299., 13289., 14279., 15269., 10084., 10768., 11452., 12136., 10580., 11264., 11948., 12632.,  3184.,  3396.,  3608.,  3820.,  9516.,  9956., 10396., 10836.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932., 12680., 13412., 14144., 14876.,  4796.,  5300.,  5804.,  6308., 13484., 14264., 15044., 15824.,  5076.,  5612.,  6148.,  6684.,  7220.,  7756.,  8292.,  8828.,  4181.,  4559.,  4937.,  5315.,  8572.,  9352., 10132., 10912., 11692., 12472., 13252., 14032., 15149., 16355., 17561., 18767., 12496., 13324., 14152., 14980., 16099., 17377., 18655., 19933., 13300., 14176., 15052., 15928., 17049., 18399., 19749., 21099., 14104., 15028., 15952., 16876., 14280., 15204., 16128., 17052.,  4204.,  4496.,  4788.,  5080., 12836., 13436., 14036., 14636.,  5636.,  6236.,  6836.,  7436., 15896., 16820., 17744., 18668.,  5916.,  6548.,  7180.,  7812., 16700., 17672., 18644., 19616.,  6196.,  6860.,  7524.,  8188., 17504., 18524., 19544., 20564.,  6476.,  7172.,  7868.,  8564.,  9260.,  9956., 10652., 11348.,  4732.,  5024.,  5316.,  5608.,  9668., 10268., 10868., 11468., 12068., 12668., 13268., 13868., 14408., 15332., 16256., 17180., 12732., 13364., 13996., 14628., 15148., 16120., 17092., 18064., 13396., 14060., 14724., 15388., 15888., 16908., 17928., 18948., 14060., 14756., 15452., 16148., 12044., 12740., 13436., 14132.,  5099.,  5305.,  5511.,  5717., 10364., 10784., 11204., 11624.,  5452.,  5872.,  6292.,  6712., 11739., 12381., 13023., 13665.,  5656.,  6092.,  6528.,  6964., 12173., 12839., 13505., 14171.,  5860.,  6312.,  6764.,  7216., 12607., 13297., 13987., 14677.,  6064.,  6532.,  7000.,  7468.,  7936.,  8404.,  8872.,  9340.,  3796.,  4248.,  4700.,  5152.,  7668.,  8588.,  9508., 10428., 11348., 12268., 13188., 14108., 16976., 18124., 19272., 20420., 10540., 11236., 11932., 12628., 15348., 16288., 17228., 18168.,  7684.,  8156.,  8628.,  9100., 11672., 12404., 13136., 13868.,  8092.,  8596.,  9100.,  9604., 10108., 10612., 11116., 11620.,  6244.,  6696.,  7148.,  7600., 19476., 20396., 21316., 22236.,  8436.,  9356., 10276., 11196., 18624., 19772., 20920., 22068.,  2380.,  3076.,  3772.,  4468., 12068., 13008., 13948., 14888.,  2468.,  2940.,  3412.,  3884., 11656., 12388., 13120., 13852.,  2748.,  3252.,  3756.,  4260.,  4764.,  5268.,  5772.,  6276.,  7555.,  8037.,  8519.,  9001., 15320., 16308., 17296., 18284., 19272., 20260., 21248., 22236., 20439., 21701., 22963., 24225., 16812., 17592., 18372., 19152., 17101., 18179., 19257., 20335., 12304., 12876., 13448., 14020., 11715., 12609., 13503., 14397., 13108., 13728., 14348., 14968.,  8228.,  8848.,  9468., 10088.,   928.,  1204.,  1480.,  1756., 10124., 10692., 11260., 11828.,  3308.,  3876.,  4444.,  5012.,  6708.,  7328.,  7948.,  8568.,  3396.,  3740.,  4084.,  4428.,  6296.,  6708.,  7120.,  7532.,  1436.,  1556.,  1676.,  1796.,  3836.,  4040.,  4244.,  4448.,  1716.,  1868.,  2020.,  2172.,  2324.,  2476.,  2628.,  2780.,  5821.,  6167.,  6513.,  6859., 11852., 12568., 13284., 14000., 14716., 15432., 16148., 16864., 10277., 11131., 11985., 12839., 10208., 10716., 11224., 11732.,  4891.,  5561.,  6231.,  6901.,  3652.,  3952.,  4252.,  4552.,  5649.,  6135.,  6621.,  7107.,  4456.,  4804.,  5152.,  5500.,  5400.,  5748.,  6096.,  6444.,  1756.,  1856.,  1956.,  2056.,  4868.,  5084.,  5300.,  5516.,  2276.,  2492.,  2708.,  2924.,  6248.,  6596.,  6944.,  7292.,  2556.,  2804.,  3052.,  3300.,  7052.,  7448.,  7844.,  8240.,  2836.,  3116.,  3396.,  3676.,  7856.,  8300.,  8744.,  9188.,  3116.,  3428.,  3740.,  4052.,  4364.,  4676.,  4988.,  5300.,  2039.,  2249.,  2459.,  2669.,  4288.,  4732.,  5176.,  5620.,  6064.,  6508.,  6952.,  7396.,  8499.,  9201.,  9903., 10605.,  6868.,  7360.,  7852.,  8344.,  9449., 10223., 10997., 11771.,  7672.,  8212.,  8752.,  9292., 10399., 11245., 12091., 12937.,  8476.,  9064.,  9652., 10240.,  9100.,  9688., 10276., 10864.,  2776.,  2956.,  3136.,  3316.,  8188.,  8564.,  8940.,  9316.,  3676.,  4052.,  4428.,  4804., 10268., 10856., 11444., 12032.,  3956.,  4364.,  4772.,  5180., 11072., 11708., 12344., 12980.,  4236.,  4676.,  5116.,  5556., 11876., 12560., 13244., 13928.,  4516.,  4988.,  5460.,  5932.,  6404.,  6876.,  7348.,  7820.,  2856.,  3036.,  3216.,  3396.,  5916.,  6292.,  6668.,  7044.,  7420.,  7796.,  8172.,  8548.,  9228.,  9816., 10404., 10992.,  8084.,  8492.,  8900.,  9308.,  9968., 10604., 11240., 11876.,  8748.,  9188.,  9628., 10068., 10708., 11392., 12076., 12760.,  9412.,  9884., 10356., 10828.,  8292.,  8764.,  9236.,  9708.,  3713.,  3863.,  4013.,  4163.,  7592.,  7900.,  8208.,  8516.,  4024.,  4332.,  4640.,  4948.,  8701.,  9175.,  9649., 10123.,  4228.,  4552.,  4876.,  5200.,  9135.,  9633., 10131., 10629.,  4432.,  4772.,  5112.,  5452.,  9569., 10091., 10613., 11135.,  4636.,  4992.,  5348.,  5704.,  6060.,  6416.,  6772.,  7128.,  2816.,  3156.,  3496.,  3836.,  5708.,  6404.,  7100.,  7796.,  8492.,  9188.,  9884., 10580., 12884., 13952., 15020., 16088.,  8900.,  9628., 10356., 11084., 13496., 14612., 15728., 16844.,  9308., 10068., 10828., 11588., 14108., 15272., 16436., 17600.,  9716., 10508., 11300., 12092., 12884., 13676., 14468., 15260.,  4816.,  5156.,  5496.,  5836., 14828., 15524., 16220., 16916.,  6476.,  7172.,  7868.,  8564., 18308., 19376., 20444., 21512.,  6756.,  7484.,  8212.,  8940., 19112., 20228., 21344., 22460.,  7036.,  7796.,  8556.,  9316., 19916., 21080., 22244., 23408.,  7316.,  8108.,  8900.,  9692., 10484., 11276., 12068., 12860.,  6629.,  7199.,  7769.,  8339., 13468., 14632., 15796., 16960., 18124., 19288., 20452., 21616., 22749., 24531., 26313., 28095., 18928., 20140., 21352., 22564., 23699., 25553., 27407., 29261., 19732., 20992., 22252., 23512., 24457., 26127., 27797., 29467., 19320., 20372., 21424., 22476., 17960., 19012., 20064., 21116.,  5836.,  6256.,  6676.,  7096., 18148., 19004., 19860., 20716.,  7876.,  8732.,  9588., 10444., 22328., 23636., 24944., 26252.,  8156.,  9044.,  9932., 10820., 23132., 24488., 25844., 27200.,  8436.,  9356., 10276., 11196., 18624., 19772., 20920., 22068.,  2380.,  3076.,  3772.,  4468.,  5164.,  5860.,  6556.,  7252.,  6943.,  7377.,  7811.,  8245., 14096., 14988., 15880., 16772., 17664., 18556., 19448., 20340., 20779., 22153., 23527., 24901., 18468., 19408., 20348., 21288., 21729., 23175., 24621., 26067., 19272., 20260., 21248., 22236., 20439., 21701., 22963., 24225., 16812., 17592., 18372., 19152., 13084., 13864., 14644., 15424.,   520.,   764.,  1008.,  1252.,  8796.,  9300.,  9804., 10308.,  2748.,  3252.,  3756.,  4260., 12460., 13240., 14020., 14800.,  3028.,  3564.,  4100.,  4636., 13264., 14092., 14920., 15748.,  3308.,  3876.,  4444.,  5012.,  6708.,  7328.,  7948.,  8568.,  3396.,  3740.,  4084.,  4428.,  4772.,  5116.,  5460.,  5804.,  5209.,  5507.,  5805.,  6103., 10628., 11248., 11868., 12488., 13108., 13728., 14348., 14968., 12665., 13631., 14597., 15563., 13912., 14580., 15248., 15916., 13615., 14653., 15691., 16729., 14716., 15432., 16148., 16864., 10277., 11131., 11985., 12839., 10208., 10716., 11224., 11732.,  4112.,  4620.,  5128.,  5636.,  1348.,  1416.,  1484.,  1552.,  3540.,  3692.,  3844.,  3996.,  1716.,  1868.,  2020.,  2172.,  4640.,  4892.,  5144.,  5396.,  1996.,  2180.,  2364.,  2548.,  5444.,  5744.,  6044.,  6344.,  2276.,  2492.,  2708.,  2924.,  6248.,  6596.,  6944.,  7292.,  2556.,  2804.,  3052.,  3300.,  3548.,  3796.,  4044.,  4292.,   980.,  1048.,  1116.,  1184.,  2164.,  2316.,  2468.,  2620.,  2772.,  2924.,  3076.,  3228.,  4048.,  4300.,  4552.,  4804.,  3436.,  3620.,  3804.,  3988.,  4788.,  5088.,  5388.,  5688.,  4100.,  4316.,  4532.,  4748.,  5528.,  5876.,  6224.,  6572.,  4764.,  5012.,  5260.,  5508.,  4540.,  4788.,  5036.,  5284.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,    84.,   104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,   325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,   536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,     0.,     0.,     0.,     0.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   352.,   372.,   392.,   412.,   889.,   931.,   973.,  1015.,   556.,   592.,   628.,   664.,   700.,   736.,   772.,   808.,    17.,    39.,    61.,    83.,   105.,   127.,   149.,   171.,     0.,     0.,     0.,     0.,    76.,   112.,   148.,   184.,   220.,   256.,   292.,   328.,   516.,   604.,   692.,   780.,   868.,   956.,  1044.,  1132.,  1448.,  1604.,  1760.,  1916.,  1276.,  1396.,  1516.,  1636.,  1756.,  1876.,  1996.,  2116.,  1044.,  1112.,  1180.,  1248.,  1316.,  1384.,  1452.,  1520.,     0.,     0.,     0.,     0.,   796.,   832.,   868.,   904.,   748.,   784.,   820.,   856.,  2084.,  2172.,  2260.,  2348.,  1028.,  1116.,  1204.,  1292.,  2968.,  3124.,  3280.,  3436.,  1308.,  1428.,  1548.,  1668.,  1788.,  1908.,  2028.,  2148.,   228.,   296.,   364.,   432.,   500.,   568.,   636.,   704.,     0.,     0.,     0.,     0.,   405.,   495.,   585.,   675.,   765.,   855.,   945.,  1035.,  1740.,  1944.,  2148.,  2352.,  2556.,  2760.,  2964.,  3168.,  4005.,  4347.,  4689.,  5031.,  3360.,  3612.,  3864.,  4116.,  3920.,  4172.,  4424.,  4676.,  2481.,  2619.,  2757.,  2895.,  2329.,  2467.,  2605.,  2743.,     0.,     0.,     0.,     0.,  1984.,  2068.,  2152.,  2236.,  1360.,  1444.,  1528.,  1612.,  4076.,  4260.,  4444.,  4628.,  1868.,  2052.,  2236.,  2420.,  5380.,  5680.,  5980.,  6280.,  2148.,  2364.,  2580.,  2796.,  3012.,  3228.,  3444.,  3660.,   456.,   572.,   688.,   804.,   920.,  1036.,  1152.,  1268.,     0.,     0.,     0.,     0.,   976.,  1060.,  1144.,  1228.,  1312.,  1396.,  1480.,  1564.,  2828.,  3012.,  3196.,  3380.,  3564.,  3748.,  3932.,  4116.,  4724.,  5024.,  5324.,  5624.,  4228.,  4444.,  4660.,  4876.,  3876.,  4092.,  4308.,  4524.,  2776.,  2892.,  3008.,  3124.,  1768.,  1884.,  2000.,  2116.,     0.,     0.,     0.,     0.,  1553.,  1607.,  1661.,  1715.,    41.,    95.,   149.,   203.,  2040.,  2156.,  2272.,  2388.,   520.,   636.,   752.,   868.,  2997.,  3183.,  3369.,  3555.,   596.,   728.,   860.,   992.,  1124.,  1256.,  1388.,  1520.,   613.,   683.,   753.,   823.,   893.,   963.,  1033.,  1103.,     0.,     0.,     0.,     0.,   905.,   959.,  1013.,  1067.,  1121.,  1175.,  1229.,  1283.,  2376.,  2492.,  2608.,  2724.,  2840.,  2956.,  3072.,  3188.,  2749.,  2935.,  3121.,  3307.,  3236.,  3368.,  3500.,  3632.,  1780.,  1912.,  2044.,  2176.,  2013.,  2083.,  2153.,  2223.,    53.,   123.,   193.,   263.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    59.,   137.,   215.,   293.,   371.,   449.,   527.,   605.,   748.,   912.,  1076.,  1240.,  1404.,  1568.,  1732.,  1896.,  2131.,  2389.,  2647.,  2905.,  1544.,  1724.,  1904.,  2084.,  2264.,  2444.,  2624.,  2804.,  1199.,  1293.,  1387.,  1481.,  1575.,  1669.,  1763.,  1857.,     0.,     0.,     0.,     0.,  1619.,  1697.,  1775.,  1853.,  1931.,  2009.,  2087.,  2165.,  4028.,  4192.,  4356.,  4520.,  2188.,  2352.,  2516.,  2680.,  4795.,  5053.,  5311.,  5569.,  2392.,  2572.,  2752.,  2932.,  3112.,  3292.,  3472.,  3652.,    71.,   165.,   259.,   353.,   447.,   541.,   635.,   729.,     0.,     0.,     0.,     0.,   760.,   940.,  1120.,  1300.,  1480.,  1660.,  1840.,  2020.,  3036.,  3412.,  3788.,  4164.,  4540.,  4916.,  5292.,  5668.,  6956.,  7544.,  8132.,  8720.,  4948.,  5356.,  5764.,  6172.,  6580.,  6988.,  7396.,  7804.,  3456.,  3668.,  3880.,  4092.,  4304.,  4516.,  4728.,  4940.,     0.,     0.,     0.,     0.,  4360.,  4540.,  4720.,  4900.,  2584.,  2764.,  2944.,  3124.,  8060.,  8436.,  8812.,  9188.,  3548.,  3924.,  4300.,  4676., 10204., 10792., 11380., 11968.,  3828.,  4236.,  4644.,  5052.,  5460.,  5868.,  6276.,  6684.,   912.,  1124.,  1336.,  1548.,  1760.,  1972.,  2184.,  2396.,     0.,     0.,     0.,     0.,  2295.,  2601.,  2907.,  3213.,  3519.,  3825.,  4131.,  4437.,  7248.,  7884.,  8520.,  9156.,  9792., 10428., 11064., 11700., 12555., 13545., 14535., 15525., 10596., 11280., 11964., 12648., 10580., 11264., 11948., 12632.,  6963.,  7317.,  7671.,  8025.,  5371.,  5725.,  6079.,  6433.,     0.,     0.,     0.,     0.,  5548.,  5776.,  6004.,  6232.,  3196.,  3424.,  3652.,  3880., 10052., 10524., 10996., 11468.,  4388.,  4860.,  5332.,  5804., 12616., 13348., 14080., 14812.,  4668.,  5172.,  5676.,  6180.,  6684.,  7188.,  7692.,  8196.,  1140.,  1400.,  1660.,  1920.,  2180.,  2440.,  2700.,  2960.,     0.,     0.,     0.,     0.,  2812.,  3040.,  3268.,  3496.,  3724.,  3952.,  4180.,  4408.,  7652.,  8124.,  8596.,  9068.,  9540., 10012., 10484., 10956., 11384., 12116., 12848., 13580., 10204., 10708., 11212., 11716.,  8700.,  9204.,  9708., 10212.,  6340.,  6600.,  6860.,  7120.,  3604.,  3864.,  4124.,  4384.,     0.,     0.,     0.,     0.,  3623.,  3749.,  3875.,  4001.,    95.,   221.,   347.,   473.,  4452.,  4712.,  4972.,  5232.,  1204.,  1464.,  1724.,  1984.,  6327.,  6729.,  7131.,  7533.,  1280.,  1556.,  1832.,  2108.,  2384.,  2660.,  2936.,  3212.,  1243.,  1385.,  1527.,  1669.,  1811.,  1953.,  2095.,  2237.,     0.,     0.,     0.,     0.,  2111.,  2237.,  2363.,  2489.,  2615.,  2741.,  2867.,  2993.,  5364.,  5624.,  5884.,  6144.,  6404.,  6664.,  6924.,  7184.,  5791.,  6193.,  6595.,  6997.,  6800.,  7076.,  7352.,  7628.,  3616.,  3892.,  4168.,  4444.,  4083.,  4225.,  4367.,  4509.,   107.,   249.,   391.,   533.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   113.,   263.,   413.,   563.,   713.,   863.,  1013.,  1163.,  1432.,  1740.,  2048.,  2356.,  2664.,  2972.,  3280.,  3588.,  4021.,  4495.,  4969.,  5443.,  2804.,  3128.,  3452.,  3776.,  4100.,  4424.,  4748.,  5072.,  2117.,  2283.,  2449.,  2615.,  2781.,  2947.,  3113.,  3279.,     0.,     0.,     0.,     0.,  3113.,  3263.,  3413.,  3563.,  3713.,  3863.,  4013.,  4163.,  7592.,  7900.,  8208.,  8516.,  4024.,  4332.,  4640.,  4948.,  8701.,  9175.,  9649., 10123.,  4228.,  4552.,  4876.,  5200.,  5524.,  5848.,  6172.,  6496.,   125.,   291.,   457.,   623.,   789.,   955.,  1121.,  1287.,     0.,     0.,     0.,     0.,  1444.,  1768.,  2092.,  2416.,  2740.,  3064.,  3388.,  3712.,  5556.,  6220.,  6884.,  7548.,  8212.,  8876.,  9540., 10204., 12464., 13484., 14504., 15524.,  8620.,  9316., 10012., 10708., 11404., 12100., 12796., 13492.,  5868.,  6224.,  6580.,  6936.,  7292.,  7648.,  8004.,  8360.,     0.,     0.,     0.,     0.,  7924.,  8248.,  8572.,  8896.,  4420.,  4744.,  5068.,  5392., 14036., 14700., 15364., 16028.,  6068.,  6732.,  7396.,  8060., 17440., 18460., 19480., 20500.,  6348.,  7044.,  7740.,  8436.,  9132.,  9828., 10524., 11220.,  1596.,  1952.,  2308.,  2664.,  3020.,  3376.,  3732.,  4088.,     0.,     0.,     0.,     0.,  4185.,  4707.,  5229.,  5751.,  6273.,  6795.,  7317.,  7839., 12756., 13824., 14892., 15960., 17028., 18096., 19164., 20232., 21105., 22743., 24381., 26019., 17832., 18948., 20064., 21180., 17240., 18356., 19472., 20588., 11445., 12015., 12585., 13155.,  8413.,  8983.,  9553., 10123.,     0.,     0.,     0.,     0.,  9112.,  9484.,  9856., 10228.,  5032.,  5404.,  5776.,  6148., 16028., 16788., 17548., 18308.,  6908.,  7668.,  8428.,  9188., 19852., 21016., 22180., 23344.,  7188.,  7980.,  8772.,  9564., 10356., 11148., 11940., 12732.,  1824.,  2228.,  2632.,  3036.,  3440.,  3844.,  4248.,  4652.,     0.,     0.,     0.,     0.,  4648.,  5020.,  5392.,  5764.,  6136.,  6508.,  6880.,  7252., 12476., 13236., 13996., 14756., 15516., 16276., 17036., 17796., 18044., 19208., 20372., 21536., 16180., 16972., 17764., 18556., 13524., 14316., 15108., 15900.,  9904., 10308., 10712., 11116.,  5440.,  5844.,  6248.,  6652.,     0.,     0.,     0.,     0.,  5693.,  5891.,  6089.,  6287.,   149.,   347.,   545.,   743.,  6864.,  7268.,  7672.,  8076.,  1888.,  2292.,  2696.,  3100.,  9657., 10275., 10893., 11511.,  1964.,  2384.,  2804.,  3224.,  3644.,  4064.,  4484.,  4904.,  1873.,  2087.,  2301.,  2515.,  2729.,  2943.,  3157.,  3371.,     0.,     0.,     0.,     0.,  3317.,  3515.,  3713.,  3911.,  4109.,  4307.,  4505.,  4703.,  8352.,  8756.,  9160.,  9564.,  9968., 10372., 10776., 11180.,  8833.,  9451., 10069., 10687., 10364., 10784., 11204., 11624.,  5452.,  5872.,  6292.,  6712.,  6153.,  6367.,  6581.,  6795.,   161.,   375.,   589.,   803.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4714.,  5730.,  6746.,  7762.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  4418.,  5370.,  6322.,  7274.,  1020.,  2604.,  4188.,  5772.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,    70.,   174.,   278.,   382.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  4122.,  5010.,  5898.,  6786.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  3530.,  4290.,  5050.,  5810.,  1100.,  2812.,  4524.,  6236.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1180.,  3020.,  4860.,  6700.,   420.,  1076.,  1732.,  2388.,  6680.,  8120.,  9560., 11000.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3234.,  3930.,  4626.,  5322.,  1020.,  2604.,  4188.,  5772.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   180.,   452.,   724.,   996.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  6680.,  8120.,  9560., 11000.,  2938.,  3570.,  4202.,  4834.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1020.,  2604.,  4188.,  5772.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,   110.,   278.,   446.,   614.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  4122.,  5010.,  5898.,  6786.,   420.,  1076.,  1732.,  2388.,  5010.,  6090.,  7170.,  8250.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,  3044.,  3700.,  4356.,  5012.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,   420.,  1076.,  1732.,  2388.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  4418.,  5370.,  6322.,  7274.,  1020.,  2604.,  4188.,  5772.,  7356.,  8940., 10524., 12108.,  1550.,  3958.,  6366.,  8774.,  6764.,  8220.,  9676., 11132.,  1590.,  4062.,  6534.,  9006.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  4122.,  5010.,  5898.,  6786.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1510.,  3854.,  6198.,  8542.,  7356.,  8940., 10524., 12108.,  1020.,  2604.,  4188.,  5772.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  3826.,  4650.,  5474.,  6298.,  1180.,  3020.,  4860.,  6700.,  8540., 10380., 12220., 14060.,  1630.,  4166.,  6702.,  9238.,  7948.,  9660., 11372., 13084.,  1670.,  4270.,  6870.,  9470.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  6764.,  8220.,  9676., 11132.,   600.,  1528.,  2456.,  3384.,  6172.,  7500.,  8828., 10156.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   940.,  2396.,  3852.,  5308.,  4312.,  5240.,  6168.,  7096.,   860.,  2188.,  3516.,  4844.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   210.,   522.,   834.,  1146.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   440.,  1112.,  1784.,  2456.,  3128.,  3800.,  4472.,  5144.,   780.,  1980.,  3180.,  4380.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  3128.,  3800.,  4472.,  5144.,   440.,  1112.,  1784.,  2456.,  5580.,  6780.,  7980.,  9180.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   450.,  1146.,  1842.,  2538.,  3234.,  3930.,  4626.,  5322.,  1020.,  2604.,  4188.,  5772.,  7356.,  8940., 10524., 12108.,  1390.,  3542.,  5694.,  7846.,  6764.,  8220.,  9676., 11132.,   940.,  2396.,  3852.,  5308.,  2642.,  3210.,  3778.,  4346.,   370.,   938.,  1506.,  2074.,     0.,     0.,     0.,     0.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,  6680.,  8120.,  9560., 11000.,   920.,  2360.,  3800.,  5240.,  8540., 10380., 12220., 14060.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,     0.,     0.,     0.,     0.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,   920.,  2360.,  3800.,  5240.,  6680.,  8120.,  9560., 11000.,  1180.,  3020.,  4860.,  6700.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,     0.,     0.,     0.,     0.,  1966.,  2390.,  2814.,  3238.,   270.,   694.,  1118.,  1542.,  4228.,  5140.,  6052.,  6964.,   580.,  1492.,  2404.,  3316.,  4418.,  5370.,  6322.,  7274.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,     0.,     0.,     0.,     0.,   270.,   694.,  1118.,  1542.,  1966.,  2390.,  2814.,  3238.,   580.,  1492.,  2404.,  3316.,  4228.,  5140.,  6052.,  6964.,   610.,  1562.,  2514.,  3466.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   330.,   834.,  1338.,  1842.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  1078.,  1310.,  1542.,  1774.,   150.,   382.,   614.,   846.,     0.,     0.,     0.,     0.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,  2346.,  2850.,  3354.,  3858.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   150.,   382.,   614.,   846.,  1078.,  1310.,  1542.,  1774.,     0.,     0.,     0.,     0.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,     0.,     0.,     0.,     0.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,     0.,     0.,     0.,     0.,   570.,  1458.,  2346.,  3234.,  4122.,  5010.,  5898.,  6786.,   940.,  2396.,  3852.,  5308.,  6764.,  8220.,  9676., 11132.,  1430.,  3646.,  5862.,  8078.,  6172.,  7500.,  8828., 10156.,   860.,  2188.,  3516.,  4844.,  3530.,  4290.,  5050.,  5810.,   490.,  1250.,  2010.,  2770.,     0.,     0.,     0.,     0.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  7948.,  9660., 11372., 13084.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,     0.,     0.,     0.,     0.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1100.,  2812.,  4524.,  6236.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,     0.,     0.,     0.,     0.,  2262.,  2750.,  3238.,  3726.,   310.,   798.,  1286.,  1774.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  2938.,  3570.,  4202.,  4834.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,    70.,   174.,   278.,   382.,   486.,   590.,   694.,   798.,     0.,     0.,     0.,     0.,   310.,   798.,  1286.,  1774.,  2262.,  2750.,  3238.,  3726.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   410.,  1042.,  1674.,  2306.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,   486.,   590.,   694.,   798.,    70.,   174.,   278.,   382.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   450.,  1146.,  1842.,  2538.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  1374.,  1670.,  1966.,  2262.,   190.,   486.,   782.,  1078.,     0.,     0.,     0.,     0.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  3234.,  3930.,  4626.,  5322.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   190.,   486.,   782.,  1078.,  1374.,  1670.,  1966.,  2262.,     0.,     0.,     0.,     0.,   340.,   868.,  1396.,  1924.,  2452.,  2980.,  3508.,  4036.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,  1260.,  3228.,  5196.,  7164.,  6680.,  8120.,  9560., 11000.,   920.,  2360.,  3800.,  5240.,  3636.,  4420.,  5204.,  5988.,   500.,  1284.,  2068.,  2852.,     0.,     0.,     0.,     0.,  2452.,  2980.,  3508.,  4036.,   340.,   868.,  1396.,  1924.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  9132., 11100., 13068., 15036.,   920.,  2360.,  3800.,  5240.,  6680.,  8120.,  9560., 11000.,   500.,  1284.,  2068.,  2852.,  3636.,  4420.,  5204.,  5988.,     0.,     0.,     0.,     0.,   370.,   938.,  1506.,  2074.,  2642.,  3210.,  3778.,  4346.,   860.,  2188.,  3516.,  4844.,  6172.,  7500.,  8828., 10156.,  1470.,  3750.,  6030.,  8310.,  7948.,  9660., 11372., 13084.,  1100.,  2812.,  4524.,  6236.,  4418.,  5370.,  6322.,  7274.,   610.,  1562.,  2514.,  3466.,     0.,     0.,     0.,     0.,  1860.,  2260.,  2660.,  3060.,   260.,   660.,  1060.,  1460.,  4312.,  5240.,  6168.,  7096.,   600.,  1528.,  2456.,  3384.,  7356.,  8940., 10524., 12108.,   760.,  1944.,  3128.,  4312.,  5496.,  6680.,  7864.,  9048.,   420.,  1076.,  1732.,  2388.,  3044.,  3700.,  4356.,  5012.,     0.,     0.,     0.,     0.,   260.,   660.,  1060.,  1460.,  1860.,  2260.,  2660.,  3060.,   600.,  1528.,  2456.,  3384.,  4312.,  5240.,  6168.,  7096.,  1020.,  2604.,  4188.,  5772.,  5496.,  6680.,  7864.,  9048.,   760.,  1944.,  3128.,  4312.,  3044.,  3700.,  4356.,  5012.,   420.,  1076.,  1732.,  2388.,     0.,     0.,     0.,     0.,   190.,   230.,   270.,   310.,    30.,    70.,   110.,   150.,   676.,   820.,   964.,  1108.,   100.,   244.,   388.,   532.,  1458.,  1770.,  2082.,  2394.,   180.,   452.,   724.,   996.,  1268.,  1540.,  1812.,  2084.,   110.,   278.,   446.,   614.,   782.,   950.,  1118.,  1286.,     0.,     0.,     0.,     0.,    30.,    70.,   110.,   150.,   190.,   230.,   270.,   310.,   100.,   244.,   388.,   532.,   676.,   820.,   964.,  1108.,   210.,   522.,   834.,  1146.,  1268.,  1540.,  1812.,  2084.,   180.,   452.,   724.,   996.,   782.,   950.,  1118.,  1286.,   110.,   278.,   446.,   614.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}