/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Pair>
using FilterBackpropWindow5Stride1 = WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(FilterBackpropWindow5Stride1, GTestTypeTriples);
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5432.,  6940.,  8500.,  7180.,  5816.,  7990.,  10100., 12245., 10250.,
      8230.,  10740., 13470., 16206., 13470., 10740., 8230.,  10250., 12245.,
      10100., 7990.,  5816.,  7180.,  8500.,  6940.,  5432.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      58.,  68.,  78.,  88.,  98.,  118., 128., 138., 148.,
      158., 178., 188., 198., 208., 218., 238., 248., 258.,
      268., 278., 298., 308., 318., 328., 338.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10680., 10864., 13640., 13880., 16700., 17000., 14100., 14360., 11416.,
      11632., 15690., 15980., 19825., 20200., 24025., 24490., 20100., 20500.,
      16130., 16460., 21060., 21480., 26400., 26940., 31746., 32412., 26370.,
      26940., 21012., 21480., 16050., 16460., 19975., 20500., 23845., 24490.,
      19650., 20200., 15530., 15980., 11256., 11632., 13880., 14360., 16412.,
      17000., 13380., 13880., 10456., 10864.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      98.,  116., 114., 136., 130., 156., 146., 176., 162., 196.,
      194., 236., 210., 256., 226., 276., 242., 296., 258., 316.,
      290., 356., 306., 376., 322., 396., 338., 416., 354., 436.,
      386., 476., 402., 496., 418., 516., 434., 536., 450., 556.,
      482., 596., 498., 616., 514., 636., 530., 656., 546., 676.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4344.,  4528.,  4712.,  4896.,  6560.,  6800.,  7040.,  7280.,  8780.,
      9080.,  9380.,  9680.,  7780.,  8040.,  8300.,  8560.,  6936.,  7152.,
      7368.,  7584.,  7346.,  7636.,  7926.,  8216.,  10731., 11106., 11481.,
      11856., 14049., 14514., 14979., 15444., 12344., 12744., 13144., 13544.,
      10874., 11204., 11534., 11864., 11044., 11464., 11884., 12304., 15652.,
      16192., 16732., 17272., 20074., 20740., 21406., 22072., 17418., 17988.,
      18558., 19128., 15124., 15592., 16060., 16528., 13834., 14244., 14654.,
      15064., 17345., 17870., 18395., 18920., 20613., 21258., 21903., 22548.,
      17374., 17924., 18474., 19024., 14482., 14932., 15382., 15832., 10296.,
      10672., 11048., 11424., 13072., 13552., 14032., 14512., 15596., 16184.,
      16772., 17360., 13460., 13960., 14460., 14960., 11672., 12080., 12488.,
      12896.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      178.,  196.,  214.,  232.,  206.,  228.,  250.,  272.,  234.,  260.,
      286.,  312.,  262.,  292.,  322.,  352.,  290.,  324.,  358.,  392.,
      346.,  388.,  430.,  472.,  374.,  420.,  466.,  512.,  402.,  452.,
      502.,  552.,  430.,  484.,  538.,  592.,  458.,  516.,  574.,  632.,
      514.,  580.,  646.,  712.,  542.,  612.,  682.,  752.,  570.,  644.,
      718.,  792.,  598.,  676.,  754.,  832.,  626.,  708.,  790.,  872.,
      682.,  772.,  862.,  952.,  710.,  804.,  898.,  992.,  738.,  836.,
      934.,  1032., 766.,  868.,  970.,  1072., 794.,  900.,  1006., 1112.,
      850.,  964.,  1078., 1192., 878.,  996.,  1114., 1232., 906.,  1028.,
      1150., 1272., 934.,  1060., 1186., 1312., 962.,  1092., 1222., 1352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10456., 10864., 13380., 13880., 16412., 17000., 13880., 14360., 11256.,
      11632., 15530., 15980., 19650., 20200., 23845., 24490., 19975., 20500.,
      16050., 16460., 21012., 21480., 26370., 26940., 31746., 32412., 26400.,
      26940., 21060., 21480., 16130., 16460., 20100., 20500., 24025., 24490.,
      19825., 20200., 15690., 15980., 11416., 11632., 14100., 14360., 16700.,
      17000., 13640., 13880., 10680., 10864.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      106., 116., 126., 136., 146., 156., 166., 176., 186., 196.,
      226., 236., 246., 256., 266., 276., 286., 296., 306., 316.,
      346., 356., 366., 376., 386., 396., 406., 416., 426., 436.,
      466., 476., 486., 496., 506., 516., 526., 536., 546., 556.,
      586., 596., 606., 616., 626., 636., 646., 656., 666., 676.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3792.,  4016.,  4016., 4256., 4124., 4392., 4432., 4720., 4600.,  4920.,
      4984.,  5328.,  3964., 4240., 4296., 4592., 3408., 3632., 3696.,  3936.,
      3748.,  4052.,  4052., 4376., 5039., 5412., 5442., 5840., 6470.,  6922.,
      6962.,  7444.,  5991., 6382., 6408., 6824., 5604., 5924., 5956.,  6296.,
      5624.,  5992.,  5960., 6352., 8234., 8676., 8672., 9144., 10996., 11524.,
      11524., 12088., 8234., 8672., 8676., 9144., 5624., 5960., 5992.,  6352.,
      5604.,  5956.,  5924., 6296., 5991., 6408., 6382., 6824., 6470.,  6962.,
      6922.,  7444.,  5039., 5442., 5412., 5840., 3748., 4052., 4052.,  4376.,
      3408.,  3696.,  3632., 3936., 3964., 4296., 4240., 4592., 4600.,  4984.,
      4920.,  5328.,  4124., 4432., 4392., 4720., 3792., 4016., 4016.,  4256.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180.,  212.,  196.,  232.,  212.,  252.,  228.,  272.,  244.,  292.,
      260.,  312.,  276.,  332.,  292.,  352.,  308.,  372.,  324.,  392.,
      372.,  452.,  388.,  472.,  404.,  492.,  420.,  512.,  436.,  532.,
      452.,  552.,  468.,  572.,  484.,  592.,  500.,  612.,  516.,  632.,
      564.,  692.,  580.,  712.,  596.,  732.,  612.,  752.,  628.,  772.,
      644.,  792.,  660.,  812.,  676.,  832.,  692.,  852.,  708.,  872.,
      756.,  932.,  772.,  952.,  788.,  972.,  804.,  992.,  820.,  1012.,
      836.,  1032., 852.,  1052., 868.,  1072., 884.,  1092., 900.,  1112.,
      948.,  1172., 964.,  1192., 980.,  1212., 996.,  1232., 1012., 1252.,
      1028., 1272., 1044., 1292., 1060., 1312., 1076., 1332., 1092., 1352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3648., 3872.,  4096.,  4320.,  3888., 4128., 4368., 4608., 3916.,  4184.,
      4452., 4720.,  4224.,  4512.,  4800., 5088., 4272., 4592., 4912.,  5232.,
      4632., 4976.,  5320.,  5664.,  3460., 3736., 4012., 4288., 3752.,  4048.,
      4344., 4640.,  2880.,  3104.,  3328., 3552., 3120., 3360., 3600.,  3840.,
      4760., 5064.,  5368.,  5672.,  5028., 5352., 5676., 6000., 5513.,  5886.,
      6259., 6632.,  5878.,  6276.,  6674., 7072., 6344., 6796., 7248.,  7700.,
      6786., 7268.,  7750.,  8232.,  5383., 5774., 6165., 6556., 5744.,  6160.,
      6576., 6992.,  4744.,  5064.,  5384., 5704., 5044., 5384., 5724.,  6064.,
      4608., 4976.,  5344.,  5712.,  4936., 5328., 5720., 6112., 6842.,  7284.,
      7726., 8168.,  7272.,  7744.,  8216., 8688., 9176., 9704., 10232., 10760.,
      9684., 10248., 10812., 11376., 6494., 6932., 7370., 7808., 6900.,  7368.,
      7836., 8304.,  4256.,  4592.,  4928., 5264., 4584., 4944., 5304.,  5664.,
      4840., 5192.,  5544.,  5896.,  5140., 5512., 5884., 6256., 5869.,  6286.,
      6703., 7120.,  6242.,  6684.,  7126., 7568., 6944., 7436., 7928.,  8420.,
      7370., 7892.,  8414.,  8936.,  5771., 6174., 6577., 6980., 6108.,  6536.,
      6964., 7392.,  5016.,  5320.,  5624., 5928., 5284., 5608., 5932.,  6256.,
      4352., 4640.,  4928.,  5216.,  4592., 4896., 5200., 5504., 4492.,  4824.,
      5156., 5488.,  4800.,  5152.,  5504., 5856., 4720., 5104., 5488.,  5872.,
      5080., 5488.,  5896.,  6304.,  3876., 4184., 4492., 4800., 4168.,  4496.,
      4824., 5152.,  3392.,  3616.,  3840., 4064., 3632., 3872., 4112.,  4352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      328.,  360.,  392.,  424.,  356.,  392.,  428.,  464.,  384.,  424.,
      464.,  504.,  412.,  456.,  500.,  544.,  440.,  488.,  536.,  584.,
      468.,  520.,  572.,  624.,  496.,  552.,  608.,  664.,  524.,  584.,
      644.,  704.,  552.,  616.,  680.,  744.,  580.,  648.,  716.,  784.,
      664.,  744.,  824.,  904.,  692.,  776.,  860.,  944.,  720.,  808.,
      896.,  984.,  748.,  840.,  932.,  1024., 776.,  872.,  968.,  1064.,
      804.,  904.,  1004., 1104., 832.,  936.,  1040., 1144., 860.,  968.,
      1076., 1184., 888.,  1000., 1112., 1224., 916.,  1032., 1148., 1264.,
      1000., 1128., 1256., 1384., 1028., 1160., 1292., 1424., 1056., 1192.,
      1328., 1464., 1084., 1224., 1364., 1504., 1112., 1256., 1400., 1544.,
      1140., 1288., 1436., 1584., 1168., 1320., 1472., 1624., 1196., 1352.,
      1508., 1664., 1224., 1384., 1544., 1704., 1252., 1416., 1580., 1744.,
      1336., 1512., 1688., 1864., 1364., 1544., 1724., 1904., 1392., 1576.,
      1760., 1944., 1420., 1608., 1796., 1984., 1448., 1640., 1832., 2024.,
      1476., 1672., 1868., 2064., 1504., 1704., 1904., 2104., 1532., 1736.,
      1940., 2144., 1560., 1768., 1976., 2184., 1588., 1800., 2012., 2224.,
      1672., 1896., 2120., 2344., 1700., 1928., 2156., 2384., 1728., 1960.,
      2192., 2424., 1756., 1992., 2228., 2464., 1784., 2024., 2264., 2504.,
      1812., 2056., 2300., 2544., 1840., 2088., 2336., 2584., 1868., 2120.,
      2372., 2624., 1896., 2152., 2408., 2664., 1924., 2184., 2444., 2704.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11672., 12080., 12488., 12896., 13460., 13960., 14460., 14960., 15596.,
      16184., 16772., 17360., 13072., 13552., 14032., 14512., 10296., 10672.,
      11048., 11424., 14482., 14932., 15382., 15832., 17374., 17924., 18474.,
      19024., 20613., 21258., 21903., 22548., 17345., 17870., 18395., 18920.,
      13834., 14244., 14654., 15064., 15124., 15592., 16060., 16528., 17418.,
      17988., 18558., 19128., 20074., 20740., 21406., 22072., 15652., 16192.,
      16732., 17272., 11044., 11464., 11884., 12304., 10874., 11204., 11534.,
      11864., 12344., 12744., 13144., 13544., 14049., 14514., 14979., 15444.,
      10731., 11106., 11481., 11856., 7346.,  7636.,  7926.,  8216.,  6936.,
      7152.,  7368.,  7584.,  7780.,  8040.,  8300.,  8560.,  8780.,  9080.,
      9380.,  9680.,  6560.,  6800.,  7040.,  7280.,  4344.,  4528.,  4712.,
      4896.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      202.,  212.,  222.,  232.,  242.,  252.,  262.,  272.,  282.,  292.,
      302.,  312.,  322.,  332.,  342.,  352.,  362.,  372.,  382.,  392.,
      442.,  452.,  462.,  472.,  482.,  492.,  502.,  512.,  522.,  532.,
      542.,  552.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,
      682.,  692.,  702.,  712.,  722.,  732.,  742.,  752.,  762.,  772.,
      782.,  792.,  802.,  812.,  822.,  832.,  842.,  852.,  862.,  872.,
      922.,  932.,  942.,  952.,  962.,  972.,  982.,  992.,  1002., 1012.,
      1022., 1032., 1042., 1052., 1062., 1072., 1082., 1092., 1102., 1112.,
      1162., 1172., 1182., 1192., 1202., 1212., 1222., 1232., 1242., 1252.,
      1262., 1272., 1282., 1292., 1302., 1312., 1322., 1332., 1342., 1352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3392.,  3632.,  3616.,  3872.,  3840., 4112., 4064., 4352., 3876., 4168.,
      4184.,  4496.,  4492.,  4824.,  4800., 5152., 4720., 5080., 5104., 5488.,
      5488.,  5896.,  5872.,  6304.,  4492., 4800., 4824., 5152., 5156., 5504.,
      5488.,  5856.,  4352.,  4592.,  4640., 4896., 4928., 5200., 5216., 5504.,
      5016.,  5284.,  5320.,  5608.,  5624., 5932., 5928., 6256., 5771., 6108.,
      6174.,  6536.,  6577.,  6964.,  6980., 7392., 6944., 7370., 7436., 7892.,
      7928.,  8414.,  8420.,  8936.,  5869., 6242., 6286., 6684., 6703., 7126.,
      7120.,  7568.,  4840.,  5140.,  5192., 5512., 5544., 5884., 5896., 6256.,
      4256.,  4584.,  4592.,  4944.,  4928., 5304., 5264., 5664., 6494., 6900.,
      6932.,  7368.,  7370.,  7836.,  7808., 8304., 9176., 9684., 9704., 10248.,
      10232., 10812., 10760., 11376., 6842., 7272., 7284., 7744., 7726., 8216.,
      8168.,  8688.,  4608.,  4936.,  4976., 5328., 5344., 5720., 5712., 6112.,
      4744.,  5044.,  5064.,  5384.,  5384., 5724., 5704., 6064., 5383., 5744.,
      5774.,  6160.,  6165.,  6576.,  6556., 6992., 6344., 6786., 6796., 7268.,
      7248.,  7750.,  7700.,  8232.,  5513., 5878., 5886., 6276., 6259., 6674.,
      6632.,  7072.,  4760.,  5028.,  5064., 5352., 5368., 5676., 5672., 6000.,
      2880.,  3120.,  3104.,  3360.,  3328., 3600., 3552., 3840., 3460., 3752.,
      3736.,  4048.,  4012.,  4344.,  4288., 4640., 4272., 4632., 4592., 4976.,
      4912.,  5320.,  5232.,  5664.,  3916., 4224., 4184., 4512., 4452., 4800.,
      4720.,  5088.,  3648.,  3888.,  3872., 4128., 4096., 4368., 4320., 4608.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      344.,  404.,  360.,  424.,  376.,  444.,  392.,  464.,  408.,  484.,
      424.,  504.,  440.,  524.,  456.,  544.,  472.,  564.,  488.,  584.,
      504.,  604.,  520.,  624.,  536.,  644.,  552.,  664.,  568.,  684.,
      584.,  704.,  600.,  724.,  616.,  744.,  632.,  764.,  648.,  784.,
      728.,  884.,  744.,  904.,  760.,  924.,  776.,  944.,  792.,  964.,
      808.,  984.,  824.,  1004., 840.,  1024., 856.,  1044., 872.,  1064.,
      888.,  1084., 904.,  1104., 920.,  1124., 936.,  1144., 952.,  1164.,
      968.,  1184., 984.,  1204., 1000., 1224., 1016., 1244., 1032., 1264.,
      1112., 1364., 1128., 1384., 1144., 1404., 1160., 1424., 1176., 1444.,
      1192., 1464., 1208., 1484., 1224., 1504., 1240., 1524., 1256., 1544.,
      1272., 1564., 1288., 1584., 1304., 1604., 1320., 1624., 1336., 1644.,
      1352., 1664., 1368., 1684., 1384., 1704., 1400., 1724., 1416., 1744.,
      1496., 1844., 1512., 1864., 1528., 1884., 1544., 1904., 1560., 1924.,
      1576., 1944., 1592., 1964., 1608., 1984., 1624., 2004., 1640., 2024.,
      1656., 2044., 1672., 2064., 1688., 2084., 1704., 2104., 1720., 2124.,
      1736., 2144., 1752., 2164., 1768., 2184., 1784., 2204., 1800., 2224.,
      1880., 2324., 1896., 2344., 1912., 2364., 1928., 2384., 1944., 2404.,
      1960., 2424., 1976., 2444., 1992., 2464., 2008., 2484., 2024., 2504.,
      2040., 2524., 2056., 2544., 2072., 2564., 2088., 2584., 2104., 2604.,
      2120., 2624., 2136., 2644., 2152., 2664., 2168., 2684., 2184., 2704.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3408.,  3648.,  3888.,  4128.,  3648.,  3904.,  4160.,  4416.,  3888.,
      4160.,  4432.,  4704.,  4128.,  4416.,  4704.,  4992.,  3716.,  4008.,
      4300.,  4592.,  4024.,  4336.,  4648.,  4960.,  4332.,  4664.,  4996.,
      5328.,  4640.,  4992.,  5344.,  5696.,  4344.,  4704.,  5064.,  5424.,
      4704.,  5088.,  5472.,  5856.,  5064.,  5472.,  5880.,  6288.,  5424.,
      5856.,  6288.,  6720.,  3716.,  4024.,  4332.,  4640.,  4008.,  4336.,
      4664.,  4992.,  4300.,  4648.,  4996.,  5344.,  4592.,  4960.,  5328.,
      5696.,  3408.,  3648.,  3888.,  4128.,  3648.,  3904.,  4160.,  4416.,
      3888.,  4160.,  4432.,  4704.,  4128.,  4416.,  4704.,  4992.,  5220.,
      5488.,  5756.,  6024.,  5488.,  5776.,  6064.,  6352.,  5756.,  6064.,
      6372.,  6680.,  6024.,  6352.,  6680.,  7008.,  5285.,  5622.,  5959.,
      6296.,  5650.,  6012.,  6374.,  6736.,  6015.,  6402.,  6789.,  7176.,
      6380.,  6792.,  7204.,  7616.,  5782.,  6208.,  6634.,  7060.,  6224.,
      6680.,  7136.,  7592.,  6666.,  7152.,  7638.,  8124.,  7108.,  7624.,
      8140.,  8656.,  4517.,  4890.,  5263.,  5636.,  4878.,  5276.,  5674.,
      6072.,  5239.,  5662.,  6085.,  6508.,  5600.,  6048.,  6496.,  6944.,
      3620.,  3920.,  4220.,  4520.,  3920.,  4240.,  4560.,  4880.,  4220.,
      4560.,  4900.,  5240.,  4520.,  4880.,  5240.,  5600.,  4152.,  4480.,
      4808.,  5136.,  4480.,  4832.,  5184.,  5536.,  4808.,  5184.,  5560.,
      5936.,  5136.,  5536.,  5936.,  6336.,  6918.,  7324.,  7730.,  8136.,
      7348.,  7784.,  8220.,  8656.,  7778.,  8244.,  8710.,  9176.,  8208.,
      8704.,  9200.,  9696.,  10164., 10672., 11180., 11688., 10672., 11216.,
      11760., 12304., 11180., 11760., 12340., 12920., 11688., 12304., 12920.,
      13536., 6918.,  7348.,  7778.,  8208.,  7324.,  7784.,  8244.,  8704.,
      7730.,  8220.,  8710.,  9200.,  8136.,  8656.,  9176.,  9696.,  4152.,
      4480.,  4808.,  5136.,  4480.,  4832.,  5184.,  5536.,  4808.,  5184.,
      5560.,  5936.,  5136.,  5536.,  5936.,  6336.,  3620.,  3920.,  4220.,
      4520.,  3920.,  4240.,  4560.,  4880.,  4220.,  4560.,  4900.,  5240.,
      4520.,  4880.,  5240.,  5600.,  4517.,  4878.,  5239.,  5600.,  4890.,
      5276.,  5662.,  6048.,  5263.,  5674.,  6085.,  6496.,  5636.,  6072.,
      6508.,  6944.,  5782.,  6224.,  6666.,  7108.,  6208.,  6680.,  7152.,
      7624.,  6634.,  7136.,  7638.,  8140.,  7060.,  7592.,  8124.,  8656.,
      5285.,  5650.,  6015.,  6380.,  5622.,  6012.,  6402.,  6792.,  5959.,
      6374.,  6789.,  7204.,  6296.,  6736.,  7176.,  7616.,  5220.,  5488.,
      5756.,  6024.,  5488.,  5776.,  6064.,  6352.,  5756.,  6064.,  6372.,
      6680.,  6024.,  6352.,  6680.,  7008.,  3408.,  3648.,  3888.,  4128.,
      3648.,  3904.,  4160.,  4416.,  3888.,  4160.,  4432.,  4704.,  4128.,
      4416.,  4704.,  4992.,  3716.,  4008.,  4300.,  4592.,  4024.,  4336.,
      4648.,  4960.,  4332.,  4664.,  4996.,  5328.,  4640.,  4992.,  5344.,
      5696.,  4344.,  4704.,  5064.,  5424.,  4704.,  5088.,  5472.,  5856.,
      5064.,  5472.,  5880.,  6288.,  5424.,  5856.,  6288.,  6720.,  3716.,
      4024.,  4332.,  4640.,  4008.,  4336.,  4664.,  4992.,  4300.,  4648.,
      4996.,  5344.,  4592.,  4960.,  5328.,  5696.,  3408.,  3648.,  3888.,
      4128.,  3648.,  3904.,  4160.,  4416.,  3888.,  4160.,  4432.,  4704.,
      4128.,  4416.,  4704.,  4992.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      628.,  688.,  748.,  808.,  656.,  720.,  784.,  848.,  684.,  752.,
      820.,  888.,  712.,  784.,  856.,  928.,  740.,  816.,  892.,  968.,
      768.,  848.,  928.,  1008., 796.,  880.,  964.,  1048., 824.,  912.,
      1000., 1088., 852.,  944.,  1036., 1128., 880.,  976.,  1072., 1168.,
      908.,  1008., 1108., 1208., 936.,  1040., 1144., 1248., 964.,  1072.,
      1180., 1288., 992.,  1104., 1216., 1328., 1020., 1136., 1252., 1368.,
      1048., 1168., 1288., 1408., 1076., 1200., 1324., 1448., 1104., 1232.,
      1360., 1488., 1132., 1264., 1396., 1528., 1160., 1296., 1432., 1568.,
      1300., 1456., 1612., 1768., 1328., 1488., 1648., 1808., 1356., 1520.,
      1684., 1848., 1384., 1552., 1720., 1888., 1412., 1584., 1756., 1928.,
      1440., 1616., 1792., 1968., 1468., 1648., 1828., 2008., 1496., 1680.,
      1864., 2048., 1524., 1712., 1900., 2088., 1552., 1744., 1936., 2128.,
      1580., 1776., 1972., 2168., 1608., 1808., 2008., 2208., 1636., 1840.,
      2044., 2248., 1664., 1872., 2080., 2288., 1692., 1904., 2116., 2328.,
      1720., 1936., 2152., 2368., 1748., 1968., 2188., 2408., 1776., 2000.,
      2224., 2448., 1804., 2032., 2260., 2488., 1832., 2064., 2296., 2528.,
      1972., 2224., 2476., 2728., 2000., 2256., 2512., 2768., 2028., 2288.,
      2548., 2808., 2056., 2320., 2584., 2848., 2084., 2352., 2620., 2888.,
      2112., 2384., 2656., 2928., 2140., 2416., 2692., 2968., 2168., 2448.,
      2728., 3008., 2196., 2480., 2764., 3048., 2224., 2512., 2800., 3088.,
      2252., 2544., 2836., 3128., 2280., 2576., 2872., 3168., 2308., 2608.,
      2908., 3208., 2336., 2640., 2944., 3248., 2364., 2672., 2980., 3288.,
      2392., 2704., 3016., 3328., 2420., 2736., 3052., 3368., 2448., 2768.,
      3088., 3408., 2476., 2800., 3124., 3448., 2504., 2832., 3160., 3488.,
      2644., 2992., 3340., 3688., 2672., 3024., 3376., 3728., 2700., 3056.,
      3412., 3768., 2728., 3088., 3448., 3808., 2756., 3120., 3484., 3848.,
      2784., 3152., 3520., 3888., 2812., 3184., 3556., 3928., 2840., 3216.,
      3592., 3968., 2868., 3248., 3628., 4008., 2896., 3280., 3664., 4048.,
      2924., 3312., 3700., 4088., 2952., 3344., 3736., 4128., 2980., 3376.,
      3772., 4168., 3008., 3408., 3808., 4208., 3036., 3440., 3844., 4248.,
      3064., 3472., 3880., 4288., 3092., 3504., 3916., 4328., 3120., 3536.,
      3952., 4368., 3148., 3568., 3988., 4408., 3176., 3600., 4024., 4448.,
      3316., 3760., 4204., 4648., 3344., 3792., 4240., 4688., 3372., 3824.,
      4276., 4728., 3400., 3856., 4312., 4768., 3428., 3888., 4348., 4808.,
      3456., 3920., 4384., 4848., 3484., 3952., 4420., 4888., 3512., 3984.,
      4456., 4928., 3540., 4016., 4492., 4968., 3568., 4048., 4528., 5008.,
      3596., 4080., 4564., 5048., 3624., 4112., 4600., 5088., 3652., 4144.,
      4636., 5128., 3680., 4176., 4672., 5168., 3708., 4208., 4708., 5208.,
      3736., 4240., 4744., 5248., 3764., 4272., 4780., 5288., 3792., 4304.,
      4816., 5328., 3820., 4336., 4852., 5368., 3848., 4368., 4888., 5408.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9230.,  11284., 13398., 11620., 9790.,  13550., 16415., 19320., 16625.,
      13900., 18185., 21882., 25585., 21882., 18185., 13900., 16625., 19320.,
      16415., 13550., 9790.,  11620., 13398., 11284., 9230.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      151., 172., 193., 214., 235., 298., 319., 340., 361.,
      382., 445., 466., 487., 508., 529., 592., 613., 634.,
      655., 676., 739., 760., 781., 802., 823.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7054.,  7324.,  9176.,  9512.,  11350., 11756., 10464., 10824., 9606.,
      9916.,  11955., 12380., 15217., 15742., 18490., 19120., 16695., 17250.,
      14973., 15448., 17451., 18066., 21888., 22644., 26267., 27170., 23388.,
      24180., 20655., 21330., 19712., 20312., 24835., 25570., 29893., 30768.,
      26753., 27518., 23762., 24412., 19030., 19580., 22568., 23240., 25998.,
      26796., 21872., 22568., 17870., 18460.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      269.,  302.,  305.,  344.,  341.,  386.,  377.,  428.,  413.,  470.,
      521.,  596.,  557.,  638.,  593.,  680.,  629.,  722.,  665.,  764.,
      773.,  890.,  809.,  932.,  845.,  974.,  881.,  1016., 917.,  1058.,
      1025., 1184., 1061., 1226., 1097., 1268., 1133., 1310., 1169., 1352.,
      1277., 1478., 1313., 1520., 1349., 1562., 1385., 1604., 1421., 1646.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7694.,  7964.,  8234.,  8504.,  9632.,  9968.,  10304., 10640., 11542.,
      11948., 12354., 12760., 10264., 10624., 10984., 11344., 9174.,  9484.,
      9794.,  10104., 11965., 12390., 12815., 13240., 15253., 15778., 16303.,
      16828., 18430., 19060., 19690., 20320., 16259., 16814., 17369., 17924.,
      14367., 14842., 15317., 15792., 17391., 18006., 18621., 19236., 22092.,
      22848., 23604., 24360., 26543., 27446., 28349., 29252., 23136., 23928.,
      24720., 25512., 20155., 20830., 21505., 22180., 16552., 17152., 17752.,
      18352., 21735., 22470., 23205., 23940., 26655., 27530., 28405., 29280.,
      23621., 24386., 25151., 25916., 21018., 21668., 22318., 22968., 15430.,
      15980., 16530., 17080., 19440., 20112., 20784., 21456., 23166., 23964.,
      24762., 25560., 19304., 20000., 20696., 21392., 15822., 16412., 17002.,
      17592.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      505.,  538.,  571.,  604.,  571.,  610.,  649.,  688.,  637.,  682.,
      727.,  772.,  703.,  754.,  805.,  856.,  769.,  826.,  883.,  940.,
      967.,  1042., 1117., 1192., 1033., 1114., 1195., 1276., 1099., 1186.,
      1273., 1360., 1165., 1258., 1351., 1444., 1231., 1330., 1429., 1528.,
      1429., 1546., 1663., 1780., 1495., 1618., 1741., 1864., 1561., 1690.,
      1819., 1948., 1627., 1762., 1897., 2032., 1693., 1834., 1975., 2116.,
      1891., 2050., 2209., 2368., 1957., 2122., 2287., 2452., 2023., 2194.,
      2365., 2536., 2089., 2266., 2443., 2620., 2155., 2338., 2521., 2704.,
      2353., 2554., 2755., 2956., 2419., 2626., 2833., 3040., 2485., 2698.,
      2911., 3124., 2551., 2770., 2989., 3208., 2617., 2842., 3067., 3292.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17870., 18460., 21872., 22568., 25998., 26796., 22568., 23240., 19030.,
      19580., 23762., 24412., 26753., 27518., 29893., 30768., 24835., 25570.,
      19712., 20312., 20655., 21330., 23388., 24180., 26267., 27170., 21888.,
      22644., 17451., 18066., 14973., 15448., 16695., 17250., 18490., 19120.,
      15217., 15742., 11955., 12380., 9606.,  9916.,  10464., 10824., 11350.,
      11756., 9176.,  9512.,  7054.,  7324.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      281.,  302.,  323.,  344.,  365.,  386.,  407.,  428.,  449.,  470.,
      575.,  596.,  617.,  638.,  659.,  680.,  701.,  722.,  743.,  764.,
      869.,  890.,  911.,  932.,  953.,  974.,  995.,  1016., 1037., 1058.,
      1163., 1184., 1205., 1226., 1247., 1268., 1289., 1310., 1331., 1352.,
      1457., 1478., 1499., 1520., 1541., 1562., 1583., 1604., 1625., 1646.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5012., 5276.,  5276.,  5560.,  5656.,  5984.,  6000.,  6352., 6412.,
      6812., 6828.,  7256.,  5048.,  5392.,  5408.,  5776.,  3796., 4076.,
      4108., 4408.,  4779.,  5156.,  5158.,  5560.,  5830.,  6274., 6306.,
      6780., 7041.,  7562.,  7604.,  8160.,  6158.,  6598.,  6638., 7108.,
      5411., 5760.,  5818.,  6192.,  6702.,  7134.,  7126.,  7588., 9396.,
      9912., 9920.,  10472., 12242., 12854., 12854., 13508., 9396., 9920.,
      9912., 10472., 6702.,  7126.,  7134.,  7588.,  5411.,  5818., 5760.,
      6192., 6158.,  6638.,  6598.,  7108.,  7041.,  7604.,  7562., 8160.,
      5830., 6306.,  6274.,  6780.,  4779.,  5158.,  5156.,  5560., 3796.,
      4108., 4076.,  4408.,  5048.,  5408.,  5392.,  5776.,  6412., 6828.,
      6812., 7256.,  5656.,  6000.,  5984.,  6352.,  5012.,  5276., 5276.,
      5560.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      502.,  562.,  538.,  604.,  574.,  646.,  610.,  688.,  646.,  730.,
      682.,  772.,  718.,  814.,  754.,  856.,  790.,  898.,  826.,  940.,
      1006., 1150., 1042., 1192., 1078., 1234., 1114., 1276., 1150., 1318.,
      1186., 1360., 1222., 1402., 1258., 1444., 1294., 1486., 1330., 1528.,
      1510., 1738., 1546., 1780., 1582., 1822., 1618., 1864., 1654., 1906.,
      1690., 1948., 1726., 1990., 1762., 2032., 1798., 2074., 1834., 2116.,
      2014., 2326., 2050., 2368., 2086., 2410., 2122., 2452., 2158., 2494.,
      2194., 2536., 2230., 2578., 2266., 2620., 2302., 2662., 2338., 2704.,
      2518., 2914., 2554., 2956., 2590., 2998., 2626., 3040., 2662., 3082.,
      2698., 3124., 2734., 3166., 2770., 3208., 2806., 3250., 2842., 3292.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4392.,  4656.,  4920.,  4380.,  4664., 4948.,  5232.,  4904.,
      5232.,  5560.,  5888.,  5248.,  5600.,  5952., 6304.,  5768.,  6168.,
      6568.,  6968.,  6188.,  6616.,  7044.,  7472., 5080.,  5424.,  5768.,
      6112.,  5456.,  5824.,  6192.,  6560.,  4752., 5032.,  5312.,  5592.,
      5100.,  5400.,  5700.,  6000.,  5309.,  5686., 6063.,  6440.,  5626.,
      6028.,  6430.,  6832.,  7696.,  8140.,  8584., 9028.,  8106.,  8580.,
      9054.,  9528.,  8185.,  8706.,  9227.,  9748., 8700.,  9256.,  9812.,
      10368., 6404.,  6844.,  7284.,  7724.,  6854., 7324.,  7794.,  8264.,
      5097.,  5446.,  5795.,  6144.,  5502.,  5876., 6250.,  6624.,  5324.,
      5756.,  6188.,  6620.,  5726.,  6188.,  6650., 7112.,  7588.,  8104.,
      8620.,  9136.,  8088.,  8640.,  9192.,  9744., 10432., 11044., 11656.,
      12268., 11038., 11692., 12346., 13000., 8124., 8648.,  9172.,  9696.,
      8640.,  9200.,  9760.,  10320., 6324.,  6748., 7172.,  7596.,  6774.,
      7228.,  7682.,  8136.,  4879.,  5286.,  5693., 6100.,  5200.,  5632.,
      6064.,  6496.,  6140.,  6620.,  7100.,  7580., 6542.,  7052.,  7562.,
      8072.,  8399.,  8962.,  9525.,  10088., 8894., 9492.,  10090., 10688.,
      7664.,  8140.,  8616.,  9092.,  8074.,  8580., 9086.,  9592.,  5339.,
      5718.,  6097.,  6476.,  5684.,  6088.,  6492., 6896.,  3344.,  3656.,
      3968.,  4280.,  3596.,  3928.,  4260.,  4592., 4072.,  4432.,  4792.,
      5152.,  4384.,  4768.,  5152.,  5536.,  5240., 5656.,  6072.,  6488.,
      5628.,  6072.,  6516.,  6960.,  4504.,  4848., 5192.,  5536.,  4816.,
      5184.,  5552.,  5920.,  4128.,  4392.,  4656., 4920.,  4380.,  4664.,
      4948.,  5232.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      944.,  1004., 1064., 1124., 1010., 1076., 1142., 1208., 1076., 1148.,
      1220., 1292., 1142., 1220., 1298., 1376., 1208., 1292., 1376., 1460.,
      1274., 1364., 1454., 1544., 1340., 1436., 1532., 1628., 1406., 1508.,
      1610., 1712., 1472., 1580., 1688., 1796., 1538., 1652., 1766., 1880.,
      1868., 2012., 2156., 2300., 1934., 2084., 2234., 2384., 2000., 2156.,
      2312., 2468., 2066., 2228., 2390., 2552., 2132., 2300., 2468., 2636.,
      2198., 2372., 2546., 2720., 2264., 2444., 2624., 2804., 2330., 2516.,
      2702., 2888., 2396., 2588., 2780., 2972., 2462., 2660., 2858., 3056.,
      2792., 3020., 3248., 3476., 2858., 3092., 3326., 3560., 2924., 3164.,
      3404., 3644., 2990., 3236., 3482., 3728., 3056., 3308., 3560., 3812.,
      3122., 3380., 3638., 3896., 3188., 3452., 3716., 3980., 3254., 3524.,
      3794., 4064., 3320., 3596., 3872., 4148., 3386., 3668., 3950., 4232.,
      3716., 4028., 4340., 4652., 3782., 4100., 4418., 4736., 3848., 4172.,
      4496., 4820., 3914., 4244., 4574., 4904., 3980., 4316., 4652., 4988.,
      4046., 4388., 4730., 5072., 4112., 4460., 4808., 5156., 4178., 4532.,
      4886., 5240., 4244., 4604., 4964., 5324., 4310., 4676., 5042., 5408.,
      4640., 5036., 5432., 5828., 4706., 5108., 5510., 5912., 4772., 5180.,
      5588., 5996., 4838., 5252., 5666., 6080., 4904., 5324., 5744., 6164.,
      4970., 5396., 5822., 6248., 5036., 5468., 5900., 6332., 5102., 5540.,
      5978., 6416., 5168., 5612., 6056., 6500., 5234., 5684., 6134., 6584.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15822., 16412., 17002., 17592., 19304., 20000., 20696., 21392., 23166.,
      23964., 24762., 25560., 19440., 20112., 20784., 21456., 15430., 15980.,
      16530., 17080., 21018., 21668., 22318., 22968., 23621., 24386., 25151.,
      25916., 26655., 27530., 28405., 29280., 21735., 22470., 23205., 23940.,
      16552., 17152., 17752., 18352., 20155., 20830., 21505., 22180., 23136.,
      23928., 24720., 25512., 26543., 27446., 28349., 29252., 22092., 22848.,
      23604., 24360., 17391., 18006., 18621., 19236., 14367., 14842., 15317.,
      15792., 16259., 16814., 17369., 17924., 18430., 19060., 19690., 20320.,
      15253., 15778., 16303., 16828., 11965., 12390., 12815., 13240., 9174.,
      9484.,  9794.,  10104., 10264., 10624., 10984., 11344., 11542., 11948.,
      12354., 12760., 9632.,  9968.,  10304., 10640., 7694.,  7964.,  8234.,
      8504.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      541.,  562.,  583.,  604.,  625.,  646.,  667.,  688.,  709.,  730.,
      751.,  772.,  793.,  814.,  835.,  856.,  877.,  898.,  919.,  940.,
      1129., 1150., 1171., 1192., 1213., 1234., 1255., 1276., 1297., 1318.,
      1339., 1360., 1381., 1402., 1423., 1444., 1465., 1486., 1507., 1528.,
      1717., 1738., 1759., 1780., 1801., 1822., 1843., 1864., 1885., 1906.,
      1927., 1948., 1969., 1990., 2011., 2032., 2053., 2074., 2095., 2116.,
      2305., 2326., 2347., 2368., 2389., 2410., 2431., 2452., 2473., 2494.,
      2515., 2536., 2557., 2578., 2599., 2620., 2641., 2662., 2683., 2704.,
      2893., 2914., 2935., 2956., 2977., 2998., 3019., 3040., 3061., 3082.,
      3103., 3124., 3145., 3166., 3187., 3208., 3229., 3250., 3271., 3292.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4380.,  4392.,  4664.,  4656.,  4948.,  4920.,  5232.,  4504.,
      4816.,  4848.,  5184.,  5192.,  5552.,  5536.,  5920.,  5240.,  5628.,
      5656.,  6072.,  6072.,  6516.,  6488.,  6960.,  4072.,  4384.,  4432.,
      4768.,  4792.,  5152.,  5152.,  5536.,  3344.,  3596.,  3656.,  3928.,
      3968.,  4260.,  4280.,  4592.,  5339.,  5684.,  5718.,  6088.,  6097.,
      6492.,  6476.,  6896.,  7664.,  8074.,  8140.,  8580.,  8616.,  9086.,
      9092.,  9592.,  8399.,  8894.,  8962.,  9492.,  9525.,  10090., 10088.,
      10688., 6140.,  6542.,  6620.,  7052.,  7100.,  7562.,  7580.,  8072.,
      4879.,  5200.,  5286.,  5632.,  5693.,  6064.,  6100.,  6496.,  6324.,
      6774.,  6748.,  7228.,  7172.,  7682.,  7596.,  8136.,  8124.,  8640.,
      8648.,  9200.,  9172.,  9760.,  9696.,  10320., 10432., 11038., 11044.,
      11692., 11656., 12346., 12268., 13000., 7588.,  8088.,  8104.,  8640.,
      8620.,  9192.,  9136.,  9744.,  5324.,  5726.,  5756.,  6188.,  6188.,
      6650.,  6620.,  7112.,  5097.,  5502.,  5446.,  5876.,  5795.,  6250.,
      6144.,  6624.,  6404.,  6854.,  6844.,  7324.,  7284.,  7794.,  7724.,
      8264.,  8185.,  8700.,  8706.,  9256.,  9227.,  9812.,  9748.,  10368.,
      7696.,  8106.,  8140.,  8580.,  8584.,  9054.,  9028.,  9528.,  5309.,
      5626.,  5686.,  6028.,  6063.,  6430.,  6440.,  6832.,  4752.,  5100.,
      5032.,  5400.,  5312.,  5700.,  5592.,  6000.,  5080.,  5456.,  5424.,
      5824.,  5768.,  6192.,  6112.,  6560.,  5768.,  6188.,  6168.,  6616.,
      6568.,  7044.,  6968.,  7472.,  4904.,  5248.,  5232.,  5600.,  5560.,
      5952.,  5888.,  6304.,  4128.,  4380.,  4392.,  4664.,  4656.,  4948.,
      4920.,  5232.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      968.,  1082., 1004., 1124., 1040., 1166., 1076., 1208., 1112., 1250.,
      1148., 1292., 1184., 1334., 1220., 1376., 1256., 1418., 1292., 1460.,
      1328., 1502., 1364., 1544., 1400., 1586., 1436., 1628., 1472., 1670.,
      1508., 1712., 1544., 1754., 1580., 1796., 1616., 1838., 1652., 1880.,
      1976., 2258., 2012., 2300., 2048., 2342., 2084., 2384., 2120., 2426.,
      2156., 2468., 2192., 2510., 2228., 2552., 2264., 2594., 2300., 2636.,
      2336., 2678., 2372., 2720., 2408., 2762., 2444., 2804., 2480., 2846.,
      2516., 2888., 2552., 2930., 2588., 2972., 2624., 3014., 2660., 3056.,
      2984., 3434., 3020., 3476., 3056., 3518., 3092., 3560., 3128., 3602.,
      3164., 3644., 3200., 3686., 3236., 3728., 3272., 3770., 3308., 3812.,
      3344., 3854., 3380., 3896., 3416., 3938., 3452., 3980., 3488., 4022.,
      3524., 4064., 3560., 4106., 3596., 4148., 3632., 4190., 3668., 4232.,
      3992., 4610., 4028., 4652., 4064., 4694., 4100., 4736., 4136., 4778.,
      4172., 4820., 4208., 4862., 4244., 4904., 4280., 4946., 4316., 4988.,
      4352., 5030., 4388., 5072., 4424., 5114., 4460., 5156., 4496., 5198.,
      4532., 5240., 4568., 5282., 4604., 5324., 4640., 5366., 4676., 5408.,
      5000., 5786., 5036., 5828., 5072., 5870., 5108., 5912., 5144., 5954.,
      5180., 5996., 5216., 6038., 5252., 6080., 5288., 6122., 5324., 6164.,
      5360., 6206., 5396., 6248., 5432., 6290., 5468., 6332., 5504., 6374.,
      5540., 6416., 5576., 6458., 5612., 6500., 5648., 6542., 5684., 6584.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5188.,  5440.,  5692.,  5944.,  5440.,  5712.,  5984.,  6256.,  5692.,
      5984.,  6276.,  6568.,  5944.,  6256.,  6568.,  6880.,  5048.,  5360.,
      5672.,  5984.,  5392.,  5728.,  6064.,  6400.,  5736.,  6096.,  6456.,
      6816.,  6080.,  6464.,  6848.,  7232.,  5356.,  5744.,  6132.,  6520.,
      5776.,  6192.,  6608.,  7024.,  6196.,  6640.,  7084.,  7528.,  6616.,
      7088.,  7560.,  8032.,  3928.,  4240.,  4552.,  4864.,  4304.,  4640.,
      4976.,  5312.,  4680.,  5040.,  5400.,  5760.,  5056.,  5440.,  5824.,
      6208.,  3620.,  3872.,  4124.,  4376.,  3968.,  4240.,  4512.,  4784.,
      4316.,  4608.,  4900.,  5192.,  4664.,  4976.,  5288.,  5600.,  5053.,
      5398.,  5743.,  6088.,  5370.,  5740.,  6110.,  6480.,  5687.,  6082.,
      6477.,  6872.,  6004.,  6424.,  6844.,  7264.,  8390.,  8800.,  9210.,
      9620.,  8800.,  9240.,  9680.,  10120., 9210.,  9680.,  10150., 10620.,
      9620.,  10120., 10620., 11120., 8175.,  8670.,  9165.,  9660.,  8690.,
      9220.,  9750.,  10280., 9205.,  9770.,  10335., 10900., 9720.,  10320.,
      10920., 11520., 5510.,  5912.,  6314.,  6716.,  5960.,  6392.,  6824.,
      7256.,  6410.,  6872.,  7334.,  7796.,  6860.,  7352.,  7844.,  8336.,
      4189.,  4510.,  4831.,  5152.,  4594.,  4940.,  5286.,  5632.,  4999.,
      5370.,  5741.,  6112.,  5404.,  5800.,  6196.,  6592.,  5510.,  5960.,
      6410.,  6860.,  5912.,  6392.,  6872.,  7352.,  6314.,  6824.,  7334.,
      7844.,  6716.,  7256.,  7796.,  8336.,  8180.,  8696.,  9212.,  9728.,
      8680.,  9232.,  9784.,  10336., 9180.,  9768.,  10356., 10944., 9680.,
      10304., 10928., 11552., 12386., 12992., 13598., 14204., 12992., 13640.,
      14288., 14936., 13598., 14288., 14978., 15668., 14204., 14936., 15668.,
      16400., 8180.,  8680.,  9180.,  9680.,  8696.,  9232.,  9768.,  10304.,
      9212.,  9784.,  10356., 10928., 9728.,  10336., 10944., 11552., 5510.,
      5912.,  6314.,  6716.,  5960.,  6392.,  6824.,  7256.,  6410.,  6872.,
      7334.,  7796.,  6860.,  7352.,  7844.,  8336.,  4189.,  4594.,  4999.,
      5404.,  4510.,  4940.,  5370.,  5800.,  4831.,  5286.,  5741.,  6196.,
      5152.,  5632.,  6112.,  6592.,  5510.,  5960.,  6410.,  6860.,  5912.,
      6392.,  6872.,  7352.,  6314.,  6824.,  7334.,  7844.,  6716.,  7256.,
      7796.,  8336.,  8175.,  8690.,  9205.,  9720.,  8670.,  9220.,  9770.,
      10320., 9165.,  9750.,  10335., 10920., 9660.,  10280., 10900., 11520.,
      8390.,  8800.,  9210.,  9620.,  8800.,  9240.,  9680.,  10120., 9210.,
      9680.,  10150., 10620., 9620.,  10120., 10620., 11120., 5053.,  5370.,
      5687.,  6004.,  5398.,  5740.,  6082.,  6424.,  5743.,  6110.,  6477.,
      6844.,  6088.,  6480.,  6872.,  7264.,  3620.,  3968.,  4316.,  4664.,
      3872.,  4240.,  4608.,  4976.,  4124.,  4512.,  4900.,  5288.,  4376.,
      4784.,  5192.,  5600.,  3928.,  4304.,  4680.,  5056.,  4240.,  4640.,
      5040.,  5440.,  4552.,  4976.,  5400.,  5824.,  4864.,  5312.,  5760.,
      6208.,  5356.,  5776.,  6196.,  6616.,  5744.,  6192.,  6640.,  7088.,
      6132.,  6608.,  7084.,  7560.,  6520.,  7024.,  7528.,  8032.,  5048.,
      5392.,  5736.,  6080.,  5360.,  5728.,  6096.,  6464.,  5672.,  6064.,
      6456.,  6848.,  5984.,  6400.,  6816.,  7232.,  5188.,  5440.,  5692.,
      5944.,  5440.,  5712.,  5984.,  6256.,  5692.,  5984.,  6276.,  6568.,
      5944.,  6256.,  6568.,  6880.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1822.,  1936.,  2050.,  2164.,  1888.,  2008.,  2128.,  2248.,  1954.,
      2080.,  2206.,  2332.,  2020.,  2152.,  2284.,  2416.,  2086.,  2224.,
      2362.,  2500.,  2152.,  2296.,  2440.,  2584.,  2218.,  2368.,  2518.,
      2668.,  2284.,  2440.,  2596.,  2752.,  2350.,  2512.,  2674.,  2836.,
      2416.,  2584.,  2752.,  2920.,  2482.,  2656.,  2830.,  3004.,  2548.,
      2728.,  2908.,  3088.,  2614.,  2800.,  2986.,  3172.,  2680.,  2872.,
      3064.,  3256.,  2746.,  2944.,  3142.,  3340.,  2812.,  3016.,  3220.,
      3424.,  2878.,  3088.,  3298.,  3508.,  2944.,  3160.,  3376.,  3592.,
      3010.,  3232.,  3454.,  3676.,  3076.,  3304.,  3532.,  3760.,  3670.,
      3952.,  4234.,  4516.,  3736.,  4024.,  4312.,  4600.,  3802.,  4096.,
      4390.,  4684.,  3868.,  4168.,  4468.,  4768.,  3934.,  4240.,  4546.,
      4852.,  4000.,  4312.,  4624.,  4936.,  4066.,  4384.,  4702.,  5020.,
      4132.,  4456.,  4780.,  5104.,  4198.,  4528.,  4858.,  5188.,  4264.,
      4600.,  4936.,  5272.,  4330.,  4672.,  5014.,  5356.,  4396.,  4744.,
      5092.,  5440.,  4462.,  4816.,  5170.,  5524.,  4528.,  4888.,  5248.,
      5608.,  4594.,  4960.,  5326.,  5692.,  4660.,  5032.,  5404.,  5776.,
      4726.,  5104.,  5482.,  5860.,  4792.,  5176.,  5560.,  5944.,  4858.,
      5248.,  5638.,  6028.,  4924.,  5320.,  5716.,  6112.,  5518.,  5968.,
      6418.,  6868.,  5584.,  6040.,  6496.,  6952.,  5650.,  6112.,  6574.,
      7036.,  5716.,  6184.,  6652.,  7120.,  5782.,  6256.,  6730.,  7204.,
      5848.,  6328.,  6808.,  7288.,  5914.,  6400.,  6886.,  7372.,  5980.,
      6472.,  6964.,  7456.,  6046.,  6544.,  7042.,  7540.,  6112.,  6616.,
      7120.,  7624.,  6178.,  6688.,  7198.,  7708.,  6244.,  6760.,  7276.,
      7792.,  6310.,  6832.,  7354.,  7876.,  6376.,  6904.,  7432.,  7960.,
      6442.,  6976.,  7510.,  8044.,  6508.,  7048.,  7588.,  8128.,  6574.,
      7120.,  7666.,  8212.,  6640.,  7192.,  7744.,  8296.,  6706.,  7264.,
      7822.,  8380.,  6772.,  7336.,  7900.,  8464.,  7366.,  7984.,  8602.,
      9220.,  7432.,  8056.,  8680.,  9304.,  7498.,  8128.,  8758.,  9388.,
      7564.,  8200.,  8836.,  9472.,  7630.,  8272.,  8914.,  9556.,  7696.,
      8344.,  8992.,  9640.,  7762.,  8416.,  9070.,  9724.,  7828.,  8488.,
      9148.,  9808.,  7894.,  8560.,  9226.,  9892.,  7960.,  8632.,  9304.,
      9976.,  8026.,  8704.,  9382.,  10060., 8092.,  8776.,  9460.,  10144.,
      8158.,  8848.,  9538.,  10228., 8224.,  8920.,  9616.,  10312., 8290.,
      8992.,  9694.,  10396., 8356.,  9064.,  9772.,  10480., 8422.,  9136.,
      9850.,  10564., 8488.,  9208.,  9928.,  10648., 8554.,  9280.,  10006.,
      10732., 8620.,  9352.,  10084., 10816., 9214.,  10000., 10786., 11572.,
      9280.,  10072., 10864., 11656., 9346.,  10144., 10942., 11740., 9412.,
      10216., 11020., 11824., 9478.,  10288., 11098., 11908., 9544.,  10360.,
      11176., 11992., 9610.,  10432., 11254., 12076., 9676.,  10504., 11332.,
      12160., 9742.,  10576., 11410., 12244., 9808.,  10648., 11488., 12328.,
      9874.,  10720., 11566., 12412., 9940.,  10792., 11644., 12496., 10006.,
      10864., 11722., 12580., 10072., 10936., 11800., 12664., 10138., 11008.,
      11878., 12748., 10204., 11080., 11956., 12832., 10270., 11152., 12034.,
      12916., 10336., 11224., 12112., 13000., 10402., 11296., 12190., 13084.,
      10468., 11368., 12268., 13168.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5428., 6384., 7344.,  6384.,  5428.,  6497., 7672., 8860., 7728.,
      6593., 9582., 11256., 12936., 11256., 9582., 6593., 7728., 8860.,
      7672., 6497., 5428.,  6384.,  7344.,  6384., 5428.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      308.,  344.,  380.,  416.,  452.,  596.,  632.,  668.,  704.,
      740.,  884.,  920.,  956.,  992.,  1028., 1172., 1208., 1244.,
      1280., 1316., 1460., 1496., 1532., 1568., 1604.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7604.,  7976., 8736., 9184.,  9808.,  10336., 8260.,  8736.,  6788.,
      7208.,  6649., 7042., 7700.,  8176.,  8708.,  9272.,  7329.,  7840.,
      6013.,  6466., 9678., 10140., 11200., 11760., 12664., 13328., 10710.,
      11312., 8838., 9372., 6793.,  7234.,  7756.,  8288.,  8644.,  9272.,
      7161.,  7728., 5773., 6274.,  7604.,  7976.,  8736.,  9184.,  9808.,
      10336., 8260., 8736., 6788.,  7208.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      564.,  616.,  628.,  688.,  692.,  760.,  756.,  832.,  820.,  904.,
      1076., 1192., 1140., 1264., 1204., 1336., 1268., 1408., 1332., 1480.,
      1588., 1768., 1652., 1840., 1716., 1912., 1780., 1984., 1844., 2056.,
      2100., 2344., 2164., 2416., 2228., 2488., 2292., 2560., 2356., 2632.,
      2612., 2920., 2676., 2992., 2740., 3064., 2804., 3136., 2868., 3208.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7348.,  7720.,  8092.,  8464.,  8064.,  8512.,  8960.,  9408.,  8592.,
      9120.,  9648.,  10176., 6636.,  7112.,  7588.,  8064.,  4900.,  5320.,
      5740.,  6160.,  7817.,  8210.,  8603.,  8996.,  8652.,  9128.,  9604.,
      10080., 9300.,  9864.,  10428., 10992., 7203.,  7714.,  8225.,  8736.,
      5333.,  5786.,  6239.,  6692.,  9198.,  9660.,  10122., 10584., 10192.,
      10752., 11312., 11872., 10968., 11632., 12296., 12960., 8498.,  9100.,
      9702.,  10304., 6294.,  6828.,  7362.,  7896.,  8729.,  9170.,  9611.,
      10052., 9604.,  10136., 10668., 11200., 10260., 10888., 11516., 12144.,
      7931.,  8498.,  9065.,  9632.,  5861.,  6362.,  6863.,  7364.,  7348.,
      7720.,  8092.,  8464.,  8064.,  8512.,  8960.,  9408.,  8592.,  9120.,
      9648.,  10176., 6636.,  7112.,  7588.,  8064.,  4900.,  5320.,  5740.,
      6160.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1076., 1128., 1180., 1232., 1196., 1256., 1316., 1376., 1316., 1384.,
      1452., 1520., 1436., 1512., 1588., 1664., 1556., 1640., 1724., 1808.,
      2036., 2152., 2268., 2384., 2156., 2280., 2404., 2528., 2276., 2408.,
      2540., 2672., 2396., 2536., 2676., 2816., 2516., 2664., 2812., 2960.,
      2996., 3176., 3356., 3536., 3116., 3304., 3492., 3680., 3236., 3432.,
      3628., 3824., 3356., 3560., 3764., 3968., 3476., 3688., 3900., 4112.,
      3956., 4200., 4444., 4688., 4076., 4328., 4580., 4832., 4196., 4456.,
      4716., 4976., 4316., 4584., 4852., 5120., 4436., 4712., 4988., 5264.,
      4916., 5224., 5532., 5840., 5036., 5352., 5668., 5984., 5156., 5480.,
      5804., 6128., 5276., 5608., 5940., 6272., 5396., 5736., 6076., 6416.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6788.,  7208., 8260.,  8736., 9808.,  10336., 8736.,  9184.,  7604.,
      7976.,  5773., 6274.,  7161., 7728.,  8644.,  9272.,  7756.,  8288.,
      6793.,  7234., 8838.,  9372., 10710., 11312., 12664., 13328., 11200.,
      11760., 9678., 10140., 6013., 6466.,  7329.,  7840.,  8708.,  9272.,
      7700.,  8176., 6649.,  7042., 6788.,  7208.,  8260.,  8736.,  9808.,
      10336., 8736., 9184.,  7604., 7976.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      580.,  616.,  652.,  688.,  724.,  760.,  796.,  832.,  868.,  904.,
      1156., 1192., 1228., 1264., 1300., 1336., 1372., 1408., 1444., 1480.,
      1732., 1768., 1804., 1840., 1876., 1912., 1948., 1984., 2020., 2056.,
      2308., 2344., 2380., 2416., 2452., 2488., 2524., 2560., 2596., 2632.,
      2884., 2920., 2956., 2992., 3028., 3064., 3100., 3136., 3172., 3208.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7864.,  8200.,  8296.,  8656.,  9380.,  9800.,  9856.,  10304., 10912.,
      11424., 11424., 11968., 9380.,  9856.,  9800.,  10304., 7864.,  8296.,
      8200.,  8656.,  5798.,  6170.,  6386.,  6788.,  7133.,  7602.,  7784.,
      8288.,  8520.,  9096.,  9224.,  9840.,  7357.,  7896.,  7938.,  8512.,
      6182.,  6674.,  6650.,  7172.,  11796., 12300., 12444., 12984., 14070.,
      14700., 14784., 15456., 16368., 17136., 17136., 17952., 14070., 14784.,
      14700., 15456., 11796., 12444., 12300., 12984., 6182.,  6650.,  6674.,
      7172.,  7357.,  7938.,  7896.,  8512.,  8520.,  9224.,  9096.,  9840.,
      7133.,  7784.,  7602.,  8288.,  5798.,  6386.,  6170.,  6788.,  7864.,
      8200.,  8296.,  8656.,  9380.,  9800.,  9856.,  10304., 10912., 11424.,
      11424., 11968., 9380.,  9856.,  9800.,  10304., 7864.,  8296.,  8200.,
      8656.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1064., 1160., 1128., 1232., 1192., 1304., 1256., 1376., 1320., 1448.,
      1384., 1520., 1448., 1592., 1512., 1664., 1576., 1736., 1640., 1808.,
      2088., 2312., 2152., 2384., 2216., 2456., 2280., 2528., 2344., 2600.,
      2408., 2672., 2472., 2744., 2536., 2816., 2600., 2888., 2664., 2960.,
      3112., 3464., 3176., 3536., 3240., 3608., 3304., 3680., 3368., 3752.,
      3432., 3824., 3496., 3896., 3560., 3968., 3624., 4040., 3688., 4112.,
      4136., 4616., 4200., 4688., 4264., 4760., 4328., 4832., 4392., 4904.,
      4456., 4976., 4520., 5048., 4584., 5120., 4648., 5192., 4712., 5264.,
      5160., 5768., 5224., 5840., 5288., 5912., 5352., 5984., 5416., 6056.,
      5480., 6128., 5544., 6200., 5608., 6272., 5672., 6344., 5736., 6416.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6944.,  7280.,  7616.,  7952.,  7400.,  7760.,  8120.,  8480.,  8036.,
      8456.,  8876.,  9296.,  8512.,  8960.,  9408.,  9856.,  9024.,  9536.,
      10048., 10560., 9504.,  10048., 10592., 11136., 7084.,  7560.,  8036.,
      8512.,  7448.,  7952.,  8456.,  8960.,  5312.,  5744.,  6176.,  6608.,
      5576.,  6032.,  6488.,  6944.,  7768.,  8140.,  8512.,  8884.,  8338.,
      8740.,  9142.,  9544.,  9093.,  9562.,  10031., 10500., 9688.,  10192.,
      10696., 11200., 10320., 10896., 11472., 12048., 10920., 11536., 12152.,
      12768., 8127.,  8666.,  9205.,  9744.,  8582.,  9156.,  9730.,  10304.,
      6112.,  6604.,  7096.,  7588.,  6442.,  6964.,  7486.,  8008.,  10416.,
      10920., 11424., 11928., 11100., 11640., 12180., 12720., 12054., 12684.,
      13314., 13944., 12768., 13440., 14112., 14784., 13536., 14304., 15072.,
      15840., 14256., 15072., 15888., 16704., 10626., 11340., 12054., 12768.,
      11172., 11928., 12684., 13440., 7968.,  8616.,  9264.,  9912.,  8364.,
      9048.,  9732.,  10416., 9592.,  10060., 10528., 10996., 10162., 10660.,
      11158., 11656., 10997., 11578., 12159., 12740., 11592., 12208., 12824.,
      13440., 12240., 12944., 13648., 14352., 12840., 13584., 14328., 15072.,
      9583.,  10234., 10885., 11536., 10038., 10724., 11410., 12096., 7168.,
      7756.,  8344.,  8932.,  7498.,  8116.,  8734.,  9352.,  6944.,  7280.,
      7616.,  7952.,  7400.,  7760.,  8120.,  8480.,  8036.,  8456.,  8876.,
      9296.,  8512.,  8960.,  9408.,  9856.,  9024.,  9536.,  10048., 10560.,
      9504.,  10048., 10592., 11136., 7084.,  7560.,  8036.,  8512.,  7448.,
      7952.,  8456.,  8960.,  5312.,  5744.,  6176.,  6608.,  5576.,  6032.,
      6488.,  6944.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2032.,  2128.,  2224.,  2320.,  2152.,  2256.,  2360.,  2464.,  2272.,
      2384.,  2496.,  2608.,  2392.,  2512.,  2632.,  2752.,  2512.,  2640.,
      2768.,  2896.,  2632.,  2768.,  2904.,  3040.,  2752.,  2896.,  3040.,
      3184.,  2872.,  3024.,  3176.,  3328.,  2992.,  3152.,  3312.,  3472.,
      3112.,  3280.,  3448.,  3616.,  3952.,  4176.,  4400.,  4624.,  4072.,
      4304.,  4536.,  4768.,  4192.,  4432.,  4672.,  4912.,  4312.,  4560.,
      4808.,  5056.,  4432.,  4688.,  4944.,  5200.,  4552.,  4816.,  5080.,
      5344.,  4672.,  4944.,  5216.,  5488.,  4792.,  5072.,  5352.,  5632.,
      4912.,  5200.,  5488.,  5776.,  5032.,  5328.,  5624.,  5920.,  5872.,
      6224.,  6576.,  6928.,  5992.,  6352.,  6712.,  7072.,  6112.,  6480.,
      6848.,  7216.,  6232.,  6608.,  6984.,  7360.,  6352.,  6736.,  7120.,
      7504.,  6472.,  6864.,  7256.,  7648.,  6592.,  6992.,  7392.,  7792.,
      6712.,  7120.,  7528.,  7936.,  6832.,  7248.,  7664.,  8080.,  6952.,
      7376.,  7800.,  8224.,  7792.,  8272.,  8752.,  9232.,  7912.,  8400.,
      8888.,  9376.,  8032.,  8528.,  9024.,  9520.,  8152.,  8656.,  9160.,
      9664.,  8272.,  8784.,  9296.,  9808.,  8392.,  8912.,  9432.,  9952.,
      8512.,  9040.,  9568.,  10096., 8632.,  9168.,  9704.,  10240., 8752.,
      9296.,  9840.,  10384., 8872.,  9424.,  9976.,  10528., 9712.,  10320.,
      10928., 11536., 9832.,  10448., 11064., 11680., 9952.,  10576., 11200.,
      11824., 10072., 10704., 11336., 11968., 10192., 10832., 11472., 12112.,
      10312., 10960., 11608., 12256., 10432., 11088., 11744., 12400., 10552.,
      11216., 11880., 12544., 10672., 11344., 12016., 12688., 10792., 11472.,
      12152., 12832.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4900.,  5320.,  5740.,  6160.,  6636.,  7112.,  7588.,  8064.,  8592.,
      9120.,  9648.,  10176., 8064.,  8512.,  8960.,  9408.,  7348.,  7720.,
      8092.,  8464.,  5861.,  6362.,  6863.,  7364.,  7931.,  8498.,  9065.,
      9632.,  10260., 10888., 11516., 12144., 9604.,  10136., 10668., 11200.,
      8729.,  9170.,  9611.,  10052., 6294.,  6828.,  7362.,  7896.,  8498.,
      9100.,  9702.,  10304., 10968., 11632., 12296., 12960., 10192., 10752.,
      11312., 11872., 9198.,  9660.,  10122., 10584., 5333.,  5786.,  6239.,
      6692.,  7203.,  7714.,  8225.,  8736.,  9300.,  9864.,  10428., 10992.,
      8652.,  9128.,  9604.,  10080., 7817.,  8210.,  8603.,  8996.,  4900.,
      5320.,  5740.,  6160.,  6636.,  7112.,  7588.,  8064.,  8592.,  9120.,
      9648.,  10176., 8064.,  8512.,  8960.,  9408.,  7348.,  7720.,  8092.,
      8464.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1124., 1160., 1196., 1232., 1268., 1304., 1340., 1376., 1412., 1448.,
      1484., 1520., 1556., 1592., 1628., 1664., 1700., 1736., 1772., 1808.,
      2276., 2312., 2348., 2384., 2420., 2456., 2492., 2528., 2564., 2600.,
      2636., 2672., 2708., 2744., 2780., 2816., 2852., 2888., 2924., 2960.,
      3428., 3464., 3500., 3536., 3572., 3608., 3644., 3680., 3716., 3752.,
      3788., 3824., 3860., 3896., 3932., 3968., 4004., 4040., 4076., 4112.,
      4580., 4616., 4652., 4688., 4724., 4760., 4796., 4832., 4868., 4904.,
      4940., 4976., 5012., 5048., 5084., 5120., 5156., 5192., 5228., 5264.,
      5732., 5768., 5804., 5840., 5876., 5912., 5948., 5984., 6020., 6056.,
      6092., 6128., 6164., 6200., 6236., 6272., 6308., 6344., 6380., 6416.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5312.,  5576.,  5744.,  6032.,  6176.,  6488.,  6608.,  6944.,  7084.,
      7448.,  7560.,  7952.,  8036.,  8456.,  8512.,  8960.,  9024.,  9504.,
      9536.,  10048., 10048., 10592., 10560., 11136., 8036.,  8512.,  8456.,
      8960.,  8876.,  9408.,  9296.,  9856.,  6944.,  7400.,  7280.,  7760.,
      7616.,  8120.,  7952.,  8480.,  7168.,  7498.,  7756.,  8116.,  8344.,
      8734.,  8932.,  9352.,  9583.,  10038., 10234., 10724., 10885., 11410.,
      11536., 12096., 12240., 12840., 12944., 13584., 13648., 14328., 14352.,
      15072., 10997., 11592., 11578., 12208., 12159., 12824., 12740., 13440.,
      9592.,  10162., 10060., 10660., 10528., 11158., 10996., 11656., 7968.,
      8364.,  8616.,  9048.,  9264.,  9732.,  9912.,  10416., 10626., 11172.,
      11340., 11928., 12054., 12684., 12768., 13440., 13536., 14256., 14304.,
      15072., 15072., 15888., 15840., 16704., 12054., 12768., 12684., 13440.,
      13314., 14112., 13944., 14784., 10416., 11100., 10920., 11640., 11424.,
      12180., 11928., 12720., 6112.,  6442.,  6604.,  6964.,  7096.,  7486.,
      7588.,  8008.,  8127.,  8582.,  8666.,  9156.,  9205.,  9730.,  9744.,
      10304., 10320., 10920., 10896., 11536., 11472., 12152., 12048., 12768.,
      9093.,  9688.,  9562.,  10192., 10031., 10696., 10500., 11200., 7768.,
      8338.,  8140.,  8740.,  8512.,  9142.,  8884.,  9544.,  5312.,  5576.,
      5744.,  6032.,  6176.,  6488.,  6608.,  6944.,  7084.,  7448.,  7560.,
      7952.,  8036.,  8456.,  8512.,  8960.,  9024.,  9504.,  9536.,  10048.,
      10048., 10592., 10560., 11136., 8036.,  8512.,  8456.,  8960.,  8876.,
      9408.,  9296.,  9856.,  6944.,  7400.,  7280.,  7760.,  7616.,  8120.,
      7952.,  8480.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2064.,  2248.,  2128.,  2320.,  2192.,  2392.,  2256.,  2464.,  2320.,
      2536.,  2384.,  2608.,  2448.,  2680.,  2512.,  2752.,  2576.,  2824.,
      2640.,  2896.,  2704.,  2968.,  2768.,  3040.,  2832.,  3112.,  2896.,
      3184.,  2960.,  3256.,  3024.,  3328.,  3088.,  3400.,  3152.,  3472.,
      3216.,  3544.,  3280.,  3616.,  4112.,  4552.,  4176.,  4624.,  4240.,
      4696.,  4304.,  4768.,  4368.,  4840.,  4432.,  4912.,  4496.,  4984.,
      4560.,  5056.,  4624.,  5128.,  4688.,  5200.,  4752.,  5272.,  4816.,
      5344.,  4880.,  5416.,  4944.,  5488.,  5008.,  5560.,  5072.,  5632.,
      5136.,  5704.,  5200.,  5776.,  5264.,  5848.,  5328.,  5920.,  6160.,
      6856.,  6224.,  6928.,  6288.,  7000.,  6352.,  7072.,  6416.,  7144.,
      6480.,  7216.,  6544.,  7288.,  6608.,  7360.,  6672.,  7432.,  6736.,
      7504.,  6800.,  7576.,  6864.,  7648.,  6928.,  7720.,  6992.,  7792.,
      7056.,  7864.,  7120.,  7936.,  7184.,  8008.,  7248.,  8080.,  7312.,
      8152.,  7376.,  8224.,  8208.,  9160.,  8272.,  9232.,  8336.,  9304.,
      8400.,  9376.,  8464.,  9448.,  8528.,  9520.,  8592.,  9592.,  8656.,
      9664.,  8720.,  9736.,  8784.,  9808.,  8848.,  9880.,  8912.,  9952.,
      8976.,  10024., 9040.,  10096., 9104.,  10168., 9168.,  10240., 9232.,
      10312., 9296.,  10384., 9360.,  10456., 9424.,  10528., 10256., 11464.,
      10320., 11536., 10384., 11608., 10448., 11680., 10512., 11752., 10576.,
      11824., 10640., 11896., 10704., 11968., 10768., 12040., 10832., 12112.,
      10896., 12184., 10960., 12256., 11024., 12328., 11088., 12400., 11152.,
      12472., 11216., 12544., 11280., 12616., 11344., 12688., 11408., 12760.,
      11472., 12832.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6136.,  6400.,  6664.,  6928.,  6592.,  6880.,  7168.,  7456.,  7048.,
      7360.,  7672.,  7984.,  7504.,  7840.,  8176.,  8512.,  7980.,  8344.,
      8708.,  9072.,  8456.,  8848.,  9240.,  9632.,  8932.,  9352.,  9772.,
      10192., 9408.,  9856.,  10304., 10752., 9888.,  10368., 10848., 11328.,
      10368., 10880., 11392., 11904., 10848., 11392., 11936., 12480., 11328.,
      11904., 12480., 13056., 7980.,  8456.,  8932.,  9408.,  8344.,  8848.,
      9352.,  9856.,  8708.,  9240.,  9772.,  10304., 9072.,  9632.,  10192.,
      10752., 6136.,  6592.,  7048.,  7504.,  6400.,  6880.,  7360.,  7840.,
      6664.,  7168.,  7672.,  8176.,  6928.,  7456.,  7984.,  8512.,  7670.,
      8000.,  8330.,  8660.,  8240.,  8600.,  8960.,  9320.,  8810.,  9200.,
      9590.,  9980.,  9380.,  9800.,  10220., 10640., 9975.,  10430., 10885.,
      11340., 10570., 11060., 11550., 12040., 11165., 11690., 12215., 12740.,
      11760., 12320., 12880., 13440., 12360., 12960., 13560., 14160., 12960.,
      13600., 14240., 14880., 13560., 14240., 14920., 15600., 14160., 14880.,
      15600., 16320., 9975.,  10570., 11165., 11760., 10430., 11060., 11690.,
      12320., 10885., 11550., 12215., 12880., 11340., 12040., 12740., 13440.,
      7670.,  8240.,  8810.,  9380.,  8000.,  8600.,  9200.,  9800.,  8330.,
      8960.,  9590.,  10220., 8660.,  9320.,  9980.,  10640., 9204.,  9600.,
      9996.,  10392., 9888.,  10320., 10752., 11184., 10572., 11040., 11508.,
      11976., 11256., 11760., 12264., 12768., 11970., 12516., 13062., 13608.,
      12684., 13272., 13860., 14448., 13398., 14028., 14658., 15288., 14112.,
      14784., 15456., 16128., 14832., 15552., 16272., 16992., 15552., 16320.,
      17088., 17856., 16272., 17088., 17904., 18720., 16992., 17856., 18720.,
      19584., 11970., 12684., 13398., 14112., 12516., 13272., 14028., 14784.,
      13062., 13860., 14658., 15456., 13608., 14448., 15288., 16128., 9204.,
      9888.,  10572., 11256., 9600.,  10320., 11040., 11760., 9996.,  10752.,
      11508., 12264., 10392., 11184., 11976., 12768., 7670.,  8000.,  8330.,
      8660.,  8240.,  8600.,  8960.,  9320.,  8810.,  9200.,  9590.,  9980.,
      9380.,  9800.,  10220., 10640., 9975.,  10430., 10885., 11340., 10570.,
      11060., 11550., 12040., 11165., 11690., 12215., 12740., 11760., 12320.,
      12880., 13440., 12360., 12960., 13560., 14160., 12960., 13600., 14240.,
      14880., 13560., 14240., 14920., 15600., 14160., 14880., 15600., 16320.,
      9975.,  10570., 11165., 11760., 10430., 11060., 11690., 12320., 10885.,
      11550., 12215., 12880., 11340., 12040., 12740., 13440., 7670.,  8240.,
      8810.,  9380.,  8000.,  8600.,  9200.,  9800.,  8330.,  8960.,  9590.,
      10220., 8660.,  9320.,  9980.,  10640., 6136.,  6400.,  6664.,  6928.,
      6592.,  6880.,  7168.,  7456.,  7048.,  7360.,  7672.,  7984.,  7504.,
      7840.,  8176.,  8512.,  7980.,  8344.,  8708.,  9072.,  8456.,  8848.,
      9240.,  9632.,  8932.,  9352.,  9772.,  10192., 9408.,  9856.,  10304.,
      10752., 9888.,  10368., 10848., 11328., 10368., 10880., 11392., 11904.,
      10848., 11392., 11936., 12480., 11328., 11904., 12480., 13056., 7980.,
      8456.,  8932.,  9408.,  8344.,  8848.,  9352.,  9856.,  8708.,  9240.,
      9772.,  10304., 9072.,  9632.,  10192., 10752., 6136.,  6592.,  7048.,
      7504.,  6400.,  6880.,  7360.,  7840.,  6664.,  7168.,  7672.,  8176.,
      6928.,  7456.,  7984.,  8512.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3944.,  4128.,  4312.,  4496.,  4064.,  4256.,  4448.,  4640.,  4184.,
      4384.,  4584.,  4784.,  4304.,  4512.,  4720.,  4928.,  4424.,  4640.,
      4856.,  5072.,  4544.,  4768.,  4992.,  5216.,  4664.,  4896.,  5128.,
      5360.,  4784.,  5024.,  5264.,  5504.,  4904.,  5152.,  5400.,  5648.,
      5024.,  5280.,  5536.,  5792.,  5144.,  5408.,  5672.,  5936.,  5264.,
      5536.,  5808.,  6080.,  5384.,  5664.,  5944.,  6224.,  5504.,  5792.,
      6080.,  6368.,  5624.,  5920.,  6216.,  6512.,  5744.,  6048.,  6352.,
      6656.,  5864.,  6176.,  6488.,  6800.,  5984.,  6304.,  6624.,  6944.,
      6104.,  6432.,  6760.,  7088.,  6224.,  6560.,  6896.,  7232.,  7784.,
      8224.,  8664.,  9104.,  7904.,  8352.,  8800.,  9248.,  8024.,  8480.,
      8936.,  9392.,  8144.,  8608.,  9072.,  9536.,  8264.,  8736.,  9208.,
      9680.,  8384.,  8864.,  9344.,  9824.,  8504.,  8992.,  9480.,  9968.,
      8624.,  9120.,  9616.,  10112., 8744.,  9248.,  9752.,  10256., 8864.,
      9376.,  9888.,  10400., 8984.,  9504.,  10024., 10544., 9104.,  9632.,
      10160., 10688., 9224.,  9760.,  10296., 10832., 9344.,  9888.,  10432.,
      10976., 9464.,  10016., 10568., 11120., 9584.,  10144., 10704., 11264.,
      9704.,  10272., 10840., 11408., 9824.,  10400., 10976., 11552., 9944.,
      10528., 11112., 11696., 10064., 10656., 11248., 11840., 11624., 12320.,
      13016., 13712., 11744., 12448., 13152., 13856., 11864., 12576., 13288.,
      14000., 11984., 12704., 13424., 14144., 12104., 12832., 13560., 14288.,
      12224., 12960., 13696., 14432., 12344., 13088., 13832., 14576., 12464.,
      13216., 13968., 14720., 12584., 13344., 14104., 14864., 12704., 13472.,
      14240., 15008., 12824., 13600., 14376., 15152., 12944., 13728., 14512.,
      15296., 13064., 13856., 14648., 15440., 13184., 13984., 14784., 15584.,
      13304., 14112., 14920., 15728., 13424., 14240., 15056., 15872., 13544.,
      14368., 15192., 16016., 13664., 14496., 15328., 16160., 13784., 14624.,
      15464., 16304., 13904., 14752., 15600., 16448., 15464., 16416., 17368.,
      18320., 15584., 16544., 17504., 18464., 15704., 16672., 17640., 18608.,
      15824., 16800., 17776., 18752., 15944., 16928., 17912., 18896., 16064.,
      17056., 18048., 19040., 16184., 17184., 18184., 19184., 16304., 17312.,
      18320., 19328., 16424., 17440., 18456., 19472., 16544., 17568., 18592.,
      19616., 16664., 17696., 18728., 19760., 16784., 17824., 18864., 19904.,
      16904., 17952., 19000., 20048., 17024., 18080., 19136., 20192., 17144.,
      18208., 19272., 20336., 17264., 18336., 19408., 20480., 17384., 18464.,
      19544., 20624., 17504., 18592., 19680., 20768., 17624., 18720., 19816.,
      20912., 17744., 18848., 19952., 21056., 19304., 20512., 21720., 22928.,
      19424., 20640., 21856., 23072., 19544., 20768., 21992., 23216., 19664.,
      20896., 22128., 23360., 19784., 21024., 22264., 23504., 19904., 21152.,
      22400., 23648., 20024., 21280., 22536., 23792., 20144., 21408., 22672.,
      23936., 20264., 21536., 22808., 24080., 20384., 21664., 22944., 24224.,
      20504., 21792., 23080., 24368., 20624., 21920., 23216., 24512., 20744.,
      22048., 23352., 24656., 20864., 22176., 23488., 24800., 20984., 22304.,
      23624., 24944., 21104., 22432., 23760., 25088., 21224., 22560., 23896.,
      25232., 21344., 22688., 24032., 25376., 21464., 22816., 24168., 25520.,
      21584., 22944., 24304., 25664.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9730.,  12350., 15035., 12650., 10210., 13260., 16710., 20202., 16890.,
      13548., 16982., 21280., 25585., 21280., 16982., 13548., 16890., 20202.,
      16710., 13260., 10210., 12650., 15035., 12350., 9730.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      207., 228., 249., 270., 291., 333., 354., 375., 396.,
      417., 459., 480., 501., 522., 543., 585., 606., 627.,
      648., 669., 711., 732., 753., 774., 795.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7138.,  7428.,  10181., 10556., 13285., 13750., 11524., 11924., 9786.,
      10116., 10996., 11416., 15280., 15820., 19578., 20244., 16762., 17332.,
      14020., 14488., 15214., 15788., 20769., 21504., 26267., 27170., 22270.,
      23040., 18422., 19052., 16676., 17240., 22948., 23668., 29154., 30036.,
      24798., 25548., 20596., 21208., 19890., 20420., 24625., 25300., 29245.,
      30070., 24000., 24700., 18890., 19460.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      369.,  414.,  405.,  456.,  441.,  498.,  477.,  540.,  513.,  582.,
      585.,  666.,  621.,  708.,  657.,  750.,  693.,  792.,  729.,  834.,
      801.,  918.,  837.,  960.,  873.,  1002., 909.,  1044., 945.,  1086.,
      1017., 1170., 1053., 1212., 1089., 1254., 1125., 1296., 1161., 1338.,
      1233., 1422., 1269., 1464., 1305., 1506., 1341., 1548., 1377., 1590.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7650.,  7940.,  8230.,  8520.,  10515., 10890., 11265., 11640., 13305.,
      13770., 14235., 14700., 11320., 11720., 12120., 12520., 9578.,  9908.,
      10238., 10568., 11396., 11816., 12236., 12656., 15556., 16096., 16636.,
      17176., 19546., 20212., 20878., 21544., 16634., 17204., 17774., 18344.,
      14068., 14536., 15004., 15472., 15838., 16412., 16986., 17560., 21347.,
      22082., 22817., 23552., 26543., 27446., 28349., 29252., 22458., 23228.,
      23998., 24768., 18870., 19500., 20130., 20760., 14932., 15496., 16060.,
      16624., 20728., 21448., 22168., 22888., 26194., 27076., 27958., 28840.,
      22542., 23292., 24042., 24792., 19396., 20008., 20620., 21232., 17554.,
      18084., 18614., 19144., 21887., 22562., 23237., 23912., 25857., 26682.,
      27507., 28332., 21700., 22400., 23100., 23800., 18010., 18580., 19150.,
      19720.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      693.,  738.,  783.,  828.,  759.,  810.,  861.,  912.,  825.,  882.,
      939.,  996.,  891.,  954.,  1017., 1080., 957.,  1026., 1095., 1164.,
      1089., 1170., 1251., 1332., 1155., 1242., 1329., 1416., 1221., 1314.,
      1407., 1500., 1287., 1386., 1485., 1584., 1353., 1458., 1563., 1668.,
      1485., 1602., 1719., 1836., 1551., 1674., 1797., 1920., 1617., 1746.,
      1875., 2004., 1683., 1818., 1953., 2088., 1749., 1890., 2031., 2172.,
      1881., 2034., 2187., 2340., 1947., 2106., 2265., 2424., 2013., 2178.,
      2343., 2508., 2079., 2250., 2421., 2592., 2145., 2322., 2499., 2676.,
      2277., 2466., 2655., 2844., 2343., 2538., 2733., 2928., 2409., 2610.,
      2811., 3012., 2475., 2682., 2889., 3096., 2541., 2754., 2967., 3180.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18890., 19460., 24000., 24700., 29245., 30070., 24625., 25300., 19890.,
      20420., 20596., 21208., 24798., 25548., 29154., 30036., 22948., 23668.,
      16676., 17240., 18422., 19052., 22270., 23040., 26267., 27170., 20769.,
      21504., 15214., 15788., 14020., 14488., 16762., 17332., 19578., 20244.,
      15280., 15820., 10996., 11416., 9786.,  10116., 11524., 11924., 13285.,
      13750., 10181., 10556., 7138.,  7428.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      393.,  414.,  435.,  456.,  477.,  498.,  519.,  540.,  561.,  582.,
      645.,  666.,  687.,  708.,  729.,  750.,  771.,  792.,  813.,  834.,
      897.,  918.,  939.,  960.,  981.,  1002., 1023., 1044., 1065., 1086.,
      1149., 1170., 1191., 1212., 1233., 1254., 1275., 1296., 1317., 1338.,
      1401., 1422., 1443., 1464., 1485., 1506., 1527., 1548., 1569., 1590.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5092., 5396.,  5380.,  5704.,  5739.,  6112.,  6122.,  6520., 6518.,
      6970., 6986.,  7468.,  5499.,  5890.,  5896.,  6312.,  4580., 4900.,
      4916., 5256.,  4664.,  5032.,  5032.,  5424.,  5922.,  6364., 6400.,
      6872., 7348.,  7876.,  7924.,  8488.,  6514.,  6952.,  6996., 7464.,
      5816., 6152.,  6216.,  6576.,  6412.,  6828.,  6812.,  7256., 9249.,
      9756., 9762.,  10304., 12242., 12854., 12854., 13508., 9249., 9762.,
      9756., 10304., 6412.,  6812.,  6828.,  7256.,  5816.,  6216., 6152.,
      6576., 6514.,  6996.,  6952.,  7464.,  7348.,  7924.,  7876., 8488.,
      5922., 6400.,  6364.,  6872.,  4664.,  5032.,  5032.,  5424., 4580.,
      4916., 4900.,  5256.,  5499.,  5896.,  5890.,  6312.,  6518., 6986.,
      6970., 7468.,  5739.,  6122.,  6112.,  6520.,  5092.,  5380., 5396.,
      5704.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      702.,  786.,  738.,  828.,  774.,  870.,  810.,  912.,  846.,  954.,
      882.,  996.,  918.,  1038., 954.,  1080., 990.,  1122., 1026., 1164.,
      1134., 1290., 1170., 1332., 1206., 1374., 1242., 1416., 1278., 1458.,
      1314., 1500., 1350., 1542., 1386., 1584., 1422., 1626., 1458., 1668.,
      1566., 1794., 1602., 1836., 1638., 1878., 1674., 1920., 1710., 1962.,
      1746., 2004., 1782., 2046., 1818., 2088., 1854., 2130., 1890., 2172.,
      1998., 2298., 2034., 2340., 2070., 2382., 2106., 2424., 2142., 2466.,
      2178., 2508., 2214., 2550., 2250., 2592., 2286., 2634., 2322., 2676.,
      2430., 2802., 2466., 2844., 2502., 2886., 2538., 2928., 2574., 2970.,
      2610., 3012., 2646., 3054., 2682., 3096., 2718., 3138., 2754., 3180.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4760.,  5064.,  5368.,  5672.,  5060.,  5384., 5708.,  6032.,  5505.,
      5878.,  6251.,  6624.,  5894.,  6292.,  6690., 7088.,  6312.,  6764.,
      7216.,  7668.,  6770.,  7252.,  7734.,  8216., 5551.,  5942.,  6333.,
      6724.,  5936.,  6352.,  6768.,  7184.,  5128., 5448.,  5768.,  6088.,
      5460.,  5800.,  6140.,  6480.,  6400.,  6768., 7136.,  7504.,  6728.,
      7120.,  7512.,  7904.,  6954.,  7396.,  7838., 8280.,  7400.,  7872.,
      8344.,  8816.,  7640.,  8168.,  8696.,  9224., 8180.,  8744.,  9308.,
      9872.,  6158.,  6596.,  7034.,  7472.,  6612., 7080.,  7548.,  8016.,
      5152.,  5488.,  5824.,  6160.,  5544.,  5904., 6264.,  6624.,  5240.,
      5656.,  6072.,  6488.,  5628.,  6072.,  6516., 6960.,  7783.,  8290.,
      8797.,  9304.,  8294.,  8836.,  9378.,  9920., 10432., 11044., 11656.,
      12268., 11038., 11692., 12346., 13000., 7841., 8354.,  8867.,  9380.,
      8340.,  8888.,  9436.,  9984.,  5768.,  6168., 6568.,  6968.,  6188.,
      6616.,  7044.,  7472.,  5216.,  5616.,  6016., 6416.,  5544.,  5968.,
      6392.,  6816.,  6562.,  7044.,  7526.,  8008., 6992.,  7504.,  8016.,
      8528.,  7976.,  8552.,  9128.,  9704.,  8484., 9096.,  9708.,  10320.,
      6694.,  7172.,  7650.,  8128.,  7100.,  7608., 8116.,  8624.,  5888.,
      6256.,  6624.,  6992.,  6216.,  6608.,  7000., 7392.,  5112.,  5448.,
      5784.,  6120.,  5412.,  5768.,  6124.,  6480., 5417.,  5814.,  6211.,
      6608.,  5790.,  6212.,  6634.,  7056.,  5784., 6252.,  6720.,  7188.,
      6210.,  6708.,  7206.,  7704.,  4631.,  5014., 5397.,  5780.,  4968.,
      5376.,  5784.,  6192.,  3880.,  4168.,  4456., 4744.,  4148.,  4456.,
      4764.,  5072.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1320., 1404., 1488., 1572., 1386., 1476., 1566., 1656., 1452., 1548.,
      1644., 1740., 1518., 1620., 1722., 1824., 1584., 1692., 1800., 1908.,
      1650., 1764., 1878., 1992., 1716., 1836., 1956., 2076., 1782., 1908.,
      2034., 2160., 1848., 1980., 2112., 2244., 1914., 2052., 2190., 2328.,
      2112., 2268., 2424., 2580., 2178., 2340., 2502., 2664., 2244., 2412.,
      2580., 2748., 2310., 2484., 2658., 2832., 2376., 2556., 2736., 2916.,
      2442., 2628., 2814., 3000., 2508., 2700., 2892., 3084., 2574., 2772.,
      2970., 3168., 2640., 2844., 3048., 3252., 2706., 2916., 3126., 3336.,
      2904., 3132., 3360., 3588., 2970., 3204., 3438., 3672., 3036., 3276.,
      3516., 3756., 3102., 3348., 3594., 3840., 3168., 3420., 3672., 3924.,
      3234., 3492., 3750., 4008., 3300., 3564., 3828., 4092., 3366., 3636.,
      3906., 4176., 3432., 3708., 3984., 4260., 3498., 3780., 4062., 4344.,
      3696., 3996., 4296., 4596., 3762., 4068., 4374., 4680., 3828., 4140.,
      4452., 4764., 3894., 4212., 4530., 4848., 3960., 4284., 4608., 4932.,
      4026., 4356., 4686., 5016., 4092., 4428., 4764., 5100., 4158., 4500.,
      4842., 5184., 4224., 4572., 4920., 5268., 4290., 4644., 4998., 5352.,
      4488., 4860., 5232., 5604., 4554., 4932., 5310., 5688., 4620., 5004.,
      5388., 5772., 4686., 5076., 5466., 5856., 4752., 5148., 5544., 5940.,
      4818., 5220., 5622., 6024., 4884., 5292., 5700., 6108., 4950., 5364.,
      5778., 6192., 5016., 5436., 5856., 6276., 5082., 5508., 5934., 6360.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18010., 18580., 19150., 19720., 21700., 22400., 23100., 23800., 25857.,
      26682., 27507., 28332., 21887., 22562., 23237., 23912., 17554., 18084.,
      18614., 19144., 19396., 20008., 20620., 21232., 22542., 23292., 24042.,
      24792., 26194., 27076., 27958., 28840., 20728., 21448., 22168., 22888.,
      14932., 15496., 16060., 16624., 18870., 19500., 20130., 20760., 22458.,
      23228., 23998., 24768., 26543., 27446., 28349., 29252., 21347., 22082.,
      22817., 23552., 15838., 16412., 16986., 17560., 14068., 14536., 15004.,
      15472., 16634., 17204., 17774., 18344., 19546., 20212., 20878., 21544.,
      15556., 16096., 16636., 17176., 11396., 11816., 12236., 12656., 9578.,
      9908.,  10238., 10568., 11320., 11720., 12120., 12520., 13305., 13770.,
      14235., 14700., 10515., 10890., 11265., 11640., 7650.,  7940.,  8230.,
      8520.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      765.,  786.,  807.,  828.,  849.,  870.,  891.,  912.,  933.,  954.,
      975.,  996.,  1017., 1038., 1059., 1080., 1101., 1122., 1143., 1164.,
      1269., 1290., 1311., 1332., 1353., 1374., 1395., 1416., 1437., 1458.,
      1479., 1500., 1521., 1542., 1563., 1584., 1605., 1626., 1647., 1668.,
      1773., 1794., 1815., 1836., 1857., 1878., 1899., 1920., 1941., 1962.,
      1983., 2004., 2025., 2046., 2067., 2088., 2109., 2130., 2151., 2172.,
      2277., 2298., 2319., 2340., 2361., 2382., 2403., 2424., 2445., 2466.,
      2487., 2508., 2529., 2550., 2571., 2592., 2613., 2634., 2655., 2676.,
      2781., 2802., 2823., 2844., 2865., 2886., 2907., 2928., 2949., 2970.,
      2991., 3012., 3033., 3054., 3075., 3096., 3117., 3138., 3159., 3180.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3880.,  4148.,  4168.,  4456.,  4456.,  4764., 4744.,  5072.,  4631.,
      4968.,  5014.,  5376.,  5397.,  5784.,  5780., 6192.,  5784.,  6210.,
      6252.,  6708.,  6720.,  7206.,  7188.,  7704., 5417.,  5790.,  5814.,
      6212.,  6211.,  6634.,  6608.,  7056.,  5112., 5412.,  5448.,  5768.,
      5784.,  6124.,  6120.,  6480.,  5888.,  6216., 6256.,  6608.,  6624.,
      7000.,  6992.,  7392.,  6694.,  7100.,  7172., 7608.,  7650.,  8116.,
      8128.,  8624.,  7976.,  8484.,  8552.,  9096., 9128.,  9708.,  9704.,
      10320., 6562.,  6992.,  7044.,  7504.,  7526., 8016.,  8008.,  8528.,
      5216.,  5544.,  5616.,  5968.,  6016.,  6392., 6416.,  6816.,  5768.,
      6188.,  6168.,  6616.,  6568.,  7044.,  6968., 7472.,  7841.,  8340.,
      8354.,  8888.,  8867.,  9436.,  9380.,  9984., 10432., 11038., 11044.,
      11692., 11656., 12346., 12268., 13000., 7783., 8294.,  8290.,  8836.,
      8797.,  9378.,  9304.,  9920.,  5240.,  5628., 5656.,  6072.,  6072.,
      6516.,  6488.,  6960.,  5152.,  5544.,  5488., 5904.,  5824.,  6264.,
      6160.,  6624.,  6158.,  6612.,  6596.,  7080., 7034.,  7548.,  7472.,
      8016.,  7640.,  8180.,  8168.,  8744.,  8696., 9308.,  9224.,  9872.,
      6954.,  7400.,  7396.,  7872.,  7838.,  8344., 8280.,  8816.,  6400.,
      6728.,  6768.,  7120.,  7136.,  7512.,  7504., 7904.,  5128.,  5460.,
      5448.,  5800.,  5768.,  6140.,  6088.,  6480., 5551.,  5936.,  5942.,
      6352.,  6333.,  6768.,  6724.,  7184.,  6312., 6770.,  6764.,  7252.,
      7216.,  7734.,  7668.,  8216.,  5505.,  5894., 5878.,  6292.,  6251.,
      6690.,  6624.,  7088.,  4760.,  5060.,  5064., 5384.,  5368.,  5708.,
      5672.,  6032.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1368., 1530., 1404., 1572., 1440., 1614., 1476., 1656., 1512., 1698.,
      1548., 1740., 1584., 1782., 1620., 1824., 1656., 1866., 1692., 1908.,
      1728., 1950., 1764., 1992., 1800., 2034., 1836., 2076., 1872., 2118.,
      1908., 2160., 1944., 2202., 1980., 2244., 2016., 2286., 2052., 2328.,
      2232., 2538., 2268., 2580., 2304., 2622., 2340., 2664., 2376., 2706.,
      2412., 2748., 2448., 2790., 2484., 2832., 2520., 2874., 2556., 2916.,
      2592., 2958., 2628., 3000., 2664., 3042., 2700., 3084., 2736., 3126.,
      2772., 3168., 2808., 3210., 2844., 3252., 2880., 3294., 2916., 3336.,
      3096., 3546., 3132., 3588., 3168., 3630., 3204., 3672., 3240., 3714.,
      3276., 3756., 3312., 3798., 3348., 3840., 3384., 3882., 3420., 3924.,
      3456., 3966., 3492., 4008., 3528., 4050., 3564., 4092., 3600., 4134.,
      3636., 4176., 3672., 4218., 3708., 4260., 3744., 4302., 3780., 4344.,
      3960., 4554., 3996., 4596., 4032., 4638., 4068., 4680., 4104., 4722.,
      4140., 4764., 4176., 4806., 4212., 4848., 4248., 4890., 4284., 4932.,
      4320., 4974., 4356., 5016., 4392., 5058., 4428., 5100., 4464., 5142.,
      4500., 5184., 4536., 5226., 4572., 5268., 4608., 5310., 4644., 5352.,
      4824., 5562., 4860., 5604., 4896., 5646., 4932., 5688., 4968., 5730.,
      5004., 5772., 5040., 5814., 5076., 5856., 5112., 5898., 5148., 5940.,
      5184., 5982., 5220., 6024., 5256., 6066., 5292., 6108., 5328., 6150.,
      5364., 6192., 5400., 6234., 5436., 6276., 5472., 6318., 5508., 6360.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3652.,  3920.,  4188.,  4456.,  3952.,  4240.,  4528.,  4816.,  4252.,
      4560.,  4868.,  5176.,  4552.,  4880.,  5208.,  5536.,  4221.,  4558.,
      4895.,  5232.,  4610.,  4972.,  5334.,  5696.,  4999.,  5386.,  5773.,
      6160.,  5388.,  5800.,  6212.,  6624.,  5190.,  5616.,  6042.,  6468.,
      5648.,  6104.,  6560.,  7016.,  6106.,  6592.,  7078.,  7564.,  6564.,
      7080.,  7596.,  8112.,  4829.,  5202.,  5575.,  5948.,  5214.,  5612.,
      6010.,  6408.,  5599.,  6022.,  6445.,  6868.,  5984.,  6432.,  6880.,
      7328.,  4868.,  5168.,  5468.,  5768.,  5200.,  5520.,  5840.,  6160.,
      5532.,  5872.,  6212.,  6552.,  5864.,  6224.,  6584.,  6944.,  6712.,
      7040.,  7368.,  7696.,  7040.,  7392.,  7744.,  8096.,  7368.,  7744.,
      8120.,  8496.,  7696.,  8096.,  8496.,  8896.,  6614.,  7020.,  7426.,
      7832.,  7060.,  7496.,  7932.,  8368.,  7506.,  7972.,  8438.,  8904.,
      7952.,  8448.,  8944.,  9440.,  7060.,  7568.,  8076.,  8584.,  7600.,
      8144.,  8688.,  9232.,  8140.,  8720.,  9300.,  9880.,  8680.,  9296.,
      9912.,  10528., 5430.,  5860.,  6290.,  6720.,  5884.,  6344.,  6804.,
      7264.,  6338.,  6828.,  7318.,  7808.,  6792.,  7312.,  7832.,  8352.,
      4344.,  4672.,  5000.,  5328.,  4736.,  5088.,  5440.,  5792.,  5128.,
      5504.,  5880.,  6256.,  5520.,  5920.,  6320.,  6720.,  5356.,  5776.,
      6196.,  6616.,  5744.,  6192.,  6640.,  7088.,  6132.,  6608.,  7084.,
      7560.,  6520.,  7024.,  7528.,  8032.,  8559.,  9058.,  9557.,  10056.,
      9070.,  9604.,  10138., 10672., 9581.,  10150., 10719., 11288., 10092.,
      10696., 11300., 11904., 12386., 12992., 13598., 14204., 12992., 13640.,
      14288., 14936., 13598., 14288., 14978., 15668., 14204., 14936., 15668.,
      16400., 8559.,  9070.,  9581.,  10092., 9058.,  9604.,  10150., 10696.,
      9557.,  10138., 10719., 11300., 10056., 10672., 11288., 11904., 5356.,
      5744.,  6132.,  6520.,  5776.,  6192.,  6608.,  7024.,  6196.,  6640.,
      7084.,  7528.,  6616.,  7088.,  7560.,  8032.,  4344.,  4736.,  5128.,
      5520.,  4672.,  5088.,  5504.,  5920.,  5000.,  5440.,  5880.,  6320.,
      5328.,  5792.,  6256.,  6720.,  5430.,  5884.,  6338.,  6792.,  5860.,
      6344.,  6828.,  7312.,  6290.,  6804.,  7318.,  7832.,  6720.,  7264.,
      7808.,  8352.,  7060.,  7600.,  8140.,  8680.,  7568.,  8144.,  8720.,
      9296.,  8076.,  8688.,  9300.,  9912.,  8584.,  9232.,  9880.,  10528.,
      6614.,  7060.,  7506.,  7952.,  7020.,  7496.,  7972.,  8448.,  7426.,
      7932.,  8438.,  8944.,  7832.,  8368.,  8904.,  9440.,  6712.,  7040.,
      7368.,  7696.,  7040.,  7392.,  7744.,  8096.,  7368.,  7744.,  8120.,
      8496.,  7696.,  8096.,  8496.,  8896.,  4868.,  5200.,  5532.,  5864.,
      5168.,  5520.,  5872.,  6224.,  5468.,  5840.,  6212.,  6584.,  5768.,
      6160.,  6552.,  6944.,  4829.,  5214.,  5599.,  5984.,  5202.,  5612.,
      6022.,  6432.,  5575.,  6010.,  6445.,  6880.,  5948.,  6408.,  6868.,
      7328.,  5190.,  5648.,  6106.,  6564.,  5616.,  6104.,  6592.,  7080.,
      6042.,  6560.,  7078.,  7596.,  6468.,  7016.,  7564.,  8112.,  4221.,
      4610.,  4999.,  5388.,  4558.,  4972.,  5386.,  5800.,  4895.,  5334.,
      5773.,  6212.,  5232.,  5696.,  6160.,  6624.,  3652.,  3952.,  4252.,
      4552.,  3920.,  4240.,  4560.,  4880.,  4188.,  4528.,  4868.,  5208.,
      4456.,  4816.,  5176.,  5536.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2574.,  2736.,  2898.,  3060.,  2640.,  2808.,  2976.,  3144.,  2706.,
      2880.,  3054.,  3228.,  2772.,  2952.,  3132.,  3312.,  2838.,  3024.,
      3210.,  3396.,  2904.,  3096.,  3288.,  3480.,  2970.,  3168.,  3366.,
      3564.,  3036.,  3240.,  3444.,  3648.,  3102.,  3312.,  3522.,  3732.,
      3168.,  3384.,  3600.,  3816.,  3234.,  3456.,  3678.,  3900.,  3300.,
      3528.,  3756.,  3984.,  3366.,  3600.,  3834.,  4068.,  3432.,  3672.,
      3912.,  4152.,  3498.,  3744.,  3990.,  4236.,  3564.,  3816.,  4068.,
      4320.,  3630.,  3888.,  4146.,  4404.,  3696.,  3960.,  4224.,  4488.,
      3762.,  4032.,  4302.,  4572.,  3828.,  4104.,  4380.,  4656.,  4158.,
      4464.,  4770.,  5076.,  4224.,  4536.,  4848.,  5160.,  4290.,  4608.,
      4926.,  5244.,  4356.,  4680.,  5004.,  5328.,  4422.,  4752.,  5082.,
      5412.,  4488.,  4824.,  5160.,  5496.,  4554.,  4896.,  5238.,  5580.,
      4620.,  4968.,  5316.,  5664.,  4686.,  5040.,  5394.,  5748.,  4752.,
      5112.,  5472.,  5832.,  4818.,  5184.,  5550.,  5916.,  4884.,  5256.,
      5628.,  6000.,  4950.,  5328.,  5706.,  6084.,  5016.,  5400.,  5784.,
      6168.,  5082.,  5472.,  5862.,  6252.,  5148.,  5544.,  5940.,  6336.,
      5214.,  5616.,  6018.,  6420.,  5280.,  5688.,  6096.,  6504.,  5346.,
      5760.,  6174.,  6588.,  5412.,  5832.,  6252.,  6672.,  5742.,  6192.,
      6642.,  7092.,  5808.,  6264.,  6720.,  7176.,  5874.,  6336.,  6798.,
      7260.,  5940.,  6408.,  6876.,  7344.,  6006.,  6480.,  6954.,  7428.,
      6072.,  6552.,  7032.,  7512.,  6138.,  6624.,  7110.,  7596.,  6204.,
      6696.,  7188.,  7680.,  6270.,  6768.,  7266.,  7764.,  6336.,  6840.,
      7344.,  7848.,  6402.,  6912.,  7422.,  7932.,  6468.,  6984.,  7500.,
      8016.,  6534.,  7056.,  7578.,  8100.,  6600.,  7128.,  7656.,  8184.,
      6666.,  7200.,  7734.,  8268.,  6732.,  7272.,  7812.,  8352.,  6798.,
      7344.,  7890.,  8436.,  6864.,  7416.,  7968.,  8520.,  6930.,  7488.,
      8046.,  8604.,  6996.,  7560.,  8124.,  8688.,  7326.,  7920.,  8514.,
      9108.,  7392.,  7992.,  8592.,  9192.,  7458.,  8064.,  8670.,  9276.,
      7524.,  8136.,  8748.,  9360.,  7590.,  8208.,  8826.,  9444.,  7656.,
      8280.,  8904.,  9528.,  7722.,  8352.,  8982.,  9612.,  7788.,  8424.,
      9060.,  9696.,  7854.,  8496.,  9138.,  9780.,  7920.,  8568.,  9216.,
      9864.,  7986.,  8640.,  9294.,  9948.,  8052.,  8712.,  9372.,  10032.,
      8118.,  8784.,  9450.,  10116., 8184.,  8856.,  9528.,  10200., 8250.,
      8928.,  9606.,  10284., 8316.,  9000.,  9684.,  10368., 8382.,  9072.,
      9762.,  10452., 8448.,  9144.,  9840.,  10536., 8514.,  9216.,  9918.,
      10620., 8580.,  9288.,  9996.,  10704., 8910.,  9648.,  10386., 11124.,
      8976.,  9720.,  10464., 11208., 9042.,  9792.,  10542., 11292., 9108.,
      9864.,  10620., 11376., 9174.,  9936.,  10698., 11460., 9240.,  10008.,
      10776., 11544., 9306.,  10080., 10854., 11628., 9372.,  10152., 10932.,
      11712., 9438.,  10224., 11010., 11796., 9504.,  10296., 11088., 11880.,
      9570.,  10368., 11166., 11964., 9636.,  10440., 11244., 12048., 9702.,
      10512., 11322., 12132., 9768.,  10584., 11400., 12216., 9834.,  10656.,
      11478., 12300., 9900.,  10728., 11556., 12384., 9966.,  10800., 11634.,
      12468., 10032., 10872., 11712., 12552., 10098., 10944., 11790., 12636.,
      10164., 11016., 11868., 12720.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5453., 6458., 7506.,  6622.,  5769.,  6330., 7846., 9410., 8482.,
      7582., 8642., 10914., 13225., 10914., 8642., 7582., 8482., 9410.,
      7846., 6330., 5769.,  6622.,  7506.,  6458., 5453.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      537.,  582.,  627.,  672.,  717.,  852.,  897.,  942.,  987.,
      1032., 1167., 1212., 1257., 1302., 1347., 1482., 1527., 1572.,
      1617., 1662., 1797., 1842., 1887., 1932., 1977.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7409.,  7802., 8199., 8660., 9006.,  9540.,  7633.,  8092.,  6295.,
      6674.,  6221., 6644., 7576., 8076.,  8957.,  9540.,  8172.,  8676.,
      7193.,  7612., 7868., 8356., 10271., 10852., 12681., 13362., 10837.,
      11428., 8598., 9092., 6627., 7100.,  7924.,  8484.,  9207.,  9860.,
      7736.,  8300., 6431., 6900., 5483.,  5906.,  7275.,  7772.,  9060.,
      9636.,  8037., 8532., 7169., 7578.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      993.,  1074., 1074., 1164., 1155., 1254., 1236., 1344., 1317., 1434.,
      1560., 1704., 1641., 1794., 1722., 1884., 1803., 1974., 1884., 2064.,
      2127., 2334., 2208., 2424., 2289., 2514., 2370., 2604., 2451., 2694.,
      2694., 2964., 2775., 3054., 2856., 3144., 2937., 3234., 3018., 3324.,
      3261., 3594., 3342., 3684., 3423., 3774., 3504., 3864., 3585., 3954.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6553.,  6946.,  7339.,  7732.,  7265.,  7726.,  8187.,  8648.,  7910.,
      8444.,  8978.,  9512.,  7095.,  7554.,  8013.,  8472.,  6547.,  6926.,
      7305.,  7684.,  6099.,  6522.,  6945.,  7368.,  8092.,  8592.,  9092.,
      9592.,  9011.,  9594.,  10177., 10760., 7840.,  8344.,  8848.,  9352.,
      6735.,  7154.,  7573.,  7992.,  6544.,  7032.,  7520.,  8008.,  8697.,
      9278.,  9859.,  10440., 10985., 11666., 12347., 13028., 9403.,  9994.,
      10585., 11176., 7710.,  8204.,  8698.,  9192.,  5837.,  6310.,  6783.,
      7256.,  7640.,  8200.,  8760.,  9320.,  9793.,  10446., 11099., 11752.,
      8796.,  9360.,  9924.,  10488., 7209.,  7678.,  8147.,  8616.,  5135.,
      5558.,  5981.,  6404.,  6309.,  6806.,  7303.,  7800.,  8072.,  8648.,
      9224.,  9800.,  6875.,  7370.,  7865.,  8360.,  6057.,  6466.,  6875.,
      7284.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1905., 1986., 2067., 2148., 2058., 2148., 2238., 2328., 2211., 2310.,
      2409., 2508., 2364., 2472., 2580., 2688., 2517., 2634., 2751., 2868.,
      2976., 3120., 3264., 3408., 3129., 3282., 3435., 3588., 3282., 3444.,
      3606., 3768., 3435., 3606., 3777., 3948., 3588., 3768., 3948., 4128.,
      4047., 4254., 4461., 4668., 4200., 4416., 4632., 4848., 4353., 4578.,
      4803., 5028., 4506., 4740., 4974., 5208., 4659., 4902., 5145., 5388.,
      5118., 5388., 5658., 5928., 5271., 5550., 5829., 6108., 5424., 5712.,
      6000., 6288., 5577., 5874., 6171., 6468., 5730., 6036., 6342., 6648.,
      6189., 6522., 6855., 7188., 6342., 6684., 7026., 7368., 6495., 6846.,
      7197., 7548., 6648., 7008., 7368., 7728., 6801., 7170., 7539., 7908.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7169.,  7578., 8037., 8532., 9060.,  9636.,  7275.,  7772.,  5483.,
      5906.,  6431., 6900., 7736., 8300.,  9207.,  9860.,  7924.,  8484.,
      6627.,  7100., 8598., 9092., 10837., 11428., 12681., 13362., 10271.,
      10852., 7868., 8356., 7193., 7612.,  8172.,  8676.,  8957.,  9540.,
      7576.,  8076., 6221., 6644., 6295.,  6674.,  7633.,  8092.,  9006.,
      9540.,  8199., 8660., 7409., 7802.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1029., 1074., 1119., 1164., 1209., 1254., 1299., 1344., 1389., 1434.,
      1659., 1704., 1749., 1794., 1839., 1884., 1929., 1974., 2019., 2064.,
      2289., 2334., 2379., 2424., 2469., 2514., 2559., 2604., 2649., 2694.,
      2919., 2964., 3009., 3054., 3099., 3144., 3189., 3234., 3279., 3324.,
      3549., 3594., 3639., 3684., 3729., 3774., 3819., 3864., 3909., 3954.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8169.,  8546.,  8546.,  8948.,  8622.,  9066.,  9102.,  9576.,  9247.,
      9768.,  9820.,  10376., 7326.,  7766.,  7842.,  8312.,  5369.,  5718.,
      5806.,  6180.,  5934.,  6366.,  6426.,  6888.,  7372.,  7888.,  7984.,
      8536.,  9002.,  9614.,  9722.,  10376., 8412.,  8936.,  9048.,  9608.,
      7326.,  7750.,  7858.,  8312.,  9439.,  9996.,  9976.,  10568., 12842.,
      13514., 13502., 14216., 16369., 17138., 17138., 17956., 12842., 13502.,
      13514., 14216., 9439.,  9976.,  9996.,  10568., 7326.,  7858.,  7750.,
      8312.,  8412.,  9048.,  8936.,  9608.,  9002.,  9722.,  9614.,  10376.,
      7372.,  7984.,  7888.,  8536.,  5934.,  6426.,  6366.,  6888.,  5369.,
      5806.,  5718.,  6180.,  7326.,  7842.,  7766.,  8312.,  9247.,  9820.,
      9768.,  10376., 8622.,  9102.,  9066.,  9576.,  8169.,  8546.,  8546.,
      8948.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1905., 2058., 1986., 2148., 2067., 2238., 2148., 2328., 2229., 2418.,
      2310., 2508., 2391., 2598., 2472., 2688., 2553., 2778., 2634., 2868.,
      3039., 3318., 3120., 3408., 3201., 3498., 3282., 3588., 3363., 3678.,
      3444., 3768., 3525., 3858., 3606., 3948., 3687., 4038., 3768., 4128.,
      4173., 4578., 4254., 4668., 4335., 4758., 4416., 4848., 4497., 4938.,
      4578., 5028., 4659., 5118., 4740., 5208., 4821., 5298., 4902., 5388.,
      5307., 5838., 5388., 5928., 5469., 6018., 5550., 6108., 5631., 6198.,
      5712., 6288., 5793., 6378., 5874., 6468., 5955., 6558., 6036., 6648.,
      6441., 7098., 6522., 7188., 6603., 7278., 6684., 7368., 6765., 7458.,
      6846., 7548., 6927., 7638., 7008., 7728., 7089., 7818., 7170., 7908.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6745.,  7122.,  7499.,  7876.,  7090.,  7492.,  7894.,  8296.,  7104.,
      7548.,  7992.,  8436.,  7554.,  8028.,  8502.,  8976.,  7605.,  8126.,
      8647.,  9168.,  8140.,  8696.,  9252.,  9808.,  6468.,  6908.,  7348.,
      7788.,  6958.,  7428.,  7898.,  8368.,  5621.,  5970.,  6319.,  6668.,
      6054.,  6428.,  6802.,  7176.,  6284.,  6716.,  7148.,  7580.,  6694.,
      7156.,  7618.,  8080.,  8948.,  9464.,  9980.,  10496., 9464.,  10016.,
      10568., 11120., 9712.,  10324., 10936., 11548., 10342., 10996., 11650.,
      12304., 8140.,  8664.,  9188.,  9712.,  8704.,  9264.,  9824.,  10384.,
      6452.,  6876.,  7300.,  7724.,  6942.,  7396.,  7850.,  8304.,  7601.,
      8158.,  8715.,  9272.,  8096.,  8688.,  9280.,  9872.,  10324., 10996.,
      11668., 12340., 10930., 11644., 12358., 13072., 13537., 14306., 15075.,
      15844., 14258., 15076., 15894., 16712., 10528., 11188., 11848., 12508.,
      11158., 11860., 12562., 13264., 8069.,  8606.,  9143.,  9680.,  8604.,
      9176.,  9748.,  10320., 6792.,  7324.,  7856.,  8388.,  7194.,  7756.,
      8318.,  8880.,  8572.,  9208.,  9844.,  10480., 9072.,  9744.,  10416.,
      11088., 11140., 11860., 12580., 13300., 11746., 12508., 13270., 14032.,
      10580., 11192., 11804., 12416., 11096., 11744., 12392., 13040., 7536.,
      8028.,  8520.,  9012.,  7986.,  8508.,  9030.,  9552.,  4957.,  5394.,
      5831.,  6268.,  5278.,  5740.,  6202.,  6664.,  6264.,  6780.,  7296.,
      7812.,  6666.,  7212.,  7758.,  8304.,  7681.,  8254.,  8827.,  9400.,
      8176.,  8784.,  9392.,  10000., 6972.,  7452.,  7932.,  8412.,  7382.,
      7892.,  8402.,  8912.,  6745.,  7122.,  7499.,  7876.,  7090.,  7492.,
      7894.,  8296.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3657.,  3810.,  3963.,  4116.,  3810.,  3972.,  4134.,  4296.,  3963.,
      4134.,  4305.,  4476.,  4116.,  4296.,  4476.,  4656.,  4269.,  4458.,
      4647.,  4836.,  4422.,  4620.,  4818.,  5016.,  4575.,  4782.,  4989.,
      5196.,  4728.,  4944.,  5160.,  5376.,  4881.,  5106.,  5331.,  5556.,
      5034.,  5268.,  5502.,  5736.,  5799.,  6078.,  6357.,  6636.,  5952.,
      6240.,  6528.,  6816.,  6105.,  6402.,  6699.,  6996.,  6258.,  6564.,
      6870.,  7176.,  6411.,  6726.,  7041.,  7356.,  6564.,  6888.,  7212.,
      7536.,  6717.,  7050.,  7383.,  7716.,  6870.,  7212.,  7554.,  7896.,
      7023.,  7374.,  7725.,  8076.,  7176.,  7536.,  7896.,  8256.,  7941.,
      8346.,  8751.,  9156.,  8094.,  8508.,  8922.,  9336.,  8247.,  8670.,
      9093.,  9516.,  8400.,  8832.,  9264.,  9696.,  8553.,  8994.,  9435.,
      9876.,  8706.,  9156.,  9606.,  10056., 8859.,  9318.,  9777.,  10236.,
      9012.,  9480.,  9948.,  10416., 9165.,  9642.,  10119., 10596., 9318.,
      9804.,  10290., 10776., 10083., 10614., 11145., 11676., 10236., 10776.,
      11316., 11856., 10389., 10938., 11487., 12036., 10542., 11100., 11658.,
      12216., 10695., 11262., 11829., 12396., 10848., 11424., 12000., 12576.,
      11001., 11586., 12171., 12756., 11154., 11748., 12342., 12936., 11307.,
      11910., 12513., 13116., 11460., 12072., 12684., 13296., 12225., 12882.,
      13539., 14196., 12378., 13044., 13710., 14376., 12531., 13206., 13881.,
      14556., 12684., 13368., 14052., 14736., 12837., 13530., 14223., 14916.,
      12990., 13692., 14394., 15096., 13143., 13854., 14565., 15276., 13296.,
      14016., 14736., 15456., 13449., 14178., 14907., 15636., 13602., 14340.,
      15078., 15816.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6057.,  6466.,  6875.,  7284.,  6875.,  7370.,  7865.,  8360.,  8072.,
      8648.,  9224.,  9800.,  6309.,  6806.,  7303.,  7800.,  5135.,  5558.,
      5981.,  6404.,  7209.,  7678.,  8147.,  8616.,  8796.,  9360.,  9924.,
      10488., 9793.,  10446., 11099., 11752., 7640.,  8200.,  8760.,  9320.,
      5837.,  6310.,  6783.,  7256.,  7710.,  8204.,  8698.,  9192.,  9403.,
      9994.,  10585., 11176., 10985., 11666., 12347., 13028., 8697.,  9278.,
      9859.,  10440., 6544.,  7032.,  7520.,  8008.,  6735.,  7154.,  7573.,
      7992.,  7840.,  8344.,  8848.,  9352.,  9011.,  9594.,  10177., 10760.,
      8092.,  8592.,  9092.,  9592.,  6099.,  6522.,  6945.,  7368.,  6547.,
      6926.,  7305.,  7684.,  7095.,  7554.,  8013.,  8472.,  7910.,  8444.,
      8978.,  9512.,  7265.,  7726.,  8187.,  8648.,  6553.,  6946.,  7339.,
      7732.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2013., 2058., 2103., 2148., 2193., 2238., 2283., 2328., 2373., 2418.,
      2463., 2508., 2553., 2598., 2643., 2688., 2733., 2778., 2823., 2868.,
      3273., 3318., 3363., 3408., 3453., 3498., 3543., 3588., 3633., 3678.,
      3723., 3768., 3813., 3858., 3903., 3948., 3993., 4038., 4083., 4128.,
      4533., 4578., 4623., 4668., 4713., 4758., 4803., 4848., 4893., 4938.,
      4983., 5028., 5073., 5118., 5163., 5208., 5253., 5298., 5343., 5388.,
      5793., 5838., 5883., 5928., 5973., 6018., 6063., 6108., 6153., 6198.,
      6243., 6288., 6333., 6378., 6423., 6468., 6513., 6558., 6603., 6648.,
      7053., 7098., 7143., 7188., 7233., 7278., 7323., 7368., 7413., 7458.,
      7503., 7548., 7593., 7638., 7683., 7728., 7773., 7818., 7863., 7908.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6745.,  7090.,  7122.,  7492.,  7499.,  7894.,  7876.,  8296.,  6972.,
      7382.,  7452.,  7892.,  7932.,  8402.,  8412.,  8912.,  7681.,  8176.,
      8254.,  8784.,  8827.,  9392.,  9400.,  10000., 6264.,  6666.,  6780.,
      7212.,  7296.,  7758.,  7812.,  8304.,  4957.,  5278.,  5394.,  5740.,
      5831.,  6202.,  6268.,  6664.,  7536.,  7986.,  8028.,  8508.,  8520.,
      9030.,  9012.,  9552.,  10580., 11096., 11192., 11744., 11804., 12392.,
      12416., 13040., 11140., 11746., 11860., 12508., 12580., 13270., 13300.,
      14032., 8572.,  9072.,  9208.,  9744.,  9844.,  10416., 10480., 11088.,
      6792.,  7194.,  7324.,  7756.,  7856.,  8318.,  8388.,  8880.,  8069.,
      8604.,  8606.,  9176.,  9143.,  9748.,  9680.,  10320., 10528., 11158.,
      11188., 11860., 11848., 12562., 12508., 13264., 13537., 14258., 14306.,
      15076., 15075., 15894., 15844., 16712., 10324., 10930., 10996., 11644.,
      11668., 12358., 12340., 13072., 7601.,  8096.,  8158.,  8688.,  8715.,
      9280.,  9272.,  9872.,  6452.,  6942.,  6876.,  7396.,  7300.,  7850.,
      7724.,  8304.,  8140.,  8704.,  8664.,  9264.,  9188.,  9824.,  9712.,
      10384., 9712.,  10342., 10324., 10996., 10936., 11650., 11548., 12304.,
      8948.,  9464.,  9464.,  10016., 9980.,  10568., 10496., 11120., 6284.,
      6694.,  6716.,  7156.,  7148.,  7618.,  7580.,  8080.,  5621.,  6054.,
      5970.,  6428.,  6319.,  6802.,  6668.,  7176.,  6468.,  6958.,  6908.,
      7428.,  7348.,  7898.,  7788.,  8368.,  7605.,  8140.,  8126.,  8696.,
      8647.,  9252.,  9168.,  9808.,  7104.,  7554.,  7548.,  8028.,  7992.,
      8502.,  8436.,  8976.,  6745.,  7090.,  7122.,  7492.,  7499.,  7894.,
      7876.,  8296.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3729.,  4026.,  3810.,  4116.,  3891.,  4206.,  3972.,  4296.,  4053.,
      4386.,  4134.,  4476.,  4215.,  4566.,  4296.,  4656.,  4377.,  4746.,
      4458.,  4836.,  4539.,  4926.,  4620.,  5016.,  4701.,  5106.,  4782.,
      5196.,  4863.,  5286.,  4944.,  5376.,  5025.,  5466.,  5106.,  5556.,
      5187.,  5646.,  5268.,  5736.,  5997.,  6546.,  6078.,  6636.,  6159.,
      6726.,  6240.,  6816.,  6321.,  6906.,  6402.,  6996.,  6483.,  7086.,
      6564.,  7176.,  6645.,  7266.,  6726.,  7356.,  6807.,  7446.,  6888.,
      7536.,  6969.,  7626.,  7050.,  7716.,  7131.,  7806.,  7212.,  7896.,
      7293.,  7986.,  7374.,  8076.,  7455.,  8166.,  7536.,  8256.,  8265.,
      9066.,  8346.,  9156.,  8427.,  9246.,  8508.,  9336.,  8589.,  9426.,
      8670.,  9516.,  8751.,  9606.,  8832.,  9696.,  8913.,  9786.,  8994.,
      9876.,  9075.,  9966.,  9156.,  10056., 9237.,  10146., 9318.,  10236.,
      9399.,  10326., 9480.,  10416., 9561.,  10506., 9642.,  10596., 9723.,
      10686., 9804.,  10776., 10533., 11586., 10614., 11676., 10695., 11766.,
      10776., 11856., 10857., 11946., 10938., 12036., 11019., 12126., 11100.,
      12216., 11181., 12306., 11262., 12396., 11343., 12486., 11424., 12576.,
      11505., 12666., 11586., 12756., 11667., 12846., 11748., 12936., 11829.,
      13026., 11910., 13116., 11991., 13206., 12072., 13296., 12801., 14106.,
      12882., 14196., 12963., 14286., 13044., 14376., 13125., 14466., 13206.,
      14556., 13287., 14646., 13368., 14736., 13449., 14826., 13530., 14916.,
      13611., 15006., 13692., 15096., 13773., 15186., 13854., 15276., 13935.,
      15366., 14016., 15456., 14097., 15546., 14178., 15636., 14259., 15726.,
      14340., 15816.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7385.,  7730.,  8075.,  8420.,  7730.,  8100.,  8470.,  8840.,  8075.,
      8470.,  8865.,  9260.,  8420.,  8840.,  9260.,  9680.,  6910.,  7320.,
      7730.,  8140.,  7360.,  7800.,  8240.,  8680.,  7810.,  8280.,  8750.,
      9220.,  8260.,  8760.,  9260.,  9760.,  6995.,  7490.,  7985.,  8480.,
      7530.,  8060.,  8590.,  9120.,  8065.,  8630.,  9195.,  9760.,  8600.,
      9200.,  9800.,  10400., 5342.,  5744.,  6146.,  6548.,  5832.,  6264.,
      6696.,  7128.,  6322.,  6784.,  7246.,  7708.,  6812.,  7304.,  7796.,
      8288.,  4569.,  4890.,  5211.,  5532.,  5002.,  5348.,  5694.,  6040.,
      5435.,  5806.,  6177.,  6548.,  5868.,  6264.,  6660.,  7056.,  6910.,
      7360.,  7810.,  8260.,  7320.,  7800.,  8280.,  8760.,  7730.,  8240.,
      8750.,  9260.,  8140.,  8680.,  9220.,  9760.,  10756., 11272., 11788.,
      12304., 11272., 11824., 12376., 12928., 11788., 12376., 12964., 13552.,
      12304., 12928., 13552., 14176., 10154., 10760., 11366., 11972., 10784.,
      11432., 12080., 12728., 11414., 12104., 12794., 13484., 12044., 12776.,
      13508., 14240., 7140.,  7640.,  8140.,  8640.,  7704.,  8240.,  8776.,
      9312.,  8268.,  8840.,  9412.,  9984.,  8832.,  9440.,  10048., 10656.,
      5342.,  5744.,  6146.,  6548.,  5832.,  6264.,  6696.,  7128.,  6322.,
      6784.,  7246.,  7708.,  6812.,  7304.,  7796.,  8288.,  6995.,  7530.,
      8065.,  8600.,  7490.,  8060.,  8630.,  9200.,  7985.,  8590.,  9195.,
      9800.,  8480.,  9120.,  9760.,  10400., 10154., 10784., 11414., 12044.,
      10760., 11432., 12104., 12776., 11366., 12080., 12794., 13508., 11972.,
      12728., 13484., 14240., 14833., 15554., 16275., 16996., 15554., 16324.,
      17094., 17864., 16275., 17094., 17913., 18732., 16996., 17864., 18732.,
      19600., 10154., 10760., 11366., 11972., 10784., 11432., 12080., 12728.,
      11414., 12104., 12794., 13484., 12044., 12776., 13508., 14240., 6995.,
      7490.,  7985.,  8480.,  7530.,  8060.,  8590.,  9120.,  8065.,  8630.,
      9195.,  9760.,  8600.,  9200.,  9800.,  10400., 5342.,  5832.,  6322.,
      6812.,  5744.,  6264.,  6784.,  7304.,  6146.,  6696.,  7246.,  7796.,
      6548.,  7128.,  7708.,  8288.,  7140.,  7704.,  8268.,  8832.,  7640.,
      8240.,  8840.,  9440.,  8140.,  8776.,  9412.,  10048., 8640.,  9312.,
      9984.,  10656., 10154., 10784., 11414., 12044., 10760., 11432., 12104.,
      12776., 11366., 12080., 12794., 13508., 11972., 12728., 13484., 14240.,
      10756., 11272., 11788., 12304., 11272., 11824., 12376., 12928., 11788.,
      12376., 12964., 13552., 12304., 12928., 13552., 14176., 6910.,  7320.,
      7730.,  8140.,  7360.,  7800.,  8240.,  8680.,  7810.,  8280.,  8750.,
      9220.,  8260.,  8760.,  9260.,  9760.,  4569.,  5002.,  5435.,  5868.,
      4890.,  5348.,  5806.,  6264.,  5211.,  5694.,  6177.,  6660.,  5532.,
      6040.,  6548.,  7056.,  5342.,  5832.,  6322.,  6812.,  5744.,  6264.,
      6784.,  7304.,  6146.,  6696.,  7246.,  7796.,  6548.,  7128.,  7708.,
      8288.,  6995.,  7530.,  8065.,  8600.,  7490.,  8060.,  8630.,  9200.,
      7985.,  8590.,  9195.,  9800.,  8480.,  9120.,  9760.,  10400., 6910.,
      7360.,  7810.,  8260.,  7320.,  7800.,  8280.,  8760.,  7730.,  8240.,
      8750.,  9260.,  8140.,  8680.,  9220.,  9760.,  7385.,  7730.,  8075.,
      8420.,  7730.,  8100.,  8470.,  8840.,  8075.,  8470.,  8865.,  9260.,
      8420.,  8840.,  9260.,  9680.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7161.,  7458.,  7755.,  8052.,  7314.,  7620.,  7926.,  8232.,  7467.,
      7782.,  8097.,  8412.,  7620.,  7944.,  8268.,  8592.,  7773.,  8106.,
      8439.,  8772.,  7926.,  8268.,  8610.,  8952.,  8079.,  8430.,  8781.,
      9132.,  8232.,  8592.,  8952.,  9312.,  8385.,  8754.,  9123.,  9492.,
      8538.,  8916.,  9294.,  9672.,  8691.,  9078.,  9465.,  9852.,  8844.,
      9240.,  9636.,  10032., 8997.,  9402.,  9807.,  10212., 9150.,  9564.,
      9978.,  10392., 9303.,  9726.,  10149., 10572., 9456.,  9888.,  10320.,
      10752., 9609.,  10050., 10491., 10932., 9762.,  10212., 10662., 11112.,
      9915.,  10374., 10833., 11292., 10068., 10536., 11004., 11472., 11445.,
      11994., 12543., 13092., 11598., 12156., 12714., 13272., 11751., 12318.,
      12885., 13452., 11904., 12480., 13056., 13632., 12057., 12642., 13227.,
      13812., 12210., 12804., 13398., 13992., 12363., 12966., 13569., 14172.,
      12516., 13128., 13740., 14352., 12669., 13290., 13911., 14532., 12822.,
      13452., 14082., 14712., 12975., 13614., 14253., 14892., 13128., 13776.,
      14424., 15072., 13281., 13938., 14595., 15252., 13434., 14100., 14766.,
      15432., 13587., 14262., 14937., 15612., 13740., 14424., 15108., 15792.,
      13893., 14586., 15279., 15972., 14046., 14748., 15450., 16152., 14199.,
      14910., 15621., 16332., 14352., 15072., 15792., 16512., 15729., 16530.,
      17331., 18132., 15882., 16692., 17502., 18312., 16035., 16854., 17673.,
      18492., 16188., 17016., 17844., 18672., 16341., 17178., 18015., 18852.,
      16494., 17340., 18186., 19032., 16647., 17502., 18357., 19212., 16800.,
      17664., 18528., 19392., 16953., 17826., 18699., 19572., 17106., 17988.,
      18870., 19752., 17259., 18150., 19041., 19932., 17412., 18312., 19212.,
      20112., 17565., 18474., 19383., 20292., 17718., 18636., 19554., 20472.,
      17871., 18798., 19725., 20652., 18024., 18960., 19896., 20832., 18177.,
      19122., 20067., 21012., 18330., 19284., 20238., 21192., 18483., 19446.,
      20409., 21372., 18636., 19608., 20580., 21552., 20013., 21066., 22119.,
      23172., 20166., 21228., 22290., 23352., 20319., 21390., 22461., 23532.,
      20472., 21552., 22632., 23712., 20625., 21714., 22803., 23892., 20778.,
      21876., 22974., 24072., 20931., 22038., 23145., 24252., 21084., 22200.,
      23316., 24432., 21237., 22362., 23487., 24612., 21390., 22524., 23658.,
      24792., 21543., 22686., 23829., 24972., 21696., 22848., 24000., 25152.,
      21849., 23010., 24171., 25332., 22002., 23172., 24342., 25512., 22155.,
      23334., 24513., 25692., 22308., 23496., 24684., 25872., 22461., 23658.,
      24855., 26052., 22614., 23820., 25026., 26232., 22767., 23982., 25197.,
      26412., 22920., 24144., 25368., 26592., 24297., 25602., 26907., 28212.,
      24450., 25764., 27078., 28392., 24603., 25926., 27249., 28572., 24756.,
      26088., 27420., 28752., 24909., 26250., 27591., 28932., 25062., 26412.,
      27762., 29112., 25215., 26574., 27933., 29292., 25368., 26736., 28104.,
      29472., 25521., 26898., 28275., 29652., 25674., 27060., 28446., 29832.,
      25827., 27222., 28617., 30012., 25980., 27384., 28788., 30192., 26133.,
      27546., 28959., 30372., 26286., 27708., 29130., 30552., 26439., 27870.,
      29301., 30732., 26592., 28032., 29472., 30912., 26745., 28194., 29643.,
      31092., 26898., 28356., 29814., 31272., 27051., 28518., 29985., 31452.,
      27204., 28680., 30156., 31632.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5897., 7000.,  8124.,  7112.,  6089.,  7998.,  9464., 10952., 9576.,
      8190., 12115., 14224., 16340., 14224., 12115., 8190., 9576.,  10952.,
      9464., 7998.,  6089.,  7112.,  8124.,  7000.,  5897.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1090., 1168., 1246., 1324., 1402., 1714., 1792., 1870., 1948.,
      2026., 2338., 2416., 2494., 2572., 2650., 2962., 3040., 3118.,
      3196., 3274., 3586., 3664., 3742., 3820., 3898.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7849.,  8242.,  9044.,  9520.,  10180., 10744., 8561.,  9072.,  7021.,
      7474.,  7374.,  7836.,  8512.,  9072.,  9592.,  10256., 8022.,  8624.,
      6534.,  7068.,  10883., 11462., 12516., 13216., 14060., 14888., 11795.,
      12544., 9647.,  10310., 9870.,  10428., 11312., 11984., 12664., 13456.,
      10598., 11312., 8646.,  9276.,  8809.,  9298.,  10052., 10640., 11204.,
      11896., 9345.,  9968.,  7597.,  8146.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2054., 2180., 2198., 2336., 2342., 2492., 2486., 2648., 2630., 2804.,
      3206., 3428., 3350., 3584., 3494., 3740., 3638., 3896., 3782., 4052.,
      4358., 4676., 4502., 4832., 4646., 4988., 4790., 5144., 4934., 5300.,
      5510., 5924., 5654., 6080., 5798., 6236., 5942., 6392., 6086., 6548.,
      6662., 7172., 6806., 7328., 6950., 7484., 7094., 7640., 7238., 7796.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7817.,  8210.,  8603.,  8996.,  8652.,  9128.,  9604.,  10080., 9300.,
      9864.,  10428., 10992., 7203.,  7714.,  8225.,  8736.,  5333.,  5786.,
      6239.,  6692.,  9198.,  9660.,  10122., 10584., 10192., 10752., 11312.,
      11872., 10968., 11632., 12296., 12960., 8498.,  9100.,  9702.,  10304.,
      6294.,  6828.,  7362.,  7896.,  11491., 12070., 12649., 13228., 12684.,
      13384., 14084., 14784., 13596., 14424., 15252., 16080., 10521., 11270.,
      12019., 12768., 7783.,  8446.,  9109.,  9772.,  11022., 11580., 12138.,
      12696., 12096., 12768., 13440., 14112., 12888., 13680., 14472., 15264.,
      9954.,  10668., 11382., 12096., 7350.,  7980.,  8610.,  9240.,  9641.,
      10130., 10619., 11108., 10556., 11144., 11732., 12320., 11220., 11912.,
      12604., 13296., 8659.,  9282.,  9905.,  10528., 6389.,  6938.,  7487.,
      8036.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3982.,  4108.,  4234.,  4360.,  4258.,  4396.,  4534.,  4672.,  4534.,
      4684.,  4834.,  4984.,  4810.,  4972.,  5134.,  5296.,  5086.,  5260.,
      5434.,  5608.,  6190.,  6412.,  6634.,  6856.,  6466.,  6700.,  6934.,
      7168.,  6742.,  6988.,  7234.,  7480.,  7018.,  7276.,  7534.,  7792.,
      7294.,  7564.,  7834.,  8104.,  8398.,  8716.,  9034.,  9352.,  8674.,
      9004.,  9334.,  9664.,  8950.,  9292.,  9634.,  9976.,  9226.,  9580.,
      9934.,  10288., 9502.,  9868.,  10234., 10600., 10606., 11020., 11434.,
      11848., 10882., 11308., 11734., 12160., 11158., 11596., 12034., 12472.,
      11434., 11884., 12334., 12784., 11710., 12172., 12634., 13096., 12814.,
      13324., 13834., 14344., 13090., 13612., 14134., 14656., 13366., 13900.,
      14434., 14968., 13642., 14188., 14734., 15280., 13918., 14476., 15034.,
      15592.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7597.,  8146.,  9345.,  9968.,  11204., 11896., 10052., 10640., 8809.,
      9298.,  8646.,  9276.,  10598., 11312., 12664., 13456., 11312., 11984.,
      9870.,  10428., 9647.,  10310., 11795., 12544., 14060., 14888., 12516.,
      13216., 10883., 11462., 6534.,  7068.,  8022.,  8624.,  9592.,  10256.,
      8512.,  9072.,  7374.,  7836.,  7021.,  7474.,  8561.,  9072.,  10180.,
      10744., 9044.,  9520.,  7849.,  8242.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2102., 2180., 2258., 2336., 2414., 2492., 2570., 2648., 2726., 2804.,
      3350., 3428., 3506., 3584., 3662., 3740., 3818., 3896., 3974., 4052.,
      4598., 4676., 4754., 4832., 4910., 4988., 5066., 5144., 5222., 5300.,
      5846., 5924., 6002., 6080., 6158., 6236., 6314., 6392., 6470., 6548.,
      7094., 7172., 7250., 7328., 7406., 7484., 7562., 7640., 7718., 7796.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8294.,  8666.,  8786.,  9188.,  9933.,  10402., 10472., 10976., 11592.,
      12168., 12168., 12784., 9933.,  10472., 10402., 10976., 8294.,  8786.,
      8666.,  9188.,  7188.,  7692.,  7836.,  8376.,  8694.,  9324.,  9408.,
      10080., 10224., 10992., 10992., 11808., 8694.,  9408.,  9324.,  10080.,
      7188.,  7836.,  7692.,  8376.,  12226., 12766., 12934., 13516., 14623.,
      15302., 15400., 16128., 17048., 17880., 17880., 18768., 14623., 15400.,
      15302., 16128., 12226., 12934., 12766., 13516., 7188.,  7692.,  7836.,
      8376.,  8694.,  9324.,  9408.,  10080., 10224., 10992., 10992., 11808.,
      8694.,  9408.,  9324.,  10080., 7188.,  7836.,  7692.,  8376.,  8294.,
      8666.,  8786.,  9188.,  9933.,  10402., 10472., 10976., 11592., 12168.,
      12168., 12784., 9933.,  10472., 10402., 10976., 8294.,  8786.,  8666.,
      9188.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3964.,  4204.,  4108.,  4360.,  4252.,  4516.,  4396.,  4672.,  4540.,
      4828.,  4684.,  4984.,  4828.,  5140.,  4972.,  5296.,  5116.,  5452.,
      5260.,  5608.,  6268.,  6700.,  6412.,  6856.,  6556.,  7012.,  6700.,
      7168.,  6844.,  7324.,  6988.,  7480.,  7132.,  7636.,  7276.,  7792.,
      7420.,  7948.,  7564.,  8104.,  8572.,  9196.,  8716.,  9352.,  8860.,
      9508.,  9004.,  9664.,  9148.,  9820.,  9292.,  9976.,  9436.,  10132.,
      9580.,  10288., 9724.,  10444., 9868.,  10600., 10876., 11692., 11020.,
      11848., 11164., 12004., 11308., 12160., 11452., 12316., 11596., 12472.,
      11740., 12628., 11884., 12784., 12028., 12940., 12172., 13096., 13180.,
      14188., 13324., 14344., 13468., 14500., 13612., 14656., 13756., 14812.,
      13900., 14968., 14044., 15124., 14188., 15280., 14332., 15436., 14476.,
      15592.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7768.,  8140.,  8512.,  8884.,  8338.,  8740.,  9142.,  9544.,  9093.,
      9562.,  10031., 10500., 9688.,  10192., 10696., 11200., 10320., 10896.,
      11472., 12048., 10920., 11536., 12152., 12768., 8127.,  8666.,  9205.,
      9744.,  8582.,  9156.,  9730.,  10304., 6112.,  6604.,  7096.,  7588.,
      6442.,  6964.,  7486.,  8008.,  10416., 10920., 11424., 11928., 11100.,
      11640., 12180., 12720., 12054., 12684., 13314., 13944., 12768., 13440.,
      14112., 14784., 13536., 14304., 15072., 15840., 14256., 15072., 15888.,
      16704., 10626., 11340., 12054., 12768., 11172., 11928., 12684., 13440.,
      7968.,  8616.,  9264.,  9912.,  8364.,  9048.,  9732.,  10416., 11240.,
      11780., 12320., 12860., 12038., 12620., 13202., 13784., 13111., 13790.,
      14469., 15148., 13944., 14672., 15400., 16128., 14832., 15664., 16496.,
      17328., 15672., 16560., 17448., 18336., 11669., 12446., 13223., 14000.,
      12306., 13132., 13958., 14784., 8768.,  9476.,  10184., 10892., 9230.,
      9980.,  10730., 11480., 10416., 10920., 11424., 11928., 11100., 11640.,
      12180., 12720., 12054., 12684., 13314., 13944., 12768., 13440., 14112.,
      14784., 13536., 14304., 15072., 15840., 14256., 15072., 15888., 16704.,
      10626., 11340., 12054., 12768., 11172., 11928., 12684., 13440., 7968.,
      8616.,  9264.,  9912.,  8364.,  9048.,  9732.,  10416., 7768.,  8140.,
      8512.,  8884.,  8338.,  8740.,  9142.,  9544.,  9093.,  9562.,  10031.,
      10500., 9688.,  10192., 10696., 11200., 10320., 10896., 11472., 12048.,
      10920., 11536., 12152., 12768., 8127.,  8666.,  9205.,  9744.,  8582.,
      9156.,  9730.,  10304., 6112.,  6604.,  7096.,  7588.,  6442.,  6964.,
      7486.,  8008.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7688.,  7928.,  8168.,  8408.,  7964.,  8216.,  8468.,  8720.,  8240.,
      8504.,  8768.,  9032.,  8516.,  8792.,  9068.,  9344.,  8792.,  9080.,
      9368.,  9656.,  9068.,  9368.,  9668.,  9968.,  9344.,  9656.,  9968.,
      10280., 9620.,  9944.,  10268., 10592., 9896.,  10232., 10568., 10904.,
      10172., 10520., 10868., 11216., 12104., 12536., 12968., 13400., 12380.,
      12824., 13268., 13712., 12656., 13112., 13568., 14024., 12932., 13400.,
      13868., 14336., 13208., 13688., 14168., 14648., 13484., 13976., 14468.,
      14960., 13760., 14264., 14768., 15272., 14036., 14552., 15068., 15584.,
      14312., 14840., 15368., 15896., 14588., 15128., 15668., 16208., 16520.,
      17144., 17768., 18392., 16796., 17432., 18068., 18704., 17072., 17720.,
      18368., 19016., 17348., 18008., 18668., 19328., 17624., 18296., 18968.,
      19640., 17900., 18584., 19268., 19952., 18176., 18872., 19568., 20264.,
      18452., 19160., 19868., 20576., 18728., 19448., 20168., 20888., 19004.,
      19736., 20468., 21200., 20936., 21752., 22568., 23384., 21212., 22040.,
      22868., 23696., 21488., 22328., 23168., 24008., 21764., 22616., 23468.,
      24320., 22040., 22904., 23768., 24632., 22316., 23192., 24068., 24944.,
      22592., 23480., 24368., 25256., 22868., 23768., 24668., 25568., 23144.,
      24056., 24968., 25880., 23420., 24344., 25268., 26192., 25352., 26360.,
      27368., 28376., 25628., 26648., 27668., 28688., 25904., 26936., 27968.,
      29000., 26180., 27224., 28268., 29312., 26456., 27512., 28568., 29624.,
      26732., 27800., 28868., 29936., 27008., 28088., 29168., 30248., 27284.,
      28376., 29468., 30560., 27560., 28664., 29768., 30872., 27836., 28952.,
      30068., 31184.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6389.,  6938.,  7487.,  8036.,  8659.,  9282.,  9905.,  10528., 11220.,
      11912., 12604., 13296., 10556., 11144., 11732., 12320., 9641.,  10130.,
      10619., 11108., 7350.,  7980.,  8610.,  9240.,  9954.,  10668., 11382.,
      12096., 12888., 13680., 14472., 15264., 12096., 12768., 13440., 14112.,
      11022., 11580., 12138., 12696., 7783.,  8446.,  9109.,  9772.,  10521.,
      11270., 12019., 12768., 13596., 14424., 15252., 16080., 12684., 13384.,
      14084., 14784., 11491., 12070., 12649., 13228., 6294.,  6828.,  7362.,
      7896.,  8498.,  9100.,  9702.,  10304., 10968., 11632., 12296., 12960.,
      10192., 10752., 11312., 11872., 9198.,  9660.,  10122., 10584., 5333.,
      5786.,  6239.,  6692.,  7203.,  7714.,  8225.,  8736.,  9300.,  9864.,
      10428., 10992., 8652.,  9128.,  9604.,  10080., 7817.,  8210.,  8603.,
      8996.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4126.,  4204.,  4282.,  4360.,  4438.,  4516.,  4594.,  4672.,  4750.,
      4828.,  4906.,  4984.,  5062.,  5140.,  5218.,  5296.,  5374.,  5452.,
      5530.,  5608.,  6622.,  6700.,  6778.,  6856.,  6934.,  7012.,  7090.,
      7168.,  7246.,  7324.,  7402.,  7480.,  7558.,  7636.,  7714.,  7792.,
      7870.,  7948.,  8026.,  8104.,  9118.,  9196.,  9274.,  9352.,  9430.,
      9508.,  9586.,  9664.,  9742.,  9820.,  9898.,  9976.,  10054., 10132.,
      10210., 10288., 10366., 10444., 10522., 10600., 11614., 11692., 11770.,
      11848., 11926., 12004., 12082., 12160., 12238., 12316., 12394., 12472.,
      12550., 12628., 12706., 12784., 12862., 12940., 13018., 13096., 14110.,
      14188., 14266., 14344., 14422., 14500., 14578., 14656., 14734., 14812.,
      14890., 14968., 15046., 15124., 15202., 15280., 15358., 15436., 15514.,
      15592.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6112.,  6442.,  6604.,  6964.,  7096.,  7486.,  7588.,  8008.,  8127.,
      8582.,  8666.,  9156.,  9205.,  9730.,  9744.,  10304., 10320., 10920.,
      10896., 11536., 11472., 12152., 12048., 12768., 9093.,  9688.,  9562.,
      10192., 10031., 10696., 10500., 11200., 7768.,  8338.,  8140.,  8740.,
      8512.,  9142.,  8884.,  9544.,  7968.,  8364.,  8616.,  9048.,  9264.,
      9732.,  9912.,  10416., 10626., 11172., 11340., 11928., 12054., 12684.,
      12768., 13440., 13536., 14256., 14304., 15072., 15072., 15888., 15840.,
      16704., 12054., 12768., 12684., 13440., 13314., 14112., 13944., 14784.,
      10416., 11100., 10920., 11640., 11424., 12180., 11928., 12720., 8768.,
      9230.,  9476.,  9980.,  10184., 10730., 10892., 11480., 11669., 12306.,
      12446., 13132., 13223., 13958., 14000., 14784., 14832., 15672., 15664.,
      16560., 16496., 17448., 17328., 18336., 13111., 13944., 13790., 14672.,
      14469., 15400., 15148., 16128., 11240., 12038., 11780., 12620., 12320.,
      13202., 12860., 13784., 7968.,  8364.,  8616.,  9048.,  9264.,  9732.,
      9912.,  10416., 10626., 11172., 11340., 11928., 12054., 12684., 12768.,
      13440., 13536., 14256., 14304., 15072., 15072., 15888., 15840., 16704.,
      12054., 12768., 12684., 13440., 13314., 14112., 13944., 14784., 10416.,
      11100., 10920., 11640., 11424., 12180., 11928., 12720., 6112.,  6442.,
      6604.,  6964.,  7096.,  7486.,  7588.,  8008.,  8127.,  8582.,  8666.,
      9156.,  9205.,  9730.,  9744.,  10304., 10320., 10920., 10896., 11536.,
      11472., 12152., 12048., 12768., 9093.,  9688.,  9562.,  10192., 10031.,
      10696., 10500., 11200., 7768.,  8338.,  8140.,  8740.,  8512.,  9142.,
      8884.,  9544.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7784.,  8252.,  7928.,  8408.,  8072.,  8564.,  8216.,  8720.,  8360.,
      8876.,  8504.,  9032.,  8648.,  9188.,  8792.,  9344.,  8936.,  9500.,
      9080.,  9656.,  9224.,  9812.,  9368.,  9968.,  9512.,  10124., 9656.,
      10280., 9800.,  10436., 9944.,  10592., 10088., 10748., 10232., 10904.,
      10376., 11060., 10520., 11216., 12392., 13244., 12536., 13400., 12680.,
      13556., 12824., 13712., 12968., 13868., 13112., 14024., 13256., 14180.,
      13400., 14336., 13544., 14492., 13688., 14648., 13832., 14804., 13976.,
      14960., 14120., 15116., 14264., 15272., 14408., 15428., 14552., 15584.,
      14696., 15740., 14840., 15896., 14984., 16052., 15128., 16208., 17000.,
      18236., 17144., 18392., 17288., 18548., 17432., 18704., 17576., 18860.,
      17720., 19016., 17864., 19172., 18008., 19328., 18152., 19484., 18296.,
      19640., 18440., 19796., 18584., 19952., 18728., 20108., 18872., 20264.,
      19016., 20420., 19160., 20576., 19304., 20732., 19448., 20888., 19592.,
      21044., 19736., 21200., 21608., 23228., 21752., 23384., 21896., 23540.,
      22040., 23696., 22184., 23852., 22328., 24008., 22472., 24164., 22616.,
      24320., 22760., 24476., 22904., 24632., 23048., 24788., 23192., 24944.,
      23336., 25100., 23480., 25256., 23624., 25412., 23768., 25568., 23912.,
      25724., 24056., 25880., 24200., 26036., 24344., 26192., 26216., 28220.,
      26360., 28376., 26504., 28532., 26648., 28688., 26792., 28844., 26936.,
      29000., 27080., 29156., 27224., 29312., 27368., 29468., 27512., 29624.,
      27656., 29780., 27800., 29936., 27944., 30092., 28088., 30248., 28232.,
      30404., 28376., 30560., 28520., 30716., 28664., 30872., 28808., 31028.,
      28952., 31184.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7670.,  8000.,  8330.,  8660.,  8240.,  8600.,  8960.,  9320.,  8810.,
      9200.,  9590.,  9980.,  9380.,  9800.,  10220., 10640., 9975.,  10430.,
      10885., 11340., 10570., 11060., 11550., 12040., 11165., 11690., 12215.,
      12740., 11760., 12320., 12880., 13440., 12360., 12960., 13560., 14160.,
      12960., 13600., 14240., 14880., 13560., 14240., 14920., 15600., 14160.,
      14880., 15600., 16320., 9975.,  10570., 11165., 11760., 10430., 11060.,
      11690., 12320., 10885., 11550., 12215., 12880., 11340., 12040., 12740.,
      13440., 7670.,  8240.,  8810.,  9380.,  8000.,  8600.,  9200.,  9800.,
      8330.,  8960.,  9590.,  10220., 8660.,  9320.,  9980.,  10640., 9204.,
      9600.,  9996.,  10392., 9888.,  10320., 10752., 11184., 10572., 11040.,
      11508., 11976., 11256., 11760., 12264., 12768., 11970., 12516., 13062.,
      13608., 12684., 13272., 13860., 14448., 13398., 14028., 14658., 15288.,
      14112., 14784., 15456., 16128., 14832., 15552., 16272., 16992., 15552.,
      16320., 17088., 17856., 16272., 17088., 17904., 18720., 16992., 17856.,
      18720., 19584., 11970., 12684., 13398., 14112., 12516., 13272., 14028.,
      14784., 13062., 13860., 14658., 15456., 13608., 14448., 15288., 16128.,
      9204.,  9888.,  10572., 11256., 9600.,  10320., 11040., 11760., 9996.,
      10752., 11508., 12264., 10392., 11184., 11976., 12768., 10738., 11200.,
      11662., 12124., 11536., 12040., 12544., 13048., 12334., 12880., 13426.,
      13972., 13132., 13720., 14308., 14896., 13965., 14602., 15239., 15876.,
      14798., 15484., 16170., 16856., 15631., 16366., 17101., 17836., 16464.,
      17248., 18032., 18816., 17304., 18144., 18984., 19824., 18144., 19040.,
      19936., 20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840.,
      22848., 13965., 14798., 15631., 16464., 14602., 15484., 16366., 17248.,
      15239., 16170., 17101., 18032., 15876., 16856., 17836., 18816., 10738.,
      11536., 12334., 13132., 11200., 12040., 12880., 13720., 11662., 12544.,
      13426., 14308., 12124., 13048., 13972., 14896., 9204.,  9600.,  9996.,
      10392., 9888.,  10320., 10752., 11184., 10572., 11040., 11508., 11976.,
      11256., 11760., 12264., 12768., 11970., 12516., 13062., 13608., 12684.,
      13272., 13860., 14448., 13398., 14028., 14658., 15288., 14112., 14784.,
      15456., 16128., 14832., 15552., 16272., 16992., 15552., 16320., 17088.,
      17856., 16272., 17088., 17904., 18720., 16992., 17856., 18720., 19584.,
      11970., 12684., 13398., 14112., 12516., 13272., 14028., 14784., 13062.,
      13860., 14658., 15456., 13608., 14448., 15288., 16128., 9204.,  9888.,
      10572., 11256., 9600.,  10320., 11040., 11760., 9996.,  10752., 11508.,
      12264., 10392., 11184., 11976., 12768., 7670.,  8000.,  8330.,  8660.,
      8240.,  8600.,  8960.,  9320.,  8810.,  9200.,  9590.,  9980.,  9380.,
      9800.,  10220., 10640., 9975.,  10430., 10885., 11340., 10570., 11060.,
      11550., 12040., 11165., 11690., 12215., 12740., 11760., 12320., 12880.,
      13440., 12360., 12960., 13560., 14160., 12960., 13600., 14240., 14880.,
      13560., 14240., 14920., 15600., 14160., 14880., 15600., 16320., 9975.,
      10570., 11165., 11760., 10430., 11060., 11690., 12320., 10885., 11550.,
      12215., 12880., 11340., 12040., 12740., 13440., 7670.,  8240.,  8810.,
      9380.,  8000.,  8600.,  9200.,  9800.,  8330.,  8960.,  9590.,  10220.,
      8660.,  9320.,  9980.,  10640.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15100., 15568., 16036., 16504., 15376., 15856., 16336., 16816., 15652.,
      16144., 16636., 17128., 15928., 16432., 16936., 17440., 16204., 16720.,
      17236., 17752., 16480., 17008., 17536., 18064., 16756., 17296., 17836.,
      18376., 17032., 17584., 18136., 18688., 17308., 17872., 18436., 19000.,
      17584., 18160., 18736., 19312., 17860., 18448., 19036., 19624., 18136.,
      18736., 19336., 19936., 18412., 19024., 19636., 20248., 18688., 19312.,
      19936., 20560., 18964., 19600., 20236., 20872., 19240., 19888., 20536.,
      21184., 19516., 20176., 20836., 21496., 19792., 20464., 21136., 21808.,
      20068., 20752., 21436., 22120., 20344., 21040., 21736., 22432., 23932.,
      24784., 25636., 26488., 24208., 25072., 25936., 26800., 24484., 25360.,
      26236., 27112., 24760., 25648., 26536., 27424., 25036., 25936., 26836.,
      27736., 25312., 26224., 27136., 28048., 25588., 26512., 27436., 28360.,
      25864., 26800., 27736., 28672., 26140., 27088., 28036., 28984., 26416.,
      27376., 28336., 29296., 26692., 27664., 28636., 29608., 26968., 27952.,
      28936., 29920., 27244., 28240., 29236., 30232., 27520., 28528., 29536.,
      30544., 27796., 28816., 29836., 30856., 28072., 29104., 30136., 31168.,
      28348., 29392., 30436., 31480., 28624., 29680., 30736., 31792., 28900.,
      29968., 31036., 32104., 29176., 30256., 31336., 32416., 12796., 13520.,
      14244., 14968., 13072., 13808., 14544., 15280., 13348., 14096., 14844.,
      15592., 13624., 14384., 15144., 15904., 13900., 14672., 15444., 16216.,
      14176., 14960., 15744., 16528., 14452., 15248., 16044., 16840., 14728.,
      15536., 16344., 17152., 15004., 15824., 16644., 17464., 15280., 16112.,
      16944., 17776., 15556., 16400., 17244., 18088., 15832., 16688., 17544.,
      18400., 16108., 16976., 17844., 18712., 16384., 17264., 18144., 19024.,
      16660., 17552., 18444., 19336., 16936., 17840., 18744., 19648., 17212.,
      18128., 19044., 19960., 17488., 18416., 19344., 20272., 17764., 18704.,
      19644., 20584., 18040., 18992., 19944., 20896., 9852.,  10448., 11044.,
      11640., 10128., 10736., 11344., 11952., 10404., 11024., 11644., 12264.,
      10680., 11312., 11944., 12576., 10956., 11600., 12244., 12888., 11232.,
      11888., 12544., 13200., 11508., 12176., 12844., 13512., 11784., 12464.,
      13144., 13824., 12060., 12752., 13444., 14136., 12336., 13040., 13744.,
      14448., 12612., 13328., 14044., 14760., 12888., 13616., 14344., 15072.,
      13164., 13904., 14644., 15384., 13440., 14192., 14944., 15696., 13716.,
      14480., 15244., 16008., 13992., 14768., 15544., 16320., 14268., 15056.,
      15844., 16632., 14544., 15344., 16144., 16944., 14820., 15632., 16444.,
      17256., 15096., 15920., 16744., 17568., 15100., 15568., 16036., 16504.,
      15376., 15856., 16336., 16816., 15652., 16144., 16636., 17128., 15928.,
      16432., 16936., 17440., 16204., 16720., 17236., 17752., 16480., 17008.,
      17536., 18064., 16756., 17296., 17836., 18376., 17032., 17584., 18136.,
      18688., 17308., 17872., 18436., 19000., 17584., 18160., 18736., 19312.,
      17860., 18448., 19036., 19624., 18136., 18736., 19336., 19936., 18412.,
      19024., 19636., 20248., 18688., 19312., 19936., 20560., 18964., 19600.,
      20236., 20872., 19240., 19888., 20536., 21184., 19516., 20176., 20836.,
      21496., 19792., 20464., 21136., 21808., 20068., 20752., 21436., 22120.,
      20344., 21040., 21736., 22432.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4612., 6158., 7750.,  6454.,  5188.,  5482., 7546., 9659., 8236.,
      6842., 7312., 10104., 12936., 10104., 7312., 6842., 8236., 9659.,
      7546., 5482., 5188.,  6454.,  7750.,  6158., 4612.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      500.,  536.,  572.,  608.,  644.,  716.,  752.,  788.,  824.,
      860.,  932.,  968.,  1004., 1040., 1076., 1148., 1184., 1220.,
      1256., 1292., 1364., 1400., 1436., 1472., 1508.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5700.,  6056., 7136., 7580., 8562., 9100.,  6802.,  7244.,  5204.,
      5544.,  5494., 5876., 7381., 7860., 9263.,  9846.,  7830.,  8312.,
      6558.,  6932., 7184., 7616., 9936., 10480., 12664., 13328., 10024.,
      10576., 7568., 8000., 6382., 6804., 7815.,  8344.,  9203.,  9846.,
      7552.,  8084., 6102., 6516., 5284., 5672.,  6920.,  7404.,  8514.,
      9100.,  7450., 7932., 6580., 6952.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      916.,  1000., 980.,  1072., 1044., 1144., 1108., 1216., 1172., 1288.,
      1300., 1432., 1364., 1504., 1428., 1576., 1492., 1648., 1556., 1720.,
      1684., 1864., 1748., 1936., 1812., 2008., 1876., 2080., 1940., 2152.,
      2068., 2296., 2132., 2368., 2196., 2440., 2260., 2512., 2324., 2584.,
      2452., 2728., 2516., 2800., 2580., 2872., 2644., 2944., 2708., 3016.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5220., 5576.,  5932.,  6288.,  6596.,  7040.,  7484.,  7928.,  7818.,
      8356., 8894.,  9432.,  6538.,  6980.,  7422.,  7864.,  5684.,  6024.,
      6364., 6704.,  6254.,  6636.,  7018.,  7400.,  7627.,  8106.,  8585.,
      9064., 8855.,  9438.,  10021., 10604., 6858.,  7340.,  7822.,  8304.,
      5318., 5692.,  6066.,  6440.,  6512.,  6944.,  7376.,  7808.,  8832.,
      9376., 9920.,  10464., 10968., 11632., 12296., 12960., 8360.,  8912.,
      9464., 10016., 6256.,  6688.,  7120.,  7552.,  6262.,  6684.,  7106.,
      7528., 7901.,  8430.,  8959.,  9488.,  9347.,  9990.,  10633., 11276.,
      7916., 8448.,  8980.,  9512.,  6990.,  7404.,  7818.,  8232.,  5092.,
      5480., 5868.,  6256.,  6636.,  7120.,  7604.,  8088.,  7994.,  8580.,
      9166., 9752.,  6610.,  7092.,  7574.,  8056.,  5684.,  6056.,  6428.,
      6800.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1748., 1832., 1916., 2000., 1868., 1960., 2052., 2144., 1988., 2088.,
      2188., 2288., 2108., 2216., 2324., 2432., 2228., 2344., 2460., 2576.,
      2468., 2600., 2732., 2864., 2588., 2728., 2868., 3008., 2708., 2856.,
      3004., 3152., 2828., 2984., 3140., 3296., 2948., 3112., 3276., 3440.,
      3188., 3368., 3548., 3728., 3308., 3496., 3684., 3872., 3428., 3624.,
      3820., 4016., 3548., 3752., 3956., 4160., 3668., 3880., 4092., 4304.,
      3908., 4136., 4364., 4592., 4028., 4264., 4500., 4736., 4148., 4392.,
      4636., 4880., 4268., 4520., 4772., 5024., 4388., 4648., 4908., 5168.,
      4628., 4904., 5180., 5456., 4748., 5032., 5316., 5600., 4868., 5160.,
      5452., 5744., 4988., 5288., 5588., 5888., 5108., 5416., 5724., 6032.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6580.,  6952., 7450., 7932., 8514.,  9100.,  6920.,  7404.,  5284.,
      5672.,  6102., 6516., 7552., 8084.,  9203.,  9846.,  7815.,  8344.,
      6382.,  6804., 7568., 8000., 10024., 10576., 12664., 13328., 9936.,
      10480., 7184., 7616., 6558., 6932.,  7830.,  8312.,  9263.,  9846.,
      7381.,  7860., 5494., 5876., 5204.,  5544.,  6802.,  7244.,  8562.,
      9100.,  7136., 7580., 5700., 6056.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      964.,  1000., 1036., 1072., 1108., 1144., 1180., 1216., 1252., 1288.,
      1396., 1432., 1468., 1504., 1540., 1576., 1612., 1648., 1684., 1720.,
      1828., 1864., 1900., 1936., 1972., 2008., 2044., 2080., 2116., 2152.,
      2260., 2296., 2332., 2368., 2404., 2440., 2476., 2512., 2548., 2584.,
      2692., 2728., 2764., 2800., 2836., 2872., 2908., 2944., 2980., 3016.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6776.,  7144.,  7176.,  7568.,  7450.,  7892.,  7968.,  8440.,  8308.,
      8836.,  8932.,  9496.,  6586.,  7024.,  7108.,  7576.,  4984.,  5320.,
      5416.,  5776.,  6028.,  6444.,  6508.,  6952.,  7717.,  8224.,  8330.,
      8872.,  9602.,  10214., 10334., 10988., 8429.,  8942.,  9036.,  9584.,
      7372.,  7772.,  7868.,  8296.,  9120.,  9632.,  9632.,  10176., 12664.,
      13296., 13312., 13984., 16368., 17136., 17136., 17952., 12664., 13312.,
      13296., 13984., 9120.,  9632.,  9632.,  10176., 7372.,  7868.,  7772.,
      8296.,  8429.,  9036.,  8942.,  9584.,  9602.,  10334., 10214., 10988.,
      7717.,  8330.,  8224.,  8872.,  6028.,  6508.,  6444.,  6952.,  4984.,
      5416.,  5320.,  5776.,  6586.,  7108.,  7024.,  7576.,  8308.,  8932.,
      8836.,  9496.,  7450.,  7968.,  7892.,  8440.,  6776.,  7176.,  7144.,
      7568.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1768., 1928., 1832., 2000., 1896., 2072., 1960., 2144., 2024., 2216.,
      2088., 2288., 2152., 2360., 2216., 2432., 2280., 2504., 2344., 2576.,
      2536., 2792., 2600., 2864., 2664., 2936., 2728., 3008., 2792., 3080.,
      2856., 3152., 2920., 3224., 2984., 3296., 3048., 3368., 3112., 3440.,
      3304., 3656., 3368., 3728., 3432., 3800., 3496., 3872., 3560., 3944.,
      3624., 4016., 3688., 4088., 3752., 4160., 3816., 4232., 3880., 4304.,
      4072., 4520., 4136., 4592., 4200., 4664., 4264., 4736., 4328., 4808.,
      4392., 4880., 4456., 4952., 4520., 5024., 4584., 5096., 4648., 5168.,
      4840., 5384., 4904., 5456., 4968., 5528., 5032., 5600., 5096., 5672.,
      5160., 5744., 5224., 5816., 5288., 5888., 5352., 5960., 5416., 6032.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6016.,  6384.,  6752.,  7120.,  6408.,  6800.,  7192.,  7584.,  6650.,
      7092.,  7534.,  7976.,  7144.,  7616.,  8088.,  8560.,  7384.,  7912.,
      8440.,  8968.,  7956.,  8520.,  9084.,  9648.,  6174.,  6612.,  7050.,
      7488.,  6644.,  7112.,  7580.,  8048.,  5408.,  5744.,  6080.,  6416.,
      5800.,  6160.,  6520.,  6880.,  7544.,  7960.,  8376.,  8792.,  7964.,
      8408.,  8852.,  9296.,  8399.,  8906.,  9413.,  9920.,  8950.,  9492.,
      10034., 10576., 9376.,  9988.,  10600., 11212., 10030., 10684., 11338.,
      11992., 7513.,  8026.,  8539.,  9052.,  8052.,  8600.,  9148.,  9696.,
      6152.,  6552.,  6952.,  7352.,  6604.,  7032.,  7460.,  7888.,  7488.,
      8000.,  8512.,  9024.,  7968.,  8512.,  9056.,  9600.,  10488., 11120.,
      11752., 12384., 11104., 11776., 12448., 13120., 13536., 14304., 15072.,
      15840., 14256., 15072., 15888., 16704., 10216., 10864., 11512., 12160.,
      10800., 11488., 12176., 12864., 7488.,  8000.,  8512.,  9024.,  7968.,
      8512.,  9056.,  9600.,  6568.,  7064.,  7560.,  8056.,  6956.,  7480.,
      8004.,  8528.,  8475.,  9082.,  9689.,  10296., 8986.,  9628.,  10270.,
      10912., 10408., 11140., 11872., 12604., 11014., 11788., 12562., 13336.,
      9157.,  9770.,  10383., 10996., 9656.,  10304., 10952., 11600., 8504.,
      8984.,  9464.,  9944.,  8924.,  9432.,  9940.,  10448., 5824.,  6256.,
      6688.,  7120.,  6152.,  6608.,  7064.,  7520.,  6794.,  7316.,  7838.,
      8360.,  7224.,  7776.,  8328.,  8880.,  7800.,  8424.,  9048.,  9672.,
      8308.,  8968.,  9628.,  10288., 6382.,  6900.,  7418.,  7936.,  6788.,
      7336.,  7884.,  8432.,  5472.,  5872.,  6272.,  6672.,  5800.,  6224.,
      6648.,  7072.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3376.,  3536.,  3696.,  3856.,  3496.,  3664.,  3832.,  4000.,  3616.,
      3792.,  3968.,  4144.,  3736.,  3920.,  4104.,  4288.,  3856.,  4048.,
      4240.,  4432.,  3976.,  4176.,  4376.,  4576.,  4096.,  4304.,  4512.,
      4720.,  4216.,  4432.,  4648.,  4864.,  4336.,  4560.,  4784.,  5008.,
      4456.,  4688.,  4920.,  5152.,  4816.,  5072.,  5328.,  5584.,  4936.,
      5200.,  5464.,  5728.,  5056.,  5328.,  5600.,  5872.,  5176.,  5456.,
      5736.,  6016.,  5296.,  5584.,  5872.,  6160.,  5416.,  5712.,  6008.,
      6304.,  5536.,  5840.,  6144.,  6448.,  5656.,  5968.,  6280.,  6592.,
      5776.,  6096.,  6416.,  6736.,  5896.,  6224.,  6552.,  6880.,  6256.,
      6608.,  6960.,  7312.,  6376.,  6736.,  7096.,  7456.,  6496.,  6864.,
      7232.,  7600.,  6616.,  6992.,  7368.,  7744.,  6736.,  7120.,  7504.,
      7888.,  6856.,  7248.,  7640.,  8032.,  6976.,  7376.,  7776.,  8176.,
      7096.,  7504.,  7912.,  8320.,  7216.,  7632.,  8048.,  8464.,  7336.,
      7760.,  8184.,  8608.,  7696.,  8144.,  8592.,  9040.,  7816.,  8272.,
      8728.,  9184.,  7936.,  8400.,  8864.,  9328.,  8056.,  8528.,  9000.,
      9472.,  8176.,  8656.,  9136.,  9616.,  8296.,  8784.,  9272.,  9760.,
      8416.,  8912.,  9408.,  9904.,  8536.,  9040.,  9544.,  10048., 8656.,
      9168.,  9680.,  10192., 8776.,  9296.,  9816.,  10336., 9136.,  9680.,
      10224., 10768., 9256.,  9808.,  10360., 10912., 9376.,  9936.,  10496.,
      11056., 9496.,  10064., 10632., 11200., 9616.,  10192., 10768., 11344.,
      9736.,  10320., 10904., 11488., 9856.,  10448., 11040., 11632., 9976.,
      10576., 11176., 11776., 10096., 10704., 11312., 11920., 10216., 10832.,
      11448., 12064.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5684., 6056.,  6428.,  6800.,  6610.,  7092.,  7574.,  8056.,  7994.,
      8580., 9166.,  9752.,  6636.,  7120.,  7604.,  8088.,  5092.,  5480.,
      5868., 6256.,  6990.,  7404.,  7818.,  8232.,  7916.,  8448.,  8980.,
      9512., 9347.,  9990.,  10633., 11276., 7901.,  8430.,  8959.,  9488.,
      6262., 6684.,  7106.,  7528.,  6256.,  6688.,  7120.,  7552.,  8360.,
      8912., 9464.,  10016., 10968., 11632., 12296., 12960., 8832.,  9376.,
      9920., 10464., 6512.,  6944.,  7376.,  7808.,  5318.,  5692.,  6066.,
      6440., 6858.,  7340.,  7822.,  8304.,  8855.,  9438.,  10021., 10604.,
      7627., 8106.,  8585.,  9064.,  6254.,  6636.,  7018.,  7400.,  5684.,
      6024., 6364.,  6704.,  6538.,  6980.,  7422.,  7864.,  7818.,  8356.,
      8894., 9432.,  6596.,  7040.,  7484.,  7928.,  5220.,  5576.,  5932.,
      6288.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1892., 1928., 1964., 2000., 2036., 2072., 2108., 2144., 2180., 2216.,
      2252., 2288., 2324., 2360., 2396., 2432., 2468., 2504., 2540., 2576.,
      2756., 2792., 2828., 2864., 2900., 2936., 2972., 3008., 3044., 3080.,
      3116., 3152., 3188., 3224., 3260., 3296., 3332., 3368., 3404., 3440.,
      3620., 3656., 3692., 3728., 3764., 3800., 3836., 3872., 3908., 3944.,
      3980., 4016., 4052., 4088., 4124., 4160., 4196., 4232., 4268., 4304.,
      4484., 4520., 4556., 4592., 4628., 4664., 4700., 4736., 4772., 4808.,
      4844., 4880., 4916., 4952., 4988., 5024., 5060., 5096., 5132., 5168.,
      5348., 5384., 5420., 5456., 5492., 5528., 5564., 5600., 5636., 5672.,
      5708., 5744., 5780., 5816., 5852., 5888., 5924., 5960., 5996., 6032.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5472.,  5800.,  5872.,  6224.,  6272.,  6648.,  6672.,  7072.,  6382.,
      6788.,  6900.,  7336.,  7418.,  7884.,  7936.,  8432.,  7800.,  8308.,
      8424.,  8968.,  9048.,  9628.,  9672.,  10288., 6794.,  7224.,  7316.,
      7776.,  7838.,  8328.,  8360.,  8880.,  5824.,  6152.,  6256.,  6608.,
      6688.,  7064.,  7120.,  7520.,  8504.,  8924.,  8984.,  9432.,  9464.,
      9940.,  9944.,  10448., 9157.,  9656.,  9770.,  10304., 10383., 10952.,
      10996., 11600., 10408., 11014., 11140., 11788., 11872., 12562., 12604.,
      13336., 8475.,  8986.,  9082.,  9628.,  9689.,  10270., 10296., 10912.,
      6568.,  6956.,  7064.,  7480.,  7560.,  8004.,  8056.,  8528.,  7488.,
      7968.,  8000.,  8512.,  8512.,  9056.,  9024.,  9600.,  10216., 10800.,
      10864., 11488., 11512., 12176., 12160., 12864., 13536., 14256., 14304.,
      15072., 15072., 15888., 15840., 16704., 10488., 11104., 11120., 11776.,
      11752., 12448., 12384., 13120., 7488.,  7968.,  8000.,  8512.,  8512.,
      9056.,  9024.,  9600.,  6152.,  6604.,  6552.,  7032.,  6952.,  7460.,
      7352.,  7888.,  7513.,  8052.,  8026.,  8600.,  8539.,  9148.,  9052.,
      9696.,  9376.,  10030., 9988.,  10684., 10600., 11338., 11212., 11992.,
      8399.,  8950.,  8906.,  9492.,  9413.,  10034., 9920.,  10576., 7544.,
      7964.,  7960.,  8408.,  8376.,  8852.,  8792.,  9296.,  5408.,  5800.,
      5744.,  6160.,  6080.,  6520.,  6416.,  6880.,  6174.,  6644.,  6612.,
      7112.,  7050.,  7580.,  7488.,  8048.,  7384.,  7956.,  7912.,  8520.,
      8440.,  9084.,  8968.,  9648.,  6650.,  7144.,  7092.,  7616.,  7534.,
      8088.,  7976.,  8560.,  6016.,  6408.,  6384.,  6800.,  6752.,  7192.,
      7120.,  7584.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3472.,  3784.,  3536.,  3856.,  3600.,  3928.,  3664.,  4000.,  3728.,
      4072.,  3792.,  4144.,  3856.,  4216.,  3920.,  4288.,  3984.,  4360.,
      4048.,  4432.,  4112.,  4504.,  4176.,  4576.,  4240.,  4648.,  4304.,
      4720.,  4368.,  4792.,  4432.,  4864.,  4496.,  4936.,  4560.,  5008.,
      4624.,  5080.,  4688.,  5152.,  5008.,  5512.,  5072.,  5584.,  5136.,
      5656.,  5200.,  5728.,  5264.,  5800.,  5328.,  5872.,  5392.,  5944.,
      5456.,  6016.,  5520.,  6088.,  5584.,  6160.,  5648.,  6232.,  5712.,
      6304.,  5776.,  6376.,  5840.,  6448.,  5904.,  6520.,  5968.,  6592.,
      6032.,  6664.,  6096.,  6736.,  6160.,  6808.,  6224.,  6880.,  6544.,
      7240.,  6608.,  7312.,  6672.,  7384.,  6736.,  7456.,  6800.,  7528.,
      6864.,  7600.,  6928.,  7672.,  6992.,  7744.,  7056.,  7816.,  7120.,
      7888.,  7184.,  7960.,  7248.,  8032.,  7312.,  8104.,  7376.,  8176.,
      7440.,  8248.,  7504.,  8320.,  7568.,  8392.,  7632.,  8464.,  7696.,
      8536.,  7760.,  8608.,  8080.,  8968.,  8144.,  9040.,  8208.,  9112.,
      8272.,  9184.,  8336.,  9256.,  8400.,  9328.,  8464.,  9400.,  8528.,
      9472.,  8592.,  9544.,  8656.,  9616.,  8720.,  9688.,  8784.,  9760.,
      8848.,  9832.,  8912.,  9904.,  8976.,  9976.,  9040.,  10048., 9104.,
      10120., 9168.,  10192., 9232.,  10264., 9296.,  10336., 9616.,  10696.,
      9680.,  10768., 9744.,  10840., 9808.,  10912., 9872.,  10984., 9936.,
      11056., 10000., 11128., 10064., 11200., 10128., 11272., 10192., 11344.,
      10256., 11416., 10320., 11488., 10384., 11560., 10448., 11632., 10512.,
      11704., 10576., 11776., 10640., 11848., 10704., 11920., 10768., 11992.,
      10832., 12064.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4856.,  5184.,  5512.,  5840.,  5248.,  5600.,  5952.,  6304.,  5640.,
      6016.,  6392.,  6768.,  6032.,  6432.,  6832.,  7232.,  5446.,  5852.,
      6258.,  6664.,  5940.,  6376.,  6812.,  7248.,  6434.,  6900.,  7366.,
      7832.,  6928.,  7424.,  7920.,  8416.,  6516.,  7024.,  7532.,  8040.,
      7088.,  7632.,  8176.,  8720.,  7660.,  8240.,  8820.,  9400.,  8232.,
      8848.,  9464.,  10080., 5702.,  6132.,  6562.,  6992.,  6172.,  6632.,
      7092.,  7552.,  6642.,  7132.,  7622.,  8112.,  7112.,  7632.,  8152.,
      8672.,  5368.,  5696.,  6024.,  6352.,  5760.,  6112.,  6464.,  6816.,
      6152.,  6528.,  6904.,  7280.,  6544.,  6944.,  7344.,  7744.,  8908.,
      9328.,  9748.,  10168., 9328.,  9776.,  10224., 10672., 9748.,  10224.,
      10700., 11176., 10168., 10672., 11176., 11680., 8471.,  8970.,  9469.,
      9968.,  9022.,  9556.,  10090., 10624., 9573.,  10142., 10711., 11280.,
      10124., 10728., 11332., 11936., 8690.,  9296.,  9902.,  10508., 9344.,
      9992.,  10640., 11288., 9998.,  10688., 11378., 12068., 10652., 11384.,
      12116., 12848., 6583.,  7094.,  7605.,  8116.,  7122.,  7668.,  8214.,
      8760.,  7661.,  8242.,  8823.,  9404.,  8200.,  8816.,  9432.,  10048.,
      5068.,  5456.,  5844.,  6232.,  5520.,  5936.,  6352.,  6768.,  5972.,
      6416.,  6860.,  7304.,  6424.,  6896.,  7368.,  7840.,  6816.,  7296.,
      7776.,  8256.,  7296.,  7808.,  8320.,  8832.,  7776.,  8320.,  8864.,
      9408.,  8256.,  8832.,  9408.,  9984.,  10504., 11088., 11672., 12256.,
      11120., 11744., 12368., 12992., 11736., 12400., 13064., 13728., 12352.,
      13056., 13760., 14464., 14832., 15552., 16272., 16992., 15552., 16320.,
      17088., 17856., 16272., 17088., 17904., 18720., 16992., 17856., 18720.,
      19584., 10504., 11120., 11736., 12352., 11088., 11744., 12400., 13056.,
      11672., 12368., 13064., 13760., 12256., 12992., 13728., 14464., 6816.,
      7296.,  7776.,  8256.,  7296.,  7808.,  8320.,  8832.,  7776.,  8320.,
      8864.,  9408.,  8256.,  8832.,  9408.,  9984.,  5068.,  5520.,  5972.,
      6424.,  5456.,  5936.,  6416.,  6896.,  5844.,  6352.,  6860.,  7368.,
      6232.,  6768.,  7304.,  7840.,  6583.,  7122.,  7661.,  8200.,  7094.,
      7668.,  8242.,  8816.,  7605.,  8214.,  8823.,  9432.,  8116.,  8760.,
      9404.,  10048., 8690.,  9344.,  9998.,  10652., 9296.,  9992.,  10688.,
      11384., 9902.,  10640., 11378., 12116., 10508., 11288., 12068., 12848.,
      8471.,  9022.,  9573.,  10124., 8970.,  9556.,  10142., 10728., 9469.,
      10090., 10711., 11332., 9968.,  10624., 11280., 11936., 8908.,  9328.,
      9748.,  10168., 9328.,  9776.,  10224., 10672., 9748.,  10224., 10700.,
      11176., 10168., 10672., 11176., 11680., 5368.,  5760.,  6152.,  6544.,
      5696.,  6112.,  6528.,  6944.,  6024.,  6464.,  6904.,  7344.,  6352.,
      6816.,  7280.,  7744.,  5702.,  6172.,  6642.,  7112.,  6132.,  6632.,
      7132.,  7632.,  6562.,  7092.,  7622.,  8152.,  6992.,  7552.,  8112.,
      8672.,  6516.,  7088.,  7660.,  8232.,  7024.,  7632.,  8240.,  8848.,
      7532.,  8176.,  8820.,  9464.,  8040.,  8720.,  9400.,  10080., 5446.,
      5940.,  6434.,  6928.,  5852.,  6376.,  6900.,  7424.,  6258.,  6812.,
      7366.,  7920.,  6664.,  7248.,  7832.,  8416.,  4856.,  5248.,  5640.,
      6032.,  5184.,  5600.,  6016.,  6432.,  5512.,  5952.,  6392.,  6832.,
      5840.,  6304.,  6768.,  7232.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6632.,  6944.,  7256.,  7568.,  6752.,  7072.,  7392.,  7712.,  6872.,
      7200.,  7528.,  7856.,  6992.,  7328.,  7664.,  8000.,  7112.,  7456.,
      7800.,  8144.,  7232.,  7584.,  7936.,  8288.,  7352.,  7712.,  8072.,
      8432.,  7472.,  7840.,  8208.,  8576.,  7592.,  7968.,  8344.,  8720.,
      7712.,  8096.,  8480.,  8864.,  7832.,  8224.,  8616.,  9008.,  7952.,
      8352.,  8752.,  9152.,  8072.,  8480.,  8888.,  9296.,  8192.,  8608.,
      9024.,  9440.,  8312.,  8736.,  9160.,  9584.,  8432.,  8864.,  9296.,
      9728.,  8552.,  8992.,  9432.,  9872.,  8672.,  9120.,  9568.,  10016.,
      8792.,  9248.,  9704.,  10160., 8912.,  9376.,  9840.,  10304., 9512.,
      10016., 10520., 11024., 9632.,  10144., 10656., 11168., 9752.,  10272.,
      10792., 11312., 9872.,  10400., 10928., 11456., 9992.,  10528., 11064.,
      11600., 10112., 10656., 11200., 11744., 10232., 10784., 11336., 11888.,
      10352., 10912., 11472., 12032., 10472., 11040., 11608., 12176., 10592.,
      11168., 11744., 12320., 10712., 11296., 11880., 12464., 10832., 11424.,
      12016., 12608., 10952., 11552., 12152., 12752., 11072., 11680., 12288.,
      12896., 11192., 11808., 12424., 13040., 11312., 11936., 12560., 13184.,
      11432., 12064., 12696., 13328., 11552., 12192., 12832., 13472., 11672.,
      12320., 12968., 13616., 11792., 12448., 13104., 13760., 12392., 13088.,
      13784., 14480., 12512., 13216., 13920., 14624., 12632., 13344., 14056.,
      14768., 12752., 13472., 14192., 14912., 12872., 13600., 14328., 15056.,
      12992., 13728., 14464., 15200., 13112., 13856., 14600., 15344., 13232.,
      13984., 14736., 15488., 13352., 14112., 14872., 15632., 13472., 14240.,
      15008., 15776., 13592., 14368., 15144., 15920., 13712., 14496., 15280.,
      16064., 13832., 14624., 15416., 16208., 13952., 14752., 15552., 16352.,
      14072., 14880., 15688., 16496., 14192., 15008., 15824., 16640., 14312.,
      15136., 15960., 16784., 14432., 15264., 16096., 16928., 14552., 15392.,
      16232., 17072., 14672., 15520., 16368., 17216., 15272., 16160., 17048.,
      17936., 15392., 16288., 17184., 18080., 15512., 16416., 17320., 18224.,
      15632., 16544., 17456., 18368., 15752., 16672., 17592., 18512., 15872.,
      16800., 17728., 18656., 15992., 16928., 17864., 18800., 16112., 17056.,
      18000., 18944., 16232., 17184., 18136., 19088., 16352., 17312., 18272.,
      19232., 16472., 17440., 18408., 19376., 16592., 17568., 18544., 19520.,
      16712., 17696., 18680., 19664., 16832., 17824., 18816., 19808., 16952.,
      17952., 18952., 19952., 17072., 18080., 19088., 20096., 17192., 18208.,
      19224., 20240., 17312., 18336., 19360., 20384., 17432., 18464., 19496.,
      20528., 17552., 18592., 19632., 20672., 18152., 19232., 20312., 21392.,
      18272., 19360., 20448., 21536., 18392., 19488., 20584., 21680., 18512.,
      19616., 20720., 21824., 18632., 19744., 20856., 21968., 18752., 19872.,
      20992., 22112., 18872., 20000., 21128., 22256., 18992., 20128., 21264.,
      22400., 19112., 20256., 21400., 22544., 19232., 20384., 21536., 22688.,
      19352., 20512., 21672., 22832., 19472., 20640., 21808., 22976., 19592.,
      20768., 21944., 23120., 19712., 20896., 22080., 23264., 19832., 21024.,
      22216., 23408., 19952., 21152., 22352., 23552., 20072., 21280., 22488.,
      23696., 20192., 21408., 22624., 23840., 20312., 21536., 22760., 23984.,
      20432., 21664., 22896., 24128.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6123., 7314.,  8563.,  7562.,  6579.,  7770.,  9605., 11496., 10283.,
      9092., 10852., 13576., 16340., 13576., 10852., 9092., 10283., 11496.,
      9605., 7770.,  6579.,  7562.,  8563.,  7314.,  6123.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1298., 1376., 1454., 1532., 1610., 1844., 1922., 2000., 2078.,
      2156., 2390., 2468., 2546., 2624., 2702., 2936., 3014., 3092.,
      3170., 3248., 3482., 3560., 3638., 3716., 3794.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7759.,  8182.,  8624.,  9124., 9503.,  10086., 8028.,  8532.,  6595.,
      7014.,  6956.,  7444.,  8421., 9002.,  9895.,  10576., 8903.,  9494.,
      7738.,  8232.,  8988.,  9576., 11536., 12240., 14060., 14888., 11904.,
      12624., 9388.,  9992.,  8843., 9416.,  10667., 11350., 12464., 13264.,
      11125., 11818., 9201.,  9780., 7003.,  7526.,  9032.,  9652.,  11027.,
      11750., 9620.,  10244., 8399., 8918.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2446., 2596., 2590., 2752., 2734., 2908., 2878., 3064., 3022., 3220.,
      3454., 3688., 3598., 3844., 3742., 4000., 3886., 4156., 4030., 4312.,
      4462., 4780., 4606., 4936., 4750., 5092., 4894., 5248., 5038., 5404.,
      5470., 5872., 5614., 6028., 5758., 6184., 5902., 6340., 6046., 6496.,
      6478., 6964., 6622., 7120., 6766., 7276., 6910., 7432., 7054., 7588.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7223.,  7646.,  8069.,  8492.,  8076.,  8576.,  9076.,  9576.,  8855.,
      9438.,  10021., 10604., 7840.,  8344.,  8848.,  9352.,  7107.,  7526.,
      7945.,  8364.,  7504.,  7992.,  8480.,  8968.,  9701.,  10282., 10863.,
      11444., 10789., 11470., 12151., 12832., 9215.,  9806.,  10397., 10988.,
      7750.,  8244.,  8738.,  9232.,  8684.,  9272.,  9860.,  10448., 11104.,
      11808., 12512., 13216., 13596., 14424., 15252., 16080., 11408., 12128.,
      12848., 13568., 9180.,  9784.,  10388., 10992., 7673.,  8246.,  8819.,
      9392.,  9803.,  10486., 11169., 11852., 12224., 13024., 13824., 14624.,
      11317., 12010., 12703., 13396., 9119.,  9698.,  10277., 10856., 6699.,
      7222.,  7745.,  8268.,  8260.,  8880.,  9500.,  10120., 10355., 11078.,
      11801., 12524., 9144.,  9768.,  10392., 11016., 8407.,  8926.,  9445.,
      9964.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4742.,  4892.,  5042.,  5192.,  5018.,  5180.,  5342.,  5504.,  5294.,
      5468.,  5642.,  5816.,  5570.,  5756.,  5942.,  6128.,  5846.,  6044.,
      6242.,  6440.,  6674.,  6908.,  7142.,  7376.,  6950.,  7196.,  7442.,
      7688.,  7226.,  7484.,  7742.,  8000.,  7502.,  7772.,  8042.,  8312.,
      7778.,  8060.,  8342.,  8624.,  8606.,  8924.,  9242.,  9560.,  8882.,
      9212.,  9542.,  9872.,  9158.,  9500.,  9842.,  10184., 9434.,  9788.,
      10142., 10496., 9710.,  10076., 10442., 10808., 10538., 10940., 11342.,
      11744., 10814., 11228., 11642., 12056., 11090., 11516., 11942., 12368.,
      11366., 11804., 12242., 12680., 11642., 12092., 12542., 12992., 12470.,
      12956., 13442., 13928., 12746., 13244., 13742., 14240., 13022., 13532.,
      14042., 14552., 13298., 13820., 14342., 14864., 13574., 14108., 14642.,
      15176.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8399.,  8918., 9620., 10244., 11027., 11750., 9032.,  9652.,  7003.,
      7526.,  9201., 9780., 11125., 11818., 12464., 13264., 10667., 11350.,
      8843.,  9416., 9388., 9992.,  11904., 12624., 14060., 14888., 11536.,
      12240., 8988., 9576., 7738.,  8232.,  8903.,  9494.,  9895.,  10576.,
      8421.,  9002., 6956., 7444.,  6595.,  7014.,  8028.,  8532.,  9503.,
      10086., 8624., 9124., 7759.,  8182.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2518., 2596., 2674., 2752., 2830., 2908., 2986., 3064., 3142., 3220.,
      3610., 3688., 3766., 3844., 3922., 4000., 4078., 4156., 4234., 4312.,
      4702., 4780., 4858., 4936., 5014., 5092., 5170., 5248., 5326., 5404.,
      5794., 5872., 5950., 6028., 6106., 6184., 6262., 6340., 6418., 6496.,
      6886., 6964., 7042., 7120., 7198., 7276., 7354., 7432., 7510., 7588.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8814.,  9246.,  9246.,  9708.,  9412.,  9928.,  9952.,  10504., 10178.,
      10790., 10814., 11468., 8068.,  8592.,  8632.,  9192.,  5934.,  6358.,
      6406.,  6860.,  7349.,  7906.,  7896.,  8488.,  9002.,  9674.,  9674.,
      10388., 10335., 11104., 11118., 11936., 9410.,  10070., 10094., 10796.,
      8029.,  8566.,  8596.,  9168.,  9864.,  10456., 10456., 11088., 13392.,
      14112., 14112., 14880., 17048., 17880., 17880., 18768., 13392., 14112.,
      14112., 14880., 9864.,  10456., 10456., 11088., 8029.,  8596.,  8566.,
      9168.,  9410.,  10094., 10070., 10796., 10335., 11118., 11104., 11936.,
      9002.,  9674.,  9674.,  10388., 7349.,  7896.,  7906.,  8488.,  5934.,
      6406.,  6358.,  6860.,  8068.,  8632.,  8592.,  9192.,  10178., 10814.,
      10790., 11468., 9412.,  9952.,  9928.,  10504., 8814.,  9246.,  9246.,
      9708.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4748.,  5036.,  4892.,  5192.,  5036.,  5348.,  5180.,  5504.,  5324.,
      5660.,  5468.,  5816.,  5612.,  5972.,  5756.,  6128.,  5900.,  6284.,
      6044.,  6440.,  6764.,  7220.,  6908.,  7376.,  7052.,  7532.,  7196.,
      7688.,  7340.,  7844.,  7484.,  8000.,  7628.,  8156.,  7772.,  8312.,
      7916.,  8468.,  8060.,  8624.,  8780.,  9404.,  8924.,  9560.,  9068.,
      9716.,  9212.,  9872.,  9356.,  10028., 9500.,  10184., 9644.,  10340.,
      9788.,  10496., 9932.,  10652., 10076., 10808., 10796., 11588., 10940.,
      11744., 11084., 11900., 11228., 12056., 11372., 12212., 11516., 12368.,
      11660., 12524., 11804., 12680., 11948., 12836., 12092., 12992., 12812.,
      13772., 12956., 13928., 13100., 14084., 13244., 14240., 13388., 14396.,
      13532., 14552., 13676., 14708., 13820., 14864., 13964., 15020., 14108.,
      15176.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7980.,  8412.,  8844.,  9276.,  8430.,  8892.,  9354.,  9816.,  8612.,
      9128.,  9644.,  10160., 9176.,  9728.,  10280., 10832., 9376.,  9988.,
      10600., 11212., 10030., 10684., 11338., 11992., 7868.,  8392.,  8916.,
      9440.,  8448.,  9008.,  9568.,  10128., 6676.,  7100.,  7524.,  7948.,
      7174.,  7628.,  8082.,  8536.,  8989.,  9546.,  10103., 10660., 9504.,
      10096., 10688., 11280., 12052., 12724., 13396., 14068., 12682., 13396.,
      14110., 14824., 12221., 12990., 13759., 14528., 12970., 13788., 14606.,
      15424., 10000., 10660., 11320., 11980., 10654., 11356., 12058., 12760.,
      7745.,  8282.,  8819.,  9356.,  8300.,  8872.,  9444.,  10016., 8416.,
      9008.,  9600.,  10192., 9016.,  9648.,  10280., 10912., 11376., 12096.,
      12816., 13536., 12096., 12864., 13632., 14400., 14832., 15664., 16496.,
      17328., 15672., 16560., 17448., 18336., 11568., 12288., 13008., 13728.,
      12288., 13056., 13824., 14592., 8864.,  9456.,  10048., 10640., 9464.,
      10096., 10728., 11360., 7395.,  7962.,  8529.,  9096.,  7890.,  8492.,
      9094.,  9696.,  9400.,  10084., 10768., 11452., 10006., 10732., 11458.,
      12184., 12207., 12990., 13773., 14556., 12928., 13760., 14592., 15424.,
      11860., 12532., 13204., 13876., 12490., 13204., 13918., 14632., 8551.,
      9098.,  9645.,  10192., 9086.,  9668.,  10250., 10832., 5412.,  5884.,
      6356.,  6828.,  5814.,  6316.,  6818.,  7320.,  6932.,  7496.,  8060.,
      8624.,  7432.,  8032.,  8632.,  9232.,  8584.,  9220.,  9856.,  10492.,
      9190.,  9868.,  10546., 11224., 8012.,  8552.,  9092.,  9632.,  8528.,
      9104.,  9680.,  10256., 7980.,  8412.,  8844.,  9276.,  8430.,  8892.,
      9354.,  9816.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9208.,  9496.,  9784.,  10072., 9484.,  9784.,  10084., 10384., 9760.,
      10072., 10384., 10696., 10036., 10360., 10684., 11008., 10312., 10648.,
      10984., 11320., 10588., 10936., 11284., 11632., 10864., 11224., 11584.,
      11944., 11140., 11512., 11884., 12256., 11416., 11800., 12184., 12568.,
      11692., 12088., 12484., 12880., 13072., 13528., 13984., 14440., 13348.,
      13816., 14284., 14752., 13624., 14104., 14584., 15064., 13900., 14392.,
      14884., 15376., 14176., 14680., 15184., 15688., 14452., 14968., 15484.,
      16000., 14728., 15256., 15784., 16312., 15004., 15544., 16084., 16624.,
      15280., 15832., 16384., 16936., 15556., 16120., 16684., 17248., 16936.,
      17560., 18184., 18808., 17212., 17848., 18484., 19120., 17488., 18136.,
      18784., 19432., 17764., 18424., 19084., 19744., 18040., 18712., 19384.,
      20056., 18316., 19000., 19684., 20368., 18592., 19288., 19984., 20680.,
      18868., 19576., 20284., 20992., 19144., 19864., 20584., 21304., 19420.,
      20152., 20884., 21616., 20800., 21592., 22384., 23176., 21076., 21880.,
      22684., 23488., 21352., 22168., 22984., 23800., 21628., 22456., 23284.,
      24112., 21904., 22744., 23584., 24424., 22180., 23032., 23884., 24736.,
      22456., 23320., 24184., 25048., 22732., 23608., 24484., 25360., 23008.,
      23896., 24784., 25672., 23284., 24184., 25084., 25984., 24664., 25624.,
      26584., 27544., 24940., 25912., 26884., 27856., 25216., 26200., 27184.,
      28168., 25492., 26488., 27484., 28480., 25768., 26776., 27784., 28792.,
      26044., 27064., 28084., 29104., 26320., 27352., 28384., 29416., 26596.,
      27640., 28684., 29728., 26872., 27928., 28984., 30040., 27148., 28216.,
      29284., 30352.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8407.,  8926.,  9445.,  9964.,  9144.,  9768.,  10392., 11016., 10355.,
      11078., 11801., 12524., 8260.,  8880.,  9500.,  10120., 6699.,  7222.,
      7745.,  8268.,  9119.,  9698.,  10277., 10856., 11317., 12010., 12703.,
      13396., 12224., 13024., 13824., 14624., 9803.,  10486., 11169., 11852.,
      7673.,  8246.,  8819.,  9392.,  9180.,  9784.,  10388., 10992., 11408.,
      12128., 12848., 13568., 13596., 14424., 15252., 16080., 11104., 11808.,
      12512., 13216., 8684.,  9272.,  9860.,  10448., 7750.,  8244.,  8738.,
      9232.,  9215.,  9806.,  10397., 10988., 10789., 11470., 12151., 12832.,
      9701.,  10282., 10863., 11444., 7504.,  7992.,  8480.,  8968.,  7107.,
      7526.,  7945.,  8364.,  7840.,  8344.,  8848.,  9352.,  8855.,  9438.,
      10021., 10604., 8076.,  8576.,  9076.,  9576.,  7223.,  7646.,  8069.,
      8492.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4958.,  5036.,  5114.,  5192.,  5270.,  5348.,  5426.,  5504.,  5582.,
      5660.,  5738.,  5816.,  5894.,  5972.,  6050.,  6128.,  6206.,  6284.,
      6362.,  6440.,  7142.,  7220.,  7298.,  7376.,  7454.,  7532.,  7610.,
      7688.,  7766.,  7844.,  7922.,  8000.,  8078.,  8156.,  8234.,  8312.,
      8390.,  8468.,  8546.,  8624.,  9326.,  9404.,  9482.,  9560.,  9638.,
      9716.,  9794.,  9872.,  9950.,  10028., 10106., 10184., 10262., 10340.,
      10418., 10496., 10574., 10652., 10730., 10808., 11510., 11588., 11666.,
      11744., 11822., 11900., 11978., 12056., 12134., 12212., 12290., 12368.,
      12446., 12524., 12602., 12680., 12758., 12836., 12914., 12992., 13694.,
      13772., 13850., 13928., 14006., 14084., 14162., 14240., 14318., 14396.,
      14474., 14552., 14630., 14708., 14786., 14864., 14942., 15020., 15098.,
      15176.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7980.,  8430.,  8412.,  8892.,  8844.,  9354.,  9276.,  9816.,  8012.,
      8528.,  8552.,  9104.,  9092.,  9680.,  9632.,  10256., 8584.,  9190.,
      9220.,  9868.,  9856.,  10546., 10492., 11224., 6932.,  7432.,  7496.,
      8032.,  8060.,  8632.,  8624.,  9232.,  5412.,  5814.,  5884.,  6316.,
      6356.,  6818.,  6828.,  7320.,  8551.,  9086.,  9098.,  9668.,  9645.,
      10250., 10192., 10832., 11860., 12490., 12532., 13204., 13204., 13918.,
      13876., 14632., 12207., 12928., 12990., 13760., 13773., 14592., 14556.,
      15424., 9400.,  10006., 10084., 10732., 10768., 11458., 11452., 12184.,
      7395.,  7890.,  7962.,  8492.,  8529.,  9094.,  9096.,  9696.,  8864.,
      9464.,  9456.,  10096., 10048., 10728., 10640., 11360., 11568., 12288.,
      12288., 13056., 13008., 13824., 13728., 14592., 14832., 15672., 15664.,
      16560., 16496., 17448., 17328., 18336., 11376., 12096., 12096., 12864.,
      12816., 13632., 13536., 14400., 8416.,  9016.,  9008.,  9648.,  9600.,
      10280., 10192., 10912., 7745.,  8300.,  8282.,  8872.,  8819.,  9444.,
      9356.,  10016., 10000., 10654., 10660., 11356., 11320., 12058., 11980.,
      12760., 12221., 12970., 12990., 13788., 13759., 14606., 14528., 15424.,
      12052., 12682., 12724., 13396., 13396., 14110., 14068., 14824., 8989.,
      9504.,  9546.,  10096., 10103., 10688., 10660., 11280., 6676.,  7174.,
      7100.,  7628.,  7524.,  8082.,  7948.,  8536.,  7868.,  8448.,  8392.,
      9008.,  8916.,  9568.,  9440.,  10128., 9376.,  10030., 9988.,  10684.,
      10600., 11338., 11212., 11992., 8612.,  9176.,  9128.,  9728.,  9644.,
      10280., 10160., 10832., 7980.,  8430.,  8412.,  8892.,  8844.,  9354.,
      9276.,  9816.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9352.,  9916.,  9496.,  10072., 9640.,  10228., 9784.,  10384., 9928.,
      10540., 10072., 10696., 10216., 10852., 10360., 11008., 10504., 11164.,
      10648., 11320., 10792., 11476., 10936., 11632., 11080., 11788., 11224.,
      11944., 11368., 12100., 11512., 12256., 11656., 12412., 11800., 12568.,
      11944., 12724., 12088., 12880., 13384., 14284., 13528., 14440., 13672.,
      14596., 13816., 14752., 13960., 14908., 14104., 15064., 14248., 15220.,
      14392., 15376., 14536., 15532., 14680., 15688., 14824., 15844., 14968.,
      16000., 15112., 16156., 15256., 16312., 15400., 16468., 15544., 16624.,
      15688., 16780., 15832., 16936., 15976., 17092., 16120., 17248., 17416.,
      18652., 17560., 18808., 17704., 18964., 17848., 19120., 17992., 19276.,
      18136., 19432., 18280., 19588., 18424., 19744., 18568., 19900., 18712.,
      20056., 18856., 20212., 19000., 20368., 19144., 20524., 19288., 20680.,
      19432., 20836., 19576., 20992., 19720., 21148., 19864., 21304., 20008.,
      21460., 20152., 21616., 21448., 23020., 21592., 23176., 21736., 23332.,
      21880., 23488., 22024., 23644., 22168., 23800., 22312., 23956., 22456.,
      24112., 22600., 24268., 22744., 24424., 22888., 24580., 23032., 24736.,
      23176., 24892., 23320., 25048., 23464., 25204., 23608., 25360., 23752.,
      25516., 23896., 25672., 24040., 25828., 24184., 25984., 25480., 27388.,
      25624., 27544., 25768., 27700., 25912., 27856., 26056., 28012., 26200.,
      28168., 26344., 28324., 26488., 28480., 26632., 28636., 26776., 28792.,
      26920., 28948., 27064., 29104., 27208., 29260., 27352., 29416., 27496.,
      29572., 27640., 29728., 27784., 29884., 27928., 30040., 28072., 30196.,
      28216., 30352.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9750.,  10200., 10650., 11100., 10200., 10680., 11160., 11640., 10650.,
      11160., 11670., 12180., 11100., 11640., 12180., 12720., 8884.,  9400.,
      9916.,  10432., 9448.,  10000., 10552., 11104., 10012., 10600., 11188.,
      11776., 10576., 11200., 11824., 12448., 8690.,  9296.,  9902.,  10508.,
      9344.,  9992.,  10640., 11288., 9998.,  10688., 11378., 12068., 10652.,
      11384., 12116., 12848., 6580.,  7080.,  7580.,  8080.,  7160.,  7696.,
      8232.,  8768.,  7740.,  8312.,  8884.,  9456.,  8320.,  8928.,  9536.,
      10144., 5398.,  5800.,  6202.,  6604.,  5896.,  6328.,  6760.,  7192.,
      6394.,  6856.,  7318.,  7780.,  6892.,  7384.,  7876.,  8368.,  8855.,
      9390.,  9925.,  10460., 9370.,  9940.,  10510., 11080., 9885.,  10490.,
      11095., 11700., 10400., 11040., 11680., 12320., 13202., 13832., 14462.,
      15092., 13832., 14504., 15176., 15848., 14462., 15176., 15890., 16604.,
      15092., 15848., 16604., 17360., 12173., 12894., 13615., 14336., 12922.,
      13692., 14462., 15232., 13671., 14490., 15309., 16128., 14420., 15288.,
      16156., 17024., 8690.,  9296.,  9902.,  10508., 9344.,  9992.,  10640.,
      11288., 9998.,  10688., 11378., 12068., 10652., 11384., 12116., 12848.,
      6455.,  6950.,  7445.,  7940.,  7010.,  7540.,  8070.,  8600.,  7565.,
      8130.,  8695.,  9260.,  8120.,  8720.,  9320.,  9920.,  8520.,  9120.,
      9720.,  10320., 9120.,  9760.,  10400., 11040., 9720.,  10400., 11080.,
      11760., 10320., 11040., 11760., 12480., 12144., 12864., 13584., 14304.,
      12864., 13632., 14400., 15168., 13584., 14400., 15216., 16032., 14304.,
      15168., 16032., 16896., 17304., 18144., 18984., 19824., 18144., 19040.,
      19936., 20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840.,
      22848., 12144., 12864., 13584., 14304., 12864., 13632., 14400., 15168.,
      13584., 14400., 15216., 16032., 14304., 15168., 16032., 16896., 8520.,
      9120.,  9720.,  10320., 9120.,  9760.,  10400., 11040., 9720.,  10400.,
      11080., 11760., 10320., 11040., 11760., 12480., 6455.,  7010.,  7565.,
      8120.,  6950.,  7540.,  8130.,  8720.,  7445.,  8070.,  8695.,  9320.,
      7940.,  8600.,  9260.,  9920.,  8690.,  9344.,  9998.,  10652., 9296.,
      9992.,  10688., 11384., 9902.,  10640., 11378., 12116., 10508., 11288.,
      12068., 12848., 12173., 12922., 13671., 14420., 12894., 13692., 14490.,
      15288., 13615., 14462., 15309., 16156., 14336., 15232., 16128., 17024.,
      13202., 13832., 14462., 15092., 13832., 14504., 15176., 15848., 14462.,
      15176., 15890., 16604., 15092., 15848., 16604., 17360., 8855.,  9370.,
      9885.,  10400., 9390.,  9940.,  10490., 11040., 9925.,  10510., 11095.,
      11680., 10460., 11080., 11700., 12320., 5398.,  5896.,  6394.,  6892.,
      5800.,  6328.,  6856.,  7384.,  6202.,  6760.,  7318.,  7876.,  6604.,
      7192.,  7780.,  8368.,  6580.,  7160.,  7740.,  8320.,  7080.,  7696.,
      8312.,  8928.,  7580.,  8232.,  8884.,  9536.,  8080.,  8768.,  9456.,
      10144., 8690.,  9344.,  9998.,  10652., 9296.,  9992.,  10688., 11384.,
      9902.,  10640., 11378., 12116., 10508., 11288., 12068., 12848., 8884.,
      9448.,  10012., 10576., 9400.,  10000., 10600., 11200., 9916.,  10552.,
      11188., 11824., 10432., 11104., 11776., 12448., 9750.,  10200., 10650.,
      11100., 10200., 10680., 11160., 11640., 10650., 11160., 11670., 12180.,
      11100., 11640., 12180., 12720.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18140., 18704., 19268., 19832., 18416., 18992., 19568., 20144., 18692.,
      19280., 19868., 20456., 18968., 19568., 20168., 20768., 19244., 19856.,
      20468., 21080., 19520., 20144., 20768., 21392., 19796., 20432., 21068.,
      21704., 20072., 20720., 21368., 22016., 20348., 21008., 21668., 22328.,
      20624., 21296., 21968., 22640., 20900., 21584., 22268., 22952., 21176.,
      21872., 22568., 23264., 21452., 22160., 22868., 23576., 21728., 22448.,
      23168., 23888., 22004., 22736., 23468., 24200., 22280., 23024., 23768.,
      24512., 22556., 23312., 24068., 24824., 22832., 23600., 24368., 25136.,
      23108., 23888., 24668., 25448., 23384., 24176., 24968., 25760., 25868.,
      26768., 27668., 28568., 26144., 27056., 27968., 28880., 26420., 27344.,
      28268., 29192., 26696., 27632., 28568., 29504., 26972., 27920., 28868.,
      29816., 27248., 28208., 29168., 30128., 27524., 28496., 29468., 30440.,
      27800., 28784., 29768., 30752., 22316., 23184., 24052., 24920., 22592.,
      23472., 24352., 25232., 22868., 23760., 24652., 25544., 23144., 24048.,
      24952., 25856., 18172., 18960., 19748., 20536., 18448., 19248., 20048.,
      20848., 18724., 19536., 20348., 21160., 19000., 19824., 20648., 21472.,
      14540., 15248., 15956., 16664., 14816., 15536., 16256., 16976., 15092.,
      15824., 16556., 17288., 15368., 16112., 16856., 17600., 17852., 18704.,
      19556., 20408., 18128., 18992., 19856., 20720., 18404., 19280., 20156.,
      21032., 18680., 19568., 20456., 21344., 18956., 19856., 20756., 21656.,
      19232., 20144., 21056., 21968., 19508., 20432., 21356., 22280., 19784.,
      20720., 21656., 22592., 15836., 16656., 17476., 18296., 16112., 16944.,
      17776., 18608., 16388., 17232., 18076., 18920., 16664., 17520., 18376.,
      19232., 13228., 13968., 14708., 15448., 13504., 14256., 15008., 15760.,
      13780., 14544., 15308., 16072., 14056., 14832., 15608., 16384., 11132.,
      11792., 12452., 13112., 11408., 12080., 12752., 13424., 11684., 12368.,
      13052., 13736., 11960., 12656., 13352., 14048., 14444., 15248., 16052.,
      16856., 14720., 15536., 16352., 17168., 14996., 15824., 16652., 17480.,
      15272., 16112., 16952., 17792., 15548., 16400., 17252., 18104., 15824.,
      16688., 17552., 18416., 16100., 16976., 17852., 18728., 16376., 17264.,
      18152., 19040., 13964., 14736., 15508., 16280., 14240., 15024., 15808.,
      16592., 14516., 15312., 16108., 16904., 14792., 15600., 16408., 17216.,
      12892., 13584., 14276., 14968., 13168., 13872., 14576., 15280., 13444.,
      14160., 14876., 15592., 13720., 14448., 15176., 15904., 12332., 12944.,
      13556., 14168., 12608., 13232., 13856., 14480., 12884., 13520., 14156.,
      14792., 13160., 13808., 14456., 15104., 15644., 16400., 17156., 17912.,
      15920., 16688., 17456., 18224., 16196., 16976., 17756., 18536., 16472.,
      17264., 18056., 18848., 16748., 17552., 18356., 19160., 17024., 17840.,
      18656., 19472., 17300., 18128., 18956., 19784., 17576., 18416., 19256.,
      20096., 16700., 17424., 18148., 18872., 16976., 17712., 18448., 19184.,
      17252., 18000., 18748., 19496., 17528., 18288., 19048., 19808., 17164.,
      17808., 18452., 19096., 17440., 18096., 18752., 19408., 17716., 18384.,
      19052., 19720., 17992., 18672., 19352., 20032., 18140., 18704., 19268.,
      19832., 18416., 18992., 19568., 20144., 18692., 19280., 19868., 20456.,
      18968., 19568., 20168., 20768.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7950.,  9464.,  11016., 9688.,  8334.,  11467., 13552., 15668., 13720.,
      11755., 17000., 19936., 22880., 19936., 17000., 11755., 13720., 15668.,
      13552., 11467., 8334.,  9688.,  11016., 9464.,  7950.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632., 2768., 2904., 3040., 3176., 3720., 3856., 3992., 4128.,
      4264., 4808., 4944., 5080., 5216., 5352., 5896., 6032., 6168.,
      6304., 6440., 6984., 7120., 7256., 7392., 7528.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9678.,  10140., 11200., 11760., 12664., 13328., 10710., 11312., 8838.,
      9372.,  10451., 11030., 12068., 12768., 13612., 14440., 11459., 12208.,
      9407.,  10070., 15208., 15952., 17472., 18368., 19616., 20672., 16520.,
      17472., 13576., 14416., 11555., 12278., 13132., 14000., 14572., 15592.,
      12075., 12992., 9743.,  10550., 13134., 13788., 15008., 15792., 16760.,
      17680., 14070., 14896., 11526., 12252.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5032.,  5264.,  5288.,  5536.,  5544.,  5808.,  5800.,  6080.,  6056.,
      6352.,  7080.,  7440.,  7336.,  7712.,  7592.,  7984.,  7848.,  8256.,
      8104.,  8528.,  9128.,  9616.,  9384.,  9888.,  9640.,  10160., 9896.,
      10432., 10152., 10704., 11176., 11792., 11432., 12064., 11688., 12336.,
      11944., 12608., 12200., 12880., 13224., 13968., 13480., 14240., 13736.,
      14512., 13992., 14784., 14248., 15056.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9198.,  9660.,  10122., 10584., 10192., 10752., 11312., 11872., 10968.,
      11632., 12296., 12960., 8498.,  9100.,  9702.,  10304., 6294.,  6828.,
      7362.,  7896.,  11491., 12070., 12649., 13228., 12684., 13384., 14084.,
      14784., 13596., 14424., 15252., 16080., 10521., 11270., 12019., 12768.,
      7783.,  8446.,  9109.,  9772.,  14696., 15440., 16184., 16928., 16128.,
      17024., 17920., 18816., 17184., 18240., 19296., 20352., 13272., 14224.,
      15176., 16128., 9800.,  10640., 11480., 12320., 14227., 14950., 15673.,
      16396., 15540., 16408., 17276., 18144., 16476., 17496., 18516., 19536.,
      12705., 13622., 14539., 15456., 9367.,  10174., 10981., 11788., 12846.,
      13500., 14154., 14808., 14000., 14784., 15568., 16352., 14808., 15728.,
      16648., 17568., 11410., 12236., 13062., 13888., 8406.,  9132.,  9858.,
      10584.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9832.,  10064., 10296., 10528., 10328., 10576., 10824., 11072., 10824.,
      11088., 11352., 11616., 11320., 11600., 11880., 12160., 11816., 12112.,
      12408., 12704., 13800., 14160., 14520., 14880., 14296., 14672., 15048.,
      15424., 14792., 15184., 15576., 15968., 15288., 15696., 16104., 16512.,
      15784., 16208., 16632., 17056., 17768., 18256., 18744., 19232., 18264.,
      18768., 19272., 19776., 18760., 19280., 19800., 20320., 19256., 19792.,
      20328., 20864., 19752., 20304., 20856., 21408., 21736., 22352., 22968.,
      23584., 22232., 22864., 23496., 24128., 22728., 23376., 24024., 24672.,
      23224., 23888., 24552., 25216., 23720., 24400., 25080., 25760., 25704.,
      26448., 27192., 27936., 26200., 26960., 27720., 28480., 26696., 27472.,
      28248., 29024., 27192., 27984., 28776., 29568., 27688., 28496., 29304.,
      30112.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11526., 12252., 14070., 14896., 16760., 17680., 15008., 15792., 13134.,
      13788., 9743.,  10550., 12075., 12992., 14572., 15592., 13132., 14000.,
      11555., 12278., 13576., 14416., 16520., 17472., 19616., 20672., 17472.,
      18368., 15208., 15952., 9407.,  10070., 11459., 12208., 13612., 14440.,
      12068., 12768., 10451., 11030., 8838.,  9372.,  10710., 11312., 12664.,
      13328., 11200., 11760., 9678.,  10140.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5128.,  5264.,  5400.,  5536.,  5672.,  5808.,  5944.,  6080.,  6216.,
      6352.,  7304.,  7440.,  7576.,  7712.,  7848.,  7984.,  8120.,  8256.,
      8392.,  8528.,  9480.,  9616.,  9752.,  9888.,  10024., 10160., 10296.,
      10432., 10568., 10704., 11656., 11792., 11928., 12064., 12200., 12336.,
      12472., 12608., 12744., 12880., 13832., 13968., 14104., 14240., 14376.,
      14512., 14648., 14784., 14920., 15056.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11796., 12300., 12444., 12984., 14070., 14700., 14784., 15456., 16368.,
      17136., 17136., 17952., 14070., 14784., 14700., 15456., 11796., 12444.,
      12300., 12984., 8194.,  8734.,  8998.,  9580.,  10031., 10710., 10920.,
      11648., 11928., 12760., 12888., 13776., 10255., 11032., 11046., 11872.,
      8578.,  9286.,  9214.,  9964.,  15728., 16400., 16592., 17312., 18760.,
      19600., 19712., 20608., 21824., 22848., 22848., 23936., 18760., 19712.,
      19600., 20608., 15728., 16592., 16400., 17312., 8578.,  9214.,  9286.,
      9964.,  10255., 11046., 11032., 11872., 11928., 12888., 12760., 13776.,
      10031., 10920., 10710., 11648., 8194.,  8998.,  8734.,  9580.,  11796.,
      12300., 12444., 12984., 14070., 14700., 14784., 15456., 16368., 17136.,
      17136., 17952., 14070., 14784., 14700., 15456., 11796., 12444., 12300.,
      12984.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10256., 10064., 10528., 10320., 10800., 10576., 11072., 10832.,
      11344., 11088., 11616., 11344., 11888., 11600., 12160., 11856., 12432.,
      12112., 12704., 13904., 14608., 14160., 14880., 14416., 15152., 14672.,
      15424., 14928., 15696., 15184., 15968., 15440., 16240., 15696., 16512.,
      15952., 16784., 16208., 17056., 18000., 18960., 18256., 19232., 18512.,
      19504., 18768., 19776., 19024., 20048., 19280., 20320., 19536., 20592.,
      19792., 20864., 20048., 21136., 20304., 21408., 22096., 23312., 22352.,
      23584., 22608., 23856., 22864., 24128., 23120., 24400., 23376., 24672.,
      23632., 24944., 23888., 25216., 24144., 25488., 24400., 25760., 26192.,
      27664., 26448., 27936., 26704., 28208., 26960., 28480., 27216., 28752.,
      27472., 29024., 27728., 29296., 27984., 29568., 28240., 29840., 28496.,
      30112.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10416., 10920., 11424., 11928., 11100., 11640., 12180., 12720., 12054.,
      12684., 13314., 13944., 12768., 13440., 14112., 14784., 13536., 14304.,
      15072., 15840., 14256., 15072., 15888., 16704., 10626., 11340., 12054.,
      12768., 11172., 11928., 12684., 13440., 7968.,  8616.,  9264.,  9912.,
      8364.,  9048.,  9732.,  10416., 11240., 11780., 12320., 12860., 12038.,
      12620., 13202., 13784., 13111., 13790., 14469., 15148., 13944., 14672.,
      15400., 16128., 14832., 15664., 16496., 17328., 15672., 16560., 17448.,
      18336., 11669., 12446., 13223., 14000., 12306., 13132., 13958., 14784.,
      8768.,  9476.,  10184., 10892., 9230.,  9980.,  10730., 11480., 13888.,
      14560., 15232., 15904., 14800., 15520., 16240., 16960., 16072., 16912.,
      17752., 18592., 17024., 17920., 18816., 19712., 18048., 19072., 20096.,
      21120., 19008., 20096., 21184., 22272., 14168., 15120., 16072., 17024.,
      14896., 15904., 16912., 17920., 10624., 11488., 12352., 13216., 11152.,
      12064., 12976., 13888., 13064., 13700., 14336., 14972., 13862., 14540.,
      15218., 15896., 15015., 15806., 16597., 17388., 15848., 16688., 17528.,
      18368., 16752., 17712., 18672., 19632., 17592., 18608., 19624., 20640.,
      13125., 14014., 14903., 15792., 13762., 14700., 15638., 16576., 9824.,
      10628., 11432., 12236., 10286., 11132., 11978., 12824., 10416., 10920.,
      11424., 11928., 11100., 11640., 12180., 12720., 12054., 12684., 13314.,
      13944., 12768., 13440., 14112., 14784., 13536., 14304., 15072., 15840.,
      14256., 15072., 15888., 16704., 10626., 11340., 12054., 12768., 11172.,
      11928., 12684., 13440., 7968.,  8616.,  9264.,  9912.,  8364.,  9048.,
      9732.,  10416.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19168., 19616., 20064., 20512., 19664., 20128., 20592., 21056., 20160.,
      20640., 21120., 21600., 20656., 21152., 21648., 22144., 21152., 21664.,
      22176., 22688., 21648., 22176., 22704., 23232., 22144., 22688., 23232.,
      23776., 22640., 23200., 23760., 24320., 23136., 23712., 24288., 24864.,
      23632., 24224., 24816., 25408., 13024., 13472., 13920., 14368., 13520.,
      13984., 14448., 14912., 14016., 14496., 14976., 15456., 14512., 15008.,
      15504., 16000., 15008., 15520., 16032., 16544., 15504., 16032., 16560.,
      17088., 16000., 16544., 17088., 17632., 16496., 17056., 17616., 18176.,
      16992., 17568., 18144., 18720., 17488., 18080., 18672., 19264., 10976.,
      11424., 11872., 12320., 11472., 11936., 12400., 12864., 11968., 12448.,
      12928., 13408., 12464., 12960., 13456., 13952., 12960., 13472., 13984.,
      14496., 13456., 13984., 14512., 15040., 13952., 14496., 15040., 15584.,
      14448., 15008., 15568., 16128., 14944., 15520., 16096., 16672., 15440.,
      16032., 16624., 17216., 13024., 13472., 13920., 14368., 13520., 13984.,
      14448., 14912., 14016., 14496., 14976., 15456., 14512., 15008., 15504.,
      16000., 15008., 15520., 16032., 16544., 15504., 16032., 16560., 17088.,
      16000., 16544., 17088., 17632., 16496., 17056., 17616., 18176., 16992.,
      17568., 18144., 18720., 17488., 18080., 18672., 19264., 19168., 19616.,
      20064., 20512., 19664., 20128., 20592., 21056., 20160., 20640., 21120.,
      21600., 20656., 21152., 21648., 22144., 21152., 21664., 22176., 22688.,
      21648., 22176., 22704., 23232., 22144., 22688., 23232., 23776., 22640.,
      23200., 23760., 24320., 23136., 23712., 24288., 24864., 23632., 24224.,
      24816., 25408.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8406.,  9132.,  9858.,  10584., 11410., 12236., 13062., 13888., 14808.,
      15728., 16648., 17568., 14000., 14784., 15568., 16352., 12846., 13500.,
      14154., 14808., 9367.,  10174., 10981., 11788., 12705., 13622., 14539.,
      15456., 16476., 17496., 18516., 19536., 15540., 16408., 17276., 18144.,
      14227., 14950., 15673., 16396., 9800.,  10640., 11480., 12320., 13272.,
      14224., 15176., 16128., 17184., 18240., 19296., 20352., 16128., 17024.,
      17920., 18816., 14696., 15440., 16184., 16928., 7783.,  8446.,  9109.,
      9772.,  10521., 11270., 12019., 12768., 13596., 14424., 15252., 16080.,
      12684., 13384., 14084., 14784., 11491., 12070., 12649., 13228., 6294.,
      6828.,  7362.,  7896.,  8498.,  9100.,  9702.,  10304., 10968., 11632.,
      12296., 12960., 10192., 10752., 11312., 11872., 9198.,  9660.,  10122.,
      10584.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10120., 10256., 10392., 10528., 10664., 10800., 10936., 11072., 11208.,
      11344., 11480., 11616., 11752., 11888., 12024., 12160., 12296., 12432.,
      12568., 12704., 14472., 14608., 14744., 14880., 15016., 15152., 15288.,
      15424., 15560., 15696., 15832., 15968., 16104., 16240., 16376., 16512.,
      16648., 16784., 16920., 17056., 18824., 18960., 19096., 19232., 19368.,
      19504., 19640., 19776., 19912., 20048., 20184., 20320., 20456., 20592.,
      20728., 20864., 21000., 21136., 21272., 21408., 23176., 23312., 23448.,
      23584., 23720., 23856., 23992., 24128., 24264., 24400., 24536., 24672.,
      24808., 24944., 25080., 25216., 25352., 25488., 25624., 25760., 27528.,
      27664., 27800., 27936., 28072., 28208., 28344., 28480., 28616., 28752.,
      28888., 29024., 29160., 29296., 29432., 29568., 29704., 29840., 29976.,
      30112.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  8364.,  8616.,  9048.,  9264.,  9732.,  9912.,  10416., 10626.,
      11172., 11340., 11928., 12054., 12684., 12768., 13440., 13536., 14256.,
      14304., 15072., 15072., 15888., 15840., 16704., 12054., 12768., 12684.,
      13440., 13314., 14112., 13944., 14784., 10416., 11100., 10920., 11640.,
      11424., 12180., 11928., 12720., 9824.,  10286., 10628., 11132., 11432.,
      11978., 12236., 12824., 13125., 13762., 14014., 14700., 14903., 15638.,
      15792., 16576., 16752., 17592., 17712., 18608., 18672., 19624., 19632.,
      20640., 15015., 15848., 15806., 16688., 16597., 17528., 17388., 18368.,
      13064., 13862., 13700., 14540., 14336., 15218., 14972., 15896., 10624.,
      11152., 11488., 12064., 12352., 12976., 13216., 13888., 14168., 14896.,
      15120., 15904., 16072., 16912., 17024., 17920., 18048., 19008., 19072.,
      20096., 20096., 21184., 21120., 22272., 16072., 17024., 16912., 17920.,
      17752., 18816., 18592., 19712., 13888., 14800., 14560., 15520., 15232.,
      16240., 15904., 16960., 8768.,  9230.,  9476.,  9980.,  10184., 10730.,
      10892., 11480., 11669., 12306., 12446., 13132., 13223., 13958., 14000.,
      14784., 14832., 15672., 15664., 16560., 16496., 17448., 17328., 18336.,
      13111., 13944., 13790., 14672., 14469., 15400., 15148., 16128., 11240.,
      12038., 11780., 12620., 12320., 13202., 12860., 13784., 7968.,  8364.,
      8616.,  9048.,  9264.,  9732.,  9912.,  10416., 10626., 11172., 11340.,
      11928., 12054., 12684., 12768., 13440., 13536., 14256., 14304., 15072.,
      15072., 15888., 15840., 16704., 12054., 12768., 12684., 13440., 13314.,
      14112., 13944., 14784., 10416., 11100., 10920., 11640., 11424., 12180.,
      11928., 12720.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19360., 20240., 19616., 20512., 19872., 20784., 20128., 21056., 20384.,
      21328., 20640., 21600., 20896., 21872., 21152., 22144., 21408., 22416.,
      21664., 22688., 21920., 22960., 22176., 23232., 22432., 23504., 22688.,
      23776., 22944., 24048., 23200., 24320., 23456., 24592., 23712., 24864.,
      23968., 25136., 24224., 25408., 13216., 14096., 13472., 14368., 13728.,
      14640., 13984., 14912., 14240., 15184., 14496., 15456., 14752., 15728.,
      15008., 16000., 15264., 16272., 15520., 16544., 15776., 16816., 16032.,
      17088., 16288., 17360., 16544., 17632., 16800., 17904., 17056., 18176.,
      17312., 18448., 17568., 18720., 17824., 18992., 18080., 19264., 11168.,
      12048., 11424., 12320., 11680., 12592., 11936., 12864., 12192., 13136.,
      12448., 13408., 12704., 13680., 12960., 13952., 13216., 14224., 13472.,
      14496., 13728., 14768., 13984., 15040., 14240., 15312., 14496., 15584.,
      14752., 15856., 15008., 16128., 15264., 16400., 15520., 16672., 15776.,
      16944., 16032., 17216., 13216., 14096., 13472., 14368., 13728., 14640.,
      13984., 14912., 14240., 15184., 14496., 15456., 14752., 15728., 15008.,
      16000., 15264., 16272., 15520., 16544., 15776., 16816., 16032., 17088.,
      16288., 17360., 16544., 17632., 16800., 17904., 17056., 18176., 17312.,
      18448., 17568., 18720., 17824., 18992., 18080., 19264., 19360., 20240.,
      19616., 20512., 19872., 20784., 20128., 21056., 20384., 21328., 20640.,
      21600., 20896., 21872., 21152., 22144., 21408., 22416., 21664., 22688.,
      21920., 22960., 22176., 23232., 22432., 23504., 22688., 23776., 22944.,
      24048., 23200., 24320., 23456., 24592., 23712., 24864., 23968., 25136.,
      24224., 25408.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9204.,  9600.,  9996.,  10392., 9888.,  10320., 10752., 11184., 10572.,
      11040., 11508., 11976., 11256., 11760., 12264., 12768., 11970., 12516.,
      13062., 13608., 12684., 13272., 13860., 14448., 13398., 14028., 14658.,
      15288., 14112., 14784., 15456., 16128., 14832., 15552., 16272., 16992.,
      15552., 16320., 17088., 17856., 16272., 17088., 17904., 18720., 16992.,
      17856., 18720., 19584., 11970., 12684., 13398., 14112., 12516., 13272.,
      14028., 14784., 13062., 13860., 14658., 15456., 13608., 14448., 15288.,
      16128., 9204.,  9888.,  10572., 11256., 9600.,  10320., 11040., 11760.,
      9996.,  10752., 11508., 12264., 10392., 11184., 11976., 12768., 10738.,
      11200., 11662., 12124., 11536., 12040., 12544., 13048., 12334., 12880.,
      13426., 13972., 13132., 13720., 14308., 14896., 13965., 14602., 15239.,
      15876., 14798., 15484., 16170., 16856., 15631., 16366., 17101., 17836.,
      16464., 17248., 18032., 18816., 17304., 18144., 18984., 19824., 18144.,
      19040., 19936., 20832., 18984., 19936., 20888., 21840., 19824., 20832.,
      21840., 22848., 13965., 14798., 15631., 16464., 14602., 15484., 16366.,
      17248., 15239., 16170., 17101., 18032., 15876., 16856., 17836., 18816.,
      10738., 11536., 12334., 13132., 11200., 12040., 12880., 13720., 11662.,
      12544., 13426., 14308., 12124., 13048., 13972., 14896., 12272., 12800.,
      13328., 13856., 13184., 13760., 14336., 14912., 14096., 14720., 15344.,
      15968., 15008., 15680., 16352., 17024., 15960., 16688., 17416., 18144.,
      16912., 17696., 18480., 19264., 17864., 18704., 19544., 20384., 18816.,
      19712., 20608., 21504., 19776., 20736., 21696., 22656., 20736., 21760.,
      22784., 23808., 21696., 22784., 23872., 24960., 22656., 23808., 24960.,
      26112., 15960., 16912., 17864., 18816., 16688., 17696., 18704., 19712.,
      17416., 18480., 19544., 20608., 18144., 19264., 20384., 21504., 12272.,
      13184., 14096., 15008., 12800., 13760., 14720., 15680., 13328., 14336.,
      15344., 16352., 13856., 14912., 15968., 17024., 10738., 11200., 11662.,
      12124., 11536., 12040., 12544., 13048., 12334., 12880., 13426., 13972.,
      13132., 13720., 14308., 14896., 13965., 14602., 15239., 15876., 14798.,
      15484., 16170., 16856., 15631., 16366., 17101., 17836., 16464., 17248.,
      18032., 18816., 17304., 18144., 18984., 19824., 18144., 19040., 19936.,
      20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840., 22848.,
      13965., 14798., 15631., 16464., 14602., 15484., 16366., 17248., 15239.,
      16170., 17101., 18032., 15876., 16856., 17836., 18816., 10738., 11536.,
      12334., 13132., 11200., 12040., 12880., 13720., 11662., 12544., 13426.,
      14308., 12124., 13048., 13972., 14896., 9204.,  9600.,  9996.,  10392.,
      9888.,  10320., 10752., 11184., 10572., 11040., 11508., 11976., 11256.,
      11760., 12264., 12768., 11970., 12516., 13062., 13608., 12684., 13272.,
      13860., 14448., 13398., 14028., 14658., 15288., 14112., 14784., 15456.,
      16128., 14832., 15552., 16272., 16992., 15552., 16320., 17088., 17856.,
      16272., 17088., 17904., 18720., 16992., 17856., 18720., 19584., 11970.,
      12684., 13398., 14112., 12516., 13272., 14028., 14784., 13062., 13860.,
      14658., 15456., 13608., 14448., 15288., 16128., 9204.,  9888.,  10572.,
      11256., 9600.,  10320., 11040., 11760., 9996.,  10752., 11508., 12264.,
      10392., 11184., 11976., 12768.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13776., 14144., 14512., 14880., 14272., 14656., 15040., 15424., 14768.,
      15168., 15568., 15968., 15264., 15680., 16096., 16512., 15760., 16192.,
      16624., 17056., 16256., 16704., 17152., 17600., 16752., 17216., 17680.,
      18144., 17248., 17728., 18208., 18688., 17744., 18240., 18736., 19232.,
      18240., 18752., 19264., 19776., 18736., 19264., 19792., 20320., 19232.,
      19776., 20320., 20864., 19728., 20288., 20848., 21408., 20224., 20800.,
      21376., 21952., 20720., 21312., 21904., 22496., 21216., 21824., 22432.,
      23040., 21712., 22336., 22960., 23584., 22208., 22848., 23488., 24128.,
      22704., 23360., 24016., 24672., 23200., 23872., 24544., 25216., 9680.,
      10048., 10416., 10784., 10176., 10560., 10944., 11328., 10672., 11072.,
      11472., 11872., 11168., 11584., 12000., 12416., 11664., 12096., 12528.,
      12960., 12160., 12608., 13056., 13504., 12656., 13120., 13584., 14048.,
      13152., 13632., 14112., 14592., 13648., 14144., 14640., 15136., 14144.,
      14656., 15168., 15680., 14640., 15168., 15696., 16224., 15136., 15680.,
      16224., 16768., 15632., 16192., 16752., 17312., 16128., 16704., 17280.,
      17856., 16624., 17216., 17808., 18400., 17120., 17728., 18336., 18944.,
      17616., 18240., 18864., 19488., 18112., 18752., 19392., 20032., 18608.,
      19264., 19920., 20576., 19104., 19776., 20448., 21120., 13776., 14144.,
      14512., 14880., 14272., 14656., 15040., 15424., 14768., 15168., 15568.,
      15968., 15264., 15680., 16096., 16512., 15760., 16192., 16624., 17056.,
      16256., 16704., 17152., 17600., 16752., 17216., 17680., 18144., 17248.,
      17728., 18208., 18688., 17744., 18240., 18736., 19232., 18240., 18752.,
      19264., 19776., 18736., 19264., 19792., 20320., 19232., 19776., 20320.,
      20864., 19728., 20288., 20848., 21408., 20224., 20800., 21376., 21952.,
      20720., 21312., 21904., 22496., 21216., 21824., 22432., 23040., 21712.,
      22336., 22960., 23584., 22208., 22848., 23488., 24128., 22704., 23360.,
      24016., 24672., 23200., 23872., 24544., 25216., 9680.,  10048., 10416.,
      10784., 10176., 10560., 10944., 11328., 10672., 11072., 11472., 11872.,
      11168., 11584., 12000., 12416., 11664., 12096., 12528., 12960., 12160.,
      12608., 13056., 13504., 12656., 13120., 13584., 14048., 13152., 13632.,
      14112., 14592., 13648., 14144., 14640., 15136., 14144., 14656., 15168.,
      15680., 14640., 15168., 15696., 16224., 15136., 15680., 16224., 16768.,
      15632., 16192., 16752., 17312., 16128., 16704., 17280., 17856., 16624.,
      17216., 17808., 18400., 17120., 17728., 18336., 18944., 17616., 18240.,
      18864., 19488., 18112., 18752., 19392., 20032., 18608., 19264., 19920.,
      20576., 19104., 19776., 20448., 21120., 13776., 14144., 14512., 14880.,
      14272., 14656., 15040., 15424., 14768., 15168., 15568., 15968., 15264.,
      15680., 16096., 16512., 15760., 16192., 16624., 17056., 16256., 16704.,
      17152., 17600., 16752., 17216., 17680., 18144., 17248., 17728., 18208.,
      18688., 17744., 18240., 18736., 19232., 18240., 18752., 19264., 19776.,
      18736., 19264., 19792., 20320., 19232., 19776., 20320., 20864., 19728.,
      20288., 20848., 21408., 20224., 20800., 21376., 21952., 20720., 21312.,
      21904., 22496., 21216., 21824., 22432., 23040., 21712., 22336., 22960.,
      23584., 22208., 22848., 23488., 24128., 22704., 23360., 24016., 24672.,
      23200., 23872., 24544., 25216.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3480., 4116., 4796., 3908., 3080., 3554., 4568., 5655., 4922.,
      4258., 5500., 7522., 9626., 7522., 5500., 4258., 4922., 5655.,
      4568., 3554., 3080., 3908., 4796., 4116., 3480.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4350., 4428., 4506., 4584., 4662., 4818., 4896., 4974., 5052.,
      5130., 5286., 5364., 5442., 5520., 5598., 5754., 5832., 5910.,
      5988., 6066., 6222., 6300., 6378., 6456., 6534.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11368., 12112., 14728., 15688., 17940., 19128., 15116., 16136., 12584.,
      13424., 14350., 15332., 18495., 19728., 22515., 24014., 19160., 20436.,
      16182., 17220., 18604., 19704., 24680., 26052., 30646., 32308., 24398.,
      25796., 18588., 19704., 16198., 17220., 19585., 20852., 22839., 24366.,
      18610., 19888., 14798., 15812., 13512., 14384., 17080., 18152., 20532.,
      21816., 17212., 18280., 14248., 15088.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8214.,  8700.,  8358.,  8856.,  8502.,  9012.,  8646.,  9168.,  8790.,
      9324.,  9078.,  9636.,  9222.,  9792.,  9366.,  9948.,  9510.,  10104.,
      9654.,  10260., 9942.,  10572., 10086., 10728., 10230., 10884., 10374.,
      11040., 10518., 11196., 10806., 11508., 10950., 11664., 11094., 11820.,
      11238., 11976., 11382., 12132., 11670., 12444., 11814., 12600., 11958.,
      12756., 12102., 12912., 12246., 13068.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10824., 11568., 12312., 13056., 14544., 15504., 16464., 17424., 17796.,
      18984., 20172., 21360., 14652., 15672., 16692., 17712., 12264., 13104.,
      13944., 14784., 15270., 16252., 17234., 18216., 18861., 20094., 21327.,
      22560., 21963., 23462., 24961., 26460., 17940., 19216., 20492., 21768.,
      14910., 15948., 16986., 18024., 16076., 17176., 18276., 19376., 21684.,
      23056., 24428., 25800., 26798., 28460., 30122., 31784., 20998., 22396.,
      23794., 25192., 16380., 17496., 18612., 19728., 14478., 15500., 16522.,
      17544., 18607., 19874., 21141., 22408., 22231., 23758., 25285., 26812.,
      18694., 19972., 21250., 22528., 16262., 17276., 18290., 19304., 12744.,
      13616., 14488., 15360., 15552., 16624., 17696., 18768., 17956., 19240.,
      20524., 21808., 14636., 15704., 16772., 17840., 12264., 13104., 13944.,
      14784.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15942., 16428., 16914., 17400., 16218., 16716., 17214., 17712., 16494.,
      17004., 17514., 18024., 16770., 17292., 17814., 18336., 17046., 17580.,
      18114., 18648., 17598., 18156., 18714., 19272., 17874., 18444., 19014.,
      19584., 18150., 18732., 19314., 19896., 18426., 19020., 19614., 20208.,
      18702., 19308., 19914., 20520., 19254., 19884., 20514., 21144., 19530.,
      20172., 20814., 21456., 19806., 20460., 21114., 21768., 20082., 20748.,
      21414., 22080., 20358., 21036., 21714., 22392., 20910., 21612., 22314.,
      23016., 21186., 21900., 22614., 23328., 21462., 22188., 22914., 23640.,
      21738., 22476., 23214., 23952., 22014., 22764., 23514., 24264., 22566.,
      23340., 24114., 24888., 22842., 23628., 24414., 25200., 23118., 23916.,
      24714., 25512., 23394., 24204., 25014., 25824., 23670., 24492., 25314.,
      26136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14248., 15088., 17212., 18280., 20532., 21816., 17080., 18152., 13512.,
      14384., 14798., 15812., 18610., 19888., 22839., 24366., 19585., 20852.,
      16198., 17220., 18588., 19704., 24398., 25796., 30646., 32308., 24680.,
      26052., 18604., 19704., 16182., 17220., 19160., 20436., 22515., 24014.,
      18495., 19728., 14350., 15332., 12584., 13424., 15116., 16136., 17940.,
      19128., 14728., 15688., 11368., 12112.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8622.,  8700.,  8778.,  8856.,  8934.,  9012.,  9090.,  9168.,  9246.,
      9324.,  9558.,  9636.,  9714.,  9792.,  9870.,  9948.,  10026., 10104.,
      10182., 10260., 10494., 10572., 10650., 10728., 10806., 10884., 10962.,
      11040., 11118., 11196., 11430., 11508., 11586., 11664., 11742., 11820.,
      11898., 11976., 12054., 12132., 12366., 12444., 12522., 12600., 12678.,
      12756., 12834., 12912., 12990., 13068.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2928., 3312.,  3312., 3744., 3252., 3720., 3744., 4272., 3816., 4392.,
      4392., 5040.,  3252., 3744., 3720., 4272., 2928., 3312., 3312., 3744.,
      4844., 5308.,  5308., 5832., 4893., 5460., 5502., 6144., 5266., 5966.,
      5990., 6780.,  4085., 4690., 4672., 5352., 3180., 3660., 3660., 4200.,
      4136., 4696.,  4696., 5328., 6350., 7036., 7072., 7848., 8924., 9772.,
      9772., 10728., 6350., 7072., 7036., 7848., 4136., 4696., 4696., 5328.,
      3180., 3660.,  3660., 4200., 4085., 4672., 4690., 5352., 5266., 5990.,
      5966., 6780.,  4893., 5502., 5460., 6144., 4844., 5308., 5308., 5832.,
      2928., 3312.,  3312., 3744., 3252., 3720., 3744., 4272., 3816., 4392.,
      4392., 5040.,  3252., 3744., 3720., 4272., 2928., 3312., 3312., 3744.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16284., 17244., 16428., 17400., 16572., 17556., 16716., 17712., 16860.,
      17868., 17004., 18024., 17148., 18180., 17292., 18336., 17436., 18492.,
      17580., 18648., 18012., 19116., 18156., 19272., 18300., 19428., 18444.,
      19584., 18588., 19740., 18732., 19896., 18876., 20052., 19020., 20208.,
      19164., 20364., 19308., 20520., 19740., 20988., 19884., 21144., 20028.,
      21300., 20172., 21456., 20316., 21612., 20460., 21768., 20604., 21924.,
      20748., 22080., 20892., 22236., 21036., 22392., 21468., 22860., 21612.,
      23016., 21756., 23172., 21900., 23328., 22044., 23484., 22188., 23640.,
      22332., 23796., 22476., 23952., 22620., 24108., 22764., 24264., 23196.,
      24732., 23340., 24888., 23484., 25044., 23628., 25200., 23772., 25356.,
      23916., 25512., 24060., 25668., 24204., 25824., 24348., 25980., 24492.,
      26136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2400., 2784., 3168., 3552.,  2736., 3168., 3600., 4032., 3444., 3912.,
      4380., 4848., 3888., 4416.,  4944., 5472., 4752., 5328., 5904., 6480.,
      5256., 5904., 6552., 7200.,  3228., 3720., 4212., 4704., 3624., 4176.,
      4728., 5280., 2400., 2784.,  3168., 3552., 2736., 3168., 3600., 4032.,
      3848., 4312., 4776., 5240.,  4268., 4792., 5316., 5840., 4035., 4602.,
      5169., 5736., 4602., 5244.,  5886., 6528., 4584., 5284., 5984., 6684.,
      5238., 6028., 6818., 7608.,  3837., 4442., 5047., 5652., 4344., 5024.,
      5704., 6384., 3896., 4376.,  4856., 5336., 4316., 4856., 5396., 5936.,
      3424., 3984., 4544., 5104.,  3928., 4560., 5192., 5824., 5022., 5708.,
      6394., 7080., 5688., 6464.,  7240., 8016., 7016., 7864., 8712., 9560.,
      7772., 8728., 9684., 10640., 4762., 5484., 6206., 6928., 5356., 6168.,
      6980., 7792., 3552., 4112.,  4672., 5232., 4056., 4688., 5320., 5952.,
      4024., 4504., 4984., 5464.,  4444., 4984., 5524., 6064., 4015., 4602.,
      5189., 5776., 4558., 5220.,  5882., 6544., 4304., 5028., 5752., 6476.,
      4910., 5724., 6538., 7352.,  3609., 4218., 4827., 5436., 4092., 4776.,
      5460., 6144., 3848., 4312.,  4776., 5240., 4268., 4792., 5316., 5840.,
      2400., 2784., 3168., 3552.,  2736., 3168., 3600., 4032., 3444., 3912.,
      4380., 4848., 3888., 4416.,  4944., 5472., 4752., 5328., 5904., 6480.,
      5256., 5904., 6552., 7200.,  3228., 3720., 4212., 4704., 3624., 4176.,
      4728., 5280., 2400., 2784.,  3168., 3552., 2736., 3168., 3600., 4032.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11640., 12088., 12536., 12984., 11916., 12376., 12836., 13296., 12192.,
      12664., 13136., 13608., 12468., 12952., 13436., 13920., 12744., 13240.,
      13736., 14232., 13020., 13528., 14036., 14544., 13296., 13816., 14336.,
      14856., 13572., 14104., 14636., 15168., 13848., 14392., 14936., 15480.,
      14124., 14680., 15236., 15792., 14952., 15544., 16136., 16728., 15228.,
      15832., 16436., 17040., 15504., 16120., 16736., 17352., 15780., 16408.,
      17036., 17664., 16056., 16696., 17336., 17976., 16332., 16984., 17636.,
      18288., 16608., 17272., 17936., 18600., 16884., 17560., 18236., 18912.,
      17160., 17848., 18536., 19224., 17436., 18136., 18836., 19536., 18264.,
      19000., 19736., 20472., 18540., 19288., 20036., 20784., 18816., 19576.,
      20336., 21096., 19092., 19864., 20636., 21408., 19368., 20152., 20936.,
      21720., 19644., 20440., 21236., 22032., 19920., 20728., 21536., 22344.,
      20196., 21016., 21836., 22656., 20472., 21304., 22136., 22968., 20748.,
      21592., 22436., 23280., 21576., 22456., 23336., 24216., 21852., 22744.,
      23636., 24528., 22128., 23032., 23936., 24840., 22404., 23320., 24236.,
      25152., 22680., 23608., 24536., 25464., 22956., 23896., 24836., 25776.,
      19520., 20344., 21168., 21992., 19796., 20632., 21468., 22304., 16872.,
      17592., 18312., 19032., 17148., 17880., 18612., 19344., 17976., 18744.,
      19512., 20280., 18252., 19032., 19812., 20592., 18528., 19320., 20112.,
      20904., 18804., 19608., 20412., 21216., 19080., 19896., 20712., 21528.,
      19356., 20184., 21012., 21840., 16944., 17656., 18368., 19080., 17220.,
      17944., 18668., 19392., 15320., 15928., 16536., 17144., 15596., 16216.,
      16836., 17456.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12264., 13104., 13944., 14784., 14636., 15704., 16772., 17840., 17956.,
      19240., 20524., 21808., 15552., 16624., 17696., 18768., 12744., 13616.,
      14488., 15360., 16262., 17276., 18290., 19304., 18694., 19972., 21250.,
      22528., 22231., 23758., 25285., 26812., 18607., 19874., 21141., 22408.,
      14478., 15500., 16522., 17544., 16380., 17496., 18612., 19728., 20998.,
      22396., 23794., 25192., 26798., 28460., 30122., 31784., 21684., 23056.,
      24428., 25800., 16076., 17176., 18276., 19376., 14910., 15948., 16986.,
      18024., 17940., 19216., 20492., 21768., 21963., 23462., 24961., 26460.,
      18861., 20094., 21327., 22560., 15270., 16252., 17234., 18216., 12264.,
      13104., 13944., 14784., 14652., 15672., 16692., 17712., 17796., 18984.,
      20172., 21360., 14544., 15504., 16464., 17424., 10824., 11568., 12312.,
      13056.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17166., 17244., 17322., 17400., 17478., 17556., 17634., 17712., 17790.,
      17868., 17946., 18024., 18102., 18180., 18258., 18336., 18414., 18492.,
      18570., 18648., 19038., 19116., 19194., 19272., 19350., 19428., 19506.,
      19584., 19662., 19740., 19818., 19896., 19974., 20052., 20130., 20208.,
      20286., 20364., 20442., 20520., 20910., 20988., 21066., 21144., 21222.,
      21300., 21378., 21456., 21534., 21612., 21690., 21768., 21846., 21924.,
      22002., 22080., 22158., 22236., 22314., 22392., 22782., 22860., 22938.,
      23016., 23094., 23172., 23250., 23328., 23406., 23484., 23562., 23640.,
      23718., 23796., 23874., 23952., 24030., 24108., 24186., 24264., 24654.,
      24732., 24810., 24888., 24966., 25044., 25122., 25200., 25278., 25356.,
      25434., 25512., 25590., 25668., 25746., 25824., 25902., 25980., 26058.,
      26136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2400., 2736., 2784., 3168.,  3168., 3600., 3552., 4032., 3228., 3624.,
      3720., 4176., 4212., 4728.,  4704., 5280., 4752., 5256., 5328., 5904.,
      5904., 6552., 6480., 7200.,  3444., 3888., 3912., 4416., 4380., 4944.,
      4848., 5472., 2400., 2736.,  2784., 3168., 3168., 3600., 3552., 4032.,
      3848., 4268., 4312., 4792.,  4776., 5316., 5240., 5840., 3609., 4092.,
      4218., 4776., 4827., 5460.,  5436., 6144., 4304., 4910., 5028., 5724.,
      5752., 6538., 6476., 7352.,  4015., 4558., 4602., 5220., 5189., 5882.,
      5776., 6544., 4024., 4444.,  4504., 4984., 4984., 5524., 5464., 6064.,
      3552., 4056., 4112., 4688.,  4672., 5320., 5232., 5952., 4762., 5356.,
      5484., 6168., 6206., 6980.,  6928., 7792., 7016., 7772., 7864., 8728.,
      8712., 9684., 9560., 10640., 5022., 5688., 5708., 6464., 6394., 7240.,
      7080., 8016., 3424., 3928.,  3984., 4560., 4544., 5192., 5104., 5824.,
      3896., 4316., 4376., 4856.,  4856., 5396., 5336., 5936., 3837., 4344.,
      4442., 5024., 5047., 5704.,  5652., 6384., 4584., 5238., 5284., 6028.,
      5984., 6818., 6684., 7608.,  4035., 4602., 4602., 5244., 5169., 5886.,
      5736., 6528., 3848., 4268.,  4312., 4792., 4776., 5316., 5240., 5840.,
      2400., 2736., 2784., 3168.,  3168., 3600., 3552., 4032., 3228., 3624.,
      3720., 4176., 4212., 4728.,  4704., 5280., 4752., 5256., 5328., 5904.,
      5904., 6552., 6480., 7200.,  3444., 3888., 3912., 4416., 4380., 4944.,
      4848., 5472., 2400., 2736.,  2784., 3168., 3168., 3600., 3552., 4032.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11944., 12828., 12088., 12984., 12232., 13140., 12376., 13296., 12520.,
      13452., 12664., 13608., 12808., 13764., 12952., 13920., 13096., 14076.,
      13240., 14232., 13384., 14388., 13528., 14544., 13672., 14700., 13816.,
      14856., 13960., 15012., 14104., 15168., 14248., 15324., 14392., 15480.,
      14536., 15636., 14680., 15792., 15400., 16572., 15544., 16728., 15688.,
      16884., 15832., 17040., 15976., 17196., 16120., 17352., 16264., 17508.,
      16408., 17664., 16552., 17820., 16696., 17976., 16840., 18132., 16984.,
      18288., 17128., 18444., 17272., 18600., 17416., 18756., 17560., 18912.,
      17704., 19068., 17848., 19224., 17992., 19380., 18136., 19536., 18856.,
      20316., 19000., 20472., 19144., 20628., 19288., 20784., 19432., 20940.,
      19576., 21096., 19720., 21252., 19864., 21408., 20008., 21564., 20152.,
      21720., 20296., 21876., 20440., 22032., 20584., 22188., 20728., 22344.,
      20872., 22500., 21016., 22656., 21160., 22812., 21304., 22968., 21448.,
      23124., 21592., 23280., 22312., 24060., 22456., 24216., 22600., 24372.,
      22744., 24528., 22888., 24684., 23032., 24840., 23176., 24996., 23320.,
      25152., 23464., 25308., 23608., 25464., 23752., 25620., 23896., 25776.,
      20200., 21836., 20344., 21992., 20488., 22148., 20632., 22304., 17448.,
      18876., 17592., 19032., 17736., 19188., 17880., 19344., 18600., 20124.,
      18744., 20280., 18888., 20436., 19032., 20592., 19176., 20748., 19320.,
      20904., 19464., 21060., 19608., 21216., 19752., 21372., 19896., 21528.,
      20040., 21684., 20184., 21840., 17512., 18924., 17656., 19080., 17800.,
      19236., 17944., 19392., 15784., 16988., 15928., 17144., 16072., 17300.,
      16216., 17456.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1776.,  2112.,  2448., 2784., 2112.,  2496.,  2880., 3264.,  2448.,
      2880.,  3312.,  3744., 2784., 3264.,  3744.,  4224., 2892.,  3288.,
      3684.,  4080.,  3336., 3792., 4248.,  4704.,  3780., 4296.,  4812.,
      5328.,  4224.,  4800., 5376., 5952.,  4968.,  5472., 5976.,  6480.,
      5472.,  6048.,  6624., 7200., 5976.,  6624.,  7272., 7920.,  6480.,
      7200.,  7920.,  8640., 2892., 3336.,  3780.,  4224., 3288.,  3792.,
      4296.,  4800.,  3684., 4248., 4812.,  5376.,  4080., 4704.,  5328.,
      5952.,  1776.,  2112., 2448., 2784.,  2112.,  2496., 2880.,  3264.,
      2448.,  2880.,  3312., 3744., 2784.,  3264.,  3744., 4224.,  4140.,
      4560.,  4980.,  5400., 4560., 5040.,  5520.,  6000., 4980.,  5520.,
      6060.,  6600.,  5400., 6000., 6600.,  7200.,  3087., 3570.,  4053.,
      4536.,  3654.,  4212., 4770., 5328.,  4221.,  4854., 5487.,  6120.,
      4788.,  5496.,  6204., 6912., 3330.,  3936.,  4542., 5148.,  3984.,
      4680.,  5376.,  6072., 4638., 5424.,  6210.,  6996., 5292.,  6168.,
      7044.,  7920.,  3183., 3726., 4269.,  4812.,  3690., 4308.,  4926.,
      5544.,  4197.,  4890., 5583., 6276.,  4704.,  5472., 6240.,  7008.,
      4140.,  4560.,  4980., 5400., 4560.,  5040.,  5520., 6000.,  4980.,
      5520.,  6060.,  6600., 5400., 6000.,  6600.,  7200., 2664.,  3168.,
      3672.,  4176.,  3168., 3744., 4320.,  4896.,  3672., 4320.,  4968.,
      5616.,  4176.,  4896., 5616., 6336.,  4338.,  4932., 5526.,  6120.,
      5004.,  5688.,  6372., 7056., 5670.,  6444.,  7218., 7992.,  6336.,
      7200.,  8064.,  8928., 7452., 8208.,  8964.,  9720., 8208.,  9072.,
      9936.,  10800., 8964., 9936., 10908., 11880., 9720., 10800., 11880.,
      12960., 4338.,  5004., 5670., 6336.,  4932.,  5688., 6444.,  7200.,
      5526.,  6372.,  7218., 8064., 6120.,  7056.,  7992., 8928.,  2664.,
      3168.,  3672.,  4176., 3168., 3744.,  4320.,  4896., 3672.,  4320.,
      4968.,  5616.,  4176., 4896., 5616.,  6336.,  4140., 4560.,  4980.,
      5400.,  4560.,  5040., 5520., 6000.,  4980.,  5520., 6060.,  6600.,
      5400.,  6000.,  6600., 7200., 3183.,  3690.,  4197., 4704.,  3726.,
      4308.,  4890.,  5472., 4269., 4926.,  5583.,  6240., 4812.,  5544.,
      6276.,  7008.,  3330., 3984., 4638.,  5292.,  3936., 4680.,  5424.,
      6168.,  4542.,  5376., 6210., 7044.,  5148.,  6072., 6996.,  7920.,
      3087.,  3654.,  4221., 4788., 3570.,  4212.,  4854., 5496.,  4053.,
      4770.,  5487.,  6204., 4536., 5328.,  6120.,  6912., 4140.,  4560.,
      4980.,  5400.,  4560., 5040., 5520.,  6000.,  4980., 5520.,  6060.,
      6600.,  5400.,  6000., 6600., 7200.,  1776.,  2112., 2448.,  2784.,
      2112.,  2496.,  2880., 3264., 2448.,  2880.,  3312., 3744.,  2784.,
      3264.,  3744.,  4224., 2892., 3288.,  3684.,  4080., 3336.,  3792.,
      4248.,  4704.,  3780., 4296., 4812.,  5328.,  4224., 4800.,  5376.,
      5952.,  4968.,  5472., 5976., 6480.,  5472.,  6048., 6624.,  7200.,
      5976.,  6624.,  7272., 7920., 6480.,  7200.,  7920., 8640.,  2892.,
      3336.,  3780.,  4224., 3288., 3792.,  4296.,  4800., 3684.,  4248.,
      4812.,  5376.,  4080., 4704., 5328.,  5952.,  1776., 2112.,  2448.,
      2784.,  2112.,  2496., 2880., 3264.,  2448.,  2880., 3312.,  3744.,
      2784.,  3264.,  3744., 4224.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11228., 11600., 11972., 12344., 11504., 11888., 12272., 12656., 11780.,
      12176., 12572., 12968., 12056., 12464., 12872., 13280., 9452.,  9808.,
      10164., 10520., 9728.,  10096., 10464., 10832., 10004., 10384., 10764.,
      11144., 10280., 10672., 11064., 11456., 7932.,  8272.,  8612.,  8952.,
      8208.,  8560.,  8912.,  9264.,  8484.,  8848.,  9212.,  9576.,  8760.,
      9136.,  9512.,  9888.,  9036.,  9424.,  9812.,  10200., 9312.,  9712.,
      10112., 10512., 9588.,  10000., 10412., 10824., 9864.,  10288., 10712.,
      11136., 10140., 10576., 11012., 11448., 10416., 10864., 11312., 11760.,
      10692., 11152., 11612., 12072., 10968., 11440., 11912., 12384., 8892.,
      9296.,  9700.,  10104., 9168.,  9584.,  10000., 10416., 9444.,  9872.,
      10300., 10728., 9720.,  10160., 10600., 11040., 7628.,  8016.,  8404.,
      8792.,  7904.,  8304.,  8704.,  9104.,  8180.,  8592.,  9004.,  9416.,
      8456.,  8880.,  9304.,  9728.,  6620.,  6992.,  7364.,  7736.,  6896.,
      7280.,  7664.,  8048.,  7172.,  7568.,  7964.,  8360.,  7448.,  7856.,
      8264.,  8672.,  6892.,  7248.,  7604.,  7960.,  7168.,  7536.,  7904.,
      8272.,  7444.,  7824.,  8204.,  8584.,  7720.,  8112.,  8504.,  8896.,
      7420.,  7760.,  8100.,  8440.,  7696.,  8048.,  8400.,  8752.,  7972.,
      8336.,  8700.,  9064.,  8248.,  8624.,  9000.,  9376.,  7196.,  7504.,
      7812.,  8120.,  7472.,  7792.,  8112.,  8432.,  7748.,  8080.,  8412.,
      8744.,  8024.,  8368.,  8712.,  9056.,  8300.,  8656.,  9012.,  9368.,
      8576.,  8944.,  9312.,  9680.,  8852.,  9232.,  9612.,  9992.,  9128.,
      9520.,  9912.,  10304., 9404.,  9808.,  10212., 10616., 9680.,  10096.,
      10512., 10928., 9956.,  10384., 10812., 11240., 10232., 10672., 11112.,
      11552., 10188., 10576., 10964., 11352., 10464., 10864., 11264., 11664.,
      10740., 11152., 11564., 11976., 11016., 11440., 11864., 12288., 11228.,
      11600., 11972., 12344., 11504., 11888., 12272., 12656., 11780., 12176.,
      12572., 12968., 12056., 12464., 12872., 13280., 7932.,  8272.,  8612.,
      8952.,  8208.,  8560.,  8912.,  9264.,  8484.,  8848.,  9212.,  9576.,
      8760.,  9136.,  9512.,  9888.,  9036.,  9424.,  9812.,  10200., 9312.,
      9712.,  10112., 10512., 9588.,  10000., 10412., 10824., 9864.,  10288.,
      10712., 11136., 10140., 10576., 11012., 11448., 10416., 10864., 11312.,
      11760., 10692., 11152., 11612., 12072., 10968., 11440., 11912., 12384.,
      9388.,  9808.,  10228., 10648., 9664.,  10096., 10528., 10960., 9940.,
      10384., 10828., 11272., 10216., 10672., 11128., 11584., 8892.,  9296.,
      9700.,  10104., 9168.,  9584.,  10000., 10416., 9444.,  9872.,  10300.,
      10728., 9720.,  10160., 10600., 11040., 6620.,  6992.,  7364.,  7736.,
      6896.,  7280.,  7664.,  8048.,  7172.,  7568.,  7964.,  8360.,  7448.,
      7856.,  8264.,  8672.,  6892.,  7248.,  7604.,  7960.,  7168.,  7536.,
      7904.,  8272.,  7444.,  7824.,  8204.,  8584.,  7720.,  8112.,  8504.,
      8896.,  7420.,  7760.,  8100.,  8440.,  7696.,  8048.,  8400.,  8752.,
      7972.,  8336.,  8700.,  9064.,  8248.,  8624.,  9000.,  9376.,  7180.,
      7504.,  7828.,  8152.,  7456.,  7792.,  8128.,  8464.,  7732.,  8080.,
      8428.,  8776.,  8008.,  8368.,  8728.,  9088.,  7196.,  7504.,  7812.,
      8120.,  7472.,  7792.,  8112.,  8432.,  7748.,  8080.,  8412.,  8744.,
      8024.,  8368.,  8712.,  9056.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5346., 6060., 6618., 5276.,  4210., 4424., 5345., 6354., 5511.,
      4850., 7055., 9110., 11487., 9110., 7055., 4850., 5511., 6354.,
      5345., 4424., 4210., 5276.,  6618., 6060., 5346.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11253., 11424., 11595., 11766., 11937., 12450., 12621., 12792., 12963.,
      13134., 13647., 13818., 13989., 14160., 14331., 14844., 15015., 15186.,
      15357., 15528., 16041., 16212., 16383., 16554., 16725.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4322., 4820., 4888., 5496., 5434., 6148.,  4448., 5064., 3674., 4196.,
      5127., 5744., 6727., 7474., 7240., 8116.,  5705., 6462., 4613., 5252.,
      5845., 6590., 7480., 8380., 9613., 10670., 7516., 8428., 5825., 6590.,
      4814., 5444., 5949., 6702., 7449., 8340.,  6823., 7586., 5076., 5712.,
      3786., 4276., 4488., 5080., 5506., 6212.,  4960., 5560., 4322., 4820.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10131., 10602., 10455., 10944., 10779., 11286., 11103., 11628., 11427.,
      11970., 12399., 12996., 12723., 13338., 13047., 13680., 13371., 14022.,
      13695., 14364., 11851., 12446., 10959., 11508., 11283., 11850., 11607.,
      12192., 11931., 12534., 10855., 11384., 10347., 10830., 10671., 11172.,
      10995., 11514., 11319., 11856., 12291., 12882., 12615., 13224., 12939.,
      13566., 13263., 13908., 13587., 14250.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3730.,  4228.,  4726., 5224., 4208., 4816., 5424., 6032., 4714., 5428.,
      6142.,  6856.,  4264., 4880., 5496., 6112., 3898., 4420., 4942., 5464.,
      4229.,  4846.,  5463., 6080., 5603., 6350., 7097., 7844., 6084., 6960.,
      7836.,  8712.,  5069., 5826., 6583., 7340., 4523., 5162., 5801., 6440.,
      4945.,  5690.,  6435., 7180., 6124., 7024., 7924., 8824., 7913., 8970.,
      10027., 11084., 6248., 7160., 8072., 8984., 5173., 5938., 6703., 7468.,
      4326.,  4956.,  5586., 6216., 5017., 5770., 6523., 7276., 6023., 6914.,
      7805.,  8696.,  5651., 6414., 7177., 7940., 4332., 4968., 5604., 6240.,
      3770.,  4260.,  4750., 5240., 4064., 4656., 5248., 5840., 4754., 5460.,
      6166.,  6872.,  4120., 4720., 5320., 5920., 3730., 4228., 4726., 5224.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16015., 16486., 16957., 17428., 16517., 17006., 17495., 17984., 17019.,
      17526., 18033., 18540., 17521., 18046., 18571., 19096., 18023., 18566.,
      19109., 19652., 19529., 20126., 20723., 21320., 20031., 20646., 21261.,
      21876., 20533., 21166., 21799., 22432., 21035., 21686., 22337., 22988.,
      21537., 22206., 22875., 23544., 17539., 18134., 18729., 19324., 15673.,
      16222., 16771., 17320., 16175., 16742., 17309., 17876., 16677., 17262.,
      17847., 18432., 17179., 17782., 18385., 18988., 14717., 15246., 15775.,
      16304., 13619., 14102., 14585., 15068., 14121., 14622., 15123., 15624.,
      14623., 15142., 15661., 16180., 15125., 15662., 16199., 16736., 16631.,
      17222., 17813., 18404., 17133., 17742., 18351., 18960., 17635., 18262.,
      18889., 19516., 18137., 18782., 19427., 20072., 18639., 19302., 19965.,
      20628.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4322., 4820., 4960., 5560., 5506., 6212.,  4488., 5080., 3786., 4276.,
      5076., 5712., 6823., 7586., 7449., 8340.,  5949., 6702., 4814., 5444.,
      5825., 6590., 7516., 8428., 9613., 10670., 7480., 8380., 5845., 6590.,
      4613., 5252., 5705., 6462., 7240., 8116.,  6727., 7474., 5127., 5744.,
      3674., 4196., 4448., 5064., 5434., 6148.,  4888., 5496., 4322., 4820.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10431., 10602., 10773., 10944., 11115., 11286., 11457., 11628., 11799.,
      11970., 12825., 12996., 13167., 13338., 13509., 13680., 13851., 14022.,
      14193., 14364., 12275., 12446., 11337., 11508., 11679., 11850., 12021.,
      12192., 12363., 12534., 11213., 11384., 10659., 10830., 11001., 11172.,
      11343., 11514., 11685., 11856., 12711., 12882., 13053., 13224., 13395.,
      13566., 13737., 13908., 14079., 14250.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4604.,  5060.,  5060., 5576., 4872., 5440., 5424., 6064., 5028.,  5700.,
      5684.,  6440.,  3864., 4448., 4416., 5072., 3180., 3684., 3636.,  4200.,
      5009.,  5576.,  5598., 6240., 7250., 7950., 7950., 8740., 7267.,  8098.,
      8096.,  9032.,  5338., 6058., 6034., 6844., 4057., 4668., 4634.,  5320.,
      5338.,  6034.,  6058., 6844., 7404., 8248., 8256., 9208., 10486., 11482.,
      11482., 12604., 7404., 8256., 8248., 9208., 5338., 6058., 6034.,  6844.,
      4057.,  4634.,  4668., 5320., 5338., 6034., 6058., 6844., 7267.,  8096.,
      8098.,  9032.,  7250., 7950., 7950., 8740., 5009., 5598., 5576.,  6240.,
      3180.,  3636.,  3684., 4200., 3864., 4416., 4448., 5072., 5028.,  5684.,
      5700.,  6440.,  4872., 5424., 5440., 6064., 4604., 5060., 5060.,  5576.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19938., 20862., 20262., 21204., 20586., 21546., 20910., 21888., 21234.,
      22230., 21558., 22572., 21882., 22914., 22206., 23256., 22530., 23598.,
      22854., 23940., 24474., 25650., 24798., 25992., 25122., 26334., 25446.,
      26676., 25770., 27018., 26094., 27360., 26418., 27702., 26742., 28044.,
      27066., 28386., 27390., 28728., 23378., 24550., 23702., 24892., 21594.,
      22674., 21918., 23016., 22242., 23358., 22566., 23700., 22890., 24042.,
      23214., 24384., 23538., 24726., 23862., 25068., 21386., 22426., 21710.,
      22768., 20370., 21318., 20694., 21660., 21018., 22002., 21342., 22344.,
      21666., 22686., 21990., 23028., 22314., 23370., 22638., 23712., 24258.,
      25422., 24582., 25764., 24906., 26106., 25230., 26448., 25554., 26790.,
      25878., 27132., 26202., 27474., 26526., 27816., 26850., 28158., 27174.,
      28500.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3680., 4136.,  4592.,  5048.,  4100., 4616., 5132., 5648., 3880.,  4448.,
      5016., 5584.,  4384.,  5024.,  5664., 6304., 4264., 4936., 5608.,  6280.,
      4852., 5608.,  6364.,  7120.,  3992., 4576., 5160., 5744., 4496.,  5152.,
      5808., 6464.,  4016.,  4520.,  5024., 5528., 4436., 5000., 5564.,  6128.,
      3819., 4386.,  4953.,  5520.,  4346., 4988., 5630., 6272., 5656.,  6356.,
      7056., 7756.,  6278.,  7068.,  7858., 8648., 5623., 6454., 7285.,  8116.,
      6360., 7296.,  8232.,  9168.,  4580., 5300., 6020., 6740., 5210.,  6020.,
      6830., 7640.,  4271.,  4882.,  5493., 6104., 4806., 5492., 6178.,  6864.,
      4332., 5028.,  5724.,  6420.,  4962., 5748., 6534., 7320., 5596.,  6440.,
      7284., 8128.,  6344.,  7296.,  8248., 9200., 8136., 9132., 10128., 11124.,
      9010., 10132., 11254., 12376., 5700., 6552., 7404., 8256., 6448.,  7408.,
      8368., 9328.,  4580.,  5300.,  6020., 6740., 5210., 6020., 6830.,  7640.,
      3937., 4514.,  5091.,  5668.,  4460., 5112., 5764., 6416., 4332.,  5028.,
      5724., 6420.,  4962.,  5748.,  6534., 7320., 5481., 6310., 7139.,  7968.,
      6206., 7140.,  8074.,  9008.,  5656., 6356., 7056., 7756., 6278.,  7068.,
      7858., 8648.,  3957.,  4546.,  5135., 5724., 4472., 5136., 5800.,  6464.,
      3904., 4360.,  4816.,  5272.,  4324., 4840., 5356., 5872., 3736.,  4288.,
      4840., 5392.,  4240.,  4864.,  5488., 6112., 4088., 4744., 5400.,  6056.,
      4676., 5416.,  6156.,  6896.,  3704., 4256., 4808., 5360., 4208.,  4832.,
      5456., 6080.,  3680.,  4136.,  4592., 5048., 4100., 4616., 5132.,  5648.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18088., 18628., 19168., 19708., 18590., 19148., 19706., 20264., 19092.,
      19668., 20244., 20820., 19594., 20188., 20782., 21376., 20096., 20708.,
      21320., 21932., 20598., 21228., 21858., 22488., 20780., 21364., 21948.,
      22532., 21282., 21884., 22486., 23088., 21720., 22276., 22832., 23388.,
      22222., 22796., 23370., 23944., 20828., 21428., 22028., 22628., 21330.,
      21948., 22566., 23184., 21832., 22468., 23104., 23740., 22334., 22988.,
      23642., 24296., 22836., 23508., 24180., 24852., 23338., 24028., 24718.,
      25408., 20192., 20836., 21480., 22124., 20694., 21356., 22018., 22680.,
      17804., 18420., 19036., 19652., 18306., 18940., 19574., 20208., 12176.,
      12708., 13240., 13772., 12678., 13228., 13778., 14328., 10812., 11316.,
      11820., 12324., 11314., 11836., 12358., 12880., 11816., 12356., 12896.,
      13436., 12318., 12876., 13434., 13992., 12820., 13396., 13972., 14548.,
      13322., 13916., 14510., 15104., 13824., 14436., 15048., 15660., 14326.,
      14956., 15586., 16216., 12868., 13460., 14052., 14644., 13370., 13980.,
      14590., 15200., 12272., 12836., 13400., 13964., 12774., 13356., 13938.,
      14520., 11932., 12468., 13004., 13540., 12434., 12988., 13542., 14096.,
      11848., 12356., 12864., 13372., 12350., 12876., 13402., 13928., 12020.,
      12500., 12980., 13460., 12522., 13020., 13518., 14016., 15032., 15620.,
      16208., 16796., 15534., 16140., 16746., 17352., 16036., 16660., 17284.,
      17908., 16538., 17180., 17822., 18464., 16464., 17060., 17656., 18252.,
      16966., 17580., 18194., 18808., 17148., 17716., 18284., 18852., 17650.,
      18236., 18822., 19408., 18088., 18628., 19168., 19708., 18590., 19148.,
      19706., 20264.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3730.,  4228.,  4726., 5224., 4120., 4720., 5320., 5920., 4754., 5460.,
      6166.,  6872.,  4064., 4656., 5248., 5840., 3770., 4260., 4750., 5240.,
      4332.,  4968.,  5604., 6240., 5651., 6414., 7177., 7940., 6023., 6914.,
      7805.,  8696.,  5017., 5770., 6523., 7276., 4326., 4956., 5586., 6216.,
      5173.,  5938.,  6703., 7468., 6248., 7160., 8072., 8984., 7913., 8970.,
      10027., 11084., 6124., 7024., 7924., 8824., 4945., 5690., 6435., 7180.,
      4523.,  5162.,  5801., 6440., 5069., 5826., 6583., 7340., 6084., 6960.,
      7836.,  8712.,  5603., 6350., 7097., 7844., 4229., 4846., 5463., 6080.,
      3898.,  4420.,  4942., 5464., 4264., 4880., 5496., 6112., 4714., 5428.,
      6142.,  6856.,  4208., 4816., 5424., 6032., 3730., 4228., 4726., 5224.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20691., 20862., 21033., 21204., 21375., 21546., 21717., 21888., 22059.,
      22230., 22401., 22572., 22743., 22914., 23085., 23256., 23427., 23598.,
      23769., 23940., 25479., 25650., 25821., 25992., 26163., 26334., 26505.,
      26676., 26847., 27018., 27189., 27360., 27531., 27702., 27873., 28044.,
      28215., 28386., 28557., 28728., 24379., 24550., 24721., 24892., 22503.,
      22674., 22845., 23016., 23187., 23358., 23529., 23700., 23871., 24042.,
      24213., 24384., 24555., 24726., 24897., 25068., 22255., 22426., 22597.,
      22768., 21147., 21318., 21489., 21660., 21831., 22002., 22173., 22344.,
      22515., 22686., 22857., 23028., 23199., 23370., 23541., 23712., 25251.,
      25422., 25593., 25764., 25935., 26106., 26277., 26448., 26619., 26790.,
      26961., 27132., 27303., 27474., 27645., 27816., 27987., 28158., 28329.,
      28500.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3680.,  4100.,  4136.,  4616.,  4592., 5132., 5048., 5648., 3704., 4208.,
      4256.,  4832.,  4808.,  5456.,  5360., 6080., 4088., 4676., 4744., 5416.,
      5400.,  6156.,  6056.,  6896.,  3736., 4240., 4288., 4864., 4840., 5488.,
      5392.,  6112.,  3904.,  4324.,  4360., 4840., 4816., 5356., 5272., 5872.,
      3957.,  4472.,  4546.,  5136.,  5135., 5800., 5724., 6464., 5656., 6278.,
      6356.,  7068.,  7056.,  7858.,  7756., 8648., 5481., 6206., 6310., 7140.,
      7139.,  8074.,  7968.,  9008.,  4332., 4962., 5028., 5748., 5724., 6534.,
      6420.,  7320.,  3937.,  4460.,  4514., 5112., 5091., 5764., 5668., 6416.,
      4580.,  5210.,  5300.,  6020.,  6020., 6830., 6740., 7640., 5700., 6448.,
      6552.,  7408.,  7404.,  8368.,  8256., 9328., 8136., 9010., 9132., 10132.,
      10128., 11254., 11124., 12376., 5596., 6344., 6440., 7296., 7284., 8248.,
      8128.,  9200.,  4332.,  4962.,  5028., 5748., 5724., 6534., 6420., 7320.,
      4271.,  4806.,  4882.,  5492.,  5493., 6178., 6104., 6864., 4580., 5210.,
      5300.,  6020.,  6020.,  6830.,  6740., 7640., 5623., 6360., 6454., 7296.,
      7285.,  8232.,  8116.,  9168.,  5656., 6278., 6356., 7068., 7056., 7858.,
      7756.,  8648.,  3819.,  4346.,  4386., 4988., 4953., 5630., 5520., 6272.,
      4016.,  4436.,  4520.,  5000.,  5024., 5564., 5528., 6128., 3992., 4496.,
      4576.,  5152.,  5160.,  5808.,  5744., 6464., 4264., 4852., 4936., 5608.,
      5608.,  6364.,  6280.,  7120.,  3880., 4384., 4448., 5024., 5016., 5664.,
      5584.,  6304.,  3680.,  4100.,  4136., 4616., 4592., 5132., 5048., 5648.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25728., 26790., 26052., 27132., 26376., 27474., 26700., 27816., 27024.,
      28158., 27348., 28500., 27672., 28842., 27996., 29184., 28320., 29526.,
      28644., 29868., 28968., 30210., 29292., 30552., 25136., 26286., 25460.,
      26628., 25784., 26970., 26108., 27312., 22208., 23302., 22532., 23644.,
      22856., 23986., 23180., 24328., 22128., 23310., 22452., 23652., 22776.,
      23994., 23100., 24336., 23424., 24678., 23748., 25020., 24072., 25362.,
      24396., 25704., 24720., 26046., 25044., 26388., 25368., 26730., 25692.,
      27072., 22304., 23574., 22628., 23916., 22952., 24258., 23276., 24600.,
      20144., 21358., 20468., 21700., 20792., 22042., 21116., 22384., 15200.,
      16246., 15524., 16588., 15848., 16930., 16172., 17272., 14064., 15054.,
      14388., 15396., 14712., 15738., 15036., 16080., 15360., 16422., 15684.,
      16764., 16008., 17106., 16332., 17448., 16656., 17790., 16980., 18132.,
      17304., 18474., 17628., 18816., 17952., 19158., 18276., 19500., 18600.,
      19842., 18924., 20184., 17744., 18910., 18068., 19252., 18392., 19594.,
      18716., 19936., 17376., 18486., 17700., 18828., 18024., 19170., 18348.,
      19512., 17264., 18318., 17588., 18660., 17912., 19002., 18236., 19344.,
      17408., 18406., 17732., 18748., 18056., 19090., 18380., 19432., 17808.,
      18750., 18132., 19092., 18456., 19434., 18780., 19776., 21696., 22854.,
      22020., 23196., 22344., 23538., 22668., 23880., 22992., 24222., 23316.,
      24564., 23640., 24906., 23964., 25248., 23648., 24822., 23972., 25164.,
      24296., 25506., 24620., 25848., 24560., 25678., 24884., 26020., 25208.,
      26362., 25532., 26704., 25728., 26790., 26052., 27132., 26376., 27474.,
      26700., 27816.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4140.,  4560.,  4980.,  5400.,  4560.,  5040.,  5520.,  6000.,  4980.,
      5520.,  6060.,  6600.,  5400.,  6000.,  6600.,  7200.,  3240.,  3744.,
      4248.,  4752.,  3744.,  4320.,  4896.,  5472.,  4248.,  4896.,  5544.,
      6192.,  4752.,  5472.,  6192.,  6912.,  3108.,  3696.,  4284.,  4872.,
      3696.,  4368.,  5040.,  5712.,  4284.,  5040.,  5796.,  6552.,  4872.,
      5712.,  6552.,  7392.,  3240.,  3744.,  4248.,  4752.,  3744.,  4320.,
      4896.,  5472.,  4248.,  4896.,  5544.,  6192.,  4752.,  5472.,  6192.,
      6912.,  4140.,  4560.,  4980.,  5400.,  4560.,  5040.,  5520.,  6000.,
      4980.,  5520.,  6060.,  6600.,  5400.,  6000.,  6600.,  7200.,  3367.,
      3882.,  4397.,  4912.,  3894.,  4484.,  5074.,  5664.,  4421.,  5086.,
      5751.,  6416.,  4948.,  5688.,  6428.,  7168.,  6098.,  6720.,  7342.,
      7964.,  6720.,  7432.,  8144.,  8856.,  7342.,  8144.,  8946.,  9748.,
      7964.,  8856.,  9748.,  10640., 4621.,  5346.,  6071.,  6796.,  5358.,
      6188.,  7018.,  7848.,  6095.,  7030.,  7965.,  8900.,  6832.,  7872.,
      8912.,  9952.,  3330.,  3960.,  4590.,  5220.,  3960.,  4680.,  5400.,
      6120.,  4590.,  5400.,  6210.,  7020.,  5220.,  6120.,  7020.,  7920.,
      3479.,  4002.,  4525.,  5048.,  4014.,  4612.,  5210.,  5808.,  4549.,
      5222.,  5895.,  6568.,  5084.,  5832.,  6580.,  7328.,  3330.,  3960.,
      4590.,  5220.,  3960.,  4680.,  5400.,  6120.,  4590.,  5400.,  6210.,
      7020.,  5220.,  6120.,  7020.,  7920.,  4748.,  5496.,  6244.,  6992.,
      5496.,  6352.,  7208.,  8064.,  6244.,  7208.,  8172.,  9136.,  6992.,
      8064.,  9136.,  10208., 8582.,  9456.,  10330., 11204., 9456.,  10456.,
      11456., 12456., 10330., 11456., 12582., 13708., 11204., 12456., 13708.,
      14960., 4748.,  5496.,  6244.,  6992.,  5496.,  6352.,  7208.,  8064.,
      6244.,  7208.,  8172.,  9136.,  6992.,  8064.,  9136.,  10208., 3330.,
      3960.,  4590.,  5220.,  3960.,  4680.,  5400.,  6120.,  4590.,  5400.,
      6210.,  7020.,  5220.,  6120.,  7020.,  7920.,  3479.,  4014.,  4549.,
      5084.,  4002.,  4612.,  5222.,  5832.,  4525.,  5210.,  5895.,  6580.,
      5048.,  5808.,  6568.,  7328.,  3330.,  3960.,  4590.,  5220.,  3960.,
      4680.,  5400.,  6120.,  4590.,  5400.,  6210.,  7020.,  5220.,  6120.,
      7020.,  7920.,  4621.,  5358.,  6095.,  6832.,  5346.,  6188.,  7030.,
      7872.,  6071.,  7018.,  7965.,  8912.,  6796.,  7848.,  8900.,  9952.,
      6098.,  6720.,  7342.,  7964.,  6720.,  7432.,  8144.,  8856.,  7342.,
      8144.,  8946.,  9748.,  7964.,  8856.,  9748.,  10640., 3367.,  3894.,
      4421.,  4948.,  3882.,  4484.,  5086.,  5688.,  4397.,  5074.,  5751.,
      6428.,  4912.,  5664.,  6416.,  7168.,  4140.,  4560.,  4980.,  5400.,
      4560.,  5040.,  5520.,  6000.,  4980.,  5520.,  6060.,  6600.,  5400.,
      6000.,  6600.,  7200.,  3240.,  3744.,  4248.,  4752.,  3744.,  4320.,
      4896.,  5472.,  4248.,  4896.,  5544.,  6192.,  4752.,  5472.,  6192.,
      6912.,  3108.,  3696.,  4284.,  4872.,  3696.,  4368.,  5040.,  5712.,
      4284.,  5040.,  5796.,  6552.,  4872.,  5712.,  6552.,  7392.,  3240.,
      3744.,  4248.,  4752.,  3744.,  4320.,  4896.,  5472.,  4248.,  4896.,
      5544.,  6192.,  4752.,  5472.,  6192.,  6912.,  4140.,  4560.,  4980.,
      5400.,  4560.,  5040.,  5520.,  6000.,  4980.,  5520.,  6060.,  6600.,
      5400.,  6000.,  6600.,  7200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13338., 13824., 14310., 14796., 13840., 14344., 14848., 15352., 14342.,
      14864., 15386., 15908., 14844., 15384., 15924., 16464., 15346., 15904.,
      16462., 17020., 15848., 16424., 17000., 17576., 16350., 16944., 17538.,
      18132., 16852., 17464., 18076., 18688., 17354., 17984., 18614., 19244.,
      17856., 18504., 19152., 19800., 18358., 19024., 19690., 20356., 18860.,
      19544., 20228., 20912., 19042., 19680., 20318., 20956., 19544., 20200.,
      20856., 21512., 20046., 20720., 21394., 22068., 20548., 21240., 21932.,
      22624., 18874., 19456., 20038., 20620., 19376., 19976., 20576., 21176.,
      19878., 20496., 21114., 21732., 20380., 21016., 21652., 22288., 16194.,
      16736., 17278., 17820., 16696., 17256., 17816., 18376., 17198., 17776.,
      18354., 18932., 17700., 18296., 18892., 19488., 17114., 17664., 18214.,
      18764., 17616., 18184., 18752., 19320., 18118., 18704., 19290., 19876.,
      18620., 19224., 19828., 20432., 18290., 18848., 19406., 19964., 18792.,
      19368., 19944., 20520., 19294., 19888., 20482., 21076., 19796., 20408.,
      21020., 21632., 16650., 17216., 17782., 18348., 17152., 17736., 18320.,
      18904., 17654., 18256., 18858., 19460., 18156., 18776., 19396., 20016.,
      15266., 15840., 16414., 16988., 15768., 16360., 16952., 17544., 16270.,
      16880., 17490., 18100., 16772., 17400., 18028., 18656., 12074., 12608.,
      13142., 13676., 12576., 13128., 13680., 14232., 13078., 13648., 14218.,
      14788., 13580., 14168., 14756., 15344., 11394., 11872., 12350., 12828.,
      11896., 12392., 12888., 13384., 12398., 12912., 13426., 13940., 12900.,
      13432., 13964., 14496., 13338., 13824., 14310., 14796., 13840., 14344.,
      14848., 15352., 14342., 14864., 15386., 15908., 14844., 15384., 15924.,
      16464., 15346., 15904., 16462., 17020., 15848., 16424., 17000., 17576.,
      16350., 16944., 17538., 18132., 16852., 17464., 18076., 18688., 17354.,
      17984., 18614., 19244., 17856., 18504., 19152., 19800., 18358., 19024.,
      19690., 20356., 18860., 19544., 20228., 20912., 15122., 15648., 16174.,
      16700., 15624., 16168., 16712., 17256., 16126., 16688., 17250., 17812.,
      16628., 17208., 17788., 18368., 15530., 16064., 16598., 17132., 16032.,
      16584., 17136., 17688., 16534., 17104., 17674., 18244., 17036., 17624.,
      18212., 18800., 16194., 16736., 17278., 17820., 16696., 17256., 17816.,
      18376., 17198., 17776., 18354., 18932., 17700., 18296., 18892., 19488.,
      17114., 17664., 18214., 18764., 17616., 18184., 18752., 19320., 18118.,
      18704., 19290., 19876., 18620., 19224., 19828., 20432., 18290., 18848.,
      19406., 19964., 18792., 19368., 19944., 20520., 19294., 19888., 20482.,
      21076., 19796., 20408., 21020., 21632., 14138., 14720., 15302., 15884.,
      14640., 15240., 15840., 16440., 15142., 15760., 16378., 16996., 15644.,
      16280., 16916., 17552., 13266., 13856., 14446., 15036., 13768., 14376.,
      14984., 15592., 14270., 14896., 15522., 16148., 14772., 15416., 16060.,
      16704., 12074., 12608., 13142., 13676., 12576., 13128., 13680., 14232.,
      13078., 13648., 14218., 14788., 13580., 14168., 14756., 15344., 11394.,
      11872., 12350., 12828., 11896., 12392., 12888., 13384., 12398., 12912.,
      13426., 13940., 12900., 13432., 13964., 14496., 13338., 13824., 14310.,
      14796., 13840., 14344., 14848., 15352., 14342., 14864., 15386., 15908.,
      14844., 15384., 15924., 16464.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6492., 7728., 8976.,  7728.,  6492.,  5091., 6216., 7380., 6384.,
      5379., 9738., 11592., 13464., 11592., 9738., 5379., 6384., 7380.,
      6216., 5091., 6492.,  7728.,  8976.,  7728., 6492.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22716., 23016., 23316., 23616., 23916., 25116., 25416., 25716., 26016.,
      26316., 27516., 27816., 28116., 28416., 28716., 18396., 18696., 18996.,
      19296., 19596., 11324., 11624., 11924., 12224., 12524.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5820.,  6360., 6720., 7392., 7536.,  8352.,  5964.,  6720.,  4524.,
      5208.,  6555., 7158., 7644., 8400.,  8652.,  9576.,  6867.,  7728.,
      5223.,  6006., 8730., 9540., 10080., 11088., 11304., 12528., 8946.,
      10080., 6786., 7812., 7995., 8742.,  9156.,  10080., 10188., 11304.,
      8043.,  9072., 6087., 7014., 5820.,  6360.,  6720.,  7392.,  7536.,
      8352.,  5964., 6720., 4524., 5208.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23644., 24440., 24220., 25040., 24796., 25640., 25372., 26240., 25948.,
      26840., 21084., 21816., 21660., 22416., 22236., 23016., 22812., 23616.,
      23388., 24216., 20572., 21240., 21148., 21840., 21724., 22440., 22300.,
      23040., 22876., 23640., 13916., 14520., 14492., 15120., 15068., 15720.,
      15644., 16320., 16220., 16920., 9308.,  9848.,  9884.,  10448., 10460.,
      11048., 11036., 11648., 11612., 12248.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4572., 5112.,  5652.,  6192., 5472.,  6144.,  6816.,  7488.,  6192.,
      7008., 7824.,  8640.,  4836., 5592.,  6348.,  7104.,  3948.,  4632.,
      5316., 6000.,  5115.,  5718., 6321.,  6924.,  6180.,  6936.,  7692.,
      8448., 7068.,  7992.,  8916., 9840.,  5529.,  6390.,  7251.,  8112.,
      4527., 5310.,  6093.,  6876., 6858.,  7668.,  8478.,  9288.,  8208.,
      9216., 10224., 11232., 9288., 10512., 11736., 12960., 7254.,  8388.,
      9522., 10656., 5922.,  6948., 7974.,  9000.,  6315.,  7062.,  7809.,
      8556., 7500.,  8424.,  9348., 10272., 8412.,  9528.,  10644., 11760.,
      6561., 7590.,  8619.,  9648., 5343.,  6270.,  7197.,  8124.,  4572.,
      5112., 5652.,  6192.,  5472., 6144.,  6816.,  7488.,  6192.,  7008.,
      7824., 8640.,  4836.,  5592., 6348.,  7104.,  3948.,  4632.,  5316.,
      6000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26780., 27576., 28372., 29168., 27396., 28216., 29036., 29856., 28012.,
      28856., 29700., 30544., 28628., 29496., 30364., 31232., 29244., 30136.,
      31028., 31920., 17628., 18360., 19092., 19824., 18244., 19000., 19756.,
      20512., 18860., 19640., 20420., 21200., 19476., 20280., 21084., 21888.,
      20092., 20920., 21748., 22576., 12572., 13240., 13908., 14576., 13188.,
      13880., 14572., 15264., 13804., 14520., 15236., 15952., 14420., 15160.,
      15900., 16640., 15036., 15800., 16564., 17328., 11612., 12216., 12820.,
      13424., 12228., 12856., 13484., 14112., 12844., 13496., 14148., 14800.,
      13460., 14136., 14812., 15488., 14076., 14776., 15476., 16176., 14748.,
      15288., 15828., 16368., 15364., 15928., 16492., 17056., 15980., 16568.,
      17156., 17744., 16596., 17208., 17820., 18432., 17212., 17848., 18484.,
      19120.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4524.,  5208., 5964., 6720., 7536., 8352.,  6720.,  7392.,  5820.,
      6360.,  6087., 7014., 8043., 9072., 10188., 11304., 9156.,  10080.,
      7995.,  8742., 6786., 7812., 8946., 10080., 11304., 12528., 10080.,
      11088., 8730., 9540., 5223., 6006., 6867.,  7728.,  8652.,  9576.,
      7644.,  8400., 6555., 7158., 4524., 5208.,  5964.,  6720.,  7536.,
      8352.,  6720., 7392., 5820., 6360.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24140., 24440., 24740., 25040., 25340., 25640., 25940., 26240., 26540.,
      26840., 21516., 21816., 22116., 22416., 22716., 23016., 23316., 23616.,
      23916., 24216., 20940., 21240., 21540., 21840., 22140., 22440., 22740.,
      23040., 23340., 23640., 14220., 14520., 14820., 15120., 15420., 15720.,
      16020., 16320., 16620., 16920., 9548.,  9848.,  10148., 10448., 10748.,
      11048., 11348., 11648., 11948., 12248.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5160.,  5592.,  5880.,  6384.,  6636.,  7224.,  7392.,  8064.,  8160.,
      8928.,  8928.,  9792.,  6636.,  7392.,  7224.,  8064.,  5160.,  5880.,
      5592.,  6384.,  6450.,  6990.,  7350.,  7980.,  8295.,  9030.,  9240.,
      10080., 10200., 11160., 11160., 12240., 8295.,  9240.,  9030.,  10080.,
      6450.,  7350.,  6990.,  7980.,  7740.,  8388.,  8820.,  9576.,  9954.,
      10836., 11088., 12096., 12240., 13392., 13392., 14688., 9954.,  11088.,
      10836., 12096., 7740.,  8820.,  8388.,  9576.,  6450.,  6990.,  7350.,
      7980.,  8295.,  9030.,  9240.,  10080., 10200., 11160., 11160., 12240.,
      8295.,  9240.,  9030.,  10080., 6450.,  7350.,  6990.,  7980.,  5160.,
      5592.,  5880.,  6384.,  6636.,  7224.,  7392.,  8064.,  8160.,  8928.,
      8928.,  9792.,  6636.,  7392.,  7224.,  8064.,  5160.,  5880.,  5592.,
      6384.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13944., 14488., 14520., 15088., 15096., 15688., 15672., 16288., 16248.,
      16888., 16824., 17488., 17400., 18088., 17976., 18688., 18552., 19288.,
      19128., 19888., 15992., 16664., 16568., 17264., 17144., 17864., 17720.,
      18464., 18296., 19064., 18872., 19664., 19448., 20264., 20024., 20864.,
      20600., 21464., 21176., 22064., 20088., 20888., 20664., 21488., 21240.,
      22088., 21816., 22688., 22392., 23288., 22968., 23888., 23544., 24488.,
      24120., 25088., 24696., 25688., 25272., 26288., 14968., 15640., 15544.,
      16240., 16120., 16840., 16696., 17440., 17272., 18040., 17848., 18640.,
      18424., 19240., 19000., 19840., 19576., 20440., 20152., 21040., 13944.,
      14488., 14520., 15088., 15096., 15688., 15672., 16288., 16248., 16888.,
      16824., 17488., 17400., 18088., 17976., 18688., 18552., 19288., 19128.,
      19888.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3744.,  4176.,  4608.,  5040.,  4344.,  4848.,  5352., 5856.,  5004.,
      5592.,  6180.,  6768.,  5664.,  6336.,  7008.,  7680., 6336.,  7104.,
      7872.,  8640.,  7008.,  7872.,  8736.,  9600.,  5028., 5784.,  6540.,
      7296.,  5544.,  6384.,  7224.,  8064.,  4224.,  4944., 5664.,  6384.,
      4632.,  5424.,  6216.,  7008.,  4680.,  5220.,  5760., 6300.,  5430.,
      6060.,  6690.,  7320.,  6255.,  6990.,  7725.,  8460., 7080.,  7920.,
      8760.,  9600.,  7920.,  8880.,  9840.,  10800., 8760., 9840.,  10920.,
      12000., 6285.,  7230.,  8175.,  9120.,  6930.,  7980., 9030.,  10080.,
      5280.,  6180.,  7080.,  7980.,  5790.,  6780.,  7770., 8760.,  5616.,
      6264.,  6912.,  7560.,  6516.,  7272.,  8028.,  8784., 7506.,  8388.,
      9270.,  10152., 8496.,  9504.,  10512., 11520., 9504., 10656., 11808.,
      12960., 10512., 11808., 13104., 14400., 7542.,  8676., 9810.,  10944.,
      8316.,  9576.,  10836., 12096., 6336.,  7416.,  8496., 9576.,  6948.,
      8136.,  9324.,  10512., 4680.,  5220.,  5760.,  6300., 5430.,  6060.,
      6690.,  7320.,  6255.,  6990.,  7725.,  8460.,  7080., 7920.,  8760.,
      9600.,  7920.,  8880.,  9840.,  10800., 8760.,  9840., 10920., 12000.,
      6285.,  7230.,  8175.,  9120.,  6930.,  7980.,  9030., 10080., 5280.,
      6180.,  7080.,  7980.,  5790.,  6780.,  7770.,  8760., 3744.,  4176.,
      4608.,  5040.,  4344.,  4848.,  5352.,  5856.,  5004., 5592.,  6180.,
      6768.,  5664.,  6336.,  7008.,  7680.,  6336.,  7104., 7872.,  8640.,
      7008.,  7872.,  8736.,  9600.,  5028.,  5784.,  6540., 7296.,  5544.,
      6384.,  7224.,  8064.,  4224.,  4944.,  5664.,  6384., 4632.,  5424.,
      6216.,  7008.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21200., 21744., 22288., 22832., 21816., 22384., 22952., 23520., 22432.,
      23024., 23616., 24208., 23048., 23664., 24280., 24896., 23664., 24304.,
      24944., 25584., 24280., 24944., 25608., 26272., 24896., 25584., 26272.,
      26960., 25512., 26224., 26936., 27648., 26128., 26864., 27600., 28336.,
      26744., 27504., 28264., 29024., 16976., 17648., 18320., 18992., 17592.,
      18288., 18984., 19680., 18208., 18928., 19648., 20368., 18824., 19568.,
      20312., 21056., 19440., 20208., 20976., 21744., 20056., 20848., 21640.,
      22432., 20672., 21488., 22304., 23120., 21288., 22128., 22968., 23808.,
      21904., 22768., 23632., 24496., 22520., 23408., 24296., 25184., 16848.,
      17648., 18448., 19248., 17464., 18288., 19112., 19936., 18080., 18928.,
      19776., 20624., 18696., 19568., 20440., 21312., 19312., 20208., 21104.,
      22000., 19928., 20848., 21768., 22688., 20544., 21488., 22432., 23376.,
      21160., 22128., 23096., 24064., 21776., 22768., 23760., 24752., 22392.,
      23408., 24424., 25440., 14928., 15600., 16272., 16944., 15544., 16240.,
      16936., 17632., 16160., 16880., 17600., 18320., 16776., 17520., 18264.,
      19008., 17392., 18160., 18928., 19696., 18008., 18800., 19592., 20384.,
      18624., 19440., 20256., 21072., 19240., 20080., 20920., 21760., 19856.,
      20720., 21584., 22448., 20472., 21360., 22248., 23136., 21200., 21744.,
      22288., 22832., 21816., 22384., 22952., 23520., 22432., 23024., 23616.,
      24208., 23048., 23664., 24280., 24896., 23664., 24304., 24944., 25584.,
      24280., 24944., 25608., 26272., 24896., 25584., 26272., 26960., 25512.,
      26224., 26936., 27648., 26128., 26864., 27600., 28336., 26744., 27504.,
      28264., 29024.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3948.,  4632.,  5316.,  6000.,  4836.,  5592.,  6348.,  7104., 6192.,
      7008.,  7824.,  8640.,  5472.,  6144.,  6816.,  7488.,  4572., 5112.,
      5652.,  6192.,  5343.,  6270.,  7197.,  8124.,  6561.,  7590., 8619.,
      9648.,  8412.,  9528.,  10644., 11760., 7500.,  8424.,  9348., 10272.,
      6315.,  7062.,  7809.,  8556.,  5922.,  6948.,  7974.,  9000., 7254.,
      8388.,  9522.,  10656., 9288.,  10512., 11736., 12960., 8208., 9216.,
      10224., 11232., 6858.,  7668.,  8478.,  9288.,  4527.,  5310., 6093.,
      6876.,  5529.,  6390.,  7251.,  8112.,  7068.,  7992.,  8916., 9840.,
      6180.,  6936.,  7692.,  8448.,  5115.,  5718.,  6321.,  6924., 3948.,
      4632.,  5316.,  6000.,  4836.,  5592.,  6348.,  7104.,  6192., 7008.,
      7824.,  8640.,  5472.,  6144.,  6816.,  7488.,  4572.,  5112., 5652.,
      6192.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14188., 14488., 14788., 15088., 15388., 15688., 15988., 16288., 16588.,
      16888., 17188., 17488., 17788., 18088., 18388., 18688., 18988., 19288.,
      19588., 19888., 16364., 16664., 16964., 17264., 17564., 17864., 18164.,
      18464., 18764., 19064., 19364., 19664., 19964., 20264., 20564., 20864.,
      21164., 21464., 21764., 22064., 20588., 20888., 21188., 21488., 21788.,
      22088., 22388., 22688., 22988., 23288., 23588., 23888., 24188., 24488.,
      24788., 25088., 25388., 25688., 25988., 26288., 15340., 15640., 15940.,
      16240., 16540., 16840., 17140., 17440., 17740., 18040., 18340., 18640.,
      18940., 19240., 19540., 19840., 20140., 20440., 20740., 21040., 14188.,
      14488., 14788., 15088., 15388., 15688., 15988., 16288., 16588., 16888.,
      17188., 17488., 17788., 18088., 18388., 18688., 18988., 19288., 19588.,
      19888.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4224.,  4632.,  4944.,  5424.,  5664.,  6216.,  6384.,  7008.,  5028.,
      5544.,  5784.,  6384.,  6540.,  7224.,  7296.,  8064.,  6336.,  7008.,
      7104.,  7872.,  7872.,  8736.,  8640.,  9600.,  5004.,  5664.,  5592.,
      6336.,  6180.,  7008.,  6768.,  7680.,  3744.,  4344.,  4176.,  4848.,
      4608.,  5352.,  5040.,  5856.,  5280.,  5790.,  6180.,  6780.,  7080.,
      7770.,  7980.,  8760.,  6285.,  6930.,  7230.,  7980.,  8175.,  9030.,
      9120.,  10080., 7920.,  8760.,  8880.,  9840.,  9840.,  10920., 10800.,
      12000., 6255.,  7080.,  6990.,  7920.,  7725.,  8760.,  8460.,  9600.,
      4680.,  5430.,  5220.,  6060.,  5760.,  6690.,  6300.,  7320.,  6336.,
      6948.,  7416.,  8136.,  8496.,  9324.,  9576.,  10512., 7542.,  8316.,
      8676.,  9576.,  9810.,  10836., 10944., 12096., 9504.,  10512., 10656.,
      11808., 11808., 13104., 12960., 14400., 7506.,  8496.,  8388.,  9504.,
      9270.,  10512., 10152., 11520., 5616.,  6516.,  6264.,  7272.,  6912.,
      8028.,  7560.,  8784.,  5280.,  5790.,  6180.,  6780.,  7080.,  7770.,
      7980.,  8760.,  6285.,  6930.,  7230.,  7980.,  8175.,  9030.,  9120.,
      10080., 7920.,  8760.,  8880.,  9840.,  9840.,  10920., 10800., 12000.,
      6255.,  7080.,  6990.,  7920.,  7725.,  8760.,  8460.,  9600.,  4680.,
      5430.,  5220.,  6060.,  5760.,  6690.,  6300.,  7320.,  4224.,  4632.,
      4944.,  5424.,  5664.,  6216.,  6384.,  7008.,  5028.,  5544.,  5784.,
      6384.,  6540.,  7224.,  7296.,  8064.,  6336.,  7008.,  7104.,  7872.,
      7872.,  8736.,  8640.,  9600.,  5004.,  5664.,  5592.,  6336.,  6180.,
      7008.,  6768.,  7680.,  3744.,  4344.,  4176.,  4848.,  4608.,  5352.,
      5040.,  5856.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15024., 15576., 15600., 16176., 16176., 16776., 16752., 17376., 17328.,
      17976., 17904., 18576., 18480., 19176., 19056., 19776., 19632., 20376.,
      20208., 20976., 20784., 21576., 21360., 22176., 21936., 22776., 22512.,
      23376., 23088., 23976., 23664., 24576., 24240., 25176., 24816., 25776.,
      25392., 26376., 25968., 26976., 11952., 12504., 12528., 13104., 13104.,
      13704., 13680., 14304., 14256., 14904., 14832., 15504., 15408., 16104.,
      15984., 16704., 16560., 17304., 17136., 17904., 17712., 18504., 18288.,
      19104., 18864., 19704., 19440., 20304., 20016., 20904., 20592., 21504.,
      21168., 22104., 21744., 22704., 22320., 23304., 22896., 23904., 15024.,
      15576., 15600., 16176., 16176., 16776., 16752., 17376., 17328., 17976.,
      17904., 18576., 18480., 19176., 19056., 19776., 19632., 20376., 20208.,
      20976., 20784., 21576., 21360., 22176., 21936., 22776., 22512., 23376.,
      23088., 23976., 23664., 24576., 24240., 25176., 24816., 25776., 25392.,
      26376., 25968., 26976., 11952., 12504., 12528., 13104., 13104., 13704.,
      13680., 14304., 14256., 14904., 14832., 15504., 15408., 16104., 15984.,
      16704., 16560., 17304., 17136., 17904., 17712., 18504., 18288., 19104.,
      18864., 19704., 19440., 20304., 20016., 20904., 20592., 21504., 21168.,
      22104., 21744., 22704., 22320., 23304., 22896., 23904., 15024., 15576.,
      15600., 16176., 16176., 16776., 16752., 17376., 17328., 17976., 17904.,
      18576., 18480., 19176., 19056., 19776., 19632., 20376., 20208., 20976.,
      20784., 21576., 21360., 22176., 21936., 22776., 22512., 23376., 23088.,
      23976., 23664., 24576., 24240., 25176., 24816., 25776., 25392., 26376.,
      25968., 26976.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2664.,  3072.,  3480.,  3888.,  3264.,  3744.,  4224.,  4704.,  3864.,
      4416.,  4968.,  5520.,  4464.,  5088.,  5712.,  6336.,  4164.,  4680.,
      5196.,  5712.,  4824.,  5424.,  6024.,  6624.,  5484.,  6168.,  6852.,
      7536.,  6144.,  6912.,  7680.,  8448.,  6624.,  7296.,  7968.,  8640.,
      7296.,  8064.,  8832.,  9600.,  7968.,  8832.,  9696.,  10560., 8640.,
      9600.,  10560., 11520., 4164.,  4824.,  5484.,  6144.,  4680.,  5424.,
      6168.,  6912.,  5196.,  6024.,  6852.,  7680.,  5712.,  6624.,  7536.,
      8448.,  2664.,  3264.,  3864.,  4464.,  3072.,  3744.,  4416.,  5088.,
      3480.,  4224.,  4968.,  5712.,  3888.,  4704.,  5520.,  6336.,  3330.,
      3840.,  4350.,  4860.,  4080.,  4680.,  5280.,  5880.,  4830.,  5520.,
      6210.,  6900.,  5580.,  6360.,  7140.,  7920.,  5205.,  5850.,  6495.,
      7140.,  6030.,  6780.,  7530.,  8280.,  6855.,  7710.,  8565.,  9420.,
      7680.,  8640.,  9600.,  10560., 8280.,  9120.,  9960.,  10800., 9120.,
      10080., 11040., 12000., 9960.,  11040., 12120., 13200., 10800., 12000.,
      13200., 14400., 5205.,  6030.,  6855.,  7680.,  5850.,  6780.,  7710.,
      8640.,  6495.,  7530.,  8565.,  9600.,  7140.,  8280.,  9420.,  10560.,
      3330.,  4080.,  4830.,  5580.,  3840.,  4680.,  5520.,  6360.,  4350.,
      5280.,  6210.,  7140.,  4860.,  5880.,  6900.,  7920.,  3996.,  4608.,
      5220.,  5832.,  4896.,  5616.,  6336.,  7056.,  5796.,  6624.,  7452.,
      8280.,  6696.,  7632.,  8568.,  9504.,  6246.,  7020.,  7794.,  8568.,
      7236.,  8136.,  9036.,  9936.,  8226.,  9252.,  10278., 11304., 9216.,
      10368., 11520., 12672., 9936.,  10944., 11952., 12960., 10944., 12096.,
      13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400., 15840.,
      17280., 6246.,  7236.,  8226.,  9216.,  7020.,  8136.,  9252.,  10368.,
      7794.,  9036.,  10278., 11520., 8568.,  9936.,  11304., 12672., 3996.,
      4896.,  5796.,  6696.,  4608.,  5616.,  6624.,  7632.,  5220.,  6336.,
      7452.,  8568.,  5832.,  7056.,  8280.,  9504.,  3330.,  3840.,  4350.,
      4860.,  4080.,  4680.,  5280.,  5880.,  4830.,  5520.,  6210.,  6900.,
      5580.,  6360.,  7140.,  7920.,  5205.,  5850.,  6495.,  7140.,  6030.,
      6780.,  7530.,  8280.,  6855.,  7710.,  8565.,  9420.,  7680.,  8640.,
      9600.,  10560., 8280.,  9120.,  9960.,  10800., 9120.,  10080., 11040.,
      12000., 9960.,  11040., 12120., 13200., 10800., 12000., 13200., 14400.,
      5205.,  6030.,  6855.,  7680.,  5850.,  6780.,  7710.,  8640.,  6495.,
      7530.,  8565.,  9600.,  7140.,  8280.,  9420.,  10560., 3330.,  4080.,
      4830.,  5580.,  3840.,  4680.,  5520.,  6360.,  4350.,  5280.,  6210.,
      7140.,  4860.,  5880.,  6900.,  7920.,  2664.,  3072.,  3480.,  3888.,
      3264.,  3744.,  4224.,  4704.,  3864.,  4416.,  4968.,  5520.,  4464.,
      5088.,  5712.,  6336.,  4164.,  4680.,  5196.,  5712.,  4824.,  5424.,
      6024.,  6624.,  5484.,  6168.,  6852.,  7536.,  6144.,  6912.,  7680.,
      8448.,  6624.,  7296.,  7968.,  8640.,  7296.,  8064.,  8832.,  9600.,
      7968.,  8832.,  9696.,  10560., 8640.,  9600.,  10560., 11520., 4164.,
      4824.,  5484.,  6144.,  4680.,  5424.,  6168.,  6912.,  5196.,  6024.,
      6852.,  7680.,  5712.,  6624.,  7536.,  8448.,  2664.,  3264.,  3864.,
      4464.,  3072.,  3744.,  4416.,  5088.,  3480.,  4224.,  4968.,  5712.,
      3888.,  4704.,  5520.,  6336.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17720., 18272., 18824., 19376., 18336., 18912., 19488., 20064., 18952.,
      19552., 20152., 20752., 19568., 20192., 20816., 21440., 20184., 20832.,
      21480., 22128., 20800., 21472., 22144., 22816., 21416., 22112., 22808.,
      23504., 22032., 22752., 23472., 24192., 22648., 23392., 24136., 24880.,
      23264., 24032., 24800., 25568., 23880., 24672., 25464., 26256., 24496.,
      25312., 26128., 26944., 25112., 25952., 26792., 27632., 25728., 26592.,
      27456., 28320., 26344., 27232., 28120., 29008., 26960., 27872., 28784.,
      29696., 27576., 28512., 29448., 30384., 28192., 29152., 30112., 31072.,
      28808., 29792., 30776., 31760., 29424., 30432., 31440., 32448., 11576.,
      12128., 12680., 13232., 12192., 12768., 13344., 13920., 12808., 13408.,
      14008., 14608., 13424., 14048., 14672., 15296., 14040., 14688., 15336.,
      15984., 14656., 15328., 16000., 16672., 15272., 15968., 16664., 17360.,
      15888., 16608., 17328., 18048., 16504., 17248., 17992., 18736., 17120.,
      17888., 18656., 19424., 17736., 18528., 19320., 20112., 18352., 19168.,
      19984., 20800., 18968., 19808., 20648., 21488., 19584., 20448., 21312.,
      22176., 20200., 21088., 21976., 22864., 20816., 21728., 22640., 23552.,
      21432., 22368., 23304., 24240., 22048., 23008., 23968., 24928., 22664.,
      23648., 24632., 25616., 23280., 24288., 25296., 26304., 17720., 18272.,
      18824., 19376., 18336., 18912., 19488., 20064., 18952., 19552., 20152.,
      20752., 19568., 20192., 20816., 21440., 20184., 20832., 21480., 22128.,
      20800., 21472., 22144., 22816., 21416., 22112., 22808., 23504., 22032.,
      22752., 23472., 24192., 22648., 23392., 24136., 24880., 23264., 24032.,
      24800., 25568., 23880., 24672., 25464., 26256., 24496., 25312., 26128.,
      26944., 25112., 25952., 26792., 27632., 25728., 26592., 27456., 28320.,
      26344., 27232., 28120., 29008., 26960., 27872., 28784., 29696., 27576.,
      28512., 29448., 30384., 28192., 29152., 30112., 31072., 28808., 29792.,
      30776., 31760., 29424., 30432., 31440., 32448., 11576., 12128., 12680.,
      13232., 12192., 12768., 13344., 13920., 12808., 13408., 14008., 14608.,
      13424., 14048., 14672., 15296., 14040., 14688., 15336., 15984., 14656.,
      15328., 16000., 16672., 15272., 15968., 16664., 17360., 15888., 16608.,
      17328., 18048., 16504., 17248., 17992., 18736., 17120., 17888., 18656.,
      19424., 17736., 18528., 19320., 20112., 18352., 19168., 19984., 20800.,
      18968., 19808., 20648., 21488., 19584., 20448., 21312., 22176., 20200.,
      21088., 21976., 22864., 20816., 21728., 22640., 23552., 21432., 22368.,
      23304., 24240., 22048., 23008., 23968., 24928., 22664., 23648., 24632.,
      25616., 23280., 24288., 25296., 26304., 17720., 18272., 18824., 19376.,
      18336., 18912., 19488., 20064., 18952., 19552., 20152., 20752., 19568.,
      20192., 20816., 21440., 20184., 20832., 21480., 22128., 20800., 21472.,
      22144., 22816., 21416., 22112., 22808., 23504., 22032., 22752., 23472.,
      24192., 22648., 23392., 24136., 24880., 23264., 24032., 24800., 25568.,
      23880., 24672., 25464., 26256., 24496., 25312., 26128., 26944., 25112.,
      25952., 26792., 27632., 25728., 26592., 27456., 28320., 26344., 27232.,
      28120., 29008., 26960., 27872., 28784., 29696., 27576., 28512., 29448.,
      30384., 28192., 29152., 30112., 31072., 28808., 29792., 30776., 31760.,
      29424., 30432., 31440., 32448.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4686., 5352., 6101., 5100.,  4174., 4276., 5414., 6646., 5842.,
      5124., 6618., 9002., 11487., 9002., 6618., 5124., 5842., 6646.,
      5414., 4276., 4174., 5100.,  6101., 5352., 4686.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11637., 11808., 11979., 12150., 12321., 12663., 12834., 13005., 13176.,
      13347., 13689., 13860., 14031., 14202., 14373., 14715., 14886., 15057.,
      15228., 15399., 15741., 15912., 16083., 16254., 16425.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3966., 4476., 4733., 5360., 5523., 6282.,  4618., 5272., 3974., 4508.,
      5420., 6024., 6132., 6876., 6870., 7772.,  5554., 6324., 4556., 5176.,
      5506., 6212., 7549., 8420., 9613., 10670., 7332., 8228., 5434., 6148.,
      4668., 5288., 5936., 6692., 7230., 8140.,  6158., 6924., 5420., 6024.,
      4430., 4956., 4929., 5560., 5467., 6218.,  4526., 5152., 3878., 4364.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10863., 11370., 11187., 11712., 11511., 12054., 11835., 12396., 12159.,
      12738., 12807., 13422., 13131., 13764., 13455., 14106., 12307., 12912.,
      11287., 11846., 11935., 12530., 12259., 12872., 12583., 13214., 11691.,
      12276., 10927., 11466., 11575., 12150., 11899., 12492., 12223., 12834.,
      11587., 12152., 11079., 11598., 11727., 12282., 12051., 12624., 12375.,
      12966., 12699., 13308., 13023., 13650.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3614.,  4124.,  4634., 5144., 4711., 5338., 5965., 6592., 5711., 6470.,
      7229.,  7988.,  4246., 4900., 5554., 6208., 3430., 3964., 4498., 5032.,
      4428.,  5032.,  5636., 6240., 5280., 6024., 6768., 7512., 6022., 6924.,
      7826.,  8728.,  5010., 5780., 6550., 7320., 4796., 5416., 6036., 6656.,
      4754.,  5460.,  6166., 6872., 6403., 7274., 8145., 9016., 7913., 8970.,
      10027., 11084., 5832., 6728., 7624., 8520., 4714., 5428., 6142., 6856.,
      4668.,  5288.,  5908., 6528., 5436., 6192., 6948., 7704., 6110., 7020.,
      7930.,  8840.,  4974., 5740., 6506., 7272., 4684., 5288., 5892., 6496.,
      3470.,  3996.,  4522., 5048., 4539., 5170., 5801., 6432., 5559., 6310.,
      7061.,  7812.,  3962., 4588., 5214., 5840., 3094., 3580., 4066., 4552.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16931., 17438., 17945., 18452., 17433., 17958., 18483., 19008., 17935.,
      18478., 19021., 19564., 18437., 18998., 19559., 20120., 18939., 19518.,
      20097., 20676., 19943., 20558., 21173., 21788., 20445., 21078., 21711.,
      22344., 20947., 21598., 22249., 22900., 18569., 19174., 19779., 20384.,
      16447., 17006., 17565., 18124., 17451., 18046., 18641., 19236., 17953.,
      18566., 19179., 19792., 18455., 19086., 19717., 20348., 16589., 17174.,
      17759., 18344., 14979., 15518., 16057., 16596., 15983., 16558., 17133.,
      17708., 16485., 17078., 17671., 18264., 16987., 17598., 18209., 18820.,
      15633., 16198., 16763., 17328., 14535., 15054., 15573., 16092., 15539.,
      16094., 16649., 17204., 16041., 16614., 17187., 17760., 16543., 17134.,
      17725., 18316., 17045., 17654., 18263., 18872., 17547., 18174., 18801.,
      19428.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3878., 4364., 4526., 5152., 5467., 6218.,  4929., 5560., 4430., 4956.,
      5420., 6024., 6158., 6924., 7230., 8140.,  5936., 6692., 4668., 5288.,
      5434., 6148., 7332., 8228., 9613., 10670., 7549., 8420., 5506., 6212.,
      4556., 5176., 5554., 6324., 6870., 7772.,  6132., 6876., 5420., 6024.,
      3974., 4508., 4618., 5272., 5523., 6282.,  4733., 5360., 3966., 4476.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11199., 11370., 11541., 11712., 11883., 12054., 12225., 12396., 12567.,
      12738., 13251., 13422., 13593., 13764., 13935., 14106., 12741., 12912.,
      11675., 11846., 12359., 12530., 12701., 12872., 13043., 13214., 12105.,
      12276., 11295., 11466., 11979., 12150., 12321., 12492., 12663., 12834.,
      11981., 12152., 11427., 11598., 12111., 12282., 12453., 12624., 12795.,
      12966., 13137., 13308., 13479., 13650.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3564.,  4044.,  4028., 4568., 3985., 4572., 4586., 5248., 4706.,  5430.,
      5414.,  6228.,  4081., 4706., 4660., 5360., 3756., 4252., 4236.,  4792.,
      5800.,  6360.,  6360., 6992., 5974., 6668., 6696., 7480., 6492.,  7356.,
      7340.,  8312.,  4982., 5728., 5668., 6504., 3816., 4408., 4376.,  5040.,
      5028.,  5684.,  5700., 6440., 7555., 8360., 8410., 9320., 10486., 11482.,
      11482., 12604., 7555., 8410., 8360., 9320., 5028., 5700., 5684.,  6440.,
      3816.,  4376.,  4408., 5040., 4982., 5668., 5728., 6504., 6492.,  7340.,
      7356.,  8312.,  5974., 6696., 6668., 7480., 5800., 6360., 6360.,  6992.,
      3756.,  4236.,  4252., 4792., 4081., 4660., 4706., 5360., 4706.,  5414.,
      5430.,  6228.,  3985., 4586., 4572., 5248., 3564., 4028., 4044.,  4568.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21402., 22398., 21726., 22740., 22050., 23082., 22374., 23424., 22698.,
      23766., 23022., 24108., 23346., 24450., 23670., 24792., 23994., 25134.,
      24318., 25476., 25290., 26502., 25614., 26844., 25938., 27186., 26262.,
      27528., 26586., 27870., 26910., 28212., 24290., 25482., 24614., 25824.,
      22250., 23350., 22574., 23692., 23546., 24718., 23870., 25060., 24194.,
      25402., 24518., 25744., 24842., 26086., 25166., 26428., 23058., 24210.,
      23382., 24552., 21530., 22590., 21854., 22932., 22826., 23958., 23150.,
      24300., 23474., 24642., 23798., 24984., 24122., 25326., 24446., 25668.,
      22850., 23962., 23174., 24304., 21834., 22854., 22158., 23196., 23130.,
      24222., 23454., 24564., 23778., 24906., 24102., 25248., 24426., 25590.,
      24750., 25932., 25074., 26274., 25398., 26616., 25722., 26958., 26046.,
      27300.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3064., 3544.,  4024.,  4504.,  3484., 4024., 4564., 5104., 4311.,  4898.,
      5485., 6072.,  4862.,  5524.,  6186., 6848., 5872., 6596., 7320.,  8044.,
      6494., 7308.,  8122.,  8936.,  4065., 4690., 5315., 5940., 4556.,  5256.,
      5956., 6656.,  3112.,  3608.,  4104., 4600., 3532., 4088., 4644.,  5200.,
      4576., 5136.,  5696.,  6256.,  5080., 5712., 6344., 6976., 4838.,  5532.,
      6226., 6920.,  5504.,  6288.,  7072., 7856., 5464., 6328., 7192.,  8056.,
      6220., 7192.,  8164.,  9136.,  4626., 5372., 6118., 6864., 5220.,  6056.,
      6892., 7728.,  4800.,  5392.,  5984., 6576., 5304., 5968., 6632.,  7296.,
      4088., 4744.,  5400.,  6056.,  4676., 5416., 6156., 6896., 5889.,  6694.,
      7499., 8304.,  6662.,  7572.,  8482., 9392., 8136., 9132., 10128., 11124.,
      9010., 10132., 11254., 12376., 5599., 6454., 7309., 8164., 6288.,  7248.,
      8208., 9168.,  4264.,  4936.,  5608., 6280., 4852., 5608., 6364.,  7120.,
      4704., 5264.,  5824.,  6384.,  5208., 5840., 6472., 7104., 4798.,  5484.,
      6170., 6856.,  5464.,  6240.,  7016., 7792., 5288., 6136., 6984.,  7832.,
      6044., 7000.,  7956.,  8912.,  4410., 5132., 5854., 6576., 5004.,  5816.,
      6628., 7440.,  4576.,  5136.,  5696., 6256., 5080., 5712., 6344.,  6976.,
      2936., 3416.,  3896.,  4376.,  3356., 3896., 4436., 4976., 4207.,  4786.,
      5365., 5944.,  4758.,  5412.,  6066., 6720., 5824., 6532., 7240.,  7948.,
      6446., 7244.,  8042.,  8840.,  3913., 4514., 5115., 5716., 4404.,  5080.,
      5756., 6432.,  2888.,  3352.,  3816., 4280., 3308., 3832., 4356.,  4880.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19536., 20020., 20504., 20988., 20038., 20540., 21042., 21544., 20540.,
      21060., 21580., 22100., 21042., 21580., 22118., 22656., 21544., 22100.,
      22656., 23212., 22046., 22620., 23194., 23768., 22548., 23140., 23732.,
      24324., 23050., 23660., 24270., 24880., 23552., 24180., 24808., 25436.,
      24054., 24700., 25346., 25992., 18008., 18580., 19152., 19724., 18510.,
      19100., 19690., 20280., 19012., 19620., 20228., 20836., 19514., 20140.,
      20766., 21392., 20016., 20660., 21304., 21948., 20518., 21180., 21842.,
      22504., 18140., 18756., 19372., 19988., 18642., 19276., 19910., 20544.,
      16520., 17108., 17696., 18284., 17022., 17628., 18234., 18840., 12000.,
      12532., 13064., 13596., 12502., 13052., 13602., 14152., 13004., 13572.,
      14140., 14708., 13506., 14092., 14678., 15264., 14008., 14612., 15216.,
      15820., 14510., 15132., 15754., 16376., 12644., 13220., 13796., 14372.,
      13146., 13740., 14334., 14928., 11536., 12084., 12632., 13180., 12038.,
      12604., 13170., 13736., 13544., 14164., 14784., 15404., 14046., 14684.,
      15322., 15960., 13204., 13796., 14388., 14980., 13706., 14316., 14926.,
      15536., 13120., 13684., 14248., 14812., 13622., 14204., 14786., 15368.,
      12268., 12804., 13340., 13876., 12770., 13324., 13878., 14432., 11672.,
      12180., 12688., 13196., 12174., 12700., 13226., 13752., 13680., 14260.,
      14840., 15420., 14182., 14780., 15378., 15976., 13852., 14404., 14956.,
      15508., 14354., 14924., 15494., 16064., 14280., 14804., 15328., 15852.,
      14782., 15324., 15866., 16408., 15284., 15844., 16404., 16964., 15786.,
      16364., 16942., 17520., 16288., 16884., 17480., 18076., 16790., 17404.,
      18018., 18632.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3094.,  3580.,  4066., 4552., 3962., 4588., 5214., 5840., 5559., 6310.,
      7061.,  7812.,  4539., 5170., 5801., 6432., 3470., 3996., 4522., 5048.,
      4684.,  5288.,  5892., 6496., 4974., 5740., 6506., 7272., 6110., 7020.,
      7930.,  8840.,  5436., 6192., 6948., 7704., 4668., 5288., 5908., 6528.,
      4714.,  5428.,  6142., 6856., 5832., 6728., 7624., 8520., 7913., 8970.,
      10027., 11084., 6403., 7274., 8145., 9016., 4754., 5460., 6166., 6872.,
      4796.,  5416.,  6036., 6656., 5010., 5780., 6550., 7320., 6022., 6924.,
      7826.,  8728.,  5280., 6024., 6768., 7512., 4428., 5032., 5636., 6240.,
      3430.,  3964.,  4498., 5032., 4246., 4900., 5554., 6208., 5711., 6470.,
      7229.,  7988.,  4711., 5338., 5965., 6592., 3614., 4124., 4634., 5144.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22227., 22398., 22569., 22740., 22911., 23082., 23253., 23424., 23595.,
      23766., 23937., 24108., 24279., 24450., 24621., 24792., 24963., 25134.,
      25305., 25476., 26331., 26502., 26673., 26844., 27015., 27186., 27357.,
      27528., 27699., 27870., 28041., 28212., 25311., 25482., 25653., 25824.,
      23179., 23350., 23521., 23692., 24547., 24718., 24889., 25060., 25231.,
      25402., 25573., 25744., 25915., 26086., 26257., 26428., 24039., 24210.,
      24381., 24552., 22419., 22590., 22761., 22932., 23787., 23958., 24129.,
      24300., 24471., 24642., 24813., 24984., 25155., 25326., 25497., 25668.,
      23791., 23962., 24133., 24304., 22683., 22854., 23025., 23196., 24051.,
      24222., 24393., 24564., 24735., 24906., 25077., 25248., 25419., 25590.,
      25761., 25932., 26103., 26274., 26445., 26616., 26787., 26958., 27129.,
      27300.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2888.,  3308.,  3352.,  3832.,  3816., 4356., 4280., 4880., 3913., 4404.,
      4514.,  5080.,  5115.,  5756.,  5716., 6432., 5824., 6446., 6532., 7244.,
      7240.,  8042.,  7948.,  8840.,  4207., 4758., 4786., 5412., 5365., 6066.,
      5944.,  6720.,  2936.,  3356.,  3416., 3896., 3896., 4436., 4376., 4976.,
      4576.,  5080.,  5136.,  5712.,  5696., 6344., 6256., 6976., 4410., 5004.,
      5132.,  5816.,  5854.,  6628.,  6576., 7440., 5288., 6044., 6136., 7000.,
      6984.,  7956.,  7832.,  8912.,  4798., 5464., 5484., 6240., 6170., 7016.,
      6856.,  7792.,  4704.,  5208.,  5264., 5840., 5824., 6472., 6384., 7104.,
      4264.,  4852.,  4936.,  5608.,  5608., 6364., 6280., 7120., 5599., 6288.,
      6454.,  7248.,  7309.,  8208.,  8164., 9168., 8136., 9010., 9132., 10132.,
      10128., 11254., 11124., 12376., 5889., 6662., 6694., 7572., 7499., 8482.,
      8304.,  9392.,  4088.,  4676.,  4744., 5416., 5400., 6156., 6056., 6896.,
      4800.,  5304.,  5392.,  5968.,  5984., 6632., 6576., 7296., 4626., 5220.,
      5372.,  6056.,  6118.,  6892.,  6864., 7728., 5464., 6220., 6328., 7192.,
      7192.,  8164.,  8056.,  9136.,  4838., 5504., 5532., 6288., 6226., 7072.,
      6920.,  7856.,  4576.,  5080.,  5136., 5712., 5696., 6344., 6256., 6976.,
      3112.,  3532.,  3608.,  4088.,  4104., 4644., 4600., 5200., 4065., 4556.,
      4690.,  5256.,  5315.,  5956.,  5940., 6656., 5872., 6494., 6596., 7308.,
      7320.,  8122.,  8044.,  8936.,  4311., 4862., 4898., 5524., 5485., 6186.,
      6072.,  6848.,  3064.,  3484.,  3544., 4024., 4024., 4564., 4504., 5104.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19952., 20902., 20276., 21244., 20600., 21586., 20924., 21928., 21248.,
      22270., 21572., 22612., 21896., 22954., 22220., 23296., 22544., 23638.,
      22868., 23980., 23192., 24322., 23516., 24664., 23840., 25006., 24164.,
      25348., 24488., 25690., 24812., 26032., 25136., 26374., 25460., 26716.,
      25784., 27058., 26108., 27400., 20048., 21174., 20372., 21516., 20696.,
      21858., 21020., 22200., 21344., 22542., 21668., 22884., 21992., 23226.,
      22316., 23568., 22640., 23910., 22964., 24252., 23288., 24594., 23612.,
      24936., 20992., 22206., 21316., 22548., 21640., 22890., 21964., 23232.,
      19600., 20758., 19924., 21100., 20248., 21442., 20572., 21784., 15536.,
      16582., 15860., 16924., 16184., 17266., 16508., 17608., 16832., 17950.,
      17156., 18292., 17480., 18634., 17804., 18976., 18128., 19318., 18452.,
      19660., 18776., 20002., 19100., 20344., 16992., 18126., 17316., 18468.,
      17640., 18810., 17964., 19152., 16112., 17190., 16436., 17532., 16760.,
      17874., 17084., 18216., 18704., 19926., 19028., 20268., 19352., 20610.,
      19676., 20952., 18592., 19758., 18916., 20100., 19240., 20442., 19564.,
      20784., 18736., 19846., 19060., 20188., 19384., 20530., 19708., 20872.,
      18112., 19166., 18436., 19508., 18760., 19850., 19084., 20192., 17744.,
      18742., 18068., 19084., 18392., 19426., 18716., 19768., 20336., 21478.,
      20660., 21820., 20984., 22162., 21308., 22504., 20736., 21822., 21060.,
      22164., 21384., 22506., 21708., 22848., 21392., 22422., 21716., 22764.,
      22040., 23106., 22364., 23448., 22688., 23790., 23012., 24132., 23336.,
      24474., 23660., 24816., 23984., 25158., 24308., 25500., 24632., 25842.,
      24956., 26184.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  2640.,  3060.,  3480.,  2640.,  3120.,  3600.,  4080.,  3060.,
      3600.,  4140.,  4680.,  3480.,  4080.,  4680.,  5280.,  3559.,  4050.,
      4541.,  5032.,  4110.,  4676.,  5242.,  5808.,  4661.,  5302.,  5943.,
      6584.,  5212.,  5928.,  6644.,  7360.,  6098.,  6720.,  7342.,  7964.,
      6720.,  7432.,  8144.,  8856.,  7342.,  8144.,  8946.,  9748.,  7964.,
      8856.,  9748.,  10640., 3559.,  4110.,  4661.,  5212.,  4050.,  4676.,
      5302.,  5928.,  4541.,  5242.,  5943.,  6644.,  5032.,  5808.,  6584.,
      7360.,  2220.,  2640.,  3060.,  3480.,  2640.,  3120.,  3600.,  4080.,
      3060.,  3600.,  4140.,  4680.,  3480.,  4080.,  4680.,  5280.,  4968.,
      5472.,  5976.,  6480.,  5472.,  6048.,  6624.,  7200.,  5976.,  6624.,
      7272.,  7920.,  6480.,  7200.,  7920.,  8640.,  3762.,  4356.,  4950.,
      5544.,  4428.,  5112.,  5796.,  6480.,  5094.,  5868.,  6642.,  7416.,
      5760.,  6624.,  7488.,  8352.,  3996.,  4752.,  5508.,  6264.,  4752.,
      5616.,  6480.,  7344.,  5508.,  6480.,  7452.,  8424.,  6264.,  7344.,
      8424.,  9504.,  3762.,  4428.,  5094.,  5760.,  4356.,  5112.,  5868.,
      6624.,  4950.,  5796.,  6642.,  7488.,  5544.,  6480.,  7416.,  8352.,
      4968.,  5472.,  5976.,  6480.,  5472.,  6048.,  6624.,  7200.,  5976.,
      6624.,  7272.,  7920.,  6480.,  7200.,  7920.,  8640.,  3108.,  3696.,
      4284.,  4872.,  3696.,  4368.,  5040.,  5712.,  4284.,  5040.,  5796.,
      6552.,  4872.,  5712.,  6552.,  7392.,  5005.,  5694.,  6383.,  7072.,
      5778.,  6572.,  7366.,  8160.,  6551.,  7450.,  8349.,  9248.,  7324.,
      8328.,  9332.,  10336., 8582.,  9456.,  10330., 11204., 9456.,  10456.,
      11456., 12456., 10330., 11456., 12582., 13708., 11204., 12456., 13708.,
      14960., 5005.,  5778.,  6551.,  7324.,  5694.,  6572.,  7450.,  8328.,
      6383.,  7366.,  8349.,  9332.,  7072.,  8160.,  9248.,  10336., 3108.,
      3696.,  4284.,  4872.,  3696.,  4368.,  5040.,  5712.,  4284.,  5040.,
      5796.,  6552.,  4872.,  5712.,  6552.,  7392.,  4968.,  5472.,  5976.,
      6480.,  5472.,  6048.,  6624.,  7200.,  5976.,  6624.,  7272.,  7920.,
      6480.,  7200.,  7920.,  8640.,  3762.,  4356.,  4950.,  5544.,  4428.,
      5112.,  5796.,  6480.,  5094.,  5868.,  6642.,  7416.,  5760.,  6624.,
      7488.,  8352.,  3996.,  4752.,  5508.,  6264.,  4752.,  5616.,  6480.,
      7344.,  5508.,  6480.,  7452.,  8424.,  6264.,  7344.,  8424.,  9504.,
      3762.,  4428.,  5094.,  5760.,  4356.,  5112.,  5868.,  6624.,  4950.,
      5796.,  6642.,  7488.,  5544.,  6480.,  7416.,  8352.,  4968.,  5472.,
      5976.,  6480.,  5472.,  6048.,  6624.,  7200.,  5976.,  6624.,  7272.,
      7920.,  6480.,  7200.,  7920.,  8640.,  2220.,  2640.,  3060.,  3480.,
      2640.,  3120.,  3600.,  4080.,  3060.,  3600.,  4140.,  4680.,  3480.,
      4080.,  4680.,  5280.,  3559.,  4050.,  4541.,  5032.,  4110.,  4676.,
      5242.,  5808.,  4661.,  5302.,  5943.,  6584.,  5212.,  5928.,  6644.,
      7360.,  6098.,  6720.,  7342.,  7964.,  6720.,  7432.,  8144.,  8856.,
      7342.,  8144.,  8946.,  9748.,  7964.,  8856.,  9748.,  10640., 3559.,
      4110.,  4661.,  5212.,  4050.,  4676.,  5302.,  5928.,  4541.,  5242.,
      5943.,  6644.,  5032.,  5808.,  6584.,  7360.,  2220.,  2640.,  3060.,
      3480.,  2640.,  3120.,  3600.,  4080.,  3060.,  3600.,  4140.,  4680.,
      3480.,  4080.,  4680.,  5280.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14506., 14944., 15382., 15820., 15008., 15464., 15920., 16376., 15510.,
      15984., 16458., 16932., 16012., 16504., 16996., 17488., 16514., 17024.,
      17534., 18044., 17016., 17544., 18072., 18600., 17518., 18064., 18610.,
      19156., 18020., 18584., 19148., 19712., 18522., 19104., 19686., 20268.,
      19024., 19624., 20224., 20824., 19526., 20144., 20762., 21380., 20028.,
      20664., 21300., 21936., 19186., 19776., 20366., 20956., 19688., 20296.,
      20904., 21512., 20190., 20816., 21442., 22068., 20692., 21336., 21980.,
      22624., 20106., 20704., 21302., 21900., 20608., 21224., 21840., 22456.,
      21110., 21744., 22378., 23012., 21612., 22264., 22916., 23568., 13114.,
      13600., 14086., 14572., 13616., 14120., 14624., 15128., 14118., 14640.,
      15162., 15684., 14620., 15160., 15700., 16240., 15122., 15680., 16238.,
      16796., 15624., 16200., 16776., 17352., 16126., 16720., 17314., 17908.,
      16628., 17240., 17852., 18464., 17130., 17760., 18390., 19020., 17632.,
      18280., 18928., 19576., 18134., 18800., 19466., 20132., 18636., 19320.,
      20004., 20688., 15426., 16000., 16574., 17148., 15928., 16520., 17112.,
      17704., 16430., 17040., 17650., 18260., 16932., 17560., 18188., 18816.,
      14234., 14752., 15270., 15788., 14736., 15272., 15808., 16344., 15238.,
      15792., 16346., 16900., 15740., 16312., 16884., 17456., 11722., 12256.,
      12790., 13324., 12224., 12776., 13328., 13880., 12726., 13296., 13866.,
      14436., 13228., 13816., 14404., 14992., 13730., 14336., 14942., 15548.,
      14232., 14856., 15480., 16104., 14734., 15376., 16018., 16660., 15236.,
      15896., 16556., 17216., 15738., 16416., 17094., 17772., 16240., 16936.,
      17632., 18328., 16742., 17456., 18170., 18884., 17244., 17976., 18708.,
      19440., 14738., 15296., 15854., 16412., 15240., 15816., 16392., 16968.,
      15742., 16336., 16930., 17524., 16244., 16856., 17468., 18080., 14506.,
      14944., 15382., 15820., 15008., 15464., 15920., 16376., 15510., 15984.,
      16458., 16932., 16012., 16504., 16996., 17488., 18522., 19104., 19686.,
      20268., 19024., 19624., 20224., 20824., 19526., 20144., 20762., 21380.,
      20028., 20664., 21300., 21936., 19186., 19776., 20366., 20956., 19688.,
      20296., 20904., 21512., 20190., 20816., 21442., 22068., 20692., 21336.,
      21980., 22624., 20106., 20704., 21302., 21900., 20608., 21224., 21840.,
      22456., 21110., 21744., 22378., 23012., 21612., 22264., 22916., 23568.,
      16354., 16896., 17438., 17980., 16856., 17416., 17976., 18536., 17358.,
      17936., 18514., 19092., 17860., 18456., 19052., 19648., 13114., 13600.,
      14086., 14572., 13616., 14120., 14624., 15128., 14118., 14640., 15162.,
      15684., 14620., 15160., 15700., 16240., 17130., 17760., 18390., 19020.,
      17632., 18280., 18928., 19576., 18134., 18800., 19466., 20132., 18636.,
      19320., 20004., 20688., 15426., 16000., 16574., 17148., 15928., 16520.,
      17112., 17704., 16430., 17040., 17650., 18260., 16932., 17560., 18188.,
      18816., 14234., 14752., 15270., 15788., 14736., 15272., 15808., 16344.,
      15238., 15792., 16346., 16900., 15740., 16312., 16884., 17456., 12850.,
      13376., 13902., 14428., 13352., 13896., 14440., 14984., 13854., 14416.,
      14978., 15540., 14356., 14936., 15516., 16096., 11722., 12256., 12790.,
      13324., 12224., 12776., 13328., 13880., 12726., 13296., 13866., 14436.,
      13228., 13816., 14404., 14992.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6250., 6936., 7751.,  6132.,  4782.,  5000., 6286., 7828., 7010.,
      6228., 8007., 10564., 13478., 10564., 8007., 6228., 7010., 7828.,
      6286., 5000., 4782.,  6132.,  7751.,  6936., 6250.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14770., 14124., 14502., 14880., 15258., 14536., 14082., 14460., 14838.,
      15216., 13150., 11224., 10002., 10380., 10758., 10356., 9262.,  8232.,
      8610.,  8988.,  8778.,  7876.,  7038.,  7416.,  7794.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5054., 5636., 5663., 6368., 6515.,  7358.,  5309., 6024., 4544., 5132.,
      5249., 5936., 7332., 8172., 8341.,  9352.,  6720., 7588., 5493., 6216.,
      6637., 7518., 8715., 9768., 11326., 12556., 8749., 9800., 6667., 7534.,
      5923., 6744., 7368., 8340., 9379.,  10504., 8596., 9548., 6167., 6944.,
      4492., 5148., 5339., 6104., 6565.,  7438.,  5689., 6416., 5054., 5636.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28678., 29540., 27423., 28248., 28152., 29004., 28881., 29760., 29610.,
      30516., 28213., 29072., 27342., 28164., 28071., 28920., 28800., 29676.,
      29529., 30432., 25508., 26300., 21757., 22448., 19350., 20004., 20079.,
      20760., 20808., 21516., 19987., 20712., 17836., 18524., 15813., 16464.,
      16542., 17220., 17271., 17976., 16834., 17556., 15067., 15752., 13428.,
      14076., 14157., 14832., 14886., 15588.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4534.,  5116.,  5698., 6280., 4845., 5550.,  6255., 6960.,  5579., 6422.,
      7265.,  8108.,  4847., 5562., 6277., 6992.,  4388., 4976.,  5564., 6152.,
      4675.,  5362.,  6049., 6736., 6272., 7112.,  7952., 8792.,  6919., 7930.,
      8941.,  9952.,  5804., 6672., 7540., 8408.,  4951., 5674.,  6397., 7120.,
      5817.,  6698.,  7579., 8460., 7257., 8310.,  9363., 10416., 9326., 10556.,
      11786., 13016., 7183., 8234., 9285., 10336., 5731., 6598.,  7465., 8332.,
      5665.,  6486.,  7307., 8128., 6420., 7392.,  8364., 9336.,  7745., 8870.,
      9995.,  11120., 7280., 8232., 9184., 10136., 5269., 6046.,  6823., 7600.,
      5208.,  5864.,  6520., 7176., 5321., 6086.,  6851., 7616.,  5681., 6554.,
      7427.,  8300.,  4875., 5602., 6329., 7056.,  4534., 5116.,  5698., 6280.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5742., 6092., 6442., 6792., 5189., 5534., 5879., 6224., 5564., 5936.,
      6308., 6680., 5939., 6338., 6737., 7136., 6314., 6740., 7166., 7592.,
      5967., 6410., 6853., 7296., 5798., 6236., 6674., 7112., 6173., 6638.,
      7103., 7568., 6548., 7040., 7532., 8024., 6923., 7442., 7961., 8480.,
      7056., 7560., 8064., 8568., 7111., 7578., 8045., 8512., 7422., 7852.,
      8282., 8712., 6869., 7294., 7719., 8144., 6444., 6864., 7284., 7704.,
      6641., 7110., 7579., 8048., 6216., 6680., 7144., 7608., 5247., 5674.,
      6101., 6528., 5078., 5500., 5922., 6344., 5037., 5454., 5871., 6288.,
      5618., 6084., 6550., 7016., 5577., 6038., 6499., 6960., 5376., 5800.,
      6224., 6648., 5431., 5818., 6205., 6592., 5742., 6092., 6442., 6792.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5054., 5636., 5689., 6416., 6565.,  7438.,  5339., 6104., 4492., 5148.,
      6167., 6944., 8596., 9548., 9379.,  10504., 7368., 8340., 5923., 6744.,
      6667., 7534., 8749., 9800., 11326., 12556., 8715., 9768., 6637., 7518.,
      5493., 6216., 6720., 7588., 8341.,  9352.,  7332., 8172., 5249., 5936.,
      4544., 5132., 5309., 6024., 6515.,  7358.,  5663., 6368., 5054., 5636.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29162., 29540., 27870., 28248., 28626., 29004., 29382., 29760., 30138.,
      30516., 28694., 29072., 27786., 28164., 28542., 28920., 29298., 29676.,
      30054., 30432., 25922., 26300., 22070., 22448., 19626., 20004., 20382.,
      20760., 21138., 21516., 20334., 20712., 18146., 18524., 16086., 16464.,
      16842., 17220., 17598., 17976., 17178., 17556., 15374., 15752., 13698.,
      14076., 14454., 14832., 15210., 15588.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5371.,  5900.,  5900.,  6504.,  5610.,  6274.,  6286.,  7040., 6061.,
      6874.,  6886.,  7804.,  4634.,  5318.,  5354.,  6128.,  3995., 4568.,
      4624.,  5272.,  5610.,  6286.,  6274.,  7040.,  8548.,  9368., 9368.,
      10296., 8606.,  9590.,  9594.,  10704., 6132.,  6960.,  6976., 7912.,
      4634.,  5318.,  5354.,  6128.,  6061.,  6886.,  6874.,  7804., 8606.,
      9594.,  9590.,  10704., 12275., 13436., 13436., 14744., 8606., 9590.,
      9594.,  10704., 6061.,  6874.,  6886.,  7804.,  4634.,  5354., 5318.,
      6128.,  6132.,  6976.,  6960.,  7912.,  8606.,  9594.,  9590., 10704.,
      8548.,  9368.,  9368.,  10296., 5610.,  6274.,  6286.,  7040., 3995.,
      4624.,  4568.,  5272.,  4634.,  5354.,  5318.,  6128.,  6061., 6886.,
      6874.,  7804.,  5610.,  6286.,  6274.,  7040.,  5371.,  5900., 5900.,
      6504.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19507., 20180., 20236., 20936., 18981., 19644., 19710., 20400., 20439.,
      21156., 21168., 21912., 21897., 22668., 22626., 23424., 23355., 24180.,
      24084., 24936., 24145., 25004., 24874., 25760., 24003., 24852., 24732.,
      25608., 25461., 26364., 26190., 27120., 26919., 27876., 27648., 28632.,
      28377., 29388., 29106., 30144., 26543., 27524., 27272., 28280., 23521.,
      24428., 24250., 25184., 20755., 21588., 21484., 22344., 21253., 22076.,
      21982., 22832., 21879., 22692., 22608., 23448., 23245., 24156., 23974.,
      24912., 21823., 22724., 22552., 23480., 19825., 20652., 20554., 21408.,
      20707., 21524., 21436., 22280., 21717., 22524., 22446., 23280., 23467.,
      24372., 24196., 25128., 22429., 23324., 23158., 24080., 21199., 22020.,
      21928., 22776., 20225., 20972., 20954., 21728., 19507., 20180., 20236.,
      20936.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4533.,  5062.,  5591.,  6120.,  5052.,  5656.,  6260., 6864.,  4508.,
      5172.,  5836.,  6500.,  5130.,  5884.,  6638.,  7392., 5053.,  5866.,
      6679.,  7492.,  5782.,  6700.,  7618.,  8536.,  4568., 5252.,  5936.,
      6620.,  5198.,  5972.,  6746.,  7520.,  4457.,  5030., 5603.,  6176.,
      4984.,  5632.,  6280.,  6928.,  4464.,  5140.,  5816., 6492.,  5094.,
      5860.,  6626.,  7392.,  6820.,  7640.,  8460.,  9280., 7568.,  8496.,
      9424.,  10352., 6612.,  7596.,  8580.,  9564.,  7486., 8596.,  9706.,
      10816., 5132.,  5960.,  6788.,  7616.,  5880.,  6816., 7752.,  8688.,
      4568.,  5252.,  5936.,  6620.,  5198.,  5972.,  6746., 7520.,  5073.,
      5898.,  6723.,  7548.,  5810.,  6740.,  7670.,  8600., 6624.,  7612.,
      8600.,  9588.,  7506.,  8620.,  9734.,  10848., 9565., 10726., 11887.,
      13048., 10588., 11896., 13204., 14512., 6612.,  7596., 8580.,  9564.,
      7486.,  8596.,  9706.,  10816., 5053.,  5866.,  6679., 7492.,  5782.,
      6700.,  7618.,  8536.,  4868.,  5588.,  6308.,  7028., 5506.,  6316.,
      7126.,  7936.,  5196.,  6040.,  6884.,  7728.,  5960., 6912.,  7864.,
      8816.,  6624.,  7612.,  8600.,  9588.,  7506.,  8620., 9734.,  10848.,
      6820.,  7640.,  8460.,  9280.,  7568.,  8496.,  9424., 10352., 4508.,
      5172.,  5836.,  6500.,  5130.,  5884.,  6638.,  7392., 5505.,  6134.,
      6763.,  7392.,  6032.,  6736.,  7440.,  8144.,  4868., 5588.,  6308.,
      7028.,  5506.,  6316.,  7126.,  7936.,  5073.,  5898., 6723.,  7548.,
      5810.,  6740.,  7670.,  8600.,  4464.,  5140.,  5816., 6492.,  5094.,
      5860.,  6626.,  7392.,  4533.,  5062.,  5591.,  6120., 5052.,  5656.,
      6260.,  6864.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25989., 26662., 27335., 28008., 26716., 27416., 28116., 28816., 23539.,
      24202., 24865., 25528., 24266., 24956., 25646., 26336., 24993., 25710.,
      26427., 27144., 25720., 26464., 27208., 27952., 26447., 27218., 27989.,
      28760., 27174., 27972., 28770., 29568., 27901., 28726., 29551., 30376.,
      28628., 29480., 30332., 31184., 25223., 26082., 26941., 27800., 25950.,
      26836., 27722., 28608., 23541., 24390., 25239., 26088., 24268., 25144.,
      26020., 26896., 24995., 25898., 26801., 27704., 25722., 26652., 27582.,
      28512., 26449., 27406., 28363., 29320., 27176., 28160., 29144., 30128.,
      27903., 28914., 29925., 30936., 28630., 29668., 30706., 31744., 24137.,
      25118., 26099., 27080., 24864., 25872., 26880., 27888., 20855., 21762.,
      22669., 23576., 21582., 22516., 23450., 24384., 18085., 18918., 19751.,
      20584., 18812., 19672., 20532., 21392., 17683., 18506., 19329., 20152.,
      18410., 19260., 20110., 20960., 17537., 18350., 19163., 19976., 18264.,
      19104., 19944., 20784., 20043., 20954., 21865., 22776., 20770., 21708.,
      22646., 23584., 19897., 20798., 21699., 22600., 20624., 21552., 22480.,
      23408., 18663., 19490., 20317., 21144., 19390., 20244., 21098., 21952.,
      19029., 19846., 20663., 21480., 19756., 20600., 21444., 22288., 19651.,
      20458., 21265., 22072., 20378., 21212., 22046., 22880., 22925., 23830.,
      24735., 25640., 23652., 24584., 25516., 26448., 23547., 24442., 25337.,
      26232., 24274., 25196., 26118., 27040., 23849., 24670., 25491., 26312.,
      24576., 25424., 26272., 27120., 24663., 25410., 26157., 26904., 25390.,
      26164., 26938., 27712., 25989., 26662., 27335., 28008., 26716., 27416.,
      28116., 28816.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4534.,  5116.,  5698., 6280., 4875., 5602.,  6329., 7056.,  5681., 6554.,
      7427.,  8300.,  5321., 6086., 6851., 7616.,  5208., 5864.,  6520., 7176.,
      5269.,  6046.,  6823., 7600., 7280., 8232.,  9184., 10136., 7745., 8870.,
      9995.,  11120., 6420., 7392., 8364., 9336.,  5665., 6486.,  7307., 8128.,
      5731.,  6598.,  7465., 8332., 7183., 8234.,  9285., 10336., 9326., 10556.,
      11786., 13016., 7257., 8310., 9363., 10416., 5817., 6698.,  7579., 8460.,
      4951.,  5674.,  6397., 7120., 5804., 6672.,  7540., 8408.,  6919., 7930.,
      8941.,  9952.,  6272., 7112., 7952., 8792.,  4675., 5362.,  6049., 6736.,
      4388.,  4976.,  5564., 6152., 4847., 5562.,  6277., 6992.,  5579., 6422.,
      7265.,  8108.,  4845., 5550., 6255., 6960.,  4534., 5116.,  5698., 6280.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19802., 20180., 20558., 20936., 19266., 19644., 20022., 20400., 20778.,
      21156., 21534., 21912., 22290., 22668., 23046., 23424., 23802., 24180.,
      24558., 24936., 24626., 25004., 25382., 25760., 24474., 24852., 25230.,
      25608., 25986., 26364., 26742., 27120., 27498., 27876., 28254., 28632.,
      29010., 29388., 29766., 30144., 27146., 27524., 27902., 28280., 24050.,
      24428., 24806., 25184., 21210., 21588., 21966., 22344., 21698., 22076.,
      22454., 22832., 22314., 22692., 23070., 23448., 23778., 24156., 24534.,
      24912., 22346., 22724., 23102., 23480., 20274., 20652., 21030., 21408.,
      21146., 21524., 21902., 22280., 22146., 22524., 22902., 23280., 23994.,
      24372., 24750., 25128., 22946., 23324., 23702., 24080., 21642., 22020.,
      22398., 22776., 20594., 20972., 21350., 21728., 19802., 20180., 20558.,
      20936.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4533.,  5052.,  5062.,  5656.,  5591.,  6260.,  6120., 6864.,  4464.,
      5094.,  5140.,  5860.,  5816.,  6626.,  6492.,  7392., 5073.,  5810.,
      5898.,  6740.,  6723.,  7670.,  7548.,  8600.,  4868., 5506.,  5588.,
      6316.,  6308.,  7126.,  7028.,  7936.,  5505.,  6032., 6134.,  6736.,
      6763.,  7440.,  7392.,  8144.,  4508.,  5130.,  5172., 5884.,  5836.,
      6638.,  6500.,  7392.,  6820.,  7568.,  7640.,  8496., 8460.,  9424.,
      9280.,  10352., 6624.,  7506.,  7612.,  8620.,  8600., 9734.,  9588.,
      10848., 5196.,  5960.,  6040.,  6912.,  6884.,  7864., 7728.,  8816.,
      4868.,  5506.,  5588.,  6316.,  6308.,  7126.,  7028., 7936.,  5053.,
      5782.,  5866.,  6700.,  6679.,  7618.,  7492.,  8536., 6612.,  7486.,
      7596.,  8596.,  8580.,  9706.,  9564.,  10816., 9565., 10588., 10726.,
      11896., 11887., 13204., 13048., 14512., 6624.,  7506., 7612.,  8620.,
      8600.,  9734.,  9588.,  10848., 5073.,  5810.,  5898., 6740.,  6723.,
      7670.,  7548.,  8600.,  4568.,  5198.,  5252.,  5972., 5936.,  6746.,
      6620.,  7520.,  5132.,  5880.,  5960.,  6816.,  6788., 7752.,  7616.,
      8688.,  6612.,  7486.,  7596.,  8596.,  8580.,  9706., 9564.,  10816.,
      6820.,  7568.,  7640.,  8496.,  8460.,  9424.,  9280., 10352., 4464.,
      5094.,  5140.,  5860.,  5816.,  6626.,  6492.,  7392., 4457.,  4984.,
      5030.,  5632.,  5603.,  6280.,  6176.,  6928.,  4568., 5198.,  5252.,
      5972.,  5936.,  6746.,  6620.,  7520.,  5053.,  5782., 5866.,  6700.,
      6679.,  7618.,  7492.,  8536.,  4508.,  5130.,  5172., 5884.,  5836.,
      6638.,  6500.,  7392.,  4533.,  5052.,  5062.,  5656., 5591.,  6260.,
      6120.,  6864.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16205., 16820., 16934., 17576., 17663., 18332., 18392., 19088., 16177.,
      16772., 16906., 17528., 17635., 18284., 18364., 19040., 18261., 18900.,
      18990., 19656., 19719., 20412., 20448., 21168., 21177., 21924., 21906.,
      22680., 22635., 23436., 23364., 24192., 24093., 24948., 24822., 25704.,
      25551., 26460., 26280., 27216., 19913., 20708., 20642., 21464., 21371.,
      22220., 22100., 22976., 20653., 21428., 21382., 22184., 22111., 22940.,
      22840., 23696., 23121., 23940., 23850., 24696., 24579., 25452., 25308.,
      26208., 26037., 26964., 26766., 27720., 27495., 28476., 28224., 29232.,
      28953., 29988., 29682., 30744., 30411., 31500., 31140., 32256., 23685.,
      24596., 24414., 25352., 25143., 26108., 25872., 26864., 19689., 20452.,
      20418., 21208., 21147., 21964., 21876., 22720., 16205., 16820., 16934.,
      17576., 17663., 18332., 18392., 19088., 16177., 16772., 16906., 17528.,
      17635., 18284., 18364., 19040., 18261., 18900., 18990., 19656., 19719.,
      20412., 20448., 21168., 24001., 24900., 24730., 25656., 25459., 26412.,
      26188., 27168., 22181., 23060., 22910., 23816., 23639., 24572., 24368.,
      25328., 19913., 20708., 20642., 21464., 21371., 22220., 22100., 22976.,
      20653., 21428., 21382., 22184., 22111., 22940., 22840., 23696., 23121.,
      23940., 23850., 24696., 24579., 25452., 25308., 26208., 29245., 30324.,
      29974., 31080., 30703., 31836., 31432., 32592., 28193., 29252., 28922.,
      30008., 29651., 30764., 30380., 31520., 23685., 24596., 24414., 25352.,
      25143., 26108., 25872., 26864., 19689., 20452., 20418., 21208., 21147.,
      21964., 21876., 22720., 16205., 16820., 16934., 17576., 17663., 18332.,
      18392., 19088.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5075.,  5594.,  6113.,  6632.,  5594.,  6188.,  6782.,  7376.,  6113.,
      6782.,  7451.,  8120.,  6632.,  7376.,  8120.,  8864.,  4010.,  4640.,
      5270.,  5900.,  4632.,  5352.,  6072.,  6792.,  5254.,  6064.,  6874.,
      7684.,  5876.,  6776.,  7676.,  8576.,  3857.,  4594.,  5331.,  6068.,
      4586.,  5428.,  6270.,  7112.,  5315.,  6262.,  7209.,  8156.,  6044.,
      7096.,  8148.,  9200.,  4090.,  4728.,  5366.,  6004.,  4720.,  5448.,
      6176.,  6904.,  5350.,  6168.,  6986.,  7804.,  5980.,  6888.,  7796.,
      8704.,  5219.,  5746.,  6273.,  6800.,  5746.,  6348.,  6950.,  7552.,
      6273.,  6950.,  7627.,  8304.,  6800.,  7552.,  8304.,  9056.,  4010.,
      4632.,  5254.,  5876.,  4640.,  5352.,  6064.,  6776.,  5270.,  6072.,
      6874.,  7676.,  5900.,  6792.,  7684.,  8576.,  7308.,  8056.,  8804.,
      9552.,  8056.,  8912.,  9768.,  10624., 8804.,  9768.,  10732., 11696.,
      9552.,  10624., 11696., 12768., 5630.,  6512.,  7394.,  8276.,  6504.,
      7512.,  8520.,  9528.,  7378.,  8512.,  9646.,  10780., 8252.,  9512.,
      10772., 12032., 3996.,  4760.,  5524.,  6288.,  4744.,  5616.,  6488.,
      7360.,  5492.,  6472.,  7452.,  8432.,  6240.,  7328.,  8416.,  9504.,
      4090.,  4728.,  5366.,  6004.,  4720.,  5448.,  6176.,  6904.,  5350.,
      6168.,  6986.,  7804.,  5980.,  6888.,  7796.,  8704.,  3857.,  4586.,
      5315.,  6044.,  4594.,  5428.,  6262.,  7096.,  5331.,  6270.,  7209.,
      8148.,  6068.,  7112.,  8156.,  9200.,  5630.,  6504.,  7378.,  8252.,
      6512.,  7512.,  8512.,  9512.,  7394.,  8520.,  9646.,  10772., 8276.,
      9528.,  10780., 12032., 10043., 11066., 12089., 13112., 11066., 12236.,
      13406., 14576., 12089., 13406., 14723., 16040., 13112., 14576., 16040.,
      17504., 5630.,  6512.,  7394.,  8276.,  6504.,  7512.,  8520.,  9528.,
      7378.,  8512.,  9646.,  10780., 8252.,  9512.,  10772., 12032., 3857.,
      4594.,  5331.,  6068.,  4586.,  5428.,  6270.,  7112.,  5315.,  6262.,
      7209.,  8156.,  6044.,  7096.,  8148.,  9200.,  4090.,  4720.,  5350.,
      5980.,  4728.,  5448.,  6168.,  6888.,  5366.,  6176.,  6986.,  7796.,
      6004.,  6904.,  7804.,  8704.,  3996.,  4744.,  5492.,  6240.,  4760.,
      5616.,  6472.,  7328.,  5524.,  6488.,  7452.,  8416.,  6288.,  7360.,
      8432.,  9504.,  5630.,  6504.,  7378.,  8252.,  6512.,  7512.,  8512.,
      9512.,  7394.,  8520.,  9646.,  10772., 8276.,  9528.,  10780., 12032.,
      7308.,  8056.,  8804.,  9552.,  8056.,  8912.,  9768.,  10624., 8804.,
      9768.,  10732., 11696., 9552.,  10624., 11696., 12768., 4010.,  4640.,
      5270.,  5900.,  4632.,  5352.,  6072.,  6792.,  5254.,  6064.,  6874.,
      7684.,  5876.,  6776.,  7676.,  8576.,  5219.,  5746.,  6273.,  6800.,
      5746.,  6348.,  6950.,  7552.,  6273.,  6950.,  7627.,  8304.,  6800.,
      7552.,  8304.,  9056.,  4090.,  4720.,  5350.,  5980.,  4728.,  5448.,
      6168.,  6888.,  5366.,  6176.,  6986.,  7796.,  6004.,  6904.,  7804.,
      8704.,  3857.,  4586.,  5315.,  6044.,  4594.,  5428.,  6262.,  7096.,
      5331.,  6270.,  7209.,  8148.,  6068.,  7112.,  8156.,  9200.,  4010.,
      4632.,  5254.,  5876.,  4640.,  5352.,  6064.,  6776.,  5270.,  6072.,
      6874.,  7676.,  5900.,  6792.,  7684.,  8576.,  5075.,  5594.,  6113.,
      6632.,  5594.,  6188.,  6782.,  7376.,  6113.,  6782.,  7451.,  8120.,
      6632.,  7376.,  8120.,  8864.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4915., 5178.,  5441., 5704., 5290., 5580.,  5870., 6160., 5665., 5982.,
      6299., 6616.,  6040., 6384., 6728., 7072.,  4143., 4418., 4693., 4968.,
      4518., 4820.,  5122., 5424., 4893., 5222.,  5551., 5880., 5268., 5624.,
      5980., 6336.,  4843., 5194., 5545., 5896.,  5218., 5596., 5974., 6352.,
      5593., 5998.,  6403., 6808., 5968., 6400.,  6832., 7264., 6343., 6802.,
      7261., 7720.,  6718., 7204., 7690., 8176.,  7093., 7606., 8119., 8632.,
      7468., 8008.,  8548., 9088., 7299., 7834.,  8369., 8904., 7674., 8236.,
      8798., 9360.,  8049., 8638., 9227., 9816.,  8424., 9040., 9656., 10272.,
      4631., 4978.,  5325., 5672., 5006., 5380.,  5754., 6128., 5381., 5782.,
      6183., 6584.,  5756., 6184., 6612., 7040.,  4915., 5178., 5441., 5704.,
      5290., 5580.,  5870., 6160., 5665., 5982.,  6299., 6616., 6040., 6384.,
      6728., 7072.,  4143., 4418., 4693., 4968.,  4518., 4820., 5122., 5424.,
      4893., 5222.,  5551., 5880., 5268., 5624.,  5980., 6336., 4843., 5194.,
      5545., 5896.,  5218., 5596., 5974., 6352.,  5593., 5998., 6403., 6808.,
      5968., 6400.,  6832., 7264., 6343., 6802.,  7261., 7720., 6718., 7204.,
      7690., 8176.,  7093., 7606., 8119., 8632.,  7468., 8008., 8548., 9088.,
      5787., 6250.,  6713., 7176., 6162., 6652.,  7142., 7632., 6537., 7054.,
      7571., 8088.,  6912., 7456., 8000., 8544.,  4631., 4978., 5325., 5672.,
      5006., 5380.,  5754., 6128., 5381., 5782.,  6183., 6584., 5756., 6184.,
      6612., 7040.,  4915., 5178., 5441., 5704.,  5290., 5580., 5870., 6160.,
      5665., 5982.,  6299., 6616., 6040., 6384.,  6728., 7072., 4143., 4418.,
      4693., 4968.,  4518., 4820., 5122., 5424.,  4893., 5222., 5551., 5880.,
      5268., 5624.,  5980., 6336., 4843., 5194.,  5545., 5896., 5218., 5596.,
      5974., 6352.,  5593., 5998., 6403., 6808.,  5968., 6400., 6832., 7264.,
      7039., 7586.,  8133., 8680., 7414., 7988.,  8562., 9136., 7789., 8390.,
      8991., 9592.,  8164., 8792., 9420., 10048., 5787., 6250., 6713., 7176.,
      6162., 6652.,  7142., 7632., 6537., 7054.,  7571., 8088., 6912., 7456.,
      8000., 8544.,  4631., 4978., 5325., 5672.,  5006., 5380., 5754., 6128.,
      5381., 5782.,  6183., 6584., 5756., 6184.,  6612., 7040., 4915., 5178.,
      5441., 5704.,  5290., 5580., 5870., 6160.,  5665., 5982., 6299., 6616.,
      6040., 6384.,  6728., 7072., 4143., 4418.,  4693., 4968., 4518., 4820.,
      5122., 5424.,  4893., 5222., 5551., 5880.,  5268., 5624., 5980., 6336.,
      7299., 7834.,  8369., 8904., 7674., 8236.,  8798., 9360., 8049., 8638.,
      9227., 9816.,  8424., 9040., 9656., 10272., 7039., 7586., 8133., 8680.,
      7414., 7988.,  8562., 9136., 7789., 8390.,  8991., 9592., 8164., 8792.,
      9420., 10048., 5787., 6250., 6713., 7176.,  6162., 6652., 7142., 7632.,
      6537., 7054.,  7571., 8088., 6912., 7456.,  8000., 8544., 4631., 4978.,
      5325., 5672.,  5006., 5380., 5754., 6128.,  5381., 5782., 6183., 6584.,
      5756., 6184.,  6612., 7040., 4915., 5178.,  5441., 5704., 5290., 5580.,
      5870., 6160.,  5665., 5982., 6299., 6616.,  6040., 6384., 6728., 7072.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7707., 9184.,  10676., 9184.,  7707.,  6282.,  7560., 8856., 7560.,
      6282., 10953., 13048., 15164., 13048., 10953., 6282., 7560., 8856.,
      7560., 6282.,  7707.,  9184.,  10676., 9184.,  7707.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18478., 19144., 19810., 20476., 21142., 12286., 12952., 13618., 14284.,
      14950., 10830., 11496., 12162., 12828., 13494., 16158., 16824., 17490.,
      18156., 18822., 21486., 22152., 22818., 23484., 24150.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7035.,  7686.,  8148., 8960.,  9164.,  10152., 7259.,  8176.,  5511.,
      6342.,  8730.,  9540., 10080., 11088., 11304., 12528., 8946.,  10080.,
      6786.,  7812.,  9945., 10866., 11508., 12656., 12932., 14328., 10241.,
      11536., 7773.,  8946., 8730.,  9540.,  10080., 11088., 11304., 12528.,
      8946.,  10080., 6786., 7812.,  7035.,  7686.,  8148.,  8960.,  9164.,
      10152., 7259.,  8176., 5511.,  6342.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10114., 10588., 10642., 11152., 11170., 11716., 11698., 12280., 12226.,
      12844., 7170.,  7676.,  7698.,  8240.,  8226.,  8804.,  8754.,  9368.,
      9282.,  9932.,  6274.,  6812.,  6802.,  7376.,  7330.,  7940.,  7858.,
      8504.,  8386.,  9068.,  7426.,  7996.,  7954.,  8560.,  8482.,  9124.,
      9010.,  9688.,  9538.,  10252., 10114., 10588., 10642., 11152., 11170.,
      11716., 11698., 12280., 12226., 12844.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5515.,  6166.,  6817.,  7468.,  6620.,  7432.,  8244.,  9056.,  7516.,
      8504.,  9492.,  10480., 5873.,  6790.,  7707.,  8624.,  4799.,  5630.,
      6461.,  7292.,  6858.,  7668.,  8478.,  9288.,  8208.,  9216.,  10224.,
      11232., 9288.,  10512., 11736., 12960., 7254.,  8388.,  9522.,  10656.,
      5922.,  6948.,  7974.,  9000.,  7801.,  8722.,  9643.,  10564., 9356.,
      10504., 11652., 12800., 10612., 12008., 13404., 14800., 8291.,  9586.,
      10881., 12176., 6773.,  7946.,  9119.,  10292., 6858.,  7668.,  8478.,
      9288.,  8208.,  9216.,  10224., 11232., 9288.,  10512., 11736., 12960.,
      7254.,  8388.,  9522.,  10656., 5922.,  6948.,  7974.,  9000.,  5515.,
      6166.,  6817.,  7468.,  6620.,  7432.,  8244.,  9056.,  7516.,  8504.,
      9492.,  10480., 5873.,  6790.,  7707.,  8624.,  4799.,  5630.,  6461.,
      7292.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8234.,  8708.,  9182.,  9656.,  8742.,  9252.,  9762.,  10272., 9250.,
      9796.,  10342., 10888., 9758.,  10340., 10922., 11504., 10266., 10884.,
      11502., 12120., 6410.,  6916.,  7422.,  7928.,  6918.,  7460.,  8002.,
      8544.,  7426.,  8004.,  8582.,  9160.,  7934.,  8548.,  9162.,  9776.,
      8442.,  9092.,  9742.,  10392., 8682.,  9220.,  9758.,  10296., 9190.,
      9764.,  10338., 10912., 9698.,  10308., 10918., 11528., 10206., 10852.,
      11498., 12144., 10714., 11396., 12078., 12760., 6858.,  7428.,  7998.,
      8568.,  7366.,  7972.,  8578.,  9184.,  7874.,  8516.,  9158.,  9800.,
      8382.,  9060.,  9738.,  10416., 8890.,  9604.,  10318., 11032., 8234.,
      8708.,  9182.,  9656.,  8742.,  9252.,  9762.,  10272., 9250.,  9796.,
      10342., 10888., 9758.,  10340., 10922., 11504., 10266., 10884., 11502.,
      12120.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5511.,  6342.,  7259.,  8176., 9164.,  10152., 8148.,  8960.,  7035.,
      7686.,  6786.,  7812.,  8946., 10080., 11304., 12528., 10080., 11088.,
      8730.,  9540.,  7773.,  8946., 10241., 11536., 12932., 14328., 11508.,
      12656., 9945.,  10866., 6786., 7812.,  8946.,  10080., 11304., 12528.,
      10080., 11088., 8730.,  9540., 5511.,  6342.,  7259.,  8176.,  9164.,
      10152., 8148.,  8960.,  7035., 7686.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17986., 18652., 19318., 19984., 20650., 21316., 21982., 22648., 23314.,
      23980., 17122., 17788., 18454., 19120., 19786., 20452., 21118., 21784.,
      22450., 23116., 18306., 18972., 19638., 20304., 20970., 21636., 22302.,
      22968., 23634., 24300., 21538., 22204., 22870., 23536., 24202., 24868.,
      25534., 26200., 26866., 27532., 17986., 18652., 19318., 19984., 20650.,
      21316., 21982., 22648., 23314., 23980.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6450.,  6990.,  7350.,  7980.,  8295.,  9030.,  9240.,  10080., 10200.,
      11160., 11160., 12240., 8295.,  9240.,  9030.,  10080., 6450.,  7350.,
      6990.,  7980.,  7740.,  8388.,  8820.,  9576.,  9954.,  10836., 11088.,
      12096., 12240., 13392., 13392., 14688., 9954.,  11088., 10836., 12096.,
      7740.,  8820.,  8388.,  9576.,  9030.,  9786.,  10290., 11172., 11613.,
      12642., 12936., 14112., 14280., 15624., 15624., 17136., 11613., 12936.,
      12642., 14112., 9030.,  10290., 9786.,  11172., 7740.,  8388.,  8820.,
      9576.,  9954.,  10836., 11088., 12096., 12240., 13392., 13392., 14688.,
      9954.,  11088., 10836., 12096., 7740.,  8820.,  8388.,  9576.,  6450.,
      6990.,  7350.,  7980.,  8295.,  9030.,  9240.,  10080., 10200., 11160.,
      11160., 12240., 8295.,  9240.,  9030.,  10080., 6450.,  7350.,  6990.,
      7980.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7412.,  7812.,  7940.,  8376.,  8468.,  8940.,  8996.,  9504.,  9524.,
      10068., 10052., 10632., 10580., 11196., 11108., 11760., 11636., 12324.,
      12164., 12888., 5620.,  6084.,  6148.,  6648.,  6676.,  7212.,  7204.,
      7776.,  7732.,  8340.,  8260.,  8904.,  8788.,  9468.,  9316.,  10032.,
      9844.,  10596., 10372., 11160., 7412.,  7812.,  7940.,  8376.,  8468.,
      8940.,  8996.,  9504.,  9524.,  10068., 10052., 10632., 10580., 11196.,
      11108., 11760., 11636., 12324., 12164., 12888., 5620.,  6084.,  6148.,
      6648.,  6676.,  7212.,  7204.,  7776.,  7732.,  8340.,  8260.,  8904.,
      8788.,  9468.,  9316.,  10032., 9844.,  10596., 10372., 11160., 7412.,
      7812.,  7940.,  8376.,  8468.,  8940.,  8996.,  9504.,  9524.,  10068.,
      10052., 10632., 10580., 11196., 11108., 11760., 11636., 12324., 12164.,
      12888.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4680.,  5220.,  5760.,  6300.,  5430.,  6060.,  6690.,  7320.,  6255.,
      6990.,  7725.,  8460.,  7080.,  7920.,  8760.,  9600.,  7920.,  8880.,
      9840.,  10800., 8760.,  9840.,  10920., 12000., 6285.,  7230.,  8175.,
      9120.,  6930.,  7980.,  9030.,  10080., 5280.,  6180.,  7080.,  7980.,
      5790.,  6780.,  7770.,  8760.,  5616.,  6264.,  6912.,  7560.,  6516.,
      7272.,  8028.,  8784.,  7506.,  8388.,  9270.,  10152., 8496.,  9504.,
      10512., 11520., 9504.,  10656., 11808., 12960., 10512., 11808., 13104.,
      14400., 7542.,  8676.,  9810.,  10944., 8316.,  9576.,  10836., 12096.,
      6336.,  7416.,  8496.,  9576.,  6948.,  8136.,  9324.,  10512., 6552.,
      7308.,  8064.,  8820.,  7602.,  8484.,  9366.,  10248., 8757.,  9786.,
      10815., 11844., 9912.,  11088., 12264., 13440., 11088., 12432., 13776.,
      15120., 12264., 13776., 15288., 16800., 8799.,  10122., 11445., 12768.,
      9702.,  11172., 12642., 14112., 7392.,  8652.,  9912.,  11172., 8106.,
      9492.,  10878., 12264., 5616.,  6264.,  6912.,  7560.,  6516.,  7272.,
      8028.,  8784.,  7506.,  8388.,  9270.,  10152., 8496.,  9504.,  10512.,
      11520., 9504.,  10656., 11808., 12960., 10512., 11808., 13104., 14400.,
      7542.,  8676.,  9810.,  10944., 8316.,  9576.,  10836., 12096., 6336.,
      7416.,  8496.,  9576.,  6948.,  8136.,  9324.,  10512., 4680.,  5220.,
      5760.,  6300.,  5430.,  6060.,  6690.,  7320.,  6255.,  6990.,  7725.,
      8460.,  7080.,  7920.,  8760.,  9600.,  7920.,  8880.,  9840.,  10800.,
      8760.,  9840.,  10920., 12000., 6285.,  7230.,  8175.,  9120.,  6930.,
      7980.,  9030.,  10080., 5280.,  6180.,  7080.,  7980.,  5790.,  6780.,
      7770.,  8760.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8280.,  8680.,  9080.,  9480.,  8788.,  9224.,  9660.,  10096., 9296.,
      9768.,  10240., 10712., 9804.,  10312., 10820., 11328., 10312., 10856.,
      11400., 11944., 10820., 11400., 11980., 12560., 11328., 11944., 12560.,
      13176., 11836., 12488., 13140., 13792., 12344., 13032., 13720., 14408.,
      12852., 13576., 14300., 15024., 4632.,  5096.,  5560.,  6024.,  5140.,
      5640.,  6140.,  6640.,  5648.,  6184.,  6720.,  7256.,  6156.,  6728.,
      7300.,  7872.,  6664.,  7272.,  7880.,  8488.,  7172.,  7816.,  8460.,
      9104.,  7680.,  8360.,  9040.,  9720.,  8188.,  8904.,  9620.,  10336.,
      8696.,  9448.,  10200., 10952., 9204.,  9992.,  10780., 11568., 8280.,
      8680.,  9080.,  9480.,  8788.,  9224.,  9660.,  10096., 9296.,  9768.,
      10240., 10712., 9804.,  10312., 10820., 11328., 10312., 10856., 11400.,
      11944., 10820., 11400., 11980., 12560., 11328., 11944., 12560., 13176.,
      11836., 12488., 13140., 13792., 12344., 13032., 13720., 14408., 12852.,
      13576., 14300., 15024., 4632.,  5096.,  5560.,  6024.,  5140.,  5640.,
      6140.,  6640.,  5648.,  6184.,  6720.,  7256.,  6156.,  6728.,  7300.,
      7872.,  6664.,  7272.,  7880.,  8488.,  7172.,  7816.,  8460.,  9104.,
      7680.,  8360.,  9040.,  9720.,  8188.,  8904.,  9620.,  10336., 8696.,
      9448.,  10200., 10952., 9204.,  9992.,  10780., 11568., 8280.,  8680.,
      9080.,  9480.,  8788.,  9224.,  9660.,  10096., 9296.,  9768.,  10240.,
      10712., 9804.,  10312., 10820., 11328., 10312., 10856., 11400., 11944.,
      10820., 11400., 11980., 12560., 11328., 11944., 12560., 13176., 11836.,
      12488., 13140., 13792., 12344., 13032., 13720., 14408., 12852., 13576.,
      14300., 15024.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4799.,  5630.,  6461.,  7292.,  5873.,  6790.,  7707.,  8624.,  7516.,
      8504.,  9492.,  10480., 6620.,  7432.,  8244.,  9056.,  5515.,  6166.,
      6817.,  7468.,  5922.,  6948.,  7974.,  9000.,  7254.,  8388.,  9522.,
      10656., 9288.,  10512., 11736., 12960., 8208.,  9216.,  10224., 11232.,
      6858.,  7668.,  8478.,  9288.,  6773.,  7946.,  9119.,  10292., 8291.,
      9586.,  10881., 12176., 10612., 12008., 13404., 14800., 9356.,  10504.,
      11652., 12800., 7801.,  8722.,  9643.,  10564., 5922.,  6948.,  7974.,
      9000.,  7254.,  8388.,  9522.,  10656., 9288.,  10512., 11736., 12960.,
      8208.,  9216.,  10224., 11232., 6858.,  7668.,  8478.,  9288.,  4799.,
      5630.,  6461.,  7292.,  5873.,  6790.,  7707.,  8624.,  7516.,  8504.,
      9492.,  10480., 6620.,  7432.,  8244.,  9056.,  5515.,  6166.,  6817.,
      7468.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14314., 14980., 15646., 16312., 16978., 17644., 18310., 18976., 19642.,
      20308., 20974., 21640., 22306., 22972., 23638., 24304., 24970., 25636.,
      26302., 26968., 16682., 17348., 18014., 18680., 19346., 20012., 20678.,
      21344., 22010., 22676., 23342., 24008., 24674., 25340., 26006., 26672.,
      27338., 28004., 28670., 29336., 14314., 14980., 15646., 16312., 16978.,
      17644., 18310., 18976., 19642., 20308., 20974., 21640., 22306., 22972.,
      23638., 24304., 24970., 25636., 26302., 26968., 16682., 17348., 18014.,
      18680., 19346., 20012., 20678., 21344., 22010., 22676., 23342., 24008.,
      24674., 25340., 26006., 26672., 27338., 28004., 28670., 29336., 14314.,
      14980., 15646., 16312., 16978., 17644., 18310., 18976., 19642., 20308.,
      20974., 21640., 22306., 22972., 23638., 24304., 24970., 25636., 26302.,
      26968.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5280.,  5790.,  6180.,  6780.,  7080.,  7770.,  7980.,  8760.,  6285.,
      6930.,  7230.,  7980.,  8175.,  9030.,  9120.,  10080., 7920.,  8760.,
      8880.,  9840.,  9840.,  10920., 10800., 12000., 6255.,  7080.,  6990.,
      7920.,  7725.,  8760.,  8460.,  9600.,  4680.,  5430.,  5220.,  6060.,
      5760.,  6690.,  6300.,  7320.,  6336.,  6948.,  7416.,  8136.,  8496.,
      9324.,  9576.,  10512., 7542.,  8316.,  8676.,  9576.,  9810.,  10836.,
      10944., 12096., 9504.,  10512., 10656., 11808., 11808., 13104., 12960.,
      14400., 7506.,  8496.,  8388.,  9504.,  9270.,  10512., 10152., 11520.,
      5616.,  6516.,  6264.,  7272.,  6912.,  8028.,  7560.,  8784.,  7392.,
      8106.,  8652.,  9492.,  9912.,  10878., 11172., 12264., 8799.,  9702.,
      10122., 11172., 11445., 12642., 12768., 14112., 11088., 12264., 12432.,
      13776., 13776., 15288., 15120., 16800., 8757.,  9912.,  9786.,  11088.,
      10815., 12264., 11844., 13440., 6552.,  7602.,  7308.,  8484.,  8064.,
      9366.,  8820.,  10248., 6336.,  6948.,  7416.,  8136.,  8496.,  9324.,
      9576.,  10512., 7542.,  8316.,  8676.,  9576.,  9810.,  10836., 10944.,
      12096., 9504.,  10512., 10656., 11808., 11808., 13104., 12960., 14400.,
      7506.,  8496.,  8388.,  9504.,  9270.,  10512., 10152., 11520., 5616.,
      6516.,  6264.,  7272.,  6912.,  8028.,  7560.,  8784.,  5280.,  5790.,
      6180.,  6780.,  7080.,  7770.,  7980.,  8760.,  6285.,  6930.,  7230.,
      7980.,  8175.,  9030.,  9120.,  10080., 7920.,  8760.,  8880.,  9840.,
      9840.,  10920., 10800., 12000., 6255.,  7080.,  6990.,  7920.,  7725.,
      8760.,  8460.,  9600.,  4680.,  5430.,  5220.,  6060.,  5760.,  6690.,
      6300.,  7320.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4056.,  4308.,  4584.,  4872.,  5112.,  5436.,  5640.,  6000.,  6168.,
      6564.,  6696.,  7128.,  7224.,  7692.,  7752.,  8256.,  8280.,  8820.,
      8808.,  9384.,  9336.,  9948.,  9864.,  10512., 10392., 11076., 10920.,
      11640., 11448., 12204., 11976., 12768., 12504., 13332., 13032., 13896.,
      13560., 14460., 14088., 15024., 4056.,  4308.,  4584.,  4872.,  5112.,
      5436.,  5640.,  6000.,  6168.,  6564.,  6696.,  7128.,  7224.,  7692.,
      7752.,  8256.,  8280.,  8820.,  8808.,  9384.,  9336.,  9948.,  9864.,
      10512., 10392., 11076., 10920., 11640., 11448., 12204., 11976., 12768.,
      12504., 13332., 13032., 13896., 13560., 14460., 14088., 15024., 4056.,
      4308.,  4584.,  4872.,  5112.,  5436.,  5640.,  6000.,  6168.,  6564.,
      6696.,  7128.,  7224.,  7692.,  7752.,  8256.,  8280.,  8820.,  8808.,
      9384.,  9336.,  9948.,  9864.,  10512., 10392., 11076., 10920., 11640.,
      11448., 12204., 11976., 12768., 12504., 13332., 13032., 13896., 13560.,
      14460., 14088., 15024., 4056.,  4308.,  4584.,  4872.,  5112.,  5436.,
      5640.,  6000.,  6168.,  6564.,  6696.,  7128.,  7224.,  7692.,  7752.,
      8256.,  8280.,  8820.,  8808.,  9384.,  9336.,  9948.,  9864.,  10512.,
      10392., 11076., 10920., 11640., 11448., 12204., 11976., 12768., 12504.,
      13332., 13032., 13896., 13560., 14460., 14088., 15024., 4056.,  4308.,
      4584.,  4872.,  5112.,  5436.,  5640.,  6000.,  6168.,  6564.,  6696.,
      7128.,  7224.,  7692.,  7752.,  8256.,  8280.,  8820.,  8808.,  9384.,
      9336.,  9948.,  9864.,  10512., 10392., 11076., 10920., 11640., 11448.,
      12204., 11976., 12768., 12504., 13332., 13032., 13896., 13560., 14460.,
      14088., 15024.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3330.,  3840.,  4350.,  4860.,  4080.,  4680.,  5280.,  5880.,  4830.,
      5520.,  6210.,  6900.,  5580.,  6360.,  7140.,  7920.,  5205.,  5850.,
      6495.,  7140.,  6030.,  6780.,  7530.,  8280.,  6855.,  7710.,  8565.,
      9420.,  7680.,  8640.,  9600.,  10560., 8280.,  9120.,  9960.,  10800.,
      9120.,  10080., 11040., 12000., 9960.,  11040., 12120., 13200., 10800.,
      12000., 13200., 14400., 5205.,  6030.,  6855.,  7680.,  5850.,  6780.,
      7710.,  8640.,  6495.,  7530.,  8565.,  9600.,  7140.,  8280.,  9420.,
      10560., 3330.,  4080.,  4830.,  5580.,  3840.,  4680.,  5520.,  6360.,
      4350.,  5280.,  6210.,  7140.,  4860.,  5880.,  6900.,  7920.,  3996.,
      4608.,  5220.,  5832.,  4896.,  5616.,  6336.,  7056.,  5796.,  6624.,
      7452.,  8280.,  6696.,  7632.,  8568.,  9504.,  6246.,  7020.,  7794.,
      8568.,  7236.,  8136.,  9036.,  9936.,  8226.,  9252.,  10278., 11304.,
      9216.,  10368., 11520., 12672., 9936.,  10944., 11952., 12960., 10944.,
      12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400.,
      15840., 17280., 6246.,  7236.,  8226.,  9216.,  7020.,  8136.,  9252.,
      10368., 7794.,  9036.,  10278., 11520., 8568.,  9936.,  11304., 12672.,
      3996.,  4896.,  5796.,  6696.,  4608.,  5616.,  6624.,  7632.,  5220.,
      6336.,  7452.,  8568.,  5832.,  7056.,  8280.,  9504.,  4662.,  5376.,
      6090.,  6804.,  5712.,  6552.,  7392.,  8232.,  6762.,  7728.,  8694.,
      9660.,  7812.,  8904.,  9996.,  11088., 7287.,  8190.,  9093.,  9996.,
      8442.,  9492.,  10542., 11592., 9597.,  10794., 11991., 13188., 10752.,
      12096., 13440., 14784., 11592., 12768., 13944., 15120., 12768., 14112.,
      15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480.,
      20160., 7287.,  8442.,  9597.,  10752., 8190.,  9492.,  10794., 12096.,
      9093.,  10542., 11991., 13440., 9996.,  11592., 13188., 14784., 4662.,
      5712.,  6762.,  7812.,  5376.,  6552.,  7728.,  8904.,  6090.,  7392.,
      8694.,  9996.,  6804.,  8232.,  9660.,  11088., 3996.,  4608.,  5220.,
      5832.,  4896.,  5616.,  6336.,  7056.,  5796.,  6624.,  7452.,  8280.,
      6696.,  7632.,  8568.,  9504.,  6246.,  7020.,  7794.,  8568.,  7236.,
      8136.,  9036.,  9936.,  8226.,  9252.,  10278., 11304., 9216.,  10368.,
      11520., 12672., 9936.,  10944., 11952., 12960., 10944., 12096., 13248.,
      14400., 11952., 13248., 14544., 15840., 12960., 14400., 15840., 17280.,
      6246.,  7236.,  8226.,  9216.,  7020.,  8136.,  9252.,  10368., 7794.,
      9036.,  10278., 11520., 8568.,  9936.,  11304., 12672., 3996.,  4896.,
      5796.,  6696.,  4608.,  5616.,  6624.,  7632.,  5220.,  6336.,  7452.,
      8568.,  5832.,  7056.,  8280.,  9504.,  3330.,  3840.,  4350.,  4860.,
      4080.,  4680.,  5280.,  5880.,  4830.,  5520.,  6210.,  6900.,  5580.,
      6360.,  7140.,  7920.,  5205.,  5850.,  6495.,  7140.,  6030.,  6780.,
      7530.,  8280.,  6855.,  7710.,  8565.,  9420.,  7680.,  8640.,  9600.,
      10560., 8280.,  9120.,  9960.,  10800., 9120.,  10080., 11040., 12000.,
      9960.,  11040., 12120., 13200., 10800., 12000., 13200., 14400., 5205.,
      6030.,  6855.,  7680.,  5850.,  6780.,  7710.,  8640.,  6495.,  7530.,
      8565.,  9600.,  7140.,  8280.,  9420.,  10560., 3330.,  4080.,  4830.,
      5580.,  3840.,  4680.,  5520.,  6360.,  4350.,  5280.,  6210.,  7140.,
      4860.,  5880.,  6900.,  7920.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4276.,  4528.,  4780.,  5032.,  4784.,  5072.,  5360.,  5648.,  5292.,
      5616.,  5940.,  6264.,  5800.,  6160.,  6520.,  6880.,  6308.,  6704.,
      7100.,  7496.,  6816.,  7248.,  7680.,  8112.,  7324.,  7792.,  8260.,
      8728.,  7832.,  8336.,  8840.,  9344.,  8340.,  8880.,  9420.,  9960.,
      8848.,  9424.,  10000., 10576., 9356.,  9968.,  10580., 11192., 9864.,
      10512., 11160., 11808., 10372., 11056., 11740., 12424., 10880., 11600.,
      12320., 13040., 11388., 12144., 12900., 13656., 11896., 12688., 13480.,
      14272., 12404., 13232., 14060., 14888., 12912., 13776., 14640., 15504.,
      13420., 14320., 15220., 16120., 13928., 14864., 15800., 16736., 4276.,
      4528.,  4780.,  5032.,  4784.,  5072.,  5360.,  5648.,  5292.,  5616.,
      5940.,  6264.,  5800.,  6160.,  6520.,  6880.,  6308.,  6704.,  7100.,
      7496.,  6816.,  7248.,  7680.,  8112.,  7324.,  7792.,  8260.,  8728.,
      7832.,  8336.,  8840.,  9344.,  8340.,  8880.,  9420.,  9960.,  8848.,
      9424.,  10000., 10576., 9356.,  9968.,  10580., 11192., 9864.,  10512.,
      11160., 11808., 10372., 11056., 11740., 12424., 10880., 11600., 12320.,
      13040., 11388., 12144., 12900., 13656., 11896., 12688., 13480., 14272.,
      12404., 13232., 14060., 14888., 12912., 13776., 14640., 15504., 13420.,
      14320., 15220., 16120., 13928., 14864., 15800., 16736., 4276.,  4528.,
      4780.,  5032.,  4784.,  5072.,  5360.,  5648.,  5292.,  5616.,  5940.,
      6264.,  5800.,  6160.,  6520.,  6880.,  6308.,  6704.,  7100.,  7496.,
      6816.,  7248.,  7680.,  8112.,  7324.,  7792.,  8260.,  8728.,  7832.,
      8336.,  8840.,  9344.,  8340.,  8880.,  9420.,  9960.,  8848.,  9424.,
      10000., 10576., 9356.,  9968.,  10580., 11192., 9864.,  10512., 11160.,
      11808., 10372., 11056., 11740., 12424., 10880., 11600., 12320., 13040.,
      11388., 12144., 12900., 13656., 11896., 12688., 13480., 14272., 12404.,
      13232., 14060., 14888., 12912., 13776., 14640., 15504., 13420., 14320.,
      15220., 16120., 13928., 14864., 15800., 16736., 4276.,  4528.,  4780.,
      5032.,  4784.,  5072.,  5360.,  5648.,  5292.,  5616.,  5940.,  6264.,
      5800.,  6160.,  6520.,  6880.,  6308.,  6704.,  7100.,  7496.,  6816.,
      7248.,  7680.,  8112.,  7324.,  7792.,  8260.,  8728.,  7832.,  8336.,
      8840.,  9344.,  8340.,  8880.,  9420.,  9960.,  8848.,  9424.,  10000.,
      10576., 9356.,  9968.,  10580., 11192., 9864.,  10512., 11160., 11808.,
      10372., 11056., 11740., 12424., 10880., 11600., 12320., 13040., 11388.,
      12144., 12900., 13656., 11896., 12688., 13480., 14272., 12404., 13232.,
      14060., 14888., 12912., 13776., 14640., 15504., 13420., 14320., 15220.,
      16120., 13928., 14864., 15800., 16736., 4276.,  4528.,  4780.,  5032.,
      4784.,  5072.,  5360.,  5648.,  5292.,  5616.,  5940.,  6264.,  5800.,
      6160.,  6520.,  6880.,  6308.,  6704.,  7100.,  7496.,  6816.,  7248.,
      7680.,  8112.,  7324.,  7792.,  8260.,  8728.,  7832.,  8336.,  8840.,
      9344.,  8340.,  8880.,  9420.,  9960.,  8848.,  9424.,  10000., 10576.,
      9356.,  9968.,  10580., 11192., 9864.,  10512., 11160., 11808., 10372.,
      11056., 11740., 12424., 10880., 11600., 12320., 13040., 11388., 12144.,
      12900., 13656., 11896., 12688., 13480., 14272., 12404., 13232., 14060.,
      14888., 12912., 13776., 14640., 15504., 13420., 14320., 15220., 16120.,
      13928., 14864., 15800., 16736.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5676., 6330., 7122.,  5682.,  4332.,  5214., 6654., 8241., 7188.,
      6222., 7632., 10488., 13464., 10488., 7632., 6222., 7188., 8241.,
      6654., 5214., 4332.,  5682.,  7122.,  6330., 5676.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24060., 24360., 24660., 24960., 25260., 25860., 26160., 26460., 26760.,
      27060., 27660., 27960., 28260., 28560., 28860., 29460., 29760., 30060.,
      30360., 30660., 31260., 31560., 31860., 32160., 32460.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5100., 5688., 5712., 6420., 6390.,  7236.,  5334., 6036., 4620., 5160.,
      6306., 6972., 7119., 7932., 8013.,  8994.,  6450., 7272., 5274., 5916.,
      6384., 7200., 8832., 9840., 11304., 12528., 8616., 9648., 6384., 7200.,
      5610., 6396., 7221., 8184., 8841.,  10002., 7728., 8700., 7074., 7836.,
      4956., 5640., 5832., 6660., 6726.,  7716.,  5502., 6324., 4668., 5304.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22396., 23160., 22972., 23760., 23548., 24360., 22396., 23168., 21372.,
      22104., 22524., 23304., 23100., 23904., 23676., 24504., 22780., 23568.,
      22012., 22760., 23164., 23960., 20732., 21488., 18428., 19144., 17788.,
      18464., 17276., 17912., 18428., 19112., 16252., 16896., 14204., 14808.,
      14780., 15408., 15356., 16008., 16508., 17208., 14588., 15248., 12796.,
      13416., 13372., 14016., 13948., 14616.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3804.,  4392.,  4980., 5568., 5148., 5856., 6564., 7272.,  6462., 7308.,
      8154.,  9000.,  4542., 5244., 5946., 6648., 3468., 4008.,  4548., 5088.,
      5178.,  5844.,  6510., 7176., 5985., 6798., 7611., 8424.,  6741., 7722.,
      8703.,  9684.,  5358., 6180., 7002., 7824., 4914., 5556.,  6198., 6840.,
      5424.,  6240.,  7056., 7872., 7440., 8448., 9456., 10464., 9288., 10512.,
      11736., 12960., 6792., 7824., 8856., 9888., 5424., 6240.,  7056., 7872.,
      5922.,  6708.,  7494., 8280., 6855., 7818., 8781., 9744.,  7593., 8754.,
      9915.,  11076., 6180., 7152., 8124., 9096., 5850., 6612.,  7374., 8136.,
      4476.,  5160.,  5844., 6528., 6036., 6864., 7692., 8520.,  7470., 8460.,
      9450.,  10440., 5334., 6156., 6978., 7800., 4140., 4776.,  5412., 6048.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22268., 23032., 23796., 24560., 22884., 23672., 24460., 25248., 23500.,
      24312., 25124., 25936., 20724., 21496., 22268., 23040., 18204., 18936.,
      19668., 20400., 19436., 20216., 20996., 21776., 20052., 20856., 21660.,
      22464., 20668., 21496., 22324., 23152., 18404., 19192., 19980., 20768.,
      16396., 17144., 17892., 18640., 17628., 18424., 19220., 20016., 16388.,
      17144., 17900., 18656., 15404., 16120., 16836., 17552., 13652., 14328.,
      15004., 15680., 12156., 12792., 13428., 14064., 13388., 14072., 14756.,
      15440., 12660., 13304., 13948., 14592., 12188., 12792., 13396., 14000.,
      12804., 13432., 14060., 14688., 13420., 14072., 14724., 15376., 14652.,
      15352., 16052., 16752., 14436., 15096., 15756., 16416., 14476., 15096.,
      15716., 16336., 15092., 15736., 16380., 17024., 15708., 16376., 17044.,
      17712.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4668., 5304., 5502., 6324., 6726.,  7716.,  5832., 6660., 4956., 5640.,
      7074., 7836., 7728., 8700., 8841.,  10002., 7221., 8184., 5610., 6396.,
      6384., 7200., 8616., 9648., 11304., 12528., 8832., 9840., 6384., 7200.,
      5274., 5916., 6450., 7272., 8013.,  8994.,  7119., 7932., 6306., 6972.,
      4620., 5160., 5334., 6036., 6390.,  7236.,  5712., 6420., 5100., 5688.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22860., 23160., 23460., 23760., 24060., 24360., 22868., 23168., 21804.,
      22104., 23004., 23304., 23604., 23904., 24204., 24504., 23268., 23568.,
      22460., 22760., 23660., 23960., 21188., 21488., 18844., 19144., 18164.,
      18464., 17612., 17912., 18812., 19112., 16596., 16896., 14508., 14808.,
      15108., 15408., 15708., 16008., 16908., 17208., 14948., 15248., 13116.,
      13416., 13716., 14016., 14316., 14616.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4200., 4728.,  4824.,  5424.,  4782.,  5436.,  5568.,  6312., 5724.,
      6540., 6636.,  7560.,  4974.,  5664.,  5724.,  6504.,  4584., 5112.,
      5208., 5808.,  7332.,  8004.,  8004.,  8760.,  7167.,  7968., 8046.,
      8952., 7494.,  8466.,  8538.,  9636.,  5751.,  6570.,  6612., 7536.,
      4452., 5076.,  5172.,  5880.,  5856.,  6624.,  6624.,  7488., 8808.,
      9744., 9792.,  10848., 12240., 13392., 13392., 14688., 8808., 9792.,
      9744., 10848., 5856.,  6624.,  6624.,  7488.,  4452.,  5172., 5076.,
      5880., 5751.,  6612.,  6570.,  7536.,  7494.,  8538.,  8466., 9636.,
      7167., 8046.,  7968.,  8952.,  7332.,  8004.,  8004.,  8760., 4584.,
      5208., 5112.,  5808.,  4974.,  5724.,  5664.,  6504.,  5724., 6636.,
      6540., 7560.,  4782.,  5568.,  5436.,  6312.,  4200.,  4824., 4728.,
      5424.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15288., 15896., 15864., 16496., 16440., 17096., 17016., 17696., 17592.,
      18296., 18168., 18896., 17016., 17704., 17592., 18304., 16568., 17240.,
      17144., 17840., 18872., 19640., 19448., 20240., 20024., 20840., 20600.,
      21440., 21176., 22040., 21752., 22640., 20856., 21704., 21432., 22304.,
      20664., 21496., 21240., 22096., 22968., 23896., 23544., 24496., 20152.,
      21000., 20728., 21600., 17592., 18360., 18168., 18960., 17528., 18280.,
      18104., 18880., 17592., 18328., 18168., 18928., 19896., 20728., 20472.,
      21328., 17592., 18344., 18168., 18944., 15544., 16216., 16120., 16816.,
      16696., 17416., 17272., 18016., 17848., 18616., 18424., 19216., 20152.,
      21016., 20728., 21616., 18360., 19144., 18936., 19744., 16824., 17528.,
      17400., 18128., 17976., 18728., 18552., 19328., 19128., 19928., 19704.,
      20528.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3072.,  3600.,  4128.,  4656.,  3576.,  4176.,  4776., 5376.,  4734.,
      5388.,  6042.,  6696.,  5400.,  6144.,  6888.,  7632., 6792.,  7608.,
      8424.,  9240.,  7548.,  8472.,  9396.,  10320., 4602., 5292.,  5982.,
      6672.,  5196.,  5976.,  6756.,  7536.,  3456.,  3984., 4512.,  5040.,
      3960.,  4560.,  5160.,  5760.,  5736.,  6408.,  7080., 7752.,  6324.,
      7080.,  7836.,  8592.,  5661.,  6462.,  7263.,  8064., 6450.,  7356.,
      8262.,  9168.,  6144.,  7116.,  8088.,  9060.,  7050., 8148.,  9246.,
      10344., 5067.,  5886.,  6705.,  7524.,  5772.,  6696., 7620.,  8544.,
      5208.,  5832.,  6456.,  7080.,  5796.,  6504.,  7212., 7920.,  4800.,
      5568.,  6336.,  7104.,  5472.,  6336.,  7200.,  8064., 6888.,  7824.,
      8760.,  9696.,  7776.,  8832.,  9888.,  10944., 9504., 10656., 11808.,
      12960., 10512., 11808., 13104., 14400., 6456.,  7440., 8424.,  9408.,
      7248.,  8352.,  9456.,  10560., 4800.,  5568.,  6336., 7104.,  5472.,
      6336.,  7200.,  8064.,  5880.,  6600.,  7320.,  8040., 6468.,  7272.,
      8076.,  8880.,  5841.,  6702.,  7563.,  8424.,  6606., 7572.,  8538.,
      9504.,  6264.,  7308.,  8352.,  9396.,  7122.,  8292., 9462.,  10632.,
      5343.,  6222.,  7101.,  7980.,  6024.,  7008.,  7992., 8976.,  5736.,
      6408.,  7080.,  7752.,  6324.,  7080.,  7836.,  8592., 4128.,  4752.,
      5376.,  6000.,  4632.,  5328.,  6024.,  6720.,  5598., 6348.,  7098.,
      7848.,  6264.,  7104.,  7944.,  8784.,  7464.,  8376., 9288.,  10200.,
      8220.,  9240.,  10260., 11280., 5082.,  5868.,  6654., 7440.,  5676.,
      6552.,  7428.,  8304.,  3744.,  4368.,  4992.,  5616., 4248.,  4944.,
      5640.,  6336.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19728., 20336., 20944., 21552., 20344., 20976., 21608., 22240., 20960.,
      21616., 22272., 22928., 21576., 22256., 22936., 23616., 22192., 22896.,
      23600., 24304., 22808., 23536., 24264., 24992., 20032., 20720., 21408.,
      22096., 20648., 21360., 22072., 22784., 18128., 18800., 19472., 20144.,
      18744., 19440., 20136., 20832., 20592., 21360., 22128., 22896., 21208.,
      22000., 22792., 23584., 21824., 22640., 23456., 24272., 22440., 23280.,
      24120., 24960., 23056., 23920., 24784., 25648., 23672., 24560., 25448.,
      26336., 21408., 22256., 23104., 23952., 22024., 22896., 23768., 24640.,
      20016., 20848., 21680., 22512., 20632., 21488., 22344., 23200., 22480.,
      23408., 24336., 25264., 23096., 24048., 25000., 25952., 20000., 20848.,
      21696., 22544., 20616., 21488., 22360., 23232., 18032., 18800., 19568.,
      20336., 18648., 19440., 20232., 21024., 16896., 17648., 18400., 19152.,
      17512., 18288., 19064., 19840., 16016., 16752., 17488., 18224., 16632.,
      17392., 18152., 18912., 18480., 19312., 20144., 20976., 19096., 19952.,
      20808., 21664., 17024., 17776., 18528., 19280., 17640., 18416., 19192.,
      19968., 16080., 16752., 17424., 18096., 16696., 17392., 18088., 18784.,
      17312., 18032., 18752., 19472., 17928., 18672., 19416., 20160., 18544.,
      19312., 20080., 20848., 19160., 19952., 20744., 21536., 21008., 21872.,
      22736., 23600., 21624., 22512., 23400., 24288., 20576., 21360., 22144.,
      22928., 21192., 22000., 22808., 23616., 20656., 21360., 22064., 22768.,
      21272., 22000., 22728., 23456., 21888., 22640., 23392., 24144., 22504.,
      23280., 24056., 24832., 23120., 23920., 24720., 25520., 23736., 24560.,
      25384., 26208.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4140.,  4776.,  5412., 6048., 5334., 6156.,  6978., 7800., 7470., 8460.,
      9450.,  10440., 6036., 6864., 7692., 8520.,  4476., 5160., 5844., 6528.,
      5850.,  6612.,  7374., 8136., 6180., 7152.,  8124., 9096., 7593., 8754.,
      9915.,  11076., 6855., 7818., 8781., 9744.,  5922., 6708., 7494., 8280.,
      5424.,  6240.,  7056., 7872., 6792., 7824.,  8856., 9888., 9288., 10512.,
      11736., 12960., 7440., 8448., 9456., 10464., 5424., 6240., 7056., 7872.,
      4914.,  5556.,  6198., 6840., 5358., 6180.,  7002., 7824., 6741., 7722.,
      8703.,  9684.,  5985., 6798., 7611., 8424.,  5178., 5844., 6510., 7176.,
      3468.,  4008.,  4548., 5088., 4542., 5244.,  5946., 6648., 6462., 7308.,
      8154.,  9000.,  5148., 5856., 6564., 7272.,  3804., 4392., 4980., 5568.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15596., 15896., 16196., 16496., 16796., 17096., 17396., 17696., 17996.,
      18296., 18596., 18896., 17404., 17704., 18004., 18304., 16940., 17240.,
      17540., 17840., 19340., 19640., 19940., 20240., 20540., 20840., 21140.,
      21440., 21740., 22040., 22340., 22640., 21404., 21704., 22004., 22304.,
      21196., 21496., 21796., 22096., 23596., 23896., 24196., 24496., 20700.,
      21000., 21300., 21600., 18060., 18360., 18660., 18960., 17980., 18280.,
      18580., 18880., 18028., 18328., 18628., 18928., 20428., 20728., 21028.,
      21328., 18044., 18344., 18644., 18944., 15916., 16216., 16516., 16816.,
      17116., 17416., 17716., 18016., 18316., 18616., 18916., 19216., 20716.,
      21016., 21316., 21616., 18844., 19144., 19444., 19744., 17228., 17528.,
      17828., 18128., 18428., 18728., 19028., 19328., 19628., 19928., 20228.,
      20528.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3744.,  4248.,  4368.,  4944.,  4992.,  5640.,  5616., 6336.,  5082.,
      5676.,  5868.,  6552.,  6654.,  7428.,  7440.,  8304., 7464.,  8220.,
      8376.,  9240.,  9288.,  10260., 10200., 11280., 5598., 6264.,  6348.,
      7104.,  7098.,  7944.,  7848.,  8784.,  4128.,  4632., 4752.,  5328.,
      5376.,  6024.,  6000.,  6720.,  5736.,  6324.,  6408., 7080.,  7080.,
      7836.,  7752.,  8592.,  5343.,  6024.,  6222.,  7008., 7101.,  7992.,
      7980.,  8976.,  6264.,  7122.,  7308.,  8292.,  8352., 9462.,  9396.,
      10632., 5841.,  6606.,  6702.,  7572.,  7563.,  8538., 8424.,  9504.,
      5880.,  6468.,  6600.,  7272.,  7320.,  8076.,  8040., 8880.,  4800.,
      5472.,  5568.,  6336.,  6336.,  7200.,  7104.,  8064., 6456.,  7248.,
      7440.,  8352.,  8424.,  9456.,  9408.,  10560., 9504., 10512., 10656.,
      11808., 11808., 13104., 12960., 14400., 6888.,  7776., 7824.,  8832.,
      8760.,  9888.,  9696.,  10944., 4800.,  5472.,  5568., 6336.,  6336.,
      7200.,  7104.,  8064.,  5208.,  5796.,  5832.,  6504., 6456.,  7212.,
      7080.,  7920.,  5067.,  5772.,  5886.,  6696.,  6705., 7620.,  7524.,
      8544.,  6144.,  7050.,  7116.,  8148.,  8088.,  9246., 9060.,  10344.,
      5661.,  6450.,  6462.,  7356.,  7263.,  8262.,  8064., 9168.,  5736.,
      6324.,  6408.,  7080.,  7080.,  7836.,  7752.,  8592., 3456.,  3960.,
      3984.,  4560.,  4512.,  5160.,  5040.,  5760.,  4602., 5196.,  5292.,
      5976.,  5982.,  6756.,  6672.,  7536.,  6792.,  7548., 7608.,  8472.,
      8424.,  9396.,  9240.,  10320., 4734.,  5400.,  5388., 6144.,  6042.,
      6888.,  6696.,  7632.,  3072.,  3576.,  3600.,  4176., 4128.,  4776.,
      4656.,  5376.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13872., 14424., 14448., 15024., 15024., 15624., 15600., 16224., 16176.,
      16824., 16752., 17424., 17328., 18024., 17904., 18624., 18480., 19224.,
      19056., 19824., 19632., 20424., 20208., 21024., 15600., 16248., 16176.,
      16848., 16752., 17448., 17328., 18048., 13104., 13656., 13680., 14256.,
      14256., 14856., 14832., 15456., 17712., 18456., 18288., 19056., 18864.,
      19656., 19440., 20256., 20016., 20856., 20592., 21456., 21168., 22056.,
      21744., 22656., 22320., 23256., 22896., 23856., 23472., 24456., 24048.,
      25056., 20208., 21048., 20784., 21648., 21360., 22248., 21936., 22848.,
      18480., 19224., 19056., 19824., 19632., 20424., 20208., 21024., 23088.,
      24024., 23664., 24624., 24240., 25224., 24816., 25824., 19440., 20280.,
      20016., 20880., 20592., 21480., 21168., 22080., 16176., 16920., 16752.,
      17520., 17328., 18120., 17904., 18720., 14832., 15480., 15408., 16080.,
      15984., 16680., 16560., 17280., 13872., 14424., 14448., 15024., 15024.,
      15624., 15600., 16224., 18480., 19224., 19056., 19824., 19632., 20424.,
      20208., 21024., 15600., 16248., 16176., 16848., 16752., 17448., 17328.,
      18048., 13104., 13656., 13680., 14256., 14256., 14856., 14832., 15456.,
      15408., 16056., 15984., 16656., 16560., 17256., 17136., 17856., 17712.,
      18456., 18288., 19056., 18864., 19656., 19440., 20256., 22320., 23256.,
      22896., 23856., 23472., 24456., 24048., 25056., 20208., 21048., 20784.,
      21648., 21360., 22248., 21936., 22848., 18480., 19224., 19056., 19824.,
      19632., 20424., 20208., 21024., 20784., 21624., 21360., 22224., 21936.,
      22824., 22512., 23424., 23088., 24024., 23664., 24624., 24240., 25224.,
      24816., 25824.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2664.,  3168.,  3672.,  4176.,  3168.,  3744.,  4320.,  4896.,  3672.,
      4320.,  4968.,  5616.,  4176.,  4896.,  5616.,  6336.,  4338.,  4932.,
      5526.,  6120.,  5004.,  5688.,  6372.,  7056.,  5670.,  6444.,  7218.,
      7992.,  6336.,  7200.,  8064.,  8928.,  7452.,  8208.,  8964.,  9720.,
      8208.,  9072.,  9936.,  10800., 8964.,  9936.,  10908., 11880., 9720.,
      10800., 11880., 12960., 4338.,  5004.,  5670.,  6336.,  4932.,  5688.,
      6444.,  7200.,  5526.,  6372.,  7218.,  8064.,  6120.,  7056.,  7992.,
      8928.,  2664.,  3168.,  3672.,  4176.,  3168.,  3744.,  4320.,  4896.,
      3672.,  4320.,  4968.,  5616.,  4176.,  4896.,  5616.,  6336.,  5796.,
      6384.,  6972.,  7560.,  6384.,  7056.,  7728.,  8400.,  6972.,  7728.,
      8484.,  9240.,  7560.,  8400.,  9240.,  10080., 4341.,  5022.,  5703.,
      6384.,  5130.,  5916.,  6702.,  7488.,  5919.,  6810.,  7701.,  8592.,
      6708.,  7704.,  8700.,  9696.,  4662.,  5520.,  6378.,  7236.,  5568.,
      6552.,  7536.,  8520.,  6474.,  7584.,  8694.,  9804.,  7380.,  8616.,
      9852.,  11088., 4437.,  5202.,  5967.,  6732.,  5142.,  6012.,  6882.,
      7752.,  5847.,  6822.,  7797.,  8772.,  6552.,  7632.,  8712.,  9792.,
      5796.,  6384.,  6972.,  7560.,  6384.,  7056.,  7728.,  8400.,  6972.,
      7728.,  8484.,  9240.,  7560.,  8400.,  9240.,  10080., 3552.,  4224.,
      4896.,  5568.,  4224.,  4992.,  5760.,  6528.,  4896.,  5760.,  6624.,
      7488.,  5568.,  6528.,  7488.,  8448.,  5784.,  6576.,  7368.,  8160.,
      6672.,  7584.,  8496.,  9408.,  7560.,  8592.,  9624.,  10656., 8448.,
      9600.,  10752., 11904., 9936.,  10944., 11952., 12960., 10944., 12096.,
      13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400., 15840.,
      17280., 5784.,  6672.,  7560.,  8448.,  6576.,  7584.,  8592.,  9600.,
      7368.,  8496.,  9624.,  10752., 8160.,  9408.,  10656., 11904., 3552.,
      4224.,  4896.,  5568.,  4224.,  4992.,  5760.,  6528.,  4896.,  5760.,
      6624.,  7488.,  5568.,  6528.,  7488.,  8448.,  5796.,  6384.,  6972.,
      7560.,  6384.,  7056.,  7728.,  8400.,  6972.,  7728.,  8484.,  9240.,
      7560.,  8400.,  9240.,  10080., 4437.,  5142.,  5847.,  6552.,  5202.,
      6012.,  6822.,  7632.,  5967.,  6882.,  7797.,  8712.,  6732.,  7752.,
      8772.,  9792.,  4662.,  5568.,  6474.,  7380.,  5520.,  6552.,  7584.,
      8616.,  6378.,  7536.,  8694.,  9852.,  7236.,  8520.,  9804.,  11088.,
      4341.,  5130.,  5919.,  6708.,  5022.,  5916.,  6810.,  7704.,  5703.,
      6702.,  7701.,  8700.,  6384.,  7488.,  8592.,  9696.,  5796.,  6384.,
      6972.,  7560.,  6384.,  7056.,  7728.,  8400.,  6972.,  7728.,  8484.,
      9240.,  7560.,  8400.,  9240.,  10080., 2664.,  3168.,  3672.,  4176.,
      3168.,  3744.,  4320.,  4896.,  3672.,  4320.,  4968.,  5616.,  4176.,
      4896.,  5616.,  6336.,  4338.,  4932.,  5526.,  6120.,  5004.,  5688.,
      6372.,  7056.,  5670.,  6444.,  7218.,  7992.,  6336.,  7200.,  8064.,
      8928.,  7452.,  8208.,  8964.,  9720.,  8208.,  9072.,  9936.,  10800.,
      8964.,  9936.,  10908., 11880., 9720.,  10800., 11880., 12960., 4338.,
      5004.,  5670.,  6336.,  4932.,  5688.,  6444.,  7200.,  5526.,  6372.,
      7218.,  8064.,  6120.,  7056.,  7992.,  8928.,  2664.,  3168.,  3672.,
      4176.,  3168.,  3744.,  4320.,  4896.,  3672.,  4320.,  4968.,  5616.,
      4176.,  4896.,  5616.,  6336.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15416., 15968., 16520., 17072., 16032., 16608., 17184., 17760., 16648.,
      17248., 17848., 18448., 17264., 17888., 18512., 19136., 17880., 18528.,
      19176., 19824., 18496., 19168., 19840., 20512., 19112., 19808., 20504.,
      21200., 19728., 20448., 21168., 21888., 20344., 21088., 21832., 22576.,
      20960., 21728., 22496., 23264., 21576., 22368., 23160., 23952., 22192.,
      23008., 23824., 24640., 16728., 17376., 18024., 18672., 17344., 18016.,
      18688., 19360., 17960., 18656., 19352., 20048., 18576., 19296., 20016.,
      20736., 13880., 14432., 14984., 15536., 14496., 15072., 15648., 16224.,
      15112., 15712., 16312., 16912., 15728., 16352., 16976., 17600., 18808.,
      19552., 20296., 21040., 19424., 20192., 20960., 21728., 20040., 20832.,
      21624., 22416., 20656., 21472., 22288., 23104., 21272., 22112., 22952.,
      23792., 21888., 22752., 23616., 24480., 22504., 23392., 24280., 25168.,
      23120., 24032., 24944., 25856., 23736., 24672., 25608., 26544., 24352.,
      25312., 26272., 27232., 24968., 25952., 26936., 27920., 25584., 26592.,
      27600., 28608., 21656., 22496., 23336., 24176., 22272., 23136., 24000.,
      24864., 22888., 23776., 24664., 25552., 23504., 24416., 25328., 26240.,
      20344., 21088., 21832., 22576., 20960., 21728., 22496., 23264., 21576.,
      22368., 23160., 23952., 22192., 23008., 23824., 24640., 25272., 26208.,
      27144., 28080., 25888., 26848., 27808., 28768., 26504., 27488., 28472.,
      29456., 27120., 28128., 29136., 30144., 20120., 20960., 21800., 22640.,
      20736., 21600., 22464., 23328., 21352., 22240., 23128., 24016., 21968.,
      22880., 23792., 24704., 15736., 16480., 17224., 17968., 16352., 17120.,
      17888., 18656., 16968., 17760., 18552., 19344., 17584., 18400., 19216.,
      20032., 15192., 15840., 16488., 17136., 15808., 16480., 17152., 17824.,
      16424., 17120., 17816., 18512., 17040., 17760., 18480., 19200., 15416.,
      15968., 16520., 17072., 16032., 16608., 17184., 17760., 16648., 17248.,
      17848., 18448., 17264., 17888., 18512., 19136., 20344., 21088., 21832.,
      22576., 20960., 21728., 22496., 23264., 21576., 22368., 23160., 23952.,
      22192., 23008., 23824., 24640., 16728., 17376., 18024., 18672., 17344.,
      18016., 18688., 19360., 17960., 18656., 19352., 20048., 18576., 19296.,
      20016., 20736., 13880., 14432., 14984., 15536., 14496., 15072., 15648.,
      16224., 15112., 15712., 16312., 16912., 15728., 16352., 16976., 17600.,
      16344., 16992., 17640., 18288., 16960., 17632., 18304., 18976., 17576.,
      18272., 18968., 19664., 18192., 18912., 19632., 20352., 18808., 19552.,
      20296., 21040., 19424., 20192., 20960., 21728., 20040., 20832., 21624.,
      22416., 20656., 21472., 22288., 23104., 23736., 24672., 25608., 26544.,
      24352., 25312., 26272., 27232., 24968., 25952., 26936., 27920., 25584.,
      26592., 27600., 28608., 21656., 22496., 23336., 24176., 22272., 23136.,
      24000., 24864., 22888., 23776., 24664., 25552., 23504., 24416., 25328.,
      26240., 20344., 21088., 21832., 22576., 20960., 21728., 22496., 23264.,
      21576., 22368., 23160., 23952., 22192., 23008., 23824., 24640., 22808.,
      23648., 24488., 25328., 23424., 24288., 25152., 26016., 24040., 24928.,
      25816., 26704., 24656., 25568., 26480., 27392., 25272., 26208., 27144.,
      28080., 25888., 26848., 27808., 28768., 26504., 27488., 28472., 29456.,
      27120., 28128., 29136., 30144.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8097., 8694., 9417.,  7438.,  5689.,  6502., 7791., 9088., 8097.,
      7012., 9132., 11976., 15164., 11976., 9132., 7012., 8097., 9088.,
      7791., 6502., 5689.,  7438.,  9417.,  8694., 8097.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19966., 17560., 16242., 16908., 17574., 15796., 13774., 12648., 13314.,
      13980., 14250., 13252., 12318., 12984., 13650., 15648., 16314., 16980.,
      17646., 18312., 20310., 20976., 21642., 22308., 22974.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7053.,  7794.,  7632., 8508., 8301.,  9330.,  6948.,  7820.,  5865.,
      6578.,  7484.,  8380., 9999., 11070., 10461., 11696., 8469.,  9522.,
      6758.,  7624.,  7732., 8728., 10080., 11280., 12932., 14328., 10128.,
      11328., 7844.,  8840., 6393., 7304.,  8097.,  9186.,  10328., 11584.,
      9951.,  11022., 7467., 8348., 5105.,  5890.,  6344.,  7276.,  7881.,
      8946.,  7260.,  8172., 7053., 7794.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11226., 11772., 9770.,  10288., 9370., 9892.,  9898.,  10456., 10426.,
      11020., 9354.,  9960.,  8282.,  8860., 7338.,  7888.,  7194.,  7748.,
      7114.,  7672.,  8026.,  8660.,  7946., 8584.,  7386.,  7996.,  6954.,
      7536.,  6650.,  7204.,  7882.,  8512., 8410.,  9076.,  8586.,  9256.,
      8538.,  9180.,  8394.,  8976.,  9562., 10156., 10090., 10720., 10458.,
      11092., 10794., 11400., 11226., 11772.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5829.,  6570.,  7311.,  8052.,  6228.,  7104.,  7980.,  8856.,  7013.,
      8042.,  9071.,  10100., 6112.,  6984.,  7856.,  8728.,  5401.,  6114.,
      6827.,  7540.,  6184.,  7080.,  7976.,  8872.,  8207.,  9278.,  10349.,
      11420., 8567.,  9802.,  11037., 12272., 7197.,  8250.,  9303.,  10356.,
      6090.,  6956.,  7822.,  8688.,  6564.,  7560.,  8556.,  9552.,  8272.,
      9472.,  10672., 11872., 10612., 12008., 13404., 14800., 8240.,  9440.,
      10640., 11840., 6660.,  7656.,  8652.,  9648.,  6115.,  7026.,  7937.,
      8848.,  6945.,  8034.,  9123.,  10212., 8456.,  9712.,  10968., 12224.,
      8239.,  9310.,  10381., 11452., 6069.,  6950.,  7831.,  8712.,  5937.,
      6722.,  7507.,  8292.,  6252.,  7184.,  8116.,  9048.,  6793.,  7858.,
      8923.,  9988.,  5976.,  6888.,  7800.,  8712.,  5829.,  6570.,  7311.,
      8052.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9490.,  10036., 10582., 11128., 8142.,  8660.,  9178.,  9696.,  7850.,
      8372.,  8894.,  9416.,  8358.,  8916.,  9474.,  10032., 8866.,  9460.,
      10054., 10648., 8246.,  8852.,  9458.,  10064., 7666.,  8244.,  8822.,
      9400.,  7342.,  7892.,  8442.,  8992.,  7562.,  8116.,  8670.,  9224.,
      7910.,  8468.,  9026.,  9584.,  9146.,  9780.,  10414., 11048., 9494.,
      10132., 10770., 11408., 9938.,  10548., 11158., 11768., 8590.,  9172.,
      9754.,  10336., 7498.,  8052.,  8606.,  9160.,  8350.,  8980.,  9610.,
      10240., 8858.,  9524.,  10190., 10856., 8694.,  9364.,  10034., 10704.,
      8114.,  8756.,  9398.,  10040., 7374.,  7956.,  8538.,  9120.,  8162.,
      8756.,  9350.,  9944.,  8670.,  9300.,  9930.,  10560., 8890.,  9524.,
      10158., 10792., 9078.,  9684.,  10290., 10896., 9490.,  10036., 10582.,
      11128.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7053.,  7794.,  7260., 8172., 7881.,  8946.,  6344.,  7276.,  5105.,
      5890.,  7467.,  8348., 9951., 11022., 10328., 11584., 8097.,  9186.,
      6393.,  7304.,  7844., 8840., 10128., 11328., 12932., 14328., 10080.,
      11280., 7732.,  8728., 6758., 7624.,  8469.,  9522.,  10461., 11696.,
      9999.,  11070., 7484., 8380., 5865.,  6578.,  6948.,  7820.,  8301.,
      9330.,  7632.,  8508., 7053., 7794.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20962., 21628., 19222., 19888., 18570., 19236., 19902., 20568., 21234.,
      21900., 21454., 22120., 20098., 20764., 18870., 19536., 19498., 20164.,
      20190., 20856., 22458., 23124., 22126., 22792., 21282., 21948., 20566.,
      21232., 19978., 20644., 22566., 23232., 23898., 24564., 24846., 25512.,
      24514., 25180., 22006., 22672., 20370., 21036., 21702., 22368., 22842.,
      23508., 22894., 23560., 20962., 21628.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8010.,  8730.,  8730.,  9540.,  7500.,  8328.,  8400.,  9336.,  7494.,
      8466.,  8538.,  9636.,  5772.,  6576.,  6696.,  7608.,  4746.,  5394.,
      5538.,  6276.,  7455.,  8310.,  8280.,  9240.,  10878., 11886., 11886.,
      13020., 10269., 11424., 11466., 12768., 7494.,  8466.,  8538.,  9636.,
      5655.,  6450.,  6540.,  7440.,  7320.,  8280.,  8280.,  9360.,  10224.,
      11376., 11376., 12672., 14280., 15624., 15624., 17136., 10224., 11376.,
      11376., 12672., 7320.,  8280.,  8280.,  9360.,  5655.,  6540.,  6450.,
      7440.,  7494.,  8538.,  8466.,  9636.,  10269., 11466., 11424., 12768.,
      10878., 11886., 11886., 13020., 7455.,  8280.,  8310.,  9240.,  4746.,
      5538.,  5394.,  6276.,  5772.,  6696.,  6576.,  7608.,  7494.,  8538.,
      8466.,  9636.,  7500.,  8400.,  8328.,  9336.,  8010.,  8730.,  8730.,
      9540.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9636.,  10180., 10164., 10744., 7748.,  8236.,  8276.,  8800.,  7044.,
      7508.,  7572.,  8072.,  7748.,  8252.,  8276.,  8816.,  8804.,  9380.,
      9332.,  9944.,  8964.,  9628.,  9492.,  10192., 7844.,  8452.,  8372.,
      9016.,  6756.,  7276.,  7284.,  7840.,  6820.,  7316.,  7348.,  7880.,
      7172.,  7676.,  7700.,  8240.,  9508.,  10164., 10036., 10728., 9764.,
      10396., 10292., 10960., 9636.,  10180., 10164., 10744., 7748.,  8236.,
      8276.,  8800.,  7044.,  7508.,  7572.,  8072.,  9860.,  10508., 10388.,
      11072., 9988.,  10676., 10516., 11240., 8964.,  9628.,  9492.,  10192.,
      7844.,  8452.,  8372.,  9016.,  6756.,  7276.,  7284.,  7840.,  8228.,
      8804.,  8756.,  9368.,  9284.,  9932.,  9812.,  10496., 9508.,  10164.,
      10036., 10728., 9764.,  10396., 10292., 10960., 9636.,  10180., 10164.,
      10744.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6324.,  7044.,  7764.,  8484.,  6954.,  7764.,  8574.,  9384.,  5676.,
      6504.,  7332.,  8160.,  6456.,  7392.,  8328.,  9264.,  6144.,  7116.,
      8088.,  9060.,  7050.,  8148.,  9246.,  10344., 5556.,  6360.,  7164.,
      7968.,  6336.,  7248.,  8160.,  9072.,  5388.,  6036.,  6684.,  7332.,
      6018.,  6756.,  7494.,  8232.,  5751.,  6606.,  7461.,  8316.,  6480.,
      7440.,  8400.,  9360.,  8508.,  9516.,  10524., 11532., 9390.,  10524.,
      11658., 12792., 7815.,  8970.,  10125., 11280., 8862.,  10164., 11466.,
      12768., 6144.,  7116.,  8088.,  9060.,  7050.,  8148.,  9246.,  10344.,
      5475.,  6270.,  7065.,  7860.,  6228.,  7128.,  8028.,  8928.,  6000.,
      6960.,  7920.,  8880.,  6840.,  7920.,  9000.,  10080., 7776.,  8928.,
      10080., 11232., 8784.,  10080., 11376., 12672., 11088., 12432., 13776.,
      15120., 12264., 13776., 15288., 16800., 7776.,  8928.,  10080., 11232.,
      8784.,  10080., 11376., 12672., 6000.,  6960.,  7920.,  8880.,  6840.,
      7920.,  9000.,  10080., 5817.,  6702.,  7587.,  8472.,  6534.,  7524.,
      8514.,  9504.,  6264.,  7308.,  8352.,  9396.,  7122.,  8292.,  9462.,
      10632., 7821.,  9018.,  10215., 11412., 8832.,  10176., 11520., 12864.,
      8508.,  9516.,  10524., 11532., 9390.,  10524., 11658., 12792., 5637.,
      6462.,  7287.,  8112.,  6378.,  7308.,  8238.,  9168.,  6396.,  7188.,
      7980.,  8772.,  7026.,  7908.,  8790.,  9672.,  6012.,  6936.,  7860.,
      8784.,  6744.,  7776.,  8808.,  9840.,  6264.,  7308.,  8352.,  9396.,
      7122.,  8292.,  9462.,  10632., 5796.,  6696.,  7596.,  8496.,  6528.,
      7536.,  8544.,  9552.,  6324.,  7044.,  7764.,  8484.,  6954.,  7764.,
      8574.,  9384.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10792., 11336., 11880., 12424., 11300., 11880., 12460., 13040., 8096.,
      8584.,  9072.,  9560.,  8604.,  9128.,  9652.,  10176., 6712.,  7176.,
      7640.,  8104.,  7220.,  7720.,  8220.,  8720.,  7056.,  7560.,  8064.,
      8568.,  7564.,  8104.,  8644.,  9184.,  8072.,  8648.,  9224.,  9800.,
      8580.,  9192.,  9804.,  10416., 8304.,  8968.,  9632.,  10296., 8812.,
      9512.,  10212., 10912., 7144.,  7752.,  8360.,  8968.,  7652.,  8296.,
      8940.,  9584.,  6080.,  6600.,  7120.,  7640.,  6588.,  7144.,  7700.,
      8256.,  6232.,  6728.,  7224.,  7720.,  6740.,  7272.,  7804.,  8336.,
      6928.,  7432.,  7936.,  8440.,  7436.,  7976.,  8516.,  9056.,  9400.,
      10056., 10712., 11368., 9908.,  10600., 11292., 11984., 9936.,  10568.,
      11200., 11832., 10444., 11112., 11780., 12448., 10792., 11336., 11880.,
      12424., 11300., 11880., 12460., 13040., 8096.,  8584.,  9072.,  9560.,
      8604.,  9128.,  9652.,  10176., 6712.,  7176.,  7640.,  8104.,  7220.,
      7720.,  8220.,  8720.,  9088.,  9736.,  10384., 11032., 9596.,  10280.,
      10964., 11648., 9304.,  9992.,  10680., 11368., 9812.,  10536., 11260.,
      11984., 8304.,  8968.,  9632.,  10296., 8812.,  9512.,  10212., 10912.,
      7144.,  7752.,  8360.,  8968.,  7652.,  8296.,  8940.,  9584.,  6080.,
      6600.,  7120.,  7640.,  6588.,  7144.,  7700.,  8256.,  7944.,  8520.,
      9096.,  9672.,  8452.,  9064.,  9676.,  10288., 8960.,  9608.,  10256.,
      10904., 9468.,  10152., 10836., 11520., 9400.,  10056., 10712., 11368.,
      9908.,  10600., 11292., 11984., 9936.,  10568., 11200., 11832., 10444.,
      11112., 11780., 12448., 10792., 11336., 11880., 12424., 11300., 11880.,
      12460., 13040.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5829.,  6570.,  7311.,  8052.,  5976.,  6888.,  7800.,  8712.,  6793.,
      7858.,  8923.,  9988.,  6252.,  7184.,  8116.,  9048.,  5937.,  6722.,
      7507.,  8292.,  6069.,  6950.,  7831.,  8712.,  8239.,  9310.,  10381.,
      11452., 8456.,  9712.,  10968., 12224., 6945.,  8034.,  9123.,  10212.,
      6115.,  7026.,  7937.,  8848.,  6660.,  7656.,  8652.,  9648.,  8240.,
      9440.,  10640., 11840., 10612., 12008., 13404., 14800., 8272.,  9472.,
      10672., 11872., 6564.,  7560.,  8556.,  9552.,  6090.,  6956.,  7822.,
      8688.,  7197.,  8250.,  9303.,  10356., 8567.,  9802.,  11037., 12272.,
      8207.,  9278.,  10349., 11420., 6184.,  7080.,  7976.,  8872.,  5401.,
      6114.,  6827.,  7540.,  6112.,  6984.,  7856.,  8728.,  7013.,  8042.,
      9071.,  10100., 6228.,  7104.,  7980.,  8856.,  5829.,  6570.,  7311.,
      8052.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20266., 20932., 21598., 22264., 17810., 18476., 19142., 19808., 16570.,
      17236., 17902., 18568., 17826., 18492., 19158., 19824., 20490., 21156.,
      21822., 22488., 24322., 24988., 25654., 26320., 22634., 23300., 23966.,
      24632., 18898., 19564., 20230., 20896., 17402., 18068., 18734., 19400.,
      17250., 17916., 18582., 19248., 23322., 23988., 24654., 25320., 23042.,
      23708., 24374., 25040., 20266., 20932., 21598., 22264., 17810., 18476.,
      19142., 19808., 16570., 17236., 17902., 18568., 23154., 23820., 24486.,
      25152., 24858., 25524., 26190., 26856., 24322., 24988., 25654., 26320.,
      22634., 23300., 23966., 24632., 18898., 19564., 20230., 20896., 19914.,
      20580., 21246., 21912., 22578., 23244., 23910., 24576., 23322., 23988.,
      24654., 25320., 23042., 23708., 24374., 25040., 20266., 20932., 21598.,
      22264.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6324.,  6954.,  7044.,  7764.,  7764.,  8574.,  8484.,  9384.,  5796.,
      6528.,  6696.,  7536.,  7596.,  8544.,  8496.,  9552.,  6264.,  7122.,
      7308.,  8292.,  8352.,  9462.,  9396.,  10632., 6012.,  6744.,  6936.,
      7776.,  7860.,  8808.,  8784.,  9840.,  6396.,  7026.,  7188.,  7908.,
      7980.,  8790.,  8772.,  9672.,  5637.,  6378.,  6462.,  7308.,  7287.,
      8238.,  8112.,  9168.,  8508.,  9390.,  9516.,  10524., 10524., 11658.,
      11532., 12792., 7821.,  8832.,  9018.,  10176., 10215., 11520., 11412.,
      12864., 6264.,  7122.,  7308.,  8292.,  8352.,  9462.,  9396.,  10632.,
      5817.,  6534.,  6702.,  7524.,  7587.,  8514.,  8472.,  9504.,  6000.,
      6840.,  6960.,  7920.,  7920.,  9000.,  8880.,  10080., 7776.,  8784.,
      8928.,  10080., 10080., 11376., 11232., 12672., 11088., 12264., 12432.,
      13776., 13776., 15288., 15120., 16800., 7776.,  8784.,  8928.,  10080.,
      10080., 11376., 11232., 12672., 6000.,  6840.,  6960.,  7920.,  7920.,
      9000.,  8880.,  10080., 5475.,  6228.,  6270.,  7128.,  7065.,  8028.,
      7860.,  8928.,  6144.,  7050.,  7116.,  8148.,  8088.,  9246.,  9060.,
      10344., 7815.,  8862.,  8970.,  10164., 10125., 11466., 11280., 12768.,
      8508.,  9390.,  9516.,  10524., 10524., 11658., 11532., 12792., 5751.,
      6480.,  6606.,  7440.,  7461.,  8400.,  8316.,  9360.,  5388.,  6018.,
      6036.,  6756.,  6684.,  7494.,  7332.,  8232.,  5556.,  6336.,  6360.,
      7248.,  7164.,  8160.,  7968.,  9072.,  6144.,  7050.,  7116.,  8148.,
      8088.,  9246.,  9060.,  10344., 5676.,  6456.,  6504.,  7392.,  7332.,
      8328.,  8160.,  9264.,  6324.,  6954.,  7044.,  7764.,  7764.,  8574.,
      8484.,  9384.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8504.,  9044.,  9032.,  9608.,  9560.,  10172., 10088., 10736., 5528.,
      5924.,  6056.,  6488.,  6584.,  7052.,  7112.,  7616.,  4888.,  5236.,
      5416.,  5800.,  5944.,  6364.,  6472.,  6928.,  5944.,  6340.,  6472.,
      6904.,  7000.,  7468.,  7528.,  8032.,  8056.,  8596.,  8584.,  9160.,
      9112.,  9724.,  9640.,  10288., 9752.,  10436., 10280., 11000., 10808.,
      11564., 11336., 12128., 8504.,  9044.,  9032.,  9608.,  9560.,  10172.,
      10088., 10736., 5528.,  5924.,  6056.,  6488.,  6584.,  7052.,  7112.,
      7616.,  4888.,  5236.,  5416.,  5800.,  5944.,  6364.,  6472.,  6928.,
      5944.,  6340.,  6472.,  6904.,  7000.,  7468.,  7528.,  8032.,  10520.,
      11252., 11048., 11816., 11576., 12380., 12104., 12944., 9752.,  10436.,
      10280., 11000., 10808., 11564., 11336., 12128., 8504.,  9044.,  9032.,
      9608.,  9560.,  10172., 10088., 10736., 5528.,  5924.,  6056.,  6488.,
      6584.,  7052.,  7112.,  7616.,  4888.,  5236.,  5416.,  5800.,  5944.,
      6364.,  6472.,  6928.,  10168., 10852., 10696., 11416., 11224., 11980.,
      11752., 12544., 10520., 11252., 11048., 11816., 11576., 12380., 12104.,
      12944., 9752.,  10436., 10280., 11000., 10808., 11564., 11336., 12128.,
      8504.,  9044.,  9032.,  9608.,  9560.,  10172., 10088., 10736., 5528.,
      5924.,  6056.,  6488.,  6584.,  7052.,  7112.,  7616.,  8056.,  8596.,
      8584.,  9160.,  9112.,  9724.,  9640.,  10288., 10168., 10852., 10696.,
      11416., 11224., 11980., 11752., 12544., 10520., 11252., 11048., 11816.,
      11576., 12380., 12104., 12944., 9752.,  10436., 10280., 11000., 10808.,
      11564., 11336., 12128., 8504.,  9044.,  9032.,  9608.,  9560.,  10172.,
      10088., 10736.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6306.,  6936.,  7566.,  8196.,  6936.,  7656.,  8376.,  9096.,  7566.,
      8376.,  9186.,  9996.,  8196.,  9096.,  9996.,  10896., 4764.,  5496.,
      6228.,  6960.,  5544.,  6384.,  7224.,  8064.,  6324.,  7272.,  8220.,
      9168.,  7104.,  8160.,  9216.,  10272., 4662.,  5520.,  6378.,  7236.,
      5568.,  6552.,  7536.,  8520.,  6474.,  7584.,  8694.,  9804.,  7380.,
      8616.,  9852.,  11088., 4956.,  5688.,  6420.,  7152.,  5736.,  6576.,
      7416.,  8256.,  6516.,  7464.,  8412.,  9360.,  7296.,  8352.,  9408.,
      10464., 6114.,  6744.,  7374.,  8004.,  6744.,  7464.,  8184.,  8904.,
      7374.,  8184.,  8994.,  9804.,  8004.,  8904.,  9804.,  10704., 4725.,
      5466.,  6207.,  6948.,  5454.,  6300.,  7146.,  7992.,  6183.,  7134.,
      8085.,  9036.,  6912.,  7968.,  9024.,  10080., 8790.,  9672.,  10554.,
      11436., 9672.,  10680., 11688., 12696., 10554., 11688., 12822., 13956.,
      11436., 12696., 13956., 15216., 6519.,  7530.,  8541.,  9552.,  7566.,
      8724.,  9882.,  11040., 8613.,  9918.,  11223., 12528., 9660.,  11112.,
      12564., 14016., 4662.,  5520.,  6378.,  7236.,  5568.,  6552.,  7536.,
      8520.,  6474.,  7584.,  8694.,  9804.,  7380.,  8616.,  9852.,  11088.,
      4821.,  5538.,  6255.,  6972.,  5574.,  6396.,  7218.,  8040.,  6327.,
      7254.,  8181.,  9108.,  7080.,  8112.,  9144.,  10176., 4440.,  5280.,
      6120.,  6960.,  5280.,  6240.,  7200.,  8160.,  6120.,  7200.,  8280.,
      9360.,  6960.,  8160.,  9360.,  10560., 6480.,  7488.,  8496.,  9504.,
      7488.,  8640.,  9792.,  10944., 8496.,  9792.,  11088., 12384., 9504.,
      10944., 12384., 13824., 11592., 12768., 13944., 15120., 12768., 14112.,
      15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480.,
      20160., 6480.,  7488.,  8496.,  9504.,  7488.,  8640.,  9792.,  10944.,
      8496.,  9792.,  11088., 12384., 9504.,  10944., 12384., 13824., 4440.,
      5280.,  6120.,  6960.,  5280.,  6240.,  7200.,  8160.,  6120.,  7200.,
      8280.,  9360.,  6960.,  8160.,  9360.,  10560., 4821.,  5574.,  6327.,
      7080.,  5538.,  6396.,  7254.,  8112.,  6255.,  7218.,  8181.,  9144.,
      6972.,  8040.,  9108.,  10176., 4662.,  5568.,  6474.,  7380.,  5520.,
      6552.,  7584.,  8616.,  6378.,  7536.,  8694.,  9852.,  7236.,  8520.,
      9804.,  11088., 6519.,  7566.,  8613.,  9660.,  7530.,  8724.,  9918.,
      11112., 8541.,  9882.,  11223., 12564., 9552.,  11040., 12528., 14016.,
      8790.,  9672.,  10554., 11436., 9672.,  10680., 11688., 12696., 10554.,
      11688., 12822., 13956., 11436., 12696., 13956., 15216., 4725.,  5454.,
      6183.,  6912.,  5466.,  6300.,  7134.,  7968.,  6207.,  7146.,  8085.,
      9024.,  6948.,  7992.,  9036.,  10080., 6114.,  6744.,  7374.,  8004.,
      6744.,  7464.,  8184.,  8904.,  7374.,  8184.,  8994.,  9804.,  8004.,
      8904.,  9804.,  10704., 4956.,  5736.,  6516.,  7296.,  5688.,  6576.,
      7464.,  8352.,  6420.,  7416.,  8412.,  9408.,  7152.,  8256.,  9360.,
      10464., 4662.,  5568.,  6474.,  7380.,  5520.,  6552.,  7584.,  8616.,
      6378.,  7536.,  8694.,  9852.,  7236.,  8520.,  9804.,  11088., 4764.,
      5544.,  6324.,  7104.,  5496.,  6384.,  7272.,  8160.,  6228.,  7224.,
      8220.,  9216.,  6960.,  8064.,  9168.,  10272., 6306.,  6936.,  7566.,
      8196.,  6936.,  7656.,  8376.,  9096.,  7566.,  8376.,  9186.,  9996.,
      8196.,  9096.,  9996.,  10896.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9300.,  9840.,  10380., 10920., 9808.,  10384., 10960., 11536., 10316.,
      10928., 11540., 12152., 10824., 11472., 12120., 12768., 5540.,  5936.,
      6332.,  6728.,  6048.,  6480.,  6912.,  7344.,  6556.,  7024.,  7492.,
      7960.,  7064.,  7568.,  8072.,  8576.,  4308.,  4656.,  5004.,  5352.,
      4816.,  5200.,  5584.,  5968.,  5324.,  5744.,  6164.,  6584.,  5832.,
      6288.,  6744.,  7200.,  5348.,  5744.,  6140.,  6536.,  5856.,  6288.,
      6720.,  7152.,  6364.,  6832.,  7300.,  7768.,  6872.,  7376.,  7880.,
      8384.,  7380.,  7920.,  8460.,  9000.,  7888.,  8464.,  9040.,  9616.,
      8396.,  9008.,  9620.,  10232., 8904.,  9552.,  10200., 10848., 9604.,
      10288., 10972., 11656., 10112., 10832., 11552., 12272., 10620., 11376.,
      12132., 12888., 11128., 11920., 12712., 13504., 9300.,  9840.,  10380.,
      10920., 9808.,  10384., 10960., 11536., 10316., 10928., 11540., 12152.,
      10824., 11472., 12120., 12768., 5540.,  5936.,  6332.,  6728.,  6048.,
      6480.,  6912.,  7344.,  6556.,  7024.,  7492.,  7960.,  7064.,  7568.,
      8072.,  8576.,  4308.,  4656.,  5004.,  5352.,  4816.,  5200.,  5584.,
      5968.,  5324.,  5744.,  6164.,  6584.,  5832.,  6288.,  6744.,  7200.,
      5348.,  5744.,  6140.,  6536.,  5856.,  6288.,  6720.,  7152.,  6364.,
      6832.,  7300.,  7768.,  6872.,  7376.,  7880.,  8384.,  10068., 10800.,
      11532., 12264., 10576., 11344., 12112., 12880., 11084., 11888., 12692.,
      13496., 11592., 12432., 13272., 14112., 9604.,  10288., 10972., 11656.,
      10112., 10832., 11552., 12272., 10620., 11376., 12132., 12888., 11128.,
      11920., 12712., 13504., 9300.,  9840.,  10380., 10920., 9808.,  10384.,
      10960., 11536., 10316., 10928., 11540., 12152., 10824., 11472., 12120.,
      12768., 5540.,  5936.,  6332.,  6728.,  6048.,  6480.,  6912.,  7344.,
      6556.,  7024.,  7492.,  7960.,  7064.,  7568.,  8072.,  8576.,  4308.,
      4656.,  5004.,  5352.,  4816.,  5200.,  5584.,  5968.,  5324.,  5744.,
      6164.,  6584.,  5832.,  6288.,  6744.,  7200.,  9412.,  10096., 10780.,
      11464., 9920.,  10640., 11360., 12080., 10428., 11184., 11940., 12696.,
      10936., 11728., 12520., 13312., 10068., 10800., 11532., 12264., 10576.,
      11344., 12112., 12880., 11084., 11888., 12692., 13496., 11592., 12432.,
      13272., 14112., 9604.,  10288., 10972., 11656., 10112., 10832., 11552.,
      12272., 10620., 11376., 12132., 12888., 11128., 11920., 12712., 13504.,
      9300.,  9840.,  10380., 10920., 9808.,  10384., 10960., 11536., 10316.,
      10928., 11540., 12152., 10824., 11472., 12120., 12768., 5540.,  5936.,
      6332.,  6728.,  6048.,  6480.,  6912.,  7344.,  6556.,  7024.,  7492.,
      7960.,  7064.,  7568.,  8072.,  8576.,  7380.,  7920.,  8460.,  9000.,
      7888.,  8464.,  9040.,  9616.,  8396.,  9008.,  9620.,  10232., 8904.,
      9552.,  10200., 10848., 9412.,  10096., 10780., 11464., 9920.,  10640.,
      11360., 12080., 10428., 11184., 11940., 12696., 10936., 11728., 12520.,
      13312., 10068., 10800., 11532., 12264., 10576., 11344., 12112., 12880.,
      11084., 11888., 12692., 13496., 11592., 12432., 13272., 14112., 9604.,
      10288., 10972., 11656., 10112., 10832., 11552., 12272., 10620., 11376.,
      12132., 12888., 11128., 11920., 12712., 13504., 9300.,  9840.,  10380.,
      10920., 9808.,  10384., 10960., 11536., 10316., 10928., 11540., 12152.,
      10824., 11472., 12120., 12768.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9738., 11592., 13464., 11592., 9738.,  7185.,  8736., 10332., 8904.,
      7473., 12984., 15456., 17952., 15456., 12984., 7473., 8904.,  10332.,
      8736., 7185.,  9738.,  11592., 13464., 11592., 9738.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11608., 12272., 12936., 13600., 14264., 9304.,  9968., 10632., 11296.,
      11960., 8536.,  9200.,  9864.,  10528., 11192., 9304., 9968.,  10632.,
      11296., 11960., 11608., 12272., 12936., 13600., 14264.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8730.,  9540.,  10080., 11088., 11304., 12528., 8946.,  10080., 6786.,
      7812.,  9465.,  10338., 11004., 12096., 12420., 13752., 9849.,  11088.,
      7485.,  8610.,  11640., 12720., 13440., 14784., 15072., 16704., 11928.,
      13440., 9048.,  10416., 10905., 11922., 12516., 13776., 13956., 15480.,
      11025., 12432., 8349.,  9618.,  8730.,  9540.,  10080., 11088., 11304.,
      12528., 8946.,  10080., 6786.,  7812.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15096., 15792., 15864., 16608., 16632., 17424., 17400., 18240., 18168.,
      19056., 10488., 11184., 11256., 12000., 12024., 12816., 12792., 13632.,
      13560., 14448., 8952.,  9648.,  9720.,  10464., 10488., 11280., 11256.,
      12096., 12024., 12912., 10488., 11184., 11256., 12000., 12024., 12816.,
      12792., 13632., 13560., 14448., 15096., 15792., 15864., 16608., 16632.,
      17424., 17400., 18240., 18168., 19056.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6858.,  7668.,  8478.,  9288.,  8208.,  9216.,  10224., 11232., 9288.,
      10512., 11736., 12960., 7254.,  8388.,  9522.,  10656., 5922.,  6948.,
      7974.,  9000.,  7401.,  8274.,  9147.,  10020., 8916.,  10008., 11100.,
      12192., 10164., 11496., 12828., 14160., 7947.,  9186.,  10425., 11664.,
      6501.,  7626.,  8751.,  9876.,  9144.,  10224., 11304., 12384., 10944.,
      12288., 13632., 14976., 12384., 14016., 15648., 17280., 9672.,  11184.,
      12696., 14208., 7896.,  9264.,  10632., 12000., 8601.,  9618.,  10635.,
      11652., 10236., 11496., 12756., 14016., 11508., 13032., 14556., 16080.,
      8979.,  10386., 11793., 13200., 7317.,  8586.,  9855.,  11124., 6858.,
      7668.,  8478.,  9288.,  8208.,  9216.,  10224., 11232., 9288.,  10512.,
      11736., 12960., 7254.,  8388.,  9522.,  10656., 5922.,  6948.,  7974.,
      9000.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12216., 12912., 13608., 14304., 12936., 13680., 14424., 15168., 13656.,
      14448., 15240., 16032., 14376., 15216., 16056., 16896., 15096., 15984.,
      16872., 17760., 9144.,  9840.,  10536., 11232., 9864.,  10608., 11352.,
      12096., 10584., 11376., 12168., 12960., 11304., 12144., 12984., 13824.,
      12024., 12912., 13800., 14688., 12216., 12912., 13608., 14304., 12936.,
      13680., 14424., 15168., 13656., 14448., 15240., 16032., 14376., 15216.,
      16056., 16896., 15096., 15984., 16872., 17760., 9144.,  9840.,  10536.,
      11232., 9864.,  10608., 11352., 12096., 10584., 11376., 12168., 12960.,
      11304., 12144., 12984., 13824., 12024., 12912., 13800., 14688., 12216.,
      12912., 13608., 14304., 12936., 13680., 14424., 15168., 13656., 14448.,
      15240., 16032., 14376., 15216., 16056., 16896., 15096., 15984., 16872.,
      17760.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6786.,  7812.,  8946.,  10080., 11304., 12528., 10080., 11088., 8730.,
      9540.,  8349.,  9618.,  11025., 12432., 13956., 15480., 12516., 13776.,
      10905., 11922., 9048.,  10416., 11928., 13440., 15072., 16704., 13440.,
      14784., 11640., 12720., 7485.,  8610.,  9849.,  11088., 12420., 13752.,
      11004., 12096., 9465.,  10338., 6786.,  7812.,  8946.,  10080., 11304.,
      12528., 10080., 11088., 8730.,  9540.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8856.,  9520.,  10184., 10848., 11512., 12176., 12840., 13504., 14168.,
      14832., 7320.,  7984.,  8648.,  9312.,  9976.,  10640., 11304., 11968.,
      12632., 13296., 8856.,  9520.,  10184., 10848., 11512., 12176., 12840.,
      13504., 14168., 14832., 7320.,  7984.,  8648.,  9312.,  9976.,  10640.,
      11304., 11968., 12632., 13296., 8856.,  9520.,  10184., 10848., 11512.,
      12176., 12840., 13504., 14168., 14832.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7740.,  8388.,  8820.,  9576.,  9954.,  10836., 11088., 12096., 12240.,
      13392., 13392., 14688., 9954.,  11088., 10836., 12096., 7740.,  8820.,
      8388.,  9576.,  9030.,  9786.,  10290., 11172., 11613., 12642., 12936.,
      14112., 14280., 15624., 15624., 17136., 11613., 12936., 12642., 14112.,
      9030.,  10290., 9786.,  11172., 10320., 11184., 11760., 12768., 13272.,
      14448., 14784., 16128., 16320., 17856., 17856., 19584., 13272., 14784.,
      14448., 16128., 10320., 11760., 11184., 12768., 9030.,  9786.,  10290.,
      11172., 11613., 12642., 12936., 14112., 14280., 15624., 15624., 17136.,
      11613., 12936., 12642., 14112., 9030.,  10290., 9786.,  11172., 7740.,
      8388.,  8820.,  9576.,  9954.,  10836., 11088., 12096., 12240., 13392.,
      13392., 14688., 9954.,  11088., 10836., 12096., 7740.,  8820.,  8388.,
      9576.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10992., 11568., 11760., 12384., 12528., 13200., 13296., 14016., 14064.,
      14832., 14832., 15648., 15600., 16464., 16368., 17280., 17136., 18096.,
      17904., 18912., 7920.,  8496.,  8688.,  9312.,  9456.,  10128., 10224.,
      10944., 10992., 11760., 11760., 12576., 12528., 13392., 13296., 14208.,
      14064., 15024., 14832., 15840., 10992., 11568., 11760., 12384., 12528.,
      13200., 13296., 14016., 14064., 14832., 14832., 15648., 15600., 16464.,
      16368., 17280., 17136., 18096., 17904., 18912., 7920.,  8496.,  8688.,
      9312.,  9456.,  10128., 10224., 10944., 10992., 11760., 11760., 12576.,
      12528., 13392., 13296., 14208., 14064., 15024., 14832., 15840., 10992.,
      11568., 11760., 12384., 12528., 13200., 13296., 14016., 14064., 14832.,
      14832., 15648., 15600., 16464., 16368., 17280., 17136., 18096., 17904.,
      18912.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5616.,  6264.,  6912.,  7560.,  6516.,  7272.,  8028.,  8784.,  7506.,
      8388.,  9270.,  10152., 8496.,  9504.,  10512., 11520., 9504.,  10656.,
      11808., 12960., 10512., 11808., 13104., 14400., 7542.,  8676.,  9810.,
      10944., 8316.,  9576.,  10836., 12096., 6336.,  7416.,  8496.,  9576.,
      6948.,  8136.,  9324.,  10512., 6552.,  7308.,  8064.,  8820.,  7602.,
      8484.,  9366.,  10248., 8757.,  9786.,  10815., 11844., 9912.,  11088.,
      12264., 13440., 11088., 12432., 13776., 15120., 12264., 13776., 15288.,
      16800., 8799.,  10122., 11445., 12768., 9702.,  11172., 12642., 14112.,
      7392.,  8652.,  9912.,  11172., 8106.,  9492.,  10878., 12264., 7488.,
      8352.,  9216.,  10080., 8688.,  9696.,  10704., 11712., 10008., 11184.,
      12360., 13536., 11328., 12672., 14016., 15360., 12672., 14208., 15744.,
      17280., 14016., 15744., 17472., 19200., 10056., 11568., 13080., 14592.,
      11088., 12768., 14448., 16128., 8448.,  9888.,  11328., 12768., 9264.,
      10848., 12432., 14016., 6552.,  7308.,  8064.,  8820.,  7602.,  8484.,
      9366.,  10248., 8757.,  9786.,  10815., 11844., 9912.,  11088., 12264.,
      13440., 11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800.,
      8799.,  10122., 11445., 12768., 9702.,  11172., 12642., 14112., 7392.,
      8652.,  9912.,  11172., 8106.,  9492.,  10878., 12264., 5616.,  6264.,
      6912.,  7560.,  6516.,  7272.,  8028.,  8784.,  7506.,  8388.,  9270.,
      10152., 8496.,  9504.,  10512., 11520., 9504.,  10656., 11808., 12960.,
      10512., 11808., 13104., 14400., 7542.,  8676.,  9810.,  10944., 8316.,
      9576.,  10836., 12096., 6336.,  7416.,  8496.,  9576.,  6948.,  8136.,
      9324.,  10512.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12192., 12768., 13344., 13920., 12912., 13536., 14160., 14784., 13632.,
      14304., 14976., 15648., 14352., 15072., 15792., 16512., 15072., 15840.,
      16608., 17376., 15792., 16608., 17424., 18240., 16512., 17376., 18240.,
      19104., 17232., 18144., 19056., 19968., 17952., 18912., 19872., 20832.,
      18672., 19680., 20688., 21696., 6048.,  6624.,  7200.,  7776.,  6768.,
      7392.,  8016.,  8640.,  7488.,  8160.,  8832.,  9504.,  8208.,  8928.,
      9648.,  10368., 8928.,  9696.,  10464., 11232., 9648.,  10464., 11280.,
      12096., 10368., 11232., 12096., 12960., 11088., 12000., 12912., 13824.,
      11808., 12768., 13728., 14688., 12528., 13536., 14544., 15552., 12192.,
      12768., 13344., 13920., 12912., 13536., 14160., 14784., 13632., 14304.,
      14976., 15648., 14352., 15072., 15792., 16512., 15072., 15840., 16608.,
      17376., 15792., 16608., 17424., 18240., 16512., 17376., 18240., 19104.,
      17232., 18144., 19056., 19968., 17952., 18912., 19872., 20832., 18672.,
      19680., 20688., 21696., 6048.,  6624.,  7200.,  7776.,  6768.,  7392.,
      8016.,  8640.,  7488.,  8160.,  8832.,  9504.,  8208.,  8928.,  9648.,
      10368., 8928.,  9696.,  10464., 11232., 9648.,  10464., 11280., 12096.,
      10368., 11232., 12096., 12960., 11088., 12000., 12912., 13824., 11808.,
      12768., 13728., 14688., 12528., 13536., 14544., 15552., 12192., 12768.,
      13344., 13920., 12912., 13536., 14160., 14784., 13632., 14304., 14976.,
      15648., 14352., 15072., 15792., 16512., 15072., 15840., 16608., 17376.,
      15792., 16608., 17424., 18240., 16512., 17376., 18240., 19104., 17232.,
      18144., 19056., 19968., 17952., 18912., 19872., 20832., 18672., 19680.,
      20688., 21696.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5922.,  6948.,  7974.,  9000.,  7254.,  8388.,  9522.,  10656., 9288.,
      10512., 11736., 12960., 8208.,  9216.,  10224., 11232., 6858.,  7668.,
      8478.,  9288.,  7317.,  8586.,  9855.,  11124., 8979.,  10386., 11793.,
      13200., 11508., 13032., 14556., 16080., 10236., 11496., 12756., 14016.,
      8601.,  9618.,  10635., 11652., 7896.,  9264.,  10632., 12000., 9672.,
      11184., 12696., 14208., 12384., 14016., 15648., 17280., 10944., 12288.,
      13632., 14976., 9144.,  10224., 11304., 12384., 6501.,  7626.,  8751.,
      9876.,  7947.,  9186.,  10425., 11664., 10164., 11496., 12828., 14160.,
      8916.,  10008., 11100., 12192., 7401.,  8274.,  9147.,  10020., 5922.,
      6948.,  7974.,  9000.,  7254.,  8388.,  9522.,  10656., 9288.,  10512.,
      11736., 12960., 8208.,  9216.,  10224., 11232., 6858.,  7668.,  8478.,
      9288.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4888.,  5552.,  6216.,  6880.,  7544.,  8208.,  8872.,  9536.,  10200.,
      10864., 11528., 12192., 12856., 13520., 14184., 14848., 15512., 16176.,
      16840., 17504., 4888.,  5552.,  6216.,  6880.,  7544.,  8208.,  8872.,
      9536.,  10200., 10864., 11528., 12192., 12856., 13520., 14184., 14848.,
      15512., 16176., 16840., 17504., 4888.,  5552.,  6216.,  6880.,  7544.,
      8208.,  8872.,  9536.,  10200., 10864., 11528., 12192., 12856., 13520.,
      14184., 14848., 15512., 16176., 16840., 17504., 4888.,  5552.,  6216.,
      6880.,  7544.,  8208.,  8872.,  9536.,  10200., 10864., 11528., 12192.,
      12856., 13520., 14184., 14848., 15512., 16176., 16840., 17504., 4888.,
      5552.,  6216.,  6880.,  7544.,  8208.,  8872.,  9536.,  10200., 10864.,
      11528., 12192., 12856., 13520., 14184., 14848., 15512., 16176., 16840.,
      17504.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6336.,  6948.,  7416.,  8136.,  8496.,  9324.,  9576.,  10512., 7542.,
      8316.,  8676.,  9576.,  9810.,  10836., 10944., 12096., 9504.,  10512.,
      10656., 11808., 11808., 13104., 12960., 14400., 7506.,  8496.,  8388.,
      9504.,  9270.,  10512., 10152., 11520., 5616.,  6516.,  6264.,  7272.,
      6912.,  8028.,  7560.,  8784.,  7392.,  8106.,  8652.,  9492.,  9912.,
      10878., 11172., 12264., 8799.,  9702.,  10122., 11172., 11445., 12642.,
      12768., 14112., 11088., 12264., 12432., 13776., 13776., 15288., 15120.,
      16800., 8757.,  9912.,  9786.,  11088., 10815., 12264., 11844., 13440.,
      6552.,  7602.,  7308.,  8484.,  8064.,  9366.,  8820.,  10248., 8448.,
      9264.,  9888.,  10848., 11328., 12432., 12768., 14016., 10056., 11088.,
      11568., 12768., 13080., 14448., 14592., 16128., 12672., 14016., 14208.,
      15744., 15744., 17472., 17280., 19200., 10008., 11328., 11184., 12672.,
      12360., 14016., 13536., 15360., 7488.,  8688.,  8352.,  9696.,  9216.,
      10704., 10080., 11712., 7392.,  8106.,  8652.,  9492.,  9912.,  10878.,
      11172., 12264., 8799.,  9702.,  10122., 11172., 11445., 12642., 12768.,
      14112., 11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800.,
      8757.,  9912.,  9786.,  11088., 10815., 12264., 11844., 13440., 6552.,
      7602.,  7308.,  8484.,  8064.,  9366.,  8820.,  10248., 6336.,  6948.,
      7416.,  8136.,  8496.,  9324.,  9576.,  10512., 7542.,  8316.,  8676.,
      9576.,  9810.,  10836., 10944., 12096., 9504.,  10512., 10656., 11808.,
      11808., 13104., 12960., 14400., 7506.,  8496.,  8388.,  9504.,  9270.,
      10512., 10152., 11520., 5616.,  6516.,  6264.,  7272.,  6912.,  8028.,
      7560.,  8784.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5856.,  6192.,  6624.,  7008.,  7392.,  7824.,  8160.,  8640.,  8928.,
      9456.,  9696.,  10272., 10464., 11088., 11232., 11904., 12000., 12720.,
      12768., 13536., 13536., 14352., 14304., 15168., 15072., 15984., 15840.,
      16800., 16608., 17616., 17376., 18432., 18144., 19248., 18912., 20064.,
      19680., 20880., 20448., 21696., 5856.,  6192.,  6624.,  7008.,  7392.,
      7824.,  8160.,  8640.,  8928.,  9456.,  9696.,  10272., 10464., 11088.,
      11232., 11904., 12000., 12720., 12768., 13536., 13536., 14352., 14304.,
      15168., 15072., 15984., 15840., 16800., 16608., 17616., 17376., 18432.,
      18144., 19248., 18912., 20064., 19680., 20880., 20448., 21696., 5856.,
      6192.,  6624.,  7008.,  7392.,  7824.,  8160.,  8640.,  8928.,  9456.,
      9696.,  10272., 10464., 11088., 11232., 11904., 12000., 12720., 12768.,
      13536., 13536., 14352., 14304., 15168., 15072., 15984., 15840., 16800.,
      16608., 17616., 17376., 18432., 18144., 19248., 18912., 20064., 19680.,
      20880., 20448., 21696., 5856.,  6192.,  6624.,  7008.,  7392.,  7824.,
      8160.,  8640.,  8928.,  9456.,  9696.,  10272., 10464., 11088., 11232.,
      11904., 12000., 12720., 12768., 13536., 13536., 14352., 14304., 15168.,
      15072., 15984., 15840., 16800., 16608., 17616., 17376., 18432., 18144.,
      19248., 18912., 20064., 19680., 20880., 20448., 21696., 5856.,  6192.,
      6624.,  7008.,  7392.,  7824.,  8160.,  8640.,  8928.,  9456.,  9696.,
      10272., 10464., 11088., 11232., 11904., 12000., 12720., 12768., 13536.,
      13536., 14352., 14304., 15168., 15072., 15984., 15840., 16800., 16608.,
      17616., 17376., 18432., 18144., 19248., 18912., 20064., 19680., 20880.,
      20448., 21696.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3996.,  4608.,  5220.,  5832.,  4896.,  5616.,  6336.,  7056.,  5796.,
      6624.,  7452.,  8280.,  6696.,  7632.,  8568.,  9504.,  6246.,  7020.,
      7794.,  8568.,  7236.,  8136.,  9036.,  9936.,  8226.,  9252.,  10278.,
      11304., 9216.,  10368., 11520., 12672., 9936.,  10944., 11952., 12960.,
      10944., 12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960.,
      14400., 15840., 17280., 6246.,  7236.,  8226.,  9216.,  7020.,  8136.,
      9252.,  10368., 7794.,  9036.,  10278., 11520., 8568.,  9936.,  11304.,
      12672., 3996.,  4896.,  5796.,  6696.,  4608.,  5616.,  6624.,  7632.,
      5220.,  6336.,  7452.,  8568.,  5832.,  7056.,  8280.,  9504.,  4662.,
      5376.,  6090.,  6804.,  5712.,  6552.,  7392.,  8232.,  6762.,  7728.,
      8694.,  9660.,  7812.,  8904.,  9996.,  11088., 7287.,  8190.,  9093.,
      9996.,  8442.,  9492.,  10542., 11592., 9597.,  10794., 11991., 13188.,
      10752., 12096., 13440., 14784., 11592., 12768., 13944., 15120., 12768.,
      14112., 15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800.,
      18480., 20160., 7287.,  8442.,  9597.,  10752., 8190.,  9492.,  10794.,
      12096., 9093.,  10542., 11991., 13440., 9996.,  11592., 13188., 14784.,
      4662.,  5712.,  6762.,  7812.,  5376.,  6552.,  7728.,  8904.,  6090.,
      7392.,  8694.,  9996.,  6804.,  8232.,  9660.,  11088., 5328.,  6144.,
      6960.,  7776.,  6528.,  7488.,  8448.,  9408.,  7728.,  8832.,  9936.,
      11040., 8928.,  10176., 11424., 12672., 8328.,  9360.,  10392., 11424.,
      9648.,  10848., 12048., 13248., 10968., 12336., 13704., 15072., 12288.,
      13824., 15360., 16896., 13248., 14592., 15936., 17280., 14592., 16128.,
      17664., 19200., 15936., 17664., 19392., 21120., 17280., 19200., 21120.,
      23040., 8328.,  9648.,  10968., 12288., 9360.,  10848., 12336., 13824.,
      10392., 12048., 13704., 15360., 11424., 13248., 15072., 16896., 5328.,
      6528.,  7728.,  8928.,  6144.,  7488.,  8832.,  10176., 6960.,  8448.,
      9936.,  11424., 7776.,  9408.,  11040., 12672., 4662.,  5376.,  6090.,
      6804.,  5712.,  6552.,  7392.,  8232.,  6762.,  7728.,  8694.,  9660.,
      7812.,  8904.,  9996.,  11088., 7287.,  8190.,  9093.,  9996.,  8442.,
      9492.,  10542., 11592., 9597.,  10794., 11991., 13188., 10752., 12096.,
      13440., 14784., 11592., 12768., 13944., 15120., 12768., 14112., 15456.,
      16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480., 20160.,
      7287.,  8442.,  9597.,  10752., 8190.,  9492.,  10794., 12096., 9093.,
      10542., 11991., 13440., 9996.,  11592., 13188., 14784., 4662.,  5712.,
      6762.,  7812.,  5376.,  6552.,  7728.,  8904.,  6090.,  7392.,  8694.,
      9996.,  6804.,  8232.,  9660.,  11088., 3996.,  4608.,  5220.,  5832.,
      4896.,  5616.,  6336.,  7056.,  5796.,  6624.,  7452.,  8280.,  6696.,
      7632.,  8568.,  9504.,  6246.,  7020.,  7794.,  8568.,  7236.,  8136.,
      9036.,  9936.,  8226.,  9252.,  10278., 11304., 9216.,  10368., 11520.,
      12672., 9936.,  10944., 11952., 12960., 10944., 12096., 13248., 14400.,
      11952., 13248., 14544., 15840., 12960., 14400., 15840., 17280., 6246.,
      7236.,  8226.,  9216.,  7020.,  8136.,  9252.,  10368., 7794.,  9036.,
      10278., 11520., 8568.,  9936.,  11304., 12672., 3996.,  4896.,  5796.,
      6696.,  4608.,  5616.,  6624.,  7632.,  5220.,  6336.,  7452.,  8568.,
      5832.,  7056.,  8280.,  9504.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,  6336.,  6672.,  7008.,  6720.,  7104.,  7488.,  7872.,  7440.,
      7872.,  8304.,  8736.,  8160.,  8640.,  9120.,  9600.,  8880.,  9408.,
      9936.,  10464., 9600.,  10176., 10752., 11328., 10320., 10944., 11568.,
      12192., 11040., 11712., 12384., 13056., 11760., 12480., 13200., 13920.,
      12480., 13248., 14016., 14784., 13200., 14016., 14832., 15648., 13920.,
      14784., 15648., 16512., 14640., 15552., 16464., 17376., 15360., 16320.,
      17280., 18240., 16080., 17088., 18096., 19104., 16800., 17856., 18912.,
      19968., 17520., 18624., 19728., 20832., 18240., 19392., 20544., 21696.,
      18960., 20160., 21360., 22560., 19680., 20928., 22176., 23424., 6000.,
      6336.,  6672.,  7008.,  6720.,  7104.,  7488.,  7872.,  7440.,  7872.,
      8304.,  8736.,  8160.,  8640.,  9120.,  9600.,  8880.,  9408.,  9936.,
      10464., 9600.,  10176., 10752., 11328., 10320., 10944., 11568., 12192.,
      11040., 11712., 12384., 13056., 11760., 12480., 13200., 13920., 12480.,
      13248., 14016., 14784., 13200., 14016., 14832., 15648., 13920., 14784.,
      15648., 16512., 14640., 15552., 16464., 17376., 15360., 16320., 17280.,
      18240., 16080., 17088., 18096., 19104., 16800., 17856., 18912., 19968.,
      17520., 18624., 19728., 20832., 18240., 19392., 20544., 21696., 18960.,
      20160., 21360., 22560., 19680., 20928., 22176., 23424., 6000.,  6336.,
      6672.,  7008.,  6720.,  7104.,  7488.,  7872.,  7440.,  7872.,  8304.,
      8736.,  8160.,  8640.,  9120.,  9600.,  8880.,  9408.,  9936.,  10464.,
      9600.,  10176., 10752., 11328., 10320., 10944., 11568., 12192., 11040.,
      11712., 12384., 13056., 11760., 12480., 13200., 13920., 12480., 13248.,
      14016., 14784., 13200., 14016., 14832., 15648., 13920., 14784., 15648.,
      16512., 14640., 15552., 16464., 17376., 15360., 16320., 17280., 18240.,
      16080., 17088., 18096., 19104., 16800., 17856., 18912., 19968., 17520.,
      18624., 19728., 20832., 18240., 19392., 20544., 21696., 18960., 20160.,
      21360., 22560., 19680., 20928., 22176., 23424., 6000.,  6336.,  6672.,
      7008.,  6720.,  7104.,  7488.,  7872.,  7440.,  7872.,  8304.,  8736.,
      8160.,  8640.,  9120.,  9600.,  8880.,  9408.,  9936.,  10464., 9600.,
      10176., 10752., 11328., 10320., 10944., 11568., 12192., 11040., 11712.,
      12384., 13056., 11760., 12480., 13200., 13920., 12480., 13248., 14016.,
      14784., 13200., 14016., 14832., 15648., 13920., 14784., 15648., 16512.,
      14640., 15552., 16464., 17376., 15360., 16320., 17280., 18240., 16080.,
      17088., 18096., 19104., 16800., 17856., 18912., 19968., 17520., 18624.,
      19728., 20832., 18240., 19392., 20544., 21696., 18960., 20160., 21360.,
      22560., 19680., 20928., 22176., 23424., 6000.,  6336.,  6672.,  7008.,
      6720.,  7104.,  7488.,  7872.,  7440.,  7872.,  8304.,  8736.,  8160.,
      8640.,  9120.,  9600.,  8880.,  9408.,  9936.,  10464., 9600.,  10176.,
      10752., 11328., 10320., 10944., 11568., 12192., 11040., 11712., 12384.,
      13056., 11760., 12480., 13200., 13920., 12480., 13248., 14016., 14784.,
      13200., 14016., 14832., 15648., 13920., 14784., 15648., 16512., 14640.,
      15552., 16464., 17376., 15360., 16320., 17280., 18240., 16080., 17088.,
      18096., 19104., 16800., 17856., 18912., 19968., 17520., 18624., 19728.,
      20832., 18240., 19392., 20544., 21696., 18960., 20160., 21360., 22560.,
      19680., 20928., 22176., 23424.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}