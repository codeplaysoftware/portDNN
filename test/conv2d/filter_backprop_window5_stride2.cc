/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;


template <typename Pair>
using FilterBackpropWindow5Stride2 = WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(FilterBackpropWindow5Stride2, GTestTypeTriples);
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2031., 2130., 2746., 1968., 2058., 2724., 2823., 3628., 2598., 2688., 3448., 3556., 4560., 3256., 3352., 1860., 1923., 2428., 1698., 1752., 2301., 2364., 2974., 2076., 2130.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 130., 140., 150., 160., 190., 200., 210., 220., 230., 260., 270., 280., 290., 300., 330., 340., 350., 360., 370., 400., 410., 420., 430., 440.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3909., 4062., 4098., 4260., 5276., 5492., 3774., 3936., 3945., 4116., 5232., 5448., 5421., 5646., 6956., 7256., 4971., 5196., 5142., 5376., 6608., 6896., 6812., 7112., 8720., 9120., 6212., 6512., 6392., 6704., 3504., 3720., 3621., 3846., 4556., 4856., 3171., 3396., 3270., 3504., 4323., 4602., 4440., 4728., 5564., 5948., 3864., 4152., 3963., 4260.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {204., 240., 220., 260., 236., 280., 252., 300., 268., 320., 316., 380., 332., 400., 348., 420., 364., 440., 380., 460., 428., 520., 444., 540., 460., 560., 476., 580., 492., 600., 540., 660., 556., 680., 572., 700., 588., 720., 604., 740., 652., 800., 668., 820., 684., 840., 700., 860., 716., 880.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7665.,  7818.,  7971.,  8124.,  8034.,  8196.,  8358.,  8520., 10336., 10552., 10768., 10984.,  7386.,  7548.,  7710.,  7872.,  7719.,  7890.,  8061.,  8232., 10248., 10464., 10680., 10896., 10617., 10842., 11067., 11292., 13612., 13912., 14212., 14512.,  9717.,  9942., 10167., 10392., 10050., 10284., 10518., 10752., 12928., 13216., 13504., 13792., 13324., 13624., 13924., 14224., 17040., 17440., 17840., 18240., 12124., 12424., 12724., 13024., 12472., 12784., 13096., 13408.,  6792.,  7008.,  7224.,  7440.,  7017.,  7242.,  7467.,  7692.,  8812.,  9112.,  9412.,  9712.,  6117.,  6342.,  6567.,  6792.,  6306.,  6540.,  6774.,  7008.,  8367.,  8646.,  8925.,  9204.,  8592.,  8880.,  9168.,  9456., 10744., 11128., 11512., 11896.,  7440.,  7728.,  8016.,  8304.,  7629.,  7926.,  8223.,  8520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 372.,  408.,  444.,  480.,  400.,  440.,  480.,  520.,  428.,  472.,  516.,  560.,  456.,  504.,  552.,  600.,  484.,  536.,  588.,  640.,  568.,  632.,  696.,  760.,  596.,  664.,  732.,  800.,  624.,  696.,  768.,  840.,  652.,  728.,  804.,  880.,  680.,  760.,  840.,  920.,  764.,  856.,  948., 1040.,  792.,  888.,  984., 1080.,  820.,  920., 1020., 1120.,  848.,  952., 1056., 1160.,  876.,  984., 1092., 1200.,  960., 1080., 1200., 1320.,  988., 1112., 1236., 1360., 1016., 1144., 1272., 1400., 1044., 1176., 1308., 1440., 1072., 1208., 1344., 1480., 1156., 1304., 1452., 1600., 1184., 1336., 1488., 1640., 1212., 1368., 1524., 1680., 1240., 1400., 1560., 1720., 1268., 1432., 1596., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3963., 4062., 4161., 4260., 5366., 5492., 3846., 3936., 4026., 4116., 5349., 5448., 5547., 5646., 7130., 7256., 5106., 5196., 5286., 5376., 6788., 6896., 7004., 7112., 8984., 9120., 6416., 6512., 6608., 6704., 3657., 3720., 3783., 3846., 4778., 4856., 3342., 3396., 3450., 3504., 4539., 4602., 4665., 4728., 5870., 5948., 4098., 4152., 4206., 4260.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {230., 240., 250., 260., 270., 280., 290., 300., 310., 320., 370., 380., 390., 400., 410., 420., 430., 440., 450., 460., 510., 520., 530., 540., 550., 560., 570., 580., 590., 600., 650., 660., 670., 680., 690., 700., 710., 720., 730., 740., 790., 800., 810., 820., 830., 840., 850., 860., 870., 880.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7629.,  7926.,  7818.,  8124.,  8007.,  8322.,  8196.,  8520., 10312., 10732., 10552., 10984.,  7377.,  7692.,  7548.,  7872.,  7719.,  8052.,  7890.,  8232., 10275., 10698., 10464., 10896., 10653., 11094., 10842., 11292., 13672., 14260., 13912., 14512.,  9771., 10212.,  9942., 10392., 10113., 10572., 10284., 10752., 13012., 13576., 13216., 13792., 13420., 14008., 13624., 14224., 17184., 17968., 17440., 18240., 12244., 12832., 12424., 13024., 12604., 13216., 12784., 13408.,  6891.,  7314.,  7008.,  7440.,  7125.,  7566.,  7242.,  7692.,  8968.,  9556.,  9112.,  9712.,  6243.,  6684.,  6342.,  6792.,  6441.,  6900.,  6540.,  7008.,  8529.,  9078.,  8646.,  9204.,  8763.,  9330.,  8880.,  9456., 10984., 11740., 11128., 11896.,  7629.,  8196.,  7728.,  8304.,  7827.,  8412.,  7926.,  8520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 392.,  460.,  408.,  480.,  424.,  500.,  440.,  520.,  456.,  540.,  472.,  560.,  488.,  580.,  504.,  600.,  520.,  620.,  536.,  640.,  616.,  740.,  632.,  760.,  648.,  780.,  664.,  800.,  680.,  820.,  696.,  840.,  712.,  860.,  728.,  880.,  744.,  900.,  760.,  920.,  840., 1020.,  856., 1040.,  872., 1060.,  888., 1080.,  904., 1100.,  920., 1120.,  936., 1140.,  952., 1160.,  968., 1180.,  984., 1200., 1064., 1300., 1080., 1320., 1096., 1340., 1112., 1360., 1128., 1380., 1144., 1400., 1160., 1420., 1176., 1440., 1192., 1460., 1208., 1480., 1288., 1580., 1304., 1600., 1320., 1620., 1336., 1640., 1352., 1660., 1368., 1680., 1384., 1700., 1400., 1720., 1416., 1740., 1432., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11057., 11290., 11523., 11756., 11426., 11668., 11910., 12152., 11795., 12046., 12297., 12548., 12164., 12424., 12684., 12944., 12652., 12944., 13236., 13528., 13120., 13424., 13728., 14032., 10791., 11042., 11293., 11544., 11124., 11384., 11644., 11904.,  8065.,  8270.,  8475.,  8680.,  8398.,  8612.,  8826.,  9040.,  9183.,  9414.,  9645.,  9876.,  9552.,  9792., 10032., 10272.,  9921., 10170., 10419., 10668., 10290., 10548., 10806., 11064., 12676., 13008., 13340., 13672., 13144., 13488., 13832., 14176.,  8925.,  9174.,  9423.,  9672.,  9258.,  9516.,  9774., 10032.,  9591.,  9858., 10125., 10392.,  9924., 10200., 10476., 10752., 11636., 11944., 12252., 12560., 12032., 12352., 12672., 12992., 12428., 12760., 13092., 13424., 12824., 13168., 13512., 13856., 14000., 14400., 14800., 15200., 14496., 14912., 15328., 15744., 11100., 11432., 11764., 12096., 11448., 11792., 12136., 12480.,  9428.,  9720., 10012., 10304.,  9776., 10080., 10384., 10688.,  5487.,  5718.,  5949.,  6180.,  5712.,  5952.,  6192.,  6432.,  5937.,  6186.,  6435.,  6684.,  6162.,  6420.,  6678.,  6936.,  7364.,  7696.,  8028.,  8360.,  7640.,  7984.,  8328.,  8672.,  4941.,  5190.,  5439.,  5688.,  5130.,  5388.,  5646.,  5904.,  5319.,  5586.,  5853.,  6120.,  5508.,  5784.,  6060.,  6336.,  6781.,  7074.,  7367.,  7660.,  7006.,  7308.,  7610.,  7912.,  7231.,  7542.,  7853.,  8164.,  7456.,  7776.,  8096.,  8416.,  7772.,  8144.,  8516.,  8888.,  8048.,  8432.,  8816.,  9200.,  5987.,  6298.,  6609.,  6920.,  6176.,  6496.,  6816.,  7136.,  5021.,  5286.,  5551.,  5816.,  5210.,  5484.,  5758.,  6032.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 716.,  784.,  852.,  920.,  744.,  816.,  888.,  960.,  772.,  848.,  924., 1000.,  800.,  880.,  960., 1040.,  828.,  912.,  996., 1080.,  856.,  944., 1032., 1120.,  884.,  976., 1068., 1160.,  912., 1008., 1104., 1200.,  940., 1040., 1140., 1240.,  968., 1072., 1176., 1280., 1108., 1232., 1356., 1480., 1136., 1264., 1392., 1520., 1164., 1296., 1428., 1560., 1192., 1328., 1464., 1600., 1220., 1360., 1500., 1640., 1248., 1392., 1536., 1680., 1276., 1424., 1572., 1720., 1304., 1456., 1608., 1760., 1332., 1488., 1644., 1800., 1360., 1520., 1680., 1840., 1500., 1680., 1860., 2040., 1528., 1712., 1896., 2080., 1556., 1744., 1932., 2120., 1584., 1776., 1968., 2160., 1612., 1808., 2004., 2200., 1640., 1840., 2040., 2240., 1668., 1872., 2076., 2280., 1696., 1904., 2112., 2320., 1724., 1936., 2148., 2360., 1752., 1968., 2184., 2400., 1892., 2128., 2364., 2600., 1920., 2160., 2400., 2640., 1948., 2192., 2436., 2680., 1976., 2224., 2472., 2720., 2004., 2256., 2508., 2760., 2032., 2288., 2544., 2800., 2060., 2320., 2580., 2840., 2088., 2352., 2616., 2880., 2116., 2384., 2652., 2920., 2144., 2416., 2688., 2960., 2284., 2576., 2868., 3160., 2312., 2608., 2904., 3200., 2340., 2640., 2940., 3240., 2368., 2672., 2976., 3280., 2396., 2704., 3012., 3320., 2424., 2736., 3048., 3360., 2452., 2768., 3084., 3400., 2480., 2800., 3120., 3440., 2508., 2832., 3156., 3480., 2536., 2864., 3192., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7827.,  7926.,  8025.,  8124.,  8223.,  8322.,  8421.,  8520., 10606., 10732., 10858., 10984.,  7602.,  7692.,  7782.,  7872.,  7962.,  8052.,  8142.,  8232., 10599., 10698., 10797., 10896., 10995., 11094., 11193., 11292., 14134., 14260., 14386., 14512., 10122., 10212., 10302., 10392., 10482., 10572., 10662., 10752., 13468., 13576., 13684., 13792., 13900., 14008., 14116., 14224., 17832., 17968., 18104., 18240., 12736., 12832., 12928., 13024., 13120., 13216., 13312., 13408.,  7251.,  7314.,  7377.,  7440.,  7503.,  7566.,  7629.,  7692.,  9478.,  9556.,  9634.,  9712.,  6630.,  6684.,  6738.,  6792.,  6846.,  6900.,  6954.,  7008.,  9015.,  9078.,  9141.,  9204.,  9267.,  9330.,  9393.,  9456., 11662., 11740., 11818., 11896.,  8142.,  8196.,  8250.,  8304.,  8358.,  8412.,  8466.,  8520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 450.,  460.,  470.,  480.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,  610.,  620.,  630.,  640.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  890.,  900.,  910.,  920., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120., 1130., 1140., 1150., 1160., 1170., 1180., 1190., 1200., 1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380., 1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460., 1470., 1480., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740., 1750., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11101., 11558., 11290., 11756., 11479., 11954., 11668., 12152., 11857., 12350., 12046., 12548., 12235., 12746., 12424., 12944., 12704., 13276., 12944., 13528., 13184., 13780., 13424., 14032., 10871., 11364., 11042., 11544., 11213., 11724., 11384., 11904.,  8099.,  8500.,  8270.,  8680.,  8441.,  8860.,  8612.,  9040.,  9225.,  9678.,  9414.,  9876.,  9603., 10074.,  9792., 10272.,  9981., 10470., 10170., 10668., 10359., 10866., 10548., 11064., 12768., 13420., 13008., 13672., 13248., 13924., 13488., 14176.,  9003.,  9492.,  9174.,  9672.,  9345.,  9852.,  9516., 10032.,  9687., 10212.,  9858., 10392., 10029., 10572., 10200., 10752., 11740., 12344., 11944., 12560., 12148., 12776., 12352., 12992., 12556., 13208., 12760., 13424., 12964., 13640., 13168., 13856., 14144., 14928., 14400., 15200., 14656., 15472., 14912., 15744., 11252., 11904., 11432., 12096., 11612., 12288., 11792., 12480.,  9540., 10112.,  9720., 10304.,  9900., 10496., 10080., 10688.,  5601.,  6054.,  5718.,  6180.,  5835.,  6306.,  5952.,  6432.,  6069.,  6558.,  6186.,  6684.,  6303.,  6810.,  6420.,  6936.,  7552.,  8204.,  7696.,  8360.,  7840.,  8516.,  7984.,  8672.,  5091.,  5580.,  5190.,  5688.,  5289.,  5796.,  5388.,  5904.,  5487.,  6012.,  5586.,  6120.,  5685.,  6228.,  5784.,  6336.,  6957.,  7534.,  7074.,  7660.,  7191.,  7786.,  7308.,  7912.,  7425.,  8038.,  7542.,  8164.,  7659.,  8290.,  7776.,  8416.,  8000.,  8732.,  8144.,  8888.,  8288.,  9044.,  8432.,  9200.,  6199.,  6812.,  6298.,  6920.,  6397.,  7028.,  6496.,  7136.,  5187.,  5708.,  5286.,  5816.,  5385.,  5924.,  5484.,  6032.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 768.,  900.,  784.,  920.,  800.,  940.,  816.,  960.,  832.,  980.,  848., 1000.,  864., 1020.,  880., 1040.,  896., 1060.,  912., 1080.,  928., 1100.,  944., 1120.,  960., 1140.,  976., 1160.,  992., 1180., 1008., 1200., 1024., 1220., 1040., 1240., 1056., 1260., 1072., 1280., 1216., 1460., 1232., 1480., 1248., 1500., 1264., 1520., 1280., 1540., 1296., 1560., 1312., 1580., 1328., 1600., 1344., 1620., 1360., 1640., 1376., 1660., 1392., 1680., 1408., 1700., 1424., 1720., 1440., 1740., 1456., 1760., 1472., 1780., 1488., 1800., 1504., 1820., 1520., 1840., 1664., 2020., 1680., 2040., 1696., 2060., 1712., 2080., 1728., 2100., 1744., 2120., 1760., 2140., 1776., 2160., 1792., 2180., 1808., 2200., 1824., 2220., 1840., 2240., 1856., 2260., 1872., 2280., 1888., 2300., 1904., 2320., 1920., 2340., 1936., 2360., 1952., 2380., 1968., 2400., 2112., 2580., 2128., 2600., 2144., 2620., 2160., 2640., 2176., 2660., 2192., 2680., 2208., 2700., 2224., 2720., 2240., 2740., 2256., 2760., 2272., 2780., 2288., 2800., 2304., 2820., 2320., 2840., 2336., 2860., 2352., 2880., 2368., 2900., 2384., 2920., 2400., 2940., 2416., 2960., 2560., 3140., 2576., 3160., 2592., 3180., 2608., 3200., 2624., 3220., 2640., 3240., 2656., 3260., 2672., 3280., 2688., 3300., 2704., 3320., 2720., 3340., 2736., 3360., 2752., 3380., 2768., 3400., 2784., 3420., 2800., 3440., 2816., 3460., 2832., 3480., 2848., 3500., 2864., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21745., 22202., 22659., 23116., 22114., 22580., 23046., 23512., 22483., 22958., 23433., 23908., 22852., 23336., 23820., 24304., 23221., 23714., 24207., 24700., 23590., 24092., 24594., 25096., 23959., 24470., 24981., 25492., 24328., 24848., 25368., 25888., 24836., 25408., 25980., 26552., 25304., 25888., 26472., 27056., 25772., 26368., 26964., 27560., 26240., 26848., 27456., 28064., 21249., 21742., 22235., 22728., 21582., 22084., 22586., 23088., 21915., 22426., 22937., 23448., 22248., 22768., 23288., 23808., 15797., 16198., 16599., 17000., 16130., 16540., 16950., 17360., 16463., 16882., 17301., 17720., 16796., 17224., 17652., 18080., 17997., 18450., 18903., 19356., 18366., 18828., 19290., 19752., 18735., 19206., 19677., 20148., 19104., 19584., 20064., 20544., 19473., 19962., 20451., 20940., 19842., 20340., 20838., 21336., 20211., 20718., 21225., 21732., 20580., 21096., 21612., 22128., 24884., 25536., 26188., 26840., 25352., 26016., 26680., 27344., 25820., 26496., 27172., 27848., 26288., 26976., 27664., 28352., 17517., 18006., 18495., 18984., 17850., 18348., 18846., 19344., 18183., 18690., 19197., 19704., 18516., 19032., 19548., 20064., 18849., 19374., 19899., 20424., 19182., 19716., 20250., 20784., 19515., 20058., 20601., 21144., 19848., 20400., 20952., 21504., 22876., 23480., 24084., 24688., 23272., 23888., 24504., 25120., 23668., 24296., 24924., 25552., 24064., 24704., 25344., 25984., 24460., 25112., 25764., 26416., 24856., 25520., 26184., 26848., 25252., 25928., 26604., 27280., 25648., 26336., 27024., 27712., 27504., 28288., 29072., 29856., 28000., 28800., 29600., 30400., 28496., 29312., 30128., 30944., 28992., 29824., 30656., 31488., 21852., 22504., 23156., 23808., 22200., 22864., 23528., 24192., 22548., 23224., 23900., 24576., 22896., 23584., 24272., 24960., 18508., 19080., 19652., 20224., 18856., 19440., 20024., 20608., 19204., 19800., 20396., 20992., 19552., 20160., 20768., 21376., 10749., 11202., 11655., 12108., 10974., 11436., 11898., 12360., 11199., 11670., 12141., 12612., 11424., 11904., 12384., 12864., 11649., 12138., 12627., 13116., 11874., 12372., 12870., 13368., 12099., 12606., 13113., 13620., 12324., 12840., 13356., 13872., 14452., 15104., 15756., 16408., 14728., 15392., 16056., 16720., 15004., 15680., 16356., 17032., 15280., 15968., 16656., 17344.,  9693., 10182., 10671., 11160.,  9882., 10380., 10878., 11376., 10071., 10578., 11085., 11592., 10260., 10776., 11292., 11808., 10449., 10974., 11499., 12024., 10638., 11172., 11706., 12240., 10827., 11370., 11913., 12456., 11016., 11568., 12120., 12672., 13337., 13914., 14491., 15068., 13562., 14148., 14734., 15320., 13787., 14382., 14977., 15572., 14012., 14616., 15220., 15824., 14237., 14850., 15463., 16076., 14462., 15084., 15706., 16328., 14687., 15318., 15949., 16580., 14912., 15552., 16192., 16832., 15268., 16000., 16732., 17464., 15544., 16288., 17032., 17776., 15820., 16576., 17332., 18088., 16096., 16864., 17632., 18400., 11785., 12398., 13011., 13624., 11974., 12596., 13218., 13840., 12163., 12794., 13425., 14056., 12352., 12992., 13632., 14272.,  9853., 10374., 10895., 11416., 10042., 10572., 11102., 11632., 10231., 10770., 11309., 11848., 10420., 10968., 11516., 12064.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1404., 1536., 1668., 1800., 1432., 1568., 1704., 1840., 1460., 1600., 1740., 1880., 1488., 1632., 1776., 1920., 1516., 1664., 1812., 1960., 1544., 1696., 1848., 2000., 1572., 1728., 1884., 2040., 1600., 1760., 1920., 2080., 1628., 1792., 1956., 2120., 1656., 1824., 1992., 2160., 1684., 1856., 2028., 2200., 1712., 1888., 2064., 2240., 1740., 1920., 2100., 2280., 1768., 1952., 2136., 2320., 1796., 1984., 2172., 2360., 1824., 2016., 2208., 2400., 1852., 2048., 2244., 2440., 1880., 2080., 2280., 2480., 1908., 2112., 2316., 2520., 1936., 2144., 2352., 2560., 2188., 2432., 2676., 2920., 2216., 2464., 2712., 2960., 2244., 2496., 2748., 3000., 2272., 2528., 2784., 3040., 2300., 2560., 2820., 3080., 2328., 2592., 2856., 3120., 2356., 2624., 2892., 3160., 2384., 2656., 2928., 3200., 2412., 2688., 2964., 3240., 2440., 2720., 3000., 3280., 2468., 2752., 3036., 3320., 2496., 2784., 3072., 3360., 2524., 2816., 3108., 3400., 2552., 2848., 3144., 3440., 2580., 2880., 3180., 3480., 2608., 2912., 3216., 3520., 2636., 2944., 3252., 3560., 2664., 2976., 3288., 3600., 2692., 3008., 3324., 3640., 2720., 3040., 3360., 3680., 2972., 3328., 3684., 4040., 3000., 3360., 3720., 4080., 3028., 3392., 3756., 4120., 3056., 3424., 3792., 4160., 3084., 3456., 3828., 4200., 3112., 3488., 3864., 4240., 3140., 3520., 3900., 4280., 3168., 3552., 3936., 4320., 3196., 3584., 3972., 4360., 3224., 3616., 4008., 4400., 3252., 3648., 4044., 4440., 3280., 3680., 4080., 4480., 3308., 3712., 4116., 4520., 3336., 3744., 4152., 4560., 3364., 3776., 4188., 4600., 3392., 3808., 4224., 4640., 3420., 3840., 4260., 4680., 3448., 3872., 4296., 4720., 3476., 3904., 4332., 4760., 3504., 3936., 4368., 4800., 3756., 4224., 4692., 5160., 3784., 4256., 4728., 5200., 3812., 4288., 4764., 5240., 3840., 4320., 4800., 5280., 3868., 4352., 4836., 5320., 3896., 4384., 4872., 5360., 3924., 4416., 4908., 5400., 3952., 4448., 4944., 5440., 3980., 4480., 4980., 5480., 4008., 4512., 5016., 5520., 4036., 4544., 5052., 5560., 4064., 4576., 5088., 5600., 4092., 4608., 5124., 5640., 4120., 4640., 5160., 5680., 4148., 4672., 5196., 5720., 4176., 4704., 5232., 5760., 4204., 4736., 5268., 5800., 4232., 4768., 5304., 5840., 4260., 4800., 5340., 5880., 4288., 4832., 5376., 5920., 4540., 5120., 5700., 6280., 4568., 5152., 5736., 6320., 4596., 5184., 5772., 6360., 4624., 5216., 5808., 6400., 4652., 5248., 5844., 6440., 4680., 5280., 5880., 6480., 4708., 5312., 5916., 6520., 4736., 5344., 5952., 6560., 4764., 5376., 5988., 6600., 4792., 5408., 6024., 6640., 4820., 5440., 6060., 6680., 4848., 5472., 6096., 6720., 4876., 5504., 6132., 6760., 4904., 5536., 6168., 6800., 4932., 5568., 6204., 6840., 4960., 5600., 6240., 6880., 4988., 5632., 6276., 6920., 5016., 5664., 6312., 6960., 5044., 5696., 6348., 7000., 5072., 5728., 6384., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2376., 3062., 3188., 2286., 2376., 3168., 4070., 4196., 3006., 3096., 4000., 5128., 5264., 3760., 3856., 2160., 2726., 2804., 1962., 2016., 2664., 3350., 3428., 2394., 2448.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {134., 144., 154., 164., 174., 214., 224., 234., 244., 254., 294., 304., 314., 324., 334., 374., 384., 394., 404., 414., 454., 464., 474., 484., 494.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4572.,  4752.,  5884.,  6124.,  6124.,  6376.,  4383.,  4572.,  4554.,  4752.,  6084.,  6336.,  7804.,  8140.,  8044.,  8392.,  5751.,  6012.,  5922.,  6192.,  7664.,  8000.,  9808., 10256., 10064., 10528.,  7172.,  7520.,  7352.,  7712.,  4068.,  4320.,  5116.,  5452.,  5260.,  5608.,  3663.,  3924.,  3762.,  4032.,  5004.,  5328.,  6268.,  6700.,  6412.,  6856.,  4455.,  4788.,  4554.,  4896.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {228., 268., 244., 288., 260., 308., 276., 328., 292., 348., 356., 428., 372., 448., 388., 468., 404., 488., 420., 508., 484., 588., 500., 608., 516., 628., 532., 648., 548., 668., 612., 748., 628., 768., 644., 788., 660., 808., 676., 828., 740., 908., 756., 928., 772., 948., 788., 968., 804., 988.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8964.,  9144.,  9324.,  9504., 11528., 11768., 12008., 12248., 11996., 12248., 12500., 12752.,  8577.,  8766.,  8955.,  9144.,  8910.,  9108.,  9306.,  9504., 11916., 12168., 12420., 12672., 15272., 15608., 15944., 16280., 15740., 16088., 16436., 16784., 11241., 11502., 11763., 12024., 11574., 11844., 12114., 12384., 14992., 15328., 15664., 16000., 19168., 19616., 20064., 20512., 19664., 20128., 20592., 21056., 13996., 14344., 14692., 15040., 14344., 14704., 15064., 15424.,  7884.,  8136.,  8388.,  8640.,  9896., 10232., 10568., 10904., 10172., 10520., 10868., 11216.,  7065.,  7326.,  7587.,  7848.,  7254.,  7524.,  7794.,  8064.,  9684., 10008., 10332., 10656., 12104., 12536., 12968., 13400., 12380., 12824., 13268., 13712.,  8577.,  8910.,  9243.,  9576.,  8766.,  9108.,  9450.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 416.,  456.,  496.,  536.,  444.,  488.,  532.,  576.,  472.,  520.,  568.,  616.,  500.,  552.,  604.,  656.,  528.,  584.,  640.,  696.,  640.,  712.,  784.,  856.,  668.,  744.,  820.,  896.,  696.,  776.,  856.,  936.,  724.,  808.,  892.,  976.,  752.,  840.,  928., 1016.,  864.,  968., 1072., 1176.,  892., 1000., 1108., 1216.,  920., 1032., 1144., 1256.,  948., 1064., 1180., 1296.,  976., 1096., 1216., 1336., 1088., 1224., 1360., 1496., 1116., 1256., 1396., 1536., 1144., 1288., 1432., 1576., 1172., 1320., 1468., 1616., 1200., 1352., 1504., 1656., 1312., 1480., 1648., 1816., 1340., 1512., 1684., 1856., 1368., 1544., 1720., 1896., 1396., 1576., 1756., 1936., 1424., 1608., 1792., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4653.,  4752.,  5998.,  6124.,  6250.,  6376.,  4482.,  4572.,  4662.,  4752.,  6237.,  6336.,  8014.,  8140.,  8266.,  8392.,  5922.,  6012.,  6102.,  6192.,  7892.,  8000., 10120., 10256., 10392., 10528.,  7424.,  7520.,  7616.,  7712.,  4257.,  4320.,  5374.,  5452.,  5530.,  5608.,  3870.,  3924.,  3978.,  4032.,  5265.,  5328.,  6622.,  6700.,  6778.,  6856.,  4734.,  4788.,  4842.,  4896.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {258., 268., 278., 288., 298., 308., 318., 328., 338., 348., 418., 428., 438., 448., 458., 468., 478., 488., 498., 508., 578., 588., 598., 608., 618., 628., 638., 648., 658., 668., 738., 748., 758., 768., 778., 788., 798., 808., 818., 828., 898., 908., 918., 928., 938., 948., 958., 968., 978., 988.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8955.,  9306.,  9144.,  9504., 11528., 11996., 11768., 12248., 12008., 12500., 12248., 12752.,  8595.,  8964.,  8766.,  9144.,  8937.,  9324.,  9108.,  9504., 11979., 12474., 12168., 12672., 15368., 16028., 15608., 16280., 15848., 16532., 16088., 16784., 11331., 11844., 11502., 12024., 11673., 12204., 11844., 12384., 15124., 15784., 15328., 16000., 19360., 20240., 19616., 20512., 19872., 20784., 20128., 21056., 14164., 14848., 14344., 15040., 14524., 15232., 14704., 15424.,  8019.,  8514.,  8136.,  8640., 10088., 10748., 10232., 10904., 10376., 11060., 10520., 11216.,  7227.,  7740.,  7326.,  7848.,  7425.,  7956.,  7524.,  8064.,  9891., 10530., 10008., 10656., 12392., 13244., 12536., 13400., 12680., 13556., 12824., 13712.,  8811.,  9468.,  8910.,  9576.,  9009.,  9684.,  9108.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 440.,  516.,  456.,  536.,  472.,  556.,  488.,  576.,  504.,  596.,  520.,  616.,  536.,  636.,  552.,  656.,  568.,  676.,  584.,  696.,  696.,  836.,  712.,  856.,  728.,  876.,  744.,  896.,  760.,  916.,  776.,  936.,  792.,  956.,  808.,  976.,  824.,  996.,  840., 1016.,  952., 1156.,  968., 1176.,  984., 1196., 1000., 1216., 1016., 1236., 1032., 1256., 1048., 1276., 1064., 1296., 1080., 1316., 1096., 1336., 1208., 1476., 1224., 1496., 1240., 1516., 1256., 1536., 1272., 1556., 1288., 1576., 1304., 1596., 1320., 1616., 1336., 1636., 1352., 1656., 1464., 1796., 1480., 1816., 1496., 1836., 1512., 1856., 1528., 1876., 1544., 1896., 1560., 1916., 1576., 1936., 1592., 1956., 1608., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6615.,  6774.,  6933.,  7092.,  6984.,  7152.,  7320.,  7488.,  8508.,  8720.,  8932.,  9144.,  8976.,  9200.,  9424.,  9648.,  9444.,  9680.,  9916., 10152.,  9912., 10160., 10408., 10656.,  6645.,  6822.,  6999.,  7176.,  6978.,  7164.,  7350.,  7536.,  7311.,  7506.,  7701.,  7896.,  7644.,  7848.,  8052.,  8256., 12519., 12822., 13125., 13428., 12888., 13200., 13512., 13824., 15996., 16400., 16804., 17208., 16464., 16880., 17296., 17712., 16932., 17360., 17788., 18216., 17400., 17840., 18280., 18720., 11973., 12294., 12615., 12936., 12306., 12636., 12966., 13296., 12639., 12978., 13317., 13656., 12972., 13320., 13668., 14016., 10772., 11048., 11324., 11600., 11168., 11456., 11744., 12032., 13776., 14144., 14512., 14880., 14272., 14656., 15040., 15424., 14768., 15168., 15568., 15968., 15264., 15680., 16096., 16512., 10364., 10664., 10964., 11264., 10712., 11024., 11336., 11648., 11060., 11384., 11708., 12032., 11408., 11744., 12080., 12416.,  7671.,  7974.,  8277.,  8580.,  7896.,  8208.,  8520.,  8832.,  9532.,  9936., 10340., 10744.,  9808., 10224., 10640., 11056., 10084., 10512., 10940., 11368., 10360., 10800., 11240., 11680.,  6837.,  7158.,  7479.,  7800.,  7026.,  7356.,  7686.,  8016.,  7215.,  7554.,  7893.,  8232.,  7404.,  7752.,  8100.,  8448.,  6471.,  6726.,  6981.,  7236.,  6696.,  6960.,  7224.,  7488.,  8060.,  8400.,  8740.,  9080.,  8336.,  8688.,  9040.,  9392.,  8612.,  8976.,  9340.,  9704.,  8888.,  9264.,  9640., 10016.,  5829.,  6102.,  6375.,  6648.,  6018.,  6300.,  6582.,  6864.,  6207.,  6498.,  6789.,  7080.,  6396.,  6696.,  6996.,  7296.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 804.,  880.,  956., 1032.,  832.,  912.,  992., 1072.,  860.,  944., 1028., 1112.,  888.,  976., 1064., 1152.,  916., 1008., 1100., 1192.,  944., 1040., 1136., 1232.,  972., 1072., 1172., 1272., 1000., 1104., 1208., 1312., 1028., 1136., 1244., 1352., 1056., 1168., 1280., 1392., 1252., 1392., 1532., 1672., 1280., 1424., 1568., 1712., 1308., 1456., 1604., 1752., 1336., 1488., 1640., 1792., 1364., 1520., 1676., 1832., 1392., 1552., 1712., 1872., 1420., 1584., 1748., 1912., 1448., 1616., 1784., 1952., 1476., 1648., 1820., 1992., 1504., 1680., 1856., 2032., 1700., 1904., 2108., 2312., 1728., 1936., 2144., 2352., 1756., 1968., 2180., 2392., 1784., 2000., 2216., 2432., 1812., 2032., 2252., 2472., 1840., 2064., 2288., 2512., 1868., 2096., 2324., 2552., 1896., 2128., 2360., 2592., 1924., 2160., 2396., 2632., 1952., 2192., 2432., 2672., 2148., 2416., 2684., 2952., 2176., 2448., 2720., 2992., 2204., 2480., 2756., 3032., 2232., 2512., 2792., 3072., 2260., 2544., 2828., 3112., 2288., 2576., 2864., 3152., 2316., 2608., 2900., 3192., 2344., 2640., 2936., 3232., 2372., 2672., 2972., 3272., 2400., 2704., 3008., 3312., 2596., 2928., 3260., 3592., 2624., 2960., 3296., 3632., 2652., 2992., 3332., 3672., 2680., 3024., 3368., 3712., 2708., 3056., 3404., 3752., 2736., 3088., 3440., 3792., 2764., 3120., 3476., 3832., 2792., 3152., 3512., 3872., 2820., 3184., 3548., 3912., 2848., 3216., 3584., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9207.,  9306.,  9405.,  9504., 11870., 11996., 12122., 12248., 12374., 12500., 12626., 12752.,  8874.,  8964.,  9054.,  9144.,  9234.,  9324.,  9414.,  9504., 12375., 12474., 12573., 12672., 15902., 16028., 16154., 16280., 16406., 16532., 16658., 16784., 11754., 11844., 11934., 12024., 12114., 12204., 12294., 12384., 15676., 15784., 15892., 16000., 20104., 20240., 20376., 20512., 20648., 20784., 20920., 21056., 14752., 14848., 14944., 15040., 15136., 15232., 15328., 15424.,  8451.,  8514.,  8577.,  8640., 10670., 10748., 10826., 10904., 10982., 11060., 11138., 11216.,  7686.,  7740.,  7794.,  7848.,  7902.,  7956.,  8010.,  8064., 10467., 10530., 10593., 10656., 13166., 13244., 13322., 13400., 13478., 13556., 13634., 13712.,  9414.,  9468.,  9522.,  9576.,  9630.,  9684.,  9738.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 506.,  516.,  526.,  536.,  546.,  556.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  636.,  646.,  656.,  666.,  676.,  686.,  696.,  826.,  836.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  916.,  926.,  936.,  946.,  956.,  966.,  976.,  986.,  996., 1006., 1016., 1146., 1156., 1166., 1176., 1186., 1196., 1206., 1216., 1226., 1236., 1246., 1256., 1266., 1276., 1286., 1296., 1306., 1316., 1326., 1336., 1466., 1476., 1486., 1496., 1506., 1516., 1526., 1536., 1546., 1556., 1566., 1576., 1586., 1596., 1606., 1616., 1626., 1636., 1646., 1656., 1786., 1796., 1806., 1816., 1826., 1836., 1846., 1856., 1866., 1876., 1886., 1896., 1906., 1916., 1926., 1936., 1946., 1956., 1966., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6585.,  6894.,  6774.,  7092.,  6963.,  7290.,  7152.,  7488.,  8480.,  8892.,  8720.,  9144.,  8960.,  9396.,  9200.,  9648.,  9440.,  9900.,  9680., 10152.,  9920., 10404., 10160., 10656.,  6651.,  6996.,  6822.,  7176.,  6993.,  7356.,  7164.,  7536.,  7335.,  7716.,  7506.,  7896.,  7677.,  8076.,  7848.,  8256., 12633., 13230., 12822., 13428., 13011., 13626., 13200., 13824., 16160., 16956., 16400., 17208., 16640., 17460., 16880., 17712., 17120., 17964., 17360., 18216., 17600., 18468., 17840., 18720., 12123., 12756., 12294., 12936., 12465., 13116., 12636., 13296., 12807., 13476., 12978., 13656., 13149., 13836., 13320., 14016., 10844., 11384., 11048., 11600., 11252., 11816., 11456., 12032., 13888., 14608., 14144., 14880., 14400., 15152., 14656., 15424., 14912., 15696., 15168., 15968., 15424., 16240., 15680., 16512., 10484., 11072., 10664., 11264., 10844., 11456., 11024., 11648., 11204., 11840., 11384., 12032., 11564., 12224., 11744., 12416.,  7857.,  8454.,  7974.,  8580.,  8091.,  8706.,  8208.,  8832.,  9792., 10588.,  9936., 10744., 10080., 10900., 10224., 11056., 10368., 11212., 10512., 11368., 10656., 11524., 10800., 11680.,  7059.,  7692.,  7158.,  7800.,  7257.,  7908.,  7356.,  8016.,  7455.,  8124.,  7554.,  8232.,  7653.,  8340.,  7752.,  8448.,  6609.,  7110.,  6726.,  7236.,  6843.,  7362.,  6960.,  7488.,  8256.,  8924.,  8400.,  9080.,  8544.,  9236.,  8688.,  9392.,  8832.,  9548.,  8976.,  9704.,  9120.,  9860.,  9264., 10016.,  6003.,  6540.,  6102.,  6648.,  6201.,  6756.,  6300.,  6864.,  6399.,  6972.,  6498.,  7080.,  6597.,  7188.,  6696.,  7296.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 864., 1012.,  880., 1032.,  896., 1052.,  912., 1072.,  928., 1092.,  944., 1112.,  960., 1132.,  976., 1152.,  992., 1172., 1008., 1192., 1024., 1212., 1040., 1232., 1056., 1252., 1072., 1272., 1088., 1292., 1104., 1312., 1120., 1332., 1136., 1352., 1152., 1372., 1168., 1392., 1376., 1652., 1392., 1672., 1408., 1692., 1424., 1712., 1440., 1732., 1456., 1752., 1472., 1772., 1488., 1792., 1504., 1812., 1520., 1832., 1536., 1852., 1552., 1872., 1568., 1892., 1584., 1912., 1600., 1932., 1616., 1952., 1632., 1972., 1648., 1992., 1664., 2012., 1680., 2032., 1888., 2292., 1904., 2312., 1920., 2332., 1936., 2352., 1952., 2372., 1968., 2392., 1984., 2412., 2000., 2432., 2016., 2452., 2032., 2472., 2048., 2492., 2064., 2512., 2080., 2532., 2096., 2552., 2112., 2572., 2128., 2592., 2144., 2612., 2160., 2632., 2176., 2652., 2192., 2672., 2400., 2932., 2416., 2952., 2432., 2972., 2448., 2992., 2464., 3012., 2480., 3032., 2496., 3052., 2512., 3072., 2528., 3092., 2544., 3112., 2560., 3132., 2576., 3152., 2592., 3172., 2608., 3192., 2624., 3212., 2640., 3232., 2656., 3252., 2672., 3272., 2688., 3292., 2704., 3312., 2912., 3572., 2928., 3592., 2944., 3612., 2960., 3632., 2976., 3652., 2992., 3672., 3008., 3692., 3024., 3712., 3040., 3732., 3056., 3752., 3072., 3772., 3088., 3792., 3104., 3812., 3120., 3832., 3136., 3852., 3152., 3872., 3168., 3892., 3184., 3912., 3200., 3932., 3216., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4989.,  5106.,  5223.,  5340.,  5358.,  5484.,  5610.,  5736.,  5727.,  5862.,  5997.,  6132.,  6096.,  6240.,  6384.,  6528.,  6564.,  6720.,  6876.,  7032.,  7032.,  7200.,  7368.,  7536.,  7500.,  7680.,  7860.,  8040.,  7968.,  8160.,  8352.,  8544.,  8436.,  8640.,  8844.,  9048.,  8904.,  9120.,  9336.,  9552.,  9372.,  9600.,  9828., 10056.,  9840., 10080., 10320., 10560.,  5853.,  6006.,  6159.,  6312.,  6186.,  6348.,  6510.,  6672.,  6519.,  6690.,  6861.,  7032.,  6852.,  7032.,  7212.,  7392.,  7185.,  7374.,  7563.,  7752.,  7518.,  7716.,  7914.,  8112.,  7851.,  8058.,  8265.,  8472.,  8184.,  8400.,  8616.,  8832., 16797., 17202., 17607., 18012., 17166., 17580., 17994., 18408., 17535., 17958., 18381., 18804., 17904., 18336., 18768., 19200., 21540., 22080., 22620., 23160., 22008., 22560., 23112., 23664., 22476., 23040., 23604., 24168., 22944., 23520., 24096., 24672., 23412., 24000., 24588., 25176., 23880., 24480., 25080., 25680., 24348., 24960., 25572., 26184., 24816., 25440., 26064., 26688., 16509., 16950., 17391., 17832., 16842., 17292., 17742., 18192., 17175., 17634., 18093., 18552., 17508., 17976., 18444., 18912., 17841., 18318., 18795., 19272., 18174., 18660., 19146., 19632., 18507., 19002., 19497., 19992., 18840., 19344., 19848., 20352.,  5404.,  5560.,  5716.,  5872.,  5800.,  5968.,  6136.,  6304.,  6196.,  6376.,  6556.,  6736.,  6592.,  6784.,  6976.,  7168.,  7088.,  7296.,  7504.,  7712.,  7584.,  7808.,  8032.,  8256.,  8080.,  8320.,  8560.,  8800.,  8576.,  8832.,  9088.,  9344.,  9072.,  9344.,  9616.,  9888.,  9568.,  9856., 10144., 10432., 10064., 10368., 10672., 10976., 10560., 10880., 11200., 11520.,  6172.,  6376.,  6580.,  6784.,  6520.,  6736.,  6952.,  7168.,  6868.,  7096.,  7324.,  7552.,  7216.,  7456.,  7696.,  7936.,  7564.,  7816.,  8068.,  8320.,  7912.,  8176.,  8440.,  8704.,  8260.,  8536.,  8812.,  9088.,  8608.,  8896.,  9184.,  9472., 10317., 10722., 11127., 11532., 10542., 10956., 11370., 11784., 10767., 11190., 11613., 12036., 10992., 11424., 11856., 12288., 12900., 13440., 13980., 14520., 13176., 13728., 14280., 14832., 13452., 14016., 14580., 15144., 13728., 14304., 14880., 15456., 14004., 14592., 15180., 15768., 14280., 14880., 15480., 16080., 14556., 15168., 15780., 16392., 14832., 15456., 16080., 16704.,  9453.,  9894., 10335., 10776.,  9642., 10092., 10542., 10992.,  9831., 10290., 10749., 11208., 10020., 10488., 10956., 11424., 10209., 10686., 11163., 11640., 10398., 10884., 11370., 11856., 10587., 11082., 11577., 12072., 10776., 11280., 11784., 12288.,  3117.,  3234.,  3351.,  3468.,  3342.,  3468.,  3594.,  3720.,  3567.,  3702.,  3837.,  3972.,  3792.,  3936.,  4080.,  4224.,  4068.,  4224.,  4380.,  4536.,  4344.,  4512.,  4680.,  4848.,  4620.,  4800.,  4980.,  5160.,  4896.,  5088.,  5280.,  5472.,  5172.,  5376.,  5580.,  5784.,  5448.,  5664.,  5880.,  6096.,  5724.,  5952.,  6180.,  6408.,  6000.,  6240.,  6480.,  6720.,  3405.,  3558.,  3711.,  3864.,  3594.,  3756.,  3918.,  4080.,  3783.,  3954.,  4125.,  4296.,  3972.,  4152.,  4332.,  4512.,  4161.,  4350.,  4539.,  4728.,  4350.,  4548.,  4746.,  4944.,  4539.,  4746.,  4953.,  5160.,  4728.,  4944.,  5160.,  5376.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1580., 1728., 1876., 2024., 1608., 1760., 1912., 2064., 1636., 1792., 1948., 2104., 1664., 1824., 1984., 2144., 1692., 1856., 2020., 2184., 1720., 1888., 2056., 2224., 1748., 1920., 2092., 2264., 1776., 1952., 2128., 2304., 1804., 1984., 2164., 2344., 1832., 2016., 2200., 2384., 1860., 2048., 2236., 2424., 1888., 2080., 2272., 2464., 1916., 2112., 2308., 2504., 1944., 2144., 2344., 2544., 1972., 2176., 2380., 2584., 2000., 2208., 2416., 2624., 2028., 2240., 2452., 2664., 2056., 2272., 2488., 2704., 2084., 2304., 2524., 2744., 2112., 2336., 2560., 2784., 2476., 2752., 3028., 3304., 2504., 2784., 3064., 3344., 2532., 2816., 3100., 3384., 2560., 2848., 3136., 3424., 2588., 2880., 3172., 3464., 2616., 2912., 3208., 3504., 2644., 2944., 3244., 3544., 2672., 2976., 3280., 3584., 2700., 3008., 3316., 3624., 2728., 3040., 3352., 3664., 2756., 3072., 3388., 3704., 2784., 3104., 3424., 3744., 2812., 3136., 3460., 3784., 2840., 3168., 3496., 3824., 2868., 3200., 3532., 3864., 2896., 3232., 3568., 3904., 2924., 3264., 3604., 3944., 2952., 3296., 3640., 3984., 2980., 3328., 3676., 4024., 3008., 3360., 3712., 4064., 3372., 3776., 4180., 4584., 3400., 3808., 4216., 4624., 3428., 3840., 4252., 4664., 3456., 3872., 4288., 4704., 3484., 3904., 4324., 4744., 3512., 3936., 4360., 4784., 3540., 3968., 4396., 4824., 3568., 4000., 4432., 4864., 3596., 4032., 4468., 4904., 3624., 4064., 4504., 4944., 3652., 4096., 4540., 4984., 3680., 4128., 4576., 5024., 3708., 4160., 4612., 5064., 3736., 4192., 4648., 5104., 3764., 4224., 4684., 5144., 3792., 4256., 4720., 5184., 3820., 4288., 4756., 5224., 3848., 4320., 4792., 5264., 3876., 4352., 4828., 5304., 3904., 4384., 4864., 5344., 4268., 4800., 5332., 5864., 4296., 4832., 5368., 5904., 4324., 4864., 5404., 5944., 4352., 4896., 5440., 5984., 4380., 4928., 5476., 6024., 4408., 4960., 5512., 6064., 4436., 4992., 5548., 6104., 4464., 5024., 5584., 6144., 4492., 5056., 5620., 6184., 4520., 5088., 5656., 6224., 4548., 5120., 5692., 6264., 4576., 5152., 5728., 6304., 4604., 5184., 5764., 6344., 4632., 5216., 5800., 6384., 4660., 5248., 5836., 6424., 4688., 5280., 5872., 6464., 4716., 5312., 5908., 6504., 4744., 5344., 5944., 6544., 4772., 5376., 5980., 6584., 4800., 5408., 6016., 6624., 5164., 5824., 6484., 7144., 5192., 5856., 6520., 7184., 5220., 5888., 6556., 7224., 5248., 5920., 6592., 7264., 5276., 5952., 6628., 7304., 5304., 5984., 6664., 7344., 5332., 6016., 6700., 7384., 5360., 6048., 6736., 7424., 5388., 6080., 6772., 7464., 5416., 6112., 6808., 7504., 5444., 6144., 6844., 7544., 5472., 6176., 6880., 7584., 5500., 6208., 6916., 7624., 5528., 6240., 6952., 7664., 5556., 6272., 6988., 7704., 5584., 6304., 7024., 7744., 5612., 6336., 7060., 7784., 5640., 6368., 7096., 7824., 5668., 6400., 7132., 7864., 5696., 6432., 7168., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4880.,  5935.,  6130.,  4730.,  4880.,  6500.,  7885.,  8080.,  6230.,  6380.,  8200.,  9930., 10140.,  7800.,  7960.,  4400.,  5260.,  5380.,  4070.,  4160.,  5420.,  6460.,  6580.,  4970.,  5060.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 371.,  392.,  413.,  434.,  455.,  581.,  602.,  623.,  644.,  665.,  791.,  812.,  833.,  854.,  875., 1001., 1022., 1043., 1064., 1085., 1211., 1232., 1253., 1274., 1295.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9460.,  9760., 11495., 11870., 11870., 12260.,  9148.,  9460.,  9436.,  9760., 12580., 13000., 15245., 15770., 15620., 16160., 12028., 12460., 12316., 12760., 15840., 16400., 19160., 19860., 19560., 20280., 15024., 15600., 15328., 15920.,  8380.,  8800.,  9995., 10520., 10220., 10760.,  7708.,  8140.,  7876.,  8320., 10300., 10840., 12245., 12920., 12470., 13160.,  9388.,  9940.,  9556., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 664.,  742.,  700.,  784.,  736.,  826.,  772.,  868.,  808.,  910., 1024., 1162., 1060., 1204., 1096., 1246., 1132., 1288., 1168., 1330., 1384., 1582., 1420., 1624., 1456., 1666., 1492., 1708., 1528., 1750., 1744., 2002., 1780., 2044., 1816., 2086., 1852., 2128., 1888., 2170., 2104., 2422., 2140., 2464., 2176., 2506., 2212., 2548., 2248., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7100.,  7400.,  7700.,  8000., 10839., 11214., 11589., 11964., 11318., 11708., 12098., 12488.,  8960.,  9272.,  9584.,  9896.,  9332.,  9656.,  9980., 10304., 10660., 11080., 11500., 11920., 15629., 16154., 16679., 17204., 16108., 16648., 17188., 17728., 12680., 13112., 13544., 13976., 13052., 13496., 13940., 14384., 13072., 13504., 13936., 14368., 18996., 19504., 20012., 20520., 19520., 20048., 20576., 21104., 15648., 16032., 16416., 16800., 16048., 16448., 16848., 17248., 16340., 16760., 17180., 17600., 19465., 19990., 20515., 21040., 19900., 20440., 20980., 21520., 14984., 15416., 15848., 16280., 15308., 15752., 16196., 16640., 13020., 13432., 13844., 14256., 13639., 14122., 14605., 15088., 14074., 14572., 15070., 15568.,  8816.,  9176.,  9536.,  9896.,  9140.,  9512.,  9884., 10256.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1250., 1328., 1406., 1484., 1316., 1400., 1484., 1568., 1382., 1472., 1562., 1652., 1448., 1544., 1640., 1736., 1514., 1616., 1718., 1820., 1910., 2048., 2186., 2324., 1976., 2120., 2264., 2408., 2042., 2192., 2342., 2492., 2108., 2264., 2420., 2576., 2174., 2336., 2498., 2660., 2570., 2768., 2966., 3164., 2636., 2840., 3044., 3248., 2702., 2912., 3122., 3332., 2768., 2984., 3200., 3416., 2834., 3056., 3278., 3500., 3230., 3488., 3746., 4004., 3296., 3560., 3824., 4088., 3362., 3632., 3902., 4172., 3428., 3704., 3980., 4256., 3494., 3776., 4058., 4340., 3890., 4208., 4526., 4844., 3956., 4280., 4604., 4928., 4022., 4352., 4682., 5012., 4088., 4424., 4760., 5096., 4154., 4496., 4838., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9598.,  9760., 11675., 11870., 12065., 12260.,  9310.,  9460.,  9610.,  9760., 12838., 13000., 15575., 15770., 15965., 16160., 12310., 12460., 12610., 12760., 16224., 16400., 19650., 19860., 20070., 20280., 15440., 15600., 15760., 15920.,  8698.,  8800., 10400., 10520., 10640., 10760.,  8050.,  8140.,  8230.,  8320., 10738., 10840., 12800., 12920., 13040., 13160.,  9850.,  9940., 10030., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 721.,  742.,  763.,  784.,  805.,  826.,  847.,  868.,  889.,  910., 1141., 1162., 1183., 1204., 1225., 1246., 1267., 1288., 1309., 1330., 1561., 1582., 1603., 1624., 1645., 1666., 1687., 1708., 1729., 1750., 1981., 2002., 2023., 2044., 2065., 2086., 2107., 2128., 2149., 2170., 2401., 2422., 2443., 2464., 2485., 2506., 2527., 2548., 2569., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18608., 19196., 18920., 19520., 22615., 23350., 22990., 23740., 23365., 24130., 23740., 24520., 18008., 18620., 18296., 18920., 18584., 19220., 18872., 19520., 24848., 25676., 25160., 26000., 30115., 31150., 30490., 31540., 30865., 31930., 31240., 32320., 23768., 24620., 24056., 24920., 24344., 25220., 24632., 25520., 21616., 22464., 21952., 22816., 23712., 24708., 24112., 25128., 24512., 25548., 24912., 25968., 16304., 17056., 16608., 17376., 16912., 17696., 17216., 18016., 16568., 17396., 16760., 17600., 19765., 20800., 19990., 21040., 20215., 21280., 20440., 21520., 15248., 16100., 15416., 16280., 15584., 16460., 15752., 16640., 13240., 14052., 13432., 14256., 13897., 14848., 14122., 15088., 14347., 15328., 14572., 15568.,  9008.,  9716.,  9176.,  9896.,  9344., 10076.,  9512., 10256.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1292., 1442., 1328., 1484., 1364., 1526., 1400., 1568., 1436., 1610., 1472., 1652., 1508., 1694., 1544., 1736., 1580., 1778., 1616., 1820., 2012., 2282., 2048., 2324., 2084., 2366., 2120., 2408., 2156., 2450., 2192., 2492., 2228., 2534., 2264., 2576., 2300., 2618., 2336., 2660., 2732., 3122., 2768., 3164., 2804., 3206., 2840., 3248., 2876., 3290., 2912., 3332., 2948., 3374., 2984., 3416., 3020., 3458., 3056., 3500., 3452., 3962., 3488., 4004., 3524., 4046., 3560., 4088., 3596., 4130., 3632., 4172., 3668., 4214., 3704., 4256., 3740., 4298., 3776., 4340., 4172., 4802., 4208., 4844., 4244., 4886., 4280., 4928., 4316., 4970., 4352., 5012., 4388., 5054., 4424., 5096., 4460., 5138., 4496., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12052., 12384., 12716., 13048., 12408., 12752., 13096., 13440., 15503., 15918., 16333., 16748., 15982., 16412., 16842., 17272., 16461., 16906., 17351., 17796., 16940., 17400., 17860., 18320., 12684., 13040., 13396., 13752., 13056., 13424., 13792., 14160., 13428., 13808., 14188., 14568., 13800., 14192., 14584., 14976.,  8996.,  9376.,  9756., 10136.,  9352.,  9744., 10136., 10528., 12027., 12486., 12945., 13404., 12506., 12980., 13454., 13928., 12985., 13474., 13963., 14452., 13464., 13968., 14472., 14976.,  8092.,  8432.,  8772.,  9112.,  8464.,  8816.,  9168.,  9520.,  8836.,  9200.,  9564.,  9928.,  9208.,  9584.,  9960., 10336., 12304., 12768., 13232., 13696., 12704., 13184., 13664., 14144., 17820., 18368., 18916., 19464., 18344., 18912., 19480., 20048., 18868., 19456., 20044., 20632., 19392., 20000., 20608., 21216., 14960., 15392., 15824., 16256., 15360., 15808., 16256., 16704., 15760., 16224., 16688., 17152., 16160., 16640., 17120., 17600., 12916., 13296., 13676., 14056., 13288., 13680., 14072., 14464., 14879., 15338., 15797., 16256., 15314., 15788., 16262., 16736., 15749., 16238., 16727., 17216., 16184., 16688., 17192., 17696., 10700., 11040., 11380., 11720., 11024., 11376., 11728., 12080., 11348., 11712., 12076., 12440., 11672., 12048., 12424., 12800., 11716., 12144., 12572., 13000., 12088., 12528., 12968., 13408., 12059., 12562., 13065., 13568., 12494., 13012., 13530., 14048., 12929., 13462., 13995., 14528., 13364., 13912., 14460., 15008.,  7772.,  8160.,  8548.,  8936.,  8096.,  8496.,  8896.,  9296.,  8420.,  8832.,  9244.,  9656.,  8744.,  9168.,  9592., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2434.,  2584.,  2734.,  2884.,  2500.,  2656.,  2812.,  2968.,  2566.,  2728.,  2890.,  3052.,  2632.,  2800.,  2968.,  3136.,  2698.,  2872.,  3046.,  3220.,  2764.,  2944.,  3124.,  3304.,  2830.,  3016.,  3202.,  3388.,  2896.,  3088.,  3280.,  3472.,  2962.,  3160.,  3358.,  3556.,  3028.,  3232.,  3436.,  3640.,  3754.,  4024.,  4294.,  4564.,  3820.,  4096.,  4372.,  4648.,  3886.,  4168.,  4450.,  4732.,  3952.,  4240.,  4528.,  4816.,  4018.,  4312.,  4606.,  4900.,  4084.,  4384.,  4684.,  4984.,  4150.,  4456.,  4762.,  5068.,  4216.,  4528.,  4840.,  5152.,  4282.,  4600.,  4918.,  5236.,  4348.,  4672.,  4996.,  5320.,  5074.,  5464.,  5854.,  6244.,  5140.,  5536.,  5932.,  6328.,  5206.,  5608.,  6010.,  6412.,  5272.,  5680.,  6088.,  6496.,  5338.,  5752.,  6166.,  6580.,  5404.,  5824.,  6244.,  6664.,  5470.,  5896.,  6322.,  6748.,  5536.,  5968.,  6400.,  6832.,  5602.,  6040.,  6478.,  6916.,  5668.,  6112.,  6556.,  7000.,  6394.,  6904.,  7414.,  7924.,  6460.,  6976.,  7492.,  8008.,  6526.,  7048.,  7570.,  8092.,  6592.,  7120.,  7648.,  8176.,  6658.,  7192.,  7726.,  8260.,  6724.,  7264.,  7804.,  8344.,  6790.,  7336.,  7882.,  8428.,  6856.,  7408.,  7960.,  8512.,  6922.,  7480.,  8038.,  8596.,  6988.,  7552.,  8116.,  8680.,  7714.,  8344.,  8974.,  9604.,  7780.,  8416.,  9052.,  9688.,  7846.,  8488.,  9130.,  9772.,  7912.,  8560.,  9208.,  9856.,  7978.,  8632.,  9286.,  9940.,  8044.,  8704.,  9364., 10024.,  8110.,  8776.,  9442., 10108.,  8176.,  8848.,  9520., 10192.,  8242.,  8920.,  9598., 10276.,  8308.,  8992.,  9676., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19034., 19196., 19358., 19520., 23155., 23350., 23545., 23740., 23935., 24130., 24325., 24520., 18470., 18620., 18770., 18920., 19070., 19220., 19370., 19520., 25514., 25676., 25838., 26000., 30955., 31150., 31345., 31540., 31735., 31930., 32125., 32320., 24470., 24620., 24770., 24920., 25070., 25220., 25370., 25520., 22288., 22464., 22640., 22816., 24498., 24708., 24918., 25128., 25338., 25548., 25758., 25968., 16896., 17056., 17216., 17376., 17536., 17696., 17856., 18016., 17294., 17396., 17498., 17600., 20680., 20800., 20920., 21040., 21160., 21280., 21400., 21520., 16010., 16100., 16190., 16280., 16370., 16460., 16550., 16640., 13950., 14052., 14154., 14256., 14728., 14848., 14968., 15088., 15208., 15328., 15448., 15568.,  9626.,  9716.,  9806.,  9896.,  9986., 10076., 10166., 10256.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1421., 1442., 1463., 1484., 1505., 1526., 1547., 1568., 1589., 1610., 1631., 1652., 1673., 1694., 1715., 1736., 1757., 1778., 1799., 1820., 2261., 2282., 2303., 2324., 2345., 2366., 2387., 2408., 2429., 2450., 2471., 2492., 2513., 2534., 2555., 2576., 2597., 2618., 2639., 2660., 3101., 3122., 3143., 3164., 3185., 3206., 3227., 3248., 3269., 3290., 3311., 3332., 3353., 3374., 3395., 3416., 3437., 3458., 3479., 3500., 3941., 3962., 3983., 4004., 4025., 4046., 4067., 4088., 4109., 4130., 4151., 4172., 4193., 4214., 4235., 4256., 4277., 4298., 4319., 4340., 4781., 4802., 4823., 4844., 4865., 4886., 4907., 4928., 4949., 4970., 4991., 5012., 5033., 5054., 5075., 5096., 5117., 5138., 5159., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18472., 19124., 18784., 19448., 19096., 19772., 19408., 20096., 22455., 23270., 22830., 23660., 23205., 24050., 23580., 24440., 23955., 24830., 24330., 25220., 24705., 25610., 25080., 26000., 18320., 19020., 18608., 19320., 18896., 19620., 19184., 19920., 19472., 20220., 19760., 20520., 20048., 20820., 20336., 21120., 20584., 21332., 20896., 21656., 21208., 21980., 21520., 22304., 24143., 25046., 24518., 25436., 24893., 25826., 25268., 26216., 25643., 26606., 26018., 26996., 26393., 27386., 26768., 27776., 17552., 18220., 17840., 18520., 18128., 18820., 18416., 19120., 18704., 19420., 18992., 19720., 19280., 20020., 19568., 20320., 20880., 21792., 21216., 22144., 21552., 22496., 21888., 22848., 22832., 23908., 23232., 24328., 23632., 24748., 24032., 25168., 24432., 25588., 24832., 26008., 25232., 26428., 25632., 26848., 16048., 16896., 16352., 17216., 16656., 17536., 16960., 17856., 17264., 18176., 17568., 18496., 17872., 18816., 18176., 19136., 13104., 13852., 13296., 14056., 13488., 14260., 13680., 14464., 15113., 16016., 15338., 16256., 15563., 16496., 15788., 16736., 16013., 16976., 16238., 17216., 16463., 17456., 16688., 17696., 10872., 11540., 11040., 11720., 11208., 11900., 11376., 12080., 11544., 12260., 11712., 12440., 11880., 12620., 12048., 12800., 11952., 12796., 12144., 13000., 12336., 13204., 12528., 13408., 12337., 13328., 12562., 13568., 12787., 13808., 13012., 14048., 13237., 14288., 13462., 14528., 13687., 14768., 13912., 15008.,  7992.,  8756.,  8160.,  8936.,  8328.,  9116.,  8496.,  9296.,  8664.,  9476.,  8832.,  9656.,  9000.,  9836.,  9168., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2548.,  2842.,  2584.,  2884.,  2620.,  2926.,  2656.,  2968.,  2692.,  3010.,  2728.,  3052.,  2764.,  3094.,  2800.,  3136.,  2836.,  3178.,  2872.,  3220.,  2908.,  3262.,  2944.,  3304.,  2980.,  3346.,  3016.,  3388.,  3052.,  3430.,  3088.,  3472.,  3124.,  3514.,  3160.,  3556.,  3196.,  3598.,  3232.,  3640.,  3988.,  4522.,  4024.,  4564.,  4060.,  4606.,  4096.,  4648.,  4132.,  4690.,  4168.,  4732.,  4204.,  4774.,  4240.,  4816.,  4276.,  4858.,  4312.,  4900.,  4348.,  4942.,  4384.,  4984.,  4420.,  5026.,  4456.,  5068.,  4492.,  5110.,  4528.,  5152.,  4564.,  5194.,  4600.,  5236.,  4636.,  5278.,  4672.,  5320.,  5428.,  6202.,  5464.,  6244.,  5500.,  6286.,  5536.,  6328.,  5572.,  6370.,  5608.,  6412.,  5644.,  6454.,  5680.,  6496.,  5716.,  6538.,  5752.,  6580.,  5788.,  6622.,  5824.,  6664.,  5860.,  6706.,  5896.,  6748.,  5932.,  6790.,  5968.,  6832.,  6004.,  6874.,  6040.,  6916.,  6076.,  6958.,  6112.,  7000.,  6868.,  7882.,  6904.,  7924.,  6940.,  7966.,  6976.,  8008.,  7012.,  8050.,  7048.,  8092.,  7084.,  8134.,  7120.,  8176.,  7156.,  8218.,  7192.,  8260.,  7228.,  8302.,  7264.,  8344.,  7300.,  8386.,  7336.,  8428.,  7372.,  8470.,  7408.,  8512.,  7444.,  8554.,  7480.,  8596.,  7516.,  8638.,  7552.,  8680.,  8308.,  9562.,  8344.,  9604.,  8380.,  9646.,  8416.,  9688.,  8452.,  9730.,  8488.,  9772.,  8524.,  9814.,  8560.,  9856.,  8596.,  9898.,  8632.,  9940.,  8668.,  9982.,  8704., 10024.,  8740., 10066.,  8776., 10108.,  8812., 10150.,  8848., 10192.,  8884., 10234.,  8920., 10276.,  8956., 10318.,  8992., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10692., 11088., 11484., 11880., 11048., 11456., 11864., 12272., 11404., 11824., 12244., 12664., 11760., 12192., 12624., 13056., 14015., 14446., 14877., 15308., 14494., 14940., 15386., 15832., 14973., 15434., 15895., 16356., 15452., 15928., 16404., 16880., 15931., 16422., 16913., 17404., 16410., 16916., 17422., 17928., 16889., 17410., 17931., 18452., 17368., 17904., 18440., 18976., 12388., 12768., 13148., 13528., 12760., 13152., 13544., 13936., 13132., 13536., 13940., 14344., 13504., 13920., 14336., 14752., 13876., 14304., 14732., 15160., 14248., 14688., 15128., 15568., 14620., 15072., 15524., 15976., 14992., 15456., 15920., 16384., 10596., 10960., 11324., 11688., 10952., 11328., 11704., 12080., 11308., 11696., 12084., 12472., 11664., 12064., 12464., 12864., 10775., 11166., 11557., 11948., 11254., 11660., 12066., 12472., 11733., 12154., 12575., 12996., 12212., 12648., 13084., 13520., 12691., 13142., 13593., 14044., 13170., 13636., 14102., 14568., 13649., 14130., 14611., 15092., 14128., 14624., 15120., 15616.,  6980.,  7264.,  7548.,  7832.,  7352.,  7648.,  7944.,  8240.,  7724.,  8032.,  8340.,  8648.,  8096.,  8416.,  8736.,  9056.,  8468.,  8800.,  9132.,  9464.,  8840.,  9184.,  9528.,  9872.,  9212.,  9568.,  9924., 10280.,  9584.,  9952., 10320., 10688., 15888., 16416., 16944., 17472., 16288., 16832., 17376., 17920., 16688., 17248., 17808., 18368., 17088., 17664., 18240., 18816., 18220., 18784., 19348., 19912., 18744., 19328., 19912., 20496., 19268., 19872., 20476., 21080., 19792., 20416., 21040., 21664., 20316., 20960., 21604., 22248., 20840., 21504., 22168., 22832., 21364., 22048., 22732., 23416., 21888., 22592., 23296., 24000., 15312., 15776., 16240., 16704., 15712., 16192., 16672., 17152., 16112., 16608., 17104., 17600., 16512., 17024., 17536., 18048., 16912., 17440., 17968., 18496., 17312., 17856., 18400., 18944., 17712., 18272., 18832., 19392., 18112., 18688., 19264., 19840.,  9716., 10080., 10444., 10808., 10088., 10464., 10840., 11216., 10460., 10848., 11236., 11624., 10832., 11232., 11632., 12032., 10379., 10770., 11161., 11552., 10814., 11220., 11626., 12032., 11249., 11670., 12091., 12512., 11684., 12120., 12556., 12992., 12119., 12570., 13021., 13472., 12554., 13020., 13486., 13952., 12989., 13470., 13951., 14432., 13424., 13920., 14416., 14912.,  7636.,  7920.,  8204.,  8488.,  7960.,  8256.,  8552.,  8848.,  8284.,  8592.,  8900.,  9208.,  8608.,  8928.,  9248.,  9568.,  8932.,  9264.,  9596.,  9928.,  9256.,  9600.,  9944., 10288.,  9580.,  9936., 10292., 10648.,  9904., 10272., 10640., 11008., 14228., 14688., 15148., 15608., 14600., 15072., 15544., 16016., 14972., 15456., 15940., 16424., 15344., 15840., 16336., 16832., 12931., 13410., 13889., 14368., 13366., 13860., 14354., 14848., 13801., 14310., 14819., 15328., 14236., 14760., 15284., 15808., 14671., 15210., 15749., 16288., 15106., 15660., 16214., 16768., 15541., 16110., 16679., 17248., 15976., 16560., 17144., 17728.,  8692.,  9072.,  9452.,  9832.,  9016.,  9408.,  9800., 10192.,  9340.,  9744., 10148., 10552.,  9664., 10080., 10496., 10912.,  9988., 10416., 10844., 11272., 10312., 10752., 11192., 11632., 10636., 11088., 11540., 11992., 10960., 11424., 11888., 12352.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4802.,  5096.,  5390.,  5684.,  4868.,  5168.,  5468.,  5768.,  4934.,  5240.,  5546.,  5852.,  5000.,  5312.,  5624.,  5936.,  5066.,  5384.,  5702.,  6020.,  5132.,  5456.,  5780.,  6104.,  5198.,  5528.,  5858.,  6188.,  5264.,  5600.,  5936.,  6272.,  5330.,  5672.,  6014.,  6356.,  5396.,  5744.,  6092.,  6440.,  5462.,  5816.,  6170.,  6524.,  5528.,  5888.,  6248.,  6608.,  5594.,  5960.,  6326.,  6692.,  5660.,  6032.,  6404.,  6776.,  5726.,  6104.,  6482.,  6860.,  5792.,  6176.,  6560.,  6944.,  5858.,  6248.,  6638.,  7028.,  5924.,  6320.,  6716.,  7112.,  5990.,  6392.,  6794.,  7196.,  6056.,  6464.,  6872.,  7280.,  7442.,  7976.,  8510.,  9044.,  7508.,  8048.,  8588.,  9128.,  7574.,  8120.,  8666.,  9212.,  7640.,  8192.,  8744.,  9296.,  7706.,  8264.,  8822.,  9380.,  7772.,  8336.,  8900.,  9464.,  7838.,  8408.,  8978.,  9548.,  7904.,  8480.,  9056.,  9632.,  7970.,  8552.,  9134.,  9716.,  8036.,  8624.,  9212.,  9800.,  8102.,  8696.,  9290.,  9884.,  8168.,  8768.,  9368.,  9968.,  8234.,  8840.,  9446., 10052.,  8300.,  8912.,  9524., 10136.,  8366.,  8984.,  9602., 10220.,  8432.,  9056.,  9680., 10304.,  8498.,  9128.,  9758., 10388.,  8564.,  9200.,  9836., 10472.,  8630.,  9272.,  9914., 10556.,  8696.,  9344.,  9992., 10640., 10082., 10856., 11630., 12404., 10148., 10928., 11708., 12488., 10214., 11000., 11786., 12572., 10280., 11072., 11864., 12656., 10346., 11144., 11942., 12740., 10412., 11216., 12020., 12824., 10478., 11288., 12098., 12908., 10544., 11360., 12176., 12992., 10610., 11432., 12254., 13076., 10676., 11504., 12332., 13160., 10742., 11576., 12410., 13244., 10808., 11648., 12488., 13328., 10874., 11720., 12566., 13412., 10940., 11792., 12644., 13496., 11006., 11864., 12722., 13580., 11072., 11936., 12800., 13664., 11138., 12008., 12878., 13748., 11204., 12080., 12956., 13832., 11270., 12152., 13034., 13916., 11336., 12224., 13112., 14000., 12722., 13736., 14750., 15764., 12788., 13808., 14828., 15848., 12854., 13880., 14906., 15932., 12920., 13952., 14984., 16016., 12986., 14024., 15062., 16100., 13052., 14096., 15140., 16184., 13118., 14168., 15218., 16268., 13184., 14240., 15296., 16352., 13250., 14312., 15374., 16436., 13316., 14384., 15452., 16520., 13382., 14456., 15530., 16604., 13448., 14528., 15608., 16688., 13514., 14600., 15686., 16772., 13580., 14672., 15764., 16856., 13646., 14744., 15842., 16940., 13712., 14816., 15920., 17024., 13778., 14888., 15998., 17108., 13844., 14960., 16076., 17192., 13910., 15032., 16154., 17276., 13976., 15104., 16232., 17360., 15362., 16616., 17870., 19124., 15428., 16688., 17948., 19208., 15494., 16760., 18026., 19292., 15560., 16832., 18104., 19376., 15626., 16904., 18182., 19460., 15692., 16976., 18260., 19544., 15758., 17048., 18338., 19628., 15824., 17120., 18416., 19712., 15890., 17192., 18494., 19796., 15956., 17264., 18572., 19880., 16022., 17336., 18650., 19964., 16088., 17408., 18728., 20048., 16154., 17480., 18806., 20132., 16220., 17552., 18884., 20216., 16286., 17624., 18962., 20300., 16352., 17696., 19040., 20384., 16418., 17768., 19118., 20468., 16484., 17840., 19196., 20552., 16550., 17912., 19274., 20636., 16616., 17984., 19352., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2724., 2823., 3628., 2598., 2688., 3448., 3556., 4560., 3256., 3352., 4204., 4312., 5512., 3928., 4024., 2301., 2364., 2974., 2076., 2130., 2742., 2805., 3520., 2454., 2508.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 130., 140., 150., 160., 190., 200., 210., 220., 230., 260., 270., 280., 290., 300., 330., 340., 350., 360., 370., 400., 410., 420., 430., 440.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5232.,  5448.,  5421.,  5646.,  6956.,  7256.,  4971.,  5196.,  5142.,  5376.,  6608.,  6896.,  6812.,  7112.,  8720.,  9120.,  6212.,  6512.,  6392.,  6704.,  8036.,  8408.,  8240.,  8624., 10512., 11024.,  7472.,  7856.,  7652.,  8048.,  4323.,  4602.,  4440.,  4728.,  5564.,  5948.,  3864.,  4152.,  3963.,  4260.,  5142.,  5484.,  5259.,  5610.,  6572.,  7040.,  4557.,  4908.,  4656.,  5016.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {204., 240., 220., 260., 236., 280., 252., 300., 268., 320., 316., 380., 332., 400., 348., 420., 364., 440., 380., 460., 428., 520., 444., 540., 460., 560., 476., 580., 492., 600., 540., 660., 556., 680., 572., 700., 588., 720., 604., 740., 652., 800., 668., 820., 684., 840., 700., 860., 716., 880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10248., 10464., 10680., 10896., 10617., 10842., 11067., 11292., 13612., 13912., 14212., 14512.,  9717.,  9942., 10167., 10392., 10050., 10284., 10518., 10752., 12928., 13216., 13504., 13792., 13324., 13624., 13924., 14224., 17040., 17440., 17840., 18240., 12124., 12424., 12724., 13024., 12472., 12784., 13096., 13408., 15700., 16072., 16444., 16816., 16096., 16480., 16864., 17248., 20512., 21024., 21536., 22048., 14560., 14944., 15328., 15712., 14908., 15304., 15700., 16096.,  8367.,  8646.,  8925.,  9204.,  8592.,  8880.,  9168.,  9456., 10744., 11128., 11512., 11896.,  7440.,  7728.,  8016.,  8304.,  7629.,  7926.,  8223.,  8520.,  9942., 10284., 10626., 10968., 10167., 10518., 10869., 11220., 12676., 13144., 13612., 14080.,  8763.,  9114.,  9465.,  9816.,  8952.,  9312.,  9672., 10032.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 372.,  408.,  444.,  480.,  400.,  440.,  480.,  520.,  428.,  472.,  516.,  560.,  456.,  504.,  552.,  600.,  484.,  536.,  588.,  640.,  568.,  632.,  696.,  760.,  596.,  664.,  732.,  800.,  624.,  696.,  768.,  840.,  652.,  728.,  804.,  880.,  680.,  760.,  840.,  920.,  764.,  856.,  948., 1040.,  792.,  888.,  984., 1080.,  820.,  920., 1020., 1120.,  848.,  952., 1056., 1160.,  876.,  984., 1092., 1200.,  960., 1080., 1200., 1320.,  988., 1112., 1236., 1360., 1016., 1144., 1272., 1400., 1044., 1176., 1308., 1440., 1072., 1208., 1344., 1480., 1156., 1304., 1452., 1600., 1184., 1336., 1488., 1640., 1212., 1368., 1524., 1680., 1240., 1400., 1560., 1720., 1268., 1432., 1596., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5349.,  5448.,  5547.,  5646.,  7130.,  7256.,  5106.,  5196.,  5286.,  5376.,  6788.,  6896.,  7004.,  7112.,  8984.,  9120.,  6416.,  6512.,  6608.,  6704.,  8300.,  8408.,  8516.,  8624., 10888., 11024.,  7760.,  7856.,  7952.,  8048.,  4539.,  4602.,  4665.,  4728.,  5870.,  5948.,  4098.,  4152.,  4206.,  4260.,  5421.,  5484.,  5547.,  5610.,  6962.,  7040.,  4854.,  4908.,  4962.,  5016.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {230., 240., 250., 260., 270., 280., 290., 300., 310., 320., 370., 380., 390., 400., 410., 420., 430., 440., 450., 460., 510., 520., 530., 540., 550., 560., 570., 580., 590., 600., 650., 660., 670., 680., 690., 700., 710., 720., 730., 740., 790., 800., 810., 820., 830., 840., 850., 860., 870., 880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10275., 10698., 10464., 10896., 10653., 11094., 10842., 11292., 13672., 14260., 13912., 14512.,  9771., 10212.,  9942., 10392., 10113., 10572., 10284., 10752., 13012., 13576., 13216., 13792., 13420., 14008., 13624., 14224., 17184., 17968., 17440., 18240., 12244., 12832., 12424., 13024., 12604., 13216., 12784., 13408., 15868., 16600., 16072., 16816., 16276., 17032., 16480., 17248., 20768., 21776., 21024., 22048., 14764., 15520., 14944., 15712., 15124., 15904., 15304., 16096.,  8529.,  9078.,  8646.,  9204.,  8763.,  9330.,  8880.,  9456., 10984., 11740., 11128., 11896.,  7629.,  8196.,  7728.,  8304.,  7827.,  8412.,  7926.,  8520., 10167., 10842., 10284., 10968., 10401., 11094., 10518., 11220., 13000., 13924., 13144., 14080.,  9015.,  9708.,  9114.,  9816.,  9213.,  9924.,  9312., 10032.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 392.,  460.,  408.,  480.,  424.,  500.,  440.,  520.,  456.,  540.,  472.,  560.,  488.,  580.,  504.,  600.,  520.,  620.,  536.,  640.,  616.,  740.,  632.,  760.,  648.,  780.,  664.,  800.,  680.,  820.,  696.,  840.,  712.,  860.,  728.,  880.,  744.,  900.,  760.,  920.,  840., 1020.,  856., 1040.,  872., 1060.,  888., 1080.,  904., 1100.,  920., 1120.,  936., 1140.,  952., 1160.,  968., 1180.,  984., 1200., 1064., 1300., 1080., 1320., 1096., 1340., 1112., 1360., 1128., 1380., 1144., 1400., 1160., 1420., 1176., 1440., 1192., 1460., 1208., 1480., 1288., 1580., 1304., 1600., 1320., 1620., 1336., 1640., 1352., 1660., 1368., 1680., 1384., 1700., 1400., 1720., 1416., 1740., 1432., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9183.,  9414.,  9645.,  9876.,  9552.,  9792., 10032., 10272.,  9921., 10170., 10419., 10668., 10290., 10548., 10806., 11064., 12676., 13008., 13340., 13672., 13144., 13488., 13832., 14176.,  8925.,  9174.,  9423.,  9672.,  9258.,  9516.,  9774., 10032.,  9591.,  9858., 10125., 10392.,  9924., 10200., 10476., 10752., 11636., 11944., 12252., 12560., 12032., 12352., 12672., 12992., 12428., 12760., 13092., 13424., 12824., 13168., 13512., 13856., 14000., 14400., 14800., 15200., 14496., 14912., 15328., 15744., 11100., 11432., 11764., 12096., 11448., 11792., 12136., 12480.,  9428.,  9720., 10012., 10304.,  9776., 10080., 10384., 10688., 12188., 12536., 12884., 13232., 12584., 12944., 13304., 13664., 12980., 13352., 13724., 14096., 13376., 13760., 14144., 14528., 16464., 16960., 17456., 17952., 16960., 17472., 17984., 18496., 11492., 11864., 12236., 12608., 11840., 12224., 12608., 12992., 12188., 12584., 12980., 13376., 12536., 12944., 13352., 13760.,  6781.,  7074.,  7367.,  7660.,  7006.,  7308.,  7610.,  7912.,  7231.,  7542.,  7853.,  8164.,  7456.,  7776.,  8096.,  8416.,  7772.,  8144.,  8516.,  8888.,  8048.,  8432.,  8816.,  9200.,  5987.,  6298.,  6609.,  6920.,  6176.,  6496.,  6816.,  7136.,  5021.,  5286.,  5551.,  5816.,  5210.,  5484.,  5758.,  6032.,  6987.,  7278.,  7569.,  7860.,  7212.,  7512.,  7812.,  8112.,  7437.,  7746.,  8055.,  8364.,  7662.,  7980.,  8298.,  8616.,  9204.,  9616., 10028., 10440.,  9480.,  9904., 10328., 10752.,  6201.,  6510.,  6819.,  7128.,  6390.,  6708.,  7026.,  7344.,  6579.,  6906.,  7233.,  7560.,  6768.,  7104.,  7440.,  7776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 716.,  784.,  852.,  920.,  744.,  816.,  888.,  960.,  772.,  848.,  924., 1000.,  800.,  880.,  960., 1040.,  828.,  912.,  996., 1080.,  856.,  944., 1032., 1120.,  884.,  976., 1068., 1160.,  912., 1008., 1104., 1200.,  940., 1040., 1140., 1240.,  968., 1072., 1176., 1280., 1108., 1232., 1356., 1480., 1136., 1264., 1392., 1520., 1164., 1296., 1428., 1560., 1192., 1328., 1464., 1600., 1220., 1360., 1500., 1640., 1248., 1392., 1536., 1680., 1276., 1424., 1572., 1720., 1304., 1456., 1608., 1760., 1332., 1488., 1644., 1800., 1360., 1520., 1680., 1840., 1500., 1680., 1860., 2040., 1528., 1712., 1896., 2080., 1556., 1744., 1932., 2120., 1584., 1776., 1968., 2160., 1612., 1808., 2004., 2200., 1640., 1840., 2040., 2240., 1668., 1872., 2076., 2280., 1696., 1904., 2112., 2320., 1724., 1936., 2148., 2360., 1752., 1968., 2184., 2400., 1892., 2128., 2364., 2600., 1920., 2160., 2400., 2640., 1948., 2192., 2436., 2680., 1976., 2224., 2472., 2720., 2004., 2256., 2508., 2760., 2032., 2288., 2544., 2800., 2060., 2320., 2580., 2840., 2088., 2352., 2616., 2880., 2116., 2384., 2652., 2920., 2144., 2416., 2688., 2960., 2284., 2576., 2868., 3160., 2312., 2608., 2904., 3200., 2340., 2640., 2940., 3240., 2368., 2672., 2976., 3280., 2396., 2704., 3012., 3320., 2424., 2736., 3048., 3360., 2452., 2768., 3084., 3400., 2480., 2800., 3120., 3440., 2508., 2832., 3156., 3480., 2536., 2864., 3192., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10599., 10698., 10797., 10896., 10995., 11094., 11193., 11292., 14134., 14260., 14386., 14512., 10122., 10212., 10302., 10392., 10482., 10572., 10662., 10752., 13468., 13576., 13684., 13792., 13900., 14008., 14116., 14224., 17832., 17968., 18104., 18240., 12736., 12832., 12928., 13024., 13120., 13216., 13312., 13408., 16492., 16600., 16708., 16816., 16924., 17032., 17140., 17248., 21640., 21776., 21912., 22048., 15424., 15520., 15616., 15712., 15808., 15904., 16000., 16096.,  9015.,  9078.,  9141.,  9204.,  9267.,  9330.,  9393.,  9456., 11662., 11740., 11818., 11896.,  8142.,  8196.,  8250.,  8304.,  8358.,  8412.,  8466.,  8520., 10779., 10842., 10905., 10968., 11031., 11094., 11157., 11220., 13846., 13924., 14002., 14080.,  9654.,  9708.,  9762.,  9816.,  9870.,  9924.,  9978., 10032.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 450.,  460.,  470.,  480.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,  610.,  620.,  630.,  640.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  890.,  900.,  910.,  920., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120., 1130., 1140., 1150., 1160., 1170., 1180., 1190., 1200., 1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380., 1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460., 1470., 1480., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740., 1750., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9225.,  9678.,  9414.,  9876.,  9603., 10074.,  9792., 10272.,  9981., 10470., 10170., 10668., 10359., 10866., 10548., 11064., 12768., 13420., 13008., 13672., 13248., 13924., 13488., 14176.,  9003.,  9492.,  9174.,  9672.,  9345.,  9852.,  9516., 10032.,  9687., 10212.,  9858., 10392., 10029., 10572., 10200., 10752., 11740., 12344., 11944., 12560., 12148., 12776., 12352., 12992., 12556., 13208., 12760., 13424., 12964., 13640., 13168., 13856., 14144., 14928., 14400., 15200., 14656., 15472., 14912., 15744., 11252., 11904., 11432., 12096., 11612., 12288., 11792., 12480.,  9540., 10112.,  9720., 10304.,  9900., 10496., 10080., 10688., 12332., 13016., 12536., 13232., 12740., 13448., 12944., 13664., 13148., 13880., 13352., 14096., 13556., 14312., 13760., 14528., 16704., 17680., 16960., 17952., 17216., 18224., 17472., 18496., 11684., 12416., 11864., 12608., 12044., 12800., 12224., 12992., 12404., 13184., 12584., 13376., 12764., 13568., 12944., 13760.,  6957.,  7534.,  7074.,  7660.,  7191.,  7786.,  7308.,  7912.,  7425.,  8038.,  7542.,  8164.,  7659.,  8290.,  7776.,  8416.,  8000.,  8732.,  8144.,  8888.,  8288.,  9044.,  8432.,  9200.,  6199.,  6812.,  6298.,  6920.,  6397.,  7028.,  6496.,  7136.,  5187.,  5708.,  5286.,  5816.,  5385.,  5924.,  5484.,  6032.,  7161.,  7734.,  7278.,  7860.,  7395.,  7986.,  7512.,  8112.,  7629.,  8238.,  7746.,  8364.,  7863.,  8490.,  7980.,  8616.,  9472., 10284.,  9616., 10440.,  9760., 10596.,  9904., 10752.,  6411.,  7020.,  6510.,  7128.,  6609.,  7236.,  6708.,  7344.,  6807.,  7452.,  6906.,  7560.,  7005.,  7668.,  7104.,  7776.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 768.,  900.,  784.,  920.,  800.,  940.,  816.,  960.,  832.,  980.,  848., 1000.,  864., 1020.,  880., 1040.,  896., 1060.,  912., 1080.,  928., 1100.,  944., 1120.,  960., 1140.,  976., 1160.,  992., 1180., 1008., 1200., 1024., 1220., 1040., 1240., 1056., 1260., 1072., 1280., 1216., 1460., 1232., 1480., 1248., 1500., 1264., 1520., 1280., 1540., 1296., 1560., 1312., 1580., 1328., 1600., 1344., 1620., 1360., 1640., 1376., 1660., 1392., 1680., 1408., 1700., 1424., 1720., 1440., 1740., 1456., 1760., 1472., 1780., 1488., 1800., 1504., 1820., 1520., 1840., 1664., 2020., 1680., 2040., 1696., 2060., 1712., 2080., 1728., 2100., 1744., 2120., 1760., 2140., 1776., 2160., 1792., 2180., 1808., 2200., 1824., 2220., 1840., 2240., 1856., 2260., 1872., 2280., 1888., 2300., 1904., 2320., 1920., 2340., 1936., 2360., 1952., 2380., 1968., 2400., 2112., 2580., 2128., 2600., 2144., 2620., 2160., 2640., 2176., 2660., 2192., 2680., 2208., 2700., 2224., 2720., 2240., 2740., 2256., 2760., 2272., 2780., 2288., 2800., 2304., 2820., 2320., 2840., 2336., 2860., 2352., 2880., 2368., 2900., 2384., 2920., 2400., 2940., 2416., 2960., 2560., 3140., 2576., 3160., 2592., 3180., 2608., 3200., 2624., 3220., 2640., 3240., 2656., 3260., 2672., 3280., 2688., 3300., 2704., 3320., 2720., 3340., 2736., 3360., 2752., 3380., 2768., 3400., 2784., 3420., 2800., 3440., 2816., 3460., 2832., 3480., 2848., 3500., 2864., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10125., 10386., 10647., 10908., 10494., 10764., 11034., 11304., 10863., 11142., 11421., 11700., 11232., 11520., 11808., 12096., 11601., 11898., 12195., 12492., 11970., 12276., 12582., 12888., 12339., 12654., 12969., 13284., 12708., 13032., 13356., 13680., 14900., 15296., 15692., 16088., 15368., 15776., 16184., 16592., 15836., 16256., 16676., 17096., 16304., 16736., 17168., 17600., 10413., 10710., 11007., 11304., 10746., 11052., 11358., 11664., 11079., 11394., 11709., 12024., 11412., 11736., 12060., 12384., 11745., 12078., 12411., 12744., 12078., 12420., 12762., 13104., 12411., 12762., 13113., 13464., 12744., 13104., 13464., 13824., 14428., 14776., 15124., 15472., 14824., 15184., 15544., 15904., 15220., 15592., 15964., 16336., 15616., 16000., 16384., 16768., 16012., 16408., 16804., 17200., 16408., 16816., 17224., 17632., 16804., 17224., 17644., 18064., 17200., 17632., 18064., 18496., 14320., 14720., 15120., 15520., 14816., 15232., 15648., 16064., 15312., 15744., 16176., 16608., 15808., 16256., 16704., 17152., 14428., 14824., 15220., 15616., 14776., 15184., 15592., 16000., 15124., 15544., 15964., 16384., 15472., 15904., 16336., 16768.,  8716.,  8968.,  9220.,  9472.,  9064.,  9328.,  9592.,  9856.,  9412.,  9688.,  9964., 10240.,  9760., 10048., 10336., 10624.,  8236.,  8536.,  8836.,  9136.,  8632.,  8944.,  9256.,  9568.,  9028.,  9352.,  9676., 10000.,  9424.,  9760., 10096., 10432.,  9820., 10168., 10516., 10864., 10216., 10576., 10936., 11296., 10612., 10984., 11356., 11728., 11008., 11392., 11776., 12160., 12464., 12928., 13392., 13856., 12960., 13440., 13920., 14400., 13456., 13952., 14448., 14944., 13952., 14464., 14976., 15488.,  8428.,  8776.,  9124.,  9472.,  8776.,  9136.,  9496.,  9856.,  9124.,  9496.,  9868., 10240.,  9472.,  9856., 10240., 10624.,  9820., 10216., 10612., 11008., 10168., 10576., 10984., 11392., 10516., 10936., 11356., 11776., 10864., 11296., 11728., 12160.,  8985.,  9306.,  9627.,  9948.,  9210.,  9540.,  9870., 10200.,  9435.,  9774., 10113., 10452.,  9660., 10008., 10356., 10704.,  9885., 10242., 10599., 10956., 10110., 10476., 10842., 11208., 10335., 10710., 11085., 11460., 10560., 10944., 11328., 11712.,  8228.,  8576.,  8924.,  9272.,  8504.,  8864.,  9224.,  9584.,  8780.,  9152.,  9524.,  9896.,  9056.,  9440.,  9824., 10208.,  8457.,  8814.,  9171.,  9528.,  8646.,  9012.,  9378.,  9744.,  8835.,  9210.,  9585.,  9960.,  9024.,  9408.,  9792., 10176.,  5181.,  5382.,  5583.,  5784.,  5370.,  5580.,  5790.,  6000.,  5559.,  5778.,  5997.,  6216.,  5748.,  5976.,  6204.,  6432.,  4149.,  4338.,  4527.,  4716.,  4374.,  4572.,  4770.,  4968.,  4599.,  4806.,  5013.,  5220.,  4824.,  5040.,  5256.,  5472.,  5049.,  5274.,  5499.,  5724.,  5274.,  5508.,  5742.,  5976.,  5499.,  5742.,  5985.,  6228.,  5724.,  5976.,  6228.,  6480.,  6356.,  6656.,  6956.,  7256.,  6632.,  6944.,  7256.,  7568.,  6908.,  7232.,  7556.,  7880.,  7184.,  7520.,  7856.,  8192.,  4149.,  4374.,  4599.,  4824.,  4338.,  4572.,  4806.,  5040.,  4527.,  4770.,  5013.,  5256.,  4716.,  4968.,  5220.,  5472.,  4905.,  5166.,  5427.,  5688.,  5094.,  5364.,  5634.,  5904.,  5283.,  5562.,  5841.,  6120.,  5472.,  5760.,  6048.,  6336.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1404., 1536., 1668., 1800., 1432., 1568., 1704., 1840., 1460., 1600., 1740., 1880., 1488., 1632., 1776., 1920., 1516., 1664., 1812., 1960., 1544., 1696., 1848., 2000., 1572., 1728., 1884., 2040., 1600., 1760., 1920., 2080., 1628., 1792., 1956., 2120., 1656., 1824., 1992., 2160., 1684., 1856., 2028., 2200., 1712., 1888., 2064., 2240., 1740., 1920., 2100., 2280., 1768., 1952., 2136., 2320., 1796., 1984., 2172., 2360., 1824., 2016., 2208., 2400., 1852., 2048., 2244., 2440., 1880., 2080., 2280., 2480., 1908., 2112., 2316., 2520., 1936., 2144., 2352., 2560., 2188., 2432., 2676., 2920., 2216., 2464., 2712., 2960., 2244., 2496., 2748., 3000., 2272., 2528., 2784., 3040., 2300., 2560., 2820., 3080., 2328., 2592., 2856., 3120., 2356., 2624., 2892., 3160., 2384., 2656., 2928., 3200., 2412., 2688., 2964., 3240., 2440., 2720., 3000., 3280., 2468., 2752., 3036., 3320., 2496., 2784., 3072., 3360., 2524., 2816., 3108., 3400., 2552., 2848., 3144., 3440., 2580., 2880., 3180., 3480., 2608., 2912., 3216., 3520., 2636., 2944., 3252., 3560., 2664., 2976., 3288., 3600., 2692., 3008., 3324., 3640., 2720., 3040., 3360., 3680., 2972., 3328., 3684., 4040., 3000., 3360., 3720., 4080., 3028., 3392., 3756., 4120., 3056., 3424., 3792., 4160., 3084., 3456., 3828., 4200., 3112., 3488., 3864., 4240., 3140., 3520., 3900., 4280., 3168., 3552., 3936., 4320., 3196., 3584., 3972., 4360., 3224., 3616., 4008., 4400., 3252., 3648., 4044., 4440., 3280., 3680., 4080., 4480., 3308., 3712., 4116., 4520., 3336., 3744., 4152., 4560., 3364., 3776., 4188., 4600., 3392., 3808., 4224., 4640., 3420., 3840., 4260., 4680., 3448., 3872., 4296., 4720., 3476., 3904., 4332., 4760., 3504., 3936., 4368., 4800., 3756., 4224., 4692., 5160., 3784., 4256., 4728., 5200., 3812., 4288., 4764., 5240., 3840., 4320., 4800., 5280., 3868., 4352., 4836., 5320., 3896., 4384., 4872., 5360., 3924., 4416., 4908., 5400., 3952., 4448., 4944., 5440., 3980., 4480., 4980., 5480., 4008., 4512., 5016., 5520., 4036., 4544., 5052., 5560., 4064., 4576., 5088., 5600., 4092., 4608., 5124., 5640., 4120., 4640., 5160., 5680., 4148., 4672., 5196., 5720., 4176., 4704., 5232., 5760., 4204., 4736., 5268., 5800., 4232., 4768., 5304., 5840., 4260., 4800., 5340., 5880., 4288., 4832., 5376., 5920., 4540., 5120., 5700., 6280., 4568., 5152., 5736., 6320., 4596., 5184., 5772., 6360., 4624., 5216., 5808., 6400., 4652., 5248., 5844., 6440., 4680., 5280., 5880., 6480., 4708., 5312., 5916., 6520., 4736., 5344., 5952., 6560., 4764., 5376., 5988., 6600., 4792., 5408., 6024., 6640., 4820., 5440., 6060., 6680., 4848., 5472., 6096., 6720., 4876., 5504., 6132., 6760., 4904., 5536., 6168., 6800., 4932., 5568., 6204., 6840., 4960., 5600., 6240., 6880., 4988., 5632., 6276., 6920., 5016., 5664., 6312., 6960., 5044., 5696., 6348., 7000., 5072., 5728., 6384., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3168., 4070., 4196., 3006., 3096., 4000., 5128., 5264., 3760., 3856., 4864., 6216., 6352., 4528., 4624., 2664., 3350., 3428., 2394., 2448., 3168., 3974., 4052., 2826., 2880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {134., 144., 154., 164., 174., 214., 224., 234., 244., 254., 294., 304., 314., 324., 334., 374., 384., 394., 404., 414., 454., 464., 474., 484., 494.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6084.,  6336.,  7804.,  8140.,  8044.,  8392.,  5751.,  6012.,  5922.,  6192.,  7664.,  8000.,  9808., 10256., 10064., 10528.,  7172.,  7520.,  7352.,  7712.,  9296.,  9728., 11856., 12432., 12112., 12704.,  8612.,  9056.,  8792.,  9248.,  5004.,  5328.,  6268.,  6700.,  6412.,  6856.,  4455.,  4788.,  4554.,  4896.,  5940.,  6336.,  7420.,  7948.,  7564.,  8104.,  5247.,  5652.,  5346.,  5760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {228., 268., 244., 288., 260., 308., 276., 328., 292., 348., 356., 428., 372., 448., 388., 468., 404., 488., 420., 508., 484., 588., 500., 608., 516., 628., 532., 648., 548., 668., 612., 748., 628., 768., 644., 788., 660., 808., 676., 828., 740., 908., 756., 928., 772., 948., 788., 968., 804., 988.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11916., 12168., 12420., 12672., 15272., 15608., 15944., 16280., 15740., 16088., 16436., 16784., 11241., 11502., 11763., 12024., 11574., 11844., 12114., 12384., 14992., 15328., 15664., 16000., 19168., 19616., 20064., 20512., 19664., 20128., 20592., 21056., 13996., 14344., 14692., 15040., 14344., 14704., 15064., 15424., 18160., 18592., 19024., 19456., 23136., 23712., 24288., 24864., 23632., 24224., 24816., 25408., 16780., 17224., 17668., 18112., 17128., 17584., 18040., 18496.,  9684., 10008., 10332., 10656., 12104., 12536., 12968., 13400., 12380., 12824., 13268., 13712.,  8577.,  8910.,  9243.,  9576.,  8766.,  9108.,  9450.,  9792., 11484., 11880., 12276., 12672., 14312., 14840., 15368., 15896., 14588., 15128., 15668., 16208., 10089., 10494., 10899., 11304., 10278., 10692., 11106., 11520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 416.,  456.,  496.,  536.,  444.,  488.,  532.,  576.,  472.,  520.,  568.,  616.,  500.,  552.,  604.,  656.,  528.,  584.,  640.,  696.,  640.,  712.,  784.,  856.,  668.,  744.,  820.,  896.,  696.,  776.,  856.,  936.,  724.,  808.,  892.,  976.,  752.,  840.,  928., 1016.,  864.,  968., 1072., 1176.,  892., 1000., 1108., 1216.,  920., 1032., 1144., 1256.,  948., 1064., 1180., 1296.,  976., 1096., 1216., 1336., 1088., 1224., 1360., 1496., 1116., 1256., 1396., 1536., 1144., 1288., 1432., 1576., 1172., 1320., 1468., 1616., 1200., 1352., 1504., 1656., 1312., 1480., 1648., 1816., 1340., 1512., 1684., 1856., 1368., 1544., 1720., 1896., 1396., 1576., 1756., 1936., 1424., 1608., 1792., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6237.,  6336.,  8014.,  8140.,  8266.,  8392.,  5922.,  6012.,  6102.,  6192.,  7892.,  8000., 10120., 10256., 10392., 10528.,  7424.,  7520.,  7616.,  7712.,  9620.,  9728., 12296., 12432., 12568., 12704.,  8960.,  9056.,  9152.,  9248.,  5265.,  5328.,  6622.,  6700.,  6778.,  6856.,  4734.,  4788.,  4842.,  4896.,  6273.,  6336.,  7870.,  7948.,  8026.,  8104.,  5598.,  5652.,  5706.,  5760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {258., 268., 278., 288., 298., 308., 318., 328., 338., 348., 418., 428., 438., 448., 458., 468., 478., 488., 498., 508., 578., 588., 598., 608., 618., 628., 638., 648., 658., 668., 738., 748., 758., 768., 778., 788., 798., 808., 818., 828., 898., 908., 918., 928., 938., 948., 958., 968., 978., 988.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11979., 12474., 12168., 12672., 15368., 16028., 15608., 16280., 15848., 16532., 16088., 16784., 11331., 11844., 11502., 12024., 11673., 12204., 11844., 12384., 15124., 15784., 15328., 16000., 19360., 20240., 19616., 20512., 19872., 20784., 20128., 21056., 14164., 14848., 14344., 15040., 14524., 15232., 14704., 15424., 18388., 19240., 18592., 19456., 23456., 24592., 23712., 24864., 23968., 25136., 24224., 25408., 17044., 17920., 17224., 18112., 17404., 18304., 17584., 18496.,  9891., 10530., 10008., 10656., 12392., 13244., 12536., 13400., 12680., 13556., 12824., 13712.,  8811.,  9468.,  8910.,  9576.,  9009.,  9684.,  9108.,  9792., 11763., 12546., 11880., 12672., 14696., 15740., 14840., 15896., 14984., 16052., 15128., 16208., 10395., 11196., 10494., 11304., 10593., 11412., 10692., 11520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 440.,  516.,  456.,  536.,  472.,  556.,  488.,  576.,  504.,  596.,  520.,  616.,  536.,  636.,  552.,  656.,  568.,  676.,  584.,  696.,  696.,  836.,  712.,  856.,  728.,  876.,  744.,  896.,  760.,  916.,  776.,  936.,  792.,  956.,  808.,  976.,  824.,  996.,  840., 1016.,  952., 1156.,  968., 1176.,  984., 1196., 1000., 1216., 1016., 1236., 1032., 1256., 1048., 1276., 1064., 1296., 1080., 1316., 1096., 1336., 1208., 1476., 1224., 1496., 1240., 1516., 1256., 1536., 1272., 1556., 1288., 1576., 1304., 1596., 1320., 1616., 1336., 1636., 1352., 1656., 1464., 1796., 1480., 1816., 1496., 1836., 1512., 1856., 1528., 1876., 1544., 1896., 1560., 1916., 1576., 1936., 1592., 1956., 1608., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12519., 12822., 13125., 13428., 12888., 13200., 13512., 13824., 15996., 16400., 16804., 17208., 16464., 16880., 17296., 17712., 16932., 17360., 17788., 18216., 17400., 17840., 18280., 18720., 11973., 12294., 12615., 12936., 12306., 12636., 12966., 13296., 12639., 12978., 13317., 13656., 12972., 13320., 13668., 14016., 10772., 11048., 11324., 11600., 11168., 11456., 11744., 12032., 13776., 14144., 14512., 14880., 14272., 14656., 15040., 15424., 14768., 15168., 15568., 15968., 15264., 15680., 16096., 16512., 10364., 10664., 10964., 11264., 10712., 11024., 11336., 11648., 11060., 11384., 11708., 12032., 11408., 11744., 12080., 12416., 17108., 17576., 18044., 18512., 17504., 17984., 18464., 18944., 21712., 22336., 22960., 23584., 22208., 22848., 23488., 24128., 22704., 23360., 24016., 24672., 23200., 23872., 24544., 25216., 15932., 16424., 16916., 17408., 16280., 16784., 17288., 17792., 16628., 17144., 17660., 18176., 16976., 17504., 18032., 18560.,  6471.,  6726.,  6981.,  7236.,  6696.,  6960.,  7224.,  7488.,  8060.,  8400.,  8740.,  9080.,  8336.,  8688.,  9040.,  9392.,  8612.,  8976.,  9340.,  9704.,  8888.,  9264.,  9640., 10016.,  5829.,  6102.,  6375.,  6648.,  6018.,  6300.,  6582.,  6864.,  6207.,  6498.,  6789.,  7080.,  6396.,  6696.,  6996.,  7296., 10071., 10470., 10869., 11268., 10296., 10704., 11112., 11520., 12476., 13008., 13540., 14072., 12752., 13296., 13840., 14384., 13028., 13584., 14140., 14696., 13304., 13872., 14440., 15008.,  8853.,  9270.,  9687., 10104.,  9042.,  9468.,  9894., 10320.,  9231.,  9666., 10101., 10536.,  9420.,  9864., 10308., 10752.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 804.,  880.,  956., 1032.,  832.,  912.,  992., 1072.,  860.,  944., 1028., 1112.,  888.,  976., 1064., 1152.,  916., 1008., 1100., 1192.,  944., 1040., 1136., 1232.,  972., 1072., 1172., 1272., 1000., 1104., 1208., 1312., 1028., 1136., 1244., 1352., 1056., 1168., 1280., 1392., 1252., 1392., 1532., 1672., 1280., 1424., 1568., 1712., 1308., 1456., 1604., 1752., 1336., 1488., 1640., 1792., 1364., 1520., 1676., 1832., 1392., 1552., 1712., 1872., 1420., 1584., 1748., 1912., 1448., 1616., 1784., 1952., 1476., 1648., 1820., 1992., 1504., 1680., 1856., 2032., 1700., 1904., 2108., 2312., 1728., 1936., 2144., 2352., 1756., 1968., 2180., 2392., 1784., 2000., 2216., 2432., 1812., 2032., 2252., 2472., 1840., 2064., 2288., 2512., 1868., 2096., 2324., 2552., 1896., 2128., 2360., 2592., 1924., 2160., 2396., 2632., 1952., 2192., 2432., 2672., 2148., 2416., 2684., 2952., 2176., 2448., 2720., 2992., 2204., 2480., 2756., 3032., 2232., 2512., 2792., 3072., 2260., 2544., 2828., 3112., 2288., 2576., 2864., 3152., 2316., 2608., 2900., 3192., 2344., 2640., 2936., 3232., 2372., 2672., 2972., 3272., 2400., 2704., 3008., 3312., 2596., 2928., 3260., 3592., 2624., 2960., 3296., 3632., 2652., 2992., 3332., 3672., 2680., 3024., 3368., 3712., 2708., 3056., 3404., 3752., 2736., 3088., 3440., 3792., 2764., 3120., 3476., 3832., 2792., 3152., 3512., 3872., 2820., 3184., 3548., 3912., 2848., 3216., 3584., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12375., 12474., 12573., 12672., 15902., 16028., 16154., 16280., 16406., 16532., 16658., 16784., 11754., 11844., 11934., 12024., 12114., 12204., 12294., 12384., 15676., 15784., 15892., 16000., 20104., 20240., 20376., 20512., 20648., 20784., 20920., 21056., 14752., 14848., 14944., 15040., 15136., 15232., 15328., 15424., 19132., 19240., 19348., 19456., 24456., 24592., 24728., 24864., 25000., 25136., 25272., 25408., 17824., 17920., 18016., 18112., 18208., 18304., 18400., 18496., 10467., 10530., 10593., 10656., 13166., 13244., 13322., 13400., 13478., 13556., 13634., 13712.,  9414.,  9468.,  9522.,  9576.,  9630.,  9684.,  9738.,  9792., 12483., 12546., 12609., 12672., 15662., 15740., 15818., 15896., 15974., 16052., 16130., 16208., 11142., 11196., 11250., 11304., 11358., 11412., 11466., 11520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 506.,  516.,  526.,  536.,  546.,  556.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  636.,  646.,  656.,  666.,  676.,  686.,  696.,  826.,  836.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  916.,  926.,  936.,  946.,  956.,  966.,  976.,  986.,  996., 1006., 1016., 1146., 1156., 1166., 1176., 1186., 1196., 1206., 1216., 1226., 1236., 1246., 1256., 1266., 1276., 1286., 1296., 1306., 1316., 1326., 1336., 1466., 1476., 1486., 1496., 1506., 1516., 1526., 1536., 1546., 1556., 1566., 1576., 1586., 1596., 1606., 1616., 1626., 1636., 1646., 1656., 1786., 1796., 1806., 1816., 1826., 1836., 1846., 1856., 1866., 1876., 1886., 1896., 1906., 1916., 1926., 1936., 1946., 1956., 1966., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12633., 13230., 12822., 13428., 13011., 13626., 13200., 13824., 16160., 16956., 16400., 17208., 16640., 17460., 16880., 17712., 17120., 17964., 17360., 18216., 17600., 18468., 17840., 18720., 12123., 12756., 12294., 12936., 12465., 13116., 12636., 13296., 12807., 13476., 12978., 13656., 13149., 13836., 13320., 14016., 10844., 11384., 11048., 11600., 11252., 11816., 11456., 12032., 13888., 14608., 14144., 14880., 14400., 15152., 14656., 15424., 14912., 15696., 15168., 15968., 15424., 16240., 15680., 16512., 10484., 11072., 10664., 11264., 10844., 11456., 11024., 11648., 11204., 11840., 11384., 12032., 11564., 12224., 11744., 12416., 17372., 18296., 17576., 18512., 17780., 18728., 17984., 18944., 22080., 23312., 22336., 23584., 22592., 23856., 22848., 24128., 23104., 24400., 23360., 24672., 23616., 24944., 23872., 25216., 16244., 17216., 16424., 17408., 16604., 17600., 16784., 17792., 16964., 17984., 17144., 18176., 17324., 18368., 17504., 18560.,  6609.,  7110.,  6726.,  7236.,  6843.,  7362.,  6960.,  7488.,  8256.,  8924.,  8400.,  9080.,  8544.,  9236.,  8688.,  9392.,  8832.,  9548.,  8976.,  9704.,  9120.,  9860.,  9264., 10016.,  6003.,  6540.,  6102.,  6648.,  6201.,  6756.,  6300.,  6864.,  6399.,  6972.,  6498.,  7080.,  6597.,  7188.,  6696.,  7296., 10353., 11142., 10470., 11268., 10587., 11394., 10704., 11520., 12864., 13916., 13008., 14072., 13152., 14228., 13296., 14384., 13440., 14540., 13584., 14696., 13728., 14852., 13872., 15008.,  9171.,  9996.,  9270., 10104.,  9369., 10212.,  9468., 10320.,  9567., 10428.,  9666., 10536.,  9765., 10644.,  9864., 10752.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 864., 1012.,  880., 1032.,  896., 1052.,  912., 1072.,  928., 1092.,  944., 1112.,  960., 1132.,  976., 1152.,  992., 1172., 1008., 1192., 1024., 1212., 1040., 1232., 1056., 1252., 1072., 1272., 1088., 1292., 1104., 1312., 1120., 1332., 1136., 1352., 1152., 1372., 1168., 1392., 1376., 1652., 1392., 1672., 1408., 1692., 1424., 1712., 1440., 1732., 1456., 1752., 1472., 1772., 1488., 1792., 1504., 1812., 1520., 1832., 1536., 1852., 1552., 1872., 1568., 1892., 1584., 1912., 1600., 1932., 1616., 1952., 1632., 1972., 1648., 1992., 1664., 2012., 1680., 2032., 1888., 2292., 1904., 2312., 1920., 2332., 1936., 2352., 1952., 2372., 1968., 2392., 1984., 2412., 2000., 2432., 2016., 2452., 2032., 2472., 2048., 2492., 2064., 2512., 2080., 2532., 2096., 2552., 2112., 2572., 2128., 2592., 2144., 2612., 2160., 2632., 2176., 2652., 2192., 2672., 2400., 2932., 2416., 2952., 2432., 2972., 2448., 2992., 2464., 3012., 2480., 3032., 2496., 3052., 2512., 3072., 2528., 3092., 2544., 3112., 2560., 3132., 2576., 3152., 2592., 3172., 2608., 3192., 2624., 3212., 2640., 3232., 2656., 3252., 2672., 3272., 2688., 3292., 2704., 3312., 2912., 3572., 2928., 3592., 2944., 3612., 2960., 3632., 2976., 3652., 2992., 3672., 3008., 3692., 3024., 3712., 3040., 3732., 3056., 3752., 3072., 3772., 3088., 3792., 3104., 3812., 3120., 3832., 3136., 3852., 3152., 3872., 3168., 3892., 3184., 3912., 3200., 3932., 3216., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16797., 17202., 17607., 18012., 17166., 17580., 17994., 18408., 17535., 17958., 18381., 18804., 17904., 18336., 18768., 19200., 21540., 22080., 22620., 23160., 22008., 22560., 23112., 23664., 22476., 23040., 23604., 24168., 22944., 23520., 24096., 24672., 23412., 24000., 24588., 25176., 23880., 24480., 25080., 25680., 24348., 24960., 25572., 26184., 24816., 25440., 26064., 26688., 16509., 16950., 17391., 17832., 16842., 17292., 17742., 18192., 17175., 17634., 18093., 18552., 17508., 17976., 18444., 18912., 17841., 18318., 18795., 19272., 18174., 18660., 19146., 19632., 18507., 19002., 19497., 19992., 18840., 19344., 19848., 20352.,  5404.,  5560.,  5716.,  5872.,  5800.,  5968.,  6136.,  6304.,  6196.,  6376.,  6556.,  6736.,  6592.,  6784.,  6976.,  7168.,  7088.,  7296.,  7504.,  7712.,  7584.,  7808.,  8032.,  8256.,  8080.,  8320.,  8560.,  8800.,  8576.,  8832.,  9088.,  9344.,  9072.,  9344.,  9616.,  9888.,  9568.,  9856., 10144., 10432., 10064., 10368., 10672., 10976., 10560., 10880., 11200., 11520.,  6172.,  6376.,  6580.,  6784.,  6520.,  6736.,  6952.,  7168.,  6868.,  7096.,  7324.,  7552.,  7216.,  7456.,  7696.,  7936.,  7564.,  7816.,  8068.,  8320.,  7912.,  8176.,  8440.,  8704.,  8260.,  8536.,  8812.,  9088.,  8608.,  8896.,  9184.,  9472., 18076., 18616., 19156., 19696., 18472., 19024., 19576., 20128., 18868., 19432., 19996., 20560., 19264., 19840., 20416., 20992., 22960., 23680., 24400., 25120., 23456., 24192., 24928., 25664., 23952., 24704., 25456., 26208., 24448., 25216., 25984., 26752., 24944., 25728., 26512., 27296., 25440., 26240., 27040., 27840., 25936., 26752., 27568., 28384., 26432., 27264., 28096., 28928., 17308., 17896., 18484., 19072., 17656., 18256., 18856., 19456., 18004., 18616., 19228., 19840., 18352., 18976., 19600., 20224., 18700., 19336., 19972., 20608., 19048., 19696., 20344., 20992., 19396., 20056., 20716., 21376., 19744., 20416., 21088., 21760.,  3117.,  3234.,  3351.,  3468.,  3342.,  3468.,  3594.,  3720.,  3567.,  3702.,  3837.,  3972.,  3792.,  3936.,  4080.,  4224.,  4068.,  4224.,  4380.,  4536.,  4344.,  4512.,  4680.,  4848.,  4620.,  4800.,  4980.,  5160.,  4896.,  5088.,  5280.,  5472.,  5172.,  5376.,  5580.,  5784.,  5448.,  5664.,  5880.,  6096.,  5724.,  5952.,  6180.,  6408.,  6000.,  6240.,  6480.,  6720.,  3405.,  3558.,  3711.,  3864.,  3594.,  3756.,  3918.,  4080.,  3783.,  3954.,  4125.,  4296.,  3972.,  4152.,  4332.,  4512.,  4161.,  4350.,  4539.,  4728.,  4350.,  4548.,  4746.,  4944.,  4539.,  4746.,  4953.,  5160.,  4728.,  4944.,  5160.,  5376., 10317., 10722., 11127., 11532., 10542., 10956., 11370., 11784., 10767., 11190., 11613., 12036., 10992., 11424., 11856., 12288., 12900., 13440., 13980., 14520., 13176., 13728., 14280., 14832., 13452., 14016., 14580., 15144., 13728., 14304., 14880., 15456., 14004., 14592., 15180., 15768., 14280., 14880., 15480., 16080., 14556., 15168., 15780., 16392., 14832., 15456., 16080., 16704.,  9453.,  9894., 10335., 10776.,  9642., 10092., 10542., 10992.,  9831., 10290., 10749., 11208., 10020., 10488., 10956., 11424., 10209., 10686., 11163., 11640., 10398., 10884., 11370., 11856., 10587., 11082., 11577., 12072., 10776., 11280., 11784., 12288.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1580., 1728., 1876., 2024., 1608., 1760., 1912., 2064., 1636., 1792., 1948., 2104., 1664., 1824., 1984., 2144., 1692., 1856., 2020., 2184., 1720., 1888., 2056., 2224., 1748., 1920., 2092., 2264., 1776., 1952., 2128., 2304., 1804., 1984., 2164., 2344., 1832., 2016., 2200., 2384., 1860., 2048., 2236., 2424., 1888., 2080., 2272., 2464., 1916., 2112., 2308., 2504., 1944., 2144., 2344., 2544., 1972., 2176., 2380., 2584., 2000., 2208., 2416., 2624., 2028., 2240., 2452., 2664., 2056., 2272., 2488., 2704., 2084., 2304., 2524., 2744., 2112., 2336., 2560., 2784., 2476., 2752., 3028., 3304., 2504., 2784., 3064., 3344., 2532., 2816., 3100., 3384., 2560., 2848., 3136., 3424., 2588., 2880., 3172., 3464., 2616., 2912., 3208., 3504., 2644., 2944., 3244., 3544., 2672., 2976., 3280., 3584., 2700., 3008., 3316., 3624., 2728., 3040., 3352., 3664., 2756., 3072., 3388., 3704., 2784., 3104., 3424., 3744., 2812., 3136., 3460., 3784., 2840., 3168., 3496., 3824., 2868., 3200., 3532., 3864., 2896., 3232., 3568., 3904., 2924., 3264., 3604., 3944., 2952., 3296., 3640., 3984., 2980., 3328., 3676., 4024., 3008., 3360., 3712., 4064., 3372., 3776., 4180., 4584., 3400., 3808., 4216., 4624., 3428., 3840., 4252., 4664., 3456., 3872., 4288., 4704., 3484., 3904., 4324., 4744., 3512., 3936., 4360., 4784., 3540., 3968., 4396., 4824., 3568., 4000., 4432., 4864., 3596., 4032., 4468., 4904., 3624., 4064., 4504., 4944., 3652., 4096., 4540., 4984., 3680., 4128., 4576., 5024., 3708., 4160., 4612., 5064., 3736., 4192., 4648., 5104., 3764., 4224., 4684., 5144., 3792., 4256., 4720., 5184., 3820., 4288., 4756., 5224., 3848., 4320., 4792., 5264., 3876., 4352., 4828., 5304., 3904., 4384., 4864., 5344., 4268., 4800., 5332., 5864., 4296., 4832., 5368., 5904., 4324., 4864., 5404., 5944., 4352., 4896., 5440., 5984., 4380., 4928., 5476., 6024., 4408., 4960., 5512., 6064., 4436., 4992., 5548., 6104., 4464., 5024., 5584., 6144., 4492., 5056., 5620., 6184., 4520., 5088., 5656., 6224., 4548., 5120., 5692., 6264., 4576., 5152., 5728., 6304., 4604., 5184., 5764., 6344., 4632., 5216., 5800., 6384., 4660., 5248., 5836., 6424., 4688., 5280., 5872., 6464., 4716., 5312., 5908., 6504., 4744., 5344., 5944., 6544., 4772., 5376., 5980., 6584., 4800., 5408., 6016., 6624., 5164., 5824., 6484., 7144., 5192., 5856., 6520., 7184., 5220., 5888., 6556., 7224., 5248., 5920., 6592., 7264., 5276., 5952., 6628., 7304., 5304., 5984., 6664., 7344., 5332., 6016., 6700., 7384., 5360., 6048., 6736., 7424., 5388., 6080., 6772., 7464., 5416., 6112., 6808., 7504., 5444., 6144., 6844., 7544., 5472., 6176., 6880., 7584., 5500., 6208., 6916., 7624., 5528., 6240., 6952., 7664., 5556., 6272., 6988., 7704., 5584., 6304., 7024., 7744., 5612., 6336., 7060., 7784., 5640., 6368., 7096., 7824., 5668., 6400., 7132., 7864., 5696., 6432., 7168., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6500.,  7885.,  8080.,  6230.,  6380.,  8200.,  9930., 10140.,  7800.,  7960.,  9960., 12030., 12240.,  9400.,  9560.,  5420.,  6460.,  6580.,  4970.,  5060.,  6440.,  7660.,  7780.,  5870.,  5960.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 371.,  392.,  413.,  434.,  455.,  581.,  602.,  623.,  644.,  665.,  791.,  812.,  833.,  854.,  875., 1001., 1022., 1043., 1064., 1085., 1211., 1232., 1253., 1274., 1295.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12580., 13000., 15245., 15770., 15620., 16160., 12028., 12460., 12316., 12760., 15840., 16400., 19160., 19860., 19560., 20280., 15024., 15600., 15328., 15920., 19200., 19920., 23160., 24060., 23560., 24480., 18064., 18800., 18368., 19120., 10300., 10840., 12245., 12920., 12470., 13160.,  9388.,  9940.,  9556., 10120., 12220., 12880., 14495., 15320., 14720., 15560., 11068., 11740., 11236., 11920.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 664.,  742.,  700.,  784.,  736.,  826.,  772.,  868.,  808.,  910., 1024., 1162., 1060., 1204., 1096., 1246., 1132., 1288., 1168., 1330., 1384., 1582., 1420., 1624., 1456., 1666., 1492., 1708., 1528., 1750., 1744., 2002., 1780., 2044., 1816., 2086., 1852., 2128., 1888., 2170., 2104., 2422., 2140., 2464., 2176., 2506., 2212., 2548., 2248., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10660., 11080., 11500., 11920., 15629., 16154., 16679., 17204., 16108., 16648., 17188., 17728., 12680., 13112., 13544., 13976., 13052., 13496., 13940., 14384., 13072., 13504., 13936., 14368., 18996., 19504., 20012., 20520., 19520., 20048., 20576., 21104., 15648., 16032., 16416., 16800., 16048., 16448., 16848., 17248., 16688., 17152., 17616., 18080., 20268., 20848., 21428., 22008., 20792., 21392., 21992., 22592., 15744., 16224., 16704., 17184., 16144., 16640., 17136., 17632., 13020., 13432., 13844., 14256., 13639., 14122., 14605., 15088., 14074., 14572., 15070., 15568.,  8816.,  9176.,  9536.,  9896.,  9140.,  9512.,  9884., 10256., 10724., 11128., 11532., 11936., 12485., 12990., 13495., 14000., 12920., 13440., 13960., 14480.,  9432.,  9848., 10264., 10680.,  9756., 10184., 10612., 11040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1250., 1328., 1406., 1484., 1316., 1400., 1484., 1568., 1382., 1472., 1562., 1652., 1448., 1544., 1640., 1736., 1514., 1616., 1718., 1820., 1910., 2048., 2186., 2324., 1976., 2120., 2264., 2408., 2042., 2192., 2342., 2492., 2108., 2264., 2420., 2576., 2174., 2336., 2498., 2660., 2570., 2768., 2966., 3164., 2636., 2840., 3044., 3248., 2702., 2912., 3122., 3332., 2768., 2984., 3200., 3416., 2834., 3056., 3278., 3500., 3230., 3488., 3746., 4004., 3296., 3560., 3824., 4088., 3362., 3632., 3902., 4172., 3428., 3704., 3980., 4256., 3494., 3776., 4058., 4340., 3890., 4208., 4526., 4844., 3956., 4280., 4604., 4928., 4022., 4352., 4682., 5012., 4088., 4424., 4760., 5096., 4154., 4496., 4838., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12838., 13000., 15575., 15770., 15965., 16160., 12310., 12460., 12610., 12760., 16224., 16400., 19650., 19860., 20070., 20280., 15440., 15600., 15760., 15920., 19744., 19920., 23850., 24060., 24270., 24480., 18640., 18800., 18960., 19120., 10738., 10840., 12800., 12920., 13040., 13160.,  9850.,  9940., 10030., 10120., 12778., 12880., 15200., 15320., 15440., 15560., 11650., 11740., 11830., 11920.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 721.,  742.,  763.,  784.,  805.,  826.,  847.,  868.,  889.,  910., 1141., 1162., 1183., 1204., 1225., 1246., 1267., 1288., 1309., 1330., 1561., 1582., 1603., 1624., 1645., 1666., 1687., 1708., 1729., 1750., 1981., 2002., 2023., 2044., 2065., 2086., 2107., 2128., 2149., 2170., 2401., 2422., 2443., 2464., 2485., 2506., 2527., 2548., 2569., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24848., 25676., 25160., 26000., 30115., 31150., 30490., 31540., 30865., 31930., 31240., 32320., 23768., 24620., 24056., 24920., 24344., 25220., 24632., 25520., 21616., 22464., 21952., 22816., 23712., 24708., 24112., 25128., 24512., 25548., 24912., 25968., 16304., 17056., 16608., 17376., 16912., 17696., 17216., 18016., 19632., 20544., 19968., 20896., 23520., 24660., 23920., 25080., 24320., 25500., 24720., 25920., 18416., 19360., 18720., 19680., 19024., 20000., 19328., 20320., 13240., 14052., 13432., 14256., 13897., 14848., 14122., 15088., 14347., 15328., 14572., 15568.,  9008.,  9716.,  9176.,  9896.,  9344., 10076.,  9512., 10256., 10936., 11732., 11128., 11936., 12765., 13760., 12990., 14000., 13215., 14240., 13440., 14480.,  9680., 10500.,  9848., 10680., 10016., 10860., 10184., 11040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1292., 1442., 1328., 1484., 1364., 1526., 1400., 1568., 1436., 1610., 1472., 1652., 1508., 1694., 1544., 1736., 1580., 1778., 1616., 1820., 2012., 2282., 2048., 2324., 2084., 2366., 2120., 2408., 2156., 2450., 2192., 2492., 2228., 2534., 2264., 2576., 2300., 2618., 2336., 2660., 2732., 3122., 2768., 3164., 2804., 3206., 2840., 3248., 2876., 3290., 2912., 3332., 2948., 3374., 2984., 3416., 3020., 3458., 3056., 3500., 3452., 3962., 3488., 4004., 3524., 4046., 3560., 4088., 3596., 4130., 3632., 4172., 3668., 4214., 3704., 4256., 3740., 4298., 3776., 4340., 4172., 4802., 4208., 4844., 4244., 4886., 4280., 4928., 4316., 4970., 4352., 5012., 4388., 5054., 4424., 5096., 4460., 5138., 4496., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8996.,  9376.,  9756., 10136.,  9352.,  9744., 10136., 10528., 12027., 12486., 12945., 13404., 12506., 12980., 13454., 13928., 12985., 13474., 13963., 14452., 13464., 13968., 14472., 14976.,  8092.,  8432.,  8772.,  9112.,  8464.,  8816.,  9168.,  9520.,  8836.,  9200.,  9564.,  9928.,  9208.,  9584.,  9960., 10336., 12304., 12768., 13232., 13696., 12704., 13184., 13664., 14144., 17820., 18368., 18916., 19464., 18344., 18912., 19480., 20048., 18868., 19456., 20044., 20632., 19392., 20000., 20608., 21216., 14960., 15392., 15824., 16256., 15360., 15808., 16256., 16704., 15760., 16224., 16688., 17152., 16160., 16640., 17120., 17600., 13584., 14048., 14512., 14976., 13984., 14464., 14944., 15424., 16396., 16960., 17524., 18088., 16920., 17504., 18088., 18672., 17444., 18048., 18652., 19256., 17968., 18592., 19216., 19840., 12144., 12576., 13008., 13440., 12544., 12992., 13440., 13888., 12944., 13408., 13872., 14336., 13344., 13824., 14304., 14784., 11716., 12144., 12572., 13000., 12088., 12528., 12968., 13408., 12059., 12562., 13065., 13568., 12494., 13012., 13530., 14048., 12929., 13462., 13995., 14528., 13364., 13912., 14460., 15008.,  7772.,  8160.,  8548.,  8936.,  8096.,  8496.,  8896.,  9296.,  8420.,  8832.,  9244.,  9656.,  8744.,  9168.,  9592., 10016., 10644., 10992., 11340., 11688., 11016., 11376., 11736., 12096., 12439., 12858., 13277., 13696., 12874., 13308., 13742., 14176., 13309., 13758., 14207., 14656., 13744., 14208., 14672., 15136.,  9836., 10144., 10452., 10760., 10160., 10480., 10800., 11120., 10484., 10816., 11148., 11480., 10808., 11152., 11496., 11840.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2434.,  2584.,  2734.,  2884.,  2500.,  2656.,  2812.,  2968.,  2566.,  2728.,  2890.,  3052.,  2632.,  2800.,  2968.,  3136.,  2698.,  2872.,  3046.,  3220.,  2764.,  2944.,  3124.,  3304.,  2830.,  3016.,  3202.,  3388.,  2896.,  3088.,  3280.,  3472.,  2962.,  3160.,  3358.,  3556.,  3028.,  3232.,  3436.,  3640.,  3754.,  4024.,  4294.,  4564.,  3820.,  4096.,  4372.,  4648.,  3886.,  4168.,  4450.,  4732.,  3952.,  4240.,  4528.,  4816.,  4018.,  4312.,  4606.,  4900.,  4084.,  4384.,  4684.,  4984.,  4150.,  4456.,  4762.,  5068.,  4216.,  4528.,  4840.,  5152.,  4282.,  4600.,  4918.,  5236.,  4348.,  4672.,  4996.,  5320.,  5074.,  5464.,  5854.,  6244.,  5140.,  5536.,  5932.,  6328.,  5206.,  5608.,  6010.,  6412.,  5272.,  5680.,  6088.,  6496.,  5338.,  5752.,  6166.,  6580.,  5404.,  5824.,  6244.,  6664.,  5470.,  5896.,  6322.,  6748.,  5536.,  5968.,  6400.,  6832.,  5602.,  6040.,  6478.,  6916.,  5668.,  6112.,  6556.,  7000.,  6394.,  6904.,  7414.,  7924.,  6460.,  6976.,  7492.,  8008.,  6526.,  7048.,  7570.,  8092.,  6592.,  7120.,  7648.,  8176.,  6658.,  7192.,  7726.,  8260.,  6724.,  7264.,  7804.,  8344.,  6790.,  7336.,  7882.,  8428.,  6856.,  7408.,  7960.,  8512.,  6922.,  7480.,  8038.,  8596.,  6988.,  7552.,  8116.,  8680.,  7714.,  8344.,  8974.,  9604.,  7780.,  8416.,  9052.,  9688.,  7846.,  8488.,  9130.,  9772.,  7912.,  8560.,  9208.,  9856.,  7978.,  8632.,  9286.,  9940.,  8044.,  8704.,  9364., 10024.,  8110.,  8776.,  9442., 10108.,  8176.,  8848.,  9520., 10192.,  8242.,  8920.,  9598., 10276.,  8308.,  8992.,  9676., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25514., 25676., 25838., 26000., 30955., 31150., 31345., 31540., 31735., 31930., 32125., 32320., 24470., 24620., 24770., 24920., 25070., 25220., 25370., 25520., 22288., 22464., 22640., 22816., 24498., 24708., 24918., 25128., 25338., 25548., 25758., 25968., 16896., 17056., 17216., 17376., 17536., 17696., 17856., 18016., 20368., 20544., 20720., 20896., 24450., 24660., 24870., 25080., 25290., 25500., 25710., 25920., 19200., 19360., 19520., 19680., 19840., 20000., 20160., 20320., 13950., 14052., 14154., 14256., 14728., 14848., 14968., 15088., 15208., 15328., 15448., 15568.,  9626.,  9716.,  9806.,  9896.,  9986., 10076., 10166., 10256., 11630., 11732., 11834., 11936., 13640., 13760., 13880., 14000., 14120., 14240., 14360., 14480., 10410., 10500., 10590., 10680., 10770., 10860., 10950., 11040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1421., 1442., 1463., 1484., 1505., 1526., 1547., 1568., 1589., 1610., 1631., 1652., 1673., 1694., 1715., 1736., 1757., 1778., 1799., 1820., 2261., 2282., 2303., 2324., 2345., 2366., 2387., 2408., 2429., 2450., 2471., 2492., 2513., 2534., 2555., 2576., 2597., 2618., 2639., 2660., 3101., 3122., 3143., 3164., 3185., 3206., 3227., 3248., 3269., 3290., 3311., 3332., 3353., 3374., 3395., 3416., 3437., 3458., 3479., 3500., 3941., 3962., 3983., 4004., 4025., 4046., 4067., 4088., 4109., 4130., 4151., 4172., 4193., 4214., 4235., 4256., 4277., 4298., 4319., 4340., 4781., 4802., 4823., 4844., 4865., 4886., 4907., 4928., 4949., 4970., 4991., 5012., 5033., 5054., 5075., 5096., 5117., 5138., 5159., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20584., 21332., 20896., 21656., 21208., 21980., 21520., 22304., 24143., 25046., 24518., 25436., 24893., 25826., 25268., 26216., 25643., 26606., 26018., 26996., 26393., 27386., 26768., 27776., 17552., 18220., 17840., 18520., 18128., 18820., 18416., 19120., 18704., 19420., 18992., 19720., 19280., 20020., 19568., 20320., 20880., 21792., 21216., 22144., 21552., 22496., 21888., 22848., 22832., 23908., 23232., 24328., 23632., 24748., 24032., 25168., 24432., 25588., 24832., 26008., 25232., 26428., 25632., 26848., 16048., 16896., 16352., 17216., 16656., 17536., 16960., 17856., 17264., 18176., 17568., 18496., 17872., 18816., 18176., 19136., 19088., 20000., 19424., 20352., 19760., 20704., 20096., 21056., 22448., 23556., 22848., 23976., 23248., 24396., 23648., 24816., 24048., 25236., 24448., 25656., 24848., 26076., 25248., 26496., 17072., 17920., 17376., 18240., 17680., 18560., 17984., 18880., 18288., 19200., 18592., 19520., 18896., 19840., 19200., 20160., 11952., 12796., 12144., 13000., 12336., 13204., 12528., 13408., 12337., 13328., 12562., 13568., 12787., 13808., 13012., 14048., 13237., 14288., 13462., 14528., 13687., 14768., 13912., 15008.,  7992.,  8756.,  8160.,  8936.,  8328.,  9116.,  8496.,  9296.,  8664.,  9476.,  8832.,  9656.,  9000.,  9836.,  9168., 10016., 10800., 11484., 10992., 11688., 11184., 11892., 11376., 12096., 12633., 13456., 12858., 13696., 13083., 13936., 13308., 14176., 13533., 14416., 13758., 14656., 13983., 14896., 14208., 15136.,  9976., 10580., 10144., 10760., 10312., 10940., 10480., 11120., 10648., 11300., 10816., 11480., 10984., 11660., 11152., 11840.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2548.,  2842.,  2584.,  2884.,  2620.,  2926.,  2656.,  2968.,  2692.,  3010.,  2728.,  3052.,  2764.,  3094.,  2800.,  3136.,  2836.,  3178.,  2872.,  3220.,  2908.,  3262.,  2944.,  3304.,  2980.,  3346.,  3016.,  3388.,  3052.,  3430.,  3088.,  3472.,  3124.,  3514.,  3160.,  3556.,  3196.,  3598.,  3232.,  3640.,  3988.,  4522.,  4024.,  4564.,  4060.,  4606.,  4096.,  4648.,  4132.,  4690.,  4168.,  4732.,  4204.,  4774.,  4240.,  4816.,  4276.,  4858.,  4312.,  4900.,  4348.,  4942.,  4384.,  4984.,  4420.,  5026.,  4456.,  5068.,  4492.,  5110.,  4528.,  5152.,  4564.,  5194.,  4600.,  5236.,  4636.,  5278.,  4672.,  5320.,  5428.,  6202.,  5464.,  6244.,  5500.,  6286.,  5536.,  6328.,  5572.,  6370.,  5608.,  6412.,  5644.,  6454.,  5680.,  6496.,  5716.,  6538.,  5752.,  6580.,  5788.,  6622.,  5824.,  6664.,  5860.,  6706.,  5896.,  6748.,  5932.,  6790.,  5968.,  6832.,  6004.,  6874.,  6040.,  6916.,  6076.,  6958.,  6112.,  7000.,  6868.,  7882.,  6904.,  7924.,  6940.,  7966.,  6976.,  8008.,  7012.,  8050.,  7048.,  8092.,  7084.,  8134.,  7120.,  8176.,  7156.,  8218.,  7192.,  8260.,  7228.,  8302.,  7264.,  8344.,  7300.,  8386.,  7336.,  8428.,  7372.,  8470.,  7408.,  8512.,  7444.,  8554.,  7480.,  8596.,  7516.,  8638.,  7552.,  8680.,  8308.,  9562.,  8344.,  9604.,  8380.,  9646.,  8416.,  9688.,  8452.,  9730.,  8488.,  9772.,  8524.,  9814.,  8560.,  9856.,  8596.,  9898.,  8632.,  9940.,  8668.,  9982.,  8704., 10024.,  8740., 10066.,  8776., 10108.,  8812., 10150.,  8848., 10192.,  8884., 10234.,  8920., 10276.,  8956., 10318.,  8992., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10596., 10960., 11324., 11688., 10952., 11328., 11704., 12080., 11308., 11696., 12084., 12472., 11664., 12064., 12464., 12864., 10775., 11166., 11557., 11948., 11254., 11660., 12066., 12472., 11733., 12154., 12575., 12996., 12212., 12648., 13084., 13520., 12691., 13142., 13593., 14044., 13170., 13636., 14102., 14568., 13649., 14130., 14611., 15092., 14128., 14624., 15120., 15616.,  6980.,  7264.,  7548.,  7832.,  7352.,  7648.,  7944.,  8240.,  7724.,  8032.,  8340.,  8648.,  8096.,  8416.,  8736.,  9056.,  8468.,  8800.,  9132.,  9464.,  8840.,  9184.,  9528.,  9872.,  9212.,  9568.,  9924., 10280.,  9584.,  9952., 10320., 10688., 15888., 16416., 16944., 17472., 16288., 16832., 17376., 17920., 16688., 17248., 17808., 18368., 17088., 17664., 18240., 18816., 18220., 18784., 19348., 19912., 18744., 19328., 19912., 20496., 19268., 19872., 20476., 21080., 19792., 20416., 21040., 21664., 20316., 20960., 21604., 22248., 20840., 21504., 22168., 22832., 21364., 22048., 22732., 23416., 21888., 22592., 23296., 24000., 15312., 15776., 16240., 16704., 15712., 16192., 16672., 17152., 16112., 16608., 17104., 17600., 16512., 17024., 17536., 18048., 16912., 17440., 17968., 18496., 17312., 17856., 18400., 18944., 17712., 18272., 18832., 19392., 18112., 18688., 19264., 19840., 11024., 11552., 12080., 12608., 11424., 11968., 12512., 13056., 11824., 12384., 12944., 13504., 12224., 12800., 13376., 13952., 13324., 13920., 14516., 15112., 13848., 14464., 15080., 15696., 14372., 15008., 15644., 16280., 14896., 15552., 16208., 16864., 15420., 16096., 16772., 17448., 15944., 16640., 17336., 18032., 16468., 17184., 17900., 18616., 16992., 17728., 18464., 19200., 10448., 10912., 11376., 11840., 10848., 11328., 11808., 12288., 11248., 11744., 12240., 12736., 11648., 12160., 12672., 13184., 12048., 12576., 13104., 13632., 12448., 12992., 13536., 14080., 12848., 13408., 13968., 14528., 13248., 13824., 14400., 14976., 14228., 14688., 15148., 15608., 14600., 15072., 15544., 16016., 14972., 15456., 15940., 16424., 15344., 15840., 16336., 16832., 12931., 13410., 13889., 14368., 13366., 13860., 14354., 14848., 13801., 14310., 14819., 15328., 14236., 14760., 15284., 15808., 14671., 15210., 15749., 16288., 15106., 15660., 16214., 16768., 15541., 16110., 16679., 17248., 15976., 16560., 17144., 17728.,  8692.,  9072.,  9452.,  9832.,  9016.,  9408.,  9800., 10192.,  9340.,  9744., 10148., 10552.,  9664., 10080., 10496., 10912.,  9988., 10416., 10844., 11272., 10312., 10752., 11192., 11632., 10636., 11088., 11540., 11992., 10960., 11424., 11888., 12352., 12660., 13024., 13388., 13752., 13032., 13408., 13784., 14160., 13404., 13792., 14180., 14568., 13776., 14176., 14576., 14976., 15099., 15538., 15977., 16416., 15534., 15988., 16442., 16896., 15969., 16438., 16907., 17376., 16404., 16888., 17372., 17856., 16839., 17338., 17837., 18336., 17274., 17788., 18302., 18816., 17709., 18238., 18767., 19296., 18144., 18688., 19232., 19776., 12436., 12784., 13132., 13480., 12760., 13120., 13480., 13840., 13084., 13456., 13828., 14200., 13408., 13792., 14176., 14560., 13732., 14128., 14524., 14920., 14056., 14464., 14872., 15280., 14380., 14800., 15220., 15640., 14704., 15136., 15568., 16000.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4802.,  5096.,  5390.,  5684.,  4868.,  5168.,  5468.,  5768.,  4934.,  5240.,  5546.,  5852.,  5000.,  5312.,  5624.,  5936.,  5066.,  5384.,  5702.,  6020.,  5132.,  5456.,  5780.,  6104.,  5198.,  5528.,  5858.,  6188.,  5264.,  5600.,  5936.,  6272.,  5330.,  5672.,  6014.,  6356.,  5396.,  5744.,  6092.,  6440.,  5462.,  5816.,  6170.,  6524.,  5528.,  5888.,  6248.,  6608.,  5594.,  5960.,  6326.,  6692.,  5660.,  6032.,  6404.,  6776.,  5726.,  6104.,  6482.,  6860.,  5792.,  6176.,  6560.,  6944.,  5858.,  6248.,  6638.,  7028.,  5924.,  6320.,  6716.,  7112.,  5990.,  6392.,  6794.,  7196.,  6056.,  6464.,  6872.,  7280.,  7442.,  7976.,  8510.,  9044.,  7508.,  8048.,  8588.,  9128.,  7574.,  8120.,  8666.,  9212.,  7640.,  8192.,  8744.,  9296.,  7706.,  8264.,  8822.,  9380.,  7772.,  8336.,  8900.,  9464.,  7838.,  8408.,  8978.,  9548.,  7904.,  8480.,  9056.,  9632.,  7970.,  8552.,  9134.,  9716.,  8036.,  8624.,  9212.,  9800.,  8102.,  8696.,  9290.,  9884.,  8168.,  8768.,  9368.,  9968.,  8234.,  8840.,  9446., 10052.,  8300.,  8912.,  9524., 10136.,  8366.,  8984.,  9602., 10220.,  8432.,  9056.,  9680., 10304.,  8498.,  9128.,  9758., 10388.,  8564.,  9200.,  9836., 10472.,  8630.,  9272.,  9914., 10556.,  8696.,  9344.,  9992., 10640., 10082., 10856., 11630., 12404., 10148., 10928., 11708., 12488., 10214., 11000., 11786., 12572., 10280., 11072., 11864., 12656., 10346., 11144., 11942., 12740., 10412., 11216., 12020., 12824., 10478., 11288., 12098., 12908., 10544., 11360., 12176., 12992., 10610., 11432., 12254., 13076., 10676., 11504., 12332., 13160., 10742., 11576., 12410., 13244., 10808., 11648., 12488., 13328., 10874., 11720., 12566., 13412., 10940., 11792., 12644., 13496., 11006., 11864., 12722., 13580., 11072., 11936., 12800., 13664., 11138., 12008., 12878., 13748., 11204., 12080., 12956., 13832., 11270., 12152., 13034., 13916., 11336., 12224., 13112., 14000., 12722., 13736., 14750., 15764., 12788., 13808., 14828., 15848., 12854., 13880., 14906., 15932., 12920., 13952., 14984., 16016., 12986., 14024., 15062., 16100., 13052., 14096., 15140., 16184., 13118., 14168., 15218., 16268., 13184., 14240., 15296., 16352., 13250., 14312., 15374., 16436., 13316., 14384., 15452., 16520., 13382., 14456., 15530., 16604., 13448., 14528., 15608., 16688., 13514., 14600., 15686., 16772., 13580., 14672., 15764., 16856., 13646., 14744., 15842., 16940., 13712., 14816., 15920., 17024., 13778., 14888., 15998., 17108., 13844., 14960., 16076., 17192., 13910., 15032., 16154., 17276., 13976., 15104., 16232., 17360., 15362., 16616., 17870., 19124., 15428., 16688., 17948., 19208., 15494., 16760., 18026., 19292., 15560., 16832., 18104., 19376., 15626., 16904., 18182., 19460., 15692., 16976., 18260., 19544., 15758., 17048., 18338., 19628., 15824., 17120., 18416., 19712., 15890., 17192., 18494., 19796., 15956., 17264., 18572., 19880., 16022., 17336., 18650., 19964., 16088., 17408., 18728., 20048., 16154., 17480., 18806., 20132., 16220., 17552., 18884., 20216., 16286., 17624., 18962., 20300., 16352., 17696., 19040., 20384., 16418., 17768., 19118., 20468., 16484., 17840., 19196., 20552., 16550., 17912., 19274., 20636., 16616., 17984., 19352., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5692.,  5848.,  7560.,  5464.,  5608.,  6815.,  6980.,  9010.,  6500.,  6650.,  7970.,  8135., 10480.,  7550.,  7700.,  4960.,  5068.,  6464.,  4600.,  4696.,  5716.,  5824.,  7416.,  5272.,  5368.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 451.,  472.,  493.,  514.,  535.,  598.,  619.,  640.,  661.,  682.,  745.,  766.,  787.,  808.,  829.,  892.,  913.,  934.,  955.,  976., 1039., 1060., 1081., 1102., 1123.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11012., 11384., 11312., 11696., 14608., 15120., 10544., 10928., 10820., 11216., 13165., 13630., 13480., 13960., 17380., 18020., 12520., 13000., 12805., 13300., 15370., 15940., 15685., 16270., 20180., 20960., 14515., 15100., 14800., 15400.,  9464.,  9920.,  9668., 10136., 12304., 12928.,  8732.,  9200.,  8912.,  9392., 10892., 11432., 11096., 11648., 14096., 14832.,  9992., 10544., 10172., 10736.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 806.,  902.,  842.,  944.,  878.,  986.,  914., 1028.,  950., 1070., 1058., 1196., 1094., 1238., 1130., 1280., 1166., 1322., 1202., 1364., 1310., 1490., 1346., 1532., 1382., 1574., 1418., 1616., 1454., 1658., 1562., 1784., 1598., 1826., 1634., 1868., 1670., 1910., 1706., 1952., 1814., 2078., 1850., 2120., 1886., 2162., 1922., 2204., 1958., 2246.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11668., 12040., 12412., 12784., 12064., 12448., 12832., 13216., 15136., 15648., 16160., 16672., 10528., 10912., 11296., 11680., 10876., 11272., 11668., 12064., 14537., 15002., 15467., 15932., 14960., 15440., 15920., 16400., 18760., 19400., 20040., 20680., 13040., 13520., 14000., 14480., 13403., 13898., 14393., 14888., 16090., 16532., 16974., 17416., 16193., 16586., 16979., 17372., 20700., 21288., 21876., 22464., 14621., 15014., 15407., 15800., 14984., 15392., 15800., 16208., 18472., 18928., 19384., 19840., 18868., 19336., 19804., 20272., 23984., 24608., 25232., 25856., 16996., 17464., 17932., 18400., 17344., 17824., 18304., 18784., 13692., 14104., 14516., 14928., 10696., 11056., 11416., 11776., 16512., 17056., 17600., 18144.,  9256.,  9616.,  9976., 10336.,  9604.,  9976., 10348., 10720.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1516., 1612., 1708., 1804., 1582., 1684., 1786., 1888., 1648., 1756., 1864., 1972., 1714., 1828., 1942., 2056., 1780., 1900., 2020., 2140., 1978., 2116., 2254., 2392., 2044., 2188., 2332., 2476., 2110., 2260., 2410., 2560., 2176., 2332., 2488., 2644., 2242., 2404., 2566., 2728., 2440., 2620., 2800., 2980., 2506., 2692., 2878., 3064., 2572., 2764., 2956., 3148., 2638., 2836., 3034., 3232., 2704., 2908., 3112., 3316., 2902., 3124., 3346., 3568., 2968., 3196., 3424., 3652., 3034., 3268., 3502., 3736., 3100., 3340., 3580., 3820., 3166., 3412., 3658., 3904., 3364., 3628., 3892., 4156., 3430., 3700., 3970., 4240., 3496., 3772., 4048., 4324., 3562., 3844., 4126., 4408., 3628., 3916., 4204., 4492.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11228., 11384., 11540., 11696., 14920., 15120., 10784., 10928., 11072., 11216., 13465., 13630., 13795., 13960., 17810., 18020., 12850., 13000., 13150., 13300., 15775., 15940., 16105., 16270., 20750., 20960., 14950., 15100., 15250., 15400.,  9812.,  9920., 10028., 10136., 12792., 12928.,  9104.,  9200.,  9296.,  9392., 11324., 11432., 11540., 11648., 14696., 14832., 10448., 10544., 10640., 10736.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 881.,  902.,  923.,  944.,  965.,  986., 1007., 1028., 1049., 1070., 1175., 1196., 1217., 1238., 1259., 1280., 1301., 1322., 1343., 1364., 1469., 1490., 1511., 1532., 1553., 1574., 1595., 1616., 1637., 1658., 1763., 1784., 1805., 1826., 1847., 1868., 1889., 1910., 1931., 1952., 2057., 2078., 2099., 2120., 2141., 2162., 2183., 2204., 2225., 2246.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9052.,  9400.,  9352.,  9712.,  9652., 10024.,  9952., 10336., 12448., 12944., 12832., 13344.,  8908.,  9280.,  9184.,  9568.,  9460.,  9856.,  9736., 10144., 11871., 12338., 12186., 12668., 12501., 12998., 12816., 13328., 15160., 15780., 15560., 16200., 11507., 12004., 11792., 12304., 10861., 11324., 11146., 11624.,  8857.,  9278.,  9172.,  9608.,  7247.,  7634.,  7562.,  7964., 11352., 11932., 11752., 12352.,  6473.,  6860.,  6758.,  7160.,  7043.,  7460.,  7328.,  7760.,  8164.,  8616.,  8368.,  8832.,  8572.,  9048.,  8776.,  9264., 10272., 10864., 10528., 11136.,  7620.,  8096.,  7800.,  8288.,  7276.,  7712.,  7456.,  7904.,  5644.,  6008.,  5848.,  6224.,  4324.,  4648.,  4528.,  4864.,  7008.,  7504.,  7264.,  7776.,  3676.,  4000.,  3856.,  4192.,  4036.,  4384.,  4216.,  4576.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1576., 1762., 1612., 1804., 1648., 1846., 1684., 1888., 1720., 1930., 1756., 1972., 1792., 2014., 1828., 2056., 1864., 2098., 1900., 2140., 2080., 2350., 2116., 2392., 2152., 2434., 2188., 2476., 2224., 2518., 2260., 2560., 2296., 2602., 2332., 2644., 2368., 2686., 2404., 2728., 2584., 2938., 2620., 2980., 2656., 3022., 2692., 3064., 2728., 3106., 2764., 3148., 2800., 3190., 2836., 3232., 2872., 3274., 2908., 3316., 3088., 3526., 3124., 3568., 3160., 3610., 3196., 3652., 3232., 3694., 3268., 3736., 3304., 3778., 3340., 3820., 3376., 3862., 3412., 3904., 3592., 4114., 3628., 4156., 3664., 4198., 3700., 4240., 3736., 4282., 3772., 4324., 3808., 4366., 3844., 4408., 3880., 4450., 3916., 4492.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10268., 10616., 10964., 11312., 10664., 11024., 11384., 11744., 11060., 11432., 11804., 12176., 11456., 11840., 12224., 12608., 13904., 14400., 14896., 15392., 14400., 14912., 15424., 15936.,  9572.,  9944., 10316., 10688.,  9920., 10304., 10688., 11072., 10268., 10664., 11060., 11456., 10616., 11024., 11432., 11840., 13099., 13566., 14033., 14500., 13522., 14004., 14486., 14968., 13945., 14442., 14939., 15436., 14368., 14880., 15392., 15904., 15620., 16240., 16860., 17480., 16144., 16784., 17424., 18064., 11957., 12454., 12951., 13448., 12320., 12832., 13344., 13856., 10315., 10778., 11241., 11704., 10678., 11156., 11634., 12112., 12621., 13042., 13463., 13884., 13044., 13480., 13916., 14352., 13147., 13534., 13921., 14308., 13570., 13972., 14374., 14776., 16748., 17328., 17908., 18488., 17272., 17872., 18472., 19072., 11599., 11986., 12373., 12760., 11962., 12364., 12766., 13168., 12325., 12742., 13159., 13576., 12688., 13120., 13552., 13984., 15876., 16328., 16780., 17232., 16272., 16736., 17200., 17664., 16668., 17144., 17620., 18096., 17064., 17552., 18040., 18528., 19952., 20544., 21136., 21728., 20448., 21056., 21664., 22272., 14764., 15240., 15716., 16192., 15112., 15600., 16088., 16576., 14116., 14552., 14988., 15424., 14464., 14912., 15360., 15808., 10924., 11288., 11652., 12016., 11320., 11696., 12072., 12448.,  8324.,  8648.,  8972.,  9296.,  8720.,  9056.,  9392.,  9728., 13520., 14016., 14512., 15008., 14016., 14528., 15040., 15552.,  7028.,  7352.,  7676.,  8000.,  7376.,  7712.,  8048.,  8384.,  7724.,  8072.,  8420.,  8768.,  8072.,  8432.,  8792.,  9152.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2966., 3152., 3338., 3524., 3032., 3224., 3416., 3608., 3098., 3296., 3494., 3692., 3164., 3368., 3572., 3776., 3230., 3440., 3650., 3860., 3296., 3512., 3728., 3944., 3362., 3584., 3806., 4028., 3428., 3656., 3884., 4112., 3494., 3728., 3962., 4196., 3560., 3800., 4040., 4280., 3890., 4160., 4430., 4700., 3956., 4232., 4508., 4784., 4022., 4304., 4586., 4868., 4088., 4376., 4664., 4952., 4154., 4448., 4742., 5036., 4220., 4520., 4820., 5120., 4286., 4592., 4898., 5204., 4352., 4664., 4976., 5288., 4418., 4736., 5054., 5372., 4484., 4808., 5132., 5456., 4814., 5168., 5522., 5876., 4880., 5240., 5600., 5960., 4946., 5312., 5678., 6044., 5012., 5384., 5756., 6128., 5078., 5456., 5834., 6212., 5144., 5528., 5912., 6296., 5210., 5600., 5990., 6380., 5276., 5672., 6068., 6464., 5342., 5744., 6146., 6548., 5408., 5816., 6224., 6632., 5738., 6176., 6614., 7052., 5804., 6248., 6692., 7136., 5870., 6320., 6770., 7220., 5936., 6392., 6848., 7304., 6002., 6464., 6926., 7388., 6068., 6536., 7004., 7472., 6134., 6608., 7082., 7556., 6200., 6680., 7160., 7640., 6266., 6752., 7238., 7724., 6332., 6824., 7316., 7808., 6662., 7184., 7706., 8228., 6728., 7256., 7784., 8312., 6794., 7328., 7862., 8396., 6860., 7400., 7940., 8480., 6926., 7472., 8018., 8564., 6992., 7544., 8096., 8648., 7058., 7616., 8174., 8732., 7124., 7688., 8252., 8816., 7190., 7760., 8330., 8900., 7256., 7832., 8408., 8984.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9244.,  9400.,  9556.,  9712.,  9868., 10024., 10180., 10336., 12744., 12944., 13144., 13344.,  9136.,  9280.,  9424.,  9568.,  9712.,  9856., 10000., 10144., 12173., 12338., 12503., 12668., 12833., 12998., 13163., 13328., 15570., 15780., 15990., 16200., 11854., 12004., 12154., 12304., 11174., 11324., 11474., 11624.,  9113.,  9278.,  9443.,  9608.,  7469.,  7634.,  7799.,  7964., 11722., 11932., 12142., 12352.,  6710.,  6860.,  7010.,  7160.,  7310.,  7460.,  7610.,  7760.,  8508.,  8616.,  8724.,  8832.,  8940.,  9048.,  9156.,  9264., 10728., 10864., 11000., 11136.,  8000.,  8096.,  8192.,  8288.,  7616.,  7712.,  7808.,  7904.,  5900.,  6008.,  6116.,  6224.,  4540.,  4648.,  4756.,  4864.,  7368.,  7504.,  7640.,  7776.,  3904.,  4000.,  4096.,  4192.,  4288.,  4384.,  4480.,  4576.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1741., 1762., 1783., 1804., 1825., 1846., 1867., 1888., 1909., 1930., 1951., 1972., 1993., 2014., 2035., 2056., 2077., 2098., 2119., 2140., 2329., 2350., 2371., 2392., 2413., 2434., 2455., 2476., 2497., 2518., 2539., 2560., 2581., 2602., 2623., 2644., 2665., 2686., 2707., 2728., 2917., 2938., 2959., 2980., 3001., 3022., 3043., 3064., 3085., 3106., 3127., 3148., 3169., 3190., 3211., 3232., 3253., 3274., 3295., 3316., 3505., 3526., 3547., 3568., 3589., 3610., 3631., 3652., 3673., 3694., 3715., 3736., 3757., 3778., 3799., 3820., 3841., 3862., 3883., 3904., 4093., 4114., 4135., 4156., 4177., 4198., 4219., 4240., 4261., 4282., 4303., 4324., 4345., 4366., 4387., 4408., 4429., 4450., 4471., 4492.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17804., 18488., 18104., 18800., 18404., 19112., 18704., 19424., 19004., 19736., 19304., 20048., 19604., 20360., 19904., 20672., 24512., 25488., 24896., 25888., 25280., 26288., 25664., 26688., 17540., 18272., 17816., 18560., 18092., 18848., 18368., 19136., 18644., 19424., 18920., 19712., 19196., 20000., 19472., 20288., 23427., 24346., 23742., 24676., 24057., 25006., 24372., 25336., 24687., 25666., 25002., 25996., 25317., 26326., 25632., 26656., 29920., 31140., 30320., 31560., 30720., 31980., 31120., 32400., 22729., 23708., 23014., 24008., 23299., 24308., 23584., 24608., 21437., 22348., 21722., 22648., 22007., 22948., 22292., 23248., 17399., 18226., 17714., 18556., 18029., 18886., 18344., 19216., 14179., 14938., 14494., 15268., 14809., 15598., 15124., 15928., 22304., 23444., 22704., 23864., 23104., 24284., 23504., 24704., 12661., 13420., 12946., 13720., 13231., 14020., 13516., 14320., 13801., 14620., 14086., 14920., 14371., 15220., 14656., 15520., 16124., 17016., 16328., 17232., 16532., 17448., 16736., 17664., 16940., 17880., 17144., 18096., 17348., 18312., 17552., 18528., 20288., 21456., 20544., 21728., 20800., 22000., 21056., 22272., 15060., 16000., 15240., 16192., 15420., 16384., 15600., 16576., 14372., 15232., 14552., 15424., 14732., 15616., 14912., 15808., 11084., 11800., 11288., 12016., 11492., 12232., 11696., 12448.,  8444.,  9080.,  8648.,  9296.,  8852.,  9512.,  9056.,  9728., 13760., 14736., 14016., 15008., 14272., 15280., 14528., 15552.,  7172.,  7808.,  7352.,  8000.,  7532.,  8192.,  7712.,  8384.,  7892.,  8576.,  8072.,  8768.,  8252.,  8960.,  8432.,  9152.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3116., 3482., 3152., 3524., 3188., 3566., 3224., 3608., 3260., 3650., 3296., 3692., 3332., 3734., 3368., 3776., 3404., 3818., 3440., 3860., 3476., 3902., 3512., 3944., 3548., 3986., 3584., 4028., 3620., 4070., 3656., 4112., 3692., 4154., 3728., 4196., 3764., 4238., 3800., 4280., 4124., 4658., 4160., 4700., 4196., 4742., 4232., 4784., 4268., 4826., 4304., 4868., 4340., 4910., 4376., 4952., 4412., 4994., 4448., 5036., 4484., 5078., 4520., 5120., 4556., 5162., 4592., 5204., 4628., 5246., 4664., 5288., 4700., 5330., 4736., 5372., 4772., 5414., 4808., 5456., 5132., 5834., 5168., 5876., 5204., 5918., 5240., 5960., 5276., 6002., 5312., 6044., 5348., 6086., 5384., 6128., 5420., 6170., 5456., 6212., 5492., 6254., 5528., 6296., 5564., 6338., 5600., 6380., 5636., 6422., 5672., 6464., 5708., 6506., 5744., 6548., 5780., 6590., 5816., 6632., 6140., 7010., 6176., 7052., 6212., 7094., 6248., 7136., 6284., 7178., 6320., 7220., 6356., 7262., 6392., 7304., 6428., 7346., 6464., 7388., 6500., 7430., 6536., 7472., 6572., 7514., 6608., 7556., 6644., 7598., 6680., 7640., 6716., 7682., 6752., 7724., 6788., 7766., 6824., 7808., 7148., 8186., 7184., 8228., 7220., 8270., 7256., 8312., 7292., 8354., 7328., 8396., 7364., 8438., 7400., 8480., 7436., 8522., 7472., 8564., 7508., 8606., 7544., 8648., 7580., 8690., 7616., 8732., 7652., 8774., 7688., 8816., 7724., 8858., 7760., 8900., 7796., 8942., 7832., 8984.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10540., 10840., 11140., 11440., 10936., 11248., 11560., 11872., 11332., 11656., 11980., 12304., 11728., 12064., 12400., 12736., 12124., 12472., 12820., 13168., 12520., 12880., 13240., 13600., 12916., 13288., 13660., 14032., 13312., 13696., 14080., 14464., 15536., 16000., 16464., 16928., 16032., 16512., 16992., 17472., 16528., 17024., 17520., 18016., 17024., 17536., 18048., 18560., 10732., 11080., 11428., 11776., 11080., 11440., 11800., 12160., 11428., 11800., 12172., 12544., 11776., 12160., 12544., 12928., 12124., 12520., 12916., 13312., 12472., 12880., 13288., 13696., 12820., 13240., 13660., 14080., 13168., 13600., 14032., 14464., 15599., 16070., 16541., 17012., 16022., 16508., 16994., 17480., 16445., 16946., 17447., 17948., 16868., 17384., 17900., 18416., 17291., 17822., 18353., 18884., 17714., 18260., 18806., 19352., 18137., 18698., 19259., 19820., 18560., 19136., 19712., 20288., 15740., 16320., 16900., 17480., 16264., 16864., 17464., 18064., 16788., 17408., 18028., 18648., 17312., 17952., 18592., 19232., 15167., 15698., 16229., 16760., 15530., 16076., 16622., 17168., 15893., 16454., 17015., 17576., 16256., 16832., 17408., 17984.,  9515.,  9914., 10313., 10712.,  9878., 10292., 10706., 11120., 10241., 10670., 11099., 11528., 10604., 11048., 11492., 11936.,  8755.,  9134.,  9513.,  9892.,  9178.,  9572.,  9966., 10360.,  9601., 10010., 10419., 10828., 10024., 10448., 10872., 11296., 10127., 10502., 10877., 11252., 10550., 10940., 11330., 11720., 10973., 11378., 11783., 12188., 11396., 11816., 12236., 12656., 12940., 13504., 14068., 14632., 13464., 14048., 14632., 15216., 13988., 14592., 15196., 15800., 14512., 15136., 15760., 16384.,  8627.,  9002.,  9377.,  9752.,  8990.,  9380.,  9770., 10160.,  9353.,  9758., 10163., 10568.,  9716., 10136., 10556., 10976., 10079., 10514., 10949., 11384., 10442., 10892., 11342., 11792., 10805., 11270., 11735., 12200., 11168., 11648., 12128., 12608., 16060., 16504., 16948., 17392., 16456., 16912., 17368., 17824., 16852., 17320., 17788., 18256., 17248., 17728., 18208., 18688., 17644., 18136., 18628., 19120., 18040., 18544., 19048., 19552., 18436., 18952., 19468., 19984., 18832., 19360., 19888., 20416., 18288., 18816., 19344., 19872., 18784., 19328., 19872., 20416., 19280., 19840., 20400., 20960., 19776., 20352., 20928., 21504., 15676., 16168., 16660., 17152., 16024., 16528., 17032., 17536., 16372., 16888., 17404., 17920., 16720., 17248., 17776., 18304., 13036., 13384., 13732., 14080., 13384., 13744., 14104., 14464., 13732., 14104., 14476., 14848., 14080., 14464., 14848., 15232.,  8460.,  8728.,  8996.,  9264.,  8856.,  9136.,  9416.,  9696.,  9252.,  9544.,  9836., 10128.,  9648.,  9952., 10256., 10560.,  6652.,  6904.,  7156.,  7408.,  7048.,  7312.,  7576.,  7840.,  7444.,  7720.,  7996.,  8272.,  7840.,  8128.,  8416.,  8704., 11632., 12032., 12432., 12832., 12128., 12544., 12960., 13376., 12624., 13056., 13488., 13920., 13120., 13568., 14016., 14464.,  5644.,  5896.,  6148.,  6400.,  5992.,  6256.,  6520.,  6784.,  6340.,  6616.,  6892.,  7168.,  6688.,  6976.,  7264.,  7552.,  7036.,  7336.,  7636.,  7936.,  7384.,  7696.,  8008.,  8320.,  7732.,  8056.,  8380.,  8704.,  8080.,  8416.,  8752.,  9088.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5866.,  6232.,  6598.,  6964.,  5932.,  6304.,  6676.,  7048.,  5998.,  6376.,  6754.,  7132.,  6064.,  6448.,  6832.,  7216.,  6130.,  6520.,  6910.,  7300.,  6196.,  6592.,  6988.,  7384.,  6262.,  6664.,  7066.,  7468.,  6328.,  6736.,  7144.,  7552.,  6394.,  6808.,  7222.,  7636.,  6460.,  6880.,  7300.,  7720.,  6526.,  6952.,  7378.,  7804.,  6592.,  7024.,  7456.,  7888.,  6658.,  7096.,  7534.,  7972.,  6724.,  7168.,  7612.,  8056.,  6790.,  7240.,  7690.,  8140.,  6856.,  7312.,  7768.,  8224.,  6922.,  7384.,  7846.,  8308.,  6988.,  7456.,  7924.,  8392.,  7054.,  7528.,  8002.,  8476.,  7120.,  7600.,  8080.,  8560.,  7714.,  8248.,  8782.,  9316.,  7780.,  8320.,  8860.,  9400.,  7846.,  8392.,  8938.,  9484.,  7912.,  8464.,  9016.,  9568.,  7978.,  8536.,  9094.,  9652.,  8044.,  8608.,  9172.,  9736.,  8110.,  8680.,  9250.,  9820.,  8176.,  8752.,  9328.,  9904.,  8242.,  8824.,  9406.,  9988.,  8308.,  8896.,  9484., 10072.,  8374.,  8968.,  9562., 10156.,  8440.,  9040.,  9640., 10240.,  8506.,  9112.,  9718., 10324.,  8572.,  9184.,  9796., 10408.,  8638.,  9256.,  9874., 10492.,  8704.,  9328.,  9952., 10576.,  8770.,  9400., 10030., 10660.,  8836.,  9472., 10108., 10744.,  8902.,  9544., 10186., 10828.,  8968.,  9616., 10264., 10912.,  9562., 10264., 10966., 11668.,  9628., 10336., 11044., 11752.,  9694., 10408., 11122., 11836.,  9760., 10480., 11200., 11920.,  9826., 10552., 11278., 12004.,  9892., 10624., 11356., 12088.,  9958., 10696., 11434., 12172., 10024., 10768., 11512., 12256., 10090., 10840., 11590., 12340., 10156., 10912., 11668., 12424., 10222., 10984., 11746., 12508., 10288., 11056., 11824., 12592., 10354., 11128., 11902., 12676., 10420., 11200., 11980., 12760., 10486., 11272., 12058., 12844., 10552., 11344., 12136., 12928., 10618., 11416., 12214., 13012., 10684., 11488., 12292., 13096., 10750., 11560., 12370., 13180., 10816., 11632., 12448., 13264., 11410., 12280., 13150., 14020., 11476., 12352., 13228., 14104., 11542., 12424., 13306., 14188., 11608., 12496., 13384., 14272., 11674., 12568., 13462., 14356., 11740., 12640., 13540., 14440., 11806., 12712., 13618., 14524., 11872., 12784., 13696., 14608., 11938., 12856., 13774., 14692., 12004., 12928., 13852., 14776., 12070., 13000., 13930., 14860., 12136., 13072., 14008., 14944., 12202., 13144., 14086., 15028., 12268., 13216., 14164., 15112., 12334., 13288., 14242., 15196., 12400., 13360., 14320., 15280., 12466., 13432., 14398., 15364., 12532., 13504., 14476., 15448., 12598., 13576., 14554., 15532., 12664., 13648., 14632., 15616., 13258., 14296., 15334., 16372., 13324., 14368., 15412., 16456., 13390., 14440., 15490., 16540., 13456., 14512., 15568., 16624., 13522., 14584., 15646., 16708., 13588., 14656., 15724., 16792., 13654., 14728., 15802., 16876., 13720., 14800., 15880., 16960., 13786., 14872., 15958., 17044., 13852., 14944., 16036., 17128., 13918., 15016., 16114., 17212., 13984., 15088., 16192., 17296., 14050., 15160., 16270., 17380., 14116., 15232., 16348., 17464., 14182., 15304., 16426., 17548., 14248., 15376., 16504., 17632., 14314., 15448., 16582., 17716., 14380., 15520., 16660., 17800., 14446., 15592., 16738., 17884., 14512., 15664., 16816., 17968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6592.,  8520.,  8720.,  6304.,  6448.,  7880., 10170., 10380.,  7490.,  7640.,  9200., 11850., 12060.,  8690.,  8840.,  5728.,  7304.,  7440.,  5296.,  5392.,  6592.,  8392.,  8528.,  6064.,  6160.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 509.,  530.,  551.,  572.,  593.,  677.,  698.,  719.,  740.,  761.,  845.,  866.,  887.,  908.,  929., 1013., 1034., 1055., 1076., 1097., 1181., 1202., 1223., 1244., 1265.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12752., 13184., 16464., 17040., 16848., 17440., 12164., 12608., 12440., 12896., 15220., 15760., 19620., 20340., 20020., 20760., 14425., 14980., 14710., 15280., 17740., 18400., 22820., 23700., 23220., 24120., 16705., 17380., 16990., 17680., 10928., 11456., 13904., 14608., 14160., 14880., 10052., 10592., 10232., 10784., 12560., 13184., 15952., 16784., 16208., 17056., 11492., 12128., 11672., 12320.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 910., 1018.,  946., 1060.,  982., 1102., 1018., 1144., 1054., 1186., 1198., 1354., 1234., 1396., 1270., 1438., 1306., 1480., 1342., 1522., 1486., 1690., 1522., 1732., 1558., 1774., 1594., 1816., 1630., 1858., 1774., 2026., 1810., 2068., 1846., 2110., 1882., 2152., 1918., 2194., 2062., 2362., 2098., 2404., 2134., 2446., 2170., 2488., 2206., 2530.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13552., 13984., 14416., 14848., 16992., 17568., 18144., 18720., 17488., 18080., 18672., 19264., 12172., 12616., 13060., 13504., 12520., 12976., 13432., 13888., 15116., 15464., 15812., 16160., 19320., 19784., 20248., 20712., 19844., 20328., 20812., 21296., 14087., 14450., 14813., 15176., 14450., 14828., 15206., 15584., 18500., 18968., 19436., 19904., 23512., 24136., 24760., 25384., 24036., 24680., 25324., 25968., 16991., 17474., 17957., 18440., 17354., 17852., 18350., 18848., 10384., 10720., 11056., 11392., 13024., 13472., 13920., 14368., 13520., 13984., 14448., 14912.,  9388.,  9736., 10084., 10432.,  9736., 10096., 10456., 10816., 13552., 13984., 14416., 14848., 16992., 17568., 18144., 18720., 17488., 18080., 18672., 19264., 12172., 12616., 13060., 13504., 12520., 12976., 13432., 13888.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1712., 1820., 1928., 2036., 1778., 1892., 2006., 2120., 1844., 1964., 2084., 2204., 1910., 2036., 2162., 2288., 1976., 2108., 2240., 2372., 2240., 2396., 2552., 2708., 2306., 2468., 2630., 2792., 2372., 2540., 2708., 2876., 2438., 2612., 2786., 2960., 2504., 2684., 2864., 3044., 2768., 2972., 3176., 3380., 2834., 3044., 3254., 3464., 2900., 3116., 3332., 3548., 2966., 3188., 3410., 3632., 3032., 3260., 3488., 3716., 3296., 3548., 3800., 4052., 3362., 3620., 3878., 4136., 3428., 3692., 3956., 4220., 3494., 3764., 4034., 4304., 3560., 3836., 4112., 4388., 3824., 4124., 4424., 4724., 3890., 4196., 4502., 4808., 3956., 4268., 4580., 4892., 4022., 4340., 4658., 4976., 4088., 4412., 4736., 5060.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13028., 13184., 16840., 17040., 17240., 17440., 12464., 12608., 12752., 12896., 15595., 15760., 20130., 20340., 20550., 20760., 14830., 14980., 15130., 15280., 18235., 18400., 23490., 23700., 23910., 24120., 17230., 17380., 17530., 17680., 11348., 11456., 14472., 14608., 14744., 14880., 10496., 10592., 10688., 10784., 13076., 13184., 16648., 16784., 16920., 17056., 12032., 12128., 12224., 12320.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 997., 1018., 1039., 1060., 1081., 1102., 1123., 1144., 1165., 1186., 1333., 1354., 1375., 1396., 1417., 1438., 1459., 1480., 1501., 1522., 1669., 1690., 1711., 1732., 1753., 1774., 1795., 1816., 1837., 1858., 2005., 2026., 2047., 2068., 2089., 2110., 2131., 2152., 2173., 2194., 2341., 2362., 2383., 2404., 2425., 2446., 2467., 2488., 2509., 2530.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12532., 13000., 12832., 13312., 16160., 16784., 16544., 17184., 16928., 17584., 17312., 17984., 12148., 12640., 12424., 12928., 12700., 13216., 12976., 13504.,  6317.,  6614.,  6632.,  6944.,  8120.,  8516.,  8520.,  8936.,  8920.,  9356.,  9320.,  9776.,  6293.,  6620.,  6578.,  6920.,  6863.,  7220.,  7148.,  7520., 11357., 11894., 11672., 12224., 14520., 15236., 14920., 15656., 15320., 16076., 15720., 16496., 10853., 11420., 11138., 11720., 11423., 12020., 11708., 12320.,  3988.,  4264.,  4192.,  4480.,  5024.,  5392.,  5280.,  5664.,  5536.,  5936.,  5792.,  6208.,  3796.,  4096.,  3976.,  4288.,  4156.,  4480.,  4336.,  4672.,  7252.,  7720.,  7456.,  7936.,  9120.,  9744.,  9376., 10016.,  9632., 10288.,  9888., 10560.,  6676.,  7168.,  6856.,  7360.,  7036.,  7552.,  7216.,  7744.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1784., 1994., 1820., 2036., 1856., 2078., 1892., 2120., 1928., 2162., 1964., 2204., 2000., 2246., 2036., 2288., 2072., 2330., 2108., 2372., 2360., 2666., 2396., 2708., 2432., 2750., 2468., 2792., 2504., 2834., 2540., 2876., 2576., 2918., 2612., 2960., 2648., 3002., 2684., 3044., 2936., 3338., 2972., 3380., 3008., 3422., 3044., 3464., 3080., 3506., 3116., 3548., 3152., 3590., 3188., 3632., 3224., 3674., 3260., 3716., 3512., 4010., 3548., 4052., 3584., 4094., 3620., 4136., 3656., 4178., 3692., 4220., 3728., 4262., 3764., 4304., 3800., 4346., 3836., 4388., 4088., 4682., 4124., 4724., 4160., 4766., 4196., 4808., 4232., 4850., 4268., 4892., 4304., 4934., 4340., 4976., 4376., 5018., 4412., 5060.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14036., 14504., 14972., 15440., 14432., 14912., 15392., 15872., 17616., 18240., 18864., 19488., 18112., 18752., 19392., 20032., 18608., 19264., 19920., 20576., 19104., 19776., 20448., 21120., 12860., 13352., 13844., 14336., 13208., 13712., 14216., 14720., 13556., 14072., 14588., 15104., 13904., 14432., 14960., 15488., 10993., 11290., 11587., 11884., 11416., 11728., 12040., 12352., 14052., 14448., 14844., 15240., 14576., 14992., 15408., 15824., 15100., 15536., 15972., 16408., 15624., 16080., 16536., 16992., 10531., 10858., 11185., 11512., 10894., 11236., 11578., 11920., 11257., 11614., 11971., 12328., 11620., 11992., 12364., 12736., 17761., 18298., 18835., 19372., 18184., 18736., 19288., 19840., 22436., 23152., 23868., 24584., 22960., 23696., 24432., 25168., 23484., 24240., 24996., 25752., 24008., 24784., 25560., 26336., 16339., 16906., 17473., 18040., 16702., 17284., 17866., 18448., 17065., 17662., 18259., 18856., 17428., 18040., 18652., 19264.,  7700.,  7976.,  8252.,  8528.,  8096.,  8384.,  8672.,  8960.,  9680., 10048., 10416., 10784., 10176., 10560., 10944., 11328., 10672., 11072., 11472., 11872., 11168., 11584., 12000., 12416.,  7292.,  7592.,  7892.,  8192.,  7640.,  7952.,  8264.,  8576.,  7988.,  8312.,  8636.,  8960.,  8336.,  8672.,  9008.,  9344., 14036., 14504., 14972., 15440., 14432., 14912., 15392., 15872., 17616., 18240., 18864., 19488., 18112., 18752., 19392., 20032., 18608., 19264., 19920., 20576., 19104., 19776., 20448., 21120., 12860., 13352., 13844., 14336., 13208., 13712., 14216., 14720., 13556., 14072., 14588., 15104., 13904., 14432., 14960., 15488.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3358.,  3568.,  3778.,  3988.,  3424.,  3640.,  3856.,  4072.,  3490.,  3712.,  3934.,  4156.,  3556.,  3784.,  4012.,  4240.,  3622.,  3856.,  4090.,  4324.,  3688.,  3928.,  4168.,  4408.,  3754.,  4000.,  4246.,  4492.,  3820.,  4072.,  4324.,  4576.,  3886.,  4144.,  4402.,  4660.,  3952.,  4216.,  4480.,  4744.,  4414.,  4720.,  5026.,  5332.,  4480.,  4792.,  5104.,  5416.,  4546.,  4864.,  5182.,  5500.,  4612.,  4936.,  5260.,  5584.,  4678.,  5008.,  5338.,  5668.,  4744.,  5080.,  5416.,  5752.,  4810.,  5152.,  5494.,  5836.,  4876.,  5224.,  5572.,  5920.,  4942.,  5296.,  5650.,  6004.,  5008.,  5368.,  5728.,  6088.,  5470.,  5872.,  6274.,  6676.,  5536.,  5944.,  6352.,  6760.,  5602.,  6016.,  6430.,  6844.,  5668.,  6088.,  6508.,  6928.,  5734.,  6160.,  6586.,  7012.,  5800.,  6232.,  6664.,  7096.,  5866.,  6304.,  6742.,  7180.,  5932.,  6376.,  6820.,  7264.,  5998.,  6448.,  6898.,  7348.,  6064.,  6520.,  6976.,  7432.,  6526.,  7024.,  7522.,  8020.,  6592.,  7096.,  7600.,  8104.,  6658.,  7168.,  7678.,  8188.,  6724.,  7240.,  7756.,  8272.,  6790.,  7312.,  7834.,  8356.,  6856.,  7384.,  7912.,  8440.,  6922.,  7456.,  7990.,  8524.,  6988.,  7528.,  8068.,  8608.,  7054.,  7600.,  8146.,  8692.,  7120.,  7672.,  8224.,  8776.,  7582.,  8176.,  8770.,  9364.,  7648.,  8248.,  8848.,  9448.,  7714.,  8320.,  8926.,  9532.,  7780.,  8392.,  9004.,  9616.,  7846.,  8464.,  9082.,  9700.,  7912.,  8536.,  9160.,  9784.,  7978.,  8608.,  9238.,  9868.,  8044.,  8680.,  9316.,  9952.,  8110.,  8752.,  9394., 10036.,  8176.,  8824.,  9472., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12844., 13000., 13156., 13312., 16584., 16784., 16984., 17184., 17384., 17584., 17784., 17984., 12496., 12640., 12784., 12928., 13072., 13216., 13360., 13504.,  6449.,  6614.,  6779.,  6944.,  8306.,  8516.,  8726.,  8936.,  9146.,  9356.,  9566.,  9776.,  6470.,  6620.,  6770.,  6920.,  7070.,  7220.,  7370.,  7520., 11729., 11894., 12059., 12224., 15026., 15236., 15446., 15656., 15866., 16076., 16286., 16496., 11270., 11420., 11570., 11720., 11870., 12020., 12170., 12320.,  4156.,  4264.,  4372.,  4480.,  5256.,  5392.,  5528.,  5664.,  5800.,  5936.,  6072.,  6208.,  4000.,  4096.,  4192.,  4288.,  4384.,  4480.,  4576.,  4672.,  7612.,  7720.,  7828.,  7936.,  9608.,  9744.,  9880., 10016., 10152., 10288., 10424., 10560.,  7072.,  7168.,  7264.,  7360.,  7456.,  7552.,  7648.,  7744.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1973., 1994., 2015., 2036., 2057., 2078., 2099., 2120., 2141., 2162., 2183., 2204., 2225., 2246., 2267., 2288., 2309., 2330., 2351., 2372., 2645., 2666., 2687., 2708., 2729., 2750., 2771., 2792., 2813., 2834., 2855., 2876., 2897., 2918., 2939., 2960., 2981., 3002., 3023., 3044., 3317., 3338., 3359., 3380., 3401., 3422., 3443., 3464., 3485., 3506., 3527., 3548., 3569., 3590., 3611., 3632., 3653., 3674., 3695., 3716., 3989., 4010., 4031., 4052., 4073., 4094., 4115., 4136., 4157., 4178., 4199., 4220., 4241., 4262., 4283., 4304., 4325., 4346., 4367., 4388., 4661., 4682., 4703., 4724., 4745., 4766., 4787., 4808., 4829., 4850., 4871., 4892., 4913., 4934., 4955., 4976., 4997., 5018., 5039., 5060.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13628., 14168., 13928., 14480., 14228., 14792., 14528., 15104., 17600., 18320., 17984., 18720., 18368., 19120., 18752., 19520., 19136., 19920., 19520., 20320., 19904., 20720., 20288., 21120., 13652., 14240., 13928., 14528., 14204., 14816., 14480., 15104., 14756., 15392., 15032., 15680., 15308., 15968., 15584., 16256.,  4255.,  4450.,  4570.,  4780.,  4885.,  5110.,  5200.,  5440.,  5600.,  5860.,  6000.,  6280.,  6400.,  6700.,  6800.,  7120.,  7200.,  7540.,  7600.,  7960.,  8000.,  8380.,  8400.,  8800.,  5005.,  5260.,  5290.,  5560.,  5575.,  5860.,  5860.,  6160.,  6145.,  6460.,  6430.,  6760.,  6715.,  7060.,  7000.,  7360., 14335., 15010., 14650., 15340., 14965., 15670., 15280., 16000., 18400., 19300., 18800., 19720., 19200., 20140., 19600., 20560., 20000., 20980., 20400., 21400., 20800., 21820., 21200., 22240., 14125., 14860., 14410., 15160., 14695., 15460., 14980., 15760., 15265., 16060., 15550., 16360., 15835., 16660., 16120., 16960.,  2780.,  2936.,  2984.,  3152.,  3188.,  3368.,  3392.,  3584.,  3648.,  3856.,  3904.,  4128.,  4160.,  4400.,  4416.,  4672.,  4672.,  4944.,  4928.,  5216.,  5184.,  5488.,  5440.,  5760.,  3188.,  3392.,  3368.,  3584.,  3548.,  3776.,  3728.,  3968.,  3908.,  4160.,  4088.,  4352.,  4268.,  4544.,  4448.,  4736.,  9308.,  9848.,  9512., 10064.,  9716., 10280.,  9920., 10496., 11840., 12560., 12096., 12832., 12352., 13104., 12608., 13376., 12864., 13648., 13120., 13920., 13376., 14192., 13632., 14464.,  8948.,  9536.,  9128.,  9728.,  9308.,  9920.,  9488., 10112.,  9668., 10304.,  9848., 10496., 10028., 10688., 10208., 10880.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3532.,  3946.,  3568.,  3988.,  3604.,  4030.,  3640.,  4072.,  3676.,  4114.,  3712.,  4156.,  3748.,  4198.,  3784.,  4240.,  3820.,  4282.,  3856.,  4324.,  3892.,  4366.,  3928.,  4408.,  3964.,  4450.,  4000.,  4492.,  4036.,  4534.,  4072.,  4576.,  4108.,  4618.,  4144.,  4660.,  4180.,  4702.,  4216.,  4744.,  4684.,  5290.,  4720.,  5332.,  4756.,  5374.,  4792.,  5416.,  4828.,  5458.,  4864.,  5500.,  4900.,  5542.,  4936.,  5584.,  4972.,  5626.,  5008.,  5668.,  5044.,  5710.,  5080.,  5752.,  5116.,  5794.,  5152.,  5836.,  5188.,  5878.,  5224.,  5920.,  5260.,  5962.,  5296.,  6004.,  5332.,  6046.,  5368.,  6088.,  5836.,  6634.,  5872.,  6676.,  5908.,  6718.,  5944.,  6760.,  5980.,  6802.,  6016.,  6844.,  6052.,  6886.,  6088.,  6928.,  6124.,  6970.,  6160.,  7012.,  6196.,  7054.,  6232.,  7096.,  6268.,  7138.,  6304.,  7180.,  6340.,  7222.,  6376.,  7264.,  6412.,  7306.,  6448.,  7348.,  6484.,  7390.,  6520.,  7432.,  6988.,  7978.,  7024.,  8020.,  7060.,  8062.,  7096.,  8104.,  7132.,  8146.,  7168.,  8188.,  7204.,  8230.,  7240.,  8272.,  7276.,  8314.,  7312.,  8356.,  7348.,  8398.,  7384.,  8440.,  7420.,  8482.,  7456.,  8524.,  7492.,  8566.,  7528.,  8608.,  7564.,  8650.,  7600.,  8692.,  7636.,  8734.,  7672.,  8776.,  8140.,  9322.,  8176.,  9364.,  8212.,  9406.,  8248.,  9448.,  8284.,  9490.,  8320.,  9532.,  8356.,  9574.,  8392.,  9616.,  8428.,  9658.,  8464.,  9700.,  8500.,  9742.,  8536.,  9784.,  8572.,  9826.,  8608.,  9868.,  8644.,  9910.,  8680.,  9952.,  8716.,  9994.,  8752., 10036.,  8788., 10078.,  8824., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18076., 18616., 19156., 19696., 18472., 19024., 19576., 20128., 18868., 19432., 19996., 20560., 19264., 19840., 20416., 20992., 22960., 23680., 24400., 25120., 23456., 24192., 24928., 25664., 23952., 24704., 25456., 26208., 24448., 25216., 25984., 26752., 24944., 25728., 26512., 27296., 25440., 26240., 27040., 27840., 25936., 26752., 27568., 28384., 26432., 27264., 28096., 28928., 17308., 17896., 18484., 19072., 17656., 18256., 18856., 19456., 18004., 18616., 19228., 19840., 18352., 18976., 19600., 20224., 18700., 19336., 19972., 20608., 19048., 19696., 20344., 20992., 19396., 20056., 20716., 21376., 19744., 20416., 21088., 21760.,  5819.,  6014.,  6209.,  6404.,  6242.,  6452.,  6662.,  6872.,  6665.,  6890.,  7115.,  7340.,  7088.,  7328.,  7568.,  7808.,  7612.,  7872.,  8132.,  8392.,  8136.,  8416.,  8696.,  8976.,  8660.,  8960.,  9260.,  9560.,  9184.,  9504.,  9824., 10144.,  9708., 10048., 10388., 10728., 10232., 10592., 10952., 11312., 10756., 11136., 11516., 11896., 11280., 11680., 12080., 12480.,  6491.,  6746.,  7001.,  7256.,  6854.,  7124.,  7394.,  7664.,  7217.,  7502.,  7787.,  8072.,  7580.,  7880.,  8180.,  8480.,  7943.,  8258.,  8573.,  8888.,  8306.,  8636.,  8966.,  9296.,  8669.,  9014.,  9359.,  9704.,  9032.,  9392.,  9752., 10112., 19355., 20030., 20705., 21380., 19778., 20468., 21158., 21848., 20201., 20906., 21611., 22316., 20624., 21344., 22064., 22784., 24380., 25280., 26180., 27080., 24904., 25824., 26744., 27664., 25428., 26368., 27308., 28248., 25952., 26912., 27872., 28832., 26476., 27456., 28436., 29416., 27000., 28000., 29000., 30000., 27524., 28544., 29564., 30584., 28048., 29088., 30128., 31168., 18107., 18842., 19577., 20312., 18470., 19220., 19970., 20720., 18833., 19598., 20363., 21128., 19196., 19976., 20756., 21536., 19559., 20354., 21149., 21944., 19922., 20732., 21542., 22352., 20285., 21110., 21935., 22760., 20648., 21488., 22328., 23168.,  5404.,  5560.,  5716.,  5872.,  5800.,  5968.,  6136.,  6304.,  6196.,  6376.,  6556.,  6736.,  6592.,  6784.,  6976.,  7168.,  7088.,  7296.,  7504.,  7712.,  7584.,  7808.,  8032.,  8256.,  8080.,  8320.,  8560.,  8800.,  8576.,  8832.,  9088.,  9344.,  9072.,  9344.,  9616.,  9888.,  9568.,  9856., 10144., 10432., 10064., 10368., 10672., 10976., 10560., 10880., 11200., 11520.,  6172.,  6376.,  6580.,  6784.,  6520.,  6736.,  6952.,  7168.,  6868.,  7096.,  7324.,  7552.,  7216.,  7456.,  7696.,  7936.,  7564.,  7816.,  8068.,  8320.,  7912.,  8176.,  8440.,  8704.,  8260.,  8536.,  8812.,  9088.,  8608.,  8896.,  9184.,  9472., 18076., 18616., 19156., 19696., 18472., 19024., 19576., 20128., 18868., 19432., 19996., 20560., 19264., 19840., 20416., 20992., 22960., 23680., 24400., 25120., 23456., 24192., 24928., 25664., 23952., 24704., 25456., 26208., 24448., 25216., 25984., 26752., 24944., 25728., 26512., 27296., 25440., 26240., 27040., 27840., 25936., 26752., 27568., 28384., 26432., 27264., 28096., 28928., 17308., 17896., 18484., 19072., 17656., 18256., 18856., 19456., 18004., 18616., 19228., 19840., 18352., 18976., 19600., 20224., 18700., 19336., 19972., 20608., 19048., 19696., 20344., 20992., 19396., 20056., 20716., 21376., 19744., 20416., 21088., 21760.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6650.,  7064.,  7478.,  7892.,  6716.,  7136.,  7556.,  7976.,  6782.,  7208.,  7634.,  8060.,  6848.,  7280.,  7712.,  8144.,  6914.,  7352.,  7790.,  8228.,  6980.,  7424.,  7868.,  8312.,  7046.,  7496.,  7946.,  8396.,  7112.,  7568.,  8024.,  8480.,  7178.,  7640.,  8102.,  8564.,  7244.,  7712.,  8180.,  8648.,  7310.,  7784.,  8258.,  8732.,  7376.,  7856.,  8336.,  8816.,  7442.,  7928.,  8414.,  8900.,  7508.,  8000.,  8492.,  8984.,  7574.,  8072.,  8570.,  9068.,  7640.,  8144.,  8648.,  9152.,  7706.,  8216.,  8726.,  9236.,  7772.,  8288.,  8804.,  9320.,  7838.,  8360.,  8882.,  9404.,  7904.,  8432.,  8960.,  9488.,  8762.,  9368.,  9974., 10580.,  8828.,  9440., 10052., 10664.,  8894.,  9512., 10130., 10748.,  8960.,  9584., 10208., 10832.,  9026.,  9656., 10286., 10916.,  9092.,  9728., 10364., 11000.,  9158.,  9800., 10442., 11084.,  9224.,  9872., 10520., 11168.,  9290.,  9944., 10598., 11252.,  9356., 10016., 10676., 11336.,  9422., 10088., 10754., 11420.,  9488., 10160., 10832., 11504.,  9554., 10232., 10910., 11588.,  9620., 10304., 10988., 11672.,  9686., 10376., 11066., 11756.,  9752., 10448., 11144., 11840.,  9818., 10520., 11222., 11924.,  9884., 10592., 11300., 12008.,  9950., 10664., 11378., 12092., 10016., 10736., 11456., 12176., 10874., 11672., 12470., 13268., 10940., 11744., 12548., 13352., 11006., 11816., 12626., 13436., 11072., 11888., 12704., 13520., 11138., 11960., 12782., 13604., 11204., 12032., 12860., 13688., 11270., 12104., 12938., 13772., 11336., 12176., 13016., 13856., 11402., 12248., 13094., 13940., 11468., 12320., 13172., 14024., 11534., 12392., 13250., 14108., 11600., 12464., 13328., 14192., 11666., 12536., 13406., 14276., 11732., 12608., 13484., 14360., 11798., 12680., 13562., 14444., 11864., 12752., 13640., 14528., 11930., 12824., 13718., 14612., 11996., 12896., 13796., 14696., 12062., 12968., 13874., 14780., 12128., 13040., 13952., 14864., 12986., 13976., 14966., 15956., 13052., 14048., 15044., 16040., 13118., 14120., 15122., 16124., 13184., 14192., 15200., 16208., 13250., 14264., 15278., 16292., 13316., 14336., 15356., 16376., 13382., 14408., 15434., 16460., 13448., 14480., 15512., 16544., 13514., 14552., 15590., 16628., 13580., 14624., 15668., 16712., 13646., 14696., 15746., 16796., 13712., 14768., 15824., 16880., 13778., 14840., 15902., 16964., 13844., 14912., 15980., 17048., 13910., 14984., 16058., 17132., 13976., 15056., 16136., 17216., 14042., 15128., 16214., 17300., 14108., 15200., 16292., 17384., 14174., 15272., 16370., 17468., 14240., 15344., 16448., 17552., 15098., 16280., 17462., 18644., 15164., 16352., 17540., 18728., 15230., 16424., 17618., 18812., 15296., 16496., 17696., 18896., 15362., 16568., 17774., 18980., 15428., 16640., 17852., 19064., 15494., 16712., 17930., 19148., 15560., 16784., 18008., 19232., 15626., 16856., 18086., 19316., 15692., 16928., 18164., 19400., 15758., 17000., 18242., 19484., 15824., 17072., 18320., 19568., 15890., 17144., 18398., 19652., 15956., 17216., 18476., 19736., 16022., 17288., 18554., 19820., 16088., 17360., 18632., 19904., 16154., 17432., 18710., 19988., 16220., 17504., 18788., 20072., 16286., 17576., 18866., 20156., 16352., 17648., 18944., 20240.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13560., 16530., 16840., 13080., 13320., 16200., 19725., 20050., 15550., 15800., 18900., 22975., 23300., 18050., 18300., 11720., 14130., 14340., 11000., 11160., 13480., 16230., 16440., 12600., 12760.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1407., 1452., 1497., 1542., 1587., 1857., 1902., 1947., 1992., 2037., 2307., 2352., 2397., 2442., 2487., 2757., 2802., 2847., 2892., 2937., 3207., 3252., 3297., 3342., 3387.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14624., 15088., 17760., 18340., 18360., 18960., 14160., 14640., 14624., 15120., 14860., 15376., 16821., 17434., 17446., 18084., 12196., 12668., 12676., 13168., 15708., 16296., 18975., 19710., 19600., 20360., 15012., 15620., 15492., 16120.,  9760., 10256., 10776., 11364., 11176., 11784.,  7600.,  8048.,  7904.,  8368., 10048., 10576., 11960., 12620., 12360., 13040.,  9296.,  9840.,  9600., 10160.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2607., 2814., 2688., 2904., 2769., 2994., 2850., 3084., 2931., 3174., 3417., 3714., 3498., 3804., 3579., 3894., 3660., 3984., 3741., 4074., 4227., 4614., 4308., 4704., 4389., 4794., 4470., 4884., 4551., 4974., 5037., 5514., 5118., 5604., 5199., 5694., 5280., 5784., 5361., 5874., 5847., 6414., 5928., 6504., 6009., 6594., 6090., 6684., 6171., 6774.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11888., 12352., 12816., 13280., 17084., 17664., 18244., 18824., 17688., 18288., 18888., 19488., 13824., 14304., 14784., 15264., 14288., 14784., 15280., 15776., 15380., 15896., 16412., 16928., 21701., 22314., 22927., 23540., 22350., 22988., 23626., 24264., 17712., 18184., 18656., 19128., 18204., 18696., 19188., 19680., 20076., 20664., 21252., 21840., 24223., 24958., 25693., 26428., 24872., 25632., 26392., 27152., 18728., 19336., 19944., 20552., 19220., 19848., 20476., 21104., 13648., 14144., 14640., 15136., 15332., 15920., 16508., 17096., 15856., 16464., 17072., 17680., 10336., 10784., 11232., 11680., 10736., 11200., 11664., 12128., 11632., 12160., 12688., 13216., 15068., 15728., 16388., 17048., 15592., 16272., 16952., 17632., 11712., 12256., 12800., 13344., 12112., 12672., 13232., 13792.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5007.,  5214.,  5421.,  5628.,  5160.,  5376.,  5592.,  5808.,  5313.,  5538.,  5763.,  5988.,  5466.,  5700.,  5934.,  6168.,  5619.,  5862.,  6105.,  6348.,  6537.,  6834.,  7131.,  7428.,  6690.,  6996.,  7302.,  7608.,  6843.,  7158.,  7473.,  7788.,  6996.,  7320.,  7644.,  7968.,  7149.,  7482.,  7815.,  8148.,  8067.,  8454.,  8841.,  9228.,  8220.,  8616.,  9012.,  9408.,  8373.,  8778.,  9183.,  9588.,  8526.,  8940.,  9354.,  9768.,  8679.,  9102.,  9525.,  9948.,  9597., 10074., 10551., 11028.,  9750., 10236., 10722., 11208.,  9903., 10398., 10893., 11388., 10056., 10560., 11064., 11568., 10209., 10722., 11235., 11748., 11127., 11694., 12261., 12828., 11280., 11856., 12432., 13008., 11433., 12018., 12603., 13188., 11586., 12180., 12774., 13368., 11739., 12342., 12945., 13548.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14832., 15088., 18030., 18340., 18650., 18960., 14400., 14640., 14880., 15120., 15106., 15376., 17109., 17434., 17759., 18084., 12418., 12668., 12918., 13168., 16026., 16296., 19385., 19710., 20035., 20360., 15370., 15620., 15870., 16120., 10080., 10256., 11154., 11364., 11574., 11784.,  7888.,  8048.,  8208.,  8368., 10400., 10576., 12410., 12620., 12830., 13040.,  9680.,  9840., 10000., 10160.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2769., 2814., 2859., 2904., 2949., 2994., 3039., 3084., 3129., 3174., 3669., 3714., 3759., 3804., 3849., 3894., 3939., 3984., 4029., 4074., 4569., 4614., 4659., 4704., 4749., 4794., 4839., 4884., 4929., 4974., 5469., 5514., 5559., 5604., 5649., 5694., 5739., 5784., 5829., 5874., 6369., 6414., 6459., 6504., 6549., 6594., 6639., 6684., 6729., 6774.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14352., 14816., 14848., 15328., 17064., 17628., 17664., 18248., 18264., 18868., 18864., 19488., 13008., 13440., 13472., 13920., 13936., 14400., 14400., 14880., 18192., 18820., 18712., 19360., 20921., 21674., 21546., 22324., 22171., 22974., 22796., 23624., 15784., 16388., 16264., 16888., 16744., 17388., 17224., 17888., 17840., 18484., 18360., 19024., 19085., 19826., 19710., 20476., 20335., 21126., 20960., 21776., 13928., 14484., 14408., 14984., 14888., 15484., 15368., 15984., 12016., 12608., 12352., 12960., 13536., 14244., 13936., 14664., 14336., 15084., 14736., 15504.,  9968., 10528., 10272., 10848., 10576., 11168., 10880., 11488., 11824., 12352., 12160., 12704., 12320., 12916., 12720., 13336., 13120., 13756., 13520., 14176.,  9072.,  9504.,  9376.,  9824.,  9680., 10144.,  9984., 10464.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5133.,  5538.,  5214.,  5628.,  5295.,  5718.,  5376.,  5808.,  5457.,  5898.,  5538.,  5988.,  5619.,  6078.,  5700.,  6168.,  5781.,  6258.,  5862.,  6348.,  6753.,  7338.,  6834.,  7428.,  6915.,  7518.,  6996.,  7608.,  7077.,  7698.,  7158.,  7788.,  7239.,  7878.,  7320.,  7968.,  7401.,  8058.,  7482.,  8148.,  8373.,  9138.,  8454.,  9228.,  8535.,  9318.,  8616.,  9408.,  8697.,  9498.,  8778.,  9588.,  8859.,  9678.,  8940.,  9768.,  9021.,  9858.,  9102.,  9948.,  9993., 10938., 10074., 11028., 10155., 11118., 10236., 11208., 10317., 11298., 10398., 11388., 10479., 11478., 10560., 11568., 10641., 11658., 10722., 11748., 11613., 12738., 11694., 12828., 11775., 12918., 11856., 13008., 11937., 13098., 12018., 13188., 12099., 13278., 12180., 13368., 12261., 13458., 12342., 13548.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11344., 11808., 12272., 12736., 11808., 12288., 12768., 13248., 14812., 15376., 15940., 16504., 15416., 16000., 16584., 17168., 16020., 16624., 17228., 17832., 16624., 17248., 17872., 18496., 10288., 10720., 11152., 11584., 10752., 11200., 11648., 12096., 11216., 11680., 12144., 12608., 11680., 12160., 12640., 13120., 16812., 17440., 18068., 18696., 17320., 17968., 18616., 19264., 23105., 23858., 24611., 25364., 23754., 24532., 25310., 26088., 24403., 25206., 26009., 26812., 25052., 25880., 26708., 27536., 18996., 19600., 20204., 20808., 19488., 20112., 20736., 21360., 19980., 20624., 21268., 21912., 20472., 21136., 21800., 22464., 18140., 18784., 19428., 20072., 18648., 19312., 19976., 20640., 20213., 20954., 21695., 22436., 20862., 21628., 22394., 23160., 21511., 22302., 23093., 23884., 22160., 22976., 23792., 24608., 14564., 15120., 15676., 16232., 15056., 15632., 16208., 16784., 15548., 16144., 16740., 17336., 16040., 16656., 17272., 17888., 12944., 13536., 14128., 14720., 13344., 13952., 14560., 15168., 15356., 16064., 16772., 17480., 15880., 16608., 17336., 18064., 16404., 17152., 17900., 18648., 16928., 17696., 18464., 19232., 10736., 11296., 11856., 12416., 11136., 11712., 12288., 12864., 11536., 12128., 12720., 13312., 11936., 12544., 13152., 13760., 11600., 12128., 12656., 13184., 12000., 12544., 13088., 13632., 16108., 16704., 17300., 17896., 16632., 17248., 17864., 18480., 17156., 17792., 18428., 19064., 17680., 18336., 18992., 19648., 13424., 13856., 14288., 14720., 13824., 14272., 14720., 15168., 14224., 14688., 15152., 15616., 14624., 15104., 15584., 16064.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9861., 10266., 10671., 11076., 10014., 10428., 10842., 11256., 10167., 10590., 11013., 11436., 10320., 10752., 11184., 11616., 10473., 10914., 11355., 11796., 10626., 11076., 11526., 11976., 10779., 11238., 11697., 12156., 10932., 11400., 11868., 12336., 11085., 11562., 12039., 12516., 11238., 11724., 12210., 12696., 12921., 13506., 14091., 14676., 13074., 13668., 14262., 14856., 13227., 13830., 14433., 15036., 13380., 13992., 14604., 15216., 13533., 14154., 14775., 15396., 13686., 14316., 14946., 15576., 13839., 14478., 15117., 15756., 13992., 14640., 15288., 15936., 14145., 14802., 15459., 16116., 14298., 14964., 15630., 16296., 15981., 16746., 17511., 18276., 16134., 16908., 17682., 18456., 16287., 17070., 17853., 18636., 16440., 17232., 18024., 18816., 16593., 17394., 18195., 18996., 16746., 17556., 18366., 19176., 16899., 17718., 18537., 19356., 17052., 17880., 18708., 19536., 17205., 18042., 18879., 19716., 17358., 18204., 19050., 19896., 19041., 19986., 20931., 21876., 19194., 20148., 21102., 22056., 19347., 20310., 21273., 22236., 19500., 20472., 21444., 22416., 19653., 20634., 21615., 22596., 19806., 20796., 21786., 22776., 19959., 20958., 21957., 22956., 20112., 21120., 22128., 23136., 20265., 21282., 22299., 23316., 20418., 21444., 22470., 23496., 22101., 23226., 24351., 25476., 22254., 23388., 24522., 25656., 22407., 23550., 24693., 25836., 22560., 23712., 24864., 26016., 22713., 23874., 25035., 26196., 22866., 24036., 25206., 26376., 23019., 24198., 25377., 26556., 23172., 24360., 25548., 26736., 23325., 24522., 25719., 26916., 23478., 24684., 25890., 27096.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14560., 14816., 15072., 15328., 17318., 17628., 17938., 18248., 18558., 18868., 19178., 19488., 13200., 13440., 13680., 13920., 14160., 14400., 14640., 14880., 18550., 18820., 19090., 19360., 21349., 21674., 21999., 22324., 22649., 22974., 23299., 23624., 16138., 16388., 16638., 16888., 17138., 17388., 17638., 17888., 18214., 18484., 18754., 19024., 19501., 19826., 20151., 20476., 20801., 21126., 21451., 21776., 14234., 14484., 14734., 14984., 15234., 15484., 15734., 15984., 12432., 12608., 12784., 12960., 14034., 14244., 14454., 14664., 14874., 15084., 15294., 15504., 10368., 10528., 10688., 10848., 11008., 11168., 11328., 11488., 12176., 12352., 12528., 12704., 12706., 12916., 13126., 13336., 13546., 13756., 13966., 14176.,  9344.,  9504.,  9664.,  9824.,  9984., 10144., 10304., 10464.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5493.,  5538.,  5583.,  5628.,  5673.,  5718.,  5763.,  5808.,  5853.,  5898.,  5943.,  5988.,  6033.,  6078.,  6123.,  6168.,  6213.,  6258.,  6303.,  6348.,  7293.,  7338.,  7383.,  7428.,  7473.,  7518.,  7563.,  7608.,  7653.,  7698.,  7743.,  7788.,  7833.,  7878.,  7923.,  7968.,  8013.,  8058.,  8103.,  8148.,  9093.,  9138.,  9183.,  9228.,  9273.,  9318.,  9363.,  9408.,  9453.,  9498.,  9543.,  9588.,  9633.,  9678.,  9723.,  9768.,  9813.,  9858.,  9903.,  9948., 10893., 10938., 10983., 11028., 11073., 11118., 11163., 11208., 11253., 11298., 11343., 11388., 11433., 11478., 11523., 11568., 11613., 11658., 11703., 11748., 12693., 12738., 12783., 12828., 12873., 12918., 12963., 13008., 13053., 13098., 13143., 13188., 13233., 13278., 13323., 13368., 13413., 13458., 13503., 13548.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16304., 16832., 16800., 17344., 17296., 17856., 17792., 18368., 18680., 19276., 19280., 19896., 19880., 20516., 20480., 21136., 21080., 21756., 21680., 22376., 22280., 22996., 22880., 23616., 14800., 15264., 15264., 15744., 15728., 16224., 16192., 16704., 16656., 17184., 17120., 17664., 17584., 18144., 18048., 18624., 15640., 16236., 16160., 16776., 16680., 17316., 17200., 17856., 16065., 16714., 16690., 17364., 17315., 18014., 17940., 18664., 18565., 19314., 19190., 19964., 19815., 20614., 20440., 21264., 12528., 13076., 13008., 13576., 13488., 14076., 13968., 14576., 14448., 15076., 14928., 15576., 15408., 16076., 15888., 16576., 18456., 19148., 18976., 19688., 19496., 20228., 20016., 20768., 19561., 20314., 20186., 20964., 20811., 21614., 21436., 22264., 22061., 22914., 22686., 23564., 23311., 24214., 23936., 24864., 15088., 15668., 15568., 16168., 16048., 16668., 16528., 17168., 17008., 17668., 17488., 18168., 17968., 18668., 18448., 19168.,  9872., 10400., 10208., 10752., 10544., 11104., 10880., 11456.,  9840., 10404., 10240., 10824., 10640., 11244., 11040., 11664., 11440., 12084., 11840., 12504., 12240., 12924., 12640., 13344.,  7472.,  7936.,  7776.,  8256.,  8080.,  8576.,  8384.,  8896.,  8688.,  9216.,  8992.,  9536.,  9296.,  9856.,  9600., 10176., 12304., 12832., 12640., 13184., 12976., 13536., 13312., 13888., 13040., 13636., 13440., 14056., 13840., 14476., 14240., 14896., 14640., 15316., 15040., 15736., 15440., 16156., 15840., 16576., 10160., 10624., 10464., 10944., 10768., 11264., 11072., 11584., 11376., 11904., 11680., 12224., 11984., 12544., 12288., 12864.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10185., 10986., 10266., 11076., 10347., 11166., 10428., 11256., 10509., 11346., 10590., 11436., 10671., 11526., 10752., 11616., 10833., 11706., 10914., 11796., 10995., 11886., 11076., 11976., 11157., 12066., 11238., 12156., 11319., 12246., 11400., 12336., 11481., 12426., 11562., 12516., 11643., 12606., 11724., 12696., 13425., 14586., 13506., 14676., 13587., 14766., 13668., 14856., 13749., 14946., 13830., 15036., 13911., 15126., 13992., 15216., 14073., 15306., 14154., 15396., 14235., 15486., 14316., 15576., 14397., 15666., 14478., 15756., 14559., 15846., 14640., 15936., 14721., 16026., 14802., 16116., 14883., 16206., 14964., 16296., 16665., 18186., 16746., 18276., 16827., 18366., 16908., 18456., 16989., 18546., 17070., 18636., 17151., 18726., 17232., 18816., 17313., 18906., 17394., 18996., 17475., 19086., 17556., 19176., 17637., 19266., 17718., 19356., 17799., 19446., 17880., 19536., 17961., 19626., 18042., 19716., 18123., 19806., 18204., 19896., 19905., 21786., 19986., 21876., 20067., 21966., 20148., 22056., 20229., 22146., 20310., 22236., 20391., 22326., 20472., 22416., 20553., 22506., 20634., 22596., 20715., 22686., 20796., 22776., 20877., 22866., 20958., 22956., 21039., 23046., 21120., 23136., 21201., 23226., 21282., 23316., 21363., 23406., 21444., 23496., 23145., 25386., 23226., 25476., 23307., 25566., 23388., 25656., 23469., 25746., 23550., 25836., 23631., 25926., 23712., 26016., 23793., 26106., 23874., 26196., 23955., 26286., 24036., 26376., 24117., 26466., 24198., 26556., 24279., 26646., 24360., 26736., 24441., 26826., 24522., 26916., 24603., 27006., 24684., 27096.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15184., 15712., 16240., 16768., 15648., 16192., 16736., 17280., 16112., 16672., 17232., 17792., 16576., 17152., 17728., 18304., 16220., 16816., 17412., 18008., 16824., 17440., 18056., 18672., 17428., 18064., 18700., 19336., 18032., 18688., 19344., 20000., 18636., 19312., 19988., 20664., 19240., 19936., 20632., 21328., 19844., 20560., 21276., 21992., 20448., 21184., 21920., 22656., 11280., 11744., 12208., 12672., 11744., 12224., 12704., 13184., 12208., 12704., 13200., 13696., 12672., 13184., 13696., 14208., 13136., 13664., 14192., 14720., 13600., 14144., 14688., 15232., 14064., 14624., 15184., 15744., 14528., 15104., 15680., 16256., 17884., 18480., 19076., 19672., 18392., 19008., 19624., 20240., 18900., 19536., 20172., 20808., 19408., 20064., 20720., 21376., 20665., 21314., 21963., 22612., 21314., 21988., 22662., 23336., 21963., 22662., 23361., 24060., 22612., 23336., 24060., 24784., 23261., 24010., 24759., 25508., 23910., 24684., 25458., 26232., 24559., 25358., 26157., 26956., 25208., 26032., 26856., 27680., 17404., 17952., 18500., 19048., 17896., 18464., 19032., 19600., 18388., 18976., 19564., 20152., 18880., 19488., 20096., 20704., 19372., 20000., 20628., 21256., 19864., 20512., 21160., 21808., 20356., 21024., 21692., 22360., 20848., 21536., 22224., 22912., 15228., 15920., 16612., 17304., 15736., 16448., 17160., 17872., 16244., 16976., 17708., 18440., 16752., 17504., 18256., 19008., 16801., 17554., 18307., 19060., 17450., 18228., 19006., 19784., 18099., 18902., 19705., 20508., 18748., 19576., 20404., 21232., 19397., 20250., 21103., 21956., 20046., 20924., 21802., 22680., 20695., 21598., 22501., 23404., 21344., 22272., 23200., 24128., 12764., 13344., 13924., 14504., 13256., 13856., 14456., 15056., 13748., 14368., 14988., 15608., 14240., 14880., 15520., 16160., 14732., 15392., 16052., 16712., 15224., 15904., 16584., 17264., 15716., 16416., 17116., 17816., 16208., 16928., 17648., 18368., 14864., 15392., 15920., 16448., 15264., 15808., 16352., 16896., 15664., 16224., 16784., 17344., 16064., 16640., 17216., 17792., 13740., 14304., 14868., 15432., 14264., 14848., 15432., 16016., 14788., 15392., 15996., 16600., 15312., 15936., 16560., 17184., 15836., 16480., 17124., 17768., 16360., 17024., 17688., 18352., 16884., 17568., 18252., 18936., 17408., 18112., 18816., 19520.,  9680., 10144., 10608., 11072., 10080., 10560., 11040., 11520., 10480., 10976., 11472., 11968., 10880., 11392., 11904., 12416., 11280., 11808., 12336., 12864., 11680., 12224., 12768., 13312., 12080., 12640., 13200., 13760., 12480., 13056., 13632., 14208., 13584., 14112., 14640., 15168., 13984., 14528., 15072., 15616., 14384., 14944., 15504., 16064., 14784., 15360., 15936., 16512., 18060., 18656., 19252., 19848., 18584., 19200., 19816., 20432., 19108., 19744., 20380., 21016., 19632., 20288., 20944., 21600., 20156., 20832., 21508., 22184., 20680., 21376., 22072., 22768., 21204., 21920., 22636., 23352., 21728., 22464., 23200., 23936., 15568., 16032., 16496., 16960., 15968., 16448., 16928., 17408., 16368., 16864., 17360., 17856., 16768., 17280., 17792., 18304., 17168., 17696., 18224., 18752., 17568., 18112., 18656., 19200., 17968., 18528., 19088., 19648., 18368., 18944., 19520., 20096.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19569., 20370., 21171., 21972., 19722., 20532., 21342., 22152., 19875., 20694., 21513., 22332., 20028., 20856., 21684., 22512., 20181., 21018., 21855., 22692., 20334., 21180., 22026., 22872., 20487., 21342., 22197., 23052., 20640., 21504., 22368., 23232., 20793., 21666., 22539., 23412., 20946., 21828., 22710., 23592., 21099., 21990., 22881., 23772., 21252., 22152., 23052., 23952., 21405., 22314., 23223., 24132., 21558., 22476., 23394., 24312., 21711., 22638., 23565., 24492., 21864., 22800., 23736., 24672., 22017., 22962., 23907., 24852., 22170., 23124., 24078., 25032., 22323., 23286., 24249., 25212., 22476., 23448., 24420., 25392., 25689., 26850., 28011., 29172., 25842., 27012., 28182., 29352., 25995., 27174., 28353., 29532., 26148., 27336., 28524., 29712., 26301., 27498., 28695., 29892., 26454., 27660., 28866., 30072., 26607., 27822., 29037., 30252., 26760., 27984., 29208., 30432., 26913., 28146., 29379., 30612., 27066., 28308., 29550., 30792., 27219., 28470., 29721., 30972., 27372., 28632., 29892., 31152., 27525., 28794., 30063., 31332., 27678., 28956., 30234., 31512., 27831., 29118., 30405., 31692., 27984., 29280., 30576., 31872., 28137., 29442., 30747., 32052., 28290., 29604., 30918., 32232., 28443., 29766., 31089., 32412., 28596., 29928., 31260., 32592., 23361., 24626., 25891., 27156., 23514., 24788., 26062., 27336., 23667., 24950., 26233., 27516., 23820., 25112., 26404., 27696., 23973., 25274., 26575., 27876., 24126., 25436., 26746., 28056., 24279., 25598., 26917., 28236., 24432., 25760., 27088., 28416., 17161., 18242., 19323., 20404., 17314., 18404., 19494., 20584., 17467., 18566., 19665., 20764., 17620., 18728., 19836., 20944., 17773., 18890., 20007., 21124., 17926., 19052., 20178., 21304., 18079., 19214., 20349., 21484., 18232., 19376., 20520., 21664., 11985., 12882., 13779., 14676., 12138., 13044., 13950., 14856., 12291., 13206., 14121., 15036., 12444., 13368., 14292., 15216., 15657., 16770., 17883., 18996., 15810., 16932., 18054., 19176., 15963., 17094., 18225., 19356., 16116., 17256., 18396., 19536., 16269., 17418., 18567., 19716., 16422., 17580., 18738., 19896., 16575., 17742., 18909., 20076., 16728., 17904., 19080., 20256., 16881., 18066., 19251., 20436., 17034., 18228., 19422., 20616., 17187., 18390., 19593., 20796., 17340., 18552., 19764., 20976., 17493., 18714., 19935., 21156., 17646., 18876., 20106., 21336., 17799., 19038., 20277., 21516., 17952., 19200., 20448., 21696., 18105., 19362., 20619., 21876., 18258., 19524., 20790., 22056., 18411., 19686., 20961., 22236., 18564., 19848., 21132., 22416., 16401., 17618., 18835., 20052., 16554., 17780., 19006., 20232., 16707., 17942., 19177., 20412., 16860., 18104., 19348., 20592., 17013., 18266., 19519., 20772., 17166., 18428., 19690., 20952., 17319., 18590., 19861., 21132., 17472., 18752., 20032., 21312., 13273., 14306., 15339., 16372., 13426., 14468., 15510., 16552., 13579., 14630., 15681., 16732., 13732., 14792., 15852., 16912., 13885., 14954., 16023., 17092., 14038., 15116., 16194., 17272., 14191., 15278., 16365., 17452., 14344., 15440., 16536., 17632., 11169., 12018., 12867., 13716., 11322., 12180., 13038., 13896., 11475., 12342., 13209., 14076., 11628., 12504., 13380., 14256.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6630.,  6239.,  8424.,  5870.,  5420.,  7509.,  7950., 10334.,  7488.,  7902.,  9196.,  7984., 10984.,  7464.,  7336.,  5769.,  6102.,  7870.,  5640.,  5946.,  6116.,  4977.,  6980.,  4550.,  4504.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6182., 6260., 6338., 6416., 6494., 6728., 6806., 6884., 6962., 7040., 7274., 7352., 7430., 7508., 7586., 7820., 7898., 7976., 8054., 8132., 8366., 8444., 8522., 8600., 8678.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8214.,  8588.,  8173.,  8542., 10084., 10576.,  7435.,  7804.,  6284.,  6616.,  8919.,  9354.,  9486.,  9948., 12116., 12732.,  8562.,  9024.,  9075.,  9564., 10292., 10840.,  9560., 10080., 12048., 12752.,  8520.,  9040.,  7908.,  8400.,  5439.,  5874.,  5790.,  6252.,  7188.,  7804.,  4866.,  5328.,  5163.,  5652.,  6136.,  6600.,  5655.,  6082.,  6852.,  7432.,  4801.,  5228.,  4458.,  4848.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11668., 12364., 11812., 12520., 11956., 12676., 12100., 12832., 12244., 12988., 12676., 13456., 12820., 13612., 12964., 13768., 13108., 13924., 13252., 14080., 13684., 14548., 13828., 14704., 13972., 14860., 14116., 15016., 14260., 15172., 14692., 15640., 14836., 15796., 14980., 15952., 15124., 16108., 15268., 16264., 15700., 16732., 15844., 16888., 15988., 17044., 16132., 17200., 16276., 17356.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6774.,  7148.,  7522.,  7896.,  7145.,  7514.,  7883.,  8252.,  7900.,  8392.,  8884.,  9376.,  5669.,  6038.,  6407.,  6776.,  4876.,  5208.,  5540.,  5872.,  8187.,  8622.,  9057.,  9492.,  8718.,  9180.,  9642., 10104., 10560., 11176., 11792., 12408.,  6870.,  7332.,  7794.,  8256.,  7293.,  7782.,  8271.,  8760.,  9860., 10408., 10956., 11504.,  8872.,  9392.,  9912., 10432., 11104., 11808., 12512., 13216.,  6792.,  7312.,  7832.,  8352.,  7068.,  7560.,  8052.,  8544.,  6891.,  7326.,  7761.,  8196.,  7278.,  7740.,  8202.,  8664.,  8640.,  9256.,  9872., 10488.,  5430.,  5892.,  6354.,  6816.,  5709.,  6198.,  6687.,  7176.,  6240.,  6704.,  7168.,  7632.,  6051.,  6478.,  6905.,  7332.,  6340.,  6920.,  7500.,  8080.,  4343.,  4770.,  5197.,  5624.,  3406.,  3796.,  4186.,  4576.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22640., 23336., 24032., 24728., 22916., 23624., 24332., 25040., 23192., 23912., 24632., 25352., 23468., 24200., 24932., 25664., 23744., 24488., 25232., 25976., 24572., 25352., 26132., 26912., 24848., 25640., 26432., 27224., 25124., 25928., 26732., 27536., 25400., 26216., 27032., 27848., 25676., 26504., 27332., 28160., 20744., 21480., 22216., 22952., 21020., 21768., 22516., 23264., 16048., 16680., 17312., 17944., 16324., 16968., 17612., 18256., 16600., 17256., 17912., 18568., 17428., 18120., 18812., 19504., 17704., 18408., 19112., 19816., 17980., 18696., 19412., 20128., 18256., 18984., 19712., 20440., 18532., 19272., 20012., 20752., 14624., 15272., 15920., 16568., 14900., 15560., 16220., 16880., 10952., 11496., 12040., 12584., 11228., 11784., 12340., 12896., 11504., 12072., 12640., 13208.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5587.,  6028.,  4645.,  5086.,  6902.,  7472.,  4350.,  4764.,  4026.,  4440.,  7281.,  7722.,  8163.,  8604., 10626., 11196.,  7650.,  8064.,  8478.,  8892.,  8820.,  9336.,  7260.,  7776.,  9720., 10384.,  6768.,  7248.,  6032.,  6512.,  5445.,  5778.,  6111.,  6444.,  7890.,  8316.,  5598.,  5904.,  6210.,  6516.,  6459.,  6792.,  4917.,  5250.,  6750.,  7176.,  4506.,  4812.,  4062.,  4368.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12286., 12364., 12442., 12520., 12598., 12676., 12754., 12832., 12910., 12988., 13378., 13456., 13534., 13612., 13690., 13768., 13846., 13924., 14002., 14080., 14470., 14548., 14626., 14704., 14782., 14860., 14938., 15016., 15094., 15172., 15562., 15640., 15718., 15796., 15874., 15952., 16030., 16108., 16186., 16264., 16654., 16732., 16810., 16888., 16966., 17044., 17122., 17200., 17278., 17356.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6933.,  7238.,  7500.,  7832.,  6531.,  6826.,  7098.,  7420.,  8408.,  8812.,  9128.,  9568.,  5941.,  6236.,  6454.,  6776.,  4759.,  5012.,  5272.,  5552.,  9207.,  9666.,  9774., 10260., 10341., 10854., 10908., 11448., 13272., 13956., 13992., 14712.,  9315.,  9828.,  9828., 10368., 10341., 10908., 10854., 11448., 10596., 11112., 11208., 11760.,  9804., 10296., 10416., 10944., 11136., 11760., 11904., 12576.,  8820.,  9312.,  9360.,  9888.,  6668.,  7072.,  7208.,  7648.,  5535.,  5994.,  5886.,  6372.,  6237.,  6750.,  6588.,  7128.,  7800.,  8484.,  8232.,  8952.,  5211.,  5724.,  5508.,  6048.,  5805.,  6372.,  6102.,  6696.,  6609.,  7062.,  6960.,  7440.,  6063.,  6474.,  6414.,  6852.,  6456.,  6972.,  6888.,  7440.,  5241.,  5652.,  5538.,  5976.,  3883.,  4188.,  4180.,  4512.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23192., 24572., 23336., 24728., 23480., 24884., 23624., 25040., 23768., 25196., 23912., 25352., 24056., 25508., 24200., 25664., 24344., 25820., 24488., 25976., 25208., 26756., 25352., 26912., 25496., 27068., 25640., 27224., 25784., 27380., 25928., 27536., 26072., 27692., 26216., 27848., 26360., 28004., 26504., 28160., 21336., 22796., 21480., 22952., 21624., 23108., 21768., 23264., 16536., 17788., 16680., 17944., 16824., 18100., 16968., 18256., 17112., 18412., 17256., 18568., 17976., 19348., 18120., 19504., 18264., 19660., 18408., 19816., 18552., 19972., 18696., 20128., 18840., 20284., 18984., 20440., 19128., 20596., 19272., 20752., 15128., 16412., 15272., 16568., 15416., 16724., 15560., 16880., 11352., 12428., 11496., 12584., 11640., 12740., 11784., 12896., 11928., 13052., 12072., 13208.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5817.,  6122.,  6427.,  6732.,  6348.,  6680.,  7012.,  7344.,  5919.,  6214.,  6509.,  6804.,  6450.,  6772.,  7094.,  7416.,  6940.,  7344.,  7748.,  8152.,  7576.,  8016.,  8456.,  8896.,  4739.,  5034.,  5329.,  5624.,  5162.,  5484.,  5806.,  6128.,  4337.,  4590.,  4843.,  5096.,  4760.,  5040.,  5320.,  5600.,  9315.,  9774., 10233., 10692.,  9846., 10332., 10818., 11304., 10377., 10890., 11403., 11916., 10908., 11448., 11988., 12528., 12804., 13488., 14172., 14856., 13440., 14160., 14880., 15600.,  8325.,  8838.,  9351.,  9864.,  8748.,  9288.,  9828., 10368.,  9171.,  9738., 10305., 10872.,  9594., 10188., 10782., 11376.,  9092.,  9608., 10124., 10640.,  9704., 10256., 10808., 11360.,  8428.,  8920.,  9412.,  9904.,  9040.,  9568., 10096., 10624.,  9104.,  9728., 10352., 10976.,  9824., 10496., 11168., 11840.,  6460.,  6952.,  7444.,  7936.,  6928.,  7456.,  7984.,  8512.,  5188.,  5592.,  5996.,  6400.,  5656.,  6096.,  6536.,  6976.,  6867.,  7326.,  7785.,  8244.,  7254.,  7740.,  8226.,  8712.,  7641.,  8154.,  8667.,  9180.,  8028.,  8568.,  9108.,  9648.,  9156.,  9840., 10524., 11208.,  9600., 10320., 11040., 11760.,  5589.,  6102.,  6615.,  7128.,  5868.,  6408.,  6948.,  7488.,  6147.,  6714.,  7281.,  7848.,  6426.,  7020.,  7614.,  8208.,  6013.,  6466.,  6919.,  7372.,  6400.,  6880.,  7360.,  7840.,  5411.,  5822.,  6233.,  6644.,  5798.,  6236.,  6674.,  7112.,  5356.,  5872.,  6388.,  6904.,  5800.,  6352.,  6904.,  7456.,  3767.,  4178.,  4589.,  5000.,  4046.,  4484.,  4922.,  5360.,  2629.,  2934.,  3239.,  3544.,  2908.,  3240.,  3572.,  3904.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21324., 22064., 22804., 23544., 21600., 22352., 23104., 23856., 18676., 19312., 19948., 20584., 18952., 19600., 20248., 20896., 19228., 19888., 20548., 21208., 19504., 20176., 20848., 21520., 19780., 20464., 21148., 21832., 20056., 20752., 21448., 22144., 20332., 21040., 21748., 22456., 20608., 21328., 22048., 22768., 21988., 22768., 23548., 24328., 22264., 23056., 23848., 24640., 22540., 23344., 24148., 24952., 22816., 23632., 24448., 25264., 23092., 23920., 24748., 25576., 23368., 24208., 25048., 25888., 23644., 24496., 25348., 26200., 23920., 24784., 25648., 26512., 24196., 25072., 25948., 26824., 24472., 25360., 26248., 27136., 17404., 18096., 18788., 19480., 17680., 18384., 19088., 19792., 15780., 16368., 16956., 17544., 16056., 16656., 17256., 17856., 11084., 11568., 12052., 12536., 11360., 11856., 12352., 12848., 11636., 12144., 12652., 13160., 11912., 12432., 12952., 13472., 12188., 12720., 13252., 13784., 12464., 13008., 13552., 14096., 13844., 14448., 15052., 15656., 14120., 14736., 15352., 15968., 14396., 15024., 15652., 16280., 14672., 15312., 15952., 16592., 14948., 15600., 16252., 16904., 15224., 15888., 16552., 17216., 15500., 16176., 16852., 17528., 15776., 16464., 17152., 17840., 16052., 16752., 17452., 18152., 16328., 17040., 17752., 18464., 12972., 13616., 14260., 14904., 13248., 13904., 14560., 15216., 13524., 14192., 14860., 15528., 13800., 14480., 15160., 15840.,  9852., 10416., 10980., 11544., 10128., 10704., 11280., 11856., 10404., 10992., 11580., 12168., 10680., 11280., 11880., 12480., 10956., 11568., 12180., 12792., 11232., 11856., 12480., 13104.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6253.,  6694.,  7135.,  7576.,  6193.,  6634.,  7075.,  7516.,  8722.,  9292.,  9862., 10432.,  5790.,  6204.,  6618.,  7032.,  6070.,  6484.,  6898.,  7312.,  6345.,  6786.,  7227.,  7668.,  6253.,  6694.,  7135.,  7576.,  8394.,  8964.,  9534., 10104.,  5894.,  6308.,  6722.,  7136.,  5790.,  6204.,  6618.,  7032.,  8196.,  8712.,  9228.,  9744.,  7668.,  8184.,  8700.,  9216., 10200., 10864., 11528., 12192.,  7104.,  7584.,  8064.,  8544.,  7232.,  7712.,  8192.,  8672.,  4701.,  5034.,  5367.,  5700.,  4817.,  5150.,  5483.,  5816.,  6138.,  6564.,  6990.,  7416.,  4458.,  4764.,  5070.,  5376.,  4178.,  4484.,  4790.,  5096.,  5577.,  5910.,  6243.,  6576.,  4701.,  5034.,  5367.,  5700.,  6546.,  6972.,  7398.,  7824.,  4290.,  4596.,  4902.,  5208.,  4458.,  4764.,  5070.,  5376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24494., 24572., 24650., 24728., 24806., 24884., 24962., 25040., 25118., 25196., 25274., 25352., 25430., 25508., 25586., 25664., 25742., 25820., 25898., 25976., 26678., 26756., 26834., 26912., 26990., 27068., 27146., 27224., 27302., 27380., 27458., 27536., 27614., 27692., 27770., 27848., 27926., 28004., 28082., 28160., 22718., 22796., 22874., 22952., 23030., 23108., 23186., 23264., 17710., 17788., 17866., 17944., 18022., 18100., 18178., 18256., 18334., 18412., 18490., 18568., 19270., 19348., 19426., 19504., 19582., 19660., 19738., 19816., 19894., 19972., 20050., 20128., 20206., 20284., 20362., 20440., 20518., 20596., 20674., 20752., 16334., 16412., 16490., 16568., 16646., 16724., 16802., 16880., 12350., 12428., 12506., 12584., 12662., 12740., 12818., 12896., 12974., 13052., 13130., 13208.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7635.,  7994.,  8202.,  8588.,  8769.,  9182.,  9336.,  9776.,  8367.,  8770.,  8934.,  9364.,  9501.,  9958., 10068., 10552., 10400., 10916., 11120., 11672., 11840., 12428., 12560., 13184.,  7561.,  7964.,  8074.,  8504.,  8587.,  9044.,  9100.,  9584.,  6989.,  7372.,  7502.,  7912.,  8015.,  8452.,  8528.,  8992.,  8919.,  9330.,  9486.,  9924., 10053., 10518., 10620., 11112.,  7635.,  7994.,  8202.,  8588.,  8769.,  9182.,  9336.,  9776., 11232., 11796., 11952., 12552., 12672., 13308., 13392., 14064.,  6917.,  7276.,  7430.,  7816.,  7943.,  8356.,  8456.,  8896.,  7561.,  7964.,  8074.,  8504.,  8587.,  9044.,  9100.,  9584.,  9348.,  9864.,  9960., 10512., 10572., 11160., 11184., 11808.,  9780., 10344., 10392., 10992., 11004., 11640., 11616., 12288., 11008., 11696., 11776., 12512., 12544., 13328., 13312., 14144.,  8652.,  9216.,  9192.,  9792.,  9732., 10368., 10272., 10944.,  7420.,  7936.,  7960.,  8512.,  8500.,  9088.,  9040.,  9664.,  5631.,  6042.,  5982.,  6420.,  6333.,  6798.,  6684.,  7176.,  4763.,  5122.,  5114.,  5500.,  5465.,  5878.,  5816.,  6256.,  6720.,  7284.,  7152.,  7752.,  7584.,  8220.,  8016.,  8688.,  4045.,  4404.,  4342.,  4728.,  4639.,  5052.,  4936.,  5376.,  4337.,  4740.,  4634.,  5064.,  4931.,  5388.,  5228.,  5712.,  5475.,  5874.,  5826.,  6252.,  6177.,  6630.,  6528.,  7008.,  5631.,  6042.,  5982.,  6420.,  6333.,  6798.,  6684.,  7176.,  6048.,  6564.,  6480.,  7032.,  6912.,  7500.,  7344.,  7968.,  4809.,  5220.,  5106.,  5544.,  5403.,  5868.,  5700.,  6192.,  4045.,  4404.,  4342.,  4728.,  4639.,  5052.,  4936.,  5376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21920., 23388., 22064., 23544., 22208., 23700., 22352., 23856., 19168., 20428., 19312., 20584., 19456., 20740., 19600., 20896., 19744., 21052., 19888., 21208., 20032., 21364., 20176., 21520., 20320., 21676., 20464., 21832., 20608., 21988., 20752., 22144., 20896., 22300., 21040., 22456., 21184., 22612., 21328., 22768., 22624., 24172., 22768., 24328., 22912., 24484., 23056., 24640., 23200., 24796., 23344., 24952., 23488., 25108., 23632., 25264., 23776., 25420., 23920., 25576., 24064., 25732., 24208., 25888., 24352., 26044., 24496., 26200., 24640., 26356., 24784., 26512., 24928., 26668., 25072., 26824., 25216., 26980., 25360., 27136., 17952., 19324., 18096., 19480., 18240., 19636., 18384., 19792., 16224., 17388., 16368., 17544., 16512., 17700., 16656., 17856., 11424., 12380., 11568., 12536., 11712., 12692., 11856., 12848., 12000., 13004., 12144., 13160., 12288., 13316., 12432., 13472., 12576., 13628., 12720., 13784., 12864., 13940., 13008., 14096., 14304., 15500., 14448., 15656., 14592., 15812., 14736., 15968., 14880., 16124., 15024., 16280., 15168., 16436., 15312., 16592., 15456., 16748., 15600., 16904., 15744., 17060., 15888., 17216., 16032., 17372., 16176., 17528., 16320., 17684., 16464., 17840., 16608., 17996., 16752., 18152., 16896., 18308., 17040., 18464., 13472., 14748., 13616., 14904., 13760., 15060., 13904., 15216., 14048., 15372., 14192., 15528., 14336., 15684., 14480., 15840., 10272., 11388., 10416., 11544., 10560., 11700., 10704., 11856., 10848., 12012., 10992., 12168., 11136., 12324., 11280., 12480., 11424., 12636., 11568., 12792., 11712., 12948., 11856., 13104.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7167.,  7526.,  7885.,  8244.,  7698.,  8084.,  8470.,  8856.,  8229.,  8642.,  9055.,  9468.,  8760.,  9200.,  9640., 10080.,  8331.,  8734.,  9137.,  9540.,  8862.,  9292.,  9722., 10152.,  9393.,  9850., 10307., 10764.,  9924., 10408., 10892., 11376.,  9276.,  9792., 10308., 10824.,  9912., 10464., 11016., 11568., 10548., 11136., 11724., 12312., 11184., 11808., 12432., 13056.,  6719.,  7122.,  7525.,  7928.,  7142.,  7572.,  8002.,  8432.,  7565.,  8022.,  8479.,  8936.,  7988.,  8472.,  8956.,  9440.,  6363.,  6746.,  7129.,  7512.,  6786.,  7196.,  7606.,  8016.,  7209.,  7646.,  8083.,  8520.,  7632.,  8096.,  8560.,  9024.,  7891.,  8302.,  8713.,  9124.,  8422.,  8860.,  9298.,  9736.,  8953.,  9418.,  9883., 10348.,  9484.,  9976., 10468., 10960.,  7167.,  7526.,  7885.,  8244.,  7698.,  8084.,  8470.,  8856.,  8229.,  8642.,  9055.,  9468.,  8760.,  9200.,  9640., 10080.,  9868., 10432., 10996., 11560., 10504., 11104., 11704., 12304., 11140., 11776., 12412., 13048., 11776., 12448., 13120., 13792.,  5731.,  6090.,  6449.,  6808.,  6154.,  6540.,  6926.,  7312.,  6577.,  6990.,  7403.,  7816.,  7000.,  7440.,  7880.,  8320.,  6719.,  7122.,  7525.,  7928.,  7142.,  7572.,  8002.,  8432.,  7565.,  8022.,  8479.,  8936.,  7988.,  8472.,  8956.,  9440.,  8900.,  9416.,  9932., 10448.,  9512., 10064., 10616., 11168., 10124., 10712., 11300., 11888., 10736., 11360., 11984., 12608.,  9460., 10024., 10588., 11152., 10072., 10672., 11272., 11872., 10684., 11320., 11956., 12592., 11296., 11968., 12640., 13312., 10320., 11008., 11696., 12384., 11040., 11776., 12512., 13248., 11760., 12544., 13328., 14112., 12480., 13312., 14144., 14976.,  7204.,  7768.,  8332.,  8896.,  7672.,  8272.,  8872.,  9472.,  8140.,  8776.,  9412., 10048.,  8608.,  9280.,  9952., 10624.,  6580.,  7096.,  7612.,  8128.,  7048.,  7600.,  8152.,  8704.,  7516.,  8104.,  8692.,  9280.,  7984.,  8608.,  9232.,  9856.,  5699.,  6110.,  6521.,  6932.,  6086.,  6524.,  6962.,  7400.,  6473.,  6938.,  7403.,  7868.,  6860.,  7352.,  7844.,  8336.,  4911.,  5270.,  5629.,  5988.,  5298.,  5684.,  6070.,  6456.,  5685.,  6098.,  6511.,  6924.,  6072.,  6512.,  6952.,  7392.,  6860.,  7424.,  7988.,  8552.,  7304.,  7904.,  8504.,  9104.,  7748.,  8384.,  9020.,  9656.,  8192.,  8864.,  9536., 10208.,  3475.,  3834.,  4193.,  4552.,  3754.,  4140.,  4526.,  4912.,  4033.,  4446.,  4859.,  5272.,  4312.,  4752.,  5192.,  5632.,  3887.,  4290.,  4693.,  5096.,  4166.,  4596.,  5026.,  5456.,  4445.,  4902.,  5359.,  5816.,  4724.,  5208.,  5692.,  6176.,  5527.,  5926.,  6325.,  6724.,  5914.,  6340.,  6766.,  7192.,  6301.,  6754.,  7207.,  7660.,  6688.,  7168.,  7648.,  8128.,  5699.,  6110.,  6521.,  6932.,  6086.,  6524.,  6962.,  7400.,  6473.,  6938.,  7403.,  7868.,  6860.,  7352.,  7844.,  8336.,  6076.,  6592.,  7108.,  7624.,  6520.,  7072.,  7624.,  8176.,  6964.,  7552.,  8140.,  8728.,  7408.,  8032.,  8656.,  9280.,  4055.,  4466.,  4877.,  5288.,  4334.,  4772.,  5210.,  5648.,  4613.,  5078.,  5543.,  6008.,  4892.,  5384.,  5876.,  6368.,  3475.,  3834.,  4193.,  4552.,  3754.,  4140.,  4526.,  4912.,  4033.,  4446.,  4859.,  5272.,  4312.,  4752.,  5192.,  5632.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14340., 14912., 15484., 16056., 14616., 15200., 15784., 16368., 14892., 15488., 16084., 16680., 15168., 15776., 16384., 16992., 12244., 12736., 13228., 13720., 12520., 13024., 13528., 14032., 12796., 13312., 13828., 14344., 13072., 13600., 14128., 14656., 13348., 13888., 14428., 14968., 13624., 14176., 14728., 15280., 13900., 14464., 15028., 15592., 14176., 14752., 15328., 15904., 14452., 15040., 15628., 16216., 14728., 15328., 15928., 16528., 15004., 15616., 16228., 16840., 15280., 15904., 16528., 17152., 15556., 16192., 16828., 17464., 15832., 16480., 17128., 17776., 16108., 16768., 17428., 18088., 16384., 17056., 17728., 18400., 18868., 19648., 20428., 21208., 19144., 19936., 20728., 21520., 19420., 20224., 21028., 21832., 19696., 20512., 21328., 22144., 19972., 20800., 21628., 22456., 20248., 21088., 21928., 22768., 20524., 21376., 22228., 23080., 20800., 21664., 22528., 23392., 21076., 21952., 22828., 23704., 21352., 22240., 23128., 24016., 21628., 22528., 23428., 24328., 21904., 22816., 23728., 24640., 22180., 23104., 24028., 24952., 22456., 23392., 24328., 25264., 22732., 23680., 24628., 25576., 23008., 23968., 24928., 25888., 23284., 24256., 25228., 26200., 23560., 24544., 25528., 26512., 23836., 24832., 25828., 26824., 24112., 25120., 26128., 27136., 18148., 19008., 19868., 20728., 18424., 19296., 20168., 21040., 18700., 19584., 20468., 21352., 18976., 19872., 20768., 21664., 17076., 17856., 18636., 19416., 17352., 18144., 18936., 19728., 17628., 18432., 19236., 20040., 17904., 18720., 19536., 20352., 11268., 11840., 12412., 12984., 11544., 12128., 12712., 13296., 11820., 12416., 13012., 13608., 12096., 12704., 13312., 13920., 12372., 12992., 13612., 14232., 12648., 13280., 13912., 14544., 12924., 13568., 14212., 14856., 13200., 13856., 14512., 15168., 12324., 12864., 13404., 13944., 12600., 13152., 13704., 14256., 12876., 13440., 14004., 14568., 13152., 13728., 14304., 14880., 15636., 16320., 17004., 17688., 15912., 16608., 17304., 18000., 16188., 16896., 17604., 18312., 16464., 17184., 17904., 18624., 16740., 17472., 18204., 18936., 17016., 17760., 18504., 19248., 17292., 18048., 18804., 19560., 17568., 18336., 19104., 19872., 17844., 18624., 19404., 20184., 18120., 18912., 19704., 20496., 18396., 19200., 20004., 20808., 18672., 19488., 20304., 21120., 18948., 19776., 20604., 21432., 19224., 20064., 20904., 21744., 19500., 20352., 21204., 22056., 19776., 20640., 21504., 22368., 20052., 20928., 21804., 22680., 20328., 21216., 22104., 22992., 20604., 21504., 22404., 23304., 20880., 21792., 22704., 23616., 18628., 19520., 20412., 21304., 18904., 19808., 20712., 21616., 19180., 20096., 21012., 21928., 19456., 20384., 21312., 22240., 19732., 20672., 21612., 22552., 20008., 20960., 21912., 22864., 20284., 21248., 22212., 23176., 20560., 21536., 22512., 23488., 15972., 16704., 17436., 18168., 16248., 16992., 17736., 18480., 16524., 17280., 18036., 18792., 16800., 17568., 18336., 19104., 13364., 14016., 14668., 15320., 13640., 14304., 14968., 15632., 13916., 14592., 15268., 15944., 14192., 14880., 15568., 16256., 14340., 14912., 15484., 16056., 14616., 15200., 15784., 16368., 14892., 15488., 16084., 16680., 15168., 15776., 16384., 16992.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7920., 10322., 10892.,  7914.,  8328.,  6264.,  8098.,  8668.,  6234.,  6648.,  8448., 10968., 11632.,  8400.,  8880.,  4488.,  5730.,  6156.,  4350.,  4656.,  5136.,  6642.,  7068.,  5070.,  5376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7042., 7120., 7198., 7276., 7354., 7666., 7744., 7822., 7900., 7978., 8290., 8368., 8446., 8524., 8602., 8914., 8992., 9070., 9148., 9226., 9538., 9616., 9694., 9772., 9850.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8892.,  9312., 11380., 11940., 12100., 12696.,  8565.,  9012.,  9078.,  9552.,  9396.,  9840., 12020., 12612., 12740., 13368.,  9021.,  9492.,  9534., 10032.,  8688.,  9216., 10992., 11696., 11760., 12512.,  8172.,  8736.,  8712.,  9312.,  5844.,  6288.,  7284.,  7876.,  7716.,  8344.,  5253.,  5724.,  5550.,  6048.,  4908.,  5280.,  6132.,  6628.,  6564.,  7096.,  4461.,  4860.,  4758.,  5184.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13292., 14084., 13436., 14240., 13580., 14396., 13724., 14552., 13868., 14708., 14444., 15332., 14588., 15488., 14732., 15644., 14876., 15800., 15020., 15956., 15596., 16580., 15740., 16736., 15884., 16892., 16028., 17048., 16172., 17204., 16748., 17828., 16892., 17984., 17036., 18140., 17180., 18296., 17324., 18452., 17900., 19076., 18044., 19232., 18188., 19388., 18332., 19544., 18476., 19700.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8916.,  9336.,  9756., 10176., 10936., 11496., 12056., 12616., 11572., 12168., 12764., 13360.,  7659.,  8106.,  8553.,  9000.,  8082.,  8556.,  9030.,  9504.,  8364.,  8808.,  9252.,  9696., 10136., 10728., 11320., 11912., 10772., 11400., 12028., 12656.,  7011.,  7482.,  7953.,  8424.,  7434.,  7932.,  8430.,  8928.,  8400.,  8928.,  9456.,  9984., 10016., 10720., 11424., 12128., 10736., 11488., 12240., 12992.,  6756.,  7320.,  7884.,  8448.,  7224.,  7824.,  8424.,  9024.,  7020.,  7464.,  7908.,  8352.,  8344.,  8936.,  9528., 10120.,  8788.,  9416., 10044., 10672.,  5523.,  5994.,  6465.,  6936.,  5802.,  6300.,  6798.,  7296.,  5988.,  6360.,  6732.,  7104.,  7160.,  7656.,  8152.,  8648.,  7604.,  8136.,  8668.,  9200.,  4779.,  5178.,  5577.,  5976.,  5058.,  5484.,  5910.,  6336.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14784., 15320., 15856., 16392., 15060., 15608., 16156., 16704., 15336., 15896., 16456., 17016., 15612., 16184., 16756., 17328., 15888., 16472., 17056., 17640., 16992., 17624., 18256., 18888., 17268., 17912., 18556., 19200., 17544., 18200., 18856., 19512., 17820., 18488., 19156., 19824., 18096., 18776., 19456., 20136., 10240., 10712., 11184., 11656., 10516., 11000., 11484., 11968., 10792., 11288., 11784., 12280., 11068., 11576., 12084., 12592., 11344., 11864., 12384., 12904., 12448., 13016., 13584., 14152., 12724., 13304., 13884., 14464., 13000., 13592., 14184., 14776., 13276., 13880., 14484., 15088., 13552., 14168., 14784., 15400., 14656., 15320., 15984., 16648., 14932., 15608., 16284., 16960., 15208., 15896., 16584., 17272., 15484., 16184., 16884., 17584., 15760., 16472., 17184., 17896.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7047.,  7488.,  9258.,  9828., 10398., 10968.,  7542.,  7956.,  8370.,  8784.,  6327.,  6768.,  8202.,  8772.,  9342.,  9912.,  6678.,  7092.,  7506.,  7920.,  8508.,  9024., 11160., 11824., 12488., 13152.,  9024.,  9504.,  9984., 10464.,  4419.,  4752.,  5658.,  6084.,  6510.,  6936.,  4554.,  4860.,  5166.,  5472.,  5715.,  6048.,  7482.,  7908.,  8334.,  8760.,  5994.,  6300.,  6606.,  6912.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14006., 14084., 14162., 14240., 14318., 14396., 14474., 14552., 14630., 14708., 15254., 15332., 15410., 15488., 15566., 15644., 15722., 15800., 15878., 15956., 16502., 16580., 16658., 16736., 16814., 16892., 16970., 17048., 17126., 17204., 17750., 17828., 17906., 17984., 18062., 18140., 18218., 18296., 18374., 18452., 18998., 19076., 19154., 19232., 19310., 19388., 19466., 19544., 19622., 19700.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7137.,  7470.,  7704.,  8064.,  9240.,  9684.,  9960., 10440., 10680., 11196., 11400., 11952.,  7497.,  7884.,  8010.,  8424.,  8523.,  8964.,  9036.,  9504., 10161., 10638., 10728., 11232., 13080., 13716., 13800., 14472., 14520., 15228., 15240., 15984., 10233., 10764., 10746., 11304., 11259., 11844., 11772., 12384.,  7740.,  8184.,  8352.,  8832.,  9952., 10544., 10720., 11360., 11488., 12176., 12256., 12992.,  7932.,  8448.,  8472.,  9024.,  9012.,  9600.,  9552., 10176.,  6345.,  6822.,  6696.,  7200.,  7992.,  8628.,  8424.,  9096.,  8856.,  9564.,  9288., 10032.,  5985.,  6516.,  6282.,  6840.,  6579.,  7164.,  6876.,  7488.,  4473.,  4806.,  4824.,  5184.,  5688.,  6132.,  6120.,  6600.,  6552.,  7068.,  6984.,  7536.,  4401.,  4788.,  4698.,  5112.,  4995.,  5436.,  5292.,  5760.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15176., 16236., 15320., 16392., 15464., 16548., 15608., 16704., 15752., 16860., 15896., 17016., 16040., 17172., 16184., 17328., 16328., 17484., 16472., 17640., 17480., 18732., 17624., 18888., 17768., 19044., 17912., 19200., 18056., 19356., 18200., 19512., 18344., 19668., 18488., 19824., 18632., 19980., 18776., 20136., 10568., 11500., 10712., 11656., 10856., 11812., 11000., 11968., 11144., 12124., 11288., 12280., 11432., 12436., 11576., 12592., 11720., 12748., 11864., 12904., 12872., 13996., 13016., 14152., 13160., 14308., 13304., 14464., 13448., 14620., 13592., 14776., 13736., 14932., 13880., 15088., 14024., 15244., 14168., 15400., 15176., 16492., 15320., 16648., 15464., 16804., 15608., 16960., 15752., 17116., 15896., 17272., 16040., 17428., 16184., 17584., 16328., 17740., 16472., 17896.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6837.,  7170.,  7503.,  7836.,  7368.,  7728.,  8088.,  8448.,  8564.,  9008.,  9452.,  9896.,  9200.,  9680., 10160., 10640.,  9836., 10352., 10868., 11384., 10472., 11024., 11576., 12128.,  6351.,  6738.,  7125.,  7512.,  6774.,  7188.,  7602.,  8016.,  7197.,  7638.,  8079.,  8520.,  7620.,  8088.,  8556.,  9024.,  9669., 10146., 10623., 11100., 10200., 10704., 11208., 11712., 11956., 12592., 13228., 13864., 12592., 13264., 13936., 14608., 13228., 13936., 14644., 15352., 13864., 14608., 15352., 16096.,  8607.,  9138.,  9669., 10200.,  9030.,  9588., 10146., 10704.,  9453., 10038., 10623., 11208.,  9876., 10488., 11100., 11712.,  7932.,  8376.,  8820.,  9264.,  8544.,  9024.,  9504.,  9984.,  9840., 10432., 11024., 11616., 10560., 11200., 11840., 12480., 11280., 11968., 12656., 13344., 12000., 12736., 13472., 14208.,  7092.,  7608.,  8124.,  8640.,  7560.,  8112.,  8664.,  9216.,  8028.,  8616.,  9204.,  9792.,  8496.,  9120.,  9744., 10368.,  7125.,  7602.,  8079.,  8556.,  7512.,  8016.,  8520.,  9024.,  8564.,  9200.,  9836., 10472.,  9008.,  9680., 10352., 11024.,  9452., 10160., 10868., 11576.,  9896., 10640., 11384., 12128.,  5775.,  6306.,  6837.,  7368.,  6054.,  6612.,  7170.,  7728.,  6333.,  6918.,  7503.,  8088.,  6612.,  7224.,  7836.,  8448.,  5061.,  5394.,  5727.,  6060.,  5448.,  5808.,  6168.,  6528.,  6196.,  6640.,  7084.,  7528.,  6640.,  7120.,  7600.,  8080.,  7084.,  7600.,  8116.,  8632.,  7528.,  8080.,  8632.,  9184.,  4287.,  4674.,  5061.,  5448.,  4566.,  4980.,  5394.,  5808.,  4845.,  5286.,  5727.,  6168.,  5124.,  5592.,  6060.,  6528.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13420., 13968., 14516., 15064., 13696., 14256., 14816., 15376., 13972., 14544., 15116., 15688., 14248., 14832., 15416., 16000., 14524., 15120., 15716., 16312., 14800., 15408., 16016., 16624., 15076., 15696., 16316., 16936., 15352., 15984., 16616., 17248., 15628., 16272., 16916., 17560., 15904., 16560., 17216., 17872., 12972., 13456., 13940., 14424., 13248., 13744., 14240., 14736., 13524., 14032., 14540., 15048., 13800., 14320., 14840., 15360., 14076., 14608., 15140., 15672., 14352., 14896., 15440., 15984., 14628., 15184., 15740., 16296., 14904., 15472., 16040., 16608., 15180., 15760., 16340., 16920., 15456., 16048., 16640., 17232.,  8428.,  8848.,  9268.,  9688.,  8704.,  9136.,  9568., 10000.,  8980.,  9424.,  9868., 10312.,  9256.,  9712., 10168., 10624.,  9532., 10000., 10468., 10936.,  9808., 10288., 10768., 11248., 10084., 10576., 11068., 11560., 10360., 10864., 11368., 11872., 10636., 11152., 11668., 12184., 10912., 11440., 11968., 12496., 12844., 13456., 14068., 14680., 13120., 13744., 14368., 14992., 13396., 14032., 14668., 15304., 13672., 14320., 14968., 15616., 13948., 14608., 15268., 15928., 14224., 14896., 15568., 16240., 14500., 15184., 15868., 16552., 14776., 15472., 16168., 16864., 15052., 15760., 16468., 17176., 15328., 16048., 16768., 17488., 17260., 18064., 18868., 19672., 17536., 18352., 19168., 19984., 17812., 18640., 19468., 20296., 18088., 18928., 19768., 20608., 18364., 19216., 20068., 20920., 18640., 19504., 20368., 21232., 18916., 19792., 20668., 21544., 19192., 20080., 20968., 21856., 19468., 20368., 21268., 22168., 19744., 20656., 21568., 22480.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5877.,  6318.,  6759.,  7200.,  7770.,  8340.,  8910.,  9480., 10050., 10620., 11190., 11760.,  7182.,  7596.,  8010.,  8424.,  8838.,  9252.,  9666., 10080.,  5877.,  6318.,  6759.,  7200.,  7770.,  8340.,  8910.,  9480., 10050., 10620., 11190., 11760.,  7182.,  7596.,  8010.,  8424.,  8838.,  9252.,  9666., 10080.,  6900.,  7416.,  7932.,  8448.,  9112.,  9776., 10440., 11104., 11768., 12432., 13096., 13760.,  8352.,  8832.,  9312.,  9792., 10272., 10752., 11232., 11712.,  4473.,  4806.,  5139.,  5472.,  5898.,  6324.,  6750.,  7176.,  7602.,  8028.,  8454.,  8880.,  5346.,  5652.,  5958.,  6264.,  6570.,  6876.,  7182.,  7488.,  4473.,  4806.,  5139.,  5472.,  5898.,  6324.,  6750.,  7176.,  7602.,  8028.,  8454.,  8880.,  5346.,  5652.,  5958.,  6264.,  6570.,  6876.,  7182.,  7488.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16158., 16236., 16314., 16392., 16470., 16548., 16626., 16704., 16782., 16860., 16938., 17016., 17094., 17172., 17250., 17328., 17406., 17484., 17562., 17640., 18654., 18732., 18810., 18888., 18966., 19044., 19122., 19200., 19278., 19356., 19434., 19512., 19590., 19668., 19746., 19824., 19902., 19980., 20058., 20136., 11422., 11500., 11578., 11656., 11734., 11812., 11890., 11968., 12046., 12124., 12202., 12280., 12358., 12436., 12514., 12592., 12670., 12748., 12826., 12904., 13918., 13996., 14074., 14152., 14230., 14308., 14386., 14464., 14542., 14620., 14698., 14776., 14854., 14932., 15010., 15088., 15166., 15244., 15322., 15400., 16414., 16492., 16570., 16648., 16726., 16804., 16882., 16960., 17038., 17116., 17194., 17272., 17350., 17428., 17506., 17584., 17662., 17740., 17818., 17896.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7659.,  8010.,  8226.,  8604.,  8793.,  9198.,  9360.,  9792., 10080., 10548., 10800., 11304., 11520., 12060., 12240., 12816., 12960., 13572., 13680., 14328., 14400., 15084., 15120., 15840.,  9009.,  9468.,  9522., 10008., 10035., 10548., 10548., 11088., 11061., 11628., 11574., 12168., 12087., 12708., 12600., 13248.,  7659.,  8010.,  8226.,  8604.,  8793.,  9198.,  9360.,  9792., 10080., 10548., 10800., 11304., 11520., 12060., 12240., 12816., 12960., 13572., 13680., 14328., 14400., 15084., 15120., 15840.,  9009.,  9468.,  9522., 10008., 10035., 10548., 10548., 11088., 11061., 11628., 11574., 12168., 12087., 12708., 12600., 13248.,  8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.,  4851.,  5202.,  5202.,  5580.,  5553.,  5958.,  5904.,  6336.,  6336.,  6804.,  6768.,  7272.,  7200.,  7740.,  7632.,  8208.,  8064.,  8676.,  8496.,  9144.,  8928.,  9612.,  9360., 10080.,  5337.,  5796.,  5634.,  6120.,  5931.,  6444.,  6228.,  6768.,  6525.,  7092.,  6822.,  7416.,  7119.,  7740.,  7416.,  8064.,  4851.,  5202.,  5202.,  5580.,  5553.,  5958.,  5904.,  6336.,  6336.,  6804.,  6768.,  7272.,  7200.,  7740.,  7632.,  8208.,  8064.,  8676.,  8496.,  9144.,  8928.,  9612.,  9360., 10080.,  5337.,  5796.,  5634.,  6120.,  5931.,  6444.,  6228.,  6768.,  6525.,  7092.,  6822.,  7416.,  7119.,  7740.,  7416.,  8064.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13824., 14908., 13968., 15064., 14112., 15220., 14256., 15376., 14400., 15532., 14544., 15688., 14688., 15844., 14832., 16000., 14976., 16156., 15120., 16312., 15264., 16468., 15408., 16624., 15552., 16780., 15696., 16936., 15840., 17092., 15984., 17248., 16128., 17404., 16272., 17560., 16416., 17716., 16560., 17872., 13312., 14268., 13456., 14424., 13600., 14580., 13744., 14736., 13888., 14892., 14032., 15048., 14176., 15204., 14320., 15360., 14464., 15516., 14608., 15672., 14752., 15828., 14896., 15984., 15040., 16140., 15184., 16296., 15328., 16452., 15472., 16608., 15616., 16764., 15760., 16920., 15904., 17076., 16048., 17232.,  8704.,  9532.,  8848.,  9688.,  8992.,  9844.,  9136., 10000.,  9280., 10156.,  9424., 10312.,  9568., 10468.,  9712., 10624.,  9856., 10780., 10000., 10936., 10144., 11092., 10288., 11248., 10432., 11404., 10576., 11560., 10720., 11716., 10864., 11872., 11008., 12028., 11152., 12184., 11296., 12340., 11440., 12496., 13312., 14524., 13456., 14680., 13600., 14836., 13744., 14992., 13888., 15148., 14032., 15304., 14176., 15460., 14320., 15616., 14464., 15772., 14608., 15928., 14752., 16084., 14896., 16240., 15040., 16396., 15184., 16552., 15328., 16708., 15472., 16864., 15616., 17020., 15760., 17176., 15904., 17332., 16048., 17488., 17920., 19516., 18064., 19672., 18208., 19828., 18352., 19984., 18496., 20140., 18640., 20296., 18784., 20452., 18928., 20608., 19072., 20764., 19216., 20920., 19360., 21076., 19504., 21232., 19648., 21388., 19792., 21544., 19936., 21700., 20080., 21856., 20224., 22012., 20368., 22168., 20512., 22324., 20656., 22480.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7479.,  7830.,  8181.,  8532.,  8010.,  8388.,  8766.,  9144.,  8541.,  8946.,  9351.,  9756.,  9072.,  9504.,  9936., 10368.,  9708., 10176., 10644., 11112., 10344., 10848., 11352., 11856., 10980., 11520., 12060., 12600., 11616., 12192., 12768., 13344., 12252., 12864., 13476., 14088., 12888., 13536., 14184., 14832., 13524., 14208., 14892., 15576., 14160., 14880., 15600., 16320.,  7767.,  8226.,  8685.,  9144.,  8190.,  8676.,  9162.,  9648.,  8613.,  9126.,  9639., 10152.,  9036.,  9576., 10116., 10656.,  9459., 10026., 10593., 11160.,  9882., 10476., 11070., 11664., 10305., 10926., 11547., 12168., 10728., 11376., 12024., 12672.,  7479.,  7830.,  8181.,  8532.,  8010.,  8388.,  8766.,  9144.,  8541.,  8946.,  9351.,  9756.,  9072.,  9504.,  9936., 10368.,  9708., 10176., 10644., 11112., 10344., 10848., 11352., 11856., 10980., 11520., 12060., 12600., 11616., 12192., 12768., 13344., 12252., 12864., 13476., 14088., 12888., 13536., 14184., 14832., 13524., 14208., 14892., 15576., 14160., 14880., 15600., 16320.,  7767.,  8226.,  8685.,  9144.,  8190.,  8676.,  9162.,  9648.,  8613.,  9126.,  9639., 10152.,  9036.,  9576., 10116., 10656.,  9459., 10026., 10593., 11160.,  9882., 10476., 11070., 11664., 10305., 10926., 11547., 12168., 10728., 11376., 12024., 12672.,  8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592.,  5607.,  5958.,  6309.,  6660.,  5994.,  6372.,  6750.,  7128.,  6381.,  6786.,  7191.,  7596.,  6768.,  7200.,  7632.,  8064.,  7212.,  7680.,  8148.,  8616.,  7656.,  8160.,  8664.,  9168.,  8100.,  8640.,  9180.,  9720.,  8544.,  9120.,  9696., 10272.,  8988.,  9600., 10212., 10824.,  9432., 10080., 10728., 11376.,  9876., 10560., 11244., 11928., 10320., 11040., 11760., 12480.,  5319.,  5778.,  6237.,  6696.,  5598.,  6084.,  6570.,  7056.,  5877.,  6390.,  6903.,  7416.,  6156.,  6696.,  7236.,  7776.,  6435.,  7002.,  7569.,  8136.,  6714.,  7308.,  7902.,  8496.,  6993.,  7614.,  8235.,  8856.,  7272.,  7920.,  8568.,  9216.,  5607.,  5958.,  6309.,  6660.,  5994.,  6372.,  6750.,  7128.,  6381.,  6786.,  7191.,  7596.,  6768.,  7200.,  7632.,  8064.,  7212.,  7680.,  8148.,  8616.,  7656.,  8160.,  8664.,  9168.,  8100.,  8640.,  9180.,  9720.,  8544.,  9120.,  9696., 10272.,  8988.,  9600., 10212., 10824.,  9432., 10080., 10728., 11376.,  9876., 10560., 11244., 11928., 10320., 11040., 11760., 12480.,  5319.,  5778.,  6237.,  6696.,  5598.,  6084.,  6570.,  7056.,  5877.,  6390.,  6903.,  7416.,  6156.,  6696.,  7236.,  7776.,  6435.,  7002.,  7569.,  8136.,  6714.,  7308.,  7902.,  8496.,  6993.,  7614.,  8235.,  8856.,  7272.,  7920.,  8568.,  9216.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12740., 13312., 13884., 14456., 13016., 13600., 14184., 14768., 13292., 13888., 14484., 15080., 13568., 14176., 14784., 15392., 13844., 14464., 15084., 15704., 14120., 14752., 15384., 16016., 14396., 15040., 15684., 16328., 14672., 15328., 15984., 16640., 14948., 15616., 16284., 16952., 15224., 15904., 16584., 17264., 15500., 16192., 16884., 17576., 15776., 16480., 17184., 17888., 16052., 16768., 17484., 18200., 16328., 17056., 17784., 18512., 16604., 17344., 18084., 18824., 16880., 17632., 18384., 19136., 17156., 17920., 18684., 19448., 17432., 18208., 18984., 19760., 17708., 18496., 19284., 20072., 17984., 18784., 19584., 20384., 16708., 17408., 18108., 18808., 16984., 17696., 18408., 19120., 17260., 17984., 18708., 19432., 17536., 18272., 19008., 19744., 17812., 18560., 19308., 20056., 18088., 18848., 19608., 20368., 18364., 19136., 19908., 20680., 18640., 19424., 20208., 20992., 18916., 19712., 20508., 21304., 19192., 20000., 20808., 21616., 19468., 20288., 21108., 21928., 19744., 20576., 21408., 22240., 20020., 20864., 21708., 22552., 20296., 21152., 22008., 22864., 20572., 21440., 22308., 23176., 20848., 21728., 22608., 23488., 21124., 22016., 22908., 23800., 21400., 22304., 23208., 24112., 21676., 22592., 23508., 24424., 21952., 22880., 23808., 24736., 13764., 14336., 14908., 15480., 14040., 14624., 15208., 15792., 14316., 14912., 15508., 16104., 14592., 15200., 15808., 16416., 14868., 15488., 16108., 16728., 15144., 15776., 16408., 17040., 15420., 16064., 16708., 17352., 15696., 16352., 17008., 17664., 15972., 16640., 17308., 17976., 16248., 16928., 17608., 18288., 16524., 17216., 17908., 18600., 16800., 17504., 18208., 18912., 17076., 17792., 18508., 19224., 17352., 18080., 18808., 19536., 17628., 18368., 19108., 19848., 17904., 18656., 19408., 20160., 18180., 18944., 19708., 20472., 18456., 19232., 20008., 20784., 18732., 19520., 20308., 21096., 19008., 19808., 20608., 21408., 15684., 16384., 17084., 17784., 15960., 16672., 17384., 18096., 16236., 16960., 17684., 18408., 16512., 17248., 17984., 18720., 16788., 17536., 18284., 19032., 17064., 17824., 18584., 19344., 17340., 18112., 18884., 19656., 17616., 18400., 19184., 19968., 17892., 18688., 19484., 20280., 18168., 18976., 19784., 20592., 18444., 19264., 20084., 20904., 18720., 19552., 20384., 21216., 18996., 19840., 20684., 21528., 19272., 20128., 20984., 21840., 19548., 20416., 21284., 22152., 19824., 20704., 21584., 22464., 20100., 20992., 21884., 22776., 20376., 21280., 22184., 23088., 20652., 21568., 22484., 23400., 20928., 21856., 22784., 23712., 12740., 13312., 13884., 14456., 13016., 13600., 14184., 14768., 13292., 13888., 14484., 15080., 13568., 14176., 14784., 15392., 13844., 14464., 15084., 15704., 14120., 14752., 15384., 16016., 14396., 15040., 15684., 16328., 14672., 15328., 15984., 16640., 14948., 15616., 16284., 16952., 15224., 15904., 16584., 17264., 15500., 16192., 16884., 17576., 15776., 16480., 17184., 17888., 16052., 16768., 17484., 18200., 16328., 17056., 17784., 18512., 16604., 17344., 18084., 18824., 16880., 17632., 18384., 19136., 17156., 17920., 18684., 19448., 17432., 18208., 18984., 19760., 17708., 18496., 19284., 20072., 17984., 18784., 19584., 20384.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9508., 12207., 12956., 10458., 11052., 10432., 12273., 13022.,  9294.,  9888., 11992., 14002., 14936., 11144., 11880.,  9004., 11208., 11892.,  8934.,  9476.,  9184., 10464., 11148.,  8210.,  8752.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19527., 19698., 19869., 20040., 20211., 21237., 21408., 21579., 21750., 21921., 22947., 23118., 23289., 23460., 23631., 24657., 24828., 24999., 25170., 25341., 26367., 26538., 26709., 26880., 27051.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9420.,  9992., 12299., 12990., 13016., 13752., 10676., 11252., 11252., 11864.,  9212.,  9856., 11149., 11906., 11866., 12668.,  8724.,  9308.,  9300.,  9920., 10912., 11632., 13576., 14436., 14488., 15408., 11152., 11856., 11872., 12624., 10196., 10840., 12539., 13296., 13254., 14056., 10276., 10860., 10844., 11464.,  8884.,  9472., 10153., 10848., 10868., 11608.,  8148.,  8708.,  8716.,  9312.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14520., 15246., 14844., 15588., 15168., 15930., 15492., 16272., 15816., 16614., 17760., 18666., 18084., 19008., 18408., 19350., 18732., 19692., 19056., 20034., 21000., 22086., 21324., 22428., 21648., 22770., 21972., 23112., 22296., 23454., 24240., 25506., 24564., 25848., 24888., 26190., 25212., 26532., 22592., 23802., 19416., 20478., 19740., 20820., 20064., 21162., 20388., 21504., 20712., 21846.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8156.,  8728.,  9300.,  9872., 10787., 11478., 12169., 12860., 11472., 12208., 12944., 13680.,  9128.,  9704., 10280., 10856.,  9668., 10280., 10892., 11504.,  9396., 10040., 10684., 11328., 11621., 12378., 13135., 13892., 12306., 13108., 13910., 14712.,  8672.,  9256.,  9840., 10424.,  9212.,  9832., 10452., 11072.,  9776., 10496., 11216., 11936., 12276., 13136., 13996., 14856., 13144., 14064., 14984., 15904., 10464., 11168., 11872., 12576., 11152., 11904., 12656., 13408.,  9444., 10088., 10732., 11376., 10785., 11542., 12299., 13056., 11434., 12236., 13038., 13840.,  8576.,  9160.,  9744., 10328.,  9100.,  9720., 10340., 10960.,  9308.,  9896., 10484., 11072.,  9979., 10674., 11369., 12064., 10628., 11368., 12108., 12848.,  7800.,  8360.,  8920.,  9480.,  8324.,  8920.,  9516., 10112.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10266., 10608., 10950., 11292., 10768., 11128., 11488., 11848., 11270., 11648., 12026., 12404., 11772., 12168., 12564., 12960., 12274., 12688., 13102., 13516., 15286., 15808., 16330., 16852., 15788., 16328., 16868., 17408., 16290., 16848., 17406., 17964., 16792., 17368., 17944., 18520., 17294., 17888., 18482., 19076., 20306., 21008., 21710., 22412., 20808., 21528., 22248., 22968., 21310., 22048., 22786., 23524., 21812., 22568., 23324., 24080., 22314., 23088., 23862., 24636., 24942., 25696., 26450., 27204., 25444., 26216., 26988., 27760., 22042., 22768., 23494., 24220., 22544., 23288., 24032., 24776., 20166., 20864., 21562., 22260., 16842., 17456., 18070., 18684., 17344., 17976., 18608., 19240., 16758., 17344., 17930., 18516., 17260., 17864., 18468., 19072., 16930., 17488., 18046., 18604.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10386., 10984., 12273., 13022., 13771., 14520., 10594., 11188., 11782., 12376.,  9066.,  9664., 10005., 10754., 11503., 12252.,  7850.,  8444.,  9038.,  9632., 14592., 15344., 15038., 15972., 16906., 17840., 11280., 12016., 12752., 13488.,  8438.,  8984.,  9892., 10576., 11260., 11944.,  8174.,  8716.,  9258.,  9800.,  9470., 10016.,  9652., 10336., 11020., 11704.,  7334.,  7876.,  8418.,  8960.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15075., 15246., 15417., 15588., 15759., 15930., 16101., 16272., 16443., 16614., 18495., 18666., 18837., 19008., 19179., 19350., 19521., 19692., 19863., 20034., 21915., 22086., 22257., 22428., 22599., 22770., 22941., 23112., 23283., 23454., 25335., 25506., 25677., 25848., 26019., 26190., 26361., 26532., 23631., 23802., 20307., 20478., 20649., 20820., 20991., 21162., 21333., 21504., 21675., 21846.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9904., 10500., 10456., 11088., 12009., 12674., 12726., 13436., 13443., 14198., 14160., 14960., 10088., 10628., 10664., 11240., 11240., 11852., 11816., 12464.,  8400.,  9012.,  8952.,  9600.,  9133.,  9802.,  9850., 10564., 10567., 11326., 11284., 12088.,  7432.,  7956.,  8008.,  8568.,  8584.,  9180.,  9160.,  9792., 13616., 14432., 14336., 15200., 14208., 15100., 15120., 16072., 16032., 17044., 16944., 18016., 10896., 11616., 11616., 12384., 12336., 13152., 13056., 13920.,  9576., 10188., 10152., 10800., 11723., 12392., 12438., 13152., 13153., 13912., 13868., 14672.,  9456.,  9980., 10024., 10584., 10592., 11188., 11160., 11792.,  9192.,  9820.,  9768., 10432.,  9319.,  9992., 10034., 10752., 10749., 11512., 11464., 12272.,  7376.,  7916.,  7944.,  8520.,  8512.,  9124.,  9080.,  9728.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14892., 15558., 15216., 15900., 15540., 16242., 15864., 16584., 16188., 16926., 16512., 17268., 16836., 17610., 17160., 17952., 17484., 18294., 17808., 18636., 21372., 22398., 21696., 22740., 22020., 23082., 22344., 23424., 22668., 23766., 22992., 24108., 23316., 24450., 23640., 24792., 23964., 25134., 24288., 25476., 27852., 29238., 28176., 29580., 28500., 29922., 28824., 30264., 29148., 30606., 29472., 30948., 29796., 31290., 30120., 31632., 30444., 31974., 30768., 32316., 25628., 27118., 25952., 27460., 26276., 27802., 26600., 28144., 22956., 24390., 23280., 24732., 23604., 25074., 23928., 25416., 21308., 22686., 21632., 23028., 18668., 19878., 18992., 20220., 19316., 20562., 19640., 20904., 18812., 19966., 19136., 20308., 19460., 20650., 19784., 20992., 19212., 20310., 19536., 20652.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8748.,  9344.,  9940., 10536.,  9272.,  9904., 10536., 11168., 10105., 10770., 11435., 12100., 10790., 11500., 12210., 12920., 11475., 12230., 12985., 13740., 12160., 12960., 13760., 14560.,  8180.,  8720.,  9260.,  9800.,  8720.,  9296.,  9872., 10448.,  9260.,  9872., 10484., 11096.,  9800., 10448., 11096., 11744.,  9180.,  9792., 10404., 11016.,  9704., 10352., 11000., 11648., 10749., 11418., 12087., 12756., 11434., 12148., 12862., 13576., 12119., 12878., 13637., 14396., 12804., 13608., 14412., 15216.,  7748.,  8272.,  8796.,  9320.,  8288.,  8848.,  9408.,  9968.,  8828.,  9424., 10020., 10616.,  9368., 10000., 10632., 11264., 11632., 12448., 13264., 14080., 12320., 13184., 14048., 14912., 12676., 13568., 14460., 15352., 13544., 14496., 15448., 16400., 14412., 15424., 16436., 17448., 15280., 16352., 17424., 18496., 10768., 11488., 12208., 12928., 11456., 12224., 12992., 13760., 12144., 12960., 13776., 14592., 12832., 13696., 14560., 15424.,  8748.,  9360.,  9972., 10584.,  9288.,  9936., 10584., 11232.,  9753., 10422., 11091., 11760., 10402., 11116., 11830., 12544., 11051., 11810., 12569., 13328., 11700., 12504., 13308., 14112.,  7444.,  7968.,  8492.,  9016.,  7968.,  8528.,  9088.,  9648.,  8492.,  9088.,  9684., 10280.,  9016.,  9648., 10280., 10912.,  9756., 10384., 11012., 11640., 10296., 10960., 11624., 12288.,  9677., 10350., 11023., 11696., 10326., 11044., 11762., 12480., 10975., 11738., 12501., 13264., 11624., 12432., 13240., 14048.,  8132.,  8672.,  9212.,  9752.,  8656.,  9232.,  9808., 10384.,  9180.,  9792., 10404., 11016.,  9704., 10352., 11000., 11648.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15742., 16216., 16690., 17164., 16244., 16736., 17228., 17720., 16746., 17256., 17766., 18276., 17248., 17776., 18304., 18832., 14870., 15352., 15834., 16316., 15372., 15872., 16372., 16872., 15874., 16392., 16910., 17428., 16376., 16912., 17448., 17984., 14254., 14744., 15234., 15724., 14756., 15264., 15772., 16280., 15478., 15992., 16506., 17020., 15980., 16512., 17044., 17576., 16482., 17032., 17582., 18132., 16984., 17552., 18120., 18688., 16654., 17176., 17698., 18220., 17156., 17696., 18236., 18776., 17658., 18216., 18774., 19332., 18160., 18736., 19312., 19888., 18662., 19256., 19850., 20444., 19164., 19776., 20388., 21000., 14510., 15128., 15746., 16364., 15012., 15648., 16284., 16920., 15514., 16168., 16822., 17476., 16016., 16688., 17360., 18032., 14406., 15032., 15658., 16284., 14908., 15552., 16196., 16840., 15410., 16072., 16734., 17396., 15912., 16592., 17272., 17952., 14558., 15192., 15826., 16460., 15060., 15712., 16364., 17016., 17702., 18232., 18762., 19292., 18204., 18752., 19300., 19848., 18706., 19272., 19838., 20404., 19208., 19792., 20376., 20960., 15742., 16216., 16690., 17164., 16244., 16736., 17228., 17720., 16746., 17256., 17766., 18276., 17248., 17776., 18304., 18832., 14870., 15352., 15834., 16316., 15372., 15872., 16372., 16872., 14558., 15064., 15570., 16076., 15060., 15584., 16108., 16632., 15562., 16104., 16646., 17188., 16064., 16624., 17184., 17744., 15478., 15992., 16506., 17020., 15980., 16512., 17044., 17576., 16482., 17032., 17582., 18132., 16984., 17552., 18120., 18688., 16654., 17176., 17698., 18220., 17156., 17696., 18236., 18776.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10062., 10660., 11258., 11856.,  9813., 10562., 11311., 12060., 12809., 13558., 14307., 15056.,  8242.,  8836.,  9430., 10024., 10618., 11212., 11806., 12400., 10302., 10900., 11498., 12096., 10333., 11082., 11831., 12580., 13329., 14078., 14827., 15576.,  7746.,  8340.,  8934.,  9528., 10122., 10716., 11310., 11904., 13200., 13952., 14704., 15456., 11830., 12764., 13698., 14632., 15566., 16500., 17434., 18368.,  9024.,  9760., 10496., 11232., 11968., 12704., 13440., 14176.,  8906.,  9452.,  9998., 10544.,  8572.,  9256.,  9940., 10624., 11308., 11992., 12676., 13360.,  7070.,  7612.,  8154.,  8696.,  9238.,  9780., 10322., 10864.,  9178.,  9724., 10270., 10816.,  8764.,  9448., 10132., 10816., 11500., 12184., 12868., 13552.,  7502.,  8044.,  8586.,  9128.,  9670., 10212., 10754., 11296.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15387., 15558., 15729., 15900., 16071., 16242., 16413., 16584., 16755., 16926., 17097., 17268., 17439., 17610., 17781., 17952., 18123., 18294., 18465., 18636., 22227., 22398., 22569., 22740., 22911., 23082., 23253., 23424., 23595., 23766., 23937., 24108., 24279., 24450., 24621., 24792., 24963., 25134., 25305., 25476., 29067., 29238., 29409., 29580., 29751., 29922., 30093., 30264., 30435., 30606., 30777., 30948., 31119., 31290., 31461., 31632., 31803., 31974., 32145., 32316., 26947., 27118., 27289., 27460., 27631., 27802., 27973., 28144., 24219., 24390., 24561., 24732., 24903., 25074., 25245., 25416., 22515., 22686., 22857., 23028., 19707., 19878., 20049., 20220., 20391., 20562., 20733., 20904., 19795., 19966., 20137., 20308., 20479., 20650., 20821., 20992., 20139., 20310., 20481., 20652.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9816., 10428., 10368., 11016., 10920., 11604., 11472., 12192.,  9349.,  9930., 10066., 10692., 10783., 11454., 11500., 12216., 12217., 12978., 12934., 13740., 13651., 14502., 14368., 15264.,  7760.,  8228.,  8336.,  8840.,  8912.,  9452.,  9488., 10064., 10064., 10676., 10640., 11288., 11216., 11900., 11792., 12512.,  9528., 10140., 10080., 10728., 10632., 11316., 11184., 11904.,  9613., 10202., 10330., 10964., 11047., 11726., 11764., 12488., 12481., 13250., 13198., 14012., 13915., 14774., 14632., 15536.,  7280.,  7748.,  7856.,  8360.,  8432.,  8972.,  9008.,  9584.,  9584., 10196., 10160., 10808., 10736., 11420., 11312., 12032., 12176., 12992., 12896., 13760., 13616., 14528., 14336., 15296., 11248., 12012., 12160., 12984., 13072., 13956., 13984., 14928., 14896., 15900., 15808., 16872., 16720., 17844., 17632., 18816.,  9552., 10176., 10272., 10944., 10992., 11712., 11712., 12480., 12432., 13248., 13152., 14016., 13872., 14784., 14592., 15552.,  9424., 10036., 10000., 10648., 10576., 11260., 11152., 11872.,  9547., 10136., 10262., 10896., 10977., 11656., 11692., 12416., 12407., 13176., 13122., 13936., 13837., 14696., 14552., 15456.,  7560.,  8028.,  8128.,  8632.,  8696.,  9236.,  9264.,  9840.,  9832., 10444., 10400., 11048., 10968., 11652., 11536., 12256., 10224., 10836., 10800., 11448., 11376., 12060., 11952., 12672.,  9187.,  9752.,  9902., 10512., 10617., 11272., 11332., 12032., 12047., 12792., 12762., 13552., 13477., 14312., 14192., 15072.,  7656.,  8124.,  8224.,  8728.,  8792.,  9332.,  9360.,  9936.,  9928., 10540., 10496., 11144., 11064., 11748., 11632., 12352.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16788., 17718., 17112., 18060., 17436., 18402., 17760., 18744., 18084., 19086., 18408., 19428., 18732., 19770., 19056., 20112., 16436., 17382., 16760., 17724., 17084., 18066., 17408., 18408., 17732., 18750., 18056., 19092., 18380., 19434., 18704., 19776., 16340., 17302., 16664., 17644., 16988., 17986., 17312., 18328., 19124., 20134., 19448., 20476., 19772., 20818., 20096., 21160., 20420., 21502., 20744., 21844., 21068., 22186., 21392., 22528., 20820., 21846., 21144., 22188., 21468., 22530., 21792., 22872., 22116., 23214., 22440., 23556., 22764., 23898., 23088., 24240., 23412., 24582., 23736., 24924., 24060., 25266., 24384., 25608., 20820., 22038., 21144., 22380., 21468., 22722., 21792., 23064., 22116., 23406., 22440., 23748., 22764., 24090., 23088., 24432., 21236., 22470., 21560., 22812., 21884., 23154., 22208., 23496., 22532., 23838., 22856., 24180., 23180., 24522., 23504., 24864., 21908., 23158., 22232., 23500., 22556., 23842., 22880., 24184., 18292., 19334., 18616., 19676., 18940., 20018., 19264., 20360., 19588., 20702., 19912., 21044., 20236., 21386., 20560., 21728., 16788., 17718., 17112., 18060., 17436., 18402., 17760., 18744., 18084., 19086., 18408., 19428., 18732., 19770., 19056., 20112., 16436., 17382., 16760., 17724., 17084., 18066., 17408., 18408., 17684., 18678., 18008., 19020., 18332., 19362., 18656., 19704., 18980., 20046., 19304., 20388., 19628., 20730., 19952., 21072., 19124., 20134., 19448., 20476., 19772., 20818., 20096., 21160., 20420., 21502., 20744., 21844., 21068., 22186., 21392., 22528., 20820., 21846., 21144., 22188., 21468., 22530., 21792., 22872.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8876.,  9488., 10100., 10712.,  9400., 10048., 10696., 11344.,  9924., 10608., 11292., 11976., 10448., 11168., 11888., 12608.,  8709.,  9290.,  9871., 10452.,  9394., 10020., 10646., 11272., 10079., 10750., 11421., 12092., 10764., 11480., 12196., 12912., 11449., 12210., 12971., 13732., 12134., 12940., 13746., 14552., 12819., 13670., 14521., 15372., 13504., 14400., 15296., 16192.,  8076.,  8544.,  9012.,  9480.,  8616.,  9120.,  9624., 10128.,  9156.,  9696., 10236., 10776.,  9696., 10272., 10848., 11424., 10236., 10848., 11460., 12072., 10776., 11424., 12072., 12720., 11316., 12000., 12684., 13368., 11856., 12576., 13296., 14016.,  9068.,  9680., 10292., 10904.,  9592., 10240., 10888., 11536., 10116., 10800., 11484., 12168., 10640., 11360., 12080., 12800.,  9741., 10330., 10919., 11508., 10426., 11060., 11694., 12328., 11111., 11790., 12469., 13148., 11796., 12520., 13244., 13968., 12481., 13250., 14019., 14788., 13166., 13980., 14794., 15608., 13851., 14710., 15569., 16428., 14536., 15440., 16344., 17248.,  6604.,  7072.,  7540.,  8008.,  7144.,  7648.,  8152.,  8656.,  7684.,  8224.,  8764.,  9304.,  8224.,  8800.,  9376.,  9952.,  8764.,  9376.,  9988., 10600.,  9304.,  9952., 10600., 11248.,  9844., 10528., 11212., 11896., 10384., 11104., 11824., 12544., 12080., 12896., 13712., 14528., 12768., 13632., 14496., 15360., 13456., 14368., 15280., 16192., 14144., 15104., 16064., 17024., 10340., 11104., 11868., 12632., 11208., 12032., 12856., 13680., 12076., 12960., 13844., 14728., 12944., 13888., 14832., 15776., 13812., 14816., 15820., 16824., 14680., 15744., 16808., 17872., 15548., 16672., 17796., 18920., 16416., 17600., 18784., 19968.,  8816.,  9440., 10064., 10688.,  9504., 10176., 10848., 11520., 10192., 10912., 11632., 12352., 10880., 11648., 12416., 13184., 11568., 12384., 13200., 14016., 12256., 13120., 13984., 14848., 12944., 13856., 14768., 15680., 13632., 14592., 15552., 16512.,  8444.,  9056.,  9668., 10280.,  8984.,  9632., 10280., 10928.,  9524., 10208., 10892., 11576., 10064., 10784., 11504., 12224.,  8553.,  9142.,  9731., 10320.,  9202.,  9836., 10470., 11104.,  9851., 10530., 11209., 11888., 10500., 11224., 11948., 12672., 11149., 11918., 12687., 13456., 11798., 12612., 13426., 14240., 12447., 13306., 14165., 15024., 13096., 14000., 14904., 15808.,  6652.,  7120.,  7588.,  8056.,  7176.,  7680.,  8184.,  8688.,  7700.,  8240.,  8780.,  9320.,  8224.,  8800.,  9376.,  9952.,  8748.,  9360.,  9972., 10584.,  9272.,  9920., 10568., 11216.,  9796., 10480., 11164., 11848., 10320., 11040., 11760., 12480.,  9532., 10144., 10756., 11368., 10072., 10720., 11368., 12016., 10612., 11296., 11980., 12664., 11152., 11872., 12592., 13312.,  8113.,  8678.,  9243.,  9808.,  8762.,  9372.,  9982., 10592.,  9411., 10066., 10721., 11376., 10060., 10760., 11460., 12160., 10709., 11454., 12199., 12944., 11358., 12148., 12938., 13728., 12007., 12842., 13677., 14512., 12656., 13536., 14416., 15296.,  7356.,  7824.,  8292.,  8760.,  7880.,  8384.,  8888.,  9392.,  8404.,  8944.,  9484., 10024.,  8928.,  9504., 10080., 10656.,  9452., 10064., 10676., 11288.,  9976., 10624., 11272., 11920., 10500., 11184., 11868., 12552., 11024., 11744., 12464., 13184.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16198., 16680., 17162., 17644., 16700., 17200., 17700., 18200., 17202., 17720., 18238., 18756., 17704., 18240., 18776., 19312., 18206., 18760., 19314., 19868., 18708., 19280., 19852., 20424., 19210., 19800., 20390., 20980., 19712., 20320., 20928., 21536., 13942., 14440., 14938., 15436., 14444., 14960., 15476., 15992., 14946., 15480., 16014., 16548., 15448., 16000., 16552., 17104., 15950., 16520., 17090., 17660., 16452., 17040., 17628., 18216., 16954., 17560., 18166., 18772., 17456., 18080., 18704., 19328., 12198., 12712., 13226., 13740., 12700., 13232., 13764., 14296., 13202., 13752., 14302., 14852., 13704., 14272., 14840., 15408., 13878., 14440., 15002., 15564., 14380., 14960., 15540., 16120., 14882., 15480., 16078., 16676., 15384., 16000., 16616., 17232., 15886., 16520., 17154., 17788., 16388., 17040., 17692., 18344., 16890., 17560., 18230., 18900., 17392., 18080., 18768., 19456., 16166., 16680., 17194., 17708., 16668., 17200., 17732., 18264., 17170., 17720., 18270., 18820., 17672., 18240., 18808., 19376., 18174., 18760., 19346., 19932., 18676., 19280., 19884., 20488., 19178., 19800., 20422., 21044., 19680., 20320., 20960., 21600., 19798., 20328., 20858., 21388., 20300., 20848., 21396., 21944., 20802., 21368., 21934., 22500., 21304., 21888., 22472., 23056., 12198., 12712., 13226., 13740., 12700., 13232., 13764., 14296., 13202., 13752., 14302., 14852., 13704., 14272., 14840., 15408., 14206., 14792., 15378., 15964., 14708., 15312., 15916., 16520., 15210., 15832., 16454., 17076., 15712., 16352., 16992., 17632., 11734., 12264., 12794., 13324., 12236., 12784., 13332., 13880., 12738., 13304., 13870., 14436., 13240., 13824., 14408., 14992., 13742., 14344., 14946., 15548., 14244., 14864., 15484., 16104., 14746., 15384., 16022., 16660., 15248., 15904., 16560., 17216., 12550., 13096., 13642., 14188., 13052., 13616., 14180., 14744., 13554., 14136., 14718., 15300., 14056., 14656., 15256., 15856., 19798., 20328., 20858., 21388., 20300., 20848., 21396., 21944., 20802., 21368., 21934., 22500., 21304., 21888., 22472., 23056., 21806., 22408., 23010., 23612., 22308., 22928., 23548., 24168., 22810., 23448., 24086., 24724., 23312., 23968., 24624., 25280., 16198., 16680., 17162., 17644., 16700., 17200., 17700., 18200., 17202., 17720., 18238., 18756., 17704., 18240., 18776., 19312., 18206., 18760., 19314., 19868., 18708., 19280., 19852., 20424., 19210., 19800., 20390., 20980., 19712., 20320., 20928., 21536., 13942., 14440., 14938., 15436., 14444., 14960., 15476., 15992., 14946., 15480., 16014., 16548., 15448., 16000., 16552., 17104., 12550., 13096., 13642., 14188., 13052., 13616., 14180., 14744., 13554., 14136., 14718., 15300., 14056., 14656., 15256., 15856., 14558., 15176., 15794., 16412., 15060., 15696., 16332., 16968., 15562., 16216., 16870., 17524., 16064., 16736., 17408., 18080., 13878., 14440., 15002., 15564., 14380., 14960., 15540., 16120., 14882., 15480., 16078., 16676., 15384., 16000., 16616., 17232., 15886., 16520., 17154., 17788., 16388., 17040., 17692., 18344., 16890., 17560., 18230., 18900., 17392., 18080., 18768., 19456., 16166., 16680., 17194., 17708., 16668., 17200., 17732., 18264., 17170., 17720., 18270., 18820., 17672., 18240., 18808., 19376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8036.,  6749.,  9748.,  6322.,  6736.,  8328.,  8844., 10608.,  8232.,  7752.,  8388.,  7432., 10424.,  6888.,  7368.,  4863.,  5196.,  6090.,  4740.,  4470.,  5658.,  5223.,  6960.,  4802.,  5108.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6952., 7030., 7108., 7186., 7264., 7498., 7576., 7654., 7732., 7810., 8044., 8122., 8200., 8278., 8356., 8590., 8668., 8746., 8824., 8902., 9136., 9214., 9292., 9370., 9448.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9976., 10440.,  9199.,  9626., 12356., 12968.,  8345.,  8772.,  8858.,  9312.,  9936., 10512., 10548., 11160., 11760., 12512.,  9324.,  9936.,  8040.,  8592.,  9420.,  9992.,  9200.,  9744., 11888., 12656.,  8112.,  8656.,  8652.,  9232.,  5745.,  6174.,  6096.,  6552.,  6516.,  7060.,  5184.,  5640.,  4425.,  4812.,  5322.,  5748.,  5193.,  5614.,  6564.,  7136.,  4351.,  4772.,  4648.,  5096.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13124., 13904., 13268., 14060., 13412., 14216., 13556., 14372., 13700., 14528., 14132., 14996., 14276., 15152., 14420., 15308., 14564., 15464., 14708., 15620., 15140., 16088., 15284., 16244., 15428., 16400., 15572., 16556., 15716., 16712., 16148., 17180., 16292., 17336., 16436., 17492., 16580., 17648., 16724., 17804., 17156., 18272., 17300., 18428., 17444., 18584., 17588., 18740., 17732., 18896.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9312.,  9776., 10240., 10704.,  8243.,  8670.,  9097.,  9524., 10788., 11400., 12012., 12624.,  6535.,  6962.,  7389.,  7816.,  6958.,  7412.,  7866.,  8320.,  9184.,  9760., 10336., 10912.,  9796., 10408., 11020., 11632., 10224., 10976., 11728., 12480.,  7348.,  7960.,  8572.,  9184.,  6312.,  6864.,  7416.,  7968.,  9244.,  9816., 10388., 10960.,  9280.,  9824., 10368., 10912., 11232., 12000., 12768., 13536.,  7104.,  7648.,  8192.,  8736.,  7572.,  8152.,  8732.,  9312.,  6549.,  6978.,  7407.,  7836.,  6936.,  7392.,  7848.,  8304.,  7112.,  7656.,  8200.,  8744.,  5112.,  5568.,  6024.,  6480.,  4399.,  4786.,  5173.,  5560.,  6762.,  7188.,  7614.,  8040.,  6221.,  6642.,  7063.,  7484.,  7564.,  8136.,  8708.,  9280.,  4537.,  4958.,  5379.,  5800.,  4816.,  5264.,  5712.,  6160.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19708., 20360., 21012., 21664., 19984., 20648., 21312., 21976., 15012., 15560., 16108., 16656., 15288., 15848., 16408., 16968., 15564., 16136., 16708., 17280., 16392., 17000., 17608., 18216., 16668., 17288., 17908., 18528., 16944., 17576., 18208., 18840., 17220., 17864., 18508., 19152., 17496., 18152., 18808., 19464., 13588., 14152., 14716., 15280., 13864., 14440., 15016., 15592.,  9916., 10376., 10836., 11296., 10192., 10664., 11136., 11608., 10468., 10952., 11436., 11920., 11296., 11816., 12336., 12856., 11572., 12104., 12636., 13168., 11848., 12392., 12936., 13480., 12124., 12680., 13236., 13792., 12400., 12968., 13536., 14104., 13228., 13832., 14436., 15040., 13504., 14120., 14736., 15352., 13780., 14408., 15036., 15664., 14056., 14696., 15336., 15976., 14332., 14984., 15636., 16288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7887.,  8328.,  6177.,  6618.,  9582., 10152.,  5766.,  6180.,  6594.,  7008.,  8268.,  8784.,  9300.,  9816., 10440., 11104.,  8688.,  9168.,  7728.,  8208.,  8868.,  9384.,  7692.,  8208., 11288., 11952.,  7152.,  7632.,  8112.,  8592.,  5169.,  5502.,  5835.,  6168.,  6378.,  6804.,  5334.,  5640.,  4794.,  5100.,  6119.,  6452.,  5409.,  5742.,  7638.,  8064.,  5010.,  5316.,  5622.,  5928.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13826., 13904., 13982., 14060., 14138., 14216., 14294., 14372., 14450., 14528., 14918., 14996., 15074., 15152., 15230., 15308., 15386., 15464., 15542., 15620., 16010., 16088., 16166., 16244., 16322., 16400., 16478., 16556., 16634., 16712., 17102., 17180., 17258., 17336., 17414., 17492., 17570., 17648., 17726., 17804., 18194., 18272., 18350., 18428., 18506., 18584., 18662., 18740., 18818., 18896.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9465.,  9918., 10032., 10512.,  8583.,  8994.,  9150.,  9588., 12024., 12636., 12744., 13392.,  7761.,  8172.,  8274.,  8712.,  8787.,  9252.,  9300.,  9792., 10236., 10776., 10848., 11424., 11460., 12072., 12072., 12720., 11488., 12176., 12256., 12992., 10236., 10848., 10776., 11424.,  7668.,  8160.,  8208.,  8736.,  9108.,  9672.,  9720., 10320.,  9084.,  9624.,  9696., 10272., 12064., 12848., 12832., 13664.,  8004.,  8544.,  8544.,  9120.,  9084.,  9696.,  9624., 10272.,  6147.,  6594.,  6498.,  6972.,  6849.,  7350.,  7200.,  7728.,  6456.,  6996.,  6888.,  7464.,  5847.,  6348.,  6144.,  6672.,  4329.,  4692.,  4626.,  5016.,  5077.,  5486.,  5428.,  5864.,  5139.,  5538.,  5490.,  5916.,  6648.,  7212.,  7080.,  7680.,  4341.,  4740.,  4638.,  5064.,  4935.,  5388.,  5232.,  5712.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20216., 21508., 20360., 21664., 20504., 21820., 20648., 21976., 15416., 16500., 15560., 16656., 15704., 16812., 15848., 16968., 15992., 17124., 16136., 17280., 16856., 18060., 17000., 18216., 17144., 18372., 17288., 18528., 17432., 18684., 17576., 18840., 17720., 18996., 17864., 19152., 18008., 19308., 18152., 19464., 14008., 15124., 14152., 15280., 14296., 15436., 14440., 15592., 10232., 11140., 10376., 11296., 10520., 11452., 10664., 11608., 10808., 11764., 10952., 11920., 11672., 12700., 11816., 12856., 11960., 13012., 12104., 13168., 12248., 13324., 12392., 13480., 12536., 13636., 12680., 13792., 12824., 13948., 12968., 14104., 13688., 14884., 13832., 15040., 13976., 15196., 14120., 15352., 14264., 15508., 14408., 15664., 14552., 15820., 14696., 15976., 14840., 16132., 14984., 16288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8941.,  9394.,  9847., 10300.,  9472.,  9952., 10432., 10912.,  8115.,  8526.,  8937.,  9348.,  8646.,  9084.,  9522.,  9960., 10892., 11504., 12116., 12728., 11528., 12176., 12824., 13472.,  6471.,  6882.,  7293.,  7704.,  6894.,  7332.,  7770.,  8208.,  7317.,  7782.,  8247.,  8712.,  7740.,  8232.,  8724.,  9216.,  9500., 10040., 10580., 11120., 10112., 10688., 11264., 11840., 10724., 11336., 11948., 12560., 11336., 11984., 12632., 13280., 10256., 10944., 11632., 12320., 10976., 11712., 12448., 13184.,  8276.,  8888.,  9500., 10112.,  8744.,  9392., 10040., 10688.,  6204.,  6696.,  7188.,  7680.,  6672.,  7200.,  7728.,  8256.,  9396.,  9960., 10524., 11088., 10008., 10608., 11208., 11808.,  9244.,  9784., 10324., 10864.,  9856., 10432., 11008., 11584., 11824., 12608., 13392., 14176., 12544., 13376., 14208., 15040.,  7084.,  7624.,  8164.,  8704.,  7552.,  8128.,  8704.,  9280.,  8020.,  8632.,  9244.,  9856.,  8488.,  9136.,  9784., 10432.,  6183.,  6630.,  7077.,  7524.,  6570.,  7044.,  7518.,  7992.,  6957.,  7458.,  7959.,  8460.,  7344.,  7872.,  8400.,  8928.,  6100.,  6640.,  7180.,  7720.,  6544.,  7120.,  7696.,  8272.,  4953.,  5454.,  5955.,  6456.,  5232.,  5760.,  6288.,  6816.,  3527.,  3890.,  4253.,  4616.,  3806.,  4196.,  4586.,  4976.,  6193.,  6602.,  7011.,  7420.,  6580.,  7016.,  7452.,  7888.,  5751.,  6150.,  6549.,  6948.,  6138.,  6564.,  6990.,  7416.,  7228.,  7792.,  8356.,  8920.,  7672.,  8272.,  8872.,  9472.,  4155.,  4554.,  4953.,  5352.,  4434.,  4860.,  5286.,  5712.,  4713.,  5166.,  5619.,  6072.,  4992.,  5472.,  5952.,  6432.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18020., 18672., 19324., 19976., 18296., 18960., 19624., 20288., 18572., 19248., 19924., 20600., 18848., 19536., 20224., 20912., 13876., 14448., 15020., 15592., 14152., 14736., 15320., 15904., 14428., 15024., 15620., 16216., 14704., 15312., 15920., 16528., 14980., 15600., 16220., 16840., 15256., 15888., 16520., 17152., 13948., 14512., 15076., 15640., 14224., 14800., 15376., 15952., 12324., 12784., 13244., 13704., 12600., 13072., 13544., 14016., 12876., 13360., 13844., 14328., 13152., 13648., 14144., 14640., 13428., 13936., 14444., 14952., 13704., 14224., 14744., 15264., 13980., 14512., 15044., 15576., 14256., 14800., 15344., 15888., 10900., 11376., 11852., 12328., 11176., 11664., 12152., 12640., 11452., 11952., 12452., 12952., 11728., 12240., 12752., 13264.,  7780.,  8176.,  8572.,  8968.,  8056.,  8464.,  8872.,  9280.,  8332.,  8752.,  9172.,  9592.,  8608.,  9040.,  9472.,  9904.,  8884.,  9328.,  9772., 10216.,  9160.,  9616., 10072., 10528., 10540., 11056., 11572., 12088., 10816., 11344., 11872., 12400., 11092., 11632., 12172., 12712., 11368., 11920., 12472., 13024., 11644., 12208., 12772., 13336., 11920., 12496., 13072., 13648., 12196., 12784., 13372., 13960., 12472., 13072., 13672., 14272., 12748., 13360., 13972., 14584., 13024., 13648., 14272., 14896., 14404., 15088., 15772., 16456., 14680., 15376., 16072., 16768., 14956., 15664., 16372., 17080., 15232., 15952., 16672., 17392., 15508., 16240., 16972., 17704., 15784., 16528., 17272., 18016., 16060., 16816., 17572., 18328., 16336., 17104., 17872., 18640., 16612., 17392., 18172., 18952., 16888., 17680., 18472., 19264.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8229.,  8670.,  9111.,  9552.,  5289.,  5730.,  6171.,  6612.,  9570., 10140., 10710., 11280.,  4974.,  5388.,  5802.,  6216.,  6630.,  7044.,  7458.,  7872.,  7188.,  7704.,  8220.,  8736.,  9252.,  9768., 10284., 10800.,  8632.,  9296.,  9960., 10624.,  8640.,  9120.,  9600., 10080.,  6144.,  6624.,  7104.,  7584.,  8676.,  9192.,  9708., 10224.,  7188.,  7704.,  8220.,  8736., 11288., 11952., 12616., 13280.,  6720.,  7200.,  7680.,  8160.,  8640.,  9120.,  9600., 10080.,  4917.,  5250.,  5583.,  5916.,  6249.,  6582.,  6915.,  7248.,  5418.,  5844.,  6270.,  6696.,  5754.,  6060.,  6366.,  6672.,  3714.,  4020.,  4326.,  4632.,  5665.,  5998.,  6331.,  6664.,  4917.,  5250.,  5583.,  5916.,  7266.,  7692.,  8118.,  8544.,  4530.,  4836.,  5142.,  5448.,  5754.,  6060.,  6366.,  6672.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21430., 21508., 21586., 21664., 21742., 21820., 21898., 21976., 16422., 16500., 16578., 16656., 16734., 16812., 16890., 16968., 17046., 17124., 17202., 17280., 17982., 18060., 18138., 18216., 18294., 18372., 18450., 18528., 18606., 18684., 18762., 18840., 18918., 18996., 19074., 19152., 19230., 19308., 19386., 19464., 15046., 15124., 15202., 15280., 15358., 15436., 15514., 15592., 11062., 11140., 11218., 11296., 11374., 11452., 11530., 11608., 11686., 11764., 11842., 11920., 12622., 12700., 12778., 12856., 12934., 13012., 13090., 13168., 13246., 13324., 13402., 13480., 13558., 13636., 13714., 13792., 13870., 13948., 14026., 14104., 14806., 14884., 14962., 15040., 15118., 15196., 15274., 15352., 15430., 15508., 15586., 15664., 15742., 15820., 15898., 15976., 16054., 16132., 16210., 16288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10683., 11178., 11250., 11772., 11817., 12366., 12384., 12960.,  6903.,  7218.,  7470.,  7812.,  8037.,  8406.,  8604.,  9000., 12000., 12612., 12720., 13368., 13440., 14124., 14160., 14880.,  6273.,  6588.,  6786.,  7128.,  7299.,  7668.,  7812.,  8208.,  8325.,  8748.,  8838.,  9288.,  9351.,  9828.,  9864., 10368.,  8916.,  9384.,  9528., 10032., 10140., 10680., 10752., 11328., 11364., 11976., 11976., 12624., 12588., 13272., 13200., 13920.,  9984., 10608., 10752., 11424., 11520., 12240., 12288., 13056., 10140., 10752., 10680., 11328., 11220., 11904., 11760., 12480.,  6828.,  7296.,  7368.,  7872.,  7908.,  8448.,  8448.,  9024., 10212., 10824., 10824., 11472., 11436., 12120., 12048., 12768.,  8916.,  9384.,  9528., 10032., 10140., 10680., 10752., 11328., 13056., 13872., 13824., 14688., 14592., 15504., 15360., 16320.,  7980.,  8448.,  8520.,  9024.,  9060.,  9600.,  9600., 10176., 10140., 10752., 10680., 11328., 11220., 11904., 11760., 12480.,  5319.,  5706.,  5670.,  6084.,  6021.,  6462.,  6372.,  6840.,  6723.,  7218.,  7074.,  7596.,  7425.,  7974.,  7776.,  8352.,  5376.,  5844.,  5808.,  6312.,  6240.,  6780.,  6672.,  7248.,  5733.,  6228.,  6030.,  6552.,  6327.,  6876.,  6624.,  7200.,  3753.,  4068.,  4050.,  4392.,  4347.,  4716.,  4644.,  5040.,  5835.,  6306.,  6186.,  6684.,  6537.,  7062.,  6888.,  7440.,  5319.,  5706.,  5670.,  6084.,  6021.,  6462.,  6372.,  6840.,  7392.,  8004.,  7824.,  8472.,  8256.,  8940.,  8688.,  9408.,  4545.,  4932.,  4842.,  5256.,  5139.,  5580.,  5436.,  5904.,  5733.,  6228.,  6030.,  6552.,  6327.,  6876.,  6624.,  7200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18528., 19820., 18672., 19976., 18816., 20132., 18960., 20288., 19104., 20444., 19248., 20600., 19392., 20756., 19536., 20912., 14304., 15436., 14448., 15592., 14592., 15748., 14736., 15904., 14880., 16060., 15024., 16216., 15168., 16372., 15312., 16528., 15456., 16684., 15600., 16840., 15744., 16996., 15888., 17152., 14368., 15484., 14512., 15640., 14656., 15796., 14800., 15952., 12640., 13548., 12784., 13704., 12928., 13860., 13072., 14016., 13216., 14172., 13360., 14328., 13504., 14484., 13648., 14640., 13792., 14796., 13936., 14952., 14080., 15108., 14224., 15264., 14368., 15420., 14512., 15576., 14656., 15732., 14800., 15888., 11232., 12172., 11376., 12328., 11520., 12484., 11664., 12640., 11808., 12796., 11952., 12952., 12096., 13108., 12240., 13264.,  8032.,  8812.,  8176.,  8968.,  8320.,  9124.,  8464.,  9280.,  8608.,  9436.,  8752.,  9592.,  8896.,  9748.,  9040.,  9904.,  9184., 10060.,  9328., 10216.,  9472., 10372.,  9616., 10528., 10912., 11932., 11056., 12088., 11200., 12244., 11344., 12400., 11488., 12556., 11632., 12712., 11776., 12868., 11920., 13024., 12064., 13180., 12208., 13336., 12352., 13492., 12496., 13648., 12640., 13804., 12784., 13960., 12928., 14116., 13072., 14272., 13216., 14428., 13360., 14584., 13504., 14740., 13648., 14896., 14944., 16300., 15088., 16456., 15232., 16612., 15376., 16768., 15520., 16924., 15664., 17080., 15808., 17236., 15952., 17392., 16096., 17548., 16240., 17704., 16384., 17860., 16528., 18016., 16672., 18172., 16816., 18328., 16960., 18484., 17104., 18640., 17248., 18796., 17392., 18952., 17536., 19108., 17680., 19264.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9543., 10038., 10533., 11028., 10074., 10596., 11118., 11640., 10605., 11154., 11703., 12252., 11136., 11712., 12288., 12864.,  6003.,  6318.,  6633.,  6948.,  6534.,  6876.,  7218.,  7560.,  7065.,  7434.,  7803.,  8172.,  7596.,  7992.,  8388.,  8784., 10332., 10944., 11556., 12168., 10968., 11616., 12264., 12912., 11604., 12288., 12972., 13656., 12240., 12960., 13680., 14400.,  4743.,  5058.,  5373.,  5688.,  5166.,  5508.,  5850.,  6192.,  5589.,  5958.,  6327.,  6696.,  6012.,  6408.,  6804.,  7200.,  6435.,  6858.,  7281.,  7704.,  6858.,  7308.,  7758.,  8208.,  7281.,  7758.,  8235.,  8712.,  7704.,  8208.,  8712.,  9216.,  8340.,  8808.,  9276.,  9744.,  8952.,  9456.,  9960., 10464.,  9564., 10104., 10644., 11184., 10176., 10752., 11328., 11904., 10788., 11400., 12012., 12624., 11400., 12048., 12696., 13344., 12012., 12696., 13380., 14064., 12624., 13344., 14064., 14784.,  9360.,  9984., 10608., 11232., 10080., 10752., 11424., 12096., 10800., 11520., 12240., 12960., 11520., 12288., 13056., 13824.,  8340.,  8952.,  9564., 10176.,  8808.,  9456., 10104., 10752.,  9276.,  9960., 10644., 11328.,  9744., 10464., 11184., 11904.,  5700.,  6168.,  6636.,  7104.,  6168.,  6672.,  7176.,  7680.,  6636.,  7176.,  7716.,  8256.,  7104.,  7680.,  8256.,  8832., 10020., 10632., 11244., 11856., 10632., 11280., 11928., 12576., 11244., 11928., 12612., 13296., 11856., 12576., 13296., 14016.,  8340.,  8808.,  9276.,  9744.,  8952.,  9456.,  9960., 10464.,  9564., 10104., 10644., 11184., 10176., 10752., 11328., 11904., 12240., 13056., 13872., 14688., 12960., 13824., 14688., 15552., 13680., 14592., 15504., 16416., 14400., 15360., 16320., 17280.,  6468.,  6936.,  7404.,  7872.,  6936.,  7440.,  7944.,  8448.,  7404.,  7944.,  8484.,  9024.,  7872.,  8448.,  9024.,  9600.,  8340.,  8952.,  9564., 10176.,  8808.,  9456., 10104., 10752.,  9276.,  9960., 10644., 11328.,  9744., 10464., 11184., 11904.,  5355.,  5742.,  6129.,  6516.,  5742.,  6156.,  6570.,  6984.,  6129.,  6570.,  7011.,  7452.,  6516.,  6984.,  7452.,  7920.,  6903.,  7398.,  7893.,  8388.,  7290.,  7812.,  8334.,  8856.,  7677.,  8226.,  8775.,  9324.,  8064.,  8640.,  9216.,  9792.,  5292.,  5760.,  6228.,  6696.,  5736.,  6240.,  6744.,  7248.,  6180.,  6720.,  7260.,  7800.,  6624.,  7200.,  7776.,  8352.,  4923.,  5418.,  5913.,  6408.,  5202.,  5724.,  6246.,  6768.,  5481.,  6030.,  6579.,  7128.,  5760.,  6336.,  6912.,  7488.,  3063.,  3378.,  3693.,  4008.,  3342.,  3684.,  4026.,  4368.,  3621.,  3990.,  4359.,  4728.,  3900.,  4296.,  4692.,  5088.,  7455.,  7926.,  8397.,  8868.,  7842.,  8340.,  8838.,  9336.,  8229.,  8754.,  9279.,  9804.,  8616.,  9168.,  9720., 10272.,  5355.,  5742.,  6129.,  6516.,  5742.,  6156.,  6570.,  6984.,  6129.,  6570.,  7011.,  7452.,  6516.,  6984.,  7452.,  7920.,  7644.,  8256.,  8868.,  9480.,  8088.,  8736.,  9384., 10032.,  8532.,  9216.,  9900., 10584.,  8976.,  9696., 10416., 11136.,  3807.,  4194.,  4581.,  4968.,  4086.,  4500.,  4914.,  5328.,  4365.,  4806.,  5247.,  5688.,  4644.,  5112.,  5580.,  6048.,  4923.,  5418.,  5913.,  6408.,  5202.,  5724.,  6246.,  6768.,  5481.,  6030.,  6579.,  7128.,  5760.,  6336.,  6912.,  7488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16692., 17344., 17996., 18648., 16968., 17632., 18296., 18960., 17244., 17920., 18596., 19272., 17520., 18208., 18896., 19584., 17796., 18496., 19196., 19896., 18072., 18784., 19496., 20208., 18348., 19072., 19796., 20520., 18624., 19360., 20096., 20832., 13652., 14272., 14892., 15512., 13928., 14560., 15192., 15824., 14204., 14848., 15492., 16136., 14480., 15136., 15792., 16448., 14756., 15424., 16092., 16760., 15032., 15712., 16392., 17072., 15308., 16000., 16692., 17384., 15584., 16288., 16992., 17696., 15860., 16576., 17292., 18008., 16136., 16864., 17592., 18320., 16412., 17152., 17892., 18632., 16688., 17440., 18192., 18944., 16484., 17216., 17948., 18680., 16760., 17504., 18248., 18992., 17036., 17792., 18548., 19304., 17312., 18080., 18848., 19616., 15412., 16064., 16716., 17368., 15688., 16352., 17016., 17680., 15964., 16640., 17316., 17992., 16240., 16928., 17616., 18304., 16516., 17216., 17916., 18616., 16792., 17504., 18216., 18928., 17068., 17792., 18516., 19240., 17344., 18080., 18816., 19552., 17620., 18368., 19116., 19864., 17896., 18656., 19416., 20176., 18172., 18944., 19716., 20488., 18448., 19232., 20016., 20800., 18724., 19520., 20316., 21112., 19000., 19808., 20616., 21424., 19276., 20096., 20916., 21736., 19552., 20384., 21216., 22048., 17300., 18112., 18924., 19736., 17576., 18400., 19224., 20048., 17852., 18688., 19524., 20360., 18128., 18976., 19824., 20672., 18404., 19264., 20124., 20984., 18680., 19552., 20424., 21296., 18956., 19840., 20724., 21608., 19232., 20128., 21024., 21920., 13620., 14272., 14924., 15576., 13896., 14560., 15224., 15888., 14172., 14848., 15524., 16200., 14448., 15136., 15824., 16512., 14724., 15424., 16124., 16824., 15000., 15712., 16424., 17136., 15276., 16000., 16724., 17448., 15552., 16288., 17024., 17760., 14676., 15296., 15916., 16536., 14952., 15584., 16216., 16848., 15228., 15872., 16516., 17160., 15504., 16160., 16816., 17472., 17988., 18752., 19516., 20280., 18264., 19040., 19816., 20592., 18540., 19328., 20116., 20904., 18816., 19616., 20416., 21216., 19092., 19904., 20716., 21528., 19368., 20192., 21016., 21840., 19644., 20480., 21316., 22152., 19920., 20768., 21616., 22464., 20196., 21056., 21916., 22776., 20472., 21344., 22216., 23088., 20748., 21632., 22516., 23400., 21024., 21920., 22816., 23712., 17588., 18368., 19148., 19928., 17864., 18656., 19448., 20240., 18140., 18944., 19748., 20552., 18416., 19232., 20048., 20864., 18692., 19520., 20348., 21176., 18968., 19808., 20648., 21488., 19244., 20096., 20948., 21800., 19520., 20384., 21248., 22112., 18804., 19648., 20492., 21336., 19080., 19936., 20792., 21648., 19356., 20224., 21092., 21960., 19632., 20512., 21392., 22272., 19908., 20800., 21692., 22584., 20184., 21088., 21992., 22896., 20460., 21376., 22292., 23208., 20736., 21664., 22592., 23520., 20372., 21184., 21996., 22808., 20648., 21472., 22296., 23120., 20924., 21760., 22596., 23432., 21200., 22048., 22896., 23744., 21476., 22336., 23196., 24056., 21752., 22624., 23496., 24368., 22028., 22912., 23796., 24680., 22304., 23200., 24096., 24992., 16692., 17344., 17996., 18648., 16968., 17632., 18296., 18960., 17244., 17920., 18596., 19272., 17520., 18208., 18896., 19584.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7680.,  9970., 10540.,  7626.,  8040.,  6816.,  8856.,  9520.,  6864.,  7344., 10944., 14168., 14832., 10704., 11184.,  4920.,  6338.,  6764.,  4830.,  5136.,  7584.,  9746., 10172.,  7278.,  7584.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7922.,  8000.,  8078.,  8156.,  8234.,  8546.,  8624.,  8702.,  8780.,  8858.,  9170.,  9248.,  9326.,  9404.,  9482.,  9794.,  9872.,  9950., 10028., 10106., 10418., 10496., 10574., 10652., 10730.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9900., 10368., 12660., 13284., 13380., 14040.,  9477.,  9972.,  9990., 10512.,  8592.,  9024., 10992., 11568., 11760., 12384.,  8268.,  8736.,  8808.,  9312., 13488., 14208., 17136., 18096., 17904., 18912., 12588., 13344., 13128., 13920.,  5220.,  5616.,  6516.,  7044.,  6948.,  7512.,  4725.,  5148.,  5022.,  5472.,  8028.,  8640.,  9972., 10788., 10404., 11256.,  7101.,  7740.,  7398.,  8064.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14956., 15844., 15100., 16000., 15244., 16156., 15388., 16312., 15532., 16468., 16108., 17092., 16252., 17248., 16396., 17404., 16540., 17560., 16684., 17716., 17260., 18340., 17404., 18496., 17548., 18652., 17692., 18808., 17836., 18964., 18412., 19588., 18556., 19744., 18700., 19900., 18844., 20056., 18988., 20212., 19564., 20836., 19708., 20992., 19852., 21148., 19996., 21304., 20140., 21460.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7812.,  8280.,  8748.,  9216.,  9336.,  9960., 10584., 11208.,  9972., 10632., 11292., 11952.,  6363.,  6858.,  7353.,  7848.,  6786.,  7308.,  7830.,  8352.,  9840., 10272., 10704., 11136., 12192., 12768., 13344., 13920., 12912., 13536., 14160., 14784.,  8580.,  9048.,  9516.,  9984.,  9048.,  9552., 10056., 10560., 14736., 15456., 16176., 16896., 17952., 18912., 19872., 20832., 18672., 19680., 20688., 21696., 12324., 13080., 13836., 14592., 12792., 13584., 14376., 15168.,  4284.,  4680.,  5076.,  5472.,  4824.,  5352.,  5880.,  6408.,  5268.,  5832.,  6396.,  6960.,  2979.,  3402.,  3825.,  4248.,  3258.,  3708.,  4158.,  4608.,  7380.,  7992.,  8604.,  9216.,  8376.,  9192., 10008., 10824.,  8820.,  9672., 10524., 11376.,  5211.,  5850.,  6489.,  7128.,  5490.,  6156.,  6822.,  7488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9056.,  9432.,  9808., 10184.,  9332.,  9720., 10108., 10496.,  9608., 10008., 10408., 10808.,  9884., 10296., 10708., 11120., 10160., 10584., 11008., 11432., 11264., 11736., 12208., 12680., 11540., 12024., 12508., 12992., 11816., 12312., 12808., 13304., 12092., 12600., 13108., 13616., 12368., 12888., 13408., 13928., 13472., 14040., 14608., 15176., 13748., 14328., 14908., 15488., 14024., 14616., 15208., 15800., 14300., 14904., 15508., 16112., 14576., 15192., 15808., 16424., 15680., 16344., 17008., 17672., 15956., 16632., 17308., 17984., 16232., 16920., 17608., 18296., 16508., 17208., 17908., 18608., 16784., 17496., 18208., 18920., 17888., 18648., 19408., 20168., 18164., 18936., 19708., 20480., 18440., 19224., 20008., 20792., 18716., 19512., 20308., 21104., 18992., 19800., 20608., 21416.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10215., 10656., 13290., 13860., 14430., 15000., 10422., 10836., 11250., 11664.,  3708.,  4224.,  4888.,  5552.,  6216.,  6880.,  4416.,  4896.,  5376.,  5856., 11964., 12480., 15512., 16176., 16840., 17504., 12096., 12576., 13056., 13536.,  2403.,  2736.,  3162.,  3588.,  4014.,  4440.,  2826.,  3132.,  3438.,  3744.,  7731.,  8064.,  9978., 10404., 10830., 11256.,  7722.,  8028.,  8334.,  8640.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15766., 15844., 15922., 16000., 16078., 16156., 16234., 16312., 16390., 16468., 17014., 17092., 17170., 17248., 17326., 17404., 17482., 17560., 17638., 17716., 18262., 18340., 18418., 18496., 18574., 18652., 18730., 18808., 18886., 18964., 19510., 19588., 19666., 19744., 19822., 19900., 19978., 20056., 20134., 20212., 20758., 20836., 20914., 20992., 21070., 21148., 21226., 21304., 21382., 21460.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13185., 13806., 13752., 14400., 16920., 17748., 17640., 18504., 18360., 19260., 19080., 20016., 12969., 13644., 13482., 14184., 13995., 14724., 14508., 15264.,  4476.,  4728.,  5088.,  5376.,  5856.,  6192.,  6624.,  7008.,  7392.,  7824.,  8160.,  8640.,  5052.,  5376.,  5592.,  5952.,  6132.,  6528.,  6672.,  7104., 14268., 15096., 14880., 15744., 18144., 19248., 18912., 20064., 19680., 20880., 20448., 21696., 13692., 14592., 14232., 15168., 14772., 15744., 15312., 16320.,  2601.,  2790.,  2952.,  3168.,  3384.,  3636.,  3816.,  4104.,  4248.,  4572.,  4680.,  5040.,  2817.,  3060.,  3114.,  3384.,  3411.,  3708.,  3708.,  4032.,  8217.,  8838.,  8568.,  9216., 10296., 11124., 10728., 11592., 11160., 12060., 11592., 12528.,  7569.,  8244.,  7866.,  8568.,  8163.,  8892.,  8460.,  9216.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9288., 10028.,  9432., 10184.,  9576., 10340.,  9720., 10496.,  9864., 10652., 10008., 10808., 10152., 10964., 10296., 11120., 10440., 11276., 10584., 11432., 11592., 12524., 11736., 12680., 11880., 12836., 12024., 12992., 12168., 13148., 12312., 13304., 12456., 13460., 12600., 13616., 12744., 13772., 12888., 13928., 13896., 15020., 14040., 15176., 14184., 15332., 14328., 15488., 14472., 15644., 14616., 15800., 14760., 15956., 14904., 16112., 15048., 16268., 15192., 16424., 16200., 17516., 16344., 17672., 16488., 17828., 16632., 17984., 16776., 18140., 16920., 18296., 17064., 18452., 17208., 18608., 17352., 18764., 17496., 18920., 18504., 20012., 18648., 20168., 18792., 20324., 18936., 20480., 19080., 20636., 19224., 20792., 19368., 20948., 19512., 21104., 19656., 21260., 19800., 21416.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12501., 13122., 13743., 14364., 13032., 13680., 14328., 14976., 15348., 16176., 17004., 17832., 15984., 16848., 17712., 18576., 16620., 17520., 18420., 19320., 17256., 18192., 19128., 20064., 10863., 11538., 12213., 12888., 11286., 11988., 12690., 13392., 11709., 12438., 13167., 13896., 12132., 12888., 13644., 14400.,  4668.,  4920.,  5172.,  5424.,  5280.,  5568.,  5856.,  6144.,  6000.,  6336.,  6672.,  7008.,  6720.,  7104.,  7488.,  7872.,  7440.,  7872.,  8304.,  8736.,  8160.,  8640.,  9120.,  9600.,  4596.,  4920.,  5244.,  5568.,  5064.,  5424.,  5784.,  6144.,  5532.,  5928.,  6324.,  6720.,  6000.,  6432.,  6864.,  7296., 14460., 15288., 16116., 16944., 15072., 15936., 16800., 17664., 17520., 18624., 19728., 20832., 18240., 19392., 20544., 21696., 18960., 20160., 21360., 22560., 19680., 20928., 22176., 23424., 12084., 12984., 13884., 14784., 12552., 13488., 14424., 15360., 13020., 13992., 14964., 15936., 13488., 14496., 15504., 16512.,  2997.,  3186.,  3375.,  3564.,  3384.,  3600.,  3816.,  4032.,  3828.,  4080.,  4332.,  4584.,  4272.,  4560.,  4848.,  5136.,  4716.,  5040.,  5364.,  5688.,  5160.,  5520.,  5880.,  6240.,  2799.,  3042.,  3285.,  3528.,  3078.,  3348.,  3618.,  3888.,  3357.,  3654.,  3951.,  4248.,  3636.,  3960.,  4284.,  4608.,  9189.,  9810., 10431., 11052.,  9576., 10224., 10872., 11520., 10932., 11760., 12588., 13416., 11376., 12240., 13104., 13968., 11820., 12720., 13620., 14520., 12264., 13200., 14136., 15072.,  7263.,  7938.,  8613.,  9288.,  7542.,  8244.,  8946.,  9648.,  7821.,  8550.,  9279., 10008.,  8100.,  8856.,  9612., 10368.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6060.,  6288.,  6516.,  6744.,  6336.,  6576.,  6816.,  7056.,  6612.,  6864.,  7116.,  7368.,  6888.,  7152.,  7416.,  7680.,  7164.,  7440.,  7716.,  7992.,  7440.,  7728.,  8016.,  8304.,  7716.,  8016.,  8316.,  8616.,  7992.,  8304.,  8616.,  8928.,  8268.,  8592.,  8916.,  9240.,  8544.,  8880.,  9216.,  9552., 10476., 10896., 11316., 11736., 10752., 11184., 11616., 12048., 11028., 11472., 11916., 12360., 11304., 11760., 12216., 12672., 11580., 12048., 12516., 12984., 11856., 12336., 12816., 13296., 12132., 12624., 13116., 13608., 12408., 12912., 13416., 13920., 12684., 13200., 13716., 14232., 12960., 13488., 14016., 14544., 14892., 15504., 16116., 16728., 15168., 15792., 16416., 17040., 15444., 16080., 16716., 17352., 15720., 16368., 17016., 17664., 15996., 16656., 17316., 17976., 16272., 16944., 17616., 18288., 16548., 17232., 17916., 18600., 16824., 17520., 18216., 18912., 17100., 17808., 18516., 19224., 17376., 18096., 18816., 19536., 19308., 20112., 20916., 21720., 19584., 20400., 21216., 22032., 19860., 20688., 21516., 22344., 20136., 20976., 21816., 22656., 20412., 21264., 22116., 22968., 20688., 21552., 22416., 23280., 20964., 21840., 22716., 23592., 21240., 22128., 23016., 23904., 21516., 22416., 23316., 24216., 21792., 22704., 23616., 24528., 23724., 24720., 25716., 26712., 24000., 25008., 26016., 27024., 24276., 25296., 26316., 27336., 24552., 25584., 26616., 27648., 24828., 25872., 26916., 27960., 25104., 26160., 27216., 28272., 25380., 26448., 27516., 28584., 25656., 26736., 27816., 28896., 25932., 27024., 28116., 29208., 26208., 27312., 28416., 29520.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5877.,  6318.,  6759.,  7200.,  7770.,  8340.,  8910.,  9480., 10050., 10620., 11190., 11760.,  7182.,  7596.,  8010.,  8424.,  8838.,  9252.,  9666., 10080.,  6900.,  7416.,  7932.,  8448.,  9112.,  9776., 10440., 11104., 11768., 12432., 13096., 13760.,  8352.,  8832.,  9312.,  9792., 10272., 10752., 11232., 11712.,  6900.,  7416.,  7932.,  8448.,  9112.,  9776., 10440., 11104., 11768., 12432., 13096., 13760.,  8352.,  8832.,  9312.,  9792., 10272., 10752., 11232., 11712.,  4473.,  4806.,  5139.,  5472.,  5898.,  6324.,  6750.,  7176.,  7602.,  8028.,  8454.,  8880.,  5346.,  5652.,  5958.,  6264.,  6570.,  6876.,  7182.,  7488.,  4473.,  4806.,  5139.,  5472.,  5898.,  6324.,  6750.,  7176.,  7602.,  8028.,  8454.,  8880.,  5346.,  5652.,  5958.,  6264.,  6570.,  6876.,  7182.,  7488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9950., 10028., 10106., 10184., 10262., 10340., 10418., 10496., 10574., 10652., 10730., 10808., 10886., 10964., 11042., 11120., 11198., 11276., 11354., 11432., 12446., 12524., 12602., 12680., 12758., 12836., 12914., 12992., 13070., 13148., 13226., 13304., 13382., 13460., 13538., 13616., 13694., 13772., 13850., 13928., 14942., 15020., 15098., 15176., 15254., 15332., 15410., 15488., 15566., 15644., 15722., 15800., 15878., 15956., 16034., 16112., 16190., 16268., 16346., 16424., 17438., 17516., 17594., 17672., 17750., 17828., 17906., 17984., 18062., 18140., 18218., 18296., 18374., 18452., 18530., 18608., 18686., 18764., 18842., 18920., 19934., 20012., 20090., 20168., 20246., 20324., 20402., 20480., 20558., 20636., 20714., 20792., 20870., 20948., 21026., 21104., 21182., 21260., 21338., 21416.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7659.,  8010.,  8226.,  8604.,  8793.,  9198.,  9360.,  9792., 10080., 10548., 10800., 11304., 11520., 12060., 12240., 12816., 12960., 13572., 13680., 14328., 14400., 15084., 15120., 15840.,  9009.,  9468.,  9522., 10008., 10035., 10548., 10548., 11088., 11061., 11628., 11574., 12168., 12087., 12708., 12600., 13248.,  8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.,  8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.,  4851.,  5202.,  5202.,  5580.,  5553.,  5958.,  5904.,  6336.,  6336.,  6804.,  6768.,  7272.,  7200.,  7740.,  7632.,  8208.,  8064.,  8676.,  8496.,  9144.,  8928.,  9612.,  9360., 10080.,  5337.,  5796.,  5634.,  6120.,  5931.,  6444.,  6228.,  6768.,  6525.,  7092.,  6822.,  7416.,  7119.,  7740.,  7416.,  8064.,  4851.,  5202.,  5202.,  5580.,  5553.,  5958.,  5904.,  6336.,  6336.,  6804.,  6768.,  7272.,  7200.,  7740.,  7632.,  8208.,  8064.,  8676.,  8496.,  9144.,  8928.,  9612.,  9360., 10080.,  5337.,  5796.,  5634.,  6120.,  5931.,  6444.,  6228.,  6768.,  6525.,  7092.,  6822.,  7416.,  7119.,  7740.,  7416.,  8064.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6144.,  6588.,  6288.,  6744.,  6432.,  6900.,  6576.,  7056.,  6720.,  7212.,  6864.,  7368.,  7008.,  7524.,  7152.,  7680.,  7296.,  7836.,  7440.,  7992.,  7584.,  8148.,  7728.,  8304.,  7872.,  8460.,  8016.,  8616.,  8160.,  8772.,  8304.,  8928.,  8448.,  9084.,  8592.,  9240.,  8736.,  9396.,  8880.,  9552., 10752., 11580., 10896., 11736., 11040., 11892., 11184., 12048., 11328., 12204., 11472., 12360., 11616., 12516., 11760., 12672., 11904., 12828., 12048., 12984., 12192., 13140., 12336., 13296., 12480., 13452., 12624., 13608., 12768., 13764., 12912., 13920., 13056., 14076., 13200., 14232., 13344., 14388., 13488., 14544., 15360., 16572., 15504., 16728., 15648., 16884., 15792., 17040., 15936., 17196., 16080., 17352., 16224., 17508., 16368., 17664., 16512., 17820., 16656., 17976., 16800., 18132., 16944., 18288., 17088., 18444., 17232., 18600., 17376., 18756., 17520., 18912., 17664., 19068., 17808., 19224., 17952., 19380., 18096., 19536., 19968., 21564., 20112., 21720., 20256., 21876., 20400., 22032., 20544., 22188., 20688., 22344., 20832., 22500., 20976., 22656., 21120., 22812., 21264., 22968., 21408., 23124., 21552., 23280., 21696., 23436., 21840., 23592., 21984., 23748., 22128., 23904., 22272., 24060., 22416., 24216., 22560., 24372., 22704., 24528., 24576., 26556., 24720., 26712., 24864., 26868., 25008., 27024., 25152., 27180., 25296., 27336., 25440., 27492., 25584., 27648., 25728., 27804., 25872., 27960., 26016., 28116., 26160., 28272., 26304., 28428., 26448., 28584., 26592., 28740., 26736., 28896., 26880., 29052., 27024., 29208., 27168., 29364., 27312., 29520.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7479.,  7830.,  8181.,  8532.,  8010.,  8388.,  8766.,  9144.,  8541.,  8946.,  9351.,  9756.,  9072.,  9504.,  9936., 10368.,  9708., 10176., 10644., 11112., 10344., 10848., 11352., 11856., 10980., 11520., 12060., 12600., 11616., 12192., 12768., 13344., 12252., 12864., 13476., 14088., 12888., 13536., 14184., 14832., 13524., 14208., 14892., 15576., 14160., 14880., 15600., 16320.,  7767.,  8226.,  8685.,  9144.,  8190.,  8676.,  9162.,  9648.,  8613.,  9126.,  9639., 10152.,  9036.,  9576., 10116., 10656.,  9459., 10026., 10593., 11160.,  9882., 10476., 11070., 11664., 10305., 10926., 11547., 12168., 10728., 11376., 12024., 12672.,  8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592.,  8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592.,  5607.,  5958.,  6309.,  6660.,  5994.,  6372.,  6750.,  7128.,  6381.,  6786.,  7191.,  7596.,  6768.,  7200.,  7632.,  8064.,  7212.,  7680.,  8148.,  8616.,  7656.,  8160.,  8664.,  9168.,  8100.,  8640.,  9180.,  9720.,  8544.,  9120.,  9696., 10272.,  8988.,  9600., 10212., 10824.,  9432., 10080., 10728., 11376.,  9876., 10560., 11244., 11928., 10320., 11040., 11760., 12480.,  5319.,  5778.,  6237.,  6696.,  5598.,  6084.,  6570.,  7056.,  5877.,  6390.,  6903.,  7416.,  6156.,  6696.,  7236.,  7776.,  6435.,  7002.,  7569.,  8136.,  6714.,  7308.,  7902.,  8496.,  6993.,  7614.,  8235.,  8856.,  7272.,  7920.,  8568.,  9216.,  5607.,  5958.,  6309.,  6660.,  5994.,  6372.,  6750.,  7128.,  6381.,  6786.,  7191.,  7596.,  6768.,  7200.,  7632.,  8064.,  7212.,  7680.,  8148.,  8616.,  7656.,  8160.,  8664.,  9168.,  8100.,  8640.,  9180.,  9720.,  8544.,  9120.,  9696., 10272.,  8988.,  9600., 10212., 10824.,  9432., 10080., 10728., 11376.,  9876., 10560., 11244., 11928., 10320., 11040., 11760., 12480.,  5319.,  5778.,  6237.,  6696.,  5598.,  6084.,  6570.,  7056.,  5877.,  6390.,  6903.,  7416.,  6156.,  6696.,  7236.,  7776.,  6435.,  7002.,  7569.,  8136.,  6714.,  7308.,  7902.,  8496.,  6993.,  7614.,  8235.,  8856.,  7272.,  7920.,  8568.,  9216.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11844., 12288., 12732., 13176., 12120., 12576., 13032., 13488., 12396., 12864., 13332., 13800., 12672., 13152., 13632., 14112., 12948., 13440., 13932., 14424., 13224., 13728., 14232., 14736., 13500., 14016., 14532., 15048., 13776., 14304., 14832., 15360., 14052., 14592., 15132., 15672., 14328., 14880., 15432., 15984., 14604., 15168., 15732., 16296., 14880., 15456., 16032., 16608., 15156., 15744., 16332., 16920., 15432., 16032., 16632., 17232., 15708., 16320., 16932., 17544., 15984., 16608., 17232., 17856., 16260., 16896., 17532., 18168., 16536., 17184., 17832., 18480., 16812., 17472., 18132., 18792., 17088., 17760., 18432., 19104., 20676., 21504., 22332., 23160., 20952., 21792., 22632., 23472., 21228., 22080., 22932., 23784., 21504., 22368., 23232., 24096., 21780., 22656., 23532., 24408., 22056., 22944., 23832., 24720., 22332., 23232., 24132., 25032., 22608., 23520., 24432., 25344., 22884., 23808., 24732., 25656., 23160., 24096., 25032., 25968., 23436., 24384., 25332., 26280., 23712., 24672., 25632., 26592., 23988., 24960., 25932., 26904., 24264., 25248., 26232., 27216., 24540., 25536., 26532., 27528., 24816., 25824., 26832., 27840., 25092., 26112., 27132., 28152., 25368., 26400., 27432., 28464., 25644., 26688., 27732., 28776., 25920., 26976., 28032., 29088.,  8772.,  9216.,  9660., 10104.,  9048.,  9504.,  9960., 10416.,  9324.,  9792., 10260., 10728.,  9600., 10080., 10560., 11040.,  9876., 10368., 10860., 11352., 10152., 10656., 11160., 11664., 10428., 10944., 11460., 11976., 10704., 11232., 11760., 12288., 10980., 11520., 12060., 12600., 11256., 11808., 12360., 12912., 11532., 12096., 12660., 13224., 11808., 12384., 12960., 13536., 12084., 12672., 13260., 13848., 12360., 12960., 13560., 14160., 12636., 13248., 13860., 14472., 12912., 13536., 14160., 14784., 13188., 13824., 14460., 15096., 13464., 14112., 14760., 15408., 13740., 14400., 15060., 15720., 14016., 14688., 15360., 16032., 17604., 18432., 19260., 20088., 17880., 18720., 19560., 20400., 18156., 19008., 19860., 20712., 18432., 19296., 20160., 21024., 18708., 19584., 20460., 21336., 18984., 19872., 20760., 21648., 19260., 20160., 21060., 21960., 19536., 20448., 21360., 22272., 19812., 20736., 21660., 22584., 20088., 21024., 21960., 22896., 20364., 21312., 22260., 23208., 20640., 21600., 22560., 23520., 20916., 21888., 22860., 23832., 21192., 22176., 23160., 24144., 21468., 22464., 23460., 24456., 21744., 22752., 23760., 24768., 22020., 23040., 24060., 25080., 22296., 23328., 24360., 25392., 22572., 23616., 24660., 25704., 22848., 23904., 24960., 26016., 11844., 12288., 12732., 13176., 12120., 12576., 13032., 13488., 12396., 12864., 13332., 13800., 12672., 13152., 13632., 14112., 12948., 13440., 13932., 14424., 13224., 13728., 14232., 14736., 13500., 14016., 14532., 15048., 13776., 14304., 14832., 15360., 14052., 14592., 15132., 15672., 14328., 14880., 15432., 15984., 14604., 15168., 15732., 16296., 14880., 15456., 16032., 16608., 15156., 15744., 16332., 16920., 15432., 16032., 16632., 17232., 15708., 16320., 16932., 17544., 15984., 16608., 17232., 17856., 16260., 16896., 17532., 18168., 16536., 17184., 17832., 18480., 16812., 17472., 18132., 18792., 17088., 17760., 18432., 19104.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10556., 12291., 13040.,  9282.,  9876., 12120., 14542., 15476., 11560., 12296., 12376., 14378., 15312., 11144., 11880.,  9844., 10760., 11444.,  8286.,  8828.,  8008., 10176., 10860.,  8490.,  9032.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21957., 22128., 22299., 22470., 22641., 23667., 23838., 24009., 24180., 24351., 25377., 25548., 25719., 25890., 26061., 27087., 27258., 27429., 27600., 27771., 28797., 28968., 29139., 29310., 29481.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8684.,  9272., 10543., 11238., 11260., 12000.,  8244.,  8772.,  8820.,  9384., 11040., 11824., 14344., 15260., 15256., 16232., 12208., 12944., 12928., 13712., 12384., 13168., 14248., 15188., 15160., 16160., 10480., 11216., 11200., 11984., 10580., 11240., 11575., 12336., 12290., 13096.,  9028.,  9628.,  9596., 10232.,  8340.,  8912., 10533., 11232., 11248., 11992.,  8788.,  9332.,  9356.,  9936.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19200., 20106., 19524., 20448., 19848., 20790., 20172., 21132., 20496., 21474., 22440., 23526., 22764., 23868., 23088., 24210., 23412., 24552., 23736., 24894., 25680., 26946., 26004., 27288., 26328., 27630., 26652., 27972., 24032., 25242., 20856., 21918., 21180., 22260., 21504., 22602., 21828., 22944., 22152., 23286., 24096., 25338., 24420., 25680., 24744., 26022., 25068., 26364., 23216., 24402.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7052.,  7640.,  8228.,  8816.,  8871.,  9566., 10261., 10956.,  9556., 10296., 11036., 11776.,  7128.,  7656.,  8184.,  8712.,  7668.,  8232.,  8796.,  9360., 10864., 11648., 12432., 13216., 14780., 15696., 16612., 17528., 15648., 16624., 17600., 18576., 13440., 14176., 14912., 15648., 14128., 14912., 15696., 16480., 13680., 14464., 15248., 16032., 14820., 15760., 16700., 17640., 15688., 16688., 17688., 18688., 10112., 10848., 11584., 12320., 10800., 11584., 12368., 13152.,  8916.,  9576., 10236., 10896.,  9173.,  9934., 10695., 11456.,  9822., 10628., 11434., 12240.,  7216.,  7816.,  8416.,  9016.,  7740.,  8376.,  9012.,  9648.,  7980.,  8552.,  9124.,  9696., 10031., 10730., 11429., 12128., 10680., 11424., 12168., 12912.,  9224.,  9768., 10312., 10856.,  9748., 10328., 10908., 11488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16886., 17408., 17930., 18452., 17388., 17928., 18468., 19008., 17890., 18448., 19006., 19564., 18392., 18968., 19544., 20120., 18894., 19488., 20082., 20676., 21522., 22096., 22670., 23244., 22024., 22616., 23208., 23800., 18622., 19168., 19714., 20260., 19124., 19688., 20252., 20816., 19626., 20208., 20790., 21372., 22638., 23328., 24018., 24708., 23140., 23848., 24556., 25264., 23642., 24368., 25094., 25820., 24144., 24888., 25632., 26376., 21766., 22464., 23162., 23860., 12746., 13296., 13846., 14396., 13248., 13816., 14384., 14952., 10614., 11136., 11658., 12180., 11116., 11656., 12196., 12736., 11618., 12176., 12734., 13292., 13286., 13888., 14490., 15092., 13788., 14408., 15028., 15648., 13202., 13776., 14350., 14924., 13704., 14296., 14888., 15480., 11262., 11744., 12226., 12708.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9954., 10552., 10297., 11046., 11795., 12544.,  7058.,  7652.,  8246.,  8840., 12832., 13584., 14006., 14940., 15874., 16808., 11504., 12240., 12976., 13712., 12416., 13168., 13934., 14868., 15802., 16736., 10768., 11504., 12240., 12976., 11302., 11848., 12004., 12688., 13372., 14056.,  8862.,  9404.,  9946., 10488.,  8366.,  8912., 10292., 10976., 11660., 12344.,  8502.,  9044.,  9586., 10128.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19935., 20106., 20277., 20448., 20619., 20790., 20961., 21132., 21303., 21474., 23355., 23526., 23697., 23868., 24039., 24210., 24381., 24552., 24723., 24894., 26775., 26946., 27117., 27288., 27459., 27630., 27801., 27972., 25071., 25242., 21747., 21918., 22089., 22260., 22431., 22602., 22773., 22944., 23115., 23286., 25167., 25338., 25509., 25680., 25851., 26022., 26193., 26364., 24231., 24402.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9584., 10148., 10136., 10736., 10417., 11026., 11134., 11788., 11851., 12550., 12568., 13312.,  6952.,  7396.,  7528.,  8008.,  8104.,  8620.,  8680.,  9232., 12016., 12832., 12736., 13600., 13696., 14572., 14608., 15544., 15520., 16516., 16432., 17488., 11856., 12576., 12576., 13344., 13296., 14112., 14016., 14880., 11824., 12640., 12544., 13408., 12992., 13916., 13904., 14888., 14816., 15860., 15728., 16832.,  9616., 10336., 10336., 11104., 11056., 11872., 11776., 12640., 11624., 12332., 12200., 12944., 12675., 13416., 13390., 14176., 14105., 14936., 14820., 15696.,  9872., 10460., 10440., 11064., 11008., 11668., 11576., 12272.,  8584.,  9148.,  9160.,  9760., 10463., 11144., 11178., 11904., 11893., 12664., 12608., 13424.,  8816.,  9356.,  9384.,  9960.,  9952., 10564., 10520., 11168.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24252., 25278., 24576., 25620., 24900., 25962., 25224., 26304., 25548., 26646., 25872., 26988., 26196., 27330., 26520., 27672., 26844., 28014., 27168., 28356., 22028., 23158., 22352., 23500., 22676., 23842., 23000., 24184., 19356., 20430., 19680., 20772., 20004., 21114., 20328., 21456., 20652., 21798., 20976., 22140., 24540., 25902., 24864., 26244., 25188., 26586., 25512., 26928., 25836., 27270., 26160., 27612., 26484., 27954., 26808., 28296., 24188., 25566., 24512., 25908., 15788., 16870., 16112., 17212., 16436., 17554., 16760., 17896., 13884., 14910., 14208., 15252., 14532., 15594., 14856., 15936., 15180., 16278., 15504., 16620., 17660., 18846., 17984., 19188., 18308., 19530., 18632., 19872., 17804., 18934., 18128., 19276., 18452., 19618., 18776., 19960., 16028., 16974., 16352., 17316.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8908.,  9472., 10036., 10600.,  9432., 10032., 10632., 11232., 10177., 10786., 11395., 12004., 10862., 11516., 12170., 12824., 11547., 12246., 12945., 13644., 12232., 12976., 13720., 14464.,  6612.,  7056.,  7500.,  7944.,  7152.,  7632.,  8112.,  8592.,  7692.,  8208.,  8724.,  9240.,  8232.,  8784.,  9336.,  9888., 11248., 12064., 12880., 13696., 11936., 12800., 13664., 14528., 12692., 13568., 14444., 15320., 13560., 14496., 15432., 16368., 14428., 15424., 16420., 17416., 15296., 16352., 17408., 18464., 11408., 12128., 12848., 13568., 12096., 12864., 13632., 14400., 12784., 13600., 14416., 15232., 13472., 14336., 15200., 16064., 12144., 12960., 13776., 14592., 12832., 13696., 14560., 15424., 12772., 13696., 14620., 15544., 13640., 14624., 15608., 16592., 14508., 15552., 16596., 17640., 15376., 16480., 17584., 18688.,  9232.,  9952., 10672., 11392.,  9920., 10688., 11456., 12224., 10608., 11424., 12240., 13056., 11296., 12160., 13024., 13888., 10188., 10896., 11604., 12312., 10728., 11472., 12216., 12960., 11201., 11942., 12683., 13424., 11850., 12636., 13422., 14208., 12499., 13330., 14161., 14992., 13148., 14024., 14900., 15776.,  9492., 10080., 10668., 11256., 10016., 10640., 11264., 11888., 10540., 11200., 11860., 12520., 11064., 11760., 12456., 13152.,  8092.,  8656.,  9220.,  9784.,  8632.,  9232.,  9832., 10432.,  9525., 10206., 10887., 11568., 10174., 10900., 11626., 12352., 10823., 11594., 12365., 13136., 11472., 12288., 13104., 13920.,  8196.,  8736.,  9276.,  9816.,  8720.,  9296.,  9872., 10448.,  9244.,  9856., 10468., 11080.,  9768., 10416., 11064., 11712.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10934., 11384., 11834., 12284., 11436., 11904., 12372., 12840., 11938., 12424., 12910., 13396., 12440., 12944., 13448., 13952., 12942., 13464., 13986., 14508., 13444., 13984., 14524., 15064., 13946., 14504., 15062., 15620., 14448., 15024., 15600., 16176., 14950., 15544., 16138., 16732., 15452., 16064., 16676., 17288., 18158., 18712., 19266., 19820., 18660., 19232., 19804., 20376., 19162., 19752., 20342., 20932., 19664., 20272., 20880., 21488., 13318., 13752., 14186., 14620., 13820., 14272., 14724., 15176., 14322., 14792., 15262., 15732., 14824., 15312., 15800., 16288., 13470., 13912., 14354., 14796., 13972., 14432., 14892., 15352., 17894., 18488., 19082., 19676., 18396., 19008., 19620., 20232., 18898., 19528., 20158., 20788., 19400., 20048., 20696., 21344., 19902., 20568., 21234., 21900., 20404., 21088., 21772., 22456., 20906., 21608., 22310., 23012., 21408., 22128., 22848., 23568., 19030., 19704., 20378., 21052., 19532., 20224., 20916., 21608., 12126., 12632., 13138., 13644., 12628., 13152., 13676., 14200., 13130., 13672., 14214., 14756., 13632., 14192., 14752., 15312., 10934., 11384., 11834., 12284., 11436., 11904., 12372., 12840., 11938., 12424., 12910., 13396., 12440., 12944., 13448., 13952., 12942., 13464., 13986., 14508., 13444., 13984., 14524., 15064., 17302., 17912., 18522., 19132., 17804., 18432., 19060., 19688., 18306., 18952., 19598., 20244., 18808., 19472., 20136., 20800., 18158., 18712., 19266., 19820., 18660., 19232., 19804., 20376., 19162., 19752., 20342., 20932., 19664., 20272., 20880., 21488., 13318., 13752., 14186., 14620., 13820., 14272., 14724., 15176.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10478., 11076., 11674., 12272.,  9701., 10450., 11199., 11948., 12697., 13446., 14195., 14944.,  7186.,  7780.,  8374.,  8968.,  9562., 10156., 10750., 11344., 12496., 13248., 14000., 14752., 11174., 12108., 13042., 13976., 14910., 15844., 16778., 17712.,  9472., 10208., 10944., 11680., 12416., 13152., 13888., 14624., 12560., 13312., 14064., 14816., 13078., 14012., 14946., 15880., 16814., 17748., 18682., 19616., 10176., 10912., 11648., 12384., 13120., 13856., 14592., 15328.,  9386.,  9932., 10478., 11024.,  9020.,  9704., 10388., 11072., 11756., 12440., 13124., 13808.,  6974.,  7516.,  8058.,  8600.,  9142.,  9684., 10226., 10768.,  9594., 10140., 10686., 11232.,  9596., 10280., 10964., 11648., 12332., 13016., 13700., 14384.,  6702.,  7244.,  7786.,  8328.,  8870.,  9412.,  9954., 10496.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25107., 25278., 25449., 25620., 25791., 25962., 26133., 26304., 26475., 26646., 26817., 26988., 27159., 27330., 27501., 27672., 27843., 28014., 28185., 28356., 22987., 23158., 23329., 23500., 23671., 23842., 24013., 24184., 20259., 20430., 20601., 20772., 20943., 21114., 21285., 21456., 21627., 21798., 21969., 22140., 25731., 25902., 26073., 26244., 26415., 26586., 26757., 26928., 27099., 27270., 27441., 27612., 27783., 27954., 28125., 28296., 25395., 25566., 25737., 25908., 16699., 16870., 17041., 17212., 17383., 17554., 17725., 17896., 14739., 14910., 15081., 15252., 15423., 15594., 15765., 15936., 16107., 16278., 16449., 16620., 18675., 18846., 19017., 19188., 19359., 19530., 19701., 19872., 18763., 18934., 19105., 19276., 19447., 19618., 19789., 19960., 16803., 16974., 17145., 17316.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9624., 10236., 10176., 10824., 10728., 11412., 11280., 12000.,  9621., 10218., 10338., 10980., 11055., 11742., 11772., 12504., 12489., 13266., 13206., 14028., 13923., 14790., 14640., 15552.,  7184.,  7652.,  7760.,  8264.,  8336.,  8876.,  8912.,  9488.,  9488., 10100., 10064., 10712., 10640., 11324., 11216., 11936., 12560., 13376., 13280., 14144., 14000., 14912., 14720., 15680., 10992., 11724., 11904., 12696., 12816., 13668., 13728., 14640., 14640., 15612., 15552., 16584., 16464., 17556., 17376., 18528.,  9424., 10048., 10144., 10816., 10864., 11584., 11584., 12352., 12304., 13120., 13024., 13888., 13744., 14656., 14464., 15424., 11920., 12736., 12640., 13504., 13360., 14272., 14080., 15040., 12656., 13484., 13568., 14456., 14480., 15428., 15392., 16400., 16304., 17372., 17216., 18344., 18128., 19316., 19040., 20288.,  9296.,  9920., 10016., 10688., 10736., 11456., 11456., 12224., 12176., 12992., 12896., 13760., 13616., 14528., 14336., 15296.,  9360.,  9972.,  9936., 10584., 10512., 11196., 11088., 11808.,  9179.,  9752.,  9894., 10512., 10609., 11272., 11324., 12032., 12039., 12792., 12754., 13552., 13469., 14312., 14184., 15072.,  7624.,  8092.,  8192.,  8696.,  8760.,  9300.,  9328.,  9904.,  9896., 10508., 10464., 11112., 11032., 11716., 11600., 12320., 10032., 10644., 10608., 11256., 11184., 11868., 11760., 12480., 10515., 11160., 11230., 11920., 11945., 12680., 12660., 13440., 13375., 14200., 14090., 14960., 14805., 15720., 15520., 16480.,  7336.,  7804.,  7904.,  8408.,  8472.,  9012.,  9040.,  9616.,  9608., 10220., 10176., 10824., 10744., 11428., 11312., 12032.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17076., 17958., 17400., 18300., 17724., 18642., 18048., 18984., 18372., 19326., 18696., 19668., 19020., 20010., 19344., 20352., 19668., 20694., 19992., 21036., 20316., 21378., 20640., 21720., 20964., 22062., 21288., 22404., 21612., 22746., 21936., 23088., 22260., 23430., 22584., 23772., 22908., 24114., 23232., 24456., 18772., 19862., 19096., 20204., 19420., 20546., 19744., 20888., 20068., 21230., 20392., 21572., 20716., 21914., 21040., 22256., 14324., 15174., 14648., 15516., 14972., 15858., 15296., 16200., 15620., 16542., 15944., 16884., 16268., 17226., 16592., 17568., 14996., 15862., 15320., 16204., 15644., 16546., 15968., 16888., 21108., 22278., 21432., 22620., 21756., 22962., 22080., 23304., 22404., 23646., 22728., 23988., 23052., 24330., 23376., 24672., 23700., 25014., 24024., 25356., 24348., 25698., 24672., 26040., 24996., 26382., 25320., 26724., 25644., 27066., 25968., 27408., 23348., 24678., 23672., 25020., 23996., 25362., 24320., 25704., 17812., 18806., 18136., 19148., 18460., 19490., 18784., 19832., 19108., 20174., 19432., 20516., 19756., 20858., 20080., 21200., 17076., 17958., 17400., 18300., 17724., 18642., 18048., 18984., 18372., 19326., 18696., 19668., 19020., 20010., 19344., 20352., 19668., 20694., 19992., 21036., 20316., 21378., 20640., 21720., 21556., 22758., 21880., 23100., 22204., 23442., 22528., 23784., 22852., 24126., 23176., 24468., 23500., 24810., 23824., 25152., 18772., 19862., 19096., 20204., 19420., 20546., 19744., 20888., 20068., 21230., 20392., 21572., 20716., 21914., 21040., 22256., 14324., 15174., 14648., 15516., 14972., 15858., 15296., 16200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9004.,  9616., 10228., 10840.,  9528., 10176., 10824., 11472., 10052., 10736., 11420., 12104., 10576., 11296., 12016., 12736.,  9493., 10090., 10687., 11284., 10178., 10820., 11462., 12104., 10863., 11550., 12237., 12924., 11548., 12280., 13012., 13744., 12233., 13010., 13787., 14564., 12918., 13740., 14562., 15384., 13603., 14470., 15337., 16204., 14288., 15200., 16112., 17024.,  6924.,  7392.,  7860.,  8328.,  7464.,  7968.,  8472.,  8976.,  8004.,  8544.,  9084.,  9624.,  8544.,  9120.,  9696., 10272.,  9084.,  9696., 10308., 10920.,  9624., 10272., 10920., 11568., 10164., 10848., 11532., 12216., 10704., 11424., 12144., 12864., 12336., 13152., 13968., 14784., 13024., 13888., 14752., 15616., 13712., 14624., 15536., 16448., 14400., 15360., 16320., 17280., 10884., 11616., 12348., 13080., 11752., 12544., 13336., 14128., 12620., 13472., 14324., 15176., 13488., 14400., 15312., 16224., 14356., 15328., 16300., 17272., 15224., 16256., 17288., 18320., 16092., 17184., 18276., 19368., 16960., 18112., 19264., 20416.,  9072.,  9696., 10320., 10944.,  9760., 10432., 11104., 11776., 10448., 11168., 11888., 12608., 11136., 11904., 12672., 13440., 11824., 12640., 13456., 14272., 12512., 13376., 14240., 15104., 13200., 14112., 15024., 15936., 13888., 14848., 15808., 16768., 11568., 12384., 13200., 14016., 12256., 13120., 13984., 14848., 12944., 13856., 14768., 15680., 13632., 14592., 15552., 16512., 12068., 12896., 13724., 14552., 12936., 13824., 14712., 15600., 13804., 14752., 15700., 16648., 14672., 15680., 16688., 17696., 15540., 16608., 17676., 18744., 16408., 17536., 18664., 19792., 17276., 18464., 19652., 20840., 18144., 19392., 20640., 21888.,  8304.,  8928.,  9552., 10176.,  8992.,  9664., 10336., 11008.,  9680., 10400., 11120., 11840., 10368., 11136., 11904., 12672., 11056., 11872., 12688., 13504., 11744., 12608., 13472., 14336., 12432., 13344., 14256., 15168., 13120., 14080., 15040., 16000.,  8316.,  8928.,  9540., 10152.,  8856.,  9504., 10152., 10800.,  9396., 10080., 10764., 11448.,  9936., 10656., 11376., 12096.,  8089.,  8662.,  9235.,  9808.,  8738.,  9356.,  9974., 10592.,  9387., 10050., 10713., 11376., 10036., 10744., 11452., 12160., 10685., 11438., 12191., 12944., 11334., 12132., 12930., 13728., 11983., 12826., 13669., 14512., 12632., 13520., 14408., 15296.,  7292.,  7760.,  8228.,  8696.,  7816.,  8320.,  8824.,  9328.,  8340.,  8880.,  9420.,  9960.,  8864.,  9440., 10016., 10592.,  9388., 10000., 10612., 11224.,  9912., 10560., 11208., 11856., 10436., 11120., 11804., 12488., 10960., 11680., 12400., 13120.,  9148.,  9760., 10372., 10984.,  9688., 10336., 10984., 11632., 10228., 10912., 11596., 12280., 10768., 11488., 12208., 12928.,  9921., 10566., 11211., 11856., 10570., 11260., 11950., 12640., 11219., 11954., 12689., 13424., 11868., 12648., 13428., 14208., 12517., 13342., 14167., 14992., 13166., 14036., 14906., 15776., 13815., 14730., 15645., 16560., 14464., 15424., 16384., 17344.,  7228.,  7696.,  8164.,  8632.,  7752.,  8256.,  8760.,  9264.,  8276.,  8816.,  9356.,  9896.,  8800.,  9376.,  9952., 10528.,  9324.,  9936., 10548., 11160.,  9848., 10496., 11144., 11792., 10372., 11056., 11740., 12424., 10896., 11616., 12336., 13056.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8246.,  8552.,  8858.,  9164.,  8748.,  9072.,  9396.,  9720.,  9250.,  9592.,  9934., 10276.,  9752., 10112., 10472., 10832., 10254., 10632., 11010., 11388., 10756., 11152., 11548., 11944., 11258., 11672., 12086., 12500., 11760., 12192., 12624., 13056., 12262., 12712., 13162., 13612., 12764., 13232., 13700., 14168., 13266., 13752., 14238., 14724., 13768., 14272., 14776., 15280., 14270., 14792., 15314., 15836., 14772., 15312., 15852., 16392., 15274., 15832., 16390., 16948., 15776., 16352., 16928., 17504., 16278., 16872., 17466., 18060., 16780., 17392., 18004., 18616., 17282., 17912., 18542., 19172., 17784., 18432., 19080., 19728., 20006., 20648., 21290., 21932., 20508., 21168., 21828., 22488., 21010., 21688., 22366., 23044., 21512., 22208., 22904., 23600., 22014., 22728., 23442., 24156., 22516., 23248., 23980., 24712., 23018., 23768., 24518., 25268., 23520., 24288., 25056., 25824., 10582., 10984., 11386., 11788., 11084., 11504., 11924., 12344., 11586., 12024., 12462., 12900., 12088., 12544., 13000., 13456., 12590., 13064., 13538., 14012., 13092., 13584., 14076., 14568., 13594., 14104., 14614., 15124., 14096., 14624., 15152., 15680.,  9030.,  9384.,  9738., 10092.,  9532.,  9904., 10276., 10648., 10034., 10424., 10814., 11204., 10536., 10944., 11352., 11760., 16278., 16872., 17466., 18060., 16780., 17392., 18004., 18616., 17282., 17912., 18542., 19172., 17784., 18432., 19080., 19728., 18286., 18952., 19618., 20284., 18788., 19472., 20156., 20840., 19290., 19992., 20694., 21396., 19792., 20512., 21232., 21952., 20294., 21032., 21770., 22508., 20796., 21552., 22308., 23064., 21298., 22072., 22846., 23620., 21800., 22592., 23384., 24176., 22302., 23112., 23922., 24732., 22804., 23632., 24460., 25288., 23306., 24152., 24998., 25844., 23808., 24672., 25536., 26400., 19766., 20456., 21146., 21836., 20268., 20976., 21684., 22392., 20770., 21496., 22222., 22948., 21272., 22016., 22760., 23504.,  9030.,  9384.,  9738., 10092.,  9532.,  9904., 10276., 10648., 10034., 10424., 10814., 11204., 10536., 10944., 11352., 11760., 11038., 11464., 11890., 12316., 11540., 11984., 12428., 12872., 12042., 12504., 12966., 13428., 12544., 13024., 13504., 13984.,  8246.,  8552.,  8858.,  9164.,  8748.,  9072.,  9396.,  9720.,  9250.,  9592.,  9934., 10276.,  9752., 10112., 10472., 10832., 10254., 10632., 11010., 11388., 10756., 11152., 11548., 11944., 11258., 11672., 12086., 12500., 11760., 12192., 12624., 13056., 12262., 12712., 13162., 13612., 12764., 13232., 13700., 14168., 13266., 13752., 14238., 14724., 13768., 14272., 14776., 15280., 19766., 20456., 21146., 21836., 20268., 20976., 21684., 22392., 20770., 21496., 22222., 22948., 21272., 22016., 22760., 23504., 21774., 22536., 23298., 24060., 22276., 23056., 23836., 24616., 22778., 23576., 24374., 25172., 23280., 24096., 24912., 25728., 20006., 20648., 21290., 21932., 20508., 21168., 21828., 22488., 21010., 21688., 22366., 23044., 21512., 22208., 22904., 23600., 22014., 22728., 23442., 24156., 22516., 23248., 23980., 24712., 23018., 23768., 24518., 25268., 23520., 24288., 25056., 25824., 10582., 10984., 11386., 11788., 11084., 11504., 11924., 12344., 11586., 12024., 12462., 12900., 12088., 12544., 13000., 13456.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11356., 10080., 13960.,  9480., 10056., 11259., 11982., 14714., 11232., 10950., 12000., 10515., 14916.,  9834., 10512.,  9432.,  9996., 12368.,  9336.,  9288., 10212.,  8952., 12664.,  8424.,  8952.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20091., 20262., 20433., 20604., 20775., 21288., 21459., 21630., 21801., 21972., 22485., 22656., 22827., 22998., 23169., 23682., 23853., 24024., 24195., 24366., 24879., 25050., 25221., 25392., 25563.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11588., 12216., 10536., 11136., 14032., 14864.,  9336.,  9936.,  9876., 10512., 11541., 12246., 12270., 13020., 13900., 14836., 10770., 11520.,  9585., 10284., 11364., 12096., 10845., 11526., 14140., 15112.,  9483., 10164., 10122., 10848., 10656., 11280., 11268., 11928., 13168., 13984.,  9948., 10608.,  9432., 10032.,  9916., 10504.,  9024.,  9552., 12400., 13168.,  7968.,  8496.,  8508.,  9072.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15594., 16374., 15918., 16716., 16242., 17058., 16566., 17400., 16890., 17742., 17862., 18768., 18186., 19110., 18510., 19452., 18834., 19794., 19158., 20136., 20130., 21162., 20454., 21504., 20778., 21846., 21102., 22188., 21426., 22530., 22398., 23556., 22722., 23898., 23046., 24240., 23370., 24582., 23694., 24924., 21722., 22878., 22046., 23220., 19682., 20746., 20006., 21088., 20330., 21430.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11092., 11720., 12348., 12976., 10488., 11088., 11688., 12288., 12896., 13728., 14560., 15392.,  8088.,  8688.,  9288.,  9888.,  8556.,  9192.,  9828., 10464., 11593., 12298., 13003., 13708., 12334., 13084., 13834., 14584., 13296., 14232., 15168., 16104.,  9334., 10084., 10834., 11584.,  8391.,  9090.,  9789., 10488., 11628., 12360., 13092., 13824., 10993., 11674., 12355., 13036., 13612., 14584., 15556., 16528.,  8269.,  8950.,  9631., 10312.,  8830.,  9556., 10282., 11008., 10704., 11328., 11952., 12576., 11316., 11976., 12636., 13296., 12464., 13280., 14096., 14912.,  8676.,  9336.,  9996., 10656.,  8152.,  8752.,  9352.,  9952., 10348., 10936., 11524., 12112.,  9072.,  9600., 10128., 10656., 11744., 12512., 13280., 14048.,  6960.,  7488.,  8016.,  8544.,  7428.,  7992.,  8556.,  9120.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11592., 11988., 12384., 12780., 12094., 12508., 12922., 13336., 12596., 13028., 13460., 13892., 13098., 13548., 13998., 14448., 13600., 14068., 14536., 15004., 15106., 15628., 16150., 16672., 15608., 16148., 16688., 17228., 16110., 16668., 17226., 17784., 16612., 17188., 17764., 18340., 17114., 17708., 18302., 18896., 18620., 19268., 19916., 20564., 19122., 19788., 20454., 21120., 19624., 20308., 20992., 21676., 20126., 20828., 21530., 22232., 20628., 21348., 22068., 22788., 22134., 22908., 23682., 24456., 22316., 23044., 23772., 24500., 22818., 23564., 24310., 25056., 23256., 23956., 24656., 25356., 23758., 24476., 25194., 25912., 22384., 23092., 23800., 24508., 22886., 23612., 24338., 25064., 20764., 21444., 22124., 22804., 21266., 21964., 22662., 23360., 21768., 22484., 23200., 23916.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10036., 10648.,  7804.,  8416., 12248., 13040.,  7280.,  7856.,  8432.,  9008., 11715., 12438., 13161., 13884., 15502., 16436., 12378., 13056., 11814., 12492., 13197., 13920., 10227., 10950., 15906., 16840.,  9582., 10260., 10938., 11616.,  8092.,  8656.,  9220.,  9784., 10984., 11712.,  8576.,  9104.,  8672.,  9200., 10708., 11272.,  8796.,  9360., 13176., 13904.,  8288.,  8816.,  9344.,  9872.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16203., 16374., 16545., 16716., 16887., 17058., 17229., 17400., 17571., 17742., 18597., 18768., 18939., 19110., 19281., 19452., 19623., 19794., 19965., 20136., 20991., 21162., 21333., 21504., 21675., 21846., 22017., 22188., 22359., 22530., 23385., 23556., 23727., 23898., 24069., 24240., 24411., 24582., 24753., 24924., 22707., 22878., 23049., 23220., 20575., 20746., 20917., 21088., 21259., 21430.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10340., 10920., 10952., 11568.,  8876.,  9400.,  9488., 10048., 12704., 13488., 13472., 14304.,  7828.,  8352.,  8368.,  8928.,  8908.,  9504.,  9448., 10080., 12081., 12774., 12810., 13548., 13539., 14322., 14268., 15096., 14088., 15004., 15000., 15976., 11973., 12756., 12612., 13440.,  9603., 10284., 10242., 10968., 11727., 12474., 12456., 13248., 10689., 11334., 11418., 12108., 14568., 15556., 15480., 16528.,  9399., 10044., 10038., 10728., 10677., 11412., 11316., 12096., 10140., 10712., 10752., 11360., 11364., 12008., 11976., 12656., 12640., 13392., 13408., 14208., 10076., 10720., 10616., 11296.,  9396.,  9952.,  9936., 10528.,  9652., 10248., 10264., 10896.,  8028.,  8536.,  8640.,  9184., 12128., 12912., 12896., 13728.,  7012.,  7520.,  7552.,  8096.,  8092.,  8672.,  8632.,  9248.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17040., 17814., 17364., 18156., 17688., 18498., 18012., 18840., 18336., 19182., 18660., 19524., 18984., 19866., 19308., 20208., 19632., 20550., 19956., 20892., 21576., 22602., 21900., 22944., 22224., 23286., 22548., 23628., 22872., 23970., 23196., 24312., 23520., 24654., 23844., 24996., 24168., 25338., 24492., 25680., 26112., 27390., 26436., 27732., 26760., 28074., 27084., 28416., 27408., 28758., 27732., 29100., 28056., 29442., 28380., 29784., 28704., 30126., 29028., 30468., 30648., 32178., 30972., 32520., 26816., 28254., 27140., 28596., 27464., 28938., 27788., 29280., 23888., 25270., 24212., 25612., 24536., 25954., 24860., 26296., 23536., 24934., 23860., 25276., 24184., 25618., 24508., 25960., 22144., 23486., 22468., 23828., 22792., 24170., 23116., 24512., 23440., 24854., 23764., 25196.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10052., 10632., 11212., 11792., 10664., 11280., 11896., 12512.,  9100.,  9624., 10148., 10672.,  9712., 10272., 10832., 11392., 12080., 12864., 13648., 14432., 12800., 13632., 14464., 15296.,  7004.,  7528.,  8052.,  8576.,  7472.,  8032.,  8592.,  9152.,  7940.,  8536.,  9132.,  9728.,  8408.,  9040.,  9672., 10304., 11789., 12482., 13175., 13868., 12530., 13268., 14006., 14744., 13271., 14054., 14837., 15620., 14012., 14840., 15668., 16496., 13308., 14224., 15140., 16056., 14176., 15152., 16128., 17104., 10139., 10922., 11705., 12488., 10700., 11528., 12356., 13184.,  8253.,  8934.,  9615., 10296.,  8814.,  9540., 10266., 10992., 11859., 12606., 13353., 14100., 12600., 13392., 14184., 14976., 10589., 11234., 11879., 12524., 11330., 12020., 12710., 13400., 13940., 14928., 15916., 16904., 14808., 15856., 16904., 17952.,  8009.,  8654.,  9299.,  9944.,  8570.,  9260.,  9950., 10640.,  9131.,  9866., 10601., 11336.,  9692., 10472., 11252., 12032.,  9532., 10104., 10676., 11248., 10144., 10752., 11360., 11968., 10756., 11400., 12044., 12688., 11368., 12048., 12728., 13408., 11472., 12224., 12976., 13728., 12192., 12992., 13792., 14592.,  8180.,  8824.,  9468., 10112.,  8648.,  9328., 10008., 10688.,  7804.,  8360.,  8916.,  9472.,  8272.,  8864.,  9456., 10048., 10708., 11304., 11900., 12496., 11320., 11952., 12584., 13216.,  8444.,  8952.,  9460.,  9968.,  9056.,  9600., 10144., 10688., 11952., 12736., 13520., 14304., 12672., 13504., 14336., 15168.,  6412.,  6920.,  7428.,  7936.,  6880.,  7424.,  7968.,  8512.,  7348.,  7928.,  8508.,  9088.,  7816.,  8432.,  9048.,  9664.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16794., 17312., 17830., 18348., 17296., 17832., 18368., 18904., 17798., 18352., 18906., 19460., 18300., 18872., 19444., 20016., 17458., 17984., 18510., 19036., 17960., 18504., 19048., 19592., 18462., 19024., 19586., 20148., 18964., 19544., 20124., 20704., 14474., 14944., 15414., 15884., 14976., 15464., 15952., 16440., 13838., 14352., 14866., 15380., 14340., 14872., 15404., 15936., 14842., 15392., 15942., 16492., 15344., 15912., 16480., 17048., 15846., 16432., 17018., 17604., 16348., 16952., 17556., 18160., 14482., 15040., 15598., 16156., 14984., 15560., 16136., 16712., 15486., 16080., 16674., 17268., 15988., 16600., 17212., 17824., 16386., 17024., 17662., 18300., 16888., 17544., 18200., 18856., 17390., 18064., 18738., 19412., 17892., 18584., 19276., 19968., 17562., 18208., 18854., 19500., 18064., 18728., 19392., 20056., 18566., 19248., 19930., 20612., 19068., 19768., 20468., 21168., 15602., 16192., 16782., 17372., 16104., 16712., 17320., 17928., 15478., 16112., 16746., 17380., 15980., 16632., 17284., 17936., 16162., 16768., 17374., 17980., 16664., 17288., 17912., 18536., 17166., 17808., 18450., 19092., 17668., 18328., 18988., 19648., 16250., 16800., 17350., 17900., 16752., 17320., 17888., 18456., 17254., 17840., 18426., 19012., 17756., 18360., 18964., 19568., 15786., 16352., 16918., 17484., 16288., 16872., 17456., 18040., 16790., 17392., 17994., 18596., 17292., 17912., 18532., 19152., 14850., 15360., 15870., 16380., 15352., 15880., 16408., 16936., 15854., 16400., 16946., 17492., 16356., 16920., 17484., 18048., 16794., 17312., 17830., 18348., 17296., 17832., 18368., 18904.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10756., 11368., 11980., 12592.,  7988.,  8600.,  9212.,  9824., 13464., 14256., 15048., 15840.,  7520.,  8096.,  8672.,  9248.,  9824., 10400., 10976., 11552.,  9651., 10374., 11097., 11820., 12543., 13266., 13989., 14712., 12150., 13084., 14018., 14952., 11790., 12468., 13146., 13824.,  8582.,  9260.,  9938., 10616., 12519., 13242., 13965., 14688.,  9651., 10374., 11097., 11820., 15838., 16772., 17706., 18640.,  9078.,  9756., 10434., 11112., 11790., 12468., 13146., 13824.,  7300.,  7864.,  8428.,  8992.,  9556., 10120., 10684., 11248.,  9464., 10192., 10920., 11648.,  8944.,  9472., 10000., 10528.,  7280.,  7808.,  8336.,  8864.,  9492., 10056., 10620., 11184.,  7300.,  7864.,  8428.,  8992., 12376., 13104., 13832., 14560.,  6832.,  7360.,  7888.,  8416.,  8944.,  9472., 10000., 10528.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17643., 17814., 17985., 18156., 18327., 18498., 18669., 18840., 19011., 19182., 19353., 19524., 19695., 19866., 20037., 20208., 20379., 20550., 20721., 20892., 22431., 22602., 22773., 22944., 23115., 23286., 23457., 23628., 23799., 23970., 24141., 24312., 24483., 24654., 24825., 24996., 25167., 25338., 25509., 25680., 27219., 27390., 27561., 27732., 27903., 28074., 28245., 28416., 28587., 28758., 28929., 29100., 29271., 29442., 29613., 29784., 29955., 30126., 30297., 30468., 32007., 32178., 32349., 32520., 28083., 28254., 28425., 28596., 28767., 28938., 29109., 29280., 25099., 25270., 25441., 25612., 25783., 25954., 26125., 26296., 24763., 24934., 25105., 25276., 25447., 25618., 25789., 25960., 23315., 23486., 23657., 23828., 23999., 24170., 24341., 24512., 24683., 24854., 25025., 25196.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11364., 11976., 11976., 12624., 12588., 13272., 13200., 13920.,  7764.,  8232.,  8376.,  8880.,  8988.,  9528.,  9600., 10176., 13056., 13872., 13824., 14688., 14592., 15504., 15360., 16320.,  6828.,  7296.,  7368.,  7872.,  7908.,  8448.,  8448.,  9024.,  8988.,  9600.,  9528., 10176., 10068., 10752., 10608., 11328., 10377., 10950., 11106., 11724., 11835., 12498., 12564., 13272., 13293., 14046., 14022., 14820., 14751., 15594., 15480., 16368., 11872., 12652., 12784., 13624., 13696., 14596., 14608., 15568., 11787., 12540., 12426., 13224., 13065., 13908., 13704., 14592.,  7975.,  8556.,  8614.,  9240.,  9253.,  9924.,  9892., 10608., 12453., 13230., 13182., 14004., 13911., 14778., 14640., 15552., 10377., 10950., 11106., 11724., 11835., 12498., 12564., 13272., 15424., 16444., 16336., 17416., 17248., 18388., 18160., 19360.,  9231.,  9804.,  9870., 10488., 10509., 11172., 11148., 11856., 11787., 12540., 12426., 13224., 13065., 13908., 13704., 14592.,  7764.,  8232.,  8376.,  8880.,  8988.,  9528.,  9600., 10176., 10212., 10824., 10824., 11472., 11436., 12120., 12048., 12768.,  9984., 10608., 10752., 11424., 11520., 12240., 12288., 13056.,  8988.,  9600.,  9528., 10176., 10068., 10752., 10608., 11328.,  7980.,  8448.,  8520.,  9024.,  9060.,  9600.,  9600., 10176.,  9828., 10440., 10440., 11088., 11052., 11736., 11664., 12384.,  7764.,  8232.,  8376.,  8880.,  8988.,  9528.,  9600., 10176., 13056., 13872., 13824., 14688., 14592., 15504., 15360., 16320.,  6828.,  7296.,  7368.,  7872.,  7908.,  8448.,  8448.,  9024.,  8988.,  9600.,  9528., 10176., 10068., 10752., 10608., 11328.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19420., 20438., 19744., 20780., 20068., 21122., 20392., 21464., 20716., 21806., 21040., 22148., 21364., 22490., 21688., 22832., 20604., 21638., 20928., 21980., 21252., 22322., 21576., 22664., 21900., 23006., 22224., 23348., 22548., 23690., 22872., 24032., 18076., 18998., 18400., 19340., 18724., 19682., 19048., 20024., 18252., 19262., 18576., 19604., 18900., 19946., 19224., 20288., 19548., 20630., 19872., 20972., 20196., 21314., 20520., 21656., 20844., 21998., 21168., 22340., 21492., 22682., 21816., 23024., 19708., 20806., 20032., 21148., 20356., 21490., 20680., 21832., 21004., 22174., 21328., 22516., 21652., 22858., 21976., 23200., 22716., 23974., 23040., 24316., 23364., 24658., 23688., 25000., 24012., 25342., 24336., 25684., 24660., 26026., 24984., 26368., 24412., 25686., 24736., 26028., 25060., 26370., 25384., 26712., 25708., 27054., 26032., 27396., 26356., 27738., 26680., 28080., 22908., 24070., 23232., 24412., 23556., 24754., 23880., 25096., 23596., 24846., 23920., 25188., 24244., 25530., 24568., 25872., 20412., 21606., 20736., 21948., 21060., 22290., 21384., 22632., 21708., 22974., 22032., 23316., 22356., 23658., 22680., 24000., 16860., 17942., 17184., 18284., 17508., 18626., 17832., 18968., 18156., 19310., 18480., 19652., 18804., 19994., 19128., 20336., 17436., 18550., 17760., 18892., 18084., 19234., 18408., 19576., 18732., 19918., 19056., 20260., 19380., 20602., 19704., 20944., 16956., 17958., 17280., 18300., 17604., 18642., 17928., 18984., 18252., 19326., 18576., 19668., 18900., 20010., 19224., 20352., 19420., 20438., 19744., 20780., 20068., 21122., 20392., 21464.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10788., 11400., 12012., 12624., 11400., 12048., 12696., 13344., 12012., 12696., 13380., 14064., 12624., 13344., 14064., 14784.,  7572.,  8040.,  8508.,  8976.,  8184.,  8688.,  9192.,  9696.,  8796.,  9336.,  9876., 10416.,  9408.,  9984., 10560., 11136., 12240., 13056., 13872., 14688., 12960., 13824., 14688., 15552., 13680., 14592., 15504., 16416., 14400., 15360., 16320., 17280.,  5700.,  6168.,  6636.,  7104.,  6168.,  6672.,  7176.,  7680.,  6636.,  7176.,  7716.,  8256.,  7104.,  7680.,  8256.,  8832.,  7572.,  8184.,  8796.,  9408.,  8040.,  8688.,  9336.,  9984.,  8508.,  9192.,  9876., 10560.,  8976.,  9696., 10416., 11136.,  9781., 10354., 10927., 11500., 10522., 11140., 11758., 12376., 11263., 11926., 12589., 13252., 12004., 12712., 13420., 14128., 12745., 13498., 14251., 15004., 13486., 14284., 15082., 15880., 14227., 15070., 15913., 16756., 14968., 15856., 16744., 17632., 11316., 12096., 12876., 13656., 12184., 13024., 13864., 14704., 13052., 13952., 14852., 15752., 13920., 14880., 15840., 16800.,  9733., 10486., 11239., 11992., 10294., 11092., 11890., 12688., 10855., 11698., 12541., 13384., 11416., 12304., 13192., 14080.,  6761.,  7342.,  7923.,  8504.,  7322.,  7948.,  8574.,  9200.,  7883.,  8554.,  9225.,  9896.,  8444.,  9160.,  9876., 10592., 12321., 13098., 13875., 14652., 13062., 13884., 14706., 15528., 13803., 14670., 15537., 16404., 14544., 15456., 16368., 17280.,  9781., 10354., 10927., 11500., 10522., 11140., 11758., 12376., 11263., 11926., 12589., 13252., 12004., 12712., 13420., 14128., 14596., 15616., 16636., 17656., 15464., 16544., 17624., 18704., 16332., 17472., 18612., 19752., 17200., 18400., 19600., 20800.,  7489.,  8062.,  8635.,  9208.,  8050.,  8668.,  9286.,  9904.,  8611.,  9274.,  9937., 10600.,  9172.,  9880., 10588., 11296.,  9733., 10486., 11239., 11992., 10294., 11092., 11890., 12688., 10855., 11698., 12541., 13384., 11416., 12304., 13192., 14080.,  7572.,  8040.,  8508.,  8976.,  8184.,  8688.,  9192.,  9696.,  8796.,  9336.,  9876., 10416.,  9408.,  9984., 10560., 11136., 10020., 10632., 11244., 11856., 10632., 11280., 11928., 12576., 11244., 11928., 12612., 13296., 11856., 12576., 13296., 14016.,  9360.,  9984., 10608., 11232., 10080., 10752., 11424., 12096., 10800., 11520., 12240., 12960., 11520., 12288., 13056., 13824.,  7572.,  8184.,  8796.,  9408.,  8040.,  8688.,  9336.,  9984.,  8508.,  9192.,  9876., 10560.,  8976.,  9696., 10416., 11136.,  6468.,  6936.,  7404.,  7872.,  6936.,  7440.,  7944.,  8448.,  7404.,  7944.,  8484.,  9024.,  7872.,  8448.,  9024.,  9600., 10788., 11400., 12012., 12624., 11400., 12048., 12696., 13344., 12012., 12696., 13380., 14064., 12624., 13344., 14064., 14784.,  7572.,  8040.,  8508.,  8976.,  8184.,  8688.,  9192.,  9696.,  8796.,  9336.,  9876., 10416.,  9408.,  9984., 10560., 11136., 12240., 13056., 13872., 14688., 12960., 13824., 14688., 15552., 13680., 14592., 15504., 16416., 14400., 15360., 16320., 17280.,  5700.,  6168.,  6636.,  7104.,  6168.,  6672.,  7176.,  7680.,  6636.,  7176.,  7716.,  8256.,  7104.,  7680.,  8256.,  8832.,  7572.,  8184.,  8796.,  9408.,  8040.,  8688.,  9336.,  9984.,  8508.,  9192.,  9876., 10560.,  8976.,  9696., 10416., 11136.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17790., 18360., 18930., 19500., 18292., 18880., 19468., 20056., 18794., 19400., 20006., 20612., 19296., 19920., 20544., 21168., 19798., 20440., 21082., 21724., 20300., 20960., 21620., 22280., 20802., 21480., 22158., 22836., 21304., 22000., 22696., 23392., 16494., 17016., 17538., 18060., 16996., 17536., 18076., 18616., 17498., 18056., 18614., 19172., 18000., 18576., 19152., 19728., 18502., 19096., 19690., 20284., 19004., 19616., 20228., 20840., 19506., 20136., 20766., 21396., 20008., 20656., 21304., 21952., 12382., 12856., 13330., 13804., 12884., 13376., 13868., 14360., 13386., 13896., 14406., 14916., 13888., 14416., 14944., 15472., 14438., 15000., 15562., 16124., 14940., 15520., 16100., 16680., 15442., 16040., 16638., 17236., 15944., 16560., 17176., 17792., 14526., 15032., 15538., 16044., 15028., 15552., 16076., 16600., 15530., 16072., 16614., 17156., 16032., 16592., 17152., 17712., 16534., 17112., 17690., 18268., 17036., 17632., 18228., 18824., 17538., 18152., 18766., 19380., 18040., 18672., 19304., 19936., 14574., 15096., 15618., 16140., 15076., 15616., 16156., 16696., 15578., 16136., 16694., 17252., 16080., 16656., 17232., 17808., 16582., 17176., 17770., 18364., 17084., 17696., 18308., 18920., 17586., 18216., 18846., 19476., 18088., 18736., 19384., 20032., 14670., 15224., 15778., 16332., 15172., 15744., 16316., 16888., 15674., 16264., 16854., 17444., 16176., 16784., 17392., 18000., 16678., 17304., 17930., 18556., 17180., 17824., 18468., 19112., 17682., 18344., 19006., 19668., 18184., 18864., 19544., 20224., 17790., 18360., 18930., 19500., 18292., 18880., 19468., 20056., 18794., 19400., 20006., 20612., 19296., 19920., 20544., 21168., 19798., 20440., 21082., 21724., 20300., 20960., 21620., 22280., 20802., 21480., 22158., 22836., 21304., 22000., 22696., 23392., 16494., 17016., 17538., 18060., 16996., 17536., 18076., 18616., 17498., 18056., 18614., 19172., 18000., 18576., 19152., 19728., 14390., 14936., 15482., 16028., 14892., 15456., 16020., 16584., 15394., 15976., 16558., 17140., 15896., 16496., 17096., 17696., 12430., 12920., 13410., 13900., 12932., 13440., 13948., 14456., 13434., 13960., 14486., 15012., 13936., 14480., 15024., 15568., 14438., 15000., 15562., 16124., 14940., 15520., 16100., 16680., 15442., 16040., 16638., 17236., 15944., 16560., 17176., 17792., 14526., 15032., 15538., 16044., 15028., 15552., 16076., 16600., 15530., 16072., 16614., 17156., 16032., 16592., 17152., 17712., 16534., 17112., 17690., 18268., 17036., 17632., 18228., 18824., 17538., 18152., 18766., 19380., 18040., 18672., 19304., 19936., 13598., 14136., 14674., 15212., 14100., 14656., 15212., 15768., 14602., 15176., 15750., 16324., 15104., 15696., 16288., 16880., 15606., 16216., 16826., 17436., 16108., 16736., 17364., 17992., 16610., 17256., 17902., 18548., 17112., 17776., 18440., 19104., 14670., 15224., 15778., 16332., 15172., 15744., 16316., 16888., 15674., 16264., 16854., 17444., 16176., 16784., 17392., 18000., 16678., 17304., 17930., 18556., 17180., 17824., 18468., 19112., 17682., 18344., 19006., 19668., 18184., 18864., 19544., 20224., 17790., 18360., 18930., 19500., 18292., 18880., 19468., 20056., 18794., 19400., 20006., 20612., 19296., 19920., 20544., 21168.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12480., 16216., 17008., 12336., 12912.,  8760., 11406., 12340.,  8922.,  9600., 14544., 18878., 19812., 14346., 15024.,  5856.,  7576.,  8304.,  5952.,  6480., 10368., 13400., 14128., 10176., 10704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22911., 23082., 23253., 23424., 23595., 24279., 24450., 24621., 24792., 24963., 25647., 25818., 25989., 26160., 26331., 27015., 27186., 27357., 27528., 27699., 28383., 28554., 28725., 28896., 29067.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11184., 11904., 14064., 15024., 14832., 15840., 10284., 11040., 10824., 11616.,  9708., 10224., 12396., 13084., 13308., 14056.,  9315.,  9876.,  9954., 10560., 15540., 16416., 19692., 20860., 20604., 21832., 14427., 15348., 15066., 16032.,  6288.,  6720.,  7920.,  8496.,  8688.,  9312.,  5964.,  6432.,  6504.,  7008., 11184., 11904., 14064., 15024., 14832., 15840., 10284., 11040., 10824., 11616.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21018., 22014., 21342., 22356., 21666., 22698., 21990., 23040., 22314., 23382., 23610., 24750., 23934., 25092., 24258., 25434., 24582., 25776., 24906., 26118., 20570., 21598., 20894., 21940., 21218., 22282., 21542., 22624., 21866., 22966., 23162., 24334., 23486., 24676., 23810., 25018., 24134., 25360., 24458., 25702., 21146., 22206., 21470., 22548., 21794., 22890., 22118., 23232., 22442., 23574.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10128., 10848., 11568., 12288., 11808., 12768., 13728., 14688., 12528., 13536., 14544., 15552.,  7716.,  8472.,  9228.,  9984.,  8184.,  8976.,  9768., 10560., 11604., 12120., 12636., 13152., 14376., 15064., 15752., 16440., 15244., 15992., 16740., 17488., 10101., 10662., 11223., 11784., 10662., 11268., 11874., 12480., 17532., 18408., 19284., 20160., 21320., 22488., 23656., 24824., 22188., 23416., 24644., 25872., 14589., 15510., 16431., 17352., 15150., 16116., 17082., 18048.,  5232.,  5664.,  6096.,  6528.,  6048.,  6624.,  7200.,  7776.,  6768.,  7392.,  8016.,  8640.,  3972.,  4440.,  4908.,  5376.,  4440.,  4944.,  5448.,  5952., 10128., 10848., 11568., 12288., 11808., 12768., 13728., 14688., 12528., 13536., 14544., 15552.,  7716.,  8472.,  9228.,  9984.,  8184.,  8976.,  9768., 10560.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18768., 19252., 19736., 20220., 19270., 19772., 20274., 20776., 19772., 20292., 20812., 21332., 20274., 20812., 21350., 21888., 20776., 21332., 21888., 22444., 22784., 23412., 24040., 24668., 23286., 23932., 24578., 25224., 23788., 24452., 25116., 25780., 24290., 24972., 25654., 26336., 24792., 25492., 26192., 26892., 13744., 14260., 14776., 15292., 14246., 14780., 15314., 15848., 14748., 15300., 15852., 16404., 15250., 15820., 16390., 16960., 15752., 16340., 16928., 17516., 17760., 18420., 19080., 19740., 18262., 18940., 19618., 20296., 18764., 19460., 20156., 20852., 19266., 19980., 20694., 21408., 19768., 20500., 21232., 21964.,  8336.,  8756.,  9176.,  9596.,  8838.,  9276.,  9714., 10152.,  9340.,  9796., 10252., 10708.,  9842., 10316., 10790., 11264., 10344., 10836., 11328., 11820.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14172., 14784., 18456., 19248., 20040., 20832., 14496., 15072., 15648., 16224.,  5181.,  5904.,  6838.,  7772.,  8706.,  9640.,  6222.,  6900.,  7578.,  8256., 16749., 17472., 21782., 22716., 23650., 24584., 17070., 17748., 18426., 19104.,  4044.,  4608.,  5336.,  6064.,  6792.,  7520.,  4848.,  5376.,  5904.,  6432., 13068., 13632., 16984., 17712., 18440., 19168., 13296., 13824., 14352., 14880.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21843., 22014., 22185., 22356., 22527., 22698., 22869., 23040., 23211., 23382., 24579., 24750., 24921., 25092., 25263., 25434., 25605., 25776., 25947., 26118., 21427., 21598., 21769., 21940., 22111., 22282., 22453., 22624., 22795., 22966., 24163., 24334., 24505., 24676., 24847., 25018., 25189., 25360., 25531., 25702., 22035., 22206., 22377., 22548., 22719., 22890., 23061., 23232., 23403., 23574.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14268., 15096., 14880., 15744., 18144., 19248., 18912., 20064., 19680., 20880., 20448., 21696., 13692., 14592., 14232., 15168., 14772., 15744., 15312., 16320.,  5343.,  5658.,  6072.,  6432.,  6984.,  7404.,  7896.,  8376.,  8808.,  9348.,  9720., 10320.,  5991.,  6396.,  6630.,  7080.,  7269.,  7764.,  7908.,  8448., 17007., 18042., 17736., 18816., 21576., 22956., 22488., 23928., 23400., 24900., 24312., 25872., 16215., 17340., 16854., 18024., 17493., 18708., 18132., 19392.,  4476.,  4728.,  5088.,  5376.,  5856.,  6192.,  6624.,  7008.,  7392.,  7824.,  8160.,  8640.,  5052.,  5376.,  5592.,  5952.,  6132.,  6528.,  6672.,  7104., 14268., 15096., 14880., 15744., 18144., 19248., 18912., 20064., 19680., 20880., 20448., 21696., 13692., 14592., 14232., 15168., 14772., 15744., 15312., 16320.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19184., 20134., 19508., 20476., 19832., 20818., 20156., 21160., 20480., 21502., 20804., 21844., 21128., 22186., 21452., 22528., 21776., 22870., 22100., 23212., 24368., 25606., 24692., 25948., 25016., 26290., 25340., 26632., 25664., 26974., 25988., 27316., 26312., 27658., 26636., 28000., 26960., 28342., 27284., 28684., 16240., 17254., 16564., 17596., 16888., 17938., 17212., 18280., 17536., 18622., 17860., 18964., 18184., 19306., 18508., 19648., 18832., 19990., 19156., 20332., 21424., 22726., 21748., 23068., 22072., 23410., 22396., 23752., 22720., 24094., 23044., 24436., 23368., 24778., 23692., 25120., 24016., 25462., 24340., 25804., 12784., 13606., 13108., 13948., 13432., 14290., 13756., 14632., 14080., 14974., 14404., 15316., 14728., 15658., 15052., 16000., 15376., 16342., 15700., 16684.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14460., 15288., 16116., 16944., 15072., 15936., 16800., 17664., 17520., 18624., 19728., 20832., 18240., 19392., 20544., 21696., 18960., 20160., 21360., 22560., 19680., 20928., 22176., 23424., 12084., 12984., 13884., 14784., 12552., 13488., 14424., 15360., 13020., 13992., 14964., 15936., 13488., 14496., 15504., 16512.,  5667.,  5982.,  6297.,  6612.,  6408.,  6768.,  7128.,  7488.,  7276.,  7696.,  8116.,  8536.,  8144.,  8624.,  9104.,  9584.,  9012.,  9552., 10092., 10632.,  9880., 10480., 11080., 11680.,  5529.,  5934.,  6339.,  6744.,  6090.,  6540.,  6990.,  7440.,  6651.,  7146.,  7641.,  8136.,  7212.,  7752.,  8292.,  8832., 17523., 18558., 19593., 20628., 18264., 19344., 20424., 21504., 21164., 22544., 23924., 25304., 22032., 23472., 24912., 26352., 22900., 24400., 25900., 27400., 23768., 25328., 26888., 28448., 14505., 15630., 16755., 17880., 15066., 16236., 17406., 18576., 15627., 16842., 18057., 19272., 16188., 17448., 18708., 19968.,  4668.,  4920.,  5172.,  5424.,  5280.,  5568.,  5856.,  6144.,  6000.,  6336.,  6672.,  7008.,  6720.,  7104.,  7488.,  7872.,  7440.,  7872.,  8304.,  8736.,  8160.,  8640.,  9120.,  9600.,  4596.,  4920.,  5244.,  5568.,  5064.,  5424.,  5784.,  6144.,  5532.,  5928.,  6324.,  6720.,  6000.,  6432.,  6864.,  7296., 14460., 15288., 16116., 16944., 15072., 15936., 16800., 17664., 17520., 18624., 19728., 20832., 18240., 19392., 20544., 21696., 18960., 20160., 21360., 22560., 19680., 20928., 22176., 23424., 12084., 12984., 13884., 14784., 12552., 13488., 14424., 15360., 13020., 13992., 14964., 15936., 13488., 14496., 15504., 16512.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10538., 10848., 11158., 11468., 11040., 11368., 11696., 12024., 11542., 11888., 12234., 12580., 12044., 12408., 12772., 13136., 12546., 12928., 13310., 13692., 13048., 13448., 13848., 14248., 13550., 13968., 14386., 14804., 14052., 14488., 14924., 15360., 14554., 15008., 15462., 15916., 15056., 15528., 16000., 16472., 18570., 19168., 19766., 20364., 19072., 19688., 20304., 20920., 19574., 20208., 20842., 21476., 20076., 20728., 21380., 22032., 20578., 21248., 21918., 22588., 21080., 21768., 22456., 23144., 21582., 22288., 22994., 23700., 22084., 22808., 23532., 24256., 22586., 23328., 24070., 24812., 23088., 23848., 24608., 25368.,  8682.,  9056.,  9430.,  9804.,  9184.,  9576.,  9968., 10360.,  9686., 10096., 10506., 10916., 10188., 10616., 11044., 11472., 10690., 11136., 11582., 12028., 11192., 11656., 12120., 12584., 11694., 12176., 12658., 13140., 12196., 12696., 13196., 13696., 12698., 13216., 13734., 14252., 13200., 13736., 14272., 14808., 16714., 17376., 18038., 18700., 17216., 17896., 18576., 19256., 17718., 18416., 19114., 19812., 18220., 18936., 19652., 20368., 18722., 19456., 20190., 20924., 19224., 19976., 20728., 21480., 19726., 20496., 21266., 22036., 20228., 21016., 21804., 22592., 20730., 21536., 22342., 23148., 21232., 22056., 22880., 23704., 10538., 10848., 11158., 11468., 11040., 11368., 11696., 12024., 11542., 11888., 12234., 12580., 12044., 12408., 12772., 13136., 12546., 12928., 13310., 13692., 13048., 13448., 13848., 14248., 13550., 13968., 14386., 14804., 14052., 14488., 14924., 15360., 14554., 15008., 15462., 15916., 15056., 15528., 16000., 16472.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8148.,  8760.,  9372.,  9984., 10776., 11568., 12360., 13152., 13944., 14736., 15528., 16320.,  9984., 10560., 11136., 11712., 12288., 12864., 13440., 14016.,  9639., 10362., 11085., 11808., 12742., 13676., 14610., 15544., 16478., 17412., 18346., 19280., 11766., 12444., 13122., 13800., 14478., 15156., 15834., 16512.,  9639., 10362., 11085., 11808., 12742., 13676., 14610., 15544., 16478., 17412., 18346., 19280., 11766., 12444., 13122., 13800., 14478., 15156., 15834., 16512.,  7524.,  8088.,  8652.,  9216.,  9944., 10672., 11400., 12128., 12856., 13584., 14312., 15040.,  9168.,  9696., 10224., 10752., 11280., 11808., 12336., 12864.,  7524.,  8088.,  8652.,  9216.,  9944., 10672., 11400., 12128., 12856., 13584., 14312., 15040.,  9168.,  9696., 10224., 10752., 11280., 11808., 12336., 12864.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19963., 20134., 20305., 20476., 20647., 20818., 20989., 21160., 21331., 21502., 21673., 21844., 22015., 22186., 22357., 22528., 22699., 22870., 23041., 23212., 25435., 25606., 25777., 25948., 26119., 26290., 26461., 26632., 26803., 26974., 27145., 27316., 27487., 27658., 27829., 28000., 28171., 28342., 28513., 28684., 17083., 17254., 17425., 17596., 17767., 17938., 18109., 18280., 18451., 18622., 18793., 18964., 19135., 19306., 19477., 19648., 19819., 19990., 20161., 20332., 22555., 22726., 22897., 23068., 23239., 23410., 23581., 23752., 23923., 24094., 24265., 24436., 24607., 24778., 24949., 25120., 25291., 25462., 25633., 25804., 13435., 13606., 13777., 13948., 14119., 14290., 14461., 14632., 14803., 14974., 15145., 15316., 15487., 15658., 15829., 16000., 16171., 16342., 16513., 16684.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.,  9957., 10542., 10686., 11316., 11415., 12090., 12144., 12864., 13056., 13836., 13968., 14808., 14880., 15780., 15792., 16752., 16704., 17724., 17616., 18696., 18528., 19668., 19440., 20640., 11343., 12108., 11982., 12792., 12621., 13476., 13260., 14160., 13899., 14844., 14538., 15528., 15177., 16212., 15816., 16896.,  9957., 10542., 10686., 11316., 11415., 12090., 12144., 12864., 13056., 13836., 13968., 14808., 14880., 15780., 15792., 16752., 16704., 17724., 17616., 18696., 18528., 19668., 19440., 20640., 11343., 12108., 11982., 12792., 12621., 13476., 13260., 14160., 13899., 14844., 14538., 15528., 15177., 16212., 15816., 16896.,  8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.,  8340.,  8808.,  8952.,  9456.,  9564., 10104., 10176., 10752., 10944., 11568., 11712., 12384., 12480., 13200., 13248., 14016., 14016., 14832., 14784., 15648., 15552., 16464., 16320., 17280.,  9564., 10176., 10104., 10752., 10644., 11328., 11184., 11904., 11724., 12480., 12264., 13056., 12804., 13632., 13344., 14208.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10908., 11510., 11232., 11852., 11556., 12194., 11880., 12536., 12204., 12878., 12528., 13220., 12852., 13562., 13176., 13904., 13500., 14246., 13824., 14588., 14148., 14930., 14472., 15272., 14796., 15614., 15120., 15956., 15444., 16298., 15768., 16640., 16092., 16982., 16416., 17324., 16740., 17666., 17064., 18008., 21276., 22454., 21600., 22796., 21924., 23138., 22248., 23480., 22572., 23822., 22896., 24164., 23220., 24506., 23544., 24848., 23868., 25190., 24192., 25532., 24516., 25874., 24840., 26216., 25164., 26558., 25488., 26900., 25812., 27242., 26136., 27584., 26460., 27926., 26784., 28268., 27108., 28610., 27432., 28952., 13212., 13942., 13536., 14284., 13860., 14626., 14184., 14968., 14508., 15310., 14832., 15652., 15156., 15994., 15480., 16336., 15804., 16678., 16128., 17020., 16452., 17362., 16776., 17704., 17100., 18046., 17424., 18388., 17748., 18730., 18072., 19072., 18396., 19414., 18720., 19756., 19044., 20098., 19368., 20440., 23580., 24886., 23904., 25228., 24228., 25570., 24552., 25912., 24876., 26254., 25200., 26596., 25524., 26938., 25848., 27280., 26172., 27622., 26496., 27964., 26820., 28306., 27144., 28648., 27468., 28990., 27792., 29332., 28116., 29674., 28440., 30016., 28764., 30358., 29088., 30700., 29412., 31042., 29736., 31384., 10908., 11510., 11232., 11852., 11556., 12194., 11880., 12536., 12204., 12878., 12528., 13220., 12852., 13562., 13176., 13904., 13500., 14246., 13824., 14588., 14148., 14930., 14472., 15272., 14796., 15614., 15120., 15956., 15444., 16298., 15768., 16640., 16092., 16982., 16416., 17324., 16740., 17666., 17064., 18008.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592., 10593., 11178., 11763., 12348., 11334., 11964., 12594., 13224., 12075., 12750., 13425., 14100., 12816., 13536., 14256., 14976., 13684., 14464., 15244., 16024., 14552., 15392., 16232., 17072., 15420., 16320., 17220., 18120., 16288., 17248., 18208., 19168., 17156., 18176., 19196., 20216., 18024., 19104., 20184., 21264., 18892., 20032., 21172., 22312., 19760., 20960., 22160., 23360., 10497., 11262., 12027., 12792., 11058., 11868., 12678., 13488., 11619., 12474., 13329., 14184., 12180., 13080., 13980., 14880., 12741., 13686., 14631., 15576., 13302., 14292., 15282., 16272., 13863., 14898., 15933., 16968., 14424., 15504., 16584., 17664., 10593., 11178., 11763., 12348., 11334., 11964., 12594., 13224., 12075., 12750., 13425., 14100., 12816., 13536., 14256., 14976., 13684., 14464., 15244., 16024., 14552., 15392., 16232., 17072., 15420., 16320., 17220., 18120., 16288., 17248., 18208., 19168., 17156., 18176., 19196., 20216., 18024., 19104., 20184., 21264., 18892., 20032., 21172., 22312., 19760., 20960., 22160., 23360., 10497., 11262., 12027., 12792., 11058., 11868., 12678., 13488., 11619., 12474., 13329., 14184., 12180., 13080., 13980., 14880., 12741., 13686., 14631., 15576., 13302., 14292., 15282., 16272., 13863., 14898., 15933., 16968., 14424., 15504., 16584., 17664.,  8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592.,  8724.,  9192.,  9660., 10128.,  9336.,  9840., 10344., 10848.,  9948., 10488., 11028., 11568., 10560., 11136., 11712., 12288., 11280., 11904., 12528., 13152., 12000., 12672., 13344., 14016., 12720., 13440., 14160., 14880., 13440., 14208., 14976., 15744., 14160., 14976., 15792., 16608., 14880., 15744., 16608., 17472., 15600., 16512., 17424., 18336., 16320., 17280., 18240., 19200.,  8724.,  9336.,  9948., 10560.,  9192.,  9840., 10488., 11136.,  9660., 10344., 11028., 11712., 10128., 10848., 11568., 12288., 10596., 11352., 12108., 12864., 11064., 11856., 12648., 13440., 11532., 12360., 13188., 14016., 12000., 12864., 13728., 14592.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2654.,  2744.,  2834.,  2924.,  3156.,  3264.,  3372.,  3480.,  3658.,  3784.,  3910.,  4036.,  4160.,  4304.,  4448.,  4592.,  4662.,  4824.,  4986.,  5148.,  5164.,  5344.,  5524.,  5704.,  5666.,  5864.,  6062.,  6260.,  6168.,  6384.,  6600.,  6816.,  6670.,  6904.,  7138.,  7372.,  7172.,  7424.,  7676.,  7928.,  7674.,  7944.,  8214.,  8484.,  8176.,  8464.,  8752.,  9040.,  8678.,  8984.,  9290.,  9596.,  9180.,  9504.,  9828., 10152.,  9682., 10024., 10366., 10708., 10184., 10544., 10904., 11264., 10686., 11064., 11442., 11820., 11188., 11584., 11980., 12376., 11690., 12104., 12518., 12932., 12192., 12624., 13056., 13488., 18718., 19384., 20050., 20716., 19220., 19904., 20588., 21272., 19722., 20424., 21126., 21828., 20224., 20944., 21664., 22384., 20726., 21464., 22202., 22940., 21228., 21984., 22740., 23496., 21730., 22504., 23278., 24052., 22232., 23024., 23816., 24608., 22734., 23544., 24354., 25164., 23236., 24064., 24892., 25720., 23738., 24584., 25430., 26276., 24240., 25104., 25968., 26832., 24742., 25624., 26506., 27388., 25244., 26144., 27044., 27944., 25746., 26664., 27582., 28500., 26248., 27184., 28120., 29056., 26750., 27704., 28658., 29612., 27252., 28224., 29196., 30168., 27754., 28744., 29734., 30724., 28256., 29264., 30272., 31280.,  2654.,  2744.,  2834.,  2924.,  3156.,  3264.,  3372.,  3480.,  3658.,  3784.,  3910.,  4036.,  4160.,  4304.,  4448.,  4592.,  4662.,  4824.,  4986.,  5148.,  5164.,  5344.,  5524.,  5704.,  5666.,  5864.,  6062.,  6260.,  6168.,  6384.,  6600.,  6816.,  6670.,  6904.,  7138.,  7372.,  7172.,  7424.,  7676.,  7928.,  7674.,  7944.,  8214.,  8484.,  8176.,  8464.,  8752.,  9040.,  8678.,  8984.,  9290.,  9596.,  9180.,  9504.,  9828., 10152.,  9682., 10024., 10366., 10708., 10184., 10544., 10904., 11264., 10686., 11064., 11442., 11820., 11188., 11584., 11980., 12376., 11690., 12104., 12518., 12932., 12192., 12624., 13056., 13488., 18718., 19384., 20050., 20716., 19220., 19904., 20588., 21272., 19722., 20424., 21126., 21828., 20224., 20944., 21664., 22384., 20726., 21464., 22202., 22940., 21228., 21984., 22740., 23496., 21730., 22504., 23278., 24052., 22232., 23024., 23816., 24608., 22734., 23544., 24354., 25164., 23236., 24064., 24892., 25720., 23738., 24584., 25430., 26276., 24240., 25104., 25968., 26832., 24742., 25624., 26506., 27388., 25244., 26144., 27044., 27944., 25746., 26664., 27582., 28500., 26248., 27184., 28120., 29056., 26750., 27704., 28658., 29612., 27252., 28224., 29196., 30168., 27754., 28744., 29734., 30724., 28256., 29264., 30272., 31280.,  2654.,  2744.,  2834.,  2924.,  3156.,  3264.,  3372.,  3480.,  3658.,  3784.,  3910.,  4036.,  4160.,  4304.,  4448.,  4592.,  4662.,  4824.,  4986.,  5148.,  5164.,  5344.,  5524.,  5704.,  5666.,  5864.,  6062.,  6260.,  6168.,  6384.,  6600.,  6816.,  6670.,  6904.,  7138.,  7372.,  7172.,  7424.,  7676.,  7928.,  7674.,  7944.,  8214.,  8484.,  8176.,  8464.,  8752.,  9040.,  8678.,  8984.,  9290.,  9596.,  9180.,  9504.,  9828., 10152.,  9682., 10024., 10366., 10708., 10184., 10544., 10904., 11264., 10686., 11064., 11442., 11820., 11188., 11584., 11980., 12376., 11690., 12104., 12518., 12932., 12192., 12624., 13056., 13488.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11416., 14074., 14936., 11848., 12552., 15292., 18190., 19312., 15114., 16020., 15800., 17762., 18884., 13614., 14520., 13352., 14882., 15764., 11944., 12664., 10984., 12822., 13704., 10760., 11480.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30786., 31164., 31542., 31920., 30378., 29190., 29568., 26490., 26868., 23918., 22986., 23364., 23742., 24120., 22962., 22542., 22920., 20226., 20604., 18038., 17490., 17868., 18246., 18624., 19002.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12160., 12976., 15192., 16180., 16152., 17200., 12592., 13392., 13376., 14224., 15228., 16248., 18817., 19996., 19962., 21216., 16284., 17236., 17204., 18216., 16156., 17136., 17979., 19140., 19124., 20360., 13196., 14108., 14116., 15088., 13312., 14224., 14800., 15844., 15704., 16808., 11632., 12464., 12352., 13232., 10528., 11280., 13088., 13964., 13992., 14928., 10896., 11568., 11616., 12336.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24651., 25476., 25380., 26232., 26109., 26988., 26838., 27744., 25711., 26580., 26757., 27660., 27486., 28416., 24823., 25716., 25552., 26472., 23017., 23900., 23167., 24084., 23896., 24840., 23665., 24572., 24394., 25328., 22819., 23652., 24633., 25500., 25362., 26256., 23083., 23940., 23812., 24696., 21661., 22508., 22579., 23460., 23308., 24216., 23461., 24332., 24190., 25088., 24471., 25332.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9936., 10752., 11568., 12384., 12692., 13680., 14668., 15656., 13592., 14640., 15688., 16736., 11072., 11872., 12672., 13472., 11824., 12672., 13520., 14368., 14204., 15224., 16244., 17264., 18951., 20130., 21309., 22488., 20046., 21300., 22554., 23808., 17536., 18488., 19440., 20392., 18420., 19432., 20444., 21456., 17380., 18360., 19340., 20320., 18381., 19542., 20703., 21864., 19476., 20712., 21948., 23184., 12680., 13592., 14504., 15416., 13564., 14536., 15508., 16480., 11760., 12672., 13584., 14496., 12428., 13472., 14516., 15560., 13280., 14384., 15488., 16592.,  9344., 10176., 11008., 11840., 10000., 10880., 11760., 12640.,  9552., 10304., 11056., 11808., 12500., 13376., 14252., 15128., 13352., 14288., 15224., 16160., 10912., 11584., 12256., 12928., 11568., 12288., 13008., 13728.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6365., 6774., 7183., 7592., 6740., 7176., 7612., 8048., 6315., 6746., 7177., 7608., 6690., 7148., 7606., 8064., 5593., 6014., 6435., 6856., 5411., 5866., 6321., 6776., 5786., 6268., 6750., 7232., 5457., 5902., 6347., 6792., 5832., 6304., 6776., 7248., 6047., 6514., 6981., 7448., 6569., 7006., 7443., 7880., 6944., 7408., 7872., 8336., 5975., 6402., 6829., 7256., 6350., 6804., 7258., 7712., 5221., 5606., 5991., 6376., 6575., 6994., 7413., 7832., 6950., 7396., 7842., 8288., 6365., 6774., 7183., 7592., 6740., 7176., 7612., 8048., 6315., 6746., 7177., 7608., 5205., 5638., 6071., 6504., 5580., 6040., 6500., 6960., 5411., 5866., 6321., 6776., 5786., 6268., 6750., 7232., 5457., 5902., 6347., 6792.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12096., 12784., 13686., 14548., 15410., 16272., 11184., 11888., 12592., 13296., 14802., 15704., 16090., 17212., 18334., 19456., 13770., 14676., 15582., 16488., 15658., 16560., 17058., 18180., 19302., 20424., 13202., 14108., 15014., 15920., 11824., 12528., 13138., 14020., 14902., 15784., 10752., 11472., 12192., 12912., 12048., 12752., 13434., 14316., 15198., 16080., 10784., 11504., 12224., 12944.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25098., 25476., 25854., 26232., 26610., 26988., 27366., 27744., 26202., 26580., 27282., 27660., 28038., 28416., 25338., 25716., 26094., 26472., 23522., 23900., 23706., 24084., 24462., 24840., 24194., 24572., 24950., 25328., 23274., 23652., 25122., 25500., 25878., 26256., 23562., 23940., 24318., 24696., 22130., 22508., 23082., 23460., 23838., 24216., 23954., 24332., 24710., 25088., 24954., 25332.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13456., 14272., 14208., 15072., 15504., 16428., 16464., 17448., 17424., 18468., 18384., 19488., 11856., 12576., 12640., 13408., 13424., 14240., 14208., 15072., 15080., 16100., 15992., 17072., 16745., 17844., 17890., 19064., 19035., 20284., 20180., 21504., 14784., 15700., 15704., 16680., 16624., 17660., 17544., 18640., 15528., 16532., 16440., 17504., 16605., 17732., 17750., 18952., 18895., 20172., 20040., 21392., 12416., 13284., 13336., 14264., 14256., 15244., 15176., 16224., 12848., 13664., 13568., 14432., 13720., 14596., 14624., 15560., 15528., 16524., 16432., 17488., 10896., 11616., 11616., 12384., 12336., 13152., 13056., 13920., 11760., 12576., 12480., 13344., 13624., 14548., 14528., 15512., 15432., 16476., 16336., 17440., 10832., 11552., 11552., 12320., 12272., 13088., 12992., 13856.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23677., 24468., 24406., 25224., 25135., 25980., 25864., 26736., 23713., 24548., 24442., 25304., 25171., 26060., 25900., 26816., 22021., 22836., 22750., 23592., 26161., 27044., 26890., 27800., 27619., 28556., 28348., 29312., 25237., 26100., 25966., 26856., 26695., 27612., 27424., 28368., 24889., 25796., 25618., 26552., 20453., 21300., 21182., 22056., 21911., 22812., 22640., 23568., 19913., 20740., 20642., 21496., 21371., 22252., 22100., 23008., 18157., 18900., 18886., 19656., 23833., 24644., 24562., 25400., 25291., 26156., 26020., 26912., 23677., 24468., 24406., 25224., 25135., 25980., 25864., 26736., 23713., 24548., 24442., 25304., 23821., 24660., 24550., 25416., 25279., 26172., 26008., 26928., 26161., 27044., 26890., 27800., 27619., 28556., 28348., 29312., 25237., 26100., 25966., 26856.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13040., 13856., 14672., 15488., 13728., 14592., 15456., 16320., 15044., 15968., 16892., 17816., 15944., 16928., 17912., 18896., 16844., 17888., 18932., 19976., 17744., 18848., 19952., 21056., 11472., 12192., 12912., 13632., 12224., 12992., 13760., 14528., 12976., 13792., 14608., 15424., 13728., 14592., 15456., 16320., 13908., 14928., 15948., 16968., 14776., 15856., 16936., 18016., 15911., 17010., 18109., 19208., 17006., 18180., 19354., 20528., 18101., 19350., 20599., 21848., 19196., 20520., 21844., 23168., 14700., 15616., 16532., 17448., 15584., 16560., 17536., 18512., 16468., 17504., 18540., 19576., 17352., 18448., 19544., 20640., 15332., 16336., 17340., 18344., 16200., 17264., 18328., 19392., 15731., 16858., 17985., 19112., 16826., 18028., 19230., 20432., 17921., 19198., 20475., 21752., 19016., 20368., 21720., 23072., 11548., 12416., 13284., 14152., 12432., 13360., 14288., 15216., 13316., 14304., 15292., 16280., 14200., 15248., 16296., 17344., 12016., 12832., 13648., 14464., 12704., 13568., 14432., 15296., 12612., 13488., 14364., 15240., 13464., 14400., 15336., 16272., 14316., 15312., 16308., 17304., 15168., 16224., 17280., 18336.,  9968., 10688., 11408., 12128., 10624., 11392., 12160., 12928., 11280., 12096., 12912., 13728., 11936., 12800., 13664., 14528., 11120., 11936., 12752., 13568., 11808., 12672., 13536., 14400., 12884., 13808., 14732., 15656., 13736., 14720., 15704., 16688., 14588., 15632., 16676., 17720., 15440., 16544., 17648., 18752., 10480., 11200., 11920., 12640., 11136., 11904., 12672., 13440., 11792., 12608., 13424., 14240., 12448., 13312., 14176., 15040.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23843., 24634., 25425., 26216., 24570., 25388., 26206., 27024., 25297., 26142., 26987., 27832., 26024., 26896., 27768., 28640., 25151., 25986., 26821., 27656., 25878., 26740., 27602., 28464., 26605., 27494., 28383., 29272., 27332., 28248., 29164., 30080., 23067., 23882., 24697., 25512., 23794., 24636., 25478., 26320., 22831., 23714., 24597., 25480., 23558., 24468., 25378., 26288., 24285., 25222., 26159., 27096., 25012., 25976., 26940., 27904., 22283., 23146., 24009., 24872., 23010., 23900., 24790., 25680., 23737., 24654., 25571., 26488., 24464., 25408., 26352., 27296., 22823., 23730., 24637., 25544., 23550., 24484., 25418., 26352., 21947., 22794., 23641., 24488., 22674., 23548., 24422., 25296., 23401., 24302., 25203., 26104., 24128., 25056., 25984., 26912., 22167., 22994., 23821., 24648., 22894., 23748., 24602., 25456., 23621., 24502., 25383., 26264., 24348., 25256., 26164., 27072., 20019., 20762., 21505., 22248., 20746., 21516., 22286., 23056., 22855., 23666., 24477., 25288., 23582., 24420., 25258., 26096., 24309., 25174., 26039., 26904., 25036., 25928., 26820., 27712., 23843., 24634., 25425., 26216., 24570., 25388., 26206., 27024., 25297., 26142., 26987., 27832., 26024., 26896., 27768., 28640., 25151., 25986., 26821., 27656., 25878., 26740., 27602., 28464., 21011., 21850., 22689., 23528., 21738., 22604., 23470., 24336., 22465., 23358., 24251., 25144., 23192., 24112., 25032., 25952., 22831., 23714., 24597., 25480., 23558., 24468., 25378., 26288., 24285., 25222., 26159., 27096., 25012., 25976., 26940., 27904., 22283., 23146., 24009., 24872., 23010., 23900., 24790., 25680.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11856., 12544., 13232., 13920., 11566., 12428., 13290., 14152., 15014., 15876., 16738., 17600.,  8736.,  9440., 10144., 10848., 11552., 12256., 12960., 13664., 14718., 15620., 16522., 17424., 13554., 14676., 15798., 16920., 18042., 19164., 20286., 21408., 11658., 12564., 13470., 14376., 15282., 16188., 17094., 18000., 15470., 16372., 17274., 18176., 15522., 16644., 17766., 18888., 20010., 21132., 22254., 23376., 12378., 13284., 14190., 15096., 16002., 16908., 17814., 18720., 12320., 13024., 13728., 14432., 11090., 11972., 12854., 13736., 14618., 15500., 16382., 17264.,  9264.,  9984., 10704., 11424., 12144., 12864., 13584., 14304., 12128., 12832., 13536., 14240., 11682., 12564., 13446., 14328., 15210., 16092., 16974., 17856.,  8944.,  9664., 10384., 11104., 11824., 12544., 13264., 13984.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24090., 24468., 24846., 25224., 25602., 25980., 26358., 26736., 24170., 24548., 24926., 25304., 25682., 26060., 26438., 26816., 22458., 22836., 23214., 23592., 26666., 27044., 27422., 27800., 28178., 28556., 28934., 29312., 25722., 26100., 26478., 26856., 27234., 27612., 27990., 28368., 25418., 25796., 26174., 26552., 20922., 21300., 21678., 22056., 22434., 22812., 23190., 23568., 20362., 20740., 21118., 21496., 21874., 22252., 22630., 23008., 18522., 18900., 19278., 19656., 24266., 24644., 25022., 25400., 25778., 26156., 26534., 26912., 24090., 24468., 24846., 25224., 25602., 25980., 26358., 26736., 24170., 24548., 24926., 25304., 24282., 24660., 25038., 25416., 25794., 26172., 26550., 26928., 26666., 27044., 27422., 27800., 28178., 28556., 28934., 29312., 25722., 26100., 26478., 26856.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12848., 13664., 13600., 14464., 14352., 15264., 15104., 16064., 13408., 14236., 14368., 15256., 15328., 16276., 16288., 17296., 17248., 18316., 18208., 19336., 19168., 20356., 20128., 21376., 10128., 10752., 10912., 11584., 11696., 12416., 12480., 13248., 13264., 14080., 14048., 14912., 14832., 15744., 15616., 16576., 15552., 16572., 16464., 17544., 17376., 18516., 18288., 19488., 13913., 14820., 15058., 16040., 16203., 17260., 17348., 18480., 18493., 19700., 19638., 20920., 20783., 22140., 21928., 23360., 11976., 12756., 12896., 13736., 13816., 14716., 14736., 15696., 15656., 16676., 16576., 17656., 17496., 18636., 18416., 19616., 15520., 16540., 16432., 17512., 17344., 18484., 18256., 19456., 15681., 16708., 16826., 17928., 17971., 19148., 19116., 20368., 20261., 21588., 21406., 22808., 22551., 24028., 23696., 25248., 11880., 12660., 12800., 13640., 13720., 14620., 14640., 15600., 15560., 16580., 16480., 17560., 17400., 18540., 18320., 19520., 12688., 13504., 13408., 14272., 14128., 15040., 14848., 15808., 11176., 11908., 12080., 12872., 12984., 13836., 13888., 14800., 14792., 15764., 15696., 16728., 16600., 17692., 17504., 18656.,  9040.,  9664.,  9760., 10432., 10480., 11200., 11200., 11968., 11920., 12736., 12640., 13504., 13360., 14272., 14080., 15040., 12304., 13120., 13024., 13888., 13744., 14656., 14464., 15424., 12008., 12836., 12912., 13800., 13816., 14764., 14720., 15728., 15624., 16692., 16528., 17656., 17432., 18620., 18336., 19584.,  9168.,  9792.,  9888., 10560., 10608., 11328., 11328., 12096., 12048., 12864., 12768., 13632., 13488., 14400., 14208., 15168.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22049., 22836., 22778., 23592., 23507., 24348., 24236., 25104., 24965., 25860., 25694., 26616., 26423., 27372., 27152., 28128., 22889., 23764., 23618., 24520., 24347., 25276., 25076., 26032., 25805., 26788., 26534., 27544., 27263., 28300., 27992., 29056., 18417., 19188., 19146., 19944., 19875., 20700., 20604., 21456., 21833., 22612., 22562., 23368., 23291., 24124., 24020., 24880., 24749., 25636., 25478., 26392., 26207., 27148., 26936., 27904., 22289., 23028., 23018., 23784., 23747., 24540., 24476., 25296., 25205., 26052., 25934., 26808., 26663., 27564., 27392., 28320., 24665., 25492., 25394., 26248., 26123., 27004., 26852., 27760., 18417., 19188., 19146., 19944., 19875., 20700., 20604., 21456., 21333., 22212., 22062., 22968., 22791., 23724., 23520., 24480., 19065., 19860., 19794., 20616., 20523., 21372., 21252., 22128., 21981., 22884., 22710., 23640., 23439., 24396., 24168., 25152., 17921., 18612., 18650., 19368., 19379., 20124., 20108., 20880., 24665., 25492., 25394., 26248., 26123., 27004., 26852., 27760., 27581., 28516., 28310., 29272., 29039., 30028., 29768., 30784., 22049., 22836., 22778., 23592., 23507., 24348., 24236., 25104., 24965., 25860., 25694., 26616., 26423., 27372., 27152., 28128., 22889., 23764., 23618., 24520., 24347., 25276., 25076., 26032., 17921., 18612., 18650., 19368., 19379., 20124., 20108., 20880., 20837., 21636., 21566., 22392., 22295., 23148., 23024., 23904., 21833., 22612., 22562., 23368., 23291., 24124., 24020., 24880., 24749., 25636., 25478., 26392., 26207., 27148., 26936., 27904., 22289., 23028., 23018., 23784., 23747., 24540., 24476., 25296.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11824., 12640., 13456., 14272., 12512., 13376., 14240., 15104., 13200., 14112., 15024., 15936., 13888., 14848., 15808., 16768., 12228., 13056., 13884., 14712., 13128., 14016., 14904., 15792., 14028., 14976., 15924., 16872., 14928., 15936., 16944., 17952., 15828., 16896., 17964., 19032., 16728., 17856., 18984., 20112., 17628., 18816., 20004., 21192., 18528., 19776., 21024., 22272.,  9648., 10272., 10896., 11520., 10400., 11072., 11744., 12416., 11152., 11872., 12592., 13312., 11904., 12672., 13440., 14208., 12656., 13472., 14288., 15104., 13408., 14272., 15136., 16000., 14160., 15072., 15984., 16896., 14912., 15872., 16832., 17792., 14852., 15872., 16892., 17912., 15720., 16800., 17880., 18960., 16588., 17728., 18868., 20008., 17456., 18656., 19856., 21056., 13511., 14418., 15325., 16232., 14606., 15588., 16570., 17552., 15701., 16758., 17815., 18872., 16796., 17928., 19060., 20192., 17891., 19098., 20305., 21512., 18986., 20268., 21550., 22832., 20081., 21438., 22795., 24152., 21176., 22608., 24040., 25472., 11524., 12304., 13084., 13864., 12408., 13248., 14088., 14928., 13292., 14192., 15092., 15992., 14176., 15136., 16096., 17056., 15060., 16080., 17100., 18120., 15944., 17024., 18104., 19184., 16828., 17968., 19108., 20248., 17712., 18912., 20112., 21312., 14788., 15808., 16828., 17848., 15656., 16736., 17816., 18896., 16524., 17664., 18804., 19944., 17392., 18592., 19792., 20992., 15135., 16162., 17189., 18216., 16230., 17332., 18434., 19536., 17325., 18502., 19679., 20856., 18420., 19672., 20924., 22176., 19515., 20842., 22169., 23496., 20610., 22012., 23414., 24816., 21705., 23182., 24659., 26136., 22800., 24352., 25904., 27456., 11332., 12112., 12892., 13672., 12216., 13056., 13896., 14736., 13100., 14000., 14900., 15800., 13984., 14944., 15904., 16864., 14868., 15888., 16908., 17928., 15752., 16832., 17912., 18992., 16636., 17776., 18916., 20056., 17520., 18720., 19920., 21120., 11824., 12640., 13456., 14272., 12512., 13376., 14240., 15104., 13200., 14112., 15024., 15936., 13888., 14848., 15808., 16768.,  9972., 10704., 11436., 12168., 10824., 11616., 12408., 13200., 11676., 12528., 13380., 14232., 12528., 13440., 14352., 15264., 13380., 14352., 15324., 16296., 14232., 15264., 16296., 17328., 15084., 16176., 17268., 18360., 15936., 17088., 18240., 19392.,  8272.,  8896.,  9520., 10144.,  8928.,  9600., 10272., 10944.,  9584., 10304., 11024., 11744., 10240., 11008., 11776., 12544., 10896., 11712., 12528., 13344., 11552., 12416., 13280., 14144., 12208., 13120., 14032., 14944., 12864., 13824., 14784., 15744., 11568., 12384., 13200., 14016., 12256., 13120., 13984., 14848., 12944., 13856., 14768., 15680., 13632., 14592., 15552., 16512., 11540., 12368., 13196., 14024., 12392., 13280., 14168., 15056., 13244., 14192., 15140., 16088., 14096., 15104., 16112., 17120., 14948., 16016., 17084., 18152., 15800., 16928., 18056., 19184., 16652., 17840., 19028., 20216., 17504., 18752., 20000., 21248.,  8784.,  9408., 10032., 10656.,  9440., 10112., 10784., 11456., 10096., 10816., 11536., 12256., 10752., 11520., 12288., 13056., 11408., 12224., 13040., 13856., 12064., 12928., 13792., 14656., 12720., 13632., 14544., 15456., 13376., 14336., 15296., 16256.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4271., 4578., 4885., 5192., 4646., 4980., 5314., 5648., 5021., 5382., 5743., 6104., 5396., 5784., 6172., 6560., 5771., 6186., 6601., 7016., 6146., 6588., 7030., 7472., 6521., 6990., 7459., 7928., 6896., 7392., 7888., 8384., 5607., 6002., 6397., 6792., 5982., 6404., 6826., 7248., 6357., 6806., 7255., 7704., 6732., 7208., 7684., 8160., 7107., 7610., 8113., 8616., 7482., 8012., 8542., 9072., 7857., 8414., 8971., 9528., 8232., 8816., 9400., 9984., 4479., 4802., 5125., 5448., 4854., 5204., 5554., 5904., 5229., 5606., 5983., 6360., 5604., 6008., 6412., 6816., 5607., 6002., 6397., 6792., 5982., 6404., 6826., 7248., 6357., 6806., 7255., 7704., 6732., 7208., 7684., 8160., 7107., 7610., 8113., 8616., 7482., 8012., 8542., 9072., 7857., 8414., 8971., 9528., 8232., 8816., 9400., 9984., 4479., 4802., 5125., 5448., 4854., 5204., 5554., 5904., 5229., 5606., 5983., 6360., 5604., 6008., 6412., 6816., 5979., 6410., 6841., 7272., 6354., 6812., 7270., 7728., 6729., 7214., 7699., 8184., 7104., 7616., 8128., 8640., 5143., 5522., 5901., 6280., 5518., 5924., 6330., 6736., 5893., 6326., 6759., 7192., 6268., 6728., 7188., 7648., 4479., 4802., 5125., 5448., 4854., 5204., 5554., 5904., 5229., 5606., 5983., 6360., 5604., 6008., 6412., 6816., 5979., 6410., 6841., 7272., 6354., 6812., 7270., 7728., 6729., 7214., 7699., 8184., 7104., 7616., 8128., 8640., 5143., 5522., 5901., 6280., 5518., 5924., 6330., 6736., 5893., 6326., 6759., 7192., 6268., 6728., 7188., 7648., 6643., 7130., 7617., 8104., 7018., 7532., 8046., 8560., 7393., 7934., 8475., 9016., 7768., 8336., 8904., 9472., 4271., 4578., 4885., 5192., 4646., 4980., 5314., 5648., 5021., 5382., 5743., 6104., 5396., 5784., 6172., 6560., 5143., 5522., 5901., 6280., 5518., 5924., 6330., 6736., 5893., 6326., 6759., 7192., 6268., 6728., 7188., 7648., 6643., 7130., 7617., 8104., 7018., 7532., 8046., 8560., 7393., 7934., 8475., 9016., 7768., 8336., 8904., 9472., 4271., 4578., 4885., 5192., 4646., 4980., 5314., 5648., 5021., 5382., 5743., 6104., 5396., 5784., 6172., 6560., 5771., 6186., 6601., 7016., 6146., 6588., 7030., 7472., 6521., 6990., 7459., 7928., 6896., 7392., 7888., 8384., 5607., 6002., 6397., 6792., 5982., 6404., 6826., 7248., 6357., 6806., 7255., 7704., 6732., 7208., 7684., 8160., 4271., 4578., 4885., 5192., 4646., 4980., 5314., 5648., 5021., 5382., 5743., 6104., 5396., 5784., 6172., 6560., 5771., 6186., 6601., 7016., 6146., 6588., 7030., 7472., 6521., 6990., 7459., 7928., 6896., 7392., 7888., 8384., 5607., 6002., 6397., 6792., 5982., 6404., 6826., 7248., 6357., 6806., 7255., 7704., 6732., 7208., 7684., 8160., 7107., 7610., 8113., 8616., 7482., 8012., 8542., 9072., 7857., 8414., 8971., 9528., 8232., 8816., 9400., 9984., 4479., 4802., 5125., 5448., 4854., 5204., 5554., 5904., 5229., 5606., 5983., 6360., 5604., 6008., 6412., 6816.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}