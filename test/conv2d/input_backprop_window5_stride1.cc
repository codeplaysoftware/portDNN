/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;


template <typename Pair>
using InputBackpropWindow5Stride1 = WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride1, GTestTypeTriples);
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 318.,  510.,  750.,  870.,  816.,  705.,  796., 1220., 1730., 1940., 1756., 1474., 1610., 2400., 3325., 3650., 3230., 2660., 2690., 3900., 5275., 5600., 4850., 3920., 3544., 5020., 6650., 6960., 5908., 4690., 3792., 5310., 6960., 7230., 6072., 4773.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  10.,   9.,  29.,  39.,  49.,  59.,  40.,  29.,  79.,  89.,  99., 109.,  70.,  49., 129., 139., 149., 159., 100.,  69., 179., 189., 199., 209., 130.,  63., 150., 157., 164., 171., 100.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7080.,  9792., 12344., 11776.,  8256.,  6432.,  5091.,  6140.,  7465.,  6683.,  3172.,  2961.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,   67.,   52.,  184.,  256.,  328.,  400.,  280.,  192.,  544.,  616.,  688.,  760.,  500.,  332.,  904.,  976., 1048., 1120.,  720.,  472., 1264., 1336., 1408., 1480.,  940.,  457., 1102., 1154., 1206., 1258.,  743.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104., 22440., 15968., 11480.,  9078., 13416., 17546., 18786., 12936., 11646.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2376.,  2920.,  2084.,  1380.,  4008.,  4552.,  5096.,  5640.,  3764.,  2420.,  6728.,  7272.,  7816.,  8360.,  5444.,  3460.,  9448.,  9992., 10536., 11080.,  7124.,  3470.,  8428.,  8828.,  9228.,  9628.,  5718.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  6812.,  7088.,  9664., 10040., 12820., 13300., 13420., 13920., 11408., 11816.,  9068.,  9380.,  7350.,  7584., 10302., 10620., 13515., 13920., 14040., 14460., 11802., 12144.,  9285.,  9546.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  78.,  88.,  98., 108., 118.,  74.,  80.,  54.,  58., 148., 158., 168., 178., 188., 198., 208., 218., 134., 140.,  94.,  98., 248., 258., 268., 278., 288., 298., 308., 318., 194., 200., 134., 138., 348., 358., 368., 378., 388., 398., 408., 418., 254., 260., 123., 126., 293., 300., 307., 314., 321., 328., 335., 342., 196., 200.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9124., 10028., 10816., 12000., 10372., 11740., 10204., 11476.,  7328.,  8256.,  4860.,  5540.,  4371.,  4945.,  6000.,  6728.,  7683.,  8589.,  7277.,  8175.,  4080.,  4744.,  3725.,  4259.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   88.,  108.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  528.,  600.,  672.,  744.,  816.,  526.,  570.,  362.,  390., 1032., 1104., 1176., 1248., 1320., 1392., 1464., 1536.,  966., 1010.,  642.,  670., 1752., 1824., 1896., 1968., 2040., 2112., 2184., 2256., 1406., 1450.,  922.,  950., 2472., 2544., 2616., 2688., 2760., 2832., 2904., 2976., 1846., 1890.,  897.,  919., 2164., 2216., 2268., 2320., 2372., 2424., 2476., 2528., 1463., 1493.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9286., 11630., 11416., 14584., 11986., 15658., 13610., 17218., 10328., 12984.,  5086.,  7110., 11336., 14376., 13344., 17568., 18520., 23672., 19448., 24856., 13344., 17568., 12264., 15560., 10378., 13730., 16744., 21512., 22366., 28358., 22214., 28782., 19368., 24648., 16562., 20746., 14618., 18610., 22696., 27976., 22606., 28982., 21110., 27550., 19560., 24328., 14530., 18330., 11848., 14888., 15392., 19616., 18008., 23160., 20984., 26392., 15392., 19616., 10728., 14024.,  6582.,  8542.,  7512., 10168., 12322., 15866., 14522., 18514., 11160., 14328., 10254., 12918.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  3848.,  4392.,  4936.,  5480.,  6024.,  3948.,  4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  9288.,  9832., 10376., 10920., 11464.,  7308.,  7644.,  4700.,  4908., 13096., 13640., 14184., 14728., 15272., 15816., 16360., 16904., 10668., 11004.,  6780.,  6988., 18536., 19080., 19624., 20168., 20712., 21256., 21800., 22344., 14028., 14364.,  6830.,  6998., 16596., 16996., 17396., 17796., 18196., 18596., 18996., 19396., 11286., 11518.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1056.,  1128.,  1200.,  1272.,  1734.,  1836.,  1938.,  2040.,  2595.,  2730.,  2865.,  3000.,  3030.,  3180.,  3330.,  3480.,  2886.,  3012.,  3138.,  3264.,  2523.,  2622.,  2721.,  2820.,  2788.,  2920.,  3052.,  3184.,  4328.,  4512.,  4696.,  4880.,  6200.,  6440.,  6680.,  6920.,  6980.,  7240.,  7500.,  7760.,  6376.,  6592.,  6808.,  7024.,  5392.,  5560.,  5728.,  5896.,  5810.,  6020.,  6230.,  6440.,  8730.,  9020.,  9310.,  9600., 12175., 12550., 12925., 13300., 13400., 13800., 14200., 14600., 11930., 12260., 12590., 12920.,  9875., 10130., 10385., 10640.,  9860., 10160., 10460., 10760., 14370., 14780., 15190., 15600., 19525., 20050., 20575., 21100., 20750., 21300., 21850., 22400., 18050., 18500., 18950., 19400., 14645., 14990., 15335., 15680., 13348., 13624., 13900., 14176., 18952., 19328., 19704., 20080., 25160., 25640., 26120., 26600., 26340., 26840., 27340., 27840., 22408., 22816., 23224., 23632., 17824., 18136., 18448., 18760., 14466., 14700., 14934., 15168., 20286., 20604., 20922., 21240., 26625., 27030., 27435., 27840., 27660., 28080., 28500., 28920., 23262., 23604., 23946., 24288., 18309., 18570., 18831., 19092.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   3.,   4.,   7.,  10.,  13.,  16.,  19.,  22.,  25.,  28.,  31.,  34.,  37.,  40.,  43.,  46.,  49.,  52.,  34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96., 106., 116., 126., 136., 146., 156., 166., 176., 186., 196., 206., 216., 226., 236., 142., 148., 154., 160., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336., 346., 356., 366., 376., 386., 396., 406., 416., 426., 436., 262., 268., 274., 280., 184., 188., 192., 196., 486., 496., 506., 516., 526., 536., 546., 556., 566., 576., 586., 596., 606., 616., 626., 636., 382., 388., 394., 400., 264., 268., 272., 276., 686., 696., 706., 716., 726., 736., 746., 756., 766., 776., 786., 796., 806., 816., 826., 836., 502., 508., 514., 520., 243., 246., 249., 252., 579., 586., 593., 600., 607., 614., 621., 628., 635., 642., 649., 656., 663., 670., 677., 684., 388., 392., 396., 400.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  6556.,  7460.,  8364.,  9268.,  8000.,  9184., 10368., 11552.,  8668., 10036., 11404., 12772.,  9044., 10316., 11588., 12860.,  6272.,  7200.,  8128.,  9056.,  3508.,  4188.,  4868.,  5548.,  3603.,  4177.,  4751.,  5325.,  3864.,  4592.,  5320.,  6048.,  6359.,  7265.,  8171.,  9077.,  6577.,  7475.,  8373.,  9271.,  4392.,  5056.,  5720.,  6384.,  4133.,  4667.,  5201.,  5735.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  120.,  140.,  160.,  180.,  200.,  220.,  240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,  856.,  928., 1000., 1072., 1144., 1216., 1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062., 1106., 1150.,  702.,  730.,  758.,  786., 2008., 2080., 2152., 2224., 2296., 2368., 2440., 2512., 2584., 2656., 2728., 2800., 2872., 2944., 3016., 3088., 1898., 1942., 1986., 2030., 1262., 1290., 1318., 1346., 3448., 3520., 3592., 3664., 3736., 3808., 3880., 3952., 4024., 4096., 4168., 4240., 4312., 4384., 4456., 4528., 2778., 2822., 2866., 2910., 1822., 1850., 1878., 1906., 4888., 4960., 5032., 5104., 5176., 5248., 5320., 5392., 5464., 5536., 5608., 5680., 5752., 5824., 5896., 5968., 3658., 3702., 3746., 3790., 1777., 1799., 1821., 1843., 4288., 4340., 4392., 4444., 4496., 4548., 4600., 4652., 4704., 4756., 4808., 4860., 4912., 4964., 5016., 5068., 2903., 2933., 2963., 2993.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  7336.,  7880.,  8424.,  8968.,  9512., 10056., 10600., 11144., 11688., 12232.,  7676.,  8012.,  8348.,  8684.,  5100.,  5308.,  5516.,  5724., 14952., 15496., 16040., 16584., 17128., 17672., 18216., 18760., 19304., 19848., 20392., 20936., 21480., 22024., 22568., 23112., 14396., 14732., 15068., 15404.,  9260.,  9468.,  9676.,  9884., 23272., 23816., 24360., 24904., 18792., 19336., 19880., 20424., 20968., 21512., 22056., 22600., 23144., 23688., 24232., 24776., 14460., 14796., 15132., 15468., 10860., 11068., 11276., 11484., 16744., 17288., 17832., 18376.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  7336.,  7880.,  8424.,  8968.,  9512., 10056.,  6332.,  6668.,  7004.,  7340.,  2798.,  2966.,  3134.,  3302.,  7332.,  7732.,  8132.,  8532.,  8932.,  9332.,  9732., 10132., 10532., 10932., 11332., 11732., 12132., 12532., 12932., 13332.,  7574.,  7806.,  8038.,  8270.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 351.,  560.,  820.,  940., 1060.,  980.,  837.,  892., 1360., 1920., 2130., 2340., 2096., 1744., 1820., 2700., 3725., 4050., 4375., 3840., 3140., 3080., 4450., 6000., 6325., 6650., 5730., 4610., 4078., 5760., 7610., 7920., 8230., 6960., 5506., 4374., 6110., 7990., 8260., 8530., 7142., 5598.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,  10.,  16.,  22.,  22.,  15.,  10.,  32.,  68.,  89., 110.,  96.,  60.,  35.,  92., 173., 194., 215., 176., 105.,  60., 152., 278., 299., 320., 256., 150.,  85., 212., 383., 404., 425., 336., 195.,  84., 193., 328., 343., 358., 269., 150.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7268.,  9968., 11724., 10516.,  9052.,  5936.,  3764.,  4363.,  5980.,  5953.,  6835.,  7589.,  6332.,  4959.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  150.,  105.,   58.,  204.,  454.,  610.,  766.,  684.,  434.,  238.,  644., 1234., 1390., 1546., 1284.,  774.,  418., 1084., 2014., 2170., 2326., 1884., 1114.,  598., 1524., 2794., 2950., 3106., 2484., 1454.,  623., 1442., 2465., 2579., 2693., 2034., 1139.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 19912., 22816., 26424., 22488., 20600., 12000.,  8328., 14102., 18984., 18474., 17538., 15066., 11560.,  7558.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4484.,  5684.,  5144.,  3292.,  1740.,  4792.,  9284., 10484., 11684.,  9784.,  5932.,  3100.,  8152., 15284., 16484., 17684., 14424.,  8572.,  4460., 11512., 21284., 22484., 23684., 19064., 11212.,  4790., 11132., 19090., 19978., 20866., 15804.,  8870.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  7838.,  8156., 11088., 11520., 14670., 15220., 15270., 15840., 15870., 16460., 13440., 13920., 10646., 11012.,  8478.,  8748., 11854., 12220., 15515., 15980., 16040., 16520., 16565., 17060., 13882., 14284., 10890., 11196.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  14.,  20.,  26.,  32.,  38.,  44.,  39.,  44.,  27.,  30.,  15.,  20.,  52.,  64., 115., 136., 157., 178., 199., 220., 176., 192., 111., 120.,  65.,  70., 172., 184., 325., 346., 367., 388., 409., 430., 336., 352., 201., 210., 115., 120., 292., 304., 535., 556., 577., 598., 619., 640., 496., 512., 291., 300., 165., 170., 412., 424., 745., 766., 787., 808., 829., 850., 656., 672., 381., 390., 164., 168., 377., 386., 641., 656., 671., 686., 701., 716., 527., 538., 294., 300.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  7616.,  8472., 10192., 11312., 10856., 12144.,  9408., 10600.,  9496., 10592.,  6448.,  7312.,  3936.,  4536.,  4555.,  5161.,  6608.,  7464.,  6635.,  7637.,  7509.,  8503.,  8127.,  9113.,  6744.,  7504.,  4923.,  5433.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,  127.,  169.,  211.,  253.,  295.,  272.,  308.,  193.,  215.,   88.,  124.,  340.,  428.,  788.,  944., 1100., 1256., 1412., 1568., 1276., 1396.,  816.,  884.,  448.,  484., 1220., 1308., 2348., 2504., 2660., 2816., 2972., 3128., 2476., 2596., 1496., 1564.,  808.,  844., 2100., 2188., 3908., 4064., 4220., 4376., 4532., 4688., 3676., 3796., 2176., 2244., 1168., 1204., 2980., 3068., 5468., 5624., 5780., 5936., 6092., 6248., 4876., 4996., 2856., 2924., 1223., 1253., 2832., 2900., 4843., 4957., 5071., 5185., 5299., 5413., 4004., 4088., 2243., 2289.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8494., 10390.,  9144., 11544., 10986., 14082.,  9538., 12570., 12506., 15986., 12184., 15352.,  8814., 11478., 10648., 13816., 14560., 18272., 16072., 20584., 15656., 19912., 15560., 20072., 13536., 17248., 11672., 14840., 14522., 18770., 17576., 22856., 23214., 29334., 19350., 25022., 19902., 25638., 15048., 19560., 13434., 16914., 16290., 21114., 22408., 28456., 23302., 30382., 23214., 29334., 19350., 25022., 15144., 19400., 10210., 13242., 16152., 20344., 19616., 24864., 22920., 28968., 18088., 23368., 17352., 21864., 10144., 13344.,  7704.,  9848., 10710., 13950., 16664., 20856., 17986., 22810., 16474., 20722., 11890., 15562.,  9912., 12312.,  5910.,  7358.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1826.,  2138.,  2020.,  2292.,  1454.,  1622.,   580.,   852.,  2424.,  3096.,  5788.,  6988.,  8188.,  9388., 10588., 11788.,  9688., 10616.,  6244.,  6772.,  3300.,  3572.,  9144.,  9816., 17788., 18988., 20188., 21388., 22588., 23788., 18968., 19896., 11524., 12052.,  6020.,  6292., 14584., 15256., 25180., 26380., 22204., 23404., 24604., 25804., 19544., 20472., 11428., 11956.,  7460.,  7732., 10552., 11224., 14908., 16108.,  5788.,  6988.,  8188.,  9388.,  7832.,  8760.,  5188.,  5716.,  2006.,  2238.,  5028.,  5556.,  9194., 10082., 10970., 11858., 12746., 13634., 10196., 10852.,  5990.,  6350.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1161.,  1242.,  1323.,  1404.,  1898.,  2012.,  2126.,  2240.,  2830.,  2980.,  3130.,  3280.,  3265.,  3430.,  3595.,  3760.,  3700.,  3880.,  4060.,  4240.,  3470.,  3620.,  3770.,  3920.,  2997.,  3114.,  3231.,  3348.,  2926.,  3076.,  3226.,  3376.,  4432.,  4640.,  4848.,  5056.,  6230.,  6500.,  6770.,  7040.,  6754.,  7044.,  7334.,  7624.,  7278.,  7588.,  7898.,  8208.,  6208.,  6464.,  6720.,  6976.,  5230.,  5428.,  5626.,  5824.,  5088.,  5328.,  5568.,  5808.,  7442.,  7772.,  8102.,  8432., 10233., 10658., 11083., 11508., 10882., 11332., 11782., 12232., 11531., 12006., 12481., 12956.,  9582.,  9972., 10362., 10752.,  8012.,  8312.,  8612.,  8912.,  7573.,  7918.,  8263.,  8608., 10886., 11356., 11826., 12296., 14776., 15376., 15976., 16576., 15425., 16050., 16675., 17300., 16074., 16724., 17374., 18024., 13138., 13668., 14198., 14728., 10889., 11294., 11699., 12104.,  9406.,  9724., 10042., 10360., 13104., 13536., 13968., 14400., 17334., 17884., 18434., 18984., 17938., 18508., 19078., 19648., 18542., 19132., 19722., 20312., 14624., 15104., 15584., 16064., 11902., 12268., 12634., 13000.,  8494.,  8764.,  9034.,  9304., 11566., 11932., 12298., 12664., 15077., 15542., 16007., 16472., 15536., 16016., 16496., 16976., 15995., 16490., 16985., 17480., 12002., 12404., 12806., 13208.,  9762., 10068., 10374., 10680.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  251.,  272.,  293.,  314.,  335.,  356.,  377.,  398.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,  671.,  692.,  713.,  734.,  755.,  776.,  797.,  818.,  839.,  860.,  656.,  672.,  688.,  704.,  393.,  402.,  411.,  420.,  225.,  230.,  235.,  240.,  572.,  584.,  596.,  608., 1049., 1070., 1091., 1112., 1133., 1154., 1175., 1196., 1217., 1238., 1259., 1280.,  976.,  992., 1008., 1024.,  573.,  582.,  591.,  600.,  325.,  330.,  335.,  340.,  812.,  824.,  836.,  848., 1469., 1490., 1511., 1532., 1553., 1574., 1595., 1616., 1637., 1658., 1679., 1700., 1296., 1312., 1328., 1344.,  753.,  762.,  771.,  780.,  324.,  328.,  332.,  336.,  745.,  754.,  763.,  772., 1267., 1282., 1297., 1312., 1327., 1342., 1357., 1372., 1387., 1402., 1417., 1432., 1043., 1054., 1065., 1076.,  582.,  588.,  594.,  600.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  6136.,  6992.,  7848.,  8704.,  8592.,  9712., 10832., 11952.,  8928., 10216., 11504., 12792.,  6744.,  7936.,  9128., 10320.,  7632.,  8728.,  9824., 10920.,  6096.,  6960.,  7824.,  8688.,  4408.,  5008.,  5608.,  6208.,  3691.,  4297.,  4903.,  5509.,  5752.,  6608.,  7464.,  8320.,  6367.,  7369.,  8371.,  9373.,  7097.,  8091.,  9085., 10079.,  7315.,  8301.,  9287., 10273.,  5808.,  6568.,  7328.,  8088.,  3219.,  3729.,  4239.,  4749.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1768.,  1924.,  2080.,  2236.,  2392.,  2548.,  2704.,  2860.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,   868.,   904.,   940.,   976.,  2372.,  2460.,  2548.,  2636.,  4576.,  4732.,  4888.,  5044.,  5200.,  5356.,  5512.,  5668.,  5824.,  5980.,  6136.,  6292.,  4860.,  4980.,  5100.,  5220.,  2940.,  3008.,  3076.,  3144.,  1588.,  1624.,  1660.,  1696.,  4132.,  4220.,  4308.,  4396.,  7696.,  7852.,  8008.,  8164.,  8320.,  8476.,  8632.,  8788.,  8944.,  9100.,  9256.,  9412.,  7260.,  7380.,  7500.,  7620.,  4300.,  4368.,  4436.,  4504.,  2308.,  2344.,  2380.,  2416.,  5892.,  5980.,  6068.,  6156., 10816., 10972., 11128., 11284., 11440., 11596., 11752., 11908., 12064., 12220., 12376., 12532.,  9660.,  9780.,  9900., 10020.,  5660.,  5728.,  5796.,  5864.,  2423.,  2453.,  2483.,  2513.,  5612.,  5680.,  5748.,  5816.,  9599.,  9713.,  9827.,  9941., 10055., 10169., 10283., 10397., 10511., 10625., 10739., 10853.,  7944.,  8028.,  8112.,  8196.,  4451.,  4497.,  4543.,  4589.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2194.,  2506.,  2818.,  3130.,  3442.,  3754.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,  3134.,  3302.,   980.,  1252.,  1524.,  1796.,  4408.,  5080.,  5752.,  6424., 10796., 11996., 13196., 14396., 14316., 15516., 16716., 17916., 15788., 16988., 18188., 19388., 10072., 11000., 11928., 12856.,  6772.,  7300.,  7828.,  8356.,  5140.,  5412.,  5684.,  5956., 13240., 13912., 14584., 15256., 24812., 26012., 27212., 28412., 22188., 23388., 24588., 25788., 17516., 18716., 19916., 21116.,  7640.,  8568.,  9496., 10424.,  5812.,  6340.,  6868.,  7396.,  3156.,  3428.,  3700.,  3972.,  8504.,  9176.,  9848., 10520., 15788., 16988., 18188., 19388., 15212., 16412., 17612., 18812., 20012., 21212., 22412., 23612., 17496., 18424., 19352., 20280., 10996., 11524., 12052., 12580.,  7316.,  7588.,  7860.,  8132., 11192., 11864., 12536., 13208., 17516., 18716., 19916., 21116., 10796., 11996., 13196., 14396., 14316., 15516., 16716., 17916., 11736., 12664., 13592., 14520.,  4660.,  5188.,  5716.,  6244.,  3862.,  4094.,  4326.,  4558.,  9716., 10244., 10772., 11300., 17818., 18706., 19594., 20482., 21370., 22258., 23146., 24034., 17498., 18386., 19274., 20162., 10500., 11156., 11812., 12468.,   230.,   590.,   950.,  1310.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 384.,  610.,  890., 1010., 1130., 1250., 1144.,  969.,  988., 1500., 2110., 2320., 2530., 2740., 2436., 2014., 2030., 3000., 4125., 4450., 4775., 5100., 4450., 3620., 3470., 5000., 6725., 7050., 7375., 7700., 6610., 5300., 4612., 6500., 8570., 8880., 9190., 9500., 8012., 6322., 4956., 6910., 9020., 9290., 9560., 9830., 8212., 6423.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,  10.,  20.,  30.,  34.,  31.,  20.,  11.,  35.,  74., 130., 166., 161., 133.,  80.,  41., 105., 194., 310., 346., 311., 243., 140.,  71., 175., 314., 490., 526., 461., 353., 200., 101., 245., 434., 670., 706., 611., 463., 260., 105., 236., 394., 580., 606., 502., 367., 200.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  124.,  196.,  233.,  218.,  143.,   64.,  224.,  496.,  896., 1168., 1156.,  968.,  588.,  284.,  744., 1396., 2256., 2528., 2296., 1808., 1048.,  504., 1264., 2296., 3616., 3888., 3436., 2648., 1508.,  724., 1784., 3196., 4976., 5248., 4576., 3488., 1968.,  789., 1782., 2987., 4412., 4612., 3833., 2810., 1535.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6608.,  8720.,  8732.,  7368.,  4500.,  2100.,  5576., 10556., 17168., 19280., 17612., 13928.,  8100.,  3780.,  8936., 15212., 22736., 21136., 18428., 14088.,  7988.,  4820.,  6536.,  8988., 12304.,  6608.,  6956.,  6056.,  3780.,  1374.,  3340.,  5962.,  9304., 10872.,  9586.,  7388.,  4214.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  8864.,  9224., 12512., 13000., 16520., 17140., 17120., 17760., 17720., 18380., 18320., 19000., 15472., 16024., 12224., 12644.,  9606.,  9912., 13406., 13820., 17515., 18040., 18040., 18580., 18565., 19120., 19090., 19660., 15962., 16424., 12495., 12846.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   59.,   68.,   55.,   62.,   36.,   40.,   16.,   22.,   56.,   70.,  124.,  148.,  224.,  260.,  296.,  332.,  292.,  322.,  244.,  266.,  148.,  160.,   76.,   82.,  196.,  210.,  364.,  388.,  584.,  620.,  656.,  692.,  592.,  622.,  464.,  486.,  268.,  280.,  136.,  142.,  336.,  350.,  604.,  628.,  944.,  980., 1016., 1052.,  892.,  922.,  684.,  706.,  388.,  400.,  196.,  202.,  476.,  490.,  844.,  868., 1304., 1340., 1376., 1412., 1192., 1222.,  904.,  926.,  508.,  520.,  205.,  210.,  461.,  472.,  770.,  788., 1134., 1160., 1186., 1212.,  983., 1004.,  719.,  734.,  392.,  400.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1584.,  1856.,  2128.,  2400.,  2138.,  2366.,  1808.,  1976.,  1106.,  1198.,   534.,   578.,  1408.,  1512.,  2654.,  2834.,  4304.,  4576.,  4848.,  5120.,  4418.,  4646.,  3488.,  3656.,  2026.,  2118.,   974.,  1018.,  2448.,  2552.,  4454.,  4634.,  7024.,  7296.,  7568.,  7840.,  6698.,  6926.,  5168.,  5336.,  2946.,  3038.,  1414.,  1458.,  3488.,  3592.,  6254.,  6434.,  9744., 10016., 10288., 10560.,  8978.,  9206.,  6848.,  7016.,  3866.,  3958.,  1549.,  1587.,  3500.,  3584.,  5869.,  6007.,  8672.,  8872.,  9072.,  9272.,  7543.,  7705.,  5532.,  5648.,  3023.,  3085.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2440.,  2984.,  3098.,  3602.,  2996.,  3396.,  2006.,  2238.,   620.,   956.,  2632.,  3432.,  6292.,  7684., 11216., 13328., 13776., 15888., 11972., 13748.,  7496.,  8808.,  4828.,  5548.,  3340.,  3676.,  8328.,  9128., 15220., 16612., 19536., 21648., 18000., 20112., 13476., 15252.,  6024.,  7336.,  4220.,  4940.,  1964.,  2300.,  5192.,  5992.,  9556., 10948., 15312., 17424., 15824., 17936., 15364., 17140., 12744., 14056.,  7708.,  8428.,  4684.,  5020.,  6792.,  7592., 10292., 11684., 15440., 17552., 11216., 13328., 11108., 12884.,  8584.,  9896.,  3388.,  4108.,  2558.,  2854.,  6260.,  6916., 11234., 12314., 17608., 19176., 16008., 17576., 12602., 13874.,  7412.,  8324.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1266.,  1356.,  1446.,  1536.,  2062.,  2188.,  2314.,  2440.,  3065.,  3230.,  3395.,  3560.,  3500.,  3680.,  3860.,  4040.,  3935.,  4130.,  4325.,  4520.,  4370.,  4580.,  4790.,  5000.,  4054.,  4228.,  4402.,  4576.,  3471.,  3606.,  3741.,  3876.,  3256.,  3424.,  3592.,  3760.,  4920.,  5152.,  5384.,  5616.,  6900.,  7200.,  7500.,  7800.,  7424.,  7744.,  8064.,  8384.,  7948.,  8288.,  8628.,  8968.,  8472.,  8832.,  9192.,  9552.,  7192.,  7488.,  7784.,  8080.,  6028.,  6256.,  6484.,  6712.,  5710.,  5980.,  6250.,  6520.,  8330.,  8700.,  9070.,  9440., 11427., 11902., 12377., 12852., 12076., 12576., 13076., 13576., 12725., 13250., 13775., 14300., 13374., 13924., 14474., 15024., 11074., 11524., 11974., 12424.,  9221.,  9566.,  9911., 10256.,  8550.,  8940.,  9330.,  9720., 12266., 12796., 13326., 13856., 16619., 17294., 17969., 18644., 17268., 17968., 18668., 19368., 17917., 18642., 19367., 20092., 18566., 19316., 20066., 20816., 15138., 15748., 16358., 16968., 12509., 12974., 13439., 13904., 10648., 11008., 11368., 11728., 14808., 15296., 15784., 16272., 19556., 20176., 20796., 21416., 20160., 20800., 21440., 22080., 20764., 21424., 22084., 22744., 21368., 22048., 22728., 23408., 16824., 17376., 17928., 18480., 13660., 14080., 14500., 14920.,  9626.,  9932., 10238., 10544., 13086., 13500., 13914., 14328., 17033., 17558., 18083., 18608., 17492., 18032., 18572., 19112., 17951., 18506., 19061., 19616., 18410., 18980., 19550., 20120., 13798., 14260., 14722., 15184., 11199., 11550., 11901., 12252.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  109.,  118.,  127.,  136.,  103.,  110.,  117.,  124.,   68.,   72.,   76.,   80.,   26.,   32.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  272.,  296.,  412.,  448.,  484.,  520.,  556.,  592.,  628.,  664.,  554.,  584.,  614.,  644.,  466.,  488.,  510.,  532.,  284.,  296.,  308.,  320.,  146.,  152.,  158.,  164.,  378.,  392.,  406.,  420.,  704.,  728.,  752.,  776., 1132., 1168., 1204., 1240., 1276., 1312., 1348., 1384., 1154., 1184., 1214., 1244.,  906.,  928.,  950.,  972.,  524.,  536.,  548.,  560.,  266.,  272.,  278.,  284.,  658.,  672.,  686.,  700., 1184., 1208., 1232., 1256., 1852., 1888., 1924., 1960., 1996., 2032., 2068., 2104., 1754., 1784., 1814., 1844., 1346., 1368., 1390., 1412.,  764.,  776.,  788.,  800.,  386.,  392.,  398.,  404.,  938.,  952.,  966.,  980., 1664., 1688., 1712., 1736., 2572., 2608., 2644., 2680., 2716., 2752., 2788., 2824., 2354., 2384., 2414., 2444., 1786., 1808., 1830., 1852., 1004., 1016., 1028., 1040.,  405.,  410.,  415.,  420.,  911.,  922.,  933.,  944., 1522., 1540., 1558., 1576., 2242., 2268., 2294., 2320., 2346., 2372., 2398., 2424., 1945., 1966., 1987., 2008., 1423., 1438., 1453., 1468.,  776.,  784.,  792.,  800.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   779.,   845.,   911.,   977.,   752.,   804.,   856.,   908.,   503.,   533.,   563.,   593.,   154.,   198.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1930.,  2110.,  2960.,  3232.,  3504.,  3776.,  4048.,  4320.,  4592.,  4864.,  4102.,  4330.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  2142.,  2234.,  2326.,  2418.,  1034.,  1078.,  1122.,  1166.,  2736.,  2840.,  2944.,  3048.,  5170.,  5350.,  5530.,  5710.,  8400.,  8672.,  8944.,  9216.,  9488.,  9760., 10032., 10304.,  8662.,  8890.,  9118.,  9346.,  6848.,  7016.,  7184.,  7352.,  3982.,  4074.,  4166.,  4258.,  1914.,  1958.,  2002.,  2046.,  4816.,  4920.,  5024.,  5128.,  8770.,  8950.,  9130.,  9310., 13840., 14112., 14384., 14656., 14928., 15200., 15472., 15744., 13222., 13450., 13678., 13906., 10208., 10376., 10544., 10712.,  5822.,  5914.,  6006.,  6098.,  2794.,  2838.,  2882.,  2926.,  6896.,  7000.,  7104.,  7208., 12370., 12550., 12730., 12910., 19280., 19552., 19824., 20096., 20368., 20640., 20912., 21184., 17782., 18010., 18238., 18466., 13568., 13736., 13904., 14072.,  7662.,  7754.,  7846.,  7938.,  3069.,  3107.,  3145.,  3183.,  6936.,  7020.,  7104.,  7188., 11633., 11771., 11909., 12047., 17192., 17392., 17592., 17792., 17992., 18192., 18392., 18592., 14963., 15125., 15287., 15449., 10976., 11092., 11208., 11324.,  5999.,  6061.,  6123.,  6185.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2344.,  2888.,  3432.,  3976.,  3880.,  4424.,  4968.,  5512.,  4202.,  4706.,  5210.,  5714.,  3044.,  3444.,  3844.,  4244.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2440.,  3240.,  4040.,  4840.,  6692.,  8084.,  9476., 10868., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 13332., 15108., 16884., 18660.,  7368.,  8680.,  9992., 11304.,  1388.,  2108.,  2828.,  3548.,  1724.,  2060.,  2396.,  2732.,  5640.,  6440.,  7240.,  8040., 11620., 13012., 14404., 15796., 15056., 17168., 19280., 21392., 15056., 17168., 19280., 21392.,  9940., 11716., 13492., 15268.,  4808.,  6120.,  7432.,  8744.,  4268.,  4988.,  5708.,  6428.,  3068.,  3404.,  3740.,  4076.,  8200.,  9000.,  9800., 10600., 10788., 12180., 13572., 14964., 15056., 17168., 19280., 21392., 13008., 15120., 17232., 19344.,  9236., 11012., 12788., 14564., 10056., 11368., 12680., 13992.,  7148.,  7868.,  8588.,  9308.,  3772.,  4108.,  4444.,  4780.,  5000.,  5800.,  6600.,  7400.,  7908.,  9300., 10692., 12084., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 14676., 16452., 18228., 20004., 12616., 13928., 15240., 16552.,  6316.,  7036.,  7756.,  8476.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4498.,  5578.,  6658.,  7738.,  9128., 10696., 12264., 13832., 10664., 12232., 13800., 15368.,  9802., 11074., 12346., 13618.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 318.,  510.,  750.,  870.,  816.,  705.,  796., 1220., 1730., 1940., 1756., 1474., 1610., 2400., 3325., 3650., 3230., 2660., 2690., 3900., 5275., 5600., 4850., 3920., 3770., 5400., 7225., 7550., 6470., 5180., 4588., 6460., 8510., 8820., 7444., 5878., 4710., 6570., 8580., 8850., 7404., 5799.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  10.,   9.,  29.,  39.,  49.,  59.,  40.,  34.,  95., 116., 137., 158., 100.,  79., 200., 221., 242., 263., 160., 124., 305., 326., 347., 368., 220., 143., 331., 349., 367., 385., 220., 105., 236., 247., 258., 269., 150.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6008.,  7552.,  9480.,  9008.,  5312.,  4784.,  3335.,  5196.,  7349.,  7975.,  6388.,  5397.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,   67.,   52.,  184.,  256.,  328.,  400.,  280.,  221.,  646.,  802.,  958., 1114.,  719.,  551., 1426., 1582., 1738., 1894., 1169.,  881., 2206., 2362., 2518., 2674., 1619., 1056., 2464., 2600., 2736., 2872., 1652.,  789., 1782., 1866., 1950., 2034., 1139.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 16120., 21920., 24968., 24232., 14944., 13272.,  6758., 11944., 16730., 17650., 12872.,  9966.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,  8324.,  5434.,  4090., 10724., 11924., 13124., 14324.,  8914.,  6610., 16724., 17924., 19124., 20324., 12394.,  8100., 18984., 20040., 21096., 22152., 12788.,  6110., 13836., 14492., 15148., 15804.,  8870.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  7150.,  7540., 10270., 10800., 13775., 14450., 14400., 15100., 12370., 12940.,  9925., 10360.,  8828.,  9176., 12448., 12920., 16420., 17020., 17020., 17640., 14384., 14888., 11372., 11756.,  9132.,  9420., 12750., 13140., 16665., 17160., 17190., 17700., 14394., 14808., 11283., 11598.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  18.,  20.,  14.,  18.,  48.,  58.,  68.,  78.,  88.,  98., 108., 118.,  74.,  80.,  59.,  68., 169., 190., 211., 232., 253., 274., 295., 316., 188., 200., 149., 158., 379., 400., 421., 442., 463., 484., 505., 526., 308., 320., 239., 248., 589., 610., 631., 652., 673., 694., 715., 736., 428., 440., 278., 286., 644., 662., 680., 698., 716., 734., 752., 770., 430., 440., 205., 210., 461., 472., 483., 494., 505., 516., 527., 538., 294., 300.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6100.,  6812.,  8064.,  8992., 10164., 11340., 10092., 11300.,  6304.,  7232.,  5100.,  5844.,  3895.,  4517.,  6368.,  7160.,  8159.,  9145.,  8521.,  9499.,  6624.,  7352.,  5489.,  6071.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   88.,  108.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  528.,  600.,  672.,  744.,  816.,  526.,  570.,  391.,  457., 1172., 1328., 1484., 1640., 1796., 1952., 2108., 2264., 1369., 1459., 1051., 1117., 2732., 2888., 3044., 3200., 3356., 3512., 3668., 3824., 2269., 2359., 1711., 1777., 4292., 4448., 4604., 4760., 4916., 5072., 5228., 5384., 3169., 3259., 2066., 2126., 4824., 4960., 5096., 5232., 5368., 5504., 5640., 5776., 3246., 3322., 1549., 1587., 3500., 3584., 3668., 3752., 3836., 3920., 4004., 4088., 2243., 2289.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  3848.,  4392.,  4936.,  5480.,  6024.,  3948.,  4284.,  2810.,  3314.,  8668.,  9868., 11068., 12268., 13468., 14668., 15868., 17068., 10418., 11114.,  7850.,  8354., 19388., 20588., 18460., 19660., 20860., 22060., 23260., 24460., 14050., 14746., 11610., 12114., 22684., 23884., 17660., 18860., 20060., 21260., 22460., 23660., 13586., 14282., 10524., 10988., 15016., 16072.,  5608.,  6664.,  7720.,  8776.,  9832., 10888.,  6252.,  6844.,  2558.,  2854.,  6260.,  6916.,  7572.,  8228.,  8884.,  9540., 10196., 10852.,  5990.,  6350.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1056.,  1128.,  1200.,  1272.,  1734.,  1836.,  1938.,  2040.,  2595.,  2730.,  2865.,  3000.,  3030.,  3180.,  3330.,  3480.,  2886.,  3012.,  3138.,  3264.,  2523.,  2622.,  2721.,  2820.,  2596.,  2728.,  2860.,  2992.,  3944.,  4128.,  4312.,  4496.,  5560.,  5800.,  6040.,  6280.,  6084.,  6344.,  6604.,  6864.,  5224.,  5440.,  5656.,  5872.,  4432.,  4600.,  4768.,  4936.,  4466.,  4676.,  4886.,  5096.,  6554.,  6844.,  7134.,  7424.,  9039.,  9414.,  9789., 10164.,  9688., 10088., 10488., 10888.,  8090.,  8420.,  8750.,  9080.,  6803.,  7058.,  7313.,  7568.,  6596.,  6896.,  7196.,  7496.,  9506.,  9916., 10326., 10736., 12933., 13458., 13983., 14508., 13582., 14132., 14682., 15232., 11138., 11588., 12038., 12488.,  9269.,  9614.,  9959., 10304.,  8726.,  9116.,  9506.,  9896., 12458., 12988., 13518., 14048., 16827., 17502., 18177., 18852., 17476., 18176., 18876., 19576., 14186., 14756., 15326., 15896., 11735., 12170., 12605., 13040., 10204., 10552., 10900., 11248., 14184., 14656., 15128., 15600., 18736., 19336., 19936., 20536., 19340., 19960., 20580., 21200., 15208., 15712., 16216., 16720., 12376., 12760., 13144., 13528.,  8952.,  9240.,  9528.,  9816., 12182., 12572., 12962., 13352., 15875., 16370., 16865., 17360., 16334., 16844., 17354., 17864., 12246., 12660., 13074., 13488.,  9963., 10278., 10593., 10908.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,  146.,  156.,  166.,  176.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  109.,  118.,  127.,  136.,  317.,  338.,  359.,  380.,  401.,  422.,  443.,  464.,  485.,  506.,  527.,  548.,  569.,  590.,  611.,  632.,  364.,  376.,  388.,  400.,  289.,  298.,  307.,  316.,  737.,  758.,  779.,  800.,  821.,  842.,  863.,  884.,  905.,  926.,  947.,  968.,  989., 1010., 1031., 1052.,  604.,  616.,  628.,  640.,  469.,  478.,  487.,  496., 1157., 1178., 1199., 1220., 1241., 1262., 1283., 1304., 1325., 1346., 1367., 1388., 1409., 1430., 1451., 1472.,  844.,  856.,  868.,  880.,  548.,  556.,  564.,  572., 1270., 1288., 1306., 1324., 1342., 1360., 1378., 1396., 1414., 1432., 1450., 1468., 1486., 1504., 1522., 1540.,  850.,  860.,  870.,  880.,  405.,  410.,  415.,  420.,  911.,  922.,  933.,  944.,  955.,  966.,  977.,  988.,  999., 1010., 1021., 1032., 1043., 1054., 1065., 1076.,  582.,  588.,  594.,  600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  4748.,  5460.,  6172.,  6884.,  5248.,  6176.,  7104.,  8032.,  8140.,  9316., 10492., 11668.,  8612.,  9820., 11028., 12236.,  6272.,  7200.,  8128.,  9056.,  5476.,  6220.,  6964.,  7708.,  2871.,  3493.,  4115.,  4737.,  5320.,  6112.,  6904.,  7696.,  7251.,  8237.,  9223., 10209.,  6957.,  7935.,  8913.,  9891.,  4824.,  5552.,  6280.,  7008.,  3785.,  4367.,  4949.,  5531.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,  1000.,  1072.,  1144.,  1216.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   731.,   797.,   863.,   929.,  2224.,  2380.,  2536.,  2692.,  2848.,  3004.,  3160.,  3316.,  3472.,  3628.,  3784.,  3940.,  4096.,  4252.,  4408.,  4564.,  2669.,  2759.,  2849.,  2939.,  2051.,  2117.,  2183.,  2249.,  5344.,  5500.,  5656.,  5812.,  5968.,  6124.,  6280.,  6436.,  6592.,  6748.,  6904.,  7060.,  7216.,  7372.,  7528.,  7684.,  4469.,  4559.,  4649.,  4739.,  3371.,  3437.,  3503.,  3569.,  8464.,  8620.,  8776.,  8932.,  9088.,  9244.,  9400.,  9556.,  9712.,  9868., 10024., 10180., 10336., 10492., 10648., 10804.,  6269.,  6359.,  6449.,  6539.,  4086.,  4146.,  4206.,  4266.,  9544.,  9680.,  9816.,  9952., 10088., 10224., 10360., 10496., 10632., 10768., 10904., 11040., 11176., 11312., 11448., 11584.,  6434.,  6510.,  6586.,  6662.,  3069.,  3107.,  3145.,  3183.,  6936.,  7020.,  7104.,  7188.,  7272.,  7356.,  7440.,  7524.,  7608.,  7692.,  7776.,  7860.,  7944.,  8028.,  8112.,  8196.,  4451.,  4497.,  4543.,  4589.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,  2046.,   940.,  1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  7336.,  7880.,  7144.,  7688.,  8232.,  8776.,  5992.,  6536.,  7080.,  7624.,  4348.,  4684.,  5020.,  5356.,  4010.,  4514.,  5018.,  5522., 11948., 13148., 14348., 15548., 16748., 17948., 19148., 20348., 16172., 17372., 18572., 19772., 13548., 14748., 15948., 17148.,  9634., 10330., 11026., 11722.,  8714.,  9218.,  9722., 10226., 21868., 23068., 24268., 25468., 23340., 24540., 25740., 26940., 18668., 19868., 21068., 22268., 11948., 13148., 14348., 15548.,  8706.,  9402., 10098., 10794.,  8042.,  8546.,  9050.,  9554., 16172., 17372., 18572., 19772., 13548., 14748., 15948., 17148., 18348., 19548., 20748., 21948., 21868., 23068., 24268., 25468., 11874., 12570., 13266., 13962., 11276., 11740., 12204., 12668., 17832., 18888., 19944., 21000., 10536., 11592., 12648., 13704., 14760., 15816., 16872., 17928., 13608., 14664., 15720., 16776.,  4700.,  5292.,  5884.,  6476.,  4926.,  5222.,  5518.,  5814., 12100., 12756., 13412., 14068., 14724., 15380., 16036., 16692., 17348., 18004., 18660., 19316., 10500., 11156., 11812., 12468.,   230.,   590.,   950.,  1310.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  351.,   560.,   820.,   940.,  1060.,   980.,   837.,   892.,  1360.,  1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,  4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,  4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5296.,  7440.,  9780., 10090., 10400.,  8752.,  6892.,  5445.,  7580.,  9880., 10150., 10420.,  8696.,  6795.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,  10.,  16.,  22.,  22.,  15.,  10.,  32.,  68.,  89., 110.,  96.,  60.,  42., 114., 219., 264., 309., 252., 150., 102., 249., 444., 489., 534., 417., 240., 162., 384., 669., 714., 759., 582., 330., 196., 440., 734., 773., 812., 600., 330., 147., 322., 526., 550., 574., 416., 225.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7747., 10812., 13049., 11951., 10501.,  7260.,  4815.,  6252.,  8784.,  9828., 11020., 11348.,  9456.,  7260.,  5989.,  8612., 11039., 11281., 10019.,  6852.,  4425.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  150.,  105.,   58.,  204.,  454.,  610.,  766.,  684.,  434.,  279.,  786., 1545., 1887., 2229., 1842., 1107.,  729., 1806., 3255., 3597., 3939., 3102., 1797., 1179., 2826., 4965., 5307., 5649., 4362., 2487., 1474., 3324., 5566., 5866., 6166., 4572., 2522., 1121., 2462., 4031., 4217., 4403., 3198., 1733.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 18600., 24864., 25944., 26424., 22488., 16416.,  8872., 11694., 17928., 21138., 18474., 17538., 12424.,  9758.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4484.,  5684.,  5144.,  3292.,  2010.,  5796., 11550., 14214., 16878., 14052.,  8490.,  5490., 13076., 22566., 22542., 25206., 19540., 11202.,  8330., 15620., 24750., 21654., 24318., 18884., 10842.,  7708., 10584., 14516.,  8036., 10388.,  8536.,  5116.,  1966.,  4652.,  8122.,  9586., 11050.,  8428.,  4766.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  8230.,  8680., 11790., 12400., 15775., 16550., 16400., 17200., 17025., 17850., 14570., 15240., 11650., 12160., 10190., 10592., 14336., 14880., 18870., 19560., 19470., 20180., 20070., 20800., 16912., 17504., 13334., 13784., 10557., 10890., 14710., 15160., 19190., 19760., 19715., 20300., 20240., 20840., 16906., 17392., 13221., 13590.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   39.,   44.,   27.,   30.,   15.,   20.,   52.,   64.,  115.,  136.,  157.,  178.,  199.,  220.,  176.,  192.,  111.,  120.,   72.,   84.,  201.,  228.,  393.,  438.,  483.,  528.,  573.,  618.,  471.,  504.,  282.,  300.,  192.,  204.,  471.,  498.,  843.,  888.,  933.,  978., 1023., 1068.,  801.,  834.,  462.,  480.,  312.,  324.,  741.,  768., 1293., 1338., 1383., 1428., 1473., 1518., 1131., 1164.,  642.,  660.,  381.,  392.,  856.,  880., 1429., 1468., 1507., 1546., 1585., 1624., 1172., 1200.,  645.,  660.,  287.,  294.,  629.,  644., 1028., 1052., 1076., 1100., 1124., 1148.,  815.,  832.,  441.,  450.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  8361.,  9499., 11584., 13096., 13121., 14919., 11863., 13605., 12045., 13603.,  8824., 10048.,  5849.,  6699.,  8120.,  9008., 10544., 11792., 11120., 12632., 12328., 13872., 11904., 13352.,  9072., 10192.,  5432.,  6192.,  6181.,  6907.,  9320., 10336., 10385., 11587.,  9979., 11173.,  8709.,  9767.,  5328.,  6120.,  4373.,  4875.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   272.,   308.,   193.,   215.,    88.,   124.,   340.,   428.,   788.,   944.,  1100.,  1256.,  1412.,  1568.,  1276.,  1396.,   816.,   884.,   489.,   579.,  1416.,  1620.,  2829.,  3171.,  3513.,  3855.,  4197.,  4539.,  3492.,  3744.,  2109.,  2247.,  1389.,  1479.,  3456.,  3660.,  6249.,  6591.,  6933.,  7275.,  7617.,  7959.,  6012.,  6264.,  3489.,  3627.,  2289.,  2379.,  5496.,  5700.,  9669., 10011., 10353., 10695., 11037., 11379.,  8532.,  8784.,  4869.,  5007.,  2884.,  2968.,  6508.,  6692., 10904., 11204., 11504., 11804., 12104., 12404.,  8980.,  9196.,  4956.,  5072.,  2201.,  2255.,  4836.,  4952.,  7921.,  8107.,  8293.,  8479.,  8665.,  8851.,  6296.,  6428.,  3413.,  3483.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1826.,  2138.,  2020.,  2292.,  1454.,  1622.,   580.,   852.,  2424.,  3096.,  5788.,  6988.,  7548.,  8748.,  8284.,  9484.,  5336.,  6264.,  3556.,  4084.,  2930.,  3626.,  8268.,  9852., 16398., 19062., 18014., 20678., 18606., 21270., 11996., 13964.,  7842.,  8922.,  6178.,  6874., 15020., 16604., 26526., 29190., 22382., 25046., 19902., 22566., 10684., 12652.,  7122.,  8202.,  5714.,  6410., 10892., 12476., 18606., 21270., 18174., 20838., 22862., 25526., 18204., 20172.,  9474., 10554.,  8212.,  8868., 12440., 13880., 18700., 21052., 14572., 16924., 15564., 17916., 11256., 12952.,  3892.,  4804.,  3662.,  4086.,  8724.,  9636., 15314., 16778., 18242., 19706., 14386., 15850.,  8388.,  9428.,   350.,   902.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1161.,  1242.,  1323.,  1404.,  1898.,  2012.,  2126.,  2240.,  2830.,  2980.,  3130.,  3280.,  3265.,  3430.,  3595.,  3760.,  3700.,  3880.,  4060.,  4240.,  3470.,  3620.,  3770.,  3920.,  2997.,  3114.,  3231.,  3348.,  2926.,  3076.,  3226.,  3376.,  4432.,  4640.,  4848.,  5056.,  6230.,  6500.,  6770.,  7040.,  6754.,  7044.,  7334.,  7624.,  7278.,  7588.,  7898.,  8208.,  6208.,  6464.,  6720.,  6976.,  5230.,  5428.,  5626.,  5824.,  5088.,  5328.,  5568.,  5808.,  7442.,  7772.,  8102.,  8432., 10233., 10658., 11083., 11508., 10882., 11332., 11782., 12232., 11531., 12006., 12481., 12956.,  9582.,  9972., 10362., 10752.,  8012.,  8312.,  8612.,  8912.,  7573.,  7918.,  8263.,  8608., 10886., 11356., 11826., 12296., 14776., 15376., 15976., 16576., 15425., 16050., 16675., 17300., 16074., 16724., 17374., 18024., 13138., 13668., 14198., 14728., 10889., 11294., 11699., 12104., 10058., 10508., 10958., 11408., 14330., 14940., 15550., 16160., 19319., 20094., 20869., 21644., 19968., 20768., 21568., 22368., 20617., 21442., 22267., 23092., 16694., 17364., 18034., 18704., 13766., 14276., 14786., 15296., 11786., 12188., 12590., 12992., 16352., 16896., 17440., 17984., 21562., 22252., 22942., 23632., 22166., 22876., 23586., 24296., 22770., 23500., 24230., 24960., 17872., 18464., 19056., 19648., 14506., 14956., 15406., 15856., 10349., 10682., 11015., 11348., 14058., 14508., 14958., 15408., 18290., 18860., 19430., 20000., 18749., 19334., 19919., 20504., 19208., 19808., 20408., 21008., 14382., 14868., 15354., 15840., 11673., 12042., 12411., 12780.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  251.,  272.,  293.,  314.,  335.,  356.,  377.,  398.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  132.,  144.,  156.,  168.,  375.,  402.,  429.,  456.,  741.,  786.,  831.,  876.,  921.,  966., 1011., 1056., 1101., 1146., 1191., 1236.,  909.,  942.,  975., 1008.,  546.,  564.,  582.,  600.,  372.,  384.,  396.,  408.,  915.,  942.,  969.,  996., 1641., 1686., 1731., 1776., 1821., 1866., 1911., 1956., 2001., 2046., 2091., 2136., 1569., 1602., 1635., 1668.,  906.,  924.,  942.,  960.,  612.,  624.,  636.,  648., 1455., 1482., 1509., 1536., 2541., 2586., 2631., 2676., 2721., 2766., 2811., 2856., 2901., 2946., 2991., 3036., 2229., 2262., 2295., 2328., 1266., 1284., 1302., 1320.,  751.,  762.,  773.,  784., 1688., 1712., 1736., 1760., 2819., 2858., 2897., 2936., 2975., 3014., 3053., 3092., 3131., 3170., 3209., 3248., 2316., 2344., 2372., 2400., 1275., 1290., 1305., 1320.,  567.,  574.,  581.,  588., 1243., 1258., 1273., 1288., 2032., 2056., 2080., 2104., 2128., 2152., 2176., 2200., 2224., 2248., 2272., 2296., 1613., 1630., 1647., 1664.,  873.,  882.,  891.,  900.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  7413.,  8551.,  9689., 10827., 11080., 12592., 14104., 15616., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423.,  8816., 10040., 11264., 12488.,  6157.,  7007.,  7857.,  8707.,  6096.,  6984.,  7872.,  8760.,  8432.,  9680., 10928., 12176.,  9672., 11184., 12696., 14208., 10656., 12200., 13744., 15288., 10520., 11968., 13416., 14864.,  8080.,  9200., 10320., 11440.,  3952.,  4712.,  5472.,  6232.,  4421.,  5147.,  5873.,  6599.,  6832.,  7848.,  8864.,  9880.,  8597.,  9799., 11001., 12203.,  8815., 10009., 11203., 12397.,  7401.,  8459.,  9517., 10575.,  3720.,  4512.,  5304.,  6096.,  3789.,  4291.,  4793.,  5295.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1768.,  1924.,  2080.,  2236.,  2392.,  2548.,  2704.,  2860.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,   909.,   999.,  1089.,  1179.,  2676.,  2880.,  3084.,  3288.,  5397.,  5739.,  6081.,  6423.,  6765.,  7107.,  7449.,  7791.,  8133.,  8475.,  8817.,  9159.,  6792.,  7044.,  7296.,  7548.,  4113.,  4251.,  4389.,  4527.,  2709.,  2799.,  2889.,  2979.,  6756.,  6960.,  7164.,  7368., 12237., 12579., 12921., 13263., 13605., 13947., 14289., 14631., 14973., 15315., 15657., 15999., 11832., 12084., 12336., 12588.,  6873.,  7011.,  7149.,  7287.,  4509.,  4599.,  4689.,  4779., 10836., 11040., 11244., 11448., 19077., 19419., 19761., 20103., 20445., 20787., 21129., 21471., 21813., 22155., 22497., 22839., 16872., 17124., 17376., 17628.,  9633.,  9771.,  9909., 10047.,  5704.,  5788.,  5872.,  5956., 12876., 13060., 13244., 13428., 21580., 21880., 22180., 22480., 22780., 23080., 23380., 23680., 23980., 24280., 24580., 24880., 17796., 18012., 18228., 18444.,  9824.,  9940., 10056., 10172.,  4361.,  4415.,  4469.,  4523.,  9584.,  9700.,  9816.,  9932., 15701., 15887., 16073., 16259., 16445., 16631., 16817., 17003., 17189., 17375., 17561., 17747., 12492., 12624., 12756., 12888.,  6773.,  6843.,  6913.,  6983.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2194.,  2506.,  2818.,  3130.,  2802.,  3114.,  3426.,  3738.,  2196.,  2468.,  2740.,  3012.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  2104.,  2776.,  3448.,  4120.,  5804.,  7004.,  8204.,  9404.,  9964., 11164., 12364., 13564.,  9388., 10588., 11788., 12988.,  5336.,  6264.,  7192.,  8120.,  1012.,  1540.,  2068.,  2596.,  1698.,  2394.,  3090.,  3786.,  7068.,  8652., 10236., 11820., 16238., 18902., 21566., 24230., 21518., 24182., 26846., 29510., 17966., 20630., 23294., 25958., 10572., 12540., 14508., 16476.,  3474.,  4554.,  5634.,  6714.,  4482.,  5178.,  5874.,  6570., 12764., 14348., 15932., 17516., 21518., 24182., 26846., 29510., 17966., 20630., 23294., 25958., 15054., 17718., 20382., 23046.,  9612., 11580., 13548., 15516.,  7794.,  8874.,  9954., 11034.,  6626.,  7322.,  8018.,  8714., 13724., 15308., 16892., 18476., 17966., 20630., 23294., 25958., 15054., 17718., 20382., 23046., 16238., 18902., 21566., 24230., 15820., 17788., 19756., 21724.,  9426., 10506., 11586., 12666.,  5508.,  6164.,  6820.,  7476.,  7704.,  9144., 10584., 12024., 12860., 15212., 17564., 19916., 13436., 15788., 18140., 20492., 19132., 21484., 23836., 26188., 15672., 17368., 19064., 20760.,  7204.,  8116.,  9028.,  9940.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  6274.,  7738.,  9202., 10666., 12130., 13594., 15058., 16522., 11202., 12666., 14130., 15594.,  7284.,  8324.,  9364., 10404.,   350.,   902.,  1454.,  2006.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6004.,  8420., 11050., 11360., 11670., 11980., 10060.,  7906.,  6180.,  8590., 11180., 11450., 11720., 11990.,  9988.,  7791.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,   74.,  130.,  166.,  161.,  133.,   80.,   50.,  133.,  252.,  410.,  488.,  441.,  346.,  200.,  125.,  298.,  522.,  800.,  878.,  756.,  571.,  320.,  200.,  463.,  792., 1190., 1268., 1071.,  796.,  440.,  249.,  549.,  902., 1310., 1378., 1127.,  815.,  440.,  189.,  408.,  658.,  940.,  982.,  790.,  563.,  300.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  4704.,  7008.,  9728., 11016., 12304., 13592., 11296.,  9416.,  2243.,  3132.,  4297.,  5275.,  6253.,  7231.,  5012.,  4413.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   233.,   218.,   143.,    64.,   224.,   496.,   896.,  1168.,  1156.,   968.,   588.,   337.,   926.,  1791.,  2956.,  3556.,  3249.,  2570.,  1495.,   907.,  2186.,  3861.,  5956.,  6556.,  5679.,  4310.,  2425.,  1477.,  3446.,  5931.,  8956.,  9556.,  8109.,  6050.,  3355.,  1892.,  4184.,  6892., 10032., 10560.,  8656.,  6272.,  3392.,  1453.,  3142.,  5075.,  7260.,  7588.,  6113.,  4362.,  2327.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1322.,  3716.,  7182., 11592., 11560., 10310.,  7220.,  4466.,  2562.,  4084.,  6614., 10344.,  8776.,  8846.,  7140.,  3466.,  1684.,  4168.,  7388., 11472.,  9360.,  7916.,  5224.,  1156.,   190.,   716.,  1642.,  3032.,  3256.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 11552., 12008., 16224., 16840., 21320., 22100., 21920., 22720., 22520., 23340., 23120., 23960., 19440., 20120., 15296., 15812., 11982., 12360., 16670., 17180., 21715., 22360., 22240., 22900., 22765., 23440., 23290., 23980., 19418., 19976., 15159., 15582.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   59.,   68.,   55.,   62.,   36.,   40.,   16.,   22.,   56.,   70.,  124.,  148.,  224.,  260.,  296.,  332.,  292.,  322.,  244.,  266.,  148.,  160.,   85.,  100.,  233.,  266.,  450.,  504.,  742.,  820.,  898.,  976.,  819.,  882.,  647.,  692.,  376.,  400.,  235.,  250.,  563.,  596.,  990., 1044., 1522., 1600., 1678., 1756., 1449., 1512., 1097., 1142.,  616.,  640.,  385.,  400.,  893.,  926., 1530., 1584., 2302., 2380., 2458., 2536., 2079., 2142., 1547., 1592.,  856.,  880.,  484.,  498., 1068., 1098., 1756., 1804., 2552., 2620., 2688., 2756., 2200., 2254., 1592., 1630.,  860.,  880.,  369.,  378.,  797.,  816., 1286., 1316., 1838., 1880., 1922., 1964., 1547., 1580., 1103., 1126.,  588.,  600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  4892.,  5444.,  7584.,  8384.,  9708., 10788., 11012., 12252., 12316., 13716., 13620., 15180., 11328., 12640.,  9028., 10060.,  2195.,  2513.,  3248.,  3720.,  4611.,  5261.,  5581.,  6351.,  6551.,  7441.,  7521.,  8531.,  5568.,  6424.,  4985.,  5663.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1584.,  1856.,  2128.,  2400.,  2138.,  2366.,  1808.,  1976.,  1106.,  1198.,   587.,   701.,  1660.,  1912.,  3267.,  3681.,  5456.,  6056.,  6656.,  7256.,  6129.,  6615.,  4876.,  5224.,  2849.,  3035.,  1727.,  1841.,  4180.,  4432.,  7407.,  7821., 11456., 12056., 12656., 13256., 10989., 11475.,  8356.,  8704.,  4709.,  4895.,  2867.,  2981.,  6700.,  6952., 11547., 11961., 17456., 18056., 18656., 19256., 15849., 16335., 11836., 12184.,  6569.,  6755.,  3702.,  3810.,  8192.,  8424., 13502., 13874., 19664., 20192., 20720., 21248., 16994., 17414., 12320., 12616.,  6666.,  6822.,  2853.,  2923.,  6172.,  6320.,  9973., 10207., 14272., 14600., 14928., 15256., 12031., 12289.,  8588.,  8768.,  4583.,  4677.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1266.,  1356.,  1446.,  1536.,  2062.,  2188.,  2314.,  2440.,  3065.,  3230.,  3395.,  3560.,  3500.,  3680.,  3860.,  4040.,  3935.,  4130.,  4325.,  4520.,  4370.,  4580.,  4790.,  5000.,  4054.,  4228.,  4402.,  4576.,  3471.,  3606.,  3741.,  3876.,  3256.,  3424.,  3592.,  3760.,  4920.,  5152.,  5384.,  5616.,  6900.,  7200.,  7500.,  7800.,  7424.,  7744.,  8064.,  8384.,  7948.,  8288.,  8628.,  8968.,  8472.,  8832.,  9192.,  9552.,  7192.,  7488.,  7784.,  8080.,  6028.,  6256.,  6484.,  6712.,  5710.,  5980.,  6250.,  6520.,  8330.,  8700.,  9070.,  9440., 11427., 11902., 12377., 12852., 12076., 12576., 13076., 13576., 12725., 13250., 13775., 14300., 13374., 13924., 14474., 15024., 11074., 11524., 11974., 12424.,  9221.,  9566.,  9911., 10256.,  8550.,  8940.,  9330.,  9720., 12266., 12796., 13326., 13856., 16619., 17294., 17969., 18644., 17268., 17968., 18668., 19368., 17917., 18642., 19367., 20092., 18566., 19316., 20066., 20816., 15138., 15748., 16358., 16968., 12509., 12974., 13439., 13904., 11390., 11900., 12410., 12920., 16202., 16892., 17582., 18272., 21811., 22686., 23561., 24436., 22460., 23360., 24260., 25160., 23109., 24034., 24959., 25884., 23758., 24708., 25658., 26608., 19202., 19972., 20742., 21512., 15797., 16382., 16967., 17552., 13368., 13824., 14280., 14736., 18520., 19136., 19752., 20368., 24388., 25168., 25948., 26728., 24992., 25792., 26592., 27392., 25596., 26416., 27236., 28056., 26200., 27040., 27880., 28720., 20536., 21216., 21896., 22576., 16636., 17152., 17668., 18184., 11746., 12124., 12502., 12880., 15934., 16444., 16954., 17464., 20705., 21350., 21995., 22640., 21164., 21824., 22484., 23144., 21623., 22298., 22973., 23648., 22082., 22772., 23462., 24152., 16518., 17076., 17634., 18192., 13383., 13806., 14229., 14652.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  109.,  118.,  127.,  136.,  103.,  110.,  117.,  124.,   68.,   72.,   76.,   80.,   26.,   32.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  272.,  296.,  412.,  448.,  484.,  520.,  556.,  592.,  628.,  664.,  554.,  584.,  614.,  644.,  466.,  488.,  510.,  532.,  284.,  296.,  308.,  320.,  155.,  170.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  954., 1008., 1406., 1484., 1562., 1640., 1718., 1796., 1874., 1952., 1575., 1638., 1701., 1764., 1249., 1294., 1339., 1384.,  728.,  752.,  776.,  800.,  455.,  470.,  485.,  500., 1093., 1126., 1159., 1192., 1926., 1980., 2034., 2088., 2966., 3044., 3122., 3200., 3278., 3356., 3434., 3512., 2835., 2898., 2961., 3024., 2149., 2194., 2239., 2284., 1208., 1232., 1256., 1280.,  755.,  770.,  785.,  800., 1753., 1786., 1819., 1852., 3006., 3060., 3114., 3168., 4526., 4604., 4682., 4760., 4838., 4916., 4994., 5072., 4095., 4158., 4221., 4284., 3049., 3094., 3139., 3184., 1688., 1712., 1736., 1760.,  954.,  968.,  982.,  996., 2106., 2136., 2166., 2196., 3464., 3512., 3560., 3608., 5036., 5104., 5172., 5240., 5308., 5376., 5444., 5512., 4346., 4400., 4454., 4508., 3146., 3184., 3222., 3260., 1700., 1720., 1740., 1760.,  729.,  738.,  747.,  756., 1575., 1594., 1613., 1632., 2542., 2572., 2602., 2632., 3634., 3676., 3718., 3760., 3802., 3844., 3886., 3928., 3061., 3094., 3127., 3160., 2183., 2206., 2229., 2252., 1164., 1176., 1188., 1200.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  2003.,  2321.,  2639.,  2957.,  3160.,  3632.,  4104.,  4576.,  4759.,  5409.,  6059.,  6709.,  5585.,  6355.,  7125.,  7895.,  6411.,  7301.,  8191.,  9081.,  7237.,  8247.,  9257., 10267.,  5688.,  6544.,  7400.,  8256.,  5009.,  5687.,  6365.,  7043.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   779.,   845.,   911.,   977.,   752.,   804.,   856.,   908.,   503.,   533.,   563.,   593.,   154.,   198.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1930.,  2110.,  2960.,  3232.,  3504.,  3776.,  4048.,  4320.,  4592.,  4864.,  4102.,  4330.,  4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  2142.,  2234.,  2326.,  2418.,  1087.,  1201.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  7047.,  7461., 10456., 11056., 11656., 12256., 12856., 13456., 14056., 14656., 11889., 12375., 12861., 13347.,  9488.,  9836., 10184., 10532.,  5557.,  5743.,  5929.,  6115.,  3367.,  3481.,  3595.,  3709.,  7784.,  8036.,  8288.,  8540., 13219., 13633., 14047., 14461., 19768., 20368., 20968., 21568., 20248., 20848., 21448., 22048., 17385., 17871., 18357., 18843., 13120., 13468., 13816., 14164.,  7357.,  7543.,  7729.,  7915.,  5263.,  5377.,  5491.,  5605.,  9496.,  9748., 10000., 10252., 14715., 15129., 15543., 15957., 21016., 21616., 22216., 22816., 19448., 20048., 20648., 21248., 16737., 17223., 17709., 18195., 12656., 13004., 13352., 13700.,  7109.,  7295.,  7481.,  7667.,  4890.,  4998.,  5106.,  5214.,  6352.,  6584.,  6816.,  7048.,  8418.,  8790.,  9162.,  9534., 11152., 11680., 12208., 12736.,  7248.,  7776.,  8304.,  8832.,  6790.,  7210.,  7630.,  8050.,  5472.,  5768.,  6064.,  6360.,  3230.,  3386.,  3542.,  3698.,  1173.,  1243.,  1313.,  1383.,  2760.,  2908.,  3056.,  3204.,  4793.,  5027.,  5261.,  5495.,  7304.,  7632.,  7960.,  8288.,  8616.,  8944.,  9272.,  9600.,  7355.,  7613.,  7871.,  8129.,  5520.,  5700.,  5880.,  6060.,  3079.,  3173.,  3267.,  3361.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  318.,   510.,   750.,   870.,   816.,   705.,   796.,  1220.,  1730.,  1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,  2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3770.,  5400.,  7225.,  7550.,  6470.,  5180.,  4850.,  6900.,  9175.,  9500.,  8090.,  6440.,  5632.,  7900., 10370., 10680.,  8980.,  7066.,  5628.,  7830., 10200., 10470.,  8736.,  6825.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  10.,   9.,  29.,  39.,  49.,  59.,  40.,  34.,  95., 116., 137., 158., 100.,  86., 222., 258., 294., 330., 200., 166., 402., 438., 474., 510., 300., 220., 503., 536., 569., 602., 340., 217., 483., 509., 535., 561., 310., 147., 322., 337., 352., 367., 200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6487.,  8396., 10805., 10443.,  6756.,  6097.,  5224.,  8000., 11224., 12160., 10112.,  8480.,  5803.,  7836., 10177., 10163.,  7044.,  5913.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,   67.,   52.,  184.,  256.,  328.,  400.,  280.,  221.,  646.,  802.,  958., 1114.,  719.,  592., 1568., 1840., 2112., 2384., 1464., 1192., 2928., 3200., 3472., 3744., 2224., 1637., 3766., 4018., 4270., 4522., 2567., 1640., 3664., 3864., 4064., 4264., 2364., 1121., 2462., 2578., 2694., 2810., 1535.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,  8324.,  5434.,  4360., 11088., 11536., 13648., 15760.,  9512.,  8360., 17296., 15696., 17808., 19920., 11720.,  9922., 17972., 14180., 16148., 18116., 10458.,  8004., 11240.,  5000.,  6568.,  8136.,  4884.,  1966.,  4652.,  5564.,  6476.,  7388.,  4214.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  7150.,  7540., 10270., 10800., 13775., 14450., 14400., 15100., 12370., 12940.,  9925., 10360.,  9220.,  9700., 13150., 13800., 17525., 18350., 18150., 19000., 15490., 16180., 12355., 12880., 10844., 11264., 15232., 15800., 20020., 20740., 20620., 21360., 17360., 17960., 13676., 14132., 10914., 11256., 15198., 15660., 19815., 20400., 20340., 20940., 16986., 17472., 13281., 13650.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   18.,   20.,   14.,   18.,   48.,   58.,   68.,   78.,   88.,   98.,  108.,  118.,   74.,   80.,   59.,   68.,  169.,  190.,  211.,  232.,  253.,  274.,  295.,  316.,  188.,  200.,  156.,  172.,  408.,  444.,  480.,  516.,  552.,  588.,  624.,  660.,  380.,  400.,  316.,  332.,  768.,  804.,  840.,  876.,  912.,  948.,  984., 1020.,  580.,  600.,  425.,  440.,  973., 1006., 1039., 1072., 1105., 1138., 1171., 1204.,  662.,  680.,  422.,  434.,  940.,  966.,  992., 1018., 1044., 1070., 1096., 1122.,  606.,  620.,  287.,  294.,  629.,  644.,  659.,  674.,  689.,  704.,  719.,  734.,  392.,  400.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6845.,  7839.,  9456., 10776., 12429., 14115., 12547., 14305.,  8848., 10232.,  7459.,  8557.,  7460.,  8364., 10304., 11488., 12644., 14140., 13340., 14868., 10336., 11520.,  7740.,  8676.,  5723.,  6393.,  7760.,  8616.,  8379.,  9445.,  7461.,  8519.,  6096.,  6888.,  5461.,  6091.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   88.,  108.,  128.,  148.,  168.,  123.,  137.,   82.,  110.,  312.,  384.,  456.,  528.,  600.,  672.,  744.,  816.,  526.,  570.,  391.,  457., 1172., 1328., 1484., 1640., 1796., 1952., 2108., 2264., 1369., 1459., 1092., 1212., 2928., 3200., 3472., 3744., 4016., 4288., 4560., 4832., 2812., 2964., 2292., 2412., 5648., 5920., 6192., 6464., 6736., 7008., 7280., 7552., 4332., 4484., 3187., 3301., 7340., 7592., 7844., 8096., 8348., 8600., 8852., 9104., 5029., 5167., 3210., 3302., 7176., 7376., 7576., 7776., 7976., 8176., 8376., 8576., 4646., 4754., 2201., 2255., 4836., 4952., 5068., 5184., 5300., 5416., 5532., 5648., 3023., 3085.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  3848.,  3752.,  4296.,  3176.,  3720.,  2284.,  2620.,  2170.,  2674.,  6364.,  7564.,  8764.,  9964.,  8476.,  9676.,  7164.,  8364.,  5042.,  5738.,  4792.,  5720., 12752., 14864., 15312., 17424., 14800., 16912., 13264., 15376.,  8792.,  9976.,  8696.,  9624., 19024., 21136., 19536., 21648., 16976., 19088., 12752., 14864.,  7448.,  8632.,  7754.,  8642., 14332., 16300., 12508., 14476., 16444., 18412., 17692., 19660.,  8706.,  9786.,  8764.,  9484., 13672., 15240.,  9000., 10568., 12136., 13704., 10536., 12104.,  3468.,  4316.,  3662.,  4086.,  8724.,  9636., 10548., 11460., 12372., 13284.,  7412.,  8324.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1056.,  1128.,  1200.,  1272.,  1734.,  1836.,  1938.,  2040.,  2595.,  2730.,  2865.,  3000.,  3030.,  3180.,  3330.,  3480.,  2886.,  3012.,  3138.,  3264.,  2523.,  2622.,  2721.,  2820.,  2596.,  2728.,  2860.,  2992.,  3944.,  4128.,  4312.,  4496.,  5560.,  5800.,  6040.,  6280.,  6084.,  6344.,  6604.,  6864.,  5224.,  5440.,  5656.,  5872.,  4432.,  4600.,  4768.,  4936.,  4466.,  4676.,  4886.,  5096.,  6554.,  6844.,  7134.,  7424.,  9039.,  9414.,  9789., 10164.,  9688., 10088., 10488., 10888.,  8090.,  8420.,  8750.,  9080.,  6803.,  7058.,  7313.,  7568.,  6596.,  6896.,  7196.,  7496.,  9506.,  9916., 10326., 10736., 12933., 13458., 13983., 14508., 13582., 14132., 14682., 15232., 11138., 11588., 12038., 12488.,  9269.,  9614.,  9959., 10304.,  8726.,  9116.,  9506.,  9896., 12458., 12988., 13518., 14048., 16827., 17502., 18177., 18852., 17476., 18176., 18876., 19576., 14186., 14756., 15326., 15896., 11735., 12170., 12605., 13040., 10856., 11336., 11816., 12296., 15410., 16060., 16710., 17360., 20721., 21546., 22371., 23196., 21370., 22220., 23070., 23920., 17234., 17924., 18614., 19304., 14201., 14726., 15251., 15776., 12244., 12664., 13084., 13504., 16968., 17536., 18104., 18672., 22360., 23080., 23800., 24520., 22964., 23704., 24444., 25184., 17992., 18592., 19192., 19792., 14608., 15064., 15520., 15976., 10542., 10884., 11226., 11568., 14318., 14780., 15242., 15704., 18629., 19214., 19799., 20384., 19088., 19688., 20288., 20888., 14286., 14772., 15258., 15744., 11601., 11970., 12339., 12708.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,  146.,  156.,  166.,  176.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  109.,  118.,  127.,  136.,  317.,  338.,  359.,  380.,  401.,  422.,  443.,  464.,  485.,  506.,  527.,  548.,  569.,  590.,  611.,  632.,  364.,  376.,  388.,  400.,  296.,  312.,  328.,  344.,  780.,  816.,  852.,  888.,  924.,  960.,  996., 1032., 1068., 1104., 1140., 1176., 1212., 1248., 1284., 1320.,  740.,  760.,  780.,  800.,  616.,  632.,  648.,  664., 1500., 1536., 1572., 1608., 1644., 1680., 1716., 1752., 1788., 1824., 1860., 1896., 1932., 1968., 2004., 2040., 1140., 1160., 1180., 1200.,  835.,  850.,  865.,  880., 1913., 1946., 1979., 2012., 2045., 2078., 2111., 2144., 2177., 2210., 2243., 2276., 2309., 2342., 2375., 2408., 1306., 1324., 1342., 1360.,  832.,  844.,  856.,  868., 1854., 1880., 1906., 1932., 1958., 1984., 2010., 2036., 2062., 2088., 2114., 2140., 2166., 2192., 2218., 2244., 1198., 1212., 1226., 1240.,  567.,  574.,  581.,  588., 1243., 1258., 1273., 1288., 1303., 1318., 1333., 1348., 1363., 1378., 1393., 1408., 1423., 1438., 1453., 1468.,  776.,  784.,  792.,  800.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  6025.,  7019.,  8013.,  9007.,  7736.,  9056., 10376., 11696., 10909., 12595., 14281., 15967., 11603., 13361., 15119., 16877.,  9384., 10768., 12152., 13536.,  8167.,  9265., 10363., 11461.,  5276.,  6180.,  7084.,  7988.,  8000.,  9184., 10368., 11552., 10556., 12052., 13548., 15044., 10516., 12044., 13572., 15100.,  8000.,  9184., 10368., 11552.,  6004.,  6940.,  7876.,  8812.,  4699.,  5369.,  6039.,  6709.,  6776.,  7632.,  8488.,  9344.,  7631.,  8697.,  9763., 10829.,  6825.,  7883.,  8941.,  9999.,  5256.,  6048.,  6840.,  7632.,  3949.,  4579.,  5209.,  5839.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,  1000.,  1072.,  1144.,  1216.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   731.,   797.,   863.,   929.,  2224.,  2380.,  2536.,  2692.,  2848.,  3004.,  3160.,  3316.,  3472.,  3628.,  3784.,  3940.,  4096.,  4252.,  4408.,  4564.,  2669.,  2759.,  2849.,  2939.,  2092.,  2212.,  2332.,  2452.,  5648.,  5920.,  6192.,  6464.,  6736.,  7008.,  7280.,  7552.,  7824.,  8096.,  8368.,  8640.,  8912.,  9184.,  9456.,  9728.,  5508.,  5660.,  5812.,  5964.,  4492.,  4612.,  4732.,  4852., 11088., 11360., 11632., 11904., 12176., 12448., 12720., 12992., 13264., 13536., 13808., 14080., 14352., 14624., 14896., 15168.,  8548.,  8700.,  8852.,  9004.,  6287.,  6401.,  6515.,  6629., 14488., 14740., 14992., 15244., 15496., 15748., 16000., 16252., 16504., 16756., 17008., 17260., 17512., 17764., 18016., 18268.,  9953., 10091., 10229., 10367.,  6350.,  6442.,  6534.,  6626., 14200., 14400., 14600., 14800., 15000., 15200., 15400., 15600., 15800., 16000., 16200., 16400., 16600., 16800., 17000., 17200.,  9210.,  9318.,  9426.,  9534.,  4361.,  4415.,  4469.,  4523.,  9584.,  9700.,  9816.,  9932., 10048., 10164., 10280., 10396., 10512., 10628., 10744., 10860., 10976., 11092., 11208., 11324.,  5999.,  6061.,  6123.,  6185.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,  1322.,  1826.,  2330.,  2834.,  5548.,  6748.,  7948.,  9148.,  9708., 10908., 12108., 13308., 10156., 11356., 12556., 13756.,  6508.,  7708.,  8908., 10108.,  2210.,  2906.,  3602.,  4298.,  3608.,  4536.,  5464.,  6392., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320.,  5304.,  6488.,  7672.,  8856.,  6680.,  7608.,  8536.,  9464., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320.,  8376.,  9560., 10744., 11928.,  7514.,  8402.,  9290., 10178., 15244., 17212., 19180., 21148., 10572., 12540., 14508., 16476., 10636., 12604., 14572., 16540., 15820., 17788., 19756., 21724.,  8914.,  9994., 11074., 12154.,  5548.,  6268.,  6988.,  7708.,  8040.,  9608., 11176., 12744.,  6504.,  8072.,  9640., 11208., 12776., 14344., 15912., 17480., 14312., 15880., 17448., 19016.,  6396.,  7244.,  8092.,  8940.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  5924.,  6836.,  7748.,  8660.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  351.,   560.,   820.,   940.,  1060.,   980.,   837.,   892.,  1360.,  1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,  4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,  4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5600.,  7950., 10550., 10875., 11200.,  9510.,  7550.,  6514.,  9120., 11950., 12260., 12570., 10544.,  8278.,  6516.,  9050., 11770., 12040., 12310., 10250.,  7992.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,   89.,  110.,   96.,   60.,   42.,  114.,  219.,  264.,  309.,  252.,  150.,  112.,  280.,  508.,  586.,  664.,  520.,  300.,  222.,  520.,  898.,  976., 1054.,  800.,  450.,  306.,  681., 1128., 1200., 1272.,  933.,  510.,  307.,  668., 1085., 1142., 1199.,  864.,  465.,  210.,  451.,  724.,  757.,  790.,  563.,  300.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7747., 10812., 13049., 11951., 10501.,  7260.,  4815.,  6353.,  8980., 10163., 11465., 11903., 10068.,  7853.,  6420.,  9328., 12124., 12676., 11724.,  8464.,  5828.,  3231.,  4460.,  6013.,  6991.,  5953.,  5452.,  4627.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  150.,  105.,   58.,  204.,  454.,  610.,  766.,  684.,  434.,  279.,  786., 1545., 1887., 2229., 1842., 1107.,  788., 2008., 3692., 4292., 4892., 3864., 2244., 1628., 3848., 6692., 7292., 7892., 6024., 3404., 2313., 5166., 8583., 9141., 9699., 7134., 3909., 2350., 5124., 8338., 8782., 9226., 6660., 3590., 1619., 3482., 5597., 5855., 6113., 4362., 2327.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598., 21016., 13370., 14920., 22496., 27192., 25944., 26424., 19616., 14344.,  9286., 14504., 19386., 21138., 18474., 15848., 11254.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4164.,  4532.,  2968.,  1948.,  1690.,  4644.,  8734.,  9030.,  8814.,  4772.,  1898.,  3384.,  8304., 11944.,  9864.,  8616.,  7280.,  4152.,  3672.,  7600., 12040., 10984., 11976.,  7280.,  2072.,  4594.,  7508.,  7910.,  9934., 10422.,  7252.,  1922.,  2764.,  6008.,  7812.,  7412.,  5476.,  1848.,   876.,   486.,  1372.,  2722.,  3226.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  8230.,  8680., 11790., 12400., 15775., 16550., 16400., 17200., 17025., 17850., 14570., 15240., 11650., 12160., 10645., 11200., 15150., 15900., 20150., 21100., 20775., 21750., 21400., 22400., 18210., 19020., 14485., 15100., 12542., 13028., 17584., 18240., 23070., 23900., 23670., 24520., 24270., 25140., 20384., 21088., 16022., 16556., 12636., 13032., 17566., 18100., 22865., 23540., 23390., 24080., 23915., 24620., 19930., 20500., 15552., 15984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   39.,   44.,   27.,   30.,   15.,   20.,   52.,   64.,  115.,  136.,  157.,  178.,  199.,  220.,  176.,  192.,  111.,  120.,   72.,   84.,  201.,  228.,  393.,  438.,  483.,  528.,  573.,  618.,  471.,  504.,  282.,  300.,  202.,  224.,  512.,  560.,  938., 1016., 1094., 1172., 1250., 1328.,  984., 1040.,  570.,  600.,  422.,  444.,  992., 1040., 1718., 1796., 1874., 1952., 2030., 2108., 1544., 1600.,  870.,  900.,  591.,  612., 1317., 1362., 2184., 2256., 2328., 2400., 2472., 2544., 1815., 1866.,  993., 1020.,  597.,  614., 1300., 1336., 2113., 2170., 2227., 2284., 2341., 2398., 1688., 1728.,  909.,  930.,  410.,  420.,  881.,  902., 1415., 1448., 1481., 1514., 1547., 1580., 1103., 1126.,  588.,  600.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  8361.,  9499., 11584., 13096., 13121., 14919., 11863., 13605., 12045., 13603.,  8824., 10048.,  5849.,  6699.,  8271.,  9225., 10856., 12208., 11675., 13337., 13073., 14807., 12839., 14517., 10144., 11464.,  6495.,  7417.,  6992.,  7784., 10448., 11568., 11864., 13216., 11792., 13176., 10856., 12144.,  7056.,  8048.,  5456.,  6120.,  3423.,  3885.,  4992.,  5656.,  6583.,  7473.,  7553.,  8563.,  6635.,  7637.,  6216.,  7040.,  5199.,  5821.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   272.,   308.,   193.,   215.,    88.,   124.,   340.,   428.,   788.,   944.,  1100.,  1256.,  1412.,  1568.,  1276.,  1396.,   816.,   884.,   489.,   579.,  1416.,  1620.,  2829.,  3171.,  3513.,  3855.,  4197.,  4539.,  3492.,  3744.,  2109.,  2247.,  1448.,  1616.,  3736.,  4104.,  6928.,  7528.,  8128.,  8728.,  9328.,  9928.,  7400.,  7832.,  4312.,  4544.,  3128.,  3296.,  7416.,  7784., 12928., 13528., 14128., 14728., 15328., 15928., 11720., 12152.,  6632.,  6864.,  4503.,  4665., 10068., 10416., 16743., 17301., 17859., 18417., 18975., 19533., 13968., 14364.,  7659.,  7869.,  4600.,  4732., 10036., 10316., 16340., 16784., 17228., 17672., 18116., 18560., 13084., 13396.,  7056.,  7220.,  3179.,  3257.,  6840.,  7004., 10999., 11257., 11515., 11773., 12031., 12289.,  8588.,  8768.,  4583.,  4677.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1702., 3022., 3096., 4728., 2994., 5130., 3850., 5922., 2658., 4666., 3096., 4728., 1702., 3022.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.,   260.,   532.,  1272.,  1944.,  3292.,  4492.,  5372.,  6572.,  5084.,  6284.,  2968.,  3896.,   676.,  1204.,  1074.,  1770.,  4044.,  5628.,  8654., 10806., 10270., 12422.,  7470.,  9622.,  2524.,  3980.,  1762.,  2330.,  2536.,  3336.,  7280.,  9136., 11352., 14008.,  9560., 12216.,  7256.,  9912.,  6768.,  8624.,  3048.,  3848.,  3816.,  4616.,  8304., 10160.,  9560., 12216.,  7256.,  9912., 10584., 13240.,  7792.,  9648.,  3304.,  4104.,  3450.,  4210.,  5788.,  7500.,  6054.,  8398.,  9078., 11422., 10054., 12398.,  7404.,  8988.,  1578.,  2210.,   964.,  1492.,  2616.,  3800.,  5212.,  6668.,  6268.,  7724.,  5788.,  7244.,  2776.,  3704.,  1572.,  1844.,    70.,   174.,   388.,   660.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1161.,  1242.,  1323.,  1404.,  1898.,  2012.,  2126.,  2240.,  2830.,  2980.,  3130.,  3280.,  3265.,  3430.,  3595.,  3760.,  3700.,  3880.,  4060.,  4240.,  3470.,  3620.,  3770.,  3920.,  2997.,  3114.,  3231.,  3348.,  2926.,  3076.,  3226.,  3376.,  4432.,  4640.,  4848.,  5056.,  6230.,  6500.,  6770.,  7040.,  6754.,  7044.,  7334.,  7624.,  7278.,  7588.,  7898.,  8208.,  6208.,  6464.,  6720.,  6976.,  5230.,  5428.,  5626.,  5824.,  5088.,  5328.,  5568.,  5808.,  7442.,  7772.,  8102.,  8432., 10233., 10658., 11083., 11508., 10882., 11332., 11782., 12232., 11531., 12006., 12481., 12956.,  9582.,  9972., 10362., 10752.,  8012.,  8312.,  8612.,  8912.,  7573.,  7918.,  8263.,  8608., 10886., 11356., 11826., 12296., 14776., 15376., 15976., 16576., 15425., 16050., 16675., 17300., 16074., 16724., 17374., 18024., 13138., 13668., 14198., 14728., 10889., 11294., 11699., 12104., 10058., 10508., 10958., 11408., 14330., 14940., 15550., 16160., 19319., 20094., 20869., 21644., 19968., 20768., 21568., 22368., 20617., 21442., 22267., 23092., 16694., 17364., 18034., 18704., 13766., 14276., 14786., 15296., 12543., 13098., 13653., 14208., 17774., 18524., 19274., 20024., 23862., 24812., 25762., 26712., 24511., 25486., 26461., 27436., 25160., 26160., 27160., 28160., 20250., 21060., 21870., 22680., 16643., 17258., 17873., 18488., 14166., 14652., 15138., 15624., 19600., 20256., 20912., 21568., 25790., 26620., 27450., 28280., 26394., 27244., 28094., 28944., 26998., 27868., 28738., 29608., 21120., 21824., 22528., 23232., 17110., 17644., 18178., 18712., 12204., 12600., 12996., 13392., 16550., 17084., 17618., 18152., 21503., 22178., 22853., 23528., 21962., 22652., 23342., 24032., 22421., 23126., 23831., 24536., 16762., 17332., 17902., 18472., 13584., 14016., 14448., 14880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  251.,  272.,  293.,  314.,  335.,  356.,  377.,  398.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  132.,  144.,  156.,  168.,  375.,  402.,  429.,  456.,  741.,  786.,  831.,  876.,  921.,  966., 1011., 1056., 1101., 1146., 1191., 1236.,  909.,  942.,  975., 1008.,  546.,  564.,  582.,  600.,  382.,  404.,  426.,  448.,  976., 1024., 1072., 1120., 1798., 1876., 1954., 2032., 2110., 2188., 2266., 2344., 2422., 2500., 2578., 2656., 1912., 1968., 2024., 2080., 1110., 1140., 1170., 1200.,  822.,  844.,  866.,  888., 1936., 1984., 2032., 2080., 3358., 3436., 3514., 3592., 3670., 3748., 3826., 3904., 3982., 4060., 4138., 4216., 3032., 3088., 3144., 3200., 1710., 1740., 1770., 1800., 1161., 1182., 1203., 1224., 2589., 2634., 2679., 2724., 4296., 4368., 4440., 4512., 4584., 4656., 4728., 4800., 4872., 4944., 5016., 5088., 3579., 3630., 3681., 3732., 1959., 1986., 2013., 2040., 1177., 1194., 1211., 1228., 2564., 2600., 2636., 2672., 4169., 4226., 4283., 4340., 4397., 4454., 4511., 4568., 4625., 4682., 4739., 4796., 3336., 3376., 3416., 3456., 1797., 1818., 1839., 1860.,  810.,  820.,  830.,  840., 1741., 1762., 1783., 1804., 2797., 2830., 2863., 2896., 2929., 2962., 2995., 3028., 3061., 3094., 3127., 3160., 2183., 2206., 2229., 2252., 1164., 1176., 1188., 1200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  7413.,  8551.,  9689., 10827., 11080., 12592., 14104., 15616., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423.,  8816., 10040., 11264., 12488.,  6157.,  7007.,  7857.,  8707.,  6347.,  7301.,  8255.,  9209.,  8976., 10328., 11680., 13032., 10443., 12105., 13767., 15429., 11649., 13383., 15117., 16851., 11735., 13413., 15091., 16769.,  9464., 10784., 12104., 13424.,  5219.,  6141.,  7063.,  7985.,  4936.,  5728.,  6520.,  7312.,  7568.,  8688.,  9808., 10928.,  9616., 10968., 12320., 13672., 10088., 11472., 12856., 14240.,  8928., 10216., 11504., 12792.,  5168.,  6160.,  7152.,  8144.,  4840.,  5504.,  6168.,  6832.,  2815.,  3277.,  3739.,  4201.,  4456.,  5120.,  5784.,  6448.,  6347.,  7237.,  8127.,  9017.,  7173.,  8183.,  9193., 10203.,  6367.,  7369.,  8371.,  9373.,  6240.,  7064.,  7888.,  8712.,  4967.,  5589.,  6211.,  6833.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1768.,  1924.,  2080.,  2236.,  2392.,  2548.,  2704.,  2860.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,   909.,   999.,  1089.,  1179.,  2676.,  2880.,  3084.,  3288.,  5397.,  5739.,  6081.,  6423.,  6765.,  7107.,  7449.,  7791.,  8133.,  8475.,  8817.,  9159.,  6792.,  7044.,  7296.,  7548.,  4113.,  4251.,  4389.,  4527.,  2768.,  2936.,  3104.,  3272.,  6808.,  7176.,  7544.,  7912., 12120., 12720., 13320., 13920., 13112., 13712., 14312., 14912., 15512., 16112., 16712., 17312., 12168., 12600., 13032., 13464.,  7040.,  7272.,  7504.,  7736.,  5744.,  5912.,  6080.,  6248., 11352., 11720., 12088., 12456., 18360., 18960., 19560., 20160., 17816., 18416., 19016., 19616., 20216., 20816., 21416., 22016., 15432., 15864., 16296., 16728.,  8736.,  8968.,  9200.,  9432.,  6963.,  7125.,  7287.,  7449., 12064., 12412., 12760., 13108., 18343., 18901., 19459., 20017., 16095., 16653., 17211., 17769., 18327., 18885., 19443., 20001., 13812., 14208., 14604., 15000.,  7735.,  7945.,  8155.,  8365.,  5644.,  5776.,  5908.,  6040.,  7444.,  7724.,  8004.,  8284.,  9944., 10388., 10832., 11276.,  5704.,  6148.,  6592.,  7036.,  7480.,  7924.,  8368.,  8812.,  5964.,  6276.,  6588.,  6900.,  3492.,  3656.,  3820.,  3984.,  1307.,  1385.,  1463.,  1541.,  3060.,  3224.,  3388.,  3552.,  5291.,  5549.,  5807.,  6065.,  6323.,  6581.,  6839.,  7097.,  7355.,  7613.,  7871.,  8129.,  5520.,  5700.,  5880.,  6060.,  3079.,  3173.,  3267.,  3361.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6350.,  9000., 11925., 12250., 12575., 12900., 10930.,  8660.,  7396., 10340., 13530., 13840., 14150., 14460., 12108.,  9490.,  7404., 10270., 13340., 13610., 13880., 14150., 11764.,  9159.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,   74.,  130.,  166.,  161.,  133.,   80.,   50.,  133.,  252.,  410.,  488.,  441.,  346.,  200.,  138.,  338.,  604.,  940., 1076.,  934.,  710.,  400.,  278.,  638., 1084., 1620., 1756., 1474., 1090.,  600.,  392.,  859., 1404., 2030., 2156., 1755., 1264.,  680.,  397.,  853., 1370., 1950., 2050., 1643., 1167.,  620.,  273.,  580.,  922., 1300., 1358., 1078.,  759.,  400.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   233.,   218.,   143.,    64.,   224.,   496.,   896.,  1168.,  1156.,   968.,   588.,   337.,   926.,  1791.,  2956.,  3556.,  3249.,  2570.,  1495.,   984.,  2448.,  4424.,  6944.,  8000.,  6992.,  5344.,  3024.,  2064.,  4768.,  8144., 12224., 13280., 11192.,  8304.,  4584.,  2989.,  6566., 10755., 15580., 16564., 13509.,  9746.,  5251.,  3060.,  6584., 10588., 15088., 15872., 12736.,  9056.,  4816.,  2117.,  4502.,  7163., 10108., 10564.,  8393.,  5914.,  3119.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1512.,  4432.,  8824., 14624., 16160., 14808., 10960.,  6728.,  4232.,  8080., 13656., 18848., 15968., 13432.,  8144.,  4264.,  2466.,  6196., 11190., 17640., 17096., 14958., 10788.,  4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 12070., 12700., 17150., 18000., 22775., 23850., 23400., 24500., 24025., 25150., 24650., 25800., 20930., 21860., 16615., 17320., 14240., 14792., 19936., 20680., 26120., 27060., 26720., 27680., 27320., 28300., 27920., 28920., 23408., 24216., 18368., 18980., 14358., 14808., 19934., 20540., 25915., 26680., 26440., 27220., 26965., 27760., 27490., 28300., 22874., 23528., 17823., 18318.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   59.,   68.,   55.,   62.,   36.,   40.,   16.,   22.,   56.,   70.,  124.,  148.,  224.,  260.,  296.,  332.,  292.,  322.,  244.,  266.,  148.,  160.,   85.,  100.,  233.,  266.,  450.,  504.,  742.,  820.,  898.,  976.,  819.,  882.,  647.,  692.,  376.,  400.,  248.,  276.,  616.,  676., 1112., 1208., 1744., 1880., 2016., 2152., 1760., 1868., 1344., 1420.,  760.,  800.,  528.,  556., 1216., 1276., 2072., 2168., 3104., 3240., 3376., 3512., 2840., 2948., 2104., 2180., 1160., 1200.,  757.,  784., 1661., 1718., 2718., 2808., 3934., 4060., 4186., 4312., 3411., 3510., 2459., 2528., 1324., 1360.,  772.,  794., 1660., 1706., 2668., 2740., 3800., 3900., 4000., 4100., 3208., 3286., 2280., 2334., 1212., 1240.,  533.,  546., 1133., 1160., 1802., 1844., 2542., 2600., 2658., 2716., 2111., 2156., 1487., 1518.,  784.,  800.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1584.,  1856.,  2128.,  2400.,  2138.,  2366.,  1808.,  1976.,  1106.,  1198.,   587.,   701.,  1660.,  1912.,  3267.,  3681.,  5456.,  6056.,  6656.,  7256.,  6129.,  6615.,  4876.,  5224.,  2849.,  3035.,  1804.,  2020.,  4352.,  4816.,  7644.,  8388., 11744., 12800., 12896., 13952., 11236., 12076.,  8576.,  9168.,  4852.,  5164.,  3772.,  3988.,  7328.,  7792., 11692., 12436., 16928., 17984., 17056., 18112., 14452., 15292., 10784., 11376.,  5988.,  6300.,  4603.,  4813.,  7868.,  8312., 11827., 12529., 16528., 17512., 15488., 16472., 12993., 13767.,  9612., 10152.,  5297.,  5579.,  3750.,  3922.,  4896.,  5256.,  6478.,  7042.,  8528.,  9312.,  6064.,  6848.,  5426.,  6038.,  4224.,  4648.,  2426.,  2646.,   893.,   995.,  2060.,  2272.,  3517.,  3847.,  5280.,  5736.,  6192.,  6648.,  5191.,  5545.,  3836.,  4080.,  2111.,  2237.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 3134., 3356., 3578., 3800., 4330., 4636., 4942., 5248., 5331., 5726., 6121., 6516., 5692., 6112., 6532., 6952., 6053., 6498., 6943., 7388., 6414., 6884., 7354., 7824., 4930., 5316., 5702., 6088., 3989., 4286., 4583., 4880., 3830., 4076., 4322., 4568., 5322., 5660., 5998., 6336., 6395., 6830., 7265., 7700., 6756., 7216., 7676., 8136., 7117., 7602., 8087., 8572., 7478., 7988., 8498., 9008., 6306., 6724., 7142., 7560., 4877., 5198., 5519., 5840., 3128., 3296., 3464., 3632., 3832., 4064., 4296., 4528., 4772., 5072., 5372., 5672., 5088., 5408., 5728., 6048., 5404., 5744., 6084., 6424., 5720., 6080., 6440., 6800., 4472., 4768., 5064., 5360., 3356., 3584., 3812., 4040., 2282., 2444., 2606., 2768., 3358., 3580., 3802., 4024., 4409., 4694., 4979., 5264., 4644., 4944., 5244., 5544., 4879., 5194., 5509., 5824., 5114., 5444., 5774., 6104., 4038., 4308., 4578., 4848., 3407., 3614., 3821., 4028.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  109.,  118.,  127.,  136.,  103.,  110.,  117.,  124.,   68.,   72.,   76.,   80.,   26.,   32.,   38.,   44.,   98.,  112.,  126.,  140.,  224.,  248.,  272.,  296.,  412.,  448.,  484.,  520.,  556.,  592.,  628.,  664.,  554.,  584.,  614.,  644.,  466.,  488.,  510.,  532.,  284.,  296.,  308.,  320.,  155.,  170.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,  954., 1008., 1406., 1484., 1562., 1640., 1718., 1796., 1874., 1952., 1575., 1638., 1701., 1764., 1249., 1294., 1339., 1384.,  728.,  752.,  776.,  800.,  468.,  496.,  524.,  552., 1172., 1232., 1292., 1352., 2128., 2224., 2320., 2416., 3352., 3488., 3624., 3760., 3896., 4032., 4168., 4304., 3412., 3520., 3628., 3736., 2612., 2688., 2764., 2840., 1480., 1520., 1560., 1600., 1028., 1056., 1084., 1112., 2372., 2432., 2492., 2552., 4048., 4144., 4240., 4336., 6072., 6208., 6344., 6480., 6616., 6752., 6888., 7024., 5572., 5680., 5788., 5896., 4132., 4208., 4284., 4360., 2280., 2320., 2360., 2400., 1487., 1514., 1541., 1568., 3265., 3322., 3379., 3436., 5346., 5436., 5526., 5616., 7742., 7868., 7994., 8120., 8246., 8372., 8498., 8624., 6723., 6822., 6921., 7020., 4849., 4918., 4987., 5056., 2612., 2648., 2684., 2720., 1522., 1544., 1566., 1588., 3274., 3320., 3366., 3412., 5264., 5336., 5408., 5480., 7500., 7600., 7700., 7800., 7900., 8000., 8100., 8200., 6338., 6416., 6494., 6572., 4506., 4560., 4614., 4668., 2396., 2424., 2452., 2480., 1053., 1066., 1079., 1092., 2239., 2266., 2293., 2320., 3562., 3604., 3646., 3688., 5026., 5084., 5142., 5200., 5258., 5316., 5374., 5432., 4177., 4222., 4267., 4312., 2943., 2974., 3005., 3036., 1552., 1568., 1584., 1600.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   779.,   845.,   911.,   977.,   752.,   804.,   856.,   908.,   503.,   533.,   563.,   593.,   154.,   198.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1930.,  2110.,  2768.,  3040.,  3312.,  3584.,  3408.,  3680.,  3952.,  4224.,  2950.,  3178.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1182.,  1274.,  1366.,  1458.,   895.,  1009.,  1123.,  1237.,  2488.,  2740.,  2992.,  3244.,  4875.,  5289.,  5703.,  6117.,  6936.,  7536.,  8136.,  8736.,  7864.,  8464.,  9064.,  9664.,  6577.,  7063.,  7549.,  8035.,  4112.,  4460.,  4808.,  5156.,  2613.,  2799.,  2985.,  3171.,  2036.,  2252.,  2468.,  2684.,  5216.,  5680.,  6144.,  6608.,  9604., 10348., 11092., 11836., 13088., 14144., 15200., 16256., 13856., 14912., 15968., 17024., 11404., 12244., 13084., 13924.,  7232.,  7824.,  8416.,  9008.,  4476.,  4788.,  5100.,  5412.,  3924.,  4140.,  4356.,  4572.,  8096.,  8560.,  9024.,  9488., 13604., 14348., 15092., 15836., 17312., 18368., 19424., 20480., 15840., 16896., 17952., 19008., 12268., 13108., 13948., 14788.,  6848.,  7440.,  8032.,  8624.,  3740.,  4052.,  4364.,  4676.,  3543.,  3753.,  3963.,  4173.,  6120.,  6564.,  7008.,  7452.,  9811., 10513., 11215., 11917., 14712., 15696., 16680., 17664., 14424., 15408., 16392., 17376., 12601., 13375., 14149., 14923.,  9280.,  9820., 10360., 10900.,  4365.,  4647.,  4929.,  5211.,  4106.,  4278.,  4450.,  4622.,  6000.,  6360.,  6720.,  7080.,  8754.,  9318.,  9882., 10446., 12432., 13216., 14000., 14784.,  9296., 10080., 10864., 11648.,  7894.,  8506.,  9118.,  9730.,  5376.,  5800.,  6224.,  6648.,  1678.,  1898.,  2118.,  2338.,  1709.,  1811.,  1913.,  2015.,  3960.,  4172.,  4384.,  4596.,  6785.,  7115.,  7445.,  7775., 10216., 10672., 11128., 11584.,  8776.,  9232.,  9688., 10144.,  6595.,  6949.,  7303.,  7657.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  318.,   510.,   750.,   870.,   816.,   705.,   796.,  1220.,  1730.,  1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,  2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3544.,  5020.,  6650.,  6960.,  5908.,  4690.,  3792.,  5310.,  6960.,  7230.,  6072.,  4773.,  2586.,  3750.,  5070.,  5190.,  4488.,  3621.,  4900.,  6980.,  9290.,  9500.,  8092.,  6442.,  8090., 11400., 15025., 15350., 12950., 10220.,  9170., 12900., 16975., 17300., 14570., 11480.,  9808., 13660., 17810., 18120., 15124., 11818.,  9300., 12870., 16680., 16950., 14064., 10929.,  4854.,  6990.,  9390.,  9510.,  8160.,  6537.,  9004., 12740., 16850., 17060., 14428., 11410., 14570., 20400., 26725., 27050., 22670., 17780., 15650., 21900., 28675., 29000., 24290., 19040., 16072., 22300., 28970., 29280., 24340., 18946., 14808., 20430., 26400., 26670., 22056., 17085.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  10.,   9.,  29.,  39.,  49.,  59.,  40.,  29.,  79.,  89.,  99., 109.,  70.,  49., 129., 139., 149., 159., 100.,  69., 179., 189., 199., 209., 130.,  63., 150., 157., 164., 171., 100.,   5.,  16.,  27.,  38.,  49.,  30.,  37.,  93., 119., 145., 171., 100.,  97., 223., 249., 275., 301., 170., 157., 353., 379., 405., 431., 240., 217., 483., 509., 535., 561., 310., 147., 322., 337., 352., 367., 200.,   9.,  28.,  47.,  66.,  85.,  50.,  65., 157., 199., 241., 283., 160., 165., 367., 409., 451., 493., 270., 265., 577., 619., 661., 703., 380., 365., 787., 829., 871., 913., 490., 231., 494., 517., 540., 563., 300.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7080.,  9792., 12344., 11776.,  8256.,  6432.,  5091.,  6140.,  7465.,  6683.,  3172.,  2961.,  3555.,  5340.,  7465.,  8395.,  7588.,  6369.,  4832.,  7008.,  9600., 10728.,  8672.,  7352.,  4891.,  7132.,  9857., 11031.,  8372.,  7029.,  6503.,  9676., 12677., 13211., 10852.,  8545.,  5928.,  8448., 10040.,  9824.,  6976.,  5088.,  4219.,  5788.,  5713.,  6595.,  5764.,  4713.,  4763.,  6524.,  8593.,  8403.,  6532.,  5529.,  5984.,  7584.,  9600.,  8968.,  5344.,  4856.,  5283.,  8124., 11449., 12495., 10516.,  8893.,  6383.,  8876., 11837., 12243.,  9156.,  7849.,  4328.,  6144.,  8408.,  9696.,  7296.,  6368.,  4147.,  6140.,  8473.,  9451.,  7844.,  6561.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,   67.,   52.,  184.,  256.,  328.,  400.,  280.,  192.,  544.,  616.,  688.,  760.,  500.,  332.,  904.,  976., 1048., 1120.,  720.,  472., 1264., 1336., 1408., 1480.,  940.,  457., 1102., 1154., 1206., 1258.,  743.,   29.,  102.,  186.,  270.,  354.,  219.,  260.,  664.,  864., 1064., 1264.,  744.,  720., 1664., 1864., 2064., 2264., 1284., 1180., 2664., 2864., 3064., 3264., 1824., 1640., 3664., 3864., 4064., 4264., 2364., 1121., 2462., 2578., 2694., 2810., 1535.,   53.,  182.,  330.,  478.,  626.,  371.,  468., 1144., 1472., 1800., 2128., 1208., 1248., 2784., 3112., 3440., 3768., 2068., 2028., 4424., 4752., 5080., 5408., 2928., 2808., 6064., 6392., 6720., 7048., 3788., 1785., 3822., 4002., 4182., 4362., 2327.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104., 22440., 15968., 11480.,  9078., 13416., 17546., 18786., 12936., 11646.,  8694., 12904., 16906., 18786., 16328., 11646., 10264., 15648., 18344., 20936., 17184., 14136., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.,  9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104., 22440., 15968., 11480.,  9078., 13416., 17546., 18786., 12936., 11646.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2376.,  2920.,  2084.,  1380.,  4008.,  4552.,  5096.,  5640.,  3764.,  2420.,  6088.,  4968.,  5512.,  6056.,  3780.,  2820.,  4456.,  1288.,  1832.,  2376.,  1748.,   782.,  2028.,  2428.,  2828.,  3228.,  2006.,   190.,   716.,  1372.,  2028.,  2684.,  1670.,  1940.,  5000.,  6568.,  8136.,  9704.,  5732.,  5540., 12840., 14408., 15976., 17544.,  9972.,  9140., 15944., 11752., 13320., 14888.,  8452.,  8004., 11240.,  5000.,  6568.,  8136.,  4884.,  1966.,  4652.,  5564.,  6476.,  7388.,  4214.,   350.,  1292.,  2460.,  3628.,  4796.,  2854.,  3540.,  8712., 11304., 13896., 16488.,  9380.,  9700., 21672., 24264., 26856., 29448., 16180., 15860., 25800., 18536., 21128., 23720., 13124., 13188., 18024.,  8712., 11304., 13896.,  8020.,  3150.,  7276.,  8700., 10124., 11548.,  6422.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  6812.,  7088.,  9664., 10040., 12820., 13300., 13420., 13920., 11408., 11816.,  9068.,  9380.,  7350.,  7584., 10302., 10620., 13515., 13920., 14040., 14460., 11802., 12144.,  9285.,  9546.,  4776.,  5172.,  6966.,  7500.,  9465., 10140.,  9690., 10380.,  8418.,  8976.,  6819.,  7242.,  9236.,  9800., 13200., 13960., 17620., 18580., 18020., 19000., 15392., 16184., 12284., 12884., 15430., 16180., 21790., 22800., 28711., 29922., 29144., 30316., 24338., 25260., 18877., 19544., 16924., 17572., 23646., 24520., 30221., 31262., 30014., 31016., 24642., 25428., 18683., 19248., 16412., 16928., 22784., 23480., 28276., 29092., 27404., 28176., 22096., 22696., 16300., 16724., 13626., 13992., 18846., 19340., 22431., 22992., 20844., 21356., 16346., 16736., 11481., 11746.,  1500.,  1644.,  2262.,  2460.,  3165.,  3420.,  3390.,  3660.,  3042.,  3264.,  2535.,  2706.,  3188.,  3416.,  4688.,  5000.,  6420.,  6820.,  6820.,  7240.,  5984.,  6328.,  4892.,  5156.,  5770.,  6100.,  8350.,  8800., 11275., 11850., 11900., 12500., 10290., 10780.,  8305.,  8680.,  7840.,  8260., 11230., 11800., 15025., 15750., 15650., 16400., 13410., 14020., 10735., 11200.,  9500.,  9872., 13376., 13880., 17620., 18260., 18220., 18880., 15376., 15912., 12140., 12548.,  9726., 10032., 13566., 13980., 17715., 18240., 18240., 18780., 15258., 15696., 11949., 12282.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   18.,   20.,   14.,   18.,   48.,   58.,   68.,   78.,   88.,   98.,  108.,  118.,   74.,   80.,   54.,   58.,  148.,  158.,  168.,  178.,  188.,  198.,  208.,  218.,  134.,  140.,   94.,   98.,  248.,  258.,  268.,  278.,  288.,  298.,  308.,  318.,  194.,  200.,  134.,  138.,  348.,  358.,  368.,  378.,  388.,  398.,  408.,  418.,  254.,  260.,  123.,  126.,  293.,  300.,  307.,  314.,  321.,  328.,  335.,  342.,  196.,  200.,    5.,   10.,   21.,   32.,   43.,   54.,   65.,   76.,   87.,   98.,   54.,   60.,   62.,   74.,  160.,  186.,  212.,  238.,  264.,  290.,  316.,  342.,  186.,  200.,  182.,  194.,  420.,  446.,  472.,  498.,  524.,  550.,  576.,  602.,  326.,  340.,  302.,  314.,  680.,  706.,  732.,  758.,  784.,  810.,  836.,  862.,  466.,  480.,  422.,  434.,  940.,  966.,  992., 1018., 1044., 1070., 1096., 1122.,  606.,  620.,  287.,  294.,  629.,  644.,  659.,  674.,  689.,  704.,  719.,  734.,  392.,  400.,    9.,   18.,   37.,   56.,   75.,   94.,  113.,  132.,  151.,  170.,   90.,  100.,  110.,  130.,  272.,  314.,  356.,  398.,  440.,  482.,  524.,  566.,  298.,  320.,  310.,  330.,  692.,  734.,  776.,  818.,  860.,  902.,  944.,  986.,  518.,  540.,  510.,  530., 1112., 1154., 1196., 1238., 1280., 1322., 1364., 1406.,  738.,  760.,  710.,  730., 1532., 1574., 1616., 1658., 1700., 1742., 1784., 1826.,  958.,  980.,  451.,  462.,  965.,  988., 1011., 1034., 1057., 1080., 1103., 1126.,  588.,  600.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9124., 10028., 10816., 12000., 10372., 11740., 10204., 11476.,  7328.,  8256.,  4860.,  5540.,  4371.,  4945.,  6000.,  6728.,  7683.,  8589.,  7277.,  8175.,  4080.,  4744.,  3725.,  4259.,  4551.,  5013.,  5600.,  6264.,  7055.,  7945.,  7929.,  8939.,  6912.,  7768.,  5217.,  5895.,  3796.,  4444.,  5952.,  6880.,  8660.,  9900.,  9772., 11172.,  8320.,  9504.,  7244.,  8180.,  6737.,  7715.,  9440., 10824., 12313., 14015., 13455., 15229., 10240., 11688.,  7799.,  8881.,  8973.,  9903., 12016., 13336., 13149., 14771., 13011., 14705.,  9872., 11256.,  8307.,  9341.,  4964.,  5612.,  7296.,  8224.,  9540., 10652.,  9980., 11124.,  7328.,  8256.,  5244.,  5924.,  4651.,  5257.,  6736.,  7592.,  6667.,  7669.,  7541.,  8535.,  6608.,  7400.,  5157.,  5723.,  5311.,  5933.,  5312.,  6104.,  5655.,  6641.,  6433.,  7411.,  5920.,  6648.,  5145.,  5727.,  5908.,  6812.,  7936.,  9120., 10516., 12012., 10252., 11780.,  6784.,  7968.,  5836.,  6772.,  7545.,  8491., 10496., 11752., 13009., 14615., 13895., 15573., 11040., 12360.,  8479.,  9529.,  6709.,  7607.,  9488., 10680., 11029., 12555., 10635., 12233.,  9136., 10392.,  7963.,  8965.,  5860.,  6508.,  7808.,  8736.,  9764., 11004., 11068., 12468.,  8288.,  9472.,  6588.,  7524.,  4579.,  5089.,  7024.,  7752.,  8627.,  9597.,  9597., 10687.,  8112.,  9032.,  6685.,  7411.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   123.,   137.,    82.,   110.,   312.,   384.,   456.,   528.,   600.,   672.,   744.,   816.,   526.,   570.,   362.,   390.,  1032.,  1104.,  1176.,  1248.,  1320.,  1392.,  1464.,  1536.,   966.,  1010.,   642.,   670.,  1752.,  1824.,  1896.,  1968.,  2040.,  2112.,  2184.,  2256.,  1406.,  1450.,   922.,   950.,  2472.,  2544.,  2616.,  2688.,  2760.,  2832.,  2904.,  2976.,  1846.,  1890.,   897.,   919.,  2164.,  2216.,  2268.,  2320.,  2372.,  2424.,  2476.,  2528.,  1463.,  1493.,    29.,    67.,   140.,   224.,   308.,   392.,   476.,   560.,   644.,   728.,   403.,   449.,   450.,   542.,  1176.,  1376.,  1576.,  1776.,  1976.,  2176.,  2376.,  2576.,  1406.,  1514.,  1370.,  1462.,  3176.,  3376.,  3576.,  3776.,  3976.,  4176.,  4376.,  4576.,  2486.,  2594.,  2290.,  2382.,  5176.,  5376.,  5576.,  5776.,  5976.,  6176.,  6376.,  6576.,  3566.,  3674.,  3210.,  3302.,  7176.,  7376.,  7576.,  7776.,  7976.,  8176.,  8376.,  8576.,  4646.,  4754.,  2201.,  2255.,  4836.,  4952.,  5068.,  5184.,  5300.,  5416.,  5532.,  5648.,  3023.,  3085.,    53.,   123.,   252.,   400.,   548.,   696.,   844.,   992.,  1140.,  1288.,   683.,   761.,   818.,   974.,  2040.,  2368.,  2696.,  3024.,  3352.,  3680.,  4008.,  4336.,  2286.,  2458.,  2378.,  2534.,  5320.,  5648.,  5976.,  6304.,  6632.,  6960.,  7288.,  7616.,  4006.,  4178.,  3938.,  4094.,  8600.,  8928.,  9256.,  9584.,  9912., 10240., 10568., 10896.,  5726.,  5898.,  5498.,  5654., 11880., 12208., 12536., 12864., 13192., 13520., 13848., 14176.,  7446.,  7618.,  3505.,  3591.,  7508.,  7688.,  7868.,  8048.,  8228.,  8408.,  8588.,  8768.,  4583.,  4677.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,   902.,  1006.,   540.,   748.,  2216.,  2760.,  3304.,  3848.,  3752.,  4296.,  3176.,  3720.,  2284.,  2620.,  1980.,  2188.,  5352.,  5896.,  6440.,  6984.,  4840.,  5384.,  2216.,  2760.,  1932.,  2268.,  1372.,  1580.,  3752.,  4296.,  3176.,  3720.,  4264.,  4808.,  5352.,  5896.,  3628.,  3964.,  2812.,  3020.,  4840.,  5384.,  2216.,  2760.,  3304.,  3848.,  3752.,  4296.,  1612.,  1948.,  1454.,  1622.,  3796.,  4196.,  4596.,  4996.,  5396.,  5796.,  3508.,  3908.,   150.,   382.,   190.,   486.,  1012.,  1668.,  2324.,  2980.,  3636.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,  9000., 10568., 12136., 13704., 10536., 12104.,  7912.,  9480.,  5164.,  6012.,  5884.,  6604., 14184., 15752., 17320., 18888., 13672., 15240.,  9000., 10568.,  5836.,  6684.,  6300.,  7020., 10536., 12104.,  7912.,  9480., 11048., 12616., 14184., 15752.,  8556.,  9404.,  8764.,  9484., 13672., 15240.,  9000., 10568., 12136., 13704., 10536., 12104.,  3468.,  4316.,  3662.,  4086.,  8724.,  9636., 10548., 11460., 12372., 13284.,  7412.,  8324.,   310.,   798.,   350.,   902.,  1844.,  3012.,  4180.,  5348.,  6516.,  7684.,  8852., 10020.,  5318.,  5934.,  6300.,  7532., 15784., 18376., 20968., 23560., 17320., 19912., 12648., 15240.,  8044.,  9404.,  9788., 11020., 23016., 25608., 28200., 30792., 22504., 25096., 15784., 18376.,  9740., 11100., 11228., 12460., 17320., 19912., 12648., 15240., 17832., 20424., 23016., 25608., 13484., 14844., 14716., 15948., 22504., 25096., 15784., 18376., 20968., 23560., 17320., 19912.,  5324.,  6684.,  5870.,  6550., 13652., 15076., 16500., 17924., 19348., 20772., 11316., 12740.,   470.,  1214.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 864.,  936., 1008., 1080., 1190., 1292., 1394., 1496., 1635., 1770., 1905., 2040., 1846., 1996., 2146., 2296., 1702., 1828., 1954., 2080., 1371., 1470., 1569., 1668., 1732., 1864., 1996., 2128., 2312., 2496., 2680., 2864., 3096., 3336., 3576., 3816., 3364., 3624., 3884., 4144., 2888., 3104., 3320., 3536., 2320., 2488., 2656., 2824., 2834., 3044., 3254., 3464., 3770., 4060., 4350., 4640., 5007., 5382., 5757., 6132., 5368., 5768., 6168., 6568., 4506., 4836., 5166., 5496., 3603., 3858., 4113., 4368., 4164., 4432., 4700., 4968., 5378., 5724., 6070., 6416., 6693., 7122., 7551., 7980., 6638., 7060., 7482., 7904., 4802., 5124., 5446., 5768., 3669., 3918., 4167., 4416., 4324., 4568., 4812., 5056., 4840., 5152., 5464., 5776., 5224., 5608., 5992., 6376., 5508., 5880., 6252., 6624., 4232., 4512., 4792., 5072., 3520., 3736., 3952., 4168., 3138., 3340., 3542., 3744., 4286., 4540., 4794., 5048., 5057., 5366., 5675., 5984., 4620., 4912., 5204., 5496., 2686., 2900., 3114., 3328., 2245., 2410., 2575., 2740., 1380., 1488., 1596., 1704., 1846., 1996., 2146., 2296., 2479., 2674., 2869., 3064., 2690., 2900., 3110., 3320., 2422., 2596., 2770., 2944., 1919., 2054., 2189., 2324., 2388., 2568., 2748., 2928., 3144., 3392., 3640., 3888., 4168., 4488., 4808., 5128., 4436., 4776., 5116., 5456., 3720., 4000., 4280., 4560., 2976., 3192., 3408., 3624., 3742., 4012., 4282., 4552., 4970., 5340., 5710., 6080., 6419., 6862., 7305., 7748., 6620., 7056., 7492., 7928., 5194., 5540., 5886., 6232., 3775., 4026., 4277., 4528., 4624., 4888., 5152., 5416., 5874., 6236., 6598., 6960., 6505., 6938., 7371., 7804., 6066., 6492., 6918., 7344., 4210., 4548., 4886., 5224., 3585., 3830., 4075., 4320., 3444., 3672., 3900., 4128., 4968., 5280., 5592., 5904., 6008., 6376., 6744., 7112., 5908., 6264., 6620., 6976., 4232., 4512., 4792., 5072., 3024., 3224., 3424., 3624., 2726., 2900., 3074., 3248., 3854., 4092., 4330., 4568., 3597., 3870., 4143., 4416., 3800., 4056., 4312., 4568., 3214., 3412., 3610., 3808., 2377., 2514., 2651., 2788., 1896., 2040., 2184., 2328., 2502., 2700., 2898., 3096., 3323., 3578., 3833., 4088., 3534., 3804., 4074., 4344., 3142., 3364., 3586., 3808., 2467., 2638., 2809., 2980., 3044., 3272., 3500., 3728., 3976., 4288., 4600., 4912., 5240., 5640., 6040., 6440., 5508., 5928., 6348., 6768., 4552., 4896., 5240., 5584., 3632., 3896., 4160., 4424., 4170., 4404., 4638., 4872., 5274., 5596., 5918., 6240., 6455., 6870., 7285., 7700., 6816., 7256., 7696., 8136., 5370., 5732., 6094., 6456., 4107., 4386., 4665., 4944., 3132., 3360., 3588., 3816., 4642., 4956., 5270., 5584., 6029., 6434., 6839., 7244., 6390., 6820., 7250., 7680., 5154., 5508., 5862., 6216., 4301., 4574., 4847., 5120., 3044., 3224., 3404., 3584., 4136., 4384., 4632., 4880., 4840., 5160., 5480., 5800., 5156., 5496., 5836., 6176., 3720., 4000., 4280., 4560., 2944., 3160., 3376., 3592., 2154., 2268., 2382., 2496., 3230., 3388., 3546., 3704., 3641., 3846., 4051., 4256., 3876., 4096., 4316., 4536., 3230., 3412., 3594., 3776., 2541., 2682., 2823., 2964.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,  146.,  156.,  166.,  176.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  104.,  108.,  112.,  116.,  286.,  296.,  306.,  316.,  326.,  336.,  346.,  356.,  366.,  376.,  386.,  396.,  406.,  416.,  426.,  436.,  262.,  268.,  274.,  280.,  184.,  188.,  192.,  196.,  486.,  496.,  506.,  516.,  526.,  536.,  546.,  556.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  636.,  382.,  388.,  394.,  400.,  264.,  268.,  272.,  276.,  686.,  696.,  706.,  716.,  726.,  736.,  746.,  756.,  766.,  776.,  786.,  796.,  806.,  816.,  826.,  836.,  502.,  508.,  514.,  520.,  243.,  246.,  249.,  252.,  579.,  586.,  593.,  600.,  607.,  614.,  621.,  628.,  635.,  642.,  649.,  656.,  663.,  670.,  677.,  684.,  388.,  392.,  396.,  400.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   97.,  108.,  119.,  130.,  141.,  152.,  163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,  112.,  124.,  136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,  450.,  476.,  502.,  528.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,  372.,  386.,  400.,  352.,  364.,  376.,  388.,  814.,  840.,  866.,  892.,  918.,  944.,  970.,  996., 1022., 1048., 1074., 1100., 1126., 1152., 1178., 1204.,  638.,  652.,  666.,  680.,  592.,  604.,  616.,  628., 1334., 1360., 1386., 1412., 1438., 1464., 1490., 1516., 1542., 1568., 1594., 1620., 1646., 1672., 1698., 1724.,  918.,  932.,  946.,  960.,  832.,  844.,  856.,  868., 1854., 1880., 1906., 1932., 1958., 1984., 2010., 2036., 2062., 2088., 2114., 2140., 2166., 2192., 2218., 2244., 1198., 1212., 1226., 1240.,  567.,  574.,  581.,  588., 1243., 1258., 1273., 1288., 1303., 1318., 1333., 1348., 1363., 1378., 1393., 1408., 1423., 1438., 1453., 1468.,  776.,  784.,  792.,  800.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,  169.,  188.,  207.,  226.,  245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,  200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,  712.,  754.,  796.,  838.,  880.,  922.,  964., 1006., 1048., 1090., 1132.,  574.,  596.,  618.,  640.,  600.,  620.,  640.,  660., 1342., 1384., 1426., 1468., 1510., 1552., 1594., 1636., 1678., 1720., 1762., 1804., 1846., 1888., 1930., 1972., 1014., 1036., 1058., 1080., 1000., 1020., 1040., 1060., 2182., 2224., 2266., 2308., 2350., 2392., 2434., 2476., 2518., 2560., 2602., 2644., 2686., 2728., 2770., 2812., 1454., 1476., 1498., 1520., 1400., 1420., 1440., 1460., 3022., 3064., 3106., 3148., 3190., 3232., 3274., 3316., 3358., 3400., 3442., 3484., 3526., 3568., 3610., 3652., 1894., 1916., 1938., 1960.,  891.,  902.,  913.,  924., 1907., 1930., 1953., 1976., 1999., 2022., 2045., 2068., 2091., 2114., 2137., 2160., 2183., 2206., 2229., 2252., 1164., 1176., 1188., 1200.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  6556.,  7460.,  8364.,  9268.,  8000.,  9184., 10368., 11552.,  8668., 10036., 11404., 12772.,  9044., 10316., 11588., 12860.,  6272.,  7200.,  8128.,  9056.,  3508.,  4188.,  4868.,  5548.,  3603.,  4177.,  4751.,  5325.,  3864.,  4592.,  5320.,  6048.,  6359.,  7265.,  8171.,  9077.,  6577.,  7475.,  8373.,  9271.,  4392.,  5056.,  5720.,  6384.,  4133.,  4667.,  5201.,  5735.,  3631.,  4093.,  4555.,  5017.,  4456.,  5120.,  5784.,  6448.,  5851.,  6741.,  7631.,  8521.,  6613.,  7623.,  8633.,  9643.,  5944.,  6800.,  7656.,  8512.,  4065.,  4743.,  5421.,  6099.,  4188.,  4836.,  5484.,  6132.,  6272.,  7200.,  8128.,  9056.,  8444.,  9684., 10924., 12164.,  9524., 10924., 12324., 13724.,  8000.,  9184., 10368., 11552.,  6132.,  7068.,  8004.,  8940.,  5821.,  6799.,  7777.,  8755.,  9192., 10576., 11960., 13344., 11689., 13391., 15093., 16795., 12383., 14157., 15931., 17705.,  9816., 11264., 12712., 14160.,  7067.,  8149.,  9231., 10313.,  6233.,  7163.,  8093.,  9023.,  8760., 10080., 11400., 12720., 10349., 11971., 13593., 15215., 10531., 12225., 13919., 15613.,  8360.,  9744., 11128., 12512.,  6839.,  7873.,  8907.,  9941.,  4572.,  5220.,  5868.,  6516.,  6272.,  7200.,  8128.,  9056.,  7708.,  8820.,  9932., 11044.,  7156.,  8300.,  9444., 10588.,  6272.,  7200.,  8128.,  9056.,  5300.,  5980.,  6660.,  7340.,  3627.,  4233.,  4839.,  5445.,  5752.,  6608.,  7464.,  8320.,  6303.,  7305.,  8307.,  9309.,  7033.,  8027.,  9021., 10015.,  6280.,  7072.,  7864.,  8656.,  4413.,  4979.,  5545.,  6111.,  5031.,  5653.,  6275.,  6897.,  5320.,  6112.,  6904.,  7696.,  5539.,  6525.,  7511.,  8497.,  6205.,  7183.,  8161.,  9139.,  5080.,  5808.,  6536.,  7264.,  3481.,  4063.,  4645.,  5227.,  5660.,  6564.,  7468.,  8372.,  6976.,  8160.,  9344., 10528.,  9916., 11412., 12908., 14404., 10388., 11916., 13444., 14972.,  8000.,  9184., 10368., 11552.,  6900.,  7836.,  8772.,  9708.,  5413.,  6359.,  7305.,  8251.,  8328.,  9584., 10840., 12096., 11105., 12711., 14317., 15923., 11287., 12965., 14643., 16321.,  8952., 10272., 11592., 12912.,  6915.,  7965.,  9015., 10065.,  5825.,  6723.,  7621.,  8519.,  8920., 10112., 11304., 12496., 10277., 11803., 13329., 14855.,  9947., 11545., 13143., 14741.,  8520.,  9776., 11032., 12288.,  6687.,  7689.,  8691.,  9693.,  4316.,  4964.,  5612.,  6260.,  6272.,  7200.,  8128.,  9056.,  8572.,  9812., 11052., 12292.,  9652., 11052., 12452., 13852.,  8000.,  9184., 10368., 11552.,  6772.,  7708.,  8644.,  9580.,  3043.,  3553.,  4063.,  4573.,  4888.,  5616.,  6344.,  7072.,  6151.,  7121.,  8091.,  9061.,  6977.,  8067.,  9157., 10247.,  6120.,  7040.,  7960.,  8880.,  4789.,  5515.,  6241.,  6967.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,  1000.,  1072.,  1144.,  1216.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   702.,   730.,   758.,   786.,  2008.,  2080.,  2152.,  2224.,  2296.,  2368.,  2440.,  2512.,  2584.,  2656.,  2728.,  2800.,  2872.,  2944.,  3016.,  3088.,  1898.,  1942.,  1986.,  2030.,  1262.,  1290.,  1318.,  1346.,  3448.,  3520.,  3592.,  3664.,  3736.,  3808.,  3880.,  3952.,  4024.,  4096.,  4168.,  4240.,  4312.,  4384.,  4456.,  4528.,  2778.,  2822.,  2866.,  2910.,  1822.,  1850.,  1878.,  1906.,  4888.,  4960.,  5032.,  5104.,  5176.,  5248.,  5320.,  5392.,  5464.,  5536.,  5608.,  5680.,  5752.,  5824.,  5896.,  5968.,  3658.,  3702.,  3746.,  3790.,  1777.,  1799.,  1821.,  1843.,  4288.,  4340.,  4392.,  4444.,  4496.,  4548.,  4600.,  4652.,  4704.,  4756.,  4808.,  4860.,  4912.,  4964.,  5016.,  5068.,  2903.,  2933.,  2963.,  2993.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   720.,   804.,   888.,   972.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,   771.,   817.,   863.,   909.,   830.,   922.,  1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  3400.,  3600.,  3800.,  4000.,  4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730.,  2838.,  2946.,  3054.,  2670.,  2762.,  2854.,  2946.,  6200.,  6400.,  6600.,  6800.,  7000.,  7200.,  7400.,  7600.,  7800.,  8000.,  8200.,  8400.,  8600.,  8800.,  9000.,  9200.,  4890.,  4998.,  5106.,  5214.,  4510.,  4602.,  4694.,  4786., 10200., 10400., 10600., 10800., 11000., 11200., 11400., 11600., 11800., 12000., 12200., 12400., 12600., 12800., 13000., 13200.,  7050.,  7158.,  7266.,  7374.,  6350.,  6442.,  6534.,  6626., 14200., 14400., 14600., 14800., 15000., 15200., 15400., 15600., 15800., 16000., 16200., 16400., 16600., 16800., 17000., 17200.,  9210.,  9318.,  9426.,  9534.,  4361.,  4415.,  4469.,  4523.,  9584.,  9700.,  9816.,  9932., 10048., 10164., 10280., 10396., 10512., 10628., 10744., 10860., 10976., 11092., 11208., 11324.,  5999.,  6061.,  6123.,  6185.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,  1280.,  1428.,  1576.,  1724.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  5800.,  6128.,  6456.,  6784.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,  4638.,  4794.,  4950.,  5106., 10392., 10720., 11048., 11376., 11704., 12032., 12360., 12688., 13016., 13344., 13672., 14000., 14328., 14656., 14984., 15312.,  7882.,  8054.,  8226.,  8398.,  7758.,  7914.,  8070.,  8226., 16952., 17280., 17608., 17936., 18264., 18592., 18920., 19248., 19576., 19904., 20232., 20560., 20888., 21216., 21544., 21872., 11322., 11494., 11666., 11838., 10878., 11034., 11190., 11346., 23512., 23840., 24168., 24496., 24824., 25152., 25480., 25808., 26136., 26464., 26792., 27120., 27448., 27776., 28104., 28432., 14762., 14934., 15106., 15278.,  6945.,  7031.,  7117.,  7203., 14880., 15060., 15240., 15420., 15600., 15780., 15960., 16140., 16320., 16500., 16680., 16860., 17040., 17220., 17400., 17580.,  9095.,  9189.,  9283.,  9377.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,   636.,   972.,  1308.,  1644.,  1132.,  1340.,  1548.,  1756.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,  1768.,  2312.,  2856.,  3400.,  1980.,  2316.,  2652.,  2988.,  1964.,  2172.,  2380.,  2588.,  5480.,  6024.,  6568.,  7112.,  3304.,  3848.,  4392.,  4936.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  5032.,  5576.,  3324.,  3660.,  3996.,  4332.,  2156.,  2364.,  2572.,  2780.,  3304.,  3848.,  4392.,  4936.,  1768.,  2312.,  2856.,  3400.,  3944.,  4488.,  5032.,  5576.,  5480.,  6024.,  6568.,  7112.,  3004.,  3340.,  3676.,  4012.,   110.,   278.,   446.,   614.,   932.,  1332.,  1732.,  2132.,  2532.,  2932.,  3332.,  3732.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3844.,  4244.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  5540.,  6196.,  6852.,  7508.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,   230.,   590.,   950.,  1310.,  1644.,  2364.,  3084.,  3804.,  6504.,  8072.,  9640., 11208., 12776., 14344., 15912., 17480., 14312., 15880., 17448., 19016.,  8040.,  9608., 11176., 12744.,  1980.,  2828.,  3676.,  4524.,  4524.,  5244.,  5964.,  6684., 12776., 14344., 15912., 17480., 14312., 15880., 17448., 19016.,  8040.,  9608., 11176., 12744.,  6504.,  8072.,  9640., 11208.,  5372.,  6220.,  7068.,  7916.,  7404.,  8124.,  8844.,  9564., 14312., 15880., 17448., 19016.,  8040.,  9608., 11176., 12744.,  6504.,  8072.,  9640., 11208., 12776., 14344., 15912., 17480.,  8764.,  9612., 10460., 11308.,  5548.,  6268.,  6988.,  7708.,  8040.,  9608., 11176., 12744.,  6504.,  8072.,  9640., 11208., 12776., 14344., 15912., 17480., 14312., 15880., 17448., 19016.,  6396.,  7244.,  8092.,  8940.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  5924.,  6836.,  7748.,  8660.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  9956., 11124., 12292., 13460., 14628., 15796.,  8132.,  9300., 10468., 11636.,   390.,  1006.,  1622.,  2238.,  2988.,  4220.,  5452.,  6684., 11240., 13832., 16424., 19016., 21608., 24200., 26792., 29384., 23144., 25736., 28328., 30920., 12776., 15368., 17960., 20552.,  3324.,  4684.,  6044.,  7404.,  7916.,  9148., 10380., 11612., 21608., 24200., 26792., 29384., 23144., 25736., 28328., 30920., 12776., 15368., 17960., 20552., 11240., 13832., 16424., 19016.,  8764., 10124., 11484., 12844., 12844., 14076., 15308., 16540., 23144., 25736., 28328., 30920., 12776., 15368., 17960., 20552., 11240., 13832., 16424., 19016., 21608., 24200., 26792., 29384., 14204., 15564., 16924., 18284.,  8940., 10172., 11404., 12636., 12776., 15368., 17960., 20552., 11240., 13832., 16424., 19016., 21608., 24200., 26792., 29384., 23144., 25736., 28328., 30920.,  9788., 11148., 12508., 13868.,   430.,  1110.,  1790.,  2470.,  3620.,  5044.,  6468.,  7892.,  9316., 10740., 12164., 13588., 15012., 16436., 17860., 19284.,  9828., 11252., 12676., 14100.,   470.,  1214.,  1958.,  2702.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  351.,   560.,   820.,   940.,  1060.,   980.,   837.,   892.,  1360.,  1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,  4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,  4610.,  4078.,  5760.,  7610.,  7920.,  8230.,  6960.,  5506.,  4374.,  6110.,  7990.,  8260.,  8530.,  7142.,  5598.,  2997.,  4340.,  5860.,  5980.,  6100.,  5264.,  4239.,  5488.,  7696., 10100.,  9990., 10200.,  8592.,  6772.,  8164., 11216., 14495., 14180., 14505., 12108.,  9464.,  7440., 10086., 12930., 12295., 12620., 10542.,  8246.,  5626.,  7456.,  9430.,  8460.,  8770.,  7344.,  5758.,  2480.,  3026.,  3650.,  2320.,  2590.,  2258.,  1836.,  1611.,  2360.,  3220.,  3340.,  3460.,  3020.,  2457.,  3172.,  4560.,  6120.,  6330.,  6540.,  5616.,  4504.,  5420.,  7700., 10225., 10550., 10875.,  9240.,  7340.,  6680.,  9450., 12500., 12825., 13150., 11130.,  8810.,  7558., 10560., 13810., 14120., 14430., 12080.,  9466.,  7434., 10310., 13390., 13660., 13930., 11582.,  9018.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,   89.,  110.,   96.,   60.,   35.,   92.,  173.,  194.,  215.,  176.,  105.,   60.,  152.,  278.,  299.,  320.,  256.,  150.,   85.,  212.,  383.,  404.,  425.,  336.,  195.,   84.,  193.,  328.,  343.,  358.,  269.,  150.,    7.,   22.,   46.,   70.,   94.,   76.,   45.,   52.,  128.,  230.,  287.,  344.,  264.,  150.,  137.,  308.,  515.,  572.,  629.,  464.,  255.,  222.,  488.,  800.,  857.,  914.,  664.,  360.,  307.,  668., 1085., 1142., 1199.,  864.,  465.,  210.,  451.,  724.,  757.,  790.,  563.,  300.,   13.,   40.,   82.,  124.,  166.,  130.,   75.,   94.,  224.,  392.,  485.,  578.,  432.,  240.,  239.,  524.,  857.,  950., 1043.,  752.,  405.,  384.,  824., 1322., 1415., 1508., 1072.,  570.,  529., 1124., 1787., 1880., 1973., 1392.,  735.,  336.,  709., 1120., 1171., 1222.,  857.,  450.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7268.,  9968., 11724., 10516.,  9052.,  5936.,  3764.,  4363.,  5980.,  5953.,  6835.,  7589.,  6332.,  4959.,  4125.,  6180.,  8615.,  9545.,  9099.,  7876.,  6177.,  4524.,  6320.,  8516.,  9036.,  8148.,  7440.,  6300.,  6267.,  9020., 12289., 12439., 13229., 10972.,  9031.,  5577.,  7540.,  9915.,  9073.,  9991.,  7220.,  6373.,  6324.,  8688., 11420., 11236., 11404.,  8592.,  7268.,  6343.,  7308.,  8501.,  6727.,  5945.,  2636.,  2523.,  3801.,  5716.,  7995.,  8189.,  8255.,  6996.,  5277.,  5564.,  8080., 11060., 10812., 10436.,  7664.,  5676.,  5583.,  7916., 10781., 10163., 11465., 10188.,  8443.,  6045.,  8964., 12439., 13229., 13891., 11204.,  8921.,  4068.,  5808.,  7980.,  9268., 10556.,  8016.,  6932.,  4291.,  6332.,  8713.,  9691., 10669.,  8764.,  7287.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   101.,   143.,   150.,   105.,    58.,   204.,   454.,   610.,   766.,   684.,   434.,   238.,   644.,  1234.,  1390.,  1546.,  1284.,   774.,   418.,  1084.,  2014.,  2170.,  2326.,  1884.,  1114.,   598.,  1524.,  2794.,  2950.,  3106.,  2484.,  1454.,   623.,  1442.,  2465.,  2579.,  2693.,  2034.,  1139.,    41.,   142.,   311.,   497.,   683.,   558.,   333.,   370.,   924.,  1678.,  2122.,  2566.,  1980.,  1130.,  1030.,  2324.,  3898.,  4342.,  4786.,  3540.,  1950.,  1690.,  3724.,  6118.,  6562.,  7006.,  5100.,  2770.,  2350.,  5124.,  8338.,  8782.,  9226.,  6660.,  3590.,  1619.,  3482.,  5597.,  5855.,  6113.,  4362.,  2327.,    77.,   262.,   563.,   893.,  1223.,   966.,   561.,   682.,  1644.,  2902.,  3634.,  4366.,  3276.,  1826.,  1822.,  4004.,  6562.,  7294.,  8026.,  5796.,  3126.,  2962.,  6364., 10222., 10954., 11686.,  8316.,  4426.,  4102.,  8724., 13882., 14614., 15346., 10836.,  5726.,  2615.,  5522.,  8729.,  9131.,  9533.,  6690.,  3515.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 19912., 22816., 26424., 22488., 20600., 12000.,  8328., 14102., 18984., 18474., 17538., 15066., 11560.,  7558.,  6030.,  9480., 13874., 17610., 20002., 18184., 14142.,  7784., 12192., 17688., 20088., 20952., 20128., 17000., 13410., 16312., 23454., 27142., 28782., 23672., 19186., 15498., 18648., 22134., 23454., 27142., 21528., 18714., 15432., 17760., 20600., 17496., 19320., 15904., 13832.,  9766., 13992., 15066., 15154., 14538.,  9768.,  9238., 10590., 15304., 20002., 19002., 16658., 11144.,  7118., 12264., 17760., 20952., 24056., 23256., 17760., 10472., 15314., 23352., 28782., 28374., 29694., 23416., 18146., 12666., 19928., 27142., 28782., 28374., 24984., 18314., 11464., 13344., 19320., 24024., 27192., 21472., 16776.,  6838., 10536., 14538., 15266., 19386., 16104., 14310.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,  140.,  394.,  706., 1018., 1100.,  782.,  380., 1432., 3284., 4164., 4532., 2968., 1948., 1420., 3640., 6788., 6132., 4964., 2360., 1708.,  924., 2456., 4532., 4388., 5588., 4824., 3004., 1964., 3128., 4964., 3284., 4164., 3384., 1420., 1078., 2684., 4882., 5770., 4802., 2940.,  230.,  270., 1004., 1946., 2898., 3850., 2412.,  190., 2460., 5848., 7412., 5476., 3028., 2456., 1148., 1708., 4472., 7076., 7700., 7812., 3896.,  652., 3516., 4824., 3028., 4164., 5620., 4312., 1692., 2764., 6008., 7812., 7412., 5476., 1848.,  876.,  486., 1372., 2722., 3226., 2898., 1884.,  150.,  190.,  716., 1642., 2722., 3802., 3212., 1966., 1980., 4824., 8468., 7812., 6644., 1432., 1180., 3532., 5496., 8388., 6196., 7588., 4920., 2988., 3548., 4824., 6644., 4964., 6676., 3288., 2236., 5100., 3960., 7588., 8468., 7812., 3896.,  652., 2262., 2940., 3954., 4586., 1314.,  828.,   70.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  7838.,  8156., 11088., 11520., 14670., 15220., 15270., 15840., 15870., 16460., 13440., 13920., 10646., 11012.,  8478.,  8748., 11854., 12220., 15515., 15980., 16040., 16520., 16565., 17060., 13882., 14284., 10890., 11196.,  5535.,  5994.,  8062.,  8680., 10940., 11720., 11165., 11960., 11390., 12200.,  9874., 10528.,  7983.,  8478., 10450., 10976., 14704., 15392., 19346., 20200., 19170., 19980., 19570., 20400., 16512., 17184., 13034., 13544., 15778., 16328., 21710., 22432., 28091., 28990., 27500., 28360., 28125., 29010., 23498., 24216., 18382., 18928., 14417., 14880., 19566., 20172., 25106., 25860., 23875., 24590., 24500., 25240., 20482., 21084., 16033., 16492., 10942., 11252., 14512., 14912., 18366., 18860., 16470., 16920., 17070., 17540., 14304., 14688., 11222., 11516.,  4824.,  4960.,  5886.,  6052.,  7101.,  7300.,  4490.,  4640.,  5015.,  5180.,  4378.,  4516.,  3564.,  3672.,  2961.,  3222.,  4366.,  4720.,  5990.,  6440.,  6215.,  6680.,  6440.,  6920.,  5650.,  6040.,  4617.,  4914.,  5954.,  6344.,  8592.,  9120., 11570., 12240., 11970., 12660., 12370., 13080., 10656., 11232.,  8570.,  9008., 10300., 10840., 14670., 15400., 19525., 20450., 20150., 21100., 20775., 21750., 17690., 18480., 14080., 14680., 12715., 13360., 18030., 18900., 23900., 25000., 24525., 25650., 25150., 26300., 21330., 22260., 16915., 17620., 14558., 15116., 20368., 21120., 26670., 27620., 27270., 28240., 27870., 28860., 23360., 24160., 18326., 18932., 14418., 14868., 20014., 20620., 26015., 26780., 26540., 27320., 27065., 27860., 22522., 23164., 17550., 18036.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   39.,   44.,   27.,   30.,   15.,   20.,   52.,   64.,  115.,  136.,  157.,  178.,  199.,  220.,  176.,  192.,  111.,  120.,   65.,   70.,  172.,  184.,  325.,  346.,  367.,  388.,  409.,  430.,  336.,  352.,  201.,  210.,  115.,  120.,  292.,  304.,  535.,  556.,  577.,  598.,  619.,  640.,  496.,  512.,  291.,  300.,  165.,  170.,  412.,  424.,  745.,  766.,  787.,  808.,  829.,  850.,  656.,  672.,  381.,  390.,  164.,  168.,  377.,  386.,  641.,  656.,  671.,  686.,  701.,  716.,  527.,  538.,  294.,  300.,    7.,   14.,   29.,   44.,   68.,   92.,  116.,  140.,  164.,  188.,  135.,  152.,   81.,   90.,   87.,  104.,  220.,  256.,  403.,  460.,  517.,  574.,  631.,  688.,  488.,  528.,  279.,  300.,  257.,  274.,  580.,  616.,  973., 1030., 1087., 1144., 1201., 1258.,  888.,  928.,  489.,  510.,  427.,  444.,  940.,  976., 1543., 1600., 1657., 1714., 1771., 1828., 1288., 1328.,  699.,  720.,  597.,  614., 1300., 1336., 2113., 2170., 2227., 2284., 2341., 2398., 1688., 1728.,  909.,  930.,  410.,  420.,  881.,  902., 1415., 1448., 1481., 1514., 1547., 1580., 1103., 1126.,  588.,  600.,   13.,   26.,   53.,   80.,  122.,  164.,  206.,  248.,  290.,  332.,  231.,  260.,  135.,  150.,  159.,  188.,  388.,  448.,  691.,  784.,  877.,  970., 1063., 1156.,  800.,  864.,  447.,  480.,  449.,  478.,  988., 1048., 1621., 1714., 1807., 1900., 1993., 2086., 1440., 1504.,  777.,  810.,  739.,  768., 1588., 1648., 2551., 2644., 2737., 2830., 2923., 3016., 2080., 2144., 1107., 1140., 1029., 1058., 2188., 2248., 3481., 3574., 3667., 3760., 3853., 3946., 2720., 2784., 1437., 1470.,  656.,  672., 1385., 1418., 2189., 2240., 2291., 2342., 2393., 2444., 1679., 1714.,  882.,  900.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  7616.,  8472., 10192., 11312., 10856., 12144.,  9408., 10600.,  9496., 10592.,  6448.,  7312.,  3936.,  4536.,  4555.,  5161.,  6608.,  7464.,  6635.,  7637.,  7509.,  8503.,  8127.,  9113.,  6744.,  7504.,  4923.,  5433.,  3297.,  3879.,  5240.,  6064.,  7669.,  8759.,  8543.,  9753.,  8809., 10011.,  7904.,  8888.,  6193.,  6935.,  5808.,  6536.,  7344.,  8336.,  9400., 10688.,  9392., 10712.,  8616.,  9968.,  7696.,  8816.,  5968.,  6824.,  7617.,  8531.,  9216., 10472., 12233., 13871., 13375., 15085., 13749., 15531., 11448., 12928.,  8945., 10083.,  6695.,  7681.,  9096., 10320., 11811., 13313., 11065., 12511., 11695., 13213.,  8128.,  9320.,  6583.,  7537.,  8752.,  9672., 10192., 11312., 10968., 12320.,  9520., 10776., 10728., 12016.,  8848.,  9840.,  7216.,  8008.,  5383.,  6069.,  7008.,  7800.,  6927.,  7849.,  6681.,  7467.,  6275.,  7053.,  3336.,  3904.,  3159.,  3621.,  4989.,  5523.,  6152.,  6912.,  7769.,  8779.,  7267.,  8269.,  6509.,  7503.,  4752.,  5544.,  4269.,  4835.,  4768.,  5560.,  7184.,  8304., 10248., 11728., 10752., 12264., 11000., 12544.,  8560.,  9808.,  6464.,  7384.,  7333.,  8167.,  9616., 10808., 12069., 13659., 11675., 13337., 13073., 14807., 11208., 12624.,  8341.,  9399.,  6667.,  7573., 10360., 11648., 13375., 15085., 13749., 15531., 13867., 15721., 10992., 12504.,  7963.,  9093.,  5504.,  6104.,  7184.,  8048.,  9096., 10256., 10400., 11720., 11704., 13184.,  8784., 10032.,  6912.,  7896.,  4483.,  4993.,  6896.,  7624.,  8595.,  9565.,  9565., 10655., 10535., 11745.,  8856.,  9872.,  7315.,  8113.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   272.,   308.,   193.,   215.,    88.,   124.,   340.,   428.,   788.,   944.,  1100.,  1256.,  1412.,  1568.,  1276.,  1396.,   816.,   884.,   448.,   484.,  1220.,  1308.,  2348.,  2504.,  2660.,  2816.,  2972.,  3128.,  2476.,  2596.,  1496.,  1564.,   808.,   844.,  2100.,  2188.,  3908.,  4064.,  4220.,  4376.,  4532.,  4688.,  3676.,  3796.,  2176.,  2244.,  1168.,  1204.,  2980.,  3068.,  5468.,  5624.,  5780.,  5936.,  6092.,  6248.,  4876.,  4996.,  2856.,  2924.,  1223.,  1253.,  2832.,  2900.,  4843.,  4957.,  5071.,  5185.,  5299.,  5413.,  4004.,  4088.,  2243.,  2289.,    41.,    95.,   196.,   312.,   481.,   667.,   853.,  1039.,  1225.,  1411.,  1016.,  1148.,   613.,   683.,   640.,   772.,  1636.,  1916.,  3020.,  3464.,  3908.,  4352.,  4796.,  5240.,  3724.,  4036.,  2136.,  2300.,  1960.,  2092.,  4436.,  4716.,  7460.,  7904.,  8348.,  8792.,  9236.,  9680.,  6844.,  7156.,  3776.,  3940.,  3280.,  3412.,  7236.,  7516., 11900., 12344., 12788., 13232., 13676., 14120.,  9964., 10276.,  5416.,  5580.,  4600.,  4732., 10036., 10316., 16340., 16784., 17228., 17672., 18116., 18560., 13084., 13396.,  7056.,  7220.,  3179.,  3257.,  6840.,  7004., 10999., 11257., 11515., 11773., 12031., 12289.,  8588.,  8768.,  4583.,  4677.,    77.,   179.,   364.,   576.,   877.,  1207.,  1537.,  1867.,  2197.,  2527.,  1760.,  1988.,  1033.,  1151.,  1192.,  1420.,  2932.,  3404.,  5252.,  5984.,  6716.,  7448.,  8180.,  8912.,  6172.,  6676.,  3456.,  3716.,  3472.,  3700.,  7652.,  8124., 12572., 13304., 14036., 14768., 15500., 16232., 11212., 11716.,  6056.,  6316.,  5752.,  5980., 12372., 12844., 19892., 20624., 21356., 22088., 22820., 23552., 16252., 16756.,  8656.,  8916.,  8032.,  8260., 17092., 17564., 27212., 27944., 28676., 29408., 30140., 30872., 21292., 21796., 11256., 11516.,  5135.,  5261., 10848., 11108., 17155., 17557., 17959., 18361., 18763., 19165., 13172., 13448.,  6923.,  7065.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1622., 2814., 3096., 4728., 2658., 4666., 3514., 5458., 2994., 5130., 3096., 4728., 1622., 2814., 2174., 3430., 2328., 3960., 3514., 5458., 2994., 5130., 3850., 5922., 2328., 3960., 2174., 3430., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1702., 3022., 3096., 4728., 2994., 5130., 3850., 5922., 2658., 4666., 3096., 4728., 1702., 3022., 2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1622., 2814., 3096., 4728., 2658., 4666., 3514., 5458., 2994., 5130., 3096., 4728., 1622., 2814.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  578.,  890., 1202., 1514., 1506., 1818., 1188., 1460.,  110.,  278.,  260.,  532., 1272., 1944., 3292., 4492., 5372., 6572., 5084., 6284., 2968., 3896.,  676., 1204.,  804., 1076., 2616., 3288., 5372., 6572., 5084., 6284., 3772., 4972., 1944., 2872., 1732., 2260., 1348., 1620., 3640., 4312., 5084., 6284., 3772., 4972., 3292., 4492., 3800., 4728., 2788., 3316., 1572., 1844., 2296., 2968., 3772., 4972., 3292., 4492., 5372., 6572., 4824., 5752., 2500., 3028.,  150.,  382.,  804., 1332., 2090., 2978., 3866., 4754., 3786., 4674., 2580., 3236.,  230.,  590.,  270.,  694., 1428., 2340., 3282., 4234., 5186., 6138., 3698., 4650.,  580., 1108.,   30.,   70., 1188., 1716., 3640., 4824., 6268., 7724., 5788., 7244., 3964., 5420., 2968., 3896.,  260.,  532., 2244., 2772., 6008., 7192., 5788., 7244., 3964., 5420., 5212., 6668., 2968., 3896.,  804., 1076., 3300., 3828., 4984., 6168., 3964., 5420., 5212., 6668., 6268., 7724., 4824., 5752., 1348., 1620.,  964., 1492., 2616., 3800., 5212., 6668., 6268., 7724., 5788., 7244., 2776., 3704., 1572., 1844.,   70.,  174.,  388.,  660., 1082., 1586., 2090., 2594., 2266., 2770., 1652., 2052.,  150.,  382.,  190.,  486., 1012., 1668., 2594., 3674., 4754., 5834., 4546., 5626., 3044., 3828.,  270.,  694., 1092., 1876., 3640., 4824., 7196., 8908., 8252., 9964., 4892., 6604., 1944., 2872., 1188., 1716., 2660., 3444., 6008., 7192., 8252., 9964., 4892., 6604., 4604., 6316., 2968., 3896., 2244., 2772., 4228., 5012., 6008., 7192., 4892., 6604., 4604., 6316., 7196., 8908., 4824., 5752., 3300., 3828., 3428., 4212., 1592., 2776., 4604., 6316., 7196., 8908., 8252., 9964., 3800., 4728.,  964., 1492.,  310.,  798., 1316., 1844., 2442., 3074., 3706., 4338., 1066., 1698.,  724.,  868.,   70.,  174.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 969., 1050., 1131., 1212., 1322., 1436., 1550., 1664., 1806., 1956., 2106., 2256., 2017., 2182., 2347., 2512., 2228., 2408., 2588., 2768., 2030., 2180., 2330., 2480., 1621., 1738., 1855., 1972., 1966., 2116., 2266., 2416., 2608., 2816., 3024., 3232., 3478., 3748., 4018., 4288., 3746., 4036., 4326., 4616., 4014., 4324., 4634., 4944., 3424., 3680., 3936., 4192., 2734., 2932., 3130., 3328., 3232., 3472., 3712., 3952., 4274., 4604., 4934., 5264., 5625., 6018., 6411., 6804., 5826., 6212., 6598., 6984., 5899., 6278., 6657., 7036., 4462., 4756., 5050., 5344., 2988., 3192., 3396., 3600., 4341., 4590., 4839., 5088., 5478., 5820., 6162., 6504., 6072., 6480., 6888., 7296., 5633., 6034., 6435., 6836., 5066., 5460., 5854., 6248., 4146., 4452., 4758., 5064., 3401., 3614., 3827., 4040., 3358., 3580., 3802., 4024., 4816., 5120., 5424., 5728., 5846., 6204., 6562., 6920., 5746., 6092., 6438., 6784., 5518., 5852., 6186., 6520., 3680., 3936., 4192., 4448., 2302., 2476., 2650., 2824., 2702., 2876., 3050., 3224., 3822., 4060., 4298., 4536., 3589., 3862., 4135., 4408., 3792., 4048., 4304., 4560., 3867., 4106., 4345., 4584., 3106., 3284., 3462., 3640., 2114., 2228., 2342., 2456., 2259., 2430., 2601., 2772., 2962., 3196., 3430., 3664., 3916., 4216., 4516., 4816., 4127., 4442., 4757., 5072., 4338., 4668., 4998., 5328., 3830., 4100., 4370., 4640., 2991., 3198., 3405., 3612., 3414., 3620., 3826., 4032., 4208., 4480., 4752., 5024., 5262., 5604., 5946., 6288., 4986., 5316., 5646., 5976., 5254., 5604., 5954., 6304., 4096., 4384., 4672., 4960., 3126., 3348., 3570., 3792., 3550., 3780., 4010., 4240., 3978., 4284., 4590., 4896., 5395., 5782., 6169., 6556., 5596., 5976., 6356., 6736., 5957., 6362., 6767., 7172., 4838., 5172., 5506., 5840., 4058., 4316., 4574., 4832., 3507., 3746., 3985., 4224., 4798., 5116., 5434., 5752., 5842., 6244., 6646., 7048., 5403., 5798., 6193., 6588., 5764., 6184., 6604., 7024., 4394., 4740., 5086., 5432., 3575., 3842., 4109., 4376., 3270., 3452., 3634., 3816., 4496., 4736., 4976., 5216., 5166., 5468., 5770., 6072., 5066., 5356., 5646., 5936., 5382., 5692., 6002., 6312., 4384., 4640., 4896., 5152., 3238., 3436., 3634., 3832., 1736., 1840., 1944., 2048., 2358., 2492., 2626., 2760., 2099., 2266., 2433., 2600., 2302., 2452., 2602., 2752., 2537., 2702., 2867., 3032., 2058., 2196., 2334., 2472., 1804., 1912., 2020., 2128., 3069., 3234., 3399., 3564., 3706., 3932., 4158., 4384., 4586., 4876., 5166., 5456., 4125., 4398., 4671., 4944., 3536., 3792., 4048., 4304., 2494., 2692., 2890., 3088., 2153., 2290., 2427., 2564., 2366., 2564., 2762., 2960., 3440., 3712., 3984., 4256., 4806., 5156., 5506., 5856., 4786., 5124., 5462., 5800., 4638., 4964., 5290., 5616., 3296., 3552., 3808., 4064., 2430., 2612., 2794., 2976., 3644., 3896., 4148., 4400., 5026., 5372., 5718., 6064., 6125., 6570., 7015., 7460., 5558., 5996., 6434., 6872., 5887., 6318., 6749., 7180., 5054., 5396., 5738., 6080., 3784., 4032., 4280., 4528., 4113., 4374., 4635., 4896., 5718., 6076., 6434., 6792., 6828., 7288., 7748., 8208., 6645., 7098., 7551., 8004., 6334., 6780., 7226., 7672., 4866., 5220., 5574., 5928., 3173., 3430., 3687., 3944., 3214., 3388., 3562., 3736., 3984., 4224., 4464., 4704., 4934., 5244., 5554., 5864., 5250., 5580., 5910., 6240., 5566., 5916., 6266., 6616., 4352., 4640., 4928., 5216., 3278., 3500., 3722., 3944., 2306., 2468., 2630., 2792., 3390., 3612., 3834., 4056., 4417., 4702., 4987., 5272., 4652., 4952., 5252., 5552., 4887., 5202., 5517., 5832., 3858., 4116., 4374., 4632., 3254., 3452., 3650., 3848.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   25.,   30.,   35.,   40.,   92.,  104.,  116.,  128.,  209.,  230.,  251.,  272.,  293.,  314.,  335.,  356.,  377.,  398.,  419.,  440.,  336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,  671.,  692.,  713.,  734.,  755.,  776.,  797.,  818.,  839.,  860.,  656.,  672.,  688.,  704.,  393.,  402.,  411.,  420.,  225.,  230.,  235.,  240.,  572.,  584.,  596.,  608., 1049., 1070., 1091., 1112., 1133., 1154., 1175., 1196., 1217., 1238., 1259., 1280.,  976.,  992., 1008., 1024.,  573.,  582.,  591.,  600.,  325.,  330.,  335.,  340.,  812.,  824.,  836.,  848., 1469., 1490., 1511., 1532., 1553., 1574., 1595., 1616., 1637., 1658., 1679., 1700., 1296., 1312., 1328., 1344.,  753.,  762.,  771.,  780.,  324.,  328.,  332.,  336.,  745.,  754.,  763.,  772., 1267., 1282., 1297., 1312., 1327., 1342., 1357., 1372., 1387., 1402., 1417., 1432., 1043., 1054., 1065., 1076.,  582.,  588.,  594.,  600.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  112.,  136.,  160.,  184.,  208.,  232.,  256.,  280.,  304.,  328.,  352.,  376.,  253.,  270.,  287.,  304.,  153.,  162.,  171.,  180.,  157.,  174.,  191.,  208.,  404.,  440.,  476.,  512.,  749.,  806.,  863.,  920.,  977., 1034., 1091., 1148., 1205., 1262., 1319., 1376.,  936.,  976., 1016., 1056.,  537.,  558.,  579.,  600.,  497.,  514.,  531.,  548., 1124., 1160., 1196., 1232., 1889., 1946., 2003., 2060., 2117., 2174., 2231., 2288., 2345., 2402., 2459., 2516., 1736., 1776., 1816., 1856.,  957.,  978.,  999., 1020.,  837.,  854.,  871.,  888., 1844., 1880., 1916., 1952., 3029., 3086., 3143., 3200., 3257., 3314., 3371., 3428., 3485., 3542., 3599., 3656., 2536., 2576., 2616., 2656., 1377., 1398., 1419., 1440., 1177., 1194., 1211., 1228., 2564., 2600., 2636., 2672., 4169., 4226., 4283., 4340., 4397., 4454., 4511., 4568., 4625., 4682., 4739., 4796., 3336., 3376., 3416., 3456., 1797., 1818., 1839., 1860.,  810.,  820.,  830.,  840., 1741., 1762., 1783., 1804., 2797., 2830., 2863., 2896., 2929., 2962., 2995., 3028., 3061., 3094., 3127., 3160., 2183., 2206., 2229., 2252., 1164., 1176., 1188., 1200.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  202.,  244.,  286.,  328.,  370.,  412.,  454.,  496.,  538.,  580.,  622.,  664.,  433.,  462.,  491.,  520.,  255.,  270.,  285.,  300.,  289.,  318.,  347.,  376.,  716.,  776.,  836.,  896., 1289., 1382., 1475., 1568., 1661., 1754., 1847., 1940., 2033., 2126., 2219., 2312., 1536., 1600., 1664., 1728.,  861.,  894.,  927.,  960.,  869.,  898.,  927.,  956., 1916., 1976., 2036., 2096., 3149., 3242., 3335., 3428., 3521., 3614., 3707., 3800., 3893., 3986., 4079., 4172., 2816., 2880., 2944., 3008., 1521., 1554., 1587., 1620., 1449., 1478., 1507., 1536., 3116., 3176., 3236., 3296., 5009., 5102., 5195., 5288., 5381., 5474., 5567., 5660., 5753., 5846., 5939., 6032., 4096., 4160., 4224., 4288., 2181., 2214., 2247., 2280., 2029., 2058., 2087., 2116., 4316., 4376., 4436., 4496., 6869., 6962., 7055., 7148., 7241., 7334., 7427., 7520., 7613., 7706., 7799., 7892., 5376., 5440., 5504., 5568., 2841., 2874., 2907., 2940., 1296., 1312., 1328., 1344., 2737., 2770., 2803., 2836., 4327., 4378., 4429., 4480., 4531., 4582., 4633., 4684., 4735., 4786., 4837., 4888., 3323., 3358., 3393., 3428., 1746., 1764., 1782., 1800.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  6136.,  6992.,  7848.,  8704.,  8592.,  9712., 10832., 11952.,  8928., 10216., 11504., 12792.,  6744.,  7936.,  9128., 10320.,  7632.,  8728.,  9824., 10920.,  6096.,  6960.,  7824.,  8688.,  4408.,  5008.,  5608.,  6208.,  3691.,  4297.,  4903.,  5509.,  5752.,  6608.,  7464.,  8320.,  6367.,  7369.,  8371.,  9373.,  7097.,  8091.,  9085., 10079.,  7315.,  8301.,  9287., 10273.,  5808.,  6568.,  7328.,  8088.,  3219.,  3729.,  4239.,  4749.,  3721.,  4303.,  4885.,  5467.,  5536.,  6360.,  7184.,  8008.,  7057.,  8147.,  9237., 10327.,  7819.,  9029., 10239., 11449.,  7461.,  8663.,  9865., 11067.,  6040.,  7024.,  8008.,  8992.,  5201.,  5943.,  6685.,  7427.,  5464.,  6192.,  6920.,  7648.,  7472.,  8464.,  9456., 10448.,  8352.,  9640., 10928., 12216.,  9336., 10656., 11976., 13296.,  8784., 10136., 11488., 12840.,  8336.,  9456., 10576., 11696.,  6328.,  7184.,  8040.,  8896.,  6093.,  7007.,  7921.,  8835.,  7560.,  8816., 10072., 11328., 10041., 11679., 13317., 14955., 10735., 12445., 14155., 15865., 11941., 13723., 15505., 17287., 10288., 11768., 13248., 14728.,  7525.,  8663.,  9801., 10939.,  5219.,  6205.,  7191.,  8177.,  8624.,  9848., 11072., 12296., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  9567., 11085., 12603., 14121.,  8088.,  9280., 10472., 11664.,  6907.,  7861.,  8815.,  9769.,  6312.,  7232.,  8152.,  9072.,  8080.,  9200., 10320., 11440.,  9360., 10712., 12064., 13416.,  7176.,  8432.,  9688., 10944.,  8160.,  9448., 10736., 12024.,  6704.,  7696.,  8688.,  9680.,  5192.,  5984.,  6776.,  7568.,  5031.,  5717.,  6403.,  7089.,  5832.,  6624.,  7416.,  8208.,  4963.,  5885.,  6807.,  7729.,  5597.,  6383.,  7169.,  7955.,  5815.,  6593.,  7371.,  8149.,  3744.,  4312.,  4880.,  5448.,  3567.,  4029.,  4491.,  4953.,  4069.,  4603.,  5137.,  5671.,  5104.,  5864.,  6624.,  7384.,  6549.,  7559.,  8569.,  9579.,  6703.,  7705.,  8707.,  9709.,  6345.,  7339.,  8333.,  9327.,  4488.,  5280.,  6072.,  6864.,  3277.,  3843.,  4409.,  4975.,  5128.,  5920.,  6712.,  7504.,  7568.,  8688.,  9808., 10928.,  9904., 11384., 12864., 14344.,  9864., 11376., 12888., 14400.,  9312., 10856., 12400., 13944.,  8432.,  9680., 10928., 12176.,  7016.,  7936.,  8856.,  9776.,  5585.,  6419.,  7253.,  8087.,  7896.,  9088., 10280., 11472., 10773., 12363., 13953., 15543., 10443., 12105., 13767., 15429., 11649., 13383., 15117., 16851., 10624., 12040., 13456., 14872.,  7657.,  8715.,  9773., 10831.,  5223.,  6129.,  7035.,  7941.,  8544.,  9832., 11120., 12408., 10735., 12445., 14155., 15865., 11941., 13723., 15505., 17287., 12635., 14489., 16343., 18197., 10248., 11760., 13272., 14784.,  6719.,  7849.,  8979., 10109.,  4152.,  4752.,  5352.,  5952.,  5840.,  6704.,  7568.,  8432.,  8064.,  9224., 10384., 11544.,  9144., 10464., 11784., 13104., 10224., 11704., 13184., 14664.,  8432.,  9680., 10928., 12176.,  7000.,  7984.,  8968.,  9952.,  3107.,  3617.,  4127.,  4637.,  4888.,  5616.,  6344.,  7072.,  6215.,  7185.,  8155.,  9125.,  7041.,  8131.,  9221., 10311.,  7867.,  9077., 10287., 11497.,  6768.,  7784.,  8800.,  9816.,  5227.,  6025.,  6823.,  7621.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1768.,  1924.,  2080.,  2236.,  2392.,  2548.,  2704.,  2860.,  3016.,  3172.,  2460.,  2580.,  2700.,  2820.,  1580.,  1648.,  1716.,  1784.,   868.,   904.,   940.,   976.,  2372.,  2460.,  2548.,  2636.,  4576.,  4732.,  4888.,  5044.,  5200.,  5356.,  5512.,  5668.,  5824.,  5980.,  6136.,  6292.,  4860.,  4980.,  5100.,  5220.,  2940.,  3008.,  3076.,  3144.,  1588.,  1624.,  1660.,  1696.,  3748.,  3836.,  3924.,  4012.,  6416.,  6572.,  6728.,  6884.,  5632.,  5788.,  5944.,  6100.,  6256.,  6412.,  6568.,  6724.,  4956.,  5076.,  5196.,  5316.,  2892.,  2960.,  3028.,  3096.,  1924.,  1960.,  1996.,  2032.,  2692.,  2780.,  2868.,  2956.,  3776.,  3932.,  4088.,  4244.,  1456.,  1612.,  1768.,  1924.,  2080.,  2236.,  2392.,  2548.,  1980.,  2100.,  2220.,  2340.,  1308.,  1376.,  1444.,  1512.,   503.,   533.,   563.,   593.,  1260.,  1328.,  1396.,  1464.,  2303.,  2417.,  2531.,  2645.,  2759.,  2873.,  2987.,  3101.,  3215.,  3329.,  3443.,  3557.,  2568.,  2652.,  2736.,  2820.,  1507.,  1553.,  1599.,  1645.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   821.,  1007.,  1193.,  1379.,  1565.,  1751.,  1937.,  2123.,  2309.,  2495.,  2681.,  2867.,  1932.,  2064.,  2196.,  2328.,  1173.,  1243.,  1313.,  1383.,  1180.,  1312.,  1444.,  1576.,  3060.,  3340.,  3620.,  3900.,  5704.,  6148.,  6592.,  7036.,  7480.,  7924.,  8368.,  8812.,  9256.,  9700., 10144., 10588.,  7212.,  7524.,  7836.,  8148.,  4148.,  4312.,  4476.,  4640.,  3820.,  3952.,  4084.,  4216.,  8660.,  8940.,  9220.,  9500., 14584., 15028., 15472., 15916., 16360., 16804., 17248., 17692., 18136., 18580., 19024., 19468., 13452., 13764., 14076., 14388.,  7428.,  7592.,  7756.,  7920.,  6460.,  6592.,  6724.,  6856., 10804., 11084., 11364., 11644., 16040., 16484., 16928., 17372., 13336., 13780., 14224., 14668., 15112., 15556., 16000., 16444., 11244., 11556., 11868., 12180.,  6228.,  6392.,  6556.,  6720.,  5644.,  5776.,  5908.,  6040.,  7444.,  7724.,  8004.,  8284.,  9944., 10388., 10832., 11276.,  5704.,  6148.,  6592.,  7036.,  7480.,  7924.,  8368.,  8812.,  5964.,  6276.,  6588.,  6900.,  3492.,  3656.,  3820.,  3984.,  1307.,  1385.,  1463.,  1541.,  3060.,  3224.,  3388.,  3552.,  5291.,  5549.,  5807.,  6065.,  6323.,  6581.,  6839.,  7097.,  7355.,  7613.,  7871.,  8129.,  5520.,  5700.,  5880.,  6060.,  3079.,  3173.,  3267.,  3361.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  2165.,  2495.,  2825.,  3155.,  3485.,  3815.,  4145.,  4475.,  4805.,  5135.,  3348.,  3576.,  3804.,  4032.,  1977.,  2095.,  2213.,  2331.,  2212.,  2440.,  2668.,  2896.,  5508.,  5980.,  6452.,  6924.,  9952., 10684., 11416., 12148., 12880., 13612., 14344., 15076., 15808., 16540., 17272., 18004., 11964., 12468., 12972., 13476.,  6716.,  6976.,  7236.,  7496.,  6772.,  7000.,  7228.,  7456., 14948., 15420., 15892., 16364., 24592., 25324., 26056., 26788., 27520., 28252., 28984., 29716., 30448., 31180., 31912., 32644., 22044., 22548., 23052., 23556., 11916., 12176., 12436., 12696., 11332., 11560., 11788., 12016., 17860., 18332., 18804., 19276., 25664., 26396., 27128., 27860., 21040., 21772., 22504., 23236., 23968., 24700., 25432., 26164., 17532., 18036., 18540., 19044.,  9564.,  9824., 10084., 10344.,  9364.,  9592.,  9820., 10048., 12196., 12668., 13140., 13612., 16112., 16844., 17576., 18308.,  9952., 10684., 11416., 12148., 12880., 13612., 14344., 15076.,  9948., 10452., 10956., 11460.,  5676.,  5936.,  6196.,  6456.,  2111.,  2237.,  2363.,  2489.,  4860.,  5120.,  5380.,  5640.,  8279.,  8681.,  9083.,  9485.,  9887., 10289., 10691., 11093., 11495., 11897., 12299., 12701.,  8472.,  8748.,  9024.,  9300.,  4651.,  4793.,  4935.,  5077.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,   830.,  2086.,  3342.,  4598.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1108.,  1380.,  1652.,  1924.,  1784.,  2456.,  3128.,  3800.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  1780.,  2308.,  2836.,  3364.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1108.,  1380.,  1652.,  1924.,  1784.,  2456.,  3128.,  3800.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  1780.,  2308.,  2836.,  3364.,   150.,   382.,   614.,   846.,  1268.,  1796.,  2324.,  2852.,  1754.,  2642.,  3530.,  4418.,  2938.,  3826.,  4714.,  5602.,  1754.,  2642.,  3530.,  4418.,  1860.,  2516.,  3172.,  3828.,   230.,   590.,   950.,  1310.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,   500.,  1028.,  1556.,  2084.,    30.,    70.,   110.,   150.,  2036.,  2564.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  3480.,  4408.,  5336.,  6264.,   340.,   612.,   884.,  1156.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,  2036.,  2564.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  3480.,  4408.,  5336.,  6264.,   340.,   612.,   884.,  1156.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  2196.,  2980.,  3764.,  4548.,   270.,   694.,  1118.,  1542.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,   310.,   798.,  1286.,  1774.,  2292.,  2820.,  3348.,  3876.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4612.,  6500.,  8570.,  8880.,  9190.,  9500.,  8012.,  6322.,  4956.,  6910.,  9020.,  9290.,  9560.,  9830.,  8212.,  6423.,  3024.,  4290.,  5690.,  5810.,  5930.,  6050.,  5144.,  4089.,  4732.,  6620.,  8670.,  8880.,  9090.,  9300.,  7812.,  6142.,  6638.,  9240., 12045., 12370., 12695., 13020., 10882.,  8516.,  4814.,  6760.,  8885.,  9210.,  9535.,  9860.,  8306.,  6548.,  1828.,  2660.,  3610.,  3920.,  4230.,  4540.,  3916.,  3154.,  2508.,  3550.,  4700.,  4970.,  5240.,  5510.,  4660.,  3687.,  2400.,  3490.,  4730.,  4850.,  4970.,  5090.,  4408.,  3561.,  4636.,  6620.,  8830.,  9040.,  9250.,  9460.,  8068.,  6430.,  7406., 10360., 13565., 13890., 14215., 14540., 12194.,  9572.,  7502., 10440., 13605., 13930., 14255., 14580., 12178.,  9524.,  6532.,  9060., 11770., 12080., 12390., 12700., 10572.,  8242.,  4284.,  5950.,  7740.,  8010.,  8280.,  8550.,  7124.,  5559.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,   74.,  130.,  166.,  161.,  133.,   80.,   41.,  105.,  194.,  310.,  346.,  311.,  243.,  140.,   71.,  175.,  314.,  490.,  526.,  461.,  353.,  200.,  101.,  245.,  434.,  670.,  706.,  611.,  463.,  260.,  105.,  236.,  394.,  580.,  606.,  502.,  367.,  200.,    9.,   28.,   58.,  100.,  142.,  130.,  103.,   60.,   67.,  163.,  290.,  450.,  550.,  473.,  357.,  200.,  177.,  393.,  650.,  950., 1050.,  863.,  627.,  340.,  287.,  623., 1010., 1450., 1550., 1253.,  897.,  480.,  397.,  853., 1370., 1950., 2050., 1643., 1167.,  620.,  273.,  580.,  922., 1300., 1358., 1078.,  759.,  400.,   17.,   52.,  106.,  180.,  254.,  226.,  175.,  100.,  123.,  291.,  506.,  770.,  934.,  785.,  581.,  320.,  313.,  681., 1106., 1590., 1754., 1415., 1011.,  540.,  503., 1071., 1706., 2410., 2574., 2045., 1441.,  760.,  693., 1461., 2306., 3230., 3394., 2675., 1871.,  980.,  441.,  924., 1450., 2020., 2110., 1654., 1151.,  600.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.,  2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.,  2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   233.,   218.,   143.,    64.,   224.,   496.,   896.,  1168.,  1156.,   968.,   588.,   284.,   744.,  1396.,  2256.,  2528.,  2296.,  1808.,  1048.,   504.,  1264.,  2296.,  3616.,  3888.,  3436.,  2648.,  1508.,   724.,  1784.,  3196.,  4976.,  5248.,  4576.,  3488.,  1968.,   789.,  1782.,  2987.,  4412.,  4612.,  3833.,  2810.,  1535.,    53.,   182.,   395.,   700.,  1028.,   953.,   762.,   447.,   480.,  1184.,  2128.,  3328.,  4112.,  3556.,  2696.,  1516.,  1340.,  2984.,  4948.,  7248.,  8032.,  6616.,  4816.,  2616.,  2200.,  4784.,  7768., 11168., 11952.,  9676.,  6936.,  3716.,  3060.,  6584., 10588., 15088., 15872., 12736.,  9056.,  4816.,  2117.,  4502.,  7163., 10108., 10564.,  8393.,  5914.,  3119.,   101.,   342.,   731.,  1276.,  1860.,  1673.,  1306.,   751.,   896.,  2144.,  3760.,  5760.,  7056.,  5956.,  4424.,  2444.,  2396.,  5224.,  8500., 12240., 13536., 10936.,  7824.,  4184.,  3896.,  8304., 13240., 18720., 20016., 15916., 11224.,  5924.,  5396., 11384., 17980., 25200., 26496., 20896., 14624.,  7664.,  3445.,  7222., 11339., 15804., 16516., 12953.,  9018.,  4703.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1780.,  4424.,  8060., 10448.,  9680.,  7308.,  3432.,  2340.,  1092.,  2856.,  5228.,  8336.,  8592.,  8252.,  6792.,  4084.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1780.,  4424.,  8060., 10448.,  9680.,  7308.,  3432.,  2340.,  1092.,  2856.,  5228.,  8336.,  8592.,  8252.,  6792.,  4084.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1780.,  4424.,  8060., 10448.,  9680.,  7308.,  3432.,  2340.,  1092.,  2856.,  5228.,  8336.,  8592.,  8252.,  6792.,  4084.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  8864.,  9224., 12512., 13000., 16520., 17140., 17120., 17760., 17720., 18380., 18320., 19000., 15472., 16024., 12224., 12644.,  9606.,  9912., 13406., 13820., 17515., 18040., 18040., 18580., 18565., 19120., 19090., 19660., 15962., 16424., 12495., 12846.,  5718.,  6048.,  8134.,  8580., 10815., 11380., 11040., 11620., 11265., 11860., 11490., 12100.,  9794., 10288.,  7803.,  8178.,  9104.,  9464., 12752., 13240., 16720., 17340., 17120., 17760., 17520., 18180., 17920., 18600., 15072., 15624., 11864., 12284., 12862., 13276., 17918., 18480., 23375., 24090., 24000., 24740., 24625., 25390., 25250., 26040., 21122., 21764., 16543., 17032.,  9286.,  9628., 13054., 13520., 17175., 17770., 17800., 18420., 18425., 19070., 19050., 19720., 16066., 16612., 12679., 13096.,  3488.,  3656.,  5088.,  5320.,  6920.,  7220.,  7520.,  7840.,  8120.,  8460.,  8720.,  9080.,  7536.,  7832.,  6080.,  6308.,  4854.,  5016.,  6878.,  7100.,  9115.,  9400.,  9640.,  9940., 10165., 10480., 10690., 11020.,  9050.,  9320.,  7167.,  7374.,  4422.,  4800.,  6470.,  6980.,  8815.,  9460.,  9040.,  9700.,  9265.,  9940.,  9490., 10180.,  8258.,  8816.,  6699.,  7122.,  8720.,  9272., 12496., 13240., 16720., 17660., 17120., 18080., 17520., 18500., 17920., 18920., 15328., 16136., 12248., 12860., 14254., 14812., 19966., 20720., 26175., 27130., 26800., 27780., 27425., 28430., 28050., 29080., 23554., 24388., 18511., 19144., 14518., 15004., 20222., 20880., 26375., 27210., 27000., 27860., 27625., 28510., 28250., 29160., 23618., 24356., 18487., 19048., 12704., 13064., 17632., 18120., 22920., 23540., 23520., 24160., 24120., 24780., 24720., 25400., 20592., 21144., 16064., 16484.,  8358.,  8568., 11614., 11900., 15115., 15480., 15640., 16020., 16165., 16560., 16690., 17100., 13914., 14248., 10863., 11118.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   59.,   68.,   55.,   62.,   36.,   40.,   16.,   22.,   56.,   70.,  124.,  148.,  224.,  260.,  296.,  332.,  292.,  322.,  244.,  266.,  148.,  160.,   76.,   82.,  196.,  210.,  364.,  388.,  584.,  620.,  656.,  692.,  592.,  622.,  464.,  486.,  268.,  280.,  136.,  142.,  336.,  350.,  604.,  628.,  944.,  980., 1016., 1052.,  892.,  922.,  684.,  706.,  388.,  400.,  196.,  202.,  476.,  490.,  844.,  868., 1304., 1340., 1376., 1412., 1192., 1222.,  904.,  926.,  508.,  520.,  205.,  210.,  461.,  472.,  770.,  788., 1134., 1160., 1186., 1212.,  983., 1004.,  719.,  734.,  392.,  400.,    9.,   18.,   37.,   56.,   86.,  116.,  158.,  200.,  242.,  284.,  227.,  260.,  183.,  206.,  108.,  120.,  112.,  134.,  280.,  326.,  508.,  580.,  800.,  900., 1000., 1100.,  868.,  946.,  660.,  714.,  372.,  400.,  332.,  354.,  740.,  786., 1228., 1300., 1800., 1900., 2000., 2100., 1648., 1726., 1200., 1254.,  652.,  680.,  552.,  574., 1200., 1246., 1948., 2020., 2800., 2900., 3000., 3100., 2428., 2506., 1740., 1794.,  932.,  960.,  772.,  794., 1660., 1706., 2668., 2740., 3800., 3900., 4000., 4100., 3208., 3286., 2280., 2334., 1212., 1240.,  533.,  546., 1133., 1160., 1802., 1844., 2542., 2600., 2658., 2716., 2111., 2156., 1487., 1518.,  784.,  800.,   17.,   34.,   69.,  104.,  158.,  212.,  286.,  360.,  434.,  508.,  395.,  452.,  311.,  350.,  180.,  200.,  208.,  246.,  504.,  582.,  892., 1012., 1376., 1540., 1704., 1868., 1444., 1570., 1076., 1162.,  596.,  640.,  588.,  626., 1284., 1362., 2092., 2212., 3016., 3180., 3344., 3508., 2704., 2830., 1936., 2022., 1036., 1080.,  968., 1006., 2064., 2142., 3292., 3412., 4656., 4820., 4984., 5148., 3964., 4090., 2796., 2882., 1476., 1520., 1348., 1386., 2844., 2922., 4492., 4612., 6296., 6460., 6624., 6788., 5224., 5350., 3656., 3742., 1916., 1960.,  861.,  882., 1805., 1848., 2834., 2900., 3950., 4040., 4130., 4220., 3239., 3308., 2255., 2302., 1176., 1200.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.,  3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.,  3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1584.,  1856.,  2128.,  2400.,  2138.,  2366.,  1808.,  1976.,  1106.,  1198.,   534.,   578.,  1408.,  1512.,  2654.,  2834.,  4304.,  4576.,  4848.,  5120.,  4418.,  4646.,  3488.,  3656.,  2026.,  2118.,   974.,  1018.,  2256.,  2360.,  3814.,  3994.,  5680.,  5952.,  5264.,  5536.,  4586.,  4814.,  3504.,  3672.,  1986.,  2078.,  1222.,  1266.,  1632.,  1736.,  2222.,  2402.,  3024.,  3296.,  1584.,  1856.,  1682.,  1910.,  1472.,  1640.,   922.,  1014.,   333.,   371.,   812.,   896.,  1453.,  1591.,  2272.,  2472.,  2672.,  2872.,  2359.,  2521.,  1820.,  1936.,  1039.,  1101.,    53.,   123.,   252.,   400.,   613.,   847.,  1152.,  1480.,  1808.,  2136.,  1711.,  1969.,  1388.,  1568.,   823.,   917.,   830.,  1002.,  2096.,  2456.,  3830.,  4394.,  6064.,  6848.,  7632.,  8416.,  6650.,  7262.,  5072.,  5496.,  2866.,  3086.,  2550.,  2722.,  5696.,  6056.,  9470., 10034., 13904., 14688., 15472., 16256., 12770., 13382.,  9312.,  9736.,  5066.,  5286.,  4270.,  4442.,  7056.,  7416., 10374., 10938., 14256., 15040., 12816., 13600., 10634., 11246.,  7792.,  8216.,  4258.,  4478.,  3750.,  3922.,  4896.,  5256.,  6478.,  7042.,  8528.,  9312.,  6064.,  6848.,  5426.,  6038.,  4224.,  4648.,  2426.,  2646.,   893.,   995.,  2060.,  2272.,  3517.,  3847.,  5280.,  5736.,  6192.,  6648.,  5191.,  5545.,  3836.,  4080.,  2111.,  2237.,   101.,   235.,   476.,   752.,  1141.,  1567.,  2112.,  2696.,  3280.,  3864.,  3007.,  3457.,  2380.,  2688.,  1383.,  1541.,  1566.,  1866.,  3824.,  4440.,  6806.,  7754., 10544., 11840., 13136., 14432., 11162., 12158.,  8336.,  9016.,  4626.,  4974.,  4566.,  4866.,  9984., 10600., 16286., 17234., 23504., 24800., 26096., 27392., 21122., 22118., 15136., 15816.,  8106.,  8454.,  7566.,  7866., 11856., 12472., 16934., 17882., 22832., 24128., 20368., 21664., 16682., 17678., 12080., 12760.,  6530.,  6878.,  6278.,  6578.,  8160.,  8776., 10734., 11682., 14032., 15328., 10544., 11840.,  9170., 10166.,  6976.,  7656.,  3930.,  4278.,  1453.,  1619.,  3308.,  3648.,  5581.,  6103.,  8288.,  9000.,  9712., 10424.,  8023.,  8569.,  5852.,  6224.,  3183.,  3373.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   972.,  1308.,  3080.,  3880.,  6260.,  7652.,  8208., 10320.,  8208., 10320.,  5540.,  7316.,  2824.,  4136.,  2364.,  3084.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  5188.,  6964.,  5448.,  6760.,  3804.,  4524.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   972.,  1308.,  3080.,  3880.,  6260.,  7652.,  8208., 10320.,  8208., 10320.,  5540.,  7316.,  2824.,  4136.,  2364.,  3084.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  5188.,  6964.,  5448.,  6760.,  3804.,  4524.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   972.,  1308.,  3080.,  3880.,  6260.,  7652.,  8208., 10320.,  8208., 10320.,  5540.,  7316.,  2824.,  4136.,  2364.,  3084.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  5188.,  6964.,  5448.,  6760.,  3804.,  4524.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 2872., 3040., 3208., 3376., 3832., 4064., 4296., 4528., 4516., 4816., 5116., 5416., 4832., 5152., 5472., 5792., 5148., 5488., 5828., 6168., 5464., 5824., 6184., 6544., 3960., 4256., 4552., 4848., 3100., 3328., 3556., 3784., 2106., 2220., 2334., 2448., 3166., 3324., 3482., 3640., 3625., 3830., 4035., 4240., 3860., 4080., 4300., 4520., 4095., 4330., 4565., 4800., 4330., 4580., 4830., 5080., 3590., 3796., 4002., 4208., 2847., 3006., 3165., 3324., 2658., 2796., 2934., 3072., 3182., 3372., 3562., 3752., 3913., 4158., 4403., 4648., 4124., 4384., 4644., 4904., 4335., 4610., 4885., 5160., 4546., 4836., 5126., 5416., 3830., 4068., 4306., 4544., 2815., 2998., 3181., 3364., 1944., 2112., 2280., 2448., 2904., 3136., 3368., 3600., 4116., 4416., 4716., 5016., 4384., 4704., 5024., 5344., 4652., 4992., 5332., 5672., 4920., 5280., 5640., 6000., 3960., 4256., 4552., 4848., 3404., 3632., 3860., 4088., 3134., 3356., 3578., 3800., 4330., 4636., 4942., 5248., 5331., 5726., 6121., 6516., 5692., 6112., 6532., 6952., 6053., 6498., 6943., 7388., 6414., 6884., 7354., 7824., 4930., 5316., 5702., 6088., 3989., 4286., 4583., 4880., 3830., 4076., 4322., 4568., 5322., 5660., 5998., 6336., 6395., 6830., 7265., 7700., 6756., 7216., 7676., 8136., 7117., 7602., 8087., 8572., 7478., 7988., 8498., 9008., 6306., 6724., 7142., 7560., 4877., 5198., 5519., 5840., 3128., 3296., 3464., 3632., 3832., 4064., 4296., 4528., 4772., 5072., 5372., 5672., 5088., 5408., 5728., 6048., 5404., 5744., 6084., 6424., 5720., 6080., 6440., 6800., 4472., 4768., 5064., 5360., 3356., 3584., 3812., 4040., 2282., 2444., 2606., 2768., 3358., 3580., 3802., 4024., 4409., 4694., 4979., 5264., 4644., 4944., 5244., 5544., 4879., 5194., 5509., 5824., 5114., 5444., 5774., 6104., 4038., 4308., 4578., 4848., 3407., 3614., 3821., 4028., 1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 2872., 3040., 3208., 3376., 3832., 4064., 4296., 4528., 4516., 4816., 5116., 5416., 4832., 5152., 5472., 5792., 5148., 5488., 5828., 6168., 5464., 5824., 6184., 6544., 3960., 4256., 4552., 4848., 3100., 3328., 3556., 3784., 2106., 2220., 2334., 2448., 3166., 3324., 3482., 3640., 3625., 3830., 4035., 4240., 3860., 4080., 4300., 4520., 4095., 4330., 4565., 4800., 4330., 4580., 4830., 5080., 3590., 3796., 4002., 4208., 2847., 3006., 3165., 3324.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   109.,   118.,   127.,   136.,   103.,   110.,   117.,   124.,    68.,    72.,    76.,    80.,    26.,    32.,    38.,    44.,    98.,   112.,   126.,   140.,   224.,   248.,   272.,   296.,   412.,   448.,   484.,   520.,   556.,   592.,   628.,   664.,   554.,   584.,   614.,   644.,   466.,   488.,   510.,   532.,   284.,   296.,   308.,   320.,   146.,   152.,   158.,   164.,   378.,   392.,   406.,   420.,   704.,   728.,   752.,   776.,  1132.,  1168.,  1204.,  1240.,  1276.,  1312.,  1348.,  1384.,  1154.,  1184.,  1214.,  1244.,   906.,   928.,   950.,   972.,   524.,   536.,   548.,   560.,   266.,   272.,   278.,   284.,   658.,   672.,   686.,   700.,  1184.,  1208.,  1232.,  1256.,  1852.,  1888.,  1924.,  1960.,  1996.,  2032.,  2068.,  2104.,  1754.,  1784.,  1814.,  1844.,  1346.,  1368.,  1390.,  1412.,   764.,   776.,   788.,   800.,   386.,   392.,   398.,   404.,   938.,   952.,   966.,   980.,  1664.,  1688.,  1712.,  1736.,  2572.,  2608.,  2644.,  2680.,  2716.,  2752.,  2788.,  2824.,  2354.,  2384.,  2414.,  2444.,  1786.,  1808.,  1830.,  1852.,  1004.,  1016.,  1028.,  1040.,   405.,   410.,   415.,   420.,   911.,   922.,   933.,   944.,  1522.,  1540.,  1558.,  1576.,  2242.,  2268.,  2294.,  2320.,  2346.,  2372.,  2398.,  2424.,  1945.,  1966.,  1987.,  2008.,  1423.,  1438.,  1453.,  1468.,   776.,   784.,   792.,   800.,     9.,    18.,    27.,    36.,    55.,    74.,    93.,   112.,   142.,   172.,   202.,   232.,   274.,   316.,   358.,   400.,   442.,   484.,   526.,   568.,   421.,   454.,   487.,   520.,   343.,   366.,   389.,   412.,   204.,   216.,   228.,   240.,   202.,   224.,   246.,   268.,   514.,   560.,   606.,   652.,   944.,  1016.,  1088.,  1160.,  1500.,  1600.,  1700.,  1800.,  1900.,  2000.,  2100.,  2200.,  1658.,  1736.,  1814.,  1892.,  1266.,  1320.,  1374.,  1428.,   716.,   744.,   772.,   800.,   642.,   664.,   686.,   708.,  1434.,  1480.,  1526.,  1572.,  2384.,  2456.,  2528.,  2600.,  3500.,  3600.,  3700.,  3800.,  3900.,  4000.,  4100.,  4200.,  3218.,  3296.,  3374.,  3452.,  2346.,  2400.,  2454.,  2508.,  1276.,  1304.,  1332.,  1360.,  1082.,  1104.,  1126.,  1148.,  2354.,  2400.,  2446.,  2492.,  3824.,  3896.,  3968.,  4040.,  5500.,  5600.,  5700.,  5800.,  5900.,  6000.,  6100.,  6200.,  4778.,  4856.,  4934.,  5012.,  3426.,  3480.,  3534.,  3588.,  1836.,  1864.,  1892.,  1920.,  1522.,  1544.,  1566.,  1588.,  3274.,  3320.,  3366.,  3412.,  5264.,  5336.,  5408.,  5480.,  7500.,  7600.,  7700.,  7800.,  7900.,  8000.,  8100.,  8200.,  6338.,  6416.,  6494.,  6572.,  4506.,  4560.,  4614.,  4668.,  2396.,  2424.,  2452.,  2480.,  1053.,  1066.,  1079.,  1092.,  2239.,  2266.,  2293.,  2320.,  3562.,  3604.,  3646.,  3688.,  5026.,  5084.,  5142.,  5200.,  5258.,  5316.,  5374.,  5432.,  4177.,  4222.,  4267.,  4312.,  2943.,  2974.,  3005.,  3036.,  1552.,  1568.,  1584.,  1600.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   262.,   316.,   370.,   424.,   498.,   572.,   646.,   720.,   794.,   868.,   942.,  1016.,   733.,   790.,   847.,   904.,   583.,   622.,   661.,   700.,   340.,   360.,   380.,   400.,   378.,   416.,   454.,   492.,   930.,  1008.,  1086.,  1164.,  1664.,  1784.,  1904.,  2024.,  2588.,  2752.,  2916.,  3080.,  3244.,  3408.,  3572.,  3736.,  2762.,  2888.,  3014.,  3140.,  2066.,  2152.,  2238.,  2324.,  1148.,  1192.,  1236.,  1280.,  1138.,  1176.,  1214.,  1252.,  2490.,  2568.,  2646.,  2724.,  4064.,  4184.,  4304.,  4424.,  5868.,  6032.,  6196.,  6360.,  6524.,  6688.,  6852.,  7016.,  5282.,  5408.,  5534.,  5660.,  3786.,  3872.,  3958.,  4044.,  2028.,  2072.,  2116.,  2160.,  1898.,  1936.,  1974.,  2012.,  4050.,  4128.,  4206.,  4284.,  6464.,  6584.,  6704.,  6824.,  9148.,  9312.,  9476.,  9640.,  9804.,  9968., 10132., 10296.,  7802.,  7928.,  8054.,  8180.,  5506.,  5592.,  5678.,  5764.,  2908.,  2952.,  2996.,  3040.,  2658.,  2696.,  2734.,  2772.,  5610.,  5688.,  5766.,  5844.,  8864.,  8984.,  9104.,  9224., 12428., 12592., 12756., 12920., 13084., 13248., 13412., 13576., 10322., 10448., 10574., 10700.,  7226.,  7312.,  7398.,  7484.,  3788.,  3832.,  3876.,  3920.,  1701.,  1722.,  1743.,  1764.,  3567.,  3610.,  3653.,  3696.,  5602.,  5668.,  5734.,  5800.,  7810.,  7900.,  7990.,  8080.,  8170.,  8260.,  8350.,  8440.,  6409.,  6478.,  6547.,  6616.,  4463.,  4510.,  4557.,  4604.,  2328.,  2352.,  2376.,  2400.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.,  2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.,  2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   779.,   845.,   911.,   977.,   752.,   804.,   856.,   908.,   503.,   533.,   563.,   593.,   154.,   198.,   242.,   286.,   656.,   760.,   864.,   968.,  1570.,  1750.,  1930.,  2110.,  2768.,  3040.,  3312.,  3584.,  3408.,  3680.,  3952.,  4224.,  2950.,  3178.,  3406.,  3634.,  1824.,  1992.,  2160.,  2328.,  1182.,  1274.,  1366.,  1458.,   842.,   886.,   930.,   974.,  2096.,  2200.,  2304.,  2408.,  3826.,  4006.,  4186.,  4366.,  4880.,  5152.,  5424.,  5696.,  4496.,  4768.,  5040.,  5312.,  3350.,  3578.,  3806.,  4034.,  1472.,  1640.,  1808.,  1976.,  1038.,  1130.,  1222.,  1314.,   506.,   550.,   594.,   638.,  1296.,  1400.,  1504.,  1608.,  2370.,  2550.,  2730.,  2910.,  3792.,  4064.,  4336.,  4608.,  3920.,  4192.,  4464.,  4736.,  3814.,  4042.,  4270.,  4498.,  3168.,  3336.,  3504.,  3672.,  1918.,  2010.,  2102.,  2194.,  1194.,  1238.,  1282.,  1326.,  1712.,  1816.,  1920.,  2024.,  2578.,  2758.,  2938.,  3118.,  3856.,  4128.,  4400.,  4672.,  2768.,  3040.,  3312.,  3584.,  2742.,  2970.,  3198.,  3426.,  2112.,  2280.,  2448.,  2616.,   814.,   906.,   998.,  1090.,   637.,   675.,   713.,   751.,  1560.,  1644.,  1728.,  1812.,  2801.,  2939.,  3077.,  3215.,  4392.,  4592.,  4792.,  4992.,  3976.,  4176.,  4376.,  4576.,  3123.,  3285.,  3447.,  3609.,  1824.,  1940.,  2056.,  2172.,    47.,   109.,   171.,   233.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,  1049.,  1283.,  1517.,  1751.,  2056.,  2384.,  2712.,  3040.,  3368.,  3696.,  4024.,  4352.,  3227.,  3485.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,  1575.,  1669.,  1763.,  1857.,  1530.,  1702.,  1874.,  2046.,  3920.,  4280.,  4640.,  5000.,  7234.,  7798.,  8362.,  8926.,  9296., 10080., 10864., 11648.,  9936., 10720., 11504., 12288.,  7590.,  8202.,  8814.,  9426.,  4064.,  4488.,  4912.,  5336.,  2558.,  2778.,  2998.,  3218.,  2730.,  2902.,  3074.,  3246.,  6384.,  6744.,  7104.,  7464., 11026., 11590., 12154., 12718., 13456., 14240., 15024., 15808., 13072., 13856., 14640., 15424.,  9526., 10138., 10750., 11362.,  4736.,  5160.,  5584.,  6008.,  2926.,  3146.,  3366.,  3586.,  2906.,  3078.,  3250.,  3422.,  4560.,  4920.,  5280.,  5640.,  7010.,  7574.,  8138.,  8702., 10320., 11104., 11888., 12672., 10448., 11232., 12016., 12800.,  9478., 10090., 10702., 11314.,  7456.,  7880.,  8304.,  8728.,  4318.,  4538.,  4758.,  4978.,  4106.,  4278.,  4450.,  4622.,  6000.,  6360.,  6720.,  7080.,  8754.,  9318.,  9882., 10446., 12432., 13216., 14000., 14784.,  9296., 10080., 10864., 11648.,  7894.,  8506.,  9118.,  9730.,  5376.,  5800.,  6224.,  6648.,  1678.,  1898.,  2118.,  2338.,  1709.,  1811.,  1913.,  2015.,  3960.,  4172.,  4384.,  4596.,  6785.,  7115.,  7445.,  7775., 10216., 10672., 11128., 11584.,  8776.,  9232.,  9688., 10144.,  6595.,  6949.,  7303.,  7657.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.,   101.,   235.,   369.,   503.,   744.,  1020.,  1296.,  1572.,  1961.,  2387.,  2813.,  3239.,  3784.,  4368.,  4952.,  5536.,  6120.,  6704.,  7288.,  7872.,  5675.,  6125.,  6575.,  7025.,  4528.,  4836.,  5144.,  5452.,  2647.,  2805.,  2963.,  3121.,  2906.,  3206.,  3506.,  3806.,  7184.,  7800.,  8416.,  9032., 12898., 13846., 14794., 15742., 15824., 17120., 18416., 19712., 16464., 17760., 19056., 20352., 12230., 13226., 14222., 15218.,  6304.,  6984.,  7664.,  8344.,  3934.,  4282.,  4630.,  4978.,  4618.,  4918.,  5218.,  5518., 10672., 11288., 11904., 12520., 18226., 19174., 20122., 21070., 22032., 23328., 24624., 25920., 21648., 22944., 24240., 25536., 15702., 16698., 17694., 18690.,  8000.,  8680.,  9360., 10040.,  4814.,  5162.,  5510.,  5858.,  5306.,  5606.,  5906.,  6206.,  7824.,  8440.,  9056.,  9672., 11650., 12598., 13546., 14494., 16848., 18144., 19440., 20736., 16976., 18272., 19568., 20864., 15142., 16138., 17134., 18130., 11744., 12424., 13104., 13784.,  6718.,  7066.,  7414.,  7762.,  7018.,  7318.,  7618.,  7918., 10288., 10904., 11520., 12136., 14930., 15878., 16826., 17774., 21008., 22304., 23600., 24896., 15824., 17120., 18416., 19712., 13046., 14042., 15038., 16034.,  8640.,  9320., 10000., 10680.,  2542.,  2890.,  3238.,  3586.,  2781.,  2947.,  3113.,  3279.,  6360.,  6700.,  7040.,  7380., 10769., 11291., 11813., 12335., 16040., 16752., 17464., 18176., 13576., 14288., 15000., 15712., 10067., 10613., 11159., 11705.,  5600.,  5972.,  6344.,  6716.,   143.,   333.,   523.,   713.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  318.,   510.,   750.,   870.,   816.,   705.,   796.,  1220.,  1730.,  1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,  2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3770.,  5400.,  7225.,  7550.,  6470.,  5180.,  4588.,  6460.,  8510.,  8820.,  7444.,  5878.,  4710.,  6570.,  8580.,  8850.,  7404.,  5799.,  2964.,  4290.,  5790.,  5910.,  5100.,  4107.,  5584.,  7940., 10486., 10568.,  8828.,  6822.,  8786., 12260., 15631., 15508., 12714.,  9624.,  8522., 11840., 14701., 14258., 11518.,  8516.,  7298., 10140., 12171., 11408.,  9042.,  6448.,  4984.,  6940.,  7706.,  6608.,  4948.,  3122.,  1344.,  1950.,  2640.,  2910.,  2520.,  2037.,  1578.,  2310.,  3150.,  3270.,  2856.,  2325.,  3076.,  4420.,  5930.,  6140.,  5276.,  4234.,  5210.,  7400.,  9825., 10150.,  8630.,  6860.,  6290.,  8900., 11775., 12100., 10250.,  8120.,  7370., 10400., 13725., 14050., 11870.,  9380.,  8068., 11260., 14710., 15020., 12564.,  9838.,  7770., 10770., 13980., 14250., 11844.,  9219.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   10.,    9.,   29.,   39.,   49.,   59.,   40.,   34.,   95.,  116.,  137.,  158.,  100.,   79.,  200.,  221.,  242.,  263.,  160.,  124.,  305.,  326.,  347.,  368.,  220.,  143.,  331.,  349.,  367.,  385.,  220.,  105.,  236.,  247.,  258.,  269.,  150.,    7.,   22.,   37.,   52.,   67.,   40.,   51.,  125.,  159.,  193.,  227.,  130.,  142.,  329.,  386.,  443.,  500.,  280.,  277.,  614.,  671.,  728.,  785.,  430.,  412.,  899.,  956., 1013., 1070.,  580.,  365.,  787.,  829.,  871.,  913.,  490.,  231.,  494.,  517.,  540.,  563.,  300.,   13.,   40.,   67.,   94.,  121.,   70.,   93.,  221.,  279.,  337.,  395.,  220.,  250.,  563.,  656.,  749.,  842.,  460.,  475., 1028., 1121., 1214., 1307.,  700.,  700., 1493., 1586., 1679., 1772.,  940.,  587., 1243., 1309., 1375., 1441.,  760.,  357.,  752.,  787.,  822.,  857.,  450.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6008.,  7552.,  9480.,  9008.,  5312.,  4784.,  3335.,  5196.,  7349.,  7975.,  6388.,  5397.,  3879.,  5804.,  8085.,  9015.,  8116.,  6789.,  4112.,  5920.,  8112.,  9016.,  6496.,  5416.,  6503.,  9676., 12677., 13211., 10852.,  8545.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7080.,  9792., 12344., 11776.,  8256.,  6432.,  5091.,  6140.,  7465.,  6683.,  3172.,  2961.,  3555.,  5340.,  7465.,  8395.,  7588.,  6369.,  4832.,  7008.,  9600., 10728.,  8672.,  7352.,  4891.,  7132.,  9857., 11031.,  8372.,  7029.,  6503.,  9676., 12677., 13211., 10852.,  8545.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  5784.,  8128.,  8968., 10160.,  8960.,  7376.,  5279.,  7660.,  9821., 10063.,  7700.,  5869.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    42.,    62.,    82.,    67.,    52.,   184.,   256.,   328.,   400.,   280.,   221.,   646.,   802.,   958.,  1114.,   719.,   551.,  1426.,  1582.,  1738.,  1894.,  1169.,   881.,  2206.,  2362.,  2518.,  2674.,  1619.,  1056.,  2464.,  2600.,  2736.,  2872.,  1652.,   789.,  1782.,  1866.,  1950.,  2034.,  1139.,    41.,   142.,   258.,   374.,   490.,   295.,   364.,   904.,  1168.,  1432.,  1696.,   976.,  1049.,  2446.,  2890.,  3334.,  3778.,  2123.,  2099.,  4666.,  5110.,  5554.,  5998.,  3293.,  3149.,  6886.,  7330.,  7774.,  8218.,  4463.,  2808.,  6064.,  6392.,  6720.,  7048.,  3788.,  1785.,  3822.,  4002.,  4182.,  4362.,  2327.,    77.,   262.,   474.,   686.,   898.,   523.,   676.,  1624.,  2080.,  2536.,  2992.,  1672.,  1877.,  4246.,  4978.,  5710.,  6442.,  3527.,  3647.,  7906.,  8638.,  9370., 10102.,  5417.,  5417., 11566., 12298., 13030., 13762.,  7307.,  4560.,  9664., 10184., 10704., 11224.,  5924.,  2781.,  5862.,  6138.,  6414.,  6690.,  3515.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 16120., 21920., 24968., 24232., 14944., 13272.,  6758., 11944., 16730., 17650., 12872.,  9966.,  6310., 10280., 15002., 16882., 14216., 12078., 12056., 13600., 16040., 19656., 15136., 12856., 17138., 23864., 28238., 28342., 19544., 17770., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104., 22440., 15968., 11480.,  9078., 13416., 17546., 18786., 12936., 11646.,  8694., 12904., 16906., 18786., 16328., 11646., 10264., 15648., 18344., 20936., 17184., 14136., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11650., 18680., 25790., 28966., 23064., 17658., 14072., 19872., 19848., 21160., 19040., 15320.,  9670., 15016., 17146., 18386., 13000.,  9422.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,  140.,  284.,  428.,  572.,  486.,  340., 1288., 1832., 2056., 1768., 1252., 1250., 3572., 4772., 4628., 3972., 2746., 2426., 6052., 6420., 5252., 3572., 2514., 2258., 4628., 3972., 5172., 6052., 3306., 3044., 4968., 3144., 4200., 3912., 1460., 1374., 3340., 3996., 4652., 2940.,  230.,  270., 1004., 1916., 2828., 3740., 2262., 2420., 5704., 6760., 4424., 1576., 1284., 1458., 4116., 5572., 6708., 7332., 4490., 4298., 6852., 4404., 4516., 4116., 2850., 2722., 6708., 7332., 8788., 6852., 2234., 1476., 2600., 1288., 1832., 2056.,  916.,  782., 2028., 2428., 2828., 1884.,  150.,  190.,  716., 1372., 2028., 2684., 1670., 1940., 5000., 6568., 5768., 4456., 2852., 3202., 7732., 9444., 7764., 5572., 3674., 3610., 6628., 5460., 6852., 7732., 4722., 4722., 7764., 5572., 7284., 6628., 2698., 2276., 5480., 5704., 6760., 4424.,  692.,  190.,  716.,  860., 1004.,  828.,   70.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  7150.,  7540., 10270., 10800., 13775., 14450., 14400., 15100., 12370., 12940.,  9925., 10360.,  8828.,  9176., 12448., 12920., 16420., 17020., 17020., 17640., 14384., 14888., 11372., 11756.,  9132.,  9420., 12750., 13140., 16665., 17160., 17190., 17700., 14394., 14808., 11283., 11598.,  5478.,  5928.,  7974.,  8580., 10815., 11580., 11040., 11820.,  9570., 10200.,  7737.,  8214., 10532., 11168., 15024., 15880., 19956., 20972., 20164., 21136., 16896., 17656., 13100., 13644., 16924., 17572., 23646., 24520., 30221., 31262., 30014., 31016., 24642., 25428., 18683., 19248., 16498., 17044., 22942., 23680., 28531., 29402., 27684., 28516., 22386., 23036., 16569., 17032., 14152., 14596., 19678., 20280., 23641., 24342., 22154., 22816., 17570., 18084., 12535., 12896.,  9692.,  9968., 13504., 13880., 14996., 15412., 12844., 13216.,  9616.,  9896.,  6060.,  6244.,  2598.,  2688.,  3774.,  3900.,  5115.,  5280.,  5640.,  5820.,  4890.,  5040.,  3957.,  4074.,  2904.,  3156.,  4278.,  4620.,  5865.,  6300.,  6090.,  6540.,  5346.,  5712.,  4371.,  4650.,  5780.,  6152.,  8336.,  8840., 11220., 11860., 11620., 12280., 10016., 10552.,  8060.,  8468.,  9910., 10420., 14110., 14800., 18775., 19650., 19400., 20300., 16530., 17260., 13165., 13720., 11980., 12580., 16990., 17800., 22525., 23550., 23150., 24200., 19650., 20500., 15595., 16240., 14050., 14740., 19870., 20800., 26275., 27450., 26900., 28100., 22770., 23740., 18025., 18760., 15548., 16136., 21728., 22520., 28420., 29420., 29020., 30040., 24304., 25128., 19052., 19676., 15072., 15540., 20910., 21540., 27165., 27960., 27690., 28500., 23034., 23688., 17943., 18438.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   18.,   20.,   14.,   18.,   48.,   58.,   68.,   78.,   88.,   98.,  108.,  118.,   74.,   80.,   59.,   68.,  169.,  190.,  211.,  232.,  253.,  274.,  295.,  316.,  188.,  200.,  149.,  158.,  379.,  400.,  421.,  442.,  463.,  484.,  505.,  526.,  308.,  320.,  239.,  248.,  589.,  610.,  631.,  652.,  673.,  694.,  715.,  736.,  428.,  440.,  278.,  286.,  644.,  662.,  680.,  698.,  716.,  734.,  752.,  770.,  430.,  440.,  205.,  210.,  461.,  472.,  483.,  494.,  505.,  516.,  527.,  538.,  294.,  300.,    7.,   14.,   29.,   44.,   59.,   74.,   89.,  104.,  119.,  134.,   72.,   80.,   86.,  102.,  216.,  250.,  284.,  318.,  352.,  386.,  420.,  454.,  242.,  260.,  257.,  284.,  601.,  658.,  715.,  772.,  829.,  886.,  943., 1000.,  530.,  560.,  527.,  554., 1171., 1228., 1285., 1342., 1399., 1456., 1513., 1570.,  830.,  860.,  797.,  824., 1741., 1798., 1855., 1912., 1969., 2026., 2083., 2140., 1130., 1160.,  710.,  730., 1532., 1574., 1616., 1658., 1700., 1742., 1784., 1826.,  958.,  980.,  451.,  462.,  965.,  988., 1011., 1034., 1057., 1080., 1103., 1126.,  588.,  600.,   13.,   26.,   53.,   80.,  107.,  134.,  161.,  188.,  215.,  242.,  126.,  140.,  158.,  186.,  384.,  442.,  500.,  558.,  616.,  674.,  732.,  790.,  410.,  440.,  455.,  500., 1033., 1126., 1219., 1312., 1405., 1498., 1591., 1684.,  872.,  920.,  905.,  950., 1963., 2056., 2149., 2242., 2335., 2428., 2521., 2614., 1352., 1400., 1355., 1400., 2893., 2986., 3079., 3172., 3265., 3358., 3451., 3544., 1832., 1880., 1142., 1174., 2420., 2486., 2552., 2618., 2684., 2750., 2816., 2882., 1486., 1520.,  697.,  714., 1469., 1504., 1539., 1574., 1609., 1644., 1679., 1714.,  882.,  900.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6100.,  6812.,  8064.,  8992., 10164., 11340., 10092., 11300.,  6304.,  7232.,  5100.,  5844.,  3895.,  4517.,  6368.,  7160.,  8159.,  9145.,  8521.,  9499.,  6624.,  7352.,  5489.,  6071.,  2859.,  3369.,  4688.,  5416.,  6955.,  7925.,  7829.,  8919.,  7408.,  8328.,  6277.,  7003.,  5284.,  6124.,  7168.,  8352.,  9636., 11068., 10396., 11860.,  7552.,  8736.,  5724.,  6596.,  8973.,  9903., 12016., 13336., 13149., 14771., 13011., 14705.,  9872., 11256.,  8307.,  9341.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9124., 10028., 10816., 12000., 10372., 11740., 10204., 11476.,  7328.,  8256.,  4860.,  5540.,  4371.,  4945.,  6000.,  6728.,  7683.,  8589.,  7277.,  8175.,  4080.,  4744.,  3725.,  4259.,  4551.,  5013.,  5600.,  6264.,  7055.,  7945.,  7929.,  8939.,  6912.,  7768.,  5217.,  5895.,  3796.,  4444.,  5952.,  6880.,  8660.,  9900.,  9772., 11172.,  8320.,  9504.,  7244.,  8180.,  6737.,  7715.,  9440., 10824., 12313., 14015., 13455., 15229., 10240., 11688.,  7799.,  8881.,  8973.,  9903., 12016., 13336., 13149., 14771., 13011., 14705.,  9872., 11256.,  8307.,  9341.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  7604.,  8444., 10048., 11232., 10484., 11916., 11692., 13156.,  9824., 11008.,  7116.,  7988.,  5711.,  6365.,  8640.,  9560.,  9447., 10529.,  9041., 10115.,  6592.,  7448.,  4361.,  4975.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   123.,   137.,    82.,   110.,   312.,   384.,   456.,   528.,   600.,   672.,   744.,   816.,   526.,   570.,   391.,   457.,  1172.,  1328.,  1484.,  1640.,  1796.,  1952.,  2108.,  2264.,  1369.,  1459.,  1051.,  1117.,  2732.,  2888.,  3044.,  3200.,  3356.,  3512.,  3668.,  3824.,  2269.,  2359.,  1711.,  1777.,  4292.,  4448.,  4604.,  4760.,  4916.,  5072.,  5228.,  5384.,  3169.,  3259.,  2066.,  2126.,  4824.,  4960.,  5096.,  5232.,  5368.,  5504.,  5640.,  5776.,  3246.,  3322.,  1549.,  1587.,  3500.,  3584.,  3668.,  3752.,  3836.,  3920.,  4004.,  4088.,  2243.,  2289.,    41.,    95.,   196.,   312.,   428.,   544.,   660.,   776.,   892.,  1008.,   543.,   605.,   634.,   758.,  1608.,  1872.,  2136.,  2400.,  2664.,  2928.,  3192.,  3456.,  1846.,  1986.,  1939.,  2149.,  4556.,  5000.,  5444.,  5888.,  6332.,  6776.,  7220.,  7664.,  4069.,  4303.,  4039.,  4249.,  8996.,  9440.,  9884., 10328., 10772., 11216., 11660., 12104.,  6409.,  6643.,  6139.,  6349., 13436., 13880., 14324., 14768., 15212., 15656., 16100., 16544.,  8749.,  8983.,  5498.,  5654., 11880., 12208., 12536., 12864., 13192., 13520., 13848., 14176.,  7446.,  7618.,  3505.,  3591.,  7508.,  7688.,  7868.,  8048.,  8228.,  8408.,  8588.,  8768.,  4583.,  4677.,    77.,   179.,   364.,   576.,   788.,  1000.,  1212.,  1424.,  1636.,  1848.,   963.,  1073.,  1186.,  1406.,  2904.,  3360.,  3816.,  4272.,  4728.,  5184.,  5640.,  6096.,  3166.,  3402.,  3487.,  3841.,  7940.,  8672.,  9404., 10136., 10868., 11600., 12332., 13064.,  6769.,  7147.,  7027.,  7381., 15260., 15992., 16724., 17456., 18188., 18920., 19652., 20384., 10549., 10927., 10567., 10921., 22580., 23312., 24044., 24776., 25508., 26240., 26972., 27704., 14329., 14707.,  8930.,  9182., 18936., 19456., 19976., 20496., 21016., 21536., 22056., 22576., 11646., 11914.,  5461.,  5595., 11516., 11792., 12068., 12344., 12620., 12896., 13172., 13448.,  6923.,  7065.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,   70.,  174.,  220.,  428., 1064., 1608., 2152., 2696., 2920., 3464., 1832., 2376.,  428.,  764.,  826., 1330., 3164., 4364., 5244., 6444., 5468., 6668., 3644., 4844., 1330., 2026., 1834., 2338., 5244., 6444., 5468., 6668., 3644., 4844., 3164., 4364., 2722., 3418., 2522., 3026., 5468., 6668., 3644., 4844., 3164., 4364., 5244., 6444., 3282., 3978., 2076., 2540., 3176., 4232., 2408., 3464., 4520., 5576., 5288., 6344., 2540., 3132.,  190.,  486., 1012., 1668., 2324., 2980., 3636., 4292., 2580., 3236.,  230.,  590.,  270.,  694., 1428., 2340., 3252., 4164., 5076., 5988., 3508., 4420.,  310.,  798., 1148., 1612., 3432., 4488., 5544., 6600., 4264., 5320., 2152., 3208., 1356., 1948., 2186., 2818., 6140., 7596., 5660., 7116., 4348., 5804., 5084., 6540., 2690., 3514., 3450., 4082., 5660., 7116., 4348., 5804., 5084., 6540., 6140., 7596., 4338., 5162., 1322., 1954., 4348., 5804., 5084., 6540., 6140., 7596., 5660., 7116., 2082., 2906., 1148., 1356., 1832., 2376., 1064., 1608., 2152., 2696., 2920., 3464., 1612., 1948.,  110.,  278.,  596.,  996., 1396., 1796., 2196., 2596., 1652., 2052.,  150.,  382.,  190.,  486., 1012., 1668., 2324., 2980., 3636., 4292., 2580., 3236.,  230.,  590., 1052., 1772., 3752., 5320., 6888., 8456., 7656., 9224., 4520., 6088., 1260., 2108., 2522., 3282., 7068., 8780., 8124., 9836., 5276., 6988., 4476., 6188., 3026., 3978., 4042., 4802., 8124., 9836., 5276., 6988., 4476., 6188., 7068., 8780., 4930., 5882., 3194., 3954., 5276., 6988., 4476., 6188., 7068., 8780., 8124., 9836., 3954., 4906.,  540., 1004., 2152., 3208., 3432., 4488., 5544., 6600., 4264., 5320., 1004., 1596.,   30.,   70.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,   70.,  174.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 864.,  936., 1008., 1080., 1190., 1292., 1394., 1496., 1635., 1770., 1905., 2040., 1846., 1996., 2146., 2296., 1702., 1828., 1954., 2080., 1371., 1470., 1569., 1668., 1732., 1864., 1996., 2128., 2312., 2496., 2680., 2864., 3096., 3336., 3576., 3816., 3364., 3624., 3884., 4144., 2888., 3104., 3320., 3536., 2320., 2488., 2656., 2824., 2834., 3044., 3254., 3464., 3770., 4060., 4350., 4640., 5007., 5382., 5757., 6132., 5368., 5768., 6168., 6568., 4506., 4836., 5166., 5496., 3603., 3858., 4113., 4368., 4164., 4432., 4700., 4968., 5378., 5724., 6070., 6416., 6693., 7122., 7551., 7980., 6638., 7060., 7482., 7904., 4802., 5124., 5446., 5768., 3669., 3918., 4167., 4416., 4406., 4668., 4930., 5192., 5002., 5340., 5678., 6016., 5499., 5918., 6337., 6756., 5828., 6240., 6652., 7064., 4586., 4900., 5214., 5528., 3863., 4106., 4349., 4592., 3580., 3800., 4020., 4240., 4808., 5088., 5368., 5648., 5680., 6024., 6368., 6712., 5324., 5656., 5988., 6320., 3240., 3488., 3736., 3984., 2584., 2776., 2968., 3160., 2072., 2232., 2392., 2552., 3286., 3484., 3682., 3880., 3875., 4114., 4353., 4592., 3822., 4044., 4266., 4488., 2870., 3028., 3186., 3344., 2251., 2374., 2497., 2620., 2154., 2316., 2478., 2640., 2830., 3052., 3274., 3496., 3745., 4030., 4315., 4600., 3956., 4256., 4556., 4856., 3502., 3748., 3994., 4240., 2741., 2930., 3119., 3308., 3372., 3624., 3876., 4128., 4392., 4736., 5080., 5424., 5744., 6152., 6560., 6968., 5852., 6248., 6644., 7040., 4520., 4832., 5144., 5456., 3256., 3480., 3704., 3928., 4624., 4888., 5152., 5416., 5874., 6236., 6598., 6960., 6505., 6938., 7371., 7804., 6066., 6492., 6918., 7344., 4210., 4548., 4886., 5224., 3585., 3830., 4075., 4320., 3586., 3844., 4102., 4360., 5242., 5596., 5950., 6304., 6463., 6886., 7309., 7732., 6408., 6824., 7240., 7656., 4762., 5092., 5422., 5752., 3523., 3762., 4001., 4240., 3700., 3952., 4204., 4456., 5122., 5468., 5814., 6160., 5269., 5682., 6095., 6508., 5598., 6004., 6410., 6816., 4802., 5124., 5446., 5768., 3589., 3822., 4055., 4288., 3620., 3800., 3980., 4160., 4904., 5152., 5400., 5648., 5000., 5288., 5576., 5864., 4644., 4920., 5196., 5472., 3272., 3488., 3704., 3920., 1792., 1944., 2096., 2248., 1234., 1324., 1414., 1504., 1854., 1980., 2106., 2232., 2545., 2710., 2875., 3040., 2780., 2960., 3140., 3320., 2238., 2388., 2538., 2688., 1941., 2058., 2175., 2292., 2964., 3120., 3276., 3432., 3574., 3788., 4002., 4216., 4415., 4690., 4965., 5240., 4626., 4916., 5206., 5496., 3894., 4132., 4370., 4608., 2863., 3046., 3229., 3412., 2132., 2312., 2492., 2672., 3144., 3392., 3640., 3888., 4424., 4744., 5064., 5384., 4692., 5032., 5372., 5712., 3720., 4000., 4280., 4560., 3232., 3448., 3664., 3880., 3246., 3468., 3690., 3912., 4522., 4828., 5134., 5440., 5475., 5870., 6265., 6660., 5836., 6256., 6676., 7096., 4426., 4772., 5118., 5464., 3599., 3866., 4133., 4400., 3488., 3704., 3920., 4136., 4914., 5212., 5510., 5808., 5817., 6202., 6587., 6972., 6178., 6588., 6998., 7408., 5234., 5572., 5910., 6248., 4049., 4310., 4571., 4832., 2834., 3044., 3254., 3464., 3770., 4060., 4350., 4640., 5007., 5382., 5757., 6132., 5368., 5768., 6168., 6568., 4506., 4836., 5166., 5496., 3603., 3858., 4113., 4368., 3724., 3928., 4132., 4336., 4680., 4960., 5240., 5520., 5728., 6088., 6448., 6808., 6044., 6424., 6804., 7184., 4712., 5024., 5336., 5648., 3560., 3800., 4040., 4280., 2604., 2784., 2964., 3144., 3814., 4060., 4306., 4552., 4895., 5210., 5525., 5840., 5130., 5460., 5790., 6120., 4038., 4308., 4578., 4848., 3391., 3598., 3805., 4012.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,   32.,   36.,   86.,   96.,  106.,  116.,  126.,  136.,  146.,  156.,  166.,  176.,  186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,  154.,  160.,  109.,  118.,  127.,  136.,  317.,  338.,  359.,  380.,  401.,  422.,  443.,  464.,  485.,  506.,  527.,  548.,  569.,  590.,  611.,  632.,  364.,  376.,  388.,  400.,  289.,  298.,  307.,  316.,  737.,  758.,  779.,  800.,  821.,  842.,  863.,  884.,  905.,  926.,  947.,  968.,  989., 1010., 1031., 1052.,  604.,  616.,  628.,  640.,  469.,  478.,  487.,  496., 1157., 1178., 1199., 1220., 1241., 1262., 1283., 1304., 1325., 1346., 1367., 1388., 1409., 1430., 1451., 1472.,  844.,  856.,  868.,  880.,  548.,  556.,  564.,  572., 1270., 1288., 1306., 1324., 1342., 1360., 1378., 1396., 1414., 1432., 1450., 1468., 1486., 1504., 1522., 1540.,  850.,  860.,  870.,  880.,  405.,  410.,  415.,  420.,  911.,  922.,  933.,  944.,  955.,  966.,  977.,  988.,  999., 1010., 1021., 1032., 1043., 1054., 1065., 1076.,  582.,  588.,  594.,  600.,    7.,   14.,   21.,   28.,   43.,   58.,   73.,   88.,  103.,  118.,  133.,  148.,  163.,  178.,  193.,  208.,  223.,  238.,  253.,  268.,  136.,  144.,  152.,  160.,  156.,  172.,  188.,  204.,  398.,  432.,  466.,  500.,  534.,  568.,  602.,  636.,  670.,  704.,  738.,  772.,  806.,  840.,  874.,  908.,  466.,  484.,  502.,  520.,  487.,  514.,  541.,  568., 1145., 1202., 1259., 1316., 1373., 1430., 1487., 1544., 1601., 1658., 1715., 1772., 1829., 1886., 1943., 2000., 1030., 1060., 1090., 1120., 1027., 1054., 1081., 1108., 2285., 2342., 2399., 2456., 2513., 2570., 2627., 2684., 2741., 2798., 2855., 2912., 2969., 3026., 3083., 3140., 1630., 1660., 1690., 1720., 1567., 1594., 1621., 1648., 3425., 3482., 3539., 3596., 3653., 3710., 3767., 3824., 3881., 3938., 3995., 4052., 4109., 4166., 4223., 4280., 2230., 2260., 2290., 2320., 1400., 1420., 1440., 1460., 3022., 3064., 3106., 3148., 3190., 3232., 3274., 3316., 3358., 3400., 3442., 3484., 3526., 3568., 3610., 3652., 1894., 1916., 1938., 1960.,  891.,  902.,  913.,  924., 1907., 1930., 1953., 1976., 1999., 2022., 2045., 2068., 2091., 2114., 2137., 2160., 2183., 2206., 2229., 2252., 1164., 1176., 1188., 1200.,   13.,   26.,   39.,   52.,   79.,  106.,  133.,  160.,  187.,  214.,  241.,  268.,  295.,  322.,  349.,  376.,  403.,  430.,  457.,  484.,  238.,  252.,  266.,  280.,  288.,  316.,  344.,  372.,  710.,  768.,  826.,  884.,  942., 1000., 1058., 1116., 1174., 1232., 1290., 1348., 1406., 1464., 1522., 1580.,  790.,  820.,  850.,  880.,  865.,  910.,  955., 1000., 1973., 2066., 2159., 2252., 2345., 2438., 2531., 2624., 2717., 2810., 2903., 2996., 3089., 3182., 3275., 3368., 1696., 1744., 1792., 1840., 1765., 1810., 1855., 1900., 3833., 3926., 4019., 4112., 4205., 4298., 4391., 4484., 4577., 4670., 4763., 4856., 4949., 5042., 5135., 5228., 2656., 2704., 2752., 2800., 2665., 2710., 2755., 2800., 5693., 5786., 5879., 5972., 6065., 6158., 6251., 6344., 6437., 6530., 6623., 6716., 6809., 6902., 6995., 7088., 3616., 3664., 3712., 3760., 2252., 2284., 2316., 2348., 4774., 4840., 4906., 4972., 5038., 5104., 5170., 5236., 5302., 5368., 5434., 5500., 5566., 5632., 5698., 5764., 2938., 2972., 3006., 3040., 1377., 1394., 1411., 1428., 2903., 2938., 2973., 3008., 3043., 3078., 3113., 3148., 3183., 3218., 3253., 3288., 3323., 3358., 3393., 3428., 1746., 1764., 1782., 1800.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  4748.,  5460.,  6172.,  6884.,  5248.,  6176.,  7104.,  8032.,  8140.,  9316., 10492., 11668.,  8612.,  9820., 11028., 12236.,  6272.,  7200.,  8128.,  9056.,  5476.,  6220.,  6964.,  7708.,  2871.,  3493.,  4115.,  4737.,  5320.,  6112.,  6904.,  7696.,  7251.,  8237.,  9223., 10209.,  6957.,  7935.,  8913.,  9891.,  4824.,  5552.,  6280.,  7008.,  3785.,  4367.,  4949.,  5531.,  3283.,  3793.,  4303.,  4813.,  4888.,  5616.,  6344.,  7072.,  6359.,  7329.,  8299.,  9269.,  7121.,  8211.,  9301., 10391.,  6376.,  7296.,  8216.,  9136.,  4357.,  5083.,  5809.,  6535.,  5228.,  6068.,  6908.,  7748.,  8000.,  9184., 10368., 11552., 10252., 11684., 13116., 14548., 10724., 12188., 13652., 15116.,  8000.,  9184., 10368., 11552.,  5444.,  6316.,  7188.,  8060.,  6233.,  7163.,  8093.,  9023.,  8760., 10080., 11400., 12720., 10349., 11971., 13593., 15215., 10531., 12225., 13919., 15613.,  8360.,  9744., 11128., 12512.,  6839.,  7873.,  8907.,  9941.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  6556.,  7460.,  8364.,  9268.,  8000.,  9184., 10368., 11552.,  8668., 10036., 11404., 12772.,  9044., 10316., 11588., 12860.,  6272.,  7200.,  8128.,  9056.,  3508.,  4188.,  4868.,  5548.,  3603.,  4177.,  4751.,  5325.,  3864.,  4592.,  5320.,  6048.,  6359.,  7265.,  8171.,  9077.,  6577.,  7475.,  8373.,  9271.,  4392.,  5056.,  5720.,  6384.,  4133.,  4667.,  5201.,  5735.,  3631.,  4093.,  4555.,  5017.,  4456.,  5120.,  5784.,  6448.,  5851.,  6741.,  7631.,  8521.,  6613.,  7623.,  8633.,  9643.,  5944.,  6800.,  7656.,  8512.,  4065.,  4743.,  5421.,  6099.,  4188.,  4836.,  5484.,  6132.,  6272.,  7200.,  8128.,  9056.,  8444.,  9684., 10924., 12164.,  9524., 10924., 12324., 13724.,  8000.,  9184., 10368., 11552.,  6132.,  7068.,  8004.,  8940.,  5821.,  6799.,  7777.,  8755.,  9192., 10576., 11960., 13344., 11689., 13391., 15093., 16795., 12383., 14157., 15931., 17705.,  9816., 11264., 12712., 14160.,  7067.,  8149.,  9231., 10313.,  6233.,  7163.,  8093.,  9023.,  8760., 10080., 11400., 12720., 10349., 11971., 13593., 15215., 10531., 12225., 13919., 15613.,  8360.,  9744., 11128., 12512.,  6839.,  7873.,  8907.,  9941.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  5612.,  6452.,  7292.,  8132.,  8000.,  9184., 10368., 11552.,  9100., 10532., 11964., 13396., 10084., 11548., 13012., 14476.,  9024., 10208., 11392., 12576.,  6340.,  7212.,  8084.,  8956.,  3919.,  4573.,  5227.,  5881.,  6184.,  7104.,  8024.,  8944.,  7707.,  8789.,  9871., 10953.,  7925.,  8999., 10073., 11147.,  5688.,  6544.,  7400.,  8256.,  3041.,  3655.,  4269.,  4883.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,  1000.,  1072.,  1144.,  1216.,  1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,   731.,   797.,   863.,   929.,  2224.,  2380.,  2536.,  2692.,  2848.,  3004.,  3160.,  3316.,  3472.,  3628.,  3784.,  3940.,  4096.,  4252.,  4408.,  4564.,  2669.,  2759.,  2849.,  2939.,  2051.,  2117.,  2183.,  2249.,  4960.,  5116.,  5272.,  5428.,  4688.,  4844.,  5000.,  5156.,  5312.,  5468.,  5624.,  5780.,  5936.,  6092.,  6248.,  6404.,  3573.,  3663.,  3753.,  3843.,  2987.,  3053.,  3119.,  3185.,  5776.,  5932.,  6088.,  6244.,  4480.,  4636.,  4792.,  4948.,  5104.,  5260.,  5416.,  5572.,  5728.,  5884.,  6040.,  6196.,  3453.,  3543.,  3633.,  3723.,  2678.,  2738.,  2798.,  2858.,  3784.,  3920.,  4056.,  4192.,  1384.,  1520.,  1656.,  1792.,  1928.,  2064.,  2200.,  2336.,  2472.,  2608.,  2744.,  2880.,  1570.,  1646.,  1722.,  1798.,   637.,   675.,   713.,   751.,  1560.,  1644.,  1728.,  1812.,  1896.,  1980.,  2064.,  2148.,  2232.,  2316.,  2400.,  2484.,  2568.,  2652.,  2736.,  2820.,  1507.,  1553.,  1599.,  1645.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   768.,   884.,  1000.,  1116.,  1232.,  1348.,  1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  1039.,  1101.,  1163.,  1225.,  1174.,  1298.,  1422.,  1546.,  3016.,  3280.,  3544.,  3808.,  4072.,  4336.,  4600.,  4864.,  5128.,  5392.,  5656.,  5920.,  6184.,  6448.,  6712.,  6976.,  3586.,  3726.,  3866.,  4006.,  3719.,  3929.,  4139.,  4349.,  8776.,  9220.,  9664., 10108., 10552., 10996., 11440., 11884., 12328., 12772., 13216., 13660., 14104., 14548., 14992., 15436.,  7961.,  8195.,  8429.,  8663.,  7919.,  8129.,  8339.,  8549., 14200., 14644., 15088., 15532., 12008., 12452., 12896., 13340., 13784., 14228., 14672., 15116., 15560., 16004., 16448., 16892.,  8673.,  8907.,  9141.,  9375.,  8663.,  8873.,  9083.,  9293., 14632., 15076., 15520., 15964., 11416., 11860., 12304., 12748., 13192., 13636., 14080., 14524., 14968., 15412., 15856., 16300.,  8361.,  8595.,  8829.,  9063.,  6398.,  6554.,  6710.,  6866.,  8536.,  8864.,  9192.,  9520.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  5800.,  6128.,  6456.,  6784.,  7112.,  7440.,  3754.,  3926.,  4098.,  4270.,  1441.,  1527.,  1613.,  1699.,  3360.,  3540.,  3720.,  3900.,  4080.,  4260.,  4440.,  4620.,  4800.,  4980.,  5160.,  5340.,  5520.,  5700.,  5880.,  6060.,  3079.,  3173.,  3267.,  3361.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1416.,  1628.,  1840.,  2052.,  2264.,  2476.,  2688.,  2900.,  3112.,  3324.,  3536.,  3748.,  1843.,  1953.,  2063.,  2173.,  2206.,  2426.,  2646.,  2866.,  5464.,  5920.,  6376.,  6832.,  7288.,  7744.,  8200.,  8656.,  9112.,  9568., 10024., 10480., 10936., 11392., 11848., 12304.,  6154.,  6390.,  6626.,  6862.,  6707.,  7061.,  7415.,  7769., 15328., 16060., 16792., 17524., 18256., 18988., 19720., 20452., 21184., 21916., 22648., 23380., 24112., 24844., 25576., 26308., 13253., 13631., 14009., 14387., 13787., 14141., 14495., 14849., 23440., 24172., 24904., 25636., 19328., 20060., 20792., 21524., 22256., 22988., 23720., 24452., 25184., 25916., 26648., 27380., 13773., 14151., 14529., 14907., 14339., 14693., 15047., 15401., 23488., 24220., 24952., 25684., 18352., 19084., 19816., 20548., 21280., 22012., 22744., 23476., 24208., 24940., 25672., 26404., 13269., 13647., 14025., 14403., 10118., 10370., 10622., 10874., 13288., 13808., 14328., 14848.,  6280.,  6800.,  7320.,  7840.,  8360.,  8880.,  9400.,  9920., 10440., 10960., 11480., 12000.,  5938.,  6206.,  6474.,  6742.,  2245.,  2379.,  2513.,  2647.,  5160.,  5436.,  5712.,  5988.,  6264.,  6540.,  6816.,  7092.,  7368.,  7644.,  7920.,  8196.,  8472.,  8748.,  9024.,  9300.,  4651.,  4793.,  4935.,  5077.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.,  300.,  508.,  716.,  924., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 1378., 2074., 2770., 3466., 1674., 2178., 2682., 3186., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 2306., 3002., 3698., 4394., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 1378., 2074., 2770., 3466., 1484., 1948., 2412., 2876., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 1820., 2412., 3004., 3596.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2532., 3444., 4356., 5268., 2276., 3188., 4100., 5012., 2532., 3444., 4356., 5268.,  310.,  798., 1286., 1774., 1996., 2460., 2924., 3388., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348.,  946., 1770., 2594., 3418., 2778., 3410., 4042., 4674., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3410., 4234., 5058., 5882.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348.,  946., 1770., 2594., 3418.,  812., 1020., 1228., 1436., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1148., 1484., 1820., 2156.,  110.,  278.,  446.,  614.,  932., 1332., 1732., 2132., 1188., 1588., 1988., 2388.,  932., 1332., 1732., 2132., 1188., 1588., 1988., 2388.,  150.,  382.,  614.,  846.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310., 1644., 2364., 3084., 3804., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 1980., 2828., 3676., 4524., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 2562., 3514., 4466., 5418., 1834., 2594., 3354., 4114., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 2466., 3418., 4370., 5322., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 2562., 3514., 4466., 5418.,  460.,  924., 1388., 1852., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960.,  796., 1388., 1980., 2572.,   30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  351.,   560.,   820.,   940.,  1060.,   980.,   837.,   892.,  1360.,  1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,  4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,  4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5296.,  7440.,  9780., 10090., 10400.,  8752.,  6892.,  5445.,  7580.,  9880., 10150., 10420.,  8696.,  6795.,  3246.,  4586.,  6060.,  5860.,  5980.,  5082.,  4038.,  5262.,  7216.,  9330.,  8900.,  9110.,  7648.,  6010.,  7440., 10086., 12930., 12295., 12620., 10542.,  8246.,  5756.,  7676.,  9765.,  8810.,  9135.,  7696.,  6068.,  3112.,  3986.,  5000.,  3725.,  4050.,  3570.,  2930.,  2686.,  3840.,  5130.,  5440.,  5750.,  4912.,  3922.,  3150.,  4430.,  5830.,  6100.,  6370.,  5366.,  4230.,  2493.,  3620.,  4900.,  5020.,  5140.,  4448.,  3591.,  4768.,  6800.,  9060.,  9270.,  9480.,  8080.,  6436.,  7876., 11008., 14391., 14460., 14465., 12124.,  9512.,  8432., 11478., 14746., 14495., 14180., 11838.,  9254.,  8028., 10668., 13501., 12930., 12295., 10272.,  8036.,  6540.,  8368., 10336.,  9430.,  8460.,  7088.,  5560.,  3735.,  4288.,  4916.,  3650.,  2320.,  2036.,  1665.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,   89.,  110.,   96.,   60.,   42.,  114.,  219.,  264.,  309.,  252.,  150.,  102.,  249.,  444.,  489.,  534.,  417.,  240.,  162.,  384.,  669.,  714.,  759.,  582.,  330.,  196.,  440.,  734.,  773.,  812.,  600.,  330.,  147.,  322.,  526.,  550.,  574.,  416.,  225.,   10.,   31.,   64.,   97.,  130.,  103.,   60.,   73.,  176.,  311.,  386.,  461.,  348.,  195.,  204.,  465.,  786.,  912., 1038.,  765.,  420.,  399.,  870., 1416., 1542., 1668., 1200.,  645.,  594., 1275., 2046., 2172., 2298., 1635.,  870.,  529., 1124., 1787., 1880., 1973., 1392.,  735.,  336.,  709., 1120., 1171., 1222.,  857.,  450.,   19.,   58.,  118.,  178.,  238.,  184.,  105.,  136.,  320.,  554.,  683.,  812.,  600.,  330.,  366.,  816., 1353., 1560., 1767., 1278.,  690.,  696., 1491., 2388., 2595., 2802., 1983., 1050., 1026., 2166., 3423., 3630., 3837., 2688., 1410.,  862., 1808., 2840., 2987., 3134., 2184., 1140.,  525., 1096., 1714., 1792., 1870., 1298.,  675.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7747., 10812., 13049., 11951., 10501.,  7260.,  4815.,  6252.,  8784.,  9828., 11020., 11348.,  9456.,  7260.,  5989.,  8612., 11039., 11281., 10019.,  6852.,  4425.,  2695.,  4108.,  5813.,  6135.,  7065.,  6476.,  5499.,  4660.,  6608.,  8924.,  8804.,  9932.,  8208.,  6980.,  5577.,  7540.,  9915.,  9073.,  9991.,  7220.,  6373.,  6551.,  9100., 12085., 12011., 12289.,  9516.,  8131.,  7781.,  9636., 11951., 10501.,  9915.,  6116.,  5217.,  6980.,  7760., 11020., 11348., 11420.,  8976.,  6932.,  6555.,  8764., 11281., 10019.,  8501.,  4828.,  3247.,  2829.,  4324.,  6135.,  7065.,  7995.,  7268.,  6129.,  4300.,  6352.,  8804.,  9932., 11060.,  9072.,  7676.,  4619.,  6620.,  9073.,  9991., 10781.,  8316.,  7255.,  6361.,  8948., 12011., 12289., 12439., 10612.,  9013.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5692.,  8656., 11348., 11420., 11236.,  8848.,  6476.,  6513.,  8788., 10019.,  8501.,  6727.,  3796.,  1941.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   101.,   143.,   150.,   105.,    58.,   204.,   454.,   610.,   766.,   684.,   434.,   279.,   786.,  1545.,  1887.,  2229.,  1842.,  1107.,   729.,  1806.,  3255.,  3597.,  3939.,  3102.,  1797.,  1179.,  2826.,  4965.,  5307.,  5649.,  4362.,  2487.,  1474.,  3324.,  5566.,  5866.,  6166.,  4572.,  2522.,  1121.,  2462.,  4031.,  4217.,  4403.,  3198.,  1733.,    59.,   202.,   437.,   695.,   953.,   762.,   447.,   526.,  1284.,  2290.,  2878.,  3466.,  2628.,  1478.,  1521.,  3486.,  5919.,  6909.,  7899.,  5838.,  3213.,  3051.,  6666., 10869., 11859., 12849.,  9258.,  4983.,  4581.,  9846., 15819., 16809., 17799., 12678.,  6753.,  4102.,  8724., 13882., 14614., 15346., 10836.,  5726.,  2615.,  5522.,  8729.,  9131.,  9533.,  6690.,  3515.,   113.,   382.,   815.,  1289.,  1763.,  1374.,   789.,   994.,  2364.,  4126.,  5146.,  6166.,  4572.,  2522.,  2763.,  6186., 10293., 11931., 13569.,  9834.,  5319.,  5373., 11526., 18483., 20121., 21759., 15414.,  8169.,  7983., 16866., 26673., 28311., 29949., 20994., 11019.,  6730., 14124., 22198., 23362., 24526., 17100.,  8930.,  4109.,  8582., 13427., 14045., 14663., 10182.,  5297.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 18600., 24864., 25944., 26424., 22488., 16416.,  8872., 11694., 17928., 21138., 18474., 17538., 12424.,  9758.,  5094.,  8424., 12506., 13874., 17610., 16872., 14102.,  9608., 10144., 15608., 17688., 20088., 16736., 14920., 15498., 18648., 22134., 23454., 27142., 21528., 18714., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 19912., 22816., 26424., 22488., 20600., 12000.,  8328., 14102., 18984., 18474., 17538., 15066., 11560.,  7558.,  6030.,  9480., 13874., 17610., 20002., 18184., 14142.,  7784., 12192., 17688., 20088., 20952., 20128., 17000., 13410., 16312., 23454., 27142., 28782., 23672., 19186., 15498., 18648., 22134., 23454., 27142., 21528., 18714., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 16808., 22496., 22488., 20600., 17496., 12512., 10664., 14142., 15624., 17538., 15066., 15154.,  9992.,  6702.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4164.,  4532.,  2968.,  1948.,  1690.,  4644.,  8734.,  9030.,  8814.,  4772.,  1898.,  3314.,  8020., 11238.,  8654.,  6902.,  5652.,  3074.,  3082.,  5956.,  8814.,  8086.,  9918.,  6852.,  1690.,  4316.,  6680.,  6196.,  7716.,  7700.,  4824.,   380.,  1966.,  4652.,  5754.,  6706.,  4266.,   620.,    30.,    70.,   284.,   706.,  1210.,  1714.,  1628.,  1078.,   780.,  2360.,  4868.,  5620.,  5860.,  3640.,  2348.,  2258.,  5652., 10182., 10030.,  9366.,  3860.,  2722.,  4330.,  6852., 10446.,  6902.,  8798.,  6148.,  3834.,  4034.,  6196.,  9366.,  8190.,  9574.,  5172.,  2386.,  5100.,  3960.,  7588.,  8468.,  7812.,  3896.,   652.,  2262.,  2940.,  3954.,  4586.,  1314.,   828.,    70.,   110.,   428.,  1018.,  1714.,  2410.,  2156.,  1374.,  1180.,  3288.,  6452.,  7076.,  7188.,  4312.,  2748.,  2506.,  6148., 11118., 10518.,  9406.,  5316.,  3546.,  2466.,  5172.,  9142.,  8734., 10182.,  7476.,  4594.,  3642.,  5924.,  9406.,  7782.,  8718.,  6884.,  3082.,  1980.,  4824.,  8468.,  8708.,  7412.,  4824.,   924.,   190.,   716.,  1642.,  1954.,  1946.,  1356.,   110.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  8230.,  8680., 11790., 12400., 15775., 16550., 16400., 17200., 17025., 17850., 14570., 15240., 11650., 12160., 10190., 10592., 14336., 14880., 18870., 19560., 19470., 20180., 20070., 20800., 16912., 17504., 13334., 13784., 10557., 10890., 14710., 15160., 19190., 19760., 19715., 20300., 20240., 20840., 16906., 17392., 13221., 13590.,  6098.,  6492.,  8662.,  9172., 11491., 12120., 11140., 11720., 11365., 11960.,  9682., 10164.,  7710.,  8076., 10106., 10524., 13888., 14432., 17986., 18660., 17170., 17800., 17570., 18220., 14768., 15296., 11618., 12020., 14417., 14880., 19566., 20172., 25106., 25860., 23875., 24590., 24500., 25240., 20482., 21084., 16033., 16492., 11136., 11512., 14862., 15352., 18921., 19530., 17050., 17620., 17675., 18270., 14906., 15392., 11764., 12136.,  5935.,  6224.,  7598.,  7972.,  9536., 10000.,  7025.,  7450.,  7650.,  8100.,  6770.,  7140.,  5575.,  5860.,  5150.,  5372.,  7376.,  7680.,  9870., 10260., 10470., 10880., 11070., 11500.,  9472.,  9824.,  7574.,  7844.,  6102.,  6300.,  8590.,  8860., 11315., 11660., 11840., 12200., 12365., 12740., 10426., 10732.,  8226.,  8460.,  4599.,  4986.,  6718.,  7240.,  9140.,  9800.,  9365., 10040.,  9590., 10280.,  8338.,  8896.,  6759.,  7182.,  8978.,  9536., 12848., 13600., 17170., 18120., 17570., 18540., 17970., 18960., 15360., 16160., 12266., 12872., 15066., 15752., 21134., 22016., 27699., 28782., 27876., 28920., 27925., 28930., 23434., 24248., 18406., 19024., 16265., 16864., 22190., 22956., 28554., 29492., 28091., 28990., 27500., 28360., 22978., 23676., 17977., 18508., 15544., 16056., 20686., 21336., 26209., 27002., 25106., 25860., 23875., 24590., 19962., 20544., 15628., 16072., 12718., 13080., 16288., 16736., 20134., 20672., 18366., 18860., 16470., 16920., 13808., 14176., 10838., 11120.,  7279.,  7470.,  8358.,  8576.,  9584.,  9832.,  7101.,  7300.,  4490.,  4640.,  3946.,  4072.,  3231.,  3330.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   39.,   44.,   27.,   30.,   15.,   20.,   52.,   64.,  115.,  136.,  157.,  178.,  199.,  220.,  176.,  192.,  111.,  120.,   72.,   84.,  201.,  228.,  393.,  438.,  483.,  528.,  573.,  618.,  471.,  504.,  282.,  300.,  192.,  204.,  471.,  498.,  843.,  888.,  933.,  978., 1023., 1068.,  801.,  834.,  462.,  480.,  312.,  324.,  741.,  768., 1293., 1338., 1383., 1428., 1473., 1518., 1131., 1164.,  642.,  660.,  381.,  392.,  856.,  880., 1429., 1468., 1507., 1546., 1585., 1624., 1172., 1200.,  645.,  660.,  287.,  294.,  629.,  644., 1028., 1052., 1076., 1100., 1124., 1148.,  815.,  832.,  441.,  450.,   10.,   20.,   41.,   62.,   95.,  128.,  161.,  194.,  227.,  260.,  183.,  206.,  108.,  120.,  123.,  146.,  304.,  352.,  547.,  622.,  697.,  772.,  847.,  922.,  644.,  696.,  363.,  390.,  369.,  408.,  849.,  930., 1446., 1572., 1698., 1824., 1950., 2076., 1443., 1530.,  795.,  840.,  759.,  798., 1659., 1740., 2706., 2832., 2958., 3084., 3210., 3336., 2313., 2400., 1245., 1290., 1149., 1188., 2469., 2550., 3966., 4092., 4218., 4344., 4470., 4596., 3183., 3270., 1695., 1740., 1029., 1058., 2188., 2248., 3481., 3574., 3667., 3760., 3853., 3946., 2720., 2784., 1437., 1470.,  656.,  672., 1385., 1418., 2189., 2240., 2291., 2342., 2393., 2444., 1679., 1714.,  882.,  900.,   19.,   38.,   77.,  116.,  176.,  236.,  296.,  356.,  416.,  476.,  327.,  368.,  189.,  210.,  231.,  272.,  556.,  640.,  979., 1108., 1237., 1366., 1495., 1624., 1112., 1200.,  615.,  660.,  666.,  732., 1497., 1632., 2499., 2706., 2913., 3120., 3327., 3534., 2415., 2556., 1308., 1380., 1326., 1392., 2847., 2982., 4569., 4776., 4983., 5190., 5397., 5604., 3825., 3966., 2028., 2100., 1986., 2052., 4197., 4332., 6639., 6846., 7053., 7260., 7467., 7674., 5235., 5376., 2748., 2820., 1677., 1724., 3520., 3616., 5533., 5680., 5827., 5974., 6121., 6268., 4268., 4368., 2229., 2280., 1025., 1050., 2141., 2192., 3350., 3428., 3506., 3584., 3662., 3740., 2543., 2596., 1323., 1350.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  8361.,  9499., 11584., 13096., 13121., 14919., 11863., 13605., 12045., 13603.,  8824., 10048.,  5849.,  6699.,  8120.,  9008., 10544., 11792., 11120., 12632., 12328., 13872., 11904., 13352.,  9072., 10192.,  5432.,  6192.,  6181.,  6907.,  9320., 10336., 10385., 11587.,  9979., 11173.,  8709.,  9767.,  5328.,  6120.,  4373.,  4875.,  3995.,  4441.,  4976.,  5576.,  6267.,  7045.,  6021.,  6791.,  6895.,  7785.,  6040.,  6800.,  4555.,  5161.,  4616.,  5248.,  4688.,  5552.,  7264.,  8392.,  8024.,  9184.,  9136., 10456.,  7952.,  9072.,  6920.,  7808.,  6695.,  7681.,  9096., 10320., 11811., 13313., 11065., 12511., 11695., 13213.,  8128.,  9320.,  6583.,  7537.,  9101., 10159., 10864., 12184., 12093., 13715., 10835., 12401., 12233., 13871., 10472., 11760.,  8765.,  9791.,  7923.,  9053., 10584., 12000., 11863., 13605., 12045., 13603., 11811., 13313.,  7760.,  8888.,  5891.,  6733.,  8992.,  9976.,  9776., 11024., 12328., 13872., 11904., 13352., 10968., 12320.,  7312.,  8304.,  6080.,  6808.,  6747.,  7545.,  9008.,  9992.,  9979., 11173.,  8709.,  9767.,  6927.,  7849.,  4856.,  5488.,  3595.,  4041.,  3921.,  4311.,  4792.,  5360.,  6021.,  6791.,  6895.,  7785.,  7769.,  8779.,  6784.,  7640.,  5121.,  5799.,  3408.,  4008.,  5456.,  6320.,  8024.,  9184.,  9136., 10456., 10248., 11728.,  8816., 10064.,  7600.,  8584.,  6417.,  7267.,  8608.,  9736., 11065., 12511., 11695., 13213., 12069., 13659.,  9304., 10656.,  7489.,  8563.,  8311.,  9233.,  9864., 11088., 10835., 12401., 12233., 13871., 13375., 15085., 11648., 13096.,  9671., 10817.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  7976.,  8928., 10800., 12048., 11904., 13352., 10968., 12320.,  9520., 10776.,  8208.,  9200.,  6472.,  7168.,  6193.,  6935.,  8440.,  9392.,  8709.,  9767.,  6927.,  7849.,  6681.,  7467.,  4224.,  4824.,  2561.,  2951.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   272.,   308.,   193.,   215.,    88.,   124.,   340.,   428.,   788.,   944.,  1100.,  1256.,  1412.,  1568.,  1276.,  1396.,   816.,   884.,   489.,   579.,  1416.,  1620.,  2829.,  3171.,  3513.,  3855.,  4197.,  4539.,  3492.,  3744.,  2109.,  2247.,  1389.,  1479.,  3264.,  3468.,  5609.,  5951.,  5589.,  5931.,  6273.,  6615.,  4860.,  5112.,  2785.,  2923.,  2097.,  2187.,  3896.,  4100.,  6149.,  6491.,  5361.,  5703.,  6045.,  6387.,  4692.,  4944.,  2693.,  2831.,  1924.,  2008.,  2604.,  2788.,  3544.,  3844.,  1904.,  2204.,  2504.,  2804.,  2068.,  2284.,  1244.,  1360.,   473.,   527.,  1124.,  1240.,  1969.,  2155.,  2341.,  2527.,  2713.,  2899.,  2072.,  2204.,  1173.,  1243.,    59.,   137.,   280.,   444.,   679.,   937.,  1195.,  1453.,  1711.,  1969.,  1388.,  1568.,   823.,   917.,   916.,  1096.,  2284.,  2660.,  4136.,  4724.,  5312.,  5900.,  6488.,  7076.,  4948.,  5356.,  2796.,  3008.,  2811.,  3117.,  6492.,  7128., 11091., 12081., 13071., 14061., 15051., 16041., 11160., 11844.,  6159.,  6513.,  5871.,  6177., 10356., 10992., 15743., 16733., 14715., 15705., 16695., 17685., 12240., 12924.,  6691.,  7045.,  6435.,  6741., 10700., 11336., 15851., 16841., 14055., 15045., 16035., 17025., 11784., 12468.,  6455.,  6809.,  4768.,  4996.,  6276.,  6748.,  8332.,  9064.,  5252.,  5984.,  6716.,  7448.,  5164.,  5668.,  2936.,  3196.,  1103.,  1229.,  2528.,  2788.,  4291.,  4693.,  5095.,  5497.,  5899.,  6301.,  4340.,  4616.,  2379.,  2521.,   113.,   263.,   532.,   840.,  1273.,  1747.,  2221.,  2695.,  3169.,  3643.,  2504.,  2828.,  1453.,  1619.,  1744.,  2068.,  4228.,  4892.,  7484.,  8504.,  9524., 10544., 11564., 12584.,  8620.,  9316.,  4776.,  5132.,  5133.,  5655., 11568., 12636., 19353., 20991., 22629., 24267., 25905., 27543., 18828., 19944., 10209., 10779., 10353., 10875., 17448., 18516., 25877., 27515., 23841., 25479., 27117., 28755., 19620., 20736., 10597., 11167., 10773., 11295., 17504., 18572., 25553., 27191., 22749., 24387., 26025., 27663., 18876., 19992., 10217., 10787.,  7612.,  7984.,  9948., 10708., 13120., 14284.,  8600.,  9764., 10928., 12092.,  8260.,  9052.,  4628.,  5032.,  1733.,  1931.,  3932.,  4336.,  6613.,  7231.,  7849.,  8467.,  9085.,  9703.,  6608.,  7028.,  3585.,  3799.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 1622., 2814., 3096., 4728., 2658., 4666., 3514., 5458., 2994., 5130., 3096., 4728., 1622., 2814., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1622., 2814., 3096., 4728., 2658., 4666., 3514., 5458., 2994., 5130., 3096., 4728., 1622., 2814., 2174., 3430., 2328., 3960., 3514., 5458., 2994., 5130., 3850., 5922., 2328., 3960., 2174., 3430., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 2174., 3430., 2328., 3960., 3514., 5458., 2994., 5130., 3850., 5922., 2328., 3960., 2174., 3430.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.,   260.,   532.,  1272.,  1944.,  3292.,  4492.,  5372.,  6572.,  5084.,  6284.,  2968.,  3896.,   676.,  1204.,  1074.,  1770.,  4044.,  5628.,  8654., 10806., 10270., 12422.,  7470.,  9622.,  2524.,  3980.,  1762.,  2330.,  2466.,  3162.,  6892.,  8476., 10270., 12422.,  7470.,  9622.,  4990.,  7142.,  5116.,  6572.,  2898.,  3466.,  3538.,  4234.,  7372.,  8956.,  7470.,  9622.,  4990.,  7142.,  8654., 10806.,  7196.,  8652.,  2690.,  3258.,  2964.,  3620.,  4312.,  5752.,  3788.,  5628.,  7148.,  8988.,  8972., 10812.,  6008.,  7192.,   500.,   900.,   270.,   694.,  1428.,  2340.,  3282.,  4234.,  5186.,  6138.,  3698.,  4650.,   580.,  1108.,    30.,    70.,    70.,   174.,   388.,   660.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   468.,   868.,  1944.,  2872.,  4684.,  6268.,  7020.,  8604.,  6476.,  8060.,  3640.,  4824.,   884.,  1540.,  1578.,  2466.,  5116.,  6572.,  9462., 11678., 10182., 12398.,  5974.,  8190.,  3340.,  4668.,  2266.,  3026.,  3354.,  4242.,  7196.,  8652., 10182., 12398.,  5974.,  8190.,  6694.,  8910.,  5164.,  6492.,  3786.,  4546.,  4298.,  5186.,  6396.,  7852.,  5974.,  8190.,  6694.,  8910.,  9462., 11678.,  6476.,  7804.,  3450.,  4210.,  3428.,  4212.,  1592.,  2776.,  4604.,  6316.,  7196.,  8908.,  8252.,  9964.,  3800.,  4728.,   964.,  1492.,   310.,   798.,  1316.,  1844.,  2442.,  3074.,  3706.,  4338.,  1066.,  1698.,   724.,   868.,    70.,   174.,   110.,   278.,   596.,   996.,  1586.,  2282.,  2978.,  3674.,  3026.,  3722.,  2116.,  2644.,   190.,   486.,   676.,  1204.,  2616.,  3800.,  6076.,  8044.,  8668., 10636.,  7868.,  9836.,  4312.,  5752.,  1092.,  1876.,  1762.,  2330.,  5164.,  6492.,  9246., 11526.,  9070., 11350.,  7550.,  9830.,  4476.,  6188.,  2770.,  3722.,  2898.,  3466.,  6476.,  7804.,  9070., 11350.,  7550.,  9830.,  7374.,  9654.,  6556.,  8268.,  4674.,  5626.,  2690.,  3258.,  4396.,  5724.,  7550.,  9830.,  7374.,  9654.,  9246., 11526.,  8124.,  9836.,  4210.,  5162.,   500.,   900.,  1944.,  2872.,  4396.,  5980.,  6220.,  7804.,  6508.,  8092.,  4984.,  6168.,  1428.,  2084.,    30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 969., 1050., 1131., 1212., 1322., 1436., 1550., 1664., 1806., 1956., 2106., 2256., 2017., 2182., 2347., 2512., 2228., 2408., 2588., 2768., 2030., 2180., 2330., 2480., 1621., 1738., 1855., 1972., 1966., 2116., 2266., 2416., 2608., 2816., 3024., 3232., 3478., 3748., 4018., 4288., 3746., 4036., 4326., 4616., 4014., 4324., 4634., 4944., 3424., 3680., 3936., 4192., 2734., 2932., 3130., 3328., 3232., 3472., 3712., 3952., 4274., 4604., 4934., 5264., 5625., 6018., 6411., 6804., 5826., 6212., 6598., 6984., 5899., 6278., 6657., 7036., 4462., 4756., 5050., 5344., 2988., 3192., 3396., 3600., 4341., 4590., 4839., 5088., 5478., 5820., 6162., 6504., 6072., 6480., 6888., 7296., 5633., 6034., 6435., 6836., 5066., 5460., 5854., 6248., 4146., 4452., 4758., 5064., 3401., 3614., 3827., 4040., 3530., 3788., 4046., 4304., 5146., 5500., 5854., 6208., 6391., 6814., 7237., 7660., 6336., 6752., 7168., 7584., 6153., 6562., 6971., 7380., 4342., 4660., 4978., 5296., 2918., 3140., 3362., 3584., 3594., 3804., 4014., 4224., 4800., 5088., 5376., 5664., 4698., 5036., 5374., 5712., 4982., 5308., 5634., 5960., 5138., 5452., 5766., 6080., 4080., 4320., 4560., 4800., 2698., 2860., 3022., 3184., 2541., 2682., 2823., 2964., 3786., 3980., 4174., 4368., 3794., 4012., 4230., 4448., 3357., 3558., 3759., 3960., 2792., 2976., 3160., 3344., 1550., 1684., 1818., 1952., 1369., 1450., 1531., 1612., 2970., 3140., 3310., 3480., 3630., 3852., 4074., 4296., 4497., 4774., 5051., 5328., 4164., 4424., 4684., 4944., 4375., 4650., 4925., 5200., 3682., 3908., 4134., 4360., 2702., 2876., 3050., 3224., 2802., 2996., 3190., 3384., 2848., 3104., 3360., 3616., 4162., 4484., 4806., 5128., 4270., 4580., 4890., 5200., 4538., 4868., 5198., 5528., 3632., 3904., 4176., 4448., 3154., 3364., 3574., 3784., 3507., 3746., 3985., 4224., 4798., 5116., 5434., 5752., 5842., 6244., 6646., 7048., 5403., 5798., 6193., 6588., 5764., 6184., 6604., 7024., 4394., 4740., 5086., 5432., 3575., 3842., 4109., 4376., 3592., 3840., 4088., 4336., 5106., 5436., 5766., 6096., 6161., 6578., 6995., 7412., 6106., 6516., 6926., 7336., 6467., 6902., 7337., 7772., 5486., 5844., 6202., 6560., 4244., 4520., 4796., 5072., 3805., 4062., 4319., 4576., 4902., 5244., 5586., 5928., 5328., 5760., 6192., 6624., 5625., 6018., 6411., 6804., 5826., 6212., 6598., 6984., 4594., 4900., 5206., 5512., 3313., 3534., 3755., 3976., 4062., 4284., 4506., 4728., 5072., 5376., 5680., 5984., 6198., 6588., 6978., 7368., 5842., 6220., 6598., 6976., 5358., 5724., 6090., 6456., 3584., 3872., 4160., 4448., 3038., 3244., 3450., 3656., 2854., 3052., 3250., 3448., 4174., 4444., 4714., 4984., 5357., 5702., 6047., 6392., 5304., 5632., 5960., 6288., 5123., 5434., 5745., 6056., 3618., 3860., 4102., 4344., 2618., 2788., 2958., 3128., 1227., 1326., 1425., 1524., 1650., 1788., 1926., 2064., 2228., 2408., 2588., 2768., 2439., 2634., 2829., 3024., 2650., 2860., 3070., 3280., 2390., 2564., 2738., 2912., 1895., 2030., 2165., 2300., 2294., 2468., 2642., 2816., 3024., 3264., 3504., 3744., 4014., 4324., 4634., 4944., 4282., 4612., 4942., 5272., 4550., 4900., 5250., 5600., 3840., 4128., 4416., 4704., 3062., 3284., 3506., 3728., 3654., 3892., 4130., 4368., 4682., 4988., 5294., 5600., 5899., 6278., 6657., 7036., 5844., 6216., 6588., 6960., 5661., 6026., 6391., 6756., 4486., 4788., 5090., 5392., 3426., 3660., 3894., 4128., 4123., 4370., 4617., 4864., 4606., 4924., 5242., 5560., 5066., 5460., 5854., 6248., 5395., 5782., 6169., 6556., 5596., 5976., 6356., 6736., 4554., 4868., 5182., 5496., 3839., 4082., 4325., 4568., 3696., 3952., 4208., 4464., 5042., 5372., 5702., 6032., 6153., 6562., 6971., 7380., 5842., 6244., 6646., 7048., 5403., 5798., 6193., 6588., 4110., 4436., 4762., 5088., 3356., 3608., 3860., 4112., 3090., 3292., 3494., 3696., 4384., 4640., 4896., 5152., 5138., 5452., 5766., 6080., 5166., 5468., 5770., 6072., 5066., 5356., 5646., 5936., 4144., 4384., 4624., 4864., 3058., 3244., 3430., 3616., 2271., 2398., 2525., 2652., 2962., 3116., 3270., 3424., 2792., 2976., 3160., 3344., 2099., 2266., 2433., 2600., 2302., 2452., 2602., 2752., 1878., 2004., 2130., 2256., 1659., 1758., 1857., 1956.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    73.,    78.,    83.,    88.,    51.,    54.,    57.,    60.,    25.,    30.,    35.,    40.,    92.,   104.,   116.,   128.,   209.,   230.,   251.,   272.,   293.,   314.,   335.,   356.,   377.,   398.,   419.,   440.,   336.,   352.,   368.,   384.,   213.,   222.,   231.,   240.,   132.,   144.,   156.,   168.,   375.,   402.,   429.,   456.,   741.,   786.,   831.,   876.,   921.,   966.,  1011.,  1056.,  1101.,  1146.,  1191.,  1236.,   909.,   942.,   975.,  1008.,   546.,   564.,   582.,   600.,   372.,   384.,   396.,   408.,   915.,   942.,   969.,   996.,  1641.,  1686.,  1731.,  1776.,  1821.,  1866.,  1911.,  1956.,  2001.,  2046.,  2091.,  2136.,  1569.,  1602.,  1635.,  1668.,   906.,   924.,   942.,   960.,   612.,   624.,   636.,   648.,  1455.,  1482.,  1509.,  1536.,  2541.,  2586.,  2631.,  2676.,  2721.,  2766.,  2811.,  2856.,  2901.,  2946.,  2991.,  3036.,  2229.,  2262.,  2295.,  2328.,  1266.,  1284.,  1302.,  1320.,   751.,   762.,   773.,   784.,  1688.,  1712.,  1736.,  1760.,  2819.,  2858.,  2897.,  2936.,  2975.,  3014.,  3053.,  3092.,  3131.,  3170.,  3209.,  3248.,  2316.,  2344.,  2372.,  2400.,  1275.,  1290.,  1305.,  1320.,   567.,   574.,   581.,   588.,  1243.,  1258.,  1273.,  1288.,  2032.,  2056.,  2080.,  2104.,  2128.,  2152.,  2176.,  2200.,  2224.,  2248.,  2272.,  2296.,  1613.,  1630.,  1647.,  1664.,   873.,   882.,   891.,   900.,    10.,    20.,    30.,    40.,    61.,    82.,   103.,   124.,   157.,   190.,   223.,   256.,   289.,   322.,   355.,   388.,   421.,   454.,   487.,   520.,   343.,   366.,   389.,   412.,   204.,   216.,   228.,   240.,   223.,   246.,   269.,   292.,   560.,   608.,   656.,   704.,  1019.,  1094.,  1169.,  1244.,  1319.,  1394.,  1469.,  1544.,  1619.,  1694.,  1769.,  1844.,  1236.,  1288.,  1340.,  1392.,   699.,   726.,   753.,   780.,   699.,   738.,   777.,   816.,  1617.,  1698.,  1779.,  1860.,  2766.,  2892.,  3018.,  3144.,  3270.,  3396.,  3522.,  3648.,  3774.,  3900.,  4026.,  4152.,  2799.,  2886.,  2973.,  3060.,  1545.,  1590.,  1635.,  1680.,  1479.,  1518.,  1557.,  1596.,  3237.,  3318.,  3399.,  3480.,  5286.,  5412.,  5538.,  5664.,  5790.,  5916.,  6042.,  6168.,  6294.,  6420.,  6546.,  6672.,  4539.,  4626.,  4713.,  4800.,  2445.,  2490.,  2535.,  2580.,  2259.,  2298.,  2337.,  2376.,  4857.,  4938.,  5019.,  5100.,  7806.,  7932.,  8058.,  8184.,  8310.,  8436.,  8562.,  8688.,  8814.,  8940.,  9066.,  9192.,  6279.,  6366.,  6453.,  6540.,  3345.,  3390.,  3435.,  3480.,  2029.,  2058.,  2087.,  2116.,  4316.,  4376.,  4436.,  4496.,  6869.,  6962.,  7055.,  7148.,  7241.,  7334.,  7427.,  7520.,  7613.,  7706.,  7799.,  7892.,  5376.,  5440.,  5504.,  5568.,  2841.,  2874.,  2907.,  2940.,  1296.,  1312.,  1328.,  1344.,  2737.,  2770.,  2803.,  2836.,  4327.,  4378.,  4429.,  4480.,  4531.,  4582.,  4633.,  4684.,  4735.,  4786.,  4837.,  4888.,  3323.,  3358.,  3393.,  3428.,  1746.,  1764.,  1782.,  1800.,    19.,    38.,    57.,    76.,   115.,   154.,   193.,   232.,   292.,   352.,   412.,   472.,   532.,   592.,   652.,   712.,   772.,   832.,   892.,   952.,   613.,   654.,   695.,   736.,   357.,   378.,   399.,   420.,   421.,   462.,   503.,   544.,  1028.,  1112.,  1196.,  1280.,  1829.,  1958.,  2087.,  2216.,  2345.,  2474.,  2603.,  2732.,  2861.,  2990.,  3119.,  3248.,  2136.,  2224.,  2312.,  2400.,  1185.,  1230.,  1275.,  1320.,  1266.,  1332.,  1398.,  1464.,  2859.,  2994.,  3129.,  3264.,  4791.,  4998.,  5205.,  5412.,  5619.,  5826.,  6033.,  6240.,  6447.,  6654.,  6861.,  7068.,  4689.,  4830.,  4971.,  5112.,  2544.,  2616.,  2688.,  2760.,  2586.,  2652.,  2718.,  2784.,  5559.,  5694.,  5829.,  5964.,  8931.,  9138.,  9345.,  9552.,  9759.,  9966., 10173., 10380., 10587., 10794., 11001., 11208.,  7509.,  7650.,  7791.,  7932.,  3984.,  4056.,  4128.,  4200.,  3906.,  3972.,  4038.,  4104.,  8259.,  8394.,  8529.,  8664., 13071., 13278., 13485., 13692., 13899., 14106., 14313., 14520., 14727., 14934., 15141., 15348., 10329., 10470., 10611., 10752.,  5424.,  5496.,  5568.,  5640.,  3307.,  3354.,  3401.,  3448.,  6944.,  7040.,  7136.,  7232., 10919., 11066., 11213., 11360., 11507., 11654., 11801., 11948., 12095., 12242., 12389., 12536.,  8436.,  8536.,  8636.,  8736.,  4407.,  4458.,  4509.,  4560.,  2025.,  2050.,  2075.,  2100.,  4231.,  4282.,  4333.,  4384.,  6622.,  6700.,  6778.,  6856.,  6934.,  7012.,  7090.,  7168.,  7246.,  7324.,  7402.,  7480.,  5033.,  5086.,  5139.,  5192.,  2619.,  2646.,  2673.,  2700.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  7413.,  8551.,  9689., 10827., 11080., 12592., 14104., 15616., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423.,  8816., 10040., 11264., 12488.,  6157.,  7007.,  7857.,  8707.,  6096.,  6984.,  7872.,  8760.,  8432.,  9680., 10928., 12176.,  9672., 11184., 12696., 14208., 10656., 12200., 13744., 15288., 10520., 11968., 13416., 14864.,  8080.,  9200., 10320., 11440.,  3952.,  4712.,  5472.,  6232.,  4421.,  5147.,  5873.,  6599.,  6832.,  7848.,  8864.,  9880.,  8597.,  9799., 11001., 12203.,  8815., 10009., 11203., 12397.,  7401.,  8459.,  9517., 10575.,  3720.,  4512.,  5304.,  6096.,  3789.,  4291.,  4793.,  5295.,  3683.,  4129.,  4575.,  5021.,  4792.,  5392.,  5992.,  6592.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  5787.,  6677.,  7567.,  8457.,  5296.,  6056.,  6816.,  7576.,  3691.,  4297.,  4903.,  5509.,  4816.,  5448.,  6080.,  6712.,  5072.,  5936.,  6800.,  7664.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  8824., 10144., 11464., 12784.,  7568.,  8688.,  9808., 10928.,  5776.,  6664.,  7552.,  8440.,  5219.,  6205.,  7191.,  8177.,  8624.,  9848., 11072., 12296., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  9567., 11085., 12603., 14121.,  8088.,  9280., 10472., 11664.,  6907.,  7861.,  8815.,  9769.,  6905.,  7963.,  9021., 10079.,  9272., 10592., 11912., 13232., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533., 10041., 11679., 13317., 14955.,  8736., 10024., 11312., 12600.,  6993.,  8019.,  9045., 10071.,  7567.,  8697.,  9827., 10957.,  9920., 11336., 12752., 14168.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  7656.,  8784.,  9912., 11040.,  5351.,  6193.,  7035.,  7877.,  6744.,  7728.,  8712.,  9696.,  7664.,  8912., 10160., 11408., 10656., 12200., 13744., 15288., 10520., 11968., 13416., 14864.,  9360., 10712., 12064., 13416.,  5680.,  6672.,  7664.,  8656.,  4504.,  5232.,  5960.,  6688.,  4859.,  5657.,  6455.,  7253.,  7384.,  8368.,  9352., 10336.,  8815., 10009., 11203., 12397.,  7401.,  8459.,  9517., 10575.,  4963.,  5885.,  6807.,  7729.,  4176.,  4808.,  5440.,  6072.,  3683.,  4129.,  4575.,  5021.,  3065.,  3455.,  3845.,  4235.,  3808.,  4376.,  4944.,  5512.,  5025.,  5795.,  6565.,  7335.,  5787.,  6677.,  7567.,  8457.,  6549.,  7559.,  8569.,  9579.,  5944.,  6800.,  7656.,  8512.,  4129.,  4807.,  5485.,  6163.,  3832.,  4432.,  5032.,  5632.,  5840.,  6704.,  7568.,  8432.,  7744.,  8904., 10064., 11224.,  8824., 10144., 11464., 12784.,  9904., 11384., 12864., 14344.,  8432.,  9680., 10928., 12176.,  6424.,  7408.,  8392.,  9376.,  5789.,  6639.,  7489.,  8339.,  8488.,  9616., 10744., 11872.,  9897., 11343., 12789., 14235.,  9567., 11085., 12603., 14121., 10773., 12363., 13953., 15543.,  9168., 10520., 11872., 13224.,  7733.,  8807.,  9881., 10955.,  6451.,  7373.,  8295.,  9217.,  8112.,  9336., 10560., 11784.,  8835., 10401., 11967., 13533., 10041., 11679., 13317., 14955., 10735., 12445., 14155., 15865.,  9816., 11264., 12712., 14160.,  7819.,  8965., 10111., 11257.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  5760.,  6712.,  7664.,  8616.,  8432.,  9680., 10928., 12176., 10520., 11968., 13416., 14864.,  9360., 10712., 12064., 13416.,  7176.,  8432.,  9688., 10944.,  6448.,  7440.,  8432.,  9424.,  4544.,  5240.,  5936.,  6632.,  5201.,  5943.,  6685.,  7427.,  7424.,  8376.,  9328., 10280.,  7401.,  8459.,  9517., 10575.,  4963.,  5885.,  6807.,  7729.,  5597.,  6383.,  7169.,  7955.,  4216.,  4816.,  5416.,  6016.,  3065.,  3455.,  3845.,  4235.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,   413.,   435.,   148.,   184.,   220.,   256.,   612.,   700.,   788.,   876.,  1456.,  1612.,  1768.,  1924.,  1888.,  2044.,  2200.,  2356.,  2064.,  2220.,  2376.,  2532.,  1308.,  1428.,  1548.,  1668.,   876.,   944.,  1012.,  1080.,   717.,   807.,   897.,   987.,  2036.,  2240.,  2444.,  2648.,  4053.,  4395.,  4737.,  5079.,  4461.,  4803.,  5145.,  5487.,  4613.,  4955.,  5297.,  5639.,  2952.,  3204.,  3456.,  3708.,  1937.,  2075.,  2213.,  2351.,  1557.,  1647.,  1737.,  1827.,  3748.,  3952.,  4156.,  4360.,  6605.,  6947.,  7289.,  7631.,  5541.,  5883.,  6225.,  6567.,  4925.,  5267.,  5609.,  5951.,  2616.,  2868.,  3120.,  3372.,  1753.,  1891.,  2029.,  2167.,  1437.,  1527.,  1617.,  1707.,  2708.,  2912.,  3116.,  3320.,  4613.,  4955.,  5297.,  5639.,  4509.,  4851.,  5193.,  5535.,  5685.,  6027.,  6369.,  6711.,  4520.,  4772.,  5024.,  5276.,  2337.,  2475.,  2613.,  2751.,  2056.,  2140.,  2224.,  2308.,  3084.,  3268.,  3452.,  3636.,  4620.,  4920.,  5220.,  5520.,  3580.,  3880.,  4180.,  4480.,  3820.,  4120.,  4420.,  4720.,  2756.,  2972.,  3188.,  3404.,   928.,  1044.,  1160.,  1276.,   905.,   959.,  1013.,  1067.,  2160.,  2276.,  2392.,  2508.,  3797.,  3983.,  4169.,  4355.,  4541.,  4727.,  4913.,  5099.,  3557.,  3743.,  3929.,  4115.,  2060.,  2192.,  2324.,  2456.,    53.,   123.,   193.,   263.,    59.,   137.,   215.,   293.,   436.,   600.,   764.,   928.,  1163.,  1421.,  1679.,  1937.,  2195.,  2453.,  2711.,  2969.,  3227.,  3485.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,  1575.,  1669.,  1763.,  1857.,  1696.,  1876.,  2056.,  2236.,  4284.,  4660.,  5036.,  5412.,  7828.,  8416.,  9004.,  9592.,  7684.,  8272.,  8860.,  9448.,  7284.,  7872.,  8460.,  9048.,  3828.,  4236.,  4644.,  5052.,  2424.,  2636.,  2848.,  3060.,  2895.,  3201.,  3507.,  3813.,  7256.,  7892.,  8528.,  9164., 13179., 14169., 15159., 16149., 13875., 14865., 15855., 16845., 14315., 15305., 16295., 17285.,  8748.,  9432., 10116., 10800.,  5267.,  5621.,  5975.,  6329.,  5751.,  6057.,  6363.,  6669., 10696., 11332., 11968., 12604., 17171., 18161., 19151., 20141., 14091., 15081., 16071., 17061., 13763., 14753., 15743., 16733.,  7836.,  8520.,  9204.,  9888.,  4795.,  5149.,  5503.,  5857.,  5343.,  5649.,  5955.,  6261.,  9080.,  9716., 10352., 10988., 14315., 15305., 16295., 17285., 14499., 15489., 16479., 17469., 15963., 16953., 17943., 18933., 11468., 12152., 12836., 13520.,  5091.,  5445.,  5799.,  6153.,  5332.,  5560.,  5788.,  6016.,  7908.,  8380.,  8852.,  9324., 11568., 12300., 13032., 13764.,  9952., 10684., 11416., 12148.,  9616., 10348., 11080., 11812.,  6428.,  6932.,  7436.,  7940.,  1900.,  2160.,  2420.,  2680.,  2111.,  2237.,  2363.,  2489.,  4860.,  5120.,  5380.,  5640.,  8279.,  8681.,  9083.,  9485.,  9887., 10289., 10691., 11093.,  7463.,  7865.,  8267.,  8669.,  4184.,  4460.,  4736.,  5012.,   107.,   249.,   391.,   533.,   113.,   263.,   413.,   563.,   832.,  1140.,  1448.,  1756.,  2189.,  2663.,  3137.,  3611.,  4085.,  4559.,  5033.,  5507.,  5981.,  6455.,  6929.,  7403.,  4764.,  5088.,  5412.,  5736.,  2781.,  2947.,  3113.,  3279.,  3244.,  3568.,  3892.,  4216.,  7956.,  8620.,  9284.,  9948., 14200., 15220., 16240., 17260., 13480., 14500., 15520., 16540., 12504., 13524., 14544., 15564.,  6348.,  7044.,  7740.,  8436.,  3972.,  4328.,  4684.,  5040.,  5073.,  5595.,  6117.,  6639., 12476., 13544., 14612., 15680., 22305., 23943., 25581., 27219., 23289., 24927., 26565., 28203., 24017., 25655., 27293., 28931., 14544., 15660., 16776., 17892.,  8597.,  9167.,  9737., 10307.,  9945., 10467., 10989., 11511., 17644., 18712., 19780., 20848., 27737., 29375., 31013., 32651., 22641., 24279., 25917., 27555., 22601., 24239., 25877., 27515., 13056., 14172., 15288., 16404.,  7837.,  8407.,  8977.,  9547.,  9249.,  9771., 10293., 10815., 15452., 16520., 17588., 18656., 24017., 25655., 27293., 28931., 24489., 26127., 27765., 29403., 26241., 27879., 29517., 31155., 18416., 19532., 20648., 21764.,  7845.,  8415.,  8985.,  9555.,  8608.,  8980.,  9352.,  9724., 12732., 13492., 14252., 15012., 18516., 19680., 20844., 22008., 16324., 17488., 18652., 19816., 15412., 16576., 17740., 18904., 10100., 10892., 11684., 12476.,  2872.,  3276.,  3680.,  4084.,  3317.,  3515.,  3713.,  3911.,  7560.,  7964.,  8368.,  8772., 12761., 13379., 13997., 14615., 15233., 15851., 16469., 17087., 11369., 11987., 12605., 13223.,  6308.,  6728.,  7148.,  7568.,   161.,   375.,   589.,   803.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,   790.,  1982.,  3174.,  4366.,   830.,  2086.,  3342.,  4598.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2306.,  3002.,  3698.,  4394.,  4316.,  5900.,  7484.,  9068.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  4748.,  6204.,  7660.,  9116.,  1202.,  1770.,  2338.,  2906.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2116.,  2772.,  3428.,  4084.,  3800.,  5240.,  6680.,  8120.,  4220.,  6060.,  7900.,  9740.,  5500.,  7340.,  9180., 11020.,  4220.,  6060.,  7900.,  9740.,  4152.,  5336.,  6520.,  7704.,   420.,   820.,  1220.,  1620.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,   500.,  1028.,  1556.,  2084.,    30.,    70.,   110.,   150.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   676.,  1076.,  1476.,  1876.,  2456.,  3384.,  4312.,  5240.,  3804.,  5388.,  6972.,  8556.,  4572.,  6156.,  7740.,  9324.,  3804.,  5388.,  6972.,  8556.,  3128.,  4312.,  5496.,  6680.,  1348.,  2004.,  2660.,  3316.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  3644.,  4972.,  6300.,  7628.,  2186.,  2946.,  3706.,  4466.,  2938.,  3826.,  4714.,  5602.,  2956.,  4412.,  5868.,  7324.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  3388.,  4716.,  6044.,  7372.,  1834.,  2594.,  3354.,  4114.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  3644.,  4972.,  6300.,  7628.,  2186.,  2946.,  3706.,  4466.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,   310.,   798.,  1286.,  1774.,  2292.,  2820.,  3348.,  3876.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   110.,   278.,   446.,   614.,   932.,  1332.,  1732.,  2132.,  1378.,  2074.,  2770.,  3466.,  2306.,  3002.,  3698.,  4394.,  1378.,  2074.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,   190.,   486.,   782.,  1078.,  1012.,  1540.,  2068.,  2596.,  3128.,  4312.,  5496.,  6680.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  3800.,  5240.,  6680.,  8120.,  1684.,  2468.,  3252.,  4036.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,  1202.,  1770.,  2338.,  2906.,  3644.,  4972.,  6300.,  7628.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   420.,   820.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  6716.,  8300.,  4828.,  6412.,  7996.,  9580.,  3548.,  5132.,  6716.,  8300.,  3128.,  4312.,  5496.,  6680.,  1092.,  1748.,  2404.,  3060.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6004.,  8420., 11050., 11360., 11670., 11980., 10060.,  7906.,  6180.,  8590., 11180., 11450., 11720., 11990.,  9988.,  7791.,  3912.,  5650.,  7610.,  7730.,  7850.,  7970.,  6856.,  5505.,  7372., 10460., 13870., 14080., 14290., 14500., 12292.,  9742., 12110., 17000., 22325., 22650., 22975., 23300., 19570., 15380., 13550., 19000., 24925., 25250., 25575., 25900., 21730., 17060., 14990., 21000., 27525., 27850., 28175., 28500., 23890., 18740., 15748., 21860., 28410., 28720., 29030., 29340., 24396., 18994., 14748., 20350., 26300., 26570., 26840., 27110., 22420., 17367.,  6672.,  9410., 12410., 12530., 12650., 12770., 10776.,  8505., 10300., 14300., 18590., 18800., 19010., 19220., 16004., 12478., 14126., 19480., 25165., 25490., 25815., 26140., 21634., 16772.,  9038., 12520., 16245., 16570., 16895., 17220., 14322., 11156.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3220.,  4580.,  6090.,  6400.,  6710.,  7020.,  5964.,  4738.,  3732.,  5230.,  6860.,  7130.,  7400.,  7670.,  6436.,  5055.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,   74.,  130.,  166.,  161.,  133.,   80.,   50.,  133.,  252.,  410.,  488.,  441.,  346.,  200.,  125.,  298.,  522.,  800.,  878.,  756.,  571.,  320.,  200.,  463.,  792., 1190., 1268., 1071.,  796.,  440.,  249.,  549.,  902., 1310., 1378., 1127.,  815.,  440.,  189.,  408.,  658.,  940.,  982.,  790.,  563.,  300.,   13.,   40.,   82.,  140.,  198.,  178.,  139.,   80.,   95.,  227.,  398.,  610.,  742.,  629.,  469.,  260.,  266.,  601., 1008., 1490., 1712., 1413., 1030.,  560.,  521., 1126., 1818., 2600., 2822., 2268., 1615.,  860.,  776., 1651., 2628., 3710., 3932., 3123., 2200., 1160.,  693., 1461., 2306., 3230., 3394., 2675., 1871.,  980.,  441.,  924., 1450., 2020., 2110., 1654., 1151.,  600.,   25.,   76.,  154.,  260.,  366.,  322.,  247.,  140.,  179.,  419.,  722., 1090., 1318., 1097.,  805.,  440.,  482., 1069., 1764., 2570., 2936., 2385., 1714.,  920.,  917., 1954., 3114., 4400., 4766., 3780., 2659., 1400., 1352., 2839., 4464., 6230., 6596., 5175., 3604., 1880., 1137., 2373., 3710., 5150., 5410., 4223., 2927., 1520.,  693., 1440., 2242., 3100., 3238., 2518., 1739.,  900.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  4704.,  7008.,  9728., 11016., 12304., 13592., 11296.,  9416.,  2243.,  3132.,  4297.,  5275.,  6253.,  7231.,  5012.,  4413.,  3399.,  5164.,  7285.,  8215.,  9145., 10075.,  9060.,  7569.,  3640.,  5184.,  7112.,  8240.,  9368., 10496.,  7936.,  6848.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.,  2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  4704.,  7008.,  9728., 11016., 12304., 13592., 11296.,  9416.,  2243.,  3132.,  4297.,  5275.,  6253.,  7231.,  5012.,  4413.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  124.,  196.,  233.,  218.,  143.,   64.,  224.,  496.,  896., 1168., 1156.,  968.,  588.,  337.,  926., 1791., 2956., 3556., 3249., 2570., 1495.,  907., 2090., 3541., 5284., 5404., 4623., 3478., 1945., 1381., 2518., 3915., 5596., 5204., 4461., 3362., 1883., 1284., 1720., 2316., 3088., 2112., 1936., 1536.,  896.,  333.,  774., 1331., 2012., 2340., 1985., 1482.,  823.,   77.,  262.,  563.,  988., 1444., 1313., 1034.,  599.,  592., 1344., 2272., 3392., 3920., 3316., 2472., 1372., 1161., 2606., 4359., 6444., 7172., 6009., 4442., 2447., 1891., 2554., 3517., 4804., 3516., 3255., 2598., 1521.,  989., 2278., 3859., 5756., 6004., 5109., 3826., 2131.,  628.,  856., 1180., 1616.,  896.,  928.,  800.,  496.,  181.,  438.,  779., 1212., 1412., 1241.,  954.,  543.,   53.,  182.,  395.,  700., 1028.,  953.,  762.,  447.,  480., 1184., 2128., 3328., 4112., 3556., 2696., 1516., 1345., 3006., 5007., 7372., 8228., 6849., 5034., 2759., 2235., 3786., 5669., 7908., 7260., 6111., 4534., 2505., 2005., 2806., 3931., 5404., 4244., 3837., 3010., 1739.,  580., 1336., 2252., 3344., 3392., 2896., 2176., 1216.,   29.,  102.,  227.,  412.,  484.,  497.,  426.,  263.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1322.,  3716.,  7182., 11592., 11560., 10310.,  7220.,  4466.,  2562.,  4084.,  6614., 10344.,  8776.,  8846.,  7140.,  3466.,  1684.,  4168.,  7388., 11472.,  9360.,  7916.,  5224.,  1156.,   190.,   716.,  1642.,  3032.,  3256.,  2898.,  1884.,   150.,   190.,   716.,  1642.,  3032.,  4600.,  4498.,  3740.,  2262.,  1700.,  4136.,  7436.,  9360.,  8592.,  6300.,  2632.,  1876.,  1202.,  3604.,  7398., 12456., 15304., 13598.,  9732.,  5882.,  4042.,  7364., 12014., 15816., 12712., 10534.,  6260.,  4114.,  2466.,  6196., 11190., 17640., 17096., 14958., 10788.,  4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1322.,  3716.,  7182., 11592., 11560., 10310.,  7220.,  4466.,  2562.,  4084.,  6614., 10344.,  8776.,  8846.,  7140.,  3466.,  1684.,  4168.,  7388., 11472.,  9360.,  7916.,  5224.,  1156.,   190.,   716.,  1642.,  3032.,  3256.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 11552., 12008., 16224., 16840., 21320., 22100., 21920., 22720., 22520., 23340., 23120., 23960., 19440., 20120., 15296., 15812., 11982., 12360., 16670., 17180., 21715., 22360., 22240., 22900., 22765., 23440., 23290., 23980., 19418., 19976., 15159., 15582.,  4158.,  4368.,  5894.,  6180.,  7815.,  8180.,  8040.,  8420.,  8265.,  8660.,  8490.,  8900.,  7234.,  7568.,  5763.,  6018.,  6416.,  6680.,  9040.,  9400., 11920., 12380., 12320., 12800., 12720., 13220., 13120., 13640., 11104., 11528.,  8792.,  9116.,  9286.,  9628., 13054., 13520., 17175., 17770., 17800., 18420., 18425., 19070., 19050., 19720., 16066., 16612., 12679., 13096.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  8864.,  9224., 12512., 13000., 16520., 17140., 17120., 17760., 17720., 18380., 18320., 19000., 15472., 16024., 12224., 12644.,  9606.,  9912., 13406., 13820., 17515., 18040., 18040., 18580., 18565., 19120., 19090., 19660., 15962., 16424., 12495., 12846.,  5718.,  6048.,  8134.,  8580., 10815., 11380., 11040., 11620., 11265., 11860., 11490., 12100.,  9794., 10288.,  7803.,  8178.,  9104.,  9464., 12752., 13240., 16720., 17340., 17120., 17760., 17520., 18180., 17920., 18600., 15072., 15624., 11864., 12284., 12862., 13276., 17918., 18480., 23375., 24090., 24000., 24740., 24625., 25390., 25250., 26040., 21122., 21764., 16543., 17032.,  9286.,  9628., 13054., 13520., 17175., 17770., 17800., 18420., 18425., 19070., 19050., 19720., 16066., 16612., 12679., 13096.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6176.,  6440.,  8800.,  9160., 11720., 12180., 12320., 12800., 12920., 13420., 13520., 14040., 11504., 11928.,  9152.,  9476.,  7230.,  7464., 10142., 10460., 13315., 13720., 13840., 14260., 14365., 14800., 14890., 15340., 12506., 12872.,  9831., 10110.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    30.,    40.,    50.,    60.,    59.,    68.,    55.,    62.,    36.,    40.,    16.,    22.,    56.,    70.,   124.,   148.,   224.,   260.,   296.,   332.,   292.,   322.,   244.,   266.,   148.,   160.,    85.,   100.,   233.,   266.,   450.,   504.,   742.,   820.,   898.,   976.,   819.,   882.,   647.,   692.,   376.,   400.,   235.,   250.,   563.,   596.,   990.,  1044.,  1522.,  1600.,  1678.,  1756.,  1449.,  1512.,  1097.,  1142.,   616.,   640.,   385.,   400.,   893.,   926.,  1530.,  1584.,  2302.,  2380.,  2458.,  2536.,  2079.,  2142.,  1547.,  1592.,   856.,   880.,   484.,   498.,  1068.,  1098.,  1756.,  1804.,  2552.,  2620.,  2688.,  2756.,  2200.,  2254.,  1592.,  1630.,   860.,   880.,   369.,   378.,   797.,   816.,  1286.,  1316.,  1838.,  1880.,  1922.,  1964.,  1547.,  1580.,  1103.,  1126.,   588.,   600.,    13.,    26.,    53.,    80.,   122.,   164.,   222.,   280.,   338.,   396.,   311.,   356.,   247.,   278.,   144.,   160.,   160.,   190.,   392.,   454.,   700.,   796.,  1088.,  1220.,  1352.,  1484.,  1156.,  1258.,   868.,   938.,   484.,   520.,   481.,   532.,  1097.,  1202.,  1854.,  2016.,  2758.,  2980.,  3202.,  3424.,  2655.,  2826.,  1943.,  2060.,  1060.,  1120.,   991.,  1042.,  2147.,  2252.,  3474.,  3636.,  4978.,  5200.,  5422.,  5644.,  4365.,  4536.,  3113.,  3230.,  1660.,  1720.,  1501.,  1552.,  3197.,  3302.,  5094.,  5256.,  7198.,  7420.,  7642.,  7864.,  6075.,  6246.,  4283.,  4400.,  2260.,  2320.,  1348.,  1386.,  2844.,  2922.,  4492.,  4612.,  6296.,  6460.,  6624.,  6788.,  5224.,  5350.,  3656.,  3742.,  1916.,  1960.,   861.,   882.,  1805.,  1848.,  2834.,  2900.,  3950.,  4040.,  4130.,  4220.,  3239.,  3308.,  2255.,  2302.,  1176.,  1200.,    25.,    50.,   101.,   152.,   230.,   308.,   414.,   520.,   626.,   732.,   563.,   644.,   439.,   494.,   252.,   280.,   304.,   358.,   728.,   838.,  1276.,  1444.,  1952.,  2180.,  2408.,  2636.,  2020.,  2194.,  1492.,  1610.,   820.,   880.,   877.,   964.,  1961.,  2138.,  3258.,  3528.,  4774.,  5140.,  5506.,  5872.,  4491.,  4770.,  3239.,  3428.,  1744.,  1840.,  1747.,  1834.,  3731.,  3908.,  5958.,  6228.,  8434.,  8800.,  9166.,  9532.,  7281.,  7560.,  5129.,  5318.,  2704.,  2800.,  2617.,  2704.,  5501.,  5678.,  8658.,  8928., 12094., 12460., 12826., 13192., 10071., 10350.,  7019.,  7208.,  3664.,  3760.,  2212.,  2274.,  4620.,  4746.,  7228.,  7420., 10040., 10300., 10560., 10820.,  8248.,  8446.,  5720.,  5854.,  2972.,  3040.,  1353.,  1386.,  2813.,  2880.,  4382.,  4484.,  6062.,  6200.,  6338.,  6476.,  4931.,  5036.,  3407.,  3478.,  1764.,  1800.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  4892.,  5444.,  7584.,  8384.,  9708., 10788., 11012., 12252., 12316., 13716., 13620., 15180., 11328., 12640.,  9028., 10060.,  2195.,  2513.,  3248.,  3720.,  4611.,  5261.,  5581.,  6351.,  6551.,  7441.,  7521.,  8531.,  5568.,  6424.,  4985.,  5663.,  2667.,  3177.,  4432.,  5160.,  6635.,  7605.,  7509.,  8599.,  8383.,  9593.,  9257., 10587.,  8640.,  9752.,  7217.,  8087.,  4812.,  5364.,  5984.,  6784.,  7644.,  8724.,  8756.,  9996.,  9868., 11268., 10980., 12540.,  8288.,  9600.,  6676.,  7708.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.,  3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  4892.,  5444.,  7584.,  8384.,  9708., 10788., 11012., 12252., 12316., 13716., 13620., 15180., 11328., 12640.,  9028., 10060.,  2195.,  2513.,  3248.,  3720.,  4611.,  5261.,  5581.,  6351.,  6551.,  7441.,  7521.,  8531.,  5568.,  6424.,  4985.,  5663.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,  127.,  192.,  264.,  336.,  408.,  415.,  481.,  396.,  448.,  263.,  293.,   94.,  138.,  368.,  472.,  854., 1034., 1488., 1760., 1808., 2080., 1562., 1790.,  976., 1144.,  626.,  718.,  491.,  605., 1340., 1592., 2595., 3009., 3696., 4296., 4160., 4760., 3473., 3959., 2188., 2536., 1377., 1563., 1023., 1137., 2420., 2672., 4207., 4621., 5312., 5912., 4784., 5384., 3661., 4147., 1956., 2304., 1253., 1439.,  947., 1061., 1740., 1992., 2907., 3321., 4496., 5096., 4608., 5208., 4201., 4687., 3228., 3576., 1641., 1827., 1366., 1474., 2016., 2248., 2974., 3346., 4272., 4800., 3216., 3744., 2818., 3238., 1984., 2280.,  682.,  838.,  613.,  683., 1436., 1584., 2485., 2719., 3776., 4104., 3312., 3640., 2527., 2785., 1452., 1632.,   71.,  165.,   77.,  179.,  364.,  576.,  877., 1207., 1632., 2088., 2544., 3000., 2359., 2713., 1884., 2128., 1103., 1229., 1102., 1210., 2512., 2744., 4262., 4634., 4752., 5280., 4048., 4576., 2666., 3086.,  816., 1112.,  610.,  766.,  579.,  725., 1580., 1896., 3051., 3561., 4944., 5672., 6176., 6904., 5337., 5919., 3836., 4248., 2233., 2451., 1943., 2089., 2788., 3104., 4087., 4597., 5280., 6008., 3984., 4712., 3413., 3995., 2196., 2608., 1405., 1623., 1163., 1309., 2748., 3064., 4771., 5281., 7280., 8008., 6624., 7352., 5425., 6007., 3596., 4008., 1089., 1307.,  614.,  658.,  896., 1000., 1358., 1538., 2032., 2304., 1488., 1760., 1458., 1686., 1120., 1288.,  442.,  534.,  333.,  371.,  812.,  896., 1453., 1591., 2272., 2472., 2064., 2264., 1623., 1785.,  956., 1072.,   47.,  109.,   53.,  123.,  252.,  400.,  613.,  847., 1152., 1480., 1808., 2136., 1711., 1969., 1388., 1568.,  823.,  917.,  830., 1002., 2096., 2456., 3830., 4394., 4944., 5728., 5264., 6048., 4026., 4638., 2192., 2616., 1362., 1582., 1435., 1613., 3356., 3736., 5811., 6417., 7216., 8072., 7168., 8024., 5409., 6087., 2924., 3400., 1809., 2059., 1583., 1761., 2644., 3024., 4223., 4829., 6272., 7128., 6256., 7112., 5469., 6147., 3972., 4448., 2325., 2575., 2147., 2325., 3244., 3624., 4843., 5449., 6992., 7848., 5568., 6424., 4857., 5535., 3452., 3928., 1305., 1555.,  982., 1090., 2272., 2504., 3870., 4242., 5808., 6336., 4752., 5280., 3714., 4134., 2240., 2536.,  298.,  454.,   53.,   59.,  188.,  208.,  421.,  463.,  768.,  840.,  816.,  888.,  719.,  785.,  460.,  512.,   23.,   53.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,   812.,  1148.,  2504.,  3304.,  5332.,  6724.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1674.,  2306.,  5116.,  6572.,  8342., 10814., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2938.,  3570.,  5660.,  7116., 10086., 12558., 14040., 17720., 13272., 16952., 11182., 14230.,  7900., 10124.,  5602.,  6810.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1266.,  1356.,  1446.,  1536.,  2062.,  2188.,  2314.,  2440.,  3065.,  3230.,  3395.,  3560.,  3500.,  3680.,  3860.,  4040.,  3935.,  4130.,  4325.,  4520.,  4370.,  4580.,  4790.,  5000.,  4054.,  4228.,  4402.,  4576.,  3471.,  3606.,  3741.,  3876.,  3256.,  3424.,  3592.,  3760.,  4920.,  5152.,  5384.,  5616.,  6900.,  7200.,  7500.,  7800.,  7424.,  7744.,  8064.,  8384.,  7948.,  8288.,  8628.,  8968.,  8472.,  8832.,  9192.,  9552.,  7192.,  7488.,  7784.,  8080.,  6028.,  6256.,  6484.,  6712.,  5710.,  5980.,  6250.,  6520.,  8330.,  8700.,  9070.,  9440., 11427., 11902., 12377., 12852., 12076., 12576., 13076., 13576., 12725., 13250., 13775., 14300., 13374., 13924., 14474., 15024., 11074., 11524., 11974., 12424.,  9221.,  9566.,  9911., 10256.,  8550.,  8940.,  9330.,  9720., 12266., 12796., 13326., 13856., 16619., 17294., 17969., 18644., 17268., 17968., 18668., 19368., 17917., 18642., 19367., 20092., 18566., 19316., 20066., 20816., 15138., 15748., 16358., 16968., 12509., 12974., 13439., 13904., 11390., 11900., 12410., 12920., 16202., 16892., 17582., 18272., 21811., 22686., 23561., 24436., 22460., 23360., 24260., 25160., 23109., 24034., 24959., 25884., 23758., 24708., 25658., 26608., 19202., 19972., 20742., 21512., 15797., 16382., 16967., 17552., 13368., 13824., 14280., 14736., 18520., 19136., 19752., 20368., 24388., 25168., 25948., 26728., 24992., 25792., 26592., 27392., 25596., 26416., 27236., 28056., 26200., 27040., 27880., 28720., 20536., 21216., 21896., 22576., 16636., 17152., 17668., 18184., 11746., 12124., 12502., 12880., 15934., 16444., 16954., 17464., 20705., 21350., 21995., 22640., 21164., 21824., 22484., 23144., 21623., 22298., 22973., 23648., 22082., 22772., 23462., 24152., 16518., 17076., 17634., 18192., 13383., 13806., 14229., 14652.,  8106.,  8316.,  8526.,  8736., 11502., 11788., 12074., 12360., 15265., 15630., 15995., 16360., 15700., 16080., 16460., 16840., 16135., 16530., 16925., 17320., 16570., 16980., 17390., 17800., 14134., 14468., 14802., 15136., 11271., 11526., 11781., 12036.,  5208.,  5472.,  5736.,  6000.,  6584.,  6944.,  7304.,  7664.,  8404.,  8864.,  9324.,  9784.,  8928.,  9408.,  9888., 10368.,  9452.,  9952., 10452., 10952.,  9976., 10496., 11016., 11536.,  5784.,  6208.,  6632.,  7056.,  5164.,  5488.,  5812.,  6136.,  6902.,  7244.,  7586.,  7928., 10282., 10748., 11214., 11680., 14235., 14830., 15425., 16020., 14884., 15504., 16124., 16744., 15533., 16178., 16823., 17468., 16182., 16852., 17522., 18192., 13922., 14468., 15014., 15560., 11501., 11918., 12335., 12752.,  5710.,  5980.,  6250.,  6520.,  8330.,  8700.,  9070.,  9440., 11427., 11902., 12377., 12852., 12076., 12576., 13076., 13576., 12725., 13250., 13775., 14300., 13374., 13924., 14474., 15024., 11074., 11524., 11974., 12424.,  9221.,  9566.,  9911., 10256.,  8550.,  8940.,  9330.,  9720., 12266., 12796., 13326., 13856., 16619., 17294., 17969., 18644., 17268., 17968., 18668., 19368., 17917., 18642., 19367., 20092., 18566., 19316., 20066., 20816., 15138., 15748., 16358., 16968., 12509., 12974., 13439., 13904., 10648., 11008., 11368., 11728., 14808., 15296., 15784., 16272., 19556., 20176., 20796., 21416., 20160., 20800., 21440., 22080., 20764., 21424., 22084., 22744., 21368., 22048., 22728., 23408., 16824., 17376., 17928., 18480., 13660., 14080., 14500., 14920.,  9626.,  9932., 10238., 10544., 13086., 13500., 13914., 14328., 17033., 17558., 18083., 18608., 17492., 18032., 18572., 19112., 17951., 18506., 19061., 19616., 18410., 18980., 19550., 20120., 13798., 14260., 14722., 15184., 11199., 11550., 11901., 12252., 11106., 11436., 11766., 12096., 15822., 16268., 16714., 17160., 21065., 21630., 22195., 22760., 21500., 22080., 22660., 23240., 21935., 22530., 23125., 23720., 22370., 22980., 23590., 24200., 19094., 19588., 20082., 20576., 15231., 15606., 15981., 16356., 11512., 11872., 12232., 12592., 15416., 15904., 16392., 16880., 19892., 20512., 21132., 21752., 20416., 21056., 21696., 22336., 20940., 21600., 22260., 22920., 21464., 22144., 22824., 23504., 15640., 16192., 16744., 17296., 12748., 13168., 13588., 14008.,  8350.,  8764.,  9178.,  9592., 11210., 11772., 12334., 12896., 14739., 15454., 16169., 16884., 15388., 16128., 16868., 17608., 16037., 16802., 17567., 18332., 16686., 17476., 18266., 19056., 11650., 12292., 12934., 13576.,  9941., 10430., 10919., 11408.,  6902.,  7244.,  7586.,  7928., 10282., 10748., 11214., 11680., 14235., 14830., 15425., 16020., 14884., 15504., 16124., 16744., 15533., 16178., 16823., 17468., 16182., 16852., 17522., 18192., 13922., 14468., 15014., 15560., 11501., 11918., 12335., 12752.,  5710.,  5980.,  6250.,  6520.,  8330.,  8700.,  9070.,  9440., 11427., 11902., 12377., 12852., 12076., 12576., 13076., 13576., 12725., 13250., 13775., 14300., 13374., 13924., 14474., 15024., 11074., 11524., 11974., 12424.,  9221.,  9566.,  9911., 10256.,  7928.,  8192.,  8456.,  8720., 11096., 11456., 11816., 12176., 14724., 15184., 15644., 16104., 15328., 15808., 16288., 16768., 15932., 16432., 16932., 17432., 16536., 17056., 17576., 18096., 13112., 13536., 13960., 14384., 10684., 11008., 11332., 11656.,  7506.,  7740.,  7974.,  8208., 10238., 10556., 10874., 11192., 13361., 13766., 14171., 14576., 13820., 14240., 14660., 15080., 14279., 14714., 15149., 15584., 14738., 15188., 15638., 16088., 11078., 11444., 11810., 12176.,  9015.,  9294.,  9573.,  9852.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   109.,   118.,   127.,   136.,   103.,   110.,   117.,   124.,    68.,    72.,    76.,    80.,    26.,    32.,    38.,    44.,    98.,   112.,   126.,   140.,   224.,   248.,   272.,   296.,   412.,   448.,   484.,   520.,   556.,   592.,   628.,   664.,   554.,   584.,   614.,   644.,   466.,   488.,   510.,   532.,   284.,   296.,   308.,   320.,   155.,   170.,   185.,   200.,   433.,   466.,   499.,   532.,   846.,   900.,   954.,  1008.,  1406.,  1484.,  1562.,  1640.,  1718.,  1796.,  1874.,  1952.,  1575.,  1638.,  1701.,  1764.,  1249.,  1294.,  1339.,  1384.,   728.,   752.,   776.,   800.,   455.,   470.,   485.,   500.,  1093.,  1126.,  1159.,  1192.,  1926.,  1980.,  2034.,  2088.,  2966.,  3044.,  3122.,  3200.,  3278.,  3356.,  3434.,  3512.,  2835.,  2898.,  2961.,  3024.,  2149.,  2194.,  2239.,  2284.,  1208.,  1232.,  1256.,  1280.,   755.,   770.,   785.,   800.,  1753.,  1786.,  1819.,  1852.,  3006.,  3060.,  3114.,  3168.,  4526.,  4604.,  4682.,  4760.,  4838.,  4916.,  4994.,  5072.,  4095.,  4158.,  4221.,  4284.,  3049.,  3094.,  3139.,  3184.,  1688.,  1712.,  1736.,  1760.,   954.,   968.,   982.,   996.,  2106.,  2136.,  2166.,  2196.,  3464.,  3512.,  3560.,  3608.,  5036.,  5104.,  5172.,  5240.,  5308.,  5376.,  5444.,  5512.,  4346.,  4400.,  4454.,  4508.,  3146.,  3184.,  3222.,  3260.,  1700.,  1720.,  1740.,  1760.,   729.,   738.,   747.,   756.,  1575.,  1594.,  1613.,  1632.,  2542.,  2572.,  2602.,  2632.,  3634.,  3676.,  3718.,  3760.,  3802.,  3844.,  3886.,  3928.,  3061.,  3094.,  3127.,  3160.,  2183.,  2206.,  2229.,  2252.,  1164.,  1176.,  1188.,  1200.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   202.,   244.,   286.,   328.,   386.,   444.,   502.,   560.,   618.,   676.,   734.,   792.,   577.,   622.,   667.,   712.,   463.,   494.,   525.,   556.,   272.,   288.,   304.,   320.,   290.,   320.,   350.,   380.,   722.,   784.,   846.,   908.,  1304.,  1400.,  1496.,  1592.,  2044.,  2176.,  2308.,  2440.,  2572.,  2704.,  2836.,  2968.,  2210.,  2312.,  2414.,  2516.,  1666.,  1736.,  1806.,  1876.,   932.,   968.,  1004.,  1040.,   911.,   962.,  1013.,  1064.,  2089.,  2194.,  2299.,  2404.,  3546.,  3708.,  3870.,  4032.,  5294.,  5516.,  5738.,  5960.,  6182.,  6404.,  6626.,  6848.,  5139.,  5310.,  5481.,  5652.,  3769.,  3886.,  4003.,  4120.,  2060.,  2120.,  2180.,  2240.,  1931.,  1982.,  2033.,  2084.,  4189.,  4294.,  4399.,  4504.,  6786.,  6948.,  7110.,  7272.,  9734.,  9956., 10178., 10400., 10622., 10844., 11066., 11288.,  8559.,  8730.,  8901.,  9072.,  6109.,  6226.,  6343.,  6460.,  3260.,  3320.,  3380.,  3440.,  2951.,  3002.,  3053.,  3104.,  6289.,  6394.,  6499.,  6604., 10026., 10188., 10350., 10512., 14174., 14396., 14618., 14840., 15062., 15284., 15506., 15728., 11979., 12150., 12321., 12492.,  8449.,  8566.,  8683.,  8800.,  4460.,  4520.,  4580.,  4640.,  2658.,  2696.,  2734.,  2772.,  5610.,  5688.,  5766.,  5844.,  8864.,  8984.,  9104.,  9224., 12428., 12592., 12756., 12920., 13084., 13248., 13412., 13576., 10322., 10448., 10574., 10700.,  7226.,  7312.,  7398.,  7484.,  3788.,  3832.,  3876.,  3920.,  1701.,  1722.,  1743.,  1764.,  3567.,  3610.,  3653.,  3696.,  5602.,  5668.,  5734.,  5800.,  7810.,  7900.,  7990.,  8080.,  8170.,  8260.,  8350.,  8440.,  6409.,  6478.,  6547.,  6616.,  4463.,  4510.,  4557.,  4604.,  2328.,  2352.,  2376.,  2400.,    25.,    50.,    75.,   100.,   151.,   202.,   253.,   304.,   382.,   460.,   538.,   616.,   722.,   828.,   934.,  1040.,  1146.,  1252.,  1358.,  1464.,  1045.,  1126.,  1207.,  1288.,   823.,   878.,   933.,   988.,   476.,   504.,   532.,   560.,   554.,   608.,   662.,   716.,  1346.,  1456.,  1566.,  1676.,  2384.,  2552.,  2720.,  2888.,  3676.,  3904.,  4132.,  4360.,  4588.,  4816.,  5044.,  5272.,  3866.,  4040.,  4214.,  4388.,  2866.,  2984.,  3102.,  3220.,  1580.,  1640.,  1700.,  1760.,  1667.,  1754.,  1841.,  1928.,  3745.,  3922.,  4099.,  4276.,  6246.,  6516.,  6786.,  7056.,  9182.,  9548.,  9914., 10280., 10646., 11012., 11378., 11744.,  8703.,  8982.,  9261.,  9540.,  6289.,  6478.,  6667.,  6856.,  3392.,  3488.,  3584.,  3680.,  3407.,  3494.,  3581.,  3668.,  7285.,  7462.,  7639.,  7816., 11646., 11916., 12186., 12456., 16502., 16868., 17234., 17600., 17966., 18332., 18698., 19064., 14283., 14562., 14841., 15120., 10069., 10258., 10447., 10636.,  5312.,  5408.,  5504.,  5600.,  5147.,  5234.,  5321.,  5408., 10825., 11002., 11179., 11356., 17046., 17316., 17586., 17856., 23822., 24188., 24554., 24920., 25286., 25652., 26018., 26384., 19863., 20142., 20421., 20700., 13849., 14038., 14227., 14416.,  7232.,  7328.,  7424.,  7520.,  4362.,  4424.,  4486.,  4548.,  9114.,  9240.,  9366.,  9492., 14264., 14456., 14648., 14840., 19820., 20080., 20340., 20600., 20860., 21120., 21380., 21640., 16298., 16496., 16694., 16892., 11306., 11440., 11574., 11708.,  5876.,  5944.,  6012.,  6080.,  2673.,  2706.,  2739.,  2772.,  5559.,  5626.,  5693.,  5760.,  8662.,  8764.,  8866.,  8968., 11986., 12124., 12262., 12400., 12538., 12676., 12814., 12952.,  9757.,  9862.,  9967., 10072.,  6743.,  6814.,  6885.,  6956.,  3492.,  3528.,  3564.,  3600.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  2003.,  2321.,  2639.,  2957.,  3160.,  3632.,  4104.,  4576.,  4759.,  5409.,  6059.,  6709.,  5585.,  6355.,  7125.,  7895.,  6411.,  7301.,  8191.,  9081.,  7237.,  8247.,  9257., 10267.,  5688.,  6544.,  7400.,  8256.,  5009.,  5687.,  6365.,  7043.,  3155.,  3665.,  4175.,  4685.,  4888.,  5616.,  6344.,  7072.,  6231.,  7201.,  8171.,  9141.,  6993.,  8083.,  9173., 10263.,  7755.,  8965., 10175., 11385.,  8517.,  9847., 11177., 12507.,  7672.,  8784.,  9896., 11008.,  5361.,  6231.,  7101.,  7971.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.,  2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  2003.,  2321.,  2639.,  2957.,  3160.,  3632.,  4104.,  4576.,  4759.,  5409.,  6059.,  6709.,  5585.,  6355.,  7125.,  7895.,  6411.,  7301.,  8191.,  9081.,  7237.,  8247.,  9257., 10267.,  5688.,  6544.,  7400.,  8256.,  5009.,  5687.,  6365.,  7043.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  328.,  400.,  472.,  544.,  520.,  592.,  664.,  736.,  555.,  621.,  687.,  753.,  400.,  452.,  504.,  556.,   23.,   53.,   83.,  113.,   58.,  102.,  146.,  190.,  336.,  440.,  544.,  648.,  898., 1078., 1258., 1438., 1712., 1984., 2256., 2528., 1968., 2240., 2512., 2784., 1734., 1962., 2190., 2418.,  960., 1128., 1296., 1464.,  190.,  282.,  374.,  466.,  287.,  401.,  515.,  629., 1144., 1396., 1648., 1900., 2571., 2985., 3399., 3813., 4024., 4624., 5224., 5824., 4216., 4816., 5416., 6016., 3281., 3767., 4253., 4739., 1904., 2252., 2600., 2948.,  629.,  815., 1001., 1187.,  743.,  857.,  971., 1085., 2056., 2308., 2560., 2812., 3395., 3809., 4223., 4637., 4216., 4816., 5416., 6016., 4024., 4624., 5224., 5824., 2857., 3343., 3829., 4315., 1792., 2140., 2488., 2836., 1373., 1559., 1745., 1931., 1103., 1217., 1331., 1445., 2232., 2484., 2736., 2988., 2843., 3257., 3671., 4085., 4024., 4624., 5224., 5824., 3960., 4560., 5160., 5760., 3073., 3559., 4045., 4531., 2832., 3180., 3528., 3876., 1637., 1823., 2009., 2195.,  922., 1030., 1138., 1246., 1264., 1496., 1728., 1960., 2082., 2454., 2826., 3198., 3440., 3968., 4496., 5024., 3440., 3968., 4496., 5024., 3462., 3882., 4302., 4722., 2752., 3048., 3344., 3640., 1246., 1402., 1558., 1714.,   53.,  123.,  193.,  263.,  392.,  540.,  688.,  836., 1049., 1283., 1517., 1751., 2056., 2384., 2712., 3040., 2248., 2576., 2904., 3232., 1979., 2237., 2495., 2753., 1264., 1444., 1624., 1804.,   71.,  165.,  259.,  353.,   77.,  179.,  281.,  383.,  568.,  780.,  992., 1204., 1505., 1835., 2165., 2495., 2920., 3376., 3832., 4288., 3112., 3568., 4024., 4480., 2691., 3045., 3399., 3753., 1696., 1940., 2184., 2428.,   95.,  221.,  347.,  473.,  490.,  598.,  706.,  814., 1456., 1688., 1920., 2152., 2962., 3334., 3706., 4078., 3440., 3968., 4496., 5024., 3696., 4224., 4752., 5280., 2774., 3194., 3614., 4034., 1056., 1352., 1648., 1944.,  622.,  778.,  934., 1090.,  951., 1097., 1243., 1389., 2600., 2916., 3232., 3548., 3411., 3921., 4431., 4941., 4888., 5616., 6344., 7072., 5080., 5808., 6536., 7264., 3353., 3935., 4517., 5099., 2592., 3004., 3416., 3828., 1293., 1511., 1729., 1947., 1535., 1681., 1827., 1973., 2232., 2548., 2864., 3180., 3595., 4105., 4615., 5125., 5080., 5808., 6536., 7264., 4888., 5616., 6344., 7072., 4337., 4919., 5501., 6083., 3248., 3660., 4072., 4484., 2165., 2383., 2601., 2819.,  487.,  633.,  779.,  925., 1640., 1956., 2272., 2588., 2915., 3425., 3935., 4445., 4888., 5616., 6344., 7072., 4824., 5552., 6280., 7008., 3913., 4495., 5077., 5659., 3008., 3420., 3832., 4244., 1021., 1239., 1457., 1675.,  490.,  534.,  578.,  622.,  656.,  760.,  864.,  968., 1042., 1222., 1402., 1582., 1712., 1984., 2256., 2528., 1712., 1984., 2256., 2528., 1910., 2138., 2366., 2594., 1632., 1800., 1968., 2136.,  814.,  906.,  998., 1090.,   29.,   67.,  105.,  143.,  216.,  300.,  384.,  468.,  593.,  731.,  869., 1007., 1192., 1392., 1592., 1792., 1384., 1584., 1784., 1984., 1267., 1429., 1591., 1753.,  832.,  948., 1064., 1180.,   47.,  109.,  171.,  233.,   53.,  123.,  193.,  263.,  392.,  540.,  688.,  836., 1049., 1283., 1517., 1751., 2056., 2384., 2712., 3040., 2248., 2576., 2904., 3232., 1979., 2237., 2495., 2753., 1264., 1444., 1624., 1804.,   71.,  165.,  259.,  353.,  410.,  582.,  754.,  926., 1552., 1912., 2272., 2632., 3490., 4054., 4618., 5182., 5168., 5952., 6736., 7520., 5424., 6208., 6992., 7776., 4326., 4938., 5550., 6162., 2176., 2600., 3024., 3448.,  542.,  762.,  982., 1202., 1103., 1281., 1459., 1637., 3032., 3412., 3792., 4172., 4763., 5369., 5975., 6581., 5752., 6608., 7464., 8320., 5944., 6800., 7656., 8512., 3937., 4615., 5293., 5971., 2256., 2732., 3208., 3684., 1445., 1695., 1945., 2195., 1815., 1993., 2171., 2349., 3432., 3812., 4192., 4572., 4307., 4913., 5519., 6125., 5944., 6800., 7656., 8512., 5752., 6608., 7464., 8320., 4281., 4959., 5637., 6315., 3680., 4156., 4632., 5108., 2445., 2695., 2945., 3195., 1407., 1585., 1763., 1941., 2072., 2452., 2832., 3212., 3499., 4105., 4711., 5317., 5752., 6608., 7464., 8320., 5688., 6544., 7400., 8256., 5265., 5943., 6621., 7299., 4208., 4684., 5160., 5636., 1941., 2191., 2441., 2691.,  154.,  262.,  370.,  478.,  752.,  984., 1216., 1448., 1826., 2198., 2570., 2942., 3440., 3968., 4496., 5024., 3440., 3968., 4496., 5024., 3206., 3626., 4046., 4466., 2240., 2536., 2832., 3128.,  478.,  634.,  790.,  946.,    5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  328.,  400.,  472.,  544.,  520.,  592.,  664.,  736.,  555.,  621.,  687.,  753.,  400.,  452.,  504.,  556.,   23.,   53.,   83.,  113.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  2778.,  3410.,  4042.,  4674.,  3980.,  5436.,  6892.,  8348.,  7766., 10238., 12710., 15182.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9406., 12454., 15502., 18550.,  5740.,  7964., 10188., 12412.,  4674.,  5882.,  7090.,  8298.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  318.,   510.,   750.,   870.,   816.,   705.,   796.,  1220.,  1730.,  1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,  2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3770.,  5400.,  7225.,  7550.,  6470.,  5180.,  4850.,  6900.,  9175.,  9500.,  8090.,  6440.,  5632.,  7900., 10370., 10680.,  8980.,  7066.,  5628.,  7830., 10200., 10470.,  8736.,  6825.,  3342.,  4830.,  6446.,  6438.,  5392.,  4145.,  5884.,  8260., 10466., 10228.,  8348.,  6242.,  8522., 11840., 14701., 14258., 11518.,  8516.,  7298., 10140., 12171., 11408.,  9042.,  6448.,  5114.,  7160.,  8041.,  6958.,  5286.,  3420.,  1970.,  2900.,  3975.,  4300.,  3770.,  3080.,  2848.,  4060.,  5410.,  5720.,  4884.,  3898.,  3180.,  4470.,  5880.,  6150.,  5184.,  4089.,  2334.,  3390.,  4590.,  4710.,  4080.,  3297.,  4444.,  6340.,  8450.,  8660.,  7388.,  5890.,  7370., 10400., 13725., 14050., 11870.,  9380.,  8386., 11708., 15291., 15360., 12594.,  9872.,  8762., 11928., 15321., 15070., 12038.,  9404.,  8178., 10868., 13751., 13180., 10202.,  7976.,  6528.,  8348., 10306.,  9400.,  6804.,  5338.,  3612.,  4118.,  4696.,  3430.,  1632.,  1353.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   10.,    9.,   29.,   39.,   49.,   59.,   40.,   34.,   95.,  116.,  137.,  158.,  100.,   86.,  222.,  258.,  294.,  330.,  200.,  166.,  402.,  438.,  474.,  510.,  300.,  220.,  503.,  536.,  569.,  602.,  340.,  217.,  483.,  509.,  535.,  561.,  310.,  147.,  322.,  337.,  352.,  367.,  200.,    9.,   28.,   47.,   66.,   85.,   50.,   65.,  157.,  199.,  241.,  283.,  160.,  178.,  407.,  476.,  545.,  614.,  340.,  358.,  798.,  898.,  998., 1098.,  600.,  598., 1298., 1398., 1498., 1598.,  860.,  604., 1295., 1376., 1457., 1538.,  820.,  513., 1091., 1149., 1207., 1265.,  670.,  315.,  666.,  697.,  728.,  759.,  400.,   17.,   52.,   87.,  122.,  157.,   90.,  121.,  285.,  359.,  433.,  507.,  280.,  322.,  719.,  836.,  953., 1070.,  580.,  630., 1374., 1538., 1702., 1866., 1000., 1030., 2194., 2358., 2522., 2686., 1420.,  988., 2087., 2216., 2345., 2474., 1300.,  809., 1699., 1789., 1879., 1969., 1030.,  483., 1010., 1057., 1104., 1151.,  600.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6487.,  8396., 10805., 10443.,  6756.,  6097.,  5224.,  8000., 11224., 12160., 10112.,  8480.,  5803.,  7836., 10177., 10163.,  7044.,  5913.,  2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6487.,  8396., 10805., 10443.,  6756.,  6097.,  5224.,  8000., 11224., 12160., 10112.,  8480.,  5803.,  7836., 10177., 10163.,  7044.,  5913.,  2283.,  3708.,  5409.,  6115.,  5508.,  4457.,  4896.,  7264.,  9312.,  9576.,  7584.,  5816.,  6323.,  9148., 11145., 11039.,  8212.,  6221.,  6335.,  8940., 10061., 10883.,  9156.,  7609.,  7307., 10204., 13009., 12551.,  9076.,  7205.,  6487.,  8396., 10805., 10443.,  6756.,  6097.,  5224.,  8000., 11224., 12160., 10112.,  8480.,  5803.,  7836., 10177., 10163.,  7044.,  5913.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    42.,    62.,    82.,    67.,    52.,   184.,   256.,   328.,   400.,   280.,   221.,   646.,   802.,   958.,  1114.,   719.,   592.,  1568.,  1840.,  2112.,  2384.,  1464.,  1192.,  2928.,  3200.,  3472.,  3744.,  2224.,  1637.,  3766.,  4018.,  4270.,  4522.,  2567.,  1640.,  3664.,  3864.,  4064.,  4264.,  2364.,  1121.,  2462.,  2578.,  2694.,  2810.,  1535.,    53.,   182.,   330.,   478.,   626.,   371.,   468.,  1144.,  1472.,  1800.,  2128.,  1208.,  1325.,  3046.,  3586.,  4126.,  4666.,  2591.,  2704.,  6048.,  6832.,  7616.,  8400.,  4600.,  4584.,  9968., 10752., 11536., 12320.,  6640.,  4661., 10006., 10642., 11278., 11914.,  6359.,  3976.,  8464.,  8920.,  9376.,  9832.,  5212.,  2449.,  5182.,  5426.,  5670.,  5914.,  3119.,   101.,   342.,   618.,   894.,  1170.,   675.,   884.,  2104.,  2688.,  3272.,  3856.,  2136.,  2429.,  5446.,  6370.,  7294.,  8218.,  4463.,  4816., 10528., 11824., 13120., 14416.,  7736.,  7976., 17008., 18304., 19600., 20896., 11056.,  7685., 16246., 17266., 18286., 19306., 10151.,  6312., 13264., 13976., 14688., 15400.,  8060.,  3777.,  7902.,  8274.,  8646.,  9018.,  4703.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.,  9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.,  9366.,  9832., 10858., 13442., 12104.,  9630., 13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2056.,  1768.,  1252.,  1250.,  3572.,  4772.,  4628.,  3972.,  2746.,  2696.,  7056.,  8336.,  8080.,  7312.,  4776.,  4648., 10192., 10448.,  9168.,  7056.,  4104.,  4162.,  7796.,  6884.,  8852.,  9476.,  4698.,  4612.,  7336.,  5000.,  6568.,  5768.,  2004.,  1966.,  4652.,  5564.,  6476.,  3996.,   310.,    30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2056.,  1768.,  1252.,  1250.,  3572.,  4772.,  4628.,  3972.,  2746.,  2696.,  7056.,  8336.,  8080.,  7312.,  4776.,  4648., 10192., 10448.,  9168.,  7056.,  4104.,  4162.,  7796.,  6884.,  8852.,  9476.,  4698.,  4612.,  7336.,  5000.,  6568.,  5768.,  2004.,  1966.,  4652.,  5564.,  6476.,  3996.,   310.,    30.,   140.,   284.,   428.,   572.,   486.,   340.,  1288.,  1832.,  2056.,  1768.,  1252.,  1250.,  3572.,  4772.,  4628.,  3972.,  2746.,  2696.,  7056.,  8336.,  8080.,  7312.,  4776.,  4648., 10192., 10448.,  9168.,  7056.,  4104.,  4162.,  7796.,  6884.,  8852.,  9476.,  4698.,  4612.,  7336.,  5000.,  6568.,  5768.,  2004.,  1966.,  4652.,  5564.,  6476.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  564.,   636.,   918.,  1020.,  1365.,  1500.,  1590.,  1740.,  1506.,  1632.,  1311.,  1410.,  1460.,  1592.,  2256.,  2440.,  3220.,  3460.,  3620.,  3880.,  3296.,  3512.,  2780.,  2948.,  3010.,  3220.,  4510.,  4800.,  6275.,  6650.,  6900.,  7300.,  6130.,  6460.,  5065.,  5320.,  5080.,  5380.,  7390.,  7800., 10025., 10550., 10650., 11200.,  9250.,  9700.,  7495.,  7840.,  7150.,  7540., 10270., 10800., 13775., 14450., 14400., 15100., 12370., 12940.,  9925., 10360.,  9220.,  9700., 13150., 13800., 17525., 18350., 18150., 19000., 15490., 16180., 12355., 12880., 10844., 11264., 15232., 15800., 20020., 20740., 20620., 21360., 17360., 17960., 13676., 14132., 10914., 11256., 15198., 15660., 19815., 20400., 20340., 20940., 16986., 17472., 13281., 13650.,  6180.,  6684.,  8982.,  9660., 12101., 12892., 12134., 12876., 10210., 10784.,  7887.,  8290., 11252., 11768., 15824., 16520., 20116., 20932., 19684., 20456., 16096., 16696., 12060., 12484., 16498., 17044., 22942., 23680., 28531., 29402., 27684., 28516., 22386., 23036., 16569., 17032., 14152., 14596., 19678., 20280., 23641., 24342., 22154., 22816., 17570., 18084., 12535., 12896.,  9886., 10228., 13854., 14320., 15551., 16082., 13424., 13916., 10194., 10572.,  6581.,  6840.,  3700.,  3940.,  5470.,  5800.,  7525.,  7950.,  8150.,  8600.,  7170.,  7540.,  5875.,  6160.,  5468.,  5696.,  7808.,  8120., 10420., 10820., 11020., 11440.,  9424.,  9768.,  7532.,  7796.,  6162.,  6360.,  8670.,  8940., 11415., 11760., 11940., 12300., 10074., 10368.,  7953.,  8178.,  4308.,  4668.,  6294.,  6780.,  8565.,  9180.,  8790.,  9420.,  7650.,  8160.,  6207.,  6594.,  8372.,  8888., 11984., 12680., 16020., 16900., 16420., 17320., 14048., 14776., 11228., 11780., 14050., 14740., 19870., 20800., 26275., 27450., 26900., 28100., 22770., 23740., 18025., 18760., 16056., 16772., 22494., 23416., 29449., 30582., 29626., 30720., 24354., 25188., 19111., 19744., 16910., 17524., 23070., 23856., 29679., 30642., 29216., 30140., 23378., 24076., 18277., 18808., 15844., 16356., 21086., 21736., 26709., 27502., 25606., 26360., 19842., 20404., 15523., 15952., 12700., 13056., 16256., 16696., 20084., 20612., 18316., 18800., 13264., 13608., 10412., 10676.,  7042.,  7224.,  8030.,  8236.,  9159.,  9392.,  6676.,  6860.,  3162.,  3264.,  2625.,  2706.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   18.,   20.,   14.,   18.,   48.,   58.,   68.,   78.,   88.,   98.,  108.,  118.,   74.,   80.,   59.,   68.,  169.,  190.,  211.,  232.,  253.,  274.,  295.,  316.,  188.,  200.,  156.,  172.,  408.,  444.,  480.,  516.,  552.,  588.,  624.,  660.,  380.,  400.,  316.,  332.,  768.,  804.,  840.,  876.,  912.,  948.,  984., 1020.,  580.,  600.,  425.,  440.,  973., 1006., 1039., 1072., 1105., 1138., 1171., 1204.,  662.,  680.,  422.,  434.,  940.,  966.,  992., 1018., 1044., 1070., 1096., 1122.,  606.,  620.,  287.,  294.,  629.,  644.,  659.,  674.,  689.,  704.,  719.,  734.,  392.,  400.,    9.,   18.,   37.,   56.,   75.,   94.,  113.,  132.,  151.,  170.,   90.,  100.,  110.,  130.,  272.,  314.,  356.,  398.,  440.,  482.,  524.,  566.,  298.,  320.,  323.,  356.,  745.,  814.,  883.,  952., 1021., 1090., 1159., 1228.,  644.,  680.,  668.,  716., 1496., 1596., 1696., 1796., 1896., 1996., 2096., 2196., 1148., 1200., 1148., 1196., 2496., 2596., 2696., 2796., 2896., 2996., 3096., 3196., 1668., 1720., 1169., 1208., 2509., 2590., 2671., 2752., 2833., 2914., 2995., 3076., 1598., 1640.,  998., 1026., 2124., 2182., 2240., 2298., 2356., 2414., 2472., 2530., 1310., 1340.,  615.,  630., 1301., 1332., 1363., 1394., 1425., 1456., 1487., 1518.,  784.,  800.,   17.,   34.,   69.,  104.,  139.,  174.,  209.,  244.,  279.,  314.,  162.,  180.,  206.,  242.,  496.,  570.,  644.,  718.,  792.,  866.,  940., 1014.,  522.,  560.,  587.,  644., 1321., 1438., 1555., 1672., 1789., 1906., 2023., 2140., 1100., 1160., 1180., 1260., 2584., 2748., 2912., 3076., 3240., 3404., 3568., 3732., 1916., 2000., 1980., 2060., 4224., 4388., 4552., 4716., 4880., 5044., 5208., 5372., 2756., 2840., 1913., 1976., 4045., 4174., 4303., 4432., 4561., 4690., 4819., 4948., 2534., 2600., 1574., 1618., 3308., 3398., 3488., 3578., 3668., 3758., 3848., 3938., 2014., 2060.,  943.,  966., 1973., 2020., 2067., 2114., 2161., 2208., 2255., 2302., 1176., 1200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6845.,  7839.,  9456., 10776., 12429., 14115., 12547., 14305.,  8848., 10232.,  7459.,  8557.,  7460.,  8364., 10304., 11488., 12644., 14140., 13340., 14868., 10336., 11520.,  7740.,  8676.,  5723.,  6393.,  7760.,  8616.,  8379.,  9445.,  7461.,  8519.,  6096.,  6888.,  5461.,  6091.,  3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6845.,  7839.,  9456., 10776., 12429., 14115., 12547., 14305.,  8848., 10232.,  7459.,  8557.,  7460.,  8364., 10304., 11488., 12644., 14140., 13340., 14868., 10336., 11520.,  7740.,  8676.,  5723.,  6393.,  7760.,  8616.,  8379.,  9445.,  7461.,  8519.,  6096.,  6888.,  5461.,  6091.,  3471.,  4029.,  4800.,  5592.,  6503.,  7425.,  7025.,  7939.,  5920.,  6648.,  4073.,  4591.,  5972.,  6620.,  7488.,  8416.,  8180.,  9292.,  7660.,  8804.,  5312.,  6240.,  4876.,  5556.,  5577.,  6459.,  8448.,  9704., 11425., 12967., 12055., 13669.,  9504., 10824.,  7279.,  8265.,  8517.,  9607., 11472., 12920., 12453., 14171., 12987., 14649., 10160., 11416.,  7531.,  8469.,  9473., 10515., 11488., 12872., 11497., 13135., 11519., 13101.,  8768.,  9960.,  6247.,  7137.,  6845.,  7839.,  9456., 10776., 12429., 14115., 12547., 14305.,  8848., 10232.,  7459.,  8557.,  7460.,  8364., 10304., 11488., 12644., 14140., 13340., 14868., 10336., 11520.,  7740.,  8676.,  5723.,  6393.,  7760.,  8616.,  8379.,  9445.,  7461.,  8519.,  6096.,  6888.,  5461.,  6091.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   123.,   137.,    82.,   110.,   312.,   384.,   456.,   528.,   600.,   672.,   744.,   816.,   526.,   570.,   391.,   457.,  1172.,  1328.,  1484.,  1640.,  1796.,  1952.,  2108.,  2264.,  1369.,  1459.,  1092.,  1212.,  2736.,  3008.,  2832.,  3104.,  3376.,  3648.,  3920.,  4192.,  2364.,  2516.,  2100.,  2220.,  4304.,  4576.,  3888.,  4160.,  4432.,  4704.,  4976.,  5248.,  2924.,  3076.,  2483.,  2597.,  4460.,  4712.,  3492.,  3744.,  3996.,  4248.,  4500.,  4752.,  2597.,  2735.,  1994.,  2086.,  2760.,  2960.,  1176.,  1376.,  1576.,  1776.,  1976.,  2176.,  1190.,  1298.,   473.,   527.,  1124.,  1240.,  1356.,  1472.,  1588.,  1704.,  1820.,  1936.,  1039.,  1101.,    53.,   123.,   252.,   400.,   548.,   696.,   844.,   992.,  1140.,  1288.,   683.,   761.,   818.,   974.,  2040.,  2368.,  2696.,  3024.,  3352.,  3680.,  4008.,  4336.,  2286.,  2458.,  2455.,  2713.,  5684.,  6224.,  6764.,  7304.,  7844.,  8384.,  8924.,  9464.,  4969.,  5251.,  5124.,  5500.,  9264., 10048.,  8336.,  9120.,  9904., 10688., 11472., 12256.,  6396.,  6804.,  6644.,  7020., 11856., 12640., 10416., 11200., 11984., 12768., 13552., 14336.,  7468.,  7876.,  6339.,  6645., 10508., 11144.,  8260.,  8896.,  9532., 10168., 10804., 11440.,  5941.,  6271.,  4522.,  4742.,  6024.,  6480.,  2904.,  3360.,  3816.,  4272.,  4728.,  5184.,  2694.,  2930.,  1033.,  1151.,  2372.,  2616.,  2860.,  3104.,  3348.,  3592.,  3836.,  4080.,  2111.,  2237.,   101.,   235.,   476.,   752.,  1028.,  1304.,  1580.,  1856.,  2132.,  2408.,  1243.,  1385.,  1554.,  1838.,  3768.,  4352.,  4936.,  5520.,  6104.,  6688.,  7272.,  7856.,  4046.,  4346.,  4519.,  4969., 10196., 11120., 12044., 12968., 13892., 14816., 15740., 16664.,  8569.,  9043.,  9156.,  9788., 15792., 17088., 13840., 15136., 16432., 17728., 19024., 20320., 10428., 11092., 11188., 11820., 19408., 20704., 16944., 18240., 19536., 20832., 22128., 23424., 12012., 12676., 10195., 10693., 16556., 17576., 13028., 14048., 15068., 16088., 17108., 18128.,  9285.,  9807.,  7050.,  7398.,  9288., 10000.,  4632.,  5344.,  6056.,  6768.,  7480.,  8192.,  4198.,  4562.,  1593.,  1775.,  3620.,  3992.,  4364.,  4736.,  5108.,  5480.,  5852.,  6224.,  3183.,  3373.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638., 1542., 2606., 2584., 4216., 3346., 5226., 3338., 5410., 2840., 4472., 1662., 2918., 2760., 4264., 3616., 5792., 4056., 6648., 4472., 7320., 3616., 5792., 3176., 4936., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2666., 4482., 4392., 7112., 5630., 8806., 5830., 9326., 4648., 7368., 2994., 5130., 3514., 5458., 4392., 7112., 5198., 8502., 5398., 9022., 4648., 7368., 3842., 6106., 2248., 3752., 3616., 5792., 4568., 7160., 4984., 7832., 3616., 5792., 2664., 4424., 2134., 3326., 2584., 4216., 3170., 5178., 3162., 5362., 2840., 4472., 2254., 3638.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,    70.,   174.,   220.,   428.,  1064.,  1608.,  2152.,  2696.,  2920.,  3464.,  1832.,  2376.,   428.,   764.,   826.,  1330.,  3164.,  4364.,  5244.,  6444.,  5468.,  6668.,  3644.,  4844.,  1330.,  2026.,  2104.,  3032.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3032.,  4216.,  3640.,  4568.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4568.,  5752.,  4042.,  4930.,  8252., 10220.,  5916.,  7884.,  5948.,  7916.,  8540., 10508.,  4802.,  5882.,  3004.,  3724.,  4520.,  6088.,  3752.,  5320.,  6888.,  8456.,  7656.,  9224.,  3468.,  4316.,   270.,   694.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,    70.,   174.,   220.,   428.,  1064.,  1608.,  2152.,  2696.,  2920.,  3464.,  1832.,  2376.,   428.,   764.,   826.,  1330.,  3164.,  4364.,  5244.,  6444.,  5468.,  6668.,  3644.,  4844.,  1330.,  2026.,  2104.,  3032.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3032.,  4216.,  3640.,  4568.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4568.,  5752.,  4042.,  4930.,  8252., 10220.,  5916.,  7884.,  5948.,  7916.,  8540., 10508.,  4802.,  5882.,  3004.,  3724.,  4520.,  6088.,  3752.,  5320.,  6888.,  8456.,  7656.,  9224.,  3468.,  4316.,   270.,   694.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,    70.,   174.,   220.,   428.,  1064.,  1608.,  2152.,  2696.,  2920.,  3464.,  1832.,  2376.,   428.,   764.,   826.,  1330.,  3164.,  4364.,  5244.,  6444.,  5468.,  6668.,  3644.,  4844.,  1330.,  2026.,  2104.,  3032.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3032.,  4216.,  3640.,  4568.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4568.,  5752.,  4042.,  4930.,  8252., 10220.,  5916.,  7884.,  5948.,  7916.,  8540., 10508.,  4802.,  5882.,  3004.,  3724.,  4520.,  6088.,  3752.,  5320.,  6888.,  8456.,  7656.,  9224.,  3468.,  4316.,   270.,   694.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 864.,  936., 1008., 1080., 1190., 1292., 1394., 1496., 1635., 1770., 1905., 2040., 1846., 1996., 2146., 2296., 1702., 1828., 1954., 2080., 1371., 1470., 1569., 1668., 1732., 1864., 1996., 2128., 2312., 2496., 2680., 2864., 3096., 3336., 3576., 3816., 3364., 3624., 3884., 4144., 2888., 3104., 3320., 3536., 2320., 2488., 2656., 2824., 2834., 3044., 3254., 3464., 3770., 4060., 4350., 4640., 5007., 5382., 5757., 6132., 5368., 5768., 6168., 6568., 4506., 4836., 5166., 5496., 3603., 3858., 4113., 4368., 4164., 4432., 4700., 4968., 5378., 5724., 6070., 6416., 6693., 7122., 7551., 7980., 6638., 7060., 7482., 7904., 4802., 5124., 5446., 5768., 3669., 3918., 4167., 4416., 4406., 4668., 4930., 5192., 5002., 5340., 5678., 6016., 5499., 5918., 6337., 6756., 5828., 6240., 6652., 7064., 4586., 4900., 5214., 5528., 3863., 4106., 4349., 4592., 3752., 4008., 4264., 4520., 5138., 5468., 5798., 6128., 6225., 6634., 7043., 7452., 5914., 6316., 6718., 7120., 3858., 4164., 4470., 4776., 3161., 3398., 3635., 3872., 2964., 3160., 3356., 3552., 4264., 4512., 4760., 5008., 4984., 5288., 5592., 5896., 5012., 5304., 5596., 5888., 3784., 4000., 4216., 4432., 2800., 2968., 3136., 3304., 2158., 2276., 2394., 2512., 2798., 2940., 3082., 3224., 2565., 2734., 2903., 3072., 1872., 2024., 2176., 2328., 1518., 1620., 1722., 1824., 1361., 1442., 1523., 1604., 2928., 3144., 3360., 3576., 3814., 4108., 4402., 4696., 4979., 5322., 5665., 6008., 5030., 5356., 5682., 6008., 4134., 4388., 4642., 4896., 2859., 3038., 3217., 3396., 3876., 4104., 4332., 4560., 4744., 5056., 5368., 5680., 5272., 5640., 6008., 6376., 4740., 5096., 5452., 5808., 3080., 3360., 3640., 3920., 2736., 2936., 3136., 3336., 3586., 3844., 4102., 4360., 5242., 5596., 5950., 6304., 6463., 6886., 7309., 7732., 6408., 6824., 7240., 7656., 4762., 5092., 5422., 5752., 3523., 3762., 4001., 4240., 3700., 3952., 4204., 4456., 5122., 5468., 5814., 6160., 5269., 5682., 6095., 6508., 5598., 6004., 6410., 6816., 4802., 5124., 5446., 5768., 3589., 3822., 4055., 4288., 3942., 4188., 4434., 4680., 5514., 5852., 6190., 6528., 5995., 6398., 6801., 7204., 5684., 6080., 6476., 6872., 4330., 4644., 4958., 5272., 2759., 2986., 3213., 3440., 3288., 3528., 3768., 4008., 4370., 4700., 5030., 5360., 5729., 6154., 6579., 7004., 6090., 6540., 6990., 7440., 5074., 5444., 5814., 6184., 4041., 4326., 4611., 4896., 4148., 4376., 4604., 4832., 5224., 5536., 5848., 6160., 6360., 6760., 7160., 7560., 6676., 7096., 7516., 7936., 5192., 5536., 5880., 6224., 3920., 4184., 4448., 4712., 2878., 3076., 3274., 3472., 4206., 4476., 4746., 5016., 5365., 5710., 6055., 6400., 5600., 5960., 6320., 6680., 4398., 4692., 4986., 5280., 3681., 3906., 4131., 4356.,  864.,  936., 1008., 1080., 1190., 1292., 1394., 1496., 1635., 1770., 1905., 2040., 1846., 1996., 2146., 2296., 1702., 1828., 1954., 2080., 1371., 1470., 1569., 1668., 1732., 1864., 1996., 2128., 2312., 2496., 2680., 2864., 3096., 3336., 3576., 3816., 3364., 3624., 3884., 4144., 2888., 3104., 3320., 3536., 2320., 2488., 2656., 2824., 2834., 3044., 3254., 3464., 3770., 4060., 4350., 4640., 5007., 5382., 5757., 6132., 5368., 5768., 6168., 6568., 4506., 4836., 5166., 5496., 3603., 3858., 4113., 4368., 4164., 4432., 4700., 4968., 5378., 5724., 6070., 6416., 6693., 7122., 7551., 7980., 6638., 7060., 7482., 7904., 4802., 5124., 5446., 5768., 3669., 3918., 4167., 4416., 4406., 4668., 4930., 5192., 5002., 5340., 5678., 6016., 5499., 5918., 6337., 6756., 5828., 6240., 6652., 7064., 4586., 4900., 5214., 5528., 3863., 4106., 4349., 4592., 3752., 4008., 4264., 4520., 5138., 5468., 5798., 6128., 6225., 6634., 7043., 7452., 5914., 6316., 6718., 7120., 3858., 4164., 4470., 4776., 3161., 3398., 3635., 3872., 2964., 3160., 3356., 3552., 4264., 4512., 4760., 5008., 4984., 5288., 5592., 5896., 5012., 5304., 5596., 5888., 3784., 4000., 4216., 4432., 2800., 2968., 3136., 3304., 2158., 2276., 2394., 2512., 2798., 2940., 3082., 3224., 2565., 2734., 2903., 3072., 1872., 2024., 2176., 2328., 1518., 1620., 1722., 1824., 1361., 1442., 1523., 1604.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    19.,    22.,    25.,    28.,    31.,    34.,    37.,    40.,    43.,    46.,    49.,    52.,    34.,    36.,    38.,    40.,    24.,    28.,    32.,    36.,    86.,    96.,   106.,   116.,   126.,   136.,   146.,   156.,   166.,   176.,   186.,   196.,   206.,   216.,   226.,   236.,   142.,   148.,   154.,   160.,   109.,   118.,   127.,   136.,   317.,   338.,   359.,   380.,   401.,   422.,   443.,   464.,   485.,   506.,   527.,   548.,   569.,   590.,   611.,   632.,   364.,   376.,   388.,   400.,   296.,   312.,   328.,   344.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,  1068.,  1104.,  1140.,  1176.,  1212.,  1248.,  1284.,  1320.,   740.,   760.,   780.,   800.,   616.,   632.,   648.,   664.,  1500.,  1536.,  1572.,  1608.,  1644.,  1680.,  1716.,  1752.,  1788.,  1824.,  1860.,  1896.,  1932.,  1968.,  2004.,  2040.,  1140.,  1160.,  1180.,  1200.,   835.,   850.,   865.,   880.,  1913.,  1946.,  1979.,  2012.,  2045.,  2078.,  2111.,  2144.,  2177.,  2210.,  2243.,  2276.,  2309.,  2342.,  2375.,  2408.,  1306.,  1324.,  1342.,  1360.,   832.,   844.,   856.,   868.,  1854.,  1880.,  1906.,  1932.,  1958.,  1984.,  2010.,  2036.,  2062.,  2088.,  2114.,  2140.,  2166.,  2192.,  2218.,  2244.,  1198.,  1212.,  1226.,  1240.,   567.,   574.,   581.,   588.,  1243.,  1258.,  1273.,  1288.,  1303.,  1318.,  1333.,  1348.,  1363.,  1378.,  1393.,  1408.,  1423.,  1438.,  1453.,  1468.,   776.,   784.,   792.,   800.,     9.,    18.,    27.,    36.,    55.,    74.,    93.,   112.,   131.,   150.,   169.,   188.,   207.,   226.,   245.,   264.,   283.,   302.,   321.,   340.,   170.,   180.,   190.,   200.,   200.,   220.,   240.,   260.,   502.,   544.,   586.,   628.,   670.,   712.,   754.,   796.,   838.,   880.,   922.,   964.,  1006.,  1048.,  1090.,  1132.,   574.,   596.,   618.,   640.,   613.,   646.,   679.,   712.,  1421.,  1490.,  1559.,  1628.,  1697.,  1766.,  1835.,  1904.,  1973.,  2042.,  2111.,  2180.,  2249.,  2318.,  2387.,  2456.,  1252.,  1288.,  1324.,  1360.,  1288.,  1336.,  1384.,  1432.,  2892.,  2992.,  3092.,  3192.,  3292.,  3392.,  3492.,  3592.,  3692.,  3792.,  3892.,  3992.,  4092.,  4192.,  4292.,  4392.,  2244.,  2296.,  2348.,  2400.,  2248.,  2296.,  2344.,  2392.,  4892.,  4992.,  5092.,  5192.,  5292.,  5392.,  5492.,  5592.,  5692.,  5792.,  5892.,  5992.,  6092.,  6192.,  6292.,  6392.,  3284.,  3336.,  3388.,  3440.,  2299.,  2338.,  2377.,  2416.,  4937.,  5018.,  5099.,  5180.,  5261.,  5342.,  5423.,  5504.,  5585.,  5666.,  5747.,  5828.,  5909.,  5990.,  6071.,  6152.,  3154.,  3196.,  3238.,  3280.,  1968.,  1996.,  2024.,  2052.,  4190.,  4248.,  4306.,  4364.,  4422.,  4480.,  4538.,  4596.,  4654.,  4712.,  4770.,  4828.,  4886.,  4944.,  5002.,  5060.,  2590.,  2620.,  2650.,  2680.,  1215.,  1230.,  1245.,  1260.,  2571.,  2602.,  2633.,  2664.,  2695.,  2726.,  2757.,  2788.,  2819.,  2850.,  2881.,  2912.,  2943.,  2974.,  3005.,  3036.,  1552.,  1568.,  1584.,  1600.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   243.,   278.,   313.,   348.,   383.,   418.,   453.,   488.,   523.,   558.,   593.,   628.,   306.,   324.,   342.,   360.,   376.,   412.,   448.,   484.,   918.,   992.,  1066.,  1140.,  1214.,  1288.,  1362.,  1436.,  1510.,  1584.,  1658.,  1732.,  1806.,  1880.,  1954.,  2028.,  1006.,  1044.,  1082.,  1120.,  1117.,  1174.,  1231.,  1288.,  2525.,  2642.,  2759.,  2876.,  2993.,  3110.,  3227.,  3344.,  3461.,  3578.,  3695.,  3812.,  3929.,  4046.,  4163.,  4280.,  2140.,  2200.,  2260.,  2320.,  2280.,  2360.,  2440.,  2520.,  5004.,  5168.,  5332.,  5496.,  5660.,  5824.,  5988.,  6152.,  6316.,  6480.,  6644.,  6808.,  6972.,  7136.,  7300.,  7464.,  3748.,  3832.,  3916.,  4000.,  3880.,  3960.,  4040.,  4120.,  8284.,  8448.,  8612.,  8776.,  8940.,  9104.,  9268.,  9432.,  9596.,  9760.,  9924., 10088., 10252., 10416., 10580., 10744.,  5428.,  5512.,  5596.,  5680.,  3763.,  3826.,  3889.,  3952.,  7961.,  8090.,  8219.,  8348.,  8477.,  8606.,  8735.,  8864.,  8993.,  9122.,  9251.,  9380.,  9509.,  9638.,  9767.,  9896.,  5002.,  5068.,  5134.,  5200.,  3104.,  3148.,  3192.,  3236.,  6526.,  6616.,  6706.,  6796.,  6886.,  6976.,  7066.,  7156.,  7246.,  7336.,  7426.,  7516.,  7606.,  7696.,  7786.,  7876.,  3982.,  4028.,  4074.,  4120.,  1863.,  1886.,  1909.,  1932.,  3899.,  3946.,  3993.,  4040.,  4087.,  4134.,  4181.,  4228.,  4275.,  4322.,  4369.,  4416.,  4463.,  4510.,  4557.,  4604.,  2328.,  2352.,  2376.,  2400.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  6025.,  7019.,  8013.,  9007.,  7736.,  9056., 10376., 11696., 10909., 12595., 14281., 15967., 11603., 13361., 15119., 16877.,  9384., 10768., 12152., 13536.,  8167.,  9265., 10363., 11461.,  5276.,  6180.,  7084.,  7988.,  8000.,  9184., 10368., 11552., 10556., 12052., 13548., 15044., 10516., 12044., 13572., 15100.,  8000.,  9184., 10368., 11552.,  6004.,  6940.,  7876.,  8812.,  4699.,  5369.,  6039.,  6709.,  6776.,  7632.,  8488.,  9344.,  7631.,  8697.,  9763., 10829.,  6825.,  7883.,  8941.,  9999.,  5256.,  6048.,  6840.,  7632.,  3949.,  4579.,  5209.,  5839.,  3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  6025.,  7019.,  8013.,  9007.,  7736.,  9056., 10376., 11696., 10909., 12595., 14281., 15967., 11603., 13361., 15119., 16877.,  9384., 10768., 12152., 13536.,  8167.,  9265., 10363., 11461.,  5276.,  6180.,  7084.,  7988.,  8000.,  9184., 10368., 11552., 10556., 12052., 13548., 15044., 10516., 12044., 13572., 15100.,  8000.,  9184., 10368., 11552.,  6004.,  6940.,  7876.,  8812.,  4699.,  5369.,  6039.,  6709.,  6776.,  7632.,  8488.,  9344.,  7631.,  8697.,  9763., 10829.,  6825.,  7883.,  8941.,  9999.,  5256.,  6048.,  6840.,  7632.,  3949.,  4579.,  5209.,  5839.,  3447.,  4005.,  4563.,  5121.,  5320.,  6112.,  6904.,  7696.,  6259.,  7181.,  8103.,  9025.,  6413.,  7327.,  8241.,  9155.,  5080.,  5808.,  6536.,  7264.,  2409.,  2927.,  3445.,  3963.,  4956.,  5604.,  6252.,  6900.,  6272.,  7200.,  8128.,  9056.,  7580.,  8692.,  9804., 10916.,  7540.,  8684.,  9828., 10972.,  5248.,  6176.,  7104.,  8032.,  4148.,  4828.,  5508.,  6188.,  5621.,  6503.,  7385.,  8267.,  8328.,  9584., 10840., 12096., 10033., 11575., 13117., 14659.,  9703., 11317., 12931., 14545.,  8952., 10272., 11592., 12912.,  7635.,  8621.,  9607., 10593.,  7249.,  8339.,  9429., 10519., 10648., 12096., 13544., 14992., 10933., 12651., 14369., 16087., 10507., 12169., 13831., 15493.,  9544., 10800., 12056., 13312.,  6895.,  7833.,  8771.,  9709.,  7149.,  8191.,  9233., 10275.,  9192., 10576., 11960., 13344., 10105., 11743., 13381., 15019., 10703., 12285., 13867., 15449.,  8088.,  9280., 10472., 11664.,  5131.,  6021.,  6911.,  7801.,  6025.,  7019.,  8013.,  9007.,  7736.,  9056., 10376., 11696., 10909., 12595., 14281., 15967., 11603., 13361., 15119., 16877.,  9384., 10768., 12152., 13536.,  8167.,  9265., 10363., 11461.,  5276.,  6180.,  7084.,  7988.,  8000.,  9184., 10368., 11552., 10556., 12052., 13548., 15044., 10516., 12044., 13572., 15100.,  8000.,  9184., 10368., 11552.,  6004.,  6940.,  7876.,  8812.,  4699.,  5369.,  6039.,  6709.,  6776.,  7632.,  8488.,  9344.,  7631.,  8697.,  9763., 10829.,  6825.,  7883.,  8941.,  9999.,  5256.,  6048.,  6840.,  7632.,  3949.,  4579.,  5209.,  5839.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,   277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,   856.,   928.,  1000.,  1072.,   952.,  1024.,  1096.,  1168.,   792.,   864.,   936.,  1008.,   570.,   614.,   658.,   702.,   539.,   605.,   671.,   737.,  1584.,  1740.,  1896.,  2052.,  2208.,  2364.,  2520.,  2676.,  2128.,  2284.,  2440.,  2596.,  1792.,  1948.,  2104.,  2260.,  1261.,  1351.,  1441.,  1531.,  1196.,  1316.,  1436.,  1556.,  3152.,  3424.,  3696.,  3968.,  3792.,  4064.,  4336.,  4608.,  3664.,  3936.,  4208.,  4480.,  3280.,  3552.,  3824.,  4096.,  2180.,  2332.,  2484.,  2636.,  2188.,  2308.,  2428.,  2548.,  4752.,  5024.,  5296.,  5568.,  4880.,  5152.,  5424.,  5696.,  4240.,  4512.,  4784.,  5056.,  3152.,  3424.,  3696.,  3968.,  1828.,  1980.,  2132.,  2284.,  1935.,  2049.,  2163.,  2277.,  3544.,  3796.,  4048.,  4300.,  3080.,  3332.,  3584.,  3836.,  4088.,  4340.,  4592.,  4844.,  4392.,  4644.,  4896.,  5148.,  2145.,  2283.,  2421.,  2559.,  2190.,  2282.,  2374.,  2466.,  3384.,  3584.,  3784.,  3984.,  2200.,  2400.,  2600.,  2800.,  3000.,  3200.,  3400.,  3600.,  2584.,  2784.,  2984.,  3184.,   826.,   934.,  1042.,  1150.,   905.,   959.,  1013.,  1067.,  2160.,  2276.,  2392.,  2508.,  2624.,  2740.,  2856.,  2972.,  3088.,  3204.,  3320.,  3436.,  1824.,  1940.,  2056.,  2172.,    47.,   109.,   171.,   233.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,  1280.,  1428.,  1576.,  1724.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541.,  1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488.,  4816.,  5144.,  5472.,  5800.,  6128.,  4216.,  4544.,  4872.,  5200.,  3032.,  3360.,  3688.,  4016.,  1946.,  2118.,  2290.,  2462.,  2475.,  2733.,  2991.,  3249.,  6224.,  6764.,  7304.,  7844.,  8384.,  8924.,  9464., 10004.,  7792.,  8332.,  8872.,  9412.,  6944.,  7484.,  8024.,  8564.,  4221.,  4503.,  4785.,  5067.,  4972.,  5348.,  5724.,  6100.,  9680., 10464., 11248., 12032., 10320., 11104., 11888., 12672., 10192., 10976., 11760., 12544.,  9808., 10592., 11376., 12160.,  5956.,  6364.,  6772.,  7180.,  6988.,  7364.,  7740.,  8116., 13328., 14112., 14896., 15680., 13456., 14240., 15024., 15808., 12816., 13600., 14384., 15168.,  9680., 10464., 11248., 12032.,  4580.,  4988.,  5396.,  5804.,  5407.,  5713.,  6019.,  6325.,  9208.,  9844., 10480., 11116.,  8232.,  8868.,  9504., 10140., 10776., 11412., 12048., 12684., 10568., 11204., 11840., 12476.,  4593.,  4923.,  5253.,  5583.,  5102.,  5322.,  5542.,  5762.,  7672.,  8128.,  8584.,  9040.,  5464.,  5920.,  6376.,  6832.,  7288.,  7744.,  8200.,  8656.,  5848.,  6304.,  6760.,  7216.,  1690.,  1926.,  2162.,  2398.,  1977.,  2095.,  2213.,  2331.,  4560.,  4804.,  5048.,  5292.,  5536.,  5780.,  6024.,  6268.,  6512.,  6756.,  7000.,  7244.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.,   101.,   235.,   369.,   503.,   744.,  1020.,  1296.,  1572.,  1848.,  2124.,  2400.,  2676.,  2952.,  3228.,  3504.,  3780.,  4056.,  4332.,  4608.,  4884.,  2379.,  2521.,  2663.,  2805.,  2894.,  3178.,  3462.,  3746.,  7096.,  7680.,  8264.,  8848.,  9432., 10016., 10600., 11184.,  7480.,  8064.,  8648.,  9232.,  5272.,  5856.,  6440.,  7024.,  3322.,  3622.,  3922.,  4222.,  4411.,  4861.,  5311.,  5761., 10864., 11788., 12712., 13636., 14560., 15484., 16408., 17332., 13456., 14380., 15304., 16228., 12096., 13020., 13944., 14868.,  7181.,  7655.,  8129.,  8603.,  8748.,  9380., 10012., 10644., 16208., 17504., 18800., 20096., 16848., 18144., 19440., 20736., 16720., 18016., 19312., 20608., 16336., 17632., 18928., 20224.,  9732., 10396., 11060., 11724., 11788., 12420., 13052., 13684., 21904., 23200., 24496., 25792., 22032., 23328., 24624., 25920., 21392., 22688., 23984., 25280., 16208., 17504., 18800., 20096.,  7332.,  7996.,  8660.,  9324.,  8879.,  9377.,  9875., 10373., 14872., 15892., 16912., 17932., 13384., 14404., 15424., 16444., 17464., 18484., 19504., 20524., 16744., 17764., 18784., 19804.,  7041.,  7563.,  8085.,  8607.,  8014.,  8362.,  8710.,  9058., 11960., 12672., 13384., 14096.,  8728.,  9440., 10152., 10864., 11576., 12288., 13000., 13712.,  9112.,  9824., 10536., 11248.,  2554.,  2918.,  3282.,  3646.,  3049.,  3231.,  3413.,  3595.,  6960.,  7332.,  7704.,  8076.,  8448.,  8820.,  9192.,  9564.,  9936., 10308., 10680., 11052.,  5600.,  5972.,  6344.,  6716.,   143.,   333.,   523.,   713.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.,   710.,  1774.,  2838.,  3902.,  1080.,  2712.,  4344.,  5976.,  1250.,  3130.,  5010.,  6890.,  1370.,  3442.,  5514.,  7586.,  1080.,  2712.,  4344.,  5976.,   830.,  2086.,  3342.,  4598.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1210.,  3026.,  4842.,  6658.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1490.,  3754.,  6018.,  8282.,  1000.,  2504.,  4008.,  5512.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1160.,  2920.,  4680.,  6440.,   790.,  1982.,  3174.,  4366.,  1080.,  2712.,  4344.,  5976.,  1330.,  3338.,  5346.,  7354.,  1450.,  3650.,  5850.,  8050.,  1080.,  2712.,  4344.,  5976.,   910.,  2294.,  3678.,  5062.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  351.,   560.,   820.,   940.,  1060.,   980.,   837.,   892.,  1360.,  1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,  4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,  4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5600.,  7950., 10550., 10875., 11200.,  9510.,  7550.,  6514.,  9120., 11950., 12260., 12570., 10544.,  8278.,  6516.,  9050., 11770., 12040., 12310., 10250.,  7992.,  3879.,  5600.,  7540.,  7660.,  7780.,  6692.,  5373.,  7276., 10320., 13680., 13890., 14100., 11952.,  9472., 11900., 16700., 21925., 22250., 22575., 18960., 14900., 13160., 18450., 24200., 24525., 24850., 20850., 16370., 14420., 20200., 26475., 26800., 27125., 22740., 17840., 15680., 21950., 28750., 29075., 29400., 24630., 19310., 16258., 22560., 29310., 29620., 29930., 24880., 19366., 15084., 20810., 26890., 27160., 27430., 22682., 17568.,  7279., 10256., 13492., 13100., 12580., 10612.,  8373., 12124., 16336., 20832., 19890., 18820., 15664., 12208., 17116., 22636., 28477., 27010., 25415., 21024., 16292., 13128., 16706., 20512., 18405., 16170., 13442., 10466.,  7220.,  8216.,  9347.,  6600.,  3725.,  3300.,  2720.,  2720.,  3950.,  5350.,  5675.,  6000.,  5190.,  4190.,  3730.,  5280.,  6990.,  7300.,  7610.,  6448.,  5110.,  4068.,  5690.,  7450.,  7720.,  7990.,  6698.,  5256.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,   89.,  110.,   96.,   60.,   42.,  114.,  219.,  264.,  309.,  252.,  150.,  112.,  280.,  508.,  586.,  664.,  520.,  300.,  222.,  520.,  898.,  976., 1054.,  800.,  450.,  306.,  681., 1128., 1200., 1272.,  933.,  510.,  307.,  668., 1085., 1142., 1199.,  864.,  465.,  210.,  451.,  724.,  757.,  790.,  563.,  300.,   13.,   40.,   82.,  124.,  166.,  130.,   75.,   94.,  224.,  392.,  485.,  578.,  432.,  240.,  258.,  582.,  975., 1128., 1281.,  936.,  510.,  520., 1144., 1876., 2098., 2320., 1672.,  900.,  870., 1864., 2986., 3208., 3430., 2432., 1290.,  882., 1869., 2964., 3144., 3324., 2337., 1230.,  751., 1580., 2489., 2618., 2747., 1920., 1005.,  462.,  967., 1516., 1585., 1654., 1151.,  600.,   25.,   76.,  154.,  232.,  310.,  238.,  135.,  178.,  416.,  716.,  881., 1046.,  768.,  420.,  474., 1050., 1731., 1992., 2253., 1620.,  870.,  928., 2008., 3244., 3610., 3976., 2824., 1500., 1518., 3208., 5074., 5440., 5806., 4064., 2130., 1458., 3057., 4800., 5088., 5376., 3741., 1950., 1195., 2492., 3893., 4094., 4295., 2976., 1545.,  714., 1483., 2308., 2413., 2518., 1739.,  900.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7747., 10812., 13049., 11951., 10501.,  7260.,  4815.,  6353.,  8980., 10163., 11465., 11903., 10068.,  7853.,  6420.,  9328., 12124., 12676., 11724.,  8464.,  5828.,  3231.,  4460.,  6013.,  6991.,  5953.,  5452.,  4627.,  4145.,  5908.,  8003.,  7685.,  8615.,  7796.,  6549.,  5212.,  6928.,  8980.,  7868.,  8516.,  5808.,  5132.,  6551.,  9100., 12085., 12011., 12289.,  9516.,  8131.,  7781.,  9636., 11951., 10501.,  9915.,  6116.,  5217.,  7123.,  8028., 11465., 11903., 12085.,  9692.,  7615.,  7585., 10484., 13891., 13049., 11951.,  8148.,  6173.,  5524.,  7792., 10556.,  9828., 11020.,  9680.,  7940.,  5423.,  7852., 10669., 11039., 11281.,  8620.,  6595.,  2433.,  3764.,  5363.,  5813.,  6135.,  5684.,  4869.,  4892.,  6736.,  8916.,  8924.,  8804.,  7344.,  6284.,  6311.,  8204., 10501.,  9915.,  9073.,  6732.,  5491.,  5877.,  8996., 11903., 12085., 12011.,  9668.,  7249.,  7747., 10812., 13049., 11951., 10501.,  7260.,  4815.,  6353.,  8980., 10163., 11465., 11903., 10068.,  7853.,  6420.,  9328., 12124., 12676., 11724.,  8464.,  5828.,  3231.,  4460.,  6013.,  6991.,  5953.,  5452.,  4627.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  150.,  105.,   58.,  204.,  454.,  610.,  766.,  684.,  434.,  279.,  786., 1545., 1887., 2229., 1842., 1107.,  788., 1912., 3372., 3620., 4220., 3288., 1892., 1532., 3048., 4932., 4796., 5396., 4104., 2316., 1833., 3214., 4903., 4341., 4899., 3678., 2053., 1486., 2020., 2738., 1678., 2122., 1668.,  966.,  371.,  858., 1469., 1727., 1985., 1482.,  823.,   77.,  262.,  563.,  893., 1223.,  966.,  561.,  682., 1548., 2582., 3058., 3534., 2188., 1218., 1839., 3330., 5105., 5671., 6237., 3714., 2059., 3124., 3800., 4812., 3652., 4380., 2136., 1316., 2972., 2504., 4452., 4956., 5684., 3976., 2252., 1441., 2366., 3503., 3293., 3691., 2030., 1181.,  830., 1156., 1602.,  862., 1114.,  932.,  566.,  219.,  522.,  917., 1079., 1241.,  954.,  543.,   53.,  182.,  395.,  629.,  863.,  694.,  409.,  474., 1164., 2086., 2626., 3166., 2412., 1362., 1383., 3186., 5337., 6127., 6917., 4914., 2371., 2804., 5048., 7020., 6500., 7356., 5048., 2148., 3164., 5416., 6788., 5884., 6740., 4456., 1548., 2457., 3502., 2903., 3429., 4051., 2974., 1429.,  782., 1636., 2066., 1902., 2218., 1316.,  166.,   67.,  186.,  365.,  431.,  497.,  426.,  263.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598., 21016., 13370., 14920., 22496., 27192., 25944., 26424., 19616., 14344.,  9286., 14504., 19386., 21138., 18474., 15848., 11254.,  7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598., 21016., 13370., 14920., 22496., 27192., 25944., 26424., 19616., 14344.,  9286., 14504., 19386., 21138., 18474., 15848., 11254.,  7550.,  7176., 11458., 12506., 13874., 13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598., 21016., 13370., 14920., 22496., 27192., 25944., 26424., 19616., 14344.,  9286., 14504., 19386., 21138., 18474., 15848., 11254.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4164.,  4532.,  2968.,  1948.,  1690.,  4644.,  8734.,  9030.,  8814.,  4772.,  1898.,  3384.,  8304., 11944.,  9864.,  8616.,  7280.,  4152.,  3672.,  7600., 12040., 10984., 11976.,  7280.,  2072.,  4594.,  7508.,  7910.,  9934., 10422.,  7252.,  1922.,  2764.,  6008.,  7812.,  7412.,  5476.,  1848.,   876.,   486.,  1372.,  2722.,  3226.,  2898.,  1884.,   150.,   190.,   716.,  1642.,  2722.,  3802.,  3212.,  1966.,  1980.,  4824.,  8468.,  7812.,  6644.,  1432.,  1180.,  3642.,  5924.,  9406.,  7910.,  9998.,  7076.,  4362.,  4728.,  8112., 13096., 12040., 13864.,  7600.,  4984.,  7576.,  9968., 18312., 18280., 16200.,  8112.,  3416.,  4498.,  7252., 11142., 11374., 10070.,  8020.,  4386.,  3532.,  5496.,  8388.,  6452.,  7076.,  5240.,  1964.,  1670.,  3996.,  7042.,  8314.,  6706.,  3996.,   310.,    30.,   140.,   394.,   706.,  1018.,  1100.,   782.,   380.,  1432.,  3284.,  4164.,  4532.,  2968.,  1948.,  1690.,  4644.,  8734.,  9030.,  8814.,  4772.,  1898.,  3384.,  8304., 11944.,  9864.,  8616.,  7280.,  4152.,  3672.,  7600., 12040., 10984., 11976.,  7280.,  2072.,  4594.,  7508.,  7910.,  9934., 10422.,  7252.,  1922.,  2764.,  6008.,  7812.,  7412.,  5476.,  1848.,   876.,   486.,  1372.,  2722.,  3226.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  621.,   702.,  1006.,  1120.,  1490.,  1640.,  1715.,  1880.,  1940.,  2120.,  1810.,  1960.,  1557.,  1674.,  1634.,  1784.,  2512.,  2720.,  3570.,  3840.,  3970.,  4260.,  4370.,  4680.,  3936.,  4192.,  3290.,  3488.,  3400.,  3640.,  5070.,  5400.,  7025.,  7450.,  7650.,  8100.,  8275.,  8750.,  7290.,  7680.,  5980.,  6280.,  5815.,  6160.,  8430.,  8900., 11400., 12000., 12025., 12650., 12650., 13300., 10930., 11460.,  8815.,  9220.,  8230.,  8680., 11790., 12400., 15775., 16550., 16400., 17200., 17025., 17850., 14570., 15240., 11650., 12160., 10645., 11200., 15150., 15900., 20150., 21100., 20775., 21750., 21400., 22400., 18210., 19020., 14485., 15100., 12542., 13028., 17584., 18240., 23070., 23900., 23670., 24520., 24270., 25140., 20384., 21088., 16022., 16556., 12636., 13032., 17566., 18100., 22865., 23540., 23390., 24080., 23915., 24620., 19930., 20500., 15552., 15984.,  5061.,  5326.,  6894.,  7232.,  8906.,  9320.,  7915.,  8280.,  8140.,  8520.,  6930.,  7240.,  5517.,  5754.,  7842.,  8152., 10512., 10912., 13426., 13920., 11970., 12420., 12370., 12840., 10464., 10848.,  8282.,  8576., 11136., 11512., 14862., 15352., 18921., 19530., 17050., 17620., 17675., 18270., 14906., 15392., 11764., 12136.,  5935.,  6224.,  7598.,  7972.,  9536., 10000.,  7025.,  7450.,  7650.,  8100.,  6770.,  7140.,  5575.,  5860.,  5470.,  5800.,  7950.,  8400., 10775., 11350., 11400., 12000., 12025., 12650., 10410., 10920.,  8410.,  8800.,  7885.,  8320., 11310., 11900., 15150., 15900., 15775., 16550., 16400., 17200., 14050., 14700., 11245., 11740.,  9854., 10244., 13872., 14400., 18270., 18940., 18870., 19560., 19470., 20180., 16416., 16992., 12950., 13388., 10260., 10584., 14302., 14740., 18665., 19220., 19190., 19760., 19715., 20300., 16474., 16948., 12888., 13248.,  6173.,  6622.,  8814.,  9376., 11714., 12392., 11491., 12120., 11140., 11720.,  9490.,  9960.,  7557.,  7914., 10722., 11192., 14544., 15136., 18674., 19392., 17986., 18660., 17170., 17800., 14432., 14944., 11354., 11744., 15544., 16056., 20686., 21336., 26209., 27002., 25106., 25860., 23875., 24590., 19962., 20544., 15628., 16072., 12903., 13328., 16622., 17156., 20664., 21312., 18921., 19530., 17050., 17620., 14386., 14852., 11359., 11716.,  8342.,  8680.,  9998., 10416., 11919., 12422.,  9536., 10000.,  7025.,  7450.,  6250.,  6600.,  5170.,  5440.,  5125.,  5440.,  7470.,  7900., 10150., 10700., 10775., 11350., 11400., 12000.,  9890., 10380.,  8005.,  8380.,  7166.,  7460., 10160., 10560., 13470., 13980., 14070., 14600., 14670., 15220., 12448., 12896.,  9878., 10220.,  7884.,  8136., 11038., 11380., 14465., 14900., 14990., 15440., 15515., 15980., 13018., 13396., 10224., 10512.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    26.,    32.,    38.,    44.,    39.,    44.,    27.,    30.,    15.,    20.,    52.,    64.,   115.,   136.,   157.,   178.,   199.,   220.,   176.,   192.,   111.,   120.,    72.,    84.,   201.,   228.,   393.,   438.,   483.,   528.,   573.,   618.,   471.,   504.,   282.,   300.,   202.,   224.,   512.,   560.,   938.,  1016.,  1094.,  1172.,  1250.,  1328.,   984.,  1040.,   570.,   600.,   422.,   444.,   992.,  1040.,  1718.,  1796.,  1874.,  1952.,  2030.,  2108.,  1544.,  1600.,   870.,   900.,   591.,   612.,  1317.,  1362.,  2184.,  2256.,  2328.,  2400.,  2472.,  2544.,  1815.,  1866.,   993.,  1020.,   597.,   614.,  1300.,  1336.,  2113.,  2170.,  2227.,  2284.,  2341.,  2398.,  1688.,  1728.,   909.,   930.,   410.,   420.,   881.,   902.,  1415.,  1448.,  1481.,  1514.,  1547.,  1580.,  1103.,  1126.,   588.,   600.,    13.,    26.,    53.,    80.,   122.,   164.,   206.,   248.,   290.,   332.,   231.,   260.,   135.,   150.,   159.,   188.,   388.,   448.,   691.,   784.,   877.,   970.,  1063.,  1156.,   800.,   864.,   447.,   480.,   468.,   516.,  1065.,  1164.,  1797.,  1950.,  2103.,  2256.,  2409.,  2562.,  1767.,  1872.,   966.,  1020.,   970.,  1040.,  2144.,  2288.,  3530.,  3752.,  3974.,  4196.,  4418.,  4640.,  3192.,  3344.,  1722.,  1800.,  1670.,  1740.,  3584.,  3728.,  5750.,  5972.,  6194.,  6416.,  6638.,  6860.,  4712.,  4864.,  2502.,  2580.,  1707.,  1764.,  3621.,  3738.,  5748.,  5928.,  6108.,  6288.,  6468.,  6648.,  4551.,  4674.,  2397.,  2460.,  1461.,  1502.,  3076.,  3160.,  4849.,  4978.,  5107.,  5236.,  5365.,  5494.,  3752.,  3840.,  1965.,  2010.,   902.,   924.,  1889.,  1934.,  2963.,  3032.,  3101.,  3170.,  3239.,  3308.,  2255.,  2302.,  1176.,  1200.,    25.,    50.,   101.,   152.,   230.,   308.,   386.,   464.,   542.,   620.,   423.,   476.,   243.,   270.,   303.,   356.,   724.,   832.,  1267.,  1432.,  1597.,  1762.,  1927.,  2092.,  1424.,  1536.,   783.,   840.,   864.,   948.,  1929.,  2100.,  3201.,  3462.,  3723.,  3984.,  4245.,  4506.,  3063.,  3240.,  1650.,  1740.,  1738.,  1856.,  3776.,  4016.,  6122.,  6488.,  6854.,  7220.,  7586.,  7952.,  5400.,  5648.,  2874.,  3000.,  2918.,  3036.,  6176.,  6416.,  9782., 10148., 10514., 10880., 11246., 11612.,  7880.,  8128.,  4134.,  4260.,  2823.,  2916.,  5925.,  6114.,  9312.,  9600.,  9888., 10176., 10464., 10752.,  7287.,  7482.,  3801.,  3900.,  2325.,  2390.,  4852.,  4984.,  7585.,  7786.,  7987.,  8188.,  8389.,  8590.,  5816.,  5952.,  3021.,  3090.,  1394.,  1428.,  2897.,  2966.,  4511.,  4616.,  4721.,  4826.,  4931.,  5036.,  3407.,  3478.,  1764.,  1800.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  8361.,  9499., 11584., 13096., 13121., 14919., 11863., 13605., 12045., 13603.,  8824., 10048.,  5849.,  6699.,  8271.,  9225., 10856., 12208., 11675., 13337., 13073., 14807., 12839., 14517., 10144., 11464.,  6495.,  7417.,  6992.,  7784., 10448., 11568., 11864., 13216., 11792., 13176., 10856., 12144.,  7056.,  8048.,  5456.,  6120.,  3423.,  3885.,  4992.,  5656.,  6583.,  7473.,  7553.,  8563.,  6635.,  7637.,  6216.,  7040.,  5199.,  5821.,  4117.,  4683.,  3976.,  4736.,  6273.,  7251.,  6795.,  7765.,  7669.,  8759.,  7280.,  8200.,  6181.,  6907.,  6016.,  6936.,  7952.,  9072., 10280., 11632.,  9152., 10408.,  9400., 10688.,  6064.,  7056.,  4960.,  5752.,  9101., 10159., 10864., 12184., 12093., 13715., 10835., 12401., 12233., 13871., 10472., 11760.,  8765.,  9791.,  7923.,  9053., 10584., 12000., 11863., 13605., 12045., 13603., 11811., 13313.,  7760.,  8888.,  5891.,  6733.,  9209., 10283., 10208., 11592., 13073., 14807., 12839., 14517., 12093., 13715.,  8568.,  9792.,  7305.,  8219.,  8543.,  9689., 11720., 13200., 13867., 15721., 13121., 14919., 11863., 13605.,  9376., 10696.,  7183.,  8169.,  7248.,  8040.,  9424., 10544., 11704., 13184., 11120., 12632., 12328., 13872., 10320., 11568.,  7440.,  8360.,  5615.,  6269.,  8512.,  9432., 10535., 11745., 10385., 11587.,  9979., 11173.,  7336.,  8288.,  4991.,  5677.,  3813.,  4315.,  4904.,  5536.,  6257.,  7043.,  6267.,  7045.,  6021.,  6791.,  5296.,  5960.,  3989.,  4523.,  5568.,  6232.,  5712.,  6576.,  6248.,  7344.,  7264.,  8392.,  8024.,  9184.,  7088.,  8080.,  6240.,  7032.,  6621.,  7615.,  9072., 10392., 12045., 13603., 11811., 13313., 11065., 12511.,  8072.,  9232.,  5677.,  6511.,  8259.,  9325., 11352., 12768., 12839., 14517., 12093., 13715., 10835., 12401.,  9648., 10904.,  7859.,  8765.,  8361.,  9499., 11584., 13096., 13121., 14919., 11863., 13605., 12045., 13603.,  8824., 10048.,  5849.,  6699.,  8271.,  9225., 10856., 12208., 11675., 13337., 13073., 14807., 12839., 14517., 10144., 11464.,  6495.,  7417.,  6992.,  7784., 10448., 11568., 11864., 13216., 11792., 13176., 10856., 12144.,  7056.,  8048.,  5456.,  6120.,  3423.,  3885.,  4992.,  5656.,  6583.,  7473.,  7553.,  8563.,  6635.,  7637.,  6216.,  7040.,  5199.,  5821.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,  127.,  169.,  211.,  253.,  295.,  272.,  308.,  193.,  215.,   88.,  124.,  340.,  428.,  788.,  944., 1004., 1160., 1092., 1248.,  700.,  820.,  464.,  532.,  393.,  483., 1096., 1300., 2157., 2499., 2361., 2703., 2437., 2779., 1572., 1824., 1021., 1159.,  872., 1040., 2232., 2600., 4112., 4712., 4096., 4696., 4304., 4904., 2792., 3224., 1752., 1984., 1592., 1760., 3352., 3720., 5696., 6296., 4912., 5512., 4640., 5240., 2664., 3096., 1480., 1712., 1431., 1593., 2548., 2896., 4135., 4693., 4131., 4689., 4767., 5325., 3568., 3964., 1707., 1917., 1624., 1756., 2452., 2732., 3636., 4080., 3020., 3464., 3044., 3488., 2108., 2420.,  688.,  852.,  683.,  761., 1592., 1756., 2743., 3001., 3259., 3517., 2527., 2785., 1452., 1632.,   71.,  165.,   77.,  179.,  364.,  576.,  877., 1207., 1537., 1867., 2197., 2527., 1760., 1988., 1033., 1151., 1192., 1420., 2836., 3180., 4804., 5280., 4124., 4600., 3316., 3792.,  540.,  788.,  448.,  580., 1857., 2107., 2968., 3364., 4501., 5067., 3617., 4183., 4653., 5219., 3220., 3536., 1877., 2047., 2376., 2672., 3352., 3848., 4848., 5576., 4064., 4792., 5040., 5768., 2536., 2968., 1624., 1856., 3352., 3648., 3704., 4200., 6688., 7416., 7184., 7912., 6144., 6872., 2920., 3352.,  840., 1072., 1647., 1841., 2436., 2720., 3503., 3901., 3691., 4089., 2471., 2869., 1952., 2156., 1059., 1173.,  872.,  940., 1332., 1484., 2020., 2272., 1532., 1784., 1684., 1936., 1244., 1428.,  448.,  548.,  403.,  449.,  968., 1068., 1711., 1873., 2035., 2197., 1623., 1785.,  956., 1072.,   47.,  109.,   53.,  123.,  252.,  400.,  613.,  847., 1081., 1315., 1549., 1783., 1264., 1428.,  753.,  839.,  824.,  988., 2068., 2412., 3764., 4304., 3724., 4264., 3556., 4096., 1916., 2292., 1200., 1396., 1433., 1715., 3560., 4148., 6333., 7123., 6409., 7199., 6357., 7147., 3428., 3936., 1453., 1655., 2760., 3056., 5240., 5864., 7120., 7976., 5568., 6424., 5264., 6120., 4168., 4728., 2264., 2496., 2712., 3008., 4824., 5448., 7168., 8024., 6896., 7752., 7136., 7992., 4296., 4856.,  968., 1200., 2631., 2857., 4052., 4528., 4183., 4805., 5331., 5953., 5071., 5693., 3184., 3580.,  507.,  653., 1240., 1372., 2708., 2988., 3412., 3728., 3564., 3880., 2308., 2624.,  476.,  660.,  208.,  244.,  123.,  137.,  344.,  380.,  679.,  745.,  811.,  877.,  719.,  785.,  460.,  512.,   23.,   53.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1702., 3022., 3096., 4728., 2994., 5130., 3850., 5922., 2658., 4666., 3096., 4728., 1702., 3022., 2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1702., 3022., 3096., 4728., 2994., 5130., 3850., 5922., 2658., 4666., 3096., 4728., 1702., 3022., 2094., 3222., 2328., 3960., 3850., 5922., 2658., 4666., 3514., 5458., 2328., 3960., 2094., 3222., 2328., 3960., 4128., 6304., 3880., 6600., 5160., 7880., 3880., 6600., 4128., 6304., 2328., 3960., 3514., 5458., 3880., 6600., 6222., 9526., 4726., 8094., 6302., 9734., 3880., 6600., 3514., 5458., 2658., 4666., 5160., 7880., 4806., 8302., 6222., 9526., 4726., 8094., 5160., 7880., 2658., 4666., 3850., 5922., 3880., 6600., 6302., 9734., 4806., 8302., 6222., 9526., 3880., 6600., 3850., 5922., 2994., 5130., 5160., 7880., 4726., 8094., 6302., 9734., 4806., 8302., 5160., 7880., 2994., 5130., 3096., 4728., 3104., 5280., 5160., 7880., 3880., 6600., 5160., 7880., 3104., 5280., 3096., 4728., 1702., 3022., 3096., 4728., 2994., 5130., 3850., 5922., 2658., 4666., 3096., 4728., 1702., 3022.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.,   260.,   532.,  1272.,  1944.,  3292.,  4492.,  5372.,  6572.,  5084.,  6284.,  2968.,  3896.,   676.,  1204.,  1074.,  1770.,  4044.,  5628.,  8654., 10806., 10270., 12422.,  7470.,  9622.,  2524.,  3980.,  1762.,  2330.,  2536.,  3336.,  7280.,  9136., 11352., 14008.,  9560., 12216.,  7256.,  9912.,  6768.,  8624.,  3048.,  3848.,  3816.,  4616.,  8304., 10160.,  9560., 12216.,  7256.,  9912., 10584., 13240.,  7792.,  9648.,  3304.,  4104.,  3450.,  4210.,  5788.,  7500.,  6054.,  8398.,  9078., 11422., 10054., 12398.,  7404.,  8988.,  1578.,  2210.,   964.,  1492.,  2616.,  3800.,  5212.,  6668.,  6268.,  7724.,  5788.,  7244.,  2776.,  3704.,  1572.,  1844.,    70.,   174.,   388.,   660.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  4754.,  5834.,  4546.,  5626.,  3044.,  3828.,   270.,   694.,  1092.,  1876.,  3640.,  4824.,  7196.,  8908.,  8252.,  9964.,  4892.,  6604.,  1944.,  2872.,  1188.,  1716.,  2770.,  3722.,  6604.,  8188.,  9838., 12246.,  7870., 10278.,  7630., 10038.,  5084.,  6540.,  2434.,  3258.,  4904.,  6216.,  8624., 10992., 10968., 14648., 13272., 16952., 15064., 18744.,  9136., 11504.,  4392.,  5704.,  5160.,  6472.,  6576.,  8944., 13272., 16952., 15064., 18744., 14296., 17976.,  7088.,  9456.,  3624.,  4936.,  3098.,  4114.,  7324.,  9036., 10310., 12910.,  9750., 12350.,  7142.,  9742.,  6892.,  8476.,  4298.,  5186.,  2500.,  3028.,  3640.,  4824.,  6044.,  8012.,  6076.,  8044.,  8668., 10636.,  7192.,  8632.,  3428.,  4212.,   230.,   590.,  1220.,  2004.,  3098.,  4370.,  5642.,  6914.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.,   260.,   532.,  1272.,  1944.,  3292.,  4492.,  5372.,  6572.,  5084.,  6284.,  2968.,  3896.,   676.,  1204.,  1074.,  1770.,  4044.,  5628.,  8654., 10806., 10270., 12422.,  7470.,  9622.,  2524.,  3980.,  1762.,  2330.,  2536.,  3336.,  7280.,  9136., 11352., 14008.,  9560., 12216.,  7256.,  9912.,  6768.,  8624.,  3048.,  3848.,  3816.,  4616.,  8304., 10160.,  9560., 12216.,  7256.,  9912., 10584., 13240.,  7792.,  9648.,  3304.,  4104.,  3450.,  4210.,  5788.,  7500.,  6054.,  8398.,  9078., 11422., 10054., 12398.,  7404.,  8988.,  1578.,  2210.,   964.,  1492.,  2616.,  3800.,  5212.,  6668.,  6268.,  7724.,  5788.,  7244.,  2776.,  3704.,  1572.,  1844.,    70.,   174.,   388.,   660.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1161.,  1242.,  1323.,  1404.,  1898.,  2012.,  2126.,  2240.,  2830.,  2980.,  3130.,  3280.,  3265.,  3430.,  3595.,  3760.,  3700.,  3880.,  4060.,  4240.,  3470.,  3620.,  3770.,  3920.,  2997.,  3114.,  3231.,  3348.,  2926.,  3076.,  3226.,  3376.,  4432.,  4640.,  4848.,  5056.,  6230.,  6500.,  6770.,  7040.,  6754.,  7044.,  7334.,  7624.,  7278.,  7588.,  7898.,  8208.,  6208.,  6464.,  6720.,  6976.,  5230.,  5428.,  5626.,  5824.,  5088.,  5328.,  5568.,  5808.,  7442.,  7772.,  8102.,  8432., 10233., 10658., 11083., 11508., 10882., 11332., 11782., 12232., 11531., 12006., 12481., 12956.,  9582.,  9972., 10362., 10752.,  8012.,  8312.,  8612.,  8912.,  7573.,  7918.,  8263.,  8608., 10886., 11356., 11826., 12296., 14776., 15376., 15976., 16576., 15425., 16050., 16675., 17300., 16074., 16724., 17374., 18024., 13138., 13668., 14198., 14728., 10889., 11294., 11699., 12104., 10058., 10508., 10958., 11408., 14330., 14940., 15550., 16160., 19319., 20094., 20869., 21644., 19968., 20768., 21568., 22368., 20617., 21442., 22267., 23092., 16694., 17364., 18034., 18704., 13766., 14276., 14786., 15296., 12543., 13098., 13653., 14208., 17774., 18524., 19274., 20024., 23862., 24812., 25762., 26712., 24511., 25486., 26461., 27436., 25160., 26160., 27160., 28160., 20250., 21060., 21870., 22680., 16643., 17258., 17873., 18488., 14166., 14652., 15138., 15624., 19600., 20256., 20912., 21568., 25790., 26620., 27450., 28280., 26394., 27244., 28094., 28944., 26998., 27868., 28738., 29608., 21120., 21824., 22528., 23232., 17110., 17644., 18178., 18712., 12204., 12600., 12996., 13392., 16550., 17084., 17618., 18152., 21503., 22178., 22853., 23528., 21962., 22652., 23342., 24032., 22421., 23126., 23831., 24536., 16762., 17332., 17902., 18472., 13584., 14016., 14448., 14880.,  9857., 10122., 10387., 10652., 13450., 13788., 14126., 14464., 17398., 17812., 18226., 18640., 15465., 15830., 16195., 16560., 15900., 16280., 16660., 17040., 13550., 13860., 14170., 14480., 10797., 11034., 11271., 11508.,  8014.,  8324.,  8634.,  8944.,  9488.,  9888., 10288., 10688., 11382., 11876., 12370., 12864.,  8258.,  8708.,  9158.,  9608.,  8782.,  9252.,  9722., 10192.,  4800.,  5184.,  5568.,  5952.,  4366.,  4660.,  4954.,  5248.,  6600.,  6976.,  7352.,  7728.,  9970., 10460., 10950., 11440., 13873., 14482., 15091., 15700., 13690., 14260., 14830., 15400., 14339., 14934., 15529., 16124., 12430., 12916., 13402., 13888., 10292., 10664., 11036., 11408.,  6333.,  6622.,  6911.,  7200.,  8806.,  9180.,  9554.,  9928., 11696., 12160., 12624., 13088., 10233., 10658., 11083., 11508., 10882., 11332., 11782., 12232.,  9074.,  9444.,  9814., 10184.,  7601.,  7886.,  8171.,  8456.,  7218.,  7548.,  7878.,  8208., 10394., 10844., 11294., 11744., 14127., 14702., 15277., 15852., 14776., 15376., 15976., 16576., 15425., 16050., 16675., 17300., 12630., 13140., 13650., 14160., 10478., 10868., 11258., 11648.,  9703., 10138., 10573., 11008., 13838., 14428., 15018., 15608., 18670., 19420., 20170., 20920., 19319., 20094., 20869., 21644., 19968., 20768., 21568., 22368., 16186., 16836., 17486., 18136., 13355., 13850., 14345., 14840., 11446., 11836., 12226., 12616., 15888., 16416., 16944., 17472., 20958., 21628., 22298., 22968., 21562., 22252., 22942., 23632., 22166., 22876., 23586., 24296., 17408., 17984., 18560., 19136., 14134., 14572., 15010., 15448., 10084., 10408., 10732., 11056., 13702., 14140., 14578., 15016., 17831., 18386., 18941., 19496., 18290., 18860., 19430., 20000., 18749., 19334., 19919., 20504., 14042., 14516., 14990., 15464., 11400., 11760., 12120., 12480., 11897., 12346., 12795., 13244., 17066., 17628., 18190., 18752., 22750., 23428., 24106., 24784., 22353., 22982., 23611., 24240., 21700., 22280., 22860., 23440., 18510., 18980., 19450., 19920., 14757., 15114., 15471., 15828., 14638., 15108., 15578., 16048., 18896., 19488., 20080., 20672., 23702., 24420., 25138., 25856., 22114., 22788., 23462., 24136., 20270., 20900., 21530., 22160., 14656., 15168., 15680., 16192., 11950., 12340., 12730., 13120., 13744., 14256., 14768., 15280., 16850., 17500., 18150., 18800., 20585., 21378., 22171., 22964., 17842., 18596., 19350., 20104., 14843., 15558., 16273., 16988., 10158., 10740., 11322., 11904.,  8732.,  9176.,  9620., 10064.,  6309.,  6734.,  7159.,  7584.,  9798., 10332., 10866., 11400., 13800., 14448., 15096., 15744., 13873., 14482., 15091., 15700., 13690., 14260., 14830., 15400., 11922., 12388., 12854., 13320.,  9881., 10238., 10595., 10952.,  7322.,  7660.,  7998.,  8336.,  9914., 10332., 10750., 11168., 12903., 13406., 13909., 14412., 11696., 12160., 12624., 13088., 10233., 10658., 11083., 11508.,  8566.,  8916.,  9266.,  9616.,  7190.,  7460.,  7730.,  8000.,  6863.,  7178.,  7493.,  7808.,  9902., 10332., 10762., 11192., 13478., 14028., 14578., 15128., 14127., 14702., 15277., 15852., 14776., 15376., 15976., 16576., 12122., 12612., 13102., 13592., 10067., 10442., 10817., 11192.,  8726.,  9020.,  9314.,  9608., 12176., 12576., 12976., 13376., 16126., 16636., 17146., 17656., 16730., 17260., 17790., 18320., 17334., 17884., 18434., 18984., 13696., 14144., 14592., 15040., 11158., 11500., 11842., 12184.,  7964.,  8216.,  8468.,  8720., 10854., 11196., 11538., 11880., 14159., 14594., 15029., 15464., 14618., 15068., 15518., 15968., 15077., 15542., 16007., 16472., 11322., 11700., 12078., 12456.,  9216.,  9504.,  9792., 10080.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    73.,    78.,    83.,    88.,    51.,    54.,    57.,    60.,    25.,    30.,    35.,    40.,    92.,   104.,   116.,   128.,   209.,   230.,   251.,   272.,   293.,   314.,   335.,   356.,   377.,   398.,   419.,   440.,   336.,   352.,   368.,   384.,   213.,   222.,   231.,   240.,   132.,   144.,   156.,   168.,   375.,   402.,   429.,   456.,   741.,   786.,   831.,   876.,   921.,   966.,  1011.,  1056.,  1101.,  1146.,  1191.,  1236.,   909.,   942.,   975.,  1008.,   546.,   564.,   582.,   600.,   382.,   404.,   426.,   448.,   976.,  1024.,  1072.,  1120.,  1798.,  1876.,  1954.,  2032.,  2110.,  2188.,  2266.,  2344.,  2422.,  2500.,  2578.,  2656.,  1912.,  1968.,  2024.,  2080.,  1110.,  1140.,  1170.,  1200.,   822.,   844.,   866.,   888.,  1936.,  1984.,  2032.,  2080.,  3358.,  3436.,  3514.,  3592.,  3670.,  3748.,  3826.,  3904.,  3982.,  4060.,  4138.,  4216.,  3032.,  3088.,  3144.,  3200.,  1710.,  1740.,  1770.,  1800.,  1161.,  1182.,  1203.,  1224.,  2589.,  2634.,  2679.,  2724.,  4296.,  4368.,  4440.,  4512.,  4584.,  4656.,  4728.,  4800.,  4872.,  4944.,  5016.,  5088.,  3579.,  3630.,  3681.,  3732.,  1959.,  1986.,  2013.,  2040.,  1177.,  1194.,  1211.,  1228.,  2564.,  2600.,  2636.,  2672.,  4169.,  4226.,  4283.,  4340.,  4397.,  4454.,  4511.,  4568.,  4625.,  4682.,  4739.,  4796.,  3336.,  3376.,  3416.,  3456.,  1797.,  1818.,  1839.,  1860.,   810.,   820.,   830.,   840.,  1741.,  1762.,  1783.,  1804.,  2797.,  2830.,  2863.,  2896.,  2929.,  2962.,  2995.,  3028.,  3061.,  3094.,  3127.,  3160.,  2183.,  2206.,  2229.,  2252.,  1164.,  1176.,  1188.,  1200.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   202.,   244.,   286.,   328.,   370.,   412.,   454.,   496.,   538.,   580.,   622.,   664.,   433.,   462.,   491.,   520.,   255.,   270.,   285.,   300.,   289.,   318.,   347.,   376.,   716.,   776.,   836.,   896.,  1289.,  1382.,  1475.,  1568.,  1661.,  1754.,  1847.,  1940.,  2033.,  2126.,  2219.,  2312.,  1536.,  1600.,  1664.,  1728.,   861.,   894.,   927.,   960.,   888.,   936.,   984.,  1032.,  2031.,  2130.,  2229.,  2328.,  3441.,  3594.,  3747.,  3900.,  4053.,  4206.,  4359.,  4512.,  4665.,  4818.,  4971.,  5124.,  3429.,  3534.,  3639.,  3744.,  1878.,  1932.,  1986.,  2040.,  1870.,  1940.,  2010.,  2080.,  4144.,  4288.,  4432.,  4576.,  6838.,  7060.,  7282.,  7504.,  7726.,  7948.,  8170.,  8392.,  8614.,  8836.,  9058.,  9280.,  6232.,  6384.,  6536.,  6688.,  3366.,  3444.,  3522.,  3600.,  3270.,  3340.,  3410.,  3480.,  7024.,  7168.,  7312.,  7456., 11278., 11500., 11722., 11944., 12166., 12388., 12610., 12832., 13054., 13276., 13498., 13720.,  9272.,  9424.,  9576.,  9728.,  4926.,  5004.,  5082.,  5160.,  3357.,  3414.,  3471.,  3528.,  7125.,  7242.,  7359.,  7476., 11316., 11496., 11676., 11856., 12036., 12216., 12396., 12576., 12756., 12936., 13116., 13296.,  8979.,  9102.,  9225.,  9348.,  4731.,  4794.,  4857.,  4920.,  2881.,  2922.,  2963.,  3004.,  6068.,  6152.,  6236.,  6320.,  9569.,  9698.,  9827.,  9956., 10085., 10214., 10343., 10472., 10601., 10730., 10859., 10988.,  7416.,  7504.,  7592.,  7680.,  3885.,  3930.,  3975.,  4020.,  1782.,  1804.,  1826.,  1848.,  3733.,  3778.,  3823.,  3868.,  5857.,  5926.,  5995.,  6064.,  6133.,  6202.,  6271.,  6340.,  6409.,  6478.,  6547.,  6616.,  4463.,  4510.,  4557.,  4604.,  2328.,  2352.,  2376.,  2400.,    25.,    50.,    75.,   100.,   151.,   202.,   253.,   304.,   382.,   460.,   538.,   616.,   694.,   772.,   850.,   928.,  1006.,  1084.,  1162.,  1240.,   793.,   846.,   899.,   952.,   459.,   486.,   513.,   540.,   553.,   606.,   659.,   712.,  1340.,  1448.,  1556.,  1664.,  2369.,  2534.,  2699.,  2864.,  3029.,  3194.,  3359.,  3524.,  3689.,  3854.,  4019.,  4184.,  2736.,  2848.,  2960.,  3072.,  1509.,  1566.,  1623.,  1680.,  1644.,  1728.,  1812.,  1896.,  3687.,  3858.,  4029.,  4200.,  6141.,  6402.,  6663.,  6924.,  7185.,  7446.,  7707.,  7968.,  8229.,  8490.,  8751.,  9012.,  5949.,  6126.,  6303.,  6480.,  3210.,  3300.,  3390.,  3480.,  3358.,  3476.,  3594.,  3712.,  7312.,  7552.,  7792.,  8032., 11878., 12244., 12610., 12976., 13342., 13708., 14074., 14440., 14806., 15172., 15538., 15904., 10552., 10800., 11048., 11296.,  5622.,  5748.,  5874.,  6000.,  5718.,  5836.,  5954.,  6072., 12112., 12352., 12592., 12832., 19198., 19564., 19930., 20296., 20662., 21028., 21394., 21760., 22126., 22492., 22858., 23224., 15512., 15760., 16008., 16256.,  8142.,  8268.,  8394.,  8520.,  5553.,  5646.,  5739.,  5832., 11661., 11850., 12039., 12228., 18336., 18624., 18912., 19200., 19488., 19776., 20064., 20352., 20640., 20928., 21216., 21504., 14379., 14574., 14769., 14964.,  7503.,  7602.,  7701.,  7800.,  4585.,  4650.,  4715.,  4780.,  9572.,  9704.,  9836.,  9968., 14969., 15170., 15371., 15572., 15773., 15974., 16175., 16376., 16577., 16778., 16979., 17180., 11496., 11632., 11768., 11904.,  5973.,  6042.,  6111.,  6180.,  2754.,  2788.,  2822.,  2856.,  5725.,  5794.,  5863.,  5932.,  8917.,  9022.,  9127.,  9232.,  9337.,  9442.,  9547.,  9652.,  9757.,  9862.,  9967., 10072.,  6743.,  6814.,  6885.,  6956.,  3492.,  3528.,  3564.,  3600.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  7413.,  8551.,  9689., 10827., 11080., 12592., 14104., 15616., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423.,  8816., 10040., 11264., 12488.,  6157.,  7007.,  7857.,  8707.,  6347.,  7301.,  8255.,  9209.,  8976., 10328., 11680., 13032., 10443., 12105., 13767., 15429., 11649., 13383., 15117., 16851., 11735., 13413., 15091., 16769.,  9464., 10784., 12104., 13424.,  5219.,  6141.,  7063.,  7985.,  4936.,  5728.,  6520.,  7312.,  7568.,  8688.,  9808., 10928.,  9616., 10968., 12320., 13672., 10088., 11472., 12856., 14240.,  8928., 10216., 11504., 12792.,  5168.,  6160.,  7152.,  8144.,  4840.,  5504.,  6168.,  6832.,  2815.,  3277.,  3739.,  4201.,  4456.,  5120.,  5784.,  6448.,  6347.,  7237.,  8127.,  9017.,  7173.,  8183.,  9193., 10203.,  6367.,  7369.,  8371.,  9373.,  6240.,  7064.,  7888.,  8712.,  4967.,  5589.,  6211.,  6833.,  4349.,  4915.,  5481.,  6047.,  4336.,  5096.,  5856.,  6616.,  6141.,  7119.,  8097.,  9075.,  6295.,  7265.,  8235.,  9205.,  7057.,  8147.,  9237., 10327.,  6376.,  7296.,  8216.,  9136.,  4421.,  5147.,  5873.,  6599.,  4968.,  5888.,  6808.,  7728.,  8080.,  9200., 10320., 11440., 10064., 11416., 12768., 14120.,  8904., 10160., 11416., 12672.,  8352.,  9640., 10928., 12216.,  6704.,  7696.,  8688.,  9680.,  5640.,  6432.,  7224.,  8016.,  6905.,  7963.,  9021., 10079.,  9272., 10592., 11912., 13232., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533., 10041., 11679., 13317., 14955.,  8736., 10024., 11312., 12600.,  6993.,  8019.,  9045., 10071.,  7567.,  8697.,  9827., 10957.,  9920., 11336., 12752., 14168.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  7656.,  8784.,  9912., 11040.,  5351.,  6193.,  7035.,  7877.,  7109.,  8183.,  9257., 10331.,  8424.,  9808., 11192., 12576., 11649., 13383., 15117., 16851., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  7280.,  8504.,  9728., 10952.,  5949.,  6863.,  7777.,  8691.,  6747.,  7893.,  9039., 10185., 10608., 12088., 13568., 15048., 12635., 14489., 16343., 18197., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961.,  8952., 10272., 11592., 12912.,  7571.,  8557.,  9543., 10529.,  5448.,  6240.,  7032.,  7824.,  7568.,  8688.,  9808., 10928., 10224., 11704., 13184., 14664.,  9672., 11184., 12696., 14208., 10656., 12200., 13744., 15288.,  9456., 10704., 11952., 13200.,  6568.,  7488.,  8408.,  9328.,  3983.,  4637.,  5291.,  5945.,  6184.,  7104.,  8024.,  8944.,  7867.,  9077., 10287., 11497.,  8597.,  9799., 11001., 12203.,  8815., 10009., 11203., 12397.,  6336.,  7288.,  8240.,  9192.,  3479.,  4165.,  4851.,  5537.,  3789.,  4291.,  4793.,  5295.,  5264.,  5896.,  6528.,  7160.,  5229.,  6015.,  6801.,  7587.,  4359.,  5137.,  5915.,  6693.,  5025.,  5795.,  6565.,  7335.,  4648.,  5312.,  5976.,  6640.,  3253.,  3787.,  4321.,  4855.,  5288.,  5952.,  6616.,  7280.,  5840.,  6704.,  7568.,  8432.,  6288.,  7384.,  8480.,  9576.,  7272.,  8400.,  9528., 10656.,  7744.,  8904., 10064., 11224.,  6704.,  7696.,  8688.,  9680.,  5128.,  5920.,  6712.,  7504.,  6089.,  7083.,  8077.,  9071.,  7736.,  9056., 10376., 11696., 10749., 12307., 13865., 15423., 10835., 12337., 13839., 15341.,  9897., 11343., 12789., 14235.,  7104.,  8264.,  9424., 10584.,  6081.,  6915.,  7749.,  8583.,  6239.,  7305.,  8371.,  9437.,  9408., 10824., 12240., 13656., 11735., 13413., 15091., 16769., 10797., 12419., 14041., 15663.,  8835., 10401., 11967., 13533.,  8264.,  9520., 10776., 12032.,  6167.,  7073.,  7979.,  8885.,  7413.,  8551.,  9689., 10827., 11080., 12592., 14104., 15616., 11697., 13495., 15293., 17091.,  9735., 11477., 13219., 14961., 10749., 12307., 13865., 15423.,  8816., 10040., 11264., 12488.,  6157.,  7007.,  7857.,  8707.,  6347.,  7301.,  8255.,  9209.,  8976., 10328., 11680., 13032., 10443., 12105., 13767., 15429., 11649., 13383., 15117., 16851., 11735., 13413., 15091., 16769.,  9464., 10784., 12104., 13424.,  5219.,  6141.,  7063.,  7985.,  4936.,  5728.,  6520.,  7312.,  7568.,  8688.,  9808., 10928.,  9616., 10968., 12320., 13672., 10088., 11472., 12856., 14240.,  8928., 10216., 11504., 12792.,  5168.,  6160.,  7152.,  8144.,  4840.,  5504.,  6168.,  6832.,  2815.,  3277.,  3739.,  4201.,  4456.,  5120.,  5784.,  6448.,  6347.,  7237.,  8127.,  9017.,  7173.,  8183.,  9193., 10203.,  6367.,  7369.,  8371.,  9373.,  6240.,  7064.,  7888.,  8712.,  4967.,  5589.,  6211.,  6833.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  305.,  347.,  389.,  431.,  377.,  419.,  461.,  503.,  292.,  328.,  364.,  400.,   17.,   39.,   61.,   83.,   52.,   88.,  124.,  160.,  292.,  380.,  468.,  556.,  784.,  940., 1096., 1252., 1312., 1468., 1624., 1780., 1232., 1388., 1544., 1700.,  700.,  820.,  940., 1060.,  140.,  208.,  276.,  344.,  237.,  327.,  417.,  507.,  948., 1152., 1356., 1560., 2133., 2475., 2817., 3159., 2797., 3139., 3481., 3823., 2341., 2683., 3025., 3367., 1384., 1636., 1888., 2140.,  465.,  603.,  741.,  879.,  656.,  824.,  992., 1160., 2104., 2472., 2840., 3208., 3960., 4560., 5160., 5760., 4536., 5136., 5736., 6336., 3960., 4560., 5160., 5760., 2536., 2968., 3400., 3832., 1088., 1320., 1552., 1784., 1232., 1400., 1568., 1736., 2872., 3240., 3608., 3976., 4536., 5136., 5736., 6336., 3960., 4560., 5160., 5760., 3768., 4368., 4968., 5568., 2536., 2968., 3400., 3832., 1664., 1896., 2128., 2360., 1395., 1557., 1719., 1881., 2752., 3100., 3448., 3796., 3655., 4213., 4771., 5329., 3391., 3949., 4507., 5065., 3639., 4197., 4755., 5313., 3220., 3616., 4012., 4408., 1751., 1961., 2171., 2381., 1036., 1168., 1300., 1432., 1460., 1740., 2020., 2300., 2456., 2900., 3344., 3788., 2728., 3172., 3616., 4060., 3640., 4084., 4528., 4972., 2860., 3172., 3484., 3796., 1252., 1416., 1580., 1744.,   59.,  137.,  215.,  293.,  436.,  600.,  764.,  928., 1163., 1421., 1679., 1937., 2195., 2453., 2711., 2969., 1979., 2237., 2495., 2753., 1264., 1444., 1624., 1804.,   71.,  165.,  259.,  353.,   77.,  179.,  281.,  383.,  568.,  780.,  992., 1204., 1505., 1835., 2165., 2495., 2825., 3155., 3485., 3815., 2513., 2843., 3173., 3503., 1588., 1816., 2044., 2272.,   89.,  207.,  325.,  443.,  580.,  808., 1036., 1264., 2020., 2364., 2708., 3052., 3968., 4444., 4920., 5396., 4240., 4716., 5192., 5668., 2368., 2844., 3320., 3796.,  796., 1044., 1292., 1540.,  572.,  704.,  836.,  968., 1509., 1759., 2009., 2259., 3524., 3920., 4316., 4712., 4605., 5171., 5737., 6303., 3093., 3659., 4225., 4791., 3021., 3587., 4153., 4719., 2072., 2388., 2704., 3020., 1129., 1299., 1469., 1639., 2544., 2840., 3136., 3432., 3736., 4232., 4728., 5224., 3800., 4528., 5256., 5984., 4376., 5104., 5832., 6560., 5848., 6576., 7304., 8032., 3560., 3992., 4424., 4856., 1856., 2088., 2320., 2552., 2096., 2392., 2688., 2984., 1944., 2440., 2936., 3432., 4376., 5104., 5832., 6560., 5848., 6576., 7304., 8032., 5656., 6384., 7112., 7840., 2536., 2968., 3400., 3832.,  896., 1128., 1360., 1592.,  779.,  973., 1167., 1361., 2064., 2348., 2632., 2916., 3023., 3421., 3819., 4217., 3143., 3541., 3939., 4337., 1727., 2125., 2523., 2921., 1668., 1872., 2076., 2280., 1039., 1153., 1267., 1381.,  604.,  672.,  740.,  808.,  852., 1004., 1156., 1308., 1416., 1668., 1920., 2172., 1432., 1684., 1936., 2188., 2088., 2340., 2592., 2844., 1740., 1924., 2108., 2292.,  820.,  920., 1020., 1120.,   35.,   81.,  127.,  173.,  260.,  360.,  460.,  560.,  707.,  869., 1031., 1193., 1355., 1517., 1679., 1841., 1267., 1429., 1591., 1753.,  832.,  948., 1064., 1180.,   47.,  109.,  171.,  233.,   53.,  123.,  193.,  263.,  392.,  540.,  688.,  836., 1049., 1283., 1517., 1751., 1985., 2219., 2453., 2687., 1801., 2035., 2269., 2503., 1156., 1320., 1484., 1648.,   65.,  151.,  237.,  323.,  404.,  568.,  732.,  896., 1508., 1852., 2196., 2540., 3376., 3916., 4456., 4996., 4416., 4956., 5496., 6036., 3824., 4364., 4904., 5444., 1916., 2292., 2668., 3044.,  492.,  688.,  884., 1080., 1149., 1431., 1713., 1995., 3540., 4128., 4716., 5304., 6053., 6843., 7633., 8423., 6461., 7251., 8041., 8831., 4725., 5515., 6305., 7095., 1832., 2340., 2848., 3356., 1281., 1483., 1685., 1887., 2288., 2584., 2880., 3176., 4856., 5480., 6104., 6728., 6712., 7568., 8424., 9280., 5240., 6096., 6952., 7808., 4664., 5520., 6376., 7232., 4168., 4728., 5288., 5848., 2112., 2344., 2576., 2808., 2352., 2648., 2944., 3240., 4600., 5224., 5848., 6472., 5240., 6096., 6952., 7808., 4664., 5520., 6376., 7232., 6520., 7376., 8232., 9088., 4680., 5240., 5800., 6360., 1664., 1896., 2128., 2360., 1699., 1925., 2151., 2377., 2592., 3068., 3544., 4020., 2679., 3301., 3923., 4545., 4719., 5341., 5963., 6585., 5223., 5845., 6467., 7089., 3476., 3872., 4268., 4664.,  423.,  569.,  715.,  861.,  268.,  400.,  532.,  664.,  948., 1228., 1508., 1788., 2104., 2420., 2736., 3052., 2888., 3204., 3520., 3836., 2264., 2580., 2896., 3212.,  716.,  900., 1084., 1268.,  388.,  424.,  460.,  496.,   11.,   25.,   39.,   53.,   84.,  120.,  156.,  192.,  251.,  317.,  383.,  449.,  515.,  581.,  647.,  713.,  555.,  621.,  687.,  753.,  400.,  452.,  504.,  556.,   23.,   53.,   83.,  113.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1290.,  3234.,  5178.,  7122.,  1080.,  2712.,  4344.,  5976.,   750.,  1878.,  3006.,  4134.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,  1290.,  3234.,  5178.,  7122.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1290.,  3234.,  5178.,  7122.,  1330.,  3338.,  5346.,  7354.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1330.,  3338.,  5346.,  7354.,  1370.,  3442.,  5514.,  7586.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1370.,  3442.,  5514.,  7586.,  1410.,  3546.,  5682.,  7818.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2270.,  5702.,  9134., 12566.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1410.,  3546.,  5682.,  7818.,  1080.,  2712.,  4344.,  5976.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.,  1080.,  2712.,  4344.,  5976.,  1410.,  3546.,  5682.,  7818.,  1370.,  3442.,  5514.,  7586.,  1330.,  3338.,  5346.,  7354.,  1080.,  2712.,  4344.,  5976.,   870.,  2190.,  3510.,  4830.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  2196.,  2980.,  3764.,  4548.,   270.,   694.,  1118.,  1542.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2562.,  3514.,  4466.,  5418.,  3036.,  4620.,  6204.,  7788.,  6286.,  8694., 11102., 13510.,  6446.,  8854., 11262., 13670.,  6286.,  8694., 11102., 13510.,  3980.,  5436.,  6892.,  8348.,   946.,  1770.,  2594.,  3418.,  2696.,  4008.,  5320.,  6632.,  7280.,  9648., 12016., 14384.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992.,  6256.,  8624., 10992., 13360.,  3720.,  5032.,  6344.,  7656.,  4232.,  5544.,  6856.,  8168.,  5232.,  7600.,  9968., 12336., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  6256.,  8624., 10992., 13360.,  3208.,  4520.,  5832.,  7144.,  1322.,  2338.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982., 10582., 13182.,  8358., 10958., 13558., 16158.,  5382.,  7982., 10582., 13182.,  4316.,  5900.,  7484.,  9068.,  1754.,  2642.,  3530.,  4418.,  1780.,  2308.,  2836.,  3364.,  3128.,  4312.,  5496.,  6680.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  3800.,  5240.,  6680.,  8120.,  2452.,  3236.,  4020.,  4804.,   230.,   590.,   950.,  1310.,  1940.,  2724.,  3508.,  4292.,  2506.,  3778.,  5050.,  6322.,  4202.,  5474.,  6746.,  8018.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6350.,  9000., 11925., 12250., 12575., 12900., 10930.,  8660.,  7396., 10340., 13530., 13840., 14150., 14460., 12108.,  9490.,  7404., 10270., 13340., 13610., 13880., 14150., 11764.,  9159.,   384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6350.,  9000., 11925., 12250., 12575., 12900., 10930.,  8660.,  7396., 10340., 13530., 13840., 14150., 14460., 12108.,  9490.,  7404., 10270., 13340., 13610., 13880., 14150., 11764.,  9159.,   384.,   610.,   890.,  1010.,  1130.,  1250.,  1144.,   969.,   988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,  9975., 10300.,  8770.,  6980.,  6350.,  9000., 11925., 12250., 12575., 12900., 10930.,  8660.,  7396., 10340., 13530., 13840., 14150., 14460., 12108.,  9490.,  7404., 10270., 13340., 13610., 13880., 14150., 11764.,  9159.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,   74.,  130.,  166.,  161.,  133.,   80.,   50.,  133.,  252.,  410.,  488.,  441.,  346.,  200.,  138.,  338.,  604.,  940., 1076.,  934.,  710.,  400.,  278.,  638., 1084., 1620., 1756., 1474., 1090.,  600.,  392.,  859., 1404., 2030., 2156., 1755., 1264.,  680.,  397.,  853., 1370., 1950., 2050., 1643., 1167.,  620.,  273.,  580.,  922., 1300., 1358., 1078.,  759.,  400.,   17.,   52.,  106.,  180.,  254.,  226.,  175.,  100.,  123.,  291.,  506.,  770.,  934.,  785.,  581.,  320.,  338.,  757., 1260., 1850., 2120., 1737., 1258.,  680.,  682., 1490., 2428., 3500., 3892., 3142., 2246., 1200., 1142., 2430., 3868., 5460., 5852., 4642., 3266., 1720., 1160., 2443., 3852., 5390., 5708., 4491., 3136., 1640.,  989., 2069., 3242., 4510., 4738., 3707., 2575., 1340.,  609., 1268., 1978., 2740., 2862., 2230., 1543.,  800.,   33.,  100.,  202.,  340.,  478.,  418.,  319.,  180.,  235.,  547.,  938., 1410., 1702., 1409., 1029.,  560.,  626., 1381., 2268., 3290., 3752., 3033., 2170., 1160., 1226., 2642., 4252., 6060., 6708., 5350., 3782., 2000., 2006., 4222., 6652., 9300., 9948., 7810., 5442., 2840., 1928., 4027., 6300., 8750., 9260., 7227., 5008., 2600., 1581., 3285., 5114., 7070., 7426., 5771., 3983., 2060.,  945., 1956., 3034., 4180., 4366., 3382., 2327., 1200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.,  2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.,  2103.,  3308.,  4805.,  5735.,  6665.,  7595.,  6948.,  5889.,  3768.,  5696.,  8008.,  9136., 10264., 11392.,  9472.,  8000.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3867.,  5596.,  7777.,  9175., 10573., 11971.,  9348.,  8089.,  5099.,  7708., 10833., 12231., 13629., 15027., 12740., 10729.,  3808.,  5472.,  7552.,  8840., 10128., 11416.,  8736.,  7496.,  4435.,  6524.,  8953.,  9931., 10909., 11887.,  9684.,  8013.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  124.,  196.,  233.,  218.,  143.,   64.,  224.,  496.,  896., 1168., 1156.,  968.,  588.,  337.,  926., 1791., 2956., 3556., 3249., 2570., 1495.,  984., 2352., 4104., 6272., 6848., 5936., 4512., 2544., 1968., 3840., 6128., 8864., 8928., 7544., 5616., 3112., 2381., 4102., 6179., 8636., 8116., 6789., 5010., 2755., 1940., 2584., 3452., 4560., 3328., 2944., 2272., 1296.,  485., 1110., 1883., 2812., 3268., 2729., 2010., 1103.,    5.,   22.,   59.,  124.,  196.,  233.,  218.,  143.,   64.,  224.,  496.,  896., 1168., 1156.,  968.,  588.,  337.,  926., 1791., 2956., 3556., 3249., 2570., 1495.,  984., 2352., 4104., 6272., 6848., 5936., 4512., 2544., 1968., 3840., 6128., 8864., 8928., 7544., 5616., 3112., 2381., 4102., 6179., 8636., 8116., 6789., 5010., 2755., 1940., 2584., 3452., 4560., 3328., 2944., 2272., 1296.,  485., 1110., 1883., 2812., 3268., 2729., 2010., 1103.,    5.,   22.,   59.,  124.,  196.,  233.,  218.,  143.,   64.,  224.,  496.,  896., 1168., 1156.,  968.,  588.,  337.,  926., 1791., 2956., 3556., 3249., 2570., 1495.,  984., 2352., 4104., 6272., 6848., 5936., 4512., 2544., 1968., 3840., 6128., 8864., 8928., 7544., 5616., 3112., 2381., 4102., 6179., 8636., 8116., 6789., 5010., 2755., 1940., 2584., 3452., 4560., 3328., 2944., 2272., 1296.,  485., 1110., 1883., 2812., 3268., 2729., 2010., 1103.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214., 1958., 3464., 4058., 3986., 4170., 4610., 3848., 3134., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 3106., 5560., 6334., 7046., 7502., 7702., 5944., 5642., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 2006., 3464., 3626., 4194., 5018., 5074., 3336., 3214.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1512.,  4432.,  8824., 14624., 16160., 14808., 10960.,  6728.,  4232.,  8080., 13656., 18848., 15968., 13432.,  8144.,  4264.,  2466.,  6196., 11190., 17640., 17096., 14958., 10788.,  4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1512.,  4432.,  8824., 14624., 16160., 14808., 10960.,  6728.,  4232.,  8080., 13656., 18848., 15968., 13432.,  8144.,  4264.,  2466.,  6196., 11190., 17640., 17096., 14958., 10788.,  4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1714.,  1628.,  1078.,   420.,  1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,  8454., 11304., 11080.,  9022.,  5060.,  3418.,  1512.,  4432.,  8824., 14624., 16160., 14808., 10960.,  6728.,  4232.,  8080., 13656., 18848., 15968., 13432.,  8144.,  4264.,  2466.,  6196., 11190., 17640., 17096., 14958., 10788.,  4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 12070., 12700., 17150., 18000., 22775., 23850., 23400., 24500., 24025., 25150., 24650., 25800., 20930., 21860., 16615., 17320., 14240., 14792., 19936., 20680., 26120., 27060., 26720., 27680., 27320., 28300., 27920., 28920., 23408., 24216., 18368., 18980., 14358., 14808., 19934., 20540., 25915., 26680., 26440., 27220., 26965., 27760., 27490., 28300., 22874., 23528., 17823., 18318.,   678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 12070., 12700., 17150., 18000., 22775., 23850., 23400., 24500., 24025., 25150., 24650., 25800., 20930., 21860., 16615., 17320., 14240., 14792., 19936., 20680., 26120., 27060., 26720., 27680., 27320., 28300., 27920., 28920., 23408., 24216., 18368., 18980., 14358., 14808., 19934., 20540., 25915., 26680., 26440., 27220., 26965., 27760., 27490., 28300., 22874., 23528., 17823., 18318.,   678.,   768.,  1094.,  1220.,  1615.,  1780.,  1840.,  2020.,  2065.,  2260.,  2290.,  2500.,  2114.,  2288.,  1803.,  1938.,  1808.,  1976.,  2768.,  3000.,  3920.,  4220.,  4320.,  4640.,  4720.,  5060.,  5120.,  5480.,  4576.,  4872.,  3800.,  4028.,  3790.,  4060.,  5630.,  6000.,  7775.,  8250.,  8400.,  8900.,  9025.,  9550.,  9650., 10200.,  8450.,  8900.,  6895.,  7240.,  6550.,  6940.,  9470., 10000., 12775., 13450., 13400., 14100., 14025., 14750., 14650., 15400., 12610., 13220., 10135., 10600.,  9310.,  9820., 13310., 14000., 17775., 18650., 18400., 19300., 19025., 19950., 19650., 20600., 16770., 17540., 13375., 13960., 12070., 12700., 17150., 18000., 22775., 23850., 23400., 24500., 24025., 25150., 24650., 25800., 20930., 21860., 16615., 17320., 14240., 14792., 19936., 20680., 26120., 27060., 26720., 27680., 27320., 28300., 27920., 28920., 23408., 24216., 18368., 18980., 14358., 14808., 19934., 20540., 25915., 26680., 26440., 27220., 26965., 27760., 27490., 28300., 22874., 23528., 17823., 18318.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    30.,    40.,    50.,    60.,    59.,    68.,    55.,    62.,    36.,    40.,    16.,    22.,    56.,    70.,   124.,   148.,   224.,   260.,   296.,   332.,   292.,   322.,   244.,   266.,   148.,   160.,    85.,   100.,   233.,   266.,   450.,   504.,   742.,   820.,   898.,   976.,   819.,   882.,   647.,   692.,   376.,   400.,   248.,   276.,   616.,   676.,  1112.,  1208.,  1744.,  1880.,  2016.,  2152.,  1760.,  1868.,  1344.,  1420.,   760.,   800.,   528.,   556.,  1216.,  1276.,  2072.,  2168.,  3104.,  3240.,  3376.,  3512.,  2840.,  2948.,  2104.,  2180.,  1160.,  1200.,   757.,   784.,  1661.,  1718.,  2718.,  2808.,  3934.,  4060.,  4186.,  4312.,  3411.,  3510.,  2459.,  2528.,  1324.,  1360.,   772.,   794.,  1660.,  1706.,  2668.,  2740.,  3800.,  3900.,  4000.,  4100.,  3208.,  3286.,  2280.,  2334.,  1212.,  1240.,   533.,   546.,  1133.,  1160.,  1802.,  1844.,  2542.,  2600.,  2658.,  2716.,  2111.,  2156.,  1487.,  1518.,   784.,   800.,    17.,    34.,    69.,   104.,   158.,   212.,   286.,   360.,   434.,   508.,   395.,   452.,   311.,   350.,   180.,   200.,   208.,   246.,   504.,   582.,   892.,  1012.,  1376.,  1540.,  1704.,  1868.,  1444.,  1570.,  1076.,  1162.,   596.,   640.,   613.,   676.,  1385.,  1514.,  2322.,  2520.,  3430.,  3700.,  3970.,  4240.,  3267.,  3474.,  2375.,  2516.,  1288.,  1360.,  1272.,  1364.,  2792.,  2980.,  4568.,  4856.,  6608.,  7000.,  7392.,  7784.,  5984.,  6284.,  4288.,  4492.,  2296.,  2400.,  2192.,  2284.,  4672.,  4860.,  7448.,  7736., 10528., 10920., 11312., 11704.,  8984.,  9284.,  6328.,  6532.,  3336.,  3440.,  2245.,  2320.,  4733.,  4886.,  7470.,  7704., 10462., 10780., 11098., 11416.,  8739.,  8982.,  6107.,  6272.,  3196.,  3280.,  1924.,  1978.,  4028.,  4138.,  6316.,  6484.,  8792.,  9020.,  9248.,  9476.,  7240.,  7414.,  5032.,  5150.,  2620.,  2680.,  1189.,  1218.,  2477.,  2536.,  3866.,  3956.,  5358.,  5480.,  5602.,  5724.,  4367.,  4460.,  3023.,  3086.,  1568.,  1600.,    33.,    66.,   133.,   200.,   302.,   404.,   542.,   680.,   818.,   956.,   731.,   836.,   567.,   638.,   324.,   360.,   400.,   470.,   952.,  1094.,  1660.,  1876.,  2528.,  2820.,  3112.,  3404.,  2596.,  2818.,  1908.,  2058.,  1044.,  1120.,  1141.,  1252.,  2537.,  2762.,  4194.,  4536.,  6118.,  6580.,  7042.,  7504.,  5715.,  6066.,  4103.,  4340.,  2200.,  2320.,  2296.,  2452.,  4968.,  5284.,  8024.,  8504., 11472., 12120., 12768., 13416., 10208., 10700.,  7232.,  7564.,  3832.,  4000.,  3856.,  4012.,  8128.,  8444., 12824., 13304., 17952., 18600., 19248., 19896., 15128., 15620., 10552., 10884.,  5512.,  5680.,  3733.,  3856.,  7805.,  8054., 12222., 12600., 16990., 17500., 18010., 18520., 14067., 14454.,  9755., 10016.,  5068.,  5200.,  3076.,  3162.,  6396.,  6570.,  9964., 10228., 13784., 14140., 14496., 14852., 11272., 11542.,  7784.,  7966.,  4028.,  4120.,  1845.,  1890.,  3821.,  3912.,  5930.,  6068.,  8174.,  8360.,  8546.,  8732.,  6623.,  6764.,  4559.,  4654.,  2352.,  2400.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.,  3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.,  3291.,  3609.,  3984.,  4456.,  4987.,  5637.,  5861.,  6631.,  6735.,  7625.,  7609.,  8619.,  6656.,  7512.,  5025.,  5703.,  3020.,  3572.,  4960.,  5760.,  7388.,  8468.,  8500.,  9740.,  9612., 11012., 10724., 12284.,  9312., 10624.,  7956.,  8988.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5233.,  5827.,  6752.,  7624.,  8793.,  9983., 10287., 11677., 11781., 13371., 13275., 15065., 10352., 11864.,  8299.,  9493.,  5505.,  6291.,  8736.,  9864., 11593., 13103., 13087., 14797., 14581., 16491., 16075., 18185., 13872., 15640., 11387., 12773.,  5148.,  5700.,  6560.,  7360.,  8428.,  9508.,  9732., 10972., 11036., 12436., 12340., 13900.,  9280., 10592.,  7236.,  8268.,  4387.,  4897.,  6768.,  7496.,  8563.,  9533.,  9533., 10623., 10503., 11713., 11473., 12803.,  9600., 10712.,  7945.,  8815.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1488.,  1760.,  1808.,  2080.,  1562.,  1790.,   976.,  1144.,   626.,   718.,   491.,   605.,  1340.,  1592.,  2595.,  3009.,  3696.,  4296.,  4160.,  4760.,  3473.,  3959.,  2188.,  2536.,  1377.,  1563.,  1100.,  1316.,  2784.,  3248.,  5084.,  5828.,  6944.,  8000.,  7328.,  8384.,  6020.,  6860.,  3840.,  4432.,  2356.,  2668.,  2044.,  2260.,  4224.,  4688.,  7084.,  7828.,  9056., 10112.,  8320.,  9376.,  6452.,  7292.,  3648.,  4240.,  1988.,  2300.,  1851.,  2061.,  3228.,  3672.,  5171.,  5873.,  7728.,  8712.,  7584.,  8568.,  6593.,  7367.,  4844.,  5384.,  2289.,  2571.,  2118.,  2290.,  3136.,  3496.,  4590.,  5154.,  6512.,  7296.,  4944.,  5728.,  4178.,  4790.,  2848.,  3272.,   922.,  1142.,   893.,   995.,  2060.,  2272.,  3517.,  3847.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.,     5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1488.,  1760.,  1808.,  2080.,  1562.,  1790.,   976.,  1144.,   626.,   718.,   491.,   605.,  1340.,  1592.,  2595.,  3009.,  3696.,  4296.,  4160.,  4760.,  3473.,  3959.,  2188.,  2536.,  1377.,  1563.,  1100.,  1316.,  2784.,  3248.,  5084.,  5828.,  6944.,  8000.,  7328.,  8384.,  6020.,  6860.,  3840.,  4432.,  2356.,  2668.,  2044.,  2260.,  4224.,  4688.,  7084.,  7828.,  9056., 10112.,  8320.,  9376.,  6452.,  7292.,  3648.,  4240.,  1988.,  2300.,  1851.,  2061.,  3228.,  3672.,  5171.,  5873.,  7728.,  8712.,  7584.,  8568.,  6593.,  7367.,  4844.,  5384.,  2289.,  2571.,  2118.,  2290.,  3136.,  3496.,  4590.,  5154.,  6512.,  7296.,  4944.,  5728.,  4178.,  4790.,  2848.,  3272.,   922.,  1142.,   893.,   995.,  2060.,  2272.,  3517.,  3847.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.,     5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   415.,   481.,   396.,   448.,   263.,   293.,    94.,   138.,   368.,   472.,   854.,  1034.,  1488.,  1760.,  1808.,  2080.,  1562.,  1790.,   976.,  1144.,   626.,   718.,   491.,   605.,  1340.,  1592.,  2595.,  3009.,  3696.,  4296.,  4160.,  4760.,  3473.,  3959.,  2188.,  2536.,  1377.,  1563.,  1100.,  1316.,  2784.,  3248.,  5084.,  5828.,  6944.,  8000.,  7328.,  8384.,  6020.,  6860.,  3840.,  4432.,  2356.,  2668.,  2044.,  2260.,  4224.,  4688.,  7084.,  7828.,  9056., 10112.,  8320.,  9376.,  6452.,  7292.,  3648.,  4240.,  1988.,  2300.,  1851.,  2061.,  3228.,  3672.,  5171.,  5873.,  7728.,  8712.,  7584.,  8568.,  6593.,  7367.,  4844.,  5384.,  2289.,  2571.,  2118.,  2290.,  3136.,  3496.,  4590.,  5154.,  6512.,  7296.,  4944.,  5728.,  4178.,  4790.,  2848.,  3272.,   922.,  1142.,   893.,   995.,  2060.,  2272.,  3517.,  3847.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2506., 4066., 4392., 7112., 4958., 7878., 5158., 8398., 5870., 9430., 6070., 9950., 4648., 7368., 4002., 6522., 2088., 3336., 3616., 5792., 3896., 6232., 4312., 6904., 4728., 7576., 5144., 8248., 3616., 5792., 3336., 5352., 1462., 2398., 2584., 4216., 3010., 4762., 3002., 4946., 3506., 5642., 3498., 5826., 2840., 4472., 2334., 3846.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   300.,   636.,  1480.,  2280.,  3796.,  5188.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  7908.,  9684.,  6728.,  8040.,  3388.,  4108.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 3134., 3356., 3578., 3800., 4330., 4636., 4942., 5248., 5331., 5726., 6121., 6516., 5692., 6112., 6532., 6952., 6053., 6498., 6943., 7388., 6414., 6884., 7354., 7824., 4930., 5316., 5702., 6088., 3989., 4286., 4583., 4880., 3830., 4076., 4322., 4568., 5322., 5660., 5998., 6336., 6395., 6830., 7265., 7700., 6756., 7216., 7676., 8136., 7117., 7602., 8087., 8572., 7478., 7988., 8498., 9008., 6306., 6724., 7142., 7560., 4877., 5198., 5519., 5840., 3128., 3296., 3464., 3632., 3832., 4064., 4296., 4528., 4772., 5072., 5372., 5672., 5088., 5408., 5728., 6048., 5404., 5744., 6084., 6424., 5720., 6080., 6440., 6800., 4472., 4768., 5064., 5360., 3356., 3584., 3812., 4040., 2282., 2444., 2606., 2768., 3358., 3580., 3802., 4024., 4409., 4694., 4979., 5264., 4644., 4944., 5244., 5544., 4879., 5194., 5509., 5824., 5114., 5444., 5774., 6104., 4038., 4308., 4578., 4848., 3407., 3614., 3821., 4028., 1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 3134., 3356., 3578., 3800., 4330., 4636., 4942., 5248., 5331., 5726., 6121., 6516., 5692., 6112., 6532., 6952., 6053., 6498., 6943., 7388., 6414., 6884., 7354., 7824., 4930., 5316., 5702., 6088., 3989., 4286., 4583., 4880., 3830., 4076., 4322., 4568., 5322., 5660., 5998., 6336., 6395., 6830., 7265., 7700., 6756., 7216., 7676., 8136., 7117., 7602., 8087., 8572., 7478., 7988., 8498., 9008., 6306., 6724., 7142., 7560., 4877., 5198., 5519., 5840., 3128., 3296., 3464., 3632., 3832., 4064., 4296., 4528., 4772., 5072., 5372., 5672., 5088., 5408., 5728., 6048., 5404., 5744., 6084., 6424., 5720., 6080., 6440., 6800., 4472., 4768., 5064., 5360., 3356., 3584., 3812., 4040., 2282., 2444., 2606., 2768., 3358., 3580., 3802., 4024., 4409., 4694., 4979., 5264., 4644., 4944., 5244., 5544., 4879., 5194., 5509., 5824., 5114., 5444., 5774., 6104., 4038., 4308., 4578., 4848., 3407., 3614., 3821., 4028., 1074., 1164., 1254., 1344., 1454., 1580., 1706., 1832., 1977., 2142., 2307., 2472., 2188., 2368., 2548., 2728., 2399., 2594., 2789., 2984., 2610., 2820., 3030., 3240., 2358., 2532., 2706., 2880., 1871., 2006., 2141., 2276., 2200., 2368., 2536., 2704., 2904., 3136., 3368., 3600., 3860., 4160., 4460., 4760., 4128., 4448., 4768., 5088., 4396., 4736., 5076., 5416., 4664., 5024., 5384., 5744., 3960., 4256., 4552., 4848., 3148., 3376., 3604., 3832., 3150., 3324., 3498., 3672., 3882., 4124., 4366., 4608., 4867., 5182., 5497., 5812., 5228., 5568., 5908., 6248., 5589., 5954., 6319., 6684., 5950., 6340., 6730., 7120., 4738., 5060., 5382., 5704., 3621., 3870., 4119., 4368., 2566., 2764., 2962., 3160., 3850., 4124., 4398., 4672., 5163., 5518., 5873., 6228., 5524., 5904., 6284., 6664., 5885., 6290., 6695., 7100., 6246., 6676., 7106., 7536., 5090., 5444., 5798., 6152., 4253., 4526., 4799., 5072., 3134., 3356., 3578., 3800., 4330., 4636., 4942., 5248., 5331., 5726., 6121., 6516., 5692., 6112., 6532., 6952., 6053., 6498., 6943., 7388., 6414., 6884., 7354., 7824., 4930., 5316., 5702., 6088., 3989., 4286., 4583., 4880., 3830., 4076., 4322., 4568., 5322., 5660., 5998., 6336., 6395., 6830., 7265., 7700., 6756., 7216., 7676., 8136., 7117., 7602., 8087., 8572., 7478., 7988., 8498., 9008., 6306., 6724., 7142., 7560., 4877., 5198., 5519., 5840., 3128., 3296., 3464., 3632., 3832., 4064., 4296., 4528., 4772., 5072., 5372., 5672., 5088., 5408., 5728., 6048., 5404., 5744., 6084., 6424., 5720., 6080., 6440., 6800., 4472., 4768., 5064., 5360., 3356., 3584., 3812., 4040., 2282., 2444., 2606., 2768., 3358., 3580., 3802., 4024., 4409., 4694., 4979., 5264., 4644., 4944., 5244., 5544., 4879., 5194., 5509., 5824., 5114., 5444., 5774., 6104., 4038., 4308., 4578., 4848., 3407., 3614., 3821., 4028.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   109.,   118.,   127.,   136.,   103.,   110.,   117.,   124.,    68.,    72.,    76.,    80.,    26.,    32.,    38.,    44.,    98.,   112.,   126.,   140.,   224.,   248.,   272.,   296.,   412.,   448.,   484.,   520.,   556.,   592.,   628.,   664.,   554.,   584.,   614.,   644.,   466.,   488.,   510.,   532.,   284.,   296.,   308.,   320.,   155.,   170.,   185.,   200.,   433.,   466.,   499.,   532.,   846.,   900.,   954.,  1008.,  1406.,  1484.,  1562.,  1640.,  1718.,  1796.,  1874.,  1952.,  1575.,  1638.,  1701.,  1764.,  1249.,  1294.,  1339.,  1384.,   728.,   752.,   776.,   800.,   468.,   496.,   524.,   552.,  1108.,  1168.,  1228.,  1288.,  1936.,  2032.,  2128.,  2224.,  2968.,  3104.,  3240.,  3376.,  3256.,  3392.,  3528.,  3664.,  2836.,  2944.,  3052.,  3160.,  2164.,  2240.,  2316.,  2392.,  1224.,  1264.,  1304.,  1344.,   964.,   992.,  1020.,  1048.,  1860.,  1920.,  1980.,  2040.,  2960.,  3056.,  3152.,  3248.,  4280.,  4416.,  4552.,  4688.,  4312.,  4448.,  4584.,  4720.,  3652.,  3760.,  3868.,  3976.,  2724.,  2800.,  2876.,  2952.,  1512.,  1552.,  1592.,  1632.,  1167.,  1194.,  1221.,  1248.,  1985.,  2042.,  2099.,  2156.,  2978.,  3068.,  3158.,  3248.,  4158.,  4284.,  4410.,  4536.,  3894.,  4020.,  4146.,  4272.,  3267.,  3366.,  3465.,  3564.,  2417.,  2486.,  2555.,  2624.,  1332.,  1368.,  1404.,  1440.,   946.,   968.,   990.,  1012.,  1226.,  1272.,  1318.,  1364.,  1616.,  1688.,  1760.,  1832.,  2124.,  2224.,  2324.,  2424.,  1500.,  1600.,  1700.,  1800.,  1346.,  1424.,  1502.,  1580.,  1050.,  1104.,  1158.,  1212.,   604.,   632.,   660.,   688.,   221.,   234.,   247.,   260.,   511.,   538.,   565.,   592.,   874.,   916.,   958.,  1000.,  1314.,  1372.,  1430.,  1488.,  1546.,  1604.,  1662.,  1720.,  1297.,  1342.,  1387.,  1432.,   959.,   990.,  1021.,  1052.,   528.,   544.,   560.,   576.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   262.,   316.,   370.,   424.,   498.,   572.,   646.,   720.,   794.,   868.,   942.,  1016.,   733.,   790.,   847.,   904.,   583.,   622.,   661.,   700.,   340.,   360.,   380.,   400.,   378.,   416.,   454.,   492.,   930.,  1008.,  1086.,  1164.,  1664.,  1784.,  1904.,  2024.,  2588.,  2752.,  2916.,  3080.,  3244.,  3408.,  3572.,  3736.,  2762.,  2888.,  3014.,  3140.,  2066.,  2152.,  2238.,  2324.,  1148.,  1192.,  1236.,  1280.,  1163.,  1226.,  1289.,  1352.,  2641.,  2770.,  2899.,  3028.,  4446.,  4644.,  4842.,  5040.,  6590.,  6860.,  7130.,  7400.,  7670.,  7940.,  8210.,  8480.,  6327.,  6534.,  6741.,  6948.,  4609.,  4750.,  4891.,  5032.,  2504.,  2576.,  2648.,  2720.,  2452.,  2544.,  2636.,  2728.,  4308.,  4496.,  4684.,  4872.,  6608.,  6896.,  7184.,  7472.,  9368.,  9760., 10152., 10544.,  9656., 10048., 10440., 10832.,  8020.,  8320.,  8620.,  8920.,  5876.,  6080.,  6284.,  6488.,  3208.,  3312.,  3416.,  3520.,  3204.,  3296.,  3388.,  3480.,  5572.,  5760.,  5948.,  6136.,  8400.,  8688.,  8976.,  9264., 11704., 12096., 12488., 12880., 11736., 12128., 12520., 12912.,  9604.,  9904., 10204., 10504.,  6948.,  7152.,  7356.,  7560.,  3752.,  3856.,  3960.,  4064.,  3071.,  3146.,  3221.,  3296.,  4961.,  5114.,  5267.,  5420.,  7218.,  7452.,  7686.,  7920.,  9854., 10172., 10490., 10808.,  9334.,  9652.,  9970., 10288.,  7635.,  7878.,  8121.,  8364.,  5521.,  5686.,  5851.,  6016.,  2980.,  3064.,  3148.,  3232.,  2194.,  2248.,  2302.,  2356.,  2826.,  2936.,  3046.,  3156.,  3696.,  3864.,  4032.,  4200.,  4812.,  5040.,  5268.,  5496.,  3676.,  3904.,  4132.,  4360.,  3170.,  3344.,  3518.,  3692.,  2394.,  2512.,  2630.,  2748.,  1340.,  1400.,  1460.,  1520.,   493.,   522.,   551.,   580.,  1119.,  1178.,  1237.,  1296.,  1882.,  1972.,  2062.,  2152.,  2786.,  2908.,  3030.,  3152.,  3274.,  3396.,  3518.,  3640.,  2689.,  2782.,  2875.,  2968.,  1951.,  2014.,  2077.,  2140.,  1056.,  1088.,  1120.,  1152.,    33.,    66.,    99.,   132.,   199.,   266.,   333.,   400.,   502.,   604.,   706.,   808.,   946.,  1084.,  1222.,  1360.,  1498.,  1636.,  1774.,  1912.,  1357.,  1462.,  1567.,  1672.,  1063.,  1134.,  1205.,  1276.,   612.,   648.,   684.,   720.,   730.,   800.,   870.,   940.,  1762.,  1904.,  2046.,  2188.,  3104.,  3320.,  3536.,  3752.,  4764.,  5056.,  5348.,  5640.,  5932.,  6224.,  6516.,  6808.,  4970.,  5192.,  5414.,  5636.,  3666.,  3816.,  3966.,  4116.,  2012.,  2088.,  2164.,  2240.,  2171.,  2282.,  2393.,  2504.,  4849.,  5074.,  5299.,  5524.,  8046.,  8388.,  8730.,  9072., 11774., 12236., 12698., 13160., 13622., 14084., 14546., 15008., 11079., 11430., 11781., 12132.,  7969.,  8206.,  8443.,  8680.,  4280.,  4400.,  4520.,  4640.,  4436.,  4592.,  4748.,  4904.,  7508.,  7824.,  8140.,  8456., 11280., 11760., 12240., 12720., 15768., 16416., 17064., 17712., 16056., 16704., 17352., 18000., 13204., 13696., 14188., 14680.,  9588.,  9920., 10252., 10584.,  5192.,  5360.,  5528.,  5696.,  5444.,  5600.,  5756.,  5912.,  9284.,  9600.,  9916., 10232., 13840., 14320., 14800., 15280., 19128., 19776., 20424., 21072., 19160., 19808., 20456., 21104., 15556., 16048., 16540., 17032., 11172., 11504., 11836., 12168.,  5992.,  6160.,  6328.,  6496.,  4975.,  5098.,  5221.,  5344.,  7937.,  8186.,  8435.,  8684., 11458., 11836., 12214., 12592., 15550., 16060., 16570., 17080., 14774., 15284., 15794., 16304., 12003., 12390., 12777., 13164.,  8625.,  8886.,  9147.,  9408.,  4628.,  4760.,  4892.,  5024.,  3442.,  3528.,  3614.,  3700.,  4426.,  4600.,  4774.,  4948.,  5776.,  6040.,  6304.,  6568.,  7500.,  7856.,  8212.,  8568.,  5852.,  6208.,  6564.,  6920.,  4994.,  5264.,  5534.,  5804.,  3738.,  3920.,  4102.,  4284.,  2076.,  2168.,  2260.,  2352.,   765.,   810.,   855.,   900.,  1727.,  1818.,  1909.,  2000.,  2890.,  3028.,  3166.,  3304.,  4258.,  4444.,  4630.,  4816.,  5002.,  5188.,  5374.,  5560.,  4081.,  4222.,  4363.,  4504.,  2943.,  3038.,  3133.,  3228.,  1584.,  1632.,  1680.,  1728.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.,  2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.,  2499.,  2817.,  3135.,  3453.,  3160.,  3632.,  4104.,  4576.,  4199.,  4849.,  5499.,  6149.,  4961.,  5731.,  6501.,  7271.,  5723.,  6613.,  7503.,  8393.,  6485.,  7495.,  8505.,  9515.,  5944.,  6800.,  7656.,  8512.,  4193.,  4871.,  5549.,  6227.,  3476.,  4028.,  4580.,  5132.,  5408.,  6208.,  7008.,  7808.,  7044.,  8124.,  9204., 10284.,  8124.,  9364., 10604., 11844.,  9204., 10604., 12004., 13404., 10284., 11844., 13404., 14964.,  8864., 10176., 11488., 12800.,  6716.,  7748.,  8780.,  9812.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  4125.,  4719.,  5313.,  5907.,  5736.,  6608.,  7480.,  8352.,  8105.,  9295., 10485., 11675.,  9407., 10797., 12187., 13577., 10709., 12299., 13889., 15479., 12011., 13801., 15591., 17381., 10248., 11760., 13272., 14784.,  8495.,  9689., 10883., 12077.,  4525.,  5311.,  6097.,  6883.,  7464.,  8592.,  9720., 10848.,  9369., 10879., 12389., 13899., 10671., 12381., 14091., 15801., 11973., 13883., 15793., 17703., 13275., 15385., 17495., 19605., 11976., 13744., 15512., 17280.,  9407., 10793., 12179., 13565.,  3988.,  4540.,  5092.,  5644.,  5408.,  6208.,  7008.,  7808.,  7556.,  8636.,  9716., 10796.,  8636.,  9876., 11116., 12356.,  9716., 11116., 12516., 13916., 10796., 12356., 13916., 15476.,  8864., 10176., 11488., 12800.,  7228.,  8260.,  9292., 10324.,  3171.,  3681.,  4191.,  4701.,  4888.,  5616.,  6344.,  7072.,  6279.,  7249.,  8219.,  9189.,  7105.,  8195.,  9285., 10375.,  7931.,  9141., 10351., 11561.,  8757., 10087., 11417., 12747.,  7416.,  8528.,  9640., 10752.,  5665.,  6535.,  7405.,  8275.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   555.,   621.,   687.,   753.,   400.,   452.,   504.,   556.,    23.,    53.,    83.,   113.,    58.,   102.,   146.,   190.,   336.,   440.,   544.,   648.,   898.,  1078.,  1258.,  1438.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1734.,  1962.,  2190.,  2418.,   960.,  1128.,  1296.,  1464.,   190.,   282.,   374.,   466.,   287.,   401.,   515.,   629.,  1144.,  1396.,  1648.,  1900.,  2571.,  2985.,  3399.,  3813.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  3281.,  3767.,  4253.,  4739.,  1904.,  2252.,  2600.,  2948.,   629.,   815.,  1001.,  1187.,   820.,  1036.,  1252.,  1468.,  2624.,  3088.,  3552.,  4016.,  4900.,  5644.,  6388.,  7132.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5548.,  6388.,  7228.,  8068.,  3488.,  4080.,  4672.,  5264.,  1468.,  1780.,  2092.,  2404.,  1588.,  1804.,  2020.,  2236.,  3648.,  4112.,  4576.,  5040.,  5668.,  6412.,  7156.,  7900.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5292.,  6132.,  6972.,  7812.,  3488.,  4080.,  4672.,  5264.,  2236.,  2548.,  2860.,  3172.,  1815.,  2025.,  2235.,  2445.,  3528.,  3972.,  4416.,  4860.,  4595.,  5297.,  5999.,  6701.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  5081.,  5855.,  6629.,  7403.,  4384.,  4924.,  5464.,  6004.,  2349.,  2631.,  2913.,  3195.,  1354.,  1526.,  1698.,  1870.,  1872.,  2232.,  2592.,  2952.,  3122.,  3686.,  4250.,  4814.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5014.,  5626.,  6238.,  6850.,  3872.,  4296.,  4720.,  5144.,  1678.,  1898.,  2118.,  2338.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  2165.,  2495.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.,     5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   555.,   621.,   687.,   753.,   400.,   452.,   504.,   556.,    23.,    53.,    83.,   113.,    58.,   102.,   146.,   190.,   336.,   440.,   544.,   648.,   898.,  1078.,  1258.,  1438.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1734.,  1962.,  2190.,  2418.,   960.,  1128.,  1296.,  1464.,   190.,   282.,   374.,   466.,   287.,   401.,   515.,   629.,  1144.,  1396.,  1648.,  1900.,  2571.,  2985.,  3399.,  3813.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  3281.,  3767.,  4253.,  4739.,  1904.,  2252.,  2600.,  2948.,   629.,   815.,  1001.,  1187.,   820.,  1036.,  1252.,  1468.,  2624.,  3088.,  3552.,  4016.,  4900.,  5644.,  6388.,  7132.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5548.,  6388.,  7228.,  8068.,  3488.,  4080.,  4672.,  5264.,  1468.,  1780.,  2092.,  2404.,  1588.,  1804.,  2020.,  2236.,  3648.,  4112.,  4576.,  5040.,  5668.,  6412.,  7156.,  7900.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5292.,  6132.,  6972.,  7812.,  3488.,  4080.,  4672.,  5264.,  2236.,  2548.,  2860.,  3172.,  1815.,  2025.,  2235.,  2445.,  3528.,  3972.,  4416.,  4860.,  4595.,  5297.,  5999.,  6701.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  5081.,  5855.,  6629.,  7403.,  4384.,  4924.,  5464.,  6004.,  2349.,  2631.,  2913.,  3195.,  1354.,  1526.,  1698.,  1870.,  1872.,  2232.,  2592.,  2952.,  3122.,  3686.,  4250.,  4814.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5014.,  5626.,  6238.,  6850.,  3872.,  4296.,  4720.,  5144.,  1678.,  1898.,  2118.,  2338.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  2165.,  2495.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.,     5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   555.,   621.,   687.,   753.,   400.,   452.,   504.,   556.,    23.,    53.,    83.,   113.,    58.,   102.,   146.,   190.,   336.,   440.,   544.,   648.,   898.,  1078.,  1258.,  1438.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1734.,  1962.,  2190.,  2418.,   960.,  1128.,  1296.,  1464.,   190.,   282.,   374.,   466.,   287.,   401.,   515.,   629.,  1144.,  1396.,  1648.,  1900.,  2571.,  2985.,  3399.,  3813.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  3281.,  3767.,  4253.,  4739.,  1904.,  2252.,  2600.,  2948.,   629.,   815.,  1001.,  1187.,   820.,  1036.,  1252.,  1468.,  2624.,  3088.,  3552.,  4016.,  4900.,  5644.,  6388.,  7132.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5548.,  6388.,  7228.,  8068.,  3488.,  4080.,  4672.,  5264.,  1468.,  1780.,  2092.,  2404.,  1588.,  1804.,  2020.,  2236.,  3648.,  4112.,  4576.,  5040.,  5668.,  6412.,  7156.,  7900.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5292.,  6132.,  6972.,  7812.,  3488.,  4080.,  4672.,  5264.,  2236.,  2548.,  2860.,  3172.,  1815.,  2025.,  2235.,  2445.,  3528.,  3972.,  4416.,  4860.,  4595.,  5297.,  5999.,  6701.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  5081.,  5855.,  6629.,  7403.,  4384.,  4924.,  5464.,  6004.,  2349.,  2631.,  2913.,  3195.,  1354.,  1526.,  1698.,  1870.,  1872.,  2232.,  2592.,  2952.,  3122.,  3686.,  4250.,  4814.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5014.,  5626.,  6238.,  6850.,  3872.,  4296.,  4720.,  5144.,  1678.,  1898.,  2118.,  2338.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  2165.,  2495.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,  1050.,  2610.,  4170.,  5730.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2150.,  5390.,  8630., 11870.,  2350.,  5910.,  9470., 13030.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1650.,  4170.,  6690.,  9210.,   840.,  2088.,  3336.,  4584.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1720.,  4312.,  6904.,  9496.,  1880.,  4728.,  7576., 10424.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1320.,  3336.,  5352.,  7368.,   630.,  1566.,  2502.,  3438.,  1080.,  2712.,  4344.,  5976.,  1170.,  2922.,  4674.,  6426.,  1290.,  3234.,  5178.,  7122.,  1410.,  3546.,  5682.,  7818.,  1530.,  3858.,  6186.,  8514.,  1080.,  2712.,  4344.,  5976.,   990.,  2502.,  4014.,  5526.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}