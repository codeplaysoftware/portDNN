/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;


template <typename Pair>
using FilterBackpropWindow7Stride4 = WindowStrideTest<Pair, 7, 4>;
TYPED_TEST_SUITE(FilterBackpropWindow7Stride4, GTestTypeTriples);
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1508., 1536., 2125., 2164., 2203., 1336., 1360., 1816., 1844., 2554., 2593., 2632., 1600., 1624., 2151., 2184., 3021., 3066., 3111., 1884., 1911., 2514., 2547., 3516., 3561., 3606., 2181., 2208., 2877., 2910., 4011., 4056., 4101., 2478., 2505., 1096., 1112., 1474., 1495., 1516.,  868.,  880., 1272., 1288., 1705., 1726., 1747., 1000., 1012.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 342.,  352.,  362.,  372.,  382.,  392.,  402.,  452.,  462.,  472.,  482.,  492.,  502.,  512.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  672.,  682.,  692.,  702.,  712.,  722.,  732.,  782.,  792.,  802.,  812.,  822.,  832.,  842.,  892.,  902.,  912.,  922.,  932.,  942.,  952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2820., 3016., 2872., 3072., 3956., 4250., 4028., 4328., 4100., 4406., 2472., 2672., 2516., 2720., 3392., 3632., 3444., 3688., 4748., 5108., 4820., 5186., 4892., 5264., 2956., 3200., 3000., 3248., 4008., 4302., 4068., 4368., 5601., 6042., 5682., 6132., 5763., 6222., 3468., 3768., 3516., 3822., 4668., 5028., 4728., 5094., 6492., 7032., 6573., 7122., 6654., 7212., 3996., 4362., 4044., 4416., 5328., 5754., 5388., 5820., 7383., 8022., 7464., 8112., 7545., 8202., 4524., 4956., 4572., 5010., 1952., 2192., 1980., 2224., 2588., 2948., 2624., 2990., 2660., 3032., 1492., 1736., 1512., 1760., 2260., 2544., 2288., 2576., 2984., 3410., 3020., 3452., 3056., 3494., 1712., 2000., 1732., 2024.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,  664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,  808.,  964.,  824.,  984.,  840., 1004.,  856., 1024.,  936., 1124.,  952., 1144.,  968., 1164.,  984., 1184., 1000., 1204., 1016., 1224., 1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404., 1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584., 1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684., 1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864., 1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044., 1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5444.,  5640.,  5836.,  6032.,  5544.,  5744.,  5944.,  6144.,  7618.,  7912.,  8206.,  8500.,  7756.,  8056.,  8356.,  8656.,  7894.,  8200.,  8506.,  8812.,  4744.,  4944.,  5144.,  5344.,  4828.,  5032.,  5236.,  5440.,  6544.,  6784.,  7024.,  7264.,  6644.,  6888.,  7132.,  7376.,  9136.,  9496.,  9856., 10216.,  9274.,  9640., 10006., 10372.,  9412.,  9784., 10156., 10528.,  5668.,  5912.,  6156.,  6400.,  5752.,  6000.,  6248.,  6496.,  7722.,  8016.,  8310.,  8604.,  7836.,  8136.,  8436.,  8736., 10761., 11202., 11643., 12084., 10914., 11364., 11814., 12264., 11067., 11526., 11985., 12444.,  6636.,  6936.,  7236.,  7536.,  6726.,  7032.,  7338.,  7644.,  8976.,  9336.,  9696., 10056.,  9090.,  9456.,  9822., 10188., 12444., 12984., 13524., 14064., 12597., 13146., 13695., 14244., 12750., 13308., 13866., 14424.,  7626.,  7992.,  8358.,  8724.,  7716.,  8088.,  8460.,  8832., 10230., 10656., 11082., 11508., 10344., 10776., 11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928., 15576., 16224., 14433., 15090., 15747., 16404.,  8616.,  9048.,  9480.,  9912.,  8706.,  9144.,  9582., 10020.,  3664.,  3904.,  4144.,  4384.,  3716.,  3960.,  4204.,  4448.,  4816.,  5176.,  5536.,  5896.,  4882.,  5248.,  5614.,  5980.,  4948.,  5320.,  5692.,  6064.,  2740.,  2984.,  3228.,  3472.,  2776.,  3024.,  3272.,  3520.,  4236.,  4520.,  4804.,  5088.,  4288.,  4576.,  4864.,  5152.,  5542.,  5968.,  6394.,  6820.,  5608.,  6040.,  6472.,  6904.,  5674.,  6112.,  6550.,  6988.,  3136.,  3424.,  3712.,  4000.,  3172.,  3464.,  3756.,  4048.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232., 1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528., 1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520., 1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888., 1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680., 1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248., 1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968., 2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448., 1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256., 2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808., 2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416., 2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168., 2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704., 2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368., 2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992., 3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728., 2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280., 3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088., 3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440., 3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2988., 3016., 3044., 3072., 4211., 4250., 4289., 4328., 4367., 4406., 2648., 2672., 2696., 2720., 3604., 3632., 3660., 3688., 5069., 5108., 5147., 5186., 5225., 5264., 3176., 3200., 3224., 3248., 4269., 4302., 4335., 4368., 5997., 6042., 6087., 6132., 6177., 6222., 3741., 3768., 3795., 3822., 4995., 5028., 5061., 5094., 6987., 7032., 7077., 7122., 7167., 7212., 4335., 4362., 4389., 4416., 5721., 5754., 5787., 5820., 7977., 8022., 8067., 8112., 8157., 8202., 4929., 4956., 4983., 5010., 2176., 2192., 2208., 2224., 2927., 2948., 2969., 2990., 3011., 3032., 1724., 1736., 1748., 1760., 2528., 2544., 2560., 2576., 3389., 3410., 3431., 3452., 3473., 3494., 1988., 2000., 2012., 2024.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 674.,  684.,  694.,  704.,  714.,  724.,  734.,  744.,  754.,  764.,  774.,  784.,  794.,  804.,  894.,  904.,  914.,  924.,  934.,  944.,  954.,  964.,  974.,  984.,  994., 1004., 1014., 1024., 1114., 1124., 1134., 1144., 1154., 1164., 1174., 1184., 1194., 1204., 1214., 1224., 1234., 1244., 1334., 1344., 1354., 1364., 1374., 1384., 1394., 1404., 1414., 1424., 1434., 1444., 1454., 1464., 1554., 1564., 1574., 1584., 1594., 1604., 1614., 1624., 1634., 1644., 1654., 1664., 1674., 1684., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1994., 2004., 2014., 2024., 2034., 2044., 2054., 2064., 2074., 2084., 2094., 2104., 2114., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5588.,  5976.,  5640.,  6032.,  5692.,  6088.,  5744.,  6144.,  7840.,  8422.,  7912.,  8500.,  7984.,  8578.,  8056.,  8656.,  8128.,  8734.,  8200.,  8812.,  4900.,  5296.,  4944.,  5344.,  4988.,  5392.,  5032.,  5440.,  6732.,  7208.,  6784.,  7264.,  6836.,  7320.,  6888.,  7376.,  9424., 10138.,  9496., 10216.,  9568., 10294.,  9640., 10372.,  9712., 10450.,  9784., 10528.,  5868.,  6352.,  5912.,  6400.,  5956.,  6448.,  6000.,  6496.,  7956.,  8538.,  8016.,  8604.,  8076.,  8670.,  8136.,  8736., 11121., 11994., 11202., 12084., 11283., 12174., 11364., 12264., 11445., 12354., 11526., 12444.,  6888.,  7482.,  6936.,  7536.,  6984.,  7590.,  7032.,  7644.,  9276.,  9990.,  9336., 10056.,  9396., 10122.,  9456., 10188., 12903., 13974., 12984., 14064., 13065., 14154., 13146., 14244., 13227., 14334., 13308., 14424.,  7944.,  8670.,  7992.,  8724.,  8040.,  8778.,  8088.,  8832., 10596., 11442., 10656., 11508., 10716., 11574., 10776., 11640., 14685., 15954., 14766., 16044., 14847., 16134., 14928., 16224., 15009., 16314., 15090., 16404.,  9000.,  9858.,  9048.,  9912.,  9096.,  9966.,  9144., 10020.,  3876.,  4352.,  3904.,  4384.,  3932.,  4416.,  3960.,  4448.,  5140.,  5854.,  5176.,  5896.,  5212.,  5938.,  5248.,  5980.,  5284.,  6022.,  5320.,  6064.,  2964.,  3448.,  2984.,  3472.,  3004.,  3496.,  3024.,  3520.,  4492.,  5056.,  4520.,  5088.,  4548.,  5120.,  4576.,  5152.,  5932.,  6778.,  5968.,  6820.,  6004.,  6862.,  6040.,  6904.,  6076.,  6946.,  6112.,  6988.,  3404.,  3976.,  3424.,  4000.,  3444.,  4024.,  3464.,  4048.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1152., 1348., 1168., 1368., 1184., 1388., 1200., 1408., 1216., 1428., 1232., 1448., 1248., 1468., 1264., 1488., 1280., 1508., 1296., 1528., 1312., 1548., 1328., 1568., 1344., 1588., 1360., 1608., 1504., 1788., 1520., 1808., 1536., 1828., 1552., 1848., 1568., 1868., 1584., 1888., 1600., 1908., 1616., 1928., 1632., 1948., 1648., 1968., 1664., 1988., 1680., 2008., 1696., 2028., 1712., 2048., 1856., 2228., 1872., 2248., 1888., 2268., 1904., 2288., 1920., 2308., 1936., 2328., 1952., 2348., 1968., 2368., 1984., 2388., 2000., 2408., 2016., 2428., 2032., 2448., 2048., 2468., 2064., 2488., 2208., 2668., 2224., 2688., 2240., 2708., 2256., 2728., 2272., 2748., 2288., 2768., 2304., 2788., 2320., 2808., 2336., 2828., 2352., 2848., 2368., 2868., 2384., 2888., 2400., 2908., 2416., 2928., 2560., 3108., 2576., 3128., 2592., 3148., 2608., 3168., 2624., 3188., 2640., 3208., 2656., 3228., 2672., 3248., 2688., 3268., 2704., 3288., 2720., 3308., 2736., 3328., 2752., 3348., 2768., 3368., 2912., 3548., 2928., 3568., 2944., 3588., 2960., 3608., 2976., 3628., 2992., 3648., 3008., 3668., 3024., 3688., 3040., 3708., 3056., 3728., 3072., 3748., 3088., 3768., 3104., 3788., 3120., 3808., 3264., 3988., 3280., 4008., 3296., 4028., 3312., 4048., 3328., 4068., 3344., 4088., 3360., 4108., 3376., 4128., 3392., 4148., 3408., 4168., 3424., 4188., 3440., 4208., 3456., 4228., 3472., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2852.,  2984.,  3116.,  3248.,  2952.,  3088.,  3224.,  3360.,  3052.,  3192.,  3332.,  3472.,  3152.,  3296.,  3440.,  3584.,  3962.,  4160.,  4358.,  4556.,  4100.,  4304.,  4508.,  4712.,  4238.,  4448.,  4658.,  4868.,  4376.,  4592.,  4808.,  5024.,  4514.,  4736.,  4958.,  5180.,  4652.,  4880.,  5108.,  5336.,  2492.,  2632.,  2772.,  2912.,  2576.,  2720.,  2864.,  3008.,  2660.,  2808.,  2956.,  3104.,  2744.,  2896.,  3048.,  3200.,  5052.,  5272.,  5492.,  5712.,  5152.,  5376.,  5600.,  5824.,  5252.,  5480.,  5708.,  5936.,  5352.,  5584.,  5816.,  6048.,  6998.,  7328.,  7658.,  7988.,  7136.,  7472.,  7808.,  8144.,  7274.,  7616.,  7958.,  8300.,  7412.,  7760.,  8108.,  8456.,  7550.,  7904.,  8258.,  8612.,  7688.,  8048.,  8408.,  8768.,  4340.,  4568.,  4796.,  5024.,  4424.,  4656.,  4888.,  5120.,  4508.,  4744.,  4980.,  5216.,  4592.,  4832.,  5072.,  5312.,  7394.,  7720.,  8046.,  8372.,  7508.,  7840.,  8172.,  8504.,  7622.,  7960.,  8298.,  8636.,  7736.,  8080.,  8424.,  8768., 10233., 10722., 11211., 11700., 10386., 10884., 11382., 11880., 10539., 11046., 11553., 12060., 10692., 11208., 11724., 12240., 10845., 11370., 11895., 12420., 10998., 11532., 12066., 12600.,  6270.,  6608.,  6946.,  7284.,  6360.,  6704.,  7048.,  7392.,  6450.,  6800.,  7150.,  7500.,  6540.,  6896.,  7252.,  7608.,  9902., 10360., 10818., 11276., 10016., 10480., 10944., 11408., 10130., 10600., 11070., 11540., 10244., 10720., 11196., 11672., 13599., 14286., 14973., 15660., 13752., 14448., 15144., 15840., 11217., 11794., 12371., 12948., 11370., 11956., 12542., 13128., 11523., 12118., 12713., 13308., 11676., 12280., 12884., 13488.,  8250.,  8720.,  9190.,  9660.,  8340.,  8816.,  9292.,  9768.,  8430.,  8912.,  9394.,  9876.,  8520.,  9008.,  9496.,  9984.,  7546.,  7880.,  8214.,  8548.,  7660.,  8000.,  8340.,  8680.,  7774.,  8120.,  8466.,  8812.,  7888.,  8240.,  8592.,  8944., 10437., 10938., 11439., 11940., 10590., 11100., 11610., 12120., 10743., 11262., 11781., 12300., 10896., 11424., 11952., 12480., 11049., 11586., 12123., 12660., 11202., 11748., 12294., 12840.,  6390.,  6736.,  7082.,  7428.,  6480.,  6832.,  7184.,  7536.,  6570.,  6928.,  7286.,  7644.,  6660.,  7024.,  7388.,  7752.,  2412.,  2632.,  2852.,  3072.,  2464.,  2688.,  2912.,  3136.,  2516.,  2744.,  2972.,  3200.,  2568.,  2800.,  3032.,  3264.,  3038.,  3368.,  3698.,  4028.,  3104.,  3440.,  3776.,  4112.,  3170.,  3512.,  3854.,  4196.,  3236.,  3584.,  3932.,  4280.,  3302.,  3656.,  4010.,  4364.,  3368.,  3728.,  4088.,  4448.,  1604.,  1832.,  2060.,  2288.,  1640.,  1872.,  2104.,  2336.,  1676.,  1912.,  2148.,  2384.,  1712.,  1952.,  2192.,  2432.,  3556.,  3864.,  4172.,  4480.,  3608.,  3920.,  4232.,  4544.,  3660.,  3976.,  4292.,  4608.,  3712.,  4032.,  4352.,  4672.,  4490.,  4952.,  5414.,  5876.,  4556.,  5024.,  5492.,  5960.,  4622.,  5096.,  5570.,  6044.,  4688.,  5168.,  5648.,  6128.,  4754.,  5240.,  5726.,  6212.,  4820.,  5312.,  5804.,  6296.,  2396.,  2712.,  3028.,  3344.,  2432.,  2752.,  3072.,  3392.,  2468.,  2792.,  3116.,  3440.,  2504.,  2832.,  3160.,  3488.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2108., 2304., 2500., 2696., 2136., 2336., 2536., 2736., 2164., 2368., 2572., 2776., 2192., 2400., 2608., 2816., 2220., 2432., 2644., 2856., 2248., 2464., 2680., 2896., 2276., 2496., 2716., 2936., 2304., 2528., 2752., 2976., 2332., 2560., 2788., 3016., 2360., 2592., 2824., 3056., 2388., 2624., 2860., 3096., 2416., 2656., 2896., 3136., 2444., 2688., 2932., 3176., 2472., 2720., 2968., 3216., 2724., 3008., 3292., 3576., 2752., 3040., 3328., 3616., 2780., 3072., 3364., 3656., 2808., 3104., 3400., 3696., 2836., 3136., 3436., 3736., 2864., 3168., 3472., 3776., 2892., 3200., 3508., 3816., 2920., 3232., 3544., 3856., 2948., 3264., 3580., 3896., 2976., 3296., 3616., 3936., 3004., 3328., 3652., 3976., 3032., 3360., 3688., 4016., 3060., 3392., 3724., 4056., 3088., 3424., 3760., 4096., 3340., 3712., 4084., 4456., 3368., 3744., 4120., 4496., 3396., 3776., 4156., 4536., 3424., 3808., 4192., 4576., 3452., 3840., 4228., 4616., 3480., 3872., 4264., 4656., 3508., 3904., 4300., 4696., 3536., 3936., 4336., 4736., 3564., 3968., 4372., 4776., 3592., 4000., 4408., 4816., 3620., 4032., 4444., 4856., 3648., 4064., 4480., 4896., 3676., 4096., 4516., 4936., 3704., 4128., 4552., 4976., 3956., 4416., 4876., 5336., 3984., 4448., 4912., 5376., 4012., 4480., 4948., 5416., 4040., 4512., 4984., 5456., 4068., 4544., 5020., 5496., 4096., 4576., 5056., 5536., 4124., 4608., 5092., 5576., 4152., 4640., 5128., 5616., 4180., 4672., 5164., 5656., 4208., 4704., 5200., 5696., 4236., 4736., 5236., 5736., 4264., 4768., 5272., 5776., 4292., 4800., 5308., 5816., 4320., 4832., 5344., 5856., 4572., 5120., 5668., 6216., 4600., 5152., 5704., 6256., 4628., 5184., 5740., 6296., 4656., 5216., 5776., 6336., 4684., 5248., 5812., 6376., 4712., 5280., 5848., 6416., 4740., 5312., 5884., 6456., 4768., 5344., 5920., 6496., 4796., 5376., 5956., 6536., 4824., 5408., 5992., 6576., 4852., 5440., 6028., 6616., 4880., 5472., 6064., 6656., 4908., 5504., 6100., 6696., 4936., 5536., 6136., 6736., 5188., 5824., 6460., 7096., 5216., 5856., 6496., 7136., 5244., 5888., 6532., 7176., 5272., 5920., 6568., 7216., 5300., 5952., 6604., 7256., 5328., 5984., 6640., 7296., 5356., 6016., 6676., 7336., 5384., 6048., 6712., 7376., 5412., 6080., 6748., 7416., 5440., 6112., 6784., 7456., 5468., 6144., 6820., 7496., 5496., 6176., 6856., 7536., 5524., 6208., 6892., 7576., 5552., 6240., 6928., 7616., 5804., 6528., 7252., 7976., 5832., 6560., 7288., 8016., 5860., 6592., 7324., 8056., 5888., 6624., 7360., 8096., 5916., 6656., 7396., 8136., 5944., 6688., 7432., 8176., 5972., 6720., 7468., 8216., 6000., 6752., 7504., 8256., 6028., 6784., 7540., 8296., 6056., 6816., 7576., 8336., 6084., 6848., 7612., 8376., 6112., 6880., 7648., 8416., 6140., 6912., 7684., 8456., 6168., 6944., 7720., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5948.,  5976.,  6004.,  6032.,  6060.,  6088.,  6116.,  6144.,  8383.,  8422.,  8461.,  8500.,  8539.,  8578.,  8617.,  8656.,  8695.,  8734.,  8773.,  8812.,  5272.,  5296.,  5320.,  5344.,  5368.,  5392.,  5416.,  5440.,  7180.,  7208.,  7236.,  7264.,  7292.,  7320.,  7348.,  7376., 10099., 10138., 10177., 10216., 10255., 10294., 10333., 10372., 10411., 10450., 10489., 10528.,  6328.,  6352.,  6376.,  6400.,  6424.,  6448.,  6472.,  6496.,  8505.,  8538.,  8571.,  8604.,  8637.,  8670.,  8703.,  8736., 11949., 11994., 12039., 12084., 12129., 12174., 12219., 12264., 12309., 12354., 12399., 12444.,  7455.,  7482.,  7509.,  7536.,  7563.,  7590.,  7617.,  7644.,  9957.,  9990., 10023., 10056., 10089., 10122., 10155., 10188., 13929., 13974., 14019., 14064., 14109., 14154., 14199., 14244., 14289., 14334., 14379., 14424.,  8643.,  8670.,  8697.,  8724.,  8751.,  8778.,  8805.,  8832., 11409., 11442., 11475., 11508., 11541., 11574., 11607., 11640., 15909., 15954., 15999., 16044., 16089., 16134., 16179., 16224., 16269., 16314., 16359., 16404.,  9831.,  9858.,  9885.,  9912.,  9939.,  9966.,  9993., 10020.,  4336.,  4352.,  4368.,  4384.,  4400.,  4416.,  4432.,  4448.,  5833.,  5854.,  5875.,  5896.,  5917.,  5938.,  5959.,  5980.,  6001.,  6022.,  6043.,  6064.,  3436.,  3448.,  3460.,  3472.,  3484.,  3496.,  3508.,  3520.,  5040.,  5056.,  5072.,  5088.,  5104.,  5120.,  5136.,  5152.,  6757.,  6778.,  6799.,  6820.,  6841.,  6862.,  6883.,  6904.,  6925.,  6946.,  6967.,  6988.,  3964.,  3976.,  3988.,  4000.,  4012.,  4024.,  4036.,  4048.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1338., 1348., 1358., 1368., 1378., 1388., 1398., 1408., 1418., 1428., 1438., 1448., 1458., 1468., 1478., 1488., 1498., 1508., 1518., 1528., 1538., 1548., 1558., 1568., 1578., 1588., 1598., 1608., 1778., 1788., 1798., 1808., 1818., 1828., 1838., 1848., 1858., 1868., 1878., 1888., 1898., 1908., 1918., 1928., 1938., 1948., 1958., 1968., 1978., 1988., 1998., 2008., 2018., 2028., 2038., 2048., 2218., 2228., 2238., 2248., 2258., 2268., 2278., 2288., 2298., 2308., 2318., 2328., 2338., 2348., 2358., 2368., 2378., 2388., 2398., 2408., 2418., 2428., 2438., 2448., 2458., 2468., 2478., 2488., 2658., 2668., 2678., 2688., 2698., 2708., 2718., 2728., 2738., 2748., 2758., 2768., 2778., 2788., 2798., 2808., 2818., 2828., 2838., 2848., 2858., 2868., 2878., 2888., 2898., 2908., 2918., 2928., 3098., 3108., 3118., 3128., 3138., 3148., 3158., 3168., 3178., 3188., 3198., 3208., 3218., 3228., 3238., 3248., 3258., 3268., 3278., 3288., 3298., 3308., 3318., 3328., 3338., 3348., 3358., 3368., 3538., 3548., 3558., 3568., 3578., 3588., 3598., 3608., 3618., 3628., 3638., 3648., 3658., 3668., 3678., 3688., 3698., 3708., 3718., 3728., 3738., 3748., 3758., 3768., 3778., 3788., 3798., 3808., 3978., 3988., 3998., 4008., 4018., 4028., 4038., 4048., 4058., 4068., 4078., 4088., 4098., 4108., 4118., 4128., 4138., 4148., 4158., 4168., 4178., 4188., 4198., 4208., 4218., 4228., 4238., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2932.,  3192.,  2984.,  3248.,  3036.,  3304.,  3088.,  3360.,  3140.,  3416.,  3192.,  3472.,  3244.,  3528.,  3296.,  3584.,  4088.,  4478.,  4160.,  4556.,  4232.,  4634.,  4304.,  4712.,  4376.,  4790.,  4448.,  4868.,  4520.,  4946.,  4592.,  5024.,  4664.,  5102.,  4736.,  5180.,  4808.,  5258.,  4880.,  5336.,  2588.,  2864.,  2632.,  2912.,  2676.,  2960.,  2720.,  3008.,  2764.,  3056.,  2808.,  3104.,  2852.,  3152.,  2896.,  3200.,  5220.,  5656.,  5272.,  5712.,  5324.,  5768.,  5376.,  5824.,  5428.,  5880.,  5480.,  5936.,  5532.,  5992.,  5584.,  6048.,  7256.,  7910.,  7328.,  7988.,  7400.,  8066.,  7472.,  8144.,  7544.,  8222.,  7616.,  8300.,  7688.,  8378.,  7760.,  8456.,  7832.,  8534.,  7904.,  8612.,  7976.,  8690.,  8048.,  8768.,  4524.,  4976.,  4568.,  5024.,  4612.,  5072.,  4656.,  5120.,  4700.,  5168.,  4744.,  5216.,  4788.,  5264.,  4832.,  5312.,  7660.,  8306.,  7720.,  8372.,  7780.,  8438.,  7840.,  8504.,  7900.,  8570.,  7960.,  8636.,  8020.,  8702.,  8080.,  8768., 10641., 11610., 10722., 11700., 10803., 11790., 10884., 11880., 10965., 11970., 11046., 12060., 11127., 12150., 11208., 12240., 11289., 12330., 11370., 12420., 11451., 12510., 11532., 12600.,  6560.,  7230.,  6608.,  7284.,  6656.,  7338.,  6704.,  7392.,  6752.,  7446.,  6800.,  7500.,  6848.,  7554.,  6896.,  7608., 10300., 11210., 10360., 11276., 10420., 11342., 10480., 11408., 10540., 11474., 10600., 11540., 10660., 11606., 10720., 11672., 14205., 15570., 14286., 15660., 14367., 15750., 14448., 15840., 11713., 12858., 11794., 12948., 11875., 13038., 11956., 13128., 12037., 13218., 12118., 13308., 12199., 13398., 12280., 13488.,  8672.,  9606.,  8720.,  9660.,  8768.,  9714.,  8816.,  9768.,  8864.,  9822.,  8912.,  9876.,  8960.,  9930.,  9008.,  9984.,  7820.,  8482.,  7880.,  8548.,  7940.,  8614.,  8000.,  8680.,  8060.,  8746.,  8120.,  8812.,  8180.,  8878.,  8240.,  8944., 10857., 11850., 10938., 11940., 11019., 12030., 11100., 12120., 11181., 12210., 11262., 12300., 11343., 12390., 11424., 12480., 11505., 12570., 11586., 12660., 11667., 12750., 11748., 12840.,  6688.,  7374.,  6736.,  7428.,  6784.,  7482.,  6832.,  7536.,  6880.,  7590.,  6928.,  7644.,  6976.,  7698.,  7024.,  7752.,  2604.,  3040.,  2632.,  3072.,  2660.,  3104.,  2688.,  3136.,  2716.,  3168.,  2744.,  3200.,  2772.,  3232.,  2800.,  3264.,  3332.,  3986.,  3368.,  4028.,  3404.,  4070.,  3440.,  4112.,  3476.,  4154.,  3512.,  4196.,  3548.,  4238.,  3584.,  4280.,  3620.,  4322.,  3656.,  4364.,  3692.,  4406.,  3728.,  4448.,  1812.,  2264.,  1832.,  2288.,  1852.,  2312.,  1872.,  2336.,  1892.,  2360.,  1912.,  2384.,  1932.,  2408.,  1952.,  2432.,  3836.,  4448.,  3864.,  4480.,  3892.,  4512.,  3920.,  4544.,  3948.,  4576.,  3976.,  4608.,  4004.,  4640.,  4032.,  4672.,  4916.,  5834.,  4952.,  5876.,  4988.,  5918.,  5024.,  5960.,  5060.,  6002.,  5096.,  6044.,  5132.,  6086.,  5168.,  6128.,  5204.,  6170.,  5240.,  6212.,  5276.,  6254.,  5312.,  6296.,  2692.,  3320.,  2712.,  3344.,  2732.,  3368.,  2752.,  3392.,  2772.,  3416.,  2792.,  3440.,  2812.,  3464.,  2832.,  3488.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2288., 2676., 2304., 2696., 2320., 2716., 2336., 2736., 2352., 2756., 2368., 2776., 2384., 2796., 2400., 2816., 2416., 2836., 2432., 2856., 2448., 2876., 2464., 2896., 2480., 2916., 2496., 2936., 2512., 2956., 2528., 2976., 2544., 2996., 2560., 3016., 2576., 3036., 2592., 3056., 2608., 3076., 2624., 3096., 2640., 3116., 2656., 3136., 2672., 3156., 2688., 3176., 2704., 3196., 2720., 3216., 2992., 3556., 3008., 3576., 3024., 3596., 3040., 3616., 3056., 3636., 3072., 3656., 3088., 3676., 3104., 3696., 3120., 3716., 3136., 3736., 3152., 3756., 3168., 3776., 3184., 3796., 3200., 3816., 3216., 3836., 3232., 3856., 3248., 3876., 3264., 3896., 3280., 3916., 3296., 3936., 3312., 3956., 3328., 3976., 3344., 3996., 3360., 4016., 3376., 4036., 3392., 4056., 3408., 4076., 3424., 4096., 3696., 4436., 3712., 4456., 3728., 4476., 3744., 4496., 3760., 4516., 3776., 4536., 3792., 4556., 3808., 4576., 3824., 4596., 3840., 4616., 3856., 4636., 3872., 4656., 3888., 4676., 3904., 4696., 3920., 4716., 3936., 4736., 3952., 4756., 3968., 4776., 3984., 4796., 4000., 4816., 4016., 4836., 4032., 4856., 4048., 4876., 4064., 4896., 4080., 4916., 4096., 4936., 4112., 4956., 4128., 4976., 4400., 5316., 4416., 5336., 4432., 5356., 4448., 5376., 4464., 5396., 4480., 5416., 4496., 5436., 4512., 5456., 4528., 5476., 4544., 5496., 4560., 5516., 4576., 5536., 4592., 5556., 4608., 5576., 4624., 5596., 4640., 5616., 4656., 5636., 4672., 5656., 4688., 5676., 4704., 5696., 4720., 5716., 4736., 5736., 4752., 5756., 4768., 5776., 4784., 5796., 4800., 5816., 4816., 5836., 4832., 5856., 5104., 6196., 5120., 6216., 5136., 6236., 5152., 6256., 5168., 6276., 5184., 6296., 5200., 6316., 5216., 6336., 5232., 6356., 5248., 6376., 5264., 6396., 5280., 6416., 5296., 6436., 5312., 6456., 5328., 6476., 5344., 6496., 5360., 6516., 5376., 6536., 5392., 6556., 5408., 6576., 5424., 6596., 5440., 6616., 5456., 6636., 5472., 6656., 5488., 6676., 5504., 6696., 5520., 6716., 5536., 6736., 5808., 7076., 5824., 7096., 5840., 7116., 5856., 7136., 5872., 7156., 5888., 7176., 5904., 7196., 5920., 7216., 5936., 7236., 5952., 7256., 5968., 7276., 5984., 7296., 6000., 7316., 6016., 7336., 6032., 7356., 6048., 7376., 6064., 7396., 6080., 7416., 6096., 7436., 6112., 7456., 6128., 7476., 6144., 7496., 6160., 7516., 6176., 7536., 6192., 7556., 6208., 7576., 6224., 7596., 6240., 7616., 6512., 7956., 6528., 7976., 6544., 7996., 6560., 8016., 6576., 8036., 6592., 8056., 6608., 8076., 6624., 8096., 6640., 8116., 6656., 8136., 6672., 8156., 6688., 8176., 6704., 8196., 6720., 8216., 6736., 8236., 6752., 8256., 6768., 8276., 6784., 8296., 6800., 8316., 6816., 8336., 6832., 8356., 6848., 8376., 6864., 8396., 6880., 8416., 6896., 8436., 6912., 8456., 6928., 8476., 6944., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5604.,  5864.,  6124.,  6384.,  5704.,  5968.,  6232.,  6496.,  5804.,  6072.,  6340.,  6608.,  5904.,  6176.,  6448.,  6720.,  6004.,  6280.,  6556.,  6832.,  6104.,  6384.,  6664.,  6944.,  6204.,  6488.,  6772.,  7056.,  6304.,  6592.,  6880.,  7168.,  7786.,  8176.,  8566.,  8956.,  7924.,  8320.,  8716.,  9112.,  8062.,  8464.,  8866.,  9268.,  8200.,  8608.,  9016.,  9424.,  8338.,  8752.,  9166.,  9580.,  8476.,  8896.,  9316.,  9736.,  8614.,  9040.,  9466.,  9892.,  8752.,  9184.,  9616., 10048.,  8890.,  9328.,  9766., 10204.,  9028.,  9472.,  9916., 10360.,  9166.,  9616., 10066., 10516.,  9304.,  9760., 10216., 10672.,  4900.,  5176.,  5452.,  5728.,  4984.,  5264.,  5544.,  5824.,  5068.,  5352.,  5636.,  5920.,  5152.,  5440.,  5728.,  6016.,  5236.,  5528.,  5820.,  6112.,  5320.,  5616.,  5912.,  6208.,  5404.,  5704.,  6004.,  6304.,  5488.,  5792.,  6096.,  6400., 10004., 10440., 10876., 11312., 10104., 10544., 10984., 11424., 10204., 10648., 11092., 11536., 10304., 10752., 11200., 11648., 10404., 10856., 11308., 11760., 10504., 10960., 11416., 11872., 10604., 11064., 11524., 11984., 10704., 11168., 11632., 12096., 13858., 14512., 15166., 15820., 13996., 14656., 15316., 15976., 14134., 14800., 15466., 16132., 14272., 14944., 15616., 16288., 14410., 15088., 15766., 16444., 14548., 15232., 15916., 16600., 14686., 15376., 16066., 16756., 14824., 15520., 16216., 16912., 14962., 15664., 16366., 17068., 15100., 15808., 16516., 17224., 15238., 15952., 16666., 17380., 15376., 16096., 16816., 17536.,  8596.,  9048.,  9500.,  9952.,  8680.,  9136.,  9592., 10048.,  8764.,  9224.,  9684., 10144.,  8848.,  9312.,  9776., 10240.,  8932.,  9400.,  9868., 10336.,  9016.,  9488.,  9960., 10432.,  9100.,  9576., 10052., 10528.,  9184.,  9664., 10144., 10624., 14674., 15320., 15966., 16612., 14788., 15440., 16092., 16744., 14902., 15560., 16218., 16876., 15016., 15680., 16344., 17008., 15130., 15800., 16470., 17140., 15244., 15920., 16596., 17272., 15358., 16040., 16722., 17404., 15472., 16160., 16848., 17536., 20313., 21282., 22251., 23220., 20466., 21444., 22422., 23400., 20619., 21606., 22593., 23580., 20772., 21768., 22764., 23760., 20925., 21930., 22935., 23940., 21078., 22092., 23106., 24120., 21231., 22254., 23277., 24300., 21384., 22416., 23448., 24480., 21537., 22578., 23619., 24660., 21690., 22740., 23790., 24840., 21843., 22902., 23961., 25020., 21996., 23064., 24132., 25200., 12450., 13120., 13790., 14460., 12540., 13216., 13892., 14568., 12630., 13312., 13994., 14676., 12720., 13408., 14096., 14784., 12810., 13504., 14198., 14892., 12900., 13600., 14300., 15000., 12990., 13696., 14402., 15108., 13080., 13792., 14504., 15216., 19690., 20600., 21510., 22420., 19804., 20720., 21636., 22552., 19918., 20840., 21762., 22684., 20032., 20960., 21888., 22816., 20146., 21080., 22014., 22948., 20260., 21200., 22140., 23080., 20374., 21320., 22266., 23212., 20488., 21440., 22392., 23344., 27045., 28410., 29775., 31140., 27198., 28572., 29946., 31320., 27351., 28734., 30117., 31500., 27504., 28896., 30288., 31680., 22281., 23426., 24571., 25716., 22434., 23588., 24742., 25896., 22587., 23750., 24913., 26076., 22740., 23912., 25084., 26256., 22893., 24074., 25255., 26436., 23046., 24236., 25426., 26616., 23199., 24398., 25597., 26796., 23352., 24560., 25768., 26976., 16410., 17344., 18278., 19212., 16500., 17440., 18380., 19320., 16590., 17536., 18482., 19428., 16680., 17632., 18584., 19536., 16770., 17728., 18686., 19644., 16860., 17824., 18788., 19752., 16950., 17920., 18890., 19860., 17040., 18016., 18992., 19968., 14978., 15640., 16302., 16964., 15092., 15760., 16428., 17096., 15206., 15880., 16554., 17228., 15320., 16000., 16680., 17360., 15434., 16120., 16806., 17492., 15548., 16240., 16932., 17624., 15662., 16360., 17058., 17756., 15776., 16480., 17184., 17888., 20721., 21714., 22707., 23700., 20874., 21876., 22878., 23880., 21027., 22038., 23049., 24060., 21180., 22200., 23220., 24240., 21333., 22362., 23391., 24420., 21486., 22524., 23562., 24600., 21639., 22686., 23733., 24780., 21792., 22848., 23904., 24960., 21945., 23010., 24075., 25140., 22098., 23172., 24246., 25320., 22251., 23334., 24417., 25500., 22404., 23496., 24588., 25680., 12690., 13376., 14062., 14748., 12780., 13472., 14164., 14856., 12870., 13568., 14266., 14964., 12960., 13664., 14368., 15072., 13050., 13760., 14470., 15180., 13140., 13856., 14572., 15288., 13230., 13952., 14674., 15396., 13320., 14048., 14776., 15504.,  4772.,  5208.,  5644.,  6080.,  4824.,  5264.,  5704.,  6144.,  4876.,  5320.,  5764.,  6208.,  4928.,  5376.,  5824.,  6272.,  4980.,  5432.,  5884.,  6336.,  5032.,  5488.,  5944.,  6400.,  5084.,  5544.,  6004.,  6464.,  5136.,  5600.,  6064.,  6528.,  6010.,  6664.,  7318.,  7972.,  6076.,  6736.,  7396.,  8056.,  6142.,  6808.,  7474.,  8140.,  6208.,  6880.,  7552.,  8224.,  6274.,  6952.,  7630.,  8308.,  6340.,  7024.,  7708.,  8392.,  6406.,  7096.,  7786.,  8476.,  6472.,  7168.,  7864.,  8560.,  6538.,  7240.,  7942.,  8644.,  6604.,  7312.,  8020.,  8728.,  6670.,  7384.,  8098.,  8812.,  6736.,  7456.,  8176.,  8896.,  3172.,  3624.,  4076.,  4528.,  3208.,  3664.,  4120.,  4576.,  3244.,  3704.,  4164.,  4624.,  3280.,  3744.,  4208.,  4672.,  3316.,  3784.,  4252.,  4720.,  3352.,  3824.,  4296.,  4768.,  3388.,  3864.,  4340.,  4816.,  3424.,  3904.,  4384.,  4864.,  7060.,  7672.,  8284.,  8896.,  7112.,  7728.,  8344.,  8960.,  7164.,  7784.,  8404.,  9024.,  7216.,  7840.,  8464.,  9088.,  7268.,  7896.,  8524.,  9152.,  7320.,  7952.,  8584.,  9216.,  7372.,  8008.,  8644.,  9280.,  7424.,  8064.,  8704.,  9344.,  8914.,  9832., 10750., 11668.,  8980.,  9904., 10828., 11752.,  9046.,  9976., 10906., 11836.,  9112., 10048., 10984., 11920.,  9178., 10120., 11062., 12004.,  9244., 10192., 11140., 12088.,  9310., 10264., 11218., 12172.,  9376., 10336., 11296., 12256.,  9442., 10408., 11374., 12340.,  9508., 10480., 11452., 12424.,  9574., 10552., 11530., 12508.,  9640., 10624., 11608., 12592.,  4756.,  5384.,  6012.,  6640.,  4792.,  5424.,  6056.,  6688.,  4828.,  5464.,  6100.,  6736.,  4864.,  5504.,  6144.,  6784.,  4900.,  5544.,  6188.,  6832.,  4936.,  5584.,  6232.,  6880.,  4972.,  5624.,  6276.,  6928.,  5008.,  5664.,  6320.,  6976.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4188.,  4576.,  4964.,  5352.,  4216.,  4608.,  5000.,  5392.,  4244.,  4640.,  5036.,  5432.,  4272.,  4672.,  5072.,  5472.,  4300.,  4704.,  5108.,  5512.,  4328.,  4736.,  5144.,  5552.,  4356.,  4768.,  5180.,  5592.,  4384.,  4800.,  5216.,  5632.,  4412.,  4832.,  5252.,  5672.,  4440.,  4864.,  5288.,  5712.,  4468.,  4896.,  5324.,  5752.,  4496.,  4928.,  5360.,  5792.,  4524.,  4960.,  5396.,  5832.,  4552.,  4992.,  5432.,  5872.,  4580.,  5024.,  5468.,  5912.,  4608.,  5056.,  5504.,  5952.,  4636.,  5088.,  5540.,  5992.,  4664.,  5120.,  5576.,  6032.,  4692.,  5152.,  5612.,  6072.,  4720.,  5184.,  5648.,  6112.,  4748.,  5216.,  5684.,  6152.,  4776.,  5248.,  5720.,  6192.,  4804.,  5280.,  5756.,  6232.,  4832.,  5312.,  5792.,  6272.,  4860.,  5344.,  5828.,  6312.,  4888.,  5376.,  5864.,  6352.,  4916.,  5408.,  5900.,  6392.,  4944.,  5440.,  5936.,  6432.,  5420.,  5984.,  6548.,  7112.,  5448.,  6016.,  6584.,  7152.,  5476.,  6048.,  6620.,  7192.,  5504.,  6080.,  6656.,  7232.,  5532.,  6112.,  6692.,  7272.,  5560.,  6144.,  6728.,  7312.,  5588.,  6176.,  6764.,  7352.,  5616.,  6208.,  6800.,  7392.,  5644.,  6240.,  6836.,  7432.,  5672.,  6272.,  6872.,  7472.,  5700.,  6304.,  6908.,  7512.,  5728.,  6336.,  6944.,  7552.,  5756.,  6368.,  6980.,  7592.,  5784.,  6400.,  7016.,  7632.,  5812.,  6432.,  7052.,  7672.,  5840.,  6464.,  7088.,  7712.,  5868.,  6496.,  7124.,  7752.,  5896.,  6528.,  7160.,  7792.,  5924.,  6560.,  7196.,  7832.,  5952.,  6592.,  7232.,  7872.,  5980.,  6624.,  7268.,  7912.,  6008.,  6656.,  7304.,  7952.,  6036.,  6688.,  7340.,  7992.,  6064.,  6720.,  7376.,  8032.,  6092.,  6752.,  7412.,  8072.,  6120.,  6784.,  7448.,  8112.,  6148.,  6816.,  7484.,  8152.,  6176.,  6848.,  7520.,  8192.,  6652.,  7392.,  8132.,  8872.,  6680.,  7424.,  8168.,  8912.,  6708.,  7456.,  8204.,  8952.,  6736.,  7488.,  8240.,  8992.,  6764.,  7520.,  8276.,  9032.,  6792.,  7552.,  8312.,  9072.,  6820.,  7584.,  8348.,  9112.,  6848.,  7616.,  8384.,  9152.,  6876.,  7648.,  8420.,  9192.,  6904.,  7680.,  8456.,  9232.,  6932.,  7712.,  8492.,  9272.,  6960.,  7744.,  8528.,  9312.,  6988.,  7776.,  8564.,  9352.,  7016.,  7808.,  8600.,  9392.,  7044.,  7840.,  8636.,  9432.,  7072.,  7872.,  8672.,  9472.,  7100.,  7904.,  8708.,  9512.,  7128.,  7936.,  8744.,  9552.,  7156.,  7968.,  8780.,  9592.,  7184.,  8000.,  8816.,  9632.,  7212.,  8032.,  8852.,  9672.,  7240.,  8064.,  8888.,  9712.,  7268.,  8096.,  8924.,  9752.,  7296.,  8128.,  8960.,  9792.,  7324.,  8160.,  8996.,  9832.,  7352.,  8192.,  9032.,  9872.,  7380.,  8224.,  9068.,  9912.,  7408.,  8256.,  9104.,  9952.,  7884.,  8800.,  9716., 10632.,  7912.,  8832.,  9752., 10672.,  7940.,  8864.,  9788., 10712.,  7968.,  8896.,  9824., 10752.,  7996.,  8928.,  9860., 10792.,  8024.,  8960.,  9896., 10832.,  8052.,  8992.,  9932., 10872.,  8080.,  9024.,  9968., 10912.,  8108.,  9056., 10004., 10952.,  8136.,  9088., 10040., 10992.,  8164.,  9120., 10076., 11032.,  8192.,  9152., 10112., 11072.,  8220.,  9184., 10148., 11112.,  8248.,  9216., 10184., 11152.,  8276.,  9248., 10220., 11192.,  8304.,  9280., 10256., 11232.,  8332.,  9312., 10292., 11272.,  8360.,  9344., 10328., 11312.,  8388.,  9376., 10364., 11352.,  8416.,  9408., 10400., 11392.,  8444.,  9440., 10436., 11432.,  8472.,  9472., 10472., 11472.,  8500.,  9504., 10508., 11512.,  8528.,  9536., 10544., 11552.,  8556.,  9568., 10580., 11592.,  8584.,  9600., 10616., 11632.,  8612.,  9632., 10652., 11672.,  8640.,  9664., 10688., 11712.,  9116., 10208., 11300., 12392.,  9144., 10240., 11336., 12432.,  9172., 10272., 11372., 12472.,  9200., 10304., 11408., 12512.,  9228., 10336., 11444., 12552.,  9256., 10368., 11480., 12592.,  9284., 10400., 11516., 12632.,  9312., 10432., 11552., 12672.,  9340., 10464., 11588., 12712.,  9368., 10496., 11624., 12752.,  9396., 10528., 11660., 12792.,  9424., 10560., 11696., 12832.,  9452., 10592., 11732., 12872.,  9480., 10624., 11768., 12912.,  9508., 10656., 11804., 12952.,  9536., 10688., 11840., 12992.,  9564., 10720., 11876., 13032.,  9592., 10752., 11912., 13072.,  9620., 10784., 11948., 13112.,  9648., 10816., 11984., 13152.,  9676., 10848., 12020., 13192.,  9704., 10880., 12056., 13232.,  9732., 10912., 12092., 13272.,  9760., 10944., 12128., 13312.,  9788., 10976., 12164., 13352.,  9816., 11008., 12200., 13392.,  9844., 11040., 12236., 13432.,  9872., 11072., 12272., 13472., 10348., 11616., 12884., 14152., 10376., 11648., 12920., 14192., 10404., 11680., 12956., 14232., 10432., 11712., 12992., 14272., 10460., 11744., 13028., 14312., 10488., 11776., 13064., 14352., 10516., 11808., 13100., 14392., 10544., 11840., 13136., 14432., 10572., 11872., 13172., 14472., 10600., 11904., 13208., 14512., 10628., 11936., 13244., 14552., 10656., 11968., 13280., 14592., 10684., 12000., 13316., 14632., 10712., 12032., 13352., 14672., 10740., 12064., 13388., 14712., 10768., 12096., 13424., 14752., 10796., 12128., 13460., 14792., 10824., 12160., 13496., 14832., 10852., 12192., 13532., 14872., 10880., 12224., 13568., 14912., 10908., 12256., 13604., 14952., 10936., 12288., 13640., 14992., 10964., 12320., 13676., 15032., 10992., 12352., 13712., 15072., 11020., 12384., 13748., 15112., 11048., 12416., 13784., 15152., 11076., 12448., 13820., 15192., 11104., 12480., 13856., 15232., 11580., 13024., 14468., 15912., 11608., 13056., 14504., 15952., 11636., 13088., 14540., 15992., 11664., 13120., 14576., 16032., 11692., 13152., 14612., 16072., 11720., 13184., 14648., 16112., 11748., 13216., 14684., 16152., 11776., 13248., 14720., 16192., 11804., 13280., 14756., 16232., 11832., 13312., 14792., 16272., 11860., 13344., 14828., 16312., 11888., 13376., 14864., 16352., 11916., 13408., 14900., 16392., 11944., 13440., 14936., 16432., 11972., 13472., 14972., 16472., 12000., 13504., 15008., 16512., 12028., 13536., 15044., 16552., 12056., 13568., 15080., 16592., 12084., 13600., 15116., 16632., 12112., 13632., 15152., 16672., 12140., 13664., 15188., 16712., 12168., 13696., 15224., 16752., 12196., 13728., 15260., 16792., 12224., 13760., 15296., 16832., 12252., 13792., 15332., 16872., 12280., 13824., 15368., 16912., 12308., 13856., 15404., 16952., 12336., 13888., 15440., 16992.};
  const std::array<int, 4> in_shape = {{ 1, 11, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1660., 2299., 2338., 2377., 2416., 1468., 1492., 1996., 2767., 2806., 2845., 2884., 1756., 1780., 2364., 3273., 3318., 3363., 3408., 2067., 2094., 2760., 3813., 3858., 3903., 3948., 2391., 2418., 3156., 4353., 4398., 4443., 4488., 2715., 2742., 1204., 1597., 1618., 1639., 1660.,  952.,  964., 1396., 1849., 1870., 1891., 1912., 1096., 1108.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,  670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,  870.,  880.,  890.,  900.,  910.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3104., 3320., 4280., 4598., 4352., 4676., 4424., 4754., 4496., 4832., 2716., 2936., 2760., 2984., 3728., 3992., 5144., 5534., 5216., 5612., 5288., 5690., 5360., 5768., 3244., 3512., 3288., 3560., 4404., 4728., 6069., 6546., 6150., 6636., 6231., 6726., 6312., 6816., 3804., 4134., 3852., 4188., 5124., 5520., 7041., 7626., 7122., 7716., 7203., 7806., 7284., 7896., 4380., 4782., 4428., 4836., 5844., 6312., 8013., 8706., 8094., 8796., 8175., 8886., 8256., 8976., 4956., 5430., 5004., 5484., 2144., 2408., 2804., 3194., 2840., 3236., 2876., 3278., 2912., 3320., 1636., 1904., 1656., 1928., 2480., 2792., 3236., 3698., 3272., 3740., 3308., 3782., 3344., 3824., 1876., 2192., 1896., 2216.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,  712.,  840.,  728.,  860.,  824.,  980.,  840., 1000.,  856., 1020.,  872., 1040.,  888., 1060.,  904., 1080.,  920., 1100., 1016., 1220., 1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320., 1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520., 1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720., 1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820., 1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020., 1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220., 1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5992.,  6208.,  6424.,  6640.,  8242.,  8560.,  8878.,  9196.,  8380.,  8704.,  9028.,  9352.,  8518.,  8848.,  9178.,  9508.,  8656.,  8992.,  9328.,  9664.,  5212.,  5432.,  5652.,  5872.,  5296.,  5520.,  5744.,  5968.,  7192.,  7456.,  7720.,  7984.,  9898., 10288., 10678., 11068., 10036., 10432., 10828., 11224., 10174., 10576., 10978., 11380., 10312., 10720., 11128., 11536.,  6220.,  6488.,  6756.,  7024.,  6304.,  6576.,  6848.,  7120.,  8484.,  8808.,  9132.,  9456., 11661., 12138., 12615., 13092., 11814., 12300., 12786., 13272., 11967., 12462., 12957., 13452., 12120., 12624., 13128., 13632.,  7278.,  7608.,  7938.,  8268.,  7368.,  7704.,  8040.,  8376.,  9852., 10248., 10644., 11040., 13497., 14082., 14667., 15252., 13650., 14244., 14838., 15432., 13803., 14406., 15009., 15612., 13956., 14568., 15180., 15792.,  8358.,  8760.,  9162.,  9564.,  8448.,  8856.,  9264.,  9672., 11220., 11688., 12156., 12624., 15333., 16026., 16719., 17412., 15486., 16188., 16890., 17592., 15639., 16350., 17061., 17772., 15792., 16512., 17232., 17952.,  9438.,  9912., 10386., 10860.,  9528., 10008., 10488., 10968.,  4024.,  4288.,  4552.,  4816.,  5218.,  5608.,  5998.,  6388.,  5284.,  5680.,  6076.,  6472.,  5350.,  5752.,  6154.,  6556.,  5416.,  5824.,  6232.,  6640.,  3004.,  3272.,  3540.,  3808.,  3040.,  3312.,  3584.,  3856.,  4648.,  4960.,  5272.,  5584.,  6010.,  6472.,  6934.,  7396.,  6076.,  6544.,  7012.,  7480.,  6142.,  6616.,  7090.,  7564.,  6208.,  6688.,  7168.,  7648.,  3436.,  3752.,  4068.,  4384.,  3472.,  3792.,  4112.,  4432.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328., 1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640., 1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648., 1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040., 1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808., 1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440., 1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128., 2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640., 1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448., 2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040., 2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608., 2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440., 2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928., 3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640., 2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248., 3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040., 2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568., 3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440., 3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728., 4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3292., 3320., 4559., 4598., 4637., 4676., 4715., 4754., 4793., 4832., 2912., 2936., 2960., 2984., 3964., 3992., 5495., 5534., 5573., 5612., 5651., 5690., 5729., 5768., 3488., 3512., 3536., 3560., 4695., 4728., 6501., 6546., 6591., 6636., 6681., 6726., 6771., 6816., 4107., 4134., 4161., 4188., 5487., 5520., 7581., 7626., 7671., 7716., 7761., 7806., 7851., 7896., 4755., 4782., 4809., 4836., 6279., 6312., 8661., 8706., 8751., 8796., 8841., 8886., 8931., 8976., 5403., 5430., 5457., 5484., 2392., 2408., 3173., 3194., 3215., 3236., 3257., 3278., 3299., 3320., 1892., 1904., 1916., 1928., 2776., 2792., 3677., 3698., 3719., 3740., 3761., 3782., 3803., 3824., 2180., 2192., 2204., 2216.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1210., 1220., 1230., 1240., 1250., 1260., 1270., 1280., 1290., 1300., 1310., 1320., 1330., 1340., 1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1690., 1700., 1710., 1720., 1730., 1740., 1750., 1760., 1770., 1780., 1790., 1800., 1810., 1820., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2170., 2180., 2190., 2200., 2210., 2220., 2230., 2240., 2250., 2260., 2270., 2280., 2290., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6156.,  6584.,  6208.,  6640.,  8488.,  9118.,  8560.,  9196.,  8632.,  9274.,  8704.,  9352.,  8776.,  9430.,  8848.,  9508.,  8920.,  9586.,  8992.,  9664.,  5388.,  5824.,  5432.,  5872.,  5476.,  5920.,  5520.,  5968.,  7404.,  7928.,  7456.,  7984., 10216., 10990., 10288., 11068., 10360., 11146., 10432., 11224., 10504., 11302., 10576., 11380., 10648., 11458., 10720., 11536.,  6444.,  6976.,  6488.,  7024.,  6532.,  7072.,  6576.,  7120.,  8748.,  9390.,  8808.,  9456., 12057., 13002., 12138., 13092., 12219., 13182., 12300., 13272., 12381., 13362., 12462., 13452., 12543., 13542., 12624., 13632.,  7560.,  8214.,  7608.,  8268.,  7656.,  8322.,  7704.,  8376., 10188., 10974., 10248., 11040., 14001., 15162., 14082., 15252., 14163., 15342., 14244., 15432., 14325., 15522., 14406., 15612., 14487., 15702., 14568., 15792.,  8712.,  9510.,  8760.,  9564.,  8808.,  9618.,  8856.,  9672., 11628., 12558., 11688., 12624., 15945., 17322., 16026., 17412., 16107., 17502., 16188., 17592., 16269., 17682., 16350., 17772., 16431., 17862., 16512., 17952.,  9864., 10806.,  9912., 10860.,  9960., 10914., 10008., 10968.,  4260.,  4784.,  4288.,  4816.,  5572.,  6346.,  5608.,  6388.,  5644.,  6430.,  5680.,  6472.,  5716.,  6514.,  5752.,  6556.,  5788.,  6598.,  5824.,  6640.,  3252.,  3784.,  3272.,  3808.,  3292.,  3832.,  3312.,  3856.,  4932.,  5552.,  4960.,  5584.,  6436.,  7354.,  6472.,  7396.,  6508.,  7438.,  6544.,  7480.,  6580.,  7522.,  6616.,  7564.,  6652.,  7606.,  6688.,  7648.,  3732.,  4360.,  3752.,  4384.,  3772.,  4408.,  3792.,  4432.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1248., 1460., 1264., 1480., 1280., 1500., 1296., 1520., 1312., 1540., 1328., 1560., 1344., 1580., 1360., 1600., 1376., 1620., 1392., 1640., 1408., 1660., 1424., 1680., 1440., 1700., 1456., 1720., 1632., 1940., 1648., 1960., 1664., 1980., 1680., 2000., 1696., 2020., 1712., 2040., 1728., 2060., 1744., 2080., 1760., 2100., 1776., 2120., 1792., 2140., 1808., 2160., 1824., 2180., 1840., 2200., 2016., 2420., 2032., 2440., 2048., 2460., 2064., 2480., 2080., 2500., 2096., 2520., 2112., 2540., 2128., 2560., 2144., 2580., 2160., 2600., 2176., 2620., 2192., 2640., 2208., 2660., 2224., 2680., 2400., 2900., 2416., 2920., 2432., 2940., 2448., 2960., 2464., 2980., 2480., 3000., 2496., 3020., 2512., 3040., 2528., 3060., 2544., 3080., 2560., 3100., 2576., 3120., 2592., 3140., 2608., 3160., 2784., 3380., 2800., 3400., 2816., 3420., 2832., 3440., 2848., 3460., 2864., 3480., 2880., 3500., 2896., 3520., 2912., 3540., 2928., 3560., 2944., 3580., 2960., 3600., 2976., 3620., 2992., 3640., 3168., 3860., 3184., 3880., 3200., 3900., 3216., 3920., 3232., 3940., 3248., 3960., 3264., 3980., 3280., 4000., 3296., 4020., 3312., 4040., 3328., 4060., 3344., 4080., 3360., 4100., 3376., 4120., 3552., 4340., 3568., 4360., 3584., 4380., 3600., 4400., 3616., 4420., 3632., 4440., 3648., 4460., 3664., 4480., 3680., 4500., 3696., 4520., 3712., 4540., 3728., 4560., 3744., 4580., 3760., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11884., 12312., 12740., 13168., 11984., 12416., 12848., 13280., 16346., 16976., 17606., 18236., 16484., 17120., 17756., 18392., 16622., 17264., 17906., 18548., 16760., 17408., 18056., 18704., 16898., 17552., 18206., 18860., 17036., 17696., 18356., 19016., 17174., 17840., 18506., 19172., 17312., 17984., 18656., 19328., 10340., 10776., 11212., 11648., 10424., 10864., 11304., 11744., 10508., 10952., 11396., 11840., 10592., 11040., 11488., 11936., 14284., 14808., 15332., 15856., 14384., 14912., 15440., 15968., 19658., 20432., 21206., 21980., 19796., 20576., 21356., 22136., 19934., 20720., 21506., 22292., 20072., 20864., 21656., 22448., 20210., 21008., 21806., 22604., 20348., 21152., 21956., 22760., 20486., 21296., 22106., 22916., 20624., 21440., 22256., 23072., 12356., 12888., 13420., 13952., 12440., 12976., 13512., 14048., 12524., 13064., 13604., 14144., 12608., 13152., 13696., 14240., 16854., 17496., 18138., 18780., 16968., 17616., 18264., 18912., 23169., 24114., 25059., 26004., 23322., 24276., 25230., 26184., 23475., 24438., 25401., 26364., 23628., 24600., 25572., 26544., 23781., 24762., 25743., 26724., 23934., 24924., 25914., 26904., 24087., 25086., 26085., 27084., 24240., 25248., 26256., 27264., 14466., 15120., 15774., 16428., 14556., 15216., 15876., 16536., 14646., 15312., 15978., 16644., 14736., 15408., 16080., 16752., 19590., 20376., 21162., 21948., 19704., 20496., 21288., 22080., 26841., 28002., 29163., 30324., 26994., 28164., 29334., 30504., 27147., 28326., 29505., 30684., 27300., 28488., 29676., 30864., 27453., 28650., 29847., 31044., 27606., 28812., 30018., 31224., 27759., 28974., 30189., 31404., 27912., 29136., 30360., 31584., 16626., 17424., 18222., 19020., 16716., 17520., 18324., 19128., 16806., 17616., 18426., 19236., 16896., 17712., 18528., 19344., 22326., 23256., 24186., 25116., 22440., 23376., 24312., 25248., 22065., 23186., 24307., 25428., 22218., 23348., 24478., 25608., 22371., 23510., 24649., 25788., 22524., 23672., 24820., 25968., 22677., 23834., 24991., 26148., 22830., 23996., 25162., 26328., 22983., 24158., 25333., 26508., 23136., 24320., 25504., 26688., 11362., 12048., 12734., 13420., 11452., 12144., 12836., 13528., 11542., 12240., 12938., 13636., 11632., 12336., 13040., 13744.,  7996.,  8520.,  9044.,  9568.,  8048.,  8576.,  9104.,  9632., 10370., 11144., 11918., 12692., 10436., 11216., 11996., 12776., 10502., 11288., 12074., 12860., 10568., 11360., 12152., 12944., 10634., 11432., 12230., 13028., 10700., 11504., 12308., 13112., 10766., 11576., 12386., 13196., 10832., 11648., 12464., 13280.,  5972.,  6504.,  7036.,  7568.,  6008.,  6544.,  7080.,  7616.,  6044.,  6584.,  7124.,  7664.,  6080.,  6624.,  7168.,  7712.,  9244.,  9864., 10484., 11104.,  9296.,  9920., 10544., 11168., 11954., 12872., 13790., 14708., 12020., 12944., 13868., 14792., 12086., 13016., 13946., 14876., 12152., 13088., 14024., 14960., 12218., 13160., 14102., 15044., 12284., 13232., 14180., 15128., 12350., 13304., 14258., 15212., 12416., 13376., 14336., 15296.,  6836.,  7464.,  8092.,  8720.,  6872.,  7504.,  8136.,  8768.,  6908.,  7544.,  8180.,  8816.,  6944.,  7584.,  8224.,  8864.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2284., 2496., 2708., 2920., 2312., 2528., 2744., 2960., 2340., 2560., 2780., 3000., 2368., 2592., 2816., 3040., 2396., 2624., 2852., 3080., 2424., 2656., 2888., 3120., 2452., 2688., 2924., 3160., 2480., 2720., 2960., 3200., 2508., 2752., 2996., 3240., 2536., 2784., 3032., 3280., 2564., 2816., 3068., 3320., 2592., 2848., 3104., 3360., 2620., 2880., 3140., 3400., 2648., 2912., 3176., 3440., 2956., 3264., 3572., 3880., 2984., 3296., 3608., 3920., 3012., 3328., 3644., 3960., 3040., 3360., 3680., 4000., 3068., 3392., 3716., 4040., 3096., 3424., 3752., 4080., 3124., 3456., 3788., 4120., 3152., 3488., 3824., 4160., 3180., 3520., 3860., 4200., 3208., 3552., 3896., 4240., 3236., 3584., 3932., 4280., 3264., 3616., 3968., 4320., 3292., 3648., 4004., 4360., 3320., 3680., 4040., 4400., 3628., 4032., 4436., 4840., 3656., 4064., 4472., 4880., 3684., 4096., 4508., 4920., 3712., 4128., 4544., 4960., 3740., 4160., 4580., 5000., 3768., 4192., 4616., 5040., 3796., 4224., 4652., 5080., 3824., 4256., 4688., 5120., 3852., 4288., 4724., 5160., 3880., 4320., 4760., 5200., 3908., 4352., 4796., 5240., 3936., 4384., 4832., 5280., 3964., 4416., 4868., 5320., 3992., 4448., 4904., 5360., 4300., 4800., 5300., 5800., 4328., 4832., 5336., 5840., 4356., 4864., 5372., 5880., 4384., 4896., 5408., 5920., 4412., 4928., 5444., 5960., 4440., 4960., 5480., 6000., 4468., 4992., 5516., 6040., 4496., 5024., 5552., 6080., 4524., 5056., 5588., 6120., 4552., 5088., 5624., 6160., 4580., 5120., 5660., 6200., 4608., 5152., 5696., 6240., 4636., 5184., 5732., 6280., 4664., 5216., 5768., 6320., 4972., 5568., 6164., 6760., 5000., 5600., 6200., 6800., 5028., 5632., 6236., 6840., 5056., 5664., 6272., 6880., 5084., 5696., 6308., 6920., 5112., 5728., 6344., 6960., 5140., 5760., 6380., 7000., 5168., 5792., 6416., 7040., 5196., 5824., 6452., 7080., 5224., 5856., 6488., 7120., 5252., 5888., 6524., 7160., 5280., 5920., 6560., 7200., 5308., 5952., 6596., 7240., 5336., 5984., 6632., 7280., 5644., 6336., 7028., 7720., 5672., 6368., 7064., 7760., 5700., 6400., 7100., 7800., 5728., 6432., 7136., 7840., 5756., 6464., 7172., 7880., 5784., 6496., 7208., 7920., 5812., 6528., 7244., 7960., 5840., 6560., 7280., 8000., 5868., 6592., 7316., 8040., 5896., 6624., 7352., 8080., 5924., 6656., 7388., 8120., 5952., 6688., 7424., 8160., 5980., 6720., 7460., 8200., 6008., 6752., 7496., 8240., 6316., 7104., 7892., 8680., 6344., 7136., 7928., 8720., 6372., 7168., 7964., 8760., 6400., 7200., 8000., 8800., 6428., 7232., 8036., 8840., 6456., 7264., 8072., 8880., 6484., 7296., 8108., 8920., 6512., 7328., 8144., 8960., 6540., 7360., 8180., 9000., 6568., 7392., 8216., 9040., 6596., 7424., 8252., 9080., 6624., 7456., 8288., 9120., 6652., 7488., 8324., 9160., 6680., 7520., 8360., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6556.,  6584.,  6612.,  6640.,  9079.,  9118.,  9157.,  9196.,  9235.,  9274.,  9313.,  9352.,  9391.,  9430.,  9469.,  9508.,  9547.,  9586.,  9625.,  9664.,  5800.,  5824.,  5848.,  5872.,  5896.,  5920.,  5944.,  5968.,  7900.,  7928.,  7956.,  7984., 10951., 10990., 11029., 11068., 11107., 11146., 11185., 11224., 11263., 11302., 11341., 11380., 11419., 11458., 11497., 11536.,  6952.,  6976.,  7000.,  7024.,  7048.,  7072.,  7096.,  7120.,  9357.,  9390.,  9423.,  9456., 12957., 13002., 13047., 13092., 13137., 13182., 13227., 13272., 13317., 13362., 13407., 13452., 13497., 13542., 13587., 13632.,  8187.,  8214.,  8241.,  8268.,  8295.,  8322.,  8349.,  8376., 10941., 10974., 11007., 11040., 15117., 15162., 15207., 15252., 15297., 15342., 15387., 15432., 15477., 15522., 15567., 15612., 15657., 15702., 15747., 15792.,  9483.,  9510.,  9537.,  9564.,  9591.,  9618.,  9645.,  9672., 12525., 12558., 12591., 12624., 17277., 17322., 17367., 17412., 17457., 17502., 17547., 17592., 17637., 17682., 17727., 17772., 17817., 17862., 17907., 17952., 10779., 10806., 10833., 10860., 10887., 10914., 10941., 10968.,  4768.,  4784.,  4800.,  4816.,  6325.,  6346.,  6367.,  6388.,  6409.,  6430.,  6451.,  6472.,  6493.,  6514.,  6535.,  6556.,  6577.,  6598.,  6619.,  6640.,  3772.,  3784.,  3796.,  3808.,  3820.,  3832.,  3844.,  3856.,  5536.,  5552.,  5568.,  5584.,  7333.,  7354.,  7375.,  7396.,  7417.,  7438.,  7459.,  7480.,  7501.,  7522.,  7543.,  7564.,  7585.,  7606.,  7627.,  7648.,  4348.,  4360.,  4372.,  4384.,  4396.,  4408.,  4420.,  4432.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2070., 2080., 2090., 2100., 2110., 2120., 2130., 2140., 2150., 2160., 2170., 2180., 2190., 2200., 2410., 2420., 2430., 2440., 2450., 2460., 2470., 2480., 2490., 2500., 2510., 2520., 2530., 2540., 2550., 2560., 2570., 2580., 2590., 2600., 2610., 2620., 2630., 2640., 2650., 2660., 2670., 2680., 2890., 2900., 2910., 2920., 2930., 2940., 2950., 2960., 2970., 2980., 2990., 3000., 3010., 3020., 3030., 3040., 3050., 3060., 3070., 3080., 3090., 3100., 3110., 3120., 3130., 3140., 3150., 3160., 3370., 3380., 3390., 3400., 3410., 3420., 3430., 3440., 3450., 3460., 3470., 3480., 3490., 3500., 3510., 3520., 3530., 3540., 3550., 3560., 3570., 3580., 3590., 3600., 3610., 3620., 3630., 3640., 3850., 3860., 3870., 3880., 3890., 3900., 3910., 3920., 3930., 3940., 3950., 3960., 3970., 3980., 3990., 4000., 4010., 4020., 4030., 4040., 4050., 4060., 4070., 4080., 4090., 4100., 4110., 4120., 4330., 4340., 4350., 4360., 4370., 4380., 4390., 4400., 4410., 4420., 4430., 4440., 4450., 4460., 4470., 4480., 4490., 4500., 4510., 4520., 4530., 4540., 4550., 4560., 4570., 4580., 4590., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12260., 13112., 12312., 13168., 12364., 13224., 12416., 13280., 16904., 18158., 16976., 18236., 17048., 18314., 17120., 18392., 17192., 18470., 17264., 18548., 17336., 18626., 17408., 18704., 17480., 18782., 17552., 18860., 17624., 18938., 17696., 19016., 17768., 19094., 17840., 19172., 17912., 19250., 17984., 19328., 10732., 11600., 10776., 11648., 10820., 11696., 10864., 11744., 10908., 11792., 10952., 11840., 10996., 11888., 11040., 11936., 14756., 15800., 14808., 15856., 14860., 15912., 14912., 15968., 20360., 21902., 20432., 21980., 20504., 22058., 20576., 22136., 20648., 22214., 20720., 22292., 20792., 22370., 20864., 22448., 20936., 22526., 21008., 22604., 21080., 22682., 21152., 22760., 21224., 22838., 21296., 22916., 21368., 22994., 21440., 23072., 12844., 13904., 12888., 13952., 12932., 14000., 12976., 14048., 13020., 14096., 13064., 14144., 13108., 14192., 13152., 14240., 17436., 18714., 17496., 18780., 17556., 18846., 17616., 18912., 24033., 25914., 24114., 26004., 24195., 26094., 24276., 26184., 24357., 26274., 24438., 26364., 24519., 26454., 24600., 26544., 24681., 26634., 24762., 26724., 24843., 26814., 24924., 26904., 25005., 26994., 25086., 27084., 25167., 27174., 25248., 27264., 15072., 16374., 15120., 16428., 15168., 16482., 15216., 16536., 15264., 16590., 15312., 16644., 15360., 16698., 15408., 16752., 20316., 21882., 20376., 21948., 20436., 22014., 20496., 22080., 27921., 30234., 28002., 30324., 28083., 30414., 28164., 30504., 28245., 30594., 28326., 30684., 28407., 30774., 28488., 30864., 28569., 30954., 28650., 31044., 28731., 31134., 28812., 31224., 28893., 31314., 28974., 31404., 29055., 31494., 29136., 31584., 17376., 18966., 17424., 19020., 17472., 19074., 17520., 19128., 17568., 19182., 17616., 19236., 17664., 19290., 17712., 19344., 23196., 25050., 23256., 25116., 23316., 25182., 23376., 25248., 23105., 25338., 23186., 25428., 23267., 25518., 23348., 25608., 23429., 25698., 23510., 25788., 23591., 25878., 23672., 25968., 23753., 26058., 23834., 26148., 23915., 26238., 23996., 26328., 24077., 26418., 24158., 26508., 24239., 26598., 24320., 26688., 12000., 13366., 12048., 13420., 12096., 13474., 12144., 13528., 12192., 13582., 12240., 13636., 12288., 13690., 12336., 13744.,  8492.,  9536.,  8520.,  9568.,  8548.,  9600.,  8576.,  9632., 11108., 12650., 11144., 12692., 11180., 12734., 11216., 12776., 11252., 12818., 11288., 12860., 11324., 12902., 11360., 12944., 11396., 12986., 11432., 13028., 11468., 13070., 11504., 13112., 11540., 13154., 11576., 13196., 11612., 13238., 11648., 13280.,  6484.,  7544.,  6504.,  7568.,  6524.,  7592.,  6544.,  7616.,  6564.,  7640.,  6584.,  7664.,  6604.,  7688.,  6624.,  7712.,  9836., 11072.,  9864., 11104.,  9892., 11136.,  9920., 11168., 12836., 14666., 12872., 14708., 12908., 14750., 12944., 14792., 12980., 14834., 13016., 14876., 13052., 14918., 13088., 14960., 13124., 15002., 13160., 15044., 13196., 15086., 13232., 15128., 13268., 15170., 13304., 15212., 13340., 15254., 13376., 15296.,  7444.,  8696.,  7464.,  8720.,  7484.,  8744.,  7504.,  8768.,  7524.,  8792.,  7544.,  8816.,  7564.,  8840.,  7584.,  8864.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2480., 2900., 2496., 2920., 2512., 2940., 2528., 2960., 2544., 2980., 2560., 3000., 2576., 3020., 2592., 3040., 2608., 3060., 2624., 3080., 2640., 3100., 2656., 3120., 2672., 3140., 2688., 3160., 2704., 3180., 2720., 3200., 2736., 3220., 2752., 3240., 2768., 3260., 2784., 3280., 2800., 3300., 2816., 3320., 2832., 3340., 2848., 3360., 2864., 3380., 2880., 3400., 2896., 3420., 2912., 3440., 3248., 3860., 3264., 3880., 3280., 3900., 3296., 3920., 3312., 3940., 3328., 3960., 3344., 3980., 3360., 4000., 3376., 4020., 3392., 4040., 3408., 4060., 3424., 4080., 3440., 4100., 3456., 4120., 3472., 4140., 3488., 4160., 3504., 4180., 3520., 4200., 3536., 4220., 3552., 4240., 3568., 4260., 3584., 4280., 3600., 4300., 3616., 4320., 3632., 4340., 3648., 4360., 3664., 4380., 3680., 4400., 4016., 4820., 4032., 4840., 4048., 4860., 4064., 4880., 4080., 4900., 4096., 4920., 4112., 4940., 4128., 4960., 4144., 4980., 4160., 5000., 4176., 5020., 4192., 5040., 4208., 5060., 4224., 5080., 4240., 5100., 4256., 5120., 4272., 5140., 4288., 5160., 4304., 5180., 4320., 5200., 4336., 5220., 4352., 5240., 4368., 5260., 4384., 5280., 4400., 5300., 4416., 5320., 4432., 5340., 4448., 5360., 4784., 5780., 4800., 5800., 4816., 5820., 4832., 5840., 4848., 5860., 4864., 5880., 4880., 5900., 4896., 5920., 4912., 5940., 4928., 5960., 4944., 5980., 4960., 6000., 4976., 6020., 4992., 6040., 5008., 6060., 5024., 6080., 5040., 6100., 5056., 6120., 5072., 6140., 5088., 6160., 5104., 6180., 5120., 6200., 5136., 6220., 5152., 6240., 5168., 6260., 5184., 6280., 5200., 6300., 5216., 6320., 5552., 6740., 5568., 6760., 5584., 6780., 5600., 6800., 5616., 6820., 5632., 6840., 5648., 6860., 5664., 6880., 5680., 6900., 5696., 6920., 5712., 6940., 5728., 6960., 5744., 6980., 5760., 7000., 5776., 7020., 5792., 7040., 5808., 7060., 5824., 7080., 5840., 7100., 5856., 7120., 5872., 7140., 5888., 7160., 5904., 7180., 5920., 7200., 5936., 7220., 5952., 7240., 5968., 7260., 5984., 7280., 6320., 7700., 6336., 7720., 6352., 7740., 6368., 7760., 6384., 7780., 6400., 7800., 6416., 7820., 6432., 7840., 6448., 7860., 6464., 7880., 6480., 7900., 6496., 7920., 6512., 7940., 6528., 7960., 6544., 7980., 6560., 8000., 6576., 8020., 6592., 8040., 6608., 8060., 6624., 8080., 6640., 8100., 6656., 8120., 6672., 8140., 6688., 8160., 6704., 8180., 6720., 8200., 6736., 8220., 6752., 8240., 7088., 8660., 7104., 8680., 7120., 8700., 7136., 8720., 7152., 8740., 7168., 8760., 7184., 8780., 7200., 8800., 7216., 8820., 7232., 8840., 7248., 8860., 7264., 8880., 7280., 8900., 7296., 8920., 7312., 8940., 7328., 8960., 7344., 8980., 7360., 9000., 7376., 9020., 7392., 9040., 7408., 9060., 7424., 9080., 7440., 9100., 7456., 9120., 7472., 9140., 7488., 9160., 7504., 9180., 7520., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7796.,  8136.,  8476.,  8816.,  7896.,  8240.,  8584.,  8928.,  7996.,  8344.,  8692.,  9040.,  8096.,  8448.,  8800.,  9152., 10282., 10768., 11254., 11740., 10420., 10912., 11404., 11896., 10558., 11056., 11554., 12052., 10696., 11200., 11704., 12208., 10834., 11344., 11854., 12364., 10972., 11488., 12004., 12520., 11110., 11632., 12154., 12676., 11248., 11776., 12304., 12832., 11386., 11920., 12454., 12988., 11524., 12064., 12604., 13144., 11662., 12208., 12754., 13300., 11800., 12352., 12904., 13456., 11938., 12496., 13054., 13612., 12076., 12640., 13204., 13768., 12214., 12784., 13354., 13924., 12352., 12928., 13504., 14080.,  6772.,  7128.,  7484.,  7840.,  6856.,  7216.,  7576.,  7936.,  6940.,  7304.,  7668.,  8032.,  7024.,  7392.,  7760.,  8128.,  7108.,  7480.,  7852.,  8224.,  7192.,  7568.,  7944.,  8320.,  7276.,  7656.,  8036.,  8416.,  7360.,  7744.,  8128.,  8512., 12596., 13128., 13660., 14192., 12696., 13232., 13768., 14304., 12796., 13336., 13876., 14416., 12896., 13440., 13984., 14528., 16906., 17680., 18454., 19228., 17044., 17824., 18604., 19384., 17182., 17968., 18754., 19540., 17320., 18112., 18904., 19696., 17458., 18256., 19054., 19852., 17596., 18400., 19204., 20008., 17734., 18544., 19354., 20164., 17872., 18688., 19504., 20320., 18010., 18832., 19654., 20476., 18148., 18976., 19804., 20632., 18286., 19120., 19954., 20788., 18424., 19264., 20104., 20944., 18562., 19408., 20254., 21100., 18700., 19552., 20404., 21256., 18838., 19696., 20554., 21412., 18976., 19840., 20704., 21568., 10804., 11352., 11900., 12448., 10888., 11440., 11992., 12544., 10972., 11528., 12084., 12640., 11056., 11616., 12176., 12736., 11140., 11704., 12268., 12832., 11224., 11792., 12360., 12928., 11308., 11880., 12452., 13024., 11392., 11968., 12544., 13120., 17722., 18488., 19254., 20020., 17836., 18608., 19380., 20152., 17950., 18728., 19506., 20284., 18064., 18848., 19632., 20416., 23913., 25026., 26139., 27252., 24066., 25188., 26310., 27432., 24219., 25350., 26481., 27612., 24372., 25512., 26652., 27792., 24525., 25674., 26823., 27972., 24678., 25836., 26994., 28152., 24831., 25998., 27165., 28332., 24984., 26160., 27336., 28512., 25137., 26322., 27507., 28692., 25290., 26484., 27678., 28872., 25443., 26646., 27849., 29052., 25596., 26808., 28020., 29232., 25749., 26970., 28191., 29412., 25902., 27132., 28362., 29592., 26055., 27294., 28533., 29772., 26208., 27456., 28704., 29952., 15018., 15808., 16598., 17388., 15108., 15904., 16700., 17496., 15198., 16000., 16802., 17604., 15288., 16096., 16904., 17712., 15378., 16192., 17006., 17820., 15468., 16288., 17108., 17928., 15558., 16384., 17210., 18036., 15648., 16480., 17312., 18144., 17818., 18616., 19414., 20212., 17932., 18736., 19540., 20344., 18046., 18856., 19666., 20476., 18160., 18976., 19792., 20608., 21529., 22562., 23595., 24628., 21682., 22724., 23766., 24808., 21835., 22886., 23937., 24988., 21988., 23048., 24108., 25168., 22141., 23210., 24279., 25348., 22294., 23372., 24450., 25528., 22447., 23534., 24621., 25708., 22600., 23696., 24792., 25888., 22753., 23858., 24963., 26068., 22906., 24020., 25134., 26248., 23059., 24182., 25305., 26428., 23212., 24344., 25476., 26608., 23365., 24506., 25647., 26788., 23518., 24668., 25818., 26968., 23671., 24830., 25989., 27148., 23824., 24992., 26160., 27328., 11658., 12224., 12790., 13356., 11748., 12320., 12892., 13464., 11838., 12416., 12994., 13572., 11928., 12512., 13096., 13680., 12018., 12608., 13198., 13788., 12108., 12704., 13300., 13896., 12198., 12800., 13402., 14004., 12288., 12896., 13504., 14112., 18938., 19768., 20598., 21428., 19052., 19888., 20724., 21560., 19166., 20008., 20850., 21692., 19280., 20128., 20976., 21824., 17097., 18050., 19003., 19956., 17250., 18212., 19174., 20136., 17403., 18374., 19345., 20316., 17556., 18536., 19516., 20496., 17709., 18698., 19687., 20676., 17862., 18860., 19858., 20856., 18015., 19022., 20029., 21036., 18168., 19184., 20200., 21216., 18321., 19346., 20371., 21396., 18474., 19508., 20542., 21576., 18627., 19670., 20713., 21756., 18780., 19832., 20884., 21936., 18933., 19994., 21055., 22116., 19086., 20156., 21226., 22296., 19239., 20318., 21397., 22476., 19392., 20480., 21568., 22656.,  8554.,  9152.,  9750., 10348.,  8644.,  9248.,  9852., 10456.,  8734.,  9344.,  9954., 10564.,  8824.,  9440., 10056., 10672.,  8914.,  9536., 10158., 10780.,  9004.,  9632., 10260., 10888.,  9094.,  9728., 10362., 10996.,  9184.,  9824., 10464., 11104.,  6212.,  6744.,  7276.,  7808.,  6264.,  6800.,  7336.,  7872.,  6316.,  6856.,  7396.,  7936.,  6368.,  6912.,  7456.,  8000.,  7618.,  8392.,  9166.,  9940.,  7684.,  8464.,  9244., 10024.,  7750.,  8536.,  9322., 10108.,  7816.,  8608.,  9400., 10192.,  7882.,  8680.,  9478., 10276.,  7948.,  8752.,  9556., 10360.,  8014.,  8824.,  9634., 10444.,  8080.,  8896.,  9712., 10528.,  8146.,  8968.,  9790., 10612.,  8212.,  9040.,  9868., 10696.,  8278.,  9112.,  9946., 10780.,  8344.,  9184., 10024., 10864.,  8410.,  9256., 10102., 10948.,  8476.,  9328., 10180., 11032.,  8542.,  9400., 10258., 11116.,  8608.,  9472., 10336., 11200.,  4228.,  4776.,  5324.,  5872.,  4264.,  4816.,  5368.,  5920.,  4300.,  4856.,  5412.,  5968.,  4336.,  4896.,  5456.,  6016.,  4372.,  4936.,  5500.,  6064.,  4408.,  4976.,  5544.,  6112.,  4444.,  5016.,  5588.,  6160.,  4480.,  5056.,  5632.,  6208.,  8708.,  9432., 10156., 10880.,  8760.,  9488., 10216., 10944.,  8812.,  9544., 10276., 11008.,  8864.,  9600., 10336., 11072., 10786., 11848., 12910., 13972., 10852., 11920., 12988., 14056., 10918., 11992., 13066., 14140., 10984., 12064., 13144., 14224., 11050., 12136., 13222., 14308., 11116., 12208., 13300., 14392., 11182., 12280., 13378., 14476., 11248., 12352., 13456., 14560., 11314., 12424., 13534., 14644., 11380., 12496., 13612., 14728., 11446., 12568., 13690., 14812., 11512., 12640., 13768., 14896., 11578., 12712., 13846., 14980., 11644., 12784., 13924., 15064., 11710., 12856., 14002., 15148., 11776., 12928., 14080., 15232.,  5956.,  6696.,  7436.,  8176.,  5992.,  6736.,  7480.,  8224.,  6028.,  6776.,  7524.,  8272.,  6064.,  6816.,  7568.,  8320.,  6100.,  6856.,  7612.,  8368.,  6136.,  6896.,  7656.,  8416.,  6172.,  6936.,  7700.,  8464.,  6208.,  6976.,  7744.,  8512.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4540.,  4960.,  5380.,  5800.,  4568.,  4992.,  5416.,  5840.,  4596.,  5024.,  5452.,  5880.,  4624.,  5056.,  5488.,  5920.,  4652.,  5088.,  5524.,  5960.,  4680.,  5120.,  5560.,  6000.,  4708.,  5152.,  5596.,  6040.,  4736.,  5184.,  5632.,  6080.,  4764.,  5216.,  5668.,  6120.,  4792.,  5248.,  5704.,  6160.,  4820.,  5280.,  5740.,  6200.,  4848.,  5312.,  5776.,  6240.,  4876.,  5344.,  5812.,  6280.,  4904.,  5376.,  5848.,  6320.,  4932.,  5408.,  5884.,  6360.,  4960.,  5440.,  5920.,  6400.,  4988.,  5472.,  5956.,  6440.,  5016.,  5504.,  5992.,  6480.,  5044.,  5536.,  6028.,  6520.,  5072.,  5568.,  6064.,  6560.,  5100.,  5600.,  6100.,  6600.,  5128.,  5632.,  6136.,  6640.,  5156.,  5664.,  6172.,  6680.,  5184.,  5696.,  6208.,  6720.,  5212.,  5728.,  6244.,  6760.,  5240.,  5760.,  6280.,  6800.,  5268.,  5792.,  6316.,  6840.,  5296.,  5824.,  6352.,  6880.,  5884.,  6496.,  7108.,  7720.,  5912.,  6528.,  7144.,  7760.,  5940.,  6560.,  7180.,  7800.,  5968.,  6592.,  7216.,  7840.,  5996.,  6624.,  7252.,  7880.,  6024.,  6656.,  7288.,  7920.,  6052.,  6688.,  7324.,  7960.,  6080.,  6720.,  7360.,  8000.,  6108.,  6752.,  7396.,  8040.,  6136.,  6784.,  7432.,  8080.,  6164.,  6816.,  7468.,  8120.,  6192.,  6848.,  7504.,  8160.,  6220.,  6880.,  7540.,  8200.,  6248.,  6912.,  7576.,  8240.,  6276.,  6944.,  7612.,  8280.,  6304.,  6976.,  7648.,  8320.,  6332.,  7008.,  7684.,  8360.,  6360.,  7040.,  7720.,  8400.,  6388.,  7072.,  7756.,  8440.,  6416.,  7104.,  7792.,  8480.,  6444.,  7136.,  7828.,  8520.,  6472.,  7168.,  7864.,  8560.,  6500.,  7200.,  7900.,  8600.,  6528.,  7232.,  7936.,  8640.,  6556.,  7264.,  7972.,  8680.,  6584.,  7296.,  8008.,  8720.,  6612.,  7328.,  8044.,  8760.,  6640.,  7360.,  8080.,  8800.,  7228.,  8032.,  8836.,  9640.,  7256.,  8064.,  8872.,  9680.,  7284.,  8096.,  8908.,  9720.,  7312.,  8128.,  8944.,  9760.,  7340.,  8160.,  8980.,  9800.,  7368.,  8192.,  9016.,  9840.,  7396.,  8224.,  9052.,  9880.,  7424.,  8256.,  9088.,  9920.,  7452.,  8288.,  9124.,  9960.,  7480.,  8320.,  9160., 10000.,  7508.,  8352.,  9196., 10040.,  7536.,  8384.,  9232., 10080.,  7564.,  8416.,  9268., 10120.,  7592.,  8448.,  9304., 10160.,  7620.,  8480.,  9340., 10200.,  7648.,  8512.,  9376., 10240.,  7676.,  8544.,  9412., 10280.,  7704.,  8576.,  9448., 10320.,  7732.,  8608.,  9484., 10360.,  7760.,  8640.,  9520., 10400.,  7788.,  8672.,  9556., 10440.,  7816.,  8704.,  9592., 10480.,  7844.,  8736.,  9628., 10520.,  7872.,  8768.,  9664., 10560.,  7900.,  8800.,  9700., 10600.,  7928.,  8832.,  9736., 10640.,  7956.,  8864.,  9772., 10680.,  7984.,  8896.,  9808., 10720.,  8572.,  9568., 10564., 11560.,  8600.,  9600., 10600., 11600.,  8628.,  9632., 10636., 11640.,  8656.,  9664., 10672., 11680.,  8684.,  9696., 10708., 11720.,  8712.,  9728., 10744., 11760.,  8740.,  9760., 10780., 11800.,  8768.,  9792., 10816., 11840.,  8796.,  9824., 10852., 11880.,  8824.,  9856., 10888., 11920.,  8852.,  9888., 10924., 11960.,  8880.,  9920., 10960., 12000.,  8908.,  9952., 10996., 12040.,  8936.,  9984., 11032., 12080.,  8964., 10016., 11068., 12120.,  8992., 10048., 11104., 12160.,  9020., 10080., 11140., 12200.,  9048., 10112., 11176., 12240.,  9076., 10144., 11212., 12280.,  9104., 10176., 11248., 12320.,  9132., 10208., 11284., 12360.,  9160., 10240., 11320., 12400.,  9188., 10272., 11356., 12440.,  9216., 10304., 11392., 12480.,  9244., 10336., 11428., 12520.,  9272., 10368., 11464., 12560.,  9300., 10400., 11500., 12600.,  9328., 10432., 11536., 12640.,  9916., 11104., 12292., 13480.,  9944., 11136., 12328., 13520.,  9972., 11168., 12364., 13560., 10000., 11200., 12400., 13600., 10028., 11232., 12436., 13640., 10056., 11264., 12472., 13680., 10084., 11296., 12508., 13720., 10112., 11328., 12544., 13760., 10140., 11360., 12580., 13800., 10168., 11392., 12616., 13840., 10196., 11424., 12652., 13880., 10224., 11456., 12688., 13920., 10252., 11488., 12724., 13960., 10280., 11520., 12760., 14000., 10308., 11552., 12796., 14040., 10336., 11584., 12832., 14080., 10364., 11616., 12868., 14120., 10392., 11648., 12904., 14160., 10420., 11680., 12940., 14200., 10448., 11712., 12976., 14240., 10476., 11744., 13012., 14280., 10504., 11776., 13048., 14320., 10532., 11808., 13084., 14360., 10560., 11840., 13120., 14400., 10588., 11872., 13156., 14440., 10616., 11904., 13192., 14480., 10644., 11936., 13228., 14520., 10672., 11968., 13264., 14560., 11260., 12640., 14020., 15400., 11288., 12672., 14056., 15440., 11316., 12704., 14092., 15480., 11344., 12736., 14128., 15520., 11372., 12768., 14164., 15560., 11400., 12800., 14200., 15600., 11428., 12832., 14236., 15640., 11456., 12864., 14272., 15680., 11484., 12896., 14308., 15720., 11512., 12928., 14344., 15760., 11540., 12960., 14380., 15800., 11568., 12992., 14416., 15840., 11596., 13024., 14452., 15880., 11624., 13056., 14488., 15920., 11652., 13088., 14524., 15960., 11680., 13120., 14560., 16000., 11708., 13152., 14596., 16040., 11736., 13184., 14632., 16080., 11764., 13216., 14668., 16120., 11792., 13248., 14704., 16160., 11820., 13280., 14740., 16200., 11848., 13312., 14776., 16240., 11876., 13344., 14812., 16280., 11904., 13376., 14848., 16320., 11932., 13408., 14884., 16360., 11960., 13440., 14920., 16400., 11988., 13472., 14956., 16440., 12016., 13504., 14992., 16480., 12604., 14176., 15748., 17320., 12632., 14208., 15784., 17360., 12660., 14240., 15820., 17400., 12688., 14272., 15856., 17440., 12716., 14304., 15892., 17480., 12744., 14336., 15928., 17520., 12772., 14368., 15964., 17560., 12800., 14400., 16000., 17600., 12828., 14432., 16036., 17640., 12856., 14464., 16072., 17680., 12884., 14496., 16108., 17720., 12912., 14528., 16144., 17760., 12940., 14560., 16180., 17800., 12968., 14592., 16216., 17840., 12996., 14624., 16252., 17880., 13024., 14656., 16288., 17920., 13052., 14688., 16324., 17960., 13080., 14720., 16360., 18000., 13108., 14752., 16396., 18040., 13136., 14784., 16432., 18080., 13164., 14816., 16468., 18120., 13192., 14848., 16504., 18160., 13220., 14880., 16540., 18200., 13248., 14912., 16576., 18240., 13276., 14944., 16612., 18280., 13304., 14976., 16648., 18320., 13332., 15008., 16684., 18360., 13360., 15040., 16720., 18400.};
  const std::array<int, 4> in_shape = {{ 1, 11, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3754., 3808., 4772., 4840., 3376., 3424., 3472., 4510., 4564., 5724., 5792., 4048., 4096., 4144., 5337., 5400., 6766., 6844., 4770., 4824., 4878., 6219., 6282., 7858., 7936., 5526., 5580., 5634., 7101., 7164., 8950., 9028., 6282., 6336., 6390., 2662., 2692., 3260., 3296., 2200., 2224., 2248., 3082., 3112., 3764., 3800., 2536., 2560., 2584.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,  766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996., 1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166., 1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7130.,  7508.,  7232.,  7616.,  9040.,  9544.,  9168.,  9680.,  6374.,  6752.,  6464.,  6848.,  6554.,  6944.,  8558.,  9020.,  8660.,  9128., 10832., 11448., 10960., 11584.,  7634.,  8096.,  7724.,  8192.,  7814.,  8288., 10107., 10674., 10224., 10800., 12776., 13532., 12920., 13688.,  8973.,  9540.,  9072.,  9648.,  9171.,  9756., 11745., 12438., 11862., 12564., 14792., 15716., 14936., 15872., 10359., 11052., 10458., 11160., 10557., 11268., 13383., 14202., 13500., 14328., 16808., 17900., 16952., 18056., 11745., 12564., 11844., 12672., 11943., 12780.,  4862.,  5324.,  4916.,  5384.,  5904.,  6520.,  5968.,  6592.,  3938.,  4400.,  3980.,  4448.,  4022.,  4496.,  5618.,  6164.,  5672.,  6224.,  6800.,  7528.,  6864.,  7600.,  4526.,  5072.,  4568.,  5120.,  4610.,  5168.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,  808.,  952.,  824.,  972.,  952., 1132.,  968., 1152.,  984., 1172., 1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412., 1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512., 1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752., 1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992., 1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092., 1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332., 1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572., 2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13882., 14260., 14638., 15016., 14080., 14464., 14848., 15232., 17576., 18080., 18584., 19088., 17824., 18336., 18848., 19360., 12370., 12748., 13126., 13504., 12544., 12928., 13312., 13696., 12718., 13108., 13498., 13888., 16654., 17116., 17578., 18040., 16852., 17320., 17788., 18256., 21048., 21664., 22280., 22896., 21296., 21920., 22544., 23168., 14806., 15268., 15730., 16192., 14980., 15448., 15916., 16384., 15154., 15628., 16102., 16576., 19647., 20214., 20781., 21348., 19872., 20448., 21024., 21600., 24796., 25552., 26308., 27064., 25072., 25840., 26608., 27376., 17379., 17946., 18513., 19080., 17568., 18144., 18720., 19296., 17757., 18342., 18927., 19512.,  7053.,  7362.,  7671.,  7980.,  7278.,  7596.,  7914.,  8232., 12916., 13456., 13996., 14536., 13192., 13744., 14296., 14848.,  5817.,  6126.,  6435.,  6744.,  6006.,  6324.,  6642.,  6960.,  6195.,  6522.,  6849.,  7176., 10203., 10638., 11073., 11508., 10428., 10872., 11316., 11760., 12556., 13136., 13716., 14296., 12832., 13424., 14016., 14608.,  8463.,  8898.,  9333.,  9768.,  8652.,  9096.,  9540.,  9984.,  8841.,  9294.,  9747., 10200.,  9262.,  9724., 10186., 10648.,  9364.,  9832., 10300., 10768., 11192., 11808., 12424., 13040., 11312., 11936., 12560., 13184.,  7414.,  7876.,  8338.,  8800.,  7492.,  7960.,  8428.,  8896.,  7570.,  8044.,  8518.,  8992., 10690., 11236., 11782., 12328., 10792., 11344., 11896., 12448., 12872., 13600., 14328., 15056., 12992., 13728., 14464., 15200.,  8506.,  9052.,  9598., 10144.,  8584.,  9136.,  9688., 10240.,  8662.,  9220.,  9778., 10336.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520., 1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864., 1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904., 2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344., 1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064., 2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824., 2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448., 2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024., 2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832., 3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504., 2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992., 3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984., 2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376., 3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184., 3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760., 4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664., 3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144., 4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144., 3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304., 4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7454.,  7508.,  7562.,  7616.,  9476.,  9544.,  9612.,  9680.,  6704.,  6752.,  6800.,  6848.,  6896.,  6944.,  8966.,  9020.,  9074.,  9128., 11380., 11448., 11516., 11584.,  8048.,  8096.,  8144.,  8192.,  8240.,  8288., 10611., 10674., 10737., 10800., 13454., 13532., 13610., 13688.,  9486.,  9540.,  9594.,  9648.,  9702.,  9756., 12375., 12438., 12501., 12564., 15638., 15716., 15794., 15872., 10998., 11052., 11106., 11160., 11214., 11268., 14139., 14202., 14265., 14328., 17822., 17900., 17978., 18056., 12510., 12564., 12618., 12672., 12726., 12780.,  5294.,  5324.,  5354.,  5384.,  6484.,  6520.,  6556.,  6592.,  4376.,  4400.,  4424.,  4448.,  4472.,  4496.,  6134.,  6164.,  6194.,  6224.,  7492.,  7528.,  7564.,  7600.,  5048.,  5072.,  5096.,  5120.,  5144.,  5168.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 842.,  852.,  862.,  872.,  882.,  892.,  902.,  912.,  922.,  932.,  942.,  952.,  962.,  972., 1122., 1132., 1142., 1152., 1162., 1172., 1182., 1192., 1202., 1212., 1222., 1232., 1242., 1252., 1402., 1412., 1422., 1432., 1442., 1452., 1462., 1472., 1482., 1492., 1502., 1512., 1522., 1532., 1682., 1692., 1702., 1712., 1722., 1732., 1742., 1752., 1762., 1772., 1782., 1792., 1802., 1812., 1962., 1972., 1982., 1992., 2002., 2012., 2022., 2032., 2042., 2052., 2062., 2072., 2082., 2092., 2242., 2252., 2262., 2272., 2282., 2292., 2302., 2312., 2322., 2332., 2342., 2352., 2362., 2372., 2522., 2532., 2542., 2552., 2562., 2572., 2582., 2592., 2602., 2612., 2622., 2632., 2642., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14158., 14908., 14260., 15016., 14362., 15124., 14464., 15232., 17952., 18952., 18080., 19088., 18208., 19224., 18336., 19360., 12658., 13408., 12748., 13504., 12838., 13600., 12928., 13696., 13018., 13792., 13108., 13888., 17014., 17932., 17116., 18040., 17218., 18148., 17320., 18256., 21536., 22760., 21664., 22896., 21792., 23032., 21920., 23168., 15178., 16096., 15268., 16192., 15358., 16288., 15448., 16384., 15538., 16480., 15628., 16576., 20097., 21222., 20214., 21348., 20331., 21474., 20448., 21600., 25408., 26908., 25552., 27064., 25696., 27220., 25840., 27376., 17847., 18972., 17946., 19080., 18045., 19188., 18144., 19296., 18243., 19404., 18342., 19512.,  7245.,  7854.,  7362.,  7980.,  7479.,  8106.,  7596.,  8232., 13312., 14380., 13456., 14536., 13600., 14692., 13744., 14848.,  6027.,  6636.,  6126.,  6744.,  6225.,  6852.,  6324.,  6960.,  6423.,  7068.,  6522.,  7176., 10521., 11382., 10638., 11508., 10755., 11634., 10872., 11760., 12992., 14140., 13136., 14296., 13280., 14452., 13424., 14608.,  8799.,  9660.,  8898.,  9768.,  8997.,  9876.,  9096.,  9984.,  9195., 10092.,  9294., 10200.,  9670., 10588.,  9724., 10648.,  9778., 10708.,  9832., 10768., 11744., 12968., 11808., 13040., 11872., 13112., 11936., 13184.,  7834.,  8752.,  7876.,  8800.,  7918.,  8848.,  7960.,  8896.,  8002.,  8944.,  8044.,  8992., 11182., 12268., 11236., 12328., 11290., 12388., 11344., 12448., 13536., 14984., 13600., 15056., 13664., 15128., 13728., 15200.,  9010., 10096.,  9052., 10144.,  9094., 10192.,  9136., 10240.,  9178., 10288.,  9220., 10336.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1440., 1684., 1456., 1704., 1472., 1724., 1488., 1744., 1504., 1764., 1520., 1784., 1536., 1804., 1552., 1824., 1568., 1844., 1584., 1864., 1600., 1884., 1616., 1904., 1632., 1924., 1648., 1944., 1888., 2244., 1904., 2264., 1920., 2284., 1936., 2304., 1952., 2324., 1968., 2344., 1984., 2364., 2000., 2384., 2016., 2404., 2032., 2424., 2048., 2444., 2064., 2464., 2080., 2484., 2096., 2504., 2336., 2804., 2352., 2824., 2368., 2844., 2384., 2864., 2400., 2884., 2416., 2904., 2432., 2924., 2448., 2944., 2464., 2964., 2480., 2984., 2496., 3004., 2512., 3024., 2528., 3044., 2544., 3064., 2784., 3364., 2800., 3384., 2816., 3404., 2832., 3424., 2848., 3444., 2864., 3464., 2880., 3484., 2896., 3504., 2912., 3524., 2928., 3544., 2944., 3564., 2960., 3584., 2976., 3604., 2992., 3624., 3232., 3924., 3248., 3944., 3264., 3964., 3280., 3984., 3296., 4004., 3312., 4024., 3328., 4044., 3344., 4064., 3360., 4084., 3376., 4104., 3392., 4124., 3408., 4144., 3424., 4164., 3440., 4184., 3680., 4484., 3696., 4504., 3712., 4524., 3728., 4544., 3744., 4564., 3760., 4584., 3776., 4604., 3792., 4624., 3808., 4644., 3824., 4664., 3840., 4684., 3856., 4704., 3872., 4724., 3888., 4744., 4128., 5044., 4144., 5064., 4160., 5084., 4176., 5104., 4192., 5124., 4208., 5144., 4224., 5164., 4240., 5184., 4256., 5204., 4272., 5224., 4288., 5244., 4304., 5264., 4320., 5284., 4336., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11822., 12188., 12554., 12920., 12020., 12392., 12764., 13136., 12218., 12596., 12974., 13352., 12416., 12800., 13184., 13568., 14936., 15424., 15912., 16400., 15184., 15680., 16176., 16672., 15432., 15936., 16440., 16944., 15680., 16192., 16704., 17216., 10358., 10724., 11090., 11456., 10532., 10904., 11276., 11648., 10706., 11084., 11462., 11840., 10880., 11264., 11648., 12032., 11054., 11444., 11834., 12224., 11228., 11624., 12020., 12416., 17366., 17900., 18434., 18968., 17564., 18104., 18644., 19184., 17762., 18308., 18854., 19400., 17960., 18512., 19064., 19616., 21880., 22592., 23304., 24016., 22128., 22848., 23568., 24288., 22376., 23104., 23832., 24560., 22624., 23360., 24096., 24832., 15230., 15764., 16298., 16832., 15404., 15944., 16484., 17024., 15578., 16124., 16670., 17216., 15752., 16304., 16856., 17408., 15926., 16484., 17042., 17600., 16100., 16664., 17228., 17792., 19613., 20226., 20839., 21452., 19838., 20460., 21082., 21704., 20063., 20694., 21325., 21956., 20288., 20928., 21568., 22208., 22436., 23168., 23900., 24632., 22712., 23456., 24200., 24944., 22988., 23744., 24500., 25256., 23264., 24032., 24800., 25568., 17161., 17774., 18387., 19000., 17350., 17972., 18594., 19216., 17539., 18170., 18801., 19432., 17728., 18368., 19008., 19648., 15229., 15750., 16271., 16792., 15418., 15948., 16478., 17008.,  4281.,  4506.,  4731.,  4956.,  4506.,  4740.,  4974.,  5208.,  4731.,  4974.,  5217.,  5460.,  4956.,  5208.,  5460.,  5712.,  9556.,  9984., 10412., 10840.,  9832., 10272., 10712., 11152., 10108., 10560., 11012., 11464., 10384., 10848., 11312., 11776.,  3381.,  3606.,  3831.,  4056.,  3570.,  3804.,  4038.,  4272.,  3759.,  4002.,  4245.,  4488.,  3948.,  4200.,  4452.,  4704.,  4137.,  4398.,  4659.,  4920.,  4326.,  4596.,  4866.,  5136., 10581., 11058., 11535., 12012., 10806., 11292., 11778., 12264., 11031., 11526., 12021., 12516., 11256., 11760., 12264., 12768., 13060., 13696., 14332., 14968., 13336., 13984., 14632., 15280., 13612., 14272., 14932., 15592., 13888., 14560., 15232., 15904.,  8673.,  9150.,  9627., 10104.,  8862.,  9348.,  9834., 10320.,  9051.,  9546., 10041., 10536.,  9240.,  9744., 10248., 10752.,  9429.,  9942., 10455., 10968.,  9618., 10140., 10662., 11184.,  8822.,  9356.,  9890., 10424.,  8924.,  9464., 10004., 10544.,  9026.,  9572., 10118., 10664.,  9128.,  9680., 10232., 10784., 10488., 11200., 11912., 12624., 10608., 11328., 12048., 12768., 10728., 11456., 12184., 12912., 10848., 11584., 12320., 13056.,  6686.,  7220.,  7754.,  8288.,  6764.,  7304.,  7844.,  8384.,  6842.,  7388.,  7934.,  8480.,  6920.,  7472.,  8024.,  8576.,  6998.,  7556.,  8114.,  8672.,  7076.,  7640.,  8204.,  8768., 10014., 10588., 11162., 11736., 10116., 10696., 11276., 11856., 10218., 10804., 11390., 11976., 10320., 10912., 11504., 12096., 11032., 11712., 12392., 13072., 11152., 11840., 12528., 13216., 11272., 11968., 12664., 13360., 11392., 12096., 12800., 13504.,  7718.,  8292.,  8866.,  9440.,  7796.,  8376.,  8956.,  9536.,  7874.,  8460.,  9046.,  9632.,  7952.,  8544.,  9136.,  9728.,  7390.,  7860.,  8330.,  8800.,  7468.,  7944.,  8420.,  8896.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2636.,  2880.,  3124.,  3368.,  2664.,  2912.,  3160.,  3408.,  2692.,  2944.,  3196.,  3448.,  2720.,  2976.,  3232.,  3488.,  2748.,  3008.,  3268.,  3528.,  2776.,  3040.,  3304.,  3568.,  2804.,  3072.,  3340.,  3608.,  2832.,  3104.,  3376.,  3648.,  2860.,  3136.,  3412.,  3688.,  2888.,  3168.,  3448.,  3728.,  2916.,  3200.,  3484.,  3768.,  2944.,  3232.,  3520.,  3808.,  2972.,  3264.,  3556.,  3848.,  3000.,  3296.,  3592.,  3888.,  3420.,  3776.,  4132.,  4488.,  3448.,  3808.,  4168.,  4528.,  3476.,  3840.,  4204.,  4568.,  3504.,  3872.,  4240.,  4608.,  3532.,  3904.,  4276.,  4648.,  3560.,  3936.,  4312.,  4688.,  3588.,  3968.,  4348.,  4728.,  3616.,  4000.,  4384.,  4768.,  3644.,  4032.,  4420.,  4808.,  3672.,  4064.,  4456.,  4848.,  3700.,  4096.,  4492.,  4888.,  3728.,  4128.,  4528.,  4928.,  3756.,  4160.,  4564.,  4968.,  3784.,  4192.,  4600.,  5008.,  4204.,  4672.,  5140.,  5608.,  4232.,  4704.,  5176.,  5648.,  4260.,  4736.,  5212.,  5688.,  4288.,  4768.,  5248.,  5728.,  4316.,  4800.,  5284.,  5768.,  4344.,  4832.,  5320.,  5808.,  4372.,  4864.,  5356.,  5848.,  4400.,  4896.,  5392.,  5888.,  4428.,  4928.,  5428.,  5928.,  4456.,  4960.,  5464.,  5968.,  4484.,  4992.,  5500.,  6008.,  4512.,  5024.,  5536.,  6048.,  4540.,  5056.,  5572.,  6088.,  4568.,  5088.,  5608.,  6128.,  4988.,  5568.,  6148.,  6728.,  5016.,  5600.,  6184.,  6768.,  5044.,  5632.,  6220.,  6808.,  5072.,  5664.,  6256.,  6848.,  5100.,  5696.,  6292.,  6888.,  5128.,  5728.,  6328.,  6928.,  5156.,  5760.,  6364.,  6968.,  5184.,  5792.,  6400.,  7008.,  5212.,  5824.,  6436.,  7048.,  5240.,  5856.,  6472.,  7088.,  5268.,  5888.,  6508.,  7128.,  5296.,  5920.,  6544.,  7168.,  5324.,  5952.,  6580.,  7208.,  5352.,  5984.,  6616.,  7248.,  5772.,  6464.,  7156.,  7848.,  5800.,  6496.,  7192.,  7888.,  5828.,  6528.,  7228.,  7928.,  5856.,  6560.,  7264.,  7968.,  5884.,  6592.,  7300.,  8008.,  5912.,  6624.,  7336.,  8048.,  5940.,  6656.,  7372.,  8088.,  5968.,  6688.,  7408.,  8128.,  5996.,  6720.,  7444.,  8168.,  6024.,  6752.,  7480.,  8208.,  6052.,  6784.,  7516.,  8248.,  6080.,  6816.,  7552.,  8288.,  6108.,  6848.,  7588.,  8328.,  6136.,  6880.,  7624.,  8368.,  6556.,  7360.,  8164.,  8968.,  6584.,  7392.,  8200.,  9008.,  6612.,  7424.,  8236.,  9048.,  6640.,  7456.,  8272.,  9088.,  6668.,  7488.,  8308.,  9128.,  6696.,  7520.,  8344.,  9168.,  6724.,  7552.,  8380.,  9208.,  6752.,  7584.,  8416.,  9248.,  6780.,  7616.,  8452.,  9288.,  6808.,  7648.,  8488.,  9328.,  6836.,  7680.,  8524.,  9368.,  6864.,  7712.,  8560.,  9408.,  6892.,  7744.,  8596.,  9448.,  6920.,  7776.,  8632.,  9488.,  7340.,  8256.,  9172., 10088.,  7368.,  8288.,  9208., 10128.,  7396.,  8320.,  9244., 10168.,  7424.,  8352.,  9280., 10208.,  7452.,  8384.,  9316., 10248.,  7480.,  8416.,  9352., 10288.,  7508.,  8448.,  9388., 10328.,  7536.,  8480.,  9424., 10368.,  7564.,  8512.,  9460., 10408.,  7592.,  8544.,  9496., 10448.,  7620.,  8576.,  9532., 10488.,  7648.,  8608.,  9568., 10528.,  7676.,  8640.,  9604., 10568.,  7704.,  8672.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14854., 14908., 14962., 15016., 15070., 15124., 15178., 15232., 18884., 18952., 19020., 19088., 19156., 19224., 19292., 19360., 13360., 13408., 13456., 13504., 13552., 13600., 13648., 13696., 13744., 13792., 13840., 13888., 17878., 17932., 17986., 18040., 18094., 18148., 18202., 18256., 22692., 22760., 22828., 22896., 22964., 23032., 23100., 23168., 16048., 16096., 16144., 16192., 16240., 16288., 16336., 16384., 16432., 16480., 16528., 16576., 21159., 21222., 21285., 21348., 21411., 21474., 21537., 21600., 26830., 26908., 26986., 27064., 27142., 27220., 27298., 27376., 18918., 18972., 19026., 19080., 19134., 19188., 19242., 19296., 19350., 19404., 19458., 19512.,  7791.,  7854.,  7917.,  7980.,  8043.,  8106.,  8169.,  8232., 14302., 14380., 14458., 14536., 14614., 14692., 14770., 14848.,  6582.,  6636.,  6690.,  6744.,  6798.,  6852.,  6906.,  6960.,  7014.,  7068.,  7122.,  7176., 11319., 11382., 11445., 11508., 11571., 11634., 11697., 11760., 14062., 14140., 14218., 14296., 14374., 14452., 14530., 14608.,  9606.,  9660.,  9714.,  9768.,  9822.,  9876.,  9930.,  9984., 10038., 10092., 10146., 10200., 10558., 10588., 10618., 10648., 10678., 10708., 10738., 10768., 12932., 12968., 13004., 13040., 13076., 13112., 13148., 13184.,  8728.,  8752.,  8776.,  8800.,  8824.,  8848.,  8872.,  8896.,  8920.,  8944.,  8968.,  8992., 12238., 12268., 12298., 12328., 12358., 12388., 12418., 12448., 14948., 14984., 15020., 15056., 15092., 15128., 15164., 15200., 10072., 10096., 10120., 10144., 10168., 10192., 10216., 10240., 10264., 10288., 10312., 10336.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1674., 1684., 1694., 1704., 1714., 1724., 1734., 1744., 1754., 1764., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1914., 1924., 1934., 1944., 2234., 2244., 2254., 2264., 2274., 2284., 2294., 2304., 2314., 2324., 2334., 2344., 2354., 2364., 2374., 2384., 2394., 2404., 2414., 2424., 2434., 2444., 2454., 2464., 2474., 2484., 2494., 2504., 2794., 2804., 2814., 2824., 2834., 2844., 2854., 2864., 2874., 2884., 2894., 2904., 2914., 2924., 2934., 2944., 2954., 2964., 2974., 2984., 2994., 3004., 3014., 3024., 3034., 3044., 3054., 3064., 3354., 3364., 3374., 3384., 3394., 3404., 3414., 3424., 3434., 3444., 3454., 3464., 3474., 3484., 3494., 3504., 3514., 3524., 3534., 3544., 3554., 3564., 3574., 3584., 3594., 3604., 3614., 3624., 3914., 3924., 3934., 3944., 3954., 3964., 3974., 3984., 3994., 4004., 4014., 4024., 4034., 4044., 4054., 4064., 4074., 4084., 4094., 4104., 4114., 4124., 4134., 4144., 4154., 4164., 4174., 4184., 4474., 4484., 4494., 4504., 4514., 4524., 4534., 4544., 4554., 4564., 4574., 4584., 4594., 4604., 4614., 4624., 4634., 4644., 4654., 4664., 4674., 4684., 4694., 4704., 4714., 4724., 4734., 4744., 5034., 5044., 5054., 5064., 5074., 5084., 5094., 5104., 5114., 5124., 5134., 5144., 5154., 5164., 5174., 5184., 5194., 5204., 5214., 5224., 5234., 5244., 5254., 5264., 5274., 5284., 5294., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12086., 12812., 12188., 12920., 12290., 13028., 12392., 13136., 12494., 13244., 12596., 13352., 12698., 13460., 12800., 13568., 15296., 16264., 15424., 16400., 15552., 16536., 15680., 16672., 15808., 16808., 15936., 16944., 16064., 17080., 16192., 17216., 10634., 11360., 10724., 11456., 10814., 11552., 10904., 11648., 10994., 11744., 11084., 11840., 11174., 11936., 11264., 12032., 11354., 12128., 11444., 12224., 11534., 12320., 11624., 12416., 17798., 18860., 17900., 18968., 18002., 19076., 18104., 19184., 18206., 19292., 18308., 19400., 18410., 19508., 18512., 19616., 22464., 23880., 22592., 24016., 22720., 24152., 22848., 24288., 22976., 24424., 23104., 24560., 23232., 24696., 23360., 24832., 15674., 16736., 15764., 16832., 15854., 16928., 15944., 17024., 16034., 17120., 16124., 17216., 16214., 17312., 16304., 17408., 16394., 17504., 16484., 17600., 16574., 17696., 16664., 17792., 20109., 21326., 20226., 21452., 20343., 21578., 20460., 21704., 20577., 21830., 20694., 21956., 20811., 22082., 20928., 22208., 23024., 24476., 23168., 24632., 23312., 24788., 23456., 24944., 23600., 25100., 23744., 25256., 23888., 25412., 24032., 25568., 17675., 18892., 17774., 19000., 17873., 19108., 17972., 19216., 18071., 19324., 18170., 19432., 18269., 19540., 18368., 19648., 15651., 16684., 15750., 16792., 15849., 16900., 15948., 17008.,  4389.,  4830.,  4506.,  4956.,  4623.,  5082.,  4740.,  5208.,  4857.,  5334.,  4974.,  5460.,  5091.,  5586.,  5208.,  5712.,  9840., 10684.,  9984., 10840., 10128., 10996., 10272., 11152., 10416., 11308., 10560., 11464., 10704., 11620., 10848., 11776.,  3507.,  3948.,  3606.,  4056.,  3705.,  4164.,  3804.,  4272.,  3903.,  4380.,  4002.,  4488.,  4101.,  4596.,  4200.,  4704.,  4299.,  4812.,  4398.,  4920.,  4497.,  5028.,  4596.,  5136., 10941., 11886., 11058., 12012., 11175., 12138., 11292., 12264., 11409., 12390., 11526., 12516., 11643., 12642., 11760., 12768., 13552., 14812., 13696., 14968., 13840., 15124., 13984., 15280., 14128., 15436., 14272., 15592., 14416., 15748., 14560., 15904.,  9051.,  9996.,  9150., 10104.,  9249., 10212.,  9348., 10320.,  9447., 10428.,  9546., 10536.,  9645., 10644.,  9744., 10752.,  9843., 10860.,  9942., 10968., 10041., 11076., 10140., 11184.,  9302., 10364.,  9356., 10424.,  9410., 10484.,  9464., 10544.,  9518., 10604.,  9572., 10664.,  9626., 10724.,  9680., 10784., 11136., 12552., 11200., 12624., 11264., 12696., 11328., 12768., 11392., 12840., 11456., 12912., 11520., 12984., 11584., 13056.,  7178.,  8240.,  7220.,  8288.,  7262.,  8336.,  7304.,  8384.,  7346.,  8432.,  7388.,  8480.,  7430.,  8528.,  7472.,  8576.,  7514.,  8624.,  7556.,  8672.,  7598.,  8720.,  7640.,  8768., 10534., 11676., 10588., 11736., 10642., 11796., 10696., 11856., 10750., 11916., 10804., 11976., 10858., 12036., 10912., 12096., 11648., 13000., 11712., 13072., 11776., 13144., 11840., 13216., 11904., 13288., 11968., 13360., 12032., 13432., 12096., 13504.,  8250.,  9392.,  8292.,  9440.,  8334.,  9488.,  8376.,  9536.,  8418.,  9584.,  8460.,  9632.,  8502.,  9680.,  8544.,  9728.,  7818.,  8752.,  7860.,  8800.,  7902.,  8848.,  7944.,  8896.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2864.,  3348.,  2880.,  3368.,  2896.,  3388.,  2912.,  3408.,  2928.,  3428.,  2944.,  3448.,  2960.,  3468.,  2976.,  3488.,  2992.,  3508.,  3008.,  3528.,  3024.,  3548.,  3040.,  3568.,  3056.,  3588.,  3072.,  3608.,  3088.,  3628.,  3104.,  3648.,  3120.,  3668.,  3136.,  3688.,  3152.,  3708.,  3168.,  3728.,  3184.,  3748.,  3200.,  3768.,  3216.,  3788.,  3232.,  3808.,  3248.,  3828.,  3264.,  3848.,  3280.,  3868.,  3296.,  3888.,  3760.,  4468.,  3776.,  4488.,  3792.,  4508.,  3808.,  4528.,  3824.,  4548.,  3840.,  4568.,  3856.,  4588.,  3872.,  4608.,  3888.,  4628.,  3904.,  4648.,  3920.,  4668.,  3936.,  4688.,  3952.,  4708.,  3968.,  4728.,  3984.,  4748.,  4000.,  4768.,  4016.,  4788.,  4032.,  4808.,  4048.,  4828.,  4064.,  4848.,  4080.,  4868.,  4096.,  4888.,  4112.,  4908.,  4128.,  4928.,  4144.,  4948.,  4160.,  4968.,  4176.,  4988.,  4192.,  5008.,  4656.,  5588.,  4672.,  5608.,  4688.,  5628.,  4704.,  5648.,  4720.,  5668.,  4736.,  5688.,  4752.,  5708.,  4768.,  5728.,  4784.,  5748.,  4800.,  5768.,  4816.,  5788.,  4832.,  5808.,  4848.,  5828.,  4864.,  5848.,  4880.,  5868.,  4896.,  5888.,  4912.,  5908.,  4928.,  5928.,  4944.,  5948.,  4960.,  5968.,  4976.,  5988.,  4992.,  6008.,  5008.,  6028.,  5024.,  6048.,  5040.,  6068.,  5056.,  6088.,  5072.,  6108.,  5088.,  6128.,  5552.,  6708.,  5568.,  6728.,  5584.,  6748.,  5600.,  6768.,  5616.,  6788.,  5632.,  6808.,  5648.,  6828.,  5664.,  6848.,  5680.,  6868.,  5696.,  6888.,  5712.,  6908.,  5728.,  6928.,  5744.,  6948.,  5760.,  6968.,  5776.,  6988.,  5792.,  7008.,  5808.,  7028.,  5824.,  7048.,  5840.,  7068.,  5856.,  7088.,  5872.,  7108.,  5888.,  7128.,  5904.,  7148.,  5920.,  7168.,  5936.,  7188.,  5952.,  7208.,  5968.,  7228.,  5984.,  7248.,  6448.,  7828.,  6464.,  7848.,  6480.,  7868.,  6496.,  7888.,  6512.,  7908.,  6528.,  7928.,  6544.,  7948.,  6560.,  7968.,  6576.,  7988.,  6592.,  8008.,  6608.,  8028.,  6624.,  8048.,  6640.,  8068.,  6656.,  8088.,  6672.,  8108.,  6688.,  8128.,  6704.,  8148.,  6720.,  8168.,  6736.,  8188.,  6752.,  8208.,  6768.,  8228.,  6784.,  8248.,  6800.,  8268.,  6816.,  8288.,  6832.,  8308.,  6848.,  8328.,  6864.,  8348.,  6880.,  8368.,  7344.,  8948.,  7360.,  8968.,  7376.,  8988.,  7392.,  9008.,  7408.,  9028.,  7424.,  9048.,  7440.,  9068.,  7456.,  9088.,  7472.,  9108.,  7488.,  9128.,  7504.,  9148.,  7520.,  9168.,  7536.,  9188.,  7552.,  9208.,  7568.,  9228.,  7584.,  9248.,  7600.,  9268.,  7616.,  9288.,  7632.,  9308.,  7648.,  9328.,  7664.,  9348.,  7680.,  9368.,  7696.,  9388.,  7712.,  9408.,  7728.,  9428.,  7744.,  9448.,  7760.,  9468.,  7776.,  9488.,  8240., 10068.,  8256., 10088.,  8272., 10108.,  8288., 10128.,  8304., 10148.,  8320., 10168.,  8336., 10188.,  8352., 10208.,  8368., 10228.,  8384., 10248.,  8400., 10268.,  8416., 10288.,  8432., 10308.,  8448., 10328.,  8464., 10348.,  8480., 10368.,  8496., 10388.,  8512., 10408.,  8528., 10428.,  8544., 10448.,  8560., 10468.,  8576., 10488.,  8592., 10508.,  8608., 10528.,  8624., 10548.,  8640., 10568.,  8656., 10588.,  8672., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16534., 17004., 17474., 17944., 16732., 17208., 17684., 18160., 16930., 17412., 17894., 18376., 17128., 17616., 18104., 18592., 17326., 17820., 18314., 18808., 17524., 18024., 18524., 19024., 17722., 18228., 18734., 19240., 17920., 18432., 18944., 19456., 14264., 14720., 15176., 15632., 14512., 14976., 15440., 15904., 14760., 15232., 15704., 16176., 15008., 15488., 15968., 16448., 15256., 15744., 16232., 16720., 15504., 16000., 16496., 16992., 15752., 16256., 16760., 17264., 16000., 16512., 17024., 17536., 14654., 15124., 15594., 16064., 14828., 15304., 15780., 16256., 15002., 15484., 15966., 16448., 15176., 15664., 16152., 16640., 15350., 15844., 16338., 16832., 15524., 16024., 16524., 17024., 15698., 16204., 16710., 17216., 15872., 16384., 16896., 17408.,  8622.,  8884.,  9146.,  9408.,  8796.,  9064.,  9332.,  9600.,  8970.,  9244.,  9518.,  9792.,  9144.,  9424.,  9704.,  9984.,  9190.,  9484.,  9778., 10072.,  9388.,  9688.,  9988., 10288.,  9586.,  9892., 10198., 10504.,  9784., 10096., 10408., 10720.,  9982., 10300., 10618., 10936., 10180., 10504., 10828., 11152., 10378., 10708., 11038., 11368., 10576., 10912., 11248., 11584., 11768., 12160., 12552., 12944., 12016., 12416., 12816., 13216., 12264., 12672., 13080., 13488., 12512., 12928., 13344., 13760., 12760., 13184., 13608., 14032., 13008., 13440., 13872., 14304., 13256., 13696., 14136., 14576., 13504., 13952., 14400., 14848.,  8014.,  8308.,  8602.,  8896.,  8188.,  8488.,  8788.,  9088.,  8362.,  8668.,  8974.,  9280.,  8536.,  8848.,  9160.,  9472.,  8710.,  9028.,  9346.,  9664.,  8884.,  9208.,  9532.,  9856.,  9058.,  9388.,  9718., 10048.,  9232.,  9568.,  9904., 10240.,  9406.,  9748., 10090., 10432.,  9580.,  9928., 10276., 10624.,  9754., 10108., 10462., 10816.,  9928., 10288., 10648., 11008., 17369., 17946., 18523., 19100., 17594., 18180., 18766., 19352., 17819., 18414., 19009., 19604., 18044., 18648., 19252., 19856., 18269., 18882., 19495., 20108., 18494., 19116., 19738., 20360., 18719., 19350., 19981., 20612., 18944., 19584., 20224., 20864., 19764., 20448., 21132., 21816., 20040., 20736., 21432., 22128., 20316., 21024., 21732., 22440., 20592., 21312., 22032., 22752., 20868., 21600., 22332., 23064., 21144., 21888., 22632., 23376., 21420., 22176., 22932., 23688., 21696., 22464., 23232., 24000., 15061., 15638., 16215., 16792., 15250., 15836., 16422., 17008., 15439., 16034., 16629., 17224., 15628., 16232., 16836., 17440., 15817., 16430., 17043., 17656., 16006., 16628., 17250., 17872., 16195., 16826., 17457., 18088., 16384., 17024., 17664., 18304., 13885., 14406., 14927., 15448., 14074., 14604., 15134., 15664., 14263., 14802., 15341., 15880., 14452., 15000., 15548., 16096.,  8337.,  8778.,  9219.,  9660.,  8562.,  9012.,  9462.,  9912.,  8787.,  9246.,  9705., 10164.,  9012.,  9480.,  9948., 10416.,  9237.,  9714., 10191., 10668.,  9462.,  9948., 10434., 10920.,  9687., 10182., 10677., 11172.,  9912., 10416., 10920., 11424., 14612., 15328., 16044., 16760., 14888., 15616., 16344., 17072., 15164., 15904., 16644., 17384., 15440., 16192., 16944., 17696., 15716., 16480., 17244., 18008., 15992., 16768., 17544., 18320., 16268., 17056., 17844., 18632., 16544., 17344., 18144., 18944.,  6573.,  7014.,  7455.,  7896.,  6762.,  7212.,  7662.,  8112.,  6951.,  7410.,  7869.,  8328.,  7140.,  7608.,  8076.,  8544.,  7329.,  7806.,  8283.,  8760.,  7518.,  8004.,  8490.,  8976.,  7707.,  8202.,  8697.,  9192.,  7896.,  8400.,  8904.,  9408.,  8085.,  8598.,  9111.,  9624.,  8274.,  8796.,  9318.,  9840.,  8463.,  8994.,  9525., 10056.,  8652.,  9192.,  9732., 10272., 18121., 18810., 19499., 20188., 18346., 19044., 19742., 20440., 18571., 19278., 19985., 20692., 18796., 19512., 20228., 20944., 19021., 19746., 20471., 21196., 19246., 19980., 20714., 21448., 19471., 20214., 20957., 21700., 19696., 20448., 21200., 21952., 18676., 19424., 20172., 20920., 18952., 19712., 20472., 21232., 19228., 20000., 20772., 21544., 19504., 20288., 21072., 21856., 19780., 20576., 21372., 22168., 20056., 20864., 21672., 22480., 20332., 21152., 21972., 22792., 20608., 21440., 22272., 23104., 15365., 16054., 16743., 17432., 15554., 16252., 16950., 17648., 15743., 16450., 17157., 17864., 15932., 16648., 17364., 18080., 16121., 16846., 17571., 18296., 16310., 17044., 17778., 18512., 16499., 17242., 17985., 18728., 16688., 17440., 18192., 18944., 13549., 14054., 14559., 15064., 13738., 14252., 14766., 15280., 13927., 14450., 14973., 15496., 14116., 14648., 15180., 15712.,  4486.,  4780.,  5074.,  5368.,  4588.,  4888.,  5188.,  5488.,  4690.,  4996.,  5302.,  5608.,  4792.,  5104.,  5416.,  5728.,  4894.,  5212.,  5530.,  5848.,  4996.,  5320.,  5644.,  5968.,  5098.,  5428.,  5758.,  6088.,  5200.,  5536.,  5872.,  6208.,  5496.,  5888.,  6280.,  6672.,  5616.,  6016.,  6416.,  6816.,  5736.,  6144.,  6552.,  6960.,  5856.,  6272.,  6688.,  7104.,  5976.,  6400.,  6824.,  7248.,  6096.,  6528.,  6960.,  7392.,  6216.,  6656.,  7096.,  7536.,  6336.,  6784.,  7232.,  7680.,  3310.,  3604.,  3898.,  4192.,  3388.,  3688.,  3988.,  4288.,  3466.,  3772.,  4078.,  4384.,  3544.,  3856.,  4168.,  4480.,  3622.,  3940.,  4258.,  4576.,  3700.,  4024.,  4348.,  4672.,  3778.,  4108.,  4438.,  4768.,  3856.,  4192.,  4528.,  4864.,  3934.,  4276.,  4618.,  4960.,  4012.,  4360.,  4708.,  5056.,  4090.,  4444.,  4798.,  5152.,  4168.,  4528.,  4888.,  5248.,  8534.,  9036.,  9538., 10040.,  8636.,  9144.,  9652., 10160.,  8738.,  9252.,  9766., 10280.,  8840.,  9360.,  9880., 10400.,  8942.,  9468.,  9994., 10520.,  9044.,  9576., 10108., 10640.,  9146.,  9684., 10222., 10760.,  9248.,  9792., 10336., 10880.,  9400.,  9984., 10568., 11152.,  9520., 10112., 10704., 11296.,  9640., 10240., 10840., 11440.,  9760., 10368., 10976., 11584.,  9880., 10496., 11112., 11728., 10000., 10624., 11248., 11872., 10120., 10752., 11384., 12016., 10240., 10880., 11520., 12160.,  6526.,  7028.,  7530.,  8032.,  6604.,  7112.,  7620.,  8128.,  6682.,  7196.,  7710.,  8224.,  6760.,  7280.,  7800.,  8320.,  6838.,  7364.,  7890.,  8416.,  6916.,  7448.,  7980.,  8512.,  6994.,  7532.,  8070.,  8608.,  7072.,  7616.,  8160.,  8704.,  6510.,  6932.,  7354.,  7776.,  6588.,  7016.,  7444.,  7872.,  6666.,  7100.,  7534.,  7968.,  6744.,  7184.,  7624.,  8064.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5244.,  5728.,  6212.,  6696.,  5272.,  5760.,  6248.,  6736.,  5300.,  5792.,  6284.,  6776.,  5328.,  5824.,  6320.,  6816.,  5356.,  5856.,  6356.,  6856.,  5384.,  5888.,  6392.,  6896.,  5412.,  5920.,  6428.,  6936.,  5440.,  5952.,  6464.,  6976.,  5468.,  5984.,  6500.,  7016.,  5496.,  6016.,  6536.,  7056.,  5524.,  6048.,  6572.,  7096.,  5552.,  6080.,  6608.,  7136.,  5580.,  6112.,  6644.,  7176.,  5608.,  6144.,  6680.,  7216.,  5636.,  6176.,  6716.,  7256.,  5664.,  6208.,  6752.,  7296.,  5692.,  6240.,  6788.,  7336.,  5720.,  6272.,  6824.,  7376.,  5748.,  6304.,  6860.,  7416.,  5776.,  6336.,  6896.,  7456.,  5804.,  6368.,  6932.,  7496.,  5832.,  6400.,  6968.,  7536.,  5860.,  6432.,  7004.,  7576.,  5888.,  6464.,  7040.,  7616.,  5916.,  6496.,  7076.,  7656.,  5944.,  6528.,  7112.,  7696.,  5972.,  6560.,  7148.,  7736.,  6000.,  6592.,  7184.,  7776.,  6812.,  7520.,  8228.,  8936.,  6840.,  7552.,  8264.,  8976.,  6868.,  7584.,  8300.,  9016.,  6896.,  7616.,  8336.,  9056.,  6924.,  7648.,  8372.,  9096.,  6952.,  7680.,  8408.,  9136.,  6980.,  7712.,  8444.,  9176.,  7008.,  7744.,  8480.,  9216.,  7036.,  7776.,  8516.,  9256.,  7064.,  7808.,  8552.,  9296.,  7092.,  7840.,  8588.,  9336.,  7120.,  7872.,  8624.,  9376.,  7148.,  7904.,  8660.,  9416.,  7176.,  7936.,  8696.,  9456.,  7204.,  7968.,  8732.,  9496.,  7232.,  8000.,  8768.,  9536.,  7260.,  8032.,  8804.,  9576.,  7288.,  8064.,  8840.,  9616.,  7316.,  8096.,  8876.,  9656.,  7344.,  8128.,  8912.,  9696.,  7372.,  8160.,  8948.,  9736.,  7400.,  8192.,  8984.,  9776.,  7428.,  8224.,  9020.,  9816.,  7456.,  8256.,  9056.,  9856.,  7484.,  8288.,  9092.,  9896.,  7512.,  8320.,  9128.,  9936.,  7540.,  8352.,  9164.,  9976.,  7568.,  8384.,  9200., 10016.,  8380.,  9312., 10244., 11176.,  8408.,  9344., 10280., 11216.,  8436.,  9376., 10316., 11256.,  8464.,  9408., 10352., 11296.,  8492.,  9440., 10388., 11336.,  8520.,  9472., 10424., 11376.,  8548.,  9504., 10460., 11416.,  8576.,  9536., 10496., 11456.,  8604.,  9568., 10532., 11496.,  8632.,  9600., 10568., 11536.,  8660.,  9632., 10604., 11576.,  8688.,  9664., 10640., 11616.,  8716.,  9696., 10676., 11656.,  8744.,  9728., 10712., 11696.,  8772.,  9760., 10748., 11736.,  8800.,  9792., 10784., 11776.,  8828.,  9824., 10820., 11816.,  8856.,  9856., 10856., 11856.,  8884.,  9888., 10892., 11896.,  8912.,  9920., 10928., 11936.,  8940.,  9952., 10964., 11976.,  8968.,  9984., 11000., 12016.,  8996., 10016., 11036., 12056.,  9024., 10048., 11072., 12096.,  9052., 10080., 11108., 12136.,  9080., 10112., 11144., 12176.,  9108., 10144., 11180., 12216.,  9136., 10176., 11216., 12256.,  9948., 11104., 12260., 13416.,  9976., 11136., 12296., 13456., 10004., 11168., 12332., 13496., 10032., 11200., 12368., 13536., 10060., 11232., 12404., 13576., 10088., 11264., 12440., 13616., 10116., 11296., 12476., 13656., 10144., 11328., 12512., 13696., 10172., 11360., 12548., 13736., 10200., 11392., 12584., 13776., 10228., 11424., 12620., 13816., 10256., 11456., 12656., 13856., 10284., 11488., 12692., 13896., 10312., 11520., 12728., 13936., 10340., 11552., 12764., 13976., 10368., 11584., 12800., 14016., 10396., 11616., 12836., 14056., 10424., 11648., 12872., 14096., 10452., 11680., 12908., 14136., 10480., 11712., 12944., 14176., 10508., 11744., 12980., 14216., 10536., 11776., 13016., 14256., 10564., 11808., 13052., 14296., 10592., 11840., 13088., 14336., 10620., 11872., 13124., 14376., 10648., 11904., 13160., 14416., 10676., 11936., 13196., 14456., 10704., 11968., 13232., 14496., 11516., 12896., 14276., 15656., 11544., 12928., 14312., 15696., 11572., 12960., 14348., 15736., 11600., 12992., 14384., 15776., 11628., 13024., 14420., 15816., 11656., 13056., 14456., 15856., 11684., 13088., 14492., 15896., 11712., 13120., 14528., 15936., 11740., 13152., 14564., 15976., 11768., 13184., 14600., 16016., 11796., 13216., 14636., 16056., 11824., 13248., 14672., 16096., 11852., 13280., 14708., 16136., 11880., 13312., 14744., 16176., 11908., 13344., 14780., 16216., 11936., 13376., 14816., 16256., 11964., 13408., 14852., 16296., 11992., 13440., 14888., 16336., 12020., 13472., 14924., 16376., 12048., 13504., 14960., 16416., 12076., 13536., 14996., 16456., 12104., 13568., 15032., 16496., 12132., 13600., 15068., 16536., 12160., 13632., 15104., 16576., 12188., 13664., 15140., 16616., 12216., 13696., 15176., 16656., 12244., 13728., 15212., 16696., 12272., 13760., 15248., 16736., 13084., 14688., 16292., 17896., 13112., 14720., 16328., 17936., 13140., 14752., 16364., 17976., 13168., 14784., 16400., 18016., 13196., 14816., 16436., 18056., 13224., 14848., 16472., 18096., 13252., 14880., 16508., 18136., 13280., 14912., 16544., 18176., 13308., 14944., 16580., 18216., 13336., 14976., 16616., 18256., 13364., 15008., 16652., 18296., 13392., 15040., 16688., 18336., 13420., 15072., 16724., 18376., 13448., 15104., 16760., 18416., 13476., 15136., 16796., 18456., 13504., 15168., 16832., 18496., 13532., 15200., 16868., 18536., 13560., 15232., 16904., 18576., 13588., 15264., 16940., 18616., 13616., 15296., 16976., 18656., 13644., 15328., 17012., 18696., 13672., 15360., 17048., 18736., 13700., 15392., 17084., 18776., 13728., 15424., 17120., 18816., 13756., 15456., 17156., 18856., 13784., 15488., 17192., 18896., 13812., 15520., 17228., 18936., 13840., 15552., 17264., 18976., 14652., 16480., 18308., 20136., 14680., 16512., 18344., 20176., 14708., 16544., 18380., 20216., 14736., 16576., 18416., 20256., 14764., 16608., 18452., 20296., 14792., 16640., 18488., 20336., 14820., 16672., 18524., 20376., 14848., 16704., 18560., 20416., 14876., 16736., 18596., 20456., 14904., 16768., 18632., 20496., 14932., 16800., 18668., 20536., 14960., 16832., 18704., 20576., 14988., 16864., 18740., 20616., 15016., 16896., 18776., 20656., 15044., 16928., 18812., 20696., 15072., 16960., 18848., 20736., 15100., 16992., 18884., 20776., 15128., 17024., 18920., 20816., 15156., 17056., 18956., 20856., 15184., 17088., 18992., 20896., 15212., 17120., 19028., 20936., 15240., 17152., 19064., 20976., 15268., 17184., 19100., 21016., 15296., 17216., 19136., 21056., 15324., 17248., 19172., 21096., 15352., 17280., 19208., 21136., 15380., 17312., 19244., 21176., 15408., 17344., 19280., 21216.};
  const std::array<int, 4> in_shape = {{ 1, 11, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1816., 1844., 2554., 2593., 2632., 1600., 1624., 2151., 2184., 3021., 3066., 3111., 1884., 1911., 2514., 2547., 3516., 3561., 3606., 2181., 2208., 2877., 2910., 4011., 4056., 4101., 2478., 2505., 3240., 3273., 4506., 4551., 4596., 2775., 2802., 1272., 1288., 1705., 1726., 1747., 1000., 1012., 1448., 1464., 1936., 1957., 1978., 1132., 1144.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 342.,  352.,  362.,  372.,  382.,  392.,  402.,  452.,  462.,  472.,  482.,  492.,  502.,  512.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  672.,  682.,  692.,  702.,  712.,  722.,  732.,  782.,  792.,  802.,  812.,  822.,  832.,  842.,  892.,  902.,  912.,  922.,  932.,  942.,  952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3392., 3632., 3444., 3688., 4748., 5108., 4820., 5186., 4892., 5264., 2956., 3200., 3000., 3248., 4008., 4302., 4068., 4368., 5601., 6042., 5682., 6132., 5763., 6222., 3468., 3768., 3516., 3822., 4668., 5028., 4728., 5094., 6492., 7032., 6573., 7122., 6654., 7212., 3996., 4362., 4044., 4416., 5328., 5754., 5388., 5820., 7383., 8022., 7464., 8112., 7545., 8202., 4524., 4956., 4572., 5010., 5988., 6480., 6048., 6546., 8274., 9012., 8355., 9102., 8436., 9192., 5052., 5550., 5100., 5604., 2260., 2544., 2288., 2576., 2984., 3410., 3020., 3452., 3056., 3494., 1712., 2000., 1732., 2024., 2568., 2896., 2596., 2928., 3380., 3872., 3416., 3914., 3452., 3956., 1932., 2264., 1952., 2288.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,  664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,  808.,  964.,  824.,  984.,  840., 1004.,  856., 1024.,  936., 1124.,  952., 1144.,  968., 1164.,  984., 1184., 1000., 1204., 1016., 1224., 1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404., 1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584., 1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684., 1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864., 1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044., 1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6544.,  6784.,  7024.,  7264.,  6644.,  6888.,  7132.,  7376.,  9136.,  9496.,  9856., 10216.,  9274.,  9640., 10006., 10372.,  9412.,  9784., 10156., 10528.,  5668.,  5912.,  6156.,  6400.,  5752.,  6000.,  6248.,  6496.,  7722.,  8016.,  8310.,  8604.,  7836.,  8136.,  8436.,  8736., 10761., 11202., 11643., 12084., 10914., 11364., 11814., 12264., 11067., 11526., 11985., 12444.,  6636.,  6936.,  7236.,  7536.,  6726.,  7032.,  7338.,  7644.,  8976.,  9336.,  9696., 10056.,  9090.,  9456.,  9822., 10188., 12444., 12984., 13524., 14064., 12597., 13146., 13695., 14244., 12750., 13308., 13866., 14424.,  7626.,  7992.,  8358.,  8724.,  7716.,  8088.,  8460.,  8832., 10230., 10656., 11082., 11508., 10344., 10776., 11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928., 15576., 16224., 14433., 15090., 15747., 16404.,  8616.,  9048.,  9480.,  9912.,  8706.,  9144.,  9582., 10020., 11484., 11976., 12468., 12960., 11598., 12096., 12594., 13092., 15810., 16548., 17286., 18024., 15963., 16710., 17457., 18204., 16116., 16872., 17628., 18384.,  9606., 10104., 10602., 11100.,  9696., 10200., 10704., 11208.,  4236.,  4520.,  4804.,  5088.,  4288.,  4576.,  4864.,  5152.,  5542.,  5968.,  6394.,  6820.,  5608.,  6040.,  6472.,  6904.,  5674.,  6112.,  6550.,  6988.,  3136.,  3424.,  3712.,  4000.,  3172.,  3464.,  3756.,  4048.,  4808.,  5136.,  5464.,  5792.,  4860.,  5192.,  5524.,  5856.,  6268.,  6760.,  7252.,  7744.,  6334.,  6832.,  7330.,  7828.,  6400.,  6904.,  7408.,  7912.,  3532.,  3864.,  4196.,  4528.,  3568.,  3904.,  4240.,  4576.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232., 1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528., 1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520., 1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888., 1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680., 1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248., 1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968., 2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448., 1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256., 2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808., 2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416., 2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168., 2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704., 2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368., 2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992., 3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728., 2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280., 3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088., 3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440., 3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3604., 3632., 3660., 3688., 5069., 5108., 5147., 5186., 5225., 5264., 3176., 3200., 3224., 3248., 4269., 4302., 4335., 4368., 5997., 6042., 6087., 6132., 6177., 6222., 3741., 3768., 3795., 3822., 4995., 5028., 5061., 5094., 6987., 7032., 7077., 7122., 7167., 7212., 4335., 4362., 4389., 4416., 5721., 5754., 5787., 5820., 7977., 8022., 8067., 8112., 8157., 8202., 4929., 4956., 4983., 5010., 6447., 6480., 6513., 6546., 8967., 9012., 9057., 9102., 9147., 9192., 5523., 5550., 5577., 5604., 2528., 2544., 2560., 2576., 3389., 3410., 3431., 3452., 3473., 3494., 1988., 2000., 2012., 2024., 2880., 2896., 2912., 2928., 3851., 3872., 3893., 3914., 3935., 3956., 2252., 2264., 2276., 2288.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 674.,  684.,  694.,  704.,  714.,  724.,  734.,  744.,  754.,  764.,  774.,  784.,  794.,  804.,  894.,  904.,  914.,  924.,  934.,  944.,  954.,  964.,  974.,  984.,  994., 1004., 1014., 1024., 1114., 1124., 1134., 1144., 1154., 1164., 1174., 1184., 1194., 1204., 1214., 1224., 1234., 1244., 1334., 1344., 1354., 1364., 1374., 1384., 1394., 1404., 1414., 1424., 1434., 1444., 1454., 1464., 1554., 1564., 1574., 1584., 1594., 1604., 1614., 1624., 1634., 1644., 1654., 1664., 1674., 1684., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1994., 2004., 2014., 2024., 2034., 2044., 2054., 2064., 2074., 2084., 2094., 2104., 2114., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6732.,  7208.,  6784.,  7264.,  6836.,  7320.,  6888.,  7376.,  9424., 10138.,  9496., 10216.,  9568., 10294.,  9640., 10372.,  9712., 10450.,  9784., 10528.,  5868.,  6352.,  5912.,  6400.,  5956.,  6448.,  6000.,  6496.,  7956.,  8538.,  8016.,  8604.,  8076.,  8670.,  8136.,  8736., 11121., 11994., 11202., 12084., 11283., 12174., 11364., 12264., 11445., 12354., 11526., 12444.,  6888.,  7482.,  6936.,  7536.,  6984.,  7590.,  7032.,  7644.,  9276.,  9990.,  9336., 10056.,  9396., 10122.,  9456., 10188., 12903., 13974., 12984., 14064., 13065., 14154., 13146., 14244., 13227., 14334., 13308., 14424.,  7944.,  8670.,  7992.,  8724.,  8040.,  8778.,  8088.,  8832., 10596., 11442., 10656., 11508., 10716., 11574., 10776., 11640., 14685., 15954., 14766., 16044., 14847., 16134., 14928., 16224., 15009., 16314., 15090., 16404.,  9000.,  9858.,  9048.,  9912.,  9096.,  9966.,  9144., 10020., 11916., 12894., 11976., 12960., 12036., 13026., 12096., 13092., 16467., 17934., 16548., 18024., 16629., 18114., 16710., 18204., 16791., 18294., 16872., 18384., 10056., 11046., 10104., 11100., 10152., 11154., 10200., 11208.,  4492.,  5056.,  4520.,  5088.,  4548.,  5120.,  4576.,  5152.,  5932.,  6778.,  5968.,  6820.,  6004.,  6862.,  6040.,  6904.,  6076.,  6946.,  6112.,  6988.,  3404.,  3976.,  3424.,  4000.,  3444.,  4024.,  3464.,  4048.,  5108.,  5760.,  5136.,  5792.,  5164.,  5824.,  5192.,  5856.,  6724.,  7702.,  6760.,  7744.,  6796.,  7786.,  6832.,  7828.,  6868.,  7870.,  6904.,  7912.,  3844.,  4504.,  3864.,  4528.,  3884.,  4552.,  3904.,  4576.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1152., 1348., 1168., 1368., 1184., 1388., 1200., 1408., 1216., 1428., 1232., 1448., 1248., 1468., 1264., 1488., 1280., 1508., 1296., 1528., 1312., 1548., 1328., 1568., 1344., 1588., 1360., 1608., 1504., 1788., 1520., 1808., 1536., 1828., 1552., 1848., 1568., 1868., 1584., 1888., 1600., 1908., 1616., 1928., 1632., 1948., 1648., 1968., 1664., 1988., 1680., 2008., 1696., 2028., 1712., 2048., 1856., 2228., 1872., 2248., 1888., 2268., 1904., 2288., 1920., 2308., 1936., 2328., 1952., 2348., 1968., 2368., 1984., 2388., 2000., 2408., 2016., 2428., 2032., 2448., 2048., 2468., 2064., 2488., 2208., 2668., 2224., 2688., 2240., 2708., 2256., 2728., 2272., 2748., 2288., 2768., 2304., 2788., 2320., 2808., 2336., 2828., 2352., 2848., 2368., 2868., 2384., 2888., 2400., 2908., 2416., 2928., 2560., 3108., 2576., 3128., 2592., 3148., 2608., 3168., 2624., 3188., 2640., 3208., 2656., 3228., 2672., 3248., 2688., 3268., 2704., 3288., 2720., 3308., 2736., 3328., 2752., 3348., 2768., 3368., 2912., 3548., 2928., 3568., 2944., 3588., 2960., 3608., 2976., 3628., 2992., 3648., 3008., 3668., 3024., 3688., 3040., 3708., 3056., 3728., 3072., 3748., 3088., 3768., 3104., 3788., 3120., 3808., 3264., 3988., 3280., 4008., 3296., 4028., 3312., 4048., 3328., 4068., 3344., 4088., 3360., 4108., 3376., 4128., 3392., 4148., 3408., 4168., 3424., 4188., 3440., 4208., 3456., 4228., 3472., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5052.,  5272.,  5492.,  5712.,  5152.,  5376.,  5600.,  5824.,  5252.,  5480.,  5708.,  5936.,  5352.,  5584.,  5816.,  6048.,  6998.,  7328.,  7658.,  7988.,  7136.,  7472.,  7808.,  8144.,  7274.,  7616.,  7958.,  8300.,  7412.,  7760.,  8108.,  8456.,  7550.,  7904.,  8258.,  8612.,  7688.,  8048.,  8408.,  8768.,  4340.,  4568.,  4796.,  5024.,  4424.,  4656.,  4888.,  5120.,  4508.,  4744.,  4980.,  5216.,  4592.,  4832.,  5072.,  5312.,  7394.,  7720.,  8046.,  8372.,  7508.,  7840.,  8172.,  8504.,  7622.,  7960.,  8298.,  8636.,  7736.,  8080.,  8424.,  8768., 10233., 10722., 11211., 11700., 10386., 10884., 11382., 11880., 10539., 11046., 11553., 12060., 10692., 11208., 11724., 12240., 10845., 11370., 11895., 12420., 10998., 11532., 12066., 12600.,  6270.,  6608.,  6946.,  7284.,  6360.,  6704.,  7048.,  7392.,  6450.,  6800.,  7150.,  7500.,  6540.,  6896.,  7252.,  7608.,  9902., 10360., 10818., 11276., 10016., 10480., 10944., 11408., 10130., 10600., 11070., 11540., 10244., 10720., 11196., 11672., 13599., 14286., 14973., 15660., 13752., 14448., 15144., 15840., 11217., 11794., 12371., 12948., 11370., 11956., 12542., 13128., 11523., 12118., 12713., 13308., 11676., 12280., 12884., 13488.,  8250.,  8720.,  9190.,  9660.,  8340.,  8816.,  9292.,  9768.,  8430.,  8912.,  9394.,  9876.,  8520.,  9008.,  9496.,  9984.,  7546.,  7880.,  8214.,  8548.,  7660.,  8000.,  8340.,  8680.,  7774.,  8120.,  8466.,  8812.,  7888.,  8240.,  8592.,  8944., 10437., 10938., 11439., 11940., 10590., 11100., 11610., 12120., 10743., 11262., 11781., 12300., 10896., 11424., 11952., 12480., 11049., 11586., 12123., 12660., 11202., 11748., 12294., 12840.,  6390.,  6736.,  7082.,  7428.,  6480.,  6832.,  7184.,  7536.,  6570.,  6928.,  7286.,  7644.,  6660.,  7024.,  7388.,  7752., 10054., 10520., 10986., 11452., 10168., 10640., 11112., 11584.,  6058.,  6408.,  6758.,  7108.,  6172.,  6528.,  6884.,  7240.,  9579., 10150., 10721., 11292.,  9732., 10312., 10892., 11472.,  9885., 10474., 11063., 11652., 10038., 10636., 11234., 11832., 10191., 10798., 11405., 12012., 10344., 10960., 11576., 12192.,  4658.,  5008.,  5358.,  5708.,  4748.,  5104.,  5460.,  5816.,  4838.,  5200.,  5562.,  5924.,  4928.,  5296.,  5664.,  6032.,  3556.,  3864.,  4172.,  4480.,  3608.,  3920.,  4232.,  4544.,  3660.,  3976.,  4292.,  4608.,  3712.,  4032.,  4352.,  4672.,  4490.,  4952.,  5414.,  5876.,  4556.,  5024.,  5492.,  5960.,  4622.,  5096.,  5570.,  6044.,  4688.,  5168.,  5648.,  6128.,  4754.,  5240.,  5726.,  6212.,  4820.,  5312.,  5804.,  6296.,  2396.,  2712.,  3028.,  3344.,  2432.,  2752.,  3072.,  3392.,  2468.,  2792.,  3116.,  3440.,  2504.,  2832.,  3160.,  3488.,  4700.,  5096.,  5492.,  5888.,  4752.,  5152.,  5552.,  5952.,  4804.,  5208.,  5612.,  6016.,  4856.,  5264.,  5672.,  6080.,  5942.,  6536.,  7130.,  7724.,  6008.,  6608.,  7208.,  7808.,  4922.,  5400.,  5878.,  6356.,  4988.,  5472.,  5956.,  6440.,  5054.,  5544.,  6034.,  6524.,  5120.,  5616.,  6112.,  6608.,  3188.,  3592.,  3996.,  4400.,  3224.,  3632.,  4040.,  4448.,  3260.,  3672.,  4084.,  4496.,  3296.,  3712.,  4128.,  4544.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2108., 2304., 2500., 2696., 2136., 2336., 2536., 2736., 2164., 2368., 2572., 2776., 2192., 2400., 2608., 2816., 2220., 2432., 2644., 2856., 2248., 2464., 2680., 2896., 2276., 2496., 2716., 2936., 2304., 2528., 2752., 2976., 2332., 2560., 2788., 3016., 2360., 2592., 2824., 3056., 2388., 2624., 2860., 3096., 2416., 2656., 2896., 3136., 2444., 2688., 2932., 3176., 2472., 2720., 2968., 3216., 2724., 3008., 3292., 3576., 2752., 3040., 3328., 3616., 2780., 3072., 3364., 3656., 2808., 3104., 3400., 3696., 2836., 3136., 3436., 3736., 2864., 3168., 3472., 3776., 2892., 3200., 3508., 3816., 2920., 3232., 3544., 3856., 2948., 3264., 3580., 3896., 2976., 3296., 3616., 3936., 3004., 3328., 3652., 3976., 3032., 3360., 3688., 4016., 3060., 3392., 3724., 4056., 3088., 3424., 3760., 4096., 3340., 3712., 4084., 4456., 3368., 3744., 4120., 4496., 3396., 3776., 4156., 4536., 3424., 3808., 4192., 4576., 3452., 3840., 4228., 4616., 3480., 3872., 4264., 4656., 3508., 3904., 4300., 4696., 3536., 3936., 4336., 4736., 3564., 3968., 4372., 4776., 3592., 4000., 4408., 4816., 3620., 4032., 4444., 4856., 3648., 4064., 4480., 4896., 3676., 4096., 4516., 4936., 3704., 4128., 4552., 4976., 3956., 4416., 4876., 5336., 3984., 4448., 4912., 5376., 4012., 4480., 4948., 5416., 4040., 4512., 4984., 5456., 4068., 4544., 5020., 5496., 4096., 4576., 5056., 5536., 4124., 4608., 5092., 5576., 4152., 4640., 5128., 5616., 4180., 4672., 5164., 5656., 4208., 4704., 5200., 5696., 4236., 4736., 5236., 5736., 4264., 4768., 5272., 5776., 4292., 4800., 5308., 5816., 4320., 4832., 5344., 5856., 4572., 5120., 5668., 6216., 4600., 5152., 5704., 6256., 4628., 5184., 5740., 6296., 4656., 5216., 5776., 6336., 4684., 5248., 5812., 6376., 4712., 5280., 5848., 6416., 4740., 5312., 5884., 6456., 4768., 5344., 5920., 6496., 4796., 5376., 5956., 6536., 4824., 5408., 5992., 6576., 4852., 5440., 6028., 6616., 4880., 5472., 6064., 6656., 4908., 5504., 6100., 6696., 4936., 5536., 6136., 6736., 5188., 5824., 6460., 7096., 5216., 5856., 6496., 7136., 5244., 5888., 6532., 7176., 5272., 5920., 6568., 7216., 5300., 5952., 6604., 7256., 5328., 5984., 6640., 7296., 5356., 6016., 6676., 7336., 5384., 6048., 6712., 7376., 5412., 6080., 6748., 7416., 5440., 6112., 6784., 7456., 5468., 6144., 6820., 7496., 5496., 6176., 6856., 7536., 5524., 6208., 6892., 7576., 5552., 6240., 6928., 7616., 5804., 6528., 7252., 7976., 5832., 6560., 7288., 8016., 5860., 6592., 7324., 8056., 5888., 6624., 7360., 8096., 5916., 6656., 7396., 8136., 5944., 6688., 7432., 8176., 5972., 6720., 7468., 8216., 6000., 6752., 7504., 8256., 6028., 6784., 7540., 8296., 6056., 6816., 7576., 8336., 6084., 6848., 7612., 8376., 6112., 6880., 7648., 8416., 6140., 6912., 7684., 8456., 6168., 6944., 7720., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7180.,  7208.,  7236.,  7264.,  7292.,  7320.,  7348.,  7376., 10099., 10138., 10177., 10216., 10255., 10294., 10333., 10372., 10411., 10450., 10489., 10528.,  6328.,  6352.,  6376.,  6400.,  6424.,  6448.,  6472.,  6496.,  8505.,  8538.,  8571.,  8604.,  8637.,  8670.,  8703.,  8736., 11949., 11994., 12039., 12084., 12129., 12174., 12219., 12264., 12309., 12354., 12399., 12444.,  7455.,  7482.,  7509.,  7536.,  7563.,  7590.,  7617.,  7644.,  9957.,  9990., 10023., 10056., 10089., 10122., 10155., 10188., 13929., 13974., 14019., 14064., 14109., 14154., 14199., 14244., 14289., 14334., 14379., 14424.,  8643.,  8670.,  8697.,  8724.,  8751.,  8778.,  8805.,  8832., 11409., 11442., 11475., 11508., 11541., 11574., 11607., 11640., 15909., 15954., 15999., 16044., 16089., 16134., 16179., 16224., 16269., 16314., 16359., 16404.,  9831.,  9858.,  9885.,  9912.,  9939.,  9966.,  9993., 10020., 12861., 12894., 12927., 12960., 12993., 13026., 13059., 13092., 17889., 17934., 17979., 18024., 18069., 18114., 18159., 18204., 18249., 18294., 18339., 18384., 11019., 11046., 11073., 11100., 11127., 11154., 11181., 11208.,  5040.,  5056.,  5072.,  5088.,  5104.,  5120.,  5136.,  5152.,  6757.,  6778.,  6799.,  6820.,  6841.,  6862.,  6883.,  6904.,  6925.,  6946.,  6967.,  6988.,  3964.,  3976.,  3988.,  4000.,  4012.,  4024.,  4036.,  4048.,  5744.,  5760.,  5776.,  5792.,  5808.,  5824.,  5840.,  5856.,  7681.,  7702.,  7723.,  7744.,  7765.,  7786.,  7807.,  7828.,  7849.,  7870.,  7891.,  7912.,  4492.,  4504.,  4516.,  4528.,  4540.,  4552.,  4564.,  4576.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1338., 1348., 1358., 1368., 1378., 1388., 1398., 1408., 1418., 1428., 1438., 1448., 1458., 1468., 1478., 1488., 1498., 1508., 1518., 1528., 1538., 1548., 1558., 1568., 1578., 1588., 1598., 1608., 1778., 1788., 1798., 1808., 1818., 1828., 1838., 1848., 1858., 1868., 1878., 1888., 1898., 1908., 1918., 1928., 1938., 1948., 1958., 1968., 1978., 1988., 1998., 2008., 2018., 2028., 2038., 2048., 2218., 2228., 2238., 2248., 2258., 2268., 2278., 2288., 2298., 2308., 2318., 2328., 2338., 2348., 2358., 2368., 2378., 2388., 2398., 2408., 2418., 2428., 2438., 2448., 2458., 2468., 2478., 2488., 2658., 2668., 2678., 2688., 2698., 2708., 2718., 2728., 2738., 2748., 2758., 2768., 2778., 2788., 2798., 2808., 2818., 2828., 2838., 2848., 2858., 2868., 2878., 2888., 2898., 2908., 2918., 2928., 3098., 3108., 3118., 3128., 3138., 3148., 3158., 3168., 3178., 3188., 3198., 3208., 3218., 3228., 3238., 3248., 3258., 3268., 3278., 3288., 3298., 3308., 3318., 3328., 3338., 3348., 3358., 3368., 3538., 3548., 3558., 3568., 3578., 3588., 3598., 3608., 3618., 3628., 3638., 3648., 3658., 3668., 3678., 3688., 3698., 3708., 3718., 3728., 3738., 3748., 3758., 3768., 3778., 3788., 3798., 3808., 3978., 3988., 3998., 4008., 4018., 4028., 4038., 4048., 4058., 4068., 4078., 4088., 4098., 4108., 4118., 4128., 4138., 4148., 4158., 4168., 4178., 4188., 4198., 4208., 4218., 4228., 4238., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5220.,  5656.,  5272.,  5712.,  5324.,  5768.,  5376.,  5824.,  5428.,  5880.,  5480.,  5936.,  5532.,  5992.,  5584.,  6048.,  7256.,  7910.,  7328.,  7988.,  7400.,  8066.,  7472.,  8144.,  7544.,  8222.,  7616.,  8300.,  7688.,  8378.,  7760.,  8456.,  7832.,  8534.,  7904.,  8612.,  7976.,  8690.,  8048.,  8768.,  4524.,  4976.,  4568.,  5024.,  4612.,  5072.,  4656.,  5120.,  4700.,  5168.,  4744.,  5216.,  4788.,  5264.,  4832.,  5312.,  7660.,  8306.,  7720.,  8372.,  7780.,  8438.,  7840.,  8504.,  7900.,  8570.,  7960.,  8636.,  8020.,  8702.,  8080.,  8768., 10641., 11610., 10722., 11700., 10803., 11790., 10884., 11880., 10965., 11970., 11046., 12060., 11127., 12150., 11208., 12240., 11289., 12330., 11370., 12420., 11451., 12510., 11532., 12600.,  6560.,  7230.,  6608.,  7284.,  6656.,  7338.,  6704.,  7392.,  6752.,  7446.,  6800.,  7500.,  6848.,  7554.,  6896.,  7608., 10300., 11210., 10360., 11276., 10420., 11342., 10480., 11408., 10540., 11474., 10600., 11540., 10660., 11606., 10720., 11672., 14205., 15570., 14286., 15660., 14367., 15750., 14448., 15840., 11713., 12858., 11794., 12948., 11875., 13038., 11956., 13128., 12037., 13218., 12118., 13308., 12199., 13398., 12280., 13488.,  8672.,  9606.,  8720.,  9660.,  8768.,  9714.,  8816.,  9768.,  8864.,  9822.,  8912.,  9876.,  8960.,  9930.,  9008.,  9984.,  7820.,  8482.,  7880.,  8548.,  7940.,  8614.,  8000.,  8680.,  8060.,  8746.,  8120.,  8812.,  8180.,  8878.,  8240.,  8944., 10857., 11850., 10938., 11940., 11019., 12030., 11100., 12120., 11181., 12210., 11262., 12300., 11343., 12390., 11424., 12480., 11505., 12570., 11586., 12660., 11667., 12750., 11748., 12840.,  6688.,  7374.,  6736.,  7428.,  6784.,  7482.,  6832.,  7536.,  6880.,  7590.,  6928.,  7644.,  6976.,  7698.,  7024.,  7752., 10460., 11386., 10520., 11452., 10580., 11518., 10640., 11584.,  6348.,  7042.,  6408.,  7108.,  6468.,  7174.,  6528.,  7240., 10069., 11202., 10150., 11292., 10231., 11382., 10312., 11472., 10393., 11562., 10474., 11652., 10555., 11742., 10636., 11832., 10717., 11922., 10798., 12012., 10879., 12102., 10960., 12192.,  4960.,  5654.,  5008.,  5708.,  5056.,  5762.,  5104.,  5816.,  5152.,  5870.,  5200.,  5924.,  5248.,  5978.,  5296.,  6032.,  3836.,  4448.,  3864.,  4480.,  3892.,  4512.,  3920.,  4544.,  3948.,  4576.,  3976.,  4608.,  4004.,  4640.,  4032.,  4672.,  4916.,  5834.,  4952.,  5876.,  4988.,  5918.,  5024.,  5960.,  5060.,  6002.,  5096.,  6044.,  5132.,  6086.,  5168.,  6128.,  5204.,  6170.,  5240.,  6212.,  5276.,  6254.,  5312.,  6296.,  2692.,  3320.,  2712.,  3344.,  2732.,  3368.,  2752.,  3392.,  2772.,  3416.,  2792.,  3440.,  2812.,  3464.,  2832.,  3488.,  5068.,  5856.,  5096.,  5888.,  5124.,  5920.,  5152.,  5952.,  5180.,  5984.,  5208.,  6016.,  5236.,  6048.,  5264.,  6080.,  6500.,  7682.,  6536.,  7724.,  6572.,  7766.,  6608.,  7808.,  5364.,  6314.,  5400.,  6356.,  5436.,  6398.,  5472.,  6440.,  5508.,  6482.,  5544.,  6524.,  5580.,  6566.,  5616.,  6608.,  3572.,  4376.,  3592.,  4400.,  3612.,  4424.,  3632.,  4448.,  3652.,  4472.,  3672.,  4496.,  3692.,  4520.,  3712.,  4544.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2288., 2676., 2304., 2696., 2320., 2716., 2336., 2736., 2352., 2756., 2368., 2776., 2384., 2796., 2400., 2816., 2416., 2836., 2432., 2856., 2448., 2876., 2464., 2896., 2480., 2916., 2496., 2936., 2512., 2956., 2528., 2976., 2544., 2996., 2560., 3016., 2576., 3036., 2592., 3056., 2608., 3076., 2624., 3096., 2640., 3116., 2656., 3136., 2672., 3156., 2688., 3176., 2704., 3196., 2720., 3216., 2992., 3556., 3008., 3576., 3024., 3596., 3040., 3616., 3056., 3636., 3072., 3656., 3088., 3676., 3104., 3696., 3120., 3716., 3136., 3736., 3152., 3756., 3168., 3776., 3184., 3796., 3200., 3816., 3216., 3836., 3232., 3856., 3248., 3876., 3264., 3896., 3280., 3916., 3296., 3936., 3312., 3956., 3328., 3976., 3344., 3996., 3360., 4016., 3376., 4036., 3392., 4056., 3408., 4076., 3424., 4096., 3696., 4436., 3712., 4456., 3728., 4476., 3744., 4496., 3760., 4516., 3776., 4536., 3792., 4556., 3808., 4576., 3824., 4596., 3840., 4616., 3856., 4636., 3872., 4656., 3888., 4676., 3904., 4696., 3920., 4716., 3936., 4736., 3952., 4756., 3968., 4776., 3984., 4796., 4000., 4816., 4016., 4836., 4032., 4856., 4048., 4876., 4064., 4896., 4080., 4916., 4096., 4936., 4112., 4956., 4128., 4976., 4400., 5316., 4416., 5336., 4432., 5356., 4448., 5376., 4464., 5396., 4480., 5416., 4496., 5436., 4512., 5456., 4528., 5476., 4544., 5496., 4560., 5516., 4576., 5536., 4592., 5556., 4608., 5576., 4624., 5596., 4640., 5616., 4656., 5636., 4672., 5656., 4688., 5676., 4704., 5696., 4720., 5716., 4736., 5736., 4752., 5756., 4768., 5776., 4784., 5796., 4800., 5816., 4816., 5836., 4832., 5856., 5104., 6196., 5120., 6216., 5136., 6236., 5152., 6256., 5168., 6276., 5184., 6296., 5200., 6316., 5216., 6336., 5232., 6356., 5248., 6376., 5264., 6396., 5280., 6416., 5296., 6436., 5312., 6456., 5328., 6476., 5344., 6496., 5360., 6516., 5376., 6536., 5392., 6556., 5408., 6576., 5424., 6596., 5440., 6616., 5456., 6636., 5472., 6656., 5488., 6676., 5504., 6696., 5520., 6716., 5536., 6736., 5808., 7076., 5824., 7096., 5840., 7116., 5856., 7136., 5872., 7156., 5888., 7176., 5904., 7196., 5920., 7216., 5936., 7236., 5952., 7256., 5968., 7276., 5984., 7296., 6000., 7316., 6016., 7336., 6032., 7356., 6048., 7376., 6064., 7396., 6080., 7416., 6096., 7436., 6112., 7456., 6128., 7476., 6144., 7496., 6160., 7516., 6176., 7536., 6192., 7556., 6208., 7576., 6224., 7596., 6240., 7616., 6512., 7956., 6528., 7976., 6544., 7996., 6560., 8016., 6576., 8036., 6592., 8056., 6608., 8076., 6624., 8096., 6640., 8116., 6656., 8136., 6672., 8156., 6688., 8176., 6704., 8196., 6720., 8216., 6736., 8236., 6752., 8256., 6768., 8276., 6784., 8296., 6800., 8316., 6816., 8336., 6832., 8356., 6848., 8376., 6864., 8396., 6880., 8416., 6896., 8436., 6912., 8456., 6928., 8476., 6944., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10004., 10440., 10876., 11312., 10104., 10544., 10984., 11424., 10204., 10648., 11092., 11536., 10304., 10752., 11200., 11648., 10404., 10856., 11308., 11760., 10504., 10960., 11416., 11872., 10604., 11064., 11524., 11984., 10704., 11168., 11632., 12096., 13858., 14512., 15166., 15820., 13996., 14656., 15316., 15976., 14134., 14800., 15466., 16132., 14272., 14944., 15616., 16288., 14410., 15088., 15766., 16444., 14548., 15232., 15916., 16600., 14686., 15376., 16066., 16756., 14824., 15520., 16216., 16912., 14962., 15664., 16366., 17068., 15100., 15808., 16516., 17224., 15238., 15952., 16666., 17380., 15376., 16096., 16816., 17536.,  8596.,  9048.,  9500.,  9952.,  8680.,  9136.,  9592., 10048.,  8764.,  9224.,  9684., 10144.,  8848.,  9312.,  9776., 10240.,  8932.,  9400.,  9868., 10336.,  9016.,  9488.,  9960., 10432.,  9100.,  9576., 10052., 10528.,  9184.,  9664., 10144., 10624., 14674., 15320., 15966., 16612., 14788., 15440., 16092., 16744., 14902., 15560., 16218., 16876., 15016., 15680., 16344., 17008., 15130., 15800., 16470., 17140., 15244., 15920., 16596., 17272., 15358., 16040., 16722., 17404., 15472., 16160., 16848., 17536., 20313., 21282., 22251., 23220., 20466., 21444., 22422., 23400., 20619., 21606., 22593., 23580., 20772., 21768., 22764., 23760., 20925., 21930., 22935., 23940., 21078., 22092., 23106., 24120., 21231., 22254., 23277., 24300., 21384., 22416., 23448., 24480., 21537., 22578., 23619., 24660., 21690., 22740., 23790., 24840., 21843., 22902., 23961., 25020., 21996., 23064., 24132., 25200., 12450., 13120., 13790., 14460., 12540., 13216., 13892., 14568., 12630., 13312., 13994., 14676., 12720., 13408., 14096., 14784., 12810., 13504., 14198., 14892., 12900., 13600., 14300., 15000., 12990., 13696., 14402., 15108., 13080., 13792., 14504., 15216., 19690., 20600., 21510., 22420., 19804., 20720., 21636., 22552., 19918., 20840., 21762., 22684., 20032., 20960., 21888., 22816., 20146., 21080., 22014., 22948., 20260., 21200., 22140., 23080., 20374., 21320., 22266., 23212., 20488., 21440., 22392., 23344., 27045., 28410., 29775., 31140., 27198., 28572., 29946., 31320., 27351., 28734., 30117., 31500., 27504., 28896., 30288., 31680., 22281., 23426., 24571., 25716., 22434., 23588., 24742., 25896., 22587., 23750., 24913., 26076., 22740., 23912., 25084., 26256., 22893., 24074., 25255., 26436., 23046., 24236., 25426., 26616., 23199., 24398., 25597., 26796., 23352., 24560., 25768., 26976., 16410., 17344., 18278., 19212., 16500., 17440., 18380., 19320., 16590., 17536., 18482., 19428., 16680., 17632., 18584., 19536., 16770., 17728., 18686., 19644., 16860., 17824., 18788., 19752., 16950., 17920., 18890., 19860., 17040., 18016., 18992., 19968., 14978., 15640., 16302., 16964., 15092., 15760., 16428., 17096., 15206., 15880., 16554., 17228., 15320., 16000., 16680., 17360., 15434., 16120., 16806., 17492., 15548., 16240., 16932., 17624., 15662., 16360., 17058., 17756., 15776., 16480., 17184., 17888., 20721., 21714., 22707., 23700., 20874., 21876., 22878., 23880., 21027., 22038., 23049., 24060., 21180., 22200., 23220., 24240., 21333., 22362., 23391., 24420., 21486., 22524., 23562., 24600., 21639., 22686., 23733., 24780., 21792., 22848., 23904., 24960., 21945., 23010., 24075., 25140., 22098., 23172., 24246., 25320., 22251., 23334., 24417., 25500., 22404., 23496., 24588., 25680., 12690., 13376., 14062., 14748., 12780., 13472., 14164., 14856., 12870., 13568., 14266., 14964., 12960., 13664., 14368., 15072., 13050., 13760., 14470., 15180., 13140., 13856., 14572., 15288., 13230., 13952., 14674., 15396., 13320., 14048., 14776., 15504., 19994., 20920., 21846., 22772., 20108., 21040., 21972., 22904., 20222., 21160., 22098., 23036., 20336., 21280., 22224., 23168., 12002., 12696., 13390., 14084., 12116., 12816., 13516., 14216., 12230., 12936., 13642., 14348., 12344., 13056., 13768., 14480., 19005., 20138., 21271., 22404., 19158., 20300., 21442., 22584., 19311., 20462., 21613., 22764., 19464., 20624., 21784., 22944., 19617., 20786., 21955., 23124., 19770., 20948., 22126., 23304., 19923., 21110., 22297., 23484., 20076., 21272., 22468., 23664., 20229., 21434., 22639., 23844., 20382., 21596., 22810., 24024., 20535., 21758., 22981., 24204., 20688., 21920., 23152., 24384.,  9226.,  9920., 10614., 11308.,  9316., 10016., 10716., 11416.,  9406., 10112., 10818., 11524.,  9496., 10208., 10920., 11632.,  9586., 10304., 11022., 11740.,  9676., 10400., 11124., 11848.,  9766., 10496., 11226., 11956.,  9856., 10592., 11328., 12064.,  7060.,  7672.,  8284.,  8896.,  7112.,  7728.,  8344.,  8960.,  7164.,  7784.,  8404.,  9024.,  7216.,  7840.,  8464.,  9088.,  7268.,  7896.,  8524.,  9152.,  7320.,  7952.,  8584.,  9216.,  7372.,  8008.,  8644.,  9280.,  7424.,  8064.,  8704.,  9344.,  8914.,  9832., 10750., 11668.,  8980.,  9904., 10828., 11752.,  9046.,  9976., 10906., 11836.,  9112., 10048., 10984., 11920.,  9178., 10120., 11062., 12004.,  9244., 10192., 11140., 12088.,  9310., 10264., 11218., 12172.,  9376., 10336., 11296., 12256.,  9442., 10408., 11374., 12340.,  9508., 10480., 11452., 12424.,  9574., 10552., 11530., 12508.,  9640., 10624., 11608., 12592.,  4756.,  5384.,  6012.,  6640.,  4792.,  5424.,  6056.,  6688.,  4828.,  5464.,  6100.,  6736.,  4864.,  5504.,  6144.,  6784.,  4900.,  5544.,  6188.,  6832.,  4936.,  5584.,  6232.,  6880.,  4972.,  5624.,  6276.,  6928.,  5008.,  5664.,  6320.,  6976.,  9348., 10136., 10924., 11712.,  9400., 10192., 10984., 11776.,  9452., 10248., 11044., 11840.,  9504., 10304., 11104., 11904.,  9556., 10360., 11164., 11968.,  9608., 10416., 11224., 12032.,  9660., 10472., 11284., 12096.,  9712., 10528., 11344., 12160., 11818., 13000., 14182., 15364., 11884., 13072., 14260., 15448., 11950., 13144., 14338., 15532., 12016., 13216., 14416., 15616.,  9778., 10728., 11678., 12628.,  9844., 10800., 11756., 12712.,  9910., 10872., 11834., 12796.,  9976., 10944., 11912., 12880., 10042., 11016., 11990., 12964., 10108., 11088., 12068., 13048., 10174., 11160., 12146., 13132., 10240., 11232., 12224., 13216.,  6340.,  7144.,  7948.,  8752.,  6376.,  7184.,  7992.,  8800.,  6412.,  7224.,  8036.,  8848.,  6448.,  7264.,  8080.,  8896.,  6484.,  7304.,  8124.,  8944.,  6520.,  7344.,  8168.,  8992.,  6556.,  7384.,  8212.,  9040.,  6592.,  7424.,  8256.,  9088.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4188.,  4576.,  4964.,  5352.,  4216.,  4608.,  5000.,  5392.,  4244.,  4640.,  5036.,  5432.,  4272.,  4672.,  5072.,  5472.,  4300.,  4704.,  5108.,  5512.,  4328.,  4736.,  5144.,  5552.,  4356.,  4768.,  5180.,  5592.,  4384.,  4800.,  5216.,  5632.,  4412.,  4832.,  5252.,  5672.,  4440.,  4864.,  5288.,  5712.,  4468.,  4896.,  5324.,  5752.,  4496.,  4928.,  5360.,  5792.,  4524.,  4960.,  5396.,  5832.,  4552.,  4992.,  5432.,  5872.,  4580.,  5024.,  5468.,  5912.,  4608.,  5056.,  5504.,  5952.,  4636.,  5088.,  5540.,  5992.,  4664.,  5120.,  5576.,  6032.,  4692.,  5152.,  5612.,  6072.,  4720.,  5184.,  5648.,  6112.,  4748.,  5216.,  5684.,  6152.,  4776.,  5248.,  5720.,  6192.,  4804.,  5280.,  5756.,  6232.,  4832.,  5312.,  5792.,  6272.,  4860.,  5344.,  5828.,  6312.,  4888.,  5376.,  5864.,  6352.,  4916.,  5408.,  5900.,  6392.,  4944.,  5440.,  5936.,  6432.,  5420.,  5984.,  6548.,  7112.,  5448.,  6016.,  6584.,  7152.,  5476.,  6048.,  6620.,  7192.,  5504.,  6080.,  6656.,  7232.,  5532.,  6112.,  6692.,  7272.,  5560.,  6144.,  6728.,  7312.,  5588.,  6176.,  6764.,  7352.,  5616.,  6208.,  6800.,  7392.,  5644.,  6240.,  6836.,  7432.,  5672.,  6272.,  6872.,  7472.,  5700.,  6304.,  6908.,  7512.,  5728.,  6336.,  6944.,  7552.,  5756.,  6368.,  6980.,  7592.,  5784.,  6400.,  7016.,  7632.,  5812.,  6432.,  7052.,  7672.,  5840.,  6464.,  7088.,  7712.,  5868.,  6496.,  7124.,  7752.,  5896.,  6528.,  7160.,  7792.,  5924.,  6560.,  7196.,  7832.,  5952.,  6592.,  7232.,  7872.,  5980.,  6624.,  7268.,  7912.,  6008.,  6656.,  7304.,  7952.,  6036.,  6688.,  7340.,  7992.,  6064.,  6720.,  7376.,  8032.,  6092.,  6752.,  7412.,  8072.,  6120.,  6784.,  7448.,  8112.,  6148.,  6816.,  7484.,  8152.,  6176.,  6848.,  7520.,  8192.,  6652.,  7392.,  8132.,  8872.,  6680.,  7424.,  8168.,  8912.,  6708.,  7456.,  8204.,  8952.,  6736.,  7488.,  8240.,  8992.,  6764.,  7520.,  8276.,  9032.,  6792.,  7552.,  8312.,  9072.,  6820.,  7584.,  8348.,  9112.,  6848.,  7616.,  8384.,  9152.,  6876.,  7648.,  8420.,  9192.,  6904.,  7680.,  8456.,  9232.,  6932.,  7712.,  8492.,  9272.,  6960.,  7744.,  8528.,  9312.,  6988.,  7776.,  8564.,  9352.,  7016.,  7808.,  8600.,  9392.,  7044.,  7840.,  8636.,  9432.,  7072.,  7872.,  8672.,  9472.,  7100.,  7904.,  8708.,  9512.,  7128.,  7936.,  8744.,  9552.,  7156.,  7968.,  8780.,  9592.,  7184.,  8000.,  8816.,  9632.,  7212.,  8032.,  8852.,  9672.,  7240.,  8064.,  8888.,  9712.,  7268.,  8096.,  8924.,  9752.,  7296.,  8128.,  8960.,  9792.,  7324.,  8160.,  8996.,  9832.,  7352.,  8192.,  9032.,  9872.,  7380.,  8224.,  9068.,  9912.,  7408.,  8256.,  9104.,  9952.,  7884.,  8800.,  9716., 10632.,  7912.,  8832.,  9752., 10672.,  7940.,  8864.,  9788., 10712.,  7968.,  8896.,  9824., 10752.,  7996.,  8928.,  9860., 10792.,  8024.,  8960.,  9896., 10832.,  8052.,  8992.,  9932., 10872.,  8080.,  9024.,  9968., 10912.,  8108.,  9056., 10004., 10952.,  8136.,  9088., 10040., 10992.,  8164.,  9120., 10076., 11032.,  8192.,  9152., 10112., 11072.,  8220.,  9184., 10148., 11112.,  8248.,  9216., 10184., 11152.,  8276.,  9248., 10220., 11192.,  8304.,  9280., 10256., 11232.,  8332.,  9312., 10292., 11272.,  8360.,  9344., 10328., 11312.,  8388.,  9376., 10364., 11352.,  8416.,  9408., 10400., 11392.,  8444.,  9440., 10436., 11432.,  8472.,  9472., 10472., 11472.,  8500.,  9504., 10508., 11512.,  8528.,  9536., 10544., 11552.,  8556.,  9568., 10580., 11592.,  8584.,  9600., 10616., 11632.,  8612.,  9632., 10652., 11672.,  8640.,  9664., 10688., 11712.,  9116., 10208., 11300., 12392.,  9144., 10240., 11336., 12432.,  9172., 10272., 11372., 12472.,  9200., 10304., 11408., 12512.,  9228., 10336., 11444., 12552.,  9256., 10368., 11480., 12592.,  9284., 10400., 11516., 12632.,  9312., 10432., 11552., 12672.,  9340., 10464., 11588., 12712.,  9368., 10496., 11624., 12752.,  9396., 10528., 11660., 12792.,  9424., 10560., 11696., 12832.,  9452., 10592., 11732., 12872.,  9480., 10624., 11768., 12912.,  9508., 10656., 11804., 12952.,  9536., 10688., 11840., 12992.,  9564., 10720., 11876., 13032.,  9592., 10752., 11912., 13072.,  9620., 10784., 11948., 13112.,  9648., 10816., 11984., 13152.,  9676., 10848., 12020., 13192.,  9704., 10880., 12056., 13232.,  9732., 10912., 12092., 13272.,  9760., 10944., 12128., 13312.,  9788., 10976., 12164., 13352.,  9816., 11008., 12200., 13392.,  9844., 11040., 12236., 13432.,  9872., 11072., 12272., 13472., 10348., 11616., 12884., 14152., 10376., 11648., 12920., 14192., 10404., 11680., 12956., 14232., 10432., 11712., 12992., 14272., 10460., 11744., 13028., 14312., 10488., 11776., 13064., 14352., 10516., 11808., 13100., 14392., 10544., 11840., 13136., 14432., 10572., 11872., 13172., 14472., 10600., 11904., 13208., 14512., 10628., 11936., 13244., 14552., 10656., 11968., 13280., 14592., 10684., 12000., 13316., 14632., 10712., 12032., 13352., 14672., 10740., 12064., 13388., 14712., 10768., 12096., 13424., 14752., 10796., 12128., 13460., 14792., 10824., 12160., 13496., 14832., 10852., 12192., 13532., 14872., 10880., 12224., 13568., 14912., 10908., 12256., 13604., 14952., 10936., 12288., 13640., 14992., 10964., 12320., 13676., 15032., 10992., 12352., 13712., 15072., 11020., 12384., 13748., 15112., 11048., 12416., 13784., 15152., 11076., 12448., 13820., 15192., 11104., 12480., 13856., 15232., 11580., 13024., 14468., 15912., 11608., 13056., 14504., 15952., 11636., 13088., 14540., 15992., 11664., 13120., 14576., 16032., 11692., 13152., 14612., 16072., 11720., 13184., 14648., 16112., 11748., 13216., 14684., 16152., 11776., 13248., 14720., 16192., 11804., 13280., 14756., 16232., 11832., 13312., 14792., 16272., 11860., 13344., 14828., 16312., 11888., 13376., 14864., 16352., 11916., 13408., 14900., 16392., 11944., 13440., 14936., 16432., 11972., 13472., 14972., 16472., 12000., 13504., 15008., 16512., 12028., 13536., 15044., 16552., 12056., 13568., 15080., 16592., 12084., 13600., 15116., 16632., 12112., 13632., 15152., 16672., 12140., 13664., 15188., 16712., 12168., 13696., 15224., 16752., 12196., 13728., 15260., 16792., 12224., 13760., 15296., 16832., 12252., 13792., 15332., 16872., 12280., 13824., 15368., 16912., 12308., 13856., 15404., 16952., 12336., 13888., 15440., 16992.};
  const std::array<int, 4> in_shape = {{ 1, 12, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1996., 2767., 2806., 2845., 2884., 1756., 1780., 2364., 3273., 3318., 3363., 3408., 2067., 2094., 2760., 3813., 3858., 3903., 3948., 2391., 2418., 3156., 4353., 4398., 4443., 4488., 2715., 2742., 3552., 4893., 4938., 4983., 5028., 3039., 3066., 1396., 1849., 1870., 1891., 1912., 1096., 1108., 1588., 2101., 2122., 2143., 2164., 1240., 1252.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,  670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,  870.,  880.,  890.,  900.,  910.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3728.,  3992.,  5144.,  5534.,  5216.,  5612.,  5288.,  5690.,  5360.,  5768.,  3244.,  3512.,  3288.,  3560.,  4404.,  4728.,  6069.,  6546.,  6150.,  6636.,  6231.,  6726.,  6312.,  6816.,  3804.,  4134.,  3852.,  4188.,  5124.,  5520.,  7041.,  7626.,  7122.,  7716.,  7203.,  7806.,  7284.,  7896.,  4380.,  4782.,  4428.,  4836.,  5844.,  6312.,  8013.,  8706.,  8094.,  8796.,  8175.,  8886.,  8256.,  8976.,  4956.,  5430.,  5004.,  5484.,  6564.,  7104.,  8985.,  9786.,  9066.,  9876.,  9147.,  9966.,  9228., 10056.,  5532.,  6078.,  5580.,  6132.,  2480.,  2792.,  3236.,  3698.,  3272.,  3740.,  3308.,  3782.,  3344.,  3824.,  1876.,  2192.,  1896.,  2216.,  2816.,  3176.,  3668.,  4202.,  3704.,  4244.,  3740.,  4286.,  3776.,  4328.,  2116.,  2480.,  2136.,  2504.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,  712.,  840.,  728.,  860.,  824.,  980.,  840., 1000.,  856., 1020.,  872., 1040.,  888., 1060.,  904., 1080.,  920., 1100., 1016., 1220., 1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320., 1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520., 1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720., 1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820., 1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020., 1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220., 1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7192.,  7456.,  7720.,  7984.,  9898., 10288., 10678., 11068., 10036., 10432., 10828., 11224., 10174., 10576., 10978., 11380., 10312., 10720., 11128., 11536.,  6220.,  6488.,  6756.,  7024.,  6304.,  6576.,  6848.,  7120.,  8484.,  8808.,  9132.,  9456., 11661., 12138., 12615., 13092., 11814., 12300., 12786., 13272., 11967., 12462., 12957., 13452., 12120., 12624., 13128., 13632.,  7278.,  7608.,  7938.,  8268.,  7368.,  7704.,  8040.,  8376.,  9852., 10248., 10644., 11040., 13497., 14082., 14667., 15252., 13650., 14244., 14838., 15432., 13803., 14406., 15009., 15612., 13956., 14568., 15180., 15792.,  8358.,  8760.,  9162.,  9564.,  8448.,  8856.,  9264.,  9672., 11220., 11688., 12156., 12624., 15333., 16026., 16719., 17412., 15486., 16188., 16890., 17592., 15639., 16350., 17061., 17772., 15792., 16512., 17232., 17952.,  9438.,  9912., 10386., 10860.,  9528., 10008., 10488., 10968., 12588., 13128., 13668., 14208., 17169., 17970., 18771., 19572., 17322., 18132., 18942., 19752., 17475., 18294., 19113., 19932., 17628., 18456., 19284., 20112., 10518., 11064., 11610., 12156., 10608., 11160., 11712., 12264.,  4648.,  4960.,  5272.,  5584.,  6010.,  6472.,  6934.,  7396.,  6076.,  6544.,  7012.,  7480.,  6142.,  6616.,  7090.,  7564.,  6208.,  6688.,  7168.,  7648.,  3436.,  3752.,  4068.,  4384.,  3472.,  3792.,  4112.,  4432.,  5272.,  5632.,  5992.,  6352.,  6802.,  7336.,  7870.,  8404.,  6868.,  7408.,  7948.,  8488.,  6934.,  7480.,  8026.,  8572.,  7000.,  7552.,  8104.,  8656.,  3868.,  4232.,  4596.,  4960.,  3904.,  4272.,  4640.,  5008.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328., 1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640., 1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648., 1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040., 1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808., 1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440., 1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128., 2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640., 1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448., 2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040., 2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608., 2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440., 2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928., 3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640., 2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248., 3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040., 2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568., 3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440., 3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728., 4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3964.,  3992.,  5495.,  5534.,  5573.,  5612.,  5651.,  5690.,  5729.,  5768.,  3488.,  3512.,  3536.,  3560.,  4695.,  4728.,  6501.,  6546.,  6591.,  6636.,  6681.,  6726.,  6771.,  6816.,  4107.,  4134.,  4161.,  4188.,  5487.,  5520.,  7581.,  7626.,  7671.,  7716.,  7761.,  7806.,  7851.,  7896.,  4755.,  4782.,  4809.,  4836.,  6279.,  6312.,  8661.,  8706.,  8751.,  8796.,  8841.,  8886.,  8931.,  8976.,  5403.,  5430.,  5457.,  5484.,  7071.,  7104.,  9741.,  9786.,  9831.,  9876.,  9921.,  9966., 10011., 10056.,  6051.,  6078.,  6105.,  6132.,  2776.,  2792.,  3677.,  3698.,  3719.,  3740.,  3761.,  3782.,  3803.,  3824.,  2180.,  2192.,  2204.,  2216.,  3160.,  3176.,  4181.,  4202.,  4223.,  4244.,  4265.,  4286.,  4307.,  4328.,  2468.,  2480.,  2492.,  2504.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1210., 1220., 1230., 1240., 1250., 1260., 1270., 1280., 1290., 1300., 1310., 1320., 1330., 1340., 1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1690., 1700., 1710., 1720., 1730., 1740., 1750., 1760., 1770., 1780., 1790., 1800., 1810., 1820., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2170., 2180., 2190., 2200., 2210., 2220., 2230., 2240., 2250., 2260., 2270., 2280., 2290., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7404.,  7928.,  7456.,  7984., 10216., 10990., 10288., 11068., 10360., 11146., 10432., 11224., 10504., 11302., 10576., 11380., 10648., 11458., 10720., 11536.,  6444.,  6976.,  6488.,  7024.,  6532.,  7072.,  6576.,  7120.,  8748.,  9390.,  8808.,  9456., 12057., 13002., 12138., 13092., 12219., 13182., 12300., 13272., 12381., 13362., 12462., 13452., 12543., 13542., 12624., 13632.,  7560.,  8214.,  7608.,  8268.,  7656.,  8322.,  7704.,  8376., 10188., 10974., 10248., 11040., 14001., 15162., 14082., 15252., 14163., 15342., 14244., 15432., 14325., 15522., 14406., 15612., 14487., 15702., 14568., 15792.,  8712.,  9510.,  8760.,  9564.,  8808.,  9618.,  8856.,  9672., 11628., 12558., 11688., 12624., 15945., 17322., 16026., 17412., 16107., 17502., 16188., 17592., 16269., 17682., 16350., 17772., 16431., 17862., 16512., 17952.,  9864., 10806.,  9912., 10860.,  9960., 10914., 10008., 10968., 13068., 14142., 13128., 14208., 17889., 19482., 17970., 19572., 18051., 19662., 18132., 19752., 18213., 19842., 18294., 19932., 18375., 20022., 18456., 20112., 11016., 12102., 11064., 12156., 11112., 12210., 11160., 12264.,  4932.,  5552.,  4960.,  5584.,  6436.,  7354.,  6472.,  7396.,  6508.,  7438.,  6544.,  7480.,  6580.,  7522.,  6616.,  7564.,  6652.,  7606.,  6688.,  7648.,  3732.,  4360.,  3752.,  4384.,  3772.,  4408.,  3792.,  4432.,  5604.,  6320.,  5632.,  6352.,  7300.,  8362.,  7336.,  8404.,  7372.,  8446.,  7408.,  8488.,  7444.,  8530.,  7480.,  8572.,  7516.,  8614.,  7552.,  8656.,  4212.,  4936.,  4232.,  4960.,  4252.,  4984.,  4272.,  5008.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1248., 1460., 1264., 1480., 1280., 1500., 1296., 1520., 1312., 1540., 1328., 1560., 1344., 1580., 1360., 1600., 1376., 1620., 1392., 1640., 1408., 1660., 1424., 1680., 1440., 1700., 1456., 1720., 1632., 1940., 1648., 1960., 1664., 1980., 1680., 2000., 1696., 2020., 1712., 2040., 1728., 2060., 1744., 2080., 1760., 2100., 1776., 2120., 1792., 2140., 1808., 2160., 1824., 2180., 1840., 2200., 2016., 2420., 2032., 2440., 2048., 2460., 2064., 2480., 2080., 2500., 2096., 2520., 2112., 2540., 2128., 2560., 2144., 2580., 2160., 2600., 2176., 2620., 2192., 2640., 2208., 2660., 2224., 2680., 2400., 2900., 2416., 2920., 2432., 2940., 2448., 2960., 2464., 2980., 2480., 3000., 2496., 3020., 2512., 3040., 2528., 3060., 2544., 3080., 2560., 3100., 2576., 3120., 2592., 3140., 2608., 3160., 2784., 3380., 2800., 3400., 2816., 3420., 2832., 3440., 2848., 3460., 2864., 3480., 2880., 3500., 2896., 3520., 2912., 3540., 2928., 3560., 2944., 3580., 2960., 3600., 2976., 3620., 2992., 3640., 3168., 3860., 3184., 3880., 3200., 3900., 3216., 3920., 3232., 3940., 3248., 3960., 3264., 3980., 3280., 4000., 3296., 4020., 3312., 4040., 3328., 4060., 3344., 4080., 3360., 4100., 3376., 4120., 3552., 4340., 3568., 4360., 3584., 4380., 3600., 4400., 3616., 4420., 3632., 4440., 3648., 4460., 3664., 4480., 3680., 4500., 3696., 4520., 3712., 4540., 3728., 4560., 3744., 4580., 3760., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14284., 14808., 15332., 15856., 14384., 14912., 15440., 15968., 19658., 20432., 21206., 21980., 19796., 20576., 21356., 22136., 19934., 20720., 21506., 22292., 20072., 20864., 21656., 22448., 20210., 21008., 21806., 22604., 20348., 21152., 21956., 22760., 20486., 21296., 22106., 22916., 20624., 21440., 22256., 23072., 12356., 12888., 13420., 13952., 12440., 12976., 13512., 14048., 12524., 13064., 13604., 14144., 12608., 13152., 13696., 14240., 16854., 17496., 18138., 18780., 16968., 17616., 18264., 18912., 23169., 24114., 25059., 26004., 23322., 24276., 25230., 26184., 23475., 24438., 25401., 26364., 23628., 24600., 25572., 26544., 23781., 24762., 25743., 26724., 23934., 24924., 25914., 26904., 24087., 25086., 26085., 27084., 24240., 25248., 26256., 27264., 14466., 15120., 15774., 16428., 14556., 15216., 15876., 16536., 14646., 15312., 15978., 16644., 14736., 15408., 16080., 16752., 19590., 20376., 21162., 21948., 19704., 20496., 21288., 22080., 26841., 28002., 29163., 30324., 26994., 28164., 29334., 30504., 27147., 28326., 29505., 30684., 27300., 28488., 29676., 30864., 27453., 28650., 29847., 31044., 27606., 28812., 30018., 31224., 27759., 28974., 30189., 31404., 27912., 29136., 30360., 31584., 16626., 17424., 18222., 19020., 16716., 17520., 18324., 19128., 16806., 17616., 18426., 19236., 16896., 17712., 18528., 19344., 22326., 23256., 24186., 25116., 22440., 23376., 24312., 25248., 22065., 23186., 24307., 25428., 22218., 23348., 24478., 25608., 22371., 23510., 24649., 25788., 22524., 23672., 24820., 25968., 22677., 23834., 24991., 26148., 22830., 23996., 25162., 26328., 22983., 24158., 25333., 26508., 23136., 24320., 25504., 26688., 11362., 12048., 12734., 13420., 11452., 12144., 12836., 13528., 11542., 12240., 12938., 13636., 11632., 12336., 13040., 13744.,  9190.,  9752., 10314., 10876.,  9304.,  9872., 10440., 11008., 11913., 12738., 13563., 14388., 12066., 12900., 13734., 14568., 12219., 13062., 13905., 14748., 12372., 13224., 14076., 14928., 12525., 13386., 14247., 15108., 12678., 13548., 14418., 15288., 12831., 13710., 14589., 15468., 12984., 13872., 14760., 15648.,  7122.,  7696.,  8270.,  8844.,  7212.,  7792.,  8372.,  8952.,  7302.,  7888.,  8474.,  9060.,  7392.,  7984.,  8576.,  9168.,  9244.,  9864., 10484., 11104.,  9296.,  9920., 10544., 11168., 11954., 12872., 13790., 14708., 12020., 12944., 13868., 14792., 12086., 13016., 13946., 14876., 12152., 13088., 14024., 14960., 12218., 13160., 14102., 15044., 12284., 13232., 14180., 15128., 12350., 13304., 14258., 15212., 12416., 13376., 14336., 15296.,  6836.,  7464.,  8092.,  8720.,  6872.,  7504.,  8136.,  8768.,  6908.,  7544.,  8180.,  8816.,  6944.,  7584.,  8224.,  8864., 10492., 11208., 11924., 12640., 10544., 11264., 11984., 12704., 13538., 14600., 15662., 16724., 13604., 14672., 15740., 16808., 13670., 14744., 15818., 16892., 13736., 14816., 15896., 16976., 13802., 14888., 15974., 17060., 13868., 14960., 16052., 17144., 13934., 15032., 16130., 17228., 14000., 15104., 16208., 17312.,  7700.,  8424.,  9148.,  9872.,  7736.,  8464.,  9192.,  9920.,  7772.,  8504.,  9236.,  9968.,  7808.,  8544.,  9280., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2284., 2496., 2708., 2920., 2312., 2528., 2744., 2960., 2340., 2560., 2780., 3000., 2368., 2592., 2816., 3040., 2396., 2624., 2852., 3080., 2424., 2656., 2888., 3120., 2452., 2688., 2924., 3160., 2480., 2720., 2960., 3200., 2508., 2752., 2996., 3240., 2536., 2784., 3032., 3280., 2564., 2816., 3068., 3320., 2592., 2848., 3104., 3360., 2620., 2880., 3140., 3400., 2648., 2912., 3176., 3440., 2956., 3264., 3572., 3880., 2984., 3296., 3608., 3920., 3012., 3328., 3644., 3960., 3040., 3360., 3680., 4000., 3068., 3392., 3716., 4040., 3096., 3424., 3752., 4080., 3124., 3456., 3788., 4120., 3152., 3488., 3824., 4160., 3180., 3520., 3860., 4200., 3208., 3552., 3896., 4240., 3236., 3584., 3932., 4280., 3264., 3616., 3968., 4320., 3292., 3648., 4004., 4360., 3320., 3680., 4040., 4400., 3628., 4032., 4436., 4840., 3656., 4064., 4472., 4880., 3684., 4096., 4508., 4920., 3712., 4128., 4544., 4960., 3740., 4160., 4580., 5000., 3768., 4192., 4616., 5040., 3796., 4224., 4652., 5080., 3824., 4256., 4688., 5120., 3852., 4288., 4724., 5160., 3880., 4320., 4760., 5200., 3908., 4352., 4796., 5240., 3936., 4384., 4832., 5280., 3964., 4416., 4868., 5320., 3992., 4448., 4904., 5360., 4300., 4800., 5300., 5800., 4328., 4832., 5336., 5840., 4356., 4864., 5372., 5880., 4384., 4896., 5408., 5920., 4412., 4928., 5444., 5960., 4440., 4960., 5480., 6000., 4468., 4992., 5516., 6040., 4496., 5024., 5552., 6080., 4524., 5056., 5588., 6120., 4552., 5088., 5624., 6160., 4580., 5120., 5660., 6200., 4608., 5152., 5696., 6240., 4636., 5184., 5732., 6280., 4664., 5216., 5768., 6320., 4972., 5568., 6164., 6760., 5000., 5600., 6200., 6800., 5028., 5632., 6236., 6840., 5056., 5664., 6272., 6880., 5084., 5696., 6308., 6920., 5112., 5728., 6344., 6960., 5140., 5760., 6380., 7000., 5168., 5792., 6416., 7040., 5196., 5824., 6452., 7080., 5224., 5856., 6488., 7120., 5252., 5888., 6524., 7160., 5280., 5920., 6560., 7200., 5308., 5952., 6596., 7240., 5336., 5984., 6632., 7280., 5644., 6336., 7028., 7720., 5672., 6368., 7064., 7760., 5700., 6400., 7100., 7800., 5728., 6432., 7136., 7840., 5756., 6464., 7172., 7880., 5784., 6496., 7208., 7920., 5812., 6528., 7244., 7960., 5840., 6560., 7280., 8000., 5868., 6592., 7316., 8040., 5896., 6624., 7352., 8080., 5924., 6656., 7388., 8120., 5952., 6688., 7424., 8160., 5980., 6720., 7460., 8200., 6008., 6752., 7496., 8240., 6316., 7104., 7892., 8680., 6344., 7136., 7928., 8720., 6372., 7168., 7964., 8760., 6400., 7200., 8000., 8800., 6428., 7232., 8036., 8840., 6456., 7264., 8072., 8880., 6484., 7296., 8108., 8920., 6512., 7328., 8144., 8960., 6540., 7360., 8180., 9000., 6568., 7392., 8216., 9040., 6596., 7424., 8252., 9080., 6624., 7456., 8288., 9120., 6652., 7488., 8324., 9160., 6680., 7520., 8360., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7900.,  7928.,  7956.,  7984., 10951., 10990., 11029., 11068., 11107., 11146., 11185., 11224., 11263., 11302., 11341., 11380., 11419., 11458., 11497., 11536.,  6952.,  6976.,  7000.,  7024.,  7048.,  7072.,  7096.,  7120.,  9357.,  9390.,  9423.,  9456., 12957., 13002., 13047., 13092., 13137., 13182., 13227., 13272., 13317., 13362., 13407., 13452., 13497., 13542., 13587., 13632.,  8187.,  8214.,  8241.,  8268.,  8295.,  8322.,  8349.,  8376., 10941., 10974., 11007., 11040., 15117., 15162., 15207., 15252., 15297., 15342., 15387., 15432., 15477., 15522., 15567., 15612., 15657., 15702., 15747., 15792.,  9483.,  9510.,  9537.,  9564.,  9591.,  9618.,  9645.,  9672., 12525., 12558., 12591., 12624., 17277., 17322., 17367., 17412., 17457., 17502., 17547., 17592., 17637., 17682., 17727., 17772., 17817., 17862., 17907., 17952., 10779., 10806., 10833., 10860., 10887., 10914., 10941., 10968., 14109., 14142., 14175., 14208., 19437., 19482., 19527., 19572., 19617., 19662., 19707., 19752., 19797., 19842., 19887., 19932., 19977., 20022., 20067., 20112., 12075., 12102., 12129., 12156., 12183., 12210., 12237., 12264.,  5536.,  5552.,  5568.,  5584.,  7333.,  7354.,  7375.,  7396.,  7417.,  7438.,  7459.,  7480.,  7501.,  7522.,  7543.,  7564.,  7585.,  7606.,  7627.,  7648.,  4348.,  4360.,  4372.,  4384.,  4396.,  4408.,  4420.,  4432.,  6304.,  6320.,  6336.,  6352.,  8341.,  8362.,  8383.,  8404.,  8425.,  8446.,  8467.,  8488.,  8509.,  8530.,  8551.,  8572.,  8593.,  8614.,  8635.,  8656.,  4924.,  4936.,  4948.,  4960.,  4972.,  4984.,  4996.,  5008.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2070., 2080., 2090., 2100., 2110., 2120., 2130., 2140., 2150., 2160., 2170., 2180., 2190., 2200., 2410., 2420., 2430., 2440., 2450., 2460., 2470., 2480., 2490., 2500., 2510., 2520., 2530., 2540., 2550., 2560., 2570., 2580., 2590., 2600., 2610., 2620., 2630., 2640., 2650., 2660., 2670., 2680., 2890., 2900., 2910., 2920., 2930., 2940., 2950., 2960., 2970., 2980., 2990., 3000., 3010., 3020., 3030., 3040., 3050., 3060., 3070., 3080., 3090., 3100., 3110., 3120., 3130., 3140., 3150., 3160., 3370., 3380., 3390., 3400., 3410., 3420., 3430., 3440., 3450., 3460., 3470., 3480., 3490., 3500., 3510., 3520., 3530., 3540., 3550., 3560., 3570., 3580., 3590., 3600., 3610., 3620., 3630., 3640., 3850., 3860., 3870., 3880., 3890., 3900., 3910., 3920., 3930., 3940., 3950., 3960., 3970., 3980., 3990., 4000., 4010., 4020., 4030., 4040., 4050., 4060., 4070., 4080., 4090., 4100., 4110., 4120., 4330., 4340., 4350., 4360., 4370., 4380., 4390., 4400., 4410., 4420., 4430., 4440., 4450., 4460., 4470., 4480., 4490., 4500., 4510., 4520., 4530., 4540., 4550., 4560., 4570., 4580., 4590., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14756., 15800., 14808., 15856., 14860., 15912., 14912., 15968., 20360., 21902., 20432., 21980., 20504., 22058., 20576., 22136., 20648., 22214., 20720., 22292., 20792., 22370., 20864., 22448., 20936., 22526., 21008., 22604., 21080., 22682., 21152., 22760., 21224., 22838., 21296., 22916., 21368., 22994., 21440., 23072., 12844., 13904., 12888., 13952., 12932., 14000., 12976., 14048., 13020., 14096., 13064., 14144., 13108., 14192., 13152., 14240., 17436., 18714., 17496., 18780., 17556., 18846., 17616., 18912., 24033., 25914., 24114., 26004., 24195., 26094., 24276., 26184., 24357., 26274., 24438., 26364., 24519., 26454., 24600., 26544., 24681., 26634., 24762., 26724., 24843., 26814., 24924., 26904., 25005., 26994., 25086., 27084., 25167., 27174., 25248., 27264., 15072., 16374., 15120., 16428., 15168., 16482., 15216., 16536., 15264., 16590., 15312., 16644., 15360., 16698., 15408., 16752., 20316., 21882., 20376., 21948., 20436., 22014., 20496., 22080., 27921., 30234., 28002., 30324., 28083., 30414., 28164., 30504., 28245., 30594., 28326., 30684., 28407., 30774., 28488., 30864., 28569., 30954., 28650., 31044., 28731., 31134., 28812., 31224., 28893., 31314., 28974., 31404., 29055., 31494., 29136., 31584., 17376., 18966., 17424., 19020., 17472., 19074., 17520., 19128., 17568., 19182., 17616., 19236., 17664., 19290., 17712., 19344., 23196., 25050., 23256., 25116., 23316., 25182., 23376., 25248., 23105., 25338., 23186., 25428., 23267., 25518., 23348., 25608., 23429., 25698., 23510., 25788., 23591., 25878., 23672., 25968., 23753., 26058., 23834., 26148., 23915., 26238., 23996., 26328., 24077., 26418., 24158., 26508., 24239., 26598., 24320., 26688., 12000., 13366., 12048., 13420., 12096., 13474., 12144., 13528., 12192., 13582., 12240., 13636., 12288., 13690., 12336., 13744.,  9692., 10810.,  9752., 10876.,  9812., 10942.,  9872., 11008., 12657., 14298., 12738., 14388., 12819., 14478., 12900., 14568., 12981., 14658., 13062., 14748., 13143., 14838., 13224., 14928., 13305., 15018., 13386., 15108., 13467., 15198., 13548., 15288., 13629., 15378., 13710., 15468., 13791., 15558., 13872., 15648.,  7648.,  8790.,  7696.,  8844.,  7744.,  8898.,  7792.,  8952.,  7840.,  9006.,  7888.,  9060.,  7936.,  9114.,  7984.,  9168.,  9836., 11072.,  9864., 11104.,  9892., 11136.,  9920., 11168., 12836., 14666., 12872., 14708., 12908., 14750., 12944., 14792., 12980., 14834., 13016., 14876., 13052., 14918., 13088., 14960., 13124., 15002., 13160., 15044., 13196., 15086., 13232., 15128., 13268., 15170., 13304., 15212., 13340., 15254., 13376., 15296.,  7444.,  8696.,  7464.,  8720.,  7484.,  8744.,  7504.,  8768.,  7524.,  8792.,  7544.,  8816.,  7564.,  8840.,  7584.,  8864., 11180., 12608., 11208., 12640., 11236., 12672., 11264., 12704., 14564., 16682., 14600., 16724., 14636., 16766., 14672., 16808., 14708., 16850., 14744., 16892., 14780., 16934., 14816., 16976., 14852., 17018., 14888., 17060., 14924., 17102., 14960., 17144., 14996., 17186., 15032., 17228., 15068., 17270., 15104., 17312.,  8404.,  9848.,  8424.,  9872.,  8444.,  9896.,  8464.,  9920.,  8484.,  9944.,  8504.,  9968.,  8524.,  9992.,  8544., 10016.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2480., 2900., 2496., 2920., 2512., 2940., 2528., 2960., 2544., 2980., 2560., 3000., 2576., 3020., 2592., 3040., 2608., 3060., 2624., 3080., 2640., 3100., 2656., 3120., 2672., 3140., 2688., 3160., 2704., 3180., 2720., 3200., 2736., 3220., 2752., 3240., 2768., 3260., 2784., 3280., 2800., 3300., 2816., 3320., 2832., 3340., 2848., 3360., 2864., 3380., 2880., 3400., 2896., 3420., 2912., 3440., 3248., 3860., 3264., 3880., 3280., 3900., 3296., 3920., 3312., 3940., 3328., 3960., 3344., 3980., 3360., 4000., 3376., 4020., 3392., 4040., 3408., 4060., 3424., 4080., 3440., 4100., 3456., 4120., 3472., 4140., 3488., 4160., 3504., 4180., 3520., 4200., 3536., 4220., 3552., 4240., 3568., 4260., 3584., 4280., 3600., 4300., 3616., 4320., 3632., 4340., 3648., 4360., 3664., 4380., 3680., 4400., 4016., 4820., 4032., 4840., 4048., 4860., 4064., 4880., 4080., 4900., 4096., 4920., 4112., 4940., 4128., 4960., 4144., 4980., 4160., 5000., 4176., 5020., 4192., 5040., 4208., 5060., 4224., 5080., 4240., 5100., 4256., 5120., 4272., 5140., 4288., 5160., 4304., 5180., 4320., 5200., 4336., 5220., 4352., 5240., 4368., 5260., 4384., 5280., 4400., 5300., 4416., 5320., 4432., 5340., 4448., 5360., 4784., 5780., 4800., 5800., 4816., 5820., 4832., 5840., 4848., 5860., 4864., 5880., 4880., 5900., 4896., 5920., 4912., 5940., 4928., 5960., 4944., 5980., 4960., 6000., 4976., 6020., 4992., 6040., 5008., 6060., 5024., 6080., 5040., 6100., 5056., 6120., 5072., 6140., 5088., 6160., 5104., 6180., 5120., 6200., 5136., 6220., 5152., 6240., 5168., 6260., 5184., 6280., 5200., 6300., 5216., 6320., 5552., 6740., 5568., 6760., 5584., 6780., 5600., 6800., 5616., 6820., 5632., 6840., 5648., 6860., 5664., 6880., 5680., 6900., 5696., 6920., 5712., 6940., 5728., 6960., 5744., 6980., 5760., 7000., 5776., 7020., 5792., 7040., 5808., 7060., 5824., 7080., 5840., 7100., 5856., 7120., 5872., 7140., 5888., 7160., 5904., 7180., 5920., 7200., 5936., 7220., 5952., 7240., 5968., 7260., 5984., 7280., 6320., 7700., 6336., 7720., 6352., 7740., 6368., 7760., 6384., 7780., 6400., 7800., 6416., 7820., 6432., 7840., 6448., 7860., 6464., 7880., 6480., 7900., 6496., 7920., 6512., 7940., 6528., 7960., 6544., 7980., 6560., 8000., 6576., 8020., 6592., 8040., 6608., 8060., 6624., 8080., 6640., 8100., 6656., 8120., 6672., 8140., 6688., 8160., 6704., 8180., 6720., 8200., 6736., 8220., 6752., 8240., 7088., 8660., 7104., 8680., 7120., 8700., 7136., 8720., 7152., 8740., 7168., 8760., 7184., 8780., 7200., 8800., 7216., 8820., 7232., 8840., 7248., 8860., 7264., 8880., 7280., 8900., 7296., 8920., 7312., 8940., 7328., 8960., 7344., 8980., 7360., 9000., 7376., 9020., 7392., 9040., 7408., 9060., 7424., 9080., 7440., 9100., 7456., 9120., 7472., 9140., 7488., 9160., 7504., 9180., 7520., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12596., 13128., 13660., 14192., 12696., 13232., 13768., 14304., 12796., 13336., 13876., 14416., 12896., 13440., 13984., 14528., 16906., 17680., 18454., 19228., 17044., 17824., 18604., 19384., 17182., 17968., 18754., 19540., 17320., 18112., 18904., 19696., 17458., 18256., 19054., 19852., 17596., 18400., 19204., 20008., 17734., 18544., 19354., 20164., 17872., 18688., 19504., 20320., 18010., 18832., 19654., 20476., 18148., 18976., 19804., 20632., 18286., 19120., 19954., 20788., 18424., 19264., 20104., 20944., 18562., 19408., 20254., 21100., 18700., 19552., 20404., 21256., 18838., 19696., 20554., 21412., 18976., 19840., 20704., 21568., 10804., 11352., 11900., 12448., 10888., 11440., 11992., 12544., 10972., 11528., 12084., 12640., 11056., 11616., 12176., 12736., 11140., 11704., 12268., 12832., 11224., 11792., 12360., 12928., 11308., 11880., 12452., 13024., 11392., 11968., 12544., 13120., 17722., 18488., 19254., 20020., 17836., 18608., 19380., 20152., 17950., 18728., 19506., 20284., 18064., 18848., 19632., 20416., 23913., 25026., 26139., 27252., 24066., 25188., 26310., 27432., 24219., 25350., 26481., 27612., 24372., 25512., 26652., 27792., 24525., 25674., 26823., 27972., 24678., 25836., 26994., 28152., 24831., 25998., 27165., 28332., 24984., 26160., 27336., 28512., 25137., 26322., 27507., 28692., 25290., 26484., 27678., 28872., 25443., 26646., 27849., 29052., 25596., 26808., 28020., 29232., 25749., 26970., 28191., 29412., 25902., 27132., 28362., 29592., 26055., 27294., 28533., 29772., 26208., 27456., 28704., 29952., 15018., 15808., 16598., 17388., 15108., 15904., 16700., 17496., 15198., 16000., 16802., 17604., 15288., 16096., 16904., 17712., 15378., 16192., 17006., 17820., 15468., 16288., 17108., 17928., 15558., 16384., 17210., 18036., 15648., 16480., 17312., 18144., 17818., 18616., 19414., 20212., 17932., 18736., 19540., 20344., 18046., 18856., 19666., 20476., 18160., 18976., 19792., 20608., 21529., 22562., 23595., 24628., 21682., 22724., 23766., 24808., 21835., 22886., 23937., 24988., 21988., 23048., 24108., 25168., 22141., 23210., 24279., 25348., 22294., 23372., 24450., 25528., 22447., 23534., 24621., 25708., 22600., 23696., 24792., 25888., 22753., 23858., 24963., 26068., 22906., 24020., 25134., 26248., 23059., 24182., 25305., 26428., 23212., 24344., 25476., 26608., 23365., 24506., 25647., 26788., 23518., 24668., 25818., 26968., 23671., 24830., 25989., 27148., 23824., 24992., 26160., 27328., 11658., 12224., 12790., 13356., 11748., 12320., 12892., 13464., 11838., 12416., 12994., 13572., 11928., 12512., 13096., 13680., 12018., 12608., 13198., 13788., 12108., 12704., 13300., 13896., 12198., 12800., 13402., 14004., 12288., 12896., 13504., 14112., 18938., 19768., 20598., 21428., 19052., 19888., 20724., 21560., 19166., 20008., 20850., 21692., 19280., 20128., 20976., 21824., 17097., 18050., 19003., 19956., 17250., 18212., 19174., 20136., 17403., 18374., 19345., 20316., 17556., 18536., 19516., 20496., 17709., 18698., 19687., 20676., 17862., 18860., 19858., 20856., 18015., 19022., 20029., 21036., 18168., 19184., 20200., 21216., 18321., 19346., 20371., 21396., 18474., 19508., 20542., 21576., 18627., 19670., 20713., 21756., 18780., 19832., 20884., 21936., 18933., 19994., 21055., 22116., 19086., 20156., 21226., 22296., 19239., 20318., 21397., 22476., 19392., 20480., 21568., 22656.,  8554.,  9152.,  9750., 10348.,  8644.,  9248.,  9852., 10456.,  8734.,  9344.,  9954., 10564.,  8824.,  9440., 10056., 10672.,  8914.,  9536., 10158., 10780.,  9004.,  9632., 10260., 10888.,  9094.,  9728., 10362., 10996.,  9184.,  9824., 10464., 11104.,  8538.,  9144.,  9750., 10356.,  8652.,  9264.,  9876., 10488.,  8766.,  9384., 10002., 10620.,  8880.,  9504., 10128., 10752., 10617., 11490., 12363., 13236., 10770., 11652., 12534., 13416., 10923., 11814., 12705., 13596., 11076., 11976., 12876., 13776., 11229., 12138., 13047., 13956., 11382., 12300., 13218., 14136., 11535., 12462., 13389., 14316., 11688., 12624., 13560., 14496., 11841., 12786., 13731., 14676., 11994., 12948., 13902., 14856., 12147., 13110., 14073., 15036., 12300., 13272., 14244., 15216., 12453., 13434., 14415., 15396., 12606., 13596., 14586., 15576., 12759., 13758., 14757., 15756., 12912., 13920., 14928., 15936.,  6474.,  7104.,  7734.,  8364.,  6564.,  7200.,  7836.,  8472.,  6654.,  7296.,  7938.,  8580.,  6744.,  7392.,  8040.,  8688.,  6834.,  7488.,  8142.,  8796.,  6924.,  7584.,  8244.,  8904.,  7014.,  7680.,  8346.,  9012.,  7104.,  7776.,  8448.,  9120.,  8708.,  9432., 10156., 10880.,  8760.,  9488., 10216., 10944.,  8812.,  9544., 10276., 11008.,  8864.,  9600., 10336., 11072., 10786., 11848., 12910., 13972., 10852., 11920., 12988., 14056., 10918., 11992., 13066., 14140., 10984., 12064., 13144., 14224., 11050., 12136., 13222., 14308., 11116., 12208., 13300., 14392., 11182., 12280., 13378., 14476., 11248., 12352., 13456., 14560., 11314., 12424., 13534., 14644., 11380., 12496., 13612., 14728., 11446., 12568., 13690., 14812., 11512., 12640., 13768., 14896., 11578., 12712., 13846., 14980., 11644., 12784., 13924., 15064., 11710., 12856., 14002., 15148., 11776., 12928., 14080., 15232.,  5956.,  6696.,  7436.,  8176.,  5992.,  6736.,  7480.,  8224.,  6028.,  6776.,  7524.,  8272.,  6064.,  6816.,  7568.,  8320.,  6100.,  6856.,  7612.,  8368.,  6136.,  6896.,  7656.,  8416.,  6172.,  6936.,  7700.,  8464.,  6208.,  6976.,  7744.,  8512.,  8900.,  9560., 10220., 10880.,  8952.,  9616., 10280., 10944.,  9004.,  9672., 10340., 11008.,  9056.,  9728., 10400., 11072., 10370., 11208., 12046., 12884., 10436., 11280., 12124., 12968., 10502., 11352., 12202., 13052., 10568., 11424., 12280., 13136., 10634., 11496., 12358., 13220., 10700., 11568., 12436., 13304., 10766., 11640., 12514., 13388., 10832., 11712., 12592., 13472., 10898., 11784., 12670., 13556., 10964., 11856., 12748., 13640., 11030., 11928., 12826., 13724., 11096., 12000., 12904., 13808., 11162., 12072., 12982., 13892., 11228., 12144., 13060., 13976., 11294., 12216., 13138., 14060., 11360., 12288., 13216., 14144.,  6148.,  6568.,  6988.,  7408.,  6184.,  6608.,  7032.,  7456.,  6220.,  6648.,  7076.,  7504.,  6256.,  6688.,  7120.,  7552.,  6292.,  6728.,  7164.,  7600.,  6328.,  6768.,  7208.,  7648.,  6364.,  6808.,  7252.,  7696.,  6400.,  6848.,  7296.,  7744.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4540.,  4960.,  5380.,  5800.,  4568.,  4992.,  5416.,  5840.,  4596.,  5024.,  5452.,  5880.,  4624.,  5056.,  5488.,  5920.,  4652.,  5088.,  5524.,  5960.,  4680.,  5120.,  5560.,  6000.,  4708.,  5152.,  5596.,  6040.,  4736.,  5184.,  5632.,  6080.,  4764.,  5216.,  5668.,  6120.,  4792.,  5248.,  5704.,  6160.,  4820.,  5280.,  5740.,  6200.,  4848.,  5312.,  5776.,  6240.,  4876.,  5344.,  5812.,  6280.,  4904.,  5376.,  5848.,  6320.,  4932.,  5408.,  5884.,  6360.,  4960.,  5440.,  5920.,  6400.,  4988.,  5472.,  5956.,  6440.,  5016.,  5504.,  5992.,  6480.,  5044.,  5536.,  6028.,  6520.,  5072.,  5568.,  6064.,  6560.,  5100.,  5600.,  6100.,  6600.,  5128.,  5632.,  6136.,  6640.,  5156.,  5664.,  6172.,  6680.,  5184.,  5696.,  6208.,  6720.,  5212.,  5728.,  6244.,  6760.,  5240.,  5760.,  6280.,  6800.,  5268.,  5792.,  6316.,  6840.,  5296.,  5824.,  6352.,  6880.,  5884.,  6496.,  7108.,  7720.,  5912.,  6528.,  7144.,  7760.,  5940.,  6560.,  7180.,  7800.,  5968.,  6592.,  7216.,  7840.,  5996.,  6624.,  7252.,  7880.,  6024.,  6656.,  7288.,  7920.,  6052.,  6688.,  7324.,  7960.,  6080.,  6720.,  7360.,  8000.,  6108.,  6752.,  7396.,  8040.,  6136.,  6784.,  7432.,  8080.,  6164.,  6816.,  7468.,  8120.,  6192.,  6848.,  7504.,  8160.,  6220.,  6880.,  7540.,  8200.,  6248.,  6912.,  7576.,  8240.,  6276.,  6944.,  7612.,  8280.,  6304.,  6976.,  7648.,  8320.,  6332.,  7008.,  7684.,  8360.,  6360.,  7040.,  7720.,  8400.,  6388.,  7072.,  7756.,  8440.,  6416.,  7104.,  7792.,  8480.,  6444.,  7136.,  7828.,  8520.,  6472.,  7168.,  7864.,  8560.,  6500.,  7200.,  7900.,  8600.,  6528.,  7232.,  7936.,  8640.,  6556.,  7264.,  7972.,  8680.,  6584.,  7296.,  8008.,  8720.,  6612.,  7328.,  8044.,  8760.,  6640.,  7360.,  8080.,  8800.,  7228.,  8032.,  8836.,  9640.,  7256.,  8064.,  8872.,  9680.,  7284.,  8096.,  8908.,  9720.,  7312.,  8128.,  8944.,  9760.,  7340.,  8160.,  8980.,  9800.,  7368.,  8192.,  9016.,  9840.,  7396.,  8224.,  9052.,  9880.,  7424.,  8256.,  9088.,  9920.,  7452.,  8288.,  9124.,  9960.,  7480.,  8320.,  9160., 10000.,  7508.,  8352.,  9196., 10040.,  7536.,  8384.,  9232., 10080.,  7564.,  8416.,  9268., 10120.,  7592.,  8448.,  9304., 10160.,  7620.,  8480.,  9340., 10200.,  7648.,  8512.,  9376., 10240.,  7676.,  8544.,  9412., 10280.,  7704.,  8576.,  9448., 10320.,  7732.,  8608.,  9484., 10360.,  7760.,  8640.,  9520., 10400.,  7788.,  8672.,  9556., 10440.,  7816.,  8704.,  9592., 10480.,  7844.,  8736.,  9628., 10520.,  7872.,  8768.,  9664., 10560.,  7900.,  8800.,  9700., 10600.,  7928.,  8832.,  9736., 10640.,  7956.,  8864.,  9772., 10680.,  7984.,  8896.,  9808., 10720.,  8572.,  9568., 10564., 11560.,  8600.,  9600., 10600., 11600.,  8628.,  9632., 10636., 11640.,  8656.,  9664., 10672., 11680.,  8684.,  9696., 10708., 11720.,  8712.,  9728., 10744., 11760.,  8740.,  9760., 10780., 11800.,  8768.,  9792., 10816., 11840.,  8796.,  9824., 10852., 11880.,  8824.,  9856., 10888., 11920.,  8852.,  9888., 10924., 11960.,  8880.,  9920., 10960., 12000.,  8908.,  9952., 10996., 12040.,  8936.,  9984., 11032., 12080.,  8964., 10016., 11068., 12120.,  8992., 10048., 11104., 12160.,  9020., 10080., 11140., 12200.,  9048., 10112., 11176., 12240.,  9076., 10144., 11212., 12280.,  9104., 10176., 11248., 12320.,  9132., 10208., 11284., 12360.,  9160., 10240., 11320., 12400.,  9188., 10272., 11356., 12440.,  9216., 10304., 11392., 12480.,  9244., 10336., 11428., 12520.,  9272., 10368., 11464., 12560.,  9300., 10400., 11500., 12600.,  9328., 10432., 11536., 12640.,  9916., 11104., 12292., 13480.,  9944., 11136., 12328., 13520.,  9972., 11168., 12364., 13560., 10000., 11200., 12400., 13600., 10028., 11232., 12436., 13640., 10056., 11264., 12472., 13680., 10084., 11296., 12508., 13720., 10112., 11328., 12544., 13760., 10140., 11360., 12580., 13800., 10168., 11392., 12616., 13840., 10196., 11424., 12652., 13880., 10224., 11456., 12688., 13920., 10252., 11488., 12724., 13960., 10280., 11520., 12760., 14000., 10308., 11552., 12796., 14040., 10336., 11584., 12832., 14080., 10364., 11616., 12868., 14120., 10392., 11648., 12904., 14160., 10420., 11680., 12940., 14200., 10448., 11712., 12976., 14240., 10476., 11744., 13012., 14280., 10504., 11776., 13048., 14320., 10532., 11808., 13084., 14360., 10560., 11840., 13120., 14400., 10588., 11872., 13156., 14440., 10616., 11904., 13192., 14480., 10644., 11936., 13228., 14520., 10672., 11968., 13264., 14560., 11260., 12640., 14020., 15400., 11288., 12672., 14056., 15440., 11316., 12704., 14092., 15480., 11344., 12736., 14128., 15520., 11372., 12768., 14164., 15560., 11400., 12800., 14200., 15600., 11428., 12832., 14236., 15640., 11456., 12864., 14272., 15680., 11484., 12896., 14308., 15720., 11512., 12928., 14344., 15760., 11540., 12960., 14380., 15800., 11568., 12992., 14416., 15840., 11596., 13024., 14452., 15880., 11624., 13056., 14488., 15920., 11652., 13088., 14524., 15960., 11680., 13120., 14560., 16000., 11708., 13152., 14596., 16040., 11736., 13184., 14632., 16080., 11764., 13216., 14668., 16120., 11792., 13248., 14704., 16160., 11820., 13280., 14740., 16200., 11848., 13312., 14776., 16240., 11876., 13344., 14812., 16280., 11904., 13376., 14848., 16320., 11932., 13408., 14884., 16360., 11960., 13440., 14920., 16400., 11988., 13472., 14956., 16440., 12016., 13504., 14992., 16480., 12604., 14176., 15748., 17320., 12632., 14208., 15784., 17360., 12660., 14240., 15820., 17400., 12688., 14272., 15856., 17440., 12716., 14304., 15892., 17480., 12744., 14336., 15928., 17520., 12772., 14368., 15964., 17560., 12800., 14400., 16000., 17600., 12828., 14432., 16036., 17640., 12856., 14464., 16072., 17680., 12884., 14496., 16108., 17720., 12912., 14528., 16144., 17760., 12940., 14560., 16180., 17800., 12968., 14592., 16216., 17840., 12996., 14624., 16252., 17880., 13024., 14656., 16288., 17920., 13052., 14688., 16324., 17960., 13080., 14720., 16360., 18000., 13108., 14752., 16396., 18040., 13136., 14784., 16432., 18080., 13164., 14816., 16468., 18120., 13192., 14848., 16504., 18160., 13220., 14880., 16540., 18200., 13248., 14912., 16576., 18240., 13276., 14944., 16612., 18280., 13304., 14976., 16648., 18320., 13332., 15008., 16684., 18360., 13360., 15040., 16720., 18400.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4510.,  4564.,  5724.,  5792.,  4048.,  4096.,  4144.,  5337.,  5400.,  6766.,  6844.,  4770.,  4824.,  4878.,  6219.,  6282.,  7858.,  7936.,  5526.,  5580.,  5634.,  7101.,  7164.,  8950.,  9028.,  6282.,  6336.,  6390.,  7983.,  8046., 10042., 10120.,  7038.,  7092.,  7146.,  3082.,  3112.,  3764.,  3800.,  2536.,  2560.,  2584.,  3502.,  3532.,  4268.,  4304.,  2872.,  2896.,  2920.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,  766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996., 1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166., 1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8558.,  9020.,  8660.,  9128., 10832., 11448., 10960., 11584.,  7634.,  8096.,  7724.,  8192.,  7814.,  8288., 10107., 10674., 10224., 10800., 12776., 13532., 12920., 13688.,  8973.,  9540.,  9072.,  9648.,  9171.,  9756., 11745., 12438., 11862., 12564., 14792., 15716., 14936., 15872., 10359., 11052., 10458., 11160., 10557., 11268., 13383., 14202., 13500., 14328., 16808., 17900., 16952., 18056., 11745., 12564., 11844., 12672., 11943., 12780., 15021., 15966., 15138., 16092., 18824., 20084., 18968., 20240., 13131., 14076., 13230., 14184., 13329., 14292.,  5618.,  6164.,  5672.,  6224.,  6800.,  7528.,  6864.,  7600.,  4526.,  5072.,  4568.,  5120.,  4610.,  5168.,  6374.,  7004.,  6428.,  7064.,  7696.,  8536.,  7760.,  8608.,  5114.,  5744.,  5156.,  5792.,  5198.,  5840.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,  808.,  952.,  824.,  972.,  952., 1132.,  968., 1152.,  984., 1172., 1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412., 1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512., 1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752., 1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992., 1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092., 1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332., 1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572., 2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16654., 17116., 17578., 18040., 16852., 17320., 17788., 18256., 21048., 21664., 22280., 22896., 21296., 21920., 22544., 23168., 14806., 15268., 15730., 16192., 14980., 15448., 15916., 16384., 15154., 15628., 16102., 16576., 19647., 20214., 20781., 21348., 19872., 20448., 21024., 21600., 24796., 25552., 26308., 27064., 25072., 25840., 26608., 27376., 17379., 17946., 18513., 19080., 17568., 18144., 18720., 19296., 17757., 18342., 18927., 19512.,  7053.,  7362.,  7671.,  7980.,  7278.,  7596.,  7914.,  8232., 12916., 13456., 13996., 14536., 13192., 13744., 14296., 14848.,  5817.,  6126.,  6435.,  6744.,  6006.,  6324.,  6642.,  6960.,  6195.,  6522.,  6849.,  7176., 10203., 10638., 11073., 11508., 10428., 10872., 11316., 11760., 12556., 13136., 13716., 14296., 12832., 13424., 14016., 14608.,  8463.,  8898.,  9333.,  9768.,  8652.,  9096.,  9540.,  9984.,  8841.,  9294.,  9747., 10200., 13353., 13914., 14475., 15036., 13578., 14148., 14718., 15288., 16420., 17168., 17916., 18664., 16696., 17456., 18216., 18976., 11109., 11670., 12231., 12792., 11298., 11868., 12438., 13008., 11487., 12066., 12645., 13224., 10690., 11236., 11782., 12328., 10792., 11344., 11896., 12448., 12872., 13600., 14328., 15056., 12992., 13728., 14464., 15200.,  8506.,  9052.,  9598., 10144.,  8584.,  9136.,  9688., 10240.,  8662.,  9220.,  9778., 10336.,  2518.,  2764.,  3010.,  3256.,  2620.,  2872.,  3124.,  3376.,  4952.,  5408.,  5864.,  6320.,  5072.,  5536.,  6000.,  6464.,  1534.,  1780.,  2026.,  2272.,  1612.,  1864.,  2116.,  2368.,  1690.,  1948.,  2206.,  2464.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520., 1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864., 1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904., 2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344., 1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064., 2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824., 2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448., 2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024., 2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832., 3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504., 2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992., 3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984., 2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376., 3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184., 3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760., 4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664., 3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144., 4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144., 3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304., 4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8966.,  9020.,  9074.,  9128., 11380., 11448., 11516., 11584.,  8048.,  8096.,  8144.,  8192.,  8240.,  8288., 10611., 10674., 10737., 10800., 13454., 13532., 13610., 13688.,  9486.,  9540.,  9594.,  9648.,  9702.,  9756., 12375., 12438., 12501., 12564., 15638., 15716., 15794., 15872., 10998., 11052., 11106., 11160., 11214., 11268., 14139., 14202., 14265., 14328., 17822., 17900., 17978., 18056., 12510., 12564., 12618., 12672., 12726., 12780., 15903., 15966., 16029., 16092., 20006., 20084., 20162., 20240., 14022., 14076., 14130., 14184., 14238., 14292.,  6134.,  6164.,  6194.,  6224.,  7492.,  7528.,  7564.,  7600.,  5048.,  5072.,  5096.,  5120.,  5144.,  5168.,  6974.,  7004.,  7034.,  7064.,  8500.,  8536.,  8572.,  8608.,  5720.,  5744.,  5768.,  5792.,  5816.,  5840.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 842.,  852.,  862.,  872.,  882.,  892.,  902.,  912.,  922.,  932.,  942.,  952.,  962.,  972., 1122., 1132., 1142., 1152., 1162., 1172., 1182., 1192., 1202., 1212., 1222., 1232., 1242., 1252., 1402., 1412., 1422., 1432., 1442., 1452., 1462., 1472., 1482., 1492., 1502., 1512., 1522., 1532., 1682., 1692., 1702., 1712., 1722., 1732., 1742., 1752., 1762., 1772., 1782., 1792., 1802., 1812., 1962., 1972., 1982., 1992., 2002., 2012., 2022., 2032., 2042., 2052., 2062., 2072., 2082., 2092., 2242., 2252., 2262., 2272., 2282., 2292., 2302., 2312., 2322., 2332., 2342., 2352., 2362., 2372., 2522., 2532., 2542., 2552., 2562., 2572., 2582., 2592., 2602., 2612., 2622., 2632., 2642., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17014., 17932., 17116., 18040., 17218., 18148., 17320., 18256., 21536., 22760., 21664., 22896., 21792., 23032., 21920., 23168., 15178., 16096., 15268., 16192., 15358., 16288., 15448., 16384., 15538., 16480., 15628., 16576., 20097., 21222., 20214., 21348., 20331., 21474., 20448., 21600., 25408., 26908., 25552., 27064., 25696., 27220., 25840., 27376., 17847., 18972., 17946., 19080., 18045., 19188., 18144., 19296., 18243., 19404., 18342., 19512.,  7245.,  7854.,  7362.,  7980.,  7479.,  8106.,  7596.,  8232., 13312., 14380., 13456., 14536., 13600., 14692., 13744., 14848.,  6027.,  6636.,  6126.,  6744.,  6225.,  6852.,  6324.,  6960.,  6423.,  7068.,  6522.,  7176., 10521., 11382., 10638., 11508., 10755., 11634., 10872., 11760., 12992., 14140., 13136., 14296., 13280., 14452., 13424., 14608.,  8799.,  9660.,  8898.,  9768.,  8997.,  9876.,  9096.,  9984.,  9195., 10092.,  9294., 10200., 13797., 14910., 13914., 15036., 14031., 15162., 14148., 15288., 17024., 18508., 17168., 18664., 17312., 18820., 17456., 18976., 11571., 12684., 11670., 12792., 11769., 12900., 11868., 13008., 11967., 13116., 12066., 13224., 11182., 12268., 11236., 12328., 11290., 12388., 11344., 12448., 13536., 14984., 13600., 15056., 13664., 15128., 13728., 15200.,  9010., 10096.,  9052., 10144.,  9094., 10192.,  9136., 10240.,  9178., 10288.,  9220., 10336.,  2710.,  3196.,  2764.,  3256.,  2818.,  3316.,  2872.,  3376.,  5344.,  6248.,  5408.,  6320.,  5472.,  6392.,  5536.,  6464.,  1738.,  2224.,  1780.,  2272.,  1822.,  2320.,  1864.,  2368.,  1906.,  2416.,  1948.,  2464.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1440., 1684., 1456., 1704., 1472., 1724., 1488., 1744., 1504., 1764., 1520., 1784., 1536., 1804., 1552., 1824., 1568., 1844., 1584., 1864., 1600., 1884., 1616., 1904., 1632., 1924., 1648., 1944., 1888., 2244., 1904., 2264., 1920., 2284., 1936., 2304., 1952., 2324., 1968., 2344., 1984., 2364., 2000., 2384., 2016., 2404., 2032., 2424., 2048., 2444., 2064., 2464., 2080., 2484., 2096., 2504., 2336., 2804., 2352., 2824., 2368., 2844., 2384., 2864., 2400., 2884., 2416., 2904., 2432., 2924., 2448., 2944., 2464., 2964., 2480., 2984., 2496., 3004., 2512., 3024., 2528., 3044., 2544., 3064., 2784., 3364., 2800., 3384., 2816., 3404., 2832., 3424., 2848., 3444., 2864., 3464., 2880., 3484., 2896., 3504., 2912., 3524., 2928., 3544., 2944., 3564., 2960., 3584., 2976., 3604., 2992., 3624., 3232., 3924., 3248., 3944., 3264., 3964., 3280., 3984., 3296., 4004., 3312., 4024., 3328., 4044., 3344., 4064., 3360., 4084., 3376., 4104., 3392., 4124., 3408., 4144., 3424., 4164., 3440., 4184., 3680., 4484., 3696., 4504., 3712., 4524., 3728., 4544., 3744., 4564., 3760., 4584., 3776., 4604., 3792., 4624., 3808., 4644., 3824., 4664., 3840., 4684., 3856., 4704., 3872., 4724., 3888., 4744., 4128., 5044., 4144., 5064., 4160., 5084., 4176., 5104., 4192., 5124., 4208., 5144., 4224., 5164., 4240., 5184., 4256., 5204., 4272., 5224., 4288., 5244., 4304., 5264., 4320., 5284., 4336., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17366., 17900., 18434., 18968., 17564., 18104., 18644., 19184., 17762., 18308., 18854., 19400., 17960., 18512., 19064., 19616., 21880., 22592., 23304., 24016., 22128., 22848., 23568., 24288., 22376., 23104., 23832., 24560., 22624., 23360., 24096., 24832., 15230., 15764., 16298., 16832., 15404., 15944., 16484., 17024., 15578., 16124., 16670., 17216., 15752., 16304., 16856., 17408., 15926., 16484., 17042., 17600., 16100., 16664., 17228., 17792., 19613., 20226., 20839., 21452., 19838., 20460., 21082., 21704., 20063., 20694., 21325., 21956., 20288., 20928., 21568., 22208., 22436., 23168., 23900., 24632., 22712., 23456., 24200., 24944., 22988., 23744., 24500., 25256., 23264., 24032., 24800., 25568., 17161., 17774., 18387., 19000., 17350., 17972., 18594., 19216., 17539., 18170., 18801., 19432., 17728., 18368., 19008., 19648., 15229., 15750., 16271., 16792., 15418., 15948., 16478., 17008.,  4281.,  4506.,  4731.,  4956.,  4506.,  4740.,  4974.,  5208.,  4731.,  4974.,  5217.,  5460.,  4956.,  5208.,  5460.,  5712.,  9556.,  9984., 10412., 10840.,  9832., 10272., 10712., 11152., 10108., 10560., 11012., 11464., 10384., 10848., 11312., 11776.,  3381.,  3606.,  3831.,  4056.,  3570.,  3804.,  4038.,  4272.,  3759.,  4002.,  4245.,  4488.,  3948.,  4200.,  4452.,  4704.,  4137.,  4398.,  4659.,  4920.,  4326.,  4596.,  4866.,  5136., 10581., 11058., 11535., 12012., 10806., 11292., 11778., 12264., 11031., 11526., 12021., 12516., 11256., 11760., 12264., 12768., 13060., 13696., 14332., 14968., 13336., 13984., 14632., 15280., 13612., 14272., 14932., 15592., 13888., 14560., 15232., 15904.,  8673.,  9150.,  9627., 10104.,  8862.,  9348.,  9834., 10320.,  9051.,  9546., 10041., 10536.,  9240.,  9744., 10248., 10752.,  9429.,  9942., 10455., 10968.,  9618., 10140., 10662., 11184., 16881., 17610., 18339., 19068., 17106., 17844., 18582., 19320., 17331., 18078., 18825., 19572., 17556., 18312., 19068., 19824., 20788., 21760., 22732., 23704., 21064., 22048., 23032., 24016., 21340., 22336., 23332., 24328., 21616., 22624., 23632., 24640., 13965., 14694., 15423., 16152., 14154., 14892., 15630., 16368., 14343., 15090., 15837., 16584., 14532., 15288., 16044., 16800., 14721., 15486., 16251., 17016., 14910., 15684., 16458., 17232., 10014., 10588., 11162., 11736., 10116., 10696., 11276., 11856., 10218., 10804., 11390., 11976., 10320., 10912., 11504., 12096., 11032., 11712., 12392., 13072., 11152., 11840., 12528., 13216., 11272., 11968., 12664., 13360., 11392., 12096., 12800., 13504.,  7718.,  8292.,  8866.,  9440.,  7796.,  8376.,  8956.,  9536.,  7874.,  8460.,  9046.,  9632.,  7952.,  8544.,  9136.,  9728.,  7390.,  7860.,  8330.,  8800.,  7468.,  7944.,  8420.,  8896.,  1478.,  1580.,  1682.,  1784.,  1580.,  1688.,  1796.,  1904.,  1682.,  1796.,  1910.,  2024.,  1784.,  1904.,  2024.,  2144.,  4024.,  4288.,  4552.,  4816.,  4144.,  4416.,  4688.,  4960.,  4264.,  4544.,  4824.,  5104.,  4384.,  4672.,  4960.,  5248.,  1070.,  1172.,  1274.,  1376.,  1148.,  1256.,  1364.,  1472.,  1226.,  1340.,  1454.,  1568.,  1304.,  1424.,  1544.,  1664.,  1382.,  1508.,  1634.,  1760.,  1460.,  1592.,  1724.,  1856.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2636.,  2880.,  3124.,  3368.,  2664.,  2912.,  3160.,  3408.,  2692.,  2944.,  3196.,  3448.,  2720.,  2976.,  3232.,  3488.,  2748.,  3008.,  3268.,  3528.,  2776.,  3040.,  3304.,  3568.,  2804.,  3072.,  3340.,  3608.,  2832.,  3104.,  3376.,  3648.,  2860.,  3136.,  3412.,  3688.,  2888.,  3168.,  3448.,  3728.,  2916.,  3200.,  3484.,  3768.,  2944.,  3232.,  3520.,  3808.,  2972.,  3264.,  3556.,  3848.,  3000.,  3296.,  3592.,  3888.,  3420.,  3776.,  4132.,  4488.,  3448.,  3808.,  4168.,  4528.,  3476.,  3840.,  4204.,  4568.,  3504.,  3872.,  4240.,  4608.,  3532.,  3904.,  4276.,  4648.,  3560.,  3936.,  4312.,  4688.,  3588.,  3968.,  4348.,  4728.,  3616.,  4000.,  4384.,  4768.,  3644.,  4032.,  4420.,  4808.,  3672.,  4064.,  4456.,  4848.,  3700.,  4096.,  4492.,  4888.,  3728.,  4128.,  4528.,  4928.,  3756.,  4160.,  4564.,  4968.,  3784.,  4192.,  4600.,  5008.,  4204.,  4672.,  5140.,  5608.,  4232.,  4704.,  5176.,  5648.,  4260.,  4736.,  5212.,  5688.,  4288.,  4768.,  5248.,  5728.,  4316.,  4800.,  5284.,  5768.,  4344.,  4832.,  5320.,  5808.,  4372.,  4864.,  5356.,  5848.,  4400.,  4896.,  5392.,  5888.,  4428.,  4928.,  5428.,  5928.,  4456.,  4960.,  5464.,  5968.,  4484.,  4992.,  5500.,  6008.,  4512.,  5024.,  5536.,  6048.,  4540.,  5056.,  5572.,  6088.,  4568.,  5088.,  5608.,  6128.,  4988.,  5568.,  6148.,  6728.,  5016.,  5600.,  6184.,  6768.,  5044.,  5632.,  6220.,  6808.,  5072.,  5664.,  6256.,  6848.,  5100.,  5696.,  6292.,  6888.,  5128.,  5728.,  6328.,  6928.,  5156.,  5760.,  6364.,  6968.,  5184.,  5792.,  6400.,  7008.,  5212.,  5824.,  6436.,  7048.,  5240.,  5856.,  6472.,  7088.,  5268.,  5888.,  6508.,  7128.,  5296.,  5920.,  6544.,  7168.,  5324.,  5952.,  6580.,  7208.,  5352.,  5984.,  6616.,  7248.,  5772.,  6464.,  7156.,  7848.,  5800.,  6496.,  7192.,  7888.,  5828.,  6528.,  7228.,  7928.,  5856.,  6560.,  7264.,  7968.,  5884.,  6592.,  7300.,  8008.,  5912.,  6624.,  7336.,  8048.,  5940.,  6656.,  7372.,  8088.,  5968.,  6688.,  7408.,  8128.,  5996.,  6720.,  7444.,  8168.,  6024.,  6752.,  7480.,  8208.,  6052.,  6784.,  7516.,  8248.,  6080.,  6816.,  7552.,  8288.,  6108.,  6848.,  7588.,  8328.,  6136.,  6880.,  7624.,  8368.,  6556.,  7360.,  8164.,  8968.,  6584.,  7392.,  8200.,  9008.,  6612.,  7424.,  8236.,  9048.,  6640.,  7456.,  8272.,  9088.,  6668.,  7488.,  8308.,  9128.,  6696.,  7520.,  8344.,  9168.,  6724.,  7552.,  8380.,  9208.,  6752.,  7584.,  8416.,  9248.,  6780.,  7616.,  8452.,  9288.,  6808.,  7648.,  8488.,  9328.,  6836.,  7680.,  8524.,  9368.,  6864.,  7712.,  8560.,  9408.,  6892.,  7744.,  8596.,  9448.,  6920.,  7776.,  8632.,  9488.,  7340.,  8256.,  9172., 10088.,  7368.,  8288.,  9208., 10128.,  7396.,  8320.,  9244., 10168.,  7424.,  8352.,  9280., 10208.,  7452.,  8384.,  9316., 10248.,  7480.,  8416.,  9352., 10288.,  7508.,  8448.,  9388., 10328.,  7536.,  8480.,  9424., 10368.,  7564.,  8512.,  9460., 10408.,  7592.,  8544.,  9496., 10448.,  7620.,  8576.,  9532., 10488.,  7648.,  8608.,  9568., 10528.,  7676.,  8640.,  9604., 10568.,  7704.,  8672.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17878., 17932., 17986., 18040., 18094., 18148., 18202., 18256., 22692., 22760., 22828., 22896., 22964., 23032., 23100., 23168., 16048., 16096., 16144., 16192., 16240., 16288., 16336., 16384., 16432., 16480., 16528., 16576., 21159., 21222., 21285., 21348., 21411., 21474., 21537., 21600., 26830., 26908., 26986., 27064., 27142., 27220., 27298., 27376., 18918., 18972., 19026., 19080., 19134., 19188., 19242., 19296., 19350., 19404., 19458., 19512.,  7791.,  7854.,  7917.,  7980.,  8043.,  8106.,  8169.,  8232., 14302., 14380., 14458., 14536., 14614., 14692., 14770., 14848.,  6582.,  6636.,  6690.,  6744.,  6798.,  6852.,  6906.,  6960.,  7014.,  7068.,  7122.,  7176., 11319., 11382., 11445., 11508., 11571., 11634., 11697., 11760., 14062., 14140., 14218., 14296., 14374., 14452., 14530., 14608.,  9606.,  9660.,  9714.,  9768.,  9822.,  9876.,  9930.,  9984., 10038., 10092., 10146., 10200., 14847., 14910., 14973., 15036., 15099., 15162., 15225., 15288., 18430., 18508., 18586., 18664., 18742., 18820., 18898., 18976., 12630., 12684., 12738., 12792., 12846., 12900., 12954., 13008., 13062., 13116., 13170., 13224., 12238., 12268., 12298., 12328., 12358., 12388., 12418., 12448., 14948., 14984., 15020., 15056., 15092., 15128., 15164., 15200., 10072., 10096., 10120., 10144., 10168., 10192., 10216., 10240., 10264., 10288., 10312., 10336.,  3166.,  3196.,  3226.,  3256.,  3286.,  3316.,  3346.,  3376.,  6212.,  6248.,  6284.,  6320.,  6356.,  6392.,  6428.,  6464.,  2200.,  2224.,  2248.,  2272.,  2296.,  2320.,  2344.,  2368.,  2392.,  2416.,  2440.,  2464.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1674., 1684., 1694., 1704., 1714., 1724., 1734., 1744., 1754., 1764., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1914., 1924., 1934., 1944., 2234., 2244., 2254., 2264., 2274., 2284., 2294., 2304., 2314., 2324., 2334., 2344., 2354., 2364., 2374., 2384., 2394., 2404., 2414., 2424., 2434., 2444., 2454., 2464., 2474., 2484., 2494., 2504., 2794., 2804., 2814., 2824., 2834., 2844., 2854., 2864., 2874., 2884., 2894., 2904., 2914., 2924., 2934., 2944., 2954., 2964., 2974., 2984., 2994., 3004., 3014., 3024., 3034., 3044., 3054., 3064., 3354., 3364., 3374., 3384., 3394., 3404., 3414., 3424., 3434., 3444., 3454., 3464., 3474., 3484., 3494., 3504., 3514., 3524., 3534., 3544., 3554., 3564., 3574., 3584., 3594., 3604., 3614., 3624., 3914., 3924., 3934., 3944., 3954., 3964., 3974., 3984., 3994., 4004., 4014., 4024., 4034., 4044., 4054., 4064., 4074., 4084., 4094., 4104., 4114., 4124., 4134., 4144., 4154., 4164., 4174., 4184., 4474., 4484., 4494., 4504., 4514., 4524., 4534., 4544., 4554., 4564., 4574., 4584., 4594., 4604., 4614., 4624., 4634., 4644., 4654., 4664., 4674., 4684., 4694., 4704., 4714., 4724., 4734., 4744., 5034., 5044., 5054., 5064., 5074., 5084., 5094., 5104., 5114., 5124., 5134., 5144., 5154., 5164., 5174., 5184., 5194., 5204., 5214., 5224., 5234., 5244., 5254., 5264., 5274., 5284., 5294., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17798., 18860., 17900., 18968., 18002., 19076., 18104., 19184., 18206., 19292., 18308., 19400., 18410., 19508., 18512., 19616., 22464., 23880., 22592., 24016., 22720., 24152., 22848., 24288., 22976., 24424., 23104., 24560., 23232., 24696., 23360., 24832., 15674., 16736., 15764., 16832., 15854., 16928., 15944., 17024., 16034., 17120., 16124., 17216., 16214., 17312., 16304., 17408., 16394., 17504., 16484., 17600., 16574., 17696., 16664., 17792., 20109., 21326., 20226., 21452., 20343., 21578., 20460., 21704., 20577., 21830., 20694., 21956., 20811., 22082., 20928., 22208., 23024., 24476., 23168., 24632., 23312., 24788., 23456., 24944., 23600., 25100., 23744., 25256., 23888., 25412., 24032., 25568., 17675., 18892., 17774., 19000., 17873., 19108., 17972., 19216., 18071., 19324., 18170., 19432., 18269., 19540., 18368., 19648., 15651., 16684., 15750., 16792., 15849., 16900., 15948., 17008.,  4389.,  4830.,  4506.,  4956.,  4623.,  5082.,  4740.,  5208.,  4857.,  5334.,  4974.,  5460.,  5091.,  5586.,  5208.,  5712.,  9840., 10684.,  9984., 10840., 10128., 10996., 10272., 11152., 10416., 11308., 10560., 11464., 10704., 11620., 10848., 11776.,  3507.,  3948.,  3606.,  4056.,  3705.,  4164.,  3804.,  4272.,  3903.,  4380.,  4002.,  4488.,  4101.,  4596.,  4200.,  4704.,  4299.,  4812.,  4398.,  4920.,  4497.,  5028.,  4596.,  5136., 10941., 11886., 11058., 12012., 11175., 12138., 11292., 12264., 11409., 12390., 11526., 12516., 11643., 12642., 11760., 12768., 13552., 14812., 13696., 14968., 13840., 15124., 13984., 15280., 14128., 15436., 14272., 15592., 14416., 15748., 14560., 15904.,  9051.,  9996.,  9150., 10104.,  9249., 10212.,  9348., 10320.,  9447., 10428.,  9546., 10536.,  9645., 10644.,  9744., 10752.,  9843., 10860.,  9942., 10968., 10041., 11076., 10140., 11184., 17493., 18942., 17610., 19068., 17727., 19194., 17844., 19320., 17961., 19446., 18078., 19572., 18195., 19698., 18312., 19824., 21616., 23548., 21760., 23704., 21904., 23860., 22048., 24016., 22192., 24172., 22336., 24328., 22480., 24484., 22624., 24640., 14595., 16044., 14694., 16152., 14793., 16260., 14892., 16368., 14991., 16476., 15090., 16584., 15189., 16692., 15288., 16800., 15387., 16908., 15486., 17016., 15585., 17124., 15684., 17232., 10534., 11676., 10588., 11736., 10642., 11796., 10696., 11856., 10750., 11916., 10804., 11976., 10858., 12036., 10912., 12096., 11648., 13000., 11712., 13072., 11776., 13144., 11840., 13216., 11904., 13288., 11968., 13360., 12032., 13432., 12096., 13504.,  8250.,  9392.,  8292.,  9440.,  8334.,  9488.,  8376.,  9536.,  8418.,  9584.,  8460.,  9632.,  8502.,  9680.,  8544.,  9728.,  7818.,  8752.,  7860.,  8800.,  7902.,  8848.,  7944.,  8896.,  1526.,  1724.,  1580.,  1784.,  1634.,  1844.,  1688.,  1904.,  1742.,  1964.,  1796.,  2024.,  1850.,  2084.,  1904.,  2144.,  4224.,  4744.,  4288.,  4816.,  4352.,  4888.,  4416.,  4960.,  4480.,  5032.,  4544.,  5104.,  4608.,  5176.,  4672.,  5248.,  1130.,  1328.,  1172.,  1376.,  1214.,  1424.,  1256.,  1472.,  1298.,  1520.,  1340.,  1568.,  1382.,  1616.,  1424.,  1664.,  1466.,  1712.,  1508.,  1760.,  1550.,  1808.,  1592.,  1856.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2864.,  3348.,  2880.,  3368.,  2896.,  3388.,  2912.,  3408.,  2928.,  3428.,  2944.,  3448.,  2960.,  3468.,  2976.,  3488.,  2992.,  3508.,  3008.,  3528.,  3024.,  3548.,  3040.,  3568.,  3056.,  3588.,  3072.,  3608.,  3088.,  3628.,  3104.,  3648.,  3120.,  3668.,  3136.,  3688.,  3152.,  3708.,  3168.,  3728.,  3184.,  3748.,  3200.,  3768.,  3216.,  3788.,  3232.,  3808.,  3248.,  3828.,  3264.,  3848.,  3280.,  3868.,  3296.,  3888.,  3760.,  4468.,  3776.,  4488.,  3792.,  4508.,  3808.,  4528.,  3824.,  4548.,  3840.,  4568.,  3856.,  4588.,  3872.,  4608.,  3888.,  4628.,  3904.,  4648.,  3920.,  4668.,  3936.,  4688.,  3952.,  4708.,  3968.,  4728.,  3984.,  4748.,  4000.,  4768.,  4016.,  4788.,  4032.,  4808.,  4048.,  4828.,  4064.,  4848.,  4080.,  4868.,  4096.,  4888.,  4112.,  4908.,  4128.,  4928.,  4144.,  4948.,  4160.,  4968.,  4176.,  4988.,  4192.,  5008.,  4656.,  5588.,  4672.,  5608.,  4688.,  5628.,  4704.,  5648.,  4720.,  5668.,  4736.,  5688.,  4752.,  5708.,  4768.,  5728.,  4784.,  5748.,  4800.,  5768.,  4816.,  5788.,  4832.,  5808.,  4848.,  5828.,  4864.,  5848.,  4880.,  5868.,  4896.,  5888.,  4912.,  5908.,  4928.,  5928.,  4944.,  5948.,  4960.,  5968.,  4976.,  5988.,  4992.,  6008.,  5008.,  6028.,  5024.,  6048.,  5040.,  6068.,  5056.,  6088.,  5072.,  6108.,  5088.,  6128.,  5552.,  6708.,  5568.,  6728.,  5584.,  6748.,  5600.,  6768.,  5616.,  6788.,  5632.,  6808.,  5648.,  6828.,  5664.,  6848.,  5680.,  6868.,  5696.,  6888.,  5712.,  6908.,  5728.,  6928.,  5744.,  6948.,  5760.,  6968.,  5776.,  6988.,  5792.,  7008.,  5808.,  7028.,  5824.,  7048.,  5840.,  7068.,  5856.,  7088.,  5872.,  7108.,  5888.,  7128.,  5904.,  7148.,  5920.,  7168.,  5936.,  7188.,  5952.,  7208.,  5968.,  7228.,  5984.,  7248.,  6448.,  7828.,  6464.,  7848.,  6480.,  7868.,  6496.,  7888.,  6512.,  7908.,  6528.,  7928.,  6544.,  7948.,  6560.,  7968.,  6576.,  7988.,  6592.,  8008.,  6608.,  8028.,  6624.,  8048.,  6640.,  8068.,  6656.,  8088.,  6672.,  8108.,  6688.,  8128.,  6704.,  8148.,  6720.,  8168.,  6736.,  8188.,  6752.,  8208.,  6768.,  8228.,  6784.,  8248.,  6800.,  8268.,  6816.,  8288.,  6832.,  8308.,  6848.,  8328.,  6864.,  8348.,  6880.,  8368.,  7344.,  8948.,  7360.,  8968.,  7376.,  8988.,  7392.,  9008.,  7408.,  9028.,  7424.,  9048.,  7440.,  9068.,  7456.,  9088.,  7472.,  9108.,  7488.,  9128.,  7504.,  9148.,  7520.,  9168.,  7536.,  9188.,  7552.,  9208.,  7568.,  9228.,  7584.,  9248.,  7600.,  9268.,  7616.,  9288.,  7632.,  9308.,  7648.,  9328.,  7664.,  9348.,  7680.,  9368.,  7696.,  9388.,  7712.,  9408.,  7728.,  9428.,  7744.,  9448.,  7760.,  9468.,  7776.,  9488.,  8240., 10068.,  8256., 10088.,  8272., 10108.,  8288., 10128.,  8304., 10148.,  8320., 10168.,  8336., 10188.,  8352., 10208.,  8368., 10228.,  8384., 10248.,  8400., 10268.,  8416., 10288.,  8432., 10308.,  8448., 10328.,  8464., 10348.,  8480., 10368.,  8496., 10388.,  8512., 10408.,  8528., 10428.,  8544., 10448.,  8560., 10468.,  8576., 10488.,  8592., 10508.,  8608., 10528.,  8624., 10548.,  8640., 10568.,  8656., 10588.,  8672., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9190.,  9484.,  9778., 10072.,  9388.,  9688.,  9988., 10288.,  9586.,  9892., 10198., 10504.,  9784., 10096., 10408., 10720.,  9982., 10300., 10618., 10936., 10180., 10504., 10828., 11152., 10378., 10708., 11038., 11368., 10576., 10912., 11248., 11584., 11768., 12160., 12552., 12944., 12016., 12416., 12816., 13216., 12264., 12672., 13080., 13488., 12512., 12928., 13344., 13760., 12760., 13184., 13608., 14032., 13008., 13440., 13872., 14304., 13256., 13696., 14136., 14576., 13504., 13952., 14400., 14848.,  8014.,  8308.,  8602.,  8896.,  8188.,  8488.,  8788.,  9088.,  8362.,  8668.,  8974.,  9280.,  8536.,  8848.,  9160.,  9472.,  8710.,  9028.,  9346.,  9664.,  8884.,  9208.,  9532.,  9856.,  9058.,  9388.,  9718., 10048.,  9232.,  9568.,  9904., 10240.,  9406.,  9748., 10090., 10432.,  9580.,  9928., 10276., 10624.,  9754., 10108., 10462., 10816.,  9928., 10288., 10648., 11008., 17369., 17946., 18523., 19100., 17594., 18180., 18766., 19352., 17819., 18414., 19009., 19604., 18044., 18648., 19252., 19856., 18269., 18882., 19495., 20108., 18494., 19116., 19738., 20360., 18719., 19350., 19981., 20612., 18944., 19584., 20224., 20864., 19764., 20448., 21132., 21816., 20040., 20736., 21432., 22128., 20316., 21024., 21732., 22440., 20592., 21312., 22032., 22752., 20868., 21600., 22332., 23064., 21144., 21888., 22632., 23376., 21420., 22176., 22932., 23688., 21696., 22464., 23232., 24000., 15061., 15638., 16215., 16792., 15250., 15836., 16422., 17008., 15439., 16034., 16629., 17224., 15628., 16232., 16836., 17440., 15817., 16430., 17043., 17656., 16006., 16628., 17250., 17872., 16195., 16826., 17457., 18088., 16384., 17024., 17664., 18304., 13885., 14406., 14927., 15448., 14074., 14604., 15134., 15664., 14263., 14802., 15341., 15880., 14452., 15000., 15548., 16096.,  8337.,  8778.,  9219.,  9660.,  8562.,  9012.,  9462.,  9912.,  8787.,  9246.,  9705., 10164.,  9012.,  9480.,  9948., 10416.,  9237.,  9714., 10191., 10668.,  9462.,  9948., 10434., 10920.,  9687., 10182., 10677., 11172.,  9912., 10416., 10920., 11424., 14612., 15328., 16044., 16760., 14888., 15616., 16344., 17072., 15164., 15904., 16644., 17384., 15440., 16192., 16944., 17696., 15716., 16480., 17244., 18008., 15992., 16768., 17544., 18320., 16268., 17056., 17844., 18632., 16544., 17344., 18144., 18944.,  6573.,  7014.,  7455.,  7896.,  6762.,  7212.,  7662.,  8112.,  6951.,  7410.,  7869.,  8328.,  7140.,  7608.,  8076.,  8544.,  7329.,  7806.,  8283.,  8760.,  7518.,  8004.,  8490.,  8976.,  7707.,  8202.,  8697.,  9192.,  7896.,  8400.,  8904.,  9408.,  8085.,  8598.,  9111.,  9624.,  8274.,  8796.,  9318.,  9840.,  8463.,  8994.,  9525., 10056.,  8652.,  9192.,  9732., 10272., 18121., 18810., 19499., 20188., 18346., 19044., 19742., 20440., 18571., 19278., 19985., 20692., 18796., 19512., 20228., 20944., 19021., 19746., 20471., 21196., 19246., 19980., 20714., 21448., 19471., 20214., 20957., 21700., 19696., 20448., 21200., 21952., 18676., 19424., 20172., 20920., 18952., 19712., 20472., 21232., 19228., 20000., 20772., 21544., 19504., 20288., 21072., 21856., 19780., 20576., 21372., 22168., 20056., 20864., 21672., 22480., 20332., 21152., 21972., 22792., 20608., 21440., 22272., 23104., 15365., 16054., 16743., 17432., 15554., 16252., 16950., 17648., 15743., 16450., 17157., 17864., 15932., 16648., 17364., 18080., 16121., 16846., 17571., 18296., 16310., 17044., 17778., 18512., 16499., 17242., 17985., 18728., 16688., 17440., 18192., 18944., 13549., 14054., 14559., 15064., 13738., 14252., 14766., 15280., 13927., 14450., 14973., 15496., 14116., 14648., 15180., 15712.,  9473.,  9898., 10323., 10748.,  9698., 10132., 10566., 11000.,  9923., 10366., 10809., 11252., 10148., 10600., 11052., 11504., 10373., 10834., 11295., 11756., 10598., 11068., 11538., 12008., 10823., 11302., 11781., 12260., 11048., 11536., 12024., 12512., 14932., 15584., 16236., 16888., 15208., 15872., 16536., 17200., 15484., 16160., 16836., 17512., 15760., 16448., 17136., 17824., 16036., 16736., 17436., 18136., 16312., 17024., 17736., 18448., 16588., 17312., 18036., 18760., 16864., 17600., 18336., 19072.,  7773.,  8198.,  8623.,  9048.,  7962.,  8396.,  8830.,  9264.,  8151.,  8594.,  9037.,  9480.,  8340.,  8792.,  9244.,  9696.,  8529.,  8990.,  9451.,  9912.,  8718.,  9188.,  9658., 10128.,  8907.,  9386.,  9865., 10344.,  9096.,  9584., 10072., 10560.,  9285.,  9782., 10279., 10776.,  9474.,  9980., 10486., 10992.,  9663., 10178., 10693., 11208.,  9852., 10376., 10900., 11424.,  8534.,  9036.,  9538., 10040.,  8636.,  9144.,  9652., 10160.,  8738.,  9252.,  9766., 10280.,  8840.,  9360.,  9880., 10400.,  8942.,  9468.,  9994., 10520.,  9044.,  9576., 10108., 10640.,  9146.,  9684., 10222., 10760.,  9248.,  9792., 10336., 10880.,  9400.,  9984., 10568., 11152.,  9520., 10112., 10704., 11296.,  9640., 10240., 10840., 11440.,  9760., 10368., 10976., 11584.,  9880., 10496., 11112., 11728., 10000., 10624., 11248., 11872., 10120., 10752., 11384., 12016., 10240., 10880., 11520., 12160.,  6526.,  7028.,  7530.,  8032.,  6604.,  7112.,  7620.,  8128.,  6682.,  7196.,  7710.,  8224.,  6760.,  7280.,  7800.,  8320.,  6838.,  7364.,  7890.,  8416.,  6916.,  7448.,  7980.,  8512.,  6994.,  7532.,  8070.,  8608.,  7072.,  7616.,  8160.,  8704.,  6510.,  6932.,  7354.,  7776.,  6588.,  7016.,  7444.,  7872.,  6666.,  7100.,  7534.,  7968.,  6744.,  7184.,  7624.,  8064.,  2854.,  3052.,  3250.,  3448.,  2956.,  3160.,  3364.,  3568.,  3058.,  3268.,  3478.,  3688.,  3160.,  3376.,  3592.,  3808.,  3262.,  3484.,  3706.,  3928.,  3364.,  3592.,  3820.,  4048.,  3466.,  3700.,  3934.,  4168.,  3568.,  3808.,  4048.,  4288.,  5752.,  6144.,  6536.,  6928.,  5872.,  6272.,  6672.,  7072.,  5992.,  6400.,  6808.,  7216.,  6112.,  6528.,  6944.,  7360.,  6232.,  6656.,  7080.,  7504.,  6352.,  6784.,  7216.,  7648.,  6472.,  6912.,  7352.,  7792.,  6592.,  7040.,  7488.,  7936.,  2062.,  2260.,  2458.,  2656.,  2140.,  2344.,  2548.,  2752.,  2218.,  2428.,  2638.,  2848.,  2296.,  2512.,  2728.,  2944.,  2374.,  2596.,  2818.,  3040.,  2452.,  2680.,  2908.,  3136.,  2530.,  2764.,  2998.,  3232.,  2608.,  2848.,  3088.,  3328.,  2686.,  2932.,  3178.,  3424.,  2764.,  3016.,  3268.,  3520.,  2842.,  3100.,  3358.,  3616.,  2920.,  3184.,  3448.,  3712.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5244.,  5728.,  6212.,  6696.,  5272.,  5760.,  6248.,  6736.,  5300.,  5792.,  6284.,  6776.,  5328.,  5824.,  6320.,  6816.,  5356.,  5856.,  6356.,  6856.,  5384.,  5888.,  6392.,  6896.,  5412.,  5920.,  6428.,  6936.,  5440.,  5952.,  6464.,  6976.,  5468.,  5984.,  6500.,  7016.,  5496.,  6016.,  6536.,  7056.,  5524.,  6048.,  6572.,  7096.,  5552.,  6080.,  6608.,  7136.,  5580.,  6112.,  6644.,  7176.,  5608.,  6144.,  6680.,  7216.,  5636.,  6176.,  6716.,  7256.,  5664.,  6208.,  6752.,  7296.,  5692.,  6240.,  6788.,  7336.,  5720.,  6272.,  6824.,  7376.,  5748.,  6304.,  6860.,  7416.,  5776.,  6336.,  6896.,  7456.,  5804.,  6368.,  6932.,  7496.,  5832.,  6400.,  6968.,  7536.,  5860.,  6432.,  7004.,  7576.,  5888.,  6464.,  7040.,  7616.,  5916.,  6496.,  7076.,  7656.,  5944.,  6528.,  7112.,  7696.,  5972.,  6560.,  7148.,  7736.,  6000.,  6592.,  7184.,  7776.,  6812.,  7520.,  8228.,  8936.,  6840.,  7552.,  8264.,  8976.,  6868.,  7584.,  8300.,  9016.,  6896.,  7616.,  8336.,  9056.,  6924.,  7648.,  8372.,  9096.,  6952.,  7680.,  8408.,  9136.,  6980.,  7712.,  8444.,  9176.,  7008.,  7744.,  8480.,  9216.,  7036.,  7776.,  8516.,  9256.,  7064.,  7808.,  8552.,  9296.,  7092.,  7840.,  8588.,  9336.,  7120.,  7872.,  8624.,  9376.,  7148.,  7904.,  8660.,  9416.,  7176.,  7936.,  8696.,  9456.,  7204.,  7968.,  8732.,  9496.,  7232.,  8000.,  8768.,  9536.,  7260.,  8032.,  8804.,  9576.,  7288.,  8064.,  8840.,  9616.,  7316.,  8096.,  8876.,  9656.,  7344.,  8128.,  8912.,  9696.,  7372.,  8160.,  8948.,  9736.,  7400.,  8192.,  8984.,  9776.,  7428.,  8224.,  9020.,  9816.,  7456.,  8256.,  9056.,  9856.,  7484.,  8288.,  9092.,  9896.,  7512.,  8320.,  9128.,  9936.,  7540.,  8352.,  9164.,  9976.,  7568.,  8384.,  9200., 10016.,  8380.,  9312., 10244., 11176.,  8408.,  9344., 10280., 11216.,  8436.,  9376., 10316., 11256.,  8464.,  9408., 10352., 11296.,  8492.,  9440., 10388., 11336.,  8520.,  9472., 10424., 11376.,  8548.,  9504., 10460., 11416.,  8576.,  9536., 10496., 11456.,  8604.,  9568., 10532., 11496.,  8632.,  9600., 10568., 11536.,  8660.,  9632., 10604., 11576.,  8688.,  9664., 10640., 11616.,  8716.,  9696., 10676., 11656.,  8744.,  9728., 10712., 11696.,  8772.,  9760., 10748., 11736.,  8800.,  9792., 10784., 11776.,  8828.,  9824., 10820., 11816.,  8856.,  9856., 10856., 11856.,  8884.,  9888., 10892., 11896.,  8912.,  9920., 10928., 11936.,  8940.,  9952., 10964., 11976.,  8968.,  9984., 11000., 12016.,  8996., 10016., 11036., 12056.,  9024., 10048., 11072., 12096.,  9052., 10080., 11108., 12136.,  9080., 10112., 11144., 12176.,  9108., 10144., 11180., 12216.,  9136., 10176., 11216., 12256.,  9948., 11104., 12260., 13416.,  9976., 11136., 12296., 13456., 10004., 11168., 12332., 13496., 10032., 11200., 12368., 13536., 10060., 11232., 12404., 13576., 10088., 11264., 12440., 13616., 10116., 11296., 12476., 13656., 10144., 11328., 12512., 13696., 10172., 11360., 12548., 13736., 10200., 11392., 12584., 13776., 10228., 11424., 12620., 13816., 10256., 11456., 12656., 13856., 10284., 11488., 12692., 13896., 10312., 11520., 12728., 13936., 10340., 11552., 12764., 13976., 10368., 11584., 12800., 14016., 10396., 11616., 12836., 14056., 10424., 11648., 12872., 14096., 10452., 11680., 12908., 14136., 10480., 11712., 12944., 14176., 10508., 11744., 12980., 14216., 10536., 11776., 13016., 14256., 10564., 11808., 13052., 14296., 10592., 11840., 13088., 14336., 10620., 11872., 13124., 14376., 10648., 11904., 13160., 14416., 10676., 11936., 13196., 14456., 10704., 11968., 13232., 14496., 11516., 12896., 14276., 15656., 11544., 12928., 14312., 15696., 11572., 12960., 14348., 15736., 11600., 12992., 14384., 15776., 11628., 13024., 14420., 15816., 11656., 13056., 14456., 15856., 11684., 13088., 14492., 15896., 11712., 13120., 14528., 15936., 11740., 13152., 14564., 15976., 11768., 13184., 14600., 16016., 11796., 13216., 14636., 16056., 11824., 13248., 14672., 16096., 11852., 13280., 14708., 16136., 11880., 13312., 14744., 16176., 11908., 13344., 14780., 16216., 11936., 13376., 14816., 16256., 11964., 13408., 14852., 16296., 11992., 13440., 14888., 16336., 12020., 13472., 14924., 16376., 12048., 13504., 14960., 16416., 12076., 13536., 14996., 16456., 12104., 13568., 15032., 16496., 12132., 13600., 15068., 16536., 12160., 13632., 15104., 16576., 12188., 13664., 15140., 16616., 12216., 13696., 15176., 16656., 12244., 13728., 15212., 16696., 12272., 13760., 15248., 16736., 13084., 14688., 16292., 17896., 13112., 14720., 16328., 17936., 13140., 14752., 16364., 17976., 13168., 14784., 16400., 18016., 13196., 14816., 16436., 18056., 13224., 14848., 16472., 18096., 13252., 14880., 16508., 18136., 13280., 14912., 16544., 18176., 13308., 14944., 16580., 18216., 13336., 14976., 16616., 18256., 13364., 15008., 16652., 18296., 13392., 15040., 16688., 18336., 13420., 15072., 16724., 18376., 13448., 15104., 16760., 18416., 13476., 15136., 16796., 18456., 13504., 15168., 16832., 18496., 13532., 15200., 16868., 18536., 13560., 15232., 16904., 18576., 13588., 15264., 16940., 18616., 13616., 15296., 16976., 18656., 13644., 15328., 17012., 18696., 13672., 15360., 17048., 18736., 13700., 15392., 17084., 18776., 13728., 15424., 17120., 18816., 13756., 15456., 17156., 18856., 13784., 15488., 17192., 18896., 13812., 15520., 17228., 18936., 13840., 15552., 17264., 18976., 14652., 16480., 18308., 20136., 14680., 16512., 18344., 20176., 14708., 16544., 18380., 20216., 14736., 16576., 18416., 20256., 14764., 16608., 18452., 20296., 14792., 16640., 18488., 20336., 14820., 16672., 18524., 20376., 14848., 16704., 18560., 20416., 14876., 16736., 18596., 20456., 14904., 16768., 18632., 20496., 14932., 16800., 18668., 20536., 14960., 16832., 18704., 20576., 14988., 16864., 18740., 20616., 15016., 16896., 18776., 20656., 15044., 16928., 18812., 20696., 15072., 16960., 18848., 20736., 15100., 16992., 18884., 20776., 15128., 17024., 18920., 20816., 15156., 17056., 18956., 20856., 15184., 17088., 18992., 20896., 15212., 17120., 19028., 20936., 15240., 17152., 19064., 20976., 15268., 17184., 19100., 21016., 15296., 17216., 19136., 21056., 15324., 17248., 19172., 21096., 15352., 17280., 19208., 21136., 15380., 17312., 19244., 21176., 15408., 17344., 19280., 21216.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4155., 4206., 5928., 6000., 6072., 3774., 3819., 4716., 4767., 6720., 6792., 6864., 4269., 4314., 5304., 5360., 7550., 7628., 7706., 4784., 4832., 5920., 5976., 8408., 8486., 8564., 5312., 5360., 2877., 2910., 4011., 4056., 4101., 2478., 2505., 3240., 3273., 4506., 4551., 4596., 2775., 2802., 3603., 3636., 5001., 5046., 5091., 3072., 3099.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 342.,  352.,  362.,  372.,  382.,  392.,  402.,  452.,  462.,  472.,  482.,  492.,  502.,  512.,  562.,  572.,  582.,  592.,  602.,  612.,  622.,  672.,  682.,  692.,  702.,  712.,  722.,  732.,  782.,  792.,  802.,  812.,  822.,  832.,  842.,  892.,  902.,  912.,  922.,  932.,  942.,  952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7884.,  8310.,  7980.,  8412., 11217., 11856., 11352., 12000., 11487., 12144.,  7116.,  7548.,  7200.,  7638.,  8940.,  9432.,  9036.,  9534., 12702., 13440., 12837., 13584., 12972., 13728.,  8040.,  8538.,  8124.,  8628., 10040., 10608., 10144., 10720., 14248., 15100., 14392., 15256., 14536., 15412.,  8992.,  9568.,  9080.,  9664., 11184., 11840., 11288., 11952., 15832., 16816., 15976., 16972., 16120., 17128.,  9960., 10624., 10048., 10720.,  5328.,  5754.,  5388.,  5820.,  7383.,  8022.,  7464.,  8112.,  7545.,  8202.,  4524.,  4956.,  4572.,  5010.,  5988.,  6480.,  6048.,  6546.,  8274.,  9012.,  8355.,  9102.,  8436.,  9192.,  5052.,  5550.,  5100.,  5604.,  6648.,  7206.,  6708.,  7272.,  9165., 10002.,  9246., 10092.,  9327., 10182.,  5580.,  6144.,  5628.,  6198.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,  664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,  808.,  964.,  824.,  984.,  840., 1004.,  856., 1024.,  936., 1124.,  952., 1144.,  968., 1164.,  984., 1184., 1000., 1204., 1016., 1224., 1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404., 1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584., 1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684., 1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864., 1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044., 1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15342., 15768., 16194., 16620., 15528., 15960., 16392., 16824., 21795., 22434., 23073., 23712., 22056., 22704., 23352., 24000., 22317., 22974., 23631., 24288., 13800., 14232., 14664., 15096., 13962., 14400., 14838., 15276., 17388., 17880., 18372., 18864., 11814., 12184., 12554., 12924., 18906., 19516., 20126., 20736., 19167., 19786., 20405., 21024., 19428., 20056., 20684., 21312., 10334., 10704., 11074., 11444., 10496., 10872., 11248., 11624.,  8504.,  8816.,  9128.,  9440.,  8704.,  9024.,  9344.,  9664., 11900., 12368., 12836., 13304., 12176., 12656., 13136., 13616., 12452., 12944., 13436., 13928.,  7424.,  7744.,  8064.,  8384.,  7592.,  7920.,  8248.,  8576., 10704., 11104., 11504., 11904., 10904., 11312., 11720., 12128., 14936., 15536., 16136., 16736., 15212., 15824., 16436., 17048., 15488., 16112., 16736., 17360.,  9272.,  9680., 10088., 10496.,  9440.,  9856., 10272., 10688., 10230., 10656., 11082., 11508., 10344., 10776., 11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928., 15576., 16224., 14433., 15090., 15747., 16404.,  8616.,  9048.,  9480.,  9912.,  8706.,  9144.,  9582., 10020., 11484., 11976., 12468., 12960.,  7374.,  7744.,  8114.,  8484., 11586., 12196., 12806., 13416., 11739., 12358., 12977., 13596., 11892., 12520., 13148., 13776.,  5894.,  6264.,  6634.,  7004.,  5984.,  6360.,  6736.,  7112.,  4802.,  5104.,  5406.,  5708.,  4916.,  5224.,  5532.,  5840.,  6357.,  6810.,  7263.,  7716.,  6510.,  6972.,  7434.,  7896.,  6663.,  7134.,  7605.,  8076.,  3684.,  3992.,  4300.,  4608.,  3774.,  4088.,  4402.,  4716.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232., 1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528., 1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520., 1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888., 1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680., 1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248., 1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968., 2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448., 1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256., 2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808., 2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416., 2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168., 2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704., 2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368., 2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992., 3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728., 2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280., 3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088., 3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440., 3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8259.,  8310.,  8361.,  8412., 11784., 11856., 11928., 12000., 12072., 12144.,  7503.,  7548.,  7593.,  7638.,  9381.,  9432.,  9483.,  9534., 13368., 13440., 13512., 13584., 13656., 13728.,  8493.,  8538.,  8583.,  8628., 10552., 10608., 10664., 10720., 15022., 15100., 15178., 15256., 15334., 15412.,  9520.,  9568.,  9616.,  9664., 11784., 11840., 11896., 11952., 16738., 16816., 16894., 16972., 17050., 17128., 10576., 10624., 10672., 10720.,  5721.,  5754.,  5787.,  5820.,  7977.,  8022.,  8067.,  8112.,  8157.,  8202.,  4929.,  4956.,  4983.,  5010.,  6447.,  6480.,  6513.,  6546.,  8967.,  9012.,  9057.,  9102.,  9147.,  9192.,  5523.,  5550.,  5577.,  5604.,  7173.,  7206.,  7239.,  7272.,  9957., 10002., 10047., 10092., 10137., 10182.,  6117.,  6144.,  6171.,  6198.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 674.,  684.,  694.,  704.,  714.,  724.,  734.,  744.,  754.,  764.,  774.,  784.,  794.,  804.,  894.,  904.,  914.,  924.,  934.,  944.,  954.,  964.,  974.,  984.,  994., 1004., 1014., 1024., 1114., 1124., 1134., 1144., 1154., 1164., 1174., 1184., 1194., 1204., 1214., 1224., 1234., 1244., 1334., 1344., 1354., 1364., 1374., 1384., 1394., 1404., 1414., 1424., 1434., 1444., 1454., 1464., 1554., 1564., 1574., 1584., 1594., 1604., 1614., 1624., 1634., 1644., 1654., 1664., 1674., 1684., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1994., 2004., 2014., 2024., 2034., 2044., 2054., 2064., 2074., 2084., 2094., 2104., 2114., 2124.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15672., 16518., 15768., 16620., 15864., 16722., 15960., 16824., 22299., 23568., 22434., 23712., 22569., 23856., 22704., 24000., 22839., 24144., 22974., 24288., 14148., 15006., 14232., 15096., 14316., 15186., 14400., 15276., 17784., 18762., 17880., 18864., 12088., 12822., 12184., 12924., 19381., 20592., 19516., 20736., 19651., 20880., 19786., 21024., 19921., 21168., 20056., 21312., 10620., 11354., 10704., 11444., 10788., 11534., 10872., 11624.,  8712.,  9328.,  8816.,  9440.,  8920.,  9552.,  9024.,  9664., 12224., 13148., 12368., 13304., 12512., 13460., 12656., 13616., 12800., 13772., 12944., 13928.,  7656.,  8288.,  7744.,  8384.,  7832.,  8480.,  7920.,  8576., 11000., 11792., 11104., 11904., 11208., 12016., 11312., 12128., 15392., 16580., 15536., 16736., 15680., 16892., 15824., 17048., 15968., 17204., 16112., 17360.,  9592., 10400.,  9680., 10496.,  9768., 10592.,  9856., 10688., 10596., 11442., 10656., 11508., 10716., 11574., 10776., 11640., 14685., 15954., 14766., 16044., 14847., 16134., 14928., 16224., 15009., 16314., 15090., 16404.,  9000.,  9858.,  9048.,  9912.,  9096.,  9966.,  9144., 10020., 11916., 12894., 11976., 12960.,  7684.,  8418.,  7744.,  8484., 12115., 13326., 12196., 13416., 12277., 13506., 12358., 13596., 12439., 13686., 12520., 13776.,  6216.,  6950.,  6264.,  7004.,  6312.,  7058.,  6360.,  7112.,  5044.,  5642.,  5104.,  5708.,  5164.,  5774.,  5224.,  5840.,  6729.,  7626.,  6810.,  7716.,  6891.,  7806.,  6972.,  7896.,  7053.,  7986.,  7134.,  8076.,  3944.,  4554.,  3992.,  4608.,  4040.,  4662.,  4088.,  4716.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1152., 1348., 1168., 1368., 1184., 1388., 1200., 1408., 1216., 1428., 1232., 1448., 1248., 1468., 1264., 1488., 1280., 1508., 1296., 1528., 1312., 1548., 1328., 1568., 1344., 1588., 1360., 1608., 1504., 1788., 1520., 1808., 1536., 1828., 1552., 1848., 1568., 1868., 1584., 1888., 1600., 1908., 1616., 1928., 1632., 1948., 1648., 1968., 1664., 1988., 1680., 2008., 1696., 2028., 1712., 2048., 1856., 2228., 1872., 2248., 1888., 2268., 1904., 2288., 1920., 2308., 1936., 2328., 1952., 2348., 1968., 2368., 1984., 2388., 2000., 2408., 2016., 2428., 2032., 2448., 2048., 2468., 2064., 2488., 2208., 2668., 2224., 2688., 2240., 2708., 2256., 2728., 2272., 2748., 2288., 2768., 2304., 2788., 2320., 2808., 2336., 2828., 2352., 2848., 2368., 2868., 2384., 2888., 2400., 2908., 2416., 2928., 2560., 3108., 2576., 3128., 2592., 3148., 2608., 3168., 2624., 3188., 2640., 3208., 2656., 3228., 2672., 3248., 2688., 3268., 2704., 3288., 2720., 3308., 2736., 3328., 2752., 3348., 2768., 3368., 2912., 3548., 2928., 3568., 2944., 3588., 2960., 3608., 2976., 3628., 2992., 3648., 3008., 3668., 3024., 3688., 3040., 3708., 3056., 3728., 3072., 3748., 3088., 3768., 3104., 3788., 3120., 3808., 3264., 3988., 3280., 4008., 3296., 4028., 3312., 4048., 3328., 4068., 3344., 4088., 3360., 4108., 3376., 4128., 3392., 4148., 3408., 4168., 3424., 4188., 3440., 4208., 3456., 4228., 3472., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11554., 11888., 12222., 12556., 11740., 12080., 12420., 12760., 11926., 12272., 12618., 12964., 12112., 12464., 12816., 13168., 16449., 16950., 17451., 17952., 16710., 17220., 17730., 18240., 16971., 17490., 18009., 18528., 17232., 17760., 18288., 18816., 17493., 18030., 18567., 19104., 17754., 18300., 18846., 19392., 10542., 10888., 11234., 11580., 10704., 11056., 11408., 11760., 10866., 11224., 11582., 11940., 11028., 11392., 11756., 12120., 15646., 16112., 16578., 17044., 15832., 16304., 16776., 17248., 10258., 10608., 10958., 11308., 10444., 10800., 11156., 11512., 16431., 17002., 17573., 18144., 16692., 17272., 17852., 18432., 16953., 17542., 18131., 18720., 17214., 17812., 18410., 19008., 17475., 18082., 18689., 19296., 17736., 18352., 18968., 19584.,  8858.,  9208.,  9558.,  9908.,  9020.,  9376.,  9732., 10088.,  9182.,  9544.,  9906., 10268.,  9344.,  9712., 10080., 10448.,  8872.,  9232.,  9592.,  9952.,  9072.,  9440.,  9808., 10176.,  9272.,  9648., 10024., 10400.,  9472.,  9856., 10240., 10624., 12388., 12928., 13468., 14008., 12664., 13216., 13768., 14320., 12940., 13504., 14068., 14632., 13216., 13792., 14368., 14944., 13492., 14080., 14668., 15256., 13768., 14368., 14968., 15568.,  7768.,  8144.,  8520.,  8896.,  7936.,  8320.,  8704.,  9088.,  8104.,  8496.,  8888.,  9280.,  8272.,  8672.,  9072.,  9472., 13272., 13808., 14344., 14880., 13472., 14016., 14560., 15104., 13672., 14224., 14776., 15328., 13872., 14432., 14992., 15552., 18460., 19264., 20068., 20872., 18736., 19552., 20368., 21184., 16324., 17024., 17724., 18424., 16600., 17312., 18024., 18736., 16876., 17600., 18324., 19048., 17152., 17888., 18624., 19360., 11464., 12016., 12568., 13120., 11632., 12192., 12752., 13312., 11800., 12368., 12936., 13504., 11968., 12544., 13120., 13696.,  7546.,  7880.,  8214.,  8548.,  7660.,  8000.,  8340.,  8680.,  7774.,  8120.,  8466.,  8812.,  7888.,  8240.,  8592.,  8944., 10437., 10938., 11439., 11940., 10590., 11100., 11610., 12120., 10743., 11262., 11781., 12300., 10896., 11424., 11952., 12480., 11049., 11586., 12123., 12660., 11202., 11748., 12294., 12840.,  6390.,  6736.,  7082.,  7428.,  6480.,  6832.,  7184.,  7536.,  6570.,  6928.,  7286.,  7644.,  6660.,  7024.,  7388.,  7752., 10054., 10520., 10986., 11452., 10168., 10640., 11112., 11584.,  6058.,  6408.,  6758.,  7108.,  6172.,  6528.,  6884.,  7240.,  9579., 10150., 10721., 11292.,  9732., 10312., 10892., 11472.,  9885., 10474., 11063., 11652., 10038., 10636., 11234., 11832., 10191., 10798., 11405., 12012., 10344., 10960., 11576., 12192.,  4658.,  5008.,  5358.,  5708.,  4748.,  5104.,  5460.,  5816.,  4838.,  5200.,  5562.,  5924.,  4928.,  5296.,  5664.,  6032.,  4626.,  4968.,  5310.,  5652.,  4740.,  5088.,  5436.,  5784.,  4854.,  5208.,  5562.,  5916.,  4968.,  5328.,  5688.,  6048.,  6033.,  6546.,  7059.,  7572.,  6186.,  6708.,  7230.,  7752.,  6339.,  6870.,  7401.,  7932.,  6492.,  7032.,  7572.,  8112.,  6645.,  7194.,  7743.,  8292.,  6798.,  7356.,  7914.,  8472.,  3438.,  3792.,  4146.,  4500.,  3528.,  3888.,  4248.,  4608.,  3618.,  3984.,  4350.,  4716.,  3708.,  4080.,  4452.,  4824.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2108., 2304., 2500., 2696., 2136., 2336., 2536., 2736., 2164., 2368., 2572., 2776., 2192., 2400., 2608., 2816., 2220., 2432., 2644., 2856., 2248., 2464., 2680., 2896., 2276., 2496., 2716., 2936., 2304., 2528., 2752., 2976., 2332., 2560., 2788., 3016., 2360., 2592., 2824., 3056., 2388., 2624., 2860., 3096., 2416., 2656., 2896., 3136., 2444., 2688., 2932., 3176., 2472., 2720., 2968., 3216., 2724., 3008., 3292., 3576., 2752., 3040., 3328., 3616., 2780., 3072., 3364., 3656., 2808., 3104., 3400., 3696., 2836., 3136., 3436., 3736., 2864., 3168., 3472., 3776., 2892., 3200., 3508., 3816., 2920., 3232., 3544., 3856., 2948., 3264., 3580., 3896., 2976., 3296., 3616., 3936., 3004., 3328., 3652., 3976., 3032., 3360., 3688., 4016., 3060., 3392., 3724., 4056., 3088., 3424., 3760., 4096., 3340., 3712., 4084., 4456., 3368., 3744., 4120., 4496., 3396., 3776., 4156., 4536., 3424., 3808., 4192., 4576., 3452., 3840., 4228., 4616., 3480., 3872., 4264., 4656., 3508., 3904., 4300., 4696., 3536., 3936., 4336., 4736., 3564., 3968., 4372., 4776., 3592., 4000., 4408., 4816., 3620., 4032., 4444., 4856., 3648., 4064., 4480., 4896., 3676., 4096., 4516., 4936., 3704., 4128., 4552., 4976., 3956., 4416., 4876., 5336., 3984., 4448., 4912., 5376., 4012., 4480., 4948., 5416., 4040., 4512., 4984., 5456., 4068., 4544., 5020., 5496., 4096., 4576., 5056., 5536., 4124., 4608., 5092., 5576., 4152., 4640., 5128., 5616., 4180., 4672., 5164., 5656., 4208., 4704., 5200., 5696., 4236., 4736., 5236., 5736., 4264., 4768., 5272., 5776., 4292., 4800., 5308., 5816., 4320., 4832., 5344., 5856., 4572., 5120., 5668., 6216., 4600., 5152., 5704., 6256., 4628., 5184., 5740., 6296., 4656., 5216., 5776., 6336., 4684., 5248., 5812., 6376., 4712., 5280., 5848., 6416., 4740., 5312., 5884., 6456., 4768., 5344., 5920., 6496., 4796., 5376., 5956., 6536., 4824., 5408., 5992., 6576., 4852., 5440., 6028., 6616., 4880., 5472., 6064., 6656., 4908., 5504., 6100., 6696., 4936., 5536., 6136., 6736., 5188., 5824., 6460., 7096., 5216., 5856., 6496., 7136., 5244., 5888., 6532., 7176., 5272., 5920., 6568., 7216., 5300., 5952., 6604., 7256., 5328., 5984., 6640., 7296., 5356., 6016., 6676., 7336., 5384., 6048., 6712., 7376., 5412., 6080., 6748., 7416., 5440., 6112., 6784., 7456., 5468., 6144., 6820., 7496., 5496., 6176., 6856., 7536., 5524., 6208., 6892., 7576., 5552., 6240., 6928., 7616., 5804., 6528., 7252., 7976., 5832., 6560., 7288., 8016., 5860., 6592., 7324., 8056., 5888., 6624., 7360., 8096., 5916., 6656., 7396., 8136., 5944., 6688., 7432., 8176., 5972., 6720., 7468., 8216., 6000., 6752., 7504., 8256., 6028., 6784., 7540., 8296., 6056., 6816., 7576., 8336., 6084., 6848., 7612., 8376., 6112., 6880., 7648., 8416., 6140., 6912., 7684., 8456., 6168., 6944., 7720., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16467., 16518., 16569., 16620., 16671., 16722., 16773., 16824., 23496., 23568., 23640., 23712., 23784., 23856., 23928., 24000., 24072., 24144., 24216., 24288., 14961., 15006., 15051., 15096., 15141., 15186., 15231., 15276., 18711., 18762., 18813., 18864., 12771., 12822., 12873., 12924., 20520., 20592., 20664., 20736., 20808., 20880., 20952., 21024., 21096., 21168., 21240., 21312., 11309., 11354., 11399., 11444., 11489., 11534., 11579., 11624.,  9272.,  9328.,  9384.,  9440.,  9496.,  9552.,  9608.,  9664., 13070., 13148., 13226., 13304., 13382., 13460., 13538., 13616., 13694., 13772., 13850., 13928.,  8240.,  8288.,  8336.,  8384.,  8432.,  8480.,  8528.,  8576., 11736., 11792., 11848., 11904., 11960., 12016., 12072., 12128., 16502., 16580., 16658., 16736., 16814., 16892., 16970., 17048., 17126., 17204., 17282., 17360., 10352., 10400., 10448., 10496., 10544., 10592., 10640., 10688., 11409., 11442., 11475., 11508., 11541., 11574., 11607., 11640., 15909., 15954., 15999., 16044., 16089., 16134., 16179., 16224., 16269., 16314., 16359., 16404.,  9831.,  9858.,  9885.,  9912.,  9939.,  9966.,  9993., 10020., 12861., 12894., 12927., 12960.,  8385.,  8418.,  8451.,  8484., 13281., 13326., 13371., 13416., 13461., 13506., 13551., 13596., 13641., 13686., 13731., 13776.,  6923.,  6950.,  6977.,  7004.,  7031.,  7058.,  7085.,  7112.,  5609.,  5642.,  5675.,  5708.,  5741.,  5774.,  5807.,  5840.,  7581.,  7626.,  7671.,  7716.,  7761.,  7806.,  7851.,  7896.,  7941.,  7986.,  8031.,  8076.,  4527.,  4554.,  4581.,  4608.,  4635.,  4662.,  4689.,  4716.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1338., 1348., 1358., 1368., 1378., 1388., 1398., 1408., 1418., 1428., 1438., 1448., 1458., 1468., 1478., 1488., 1498., 1508., 1518., 1528., 1538., 1548., 1558., 1568., 1578., 1588., 1598., 1608., 1778., 1788., 1798., 1808., 1818., 1828., 1838., 1848., 1858., 1868., 1878., 1888., 1898., 1908., 1918., 1928., 1938., 1948., 1958., 1968., 1978., 1988., 1998., 2008., 2018., 2028., 2038., 2048., 2218., 2228., 2238., 2248., 2258., 2268., 2278., 2288., 2298., 2308., 2318., 2328., 2338., 2348., 2358., 2368., 2378., 2388., 2398., 2408., 2418., 2428., 2438., 2448., 2458., 2468., 2478., 2488., 2658., 2668., 2678., 2688., 2698., 2708., 2718., 2728., 2738., 2748., 2758., 2768., 2778., 2788., 2798., 2808., 2818., 2828., 2838., 2848., 2858., 2868., 2878., 2888., 2898., 2908., 2918., 2928., 3098., 3108., 3118., 3128., 3138., 3148., 3158., 3168., 3178., 3188., 3198., 3208., 3218., 3228., 3238., 3248., 3258., 3268., 3278., 3288., 3298., 3308., 3318., 3328., 3338., 3348., 3358., 3368., 3538., 3548., 3558., 3568., 3578., 3588., 3598., 3608., 3618., 3628., 3638., 3648., 3658., 3668., 3678., 3688., 3698., 3708., 3718., 3728., 3738., 3748., 3758., 3768., 3778., 3788., 3798., 3808., 3978., 3988., 3998., 4008., 4018., 4028., 4038., 4048., 4058., 4068., 4078., 4088., 4098., 4108., 4118., 4128., 4138., 4148., 4158., 4168., 4178., 4188., 4198., 4208., 4218., 4228., 4238., 4248.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11792., 12454., 11888., 12556., 11984., 12658., 12080., 12760., 12176., 12862., 12272., 12964., 12368., 13066., 12464., 13168., 16815., 17808., 16950., 17952., 17085., 18096., 17220., 18240., 17355., 18384., 17490., 18528., 17625., 18672., 17760., 18816., 17895., 18960., 18030., 19104., 18165., 19248., 18300., 19392., 10804., 11490., 10888., 11580., 10972., 11670., 11056., 11760., 11140., 11850., 11224., 11940., 11308., 12030., 11392., 12120., 16016., 16942., 16112., 17044., 16208., 17146., 16304., 17248., 10512., 11206., 10608., 11308., 10704., 11410., 10800., 11512., 16867., 18000., 17002., 18144., 17137., 18288., 17272., 18432., 17407., 18576., 17542., 18720., 17677., 18864., 17812., 19008., 17947., 19152., 18082., 19296., 18217., 19440., 18352., 19584.,  9124.,  9818.,  9208.,  9908.,  9292.,  9998.,  9376., 10088.,  9460., 10178.,  9544., 10268.,  9628., 10358.,  9712., 10448.,  9128.,  9840.,  9232.,  9952.,  9336., 10064.,  9440., 10176.,  9544., 10288.,  9648., 10400.,  9752., 10512.,  9856., 10624., 12784., 13852., 12928., 14008., 13072., 14164., 13216., 14320., 13360., 14476., 13504., 14632., 13648., 14788., 13792., 14944., 13936., 15100., 14080., 15256., 14224., 15412., 14368., 15568.,  8056.,  8800.,  8144.,  8896.,  8232.,  8992.,  8320.,  9088.,  8408.,  9184.,  8496.,  9280.,  8584.,  9376.,  8672.,  9472., 13704., 14768., 13808., 14880., 13912., 14992., 14016., 15104., 14120., 15216., 14224., 15328., 14328., 15440., 14432., 15552., 19120., 20716., 19264., 20872., 19408., 21028., 19552., 21184., 16880., 18268., 17024., 18424., 17168., 18580., 17312., 18736., 17456., 18892., 17600., 19048., 17744., 19204., 17888., 19360., 11928., 13024., 12016., 13120., 12104., 13216., 12192., 13312., 12280., 13408., 12368., 13504., 12456., 13600., 12544., 13696.,  7820.,  8482.,  7880.,  8548.,  7940.,  8614.,  8000.,  8680.,  8060.,  8746.,  8120.,  8812.,  8180.,  8878.,  8240.,  8944., 10857., 11850., 10938., 11940., 11019., 12030., 11100., 12120., 11181., 12210., 11262., 12300., 11343., 12390., 11424., 12480., 11505., 12570., 11586., 12660., 11667., 12750., 11748., 12840.,  6688.,  7374.,  6736.,  7428.,  6784.,  7482.,  6832.,  7536.,  6880.,  7590.,  6928.,  7644.,  6976.,  7698.,  7024.,  7752., 10460., 11386., 10520., 11452., 10580., 11518., 10640., 11584.,  6348.,  7042.,  6408.,  7108.,  6468.,  7174.,  6528.,  7240., 10069., 11202., 10150., 11292., 10231., 11382., 10312., 11472., 10393., 11562., 10474., 11652., 10555., 11742., 10636., 11832., 10717., 11922., 10798., 12012., 10879., 12102., 10960., 12192.,  4960.,  5654.,  5008.,  5708.,  5056.,  5762.,  5104.,  5816.,  5152.,  5870.,  5200.,  5924.,  5248.,  5978.,  5296.,  6032.,  4908.,  5586.,  4968.,  5652.,  5028.,  5718.,  5088.,  5784.,  5148.,  5850.,  5208.,  5916.,  5268.,  5982.,  5328.,  6048.,  6465.,  7482.,  6546.,  7572.,  6627.,  7662.,  6708.,  7752.,  6789.,  7842.,  6870.,  7932.,  6951.,  8022.,  7032.,  8112.,  7113.,  8202.,  7194.,  8292.,  7275.,  8382.,  7356.,  8472.,  3744.,  4446.,  3792.,  4500.,  3840.,  4554.,  3888.,  4608.,  3936.,  4662.,  3984.,  4716.,  4032.,  4770.,  4080.,  4824.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2288., 2676., 2304., 2696., 2320., 2716., 2336., 2736., 2352., 2756., 2368., 2776., 2384., 2796., 2400., 2816., 2416., 2836., 2432., 2856., 2448., 2876., 2464., 2896., 2480., 2916., 2496., 2936., 2512., 2956., 2528., 2976., 2544., 2996., 2560., 3016., 2576., 3036., 2592., 3056., 2608., 3076., 2624., 3096., 2640., 3116., 2656., 3136., 2672., 3156., 2688., 3176., 2704., 3196., 2720., 3216., 2992., 3556., 3008., 3576., 3024., 3596., 3040., 3616., 3056., 3636., 3072., 3656., 3088., 3676., 3104., 3696., 3120., 3716., 3136., 3736., 3152., 3756., 3168., 3776., 3184., 3796., 3200., 3816., 3216., 3836., 3232., 3856., 3248., 3876., 3264., 3896., 3280., 3916., 3296., 3936., 3312., 3956., 3328., 3976., 3344., 3996., 3360., 4016., 3376., 4036., 3392., 4056., 3408., 4076., 3424., 4096., 3696., 4436., 3712., 4456., 3728., 4476., 3744., 4496., 3760., 4516., 3776., 4536., 3792., 4556., 3808., 4576., 3824., 4596., 3840., 4616., 3856., 4636., 3872., 4656., 3888., 4676., 3904., 4696., 3920., 4716., 3936., 4736., 3952., 4756., 3968., 4776., 3984., 4796., 4000., 4816., 4016., 4836., 4032., 4856., 4048., 4876., 4064., 4896., 4080., 4916., 4096., 4936., 4112., 4956., 4128., 4976., 4400., 5316., 4416., 5336., 4432., 5356., 4448., 5376., 4464., 5396., 4480., 5416., 4496., 5436., 4512., 5456., 4528., 5476., 4544., 5496., 4560., 5516., 4576., 5536., 4592., 5556., 4608., 5576., 4624., 5596., 4640., 5616., 4656., 5636., 4672., 5656., 4688., 5676., 4704., 5696., 4720., 5716., 4736., 5736., 4752., 5756., 4768., 5776., 4784., 5796., 4800., 5816., 4816., 5836., 4832., 5856., 5104., 6196., 5120., 6216., 5136., 6236., 5152., 6256., 5168., 6276., 5184., 6296., 5200., 6316., 5216., 6336., 5232., 6356., 5248., 6376., 5264., 6396., 5280., 6416., 5296., 6436., 5312., 6456., 5328., 6476., 5344., 6496., 5360., 6516., 5376., 6536., 5392., 6556., 5408., 6576., 5424., 6596., 5440., 6616., 5456., 6636., 5472., 6656., 5488., 6676., 5504., 6696., 5520., 6716., 5536., 6736., 5808., 7076., 5824., 7096., 5840., 7116., 5856., 7136., 5872., 7156., 5888., 7176., 5904., 7196., 5920., 7216., 5936., 7236., 5952., 7256., 5968., 7276., 5984., 7296., 6000., 7316., 6016., 7336., 6032., 7356., 6048., 7376., 6064., 7396., 6080., 7416., 6096., 7436., 6112., 7456., 6128., 7476., 6144., 7496., 6160., 7516., 6176., 7536., 6192., 7556., 6208., 7576., 6224., 7596., 6240., 7616., 6512., 7956., 6528., 7976., 6544., 7996., 6560., 8016., 6576., 8036., 6592., 8056., 6608., 8076., 6624., 8096., 6640., 8116., 6656., 8136., 6672., 8156., 6688., 8176., 6704., 8196., 6720., 8216., 6736., 8236., 6752., 8256., 6768., 8276., 6784., 8296., 6800., 8316., 6816., 8336., 6832., 8356., 6848., 8376., 6864., 8396., 6880., 8416., 6896., 8436., 6912., 8456., 6928., 8476., 6944., 8496.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11914., 12320., 12726., 13132., 12100., 12512., 12924., 13336., 12286., 12704., 13122., 13540., 12472., 12896., 13320., 13744., 12658., 13088., 13518., 13948., 12844., 13280., 13716., 14152., 13030., 13472., 13914., 14356., 13216., 13664., 14112., 14560., 16893., 17502., 18111., 18720., 17154., 17772., 18390., 19008., 17415., 18042., 18669., 19296., 17676., 18312., 18948., 19584., 17937., 18582., 19227., 19872., 18198., 18852., 19506., 20160., 18459., 19122., 19785., 20448., 18720., 19392., 20064., 20736., 16293., 16846., 17399., 17952., 16554., 17116., 17678., 18240., 16815., 17386., 17957., 18528., 17076., 17656., 18236., 18816., 10938., 11368., 11798., 12228., 11100., 11536., 11972., 12408., 11262., 11704., 12146., 12588., 11424., 11872., 12320., 12768., 11586., 12040., 12494., 12948., 11748., 12208., 12668., 13128., 11910., 12376., 12842., 13308., 12072., 12544., 13016., 13488., 15234., 15648., 16062., 16476., 15420., 15840., 16260., 16680., 15606., 16032., 16458., 16884., 15792., 16224., 16656., 17088., 10218., 10528., 10838., 11148., 10404., 10720., 11036., 11352., 10590., 10912., 11234., 11556., 10776., 11104., 11432., 11760., 16089., 16582., 17075., 17568., 16350., 16852., 17354., 17856., 16611., 17122., 17633., 18144., 16872., 17392., 17912., 18432., 17133., 17662., 18191., 18720., 17394., 17932., 18470., 19008., 17655., 18202., 18749., 19296., 17916., 18472., 19028., 19584., 18177., 18742., 19307., 19872., 18438., 19012., 19586., 20160., 18699., 19282., 19865., 20448., 18960., 19552., 20144., 20736.,  8978.,  9288.,  9598.,  9908.,  9140.,  9456.,  9772., 10088.,  9302.,  9624.,  9946., 10268.,  9464.,  9792., 10120., 10448.,  9626.,  9960., 10294., 10628.,  9788., 10128., 10468., 10808.,  9950., 10296., 10642., 10988., 10112., 10464., 10816., 11168., 12680., 13136., 13592., 14048., 12880., 13344., 13808., 14272., 13080., 13552., 14024., 14496., 13280., 13760., 14240., 14720., 13480., 13968., 14456., 14944., 13680., 14176., 14672., 15168., 13880., 14384., 14888., 15392., 14080., 14592., 15104., 15616., 13748., 14304., 14860., 15416., 14024., 14592., 15160., 15728., 14300., 14880., 15460., 16040., 14576., 15168., 15760., 16352., 14852., 15456., 16060., 16664., 15128., 15744., 16360., 16976., 15404., 16032., 16660., 17288., 15680., 16320., 16960., 17600., 15956., 16608., 17260., 17912., 16232., 16896., 17560., 18224., 16508., 17184., 17860., 18536., 16784., 17472., 18160., 18848., 11528., 12016., 12504., 12992., 11696., 12192., 12688., 13184., 11864., 12368., 12872., 13376., 12032., 12544., 13056., 13568.,  8488.,  8880.,  9272.,  9664.,  8656.,  9056.,  9456.,  9856.,  8824.,  9232.,  9640., 10048.,  8992.,  9408.,  9824., 10240., 13544., 14096., 14648., 15200., 13744., 14304., 14864., 15424., 13944., 14512., 15080., 15648., 14144., 14720., 15296., 15872., 14344., 14928., 15512., 16096., 14544., 15136., 15728., 16320., 14744., 15344., 15944., 16544., 14944., 15552., 16160., 16768., 18980., 19808., 20636., 21464., 19256., 20096., 20936., 21776., 19532., 20384., 21236., 22088., 19808., 20672., 21536., 22400., 17396., 18144., 18892., 19640., 17672., 18432., 19192., 19952., 17948., 18720., 19492., 20264., 18224., 19008., 19792., 20576., 18500., 19296., 20092., 20888., 18776., 19584., 20392., 21200., 19052., 19872., 20692., 21512., 19328., 20160., 20992., 21824., 12008., 12592., 13176., 13760., 12176., 12768., 13360., 13952., 12344., 12944., 13544., 14144., 12512., 13120., 13728., 14336., 12680., 13296., 13912., 14528., 12848., 13472., 14096., 14720., 13016., 13648., 14280., 14912., 13184., 13824., 14464., 15104.,  7042.,  7448.,  7854.,  8260.,  7156.,  7568.,  7980.,  8392.,  7270.,  7688.,  8106.,  8524.,  7384.,  7808.,  8232.,  8656.,  7498.,  7928.,  8358.,  8788.,  7612.,  8048.,  8484.,  8920.,  7726.,  8168.,  8610.,  9052.,  7840.,  8288.,  8736.,  9184.,  9585., 10194., 10803., 11412.,  9738., 10356., 10974., 11592.,  9891., 10518., 11145., 11772., 10044., 10680., 11316., 11952., 10197., 10842., 11487., 12132., 10350., 11004., 11658., 12312., 10503., 11166., 11829., 12492., 10656., 11328., 12000., 12672.,  9657., 10210., 10763., 11316.,  9810., 10372., 10934., 11496.,  9963., 10534., 11105., 11676., 10116., 10696., 11276., 11856.,  5778.,  6208.,  6638.,  7068.,  5868.,  6304.,  6740.,  7176.,  5958.,  6400.,  6842.,  7284.,  6048.,  6496.,  6944.,  7392.,  6138.,  6592.,  7046.,  7500.,  6228.,  6688.,  7148.,  7608.,  6318.,  6784.,  7250.,  7716.,  6408.,  6880.,  7352.,  7824., 10266., 10680., 11094., 11508., 10380., 10800., 11220., 11640., 10494., 10920., 11346., 11772., 10608., 11040., 11472., 11904.,  6498.,  6808.,  7118.,  7428.,  6612.,  6928.,  7244.,  7560.,  6726.,  7048.,  7370.,  7692.,  6840.,  7168.,  7496.,  7824., 10173., 10666., 11159., 11652., 10326., 10828., 11330., 11832., 10479., 10990., 11501., 12012., 10632., 11152., 11672., 12192., 10785., 11314., 11843., 12372., 10938., 11476., 12014., 12552., 11091., 11638., 12185., 12732., 11244., 11800., 12356., 12912., 11397., 11962., 12527., 13092., 11550., 12124., 12698., 13272., 11703., 12286., 12869., 13452., 11856., 12448., 13040., 13632.,  5258.,  5568.,  5878.,  6188.,  5348.,  5664.,  5980.,  6296.,  5438.,  5760.,  6082.,  6404.,  5528.,  5856.,  6184.,  6512.,  5618.,  5952.,  6286.,  6620.,  5708.,  6048.,  6388.,  6728.,  5798.,  6144.,  6490.,  6836.,  5888.,  6240.,  6592.,  6944.,  7346.,  7768.,  8190.,  8612.,  7460.,  7888.,  8316.,  8744.,  7574.,  8008.,  8442.,  8876.,  7688.,  8128.,  8568.,  9008.,  7802.,  8248.,  8694.,  9140.,  7916.,  8368.,  8820.,  9272.,  8030.,  8488.,  8946.,  9404.,  8144.,  8608.,  9072.,  9536.,  7305.,  7810.,  8315.,  8820.,  7458.,  7972.,  8486.,  9000.,  7611.,  8134.,  8657.,  9180.,  7764.,  8296.,  8828.,  9360.,  7917.,  8458.,  8999.,  9540.,  8070.,  8620.,  9170.,  9720.,  8223.,  8782.,  9341.,  9900.,  8376.,  8944.,  9512., 10080.,  8529.,  9106.,  9683., 10260.,  8682.,  9268.,  9854., 10440.,  8835.,  9430., 10025., 10620.,  8988.,  9592., 10196., 10800.,  6018.,  6464.,  6910.,  7356.,  6108.,  6560.,  7012.,  7464.,  6198.,  6656.,  7114.,  7572.,  6288.,  6752.,  7216.,  7680.,  4202.,  4544.,  4886.,  5228.,  4292.,  4640.,  4988.,  5336.,  4382.,  4736.,  5090.,  5444.,  4472.,  4832.,  5192.,  5552.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4188.,  4576.,  4964.,  5352.,  4216.,  4608.,  5000.,  5392.,  4244.,  4640.,  5036.,  5432.,  4272.,  4672.,  5072.,  5472.,  4300.,  4704.,  5108.,  5512.,  4328.,  4736.,  5144.,  5552.,  4356.,  4768.,  5180.,  5592.,  4384.,  4800.,  5216.,  5632.,  4412.,  4832.,  5252.,  5672.,  4440.,  4864.,  5288.,  5712.,  4468.,  4896.,  5324.,  5752.,  4496.,  4928.,  5360.,  5792.,  4524.,  4960.,  5396.,  5832.,  4552.,  4992.,  5432.,  5872.,  4580.,  5024.,  5468.,  5912.,  4608.,  5056.,  5504.,  5952.,  4636.,  5088.,  5540.,  5992.,  4664.,  5120.,  5576.,  6032.,  4692.,  5152.,  5612.,  6072.,  4720.,  5184.,  5648.,  6112.,  4748.,  5216.,  5684.,  6152.,  4776.,  5248.,  5720.,  6192.,  4804.,  5280.,  5756.,  6232.,  4832.,  5312.,  5792.,  6272.,  4860.,  5344.,  5828.,  6312.,  4888.,  5376.,  5864.,  6352.,  4916.,  5408.,  5900.,  6392.,  4944.,  5440.,  5936.,  6432.,  5420.,  5984.,  6548.,  7112.,  5448.,  6016.,  6584.,  7152.,  5476.,  6048.,  6620.,  7192.,  5504.,  6080.,  6656.,  7232.,  5532.,  6112.,  6692.,  7272.,  5560.,  6144.,  6728.,  7312.,  5588.,  6176.,  6764.,  7352.,  5616.,  6208.,  6800.,  7392.,  5644.,  6240.,  6836.,  7432.,  5672.,  6272.,  6872.,  7472.,  5700.,  6304.,  6908.,  7512.,  5728.,  6336.,  6944.,  7552.,  5756.,  6368.,  6980.,  7592.,  5784.,  6400.,  7016.,  7632.,  5812.,  6432.,  7052.,  7672.,  5840.,  6464.,  7088.,  7712.,  5868.,  6496.,  7124.,  7752.,  5896.,  6528.,  7160.,  7792.,  5924.,  6560.,  7196.,  7832.,  5952.,  6592.,  7232.,  7872.,  5980.,  6624.,  7268.,  7912.,  6008.,  6656.,  7304.,  7952.,  6036.,  6688.,  7340.,  7992.,  6064.,  6720.,  7376.,  8032.,  6092.,  6752.,  7412.,  8072.,  6120.,  6784.,  7448.,  8112.,  6148.,  6816.,  7484.,  8152.,  6176.,  6848.,  7520.,  8192.,  6652.,  7392.,  8132.,  8872.,  6680.,  7424.,  8168.,  8912.,  6708.,  7456.,  8204.,  8952.,  6736.,  7488.,  8240.,  8992.,  6764.,  7520.,  8276.,  9032.,  6792.,  7552.,  8312.,  9072.,  6820.,  7584.,  8348.,  9112.,  6848.,  7616.,  8384.,  9152.,  6876.,  7648.,  8420.,  9192.,  6904.,  7680.,  8456.,  9232.,  6932.,  7712.,  8492.,  9272.,  6960.,  7744.,  8528.,  9312.,  6988.,  7776.,  8564.,  9352.,  7016.,  7808.,  8600.,  9392.,  7044.,  7840.,  8636.,  9432.,  7072.,  7872.,  8672.,  9472.,  7100.,  7904.,  8708.,  9512.,  7128.,  7936.,  8744.,  9552.,  7156.,  7968.,  8780.,  9592.,  7184.,  8000.,  8816.,  9632.,  7212.,  8032.,  8852.,  9672.,  7240.,  8064.,  8888.,  9712.,  7268.,  8096.,  8924.,  9752.,  7296.,  8128.,  8960.,  9792.,  7324.,  8160.,  8996.,  9832.,  7352.,  8192.,  9032.,  9872.,  7380.,  8224.,  9068.,  9912.,  7408.,  8256.,  9104.,  9952.,  7884.,  8800.,  9716., 10632.,  7912.,  8832.,  9752., 10672.,  7940.,  8864.,  9788., 10712.,  7968.,  8896.,  9824., 10752.,  7996.,  8928.,  9860., 10792.,  8024.,  8960.,  9896., 10832.,  8052.,  8992.,  9932., 10872.,  8080.,  9024.,  9968., 10912.,  8108.,  9056., 10004., 10952.,  8136.,  9088., 10040., 10992.,  8164.,  9120., 10076., 11032.,  8192.,  9152., 10112., 11072.,  8220.,  9184., 10148., 11112.,  8248.,  9216., 10184., 11152.,  8276.,  9248., 10220., 11192.,  8304.,  9280., 10256., 11232.,  8332.,  9312., 10292., 11272.,  8360.,  9344., 10328., 11312.,  8388.,  9376., 10364., 11352.,  8416.,  9408., 10400., 11392.,  8444.,  9440., 10436., 11432.,  8472.,  9472., 10472., 11472.,  8500.,  9504., 10508., 11512.,  8528.,  9536., 10544., 11552.,  8556.,  9568., 10580., 11592.,  8584.,  9600., 10616., 11632.,  8612.,  9632., 10652., 11672.,  8640.,  9664., 10688., 11712.,  9116., 10208., 11300., 12392.,  9144., 10240., 11336., 12432.,  9172., 10272., 11372., 12472.,  9200., 10304., 11408., 12512.,  9228., 10336., 11444., 12552.,  9256., 10368., 11480., 12592.,  9284., 10400., 11516., 12632.,  9312., 10432., 11552., 12672.,  9340., 10464., 11588., 12712.,  9368., 10496., 11624., 12752.,  9396., 10528., 11660., 12792.,  9424., 10560., 11696., 12832.,  9452., 10592., 11732., 12872.,  9480., 10624., 11768., 12912.,  9508., 10656., 11804., 12952.,  9536., 10688., 11840., 12992.,  9564., 10720., 11876., 13032.,  9592., 10752., 11912., 13072.,  9620., 10784., 11948., 13112.,  9648., 10816., 11984., 13152.,  9676., 10848., 12020., 13192.,  9704., 10880., 12056., 13232.,  9732., 10912., 12092., 13272.,  9760., 10944., 12128., 13312.,  9788., 10976., 12164., 13352.,  9816., 11008., 12200., 13392.,  9844., 11040., 12236., 13432.,  9872., 11072., 12272., 13472., 10348., 11616., 12884., 14152., 10376., 11648., 12920., 14192., 10404., 11680., 12956., 14232., 10432., 11712., 12992., 14272., 10460., 11744., 13028., 14312., 10488., 11776., 13064., 14352., 10516., 11808., 13100., 14392., 10544., 11840., 13136., 14432., 10572., 11872., 13172., 14472., 10600., 11904., 13208., 14512., 10628., 11936., 13244., 14552., 10656., 11968., 13280., 14592., 10684., 12000., 13316., 14632., 10712., 12032., 13352., 14672., 10740., 12064., 13388., 14712., 10768., 12096., 13424., 14752., 10796., 12128., 13460., 14792., 10824., 12160., 13496., 14832., 10852., 12192., 13532., 14872., 10880., 12224., 13568., 14912., 10908., 12256., 13604., 14952., 10936., 12288., 13640., 14992., 10964., 12320., 13676., 15032., 10992., 12352., 13712., 15072., 11020., 12384., 13748., 15112., 11048., 12416., 13784., 15152., 11076., 12448., 13820., 15192., 11104., 12480., 13856., 15232., 11580., 13024., 14468., 15912., 11608., 13056., 14504., 15952., 11636., 13088., 14540., 15992., 11664., 13120., 14576., 16032., 11692., 13152., 14612., 16072., 11720., 13184., 14648., 16112., 11748., 13216., 14684., 16152., 11776., 13248., 14720., 16192., 11804., 13280., 14756., 16232., 11832., 13312., 14792., 16272., 11860., 13344., 14828., 16312., 11888., 13376., 14864., 16352., 11916., 13408., 14900., 16392., 11944., 13440., 14936., 16432., 11972., 13472., 14972., 16472., 12000., 13504., 15008., 16512., 12028., 13536., 15044., 16552., 12056., 13568., 15080., 16592., 12084., 13600., 15116., 16632., 12112., 13632., 15152., 16672., 12140., 13664., 15188., 16712., 12168., 13696., 15224., 16752., 12196., 13728., 15260., 16792., 12224., 13760., 15296., 16832., 12252., 13792., 15332., 16872., 12280., 13824., 15368., 16912., 12308., 13856., 15404., 16952., 12336., 13888., 15440., 16992.};
  const std::array<int, 4> in_shape = {{ 1, 14, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4560., 6432., 6504., 6576., 6648., 4137., 4182., 5172., 7296., 7368., 7440., 7512., 4677., 4722., 5816., 8198., 8276., 8354., 8432., 5240., 5288., 6488., 9134., 9212., 9290., 9368., 5816., 5864., 3156., 4353., 4398., 4443., 4488., 2715., 2742., 3552., 4893., 4938., 4983., 5028., 3039., 3066., 3948., 5433., 5478., 5523., 5568., 3363., 3390.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,  670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,  870.,  880.,  890.,  900.,  910.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8652.,  9120., 12171., 12864., 12306., 13008., 12441., 13152., 12576., 13296.,  7800.,  8274.,  7884.,  8364.,  9804., 10344., 13791., 14592., 13926., 14736., 14061., 14880., 14196., 15024.,  8808.,  9354.,  8892.,  9444., 11008., 11632., 15472., 16396., 15616., 16552., 15760., 16708., 15904., 16864.,  9848., 10480.,  9936., 10576., 12256., 12976., 17200., 18268., 17344., 18424., 17488., 18580., 17632., 18736., 10904., 11632., 10992., 11728.,  5844.,  6312.,  8013.,  8706.,  8094.,  8796.,  8175.,  8886.,  8256.,  8976.,  4956.,  5430.,  5004.,  5484.,  6564.,  7104.,  8985.,  9786.,  9066.,  9876.,  9147.,  9966.,  9228., 10056.,  5532.,  6078.,  5580.,  6132.,  7284.,  7896.,  9957., 10866., 10038., 10956., 10119., 11046., 10200., 11136.,  6108.,  6726.,  6156.,  6780.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,  712.,  840.,  728.,  860.,  824.,  980.,  840., 1000.,  856., 1020.,  872., 1040.,  888., 1060.,  904., 1080.,  920., 1100., 1016., 1220., 1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320., 1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520., 1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720., 1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820., 1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020., 1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220., 1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16836., 17304., 17772., 18240., 17889., 18454., 19019., 19584., 18150., 18724., 19298., 19872., 18411., 18994., 19577., 20160., 18672., 19264., 19856., 20448.,  9878., 10224., 10570., 10916., 10040., 10392., 10744., 11096.,  8060.,  8344.,  8628.,  8912., 11037., 11454., 11871., 12288., 11298., 11724., 12150., 12576., 11559., 11994., 12429., 12864., 11820., 12264., 12708., 13152.,  7086.,  7376.,  7666.,  7956.,  7248.,  7544.,  7840.,  8136., 10384., 10752., 11120., 11488., 14276., 14816., 15356., 15896., 14552., 15104., 15656., 16208., 14828., 15392., 15956., 16520., 15104., 15680., 16256., 16832.,  9080.,  9456.,  9832., 10208.,  9248.,  9632., 10016., 10400., 12784., 13248., 13712., 14176., 17588., 18272., 18956., 19640., 17864., 18560., 19256., 19952., 18140., 18848., 19556., 20264., 18416., 19136., 19856., 20576., 11096., 11568., 12040., 12512., 11264., 11744., 12224., 12704., 11220., 11688., 12156., 12624., 11109., 11674., 12239., 12804., 11262., 11836., 12410., 12984., 11415., 11998., 12581., 13164., 11568., 12160., 12752., 13344.,  5726.,  6072.,  6418.,  6764.,  5816.,  6168.,  6520.,  6872.,  4652.,  4936.,  5220.,  5504.,  6033.,  6450.,  6867.,  7284.,  6186.,  6612.,  7038.,  7464.,  6339.,  6774.,  7209.,  7644.,  6492.,  6936.,  7380.,  7824.,  3606.,  3896.,  4186.,  4476.,  3696.,  3992.,  4288.,  4584.,  6020.,  6376.,  6732.,  7088.,  7869.,  8394.,  8919.,  9444.,  8022.,  8556.,  9090.,  9624.,  8175.,  8718.,  9261.,  9804.,  8328.,  8880.,  9432.,  9984.,  4686.,  5048.,  5410.,  5772.,  4776.,  5144.,  5512.,  5880.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328., 1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640., 1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648., 1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040., 1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808., 1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440., 1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128., 2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640., 1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448., 2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040., 2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608., 2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440., 2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928., 3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640., 2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248., 3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040., 2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568., 3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440., 3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728., 4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9069.,  9120., 12792., 12864., 12936., 13008., 13080., 13152., 13224., 13296.,  8229.,  8274.,  8319.,  8364., 10293., 10344., 14520., 14592., 14664., 14736., 14808., 14880., 14952., 15024.,  9309.,  9354.,  9399.,  9444., 11576., 11632., 16318., 16396., 16474., 16552., 16630., 16708., 16786., 16864., 10432., 10480., 10528., 10576., 12920., 12976., 18190., 18268., 18346., 18424., 18502., 18580., 18658., 18736., 11584., 11632., 11680., 11728.,  6279.,  6312.,  8661.,  8706.,  8751.,  8796.,  8841.,  8886.,  8931.,  8976.,  5403.,  5430.,  5457.,  5484.,  7071.,  7104.,  9741.,  9786.,  9831.,  9876.,  9921.,  9966., 10011., 10056.,  6051.,  6078.,  6105.,  6132.,  7863.,  7896., 10821., 10866., 10911., 10956., 11001., 11046., 11091., 11136.,  6699.,  6726.,  6753.,  6780.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1210., 1220., 1230., 1240., 1250., 1260., 1270., 1280., 1290., 1300., 1310., 1320., 1330., 1340., 1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1690., 1700., 1710., 1720., 1730., 1740., 1750., 1760., 1770., 1780., 1790., 1800., 1810., 1820., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2170., 2180., 2190., 2200., 2210., 2220., 2230., 2240., 2250., 2260., 2270., 2280., 2290., 2300.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17208., 18138., 17304., 18240., 18319., 19440., 18454., 19584., 18589., 19728., 18724., 19872., 18859., 20016., 18994., 20160., 19129., 20304., 19264., 20448., 10140., 10826., 10224., 10916., 10308., 11006., 10392., 11096.,  8248.,  8810.,  8344.,  8912., 11319., 12144., 11454., 12288., 11589., 12432., 11724., 12576., 11859., 12720., 11994., 12864., 12129., 13008., 12264., 13152.,  7292.,  7866.,  7376.,  7956.,  7460.,  8046.,  7544.,  8136., 10648., 11376., 10752., 11488., 14672., 15740., 14816., 15896., 14960., 16052., 15104., 16208., 15248., 16364., 15392., 16520., 15536., 16676., 15680., 16832.,  9368., 10112.,  9456., 10208.,  9544., 10304.,  9632., 10400., 13144., 14064., 13248., 14176., 18128., 19484., 18272., 19640., 18416., 19796., 18560., 19952., 18704., 20108., 18848., 20264., 18992., 20420., 19136., 20576., 11480., 12416., 11568., 12512., 11656., 12608., 11744., 12704., 11628., 12558., 11688., 12624., 11593., 12714., 11674., 12804., 11755., 12894., 11836., 12984., 11917., 13074., 11998., 13164., 12079., 13254., 12160., 13344.,  6024.,  6710.,  6072.,  6764.,  6120.,  6818.,  6168.,  6872.,  4876.,  5438.,  4936.,  5504.,  6369.,  7194.,  6450.,  7284.,  6531.,  7374.,  6612.,  7464.,  6693.,  7554.,  6774.,  7644.,  6855.,  7734.,  6936.,  7824.,  3848.,  4422.,  3896.,  4476.,  3944.,  4530.,  3992.,  4584.,  6316.,  7022.,  6376.,  7088.,  8313.,  9354.,  8394.,  9444.,  8475.,  9534.,  8556.,  9624.,  8637.,  9714.,  8718.,  9804.,  8799.,  9894.,  8880.,  9984.,  5000.,  5718.,  5048.,  5772.,  5096.,  5826.,  5144.,  5880.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1248., 1460., 1264., 1480., 1280., 1500., 1296., 1520., 1312., 1540., 1328., 1560., 1344., 1580., 1360., 1600., 1376., 1620., 1392., 1640., 1408., 1660., 1424., 1680., 1440., 1700., 1456., 1720., 1632., 1940., 1648., 1960., 1664., 1980., 1680., 2000., 1696., 2020., 1712., 2040., 1728., 2060., 1744., 2080., 1760., 2100., 1776., 2120., 1792., 2140., 1808., 2160., 1824., 2180., 1840., 2200., 2016., 2420., 2032., 2440., 2048., 2460., 2064., 2480., 2080., 2500., 2096., 2520., 2112., 2540., 2128., 2560., 2144., 2580., 2160., 2600., 2176., 2620., 2192., 2640., 2208., 2660., 2224., 2680., 2400., 2900., 2416., 2920., 2432., 2940., 2448., 2960., 2464., 2980., 2480., 3000., 2496., 3020., 2512., 3040., 2528., 3060., 2544., 3080., 2560., 3100., 2576., 3120., 2592., 3140., 2608., 3160., 2784., 3380., 2800., 3400., 2816., 3420., 2832., 3440., 2848., 3460., 2864., 3480., 2880., 3500., 2896., 3520., 2912., 3540., 2928., 3560., 2944., 3580., 2960., 3600., 2976., 3620., 2992., 3640., 3168., 3860., 3184., 3880., 3200., 3900., 3216., 3920., 3232., 3940., 3248., 3960., 3264., 3980., 3280., 4000., 3296., 4020., 3312., 4040., 3328., 4060., 3344., 4080., 3360., 4100., 3376., 4120., 3552., 4340., 3568., 4360., 3584., 4380., 3600., 4400., 3616., 4420., 3632., 4440., 3648., 4460., 3664., 4480., 3680., 4500., 3696., 4520., 3712., 4540., 3728., 4560., 3744., 4580., 3760., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14542., 14960., 15378., 15796., 14728., 15152., 15576., 16000., 14397., 14878., 15359., 15840., 14658., 15148., 15638., 16128., 14919., 15418., 15917., 16416., 15180., 15688., 16196., 16704., 15441., 15958., 16475., 16992., 15702., 16228., 16754., 17280., 15963., 16498., 17033., 17568., 16224., 16768., 17312., 17856.,  7946.,  8248.,  8550.,  8852.,  8108.,  8416.,  8724.,  9032.,  8270.,  8584.,  8898.,  9212.,  8432.,  8752.,  9072.,  9392.,  7998.,  8304.,  8610.,  8916.,  8184.,  8496.,  8808.,  9120., 10677., 11118., 11559., 12000., 10938., 11388., 11838., 12288., 11199., 11658., 12117., 12576., 11460., 11928., 12396., 12864., 11721., 12198., 12675., 13152., 11982., 12468., 12954., 13440., 12243., 12738., 13233., 13728., 12504., 13008., 13512., 14016.,  7098.,  7416.,  7734.,  8052.,  7260.,  7584.,  7908.,  8232.,  7422.,  7752.,  8082.,  8412.,  7584.,  7920.,  8256.,  8592., 12632., 13104., 13576., 14048., 12832., 13312., 13792., 14272., 17140., 17824., 18508., 19192., 17416., 18112., 18808., 19504., 17692., 18400., 19108., 19816., 17968., 18688., 19408., 20128., 18244., 18976., 19708., 20440., 18520., 19264., 20008., 20752., 18796., 19552., 20308., 21064., 19072., 19840., 20608., 21376., 11080., 11568., 12056., 12544., 11248., 11744., 12240., 12736., 11416., 11920., 12424., 12928., 11584., 12096., 12608., 13120., 14744., 15280., 15816., 16352., 14944., 15488., 16032., 16576., 18900., 19616., 20332., 21048., 19176., 19904., 20632., 21360., 19452., 20192., 20932., 21672., 19728., 20480., 21232., 21984., 20004., 20768., 21532., 22296., 20280., 21056., 21832., 22608., 20556., 21344., 22132., 22920., 20832., 21632., 22432., 23232., 11272., 11696., 12120., 12544., 11440., 11872., 12304., 12736., 11608., 12048., 12488., 12928., 11776., 12224., 12672., 13120.,  9526.,  9944., 10362., 10780.,  9640., 10064., 10488., 10912.,  8625.,  9106.,  9587., 10068.,  8778.,  9268.,  9758., 10248.,  8931.,  9430.,  9929., 10428.,  9084.,  9592., 10100., 10608.,  9237.,  9754., 10271., 10788.,  9390.,  9916., 10442., 10968.,  9543., 10078., 10613., 11148.,  9696., 10240., 10784., 11328.,  4322.,  4624.,  4926.,  5228.,  4412.,  4720.,  5028.,  5336.,  4502.,  4816.,  5130.,  5444.,  4592.,  4912.,  5232.,  5552.,  4326.,  4632.,  4938.,  5244.,  4440.,  4752.,  5064.,  5376.,  5385.,  5826.,  6267.,  6708.,  5538.,  5988.,  6438.,  6888.,  5691.,  6150.,  6609.,  7068.,  5844.,  6312.,  6780.,  7248.,  5997.,  6474.,  6951.,  7428.,  6150.,  6636.,  7122.,  7608.,  6303.,  6798.,  7293.,  7788.,  6456.,  6960.,  7464.,  7968.,  3282.,  3600.,  3918.,  4236.,  3372.,  3696.,  4020.,  4344.,  3462.,  3792.,  4122.,  4452.,  3552.,  3888.,  4224.,  4560.,  7062.,  7512.,  7962.,  8412.,  7176.,  7632.,  8088.,  8544.,  9057.,  9714., 10371., 11028.,  9210.,  9876., 10542., 11208.,  9363., 10038., 10713., 11388.,  9516., 10200., 10884., 11568.,  9669., 10362., 11055., 11748.,  9822., 10524., 11226., 11928.,  9975., 10686., 11397., 12108., 10128., 10848., 11568., 12288.,  5442.,  5904.,  6366.,  6828.,  5532.,  6000.,  6468.,  6936.,  5622.,  6096.,  6570.,  7044.,  5712.,  6192.,  6672.,  7152.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2284., 2496., 2708., 2920., 2312., 2528., 2744., 2960., 2340., 2560., 2780., 3000., 2368., 2592., 2816., 3040., 2396., 2624., 2852., 3080., 2424., 2656., 2888., 3120., 2452., 2688., 2924., 3160., 2480., 2720., 2960., 3200., 2508., 2752., 2996., 3240., 2536., 2784., 3032., 3280., 2564., 2816., 3068., 3320., 2592., 2848., 3104., 3360., 2620., 2880., 3140., 3400., 2648., 2912., 3176., 3440., 2956., 3264., 3572., 3880., 2984., 3296., 3608., 3920., 3012., 3328., 3644., 3960., 3040., 3360., 3680., 4000., 3068., 3392., 3716., 4040., 3096., 3424., 3752., 4080., 3124., 3456., 3788., 4120., 3152., 3488., 3824., 4160., 3180., 3520., 3860., 4200., 3208., 3552., 3896., 4240., 3236., 3584., 3932., 4280., 3264., 3616., 3968., 4320., 3292., 3648., 4004., 4360., 3320., 3680., 4040., 4400., 3628., 4032., 4436., 4840., 3656., 4064., 4472., 4880., 3684., 4096., 4508., 4920., 3712., 4128., 4544., 4960., 3740., 4160., 4580., 5000., 3768., 4192., 4616., 5040., 3796., 4224., 4652., 5080., 3824., 4256., 4688., 5120., 3852., 4288., 4724., 5160., 3880., 4320., 4760., 5200., 3908., 4352., 4796., 5240., 3936., 4384., 4832., 5280., 3964., 4416., 4868., 5320., 3992., 4448., 4904., 5360., 4300., 4800., 5300., 5800., 4328., 4832., 5336., 5840., 4356., 4864., 5372., 5880., 4384., 4896., 5408., 5920., 4412., 4928., 5444., 5960., 4440., 4960., 5480., 6000., 4468., 4992., 5516., 6040., 4496., 5024., 5552., 6080., 4524., 5056., 5588., 6120., 4552., 5088., 5624., 6160., 4580., 5120., 5660., 6200., 4608., 5152., 5696., 6240., 4636., 5184., 5732., 6280., 4664., 5216., 5768., 6320., 4972., 5568., 6164., 6760., 5000., 5600., 6200., 6800., 5028., 5632., 6236., 6840., 5056., 5664., 6272., 6880., 5084., 5696., 6308., 6920., 5112., 5728., 6344., 6960., 5140., 5760., 6380., 7000., 5168., 5792., 6416., 7040., 5196., 5824., 6452., 7080., 5224., 5856., 6488., 7120., 5252., 5888., 6524., 7160., 5280., 5920., 6560., 7200., 5308., 5952., 6596., 7240., 5336., 5984., 6632., 7280., 5644., 6336., 7028., 7720., 5672., 6368., 7064., 7760., 5700., 6400., 7100., 7800., 5728., 6432., 7136., 7840., 5756., 6464., 7172., 7880., 5784., 6496., 7208., 7920., 5812., 6528., 7244., 7960., 5840., 6560., 7280., 8000., 5868., 6592., 7316., 8040., 5896., 6624., 7352., 8080., 5924., 6656., 7388., 8120., 5952., 6688., 7424., 8160., 5980., 6720., 7460., 8200., 6008., 6752., 7496., 8240., 6316., 7104., 7892., 8680., 6344., 7136., 7928., 8720., 6372., 7168., 7964., 8760., 6400., 7200., 8000., 8800., 6428., 7232., 8036., 8840., 6456., 7264., 8072., 8880., 6484., 7296., 8108., 8920., 6512., 7328., 8144., 8960., 6540., 7360., 8180., 9000., 6568., 7392., 8216., 9040., 6596., 7424., 8252., 9080., 6624., 7456., 8288., 9120., 6652., 7488., 8324., 9160., 6680., 7520., 8360., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18087., 18138., 18189., 18240., 19368., 19440., 19512., 19584., 19656., 19728., 19800., 19872., 19944., 20016., 20088., 20160., 20232., 20304., 20376., 20448., 10781., 10826., 10871., 10916., 10961., 11006., 11051., 11096.,  8759.,  8810.,  8861.,  8912., 12072., 12144., 12216., 12288., 12360., 12432., 12504., 12576., 12648., 12720., 12792., 12864., 12936., 13008., 13080., 13152.,  7821.,  7866.,  7911.,  7956.,  8001.,  8046.,  8091.,  8136., 11320., 11376., 11432., 11488., 15662., 15740., 15818., 15896., 15974., 16052., 16130., 16208., 16286., 16364., 16442., 16520., 16598., 16676., 16754., 16832., 10064., 10112., 10160., 10208., 10256., 10304., 10352., 10400., 14008., 14064., 14120., 14176., 19406., 19484., 19562., 19640., 19718., 19796., 19874., 19952., 20030., 20108., 20186., 20264., 20342., 20420., 20498., 20576., 12368., 12416., 12464., 12512., 12560., 12608., 12656., 12704., 12525., 12558., 12591., 12624., 12669., 12714., 12759., 12804., 12849., 12894., 12939., 12984., 13029., 13074., 13119., 13164., 13209., 13254., 13299., 13344.,  6683.,  6710.,  6737.,  6764.,  6791.,  6818.,  6845.,  6872.,  5405.,  5438.,  5471.,  5504.,  7149.,  7194.,  7239.,  7284.,  7329.,  7374.,  7419.,  7464.,  7509.,  7554.,  7599.,  7644.,  7689.,  7734.,  7779.,  7824.,  4395.,  4422.,  4449.,  4476.,  4503.,  4530.,  4557.,  4584.,  6989.,  7022.,  7055.,  7088.,  9309.,  9354.,  9399.,  9444.,  9489.,  9534.,  9579.,  9624.,  9669.,  9714.,  9759.,  9804.,  9849.,  9894.,  9939.,  9984.,  5691.,  5718.,  5745.,  5772.,  5799.,  5826.,  5853.,  5880.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1450., 1460., 1470., 1480., 1490., 1500., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1930., 1940., 1950., 1960., 1970., 1980., 1990., 2000., 2010., 2020., 2030., 2040., 2050., 2060., 2070., 2080., 2090., 2100., 2110., 2120., 2130., 2140., 2150., 2160., 2170., 2180., 2190., 2200., 2410., 2420., 2430., 2440., 2450., 2460., 2470., 2480., 2490., 2500., 2510., 2520., 2530., 2540., 2550., 2560., 2570., 2580., 2590., 2600., 2610., 2620., 2630., 2640., 2650., 2660., 2670., 2680., 2890., 2900., 2910., 2920., 2930., 2940., 2950., 2960., 2970., 2980., 2990., 3000., 3010., 3020., 3030., 3040., 3050., 3060., 3070., 3080., 3090., 3100., 3110., 3120., 3130., 3140., 3150., 3160., 3370., 3380., 3390., 3400., 3410., 3420., 3430., 3440., 3450., 3460., 3470., 3480., 3490., 3500., 3510., 3520., 3530., 3540., 3550., 3560., 3570., 3580., 3590., 3600., 3610., 3620., 3630., 3640., 3850., 3860., 3870., 3880., 3890., 3900., 3910., 3920., 3930., 3940., 3950., 3960., 3970., 3980., 3990., 4000., 4010., 4020., 4030., 4040., 4050., 4060., 4070., 4080., 4090., 4100., 4110., 4120., 4330., 4340., 4350., 4360., 4370., 4380., 4390., 4400., 4410., 4420., 4430., 4440., 4450., 4460., 4470., 4480., 4490., 4500., 4510., 4520., 4530., 4540., 4550., 4560., 4570., 4580., 4590., 4600.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14864., 15694., 14960., 15796., 15056., 15898., 15152., 16000., 14743., 15696., 14878., 15840., 15013., 15984., 15148., 16128., 15283., 16272., 15418., 16416., 15553., 16560., 15688., 16704., 15823., 16848., 15958., 16992., 16093., 17136., 16228., 17280., 16363., 17424., 16498., 17568., 16633., 17712., 16768., 17856.,  8164.,  8762.,  8248.,  8852.,  8332.,  8942.,  8416.,  9032.,  8500.,  9122.,  8584.,  9212.,  8668.,  9302.,  8752.,  9392.,  8208.,  8814.,  8304.,  8916.,  8400.,  9018.,  8496.,  9120., 10983., 11856., 11118., 12000., 11253., 12144., 11388., 12288., 11523., 12432., 11658., 12576., 11793., 12720., 11928., 12864., 12063., 13008., 12198., 13152., 12333., 13296., 12468., 13440., 12603., 13584., 12738., 13728., 12873., 13872., 13008., 14016.,  7332.,  7962.,  7416.,  8052.,  7500.,  8142.,  7584.,  8232.,  7668.,  8322.,  7752.,  8412.,  7836.,  8502.,  7920.,  8592., 13000., 13936., 13104., 14048., 13208., 14160., 13312., 14272., 17680., 19036., 17824., 19192., 17968., 19348., 18112., 19504., 18256., 19660., 18400., 19816., 18544., 19972., 18688., 20128., 18832., 20284., 18976., 20440., 19120., 20596., 19264., 20752., 19408., 20908., 19552., 21064., 19696., 21220., 19840., 21376., 11480., 12448., 11568., 12544., 11656., 12640., 11744., 12736., 11832., 12832., 11920., 12928., 12008., 13024., 12096., 13120., 15176., 16240., 15280., 16352., 15384., 16464., 15488., 16576., 19472., 20892., 19616., 21048., 19760., 21204., 19904., 21360., 20048., 21516., 20192., 21672., 20336., 21828., 20480., 21984., 20624., 22140., 20768., 22296., 20912., 22452., 21056., 22608., 21200., 22764., 21344., 22920., 21488., 23076., 21632., 23232., 11608., 12448., 11696., 12544., 11784., 12640., 11872., 12736., 11960., 12832., 12048., 12928., 12136., 13024., 12224., 13120.,  9884., 10714.,  9944., 10780., 10004., 10846., 10064., 10912.,  9025.,  9978.,  9106., 10068.,  9187., 10158.,  9268., 10248.,  9349., 10338.,  9430., 10428.,  9511., 10518.,  9592., 10608.,  9673., 10698.,  9754., 10788.,  9835., 10878.,  9916., 10968.,  9997., 11058., 10078., 11148., 10159., 11238., 10240., 11328.,  4576.,  5174.,  4624.,  5228.,  4672.,  5282.,  4720.,  5336.,  4768.,  5390.,  4816.,  5444.,  4864.,  5498.,  4912.,  5552.,  4572.,  5178.,  4632.,  5244.,  4692.,  5310.,  4752.,  5376.,  5745.,  6618.,  5826.,  6708.,  5907.,  6798.,  5988.,  6888.,  6069.,  6978.,  6150.,  7068.,  6231.,  7158.,  6312.,  7248.,  6393.,  7338.,  6474.,  7428.,  6555.,  7518.,  6636.,  7608.,  6717.,  7698.,  6798.,  7788.,  6879.,  7878.,  6960.,  7968.,  3552.,  4182.,  3600.,  4236.,  3648.,  4290.,  3696.,  4344.,  3744.,  4398.,  3792.,  4452.,  3840.,  4506.,  3888.,  4560.,  7452.,  8346.,  7512.,  8412.,  7572.,  8478.,  7632.,  8544.,  9633., 10938.,  9714., 11028.,  9795., 11118.,  9876., 11208.,  9957., 11298., 10038., 11388., 10119., 11478., 10200., 11568., 10281., 11658., 10362., 11748., 10443., 11838., 10524., 11928., 10605., 12018., 10686., 12108., 10767., 12198., 10848., 12288.,  5856.,  6774.,  5904.,  6828.,  5952.,  6882.,  6000.,  6936.,  6048.,  6990.,  6096.,  7044.,  6144.,  7098.,  6192.,  7152.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2480., 2900., 2496., 2920., 2512., 2940., 2528., 2960., 2544., 2980., 2560., 3000., 2576., 3020., 2592., 3040., 2608., 3060., 2624., 3080., 2640., 3100., 2656., 3120., 2672., 3140., 2688., 3160., 2704., 3180., 2720., 3200., 2736., 3220., 2752., 3240., 2768., 3260., 2784., 3280., 2800., 3300., 2816., 3320., 2832., 3340., 2848., 3360., 2864., 3380., 2880., 3400., 2896., 3420., 2912., 3440., 3248., 3860., 3264., 3880., 3280., 3900., 3296., 3920., 3312., 3940., 3328., 3960., 3344., 3980., 3360., 4000., 3376., 4020., 3392., 4040., 3408., 4060., 3424., 4080., 3440., 4100., 3456., 4120., 3472., 4140., 3488., 4160., 3504., 4180., 3520., 4200., 3536., 4220., 3552., 4240., 3568., 4260., 3584., 4280., 3600., 4300., 3616., 4320., 3632., 4340., 3648., 4360., 3664., 4380., 3680., 4400., 4016., 4820., 4032., 4840., 4048., 4860., 4064., 4880., 4080., 4900., 4096., 4920., 4112., 4940., 4128., 4960., 4144., 4980., 4160., 5000., 4176., 5020., 4192., 5040., 4208., 5060., 4224., 5080., 4240., 5100., 4256., 5120., 4272., 5140., 4288., 5160., 4304., 5180., 4320., 5200., 4336., 5220., 4352., 5240., 4368., 5260., 4384., 5280., 4400., 5300., 4416., 5320., 4432., 5340., 4448., 5360., 4784., 5780., 4800., 5800., 4816., 5820., 4832., 5840., 4848., 5860., 4864., 5880., 4880., 5900., 4896., 5920., 4912., 5940., 4928., 5960., 4944., 5980., 4960., 6000., 4976., 6020., 4992., 6040., 5008., 6060., 5024., 6080., 5040., 6100., 5056., 6120., 5072., 6140., 5088., 6160., 5104., 6180., 5120., 6200., 5136., 6220., 5152., 6240., 5168., 6260., 5184., 6280., 5200., 6300., 5216., 6320., 5552., 6740., 5568., 6760., 5584., 6780., 5600., 6800., 5616., 6820., 5632., 6840., 5648., 6860., 5664., 6880., 5680., 6900., 5696., 6920., 5712., 6940., 5728., 6960., 5744., 6980., 5760., 7000., 5776., 7020., 5792., 7040., 5808., 7060., 5824., 7080., 5840., 7100., 5856., 7120., 5872., 7140., 5888., 7160., 5904., 7180., 5920., 7200., 5936., 7220., 5952., 7240., 5968., 7260., 5984., 7280., 6320., 7700., 6336., 7720., 6352., 7740., 6368., 7760., 6384., 7780., 6400., 7800., 6416., 7820., 6432., 7840., 6448., 7860., 6464., 7880., 6480., 7900., 6496., 7920., 6512., 7940., 6528., 7960., 6544., 7980., 6560., 8000., 6576., 8020., 6592., 8040., 6608., 8060., 6624., 8080., 6640., 8100., 6656., 8120., 6672., 8140., 6688., 8160., 6704., 8180., 6720., 8200., 6736., 8220., 6752., 8240., 7088., 8660., 7104., 8680., 7120., 8700., 7136., 8720., 7152., 8740., 7168., 8760., 7184., 8780., 7200., 8800., 7216., 8820., 7232., 8840., 7248., 8860., 7264., 8880., 7280., 8900., 7296., 8920., 7312., 8940., 7328., 8960., 7344., 8980., 7360., 9000., 7376., 9020., 7392., 9040., 7408., 9060., 7424., 9080., 7440., 9100., 7456., 9120., 7472., 9140., 7488., 9160., 7504., 9180., 7520., 9200.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17890., 18464., 19038., 19612., 18076., 18656., 19236., 19816., 18262., 18848., 19434., 20020., 18448., 19040., 19632., 20224., 15861., 16430., 16999., 17568., 16122., 16700., 17278., 17856., 16383., 16970., 17557., 18144., 16644., 17240., 17836., 18432., 16905., 17510., 18115., 18720., 17166., 17780., 18394., 19008., 17427., 18050., 18673., 19296., 17688., 18320., 18952., 19584., 17949., 18590., 19231., 19872., 18210., 18860., 19510., 20160., 18471., 19130., 19789., 20448., 18732., 19400., 20068., 20736., 18993., 19670., 20347., 21024., 19254., 19940., 20626., 21312., 19515., 20210., 20905., 21600., 19776., 20480., 21184., 21888.,  8818.,  9160.,  9502.,  9844.,  8980.,  9328.,  9676., 10024.,  9142.,  9496.,  9850., 10204.,  9304.,  9664., 10024., 10384.,  9466.,  9832., 10198., 10564.,  9628., 10000., 10372., 10744.,  9790., 10168., 10546., 10924.,  9952., 10336., 10720., 11104., 10946., 11296., 11646., 11996., 11132., 11488., 11844., 12200., 11318., 11680., 12042., 12404., 11504., 11872., 12240., 12608., 14565., 15054., 15543., 16032., 14826., 15324., 15822., 16320., 15087., 15594., 16101., 16608., 15348., 15864., 16380., 16896., 15609., 16134., 16659., 17184., 15870., 16404., 16938., 17472., 16131., 16674., 17217., 17760., 16392., 16944., 17496., 18048., 16653., 17214., 17775., 18336., 16914., 17484., 18054., 18624., 17175., 17754., 18333., 18912., 17436., 18024., 18612., 19200., 17697., 18294., 18891., 19488., 17958., 18564., 19170., 19776., 18219., 18834., 19449., 20064., 18480., 19104., 19728., 20352., 10194., 10568., 10942., 11316., 10356., 10736., 11116., 11496., 10518., 10904., 11290., 11676., 10680., 11072., 11464., 11856., 10842., 11240., 11638., 12036., 11004., 11408., 11812., 12216., 11166., 11576., 11986., 12396., 11328., 11744., 12160., 12576., 12264., 12688., 13112., 13536., 12464., 12896., 13328., 13760., 12664., 13104., 13544., 13984., 12864., 13312., 13760., 14208., 16340., 16928., 17516., 18104., 16616., 17216., 17816., 18416., 16892., 17504., 18116., 18728., 17168., 17792., 18416., 19040., 17444., 18080., 18716., 19352., 17720., 18368., 19016., 19664., 17996., 18656., 19316., 19976., 18272., 18944., 19616., 20288., 18548., 19232., 19916., 20600., 18824., 19520., 20216., 20912., 19100., 19808., 20516., 21224., 19376., 20096., 20816., 21536., 19652., 20384., 21116., 21848., 19928., 20672., 21416., 22160., 20204., 20960., 21716., 22472., 20480., 21248., 22016., 22784., 11240., 11696., 12152., 12608., 11408., 11872., 12336., 12800., 11576., 12048., 12520., 12992., 11744., 12224., 12704., 13184., 11912., 12400., 12888., 13376., 12080., 12576., 13072., 13568., 12248., 12752., 13256., 13760., 12416., 12928., 13440., 13952., 13416., 13968., 14520., 15072., 13616., 14176., 14736., 15296., 13816., 14384., 14952., 15520., 14016., 14592., 15168., 15744., 13716., 14368., 15020., 15672., 13992., 14656., 15320., 15984., 14268., 14944., 15620., 16296., 14544., 15232., 15920., 16608., 14820., 15520., 16220., 16920., 15096., 15808., 16520., 17232., 15372., 16096., 16820., 17544., 15648., 16384., 17120., 17856., 15924., 16672., 17420., 18168., 16200., 16960., 17720., 18480., 16476., 17248., 18020., 18792., 16752., 17536., 18320., 19104., 17028., 17824., 18620., 19416., 17304., 18112., 18920., 19728., 17580., 18400., 19220., 20040., 17856., 18688., 19520., 20352.,  5480.,  5808.,  6136.,  6464.,  5648.,  5984.,  6320.,  6656.,  5816.,  6160.,  6504.,  6848.,  5984.,  6336.,  6688.,  7040.,  6152.,  6512.,  6872.,  7232.,  6320.,  6688.,  7056.,  7424.,  6488.,  6864.,  7240.,  7616.,  6656.,  7040.,  7424.,  7808., 11002., 11576., 12150., 12724., 11116., 11696., 12276., 12856., 11230., 11816., 12402., 12988., 11344., 11936., 12528., 13120.,  9033.,  9602., 10171., 10740.,  9186.,  9764., 10342., 10920.,  9339.,  9926., 10513., 11100.,  9492., 10088., 10684., 11280.,  9645., 10250., 10855., 11460.,  9798., 10412., 11026., 11640.,  9951., 10574., 11197., 11820., 10104., 10736., 11368., 12000., 10257., 10898., 11539., 12180., 10410., 11060., 11710., 12360., 10563., 11222., 11881., 12540., 10716., 11384., 12052., 12720., 10869., 11546., 12223., 12900., 11022., 11708., 12394., 13080., 11175., 11870., 12565., 13260., 11328., 12032., 12736., 13440.,  4714.,  5056.,  5398.,  5740.,  4804.,  5152.,  5500.,  5848.,  4894.,  5248.,  5602.,  5956.,  4984.,  5344.,  5704.,  6064.,  5074.,  5440.,  5806.,  6172.,  5164.,  5536.,  5908.,  6280.,  5254.,  5632.,  6010.,  6388.,  5344.,  5728.,  6112.,  6496.,  6746.,  7096.,  7446.,  7796.,  6860.,  7216.,  7572.,  7928.,  6974.,  7336.,  7698.,  8060.,  7088.,  7456.,  7824.,  8192.,  8697.,  9186.,  9675., 10164.,  8850.,  9348.,  9846., 10344.,  9003.,  9510., 10017., 10524.,  9156.,  9672., 10188., 10704.,  9309.,  9834., 10359., 10884.,  9462.,  9996., 10530., 11064.,  9615., 10158., 10701., 11244.,  9768., 10320., 10872., 11424.,  9921., 10482., 11043., 11604., 10074., 10644., 11214., 11784., 10227., 10806., 11385., 11964., 10380., 10968., 11556., 12144., 10533., 11130., 11727., 12324., 10686., 11292., 11898., 12504., 10839., 11454., 12069., 12684., 10992., 11616., 12240., 12864.,  5706.,  6080.,  6454.,  6828.,  5796.,  6176.,  6556.,  6936.,  5886.,  6272.,  6658.,  7044.,  5976.,  6368.,  6760.,  7152.,  6066.,  6464.,  6862.,  7260.,  6156.,  6560.,  6964.,  7368.,  6246.,  6656.,  7066.,  7476.,  6336.,  6752.,  7168.,  7584.,  7354.,  7736.,  8118.,  8500.,  7468.,  7856.,  8244.,  8632.,  7582.,  7976.,  8370.,  8764.,  7696.,  8096.,  8496.,  8896.,  9513., 10050., 10587., 11124.,  9666., 10212., 10758., 11304.,  9819., 10374., 10929., 11484.,  9972., 10536., 11100., 11664., 10125., 10698., 11271., 11844., 10278., 10860., 11442., 12024., 10431., 11022., 11613., 12204., 10584., 11184., 11784., 12384., 10737., 11346., 11955., 12564., 10890., 11508., 12126., 12744., 11043., 11670., 12297., 12924., 11196., 11832., 12468., 13104., 11349., 11994., 12639., 13284., 11502., 12156., 12810., 13464., 11655., 12318., 12981., 13644., 11808., 12480., 13152., 13824.,  6186.,  6592.,  6998.,  7404.,  6276.,  6688.,  7100.,  7512.,  6366.,  6784.,  7202.,  7620.,  6456.,  6880.,  7304.,  7728.,  6546.,  6976.,  7406.,  7836.,  6636.,  7072.,  7508.,  7944.,  6726.,  7168.,  7610.,  8052.,  6816.,  7264.,  7712.,  8160.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4540.,  4960.,  5380.,  5800.,  4568.,  4992.,  5416.,  5840.,  4596.,  5024.,  5452.,  5880.,  4624.,  5056.,  5488.,  5920.,  4652.,  5088.,  5524.,  5960.,  4680.,  5120.,  5560.,  6000.,  4708.,  5152.,  5596.,  6040.,  4736.,  5184.,  5632.,  6080.,  4764.,  5216.,  5668.,  6120.,  4792.,  5248.,  5704.,  6160.,  4820.,  5280.,  5740.,  6200.,  4848.,  5312.,  5776.,  6240.,  4876.,  5344.,  5812.,  6280.,  4904.,  5376.,  5848.,  6320.,  4932.,  5408.,  5884.,  6360.,  4960.,  5440.,  5920.,  6400.,  4988.,  5472.,  5956.,  6440.,  5016.,  5504.,  5992.,  6480.,  5044.,  5536.,  6028.,  6520.,  5072.,  5568.,  6064.,  6560.,  5100.,  5600.,  6100.,  6600.,  5128.,  5632.,  6136.,  6640.,  5156.,  5664.,  6172.,  6680.,  5184.,  5696.,  6208.,  6720.,  5212.,  5728.,  6244.,  6760.,  5240.,  5760.,  6280.,  6800.,  5268.,  5792.,  6316.,  6840.,  5296.,  5824.,  6352.,  6880.,  5884.,  6496.,  7108.,  7720.,  5912.,  6528.,  7144.,  7760.,  5940.,  6560.,  7180.,  7800.,  5968.,  6592.,  7216.,  7840.,  5996.,  6624.,  7252.,  7880.,  6024.,  6656.,  7288.,  7920.,  6052.,  6688.,  7324.,  7960.,  6080.,  6720.,  7360.,  8000.,  6108.,  6752.,  7396.,  8040.,  6136.,  6784.,  7432.,  8080.,  6164.,  6816.,  7468.,  8120.,  6192.,  6848.,  7504.,  8160.,  6220.,  6880.,  7540.,  8200.,  6248.,  6912.,  7576.,  8240.,  6276.,  6944.,  7612.,  8280.,  6304.,  6976.,  7648.,  8320.,  6332.,  7008.,  7684.,  8360.,  6360.,  7040.,  7720.,  8400.,  6388.,  7072.,  7756.,  8440.,  6416.,  7104.,  7792.,  8480.,  6444.,  7136.,  7828.,  8520.,  6472.,  7168.,  7864.,  8560.,  6500.,  7200.,  7900.,  8600.,  6528.,  7232.,  7936.,  8640.,  6556.,  7264.,  7972.,  8680.,  6584.,  7296.,  8008.,  8720.,  6612.,  7328.,  8044.,  8760.,  6640.,  7360.,  8080.,  8800.,  7228.,  8032.,  8836.,  9640.,  7256.,  8064.,  8872.,  9680.,  7284.,  8096.,  8908.,  9720.,  7312.,  8128.,  8944.,  9760.,  7340.,  8160.,  8980.,  9800.,  7368.,  8192.,  9016.,  9840.,  7396.,  8224.,  9052.,  9880.,  7424.,  8256.,  9088.,  9920.,  7452.,  8288.,  9124.,  9960.,  7480.,  8320.,  9160., 10000.,  7508.,  8352.,  9196., 10040.,  7536.,  8384.,  9232., 10080.,  7564.,  8416.,  9268., 10120.,  7592.,  8448.,  9304., 10160.,  7620.,  8480.,  9340., 10200.,  7648.,  8512.,  9376., 10240.,  7676.,  8544.,  9412., 10280.,  7704.,  8576.,  9448., 10320.,  7732.,  8608.,  9484., 10360.,  7760.,  8640.,  9520., 10400.,  7788.,  8672.,  9556., 10440.,  7816.,  8704.,  9592., 10480.,  7844.,  8736.,  9628., 10520.,  7872.,  8768.,  9664., 10560.,  7900.,  8800.,  9700., 10600.,  7928.,  8832.,  9736., 10640.,  7956.,  8864.,  9772., 10680.,  7984.,  8896.,  9808., 10720.,  8572.,  9568., 10564., 11560.,  8600.,  9600., 10600., 11600.,  8628.,  9632., 10636., 11640.,  8656.,  9664., 10672., 11680.,  8684.,  9696., 10708., 11720.,  8712.,  9728., 10744., 11760.,  8740.,  9760., 10780., 11800.,  8768.,  9792., 10816., 11840.,  8796.,  9824., 10852., 11880.,  8824.,  9856., 10888., 11920.,  8852.,  9888., 10924., 11960.,  8880.,  9920., 10960., 12000.,  8908.,  9952., 10996., 12040.,  8936.,  9984., 11032., 12080.,  8964., 10016., 11068., 12120.,  8992., 10048., 11104., 12160.,  9020., 10080., 11140., 12200.,  9048., 10112., 11176., 12240.,  9076., 10144., 11212., 12280.,  9104., 10176., 11248., 12320.,  9132., 10208., 11284., 12360.,  9160., 10240., 11320., 12400.,  9188., 10272., 11356., 12440.,  9216., 10304., 11392., 12480.,  9244., 10336., 11428., 12520.,  9272., 10368., 11464., 12560.,  9300., 10400., 11500., 12600.,  9328., 10432., 11536., 12640.,  9916., 11104., 12292., 13480.,  9944., 11136., 12328., 13520.,  9972., 11168., 12364., 13560., 10000., 11200., 12400., 13600., 10028., 11232., 12436., 13640., 10056., 11264., 12472., 13680., 10084., 11296., 12508., 13720., 10112., 11328., 12544., 13760., 10140., 11360., 12580., 13800., 10168., 11392., 12616., 13840., 10196., 11424., 12652., 13880., 10224., 11456., 12688., 13920., 10252., 11488., 12724., 13960., 10280., 11520., 12760., 14000., 10308., 11552., 12796., 14040., 10336., 11584., 12832., 14080., 10364., 11616., 12868., 14120., 10392., 11648., 12904., 14160., 10420., 11680., 12940., 14200., 10448., 11712., 12976., 14240., 10476., 11744., 13012., 14280., 10504., 11776., 13048., 14320., 10532., 11808., 13084., 14360., 10560., 11840., 13120., 14400., 10588., 11872., 13156., 14440., 10616., 11904., 13192., 14480., 10644., 11936., 13228., 14520., 10672., 11968., 13264., 14560., 11260., 12640., 14020., 15400., 11288., 12672., 14056., 15440., 11316., 12704., 14092., 15480., 11344., 12736., 14128., 15520., 11372., 12768., 14164., 15560., 11400., 12800., 14200., 15600., 11428., 12832., 14236., 15640., 11456., 12864., 14272., 15680., 11484., 12896., 14308., 15720., 11512., 12928., 14344., 15760., 11540., 12960., 14380., 15800., 11568., 12992., 14416., 15840., 11596., 13024., 14452., 15880., 11624., 13056., 14488., 15920., 11652., 13088., 14524., 15960., 11680., 13120., 14560., 16000., 11708., 13152., 14596., 16040., 11736., 13184., 14632., 16080., 11764., 13216., 14668., 16120., 11792., 13248., 14704., 16160., 11820., 13280., 14740., 16200., 11848., 13312., 14776., 16240., 11876., 13344., 14812., 16280., 11904., 13376., 14848., 16320., 11932., 13408., 14884., 16360., 11960., 13440., 14920., 16400., 11988., 13472., 14956., 16440., 12016., 13504., 14992., 16480., 12604., 14176., 15748., 17320., 12632., 14208., 15784., 17360., 12660., 14240., 15820., 17400., 12688., 14272., 15856., 17440., 12716., 14304., 15892., 17480., 12744., 14336., 15928., 17520., 12772., 14368., 15964., 17560., 12800., 14400., 16000., 17600., 12828., 14432., 16036., 17640., 12856., 14464., 16072., 17680., 12884., 14496., 16108., 17720., 12912., 14528., 16144., 17760., 12940., 14560., 16180., 17800., 12968., 14592., 16216., 17840., 12996., 14624., 16252., 17880., 13024., 14656., 16288., 17920., 13052., 14688., 16324., 17960., 13080., 14720., 16360., 18000., 13108., 14752., 16396., 18040., 13136., 14784., 16432., 18080., 13164., 14816., 16468., 18120., 13192., 14848., 16504., 18160., 13220., 14880., 16540., 18200., 13248., 14912., 16576., 18240., 13276., 14944., 16612., 18280., 13304., 14976., 16648., 18320., 13332., 15008., 16684., 18360., 13360., 15040., 16720., 18400.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10377., 10476., 13318., 13444.,  9558.,  9648.,  9738., 11763., 11862., 15082., 15208., 10818., 10908., 10998., 13220., 13328., 16936., 17072., 12128., 12224., 12320., 14732., 14840., 18840., 18976., 13472., 13568., 13664.,  7101.,  7164.,  8950.,  9028.,  6282.,  6336.,  6390.,  7983.,  8046., 10042., 10120.,  7038.,  7092.,  7146.,  8865.,  8928., 11134., 11212.,  7794.,  7848.,  7902.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,  596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,  766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996., 1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166., 1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8799.,  9234.,  8988.,  9432., 11208., 11788., 11448., 12040.,  7929.,  8364.,  8100.,  8544.,  8271.,  8724., 11445., 12006., 11634., 12204., 14568., 15316., 14808., 15568., 10323., 10884., 10494., 11064., 10665., 11244., 14212., 14920., 14416., 15136., 18080., 19024., 18336., 19296., 12796., 13504., 12976., 13696., 13156., 13888.,  9004.,  9496.,  9208.,  9712., 13600., 14384., 13856., 14656.,  8020.,  8512.,  8200.,  8704.,  8380.,  8896.,  5319.,  5754.,  5436.,  5880.,  6568.,  7148.,  6712.,  7304.,  4449.,  4884.,  4548.,  4992.,  4647.,  5100.,  6957.,  7518.,  7074.,  7644.,  8584.,  9332.,  8728.,  9488.,  5835.,  6396.,  5934.,  6504.,  6033.,  6612.,  8595.,  9282.,  8712.,  9408., 10600., 11516., 10744., 11672.,  7221.,  7908.,  7320.,  8016.,  7419.,  8124.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,  808.,  952.,  824.,  972.,  952., 1132.,  968., 1152.,  984., 1172., 1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412., 1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512., 1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752., 1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992., 1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092., 1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332., 1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572., 2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9291.,  9534.,  9777., 10020.,  9660.,  9912., 10164., 10416., 11852., 12176., 12500., 12824., 12320., 12656., 12992., 13328.,  8319.,  8562.,  8805.,  9048.,  8652.,  8904.,  9156.,  9408.,  8985.,  9246.,  9507.,  9768., 14457., 14826., 15195., 15564., 14826., 15204., 15582., 15960., 18404., 18896., 19388., 19880., 18872., 19376., 19880., 20384., 12981., 13350., 13719., 14088., 13314., 13692., 14070., 14448., 13647., 14034., 14421., 14808., 17988., 18440., 18892., 19344., 18384., 18848., 19312., 19776., 21776., 22336., 22896., 23456., 22272., 22848., 23424., 24000., 16180., 16632., 17084., 17536., 16528., 16992., 17456., 17920., 15532., 15944., 16356., 16768.,  8812.,  9048.,  9284.,  9520.,  9208.,  9456.,  9704.,  9952., 14512., 14912., 15312., 15712., 15008., 15424., 15840., 16256.,  7868.,  8104.,  8340.,  8576.,  8216.,  8464.,  8712.,  8960.,  8564.,  8824.,  9084.,  9344.,  5403.,  5646.,  5889.,  6132.,  5628.,  5880.,  6132.,  6384.,  6668.,  6992.,  7316.,  7640.,  6944.,  7280.,  7616.,  7952.,  4431.,  4674.,  4917.,  5160.,  4620.,  4872.,  5124.,  5376.,  4809.,  5070.,  5331.,  5592.,  8553.,  8922.,  9291.,  9660.,  8778.,  9156.,  9534.,  9912., 10532., 11024., 11516., 12008., 10808., 11312., 11816., 12320.,  7077.,  7446.,  7815.,  8184.,  7266.,  7644.,  8022.,  8400.,  7455.,  7842.,  8229.,  8616., 10871., 11302., 11733., 12164., 11096., 11536., 11976., 12416., 12988., 13520., 14052., 14584., 13264., 13808., 14352., 14896.,  9147.,  9578., 10009., 10440.,  9336.,  9776., 10216., 10656.,  9205.,  9590.,  9975., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520., 1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864., 1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904., 2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344., 1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064., 2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824., 2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448., 2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024., 2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832., 3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504., 2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992., 3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984., 2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376., 3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184., 3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760., 4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664., 3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144., 4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144., 3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304., 4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9135.,  9234.,  9333.,  9432., 11662., 11788., 11914., 12040.,  8274.,  8364.,  8454.,  8544.,  8634.,  8724., 11907., 12006., 12105., 12204., 15190., 15316., 15442., 15568., 10794., 10884., 10974., 11064., 11154., 11244., 14812., 14920., 15028., 15136., 18888., 19024., 19160., 19296., 13408., 13504., 13600., 13696., 13792., 13888.,  9388.,  9496.,  9604.,  9712., 14248., 14384., 14520., 14656.,  8416.,  8512.,  8608.,  8704.,  8800.,  8896.,  5691.,  5754.,  5817.,  5880.,  7070.,  7148.,  7226.,  7304.,  4830.,  4884.,  4938.,  4992.,  5046.,  5100.,  7455.,  7518.,  7581.,  7644.,  9254.,  9332.,  9410.,  9488.,  6342.,  6396.,  6450.,  6504.,  6558.,  6612.,  9219.,  9282.,  9345.,  9408., 11438., 11516., 11594., 11672.,  7854.,  7908.,  7962.,  8016.,  8070.,  8124.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 842.,  852.,  862.,  872.,  882.,  892.,  902.,  912.,  922.,  932.,  942.,  952.,  962.,  972., 1122., 1132., 1142., 1152., 1162., 1172., 1182., 1192., 1202., 1212., 1222., 1232., 1242., 1252., 1402., 1412., 1422., 1432., 1442., 1452., 1462., 1472., 1482., 1492., 1502., 1512., 1522., 1532., 1682., 1692., 1702., 1712., 1722., 1732., 1742., 1752., 1762., 1772., 1782., 1792., 1802., 1812., 1962., 1972., 1982., 1992., 2002., 2012., 2022., 2032., 2042., 2052., 2062., 2072., 2082., 2092., 2242., 2252., 2262., 2272., 2282., 2292., 2302., 2312., 2322., 2332., 2342., 2352., 2362., 2372., 2522., 2532., 2542., 2552., 2562., 2572., 2582., 2592., 2602., 2612., 2622., 2632., 2642., 2652.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9345.,  9822.,  9534., 10020.,  9723., 10218.,  9912., 10416., 11936., 12572., 12176., 12824., 12416., 13076., 12656., 13328.,  8391.,  8868.,  8562.,  9048.,  8733.,  9228.,  8904.,  9408.,  9075.,  9588.,  9246.,  9768., 14637., 15366., 14826., 15564., 15015., 15762., 15204., 15960., 18656., 19628., 18896., 19880., 19136., 20132., 19376., 20384., 13179., 13908., 13350., 14088., 13521., 14268., 13692., 14448., 13863., 14628., 14034., 14808., 18236., 19128., 18440., 19344., 18644., 19560., 18848., 19776., 22080., 23184., 22336., 23456., 22592., 23728., 22848., 24000., 16452., 17344., 16632., 17536., 16812., 17728., 16992., 17920., 15764., 16576., 15944., 16768.,  8844.,  9304.,  9048.,  9520.,  9252.,  9736.,  9456.,  9952., 14656., 15440., 14912., 15712., 15168., 15984., 15424., 16256.,  7924.,  8384.,  8104.,  8576.,  8284.,  8768.,  8464.,  8960.,  8644.,  9152.,  8824.,  9344.,  5529.,  6006.,  5646.,  6132.,  5763.,  6258.,  5880.,  6384.,  6848.,  7484.,  6992.,  7640.,  7136.,  7796.,  7280.,  7952.,  4575.,  5052.,  4674.,  5160.,  4773.,  5268.,  4872.,  5376.,  4971.,  5484.,  5070.,  5592.,  8805.,  9534.,  8922.,  9660.,  9039.,  9786.,  9156.,  9912., 10880., 11852., 11024., 12008., 11168., 12164., 11312., 12320.,  7347.,  8076.,  7446.,  8184.,  7545.,  8292.,  7644.,  8400.,  7743.,  8508.,  7842.,  8616., 11185., 12038., 11302., 12164., 11419., 12290., 11536., 12416., 13376., 14428., 13520., 14584., 13664., 14740., 13808., 14896.,  9479., 10332.,  9578., 10440.,  9677., 10548.,  9776., 10656.,  9491., 10252.,  9590., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1440., 1684., 1456., 1704., 1472., 1724., 1488., 1744., 1504., 1764., 1520., 1784., 1536., 1804., 1552., 1824., 1568., 1844., 1584., 1864., 1600., 1884., 1616., 1904., 1632., 1924., 1648., 1944., 1888., 2244., 1904., 2264., 1920., 2284., 1936., 2304., 1952., 2324., 1968., 2344., 1984., 2364., 2000., 2384., 2016., 2404., 2032., 2424., 2048., 2444., 2064., 2464., 2080., 2484., 2096., 2504., 2336., 2804., 2352., 2824., 2368., 2844., 2384., 2864., 2400., 2884., 2416., 2904., 2432., 2924., 2448., 2944., 2464., 2964., 2480., 2984., 2496., 3004., 2512., 3024., 2528., 3044., 2544., 3064., 2784., 3364., 2800., 3384., 2816., 3404., 2832., 3424., 2848., 3444., 2864., 3464., 2880., 3484., 2896., 3504., 2912., 3524., 2928., 3544., 2944., 3564., 2960., 3584., 2976., 3604., 2992., 3624., 3232., 3924., 3248., 3944., 3264., 3964., 3280., 3984., 3296., 4004., 3312., 4024., 3328., 4044., 3344., 4064., 3360., 4084., 3376., 4104., 3392., 4124., 3408., 4144., 3424., 4164., 3440., 4184., 3680., 4484., 3696., 4504., 3712., 4524., 3728., 4544., 3744., 4564., 3760., 4584., 3776., 4604., 3792., 4624., 3808., 4644., 3824., 4664., 3840., 4684., 3856., 4704., 3872., 4724., 3888., 4744., 4128., 5044., 4144., 5064., 4160., 5084., 4176., 5104., 4192., 5124., 4208., 5144., 4224., 5164., 4240., 5184., 4256., 5204., 4272., 5224., 4288., 5244., 4304., 5264., 4320., 5284., 4336., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14757., 15106., 15455., 15804., 15126., 15484., 15842., 16200., 15495., 15862., 16229., 16596., 15864., 16240., 16616., 16992., 15556., 15936., 16316., 16696., 16024., 16416., 16808., 17200., 16492., 16896., 17300., 17704., 16960., 17376., 17792., 18208., 13361., 13710., 14059., 14408., 13694., 14052., 14410., 14768., 14027., 14394., 14761., 15128., 14360., 14736., 15112., 15488., 10981., 11238., 11495., 11752., 11314., 11580., 11846., 12112.,  8321.,  8538.,  8755.,  8972.,  8690.,  8916.,  9142.,  9368.,  9059.,  9294.,  9529.,  9764.,  9428.,  9672.,  9916., 10160., 12916., 13248., 13580., 13912., 13384., 13728., 14072., 14416., 13852., 14208., 14564., 14920., 14320., 14688., 15056., 15424.,  7453.,  7670.,  7887.,  8104.,  7786.,  8012.,  8238.,  8464.,  8119.,  8354.,  8589.,  8824.,  8452.,  8696.,  8940.,  9184.,  8785.,  9038.,  9291.,  9544.,  9118.,  9380.,  9642.,  9904., 13820., 14200., 14580., 14960., 14216., 14608., 15000., 15392., 14612., 15016., 15420., 15824., 15008., 15424., 15840., 16256., 16560., 17024., 17488., 17952., 17056., 17536., 18016., 18496., 17552., 18048., 18544., 19040., 18048., 18560., 19072., 19584., 12300., 12680., 13060., 13440., 12648., 13040., 13432., 13824., 12996., 13400., 13804., 14208., 13344., 13760., 14176., 14592., 12348., 12712., 13076., 13440., 12696., 13072., 13448., 13824., 10188., 10520., 10852., 11184., 10584., 10928., 11272., 11616., 10980., 11336., 11692., 12048., 11376., 11744., 12112., 12480., 16240., 16768., 17296., 17824., 16736., 17280., 17824., 18368., 17232., 17792., 18352., 18912., 17728., 18304., 18880., 19456.,  8860.,  9192.,  9524.,  9856.,  9208.,  9552.,  9896., 10240.,  9556.,  9912., 10268., 10624.,  9904., 10272., 10640., 11008., 10252., 10632., 11012., 11392., 10600., 10992., 11384., 11776.,  9173.,  9522.,  9871., 10220.,  9398.,  9756., 10114., 10472.,  9623.,  9990., 10357., 10724.,  9848., 10224., 10600., 10976.,  9476.,  9856., 10236., 10616.,  9752., 10144., 10536., 10928., 10028., 10432., 10836., 11240., 10304., 10720., 11136., 11552.,  7777.,  8126.,  8475.,  8824.,  7966.,  8324.,  8682.,  9040.,  8155.,  8522.,  8889.,  9256.,  8344.,  8720.,  9096.,  9472.,  6869.,  7126.,  7383.,  7640.,  7058.,  7324.,  7590.,  7856.,  4849.,  5066.,  5283.,  5500.,  5074.,  5300.,  5526.,  5752.,  5299.,  5534.,  5769.,  6004.,  5524.,  5768.,  6012.,  6256.,  7604.,  7936.,  8268.,  8600.,  7880.,  8224.,  8568.,  8912.,  8156.,  8512.,  8868.,  9224.,  8432.,  8800.,  9168.,  9536.,  3981.,  4198.,  4415.,  4632.,  4170.,  4396.,  4622.,  4848.,  4359.,  4594.,  4829.,  5064.,  4548.,  4792.,  5036.,  5280.,  4737.,  4990.,  5243.,  5496.,  4926.,  5188.,  5450.,  5712.,  7949.,  8290.,  8631.,  8972.,  8174.,  8524.,  8874.,  9224.,  8399.,  8758.,  9117.,  9476.,  8624.,  8992.,  9360.,  9728.,  9444.,  9856., 10268., 10680.,  9720., 10144., 10568., 10992.,  9996., 10432., 10868., 11304., 10272., 10720., 11168., 11616.,  6585.,  6926.,  7267.,  7608.,  6774.,  7124.,  7474.,  7824.,  6963.,  7322.,  7681.,  8040.,  7152.,  7520.,  7888.,  8256.,  7021.,  7334.,  7647.,  7960.,  7210.,  7532.,  7854.,  8176.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2636.,  2880.,  3124.,  3368.,  2664.,  2912.,  3160.,  3408.,  2692.,  2944.,  3196.,  3448.,  2720.,  2976.,  3232.,  3488.,  2748.,  3008.,  3268.,  3528.,  2776.,  3040.,  3304.,  3568.,  2804.,  3072.,  3340.,  3608.,  2832.,  3104.,  3376.,  3648.,  2860.,  3136.,  3412.,  3688.,  2888.,  3168.,  3448.,  3728.,  2916.,  3200.,  3484.,  3768.,  2944.,  3232.,  3520.,  3808.,  2972.,  3264.,  3556.,  3848.,  3000.,  3296.,  3592.,  3888.,  3420.,  3776.,  4132.,  4488.,  3448.,  3808.,  4168.,  4528.,  3476.,  3840.,  4204.,  4568.,  3504.,  3872.,  4240.,  4608.,  3532.,  3904.,  4276.,  4648.,  3560.,  3936.,  4312.,  4688.,  3588.,  3968.,  4348.,  4728.,  3616.,  4000.,  4384.,  4768.,  3644.,  4032.,  4420.,  4808.,  3672.,  4064.,  4456.,  4848.,  3700.,  4096.,  4492.,  4888.,  3728.,  4128.,  4528.,  4928.,  3756.,  4160.,  4564.,  4968.,  3784.,  4192.,  4600.,  5008.,  4204.,  4672.,  5140.,  5608.,  4232.,  4704.,  5176.,  5648.,  4260.,  4736.,  5212.,  5688.,  4288.,  4768.,  5248.,  5728.,  4316.,  4800.,  5284.,  5768.,  4344.,  4832.,  5320.,  5808.,  4372.,  4864.,  5356.,  5848.,  4400.,  4896.,  5392.,  5888.,  4428.,  4928.,  5428.,  5928.,  4456.,  4960.,  5464.,  5968.,  4484.,  4992.,  5500.,  6008.,  4512.,  5024.,  5536.,  6048.,  4540.,  5056.,  5572.,  6088.,  4568.,  5088.,  5608.,  6128.,  4988.,  5568.,  6148.,  6728.,  5016.,  5600.,  6184.,  6768.,  5044.,  5632.,  6220.,  6808.,  5072.,  5664.,  6256.,  6848.,  5100.,  5696.,  6292.,  6888.,  5128.,  5728.,  6328.,  6928.,  5156.,  5760.,  6364.,  6968.,  5184.,  5792.,  6400.,  7008.,  5212.,  5824.,  6436.,  7048.,  5240.,  5856.,  6472.,  7088.,  5268.,  5888.,  6508.,  7128.,  5296.,  5920.,  6544.,  7168.,  5324.,  5952.,  6580.,  7208.,  5352.,  5984.,  6616.,  7248.,  5772.,  6464.,  7156.,  7848.,  5800.,  6496.,  7192.,  7888.,  5828.,  6528.,  7228.,  7928.,  5856.,  6560.,  7264.,  7968.,  5884.,  6592.,  7300.,  8008.,  5912.,  6624.,  7336.,  8048.,  5940.,  6656.,  7372.,  8088.,  5968.,  6688.,  7408.,  8128.,  5996.,  6720.,  7444.,  8168.,  6024.,  6752.,  7480.,  8208.,  6052.,  6784.,  7516.,  8248.,  6080.,  6816.,  7552.,  8288.,  6108.,  6848.,  7588.,  8328.,  6136.,  6880.,  7624.,  8368.,  6556.,  7360.,  8164.,  8968.,  6584.,  7392.,  8200.,  9008.,  6612.,  7424.,  8236.,  9048.,  6640.,  7456.,  8272.,  9088.,  6668.,  7488.,  8308.,  9128.,  6696.,  7520.,  8344.,  9168.,  6724.,  7552.,  8380.,  9208.,  6752.,  7584.,  8416.,  9248.,  6780.,  7616.,  8452.,  9288.,  6808.,  7648.,  8488.,  9328.,  6836.,  7680.,  8524.,  9368.,  6864.,  7712.,  8560.,  9408.,  6892.,  7744.,  8596.,  9448.,  6920.,  7776.,  8632.,  9488.,  7340.,  8256.,  9172., 10088.,  7368.,  8288.,  9208., 10128.,  7396.,  8320.,  9244., 10168.,  7424.,  8352.,  9280., 10208.,  7452.,  8384.,  9316., 10248.,  7480.,  8416.,  9352., 10288.,  7508.,  8448.,  9388., 10328.,  7536.,  8480.,  9424., 10368.,  7564.,  8512.,  9460., 10408.,  7592.,  8544.,  9496., 10448.,  7620.,  8576.,  9532., 10488.,  7648.,  8608.,  9568., 10528.,  7676.,  8640.,  9604., 10568.,  7704.,  8672.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9723.,  9822.,  9921., 10020., 10119., 10218., 10317., 10416., 12446., 12572., 12698., 12824., 12950., 13076., 13202., 13328.,  8778.,  8868.,  8958.,  9048.,  9138.,  9228.,  9318.,  9408.,  9498.,  9588.,  9678.,  9768., 15267., 15366., 15465., 15564., 15663., 15762., 15861., 15960., 19502., 19628., 19754., 19880., 20006., 20132., 20258., 20384., 13818., 13908., 13998., 14088., 14178., 14268., 14358., 14448., 14538., 14628., 14718., 14808., 19020., 19128., 19236., 19344., 19452., 19560., 19668., 19776., 23048., 23184., 23320., 23456., 23592., 23728., 23864., 24000., 17248., 17344., 17440., 17536., 17632., 17728., 17824., 17920., 16480., 16576., 16672., 16768.,  9196.,  9304.,  9412.,  9520.,  9628.,  9736.,  9844.,  9952., 15304., 15440., 15576., 15712., 15848., 15984., 16120., 16256.,  8288.,  8384.,  8480.,  8576.,  8672.,  8768.,  8864.,  8960.,  9056.,  9152.,  9248.,  9344.,  5943.,  6006.,  6069.,  6132.,  6195.,  6258.,  6321.,  6384.,  7406.,  7484.,  7562.,  7640.,  7718.,  7796.,  7874.,  7952.,  4998.,  5052.,  5106.,  5160.,  5214.,  5268.,  5322.,  5376.,  5430.,  5484.,  5538.,  5592.,  9471.,  9534.,  9597.,  9660.,  9723.,  9786.,  9849.,  9912., 11774., 11852., 11930., 12008., 12086., 12164., 12242., 12320.,  8022.,  8076.,  8130.,  8184.,  8238.,  8292.,  8346.,  8400.,  8454.,  8508.,  8562.,  8616., 11975., 12038., 12101., 12164., 12227., 12290., 12353., 12416., 14350., 14428., 14506., 14584., 14662., 14740., 14818., 14896., 10278., 10332., 10386., 10440., 10494., 10548., 10602., 10656., 10198., 10252., 10306., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1674., 1684., 1694., 1704., 1714., 1724., 1734., 1744., 1754., 1764., 1774., 1784., 1794., 1804., 1814., 1824., 1834., 1844., 1854., 1864., 1874., 1884., 1894., 1904., 1914., 1924., 1934., 1944., 2234., 2244., 2254., 2264., 2274., 2284., 2294., 2304., 2314., 2324., 2334., 2344., 2354., 2364., 2374., 2384., 2394., 2404., 2414., 2424., 2434., 2444., 2454., 2464., 2474., 2484., 2494., 2504., 2794., 2804., 2814., 2824., 2834., 2844., 2854., 2864., 2874., 2884., 2894., 2904., 2914., 2924., 2934., 2944., 2954., 2964., 2974., 2984., 2994., 3004., 3014., 3024., 3034., 3044., 3054., 3064., 3354., 3364., 3374., 3384., 3394., 3404., 3414., 3424., 3434., 3444., 3454., 3464., 3474., 3484., 3494., 3504., 3514., 3524., 3534., 3544., 3554., 3564., 3574., 3584., 3594., 3604., 3614., 3624., 3914., 3924., 3934., 3944., 3954., 3964., 3974., 3984., 3994., 4004., 4014., 4024., 4034., 4044., 4054., 4064., 4074., 4084., 4094., 4104., 4114., 4124., 4134., 4144., 4154., 4164., 4174., 4184., 4474., 4484., 4494., 4504., 4514., 4524., 4534., 4544., 4554., 4564., 4574., 4584., 4594., 4604., 4614., 4624., 4634., 4644., 4654., 4664., 4674., 4684., 4694., 4704., 4714., 4724., 4734., 4744., 5034., 5044., 5054., 5064., 5074., 5084., 5094., 5104., 5114., 5124., 5134., 5144., 5154., 5164., 5174., 5184., 5194., 5204., 5214., 5224., 5234., 5244., 5254., 5264., 5274., 5284., 5294., 5304.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14917., 15606., 15106., 15804., 15295., 16002., 15484., 16200., 15673., 16398., 15862., 16596., 16051., 16794., 16240., 16992., 15696., 16444., 15936., 16696., 16176., 16948., 16416., 17200., 16656., 17452., 16896., 17704., 17136., 17956., 17376., 18208., 13539., 14228., 13710., 14408., 13881., 14588., 14052., 14768., 14223., 14948., 14394., 15128., 14565., 15308., 14736., 15488., 11067., 11572., 11238., 11752., 11409., 11932., 11580., 12112.,  8349.,  8774.,  8538.,  8972.,  8727.,  9170.,  8916.,  9368.,  9105.,  9566.,  9294.,  9764.,  9483.,  9962.,  9672., 10160., 13008., 13660., 13248., 13912., 13488., 14164., 13728., 14416., 13968., 14668., 14208., 14920., 14448., 15172., 14688., 15424.,  7499.,  7924.,  7670.,  8104.,  7841.,  8284.,  8012.,  8464.,  8183.,  8644.,  8354.,  8824.,  8525.,  9004.,  8696.,  9184.,  8867.,  9364.,  9038.,  9544.,  9209.,  9724.,  9380.,  9904., 13996., 14744., 14200., 14960., 14404., 15176., 14608., 15392., 14812., 15608., 15016., 15824., 15220., 16040., 15424., 16256., 16768., 17680., 17024., 17952., 17280., 18224., 17536., 18496., 17792., 18768., 18048., 19040., 18304., 19312., 18560., 19584., 12500., 13248., 12680., 13440., 12860., 13632., 13040., 13824., 13220., 14016., 13400., 14208., 13580., 14400., 13760., 14592., 12532., 13248., 12712., 13440., 12892., 13632., 13072., 13824., 10316., 10968., 10520., 11184., 10724., 11400., 10928., 11616., 11132., 11832., 11336., 12048., 11540., 12264., 11744., 12480., 16512., 17552., 16768., 17824., 17024., 18096., 17280., 18368., 17536., 18640., 17792., 18912., 18048., 19184., 18304., 19456.,  9012.,  9664.,  9192.,  9856.,  9372., 10048.,  9552., 10240.,  9732., 10432.,  9912., 10624., 10092., 10816., 10272., 11008., 10452., 11200., 10632., 11392., 10812., 11584., 10992., 11776.,  9405., 10094.,  9522., 10220.,  9639., 10346.,  9756., 10472.,  9873., 10598.,  9990., 10724., 10107., 10850., 10224., 10976.,  9712., 10460.,  9856., 10616., 10000., 10772., 10144., 10928., 10288., 11084., 10432., 11240., 10576., 11396., 10720., 11552.,  8027.,  8716.,  8126.,  8824.,  8225.,  8932.,  8324.,  9040.,  8423.,  9148.,  8522.,  9256.,  8621.,  9364.,  8720.,  9472.,  7027.,  7532.,  7126.,  7640.,  7225.,  7748.,  7324.,  7856.,  4949.,  5374.,  5066.,  5500.,  5183.,  5626.,  5300.,  5752.,  5417.,  5878.,  5534.,  6004.,  5651.,  6130.,  5768.,  6256.,  7792.,  8444.,  7936.,  8600.,  8080.,  8756.,  8224.,  8912.,  8368.,  9068.,  8512.,  9224.,  8656.,  9380.,  8800.,  9536.,  4099.,  4524.,  4198.,  4632.,  4297.,  4740.,  4396.,  4848.,  4495.,  4956.,  4594.,  5064.,  4693.,  5172.,  4792.,  5280.,  4891.,  5388.,  4990.,  5496.,  5089.,  5604.,  5188.,  5712.,  8173.,  8846.,  8290.,  8972.,  8407.,  9098.,  8524.,  9224.,  8641.,  9350.,  8758.,  9476.,  8875.,  9602.,  8992.,  9728.,  9712., 10524.,  9856., 10680., 10000., 10836., 10144., 10992., 10288., 11148., 10432., 11304., 10576., 11460., 10720., 11616.,  6827.,  7500.,  6926.,  7608.,  7025.,  7716.,  7124.,  7824.,  7223.,  7932.,  7322.,  8040.,  7421.,  8148.,  7520.,  8256.,  7235.,  7852.,  7334.,  7960.,  7433.,  8068.,  7532.,  8176.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2864.,  3348.,  2880.,  3368.,  2896.,  3388.,  2912.,  3408.,  2928.,  3428.,  2944.,  3448.,  2960.,  3468.,  2976.,  3488.,  2992.,  3508.,  3008.,  3528.,  3024.,  3548.,  3040.,  3568.,  3056.,  3588.,  3072.,  3608.,  3088.,  3628.,  3104.,  3648.,  3120.,  3668.,  3136.,  3688.,  3152.,  3708.,  3168.,  3728.,  3184.,  3748.,  3200.,  3768.,  3216.,  3788.,  3232.,  3808.,  3248.,  3828.,  3264.,  3848.,  3280.,  3868.,  3296.,  3888.,  3760.,  4468.,  3776.,  4488.,  3792.,  4508.,  3808.,  4528.,  3824.,  4548.,  3840.,  4568.,  3856.,  4588.,  3872.,  4608.,  3888.,  4628.,  3904.,  4648.,  3920.,  4668.,  3936.,  4688.,  3952.,  4708.,  3968.,  4728.,  3984.,  4748.,  4000.,  4768.,  4016.,  4788.,  4032.,  4808.,  4048.,  4828.,  4064.,  4848.,  4080.,  4868.,  4096.,  4888.,  4112.,  4908.,  4128.,  4928.,  4144.,  4948.,  4160.,  4968.,  4176.,  4988.,  4192.,  5008.,  4656.,  5588.,  4672.,  5608.,  4688.,  5628.,  4704.,  5648.,  4720.,  5668.,  4736.,  5688.,  4752.,  5708.,  4768.,  5728.,  4784.,  5748.,  4800.,  5768.,  4816.,  5788.,  4832.,  5808.,  4848.,  5828.,  4864.,  5848.,  4880.,  5868.,  4896.,  5888.,  4912.,  5908.,  4928.,  5928.,  4944.,  5948.,  4960.,  5968.,  4976.,  5988.,  4992.,  6008.,  5008.,  6028.,  5024.,  6048.,  5040.,  6068.,  5056.,  6088.,  5072.,  6108.,  5088.,  6128.,  5552.,  6708.,  5568.,  6728.,  5584.,  6748.,  5600.,  6768.,  5616.,  6788.,  5632.,  6808.,  5648.,  6828.,  5664.,  6848.,  5680.,  6868.,  5696.,  6888.,  5712.,  6908.,  5728.,  6928.,  5744.,  6948.,  5760.,  6968.,  5776.,  6988.,  5792.,  7008.,  5808.,  7028.,  5824.,  7048.,  5840.,  7068.,  5856.,  7088.,  5872.,  7108.,  5888.,  7128.,  5904.,  7148.,  5920.,  7168.,  5936.,  7188.,  5952.,  7208.,  5968.,  7228.,  5984.,  7248.,  6448.,  7828.,  6464.,  7848.,  6480.,  7868.,  6496.,  7888.,  6512.,  7908.,  6528.,  7928.,  6544.,  7948.,  6560.,  7968.,  6576.,  7988.,  6592.,  8008.,  6608.,  8028.,  6624.,  8048.,  6640.,  8068.,  6656.,  8088.,  6672.,  8108.,  6688.,  8128.,  6704.,  8148.,  6720.,  8168.,  6736.,  8188.,  6752.,  8208.,  6768.,  8228.,  6784.,  8248.,  6800.,  8268.,  6816.,  8288.,  6832.,  8308.,  6848.,  8328.,  6864.,  8348.,  6880.,  8368.,  7344.,  8948.,  7360.,  8968.,  7376.,  8988.,  7392.,  9008.,  7408.,  9028.,  7424.,  9048.,  7440.,  9068.,  7456.,  9088.,  7472.,  9108.,  7488.,  9128.,  7504.,  9148.,  7520.,  9168.,  7536.,  9188.,  7552.,  9208.,  7568.,  9228.,  7584.,  9248.,  7600.,  9268.,  7616.,  9288.,  7632.,  9308.,  7648.,  9328.,  7664.,  9348.,  7680.,  9368.,  7696.,  9388.,  7712.,  9408.,  7728.,  9428.,  7744.,  9448.,  7760.,  9468.,  7776.,  9488.,  8240., 10068.,  8256., 10088.,  8272., 10108.,  8288., 10128.,  8304., 10148.,  8320., 10168.,  8336., 10188.,  8352., 10208.,  8368., 10228.,  8384., 10248.,  8400., 10268.,  8416., 10288.,  8432., 10308.,  8448., 10328.,  8464., 10348.,  8480., 10368.,  8496., 10388.,  8512., 10408.,  8528., 10428.,  8544., 10448.,  8560., 10468.,  8576., 10488.,  8592., 10508.,  8608., 10528.,  8624., 10548.,  8640., 10568.,  8656., 10588.,  8672., 10608.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12377., 12682., 12987., 13292., 12746., 13060., 13374., 13688., 13115., 13438., 13761., 14084., 13484., 13816., 14148., 14480., 13853., 14194., 14535., 14876., 14222., 14572., 14922., 15272., 14591., 14950., 15309., 15668., 14960., 15328., 15696., 16064., 11508., 11808., 12108., 12408., 11976., 12288., 12600., 12912., 12444., 12768., 13092., 13416., 12912., 13248., 13584., 13920., 13380., 13728., 14076., 14424., 13848., 14208., 14568., 14928., 14316., 14688., 15060., 15432., 14784., 15168., 15552., 15936., 11157., 11462., 11767., 12072., 11490., 11804., 12118., 12432., 11823., 12146., 12469., 12792., 12156., 12488., 12820., 13152., 12489., 12830., 13171., 13512., 12822., 13172., 13522., 13872., 13155., 13514., 13873., 14232., 13488., 13856., 14224., 14592.,  6973.,  7158.,  7343.,  7528.,  7306.,  7500.,  7694.,  7888.,  7639.,  7842.,  8045.,  8248.,  7972.,  8184.,  8396.,  8608.,  9425.,  9658.,  9891., 10124.,  9794., 10036., 10278., 10520., 10163., 10414., 10665., 10916., 10532., 10792., 11052., 11312., 10901., 11170., 11439., 11708., 11270., 11548., 11826., 12104., 11639., 11926., 12213., 12500., 12008., 12304., 12600., 12896., 15380., 15776., 16172., 16568., 15848., 16256., 16664., 17072., 16316., 16736., 17156., 17576., 16784., 17216., 17648., 18080., 17252., 17696., 18140., 18584., 17720., 18176., 18632., 19088., 18188., 18656., 19124., 19592., 18656., 19136., 19616., 20096.,  8493.,  8726.,  8959.,  9192.,  8826.,  9068.,  9310.,  9552.,  9159.,  9410.,  9661.,  9912.,  9492.,  9752., 10012., 10272.,  9825., 10094., 10363., 10632., 10158., 10436., 10714., 10992., 10491., 10778., 11065., 11352., 10824., 11120., 11416., 11712., 11157., 11462., 11767., 12072., 11490., 11804., 12118., 12432., 11823., 12146., 12469., 12792., 12156., 12488., 12820., 13152., 12524., 12888., 13252., 13616., 12920., 13296., 13672., 14048., 13316., 13704., 14092., 14480., 13712., 14112., 14512., 14912., 14108., 14520., 14932., 15344., 14504., 14928., 15352., 15776., 14900., 15336., 15772., 16208., 15296., 15744., 16192., 16640., 12656., 13056., 13456., 13856., 13152., 13568., 13984., 14400., 13648., 14080., 14512., 14944., 14144., 14592., 15040., 15488., 14640., 15104., 15568., 16032., 15136., 15616., 16096., 16576., 15632., 16128., 16624., 17120., 16128., 16640., 17152., 17664., 11068., 11432., 11796., 12160., 11416., 11792., 12168., 12544., 11764., 12152., 12540., 12928., 12112., 12512., 12912., 13312., 12460., 12872., 13284., 13696., 12808., 13232., 13656., 14080., 13156., 13592., 14028., 14464., 13504., 13952., 14400., 14848.,  9116.,  9448.,  9780., 10112.,  9464.,  9808., 10152., 10496.,  9812., 10168., 10524., 10880., 10160., 10528., 10896., 11264.,  9356.,  9624.,  9892., 10160.,  9752., 10032., 10312., 10592., 10148., 10440., 10732., 11024., 10544., 10848., 11152., 11456., 10940., 11256., 11572., 11888., 11336., 11664., 11992., 12320., 11732., 12072., 12412., 12752., 12128., 12480., 12832., 13184., 16112., 16640., 17168., 17696., 16608., 17152., 17696., 18240., 17104., 17664., 18224., 18784., 17600., 18176., 18752., 19328., 18096., 18688., 19280., 19872., 18592., 19200., 19808., 20416., 19088., 19712., 20336., 20960., 19584., 20224., 20864., 21504.,  8284.,  8552.,  8820.,  9088.,  8632.,  8912.,  9192.,  9472.,  8980.,  9272.,  9564.,  9856.,  9328.,  9632.,  9936., 10240.,  9676.,  9992., 10308., 10624., 10024., 10352., 10680., 11008., 10372., 10712., 11052., 11392., 10720., 11072., 11424., 11776., 11068., 11432., 11796., 12160., 11416., 11792., 12168., 12544., 11764., 12152., 12540., 12928., 12112., 12512., 12912., 13312.,  7497.,  7802.,  8107.,  8412.,  7722.,  8036.,  8350.,  8664.,  7947.,  8270.,  8593.,  8916.,  8172.,  8504.,  8836.,  9168.,  8397.,  8738.,  9079.,  9420.,  8622.,  8972.,  9322.,  9672.,  8847.,  9206.,  9565.,  9924.,  9072.,  9440.,  9808., 10176.,  6708.,  7008.,  7308.,  7608.,  6984.,  7296.,  7608.,  7920.,  7260.,  7584.,  7908.,  8232.,  7536.,  7872.,  8208.,  8544.,  7812.,  8160.,  8508.,  8856.,  8088.,  8448.,  8808.,  9168.,  8364.,  8736.,  9108.,  9480.,  8640.,  9024.,  9408.,  9792.,  6277.,  6582.,  6887.,  7192.,  6466.,  6780.,  7094.,  7408.,  6655.,  6978.,  7301.,  7624.,  6844.,  7176.,  7508.,  7840.,  7033.,  7374.,  7715.,  8056.,  7222.,  7572.,  7922.,  8272.,  7411.,  7770.,  8129.,  8488.,  7600.,  7968.,  8336.,  8704.,  4013.,  4198.,  4383.,  4568.,  4202.,  4396.,  4590.,  4784.,  4391.,  4594.,  4797.,  5000.,  4580.,  4792.,  5004.,  5216.,  5697.,  5930.,  6163.,  6396.,  5922.,  6164.,  6406.,  6648.,  6147.,  6398.,  6649.,  6900.,  6372.,  6632.,  6892.,  7152.,  6597.,  6866.,  7135.,  7404.,  6822.,  7100.,  7378.,  7656.,  7047.,  7334.,  7621.,  7908.,  7272.,  7568.,  7864.,  8160.,  9044.,  9440.,  9836., 10232.,  9320.,  9728., 10136., 10544.,  9596., 10016., 10436., 10856.,  9872., 10304., 10736., 11168., 10148., 10592., 11036., 11480., 10424., 10880., 11336., 11792., 10700., 11168., 11636., 12104., 10976., 11456., 11936., 12416.,  4765.,  4998.,  5231.,  5464.,  4954.,  5196.,  5438.,  5680.,  5143.,  5394.,  5645.,  5896.,  5332.,  5592.,  5852.,  6112.,  5521.,  5790.,  6059.,  6328.,  5710.,  5988.,  6266.,  6544.,  5899.,  6186.,  6473.,  6760.,  6088.,  6384.,  6680.,  6976.,  6277.,  6582.,  6887.,  7192.,  6466.,  6780.,  7094.,  7408.,  6655.,  6978.,  7301.,  7624.,  6844.,  7176.,  7508.,  7840.,  7097.,  7386.,  7675.,  7964.,  7322.,  7620.,  7918.,  8216.,  7547.,  7854.,  8161.,  8468.,  7772.,  8088.,  8404.,  8720.,  7997.,  8322.,  8647.,  8972.,  8222.,  8556.,  8890.,  9224.,  8447.,  8790.,  9133.,  9476.,  8672.,  9024.,  9376.,  9728.,  6836.,  7136.,  7436.,  7736.,  7112.,  7424.,  7736.,  8048.,  7388.,  7712.,  8036.,  8360.,  7664.,  8000.,  8336.,  8672.,  7940.,  8288.,  8636.,  8984.,  8216.,  8576.,  8936.,  9296.,  8492.,  8864.,  9236.,  9608.,  8768.,  9152.,  9536.,  9920.,  5941.,  6230.,  6519.,  6808.,  6130.,  6428.,  6726.,  7024.,  6319.,  6626.,  6933.,  7240.,  6508.,  6824.,  7140.,  7456.,  6697.,  7022.,  7347.,  7672.,  6886.,  7220.,  7554.,  7888.,  7075.,  7418.,  7761.,  8104.,  7264.,  7616.,  7968.,  8320.,  4765.,  4998.,  5231.,  5464.,  4954.,  5196.,  5438.,  5680.,  5143.,  5394.,  5645.,  5896.,  5332.,  5592.,  5852.,  6112.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5244.,  5728.,  6212.,  6696.,  5272.,  5760.,  6248.,  6736.,  5300.,  5792.,  6284.,  6776.,  5328.,  5824.,  6320.,  6816.,  5356.,  5856.,  6356.,  6856.,  5384.,  5888.,  6392.,  6896.,  5412.,  5920.,  6428.,  6936.,  5440.,  5952.,  6464.,  6976.,  5468.,  5984.,  6500.,  7016.,  5496.,  6016.,  6536.,  7056.,  5524.,  6048.,  6572.,  7096.,  5552.,  6080.,  6608.,  7136.,  5580.,  6112.,  6644.,  7176.,  5608.,  6144.,  6680.,  7216.,  5636.,  6176.,  6716.,  7256.,  5664.,  6208.,  6752.,  7296.,  5692.,  6240.,  6788.,  7336.,  5720.,  6272.,  6824.,  7376.,  5748.,  6304.,  6860.,  7416.,  5776.,  6336.,  6896.,  7456.,  5804.,  6368.,  6932.,  7496.,  5832.,  6400.,  6968.,  7536.,  5860.,  6432.,  7004.,  7576.,  5888.,  6464.,  7040.,  7616.,  5916.,  6496.,  7076.,  7656.,  5944.,  6528.,  7112.,  7696.,  5972.,  6560.,  7148.,  7736.,  6000.,  6592.,  7184.,  7776.,  6812.,  7520.,  8228.,  8936.,  6840.,  7552.,  8264.,  8976.,  6868.,  7584.,  8300.,  9016.,  6896.,  7616.,  8336.,  9056.,  6924.,  7648.,  8372.,  9096.,  6952.,  7680.,  8408.,  9136.,  6980.,  7712.,  8444.,  9176.,  7008.,  7744.,  8480.,  9216.,  7036.,  7776.,  8516.,  9256.,  7064.,  7808.,  8552.,  9296.,  7092.,  7840.,  8588.,  9336.,  7120.,  7872.,  8624.,  9376.,  7148.,  7904.,  8660.,  9416.,  7176.,  7936.,  8696.,  9456.,  7204.,  7968.,  8732.,  9496.,  7232.,  8000.,  8768.,  9536.,  7260.,  8032.,  8804.,  9576.,  7288.,  8064.,  8840.,  9616.,  7316.,  8096.,  8876.,  9656.,  7344.,  8128.,  8912.,  9696.,  7372.,  8160.,  8948.,  9736.,  7400.,  8192.,  8984.,  9776.,  7428.,  8224.,  9020.,  9816.,  7456.,  8256.,  9056.,  9856.,  7484.,  8288.,  9092.,  9896.,  7512.,  8320.,  9128.,  9936.,  7540.,  8352.,  9164.,  9976.,  7568.,  8384.,  9200., 10016.,  8380.,  9312., 10244., 11176.,  8408.,  9344., 10280., 11216.,  8436.,  9376., 10316., 11256.,  8464.,  9408., 10352., 11296.,  8492.,  9440., 10388., 11336.,  8520.,  9472., 10424., 11376.,  8548.,  9504., 10460., 11416.,  8576.,  9536., 10496., 11456.,  8604.,  9568., 10532., 11496.,  8632.,  9600., 10568., 11536.,  8660.,  9632., 10604., 11576.,  8688.,  9664., 10640., 11616.,  8716.,  9696., 10676., 11656.,  8744.,  9728., 10712., 11696.,  8772.,  9760., 10748., 11736.,  8800.,  9792., 10784., 11776.,  8828.,  9824., 10820., 11816.,  8856.,  9856., 10856., 11856.,  8884.,  9888., 10892., 11896.,  8912.,  9920., 10928., 11936.,  8940.,  9952., 10964., 11976.,  8968.,  9984., 11000., 12016.,  8996., 10016., 11036., 12056.,  9024., 10048., 11072., 12096.,  9052., 10080., 11108., 12136.,  9080., 10112., 11144., 12176.,  9108., 10144., 11180., 12216.,  9136., 10176., 11216., 12256.,  9948., 11104., 12260., 13416.,  9976., 11136., 12296., 13456., 10004., 11168., 12332., 13496., 10032., 11200., 12368., 13536., 10060., 11232., 12404., 13576., 10088., 11264., 12440., 13616., 10116., 11296., 12476., 13656., 10144., 11328., 12512., 13696., 10172., 11360., 12548., 13736., 10200., 11392., 12584., 13776., 10228., 11424., 12620., 13816., 10256., 11456., 12656., 13856., 10284., 11488., 12692., 13896., 10312., 11520., 12728., 13936., 10340., 11552., 12764., 13976., 10368., 11584., 12800., 14016., 10396., 11616., 12836., 14056., 10424., 11648., 12872., 14096., 10452., 11680., 12908., 14136., 10480., 11712., 12944., 14176., 10508., 11744., 12980., 14216., 10536., 11776., 13016., 14256., 10564., 11808., 13052., 14296., 10592., 11840., 13088., 14336., 10620., 11872., 13124., 14376., 10648., 11904., 13160., 14416., 10676., 11936., 13196., 14456., 10704., 11968., 13232., 14496., 11516., 12896., 14276., 15656., 11544., 12928., 14312., 15696., 11572., 12960., 14348., 15736., 11600., 12992., 14384., 15776., 11628., 13024., 14420., 15816., 11656., 13056., 14456., 15856., 11684., 13088., 14492., 15896., 11712., 13120., 14528., 15936., 11740., 13152., 14564., 15976., 11768., 13184., 14600., 16016., 11796., 13216., 14636., 16056., 11824., 13248., 14672., 16096., 11852., 13280., 14708., 16136., 11880., 13312., 14744., 16176., 11908., 13344., 14780., 16216., 11936., 13376., 14816., 16256., 11964., 13408., 14852., 16296., 11992., 13440., 14888., 16336., 12020., 13472., 14924., 16376., 12048., 13504., 14960., 16416., 12076., 13536., 14996., 16456., 12104., 13568., 15032., 16496., 12132., 13600., 15068., 16536., 12160., 13632., 15104., 16576., 12188., 13664., 15140., 16616., 12216., 13696., 15176., 16656., 12244., 13728., 15212., 16696., 12272., 13760., 15248., 16736., 13084., 14688., 16292., 17896., 13112., 14720., 16328., 17936., 13140., 14752., 16364., 17976., 13168., 14784., 16400., 18016., 13196., 14816., 16436., 18056., 13224., 14848., 16472., 18096., 13252., 14880., 16508., 18136., 13280., 14912., 16544., 18176., 13308., 14944., 16580., 18216., 13336., 14976., 16616., 18256., 13364., 15008., 16652., 18296., 13392., 15040., 16688., 18336., 13420., 15072., 16724., 18376., 13448., 15104., 16760., 18416., 13476., 15136., 16796., 18456., 13504., 15168., 16832., 18496., 13532., 15200., 16868., 18536., 13560., 15232., 16904., 18576., 13588., 15264., 16940., 18616., 13616., 15296., 16976., 18656., 13644., 15328., 17012., 18696., 13672., 15360., 17048., 18736., 13700., 15392., 17084., 18776., 13728., 15424., 17120., 18816., 13756., 15456., 17156., 18856., 13784., 15488., 17192., 18896., 13812., 15520., 17228., 18936., 13840., 15552., 17264., 18976., 14652., 16480., 18308., 20136., 14680., 16512., 18344., 20176., 14708., 16544., 18380., 20216., 14736., 16576., 18416., 20256., 14764., 16608., 18452., 20296., 14792., 16640., 18488., 20336., 14820., 16672., 18524., 20376., 14848., 16704., 18560., 20416., 14876., 16736., 18596., 20456., 14904., 16768., 18632., 20496., 14932., 16800., 18668., 20536., 14960., 16832., 18704., 20576., 14988., 16864., 18740., 20616., 15016., 16896., 18776., 20656., 15044., 16928., 18812., 20696., 15072., 16960., 18848., 20736., 15100., 16992., 18884., 20776., 15128., 17024., 18920., 20816., 15156., 17056., 18956., 20856., 15184., 17088., 18992., 20896., 15212., 17120., 19028., 20936., 15240., 17152., 19064., 20976., 15268., 17184., 19100., 21016., 15296., 17216., 19136., 21056., 15324., 17248., 19172., 21096., 15352., 17280., 19208., 21136., 15380., 17312., 19244., 21176., 15408., 17344., 19280., 21216.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7968.,  8160., 11604., 11883., 12162.,  7644.,  7824., 10080., 10272., 14673., 14952., 15231.,  9624.,  9804., 20000., 18725., 27558., 27936., 28314., 17567., 17810., 17239., 14940., 23780., 24158., 24536., 13968., 14211., 17550., 17811., 25506., 25884., 26262., 16641., 16884.,  8172.,  8328., 11811., 12036., 12261.,  7680.,  7824.,  9888., 10044., 14286., 14511., 14736.,  9264.,  9408.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15536., 15614., 15692., 15770., 15848., 15926., 16004., 16394., 16472., 16550., 16628., 16706., 16784., 16862., 17252., 17330., 17408., 17486., 17564., 17642., 17720., 18110., 18188., 18266., 18344., 18422., 18500., 18578., 18968., 19046., 19124., 19202., 19280., 19358., 19436., 19826., 19904., 19982., 20060., 20138., 20216., 20294., 20684., 20762., 20840., 20918., 20996., 21074., 21152.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11144., 11456., 11516., 11840., 17332., 17832., 15760., 16214., 16300., 16772., 10868., 11192., 11216., 11552.,  6468.,  6720.,  6840.,  7104., 12520., 12962.,  9924., 10320., 10464., 10878.,  6312.,  6576.,  6660.,  6936., 17740., 18368., 16772., 17354., 24286., 25164., 25015., 25920., 25744., 26676., 15608., 16190., 16076., 16676., 17844., 18478., 15852., 16440., 24625., 25544., 24650., 25532., 25379., 26288., 14676., 15264., 15144., 15750., 17756., 18332., 18260., 18854., 26692., 27588., 25693., 26552., 26422., 27308., 17072., 17666., 17540., 18152.,  4956.,  5208.,  5256.,  5520.,  9868., 10310.,  7548.,  7944.,  7980.,  8394.,  4728.,  4992.,  5004.,  5280.,  8256.,  8640.,  8556.,  8952., 11868., 12444., 12300., 12894., 12732., 13344.,  7764.,  8160.,  8040.,  8448.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18056., 19296., 18200., 19452., 18344., 19608., 18488., 19764., 18632., 19920., 18776., 20076., 18920., 20232., 14776., 15892., 14920., 16048., 15064., 16204., 10856., 11752., 11000., 11908., 11144., 12064., 11288., 12220., 12008., 13000., 12152., 13156., 12296., 13312., 12440., 13468., 12584., 13624., 12728., 13780., 12872., 13936., 13592., 14716., 13736., 14872., 13880., 15028., 14024., 15184., 14168., 15340., 14312., 15496., 14456., 15652., 15176., 16432., 15320., 16588., 15464., 16744., 15608., 16900., 15752., 17056., 15896., 17212., 16040., 17368., 16760., 18148., 16904., 18304., 17048., 18460., 17192., 18616., 17336., 18772., 17480., 18928., 17624., 19084., 18344., 19864., 18488., 20020., 18632., 20176., 18776., 20332., 18920., 20488., 19064., 20644., 19208., 20800.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8920.,  9232.,  9544.,  9856.,  9268.,  9592.,  9916., 10240., 16372., 16872., 17372., 17872., 16858., 17312., 17766., 18220., 17408., 17880., 18352., 18824., 12004., 12328., 12652., 12976., 12368., 12704., 13040., 13376.,  7692.,  7944.,  8196.,  8448.,  8040.,  8304.,  8568.,  8832., 13462., 13904., 14346., 14788., 11900., 12296., 12692., 13088., 12450., 12864., 13278., 13692.,  7624.,  7888.,  8152.,  8416.,  7988.,  8264.,  8540.,  8816., 18596., 19224., 19852., 20480., 16194., 16776., 17358., 17940., 24462., 25340., 26218., 27096., 25189., 26094., 26999., 27904., 25916., 26848., 27780., 28712., 15210., 15792., 16374., 16956., 15680., 16280., 16880., 17480., 17262., 17896., 18530., 19164., 16908., 17496., 18084., 18672., 25547., 26466., 27385., 28304., 24930., 25812., 26694., 27576., 25657., 26566., 27475., 28384., 16604., 17192., 17780., 18368., 17074., 17680., 18286., 18892., 15608., 16184., 16760., 17336., 16086., 16680., 17274., 17868., 26056., 26952., 27848., 28744., 23391., 24250., 25109., 25968., 24118., 25004., 25890., 26776., 16462., 17056., 17650., 18244., 16932., 17544., 18156., 18768.,  6076.,  6328.,  6580.,  6832.,  6408.,  6672.,  6936.,  7200.,  9822., 10264., 10706., 11148.,  8940.,  9336.,  9732., 10128.,  9402.,  9816., 10230., 10644.,  5352.,  5616.,  5880.,  6144.,  5636.,  5912.,  6188.,  6464.,  9728., 10112., 10496., 10880., 10060., 10456., 10852., 11248., 13560., 14136., 14712., 15288., 14022., 14616., 15210., 15804., 14484., 15096., 15708., 16320.,  8476.,  8872.,  9268.,  9664.,  8760.,  9168.,  9576.,  9984.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19000., 19728., 20456., 21184., 19276., 20016., 20756., 21496., 19552., 20304., 21056., 21808., 17140., 17776., 18412., 19048., 17416., 18064., 18712., 19360., 17692., 18352., 19012., 19672., 17968., 18640., 19312., 19984., 12436., 12912., 13388., 13864., 12712., 13200., 13688., 14176., 12988., 13488., 13988., 14488.,  9040.,  9424.,  9808., 10192.,  9316.,  9712., 10108., 10504.,  9592., 10000., 10408., 10816.,  9868., 10288., 10708., 11128., 11248., 11728., 12208., 12688., 11524., 12016., 12508., 13000., 11800., 12304., 12808., 13312., 12076., 12592., 13108., 13624., 12352., 12880., 13408., 13936., 12628., 13168., 13708., 14248., 12904., 13456., 14008., 14560., 14284., 14896., 15508., 16120., 14560., 15184., 15808., 16432., 14836., 15472., 16108., 16744., 15112., 15760., 16408., 17056., 15388., 16048., 16708., 17368., 15664., 16336., 17008., 17680., 15940., 16624., 17308., 17992., 17320., 18064., 18808., 19552., 17596., 18352., 19108., 19864., 17872., 18640., 19408., 20176., 18148., 18928., 19708., 20488., 18424., 19216., 20008., 20800., 18700., 19504., 20308., 21112., 18976., 19792., 20608., 21424., 20356., 21232., 22108., 22984., 20632., 21520., 22408., 23296., 20908., 21808., 22708., 23608., 21184., 22096., 23008., 23920., 21460., 22384., 23308., 24232., 21736., 22672., 23608., 24544., 22012., 22960., 23908., 24856., 23392., 24400., 25408., 26416., 23668., 24688., 25708., 26728., 23944., 24976., 26008., 27040., 24220., 25264., 26308., 27352., 24496., 25552., 26608., 27664., 24772., 25840., 26908., 27976., 25048., 26128., 27208., 28288.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11264., 11456., 11648., 11840., 17553., 17832., 15935., 16214., 16493., 16772., 11012., 11192., 11372., 11552.,  6528.,  6720.,  6912.,  7104., 12683., 12962., 10041., 10320., 10599., 10878.,  6396.,  6576.,  6756.,  6936., 18107., 18368., 17093., 17354., 24786., 25164., 25542., 25920., 26298., 26676., 15947., 16190., 16433., 16676., 18217., 18478., 16179., 16440., 25166., 25544., 25154., 25532., 25910., 26288., 15021., 15264., 15507., 15750., 18071., 18332., 18593., 18854., 27210., 27588., 26174., 26552., 26930., 27308., 17423., 17666., 17909., 18152.,  5052.,  5208.,  5364.,  5520., 10085., 10310.,  7719.,  7944.,  8169.,  8394.,  4848.,  4992.,  5136.,  5280.,  8484.,  8640.,  8796.,  8952., 12219., 12444., 12669., 12894., 13119., 13344.,  8016.,  8160.,  8304.,  8448.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19218., 19296., 19374., 19452., 19530., 19608., 19686., 19764., 19842., 19920., 19998., 20076., 20154., 20232., 15814., 15892., 15970., 16048., 16126., 16204., 11674., 11752., 11830., 11908., 11986., 12064., 12142., 12220., 12922., 13000., 13078., 13156., 13234., 13312., 13390., 13468., 13546., 13624., 13702., 13780., 13858., 13936., 14638., 14716., 14794., 14872., 14950., 15028., 15106., 15184., 15262., 15340., 15418., 15496., 15574., 15652., 16354., 16432., 16510., 16588., 16666., 16744., 16822., 16900., 16978., 17056., 17134., 17212., 17290., 17368., 18070., 18148., 18226., 18304., 18382., 18460., 18538., 18616., 18694., 18772., 18850., 18928., 19006., 19084., 19786., 19864., 19942., 20020., 20098., 20176., 20254., 20332., 20410., 20488., 20566., 20644., 20722., 20800.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13148., 13568., 13520., 13952., 13892., 14336., 14264., 14720., 20236., 20898., 20776., 21456., 19204., 19838., 19744., 20396., 19580., 20186., 20120., 20744., 13004., 13448., 13352., 13808., 13700., 14168., 14048., 14528.,  9428.,  9728.,  9800., 10112., 10172., 10496., 10544., 10880., 17780., 18326., 18320., 18884., 15724., 16242., 16264., 16800., 15076., 15566., 15616., 16124.,  9524.,  9848.,  9872., 10208., 10220., 10568., 10568., 10928., 16288., 16886., 16792., 17408., 15824., 16394., 16328., 16916., 23907., 24740., 24636., 25496., 25365., 26252., 26094., 27008., 24071., 24948., 24800., 25704., 14684., 15254., 15152., 15740., 14660., 15202., 15128., 15688., 17648., 18258., 18152., 18780., 16160., 16742., 16664., 17264., 23369., 24220., 24098., 24976., 24123., 24964., 24852., 25720., 25581., 26476., 26310., 27232., 14996., 15578., 15464., 16064., 13948., 14502., 14416., 14988., 14336., 14894., 14840., 15416., 15344., 15938., 15848., 16460., 21679., 22548., 22408., 23304., 21409., 22268., 22138., 23024., 22547., 23396., 23276., 24152., 14156., 14750., 14624., 15236., 15092., 15722., 15560., 16208.,  7628.,  7928.,  7928.,  8240.,  8228.,  8552.,  8528.,  8864., 14504., 15050., 14936., 15500., 12616., 13134., 13048., 13584., 12136., 12626., 12568., 13076.,  7580.,  7904.,  7856.,  8192.,  8132.,  8480.,  8408.,  8768.,  7764.,  8136.,  8064.,  8448.,  8364.,  8760.,  8664.,  9072., 12872., 13430., 13304., 13880., 13736., 14330., 14168., 14780., 12232., 12798., 12664., 13248.,  7572.,  7968.,  7848.,  8256.,  7548.,  7904.,  7824.,  8192.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19584., 21028., 19728., 21184., 19872., 21340., 20016., 21496., 20160., 21652., 20304., 21808., 17632., 18892., 17776., 19048., 17920., 19204., 18064., 19360., 18208., 19516., 18352., 19672., 18496., 19828., 18640., 19984., 12768., 13708., 12912., 13864., 13056., 14020., 13200., 14176., 13344., 14332., 13488., 14488.,  9280., 10036.,  9424., 10192.,  9568., 10348.,  9712., 10504.,  9856., 10660., 10000., 10816., 10144., 10972., 10288., 11128., 11584., 12532., 11728., 12688., 11872., 12844., 12016., 13000., 12160., 13156., 12304., 13312., 12448., 13468., 12592., 13624., 12736., 13780., 12880., 13936., 13024., 14092., 13168., 14248., 13312., 14404., 13456., 14560., 14752., 15964., 14896., 16120., 15040., 16276., 15184., 16432., 15328., 16588., 15472., 16744., 15616., 16900., 15760., 17056., 15904., 17212., 16048., 17368., 16192., 17524., 16336., 17680., 16480., 17836., 16624., 17992., 17920., 19396., 18064., 19552., 18208., 19708., 18352., 19864., 18496., 20020., 18640., 20176., 18784., 20332., 18928., 20488., 19072., 20644., 19216., 20800., 19360., 20956., 19504., 21112., 19648., 21268., 19792., 21424., 21088., 22828., 21232., 22984., 21376., 23140., 21520., 23296., 21664., 23452., 21808., 23608., 21952., 23764., 22096., 23920., 22240., 24076., 22384., 24232., 22528., 24388., 22672., 24544., 22816., 24700., 22960., 24856., 24256., 26260., 24400., 26416., 24544., 26572., 24688., 26728., 24832., 26884., 24976., 27040., 25120., 27196., 25264., 27352., 25408., 27508., 25552., 27664., 25696., 27820., 25840., 27976., 25984., 28132., 26128., 28288.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12436., 12856., 13276., 13696., 12784., 13216., 13648., 14080., 13132., 13576., 14020., 14464., 13480., 13936., 14392., 14848., 21122., 21784., 22446., 23108., 21672., 22352., 23032., 23712., 22158., 22792., 23426., 24060., 22708., 23360., 24012., 24664., 21914., 22520., 23126., 23732., 22464., 23088., 23712., 24336., 15260., 15704., 16148., 16592., 15624., 16080., 16536., 16992., 15988., 16456., 16924., 17392., 16352., 16832., 17312., 17792.,  8956.,  9256.,  9556.,  9856.,  9304.,  9616.,  9928., 10240.,  9652.,  9976., 10300., 10624., 10000., 10336., 10672., 11008., 17350., 17896., 18442., 18988., 17900., 18464., 19028., 19592., 16338., 16856., 17374., 17892., 16888., 17424., 17960., 18496., 14046., 14536., 15026., 15516., 14596., 15104., 15612., 16120.,  9572.,  9896., 10220., 10544.,  9936., 10272., 10608., 10944., 10300., 10648., 10996., 11344., 10664., 11024., 11384., 11744., 16362., 16960., 17558., 18156., 16840., 17456., 18072., 18688., 14438., 15008., 15578., 16148., 14916., 15504., 16092., 16680., 21701., 22534., 23367., 24200., 22428., 23288., 24148., 25008., 23155., 24042., 24929., 25816., 23882., 24796., 25710., 26624., 23265., 24142., 25019., 25896., 23992., 24896., 25800., 26704., 14782., 15352., 15922., 16492., 15252., 15840., 16428., 17016., 13866., 14408., 14950., 15492., 14336., 14896., 15456., 16016., 15998., 16608., 17218., 17828., 16476., 17104., 17732., 18360., 16122., 16704., 17286., 17868., 16600., 17200., 17800., 18400., 25599., 26450., 27301., 28152., 26326., 27204., 28082., 28960., 25709., 26550., 27391., 28232., 26436., 27304., 28172., 29040., 27163., 28058., 28953., 29848., 27890., 28812., 29734., 30656., 17826., 18408., 18990., 19572., 18296., 18896., 19496., 20096., 14862., 15416., 15970., 16524., 15332., 15904., 16476., 17048., 14546., 15104., 15662., 16220., 15024., 15600., 16176., 16752., 15502., 16096., 16690., 17284., 15980., 16592., 17204., 17816., 23097., 23966., 24835., 25704., 23824., 24720., 25616., 26512., 21159., 22018., 22877., 23736., 21886., 22772., 23658., 24544., 22037., 22886., 23735., 24584., 22764., 23640., 24516., 25392., 14470., 15064., 15658., 16252., 14940., 15552., 16164., 16776., 15410., 16040., 16670., 17300., 15880., 16528., 17176., 17824.,  8044.,  8344.,  8644.,  8944.,  8376.,  8688.,  9000.,  9312.,  8708.,  9032.,  9356.,  9680.,  9040.,  9376.,  9712., 10048., 13998., 14544., 15090., 15636., 14460., 15024., 15588., 16152., 13578., 14096., 14614., 15132., 14040., 14576., 15112., 15648., 11878., 12368., 12858., 13348., 12340., 12848., 13356., 13864.,  7412.,  7736.,  8060.,  8384.,  7696.,  8032.,  8368.,  8704.,  7980.,  8328.,  8676.,  9024.,  8264.,  8624.,  8984.,  9344., 10804., 11176., 11548., 11920., 11136., 11520., 11904., 12288., 11468., 11864., 12260., 12656., 11800., 12208., 12616., 13024., 14562., 15120., 15678., 16236., 15024., 15600., 16176., 16752., 15486., 16080., 16674., 17268., 15948., 16560., 17172., 17784., 15834., 16400., 16966., 17532., 16296., 16880., 17464., 18048.,  9884., 10280., 10676., 11072., 10168., 10576., 10984., 11392.,  9364.,  9720., 10076., 10432.,  9648., 10016., 10384., 10752.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23900., 24832., 25764., 26696., 24176., 25120., 26064., 27008., 24452., 25408., 26364., 27320., 24728., 25696., 26664., 27632., 25004., 25984., 26964., 27944., 25280., 26272., 27264., 28256., 22868., 23744., 24620., 25496., 23144., 24032., 24920., 25808., 23420., 24320., 25220., 26120., 23696., 24608., 25520., 26432., 23972., 24896., 25820., 26744., 24248., 25184., 26120., 27056., 24524., 25472., 26420., 27368., 24800., 25760., 26720., 27680., 20372., 21184., 21996., 22808., 20648., 21472., 22296., 23120., 20924., 21760., 22596., 23432., 21200., 22048., 22896., 23744., 21476., 22336., 23196., 24056., 21752., 22624., 23496., 24368., 17804., 18560., 19316., 20072., 18080., 18848., 19616., 20384., 18356., 19136., 19916., 20696., 18632., 19424., 20216., 21008., 17244., 17920., 18596., 19272., 17520., 18208., 18896., 19584., 17796., 18496., 19196., 19896., 18072., 18784., 19496., 20208., 19404., 20096., 20788., 21480., 19680., 20384., 21088., 21792., 16244., 16832., 17420., 18008., 16520., 17120., 17720., 18320., 16796., 17408., 18020., 18632., 17072., 17696., 18320., 18944., 17348., 17984., 18620., 19256., 17624., 18272., 18920., 19568., 17900., 18560., 19220., 19880., 18176., 18848., 19520., 20192., 15252., 15808., 16364., 16920., 15528., 16096., 16664., 17232., 15804., 16384., 16964., 17544., 16080., 16672., 17264., 17856., 12804., 13376., 13948., 14520., 13080., 13664., 14248., 14832.,  8108.,  8576.,  9044.,  9512.,  8384.,  8864.,  9344.,  9824.,  8660.,  9152.,  9644., 10136.,  8936.,  9440.,  9944., 10448.,  9212.,  9728., 10244., 10760.,  9488., 10016., 10544., 11072.,  9764., 10304., 10844., 11384., 10040., 10592., 11144., 11696., 10316., 10880., 11444., 12008., 10592., 11168., 11744., 12320., 10868., 11456., 12044., 12632., 11144., 11744., 12344., 12944., 13628., 14336., 15044., 15752., 13904., 14624., 15344., 16064., 14180., 14912., 15644., 16376., 14456., 15200., 15944., 16688., 14732., 15488., 16244., 17000., 15008., 15776., 16544., 17312., 15284., 16064., 16844., 17624., 15560., 16352., 17144., 17936., 15836., 16640., 17444., 18248., 16112., 16928., 17744., 18560., 16388., 17216., 18044., 18872., 16664., 17504., 18344., 19184., 16940., 17792., 18644., 19496., 17216., 18080., 18944., 19808., 19700., 20672., 21644., 22616., 19976., 20960., 21944., 22928., 20252., 21248., 22244., 23240., 20528., 21536., 22544., 23552., 20804., 21824., 22844., 23864., 21080., 22112., 23144., 24176., 21356., 22400., 23444., 24488., 21632., 22688., 23744., 24800., 21908., 22976., 24044., 25112., 22184., 23264., 24344., 25424., 21820., 22784., 23748., 24712., 22096., 23072., 24048., 25024., 22372., 23360., 24348., 25336., 22648., 23648., 24648., 25648., 25004., 25984., 26964., 27944., 25280., 26272., 27264., 28256., 22868., 23744., 24620., 25496., 23144., 24032., 24920., 25808., 23420., 24320., 25220., 26120., 23696., 24608., 25520., 26432., 23972., 24896., 25820., 26744., 24248., 25184., 26120., 27056., 24524., 25472., 26420., 27368., 24800., 25760., 26720., 27680., 22900., 23744., 24588., 25432., 23176., 24032., 24888., 25744., 23452., 24320., 25188., 26056., 23728., 24608., 25488., 26368.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13376., 13568., 13760., 13952., 14144., 14336., 14528., 14720., 20619., 20898., 21177., 21456., 19559., 19838., 20117., 20396., 19907., 20186., 20465., 20744., 13268., 13448., 13628., 13808., 13988., 14168., 14348., 14528.,  9536.,  9728.,  9920., 10112., 10304., 10496., 10688., 10880., 18047., 18326., 18605., 18884., 15963., 16242., 16521., 16800., 15287., 15566., 15845., 16124.,  9668.,  9848., 10028., 10208., 10388., 10568., 10748., 10928., 16625., 16886., 17147., 17408., 16133., 16394., 16655., 16916., 24362., 24740., 25118., 25496., 25874., 26252., 26630., 27008., 24570., 24948., 25326., 25704., 15011., 15254., 15497., 15740., 14959., 15202., 15445., 15688., 17997., 18258., 18519., 18780., 16481., 16742., 17003., 17264., 23842., 24220., 24598., 24976., 24586., 24964., 25342., 25720., 26098., 26476., 26854., 27232., 15335., 15578., 15821., 16064., 14259., 14502., 14745., 14988., 14633., 14894., 15155., 15416., 15677., 15938., 16199., 16460., 22170., 22548., 22926., 23304., 21890., 22268., 22646., 23024., 23018., 23396., 23774., 24152., 14507., 14750., 14993., 15236., 15479., 15722., 15965., 16208.,  7772.,  7928.,  8084.,  8240.,  8396.,  8552.,  8708.,  8864., 14825., 15050., 15275., 15500., 12909., 13134., 13359., 13584., 12401., 12626., 12851., 13076.,  7760.,  7904.,  8048.,  8192.,  8336.,  8480.,  8624.,  8768.,  7980.,  8136.,  8292.,  8448.,  8604.,  8760.,  8916.,  9072., 13205., 13430., 13655., 13880., 14105., 14330., 14555., 14780., 12573., 12798., 13023., 13248.,  7824.,  7968.,  8112.,  8256.,  7760.,  7904.,  8048.,  8192.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20950., 21028., 21106., 21184., 21262., 21340., 21418., 21496., 21574., 21652., 21730., 21808., 18814., 18892., 18970., 19048., 19126., 19204., 19282., 19360., 19438., 19516., 19594., 19672., 19750., 19828., 19906., 19984., 13630., 13708., 13786., 13864., 13942., 14020., 14098., 14176., 14254., 14332., 14410., 14488.,  9958., 10036., 10114., 10192., 10270., 10348., 10426., 10504., 10582., 10660., 10738., 10816., 10894., 10972., 11050., 11128., 12454., 12532., 12610., 12688., 12766., 12844., 12922., 13000., 13078., 13156., 13234., 13312., 13390., 13468., 13546., 13624., 13702., 13780., 13858., 13936., 14014., 14092., 14170., 14248., 14326., 14404., 14482., 14560., 15886., 15964., 16042., 16120., 16198., 16276., 16354., 16432., 16510., 16588., 16666., 16744., 16822., 16900., 16978., 17056., 17134., 17212., 17290., 17368., 17446., 17524., 17602., 17680., 17758., 17836., 17914., 17992., 19318., 19396., 19474., 19552., 19630., 19708., 19786., 19864., 19942., 20020., 20098., 20176., 20254., 20332., 20410., 20488., 20566., 20644., 20722., 20800., 20878., 20956., 21034., 21112., 21190., 21268., 21346., 21424., 22750., 22828., 22906., 22984., 23062., 23140., 23218., 23296., 23374., 23452., 23530., 23608., 23686., 23764., 23842., 23920., 23998., 24076., 24154., 24232., 24310., 24388., 24466., 24544., 24622., 24700., 24778., 24856., 26182., 26260., 26338., 26416., 26494., 26572., 26650., 26728., 26806., 26884., 26962., 27040., 27118., 27196., 27274., 27352., 27430., 27508., 27586., 27664., 27742., 27820., 27898., 27976., 28054., 28132., 28210., 28288.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12292., 12672., 12664., 13056., 13036., 13440., 13408., 13824., 13780., 14208., 14152., 14592., 14524., 14976., 14896., 15360., 17724., 18326., 18264., 18884., 18804., 19442., 19344., 20000., 16172., 16718., 16712., 17276., 17252., 17834., 17792., 18392., 17628., 18182., 18168., 18740., 18708., 19298., 19248., 19856., 12924., 13352., 13272., 13712., 13620., 14072., 13968., 14432., 11436., 11848., 11784., 12208., 12132., 12568., 12480., 12928.,  9780., 10112., 10152., 10496., 10524., 10880., 10896., 11264., 10308., 10624., 10680., 11008., 11052., 11392., 11424., 11776., 17868., 18430., 18408., 18988., 18948., 19546., 19488., 20104., 16892., 17462., 17432., 18020., 17972., 18578., 18512., 19136., 15084., 15598., 15624., 16156., 16164., 16714., 16704., 17272.,  9676.,  9992., 10024., 10352., 10372., 10712., 10720., 11072., 11068., 11432., 11416., 11792., 11764., 12152., 12112., 12512., 13640., 14178., 14144., 14700., 14648., 15222., 15152., 15744., 14184., 14730., 14688., 15252., 15192., 15774., 15696., 16296., 21485., 22228., 22214., 22984., 22943., 23740., 23672., 24496., 24401., 25252., 25130., 26008., 25859., 26764., 26588., 27520., 21301., 22132., 22030., 22888., 22759., 23644., 23488., 24400., 13092., 13638., 13560., 14124., 14028., 14610., 14496., 15096., 13556., 14046., 14024., 14532., 14492., 15018., 14960., 15504., 18344., 18970., 18848., 19492., 19352., 20014., 19856., 20536., 14856., 15426., 15360., 15948., 15864., 16470., 16368., 16992., 21625., 22468., 22354., 23224., 23083., 23980., 23812., 24736., 23645., 24468., 24374., 25224., 25103., 25980., 25832., 26736., 26561., 27492., 27290., 28248., 28019., 29004., 28748., 29760., 13716., 14286., 14184., 14772., 14652., 15258., 15120., 15744., 13604., 14182., 14072., 14668., 14540., 15154., 15008., 15640., 15176., 15698., 15680., 16220., 16184., 16742., 16688., 17264., 17192., 17786., 17696., 18308., 18200., 18830., 18704., 19352., 22597., 23476., 23326., 24232., 24055., 24988., 24784., 25744., 20329., 21124., 21058., 21880., 21787., 22636., 22516., 23392., 22093., 22868., 22822., 23624., 23551., 24380., 24280., 25136., 16004., 16598., 16472., 17084., 16940., 17570., 17408., 18056., 15380., 15982., 15848., 16468., 16316., 16954., 16784., 17440.,  7788.,  8120.,  8088.,  8432.,  8388.,  8744.,  8688.,  9056.,  8412.,  8728.,  8712.,  9040.,  9012.,  9352.,  9312.,  9664., 14496., 15058., 14928., 15508., 15360., 15958., 15792., 16408., 13472., 14042., 13904., 14492., 14336., 14942., 14768., 15392., 12000., 12514., 12432., 12964., 12864., 13414., 13296., 13864.,  7780.,  8096.,  8056.,  8384.,  8332.,  8672.,  8608.,  8960.,  8884.,  9248.,  9160.,  9536.,  9436.,  9824.,  9712., 10112.,  7036.,  7384.,  7336.,  7696.,  7636.,  8008.,  7936.,  8320.,  8236.,  8632.,  8536.,  8944.,  8836.,  9256.,  9136.,  9568., 13216., 13738., 13648., 14188., 14080., 14638., 14512., 15088., 14944., 15538., 15376., 15988., 15808., 16438., 16240., 16888., 11424., 11962., 11856., 12412., 12288., 12862., 12720., 13312.,  7444.,  7840.,  7720.,  8128.,  7996.,  8416.,  8272.,  8704.,  7908.,  8224.,  8184.,  8512.,  8460.,  8800.,  8736.,  9088.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24688., 26540., 24832., 26696., 24976., 26852., 25120., 27008., 25264., 27164., 25408., 27320., 25552., 27476., 25696., 27632., 25840., 27788., 25984., 27944., 26128., 28100., 26272., 28256., 23600., 25340., 23744., 25496., 23888., 25652., 24032., 25808., 24176., 25964., 24320., 26120., 24464., 26276., 24608., 26432., 24752., 26588., 24896., 26744., 25040., 26900., 25184., 27056., 25328., 27212., 25472., 27368., 25616., 27524., 25760., 27680., 21040., 22652., 21184., 22808., 21328., 22964., 21472., 23120., 21616., 23276., 21760., 23432., 21904., 23588., 22048., 23744., 22192., 23900., 22336., 24056., 22480., 24212., 22624., 24368., 18416., 19916., 18560., 20072., 18704., 20228., 18848., 20384., 18992., 20540., 19136., 20696., 19280., 20852., 19424., 21008., 17776., 19116., 17920., 19272., 18064., 19428., 18208., 19584., 18352., 19740., 18496., 19896., 18640., 20052., 18784., 20208., 19952., 21324., 20096., 21480., 20240., 21636., 20384., 21792., 16688., 17852., 16832., 18008., 16976., 18164., 17120., 18320., 17264., 18476., 17408., 18632., 17552., 18788., 17696., 18944., 17840., 19100., 17984., 19256., 18128., 19412., 18272., 19568., 18416., 19724., 18560., 19880., 18704., 20036., 18848., 20192., 15664., 16764., 15808., 16920., 15952., 17076., 16096., 17232., 16240., 17388., 16384., 17544., 16528., 17700., 16672., 17856., 13232., 14364., 13376., 14520., 13520., 14676., 13664., 14832.,  8432.,  9356.,  8576.,  9512.,  8720.,  9668.,  8864.,  9824.,  9008.,  9980.,  9152., 10136.,  9296., 10292.,  9440., 10448.,  9584., 10604.,  9728., 10760.,  9872., 10916., 10016., 11072., 10160., 11228., 10304., 11384., 10448., 11540., 10592., 11696., 10736., 11852., 10880., 12008., 11024., 12164., 11168., 12320., 11312., 12476., 11456., 12632., 11600., 12788., 11744., 12944., 14192., 15596., 14336., 15752., 14480., 15908., 14624., 16064., 14768., 16220., 14912., 16376., 15056., 16532., 15200., 16688., 15344., 16844., 15488., 17000., 15632., 17156., 15776., 17312., 15920., 17468., 16064., 17624., 16208., 17780., 16352., 17936., 16496., 18092., 16640., 18248., 16784., 18404., 16928., 18560., 17072., 18716., 17216., 18872., 17360., 19028., 17504., 19184., 17648., 19340., 17792., 19496., 17936., 19652., 18080., 19808., 20528., 22460., 20672., 22616., 20816., 22772., 20960., 22928., 21104., 23084., 21248., 23240., 21392., 23396., 21536., 23552., 21680., 23708., 21824., 23864., 21968., 24020., 22112., 24176., 22256., 24332., 22400., 24488., 22544., 24644., 22688., 24800., 22832., 24956., 22976., 25112., 23120., 25268., 23264., 25424., 22640., 24556., 22784., 24712., 22928., 24868., 23072., 25024., 23216., 25180., 23360., 25336., 23504., 25492., 23648., 25648., 25840., 27788., 25984., 27944., 26128., 28100., 26272., 28256., 23600., 25340., 23744., 25496., 23888., 25652., 24032., 25808., 24176., 25964., 24320., 26120., 24464., 26276., 24608., 26432., 24752., 26588., 24896., 26744., 25040., 26900., 25184., 27056., 25328., 27212., 25472., 27368., 25616., 27524., 25760., 27680., 23600., 25276., 23744., 25432., 23888., 25588., 24032., 25744., 24176., 25900., 24320., 26056., 24464., 26212., 24608., 26368.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9996., 10376., 10756., 11136., 10344., 10736., 11128., 11520., 10692., 11096., 11500., 11904., 11040., 11456., 11872., 12288., 11388., 11816., 12244., 12672., 11736., 12176., 12616., 13056., 12084., 12536., 12988., 13440., 12432., 12896., 13360., 13824., 18462., 19064., 19666., 20268., 19012., 19632., 20252., 20872., 19562., 20200., 20838., 21476., 20112., 20768., 21424., 22080., 17462., 18008., 18554., 19100., 18012., 18576., 19140., 19704., 18562., 19144., 19726., 20308., 19112., 19712., 20312., 20912., 18318., 18872., 19426., 19980., 18868., 19440., 20012., 20584., 19418., 20008., 20598., 21188., 19968., 20576., 21184., 21792., 13324., 13752., 14180., 14608., 13688., 14128., 14568., 15008., 14052., 14504., 14956., 15408., 14416., 14880., 15344., 15808., 13180., 13592., 14004., 14416., 13544., 13968., 14392., 14816., 13908., 14344., 14780., 15216., 14272., 14720., 15168., 15616.,  8604.,  8936.,  9268.,  9600.,  8952.,  9296.,  9640.,  9984.,  9300.,  9656., 10012., 10368.,  9648., 10016., 10384., 10752.,  8140.,  8456.,  8772.,  9088.,  8488.,  8816.,  9144.,  9472.,  8836.,  9176.,  9516.,  9856.,  9184.,  9536.,  9888., 10240., 16742., 17304., 17866., 18428., 17292., 17872., 18452., 19032., 17842., 18440., 19038., 19636., 18392., 19008., 19624., 20240., 16830., 17400., 17970., 18540., 17380., 17968., 18556., 19144., 17930., 18536., 19142., 19748., 18480., 19104., 19728., 20352., 15318., 15832., 16346., 16860., 15868., 16400., 16932., 17464., 16418., 16968., 17518., 18068., 16968., 17536., 18104., 18672.,  9244.,  9560.,  9876., 10192.,  9608.,  9936., 10264., 10592.,  9972., 10312., 10652., 10992., 10336., 10688., 11040., 11392., 10700., 11064., 11428., 11792., 11064., 11440., 11816., 12192., 11428., 11816., 12204., 12592., 11792., 12192., 12592., 12992., 16502., 17040., 17578., 18116., 16980., 17536., 18092., 18648., 17458., 18032., 18606., 19180., 17936., 18528., 19120., 19712., 15534., 16080., 16626., 17172., 16012., 16576., 17140., 17704., 16490., 17072., 17654., 18236., 16968., 17568., 18168., 18768., 21043., 21786., 22529., 23272., 21770., 22540., 23310., 24080., 22497., 23294., 24091., 24888., 23224., 24048., 24872., 25696., 23951., 24802., 25653., 26504., 24678., 25556., 26434., 27312., 25405., 26310., 27215., 28120., 26132., 27064., 27996., 28928., 23147., 23978., 24809., 25640., 23874., 24732., 25590., 26448., 24601., 25486., 26371., 27256., 25328., 26240., 27152., 28064., 14438., 14984., 15530., 16076., 14908., 15472., 16036., 16600., 15378., 15960., 16542., 17124., 15848., 16448., 17048., 17648., 13630., 14120., 14610., 15100., 14100., 14608., 15116., 15624., 14570., 15096., 15622., 16148., 15040., 15584., 16128., 16672., 15582., 16208., 16834., 17460., 16060., 16704., 17348., 17992., 16538., 17200., 17862., 18524., 17016., 17696., 18376., 19056., 14806., 15376., 15946., 16516., 15284., 15872., 16460., 17048., 15762., 16368., 16974., 17580., 16240., 16864., 17488., 18112., 23015., 23858., 24701., 25544., 23742., 24612., 25482., 26352., 24469., 25366., 26263., 27160., 25196., 26120., 27044., 27968., 24259., 25082., 25905., 26728., 24986., 25836., 26686., 27536., 25713., 26590., 27467., 28344., 26440., 27344., 28248., 29152., 27167., 28098., 29029., 29960., 27894., 28852., 29810., 30768., 28621., 29606., 30591., 31576., 29348., 30360., 31372., 32384., 16430., 17000., 17570., 18140., 16900., 17488., 18076., 18664., 17370., 17976., 18582., 19188., 17840., 18464., 19088., 19712., 14406., 14984., 15562., 16140., 14876., 15472., 16068., 16664., 15346., 15960., 16574., 17188., 15816., 16448., 17080., 17712., 11398., 11920., 12442., 12964., 11876., 12416., 12956., 13496., 12354., 12912., 13470., 14028., 12832., 13408., 13984., 14560., 13310., 13904., 14498., 15092., 13788., 14400., 15012., 15624., 14266., 14896., 15526., 16156., 14744., 15392., 16040., 16688., 22619., 23498., 24377., 25256., 23346., 24252., 25158., 26064., 24073., 25006., 25939., 26872., 24800., 25760., 26720., 27680., 19447., 20242., 21037., 21832., 20174., 20996., 21818., 22640., 20901., 21750., 22599., 23448., 21628., 22504., 23380., 24256., 20179., 20954., 21729., 22504., 20906., 21708., 22510., 23312., 21633., 22462., 23291., 24120., 22360., 23216., 24072., 24928., 13558., 14152., 14746., 15340., 14028., 14640., 15252., 15864., 14498., 15128., 15758., 16388., 14968., 15616., 16264., 16912., 14606., 15208., 15810., 16412., 15076., 15696., 16316., 16936., 15546., 16184., 16822., 17460., 16016., 16672., 17328., 17984.,  9868., 10200., 10532., 10864., 10200., 10544., 10888., 11232., 10532., 10888., 11244., 11600., 10864., 11232., 11600., 11968., 10108., 10424., 10740., 11056., 10440., 10768., 11096., 11424., 10772., 11112., 11452., 11792., 11104., 11456., 11808., 12160., 16270., 16832., 17394., 17956., 16732., 17312., 17892., 18472., 17194., 17792., 18390., 18988., 17656., 18272., 18888., 19504., 16774., 17344., 17914., 18484., 17236., 17824., 18412., 19000., 17698., 18304., 18910., 19516., 18160., 18784., 19408., 20032., 12350., 12864., 13378., 13892., 12812., 13344., 13876., 14408., 13274., 13824., 14374., 14924., 13736., 14304., 14872., 15440.,  8844.,  9160.,  9476.,  9792.,  9128.,  9456.,  9784., 10112.,  9412.,  9752., 10092., 10432.,  9696., 10048., 10400., 10752.,  9980., 10344., 10708., 11072., 10264., 10640., 11016., 11392., 10548., 10936., 11324., 11712., 10832., 11232., 11632., 12032.,  9372.,  9720., 10068., 10416.,  9704., 10064., 10424., 10784., 10036., 10408., 10780., 11152., 10368., 10752., 11136., 11520., 10700., 11096., 11492., 11888., 11032., 11440., 11848., 12256., 11364., 11784., 12204., 12624., 11696., 12128., 12560., 12992., 13238., 13760., 14282., 14804., 13700., 14240., 14780., 15320., 14162., 14720., 15278., 15836., 14624., 15200., 15776., 16352., 15086., 15680., 16274., 16868., 15548., 16160., 16772., 17384., 16010., 16640., 17270., 17900., 16472., 17120., 17768., 18416., 14758., 15296., 15834., 16372., 15220., 15776., 16332., 16888., 15682., 16256., 16830., 17404., 16144., 16736., 17328., 17920.,  9116.,  9512.,  9908., 10304.,  9400.,  9808., 10216., 10624.,  9684., 10104., 10524., 10944.,  9968., 10400., 10832., 11264.,  9100.,  9416.,  9732., 10048.,  9384.,  9712., 10040., 10368.,  9668., 10008., 10348., 10688.,  9952., 10304., 10656., 11008.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18212., 18912., 19612., 20312., 18488., 19200., 19912., 20624., 18764., 19488., 20212., 20936., 19040., 19776., 20512., 21248., 19316., 20064., 20812., 21560., 19592., 20352., 21112., 21872., 19868., 20640., 21412., 22184., 20144., 20928., 21712., 22496., 15172., 15840., 16508., 17176., 15448., 16128., 16808., 17488., 15724., 16416., 17108., 17800., 16000., 16704., 17408., 18112., 13588., 14176., 14764., 15352., 13864., 14464., 15064., 15664., 14140., 14752., 15364., 15976., 14416., 15040., 15664., 16288., 14692., 15328., 15964., 16600., 14968., 15616., 16264., 16912., 15244., 15904., 16564., 17224., 15520., 16192., 16864., 17536., 15796., 16480., 17164., 17848., 16072., 16768., 17464., 18160., 16348., 17056., 17764., 18472., 16624., 17344., 18064., 18784., 16900., 17632., 18364., 19096., 17176., 17920., 18664., 19408., 17452., 18208., 18964., 19720., 17728., 18496., 19264., 20032., 15508., 16224., 16940., 17656., 15784., 16512., 17240., 17968., 16060., 16800., 17540., 18280., 16336., 17088., 17840., 18592., 16612., 17376., 18140., 18904., 16888., 17664., 18440., 19216., 17164., 17952., 18740., 19528., 17440., 18240., 19040., 19840., 17716., 18528., 19340., 20152., 17992., 18816., 19640., 20464., 18268., 19104., 19940., 20776., 18544., 19392., 20240., 21088., 14596., 15328., 16060., 16792., 14872., 15616., 16360., 17104., 15148., 15904., 16660., 17416., 15424., 16192., 16960., 17728., 15700., 16480., 17260., 18040., 15976., 16768., 17560., 18352., 16252., 17056., 17860., 18664., 16528., 17344., 18160., 18976., 15140., 15840., 16540., 17240., 15416., 16128., 16840., 17552., 15692., 16416., 17140., 17864., 15968., 16704., 17440., 18176., 16244., 16992., 17740., 18488., 16520., 17280., 18040., 18800., 16796., 17568., 18340., 19112., 17072., 17856., 18640., 19424., 20612., 21472., 22332., 23192., 20888., 21760., 22632., 23504., 21164., 22048., 22932., 23816., 21440., 22336., 23232., 24128., 18004., 18784., 19564., 20344., 18280., 19072., 19864., 20656., 18556., 19360., 20164., 20968., 18832., 19648., 20464., 21280., 19108., 19936., 20764., 21592., 19384., 20224., 21064., 21904., 19660., 20512., 21364., 22216., 19936., 20800., 21664., 22528., 20212., 21088., 21964., 22840., 20488., 21376., 22264., 23152., 20764., 21664., 22564., 23464., 21040., 21952., 22864., 23776., 21316., 22240., 23164., 24088., 21592., 22528., 23464., 24400., 21868., 22816., 23764., 24712., 22144., 23104., 24064., 25024., 19220., 20064., 20908., 21752., 19496., 20352., 21208., 22064., 19772., 20640., 21508., 22376., 20048., 20928., 21808., 22688., 19684., 20448., 21212., 21976., 19960., 20736., 21512., 22288., 20236., 21024., 21812., 22600., 20512., 21312., 22112., 22912., 19316., 20064., 20812., 21560., 19592., 20352., 21112., 21872., 19868., 20640., 21412., 22184., 20144., 20928., 21712., 22496., 15172., 15840., 16508., 17176., 15448., 16128., 16808., 17488., 15724., 16416., 17108., 17800., 16000., 16704., 17408., 18112., 13588., 14176., 14764., 15352., 13864., 14464., 15064., 15664., 14140., 14752., 15364., 15976., 14416., 15040., 15664., 16288., 14692., 15328., 15964., 16600., 14968., 15616., 16264., 16912., 15244., 15904., 16564., 17224., 15520., 16192., 16864., 17536., 15796., 16480., 17164., 17848., 16072., 16768., 17464., 18160., 16348., 17056., 17764., 18472., 16624., 17344., 18064., 18784., 16900., 17632., 18364., 19096., 17176., 17920., 18664., 19408., 17452., 18208., 18964., 19720., 17728., 18496., 19264., 20032., 15828., 16480., 17132., 17784., 16104., 16768., 17432., 18096., 16380., 17056., 17732., 18408., 16656., 17344., 18032., 18720., 16612., 17376., 18140., 18904., 16888., 17664., 18440., 19216., 17164., 17952., 18740., 19528., 17440., 18240., 19040., 19840., 17716., 18528., 19340., 20152., 17992., 18816., 19640., 20464., 18268., 19104., 19940., 20776., 18544., 19392., 20240., 21088., 14596., 15328., 16060., 16792., 14872., 15616., 16360., 17104., 15148., 15904., 16660., 17416., 15424., 16192., 16960., 17728., 15700., 16480., 17260., 18040., 15976., 16768., 17560., 18352., 16252., 17056., 17860., 18664., 16528., 17344., 18160., 18976., 15140., 15840., 16540., 17240., 15416., 16128., 16840., 17552., 15692., 16416., 17140., 17864., 15968., 16704., 17440., 18176., 16244., 16992., 17740., 18488., 16520., 17280., 18040., 18800., 16796., 17568., 18340., 19112., 17072., 17856., 18640., 19424., 17348., 18144., 18940., 19736., 17624., 18432., 19240., 20048., 17900., 18720., 19540., 20360., 18176., 19008., 19840., 20672., 18004., 18784., 19564., 20344., 18280., 19072., 19864., 20656., 18556., 19360., 20164., 20968., 18832., 19648., 20464., 21280., 19108., 19936., 20764., 21592., 19384., 20224., 21064., 21904., 19660., 20512., 21364., 22216., 19936., 20800., 21664., 22528., 20212., 21088., 21964., 22840., 20488., 21376., 22264., 23152., 20764., 21664., 22564., 23464., 21040., 21952., 22864., 23776., 21316., 22240., 23164., 24088., 21592., 22528., 23464., 24400., 21868., 22816., 23764., 24712., 22144., 23104., 24064., 25024., 19220., 20064., 20908., 21752., 19496., 20352., 21208., 22064., 19772., 20640., 21508., 22376., 20048., 20928., 21808., 22688., 19684., 20448., 21212., 21976., 19960., 20736., 21512., 22288., 20236., 21024., 21812., 22600., 20512., 21312., 22112., 22912., 20788., 21600., 22412., 23224., 21064., 21888., 22712., 23536., 21340., 22176., 23012., 23848., 21616., 22464., 23312., 24160., 15172., 15840., 16508., 17176., 15448., 16128., 16808., 17488., 15724., 16416., 17108., 17800., 16000., 16704., 17408., 18112., 13588., 14176., 14764., 15352., 13864., 14464., 15064., 15664., 14140., 14752., 15364., 15976., 14416., 15040., 15664., 16288., 14692., 15328., 15964., 16600., 14968., 15616., 16264., 16912., 15244., 15904., 16564., 17224., 15520., 16192., 16864., 17536., 15796., 16480., 17164., 17848., 16072., 16768., 17464., 18160., 16348., 17056., 17764., 18472., 16624., 17344., 18064., 18784., 16900., 17632., 18364., 19096., 17176., 17920., 18664., 19408., 17452., 18208., 18964., 19720., 17728., 18496., 19264., 20032., 15828., 16480., 17132., 17784., 16104., 16768., 17432., 18096., 16380., 17056., 17732., 18408., 16656., 17344., 18032., 18720., 16932., 17632., 18332., 19032., 17208., 17920., 18632., 19344., 17484., 18208., 18932., 19656., 17760., 18496., 19232., 19968.};
  const std::array<int, 4> in_shape = {{ 3, 11, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11868., 17031., 17310., 17589., 17868., 11352., 11532., 14172., 20379., 20658., 20937., 21216., 13512., 13692., 17316., 24858., 25236., 25614., 25992., 16515., 16758., 20448., 29394., 29772., 30150., 30528., 19431., 19674., 14492., 18314., 18692., 19070., 19448., 10571., 10814., 11652., 16653., 16878., 17103., 17328., 10956., 11100., 13524., 19353., 19578., 19803., 20028., 12684., 12828.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16926., 17004., 17082., 17160., 17238., 17316., 17394., 17862., 17940., 18018., 18096., 18174., 18252., 18330., 18798., 18876., 18954., 19032., 19110., 19188., 19266., 19734., 19812., 19890., 19968., 20046., 20124., 20202., 20670., 20748., 20826., 20904., 20982., 21060., 21138., 21606., 21684., 21762., 21840., 21918., 21996., 22074., 22542., 22620., 22698., 22776., 22854., 22932., 23010.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9984., 10296., 14028., 14478., 14568., 15036., 15108., 15594., 15648., 16152.,  9708., 10032., 10056., 10392., 14448., 14904., 20508., 21174., 21048., 21732., 21588., 22290., 22128., 22848., 13884., 14352., 14232., 14712., 20532., 21192., 26161., 27060., 26890., 27816., 27619., 28572., 28348., 29328., 16800., 17414., 17268., 17900., 16404., 16960., 22813., 23588., 23542., 24344., 24271., 25100., 25000., 25856., 15312., 15822., 15780., 16308., 12980., 13496., 15881., 16532., 16610., 17288., 17339., 18044., 18068., 18800.,  9472.,  9878.,  9940., 10364., 11712., 12168., 16512., 17178., 16944., 17628., 17376., 18078., 17808., 18528., 11076., 11544., 11352., 11832., 15312., 15912., 19072., 19890., 19504., 20340., 19936., 20790., 20368., 21240., 11892., 12440., 12168., 12728.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11464., 12348., 11608., 12504., 11752., 12660., 11896., 12816., 12040., 12972., 12184., 13128., 12328., 13284., 13192., 14220., 13336., 14376., 13480., 14532., 13624., 14688., 13768., 14844., 13912., 15000., 14056., 15156., 14920., 16092., 15064., 16248., 15208., 16404., 15352., 16560., 15496., 16716., 15640., 16872., 15784., 17028., 16648., 17964., 16792., 18120., 16936., 18276., 17080., 18432., 17224., 18588., 17368., 18744., 17512., 18900., 18376., 19836., 18520., 19992., 18664., 20148., 18808., 20304., 18952., 20460., 19096., 20616., 19240., 20772., 20104., 21708., 20248., 21864., 20392., 22020., 20536., 22176., 20680., 22332., 20824., 22488., 20968., 22644., 17992., 19484., 18136., 19640., 18280., 19796., 18424., 19952., 15240., 16524., 15384., 16680., 15528., 16836.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9672.,  9984., 10296., 10608., 14038., 14488., 14938., 15388., 14588., 15056., 15524., 15992., 15138., 15624., 16110., 16596., 15688., 16192., 16696., 17200.,  9812., 10136., 10460., 10784., 10176., 10512., 10848., 11184., 13848., 14304., 14760., 15216., 20638., 21304., 21970., 22636., 21188., 21872., 22556., 23240., 21738., 22440., 23142., 23844., 22288., 23008., 23728., 24448., 14180., 14648., 15116., 15584., 14544., 15024., 15504., 15984., 19412., 20072., 20732., 21392., 27167., 28066., 28965., 29864., 27894., 28820., 29746., 30672., 28621., 29574., 30527., 31480., 29348., 30328., 31308., 32288., 18202., 18816., 19430., 20044., 18672., 19304., 19936., 20568., 13308., 13864., 14420., 14976., 20339., 21114., 21889., 22664., 21066., 21868., 22670., 23472., 21793., 22622., 23451., 24280., 22520., 23376., 24232., 25088., 14050., 14560., 15070., 15580., 14520., 15048., 15576., 16104., 12644., 13160., 13676., 14192., 18631., 19282., 19933., 20584., 19358., 20036., 20714., 21392., 20085., 20790., 21495., 22200., 20812., 21544., 22276., 23008.,  9386.,  9792., 10198., 10604.,  9856., 10280., 10704., 11128., 12216., 12672., 13128., 13584., 16614., 17280., 17946., 18612., 17076., 17760., 18444., 19128., 17538., 18240., 18942., 19644., 18000., 18720., 19440., 20160., 10676., 11144., 11612., 12080., 10960., 11440., 11920., 12400., 16200., 16800., 17400., 18000., 21070., 21888., 22706., 23524., 21532., 22368., 23204., 24040., 21994., 22848., 23702., 24556., 22456., 23328., 24200., 25072., 13252., 13800., 14348., 14896., 13536., 14096., 14656., 15216.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10268., 10640., 11012., 11384., 10544., 10928., 11312., 11696., 10820., 11216., 11612., 12008., 11096., 11504., 11912., 12320., 11372., 11792., 12212., 12632., 11648., 12080., 12512., 12944., 11924., 12368., 12812., 13256., 13580., 14096., 14612., 15128., 13856., 14384., 14912., 15440., 14132., 14672., 15212., 15752., 14408., 14960., 15512., 16064., 14684., 15248., 15812., 16376., 14960., 15536., 16112., 16688., 15236., 15824., 16412., 17000., 16892., 17552., 18212., 18872., 17168., 17840., 18512., 19184., 17444., 18128., 18812., 19496., 17720., 18416., 19112., 19808., 17996., 18704., 19412., 20120., 18272., 18992., 19712., 20432., 18548., 19280., 20012., 20744., 20204., 21008., 21812., 22616., 20480., 21296., 22112., 22928., 20756., 21584., 22412., 23240., 21032., 21872., 22712., 23552., 21308., 22160., 23012., 23864., 21584., 22448., 23312., 24176., 21860., 22736., 23612., 24488., 23516., 24464., 25412., 26360., 23792., 24752., 25712., 26672., 24068., 25040., 26012., 26984., 24344., 25328., 26312., 27296., 24620., 25616., 26612., 27608., 24896., 25904., 26912., 27920., 25172., 26192., 27212., 28232., 26828., 27920., 29012., 30104., 27104., 28208., 29312., 30416., 27380., 28496., 29612., 30728., 27656., 28784., 29912., 31040., 27932., 29072., 30212., 31352., 28208., 29360., 30512., 31664., 28484., 29648., 30812., 31976., 15420., 16272., 17124., 17976., 15696., 16560., 17424., 18288., 15972., 16848., 17724., 18600., 16248., 17136., 18024., 18912., 11660., 12304., 12948., 13592., 11936., 12592., 13248., 13904., 12212., 12880., 13548., 14216.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10104., 10296., 14199., 14478., 14757., 15036., 15315., 15594., 15873., 16152.,  9852., 10032., 10212., 10392., 14712., 14904., 20895., 21174., 21453., 21732., 22011., 22290., 22569., 22848., 14172., 14352., 14532., 14712., 20931., 21192., 26682., 27060., 27438., 27816., 28194., 28572., 28950., 29328., 17171., 17414., 17657., 17900., 16699., 16960., 23210., 23588., 23966., 24344., 24722., 25100., 25478., 25856., 15579., 15822., 16065., 16308., 13235., 13496., 16154., 16532., 16910., 17288., 17666., 18044., 18422., 18800.,  9635.,  9878., 10121., 10364., 12012., 12168., 16953., 17178., 17403., 17628., 17853., 18078., 18303., 18528., 11400., 11544., 11688., 11832., 15756., 15912., 19665., 19890., 20115., 20340., 20565., 20790., 21015., 21240., 12296., 12440., 12584., 12728.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12270., 12348., 12426., 12504., 12582., 12660., 12738., 12816., 12894., 12972., 13050., 13128., 13206., 13284., 14142., 14220., 14298., 14376., 14454., 14532., 14610., 14688., 14766., 14844., 14922., 15000., 15078., 15156., 16014., 16092., 16170., 16248., 16326., 16404., 16482., 16560., 16638., 16716., 16794., 16872., 16950., 17028., 17886., 17964., 18042., 18120., 18198., 18276., 18354., 18432., 18510., 18588., 18666., 18744., 18822., 18900., 19758., 19836., 19914., 19992., 20070., 20148., 20226., 20304., 20382., 20460., 20538., 20616., 20694., 20772., 21630., 21708., 21786., 21864., 21942., 22020., 22098., 22176., 22254., 22332., 22410., 22488., 22566., 22644., 19406., 19484., 19562., 19640., 19718., 19796., 19874., 19952., 16446., 16524., 16602., 16680., 16758., 16836.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11852., 12272., 12224., 12656., 14588., 15086., 15128., 15644., 15668., 16202., 16208., 16760., 16748., 17318., 17288., 17876., 17828., 18434., 18368., 18992.,  9532.,  9848.,  9880., 10208., 10228., 10568., 10576., 10928., 14380., 14832., 14752., 15216., 16028., 16574., 16568., 17132., 17108., 17690., 17648., 18248., 18188., 18806., 18728., 19364., 19268., 19922., 19808., 20480.,  8924.,  9272.,  9272.,  9632.,  9620.,  9992.,  9968., 10352., 16752., 17286., 17256., 17808., 20041., 20724., 20770., 21480., 21499., 22236., 22228., 22992., 22957., 23748., 23686., 24504., 24415., 25260., 25144., 26016., 13740., 14246., 14208., 14732., 14676., 15218., 15144., 15704., 18672., 19318., 19176., 19840., 25441., 26324., 26170., 27080., 26899., 27836., 27628., 28592., 28357., 29348., 29086., 30104., 29815., 30860., 30544., 31616., 17868., 18486., 18336., 18972., 18804., 19458., 19272., 19944., 14704., 15334., 15208., 15856., 16633., 17332., 17362., 18088., 18091., 18844., 18820., 19600., 19549., 20356., 20278., 21112., 21007., 21868., 21736., 22624., 10028., 10438., 10496., 10924., 10964., 11410., 11432., 11896., 11668., 12120., 11968., 12432., 12752., 13298., 13184., 13748., 13616., 14198., 14048., 14648., 14480., 15098., 14912., 15548., 15344., 15998., 15776., 16448.,  6836.,  7184.,  7112.,  7472.,  7388.,  7760.,  7664.,  8048., 11124., 11544., 11424., 11856., 12688., 13218., 13120., 13668., 13552., 14118., 13984., 14568., 14416., 15018., 14848., 15468., 15280., 15918., 15712., 16368.,  8340.,  8720.,  8616.,  9008.,  8892.,  9296.,  9168.,  9584.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10496., 11228., 10640., 11384., 10784., 11540., 10928., 11696., 11072., 11852., 11216., 12008., 11360., 12164., 11504., 12320., 11648., 12476., 11792., 12632., 11936., 12788., 12080., 12944., 12224., 13100., 12368., 13256., 13952., 14972., 14096., 15128., 14240., 15284., 14384., 15440., 14528., 15596., 14672., 15752., 14816., 15908., 14960., 16064., 15104., 16220., 15248., 16376., 15392., 16532., 15536., 16688., 15680., 16844., 15824., 17000., 17408., 18716., 17552., 18872., 17696., 19028., 17840., 19184., 17984., 19340., 18128., 19496., 18272., 19652., 18416., 19808., 18560., 19964., 18704., 20120., 18848., 20276., 18992., 20432., 19136., 20588., 19280., 20744., 20864., 22460., 21008., 22616., 21152., 22772., 21296., 22928., 21440., 23084., 21584., 23240., 21728., 23396., 21872., 23552., 22016., 23708., 22160., 23864., 22304., 24020., 22448., 24176., 22592., 24332., 22736., 24488., 24320., 26204., 24464., 26360., 24608., 26516., 24752., 26672., 24896., 26828., 25040., 26984., 25184., 27140., 25328., 27296., 25472., 27452., 25616., 27608., 25760., 27764., 25904., 27920., 26048., 28076., 26192., 28232., 27776., 29948., 27920., 30104., 28064., 30260., 28208., 30416., 28352., 30572., 28496., 30728., 28640., 30884., 28784., 31040., 28928., 31196., 29072., 31352., 29216., 31508., 29360., 31664., 29504., 31820., 29648., 31976., 16128., 17820., 16272., 17976., 16416., 18132., 16560., 18288., 16704., 18444., 16848., 18600., 16992., 18756., 17136., 18912., 12160., 13436., 12304., 13592., 12448., 13748., 12592., 13904., 12736., 14060., 12880., 14216.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11892., 12312., 12732., 13152., 12240., 12672., 13104., 13536., 14342., 14840., 15338., 15836., 14892., 15408., 15924., 16440., 15442., 15976., 16510., 17044., 15992., 16544., 17096., 17648., 16542., 17112., 17682., 18252., 17092., 17680., 18268., 18856., 17642., 18248., 18854., 19460., 18192., 18816., 19440., 20064.,  8700.,  9016.,  9332.,  9648.,  9064.,  9392.,  9720., 10048.,  9428.,  9768., 10108., 10448.,  9792., 10144., 10496., 10848., 11796., 12248., 12700., 13152., 12144., 12608., 13072., 13536., 17174., 17720., 18266., 18812., 17724., 18288., 18852., 19416., 18274., 18856., 19438., 20020., 18824., 19424., 20024., 20624., 19374., 19992., 20610., 21228., 19924., 20560., 21196., 21832., 20474., 21128., 21782., 22436., 21024., 21696., 22368., 23040., 12060., 12408., 12756., 13104., 12424., 12784., 13144., 13504., 12788., 13160., 13532., 13904., 13152., 13536., 13920., 14304., 16074., 16608., 17142., 17676., 16552., 17104., 17656., 18208., 20263., 20946., 21629., 22312., 20990., 21700., 22410., 23120., 21717., 22454., 23191., 23928., 22444., 23208., 23972., 24736., 23171., 23962., 24753., 25544., 23898., 24716., 25534., 26352., 24625., 25470., 26315., 27160., 25352., 26224., 27096., 27968., 14238., 14744., 15250., 15756., 14708., 15232., 15756., 16280., 15178., 15720., 16262., 16804., 15648., 16208., 16768., 17328., 15706., 16352., 16998., 17644., 16184., 16848., 17512., 18176., 22159., 23042., 23925., 24808., 22886., 23796., 24706., 25616., 23613., 24550., 25487., 26424., 24340., 25304., 26268., 27232., 25067., 26058., 27049., 28040., 25794., 26812., 27830., 28848., 26521., 27566., 28611., 29656., 27248., 28320., 29392., 30464., 15726., 16344., 16962., 17580., 16196., 16832., 17468., 18104., 16666., 17320., 17974., 18628., 17136., 17808., 18480., 19152., 15978., 16608., 17238., 17868., 16456., 17104., 17752., 18400., 20599., 21298., 21997., 22696., 21326., 22052., 22778., 23504., 22053., 22806., 23559., 24312., 22780., 23560., 24340., 25120., 23507., 24314., 25121., 25928., 24234., 25068., 25902., 26736., 24961., 25822., 26683., 27544., 25688., 26576., 27464., 28352.,  9982., 10392., 10802., 11212., 10452., 10880., 11308., 11736., 10922., 11368., 11814., 12260., 11392., 11856., 12320., 12784., 13924., 14376., 14828., 15280., 14256., 14720., 15184., 15648., 14334., 14880., 15426., 15972., 14796., 15360., 15924., 16488., 15258., 15840., 16422., 17004., 15720., 16320., 16920., 17520., 16182., 16800., 17418., 18036., 16644., 17280., 17916., 18552., 17106., 17760., 18414., 19068., 17568., 18240., 18912., 19584.,  7948.,  8296.,  8644.,  8992.,  8232.,  8592.,  8952.,  9312.,  8516.,  8888.,  9260.,  9632.,  8800.,  9184.,  9568.,  9952., 10820., 11240., 11660., 12080., 11152., 11584., 12016., 12448., 13198., 13728., 14258., 14788., 13660., 14208., 14756., 15304., 14122., 14688., 15254., 15820., 14584., 15168., 15752., 16336., 15046., 15648., 16250., 16852., 15508., 16128., 16748., 17368., 15970., 16608., 17246., 17884., 16432., 17088., 17744., 18400.,  8876.,  9256.,  9636., 10016.,  9160.,  9552.,  9944., 10336.,  9444.,  9848., 10252., 10656.,  9728., 10144., 10560., 10976.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20260., 20992., 21724., 22456., 20536., 21280., 22024., 22768., 20812., 21568., 22324., 23080., 21088., 21856., 22624., 23392., 21364., 22144., 22924., 23704., 21640., 22432., 23224., 24016., 21916., 22720., 23524., 24328., 22192., 23008., 23824., 24640., 16708., 17408., 18108., 18808., 16984., 17696., 18408., 19120., 17260., 17984., 18708., 19432., 17536., 18272., 19008., 19744., 17812., 18560., 19308., 20056., 18088., 18848., 19608., 20368.,  7300.,  7680.,  8060.,  8440.,  7576.,  7968.,  8360.,  8752.,  7852.,  8256.,  8660.,  9064.,  8128.,  8544.,  8960.,  9376.,  8404.,  8832.,  9260.,  9688.,  8680.,  9120.,  9560., 10000.,  8956.,  9408.,  9860., 10312.,  9232.,  9696., 10160., 10624.,  8356.,  8704.,  9052.,  9400.,  8632.,  8992.,  9352.,  9712.,  8908.,  9280.,  9652., 10024.,  9184.,  9568.,  9952., 10336.,  9460.,  9856., 10252., 10648.,  9736., 10144., 10552., 10960., 12772., 13312., 13852., 14392., 13048., 13600., 14152., 14704., 13324., 13888., 14452., 15016., 13600., 14176., 14752., 15328., 13876., 14464., 15052., 15640., 14152., 14752., 15352., 15952., 14428., 15040., 15652., 16264., 14704., 15328., 15952., 16576., 14980., 15616., 16252., 16888., 15256., 15904., 16552., 17200., 15532., 16192., 16852., 17512., 15808., 16480., 17152., 17824., 16084., 16768., 17452., 18136., 16360., 17056., 17752., 18448., 19396., 20224., 21052., 21880., 19672., 20512., 21352., 22192., 19948., 20800., 21652., 22504., 20224., 21088., 21952., 22816., 20500., 21376., 22252., 23128., 20776., 21664., 22552., 23440., 21052., 21952., 22852., 23752., 21328., 22240., 23152., 24064., 21604., 22528., 23452., 24376., 21880., 22816., 23752., 24688., 22156., 23104., 24052., 25000., 22432., 23392., 24352., 25312., 22708., 23680., 24652., 25624., 22984., 23968., 24952., 25936., 26020., 27136., 28252., 29368., 26296., 27424., 28552., 29680., 26572., 27712., 28852., 29992., 26848., 28000., 29152., 30304., 27124., 28288., 29452., 30616., 27400., 28576., 29752., 30928., 27676., 28864., 30052., 31240., 27952., 29152., 30352., 31552., 23492., 24576., 25660., 26744., 23768., 24864., 25960., 27056., 24044., 25152., 26260., 27368., 24320., 25440., 26560., 27680., 24596., 25728., 26860., 27992., 24872., 26016., 27160., 28304., 18180., 18944., 19708., 20472., 18456., 19232., 20008., 20784., 18732., 19520., 20308., 21096., 19008., 19808., 20608., 21408., 19284., 20096., 20908., 21720., 19560., 20384., 21208., 22032., 19836., 20672., 21508., 22344., 20112., 20960., 21808., 22656., 20260., 20992., 21724., 22456., 20536., 21280., 22024., 22768., 20812., 21568., 22324., 23080., 21088., 21856., 22624., 23392., 21364., 22144., 22924., 23704., 21640., 22432., 23224., 24016.,  9956., 10496., 11036., 11576., 10232., 10784., 11336., 11888., 10508., 11072., 11636., 12200., 10784., 11360., 11936., 12512., 11060., 11648., 12236., 12824., 11336., 11936., 12536., 13136., 11612., 12224., 12836., 13448., 11888., 12512., 13136., 13760.,  7300.,  7680.,  8060.,  8440.,  7576.,  7968.,  8360.,  8752.,  7852.,  8256.,  8660.,  9064.,  8128.,  8544.,  8960.,  9376.,  8404.,  8832.,  9260.,  9688.,  8680.,  9120.,  9560., 10000.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12080., 12272., 12464., 12656., 14807., 15086., 15365., 15644., 15923., 16202., 16481., 16760., 17039., 17318., 17597., 17876., 18155., 18434., 18713., 18992.,  9668.,  9848., 10028., 10208., 10388., 10568., 10748., 10928., 14640., 14832., 15024., 15216., 16295., 16574., 16853., 17132., 17411., 17690., 17969., 18248., 18527., 18806., 19085., 19364., 19643., 19922., 20201., 20480.,  9092.,  9272.,  9452.,  9632.,  9812.,  9992., 10172., 10352., 17025., 17286., 17547., 17808., 20346., 20724., 21102., 21480., 21858., 22236., 22614., 22992., 23370., 23748., 24126., 24504., 24882., 25260., 25638., 26016., 14003., 14246., 14489., 14732., 14975., 15218., 15461., 15704., 19057., 19318., 19579., 19840., 25946., 26324., 26702., 27080., 27458., 27836., 28214., 28592., 28970., 29348., 29726., 30104., 30482., 30860., 31238., 31616., 18243., 18486., 18729., 18972., 19215., 19458., 19701., 19944., 15073., 15334., 15595., 15856., 16954., 17332., 17710., 18088., 18466., 18844., 19222., 19600., 19978., 20356., 20734., 21112., 21490., 21868., 22246., 22624., 10195., 10438., 10681., 10924., 11167., 11410., 11653., 11896., 11964., 12120., 12276., 12432., 13073., 13298., 13523., 13748., 13973., 14198., 14423., 14648., 14873., 15098., 15323., 15548., 15773., 15998., 16223., 16448.,  7040.,  7184.,  7328.,  7472.,  7616.,  7760.,  7904.,  8048., 11388., 11544., 11700., 11856., 12993., 13218., 13443., 13668., 13893., 14118., 14343., 14568., 14793., 15018., 15243., 15468., 15693., 15918., 16143., 16368.,  8576.,  8720.,  8864.,  9008.,  9152.,  9296.,  9440.,  9584.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11150., 11228., 11306., 11384., 11462., 11540., 11618., 11696., 11774., 11852., 11930., 12008., 12086., 12164., 12242., 12320., 12398., 12476., 12554., 12632., 12710., 12788., 12866., 12944., 13022., 13100., 13178., 13256., 14894., 14972., 15050., 15128., 15206., 15284., 15362., 15440., 15518., 15596., 15674., 15752., 15830., 15908., 15986., 16064., 16142., 16220., 16298., 16376., 16454., 16532., 16610., 16688., 16766., 16844., 16922., 17000., 18638., 18716., 18794., 18872., 18950., 19028., 19106., 19184., 19262., 19340., 19418., 19496., 19574., 19652., 19730., 19808., 19886., 19964., 20042., 20120., 20198., 20276., 20354., 20432., 20510., 20588., 20666., 20744., 22382., 22460., 22538., 22616., 22694., 22772., 22850., 22928., 23006., 23084., 23162., 23240., 23318., 23396., 23474., 23552., 23630., 23708., 23786., 23864., 23942., 24020., 24098., 24176., 24254., 24332., 24410., 24488., 26126., 26204., 26282., 26360., 26438., 26516., 26594., 26672., 26750., 26828., 26906., 26984., 27062., 27140., 27218., 27296., 27374., 27452., 27530., 27608., 27686., 27764., 27842., 27920., 27998., 28076., 28154., 28232., 29870., 29948., 30026., 30104., 30182., 30260., 30338., 30416., 30494., 30572., 30650., 30728., 30806., 30884., 30962., 31040., 31118., 31196., 31274., 31352., 31430., 31508., 31586., 31664., 31742., 31820., 31898., 31976., 17742., 17820., 17898., 17976., 18054., 18132., 18210., 18288., 18366., 18444., 18522., 18600., 18678., 18756., 18834., 18912., 13358., 13436., 13514., 13592., 13670., 13748., 13826., 13904., 13982., 14060., 14138., 14216.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3812., 4064., 3992., 4256., 4172., 4448., 4352., 4640., 2588., 2734., 2872., 3036., 3156., 3338., 3440., 3640., 3724., 3942., 4008., 4244., 4292., 4546., 4576., 4848., 4860., 5150., 5144., 5452., 5428., 5754., 5712., 6056., 5996., 6358., 6280., 6660., 6564., 6962., 6848., 7264., 1404., 1512., 1592., 1712., 1780., 1912., 1968., 2112., 2156., 2312., 2344., 2512., 2532., 2712., 2720., 2912., 3748., 4000., 3928., 4192., 4108., 4384., 4288., 4576., 2524., 2702., 2808., 3004., 3092., 3306., 3376., 3608., 3660., 3910., 3944., 4212., 4228., 4514., 4512., 4816., 4796., 5118., 5080., 5420., 5364., 5722., 5648., 6024., 5932., 6326., 6216., 6628., 6500., 6930., 6784., 7232., 1980., 2088., 2168., 2288., 2356., 2488., 2544., 2688., 2732., 2888., 2920., 3088., 3108., 3288., 3296., 3488., 5256., 5634., 5504., 5900., 5752., 6166., 6000., 6432., 3513., 3732., 3890., 4136., 4267., 4540., 4644., 4944., 5021., 5348., 5398., 5752., 5775., 6156., 6152., 6560., 6529., 6964., 6906., 7368., 7283., 7772., 7660., 8176., 8037., 8580., 8414., 8984., 8791., 9388., 9168., 9792., 1892., 2054., 2136., 2316., 2380., 2578., 2624., 2840., 2868., 3102., 3112., 3364., 3356., 3626., 3600., 3888., 5160., 5538., 5408., 5804., 5656., 6070., 5904., 6336., 3273., 3540., 3650., 3944., 4027., 4348., 4404., 4752., 4781., 5156., 5158., 5560., 5535., 5964., 5912., 6368., 6289., 6772., 6666., 7176., 7043., 7580., 7420., 7984., 7797., 8388., 8174., 8792., 8551., 9196., 8928., 9600., 2500., 2662., 2744., 2924., 2988., 3186., 3232., 3448., 3476., 3710., 3720., 3972., 3964., 4234., 4208., 4496., 5256., 5634., 5504., 5900., 5752., 6166., 6000., 6432., 3513., 3732., 3890., 4136., 4267., 4540., 4644., 4944., 5021., 5348., 5398., 5752., 5775., 6156., 6152., 6560., 6529., 6964., 6906., 7368., 7283., 7772., 7660., 8176., 8037., 8580., 8414., 8984., 8791., 9388., 9168., 9792., 1892., 2054., 2136., 2316., 2380., 2578., 2624., 2840., 2868., 3102., 3112., 3364., 3356., 3626., 3600., 3888., 3580., 3832., 3752., 4016., 3924., 4200., 4096., 4384., 2032., 2210., 2272., 2468., 2512., 2726., 2752., 2984., 2992., 3242., 3232., 3500., 3472., 3758., 3712., 4016., 3952., 4274., 4192., 4532., 4432., 4790., 4672., 5048., 4912., 5306., 5152., 5564., 5392., 5822., 5632., 6080., 1364., 1472., 1512., 1632., 1660., 1792., 1808., 1952., 1956., 2112., 2104., 2272., 2252., 2432., 2400., 2592., 3644., 3896., 3816., 4080., 3988., 4264., 4160., 4448., 2288., 2434., 2528., 2692., 2768., 2950., 3008., 3208., 3248., 3466., 3488., 3724., 3728., 3982., 3968., 4240., 4208., 4498., 4448., 4756., 4688., 5014., 4928., 5272., 5168., 5530., 5408., 5788., 5648., 6046., 5888., 6304., 1300., 1408., 1448., 1568., 1596., 1728., 1744., 1888., 1892., 2048., 2040., 2208., 2188., 2368., 2336., 2528.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20848., 22300., 20992., 22456., 21136., 22612., 21280., 22768., 21424., 22924., 21568., 23080., 21712., 23236., 21856., 23392., 22000., 23548., 22144., 23704., 22288., 23860., 22432., 24016., 22576., 24172., 22720., 24328., 22864., 24484., 23008., 24640., 17264., 18652., 17408., 18808., 17552., 18964., 17696., 19120., 17840., 19276., 17984., 19432., 18128., 19588., 18272., 19744., 18416., 19900., 18560., 20056., 18704., 20212., 18848., 20368.,  7536.,  8284.,  7680.,  8440.,  7824.,  8596.,  7968.,  8752.,  8112.,  8908.,  8256.,  9064.,  8400.,  9220.,  8544.,  9376.,  8688.,  9532.,  8832.,  9688.,  8976.,  9844.,  9120., 10000.,  9264., 10156.,  9408., 10312.,  9552., 10468.,  9696., 10624.,  8560.,  9244.,  8704.,  9400.,  8848.,  9556.,  8992.,  9712.,  9136.,  9868.,  9280., 10024.,  9424., 10180.,  9568., 10336.,  9712., 10492.,  9856., 10648., 10000., 10804., 10144., 10960., 13168., 14236., 13312., 14392., 13456., 14548., 13600., 14704., 13744., 14860., 13888., 15016., 14032., 15172., 14176., 15328., 14320., 15484., 14464., 15640., 14608., 15796., 14752., 15952., 14896., 16108., 15040., 16264., 15184., 16420., 15328., 16576., 15472., 16732., 15616., 16888., 15760., 17044., 15904., 17200., 16048., 17356., 16192., 17512., 16336., 17668., 16480., 17824., 16624., 17980., 16768., 18136., 16912., 18292., 17056., 18448., 20080., 21724., 20224., 21880., 20368., 22036., 20512., 22192., 20656., 22348., 20800., 22504., 20944., 22660., 21088., 22816., 21232., 22972., 21376., 23128., 21520., 23284., 21664., 23440., 21808., 23596., 21952., 23752., 22096., 23908., 22240., 24064., 22384., 24220., 22528., 24376., 22672., 24532., 22816., 24688., 22960., 24844., 23104., 25000., 23248., 25156., 23392., 25312., 23536., 25468., 23680., 25624., 23824., 25780., 23968., 25936., 26992., 29212., 27136., 29368., 27280., 29524., 27424., 29680., 27568., 29836., 27712., 29992., 27856., 30148., 28000., 30304., 28144., 30460., 28288., 30616., 28432., 30772., 28576., 30928., 28720., 31084., 28864., 31240., 29008., 31396., 29152., 31552., 24432., 26588., 24576., 26744., 24720., 26900., 24864., 27056., 25008., 27212., 25152., 27368., 25296., 27524., 25440., 27680., 25584., 27836., 25728., 27992., 25872., 28148., 26016., 28304., 18800., 20316., 18944., 20472., 19088., 20628., 19232., 20784., 19376., 20940., 19520., 21096., 19664., 21252., 19808., 21408., 19952., 21564., 20096., 21720., 20240., 21876., 20384., 22032., 20528., 22188., 20672., 22344., 20816., 22500., 20960., 22656., 20848., 22300., 20992., 22456., 21136., 22612., 21280., 22768., 21424., 22924., 21568., 23080., 21712., 23236., 21856., 23392., 22000., 23548., 22144., 23704., 22288., 23860., 22432., 24016., 10352., 11420., 10496., 11576., 10640., 11732., 10784., 11888., 10928., 12044., 11072., 12200., 11216., 12356., 11360., 12512., 11504., 12668., 11648., 12824., 11792., 12980., 11936., 13136., 12080., 13292., 12224., 13448., 12368., 13604., 12512., 13760.,  7536.,  8284.,  7680.,  8440.,  7824.,  8596.,  7968.,  8752.,  8112.,  8908.,  8256.,  9064.,  8400.,  9220.,  8544.,  9376.,  8688.,  9532.,  8832.,  9688.,  8976.,  9844.,  9120., 10000.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3756.,  4008.,  4260.,  4512.,  3944.,  4208.,  4472.,  4736.,  4132.,  4408.,  4684.,  4960.,  4320.,  4608.,  4896.,  5184.,  2726.,  2872.,  3018.,  3164.,  3020.,  3184.,  3348.,  3512.,  3314.,  3496.,  3678.,  3860.,  3608.,  3808.,  4008.,  4208.,  3902.,  4120.,  4338.,  4556.,  4196.,  4432.,  4668.,  4904.,  4490.,  4744.,  4998.,  5252.,  4784.,  5056.,  5328.,  5600.,  5078.,  5368.,  5658.,  5948.,  5372.,  5680.,  5988.,  6296.,  5666.,  5992.,  6318.,  6644.,  5960.,  6304.,  6648.,  6992.,  6254.,  6616.,  6978.,  7340.,  6548.,  6928.,  7308.,  7688.,  6842.,  7240.,  7638.,  8036.,  7136.,  7552.,  7968.,  8384.,  1516.,  1624.,  1732.,  1840.,  1720.,  1840.,  1960.,  2080.,  1924.,  2056.,  2188.,  2320.,  2128.,  2272.,  2416.,  2560.,  2332.,  2488.,  2644.,  2800.,  2536.,  2704.,  2872.,  3040.,  2740.,  2920.,  3100.,  3280.,  2944.,  3136.,  3328.,  3520.,  4140.,  4392.,  4644.,  4896.,  4328.,  4592.,  4856.,  5120.,  4516.,  4792.,  5068.,  5344.,  4704.,  4992.,  5280.,  5568.,  2566.,  2744.,  2922.,  3100.,  2860.,  3056.,  3252.,  3448.,  3154.,  3368.,  3582.,  3796.,  3448.,  3680.,  3912.,  4144.,  3742.,  3992.,  4242.,  4492.,  4036.,  4304.,  4572.,  4840.,  4330.,  4616.,  4902.,  5188.,  4624.,  4928.,  5232.,  5536.,  4918.,  5240.,  5562.,  5884.,  5212.,  5552.,  5892.,  6232.,  5506.,  5864.,  6222.,  6580.,  5800.,  6176.,  6552.,  6928.,  6094.,  6488.,  6882.,  7276.,  6388.,  6800.,  7212.,  7624.,  6682.,  7112.,  7542.,  7972.,  6976.,  7424.,  7872.,  8320.,  2156.,  2264.,  2372.,  2480.,  2360.,  2480.,  2600.,  2720.,  2564.,  2696.,  2828.,  2960.,  2768.,  2912.,  3056.,  3200.,  2972.,  3128.,  3284.,  3440.,  3176.,  3344.,  3512.,  3680.,  3380.,  3560.,  3740.,  3920.,  3584.,  3776.,  3968.,  4160.,  5174.,  5552.,  5930.,  6308.,  5428.,  5824.,  6220.,  6616.,  5682.,  6096.,  6510.,  6924.,  5936.,  6368.,  6800.,  7232.,  3383.,  3602.,  3821.,  4040.,  3758.,  4004.,  4250.,  4496.,  4133.,  4406.,  4679.,  4952.,  4508.,  4808.,  5108.,  5408.,  4883.,  5210.,  5537.,  5864.,  5258.,  5612.,  5966.,  6320.,  5633.,  6014.,  6395.,  6776.,  6008.,  6416.,  6824.,  7232.,  6383.,  6818.,  7253.,  7688.,  6758.,  7220.,  7682.,  8144.,  7133.,  7622.,  8111.,  8600.,  7508.,  8024.,  8540.,  9056.,  7883.,  8426.,  8969.,  9512.,  8258.,  8828.,  9398.,  9968.,  8633.,  9230.,  9827., 10424.,  9008.,  9632., 10256., 10880.,  1862.,  2024.,  2186.,  2348.,  2108.,  2288.,  2468.,  2648.,  2354.,  2552.,  2750.,  2948.,  2600.,  2816.,  3032.,  3248.,  2846.,  3080.,  3314.,  3548.,  3092.,  3344.,  3596.,  3848.,  3338.,  3608.,  3878.,  4148.,  3584.,  3872.,  4160.,  4448.,  5494.,  5872.,  6250.,  6628.,  5748.,  6144.,  6540.,  6936.,  6002.,  6416.,  6830.,  7244.,  6256.,  6688.,  7120.,  7552.,  3367.,  3634.,  3901.,  4168.,  3742.,  4036.,  4330.,  4624.,  4117.,  4438.,  4759.,  5080.,  4492.,  4840.,  5188.,  5536.,  4867.,  5242.,  5617.,  5992.,  5242.,  5644.,  6046.,  6448.,  5617.,  6046.,  6475.,  6904.,  5992.,  6448.,  6904.,  7360.,  6367.,  6850.,  7333.,  7816.,  6742.,  7252.,  7762.,  8272.,  7117.,  7654.,  8191.,  8728.,  7492.,  8056.,  8620.,  9184.,  7867.,  8458.,  9049.,  9640.,  8242.,  8860.,  9478., 10096.,  8617.,  9262.,  9907., 10552.,  8992.,  9664., 10336., 11008.,  2566.,  2728.,  2890.,  3052.,  2812.,  2992.,  3172.,  3352.,  3058.,  3256.,  3454.,  3652.,  3304.,  3520.,  3736.,  3952.,  3550.,  3784.,  4018.,  4252.,  3796.,  4048.,  4300.,  4552.,  4042.,  4312.,  4582.,  4852.,  4288.,  4576.,  4864.,  5152.,  5174.,  5552.,  5930.,  6308.,  5428.,  5824.,  6220.,  6616.,  5682.,  6096.,  6510.,  6924.,  5936.,  6368.,  6800.,  7232.,  3383.,  3602.,  3821.,  4040.,  3758.,  4004.,  4250.,  4496.,  4133.,  4406.,  4679.,  4952.,  4508.,  4808.,  5108.,  5408.,  4883.,  5210.,  5537.,  5864.,  5258.,  5612.,  5966.,  6320.,  5633.,  6014.,  6395.,  6776.,  6008.,  6416.,  6824.,  7232.,  6383.,  6818.,  7253.,  7688.,  6758.,  7220.,  7682.,  8144.,  7133.,  7622.,  8111.,  8600.,  7508.,  8024.,  8540.,  9056.,  7883.,  8426.,  8969.,  9512.,  8258.,  8828.,  9398.,  9968.,  8633.,  9230.,  9827., 10424.,  9008.,  9632., 10256., 10880.,  1862.,  2024.,  2186.,  2348.,  2108.,  2288.,  2468.,  2648.,  2354.,  2552.,  2750.,  2948.,  2600.,  2816.,  3032.,  3248.,  2846.,  3080.,  3314.,  3548.,  3092.,  3344.,  3596.,  3848.,  3338.,  3608.,  3878.,  4148.,  3584.,  3872.,  4160.,  4448.,  4220.,  4472.,  4724.,  4976.,  4424.,  4688.,  4952.,  5216.,  4628.,  4904.,  5180.,  5456.,  4832.,  5120.,  5408.,  5696.,  2670.,  2848.,  3026.,  3204.,  2940.,  3136.,  3332.,  3528.,  3210.,  3424.,  3638.,  3852.,  3480.,  3712.,  3944.,  4176.,  3750.,  4000.,  4250.,  4500.,  4020.,  4288.,  4556.,  4824.,  4290.,  4576.,  4862.,  5148.,  4560.,  4864.,  5168.,  5472.,  4830.,  5152.,  5474.,  5796.,  5100.,  5440.,  5780.,  6120.,  5370.,  5728.,  6086.,  6444.,  5640.,  6016.,  6392.,  6768.,  5910.,  6304.,  6698.,  7092.,  6180.,  6592.,  7004.,  7416.,  6450.,  6880.,  7310.,  7740.,  6720.,  7168.,  7616.,  8064.,  1468.,  1576.,  1684.,  1792.,  1624.,  1744.,  1864.,  1984.,  1780.,  1912.,  2044.,  2176.,  1936.,  2080.,  2224.,  2368.,  2092.,  2248.,  2404.,  2560.,  2248.,  2416.,  2584.,  2752.,  2404.,  2584.,  2764.,  2944.,  2560.,  2752.,  2944.,  3136.,  4348.,  4600.,  4852.,  5104.,  4552.,  4816.,  5080.,  5344.,  4756.,  5032.,  5308.,  5584.,  4960.,  5248.,  5536.,  5824.,  2190.,  2336.,  2482.,  2628.,  2460.,  2624.,  2788.,  2952.,  2730.,  2912.,  3094.,  3276.,  3000.,  3200.,  3400.,  3600.,  3270.,  3488.,  3706.,  3924.,  3540.,  3776.,  4012.,  4248.,  3810.,  4064.,  4318.,  4572.,  4080.,  4352.,  4624.,  4896.,  4350.,  4640.,  4930.,  5220.,  4620.,  4928.,  5236.,  5544.,  4890.,  5216.,  5542.,  5868.,  5160.,  5504.,  5848.,  6192.,  5430.,  5792.,  6154.,  6516.,  5700.,  6080.,  6460.,  6840.,  5970.,  6368.,  6766.,  7164.,  6240.,  6656.,  7072.,  7488.,  1340.,  1448.,  1556.,  1664.,  1496.,  1616.,  1736.,  1856.,  1652.,  1784.,  1916.,  2048.,  1808.,  1952.,  2096.,  2240.,  1964.,  2120.,  2276.,  2432.,  2120.,  2288.,  2456.,  2624.,  2276.,  2456.,  2636.,  2816.,  2432.,  2624.,  2816.,  3008.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19508., 20192., 20876., 21560., 19784., 20480., 21176., 21872., 20060., 20768., 21476., 22184., 20336., 21056., 21776., 22496., 20612., 21344., 22076., 22808., 20888., 21632., 22376., 23120., 21164., 21920., 22676., 23432., 21440., 22208., 22976., 23744., 21716., 22496., 23276., 24056., 21992., 22784., 23576., 24368., 22268., 23072., 23876., 24680., 22544., 23360., 24176., 24992., 22820., 23648., 24476., 25304., 23096., 23936., 24776., 25616., 23372., 24224., 25076., 25928., 23648., 24512., 25376., 26240., 18164., 18912., 19660., 20408., 18440., 19200., 19960., 20720., 18716., 19488., 20260., 21032., 18992., 19776., 20560., 21344., 19268., 20064., 20860., 21656., 19544., 20352., 21160., 21968., 19820., 20640., 21460., 22280., 20096., 20928., 21760., 22592., 20372., 21216., 22060., 22904., 20648., 21504., 22360., 23216., 20924., 21792., 22660., 23528., 21200., 22080., 22960., 23840., 13172., 13792., 14412., 15032., 13448., 14080., 14712., 15344., 13724., 14368., 15012., 15656., 14000., 14656., 15312., 15968., 14276., 14944., 15612., 16280., 14552., 15232., 15912., 16592., 14828., 15520., 16212., 16904., 15104., 15808., 16512., 17216., 15380., 16096., 16812., 17528., 15656., 16384., 17112., 17840., 15932., 16672., 17412., 18152., 16208., 16960., 17712., 18464., 16484., 17248., 18012., 18776., 16760., 17536., 18312., 19088., 17036., 17824., 18612., 19400., 17312., 18112., 18912., 19712., 16436., 17120., 17804., 18488., 16712., 17408., 18104., 18800., 16988., 17696., 18404., 19112., 17264., 17984., 18704., 19424., 17540., 18272., 19004., 19736., 17816., 18560., 19304., 20048., 18092., 18848., 19604., 20360., 18368., 19136., 19904., 20672., 18644., 19424., 20204., 20984., 18920., 19712., 20504., 21296., 19196., 20000., 20804., 21608., 19472., 20288., 21104., 21920., 13620., 14304., 14988., 15672., 13896., 14592., 15288., 15984., 14172., 14880., 15588., 16296., 14448., 15168., 15888., 16608., 14724., 15456., 16188., 16920., 15000., 15744., 16488., 17232., 15276., 16032., 16788., 17544., 15552., 16320., 17088., 17856., 15828., 16608., 17388., 18168., 16104., 16896., 17688., 18480., 16380., 17184., 17988., 18792., 16656., 17472., 18288., 19104., 16932., 17760., 18588., 19416., 17208., 18048., 18888., 19728., 17484., 18336., 19188., 20040., 17760., 18624., 19488., 20352., 15220., 15840., 16460., 17080., 15496., 16128., 16760., 17392., 15772., 16416., 17060., 17704., 16048., 16704., 17360., 18016., 16324., 16992., 17660., 18328., 16600., 17280., 17960., 18640., 16876., 17568., 18260., 18952., 17152., 17856., 18560., 19264., 17428., 18144., 18860., 19576., 17704., 18432., 19160., 19888., 17980., 18720., 19460., 20200., 18256., 19008., 19760., 20512., 18164., 18912., 19660., 20408., 18440., 19200., 19960., 20720., 18716., 19488., 20260., 21032., 18992., 19776., 20560., 21344., 19268., 20064., 20860., 21656., 19544., 20352., 21160., 21968., 19820., 20640., 21460., 22280., 20096., 20928., 21760., 22592., 20372., 21216., 22060., 22904., 20648., 21504., 22360., 23216., 20924., 21792., 22660., 23528., 21200., 22080., 22960., 23840., 21476., 22368., 23260., 24152., 21752., 22656., 23560., 24464., 22028., 22944., 23860., 24776., 22304., 23232., 24160., 25088., 13620., 14304., 14988., 15672., 13896., 14592., 15288., 15984., 14172., 14880., 15588., 16296., 14448., 15168., 15888., 16608., 14724., 15456., 16188., 16920., 15000., 15744., 16488., 17232., 15276., 16032., 16788., 17544., 15552., 16320., 17088., 17856., 15828., 16608., 17388., 18168., 16104., 16896., 17688., 18480., 16380., 17184., 17988., 18792., 16656., 17472., 18288., 19104., 16436., 17120., 17804., 18488., 16712., 17408., 18104., 18800., 16988., 17696., 18404., 19112., 17264., 17984., 18704., 19424., 17540., 18272., 19004., 19736., 17816., 18560., 19304., 20048., 18092., 18848., 19604., 20360., 18368., 19136., 19904., 20672., 18644., 19424., 20204., 20984., 18920., 19712., 20504., 21296., 19196., 20000., 20804., 21608., 19472., 20288., 21104., 21920., 19748., 20576., 21404., 22232., 20024., 20864., 21704., 22544., 20300., 21152., 22004., 22856., 20576., 21440., 22304., 23168., 16116., 16864., 17612., 18360., 16392., 17152., 17912., 18672., 16668., 17440., 18212., 18984., 16944., 17728., 18512., 19296., 17220., 18016., 18812., 19608., 17496., 18304., 19112., 19920., 17772., 18592., 19412., 20232., 18048., 18880., 19712., 20544., 18324., 19168., 20012., 20856., 18600., 19456., 20312., 21168., 18876., 19744., 20612., 21480., 19152., 20032., 20912., 21792., 15220., 15840., 16460., 17080., 15496., 16128., 16760., 17392., 15772., 16416., 17060., 17704., 16048., 16704., 17360., 18016., 16324., 16992., 17660., 18328., 16600., 17280., 17960., 18640., 16876., 17568., 18260., 18952., 17152., 17856., 18560., 19264., 17428., 18144., 18860., 19576., 17704., 18432., 19160., 19888., 17980., 18720., 19460., 20200., 18256., 19008., 19760., 20512., 18532., 19296., 20060., 20824., 18808., 19584., 20360., 21136., 19084., 19872., 20660., 21448., 19360., 20160., 20960., 21760., 19508., 20192., 20876., 21560., 19784., 20480., 21176., 21872., 20060., 20768., 21476., 22184., 20336., 21056., 21776., 22496., 20612., 21344., 22076., 22808., 20888., 21632., 22376., 23120., 21164., 21920., 22676., 23432., 21440., 22208., 22976., 23744., 21716., 22496., 23276., 24056., 21992., 22784., 23576., 24368., 22268., 23072., 23876., 24680., 22544., 23360., 24176., 24992., 13620., 14304., 14988., 15672., 13896., 14592., 15288., 15984., 14172., 14880., 15588., 16296., 14448., 15168., 15888., 16608., 14724., 15456., 16188., 16920., 15000., 15744., 16488., 17232., 15276., 16032., 16788., 17544., 15552., 16320., 17088., 17856., 15828., 16608., 17388., 18168., 16104., 16896., 17688., 18480., 16380., 17184., 17988., 18792., 16656., 17472., 18288., 19104., 16932., 17760., 18588., 19416., 17208., 18048., 18888., 19728., 17484., 18336., 19188., 20040., 17760., 18624., 19488., 20352., 13172., 13792., 14412., 15032., 13448., 14080., 14712., 15344., 13724., 14368., 15012., 15656., 14000., 14656., 15312., 15968., 14276., 14944., 15612., 16280., 14552., 15232., 15912., 16592., 14828., 15520., 16212., 16904., 15104., 15808., 16512., 17216., 15380., 16096., 16812., 17528., 15656., 16384., 17112., 17840., 15932., 16672., 17412., 18152., 16208., 16960., 17712., 18464.};
  const std::array<int, 4> in_shape = {{ 3, 11, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11242., 11620., 15044., 15536., 10664., 11024., 11384., 11158., 11536., 14060., 14552., 10584., 10944.,  9960., 20881., 21394., 25150., 25816., 19886., 20372., 18746., 15903., 16416., 22634., 23300., 15170., 15656., 16142., 13421., 13934., 17750., 18416., 12630., 13116., 13602.,  8862.,  9168., 11084., 11480.,  8288.,  8576.,  7776., 11738., 12044., 15092., 15488., 11040., 11328., 11488.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19706., 19784., 19862., 19940., 20018., 20096., 20174., 20798., 20876., 20954., 21032., 21110., 21188., 21266., 21890., 21968., 22046., 22124., 22202., 22280., 22358., 22982., 23060., 23138., 23216., 23294., 23372., 23450., 24074., 24152., 24230., 24308., 24386., 24464., 24542., 25166., 25244., 25322., 25400., 25478., 25556., 25634., 26258., 26336., 26414., 26492., 26570., 26648., 26726.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5522.,  5876.,  5780.,  6152.,  6160.,  6600.,  6480.,  6944.,  4814.,  5168.,  5036.,  5408.,  4298.,  4624.,  2606.,  2828.,  2864.,  3104.,  3984.,  4312.,  4304.,  4656.,  2162.,  2384.,  2384.,  2624.,  2318.,  2544.,  7935.,  8418.,  8358.,  8868.,  9624., 10236., 10152., 10800.,  6969.,  7452.,  7338.,  7848.,  6683.,  7156.,  5313.,  5694.,  5736.,  6144.,  7544.,  8084.,  8072.,  8648.,  4551.,  4932.,  4920.,  5328.,  4937.,  5340.,  7747.,  8218.,  8170.,  8668.,  9624., 10220., 10152., 10784.,  6805.,  7276.,  7174.,  7672.,  7095.,  7556.,  3646.,  3868.,  3952.,  4192.,  5456.,  5784.,  5840.,  6192.,  3202.,  3424.,  3472.,  3712.,  3710.,  3936.,  5818.,  6164.,  6124.,  6488.,  7280.,  7720.,  7664.,  8128.,  5126.,  5472.,  5396.,  5760.,  5570.,  5920.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16712., 17908., 16856., 18064., 17000., 18220., 17144., 18376., 17288., 18532., 17432., 18688., 17576., 18844., 18728., 20092., 18872., 20248., 19016., 20404., 19160., 20560., 19304., 20716., 19448., 20872., 19592., 21028., 20744., 22276., 20888., 22432., 21032., 22588., 21176., 22744., 21320., 22900., 21464., 23056., 21608., 23212., 18920., 20364., 19064., 20520., 19208., 20676., 19352., 20832., 16168., 17404., 16312., 17560., 16456., 17716., 17608., 18964., 17752., 19120., 17896., 19276., 18040., 19432., 18184., 19588., 18328., 19744., 18472., 19900., 19624., 21148., 19768., 21304., 19912., 21460., 20056., 21616., 20200., 21772., 20344., 21928., 20488., 22084., 21640., 23332., 21784., 23488., 21928., 23644., 22072., 23800., 22216., 23956., 22360., 24112., 22504., 24268.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5890.,  6244.,  6598.,  6952.,  6196.,  6568.,  6940.,  7312.,  6504.,  6944.,  7384.,  7824.,  6864.,  7328.,  7792.,  8256.,  4474.,  4828.,  5182.,  5536.,  4708.,  5080.,  5452.,  5824.,  4110.,  4436.,  4762.,  5088.,  3646.,  3868.,  4090.,  4312.,  3952.,  4192.,  4432.,  4672.,  4824.,  5152.,  5480.,  5808.,  5184.,  5536.,  5888.,  6240.,  2758.,  2980.,  3202.,  3424.,  2992.,  3232.,  3472.,  3712.,  2682.,  2908.,  3134.,  3360.,  7643.,  8126.,  8609.,  9092.,  8078.,  8588.,  9098.,  9608.,  8652.,  9264.,  9876., 10488.,  9160.,  9808., 10456., 11104.,  5711.,  6194.,  6677.,  7160.,  6038.,  6548.,  7058.,  7568.,  5405.,  5878.,  6351.,  6824.,  6341.,  6722.,  7103.,  7484.,  6776.,  7184.,  7592.,  8000.,  7636.,  8176.,  8716.,  9256.,  8144.,  8720.,  9296.,  9872.,  4817.,  5198.,  5579.,  5960.,  5144.,  5552.,  5960.,  6368.,  4799.,  5202.,  5605.,  6008.,  7791.,  8262.,  8733.,  9204.,  8226.,  8724.,  9222.,  9720.,  8668.,  9264.,  9860., 10456.,  9176.,  9808., 10440., 11072.,  5907.,  6378.,  6849.,  7320.,  6234.,  6732.,  7230.,  7728.,  5729.,  6190.,  6651.,  7112.,  3774.,  3996.,  4218.,  4440.,  4080.,  4320.,  4560.,  4800.,  4824.,  5152.,  5480.,  5808.,  5184.,  5536.,  5888.,  6240.,  2886.,  3108.,  3330.,  3552.,  3120.,  3360.,  3600.,  3840.,  3322.,  3548.,  3774.,  4000.,  6010.,  6356.,  6702.,  7048.,  6316.,  6680.,  7044.,  7408.,  7080.,  7520.,  7960.,  8400.,  7440.,  7904.,  8368.,  8832.,  4626.,  4972.,  5318.,  5664.,  4860.,  5224.,  5588.,  5952.,  4934.,  5284.,  5634.,  5984.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20452., 21136., 21820., 22504., 20728., 21424., 22120., 22816., 21004., 21712., 22420., 23128., 21280., 22000., 22720., 23440., 21556., 22288., 23020., 23752., 21832., 22576., 23320., 24064., 22108., 22864., 23620., 24376., 24316., 25168., 26020., 26872., 24592., 25456., 26320., 27184., 19108., 19856., 20604., 21352., 19384., 20144., 20904., 21664., 19660., 20432., 21204., 21976., 19936., 20720., 21504., 22288., 14964., 15632., 16300., 16968., 17172., 17936., 18700., 19464., 17448., 18224., 19000., 19776., 17724., 18512., 19300., 20088., 18000., 18800., 19600., 20400., 18276., 19088., 19900., 20712., 18552., 19376., 20200., 21024., 18828., 19664., 20500., 21336., 17324., 18128., 18932., 19736., 17600., 18416., 19232., 20048., 17876., 18704., 19532., 20360., 18152., 18992., 19832., 20672., 15228., 15952., 16676., 17400., 15504., 16240., 16976., 17712., 15780., 16528., 17276., 18024., 17988., 18832., 19676., 20520., 18264., 19120., 19976., 20832., 18540., 19408., 20276., 21144., 18816., 19696., 20576., 21456., 19092., 19984., 20876., 21768., 19368., 20272., 21176., 22080., 19644., 20560., 21476., 22392., 20188., 21072., 21956., 22840., 20464., 21360., 22256., 23152., 14852., 15504., 16156., 16808., 15128., 15792., 16456., 17120., 15404., 16080., 16756., 17432., 15680., 16368., 17056., 17744., 11732., 12304., 12876., 13448., 13940., 14608., 15276., 15944., 14216., 14896., 15576., 16256., 14492., 15184., 15876., 16568., 14768., 15472., 16176., 16880., 15044., 15760., 16476., 17192., 15320., 16048., 16776., 17504., 15596., 16336., 17076., 17816.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14362., 14740., 15118., 15496., 18268., 18760., 19252., 19744., 13672., 14032., 14392., 14752., 14088., 14448.,  8818.,  9196.,  9574.,  9952., 13676., 14168., 14660., 15152.,  8392.,  8752.,  9112.,  9472.,  8488.,  8848., 18465., 18978., 19491., 20004., 22626., 23292., 23958., 24624., 17526., 18012., 18498., 18984., 17358., 17844., 14589., 15102., 15615., 16128., 19962., 20628., 21294., 21960., 13854., 14340., 14826., 15312., 14390., 14876., 15961., 16474., 16987., 17500., 20562., 21228., 21894., 22560., 15046., 15532., 16018., 16504., 16478., 16964.,  7114.,  7420.,  7726.,  8032., 11148., 11544., 11940., 12336.,  6688.,  6976.,  7264.,  7552.,  6752.,  7040., 10370., 10676., 10982., 11288., 13340., 13736., 14132., 14528.,  9696.,  9984., 10272., 10560., 10720., 11008.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17830., 17908., 17986., 18064., 18142., 18220., 18298., 18376., 18454., 18532., 18610., 18688., 18766., 18844., 20014., 20092., 20170., 20248., 20326., 20404., 20482., 20560., 20638., 20716., 20794., 20872., 20950., 21028., 22198., 22276., 22354., 22432., 22510., 22588., 22666., 22744., 22822., 22900., 22978., 23056., 23134., 23212., 20286., 20364., 20442., 20520., 20598., 20676., 20754., 20832., 17326., 17404., 17482., 17560., 17638., 17716., 18886., 18964., 19042., 19120., 19198., 19276., 19354., 19432., 19510., 19588., 19666., 19744., 19822., 19900., 21070., 21148., 21226., 21304., 21382., 21460., 21538., 21616., 21694., 21772., 21850., 21928., 22006., 22084., 23254., 23332., 23410., 23488., 23566., 23644., 23722., 23800., 23878., 23956., 24034., 24112., 24190., 24268.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3906.,  4180.,  4164.,  4456.,  4422.,  4732.,  4680.,  5008.,  4384.,  4728.,  4704.,  5072.,  5024.,  5416.,  5344.,  5760.,  3358.,  3632.,  3580.,  3872.,  3802.,  4112.,  4024.,  4352.,  3190.,  3440.,  3412.,  3680.,  3450.,  3716.,  3708.,  3992.,  3966.,  4268.,  4224.,  4544.,  5152.,  5528.,  5472.,  5872.,  5792.,  6216.,  6112.,  6560.,  2918.,  3184.,  3140.,  3424.,  3362.,  3664.,  3584.,  3904.,  3358.,  3632.,  3580.,  3872.,  6487.,  6914.,  6910.,  7364.,  7333.,  7814.,  7756.,  8264.,  7616.,  8132.,  8144.,  8696.,  8672.,  9260.,  9200.,  9824.,  5633.,  6060.,  6002.,  6456.,  6371.,  6852.,  6740.,  7248.,  5125.,  5532.,  5494.,  5928.,  6139.,  6522.,  6562.,  6972.,  6985.,  7422.,  7408.,  7872.,  8320.,  8884.,  8848.,  9448.,  9376., 10012.,  9904., 10576.,  5373.,  5756.,  5742.,  6152.,  6111.,  6548.,  6480.,  6944.,  5633.,  6060.,  6002.,  6456.,  6559.,  6962.,  6982.,  7412.,  7405.,  7862.,  7828.,  8312.,  7584.,  8100.,  8112.,  8664.,  8640.,  9228.,  9168.,  9792.,  5753.,  6156.,  6122.,  6552.,  6491.,  6948.,  6860.,  7344.,  5373.,  5756.,  5742.,  6152.,  4714.,  4980.,  5020.,  5304.,  5326.,  5628.,  5632.,  5952.,  5984.,  6360.,  6368.,  6768.,  6752.,  7176.,  7136.,  7584.,  4182.,  4448.,  4452.,  4736.,  4722.,  5024.,  4992.,  5312.,  4302.,  4576.,  4572.,  4864.,  5250.,  5540.,  5556.,  5864.,  5862.,  6188.,  6168.,  6512.,  5536.,  5880.,  5920.,  6288.,  6304.,  6696.,  6688.,  7104.,  4670.,  4960.,  4940.,  5248.,  5210.,  5536.,  5480.,  5824.,  4182.,  4448.,  4452.,  4736.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20992., 22348., 21136., 22504., 21280., 22660., 21424., 22816., 21568., 22972., 21712., 23128., 21856., 23284., 22000., 23440., 22144., 23596., 22288., 23752., 22432., 23908., 22576., 24064., 22720., 24220., 22864., 24376., 25024., 26716., 25168., 26872., 25312., 27028., 25456., 27184., 19712., 21196., 19856., 21352., 20000., 21508., 20144., 21664., 20288., 21820., 20432., 21976., 20576., 22132., 20720., 22288., 15488., 16812., 15632., 16968., 17792., 19308., 17936., 19464., 18080., 19620., 18224., 19776., 18368., 19932., 18512., 20088., 18656., 20244., 18800., 20400., 18944., 20556., 19088., 20712., 19232., 20868., 19376., 21024., 19520., 21180., 19664., 21336., 17984., 19580., 18128., 19736., 18272., 19892., 18416., 20048., 18560., 20204., 18704., 20360., 18848., 20516., 18992., 20672., 15808., 17244., 15952., 17400., 16096., 17556., 16240., 17712., 16384., 17868., 16528., 18024., 18688., 20364., 18832., 20520., 18976., 20676., 19120., 20832., 19264., 20988., 19408., 21144., 19552., 21300., 19696., 21456., 19840., 21612., 19984., 21768., 20128., 21924., 20272., 22080., 20416., 22236., 20560., 22392., 20928., 22684., 21072., 22840., 21216., 22996., 21360., 23152., 15360., 16652., 15504., 16808., 15648., 16964., 15792., 17120., 15936., 17276., 16080., 17432., 16224., 17588., 16368., 17744., 12160., 13292., 12304., 13448., 14464., 15788., 14608., 15944., 14752., 16100., 14896., 16256., 15040., 16412., 15184., 16568., 15328., 16724., 15472., 16880., 15616., 17036., 15760., 17192., 15904., 17348., 16048., 17504., 16192., 17660., 16336., 17816.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4274.,  4548.,  4822.,  5096.,  4580.,  4872.,  5164.,  5456.,  4886.,  5196.,  5506.,  5816.,  5192.,  5520.,  5848.,  6176.,  5096.,  5440.,  5784.,  6128.,  5456.,  5824.,  6192.,  6560.,  5816.,  6208.,  6600.,  6992.,  6176.,  6592.,  7008.,  7424.,  3178.,  3452.,  3726.,  4000.,  3412.,  3704.,  3996.,  4288.,  3646.,  3956.,  4266.,  4576.,  3880.,  4208.,  4536.,  4864.,  3122.,  3372.,  3622.,  3872.,  3356.,  3624.,  3892.,  4160.,  4138.,  4404.,  4670.,  4936.,  4444.,  4728.,  5012.,  5296.,  4750.,  5052.,  5354.,  5656.,  5056.,  5376.,  5696.,  6016.,  5576.,  5952.,  6328.,  6704.,  5936.,  6336.,  6736.,  7136.,  6296.,  6720.,  7144.,  7568.,  6656.,  7104.,  7552.,  8000.,  3074.,  3340.,  3606.,  3872.,  3308.,  3592.,  3876.,  4160.,  3542.,  3844.,  4146.,  4448.,  3776.,  4096.,  4416.,  4736.,  3178.,  3452.,  3726.,  4000.,  3412.,  3704.,  3996.,  4288.,  6659.,  7086.,  7513.,  7940.,  7094.,  7548.,  8002.,  8456.,  7529.,  8010.,  8491.,  8972.,  7964.,  8472.,  8980.,  9488.,  7548.,  8064.,  8580.,  9096.,  8056.,  8608.,  9160.,  9712.,  8564.,  9152.,  9740., 10328.,  9072.,  9696., 10320., 10944.,  4951.,  5378.,  5805.,  6232.,  5278.,  5732.,  6186.,  6640.,  5605.,  6086.,  6567.,  7048.,  5932.,  6440.,  6948.,  7456.,  4467.,  4874.,  5281.,  5688.,  4794.,  5228.,  5662.,  6096.,  6519.,  6902.,  7285.,  7668.,  6954.,  7364.,  7774.,  8184.,  7389.,  7826.,  8263.,  8700.,  7824.,  8288.,  8752.,  9216.,  7884.,  8448.,  9012.,  9576.,  8392.,  8992.,  9592., 10192.,  8900.,  9536., 10172., 10808.,  9408., 10080., 10752., 11424.,  4987.,  5370.,  5753.,  6136.,  5314.,  5724.,  6134.,  6544.,  5641.,  6078.,  6515.,  6952.,  5968.,  6432.,  6896.,  7360.,  4951.,  5378.,  5805.,  6232.,  5278.,  5732.,  6186.,  6640.,  6827.,  7230.,  7633.,  8036.,  7262.,  7692.,  8122.,  8552.,  7697.,  8154.,  8611.,  9068.,  8132.,  8616.,  9100.,  9584.,  7484.,  8000.,  8516.,  9032.,  7992.,  8544.,  9096.,  9648.,  8500.,  9088.,  9676., 10264.,  9008.,  9632., 10256., 10880.,  5215.,  5618.,  6021.,  6424.,  5542.,  5972.,  6402.,  6832.,  5869.,  6326.,  6783.,  7240.,  6196.,  6680.,  7164.,  7648.,  4987.,  5370.,  5753.,  6136.,  5314.,  5724.,  6134.,  6544.,  4906.,  5172.,  5438.,  5704.,  5212.,  5496.,  5780.,  6064.,  5518.,  5820.,  6122.,  6424.,  5824.,  6144.,  6464.,  6784.,  5576.,  5952.,  6328.,  6704.,  5936.,  6336.,  6736.,  7136.,  6296.,  6720.,  7144.,  7568.,  6656.,  7104.,  7552.,  8000.,  3842.,  4108.,  4374.,  4640.,  4076.,  4360.,  4644.,  4928.,  4310.,  4612.,  4914.,  5216.,  4544.,  4864.,  5184.,  5504.,  3946.,  4220.,  4494.,  4768.,  4180.,  4472.,  4764.,  5056.,  5058.,  5348.,  5638.,  5928.,  5364.,  5672.,  5980.,  6288.,  5670.,  5996.,  6322.,  6648.,  5976.,  6320.,  6664.,  7008.,  5224.,  5568.,  5912.,  6256.,  5584.,  5952.,  6320.,  6688.,  5944.,  6336.,  6728.,  7120.,  6304.,  6720.,  7136.,  7552.,  3898.,  4188.,  4478.,  4768.,  4132.,  4440.,  4748.,  5056.,  4366.,  4692.,  5018.,  5344.,  4600.,  4944.,  5288.,  5632.,  3842.,  4108.,  4374.,  4640.,  4076.,  4360.,  4644.,  4928.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22708., 23552., 24396., 25240., 22984., 23840., 24696., 25552., 23260., 24128., 24996., 25864., 23536., 24416., 25296., 26176., 23812., 24704., 25596., 26488., 24088., 24992., 25896., 26800., 24364., 25280., 26196., 27112., 24640., 25568., 26496., 27424., 23252., 24064., 24876., 25688., 23528., 24352., 25176., 26000., 23804., 24640., 25476., 26312., 24080., 24928., 25776., 26624., 24356., 25216., 26076., 26936., 24632., 25504., 26376., 27248., 18660., 19328., 19996., 20664., 18936., 19616., 20296., 20976., 19212., 19904., 20596., 21288., 19488., 20192., 20896., 21600., 14004., 14592., 15180., 15768., 14280., 14880., 15480., 16080., 14556., 15168., 15780., 16392., 14832., 15456., 16080., 16704., 15108., 15744., 16380., 17016., 15384., 16032., 16680., 17328., 15660., 16320., 16980., 17640., 15936., 16608., 17280., 17952., 10964., 11520., 12076., 12632., 11240., 11808., 12376., 12944., 15380., 16128., 16876., 17624., 15656., 16416., 17176., 17936., 15932., 16704., 17476., 18248., 16208., 16992., 17776., 18560., 16484., 17280., 18076., 18872., 16760., 17568., 18376., 19184., 17036., 17856., 18676., 19496., 17312., 18144., 18976., 19808., 17588., 18432., 19276., 20120., 17864., 18720., 19576., 20432., 18140., 19008., 19876., 20744., 18416., 19296., 20176., 21056., 16004., 16768., 17532., 18296., 16280., 17056., 17832., 18608., 14532., 15232., 15932., 16632., 14808., 15520., 16232., 16944., 15084., 15808., 16532., 17256., 15360., 16096., 16832., 17568., 15636., 16384., 17132., 17880., 15912., 16672., 17432., 18192., 16188., 16960., 17732., 18504., 16464., 17248., 18032., 18816., 13540., 14208., 14876., 15544., 13816., 14496., 15176., 15856., 14092., 14784., 15476., 16168., 14368., 15072., 15776., 16480., 14644., 15360., 16076., 16792., 14920., 15648., 16376., 17104., 19060., 19968., 20876., 21784., 19336., 20256., 21176., 22096., 19612., 20544., 21476., 22408., 19888., 20832., 21776., 22720., 20164., 21120., 22076., 23032., 20440., 21408., 22376., 23344., 20716., 21696., 22676., 23656., 20992., 21984., 22976., 23968., 20628., 21504., 22380., 23256., 20904., 21792., 22680., 23568., 21180., 22080., 22980., 23880., 21456., 22368., 23280., 24192., 21732., 22656., 23580., 24504., 22008., 22944., 23880., 24816., 24356., 25216., 26076., 26936., 24632., 25504., 26376., 27248., 24908., 25792., 26676., 27560., 25184., 26080., 26976., 27872., 19572., 20224., 20876., 21528., 19848., 20512., 21176., 21840., 20124., 20800., 21476., 22152., 20400., 21088., 21776., 22464., 20676., 21376., 22076., 22776., 20952., 21664., 22376., 23088., 21228., 21952., 22676., 23400., 21504., 22240., 22976., 23712., 17556., 18176., 18796., 19416., 17832., 18464., 19096., 19728., 10964., 11520., 12076., 12632., 11240., 11808., 12376., 12944., 11516., 12096., 12676., 13256., 11792., 12384., 12976., 13568., 12068., 12672., 13276., 13880., 12344., 12960., 13576., 14192., 12620., 13248., 13876., 14504., 12896., 13536., 14176., 14816., 13172., 13824., 14476., 15128., 13448., 14112., 14776., 15440., 13724., 14400., 15076., 15752., 14000., 14688., 15376., 16064., 14276., 14976., 15676., 16376., 14552., 15264., 15976., 16688.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10810., 11188., 11566., 11944., 12322., 12700., 13078., 13456., 13580., 14072., 14564., 15056., 15548., 16040., 16532., 17024., 10280., 10640., 11000., 11360., 11720., 12080., 12440., 12800.,  9960., 10320., 10680., 11040., 10474., 10852., 11230., 11608., 11986., 12364., 12742., 13120., 14892., 15384., 15876., 16368., 16860., 17352., 17844., 18336.,  9960., 10320., 10680., 11040., 11400., 11760., 12120., 12480., 10280., 10640., 11000., 11360., 16705., 17218., 17731., 18244., 18757., 19270., 19783., 20296., 18474., 19140., 19806., 20472., 21138., 21804., 22470., 23136., 15878., 16364., 16850., 17336., 17822., 18308., 18794., 19280., 13558., 14044., 14530., 15016., 15033., 15546., 16059., 16572., 17085., 17598., 18111., 18624., 20250., 20916., 21582., 22248., 22914., 23580., 24246., 24912., 14294., 14780., 15266., 15752., 16238., 16724., 17210., 17696., 15878., 16364., 16850., 17336., 14193., 14706., 15219., 15732., 16245., 16758., 17271., 17784., 18442., 19108., 19774., 20440., 21106., 21772., 22438., 23104., 13414., 13900., 14386., 14872., 15358., 15844., 16330., 16816., 14294., 14780., 15266., 15752.,  8418.,  8724.,  9030.,  9336.,  9642.,  9948., 10254., 10560., 11980., 12376., 12772., 13168., 13564., 13960., 14356., 14752.,  7904.,  8192.,  8480.,  8768.,  9056.,  9344.,  9632.,  9920.,  8160.,  8448.,  8736.,  9024.,  9874., 10180., 10486., 10792., 11098., 11404., 11710., 12016., 10988., 11384., 11780., 12176., 12572., 12968., 13364., 13760.,  9312.,  9600.,  9888., 10176., 10464., 10752., 11040., 11328.,  7904.,  8192.,  8480.,  8768.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22270., 22348., 22426., 22504., 22582., 22660., 22738., 22816., 22894., 22972., 23050., 23128., 23206., 23284., 23362., 23440., 23518., 23596., 23674., 23752., 23830., 23908., 23986., 24064., 24142., 24220., 24298., 24376., 26638., 26716., 26794., 26872., 26950., 27028., 27106., 27184., 21118., 21196., 21274., 21352., 21430., 21508., 21586., 21664., 21742., 21820., 21898., 21976., 22054., 22132., 22210., 22288., 16734., 16812., 16890., 16968., 19230., 19308., 19386., 19464., 19542., 19620., 19698., 19776., 19854., 19932., 20010., 20088., 20166., 20244., 20322., 20400., 20478., 20556., 20634., 20712., 20790., 20868., 20946., 21024., 21102., 21180., 21258., 21336., 19502., 19580., 19658., 19736., 19814., 19892., 19970., 20048., 20126., 20204., 20282., 20360., 20438., 20516., 20594., 20672., 17166., 17244., 17322., 17400., 17478., 17556., 17634., 17712., 17790., 17868., 17946., 18024., 20286., 20364., 20442., 20520., 20598., 20676., 20754., 20832., 20910., 20988., 21066., 21144., 21222., 21300., 21378., 21456., 21534., 21612., 21690., 21768., 21846., 21924., 22002., 22080., 22158., 22236., 22314., 22392., 22606., 22684., 22762., 22840., 22918., 22996., 23074., 23152., 16574., 16652., 16730., 16808., 16886., 16964., 17042., 17120., 17198., 17276., 17354., 17432., 17510., 17588., 17666., 17744., 13214., 13292., 13370., 13448., 15710., 15788., 15866., 15944., 16022., 16100., 16178., 16256., 16334., 16412., 16490., 16568., 16646., 16724., 16802., 16880., 16958., 17036., 17114., 17192., 17270., 17348., 17426., 17504., 17582., 17660., 17738., 17816.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3810.,  4052.,  4068.,  4328.,  4326.,  4604.,  4584.,  4880.,  4842.,  5156.,  5100.,  5432.,  5358.,  5708.,  5616.,  5984.,  3328.,  3608.,  3648.,  3952.,  3968.,  4296.,  4288.,  4640.,  4608.,  4984.,  4928.,  5328.,  5248.,  5672.,  5568.,  6016.,  3326.,  3568.,  3548.,  3808.,  3770.,  4048.,  3992.,  4288.,  4214.,  4528.,  4436.,  4768.,  4658.,  5008.,  4880.,  5248.,  2222.,  2416.,  2444.,  2656.,  2666.,  2896.,  2888.,  3136.,  2898.,  3124.,  3156.,  3400.,  3414.,  3676.,  3672.,  3952.,  3930.,  4228.,  4188.,  4504.,  4446.,  4780.,  4704.,  5056.,  4864.,  5208.,  5184.,  5552.,  5504.,  5896.,  5824.,  6240.,  6144.,  6584.,  6464.,  6928.,  6784.,  7272.,  7104.,  7616.,  2446.,  2672.,  2668.,  2912.,  2890.,  3152.,  3112.,  3392.,  3334.,  3632.,  3556.,  3872.,  3778.,  4112.,  4000.,  4352.,  3326.,  3568.,  3548.,  3808.,  3770.,  4048.,  3992.,  4288.,  6567.,  6978.,  6990.,  7428.,  7413.,  7878.,  7836.,  8328.,  8259.,  8778.,  8682.,  9228.,  9105.,  9678.,  9528., 10128.,  6256.,  6676.,  6784.,  7240.,  7312.,  7804.,  7840.,  8368.,  8368.,  8932.,  8896.,  9496.,  9424., 10060.,  9952., 10624.,  5745.,  6156.,  6114.,  6552.,  6483.,  6948.,  6852.,  7344.,  7221.,  7740.,  7590.,  8136.,  7959.,  8532.,  8328.,  8928.,  4505.,  4844.,  4874.,  5240.,  5243.,  5636.,  5612.,  6032.,  4687.,  4978.,  5110.,  5428.,  5533.,  5878.,  5956.,  6328.,  6379.,  6778.,  6802.,  7228.,  7225.,  7678.,  7648.,  8128.,  7664.,  8180.,  8192.,  8744.,  8720.,  9308.,  9248.,  9872.,  9776., 10436., 10304., 11000., 10832., 11564., 11360., 12128.,  4105.,  4396.,  4474.,  4792.,  4843.,  5188.,  5212.,  5584.,  5581.,  5980.,  5950.,  6376.,  6319.,  6772.,  6688.,  7168.,  5745.,  6156.,  6114.,  6552.,  6483.,  6948.,  6852.,  7344.,  5559.,  5922.,  5982.,  6372.,  6405.,  6822.,  6828.,  7272.,  7251.,  7722.,  7674.,  8172.,  8097.,  8622.,  8520.,  9072.,  6064.,  6484.,  6592.,  7048.,  7120.,  7612.,  7648.,  8176.,  8176.,  8740.,  8704.,  9304.,  9232.,  9868.,  9760., 10432.,  4833.,  5196.,  5202.,  5592.,  5571.,  5988.,  5940.,  6384.,  6309.,  6780.,  6678.,  7176.,  7047.,  7572.,  7416.,  7968.,  4105.,  4396.,  4474.,  4792.,  4843.,  5188.,  5212.,  5584.,  3586.,  3812.,  3892.,  4136.,  4198.,  4460.,  4504.,  4784.,  4810.,  5108.,  5116.,  5432.,  5422.,  5756.,  5728.,  6080.,  5440.,  5784.,  5824.,  6192.,  6208.,  6600.,  6592.,  7008.,  6976.,  7416.,  7360.,  7824.,  7744.,  8232.,  8128.,  8640.,  3134.,  3360.,  3404.,  3648.,  3674.,  3936.,  3944.,  4224.,  4214.,  4512.,  4484.,  4800.,  4754.,  5088.,  5024.,  5376.,  3374.,  3616.,  3644.,  3904.,  3914.,  4192.,  4184.,  4480.,  4914.,  5188.,  5220.,  5512.,  5526.,  5836.,  5832.,  6160.,  6138.,  6484.,  6444.,  6808.,  6750.,  7132.,  7056.,  7456.,  4544.,  4824.,  4928.,  5232.,  5312.,  5640.,  5696.,  6048.,  6080.,  6456.,  6464.,  6864.,  6848.,  7272.,  7232.,  7680.,  4366.,  4640.,  4636.,  4928.,  4906.,  5216.,  5176.,  5504.,  5446.,  5792.,  5716.,  6080.,  5986.,  6368.,  6256.,  6656.,  3134.,  3360.,  3404.,  3648.,  3674.,  3936.,  3944.,  4224.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23408., 25084., 23552., 25240., 23696., 25396., 23840., 25552., 23984., 25708., 24128., 25864., 24272., 26020., 24416., 26176., 24560., 26332., 24704., 26488., 24848., 26644., 24992., 26800., 25136., 26956., 25280., 27112., 25424., 27268., 25568., 27424., 23920., 25532., 24064., 25688., 24208., 25844., 24352., 26000., 24496., 26156., 24640., 26312., 24784., 26468., 24928., 26624., 25072., 26780., 25216., 26936., 25360., 27092., 25504., 27248., 19184., 20508., 19328., 20664., 19472., 20820., 19616., 20976., 19760., 21132., 19904., 21288., 20048., 21444., 20192., 21600., 14448., 15612., 14592., 15768., 14736., 15924., 14880., 16080., 15024., 16236., 15168., 16392., 15312., 16548., 15456., 16704., 15600., 16860., 15744., 17016., 15888., 17172., 16032., 17328., 16176., 17484., 16320., 17640., 16464., 17796., 16608., 17952., 11376., 12476., 11520., 12632., 11664., 12788., 11808., 12944., 15984., 17468., 16128., 17624., 16272., 17780., 16416., 17936., 16560., 18092., 16704., 18248., 16848., 18404., 16992., 18560., 17136., 18716., 17280., 18872., 17424., 19028., 17568., 19184., 17712., 19340., 17856., 19496., 18000., 19652., 18144., 19808., 18288., 19964., 18432., 20120., 18576., 20276., 18720., 20432., 18864., 20588., 19008., 20744., 19152., 20900., 19296., 21056., 16624., 18140., 16768., 18296., 16912., 18452., 17056., 18608., 15088., 16476., 15232., 16632., 15376., 16788., 15520., 16944., 15664., 17100., 15808., 17256., 15952., 17412., 16096., 17568., 16240., 17724., 16384., 17880., 16528., 18036., 16672., 18192., 16816., 18348., 16960., 18504., 17104., 18660., 17248., 18816., 14064., 15388., 14208., 15544., 14352., 15700., 14496., 15856., 14640., 16012., 14784., 16168., 14928., 16324., 15072., 16480., 15216., 16636., 15360., 16792., 15504., 16948., 15648., 17104., 19824., 21628., 19968., 21784., 20112., 21940., 20256., 22096., 20400., 22252., 20544., 22408., 20688., 22564., 20832., 22720., 20976., 22876., 21120., 23032., 21264., 23188., 21408., 23344., 21552., 23500., 21696., 23656., 21840., 23812., 21984., 23968., 21360., 23100., 21504., 23256., 21648., 23412., 21792., 23568., 21936., 23724., 22080., 23880., 22224., 24036., 22368., 24192., 22512., 24348., 22656., 24504., 22800., 24660., 22944., 24816., 25072., 26780., 25216., 26936., 25360., 27092., 25504., 27248., 25648., 27404., 25792., 27560., 25936., 27716., 26080., 27872., 20080., 21372., 20224., 21528., 20368., 21684., 20512., 21840., 20656., 21996., 20800., 22152., 20944., 22308., 21088., 22464., 21232., 22620., 21376., 22776., 21520., 22932., 21664., 23088., 21808., 23244., 21952., 23400., 22096., 23556., 22240., 23712., 18032., 19260., 18176., 19416., 18320., 19572., 18464., 19728., 11376., 12476., 11520., 12632., 11664., 12788., 11808., 12944., 11952., 13100., 12096., 13256., 12240., 13412., 12384., 13568., 12528., 13724., 12672., 13880., 12816., 14036., 12960., 14192., 13104., 14348., 13248., 14504., 13392., 14660., 13536., 14816., 13680., 14972., 13824., 15128., 13968., 15284., 14112., 15440., 14256., 15596., 14400., 15752., 14544., 15908., 14688., 16064., 14832., 16220., 14976., 16376., 15120., 16532., 15264., 16688.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4114.,  4356.,  4598.,  4840.,  4420.,  4680.,  4940.,  5200.,  4726.,  5004.,  5282.,  5560.,  5032.,  5328.,  5624.,  5920.,  5338.,  5652.,  5966.,  6280.,  5644.,  5976.,  6308.,  6640.,  5950.,  6300.,  6650.,  7000.,  6256.,  6624.,  6992.,  7360.,  4072.,  4352.,  4632.,  4912.,  4432.,  4736.,  5040.,  5344.,  4792.,  5120.,  5448.,  5776.,  5152.,  5504.,  5856.,  6208.,  5512.,  5888.,  6264.,  6640.,  5872.,  6272.,  6672.,  7072.,  6232.,  6656.,  7080.,  7504.,  6592.,  7040.,  7488.,  7936.,  3146.,  3388.,  3630.,  3872.,  3380.,  3640.,  3900.,  4160.,  3614.,  3892.,  4170.,  4448.,  3848.,  4144.,  4440.,  4736.,  4082.,  4396.,  4710.,  5024.,  4316.,  4648.,  4980.,  5312.,  4550.,  4900.,  5250.,  5600.,  4784.,  5152.,  5520.,  5888.,  2522.,  2716.,  2910.,  3104.,  2756.,  2968.,  3180.,  3392.,  2990.,  3220.,  3450.,  3680.,  3224.,  3472.,  3720.,  3968.,  3842.,  4068.,  4294.,  4520.,  4148.,  4392.,  4636.,  4880.,  4454.,  4716.,  4978.,  5240.,  4760.,  5040.,  5320.,  5600.,  5066.,  5364.,  5662.,  5960.,  5372.,  5688.,  6004.,  6320.,  5678.,  6012.,  6346.,  6680.,  5984.,  6336.,  6688.,  7040.,  5032.,  5376.,  5720.,  6064.,  5392.,  5760.,  6128.,  6496.,  5752.,  6144.,  6536.,  6928.,  6112.,  6528.,  6944.,  7360.,  6472.,  6912.,  7352.,  7792.,  6832.,  7296.,  7760.,  8224.,  7192.,  7680.,  8168.,  8656.,  7552.,  8064.,  8576.,  9088.,  2938.,  3164.,  3390.,  3616.,  3172.,  3416.,  3660.,  3904.,  3406.,  3668.,  3930.,  4192.,  3640.,  3920.,  4200.,  4480.,  3874.,  4172.,  4470.,  4768.,  4108.,  4424.,  4740.,  5056.,  4342.,  4676.,  5010.,  5344.,  4576.,  4928.,  5280.,  5632.,  3146.,  3388.,  3630.,  3872.,  3380.,  3640.,  3900.,  4160.,  3614.,  3892.,  4170.,  4448.,  3848.,  4144.,  4440.,  4736.,  6451.,  6862.,  7273.,  7684.,  6886.,  7324.,  7762.,  8200.,  7321.,  7786.,  8251.,  8716.,  7756.,  8248.,  8740.,  9232.,  8191.,  8710.,  9229.,  9748.,  8626.,  9172.,  9718., 10264.,  9061.,  9634., 10207., 10780.,  9496., 10096., 10696., 11296.,  6460.,  6880.,  7300.,  7720.,  6968.,  7424.,  7880.,  8336.,  7476.,  7968.,  8460.,  8952.,  7984.,  8512.,  9040.,  9568.,  8492.,  9056.,  9620., 10184.,  9000.,  9600., 10200., 10800.,  9508., 10144., 10780., 11416., 10016., 10688., 11360., 12032.,  4807.,  5218.,  5629.,  6040.,  5134.,  5572.,  6010.,  6448.,  5461.,  5926.,  6391.,  6856.,  5788.,  6280.,  6772.,  7264.,  6115.,  6634.,  7153.,  7672.,  6442.,  6988.,  7534.,  8080.,  6769.,  7342.,  7915.,  8488.,  7096.,  7696.,  8296.,  8896.,  4447.,  4786.,  5125.,  5464.,  4774.,  5140.,  5506.,  5872.,  5101.,  5494.,  5887.,  6280.,  5428.,  5848.,  6268.,  6688.,  4859.,  5150.,  5441.,  5732.,  5294.,  5612.,  5930.,  6248.,  5729.,  6074.,  6419.,  6764.,  6164.,  6536.,  6908.,  7280.,  6599.,  6998.,  7397.,  7796.,  7034.,  7460.,  7886.,  8312.,  7469.,  7922.,  8375.,  8828.,  7904.,  8384.,  8864.,  9344.,  7132.,  7648.,  8164.,  8680.,  7640.,  8192.,  8744.,  9296.,  8148.,  8736.,  9324.,  9912.,  8656.,  9280.,  9904., 10528.,  9164.,  9824., 10484., 11144.,  9672., 10368., 11064., 11760., 10180., 10912., 11644., 12376., 10688., 11456., 12224., 12992.,  3695.,  3986.,  4277.,  4568.,  4022.,  4340.,  4658.,  4976.,  4349.,  4694.,  5039.,  5384.,  4676.,  5048.,  5420.,  5792.,  5003.,  5402.,  5801.,  6200.,  5330.,  5756.,  6182.,  6608.,  5657.,  6110.,  6563.,  7016.,  5984.,  6464.,  6944.,  7424.,  4807.,  5218.,  5629.,  6040.,  5134.,  5572.,  6010.,  6448.,  5461.,  5926.,  6391.,  6856.,  5788.,  6280.,  6772.,  7264.,  5507.,  5870.,  6233.,  6596.,  5942.,  6332.,  6722.,  7112.,  6377.,  6794.,  7211.,  7628.,  6812.,  7256.,  7700.,  8144.,  7247.,  7718.,  8189.,  8660.,  7682.,  8180.,  8678.,  9176.,  8117.,  8642.,  9167.,  9692.,  8552.,  9104.,  9656., 10208.,  6076.,  6496.,  6916.,  7336.,  6584.,  7040.,  7496.,  7952.,  7092.,  7584.,  8076.,  8568.,  7600.,  8128.,  8656.,  9184.,  8108.,  8672.,  9236.,  9800.,  8616.,  9216.,  9816., 10416.,  9124.,  9760., 10396., 11032.,  9632., 10304., 10976., 11648.,  4055.,  4418.,  4781.,  5144.,  4382.,  4772.,  5162.,  5552.,  4709.,  5126.,  5543.,  5960.,  5036.,  5480.,  5924.,  6368.,  5363.,  5834.,  6305.,  6776.,  5690.,  6188.,  6686.,  7184.,  6017.,  6542.,  7067.,  7592.,  6344.,  6896.,  7448.,  8000.,  3695.,  3986.,  4277.,  4568.,  4022.,  4340.,  4658.,  4976.,  4349.,  4694.,  5039.,  5384.,  4676.,  5048.,  5420.,  5792.,  3842.,  4068.,  4294.,  4520.,  4148.,  4392.,  4636.,  4880.,  4454.,  4716.,  4978.,  5240.,  4760.,  5040.,  5320.,  5600.,  5066.,  5364.,  5662.,  5960.,  5372.,  5688.,  6004.,  6320.,  5678.,  6012.,  6346.,  6680.,  5984.,  6336.,  6688.,  7040.,  5032.,  5376.,  5720.,  6064.,  5392.,  5760.,  6128.,  6496.,  5752.,  6144.,  6536.,  6928.,  6112.,  6528.,  6944.,  7360.,  6472.,  6912.,  7352.,  7792.,  6832.,  7296.,  7760.,  8224.,  7192.,  7680.,  8168.,  8656.,  7552.,  8064.,  8576.,  9088.,  2938.,  3164.,  3390.,  3616.,  3172.,  3416.,  3660.,  3904.,  3406.,  3668.,  3930.,  4192.,  3640.,  3920.,  4200.,  4480.,  3874.,  4172.,  4470.,  4768.,  4108.,  4424.,  4740.,  5056.,  4342.,  4676.,  5010.,  5344.,  4576.,  4928.,  5280.,  5632.,  3146.,  3388.,  3630.,  3872.,  3380.,  3640.,  3900.,  4160.,  3614.,  3892.,  4170.,  4448.,  3848.,  4144.,  4440.,  4736.,  4658.,  4932.,  5206.,  5480.,  4964.,  5256.,  5548.,  5840.,  5270.,  5580.,  5890.,  6200.,  5576.,  5904.,  6232.,  6560.,  5882.,  6228.,  6574.,  6920.,  6188.,  6552.,  6916.,  7280.,  6494.,  6876.,  7258.,  7640.,  6800.,  7200.,  7600.,  8000.,  4328.,  4608.,  4888.,  5168.,  4688.,  4992.,  5296.,  5600.,  5048.,  5376.,  5704.,  6032.,  5408.,  5760.,  6112.,  6464.,  5768.,  6144.,  6520.,  6896.,  6128.,  6528.,  6928.,  7328.,  6488.,  6912.,  7336.,  7760.,  6848.,  7296.,  7744.,  8192.,  3562.,  3836.,  4110.,  4384.,  3796.,  4088.,  4380.,  4672.,  4030.,  4340.,  4650.,  4960.,  4264.,  4592.,  4920.,  5248.,  4498.,  4844.,  5190.,  5536.,  4732.,  5096.,  5460.,  5824.,  4966.,  5348.,  5730.,  6112.,  5200.,  5600.,  6000.,  6400.,  2938.,  3164.,  3390.,  3616.,  3172.,  3416.,  3660.,  3904.,  3406.,  3668.,  3930.,  4192.,  3640.,  3920.,  4200.,  4480.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22356., 23264., 24172., 25080., 22632., 23552., 24472., 25392., 22908., 23840., 24772., 25704., 23184., 24128., 25072., 26016., 23460., 24416., 25372., 26328., 23736., 24704., 25672., 26640., 24012., 24992., 25972., 26952., 24288., 25280., 26272., 27264., 21876., 22752., 23628., 24504., 22152., 23040., 23928., 24816., 22428., 23328., 24228., 25128., 22704., 23616., 24528., 25440., 22980., 23904., 24828., 25752., 23256., 24192., 25128., 26064., 23532., 24480., 25428., 26376., 23808., 24768., 25728., 26688., 22420., 23264., 24108., 24952., 22696., 23552., 24408., 25264., 22972., 23840., 24708., 25576., 23248., 24128., 25008., 25888., 23524., 24416., 25308., 26200., 23800., 24704., 25608., 26512., 24076., 24992., 25908., 26824., 24352., 25280., 26208., 27136., 22452., 23264., 24076., 24888., 22728., 23552., 24376., 25200., 23004., 23840., 24676., 25512., 23280., 24128., 24976., 25824., 14260., 14816., 15372., 15928., 14536., 15104., 15672., 16240., 14812., 15392., 15972., 16552., 15088., 15680., 16272., 16864., 15364., 15968., 16572., 17176., 15640., 16256., 16872., 17488., 15916., 16544., 17172., 17800., 16192., 16832., 17472., 18112., 10708., 11232., 11756., 12280., 10984., 11520., 12056., 12592., 11260., 11808., 12356., 12904., 11536., 12096., 12656., 13216., 11812., 12384., 12956., 13528., 12088., 12672., 13256., 13840., 12364., 12960., 13556., 14152., 12640., 13248., 13856., 14464., 12916., 13536., 14156., 14776., 13192., 13824., 14456., 15088., 13468., 14112., 14756., 15400., 13744., 14400., 15056., 15712., 14020., 14688., 15356., 16024., 14296., 14976., 15656., 16336., 14572., 15264., 15956., 16648., 14848., 15552., 16256., 16960.,  9876., 10464., 11052., 11640., 10152., 10752., 11352., 11952., 10428., 11040., 11652., 12264., 10704., 11328., 11952., 12576., 18068., 18912., 19756., 20600., 18344., 19200., 20056., 20912., 18620., 19488., 20356., 21224., 18896., 19776., 20656., 21536., 19172., 20064., 20956., 21848., 19448., 20352., 21256., 22160., 19724., 20640., 21556., 22472., 20000., 20928., 21856., 22784., 20276., 21216., 22156., 23096., 20552., 21504., 22456., 23408., 20828., 21792., 22756., 23720., 21104., 22080., 23056., 24032., 21380., 22368., 23356., 24344., 21656., 22656., 23656., 24656., 21932., 22944., 23956., 24968., 22208., 23232., 24256., 25280., 22356., 23264., 24172., 25080., 22632., 23552., 24472., 25392., 22908., 23840., 24772., 25704., 23184., 24128., 25072., 26016., 23460., 24416., 25372., 26328., 23736., 24704., 25672., 26640., 24012., 24992., 25972., 26952., 24288., 25280., 26272., 27264., 21876., 22752., 23628., 24504., 22152., 23040., 23928., 24816., 22428., 23328., 24228., 25128., 22704., 23616., 24528., 25440., 17268., 17888., 18508., 19128., 17544., 18176., 18808., 19440., 17820., 18464., 19108., 19752., 18096., 18752., 19408., 20064., 18372., 19040., 19708., 20376., 18648., 19328., 20008., 20688., 18924., 19616., 20308., 21000., 19200., 19904., 20608., 21312., 15252., 15840., 16428., 17016., 15528., 16128., 16728., 17328., 15804., 16416., 17028., 17640., 16080., 16704., 17328., 17952., 16356., 16992., 17628., 18264., 16632., 17280., 17928., 18576., 16908., 17568., 18228., 18888., 17184., 17856., 18528., 19200., 14260., 14816., 15372., 15928., 14536., 15104., 15672., 16240., 14812., 15392., 15972., 16552., 15088., 15680., 16272., 16864., 15364., 15968., 16572., 17176., 15640., 16256., 16872., 17488., 15916., 16544., 17172., 17800., 16192., 16832., 17472., 18112., 10708., 11232., 11756., 12280., 10984., 11520., 12056., 12592., 11260., 11808., 12356., 12904., 11536., 12096., 12656., 13216., 14292., 15072., 15852., 16632., 14568., 15360., 16152., 16944., 14844., 15648., 16452., 17256., 15120., 15936., 16752., 17568., 15396., 16224., 17052., 17880., 15672., 16512., 17352., 18192., 15948., 16800., 17652., 18504., 16224., 17088., 17952., 18816., 16500., 17376., 18252., 19128., 16776., 17664., 18552., 19440., 17052., 17952., 18852., 19752., 17328., 18240., 19152., 20064., 17604., 18528., 19452., 20376., 17880., 18816., 19752., 20688., 18156., 19104., 20052., 21000., 18432., 19392., 20352., 21312., 18068., 18912., 19756., 20600., 18344., 19200., 20056., 20912., 18620., 19488., 20356., 21224., 18896., 19776., 20656., 21536., 19172., 20064., 20956., 21848., 19448., 20352., 21256., 22160., 19724., 20640., 21556., 22472., 20000., 20928., 21856., 22784., 20276., 21216., 22156., 23096., 20552., 21504., 22456., 23408., 20828., 21792., 22756., 23720., 21104., 22080., 23056., 24032., 22452., 23264., 24076., 24888., 22728., 23552., 24376., 25200., 23004., 23840., 24676., 25512., 23280., 24128., 24976., 25824., 23556., 24416., 25276., 26136., 23832., 24704., 25576., 26448., 24108., 24992., 25876., 26760., 24384., 25280., 26176., 27072., 18772., 19424., 20076., 20728., 19048., 19712., 20376., 21040., 19324., 20000., 20676., 21352., 19600., 20288., 20976., 21664., 19876., 20576., 21276., 21976., 20152., 20864., 21576., 22288., 20428., 21152., 21876., 22600., 20704., 21440., 22176., 22912., 17268., 17888., 18508., 19128., 17544., 18176., 18808., 19440., 17820., 18464., 19108., 19752., 18096., 18752., 19408., 20064., 18372., 19040., 19708., 20376., 18648., 19328., 20008., 20688., 18924., 19616., 20308., 21000., 19200., 19904., 20608., 21312., 15252., 15840., 16428., 17016., 15528., 16128., 16728., 17328., 15804., 16416., 17028., 17640., 16080., 16704., 17328., 17952.,  9876., 10464., 11052., 11640., 10152., 10752., 11352., 11952., 10428., 11040., 11652., 12264., 10704., 11328., 11952., 12576., 10980., 11616., 12252., 12888., 11256., 11904., 12552., 13200., 11532., 12192., 12852., 13512., 11808., 12480., 13152., 13824., 12084., 12768., 13452., 14136., 12360., 13056., 13752., 14448., 12636., 13344., 14052., 14760., 12912., 13632., 14352., 15072., 13188., 13920., 14652., 15384., 13464., 14208., 14952., 15696., 13740., 14496., 15252., 16008., 14016., 14784., 15552., 16320., 14292., 15072., 15852., 16632., 14568., 15360., 16152., 16944., 14844., 15648., 16452., 17256., 15120., 15936., 16752., 17568., 15396., 16224., 17052., 17880., 15672., 16512., 17352., 18192., 15948., 16800., 17652., 18504., 16224., 17088., 17952., 18816., 16500., 17376., 18252., 19128., 16776., 17664., 18552., 19440., 17052., 17952., 18852., 19752., 17328., 18240., 19152., 20064.};
  const std::array<int, 4> in_shape = {{ 3, 11, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12984., 13176., 18930., 19209., 19488., 12396., 12576., 15867., 16128., 23130., 23508., 23886., 15156., 15399., 18738., 18999., 27288., 27666., 28044., 17829., 18072., 21609., 21870., 31446., 31824., 28746., 20502., 20745., 15392., 12325., 19988., 20366., 20744., 11399., 11642., 12396., 12552., 17949., 18174., 18399., 11640., 11784., 14112., 14268., 20424., 20649., 20874., 13224., 13368.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16746., 16824., 16902., 16980., 17058., 17136., 17214., 17604., 17682., 17760., 17838., 17916., 17994., 18072., 18462., 18540., 18618., 18696., 18774., 18852., 18930., 19320., 19398., 19476., 19554., 19632., 19710., 19788., 20178., 20256., 20334., 20412., 20490., 20568., 20646., 21036., 21114., 21192., 21270., 21348., 21426., 21504., 21894., 21972., 22050., 22128., 22206., 22284., 22362.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12144., 12528., 12516., 12912., 17700., 18276., 18240., 18834., 18780., 19392., 11724., 12120., 12072., 12480., 17724., 18294., 18228., 18816., 25821., 26676., 26550., 27432., 27279., 28188., 17052., 17640., 17520., 18126., 15524., 16100., 16028., 16622., 26096., 27056., 21641., 22436., 22370., 23192., 14840., 15434., 15308., 15920., 18060., 18642., 18564., 19164., 26307., 27180., 27036., 27936., 24373., 25236., 17364., 17964., 17832., 18450., 14708., 15296., 12012., 12490., 19094., 19880., 19823., 20636., 20552., 21392., 11056., 11534., 11524., 12020., 13140., 13656., 13440., 13968., 18996., 19770., 19428., 20220., 19860., 20670., 12384., 12912., 12660., 13200.,  9848., 10304., 10148., 10616., 17156., 17936., 13556., 14162., 13988., 14612.,  9212.,  9680.,  9488.,  9968.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11128., 11988., 11272., 12144., 11416., 12300., 11560., 12456., 11704., 12612., 11848., 12768., 11992., 12924., 12712., 13704., 12856., 13860., 13000., 14016., 13144., 14172., 13288., 14328., 13432., 14484., 13576., 14640., 14296., 15420., 14440., 15576., 14584., 15732., 14728., 15888., 14872., 16044., 15016., 16200., 15160., 16356., 15880., 17136., 16024., 17292., 16168., 17448., 16312., 17604., 16456., 17760., 16600., 17916., 16744., 18072., 17464., 18852., 17608., 19008., 17752., 19164., 17896., 19320., 18040., 19476., 18184., 19632., 18328., 19788., 19048., 20568., 19192., 20724., 19336., 20880., 19480., 21036., 19624., 21192., 19768., 21348., 19912., 21504., 20632., 22284., 20776., 22440., 20920., 22596., 21064., 22752., 21208., 22908., 21352., 23064., 21496., 23220.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11872., 12256., 12640., 13024., 12220., 12616., 13012., 13408., 17928., 18504., 19080., 19656., 18478., 19072., 19666., 20260., 19028., 19640., 20252., 20864., 11980., 12376., 12772., 13168., 12344., 12752., 13160., 13568., 16958., 17528., 18098., 18668., 17436., 18024., 18612., 19200., 25763., 26618., 27473., 28328., 26490., 27372., 28254., 29136., 27217., 28126., 29035., 29944., 17132., 17720., 18308., 18896., 17602., 18208., 18814., 19420., 15112., 15688., 16264., 16840., 15590., 16184., 16778., 17372., 26656., 27616., 28576., 29536., 21303., 22098., 22893., 23688., 22030., 22852., 23674., 24496., 15966., 16560., 17154., 17748., 16436., 17048., 17660., 18272., 14546., 15128., 15710., 16292., 15024., 15624., 16224., 16824., 23517., 24390., 25263., 26136., 24244., 25144., 26044., 26944., 22347., 23210., 24073., 24936., 16080., 16680., 17280., 17880., 16550., 17168., 17786., 18404., 14492., 15080., 15668., 16256., 12794., 13272., 13750., 14228., 21914., 22700., 23486., 24272., 22641., 23454., 24267., 25080., 23368., 24208., 25048., 25888., 10946., 11424., 11902., 12380., 11416., 11912., 12408., 12904., 13732., 14248., 14764., 15280., 14064., 14592., 15120., 15648., 19170., 19944., 20718., 21492., 19632., 20424., 21216., 22008., 20094., 20904., 21714., 22524., 11952., 12480., 13008., 13536., 12236., 12776., 13316., 13856., 12584., 13040., 13496., 13952., 12916., 13384., 13852., 14320., 19452., 20232., 21012., 21792., 16138., 16744., 17350., 17956., 16600., 17224., 17848., 18472., 11044., 11512., 11980., 12448., 11328., 11808., 12288., 12768.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9620.,  9968., 10316., 10664.,  9896., 10256., 10616., 10976., 10172., 10544., 10916., 11288., 10448., 10832., 11216., 11600., 10724., 11120., 11516., 11912., 11000., 11408., 11816., 12224., 11276., 11696., 12116., 12536.,  9776., 10192., 10608., 11024.,  5572.,  5872.,  6172.,  6472.,  5848.,  6160.,  6472.,  6784.,  6124.,  6448.,  6772.,  7096.,  6400.,  6736.,  7072.,  7408.,  4244.,  4464.,  4684.,  4904.,  4520.,  4752.,  4984.,  5216.,  5324.,  5552.,  5780.,  6008.,  5600.,  5840.,  6080.,  6320.,  5876.,  6128.,  6380.,  6632.,  6152.,  6416.,  6680.,  6944.,  6428.,  6704.,  6980.,  7256.,  6704.,  6992.,  7280.,  7568.,  6980.,  7280.,  7580.,  7880.,  8360.,  8720.,  9080.,  9440.,  8636.,  9008.,  9380.,  9752.,  8912.,  9296.,  9680., 10064.,  9188.,  9584.,  9980., 10376.,  9464.,  9872., 10280., 10688.,  9740., 10160., 10580., 11000., 10016., 10448., 10880., 11312., 11396., 11888., 12380., 12872., 11672., 12176., 12680., 13184., 11948., 12464., 12980., 13496., 12224., 12752., 13280., 13808., 12500., 13040., 13580., 14120., 12776., 13328., 13880., 14432., 13052., 13616., 14180., 14744., 12064., 12624., 13184., 13744.,  8884.,  9328.,  9772., 10216.,  9160.,  9616., 10072., 10528.,  9436.,  9904., 10372., 10840.,  9712., 10192., 10672., 11152.,  8580.,  8944.,  9308.,  9672.,  8856.,  9232.,  9608.,  9984., 10172., 10544., 10916., 11288., 10448., 10832., 11216., 11600., 10724., 11120., 11516., 11912., 11000., 11408., 11816., 12224., 11276., 11696., 12116., 12536., 11552., 11984., 12416., 12848.,  8948.,  9328.,  9708., 10088.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12336., 12528., 12720., 12912., 17997., 18276., 18555., 18834., 19113., 19392., 11940., 12120., 12300., 12480., 18033., 18294., 18555., 18816., 26298., 26676., 27054., 27432., 27810., 28188., 17397., 17640., 17883., 18126., 15839., 16100., 16361., 16622., 26678., 27056., 22058., 22436., 22814., 23192., 15191., 15434., 15677., 15920., 18381., 18642., 18903., 19164., 26802., 27180., 27558., 27936., 24858., 25236., 17721., 17964., 18207., 18450., 15035., 15296., 12229., 12490., 19502., 19880., 20258., 20636., 21014., 21392., 11291., 11534., 11777., 12020., 13500., 13656., 13812., 13968., 19545., 19770., 19995., 20220., 20445., 20670., 12768., 12912., 13056., 13200., 10148., 10304., 10460., 10616., 17711., 17936., 13937., 14162., 14387., 14612.,  9536.,  9680.,  9824.,  9968.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11910., 11988., 12066., 12144., 12222., 12300., 12378., 12456., 12534., 12612., 12690., 12768., 12846., 12924., 13626., 13704., 13782., 13860., 13938., 14016., 14094., 14172., 14250., 14328., 14406., 14484., 14562., 14640., 15342., 15420., 15498., 15576., 15654., 15732., 15810., 15888., 15966., 16044., 16122., 16200., 16278., 16356., 17058., 17136., 17214., 17292., 17370., 17448., 17526., 17604., 17682., 17760., 17838., 17916., 17994., 18072., 18774., 18852., 18930., 19008., 19086., 19164., 19242., 19320., 19398., 19476., 19554., 19632., 19710., 19788., 20490., 20568., 20646., 20724., 20802., 20880., 20958., 21036., 21114., 21192., 21270., 21348., 21426., 21504., 22206., 22284., 22362., 22440., 22518., 22596., 22674., 22752., 22830., 22908., 22986., 23064., 23142., 23220.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13164., 13536., 13536., 13920., 13908., 14304., 14280., 14688., 19308., 19866., 19848., 20424., 20388., 20982., 20928., 21540., 21468., 22098., 22008., 22656., 13116., 13512., 13464., 13872., 13812., 14232., 14160., 14592., 15296., 15842., 15800., 16364., 16304., 16886., 16808., 17408., 20129., 20852., 20858., 21608., 21587., 22364., 22316., 23120., 23045., 23876., 23774., 24632., 15140., 15722., 15608., 16208., 13132., 13622., 13600., 14108., 14480., 15038., 14984., 15560., 15488., 16082., 15992., 16604., 24647., 25580., 25376., 26336., 20921., 21716., 21650., 22472., 22379., 23228., 23108., 23984., 14300., 14894., 14768., 15380., 15236., 15866., 15704., 16352., 15968., 16538., 16472., 17060., 16976., 17582., 17480., 18104., 26285., 27236., 27014., 27992., 27743., 28748., 28472., 29504., 21777., 22580., 22506., 23336., 15764., 16370., 16232., 16856., 16700., 17342., 17168., 17828., 16304., 16886., 16808., 17408., 14112., 14602., 14616., 15124., 21587., 22364., 22316., 23120., 23045., 23876., 23774., 24632., 24503., 25388., 25232., 26144., 13132., 13622., 13600., 14108., 14068., 14594., 14536., 15080.,  9788., 10232., 10088., 10544., 10388., 10856., 10688., 11168., 12536., 13106., 12968., 13556., 13400., 14006., 13832., 14456., 14264., 14906., 14696., 15356.,  9452.,  9920.,  9728., 10208.,  7828.,  8192.,  8104.,  8480.,  6788.,  7112.,  7088.,  7424.,  7388.,  7736.,  7688.,  8048., 12824., 13406., 13256., 13856.,  9656., 10082., 10088., 10532., 10520., 10982., 10952., 11432.,  6692.,  7040.,  6968.,  7328.,  7244.,  7616.,  7520.,  7904.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9824., 10508.,  9968., 10664., 10112., 10820., 10256., 10976., 10400., 11132., 10544., 11288., 10688., 11444., 10832., 11600., 10976., 11756., 11120., 11912., 11264., 12068., 11408., 12224., 11552., 12380., 11696., 12536., 10048., 10868., 10192., 11024.,  5728.,  6316.,  5872.,  6472.,  6016.,  6628.,  6160.,  6784.,  6304.,  6940.,  6448.,  7096.,  6592.,  7252.,  6736.,  7408.,  4320.,  4748.,  4464.,  4904.,  4608.,  5060.,  4752.,  5216.,  5408.,  5852.,  5552.,  6008.,  5696.,  6164.,  5840.,  6320.,  5984.,  6476.,  6128.,  6632.,  6272.,  6788.,  6416.,  6944.,  6560.,  7100.,  6704.,  7256.,  6848.,  7412.,  6992.,  7568.,  7136.,  7724.,  7280.,  7880.,  8576.,  9284.,  8720.,  9440.,  8864.,  9596.,  9008.,  9752.,  9152.,  9908.,  9296., 10064.,  9440., 10220.,  9584., 10376.,  9728., 10532.,  9872., 10688., 10016., 10844., 10160., 11000., 10304., 11156., 10448., 11312., 11744., 12716., 11888., 12872., 12032., 13028., 12176., 13184., 12320., 13340., 12464., 13496., 12608., 13652., 12752., 13808., 12896., 13964., 13040., 14120., 13184., 14276., 13328., 14432., 13472., 14588., 13616., 14744., 12480., 13588., 12624., 13744.,  9184., 10060.,  9328., 10216.,  9472., 10372.,  9616., 10528.,  9760., 10684.,  9904., 10840., 10048., 10996., 10192., 11152.,  8800.,  9516.,  8944.,  9672.,  9088.,  9828.,  9232.,  9984., 10400., 11132., 10544., 11288., 10688., 11444., 10832., 11600., 10976., 11756., 11120., 11912., 11264., 12068., 11408., 12224., 11552., 12380., 11696., 12536., 11840., 12692., 11984., 12848.,  9184.,  9932.,  9328., 10088.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10468., 10840., 11212., 11584., 10816., 11200., 11584., 11968., 11164., 11560., 11956., 12352., 11512., 11920., 12328., 12736., 17066., 17624., 18182., 18740., 17616., 18192., 18768., 19344., 18166., 18760., 19354., 19948., 18716., 19328., 19940., 20552., 19266., 19896., 20526., 21156., 19816., 20464., 21112., 21760., 12204., 12600., 12996., 13392., 12568., 12976., 13384., 13792., 12932., 13352., 13772., 14192., 13296., 13728., 14160., 14592., 15198., 15744., 16290., 16836., 15676., 16240., 16804., 17368., 16154., 16736., 17318., 17900., 16632., 17232., 17832., 18432., 22959., 23682., 24405., 25128., 23686., 24436., 25186., 25936., 24413., 25190., 25967., 26744., 25140., 25944., 26748., 27552., 25867., 26698., 27529., 28360., 26594., 27452., 28310., 29168., 17858., 18440., 19022., 19604., 18328., 18928., 19528., 20128., 13038., 13528., 14018., 14508., 13508., 14016., 14524., 15032., 14578., 15136., 15694., 16252., 15056., 15632., 16208., 16784., 15534., 16128., 16722., 17316., 16012., 16624., 17236., 17848., 24489., 25422., 26355., 27288., 25216., 26176., 27136., 28096., 19863., 20658., 21453., 22248., 20590., 21412., 22234., 23056., 21317., 22166., 23015., 23864., 22044., 22920., 23796., 24672., 14502., 15096., 15690., 16284., 14972., 15584., 16196., 16808., 15442., 16072., 16702., 17332., 15912., 16560., 17208., 17856., 14470., 15040., 15610., 16180., 14948., 15536., 16124., 16712., 15426., 16032., 16638., 17244., 15904., 16528., 17152., 17776., 24547., 25498., 26449., 27400., 25274., 26252., 27230., 28208., 26001., 27006., 28011., 29016., 26728., 27760., 28792., 29824., 21055., 21858., 22661., 23464., 21782., 22612., 23442., 24272., 15754., 16360., 16966., 17572., 16224., 16848., 17472., 18096., 16694., 17336., 17978., 18620., 17164., 17824., 18484., 19144., 16154., 16736., 17318., 17900., 16632., 17232., 17832., 18432., 14934., 15424., 15914., 16404., 15412., 15920., 16428., 16936., 24413., 25190., 25967., 26744., 25140., 25944., 26748., 27552., 25867., 26698., 27529., 28360., 26594., 27452., 28310., 29168., 27321., 28206., 29091., 29976., 28048., 28960., 29872., 30784., 13038., 13528., 14018., 14508., 13508., 14016., 14524., 15032., 13978., 14504., 15030., 15556., 14448., 14992., 15536., 16080., 11708., 12152., 12596., 13040., 12040., 12496., 12952., 13408., 12372., 12840., 13308., 13776., 12704., 13184., 13664., 14144., 13366., 13936., 14506., 15076., 13828., 14416., 15004., 15592., 14290., 14896., 15502., 16108., 14752., 15376., 16000., 16624., 15214., 15856., 16498., 17140., 15676., 16336., 16996., 17656., 10500., 10968., 11436., 11904., 10784., 11264., 11744., 12224.,  6844.,  7208.,  7572.,  7936.,  7128.,  7504.,  7880.,  8256.,  8388.,  8712.,  9036.,  9360.,  8720.,  9056.,  9392.,  9728.,  9052.,  9400.,  9748., 10096.,  9384.,  9744., 10104., 10464., 13674., 14256., 14838., 15420., 14136., 14736., 15336., 15936., 10822., 11248., 11674., 12100., 11284., 11728., 12172., 12616., 11746., 12208., 12670., 13132., 12208., 12688., 13168., 13648.,  7660.,  8008.,  8356.,  8704.,  7944.,  8304.,  8664.,  9024.,  8228.,  8600.,  8972.,  9344.,  8512.,  8896.,  9280.,  9664.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18964., 19648., 20332., 21016., 19240., 19936., 20632., 21328., 19516., 20224., 20932., 21640., 19792., 20512., 21232., 21952., 20068., 20800., 21532., 22264., 20344., 21088., 21832., 22576., 20620., 21376., 22132., 22888., 20896., 21664., 22432., 23200., 21172., 21952., 22732., 23512., 21448., 22240., 23032., 23824., 21724., 22528., 23332., 24136., 22000., 22816., 23632., 24448., 22276., 23104., 23932., 24760., 22552., 23392., 24232., 25072., 19276., 20096., 20916., 21736., 19552., 20384., 21216., 22048., 10868., 11456., 12044., 12632., 11144., 11744., 12344., 12944., 11420., 12032., 12644., 13256., 11696., 12320., 12944., 13568., 11972., 12608., 13244., 13880., 12248., 12896., 13544., 14192., 12524., 13184., 13844., 14504., 12800., 13472., 14144., 14816.,  8212.,  8640.,  9068.,  9496.,  8488.,  8928.,  9368.,  9808.,  8764.,  9216.,  9668., 10120.,  9040.,  9504.,  9968., 10432., 10372., 10816., 11260., 11704., 10648., 11104., 11560., 12016., 10924., 11392., 11860., 12328., 11200., 11680., 12160., 12640., 11476., 11968., 12460., 12952., 11752., 12256., 12760., 13264., 12028., 12544., 13060., 13576., 12304., 12832., 13360., 13888., 12580., 13120., 13660., 14200., 12856., 13408., 13960., 14512., 13132., 13696., 14260., 14824., 13408., 13984., 14560., 15136., 13684., 14272., 14860., 15448., 13960., 14560., 15160., 15760., 16444., 17152., 17860., 18568., 16720., 17440., 18160., 18880., 16996., 17728., 18460., 19192., 17272., 18016., 18760., 19504., 17548., 18304., 19060., 19816., 17824., 18592., 19360., 20128., 18100., 18880., 19660., 20440., 18376., 19168., 19960., 20752., 18652., 19456., 20260., 21064., 18928., 19744., 20560., 21376., 19204., 20032., 20860., 21688., 19480., 20320., 21160., 22000., 19756., 20608., 21460., 22312., 20032., 20896., 21760., 22624., 22516., 23488., 24460., 25432., 22792., 23776., 24760., 25744., 23068., 24064., 25060., 26056., 23344., 24352., 25360., 26368., 23620., 24640., 25660., 26680., 23896., 24928., 25960., 26992., 24172., 25216., 26260., 27304., 24448., 25504., 26560., 27616., 24724., 25792., 26860., 27928., 25000., 26080., 27160., 28240., 25276., 26368., 27460., 28552., 25552., 26656., 27760., 28864., 25828., 26944., 28060., 29176., 26104., 27232., 28360., 29488., 23852., 24960., 26068., 27176., 24128., 25248., 26368., 27488., 17492., 18368., 19244., 20120., 17768., 18656., 19544., 20432., 18044., 18944., 19844., 20744., 18320., 19232., 20144., 21056., 18596., 19520., 20444., 21368., 18872., 19808., 20744., 21680., 19148., 20096., 21044., 21992., 19424., 20384., 21344., 22304., 16884., 17600., 18316., 19032., 17160., 17888., 18616., 19344., 17436., 18176., 18916., 19656., 17712., 18464., 19216., 19968., 20068., 20800., 21532., 22264., 20344., 21088., 21832., 22576., 20620., 21376., 22132., 22888., 20896., 21664., 22432., 23200., 21172., 21952., 22732., 23512., 21448., 22240., 23032., 23824., 21724., 22528., 23332., 24136., 22000., 22816., 23632., 24448., 22276., 23104., 23932., 24760., 22552., 23392., 24232., 25072., 22828., 23680., 24532., 25384., 23104., 23968., 24832., 25696., 17620., 18368., 19116., 19864., 17896., 18656., 19416., 20176.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13344., 13536., 13728., 13920., 14112., 14304., 14496., 14688., 19587., 19866., 20145., 20424., 20703., 20982., 21261., 21540., 21819., 22098., 22377., 22656., 13332., 13512., 13692., 13872., 14052., 14232., 14412., 14592., 15581., 15842., 16103., 16364., 16625., 16886., 17147., 17408., 20474., 20852., 21230., 21608., 21986., 22364., 22742., 23120., 23498., 23876., 24254., 24632., 15479., 15722., 15965., 16208., 13379., 13622., 13865., 14108., 14777., 15038., 15299., 15560., 15821., 16082., 16343., 16604., 25202., 25580., 25958., 26336., 21338., 21716., 22094., 22472., 22850., 23228., 23606., 23984., 14651., 14894., 15137., 15380., 15623., 15866., 16109., 16352., 16277., 16538., 16799., 17060., 17321., 17582., 17843., 18104., 26858., 27236., 27614., 27992., 28370., 28748., 29126., 29504., 22202., 22580., 22958., 23336., 16127., 16370., 16613., 16856., 17099., 17342., 17585., 17828., 16625., 16886., 17147., 17408., 14341., 14602., 14863., 15124., 21986., 22364., 22742., 23120., 23498., 23876., 24254., 24632., 25010., 25388., 25766., 26144., 13379., 13622., 13865., 14108., 14351., 14594., 14837., 15080., 10076., 10232., 10388., 10544., 10700., 10856., 11012., 11168., 12881., 13106., 13331., 13556., 13781., 14006., 14231., 14456., 14681., 14906., 15131., 15356.,  9776.,  9920., 10064., 10208.,  8048.,  8192.,  8336.,  8480.,  6956.,  7112.,  7268.,  7424.,  7580.,  7736.,  7892.,  8048., 13181., 13406., 13631., 13856.,  9857., 10082., 10307., 10532., 10757., 10982., 11207., 11432.,  6896.,  7040.,  7184.,  7328.,  7472.,  7616.,  7760.,  7904.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10430., 10508., 10586., 10664., 10742., 10820., 10898., 10976., 11054., 11132., 11210., 11288., 11366., 11444., 11522., 11600., 11678., 11756., 11834., 11912., 11990., 12068., 12146., 12224., 12302., 12380., 12458., 12536., 10790., 10868., 10946., 11024.,  6238.,  6316.,  6394.,  6472.,  6550.,  6628.,  6706.,  6784.,  6862.,  6940.,  7018.,  7096.,  7174.,  7252.,  7330.,  7408.,  4670.,  4748.,  4826.,  4904.,  4982.,  5060.,  5138.,  5216.,  5774.,  5852.,  5930.,  6008.,  6086.,  6164.,  6242.,  6320.,  6398.,  6476.,  6554.,  6632.,  6710.,  6788.,  6866.,  6944.,  7022.,  7100.,  7178.,  7256.,  7334.,  7412.,  7490.,  7568.,  7646.,  7724.,  7802.,  7880.,  9206.,  9284.,  9362.,  9440.,  9518.,  9596.,  9674.,  9752.,  9830.,  9908.,  9986., 10064., 10142., 10220., 10298., 10376., 10454., 10532., 10610., 10688., 10766., 10844., 10922., 11000., 11078., 11156., 11234., 11312., 12638., 12716., 12794., 12872., 12950., 13028., 13106., 13184., 13262., 13340., 13418., 13496., 13574., 13652., 13730., 13808., 13886., 13964., 14042., 14120., 14198., 14276., 14354., 14432., 14510., 14588., 14666., 14744., 13510., 13588., 13666., 13744.,  9982., 10060., 10138., 10216., 10294., 10372., 10450., 10528., 10606., 10684., 10762., 10840., 10918., 10996., 11074., 11152.,  9438.,  9516.,  9594.,  9672.,  9750.,  9828.,  9906.,  9984., 11054., 11132., 11210., 11288., 11366., 11444., 11522., 11600., 11678., 11756., 11834., 11912., 11990., 12068., 12146., 12224., 12302., 12380., 12458., 12536., 12614., 12692., 12770., 12848.,  9854.,  9932., 10010., 10088.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13860., 14272., 14232., 14656., 14604., 15040., 14976., 15424., 11380., 11712., 11752., 12096., 12124., 12480., 12496., 12864., 16892., 17414., 17432., 17972., 17972., 18530., 18512., 19088., 19052., 19646., 19592., 20204., 20132., 20762., 20672., 21320., 21212., 21878., 21752., 22436., 22292., 22994., 22832., 23552., 10716., 11048., 11064., 11408., 11412., 11768., 11760., 12128., 12108., 12488., 12456., 12848., 12804., 13208., 13152., 13568., 15752., 16314., 16256., 16836., 16760., 17358., 17264., 17880., 17768., 18402., 18272., 18924., 18776., 19446., 19280., 19968., 18025., 18676., 18754., 19432., 19483., 20188., 20212., 20944., 20941., 21700., 21670., 22456., 22399., 23212., 23128., 23968., 23857., 24724., 24586., 25480., 25315., 26236., 26044., 26992., 16500., 17134., 16968., 17620., 17436., 18106., 17904., 18592., 12484., 12934., 12952., 13420., 13420., 13906., 13888., 14392., 13800., 14322., 14304., 14844., 14808., 15366., 15312., 15888., 15816., 16410., 16320., 16932., 16824., 17454., 17328., 17976., 26741., 27748., 27470., 28504., 28199., 29260., 28928., 30016., 17561., 18228., 18290., 18984., 19019., 19740., 19748., 20496., 20477., 21252., 21206., 22008., 21935., 22764., 22664., 23520., 14628., 15222., 15096., 15708., 15564., 16194., 16032., 16680., 16500., 17166., 16968., 17652., 17436., 18138., 17904., 18624., 13512., 13994., 14016., 14516., 14520., 15038., 15024., 15560., 15528., 16082., 16032., 16604., 16536., 17126., 17040., 17648., 25153., 26068., 25882., 26824., 26611., 27580., 27340., 28336., 28069., 29092., 28798., 29848., 29527., 30604., 30256., 31360., 17993., 18676., 18722., 19432., 19451., 20188., 20180., 20944., 14420., 14974., 14888., 15460., 15356., 15946., 15824., 16432., 16292., 16918., 16760., 17404., 17228., 17890., 17696., 18376., 17768., 18402., 18272., 18924., 18776., 19446., 19280., 19968., 13384., 13834., 13888., 14356., 14392., 14878., 14896., 15400., 20941., 21700., 21670., 22456., 22399., 23212., 23128., 23968., 23857., 24724., 24586., 25480., 25315., 26236., 26044., 26992., 26773., 27748., 27502., 28504., 28231., 29260., 28960., 30016., 12484., 12934., 12952., 13420., 13420., 13906., 13888., 14392., 14356., 14878., 14824., 15364., 15292., 15850., 15760., 16336.,  8012.,  8376.,  8312.,  8688.,  8612.,  9000.,  8912.,  9312.,  9212.,  9624.,  9512.,  9936.,  9812., 10248., 10112., 10560.,  9984., 10402., 10416., 10852., 10848., 11302., 11280., 11752., 11712., 12202., 12144., 12652., 12576., 13102., 13008., 13552., 13440., 14002., 13872., 14452., 14304., 14902., 14736., 15352.,  8388.,  8800.,  8664.,  9088.,  8940.,  9376.,  9216.,  9664.,  7252.,  7520.,  7528.,  7808.,  7804.,  8096.,  8080.,  8384.,  8412.,  8792.,  8712.,  9104.,  9012.,  9416.,  9312.,  9728.,  9612., 10040.,  9912., 10352., 10212., 10664., 10512., 10976., 16704., 17402., 17136., 17852., 17568., 18302., 18000., 18752.,  9664., 10114., 10096., 10564., 10528., 11014., 10960., 11464., 11392., 11914., 11824., 12364., 12256., 12814., 12688., 13264.,  8756.,  9184.,  9032.,  9472.,  9308.,  9760.,  9584., 10048.,  9860., 10336., 10136., 10624., 10412., 10912., 10688., 11200.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19504., 20860., 19648., 21016., 19792., 21172., 19936., 21328., 20080., 21484., 20224., 21640., 20368., 21796., 20512., 21952., 20656., 22108., 20800., 22264., 20944., 22420., 21088., 22576., 21232., 22732., 21376., 22888., 21520., 23044., 21664., 23200., 21808., 23356., 21952., 23512., 22096., 23668., 22240., 23824., 22384., 23980., 22528., 24136., 22672., 24292., 22816., 24448., 22960., 24604., 23104., 24760., 23248., 24916., 23392., 25072., 19952., 21580., 20096., 21736., 20240., 21892., 20384., 22048., 11312., 12476., 11456., 12632., 11600., 12788., 11744., 12944., 11888., 13100., 12032., 13256., 12176., 13412., 12320., 13568., 12464., 13724., 12608., 13880., 12752., 14036., 12896., 14192., 13040., 14348., 13184., 14504., 13328., 14660., 13472., 14816.,  8496.,  9340.,  8640.,  9496.,  8784.,  9652.,  8928.,  9808.,  9072.,  9964.,  9216., 10120.,  9360., 10276.,  9504., 10432., 10672., 11548., 10816., 11704., 10960., 11860., 11104., 12016., 11248., 12172., 11392., 12328., 11536., 12484., 11680., 12640., 11824., 12796., 11968., 12952., 12112., 13108., 12256., 13264., 12400., 13420., 12544., 13576., 12688., 13732., 12832., 13888., 12976., 14044., 13120., 14200., 13264., 14356., 13408., 14512., 13552., 14668., 13696., 14824., 13840., 14980., 13984., 15136., 14128., 15292., 14272., 15448., 14416., 15604., 14560., 15760., 17008., 18412., 17152., 18568., 17296., 18724., 17440., 18880., 17584., 19036., 17728., 19192., 17872., 19348., 18016., 19504., 18160., 19660., 18304., 19816., 18448., 19972., 18592., 20128., 18736., 20284., 18880., 20440., 19024., 20596., 19168., 20752., 19312., 20908., 19456., 21064., 19600., 21220., 19744., 21376., 19888., 21532., 20032., 21688., 20176., 21844., 20320., 22000., 20464., 22156., 20608., 22312., 20752., 22468., 20896., 22624., 23344., 25276., 23488., 25432., 23632., 25588., 23776., 25744., 23920., 25900., 24064., 26056., 24208., 26212., 24352., 26368., 24496., 26524., 24640., 26680., 24784., 26836., 24928., 26992., 25072., 27148., 25216., 27304., 25360., 27460., 25504., 27616., 25648., 27772., 25792., 27928., 25936., 28084., 26080., 28240., 26224., 28396., 26368., 28552., 26512., 28708., 26656., 28864., 26800., 29020., 26944., 29176., 27088., 29332., 27232., 29488., 24816., 27020., 24960., 27176., 25104., 27332., 25248., 27488., 18224., 19964., 18368., 20120., 18512., 20276., 18656., 20432., 18800., 20588., 18944., 20744., 19088., 20900., 19232., 21056., 19376., 21212., 19520., 21368., 19664., 21524., 19808., 21680., 19952., 21836., 20096., 21992., 20240., 22148., 20384., 22304., 17456., 18876., 17600., 19032., 17744., 19188., 17888., 19344., 18032., 19500., 18176., 19656., 18320., 19812., 18464., 19968., 20656., 22108., 20800., 22264., 20944., 22420., 21088., 22576., 21232., 22732., 21376., 22888., 21520., 23044., 21664., 23200., 21808., 23356., 21952., 23512., 22096., 23668., 22240., 23824., 22384., 23980., 22528., 24136., 22672., 24292., 22816., 24448., 22960., 24604., 23104., 24760., 23248., 24916., 23392., 25072., 23536., 25228., 23680., 25384., 23824., 25540., 23968., 25696., 18224., 19708., 18368., 19864., 18512., 20020., 18656., 20176.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4204.,  4456.,  4708.,  4960.,  4392.,  4656.,  4920.,  5184.,  4580.,  4856.,  5132.,  5408.,  4768.,  5056.,  5344.,  5632.,  1436.,  1544.,  1652.,  1760.,  1624.,  1744.,  1864.,  1984.,  1812.,  1944.,  2076.,  2208.,  2000.,  2144.,  2288.,  2432.,  3406.,  3640.,  3874.,  4108.,  3700.,  3952.,  4204.,  4456.,  3994.,  4264.,  4534.,  4804.,  4288.,  4576.,  4864.,  5152.,  4582.,  4888.,  5194.,  5500.,  4876.,  5200.,  5524.,  5848.,  5170.,  5512.,  5854.,  6196.,  5464.,  5824.,  6184.,  6544.,  5758.,  6136.,  6514.,  6892.,  6052.,  6448.,  6844.,  7240.,  6346.,  6760.,  7174.,  7588.,  6640.,  7072.,  7504.,  7936.,  2092.,  2200.,  2308.,  2416.,  2296.,  2416.,  2536.,  2656.,  2500.,  2632.,  2764.,  2896.,  2704.,  2848.,  2992.,  3136.,  2908.,  3064.,  3220.,  3376.,  3112.,  3280.,  3448.,  3616.,  3316.,  3496.,  3676.,  3856.,  3520.,  3712.,  3904.,  4096.,  4094.,  4400.,  4706.,  5012.,  4348.,  4672.,  4996.,  5320.,  4602.,  4944.,  5286.,  5628.,  4856.,  5216.,  5576.,  5936.,  5110.,  5488.,  5866.,  6244.,  5364.,  5760.,  6156.,  6552.,  5618.,  6032.,  6446.,  6860.,  5872.,  6304.,  6736.,  7168.,  3719.,  3954.,  4189.,  4424.,  4094.,  4356.,  4618.,  4880.,  4469.,  4758.,  5047.,  5336.,  4844.,  5160.,  5476.,  5792.,  5219.,  5562.,  5905.,  6248.,  5594.,  5964.,  6334.,  6704.,  5969.,  6366.,  6763.,  7160.,  6344.,  6768.,  7192.,  7616.,  6719.,  7170.,  7621.,  8072.,  7094.,  7572.,  8050.,  8528.,  7469.,  7974.,  8479.,  8984.,  7844.,  8376.,  8908.,  9440.,  5454.,  5832.,  6210.,  6588.,  5700.,  6096.,  6492.,  6888.,  5946.,  6360.,  6774.,  7188.,  6192.,  6624.,  7056.,  7488.,  1926.,  2088.,  2250.,  2412.,  2172.,  2352.,  2532.,  2712.,  2418.,  2616.,  2814.,  3012.,  2664.,  2880.,  3096.,  3312.,  3526.,  3760.,  3994.,  4228.,  3780.,  4032.,  4284.,  4536.,  4034.,  4304.,  4574.,  4844.,  4288.,  4576.,  4864.,  5152.,  4542.,  4848.,  5154.,  5460.,  4796.,  5120.,  5444.,  5768.,  5050.,  5392.,  5734.,  6076.,  5304.,  5664.,  6024.,  6384.,  8219.,  8778.,  9337.,  9896.,  8594.,  9180.,  9766., 10352.,  8969.,  9582., 10195., 10808.,  9344.,  9984., 10624., 11264.,  3031.,  3282.,  3533.,  3784.,  3406.,  3684.,  3962.,  4240.,  3781.,  4086.,  4391.,  4696.,  4156.,  4488.,  4820.,  5152.,  4531.,  4890.,  5249.,  5608.,  4906.,  5292.,  5678.,  6064.,  5281.,  5694.,  6107.,  6520.,  5656.,  6096.,  6536.,  6976.,  3894.,  4200.,  4506.,  4812.,  4140.,  4464.,  4788.,  5112.,  4386.,  4728.,  5070.,  5412.,  4632.,  4992.,  5352.,  5712.,  4878.,  5256.,  5634.,  6012.,  5124.,  5520.,  5916.,  6312.,  5370.,  5784.,  6198.,  6612.,  5616.,  6048.,  6480.,  6912.,  2062.,  2224.,  2386.,  2548.,  2316.,  2496.,  2676.,  2856.,  2570.,  2768.,  2966.,  3164.,  2824.,  3040.,  3256.,  3472.,  3078.,  3312.,  3546.,  3780.,  3332.,  3584.,  3836.,  4088.,  3586.,  3856.,  4126.,  4396.,  3840.,  4128.,  4416.,  4704.,  6031.,  6498.,  6965.,  7432.,  6406.,  6900.,  7394.,  7888.,  6781.,  7302.,  7823.,  8344.,  7156.,  7704.,  8252.,  8800.,  7531.,  8106.,  8681.,  9256.,  7906.,  8508.,  9110.,  9712.,  8281.,  8910.,  9539., 10168.,  8656.,  9312.,  9968., 10624.,  3719.,  3954.,  4189.,  4424.,  4094.,  4356.,  4618.,  4880.,  4469.,  4758.,  5047.,  5336.,  4844.,  5160.,  5476.,  5792.,  3486.,  3720.,  3954.,  4188.,  3732.,  3984.,  4236.,  4488.,  3978.,  4248.,  4518.,  4788.,  4224.,  4512.,  4800.,  5088.,  4470.,  4776.,  5082.,  5388.,  4716.,  5040.,  5364.,  5688.,  4962.,  5304.,  5646.,  5988.,  5208.,  5568.,  5928.,  6288.,  5110.,  5488.,  5866.,  6244.,  5364.,  5760.,  6156.,  6552.,  5618.,  6032.,  6446.,  6860.,  5872.,  6304.,  6736.,  7168.,  2510.,  2672.,  2834.,  2996.,  2764.,  2944.,  3124.,  3304.,  3018.,  3216.,  3414.,  3612.,  3272.,  3488.,  3704.,  3920.,  5219.,  5562.,  5905.,  6248.,  5594.,  5964.,  6334.,  6704.,  5969.,  6366.,  6763.,  7160.,  6344.,  6768.,  7192.,  7616.,  6719.,  7170.,  7621.,  8072.,  7094.,  7572.,  8050.,  8528.,  7469.,  7974.,  8479.,  8984.,  7844.,  8376.,  8908.,  9440.,  8219.,  8778.,  9337.,  9896.,  8594.,  9180.,  9766., 10352.,  8969.,  9582., 10195., 10808.,  9344.,  9984., 10624., 11264.,  1926.,  2088.,  2250.,  2412.,  2172.,  2352.,  2532.,  2712.,  2418.,  2616.,  2814.,  3012.,  2664.,  2880.,  3096.,  3312.,  2910.,  3144.,  3378.,  3612.,  3156.,  3408.,  3660.,  3912.,  3402.,  3672.,  3942.,  4212.,  3648.,  3936.,  4224.,  4512.,  3468.,  3672.,  3876.,  4080.,  3672.,  3888.,  4104.,  4320.,  3876.,  4104.,  4332.,  4560.,  4080.,  4320.,  4560.,  4800.,  4284.,  4536.,  4788.,  5040.,  4488.,  4752.,  5016.,  5280.,  4692.,  4968.,  5244.,  5520.,  4896.,  5184.,  5472.,  5760.,  2334.,  2496.,  2658.,  2820.,  2604.,  2784.,  2964.,  3144.,  2874.,  3072.,  3270.,  3468.,  3144.,  3360.,  3576.,  3792.,  3414.,  3648.,  3882.,  4116.,  3684.,  3936.,  4188.,  4440.,  3954.,  4224.,  4494.,  4764.,  4224.,  4512.,  4800.,  5088.,  4494.,  4800.,  5106.,  5412.,  4764.,  5088.,  5412.,  5736.,  5034.,  5376.,  5718.,  6060.,  5304.,  5664.,  6024.,  6384.,  3276.,  3528.,  3780.,  4032.,  3432.,  3696.,  3960.,  4224.,  3588.,  3864.,  4140.,  4416.,  3744.,  4032.,  4320.,  4608.,  1404.,  1512.,  1620.,  1728.,  1560.,  1680.,  1800.,  1920.,  1716.,  1848.,  1980.,  2112.,  1872.,  2016.,  2160.,  2304.,  2652.,  2808.,  2964.,  3120.,  2856.,  3024.,  3192.,  3360.,  3060.,  3240.,  3420.,  3600.,  3264.,  3456.,  3648.,  3840.,  3468.,  3672.,  3876.,  4080.,  3672.,  3888.,  4104.,  4320.,  3876.,  4104.,  4332.,  4560.,  4080.,  4320.,  4560.,  4800.,  5574.,  5952.,  6330.,  6708.,  5844.,  6240.,  6636.,  7032.,  6114.,  6528.,  6942.,  7356.,  6384.,  6816.,  7248.,  7680.,  2526.,  2688.,  2850.,  3012.,  2796.,  2976.,  3156.,  3336.,  3066.,  3264.,  3462.,  3660.,  3336.,  3552.,  3768.,  3984.,  3606.,  3840.,  4074.,  4308.,  3876.,  4128.,  4380.,  4632.,  4146.,  4416.,  4686.,  4956.,  4416.,  4704.,  4992.,  5280.,  2652.,  2856.,  3060.,  3264.,  2808.,  3024.,  3240.,  3456.,  2964.,  3192.,  3420.,  3648.,  3120.,  3360.,  3600.,  3840.,  3276.,  3528.,  3780.,  4032.,  3432.,  3696.,  3960.,  4224.,  3588.,  3864.,  4140.,  4416.,  3744.,  4032.,  4320.,  4608.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16916., 17504., 18092., 18680., 17192., 17792., 18392., 18992., 17468., 18080., 18692., 19304., 17744., 18368., 18992., 19616., 18020., 18656., 19292., 19928., 18296., 18944., 19592., 20240., 18572., 19232., 19892., 20552., 18848., 19520., 20192., 20864., 19124., 19808., 20492., 21176., 19400., 20096., 20792., 21488., 19676., 20384., 21092., 21800., 19952., 20672., 21392., 22112., 20228., 20960., 21692., 22424., 20504., 21248., 21992., 22736., 20780., 21536., 22292., 23048., 21056., 21824., 22592., 23360., 21332., 22112., 22892., 23672., 21608., 22400., 23192., 23984., 21884., 22688., 23492., 24296., 22160., 22976., 23792., 24608., 22436., 23264., 24092., 24920., 22712., 23552., 24392., 25232., 22988., 23840., 24692., 25544., 23264., 24128., 24992., 25856., 23540., 24416., 25292., 26168., 23816., 24704., 25592., 26480., 24092., 24992., 25892., 26792., 24368., 25280., 26192., 27104., 23300., 24288., 25276., 26264., 23576., 24576., 25576., 26576., 23852., 24864., 25876., 26888., 24128., 25152., 26176., 27200., 15444., 16224., 17004., 17784., 15720., 16512., 17304., 18096., 15996., 16800., 17604., 18408., 16272., 17088., 17904., 18720., 16548., 17376., 18204., 19032., 16824., 17664., 18504., 19344., 17100., 17952., 18804., 19656., 17376., 18240., 19104., 19968., 17652., 18528., 19404., 20280., 17928., 18816., 19704., 20592., 18204., 19104., 20004., 20904., 18480., 19392., 20304., 21216., 18756., 19680., 20604., 21528., 19032., 19968., 20904., 21840., 19308., 20256., 21204., 22152., 19584., 20544., 21504., 22464., 14996., 15712., 16428., 17144., 15272., 16000., 16728., 17456., 15548., 16288., 17028., 17768., 15824., 16576., 17328., 18080., 16100., 16864., 17628., 18392., 16376., 17152., 17928., 18704., 16652., 17440., 18228., 19016., 16928., 17728., 18528., 19328., 15732., 16480., 17228., 17976., 16008., 16768., 17528., 18288., 16284., 17056., 17828., 18600., 16560., 17344., 18128., 18912., 16836., 17632., 18428., 19224., 17112., 17920., 18728., 19536., 17388., 18208., 19028., 19848., 17664., 18496., 19328., 20160., 11028., 11616., 12204., 12792., 11304., 11904., 12504., 13104., 11580., 12192., 12804., 13416., 11856., 12480., 13104., 13728., 12132., 12768., 13404., 14040., 12408., 13056., 13704., 14352., 12684., 13344., 14004., 14664., 12960., 13632., 14304., 14976., 13236., 13920., 14604., 15288., 13512., 14208., 14904., 15600., 13788., 14496., 15204., 15912., 14064., 14784., 15504., 16224., 14340., 15072., 15804., 16536., 14616., 15360., 16104., 16848., 14892., 15648., 16404., 17160., 15168., 15936., 16704., 17472., 12628., 13152., 13676., 14200., 12904., 13440., 13976., 14512., 13180., 13728., 14276., 14824., 13456., 14016., 14576., 15136., 18020., 18656., 19292., 19928., 18296., 18944., 19592., 20240., 18572., 19232., 19892., 20552., 18848., 19520., 20192., 20864., 19124., 19808., 20492., 21176., 19400., 20096., 20792., 21488., 19676., 20384., 21092., 21800., 19952., 20672., 21392., 22112., 20228., 20960., 21692., 22424., 20504., 21248., 21992., 22736., 20780., 21536., 22292., 23048., 21056., 21824., 22592., 23360., 21332., 22112., 22892., 23672., 21608., 22400., 23192., 23984., 21884., 22688., 23492., 24296., 22160., 22976., 23792., 24608., 22436., 23264., 24092., 24920., 22712., 23552., 24392., 25232., 22988., 23840., 24692., 25544., 23264., 24128., 24992., 25856., 23540., 24416., 25292., 26168., 23816., 24704., 25592., 26480., 24092., 24992., 25892., 26792., 24368., 25280., 26192., 27104., 24644., 25568., 26492., 27416., 24920., 25856., 26792., 27728., 25196., 26144., 27092., 28040., 25472., 26432., 27392., 28352., 15444., 16224., 17004., 17784., 15720., 16512., 17304., 18096., 15996., 16800., 17604., 18408., 16272., 17088., 17904., 18720., 16548., 17376., 18204., 19032., 16824., 17664., 18504., 19344., 17100., 17952., 18804., 19656., 17376., 18240., 19104., 19968., 17652., 18528., 19404., 20280., 17928., 18816., 19704., 20592., 18204., 19104., 20004., 20904., 18480., 19392., 20304., 21216., 18756., 19680., 20604., 21528., 19032., 19968., 20904., 21840., 19308., 20256., 21204., 22152., 19584., 20544., 21504., 22464., 14996., 15712., 16428., 17144., 15272., 16000., 16728., 17456., 15548., 16288., 17028., 17768., 15824., 16576., 17328., 18080., 16100., 16864., 17628., 18392., 16376., 17152., 17928., 18704., 16652., 17440., 18228., 19016., 16928., 17728., 18528., 19328., 17204., 18016., 18828., 19640., 17480., 18304., 19128., 19952., 17756., 18592., 19428., 20264., 18032., 18880., 19728., 20576., 16836., 17632., 18428., 19224., 17112., 17920., 18728., 19536., 17388., 18208., 19028., 19848., 17664., 18496., 19328., 20160., 11028., 11616., 12204., 12792., 11304., 11904., 12504., 13104., 11580., 12192., 12804., 13416., 11856., 12480., 13104., 13728., 12132., 12768., 13404., 14040., 12408., 13056., 13704., 14352., 12684., 13344., 14004., 14664., 12960., 13632., 14304., 14976., 13236., 13920., 14604., 15288., 13512., 14208., 14904., 15600., 13788., 14496., 15204., 15912., 14064., 14784., 15504., 16224., 14340., 15072., 15804., 16536., 14616., 15360., 16104., 16848., 14892., 15648., 16404., 17160., 15168., 15936., 16704., 17472., 12628., 13152., 13676., 14200., 12904., 13440., 13976., 14512., 13180., 13728., 14276., 14824., 13456., 14016., 14576., 15136., 13732., 14304., 14876., 15448., 14008., 14592., 15176., 15760., 14284., 14880., 15476., 16072., 14560., 15168., 15776., 16384., 19124., 19808., 20492., 21176., 19400., 20096., 20792., 21488., 19676., 20384., 21092., 21800., 19952., 20672., 21392., 22112., 20228., 20960., 21692., 22424., 20504., 21248., 21992., 22736., 20780., 21536., 22292., 23048., 21056., 21824., 22592., 23360., 21332., 22112., 22892., 23672., 21608., 22400., 23192., 23984., 21884., 22688., 23492., 24296., 22160., 22976., 23792., 24608., 22436., 23264., 24092., 24920., 22712., 23552., 24392., 25232., 22988., 23840., 24692., 25544., 23264., 24128., 24992., 25856., 23540., 24416., 25292., 26168., 23816., 24704., 25592., 26480., 24092., 24992., 25892., 26792., 24368., 25280., 26192., 27104., 24644., 25568., 26492., 27416., 24920., 25856., 26792., 27728., 25196., 26144., 27092., 28040., 25472., 26432., 27392., 28352., 19988., 20832., 21676., 22520., 20264., 21120., 21976., 22832., 20540., 21408., 22276., 23144., 20816., 21696., 22576., 23456.};
  const std::array<int, 4> in_shape = {{ 3, 12, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17340., 25023., 25302., 25581., 25860., 16536., 16716., 14960., 21354., 21732., 22110., 22488., 14199., 14442., 15788., 21410., 21788., 22166., 22544., 12891., 13134., 16744., 22746., 23124., 23502., 23880., 14783., 15026., 17700., 25362., 25740., 26118., 26496., 16803., 17046., 10244., 14517., 14742., 14967., 15192.,  9516.,  9660., 10196., 13505., 13730., 13955., 14180.,  7788.,  7932.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18246., 18324., 18402., 18480., 18558., 18636., 18714., 19182., 19260., 19338., 19416., 19494., 19572., 19650., 20118., 20196., 20274., 20352., 20430., 20508., 20586., 21054., 21132., 21210., 21288., 21366., 21444., 21522., 21990., 22068., 22146., 22224., 22302., 22380., 22458., 22926., 23004., 23082., 23160., 23238., 23316., 23394., 23862., 23940., 24018., 24096., 24174., 24252., 24330.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14752., 15224., 20940., 21630., 21480., 22188., 22020., 22746., 22560., 23304., 14156., 14640., 14504., 15000., 13044., 13536., 18189., 18900., 18918., 19656., 19647., 20412., 20376., 21168., 12528., 13038., 12996., 13524., 16148., 16728., 21305., 22084., 22034., 22840., 22763., 23596., 23492., 24352., 13024., 13494., 13492., 13980., 19508., 20176., 23909., 24756., 24638., 25512., 25367., 26268., 26096., 27024., 15184., 15742., 15652., 16228., 18388., 19016., 26001., 26916., 26730., 27672., 27459., 28428., 28188., 29184., 17600., 18246., 18068., 18732.,  6816.,  7176.,  9312.,  9834.,  9744., 10284., 10176., 10734., 10608., 11184.,  6372.,  6744.,  6648.,  7032.,  8240.,  8616., 10400., 10882., 10832., 11332., 11264., 11782., 11696., 12232.,  6100.,  6360.,  6376.,  6648.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13960., 14988., 14104., 15144., 14248., 15300., 14392., 15456., 14536., 15612., 14680., 15768., 14824., 15924., 15688., 16860., 15832., 17016., 15976., 17172., 16120., 17328., 16264., 17484., 16408., 17640., 16552., 17796., 17416., 18732., 17560., 18888., 17704., 19044., 17848., 19200., 17992., 19356., 18136., 19512., 18280., 19668., 19144., 20604., 19288., 20760., 19432., 20916., 19576., 21072., 19720., 21228., 19864., 21384., 20008., 21540., 20872., 22476., 21016., 22632., 21160., 22788., 21304., 22944., 21448., 23100., 21592., 23256., 21736., 23412., 18760., 20252., 18904., 20408., 19048., 20564., 19192., 20720., 16008., 17292., 16152., 17448., 16296., 17604., 17160., 18540., 17304., 18696., 17448., 18852., 17592., 19008., 17736., 19164., 17880., 19320., 18024., 19476.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14952., 15424., 15896., 16368., 23014., 23704., 24394., 25084., 23564., 24272., 24980., 25688., 24114., 24840., 25566., 26292., 24664., 25408., 26152., 26896., 15988., 16472., 16956., 17440., 16352., 16848., 17344., 17840., 10236., 10728., 11220., 11712., 16531., 17242., 17953., 18664., 17258., 17996., 18734., 19472., 17985., 18750., 19515., 20280., 18712., 19504., 20296., 21088., 12066., 12576., 13086., 13596., 12536., 13064., 13592., 14120., 14308., 14888., 15468., 16048., 22439., 23218., 23997., 24776., 23166., 23972., 24778., 25584., 23893., 24726., 25559., 26392., 24620., 25480., 26340., 27200., 11818., 12288., 12758., 13228., 12288., 12776., 13264., 13752., 18892., 19560., 20228., 20896., 23227., 24074., 24921., 25768., 23954., 24828., 25702., 26576., 24681., 25582., 26483., 27384., 25408., 26336., 27264., 28192., 14770., 15328., 15886., 16444., 15240., 15816., 16392., 16968., 18740., 19368., 19996., 20624., 27087., 28002., 28917., 29832., 27814., 28756., 29698., 30640., 28541., 29510., 30479., 31448., 29268., 30264., 31260., 32256., 18234., 18880., 19526., 20172., 18704., 19368., 20032., 20696.,  9688., 10048., 10408., 10768., 13110., 13632., 14154., 14676., 13572., 14112., 14652., 15192., 14034., 14592., 15150., 15708., 14496., 15072., 15648., 16224.,  8532.,  8904.,  9276.,  9648.,  8816.,  9200.,  9584.,  9968.,  9448.,  9824., 10200., 10576., 10718., 11200., 11682., 12164., 11180., 11680., 12180., 12680., 11642., 12160., 12678., 13196., 12104., 12640., 13176., 13712.,  5028.,  5288.,  5548.,  5808.,  5312.,  5584.,  5856.,  6128.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15116., 15632., 16148., 16664., 15392., 15920., 16448., 16976., 15668., 16208., 16748., 17288., 15944., 16496., 17048., 17600., 16220., 16784., 17348., 17912., 16496., 17072., 17648., 18224., 16772., 17360., 17948., 18536., 18428., 19088., 19748., 20408., 18704., 19376., 20048., 20720., 18980., 19664., 20348., 21032., 19256., 19952., 20648., 21344., 19532., 20240., 20948., 21656., 19808., 20528., 21248., 21968., 20084., 20816., 21548., 22280., 21740., 22544., 23348., 24152., 22016., 22832., 23648., 24464., 22292., 23120., 23948., 24776., 22568., 23408., 24248., 25088., 22844., 23696., 24548., 25400., 23120., 23984., 24848., 25712., 23396., 24272., 25148., 26024., 25052., 26000., 26948., 27896., 25328., 26288., 27248., 28208., 25604., 26576., 27548., 28520., 25880., 26864., 27848., 28832., 26156., 27152., 28148., 29144., 26432., 27440., 28448., 29456., 26708., 27728., 28748., 29768., 17356., 18192., 19028., 19864., 17632., 18480., 19328., 20176., 17908., 18768., 19628., 20488., 18184., 19056., 19928., 20800., 18460., 19344., 20228., 21112., 18736., 19632., 20528., 21424., 19012., 19920., 20828., 21736., 16956., 17808., 18660., 19512., 17232., 18096., 18960., 19824., 17508., 18384., 19260., 20136., 17784., 18672., 19560., 20448., 14860., 15632., 16404., 17176., 15136., 15920., 16704., 17488., 15412., 16208., 17004., 17800., 17068., 17936., 18804., 19672., 17344., 18224., 19104., 19984., 17620., 18512., 19404., 20296., 17896., 18800., 19704., 20608., 16508., 17296., 18084., 18872., 16784., 17584., 18384., 19184., 17060., 17872., 18684., 19496.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15032., 15224., 21351., 21630., 21909., 22188., 22467., 22746., 23025., 23304., 14460., 14640., 14820., 15000., 13275., 13536., 18522., 18900., 19278., 19656., 20034., 20412., 20790., 21168., 12795., 13038., 13281., 13524., 16467., 16728., 21706., 22084., 22462., 22840., 23218., 23596., 23974., 24352., 13251., 13494., 13737., 13980., 19915., 20176., 24378., 24756., 25134., 25512., 25890., 26268., 26646., 27024., 15499., 15742., 15985., 16228., 18755., 19016., 26538., 26916., 27294., 27672., 28050., 28428., 28806., 29184., 18003., 18246., 18489., 18732.,  7020.,  7176.,  9609.,  9834., 10059., 10284., 10509., 10734., 10959., 11184.,  6600.,  6744.,  6888.,  7032.,  8460.,  8616., 10657., 10882., 11107., 11332., 11557., 11782., 12007., 12232.,  6216.,  6360.,  6504.,  6648.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14910., 14988., 15066., 15144., 15222., 15300., 15378., 15456., 15534., 15612., 15690., 15768., 15846., 15924., 16782., 16860., 16938., 17016., 17094., 17172., 17250., 17328., 17406., 17484., 17562., 17640., 17718., 17796., 18654., 18732., 18810., 18888., 18966., 19044., 19122., 19200., 19278., 19356., 19434., 19512., 19590., 19668., 20526., 20604., 20682., 20760., 20838., 20916., 20994., 21072., 21150., 21228., 21306., 21384., 21462., 21540., 22398., 22476., 22554., 22632., 22710., 22788., 22866., 22944., 23022., 23100., 23178., 23256., 23334., 23412., 20174., 20252., 20330., 20408., 20486., 20564., 20642., 20720., 17214., 17292., 17370., 17448., 17526., 17604., 18462., 18540., 18618., 18696., 18774., 18852., 18930., 19008., 19086., 19164., 19242., 19320., 19398., 19476.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13260., 13680., 13632., 14064., 18300., 18894., 18840., 19452., 19380., 20010., 19920., 20568., 20460., 21126., 21000., 21684., 21540., 22242., 22080., 22800., 13116., 13560., 13464., 13920., 13812., 14280., 14160., 14640., 12784., 13238., 13288., 13760., 17217., 17844., 17946., 18600., 18675., 19356., 19404., 20112., 20133., 20868., 20862., 21624., 21591., 22380., 22320., 23136., 12812., 13302., 13280., 13788., 13748., 14274., 14216., 14760., 17456., 18086., 17960., 18608., 20377., 21140., 21106., 21896., 21835., 22652., 22564., 23408., 23293., 24164., 24022., 24920., 24751., 25676., 25480., 26432., 10732., 11142., 11200., 11628., 11668., 12114., 12136., 12600., 22640., 23446., 23144., 23968., 22193., 23028., 22922., 23784., 23651., 24540., 24380., 25296., 25109., 26052., 25838., 26808., 26567., 27564., 27296., 28320., 13324., 13846., 13792., 14332., 14260., 14818., 14728., 15304., 16816., 17414., 17320., 17936., 23049., 23892., 23778., 24648., 24507., 25404., 25236., 26160., 25965., 26916., 26694., 27672., 27423., 28428., 28152., 29184., 16556., 17190., 17024., 17676., 17492., 18162., 17960., 18648.,  7956.,  8280.,  8256.,  8592., 10704., 11154., 11136., 11604., 11568., 12054., 12000., 12504., 12432., 12954., 12864., 13404., 13296., 13854., 13728., 14304.,  7860.,  8208.,  8136.,  8496.,  8412.,  8784.,  8688.,  9072., 10356., 10776., 10656., 11088., 11856., 12354., 12288., 12804., 12720., 13254., 13152., 13704., 13584., 14154., 14016., 14604., 14448., 15054., 14880., 15504.,  6036.,  6288.,  6312.,  6576.,  6588.,  6864.,  6864.,  7152.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15488., 16508., 15632., 16664., 15776., 16820., 15920., 16976., 16064., 17132., 16208., 17288., 16352., 17444., 16496., 17600., 16640., 17756., 16784., 17912., 16928., 18068., 17072., 18224., 17216., 18380., 17360., 18536., 18944., 20252., 19088., 20408., 19232., 20564., 19376., 20720., 19520., 20876., 19664., 21032., 19808., 21188., 19952., 21344., 20096., 21500., 20240., 21656., 20384., 21812., 20528., 21968., 20672., 22124., 20816., 22280., 22400., 23996., 22544., 24152., 22688., 24308., 22832., 24464., 22976., 24620., 23120., 24776., 23264., 24932., 23408., 25088., 23552., 25244., 23696., 25400., 23840., 25556., 23984., 25712., 24128., 25868., 24272., 26024., 25856., 27740., 26000., 27896., 26144., 28052., 26288., 28208., 26432., 28364., 26576., 28520., 26720., 28676., 26864., 28832., 27008., 28988., 27152., 29144., 27296., 29300., 27440., 29456., 27584., 29612., 27728., 29768., 18048., 19708., 18192., 19864., 18336., 20020., 18480., 20176., 18624., 20332., 18768., 20488., 18912., 20644., 19056., 20800., 19200., 20956., 19344., 21112., 19488., 21268., 19632., 21424., 19776., 21580., 19920., 21736., 17664., 19356., 17808., 19512., 17952., 19668., 18096., 19824., 18240., 19980., 18384., 20136., 18528., 20292., 18672., 20448., 15488., 17020., 15632., 17176., 15776., 17332., 15920., 17488., 16064., 17644., 16208., 17800., 17792., 19516., 17936., 19672., 18080., 19828., 18224., 19984., 18368., 20140., 18512., 20296., 18656., 20452., 18800., 20608., 17152., 18716., 17296., 18872., 17440., 19028., 17584., 19184., 17728., 19340., 17872., 19496.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14708., 15128., 15548., 15968., 15056., 15488., 15920., 16352., 20646., 21240., 21834., 22428., 21196., 21808., 22420., 23032., 21746., 22376., 23006., 23636., 22296., 22944., 23592., 24240., 22846., 23512., 24178., 24844., 23396., 24080., 24764., 25448., 23946., 24648., 25350., 26052., 24496., 25216., 25936., 26656., 14716., 15160., 15604., 16048., 15080., 15536., 15992., 16448., 15444., 15912., 16380., 16848., 15808., 16288., 16768., 17248., 11290., 11744., 12198., 12652., 11768., 12240., 12712., 13184., 16719., 17346., 17973., 18600., 17446., 18100., 18754., 19408., 18173., 18854., 19535., 20216., 18900., 19608., 20316., 21024., 19627., 20362., 21097., 21832., 20354., 21116., 21878., 22640., 21081., 21870., 22659., 23448., 21808., 22624., 23440., 24256., 12910., 13400., 13890., 14380., 13380., 13888., 14396., 14904., 13850., 14376., 14902., 15428., 14320., 14864., 15408., 15952., 16362., 16992., 17622., 18252., 16840., 17488., 18136., 18784., 22391., 23154., 23917., 24680., 23118., 23908., 24698., 25488., 23845., 24662., 25479., 26296., 24572., 25416., 26260., 27104., 25299., 26170., 27041., 27912., 26026., 26924., 27822., 28720., 26753., 27678., 28603., 29528., 27480., 28432., 29384., 30336., 10366., 10776., 11186., 11596., 10836., 11264., 11692., 12120., 11306., 11752., 12198., 12644., 11776., 12240., 12704., 13168., 22458., 23264., 24070., 24876., 22936., 23760., 24584., 25408., 21343., 22178., 23013., 23848., 22070., 22932., 23794., 24656., 22797., 23686., 24575., 25464., 23524., 24440., 25356., 26272., 24251., 25194., 26137., 27080., 24978., 25948., 26918., 27888., 25705., 26702., 27699., 28696., 26432., 27456., 28480., 29504., 12878., 13400., 13922., 14444., 13348., 13888., 14428., 14968., 13818., 14376., 14934., 15492., 14288., 14864., 15440., 16016., 15114., 15712., 16310., 16908., 15592., 16208., 16824., 17440., 22535., 23378., 24221., 25064., 23262., 24132., 25002., 25872., 23989., 24886., 25783., 26680., 24716., 25640., 26564., 27488., 25443., 26394., 27345., 28296., 26170., 27148., 28126., 29104., 26897., 27902., 28907., 29912., 27624., 28656., 29688., 30720., 16670., 17304., 17938., 18572., 17140., 17792., 18444., 19096., 17610., 18280., 18950., 19620., 18080., 18768., 19456., 20144.,  8676.,  9000.,  9324.,  9648.,  9008.,  9344.,  9680., 10016., 11358., 11808., 12258., 12708., 11820., 12288., 12756., 13224., 12282., 12768., 13254., 13740., 12744., 13248., 13752., 14256., 13206., 13728., 14250., 14772., 13668., 14208., 14748., 15288., 14130., 14688., 15246., 15804., 14592., 15168., 15744., 16320.,  7948.,  8296.,  8644.,  8992.,  8232.,  8592.,  8952.,  9312.,  8516.,  8888.,  9260.,  9632.,  8800.,  9184.,  9568.,  9952., 11332., 11752., 12172., 12592., 11664., 12096., 12528., 12960., 12590., 13088., 13586., 14084., 13052., 13568., 14084., 14600., 13514., 14048., 14582., 15116., 13976., 14528., 15080., 15632., 14438., 15008., 15578., 16148., 14900., 15488., 16076., 16664., 15362., 15968., 16574., 17180., 15824., 16448., 17072., 17696.,  6444.,  6696.,  6948.,  7200.,  6728.,  6992.,  7256.,  7520.,  7012.,  7288.,  7564.,  7840.,  7296.,  7584.,  7872.,  8160.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12036., 12544., 13052., 13560., 12312., 12832., 13352., 13872., 12588., 13120., 13652., 14184., 12864., 13408., 13952., 14496., 13140., 13696., 14252., 14808., 13416., 13984., 14552., 15120., 13692., 14272., 14852., 15432., 13968., 14560., 15152., 15744., 14244., 14848., 15452., 16056., 14520., 15136., 15752., 16368., 14796., 15424., 16052., 16680., 15072., 15712., 16352., 16992., 15348., 16000., 16652., 17304., 15624., 16288., 16952., 17616., 16996., 17664., 18332., 19000., 17272., 17952., 18632., 19312., 17548., 18240., 18932., 19624., 17824., 18528., 19232., 19936., 18100., 18816., 19532., 20248., 18376., 19104., 19832., 20560., 18652., 19392., 20132., 20872., 18928., 19680., 20432., 21184., 18052., 18688., 19324., 19960., 18328., 18976., 19624., 20272., 18604., 19264., 19924., 20584., 18880., 19552., 20224., 20896., 19156., 19840., 20524., 21208., 19432., 20128., 20824., 21520., 22468., 23296., 24124., 24952., 22744., 23584., 24424., 25264., 23020., 23872., 24724., 25576., 23296., 24160., 25024., 25888., 23572., 24448., 25324., 26200., 23848., 24736., 25624., 26512., 24124., 25024., 25924., 26824., 24400., 25312., 26224., 27136., 19940., 20736., 21532., 22328., 20216., 21024., 21832., 22640., 20492., 21312., 22132., 22952., 20768., 21600., 22432., 23264., 21044., 21888., 22732., 23576., 21320., 22176., 23032., 23888., 20132., 20992., 21852., 22712., 20408., 21280., 22152., 23024., 20684., 21568., 22452., 23336., 20960., 21856., 22752., 23648., 21236., 22144., 23052., 23960., 21512., 22432., 23352., 24272., 21788., 22720., 23652., 24584., 22064., 23008., 23952., 24896., 22340., 23296., 24252., 25208., 22616., 23584., 24552., 25520., 22892., 23872., 24852., 25832., 23168., 24160., 25152., 26144., 23444., 24448., 25452., 26456., 23720., 24736., 25752., 26768., 10884., 11520., 12156., 12792., 11160., 11808., 12456., 13104., 11436., 12096., 12756., 13416., 11712., 12384., 13056., 13728., 11988., 12672., 13356., 14040., 12264., 12960., 13656., 14352., 12540., 13248., 13956., 14664., 12816., 13536., 14256., 14976., 13092., 13824., 14556., 15288., 13368., 14112., 14856., 15600., 13644., 14400., 15156., 15912., 13920., 14688., 15456., 16224., 14196., 14976., 15756., 16536., 14472., 15264., 16056., 16848., 13156., 13824., 14492., 15160., 13432., 14112., 14792., 15472., 13708., 14400., 15092., 15784., 13984., 14688., 15392., 16096., 14260., 14976., 15692., 16408., 14536., 15264., 15992., 16720., 14812., 15552., 16292., 17032., 15088., 15840., 16592., 17344., 12036., 12544., 13052., 13560., 12312., 12832., 13352., 13872., 12588., 13120., 13652., 14184., 12864., 13408., 13952., 14496., 13140., 13696., 14252., 14808., 13416., 13984., 14552., 15120., 16452., 17152., 17852., 18552., 16728., 17440., 18152., 18864., 17004., 17728., 18452., 19176., 17280., 18016., 18752., 19488., 17556., 18304., 19052., 19800., 17832., 18592., 19352., 20112., 18108., 18880., 19652., 20424., 18384., 19168., 19952., 20736., 16996., 17664., 18332., 19000., 17272., 17952., 18632., 19312., 17548., 18240., 18932., 19624., 17824., 18528., 19232., 19936., 18100., 18816., 19532., 20248., 18376., 19104., 19832., 20560.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13488., 13680., 13872., 14064., 18615., 18894., 19173., 19452., 19731., 20010., 20289., 20568., 20847., 21126., 21405., 21684., 21963., 22242., 22521., 22800., 13380., 13560., 13740., 13920., 14100., 14280., 14460., 14640., 12977., 13238., 13499., 13760., 17466., 17844., 18222., 18600., 18978., 19356., 19734., 20112., 20490., 20868., 21246., 21624., 22002., 22380., 22758., 23136., 13059., 13302., 13545., 13788., 14031., 14274., 14517., 14760., 17825., 18086., 18347., 18608., 20762., 21140., 21518., 21896., 22274., 22652., 23030., 23408., 23786., 24164., 24542., 24920., 25298., 25676., 26054., 26432., 10899., 11142., 11385., 11628., 11871., 12114., 12357., 12600., 23185., 23446., 23707., 23968., 22650., 23028., 23406., 23784., 24162., 24540., 24918., 25296., 25674., 26052., 26430., 26808., 27186., 27564., 27942., 28320., 13603., 13846., 14089., 14332., 14575., 14818., 15061., 15304., 17153., 17414., 17675., 17936., 23514., 23892., 24270., 24648., 25026., 25404., 25782., 26160., 26538., 26916., 27294., 27672., 28050., 28428., 28806., 29184., 16947., 17190., 17433., 17676., 17919., 18162., 18405., 18648.,  8124.,  8280.,  8436.,  8592., 10929., 11154., 11379., 11604., 11829., 12054., 12279., 12504., 12729., 12954., 13179., 13404., 13629., 13854., 14079., 14304.,  8064.,  8208.,  8352.,  8496.,  8640.,  8784.,  8928.,  9072., 10620., 10776., 10932., 11088., 12129., 12354., 12579., 12804., 13029., 13254., 13479., 13704., 13929., 14154., 14379., 14604., 14829., 15054., 15279., 15504.,  6144.,  6288.,  6432.,  6576.,  6720.,  6864.,  7008.,  7152.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16430., 16508., 16586., 16664., 16742., 16820., 16898., 16976., 17054., 17132., 17210., 17288., 17366., 17444., 17522., 17600., 17678., 17756., 17834., 17912., 17990., 18068., 18146., 18224., 18302., 18380., 18458., 18536., 20174., 20252., 20330., 20408., 20486., 20564., 20642., 20720., 20798., 20876., 20954., 21032., 21110., 21188., 21266., 21344., 21422., 21500., 21578., 21656., 21734., 21812., 21890., 21968., 22046., 22124., 22202., 22280., 23918., 23996., 24074., 24152., 24230., 24308., 24386., 24464., 24542., 24620., 24698., 24776., 24854., 24932., 25010., 25088., 25166., 25244., 25322., 25400., 25478., 25556., 25634., 25712., 25790., 25868., 25946., 26024., 27662., 27740., 27818., 27896., 27974., 28052., 28130., 28208., 28286., 28364., 28442., 28520., 28598., 28676., 28754., 28832., 28910., 28988., 29066., 29144., 29222., 29300., 29378., 29456., 29534., 29612., 29690., 29768., 19630., 19708., 19786., 19864., 19942., 20020., 20098., 20176., 20254., 20332., 20410., 20488., 20566., 20644., 20722., 20800., 20878., 20956., 21034., 21112., 21190., 21268., 21346., 21424., 21502., 21580., 21658., 21736., 19278., 19356., 19434., 19512., 19590., 19668., 19746., 19824., 19902., 19980., 20058., 20136., 20214., 20292., 20370., 20448., 16942., 17020., 17098., 17176., 17254., 17332., 17410., 17488., 17566., 17644., 17722., 17800., 19438., 19516., 19594., 19672., 19750., 19828., 19906., 19984., 20062., 20140., 20218., 20296., 20374., 20452., 20530., 20608., 18638., 18716., 18794., 18872., 18950., 19028., 19106., 19184., 19262., 19340., 19418., 19496.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3684.,  3936.,  3864.,  4128.,  4044.,  4320.,  4224.,  4512.,  3484.,  3694.,  3768.,  3996.,  4052.,  4298.,  4336.,  4600.,  4620.,  4902.,  4904.,  5204.,  5188.,  5506.,  5472.,  5808.,  5756.,  6110.,  6040.,  6412.,  6324.,  6714.,  6608.,  7016.,  6892.,  7318.,  7176.,  7620.,  7460.,  7922.,  7744.,  8224.,  1532.,  1640.,  1720.,  1840.,  1908.,  2040.,  2096.,  2240.,  2284.,  2440.,  2472.,  2640.,  2660.,  2840.,  2848.,  3040.,  5352.,  5730.,  5600.,  5996.,  5848.,  6262.,  6096.,  6528.,  2217.,  2388.,  2594.,  2792.,  2971.,  3196.,  3348.,  3600.,  3725.,  4004.,  4102.,  4408.,  4479.,  4812.,  4856.,  5216.,  5233.,  5620.,  5610.,  6024.,  5987.,  6428.,  6364.,  6832.,  6741.,  7236.,  7118.,  7640.,  7495.,  8044.,  7872.,  8448.,  2308.,  2470.,  2552.,  2732.,  2796.,  2994.,  3040.,  3256.,  3284.,  3518.,  3528.,  3780.,  3772.,  4042.,  4016.,  4304.,  5064.,  5442.,  5312.,  5708.,  5560.,  5974.,  5808.,  6240.,  4569.,  4884.,  4946.,  5288.,  5323.,  5692.,  5700.,  6096.,  6077.,  6500.,  6454.,  6904.,  6831.,  7308.,  7208.,  7712.,  7585.,  8116.,  7962.,  8520.,  8339.,  8924.,  8716.,  9328.,  9093.,  9732.,  9470., 10136.,  9847., 10540., 10224., 10944.,  2084.,  2246.,  2328.,  2508.,  2572.,  2770.,  2816.,  3032.,  3060.,  3294.,  3304.,  3556.,  3548.,  3818.,  3792.,  4080.,  5352.,  5730.,  5600.,  5996.,  5848.,  6262.,  6096.,  6528.,  2217.,  2388.,  2594.,  2792.,  2971.,  3196.,  3348.,  3600.,  3725.,  4004.,  4102.,  4408.,  4479.,  4812.,  4856.,  5216.,  5233.,  5620.,  5610.,  6024.,  5987.,  6428.,  6364.,  6832.,  6741.,  7236.,  7118.,  7640.,  7495.,  8044.,  7872.,  8448.,  2308.,  2470.,  2552.,  2732.,  2796.,  2994.,  3040.,  3256.,  3284.,  3518.,  3528.,  3780.,  3772.,  4042.,  4016.,  4304.,  5064.,  5442.,  5312.,  5708.,  5560.,  5974.,  5808.,  6240.,  4569.,  4884.,  4946.,  5288.,  5323.,  5692.,  5700.,  6096.,  6077.,  6500.,  6454.,  6904.,  6831.,  7308.,  7208.,  7712.,  7585.,  8116.,  7962.,  8520.,  8339.,  8924.,  8716.,  9328.,  9093.,  9732.,  9470., 10136.,  9847., 10540., 10224., 10944.,  2084.,  2246.,  2328.,  2508.,  2572.,  2770.,  2816.,  3032.,  3060.,  3294.,  3304.,  3556.,  3548.,  3818.,  3792.,  4080.,  3708.,  3960.,  3880.,  4144.,  4052.,  4328.,  4224.,  4512.,  1520.,  1634.,  1760.,  1892.,  2000.,  2150.,  2240.,  2408.,  2480.,  2666.,  2720.,  2924.,  2960.,  3182.,  3200.,  3440.,  3440.,  3698.,  3680.,  3956.,  3920.,  4214.,  4160.,  4472.,  4400.,  4730.,  4640.,  4988.,  4880.,  5246.,  5120.,  5504.,  1236.,  1344.,  1384.,  1504.,  1532.,  1664.,  1680.,  1824.,  1828.,  1984.,  1976.,  2144.,  2124.,  2304.,  2272.,  2464.,  3516.,  3768.,  3688.,  3952.,  3860.,  4136.,  4032.,  4320.,  2800.,  3010.,  3040.,  3268.,  3280.,  3526.,  3520.,  3784.,  3760.,  4042.,  4000.,  4300.,  4240.,  4558.,  4480.,  4816.,  4720.,  5074.,  4960.,  5332.,  5200.,  5590.,  5440.,  5848.,  5680.,  6106.,  5920.,  6364.,  6160.,  6622.,  6400.,  6880.,  1428.,  1536.,  1576.,  1696.,  1724.,  1856.,  1872.,  2016.,  2020.,  2176.,  2168.,  2336.,  2316.,  2496.,  2464.,  2656.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12400., 13404., 12544., 13560., 12688., 13716., 12832., 13872., 12976., 14028., 13120., 14184., 13264., 14340., 13408., 14496., 13552., 14652., 13696., 14808., 13840., 14964., 13984., 15120., 14128., 15276., 14272., 15432., 14416., 15588., 14560., 15744., 14704., 15900., 14848., 16056., 14992., 16212., 15136., 16368., 15280., 16524., 15424., 16680., 15568., 16836., 15712., 16992., 15856., 17148., 16000., 17304., 16144., 17460., 16288., 17616., 17520., 18844., 17664., 19000., 17808., 19156., 17952., 19312., 18096., 19468., 18240., 19624., 18384., 19780., 18528., 19936., 18672., 20092., 18816., 20248., 18960., 20404., 19104., 20560., 19248., 20716., 19392., 20872., 19536., 21028., 19680., 21184., 18544., 19804., 18688., 19960., 18832., 20116., 18976., 20272., 19120., 20428., 19264., 20584., 19408., 20740., 19552., 20896., 19696., 21052., 19840., 21208., 19984., 21364., 20128., 21520., 23152., 24796., 23296., 24952., 23440., 25108., 23584., 25264., 23728., 25420., 23872., 25576., 24016., 25732., 24160., 25888., 24304., 26044., 24448., 26200., 24592., 26356., 24736., 26512., 24880., 26668., 25024., 26824., 25168., 26980., 25312., 27136., 20592., 22172., 20736., 22328., 20880., 22484., 21024., 22640., 21168., 22796., 21312., 22952., 21456., 23108., 21600., 23264., 21744., 23420., 21888., 23576., 22032., 23732., 22176., 23888., 20848., 22556., 20992., 22712., 21136., 22868., 21280., 23024., 21424., 23180., 21568., 23336., 21712., 23492., 21856., 23648., 22000., 23804., 22144., 23960., 22288., 24116., 22432., 24272., 22576., 24428., 22720., 24584., 22864., 24740., 23008., 24896., 23152., 25052., 23296., 25208., 23440., 25364., 23584., 25520., 23728., 25676., 23872., 25832., 24016., 25988., 24160., 26144., 24304., 26300., 24448., 26456., 24592., 26612., 24736., 26768., 11376., 12636., 11520., 12792., 11664., 12948., 11808., 13104., 11952., 13260., 12096., 13416., 12240., 13572., 12384., 13728., 12528., 13884., 12672., 14040., 12816., 14196., 12960., 14352., 13104., 14508., 13248., 14664., 13392., 14820., 13536., 14976., 13680., 15132., 13824., 15288., 13968., 15444., 14112., 15600., 14256., 15756., 14400., 15912., 14544., 16068., 14688., 16224., 14832., 16380., 14976., 16536., 15120., 16692., 15264., 16848., 13680., 15004., 13824., 15160., 13968., 15316., 14112., 15472., 14256., 15628., 14400., 15784., 14544., 15940., 14688., 16096., 14832., 16252., 14976., 16408., 15120., 16564., 15264., 16720., 15408., 16876., 15552., 17032., 15696., 17188., 15840., 17344., 12400., 13404., 12544., 13560., 12688., 13716., 12832., 13872., 12976., 14028., 13120., 14184., 13264., 14340., 13408., 14496., 13552., 14652., 13696., 14808., 13840., 14964., 13984., 15120., 17008., 18396., 17152., 18552., 17296., 18708., 17440., 18864., 17584., 19020., 17728., 19176., 17872., 19332., 18016., 19488., 18160., 19644., 18304., 19800., 18448., 19956., 18592., 20112., 18736., 20268., 18880., 20424., 19024., 20580., 19168., 20736., 17520., 18844., 17664., 19000., 17808., 19156., 17952., 19312., 18096., 19468., 18240., 19624., 18384., 19780., 18528., 19936., 18672., 20092., 18816., 20248., 18960., 20404., 19104., 20560.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4012.,  4264.,  4516.,  4768.,  4200.,  4464.,  4728.,  4992.,  4388.,  4664.,  4940.,  5216.,  4576.,  4864.,  5152.,  5440.,  3430.,  3640.,  3850.,  4060.,  3724.,  3952.,  4180.,  4408.,  4018.,  4264.,  4510.,  4756.,  4312.,  4576.,  4840.,  5104.,  4606.,  4888.,  5170.,  5452.,  4900.,  5200.,  5500.,  5800.,  5194.,  5512.,  5830.,  6148.,  5488.,  5824.,  6160.,  6496.,  5782.,  6136.,  6490.,  6844.,  6076.,  6448.,  6820.,  7192.,  6370.,  6760.,  7150.,  7540.,  6664.,  7072.,  7480.,  7888.,  6958.,  7384.,  7810.,  8236.,  7252.,  7696.,  8140.,  8584.,  7546.,  8008.,  8470.,  8932.,  7840.,  8320.,  8800.,  9280.,  1772.,  1880.,  1988.,  2096.,  1976.,  2096.,  2216.,  2336.,  2180.,  2312.,  2444.,  2576.,  2384.,  2528.,  2672.,  2816.,  2588.,  2744.,  2900.,  3056.,  2792.,  2960.,  3128.,  3296.,  2996.,  3176.,  3356.,  3536.,  3200.,  3392.,  3584.,  3776.,  5366.,  5744.,  6122.,  6500.,  5620.,  6016.,  6412.,  6808.,  5874.,  6288.,  6702.,  7116.,  6128.,  6560.,  6992.,  7424.,  2375.,  2546.,  2717.,  2888.,  2750.,  2948.,  3146.,  3344.,  3125.,  3350.,  3575.,  3800.,  3500.,  3752.,  4004.,  4256.,  3875.,  4154.,  4433.,  4712.,  4250.,  4556.,  4862.,  5168.,  4625.,  4958.,  5291.,  5624.,  5000.,  5360.,  5720.,  6080.,  5375.,  5762.,  6149.,  6536.,  5750.,  6164.,  6578.,  6992.,  6125.,  6566.,  7007.,  7448.,  6500.,  6968.,  7436.,  7904.,  6875.,  7370.,  7865.,  8360.,  7250.,  7772.,  8294.,  8816.,  7625.,  8174.,  8723.,  9272.,  8000.,  8576.,  9152.,  9728.,  2182.,  2344.,  2506.,  2668.,  2428.,  2608.,  2788.,  2968.,  2674.,  2872.,  3070.,  3268.,  2920.,  3136.,  3352.,  3568.,  3166.,  3400.,  3634.,  3868.,  3412.,  3664.,  3916.,  4168.,  3658.,  3928.,  4198.,  4468.,  3904.,  4192.,  4480.,  4768.,  5302.,  5680.,  6058.,  6436.,  5556.,  5952.,  6348.,  6744.,  5810.,  6224.,  6638.,  7052.,  6064.,  6496.,  6928.,  7360.,  4375.,  4690.,  5005.,  5320.,  4750.,  5092.,  5434.,  5776.,  5125.,  5494.,  5863.,  6232.,  5500.,  5896.,  6292.,  6688.,  5875.,  6298.,  6721.,  7144.,  6250.,  6700.,  7150.,  7600.,  6625.,  7102.,  7579.,  8056.,  7000.,  7504.,  8008.,  8512.,  7375.,  7906.,  8437.,  8968.,  7750.,  8308.,  8866.,  9424.,  8125.,  8710.,  9295.,  9880.,  8500.,  9112.,  9724., 10336.,  8875.,  9514., 10153., 10792.,  9250.,  9916., 10582., 11248.,  9625., 10318., 11011., 11704., 10000., 10720., 11440., 12160.,  2246.,  2408.,  2570.,  2732.,  2492.,  2672.,  2852.,  3032.,  2738.,  2936.,  3134.,  3332.,  2984.,  3200.,  3416.,  3632.,  3230.,  3464.,  3698.,  3932.,  3476.,  3728.,  3980.,  4232.,  3722.,  3992.,  4262.,  4532.,  3968.,  4256.,  4544.,  4832.,  5366.,  5744.,  6122.,  6500.,  5620.,  6016.,  6412.,  6808.,  5874.,  6288.,  6702.,  7116.,  6128.,  6560.,  6992.,  7424.,  2375.,  2546.,  2717.,  2888.,  2750.,  2948.,  3146.,  3344.,  3125.,  3350.,  3575.,  3800.,  3500.,  3752.,  4004.,  4256.,  3875.,  4154.,  4433.,  4712.,  4250.,  4556.,  4862.,  5168.,  4625.,  4958.,  5291.,  5624.,  5000.,  5360.,  5720.,  6080.,  5375.,  5762.,  6149.,  6536.,  5750.,  6164.,  6578.,  6992.,  6125.,  6566.,  7007.,  7448.,  6500.,  6968.,  7436.,  7904.,  6875.,  7370.,  7865.,  8360.,  7250.,  7772.,  8294.,  8816.,  7625.,  8174.,  8723.,  9272.,  8000.,  8576.,  9152.,  9728.,  2182.,  2344.,  2506.,  2668.,  2428.,  2608.,  2788.,  2968.,  2674.,  2872.,  3070.,  3268.,  2920.,  3136.,  3352.,  3568.,  3166.,  3400.,  3634.,  3868.,  3412.,  3664.,  3916.,  4168.,  3658.,  3928.,  4198.,  4468.,  3904.,  4192.,  4480.,  4768.,  5302.,  5680.,  6058.,  6436.,  5556.,  5952.,  6348.,  6744.,  5810.,  6224.,  6638.,  7052.,  6064.,  6496.,  6928.,  7360.,  4375.,  4690.,  5005.,  5320.,  4750.,  5092.,  5434.,  5776.,  5125.,  5494.,  5863.,  6232.,  5500.,  5896.,  6292.,  6688.,  5875.,  6298.,  6721.,  7144.,  6250.,  6700.,  7150.,  7600.,  6625.,  7102.,  7579.,  8056.,  7000.,  7504.,  8008.,  8512.,  7375.,  7906.,  8437.,  8968.,  7750.,  8308.,  8866.,  9424.,  8125.,  8710.,  9295.,  9880.,  8500.,  9112.,  9724., 10336.,  8875.,  9514., 10153., 10792.,  9250.,  9916., 10582., 11248.,  9625., 10318., 11011., 11704., 10000., 10720., 11440., 12160.,  2246.,  2408.,  2570.,  2732.,  2492.,  2672.,  2852.,  3032.,  2738.,  2936.,  3134.,  3332.,  2984.,  3200.,  3416.,  3632.,  3230.,  3464.,  3698.,  3932.,  3476.,  3728.,  3980.,  4232.,  3722.,  3992.,  4262.,  4532.,  3968.,  4256.,  4544.,  4832.,  4476.,  4728.,  4980.,  5232.,  4680.,  4944.,  5208.,  5472.,  4884.,  5160.,  5436.,  5712.,  5088.,  5376.,  5664.,  5952.,  1710.,  1824.,  1938.,  2052.,  1980.,  2112.,  2244.,  2376.,  2250.,  2400.,  2550.,  2700.,  2520.,  2688.,  2856.,  3024.,  2790.,  2976.,  3162.,  3348.,  3060.,  3264.,  3468.,  3672.,  3330.,  3552.,  3774.,  3996.,  3600.,  3840.,  4080.,  4320.,  3870.,  4128.,  4386.,  4644.,  4140.,  4416.,  4692.,  4968.,  4410.,  4704.,  4998.,  5292.,  4680.,  4992.,  5304.,  5616.,  4950.,  5280.,  5610.,  5940.,  5220.,  5568.,  5916.,  6264.,  5490.,  5856.,  6222.,  6588.,  5760.,  6144.,  6528.,  6912.,  1212.,  1320.,  1428.,  1536.,  1368.,  1488.,  1608.,  1728.,  1524.,  1656.,  1788.,  1920.,  1680.,  1824.,  1968.,  2112.,  1836.,  1992.,  2148.,  2304.,  1992.,  2160.,  2328.,  2496.,  2148.,  2328.,  2508.,  2688.,  2304.,  2496.,  2688.,  2880.,  4092.,  4344.,  4596.,  4848.,  4296.,  4560.,  4824.,  5088.,  4500.,  4776.,  5052.,  5328.,  4704.,  4992.,  5280.,  5568.,  3150.,  3360.,  3570.,  3780.,  3420.,  3648.,  3876.,  4104.,  3690.,  3936.,  4182.,  4428.,  3960.,  4224.,  4488.,  4752.,  4230.,  4512.,  4794.,  5076.,  4500.,  4800.,  5100.,  5400.,  4770.,  5088.,  5406.,  5724.,  5040.,  5376.,  5712.,  6048.,  5310.,  5664.,  6018.,  6372.,  5580.,  5952.,  6324.,  6696.,  5850.,  6240.,  6630.,  7020.,  6120.,  6528.,  6936.,  7344.,  6390.,  6816.,  7242.,  7668.,  6660.,  7104.,  7548.,  7992.,  6930.,  7392.,  7854.,  8316.,  7200.,  7680.,  8160.,  8640.,  1596.,  1704.,  1812.,  1920.,  1752.,  1872.,  1992.,  2112.,  1908.,  2040.,  2172.,  2304.,  2064.,  2208.,  2352.,  2496.,  2220.,  2376.,  2532.,  2688.,  2376.,  2544.,  2712.,  2880.,  2532.,  2712.,  2892.,  3072.,  2688.,  2880.,  3072.,  3264.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12020., 12512., 13004., 13496., 12296., 12800., 13304., 13808., 12572., 13088., 13604., 14120., 12848., 13376., 13904., 14432., 13124., 13664., 14204., 14744., 13400., 13952., 14504., 15056., 13676., 14240., 14804., 15368., 13952., 14528., 15104., 15680., 14228., 14816., 15404., 15992., 14504., 15104., 15704., 16304., 14780., 15392., 16004., 16616., 15056., 15680., 16304., 16928., 15332., 15968., 16604., 17240., 15608., 16256., 16904., 17552., 15884., 16544., 17204., 17864., 16160., 16832., 17504., 18176., 16436., 17120., 17804., 18488., 16712., 17408., 18104., 18800., 16988., 17696., 18404., 19112., 17264., 17984., 18704., 19424., 17540., 18272., 19004., 19736., 17816., 18560., 19304., 20048., 18092., 18848., 19604., 20360., 18368., 19136., 19904., 20672., 18644., 19424., 20204., 20984., 18920., 19712., 20504., 21296., 19196., 20000., 20804., 21608., 19472., 20288., 21104., 21920., 15156., 15840., 16524., 17208., 15432., 16128., 16824., 17520., 15708., 16416., 17124., 17832., 15984., 16704., 17424., 18144., 16260., 16992., 17724., 18456., 16536., 17280., 18024., 18768., 16812., 17568., 18324., 19080., 17088., 17856., 18624., 19392., 17364., 18144., 18924., 19704., 17640., 18432., 19224., 20016., 17916., 18720., 19524., 20328., 18192., 19008., 19824., 20640., 18468., 19296., 20124., 20952., 18744., 19584., 20424., 21264., 19020., 19872., 20724., 21576., 19296., 20160., 21024., 21888., 10996., 11488., 11980., 12472., 11272., 11776., 12280., 12784., 11548., 12064., 12580., 13096., 11824., 12352., 12880., 13408., 12100., 12640., 13180., 13720., 12376., 12928., 13480., 14032., 12652., 13216., 13780., 14344., 12928., 13504., 14080., 14656., 13204., 13792., 14380., 14968., 13480., 14080., 14680., 15280., 13756., 14368., 14980., 15592., 14032., 14656., 15280., 15904., 19828., 20704., 21580., 22456., 20104., 20992., 21880., 22768., 20380., 21280., 22180., 23080., 20656., 21568., 22480., 23392., 20932., 21856., 22780., 23704., 21208., 22144., 23080., 24016., 21484., 22432., 23380., 24328., 21760., 22720., 23680., 24640., 22036., 23008., 23980., 24952., 22312., 23296., 24280., 25264., 22588., 23584., 24580., 25576., 22864., 23872., 24880., 25888., 23140., 24160., 25180., 26200., 23416., 24448., 25480., 26512., 23692., 24736., 25780., 26824., 23968., 25024., 26080., 27136., 15156., 15840., 16524., 17208., 15432., 16128., 16824., 17520., 15708., 16416., 17124., 17832., 15984., 16704., 17424., 18144., 16260., 16992., 17724., 18456., 16536., 17280., 18024., 18768., 16812., 17568., 18324., 19080., 17088., 17856., 18624., 19392., 17364., 18144., 18924., 19704., 17640., 18432., 19224., 20016., 17916., 18720., 19524., 20328., 18192., 19008., 19824., 20640., 16436., 17120., 17804., 18488., 16712., 17408., 18104., 18800., 16988., 17696., 18404., 19112., 17264., 17984., 18704., 19424., 17540., 18272., 19004., 19736., 17816., 18560., 19304., 20048., 18092., 18848., 19604., 20360., 18368., 19136., 19904., 20672., 18644., 19424., 20204., 20984., 18920., 19712., 20504., 21296., 19196., 20000., 20804., 21608., 19472., 20288., 21104., 21920., 19748., 20576., 21404., 22232., 20024., 20864., 21704., 22544., 20300., 21152., 22004., 22856., 20576., 21440., 22304., 23168., 20852., 21728., 22604., 23480., 21128., 22016., 22904., 23792., 21404., 22304., 23204., 24104., 21680., 22592., 23504., 24416., 21956., 22880., 23804., 24728., 22232., 23168., 24104., 25040., 22508., 23456., 24404., 25352., 22784., 23744., 24704., 25664., 23060., 24032., 25004., 25976., 23336., 24320., 25304., 26288., 23612., 24608., 25604., 26600., 23888., 24896., 25904., 26912., 10996., 11488., 11980., 12472., 11272., 11776., 12280., 12784., 11548., 12064., 12580., 13096., 11824., 12352., 12880., 13408., 12100., 12640., 13180., 13720., 12376., 12928., 13480., 14032., 12652., 13216., 13780., 14344., 12928., 13504., 14080., 14656., 13204., 13792., 14380., 14968., 13480., 14080., 14680., 15280., 13756., 14368., 14980., 15592., 14032., 14656., 15280., 15904., 14308., 14944., 15580., 16216., 14584., 15232., 15880., 16528., 14860., 15520., 16180., 16840., 15136., 15808., 16480., 17152., 15412., 16096., 16780., 17464., 15688., 16384., 17080., 17776., 15964., 16672., 17380., 18088., 16240., 16960., 17680., 18400., 16516., 17248., 17980., 18712., 16792., 17536., 18280., 19024., 17068., 17824., 18580., 19336., 17344., 18112., 18880., 19648., 17620., 18400., 19180., 19960., 17896., 18688., 19480., 20272., 18172., 18976., 19780., 20584., 18448., 19264., 20080., 20896., 15156., 15840., 16524., 17208., 15432., 16128., 16824., 17520., 15708., 16416., 17124., 17832., 15984., 16704., 17424., 18144., 16260., 16992., 17724., 18456., 16536., 17280., 18024., 18768., 16812., 17568., 18324., 19080., 17088., 17856., 18624., 19392., 17364., 18144., 18924., 19704., 17640., 18432., 19224., 20016., 17916., 18720., 19524., 20328., 18192., 19008., 19824., 20640., 18468., 19296., 20124., 20952., 18744., 19584., 20424., 21264., 19020., 19872., 20724., 21576., 19296., 20160., 21024., 21888., 12020., 12512., 13004., 13496., 12296., 12800., 13304., 13808., 12572., 13088., 13604., 14120., 12848., 13376., 13904., 14432., 13124., 13664., 14204., 14744., 13400., 13952., 14504., 15056., 13676., 14240., 14804., 15368., 13952., 14528., 15104., 15680., 14228., 14816., 15404., 15992., 14504., 15104., 15704., 16304., 14780., 15392., 16004., 16616., 15056., 15680., 16304., 16928., 20852., 21728., 22604., 23480., 21128., 22016., 22904., 23792., 21404., 22304., 23204., 24104., 21680., 22592., 23504., 24416., 21956., 22880., 23804., 24728., 22232., 23168., 24104., 25040., 22508., 23456., 24404., 25352., 22784., 23744., 24704., 25664., 23060., 24032., 25004., 25976., 23336., 24320., 25304., 26288., 23612., 24608., 25604., 26600., 23888., 24896., 25904., 26912., 24164., 25184., 26204., 27224., 24440., 25472., 26504., 27536., 24716., 25760., 26804., 27848., 24992., 26048., 27104., 28160., 15156., 15840., 16524., 17208., 15432., 16128., 16824., 17520., 15708., 16416., 17124., 17832., 15984., 16704., 17424., 18144., 16260., 16992., 17724., 18456., 16536., 17280., 18024., 18768., 16812., 17568., 18324., 19080., 17088., 17856., 18624., 19392., 17364., 18144., 18924., 19704., 17640., 18432., 19224., 20016., 17916., 18720., 19524., 20328., 18192., 19008., 19824., 20640.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13026., 13404., 18260., 18752., 12392., 12752., 13112., 13231., 13744., 16874., 17540., 12434., 12920., 13022., 16445., 16958., 22358., 23024., 15654., 16140., 16626., 19275., 19788., 23234., 23900., 18362., 18848., 16774., 17369., 17882., 23726., 24392., 16462., 16948., 17434.,  6902.,  7208.,  8732.,  9128.,  6336.,  6624.,  6784.,  9522.,  9828., 12740., 13136.,  9024.,  9312.,  9600.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21246., 21324., 21402., 21480., 21558., 21636., 21714., 22338., 22416., 22494., 22572., 22650., 22728., 22806., 23430., 23508., 23586., 23664., 23742., 23820., 23898., 24522., 24600., 24678., 24756., 24834., 24912., 24990., 25614., 25692., 25770., 25848., 25926., 26004., 26082., 26706., 26784., 26862., 26940., 27018., 27096., 27174., 27798., 27876., 27954., 28032., 28110., 28188., 28266.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3690.,  4004.,  3948.,  4280.,  5168.,  5608.,  5488.,  5952.,  3062.,  3376.,  3284.,  3616.,  3506.,  3856.,  7425.,  7838.,  7848.,  8288.,  8920.,  9428.,  9448.,  9992.,  6599.,  7012.,  6968.,  7408.,  6633.,  7036.,  5795.,  6202.,  6218.,  6652.,  9016.,  9644.,  9544., 10208.,  4981.,  5388.,  5350.,  5784.,  5719.,  6180.,  6981.,  7446.,  7404.,  7896.,  7736.,  8260.,  8264.,  8824.,  6051.,  6516.,  6420.,  6912.,  5861.,  6220.,  7303.,  7730.,  7726.,  8180., 10104., 10716., 10632., 11280.,  6449.,  6876.,  6818.,  7272.,  7187.,  7668.,  3638.,  3916.,  3944.,  4240.,  4336.,  4664.,  4720.,  5072.,  3082.,  3360.,  3352.,  3648.,  3430.,  3680.,  5426.,  5700.,  5732.,  6024.,  7472.,  7880.,  7856.,  8288.,  4878.,  5152.,  5148.,  5440.,  5418.,  5728.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19624., 20988., 19768., 21144., 19912., 21300., 20056., 21456., 20200., 21612., 20344., 21768., 20488., 21924., 21640., 23172., 21784., 23328., 21928., 23484., 22072., 23640., 22216., 23796., 22360., 23952., 22504., 24108., 19816., 21260., 19960., 21416., 20104., 21572., 20248., 21728., 17064., 18300., 17208., 18456., 17352., 18612., 18504., 19860., 18648., 20016., 18792., 20172., 18936., 20328., 19080., 20484., 19224., 20640., 19368., 20796., 20520., 22044., 20664., 22200., 20808., 22356., 20952., 22512., 21096., 22668., 21240., 22824., 21384., 22980., 22536., 24228., 22680., 24384., 22824., 24540., 22968., 24696., 23112., 24852., 23256., 25008., 23400., 25164., 21736., 23340., 21880., 23496., 22024., 23652., 22168., 23808., 20008., 21404., 20152., 21560., 20296., 21716.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5082.,  5396.,  5710.,  6024.,  5388.,  5720.,  6052.,  6384.,  6568.,  7008.,  7448.,  7888.,  6928.,  7392.,  7856.,  8320.,  3826.,  4140.,  4454.,  4768.,  4060.,  4392.,  4724.,  5056.,  4294.,  4644.,  4994.,  5344.,  7141.,  7554.,  7967.,  8380.,  7576.,  8016.,  8456.,  8896.,  7604.,  8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  5489.,  5902.,  6315.,  6728.,  5816.,  6256.,  6696.,  7136.,  4799.,  5202.,  5605.,  6008.,  6703.,  7110.,  7517.,  7924.,  7138.,  7572.,  8006.,  8440.,  8700.,  9328.,  9956., 10584.,  9208.,  9872., 10536., 11200.,  5075.,  5482.,  5889.,  6296.,  5402.,  5836.,  6270.,  6704.,  5729.,  6190.,  6651.,  7112.,  7737.,  8202.,  8667.,  9132.,  8172.,  8664.,  9156.,  9648.,  7268.,  7792.,  8316.,  8840.,  7776.,  8336.,  8896.,  9456.,  5877.,  6342.,  6807.,  7272.,  6204.,  6696.,  7188.,  7680.,  4835.,  5194.,  5553.,  5912.,  7139.,  7566.,  7993.,  8420.,  7574.,  8028.,  8482.,  8936.,  8844.,  9456., 10068., 10680.,  9352., 10000., 10648., 11296.,  5431.,  5858.,  6285.,  6712.,  5758.,  6212.,  6666.,  7120.,  6085.,  6566.,  7047.,  7528.,  4214.,  4492.,  4770.,  5048.,  4520.,  4816.,  5112.,  5408.,  4632.,  4960.,  5288.,  5616.,  4992.,  5344.,  5696.,  6048.,  3102.,  3380.,  3658.,  3936.,  3336.,  3632.,  3928.,  4224.,  3250.,  3500.,  3750.,  4000.,  4786.,  5060.,  5334.,  5608.,  5092.,  5384.,  5676.,  5968.,  6472.,  6880.,  7288.,  7696.,  6832.,  7264.,  7696.,  8128.,  3690.,  3964.,  4238.,  4512.,  3924.,  4216.,  4508.,  4800.,  4158.,  4468.,  4778.,  5088.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15100., 15696., 16292., 16888., 15376., 15984., 16592., 17200., 15652., 16272., 16892., 17512., 15928., 16560., 17192., 17824., 16204., 16848., 17492., 18136., 16480., 17136., 17792., 18448., 16756., 17424., 18092., 18760., 18964., 19728., 20492., 21256., 19240., 20016., 20792., 21568., 19516., 20304., 21092., 21880., 19792., 20592., 21392., 22192., 20068., 20880., 21692., 22504., 20344., 21168., 21992., 22816., 20620., 21456., 22292., 23128., 19116., 19920., 20724., 21528., 19392., 20208., 21024., 21840., 19668., 20496., 21324., 22152., 19944., 20784., 21624., 22464., 17020., 17744., 18468., 19192., 17296., 18032., 18768., 19504., 17572., 18320., 19068., 19816., 19780., 20624., 21468., 22312., 20056., 20912., 21768., 22624., 15596., 16336., 17076., 17816., 15872., 16624., 17376., 18128., 16148., 16912., 17676., 18440., 16424., 17200., 17976., 18752., 12476., 13136., 13796., 14456., 14684., 15440., 16196., 16952., 14960., 15728., 16496., 17264., 15236., 16016., 16796., 17576., 15512., 16304., 17096., 17888., 15788., 16592., 17396., 18200., 16064., 16880., 17696., 18512., 16340., 17168., 17996., 18824., 16884., 17680., 18476., 19272., 17160., 17968., 18776., 19584., 16284., 16976., 17668., 18360., 16560., 17264., 17968., 18672., 16836., 17552., 18268., 18984., 17112., 17840., 18568., 19296., 17388., 18128., 18868., 19608., 16908., 17616., 18324., 19032., 17184., 17904., 18624., 19344., 17460., 18192., 18924., 19656., 17736., 18480., 19224., 19968., 15836., 16464., 17092., 17720., 16112., 16752., 17392., 18032., 16388., 17040., 17692., 18344.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13578., 13956., 14334., 14712., 19068., 19560., 20052., 20544., 12968., 13328., 13688., 14048., 14408., 14768., 14941., 15454., 15967., 16480., 18234., 18900., 19566., 20232., 14142., 14628., 15114., 15600., 14294., 14780., 15225., 15738., 16251., 16764., 23058., 23724., 24390., 25056., 14438., 14924., 15410., 15896., 16382., 16868., 16341., 16854., 17367., 17880., 18090., 18756., 19422., 20088., 15438., 15924., 16410., 16896., 12198., 12684., 16497., 17010., 17523., 18036., 23106., 23772., 24438., 25104., 15670., 16156., 16642., 17128., 17614., 18100.,  7674.,  7980.,  8286.,  8592.,  9004.,  9400.,  9796., 10192.,  7136.,  7424.,  7712.,  8000.,  7008.,  7296., 10418., 10724., 11030., 11336., 14524., 14920., 15316., 15712.,  9888., 10176., 10464., 10752., 11040., 11328.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20910., 20988., 21066., 21144., 21222., 21300., 21378., 21456., 21534., 21612., 21690., 21768., 21846., 21924., 23094., 23172., 23250., 23328., 23406., 23484., 23562., 23640., 23718., 23796., 23874., 23952., 24030., 24108., 21182., 21260., 21338., 21416., 21494., 21572., 21650., 21728., 18222., 18300., 18378., 18456., 18534., 18612., 19782., 19860., 19938., 20016., 20094., 20172., 20250., 20328., 20406., 20484., 20562., 20640., 20718., 20796., 21966., 22044., 22122., 22200., 22278., 22356., 22434., 22512., 22590., 22668., 22746., 22824., 22902., 22980., 24150., 24228., 24306., 24384., 24462., 24540., 24618., 24696., 24774., 24852., 24930., 25008., 25086., 25164., 23262., 23340., 23418., 23496., 23574., 23652., 23730., 23808., 21326., 21404., 21482., 21560., 21638., 21716.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3506.,  3764.,  3764.,  4040.,  4022.,  4316.,  4280.,  4592.,  5536.,  5944.,  5856.,  6288.,  6176.,  6632.,  6496.,  6976.,  2990.,  3248.,  3212.,  3488.,  3434.,  3728.,  3656.,  3968.,  3878.,  4208.,  4100.,  4448.,  6875.,  7290.,  7298.,  7740.,  7721.,  8190.,  8144.,  8640.,  7072.,  7540.,  7600.,  8104.,  8128.,  8668.,  8656.,  9232.,  6045.,  6460.,  6414.,  6856.,  6783.,  7252.,  7152.,  7648.,  5089.,  5484.,  5458.,  5880.,  5183.,  5490.,  5606.,  5940.,  6029.,  6390.,  6452.,  6840.,  8832.,  9444.,  9360., 10008.,  9888., 10572., 10416., 11136.,  4569.,  4876.,  4938.,  5272.,  5307.,  5668.,  5676.,  6064.,  6045.,  6460.,  6414.,  6856.,  7939.,  8426.,  8362.,  8876.,  8785.,  9326.,  9208.,  9776.,  6720.,  7188.,  7248.,  7752.,  7776.,  8316.,  8304.,  8880.,  6965.,  7452.,  7334.,  7848.,  7703.,  8244.,  8072.,  8640.,  4569.,  4876.,  4938.,  5272.,  6247.,  6626.,  6670.,  7076.,  7093.,  7526.,  7516.,  7976.,  9056.,  9668.,  9584., 10232., 10112., 10796., 10640., 11360.,  5489.,  5868.,  5858.,  6264.,  6227.,  6660.,  6596.,  7056.,  6965.,  7452.,  7334.,  7848.,  4474.,  4756.,  4780.,  5080.,  5086.,  5404.,  5392.,  5728.,  5088.,  5400.,  5472.,  5808.,  5856.,  6216.,  6240.,  6624.,  3910.,  4192.,  4180.,  4480.,  4450.,  4768.,  4720.,  5056.,  4190.,  4448.,  4460.,  4736.,  3250.,  3460.,  3556.,  3784.,  3862.,  4108.,  4168.,  4432.,  6432.,  6840.,  6816.,  7248.,  7200.,  7656.,  7584.,  8064.,  2830.,  3040.,  3100.,  3328.,  3370.,  3616.,  3640.,  3904.,  3910.,  4192.,  4180.,  4480.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15552., 16732., 15696., 16888., 15840., 17044., 15984., 17200., 16128., 17356., 16272., 17512., 16416., 17668., 16560., 17824., 16704., 17980., 16848., 18136., 16992., 18292., 17136., 18448., 17280., 18604., 17424., 18760., 19584., 21100., 19728., 21256., 19872., 21412., 20016., 21568., 20160., 21724., 20304., 21880., 20448., 22036., 20592., 22192., 20736., 22348., 20880., 22504., 21024., 22660., 21168., 22816., 21312., 22972., 21456., 23128., 19776., 21372., 19920., 21528., 20064., 21684., 20208., 21840., 20352., 21996., 20496., 22152., 20640., 22308., 20784., 22464., 17600., 19036., 17744., 19192., 17888., 19348., 18032., 19504., 18176., 19660., 18320., 19816., 20480., 22156., 20624., 22312., 20768., 22468., 20912., 22624., 16192., 17660., 16336., 17816., 16480., 17972., 16624., 18128., 16768., 18284., 16912., 18440., 17056., 18596., 17200., 18752., 12992., 14300., 13136., 14456., 15296., 16796., 15440., 16952., 15584., 17108., 15728., 17264., 15872., 17420., 16016., 17576., 16160., 17732., 16304., 17888., 16448., 18044., 16592., 18200., 16736., 18356., 16880., 18512., 17024., 18668., 17168., 18824., 17536., 19116., 17680., 19272., 17824., 19428., 17968., 19584., 16832., 18204., 16976., 18360., 17120., 18516., 17264., 18672., 17408., 18828., 17552., 18984., 17696., 19140., 17840., 19296., 17984., 19452., 18128., 19608., 17472., 18876., 17616., 19032., 17760., 19188., 17904., 19344., 18048., 19500., 18192., 19656., 18336., 19812., 18480., 19968., 16320., 17564., 16464., 17720., 16608., 17876., 16752., 18032., 16896., 18188., 17040., 18344.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4002.,  4260.,  4518.,  4776.,  4308.,  4584.,  4860.,  5136.,  4614.,  4908.,  5202.,  5496.,  4920.,  5232.,  5544.,  5856.,  6312.,  6720.,  7128.,  7536.,  6672.,  7104.,  7536.,  7968.,  7032.,  7488.,  7944.,  8400.,  7392.,  7872.,  8352.,  8832.,  2970.,  3228.,  3486.,  3744.,  3204.,  3480.,  3756.,  4032.,  3438.,  3732.,  4026.,  4320.,  3672.,  3984.,  4296.,  4608.,  3906.,  4236.,  4566.,  4896.,  4140.,  4488.,  4836.,  5184.,  7319.,  7734.,  8149.,  8564.,  7754.,  8196.,  8638.,  9080.,  8189.,  8658.,  9127.,  9596.,  8624.,  9120.,  9616., 10112.,  7020.,  7488.,  7956.,  8424.,  7528.,  8032.,  8536.,  9040.,  8036.,  8576.,  9116.,  9656.,  8544.,  9120.,  9696., 10272.,  5659.,  6074.,  6489.,  6904.,  5986.,  6428.,  6870.,  7312.,  6313.,  6782.,  7251.,  7720.,  6640.,  7136.,  7632.,  8128.,  4279.,  4674.,  5069.,  5464.,  4606.,  5028.,  5450.,  5872.,  5579.,  5886.,  6193.,  6500.,  6014.,  6348.,  6682.,  7016.,  6449.,  6810.,  7171.,  7532.,  6884.,  7272.,  7660.,  8048.,  8348.,  8960.,  9572., 10184.,  8856.,  9504., 10152., 10800.,  9364., 10048., 10732., 11416.,  9872., 10592., 11312., 12032.,  4351.,  4658.,  4965.,  5272.,  4678.,  5012.,  5346.,  5680.,  5005.,  5366.,  5727.,  6088.,  5332.,  5720.,  6108.,  6496.,  5659.,  6074.,  6489.,  6904.,  5986.,  6428.,  6870.,  7312.,  8351.,  8838.,  9325.,  9812.,  8786.,  9300.,  9814., 10328.,  9221.,  9762., 10303., 10844.,  9656., 10224., 10792., 11360.,  6316.,  6784.,  7252.,  7720.,  6824.,  7328.,  7832.,  8336.,  7332.,  7872.,  8412.,  8952.,  7840.,  8416.,  8992.,  9568.,  6403.,  6890.,  7377.,  7864.,  6730.,  7244.,  7758.,  8272.,  7057.,  7598.,  8139.,  8680.,  7384.,  7952.,  8520.,  9088.,  4351.,  4658.,  4965.,  5272.,  4678.,  5012.,  5346.,  5680.,  6611.,  6990.,  7369.,  7748.,  7046.,  7452.,  7858.,  8264.,  7481.,  7914.,  8347.,  8780.,  7916.,  8376.,  8836.,  9296.,  8796.,  9408., 10020., 10632.,  9304.,  9952., 10600., 11248.,  9812., 10496., 11180., 11864., 10320., 11040., 11760., 12480.,  5095.,  5474.,  5853.,  6232.,  5422.,  5828.,  6234.,  6640.,  5749.,  6182.,  6615.,  7048.,  6076.,  6536.,  6996.,  7456.,  6403.,  6890.,  7377.,  7864.,  6730.,  7244.,  7758.,  8272.,  4410.,  4692.,  4974.,  5256.,  4716.,  5016.,  5316.,  5616.,  5022.,  5340.,  5658.,  5976.,  5328.,  5664.,  6000.,  6336.,  4872.,  5184.,  5496.,  5808.,  5232.,  5568.,  5904.,  6240.,  5592.,  5952.,  6312.,  6672.,  5952.,  6336.,  6720.,  7104.,  3282.,  3564.,  3846.,  4128.,  3516.,  3816.,  4116.,  4416.,  3750.,  4068.,  4386.,  4704.,  3984.,  4320.,  4656.,  4992.,  3738.,  3996.,  4254.,  4512.,  3972.,  4248.,  4524.,  4800.,  3186.,  3396.,  3606.,  3816.,  3492.,  3720.,  3948.,  4176.,  3798.,  4044.,  4290.,  4536.,  4104.,  4368.,  4632.,  4896.,  5928.,  6336.,  6744.,  7152.,  6288.,  6720.,  7152.,  7584.,  6648.,  7104.,  7560.,  8016.,  7008.,  7488.,  7968.,  8448.,  2346.,  2556.,  2766.,  2976.,  2580.,  2808.,  3036.,  3264.,  2814.,  3060.,  3306.,  3552.,  3048.,  3312.,  3576.,  3840.,  3282.,  3564.,  3846.,  4128.,  3516.,  3816.,  4116.,  4416.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14052., 14720., 15388., 16056., 14328., 15008., 15688., 16368., 14604., 15296., 15988., 16680., 14880., 15584., 16288., 16992., 15156., 15872., 16588., 17304., 15432., 16160., 16888., 17616., 15708., 16448., 17188., 17928., 15984., 16736., 17488., 18240., 14596., 15232., 15868., 16504., 14872., 15520., 16168., 16816., 15148., 15808., 16468., 17128., 15424., 16096., 16768., 17440., 15700., 16384., 17068., 17752., 15976., 16672., 17368., 18064., 18964., 19712., 20460., 21208., 19240., 20000., 20760., 21520., 19516., 20288., 21060., 21832., 19792., 20576., 21360., 22144., 20068., 20864., 21660., 22456., 20344., 21152., 21960., 22768., 20620., 21440., 22260., 23080., 20896., 21728., 22560., 23392., 21172., 22016., 22860., 23704., 21448., 22304., 23160., 24016., 21724., 22592., 23460., 24328., 22000., 22880., 23760., 24640., 19588., 20352., 21116., 21880., 19864., 20640., 21416., 22192., 18116., 18816., 19516., 20216., 18392., 19104., 19816., 20528., 18668., 19392., 20116., 20840., 18944., 19680., 20416., 21152., 19220., 19968., 20716., 21464., 19496., 20256., 21016., 21776., 19772., 20544., 21316., 22088., 20048., 20832., 21616., 22400., 17124., 17792., 18460., 19128., 17400., 18080., 18760., 19440., 17676., 18368., 19060., 19752., 17952., 18656., 19360., 20064., 18228., 18944., 19660., 20376., 18504., 19232., 19960., 20688., 22644., 23552., 24460., 25368., 22920., 23840., 24760., 25680., 23196., 24128., 25060., 25992., 23472., 24416., 25360., 26304., 19012., 19840., 20668., 21496., 19288., 20128., 20968., 21808., 19564., 20416., 21268., 22120., 19840., 20704., 21568., 22432., 20116., 20992., 21868., 22744., 20392., 21280., 22168., 23056., 20668., 21568., 22468., 23368., 20944., 21856., 22768., 23680., 16996., 17792., 18588., 19384., 17272., 18080., 18888., 19696., 10404., 11136., 11868., 12600., 10680., 11424., 12168., 12912., 10956., 11712., 12468., 13224., 11232., 12000., 12768., 13536., 11508., 12288., 13068., 13848., 11784., 12576., 13368., 14160., 12060., 12864., 13668., 14472., 12336., 13152., 13968., 14784., 11972., 12672., 13372., 14072., 12248., 12960., 13672., 14384., 12524., 13248., 13972., 14696., 12800., 13536., 14272., 15008., 13076., 13824., 14572., 15320., 13352., 14112., 14872., 15632., 15700., 16384., 17068., 17752., 15976., 16672., 17368., 18064., 16252., 16960., 17668., 18376., 16528., 17248., 17968., 18688., 15652., 16256., 16860., 17464., 15928., 16544., 17160., 17776., 16204., 16832., 17460., 18088., 16480., 17120., 17760., 18400., 16756., 17408., 18060., 18712., 17032., 17696., 18360., 19024., 17308., 17984., 18660., 19336., 17584., 18272., 18960., 19648., 17860., 18560., 19260., 19960., 18136., 18848., 19560., 20272., 19588., 20352., 21116., 21880., 19864., 20640., 21416., 22192., 20140., 20928., 21716., 22504., 20416., 21216., 22016., 22816., 20692., 21504., 22316., 23128., 20968., 21792., 22616., 23440., 21244., 22080., 22916., 23752., 21520., 22368., 23216., 24064., 19620., 20352., 21084., 21816., 19896., 20640., 21384., 22128., 20172., 20928., 21684., 22440., 20448., 21216., 21984., 22752., 20724., 21504., 22284., 23064., 21000., 21792., 22584., 23376.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10522., 10900., 11278., 11656., 12034., 12412., 12790., 13168., 16332., 16824., 17316., 17808., 18300., 18792., 19284., 19776., 10024., 10384., 10744., 11104., 11464., 11824., 12184., 12544., 12904., 13264., 13624., 13984., 15289., 15802., 16315., 16828., 17341., 17854., 18367., 18880., 16858., 17524., 18190., 18856., 19522., 20188., 20854., 21520., 14486., 14972., 15458., 15944., 16430., 16916., 17402., 17888., 13766., 14252., 14738., 15224., 11185., 11698., 12211., 12724., 13237., 13750., 14263., 14776., 21834., 22500., 23166., 23832., 24498., 25164., 25830., 26496., 10598., 11084., 11570., 12056., 12542., 13028., 13514., 14000., 14486., 14972., 15458., 15944., 17961., 18474., 18987., 19500., 20013., 20526., 21039., 21552., 16506., 17172., 17838., 18504., 19170., 19836., 20502., 21168., 17014., 17500., 17986., 18472., 18958., 19444., 19930., 20416., 10598., 11084., 11570., 12056., 13857., 14370., 14883., 15396., 15909., 16422., 16935., 17448., 22058., 22724., 23390., 24056., 24722., 25388., 26054., 26720., 13126., 13612., 14098., 14584., 15070., 15556., 16042., 16528., 17014., 17500., 17986., 18472.,  9218.,  9524.,  9830., 10136., 10442., 10748., 11054., 11360.,  9996., 10392., 10788., 11184., 11580., 11976., 12372., 12768.,  8672.,  8960.,  9248.,  9536.,  9824., 10112., 10400., 10688.,  8032.,  8320.,  8608.,  8896.,  6770.,  7076.,  7382.,  7688.,  7994.,  8300.,  8606.,  8912., 12972., 13368., 13764., 14160., 14556., 14952., 15348., 15744.,  6368.,  6656.,  6944.,  7232.,  7520.,  7808.,  8096.,  8384.,  8672.,  8960.,  9248.,  9536.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16654., 16732., 16810., 16888., 16966., 17044., 17122., 17200., 17278., 17356., 17434., 17512., 17590., 17668., 17746., 17824., 17902., 17980., 18058., 18136., 18214., 18292., 18370., 18448., 18526., 18604., 18682., 18760., 21022., 21100., 21178., 21256., 21334., 21412., 21490., 21568., 21646., 21724., 21802., 21880., 21958., 22036., 22114., 22192., 22270., 22348., 22426., 22504., 22582., 22660., 22738., 22816., 22894., 22972., 23050., 23128., 21294., 21372., 21450., 21528., 21606., 21684., 21762., 21840., 21918., 21996., 22074., 22152., 22230., 22308., 22386., 22464., 18958., 19036., 19114., 19192., 19270., 19348., 19426., 19504., 19582., 19660., 19738., 19816., 22078., 22156., 22234., 22312., 22390., 22468., 22546., 22624., 17582., 17660., 17738., 17816., 17894., 17972., 18050., 18128., 18206., 18284., 18362., 18440., 18518., 18596., 18674., 18752., 14222., 14300., 14378., 14456., 16718., 16796., 16874., 16952., 17030., 17108., 17186., 17264., 17342., 17420., 17498., 17576., 17654., 17732., 17810., 17888., 17966., 18044., 18122., 18200., 18278., 18356., 18434., 18512., 18590., 18668., 18746., 18824., 19038., 19116., 19194., 19272., 19350., 19428., 19506., 19584., 18126., 18204., 18282., 18360., 18438., 18516., 18594., 18672., 18750., 18828., 18906., 18984., 19062., 19140., 19218., 19296., 19374., 19452., 19530., 19608., 18798., 18876., 18954., 19032., 19110., 19188., 19266., 19344., 19422., 19500., 19578., 19656., 19734., 19812., 19890., 19968., 17486., 17564., 17642., 17720., 17798., 17876., 17954., 18032., 18110., 18188., 18266., 18344.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3010.,  3220.,  3268.,  3496.,  3526.,  3772.,  3784.,  4048.,  4042.,  4324.,  4300.,  4600.,  4558.,  4876.,  4816.,  5152.,  5632.,  6040.,  5952.,  6384.,  6272.,  6728.,  6592.,  7072.,  6912.,  7416.,  7232.,  7760.,  7552.,  8104.,  7872.,  8448.,  2590.,  2800.,  2812.,  3040.,  3034.,  3280.,  3256.,  3520.,  3478.,  3760.,  3700.,  4000.,  3922.,  4240.,  4144.,  4480.,  4366.,  4720.,  4588.,  4960.,  4810.,  5200.,  5032.,  5440.,  6063.,  6450.,  6486.,  6900.,  6909.,  7350.,  7332.,  7800.,  7755.,  8250.,  8178.,  8700.,  8601.,  9150.,  9024.,  9600.,  5040.,  5364.,  5568.,  5928.,  6096.,  6492.,  6624.,  7056.,  7152.,  7620.,  7680.,  8184.,  8208.,  8748.,  8736.,  9312.,  5289.,  5676.,  5658.,  6072.,  6027.,  6468.,  6396.,  6864.,  6765.,  7260.,  7134.,  7656.,  7503.,  8052.,  7872.,  8448.,  4305.,  4620.,  4674.,  5016.,  5043.,  5412.,  5412.,  5808.,  2679.,  2850.,  3102.,  3300.,  3525.,  3750.,  3948.,  4200.,  4371.,  4650.,  4794.,  5100.,  5217.,  5550.,  5640.,  6000.,  8688.,  9300.,  9216.,  9864.,  9744., 10428., 10272., 10992., 10800., 11556., 11328., 12120., 11856., 12684., 12384., 13248.,  2337.,  2508.,  2706.,  2904.,  3075.,  3300.,  3444.,  3696.,  3813.,  4092.,  4182.,  4488.,  4551.,  4884.,  4920.,  5280.,  5289.,  5676.,  5658.,  6072.,  6027.,  6468.,  6396.,  6864.,  8319.,  8850.,  8742.,  9300.,  9165.,  9750.,  9588., 10200., 10011., 10650., 10434., 11100., 10857., 11550., 11280., 12000.,  4464.,  4788.,  4992.,  5352.,  5520.,  5916.,  6048.,  6480.,  6576.,  7044.,  7104.,  7608.,  7632.,  8172.,  8160.,  8736.,  7257.,  7788.,  7626.,  8184.,  7995.,  8580.,  8364.,  8976.,  8733.,  9372.,  9102.,  9768.,  9471., 10164.,  9840., 10560.,  2337.,  2508.,  2706.,  2904.,  3075.,  3300.,  3444.,  3696.,  4935.,  5250.,  5358.,  5700.,  5781.,  6150.,  6204.,  6600.,  6627.,  7050.,  7050.,  7500.,  7473.,  7950.,  7896.,  8400.,  9264.,  9876.,  9792., 10440., 10320., 11004., 10848., 11568., 11376., 12132., 11904., 12696., 12432., 13260., 12960., 13824.,  4305.,  4620.,  4674.,  5016.,  5043.,  5412.,  5412.,  5808.,  5781.,  6204.,  6150.,  6600.,  6519.,  6996.,  6888.,  7392.,  7257.,  7788.,  7626.,  8184.,  7995.,  8580.,  8364.,  8976.,  4386.,  4644.,  4692.,  4968.,  4998.,  5292.,  5304.,  5616.,  5610.,  5940.,  5916.,  6264.,  6222.,  6588.,  6528.,  6912.,  3648.,  3864.,  4032.,  4272.,  4416.,  4680.,  4800.,  5088.,  5184.,  5496.,  5568.,  5904.,  5952.,  6312.,  6336.,  6720.,  3870.,  4128.,  4140.,  4416.,  4410.,  4704.,  4680.,  4992.,  4950.,  5280.,  5220.,  5568.,  5490.,  5856.,  5760.,  6144.,  3150.,  3360.,  3420.,  3648.,  3690.,  3936.,  3960.,  4224.,  1938.,  2052.,  2244.,  2376.,  2550.,  2700.,  2856.,  3024.,  3162.,  3348.,  3468.,  3672.,  3774.,  3996.,  4080.,  4320.,  6336.,  6744.,  6720.,  7152.,  7104.,  7560.,  7488.,  7968.,  7872.,  8376.,  8256.,  8784.,  8640.,  9192.,  9024.,  9600.,  1710.,  1824.,  1980.,  2112.,  2250.,  2400.,  2520.,  2688.,  2790.,  2976.,  3060.,  3264.,  3330.,  3552.,  3600.,  3840.,  3870.,  4128.,  4140.,  4416.,  4410.,  4704.,  4680.,  4992.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14576., 15900., 14720., 16056., 14864., 16212., 15008., 16368., 15152., 16524., 15296., 16680., 15440., 16836., 15584., 16992., 15728., 17148., 15872., 17304., 16016., 17460., 16160., 17616., 16304., 17772., 16448., 17928., 16592., 18084., 16736., 18240., 15088., 16348., 15232., 16504., 15376., 16660., 15520., 16816., 15664., 16972., 15808., 17128., 15952., 17284., 16096., 17440., 16240., 17596., 16384., 17752., 16528., 17908., 16672., 18064., 19568., 21052., 19712., 21208., 19856., 21364., 20000., 21520., 20144., 21676., 20288., 21832., 20432., 21988., 20576., 22144., 20720., 22300., 20864., 22456., 21008., 22612., 21152., 22768., 21296., 22924., 21440., 23080., 21584., 23236., 21728., 23392., 21872., 23548., 22016., 23704., 22160., 23860., 22304., 24016., 22448., 24172., 22592., 24328., 22736., 24484., 22880., 24640., 20208., 21724., 20352., 21880., 20496., 22036., 20640., 22192., 18672., 20060., 18816., 20216., 18960., 20372., 19104., 20528., 19248., 20684., 19392., 20840., 19536., 20996., 19680., 21152., 19824., 21308., 19968., 21464., 20112., 21620., 20256., 21776., 20400., 21932., 20544., 22088., 20688., 22244., 20832., 22400., 17648., 18972., 17792., 19128., 17936., 19284., 18080., 19440., 18224., 19596., 18368., 19752., 18512., 19908., 18656., 20064., 18800., 20220., 18944., 20376., 19088., 20532., 19232., 20688., 23408., 25212., 23552., 25368., 23696., 25524., 23840., 25680., 23984., 25836., 24128., 25992., 24272., 26148., 24416., 26304., 19696., 21340., 19840., 21496., 19984., 21652., 20128., 21808., 20272., 21964., 20416., 22120., 20560., 22276., 20704., 22432., 20848., 22588., 20992., 22744., 21136., 22900., 21280., 23056., 21424., 23212., 21568., 23368., 21712., 23524., 21856., 23680., 17648., 19228., 17792., 19384., 17936., 19540., 18080., 19696., 10992., 12444., 11136., 12600., 11280., 12756., 11424., 12912., 11568., 13068., 11712., 13224., 11856., 13380., 12000., 13536., 12144., 13692., 12288., 13848., 12432., 14004., 12576., 14160., 12720., 14316., 12864., 14472., 13008., 14628., 13152., 14784., 12528., 13916., 12672., 14072., 12816., 14228., 12960., 14384., 13104., 14540., 13248., 14696., 13392., 14852., 13536., 15008., 13680., 15164., 13824., 15320., 13968., 15476., 14112., 15632., 16240., 17596., 16384., 17752., 16528., 17908., 16672., 18064., 16816., 18220., 16960., 18376., 17104., 18532., 17248., 18688., 16112., 17308., 16256., 17464., 16400., 17620., 16544., 17776., 16688., 17932., 16832., 18088., 16976., 18244., 17120., 18400., 17264., 18556., 17408., 18712., 17552., 18868., 17696., 19024., 17840., 19180., 17984., 19336., 18128., 19492., 18272., 19648., 18416., 19804., 18560., 19960., 18704., 20116., 18848., 20272., 20208., 21724., 20352., 21880., 20496., 22036., 20640., 22192., 20784., 22348., 20928., 22504., 21072., 22660., 21216., 22816., 21360., 22972., 21504., 23128., 21648., 23284., 21792., 23440., 21936., 23596., 22080., 23752., 22224., 23908., 22368., 24064., 20208., 21660., 20352., 21816., 20496., 21972., 20640., 22128., 20784., 22284., 20928., 22440., 21072., 22596., 21216., 22752., 21360., 22908., 21504., 23064., 21648., 23220., 21792., 23376.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3570.,  3780.,  3990.,  4200.,  3876.,  4104.,  4332.,  4560.,  4182.,  4428.,  4674.,  4920.,  4488.,  4752.,  5016.,  5280.,  4794.,  5076.,  5358.,  5640.,  5100.,  5400.,  5700.,  6000.,  5406.,  5724.,  6042.,  6360.,  5712.,  6048.,  6384.,  6720.,  6504.,  6912.,  7320.,  7728.,  6864.,  7296.,  7728.,  8160.,  7224.,  7680.,  8136.,  8592.,  7584.,  8064.,  8544.,  9024.,  7944.,  8448.,  8952.,  9456.,  8304.,  8832.,  9360.,  9888.,  8664.,  9216.,  9768., 10320.,  9024.,  9600., 10176., 10752.,  2730.,  2940.,  3150.,  3360.,  2964.,  3192.,  3420.,  3648.,  3198.,  3444.,  3690.,  3936.,  3432.,  3696.,  3960.,  4224.,  3666.,  3948.,  4230.,  4512.,  3900.,  4200.,  4500.,  4800.,  4134.,  4452.,  4770.,  5088.,  4368.,  4704.,  5040.,  5376.,  4602.,  4956.,  5310.,  5664.,  4836.,  5208.,  5580.,  5952.,  5070.,  5460.,  5850.,  6240.,  5304.,  5712.,  6120.,  6528.,  6235.,  6622.,  7009.,  7396.,  6670.,  7084.,  7498.,  7912.,  7105.,  7546.,  7987.,  8428.,  7540.,  8008.,  8476.,  8944.,  7975.,  8470.,  8965.,  9460.,  8410.,  8932.,  9454.,  9976.,  8845.,  9394.,  9943., 10492.,  9280.,  9856., 10432., 11008.,  5148.,  5472.,  5796.,  6120.,  5656.,  6016.,  6376.,  6736.,  6164.,  6560.,  6956.,  7352.,  6672.,  7104.,  7536.,  7968.,  7180.,  7648.,  8116.,  8584.,  7688.,  8192.,  8696.,  9200.,  8196.,  8736.,  9276.,  9816.,  8704.,  9280.,  9856., 10432.,  4687.,  5074.,  5461.,  5848.,  5014.,  5428.,  5842.,  6256.,  5341.,  5782.,  6223.,  6664.,  5668.,  6136.,  6604.,  7072.,  5995.,  6490.,  6985.,  7480.,  6322.,  6844.,  7366.,  7888.,  6649.,  7198.,  7747.,  8296.,  6976.,  7552.,  8128.,  8704.,  3815.,  4130.,  4445.,  4760.,  4142.,  4484.,  4826.,  5168.,  4469.,  4838.,  5207.,  5576.,  4796.,  5192.,  5588.,  5984.,  2755.,  2926.,  3097.,  3268.,  3190.,  3388.,  3586.,  3784.,  3625.,  3850.,  4075.,  4300.,  4060.,  4312.,  4564.,  4816.,  4495.,  4774.,  5053.,  5332.,  4930.,  5236.,  5542.,  5848.,  5365.,  5698.,  6031.,  6364.,  5800.,  6160.,  6520.,  6880.,  8060.,  8672.,  9284.,  9896.,  8568.,  9216.,  9864., 10512.,  9076.,  9760., 10444., 11128.,  9584., 10304., 11024., 11744., 10092., 10848., 11604., 12360., 10600., 11392., 12184., 12976., 11108., 11936., 12764., 13592., 11616., 12480., 13344., 14208.,  2071.,  2242.,  2413.,  2584.,  2398.,  2596.,  2794.,  2992.,  2725.,  2950.,  3175.,  3400.,  3052.,  3304.,  3556.,  3808.,  3379.,  3658.,  3937.,  4216.,  3706.,  4012.,  4318.,  4624.,  4033.,  4366.,  4699.,  5032.,  4360.,  4720.,  5080.,  5440.,  4687.,  5074.,  5461.,  5848.,  5014.,  5428.,  5842.,  6256.,  5341.,  5782.,  6223.,  6664.,  5668.,  6136.,  6604.,  7072.,  8555.,  9086.,  9617., 10148.,  8990.,  9548., 10106., 10664.,  9425., 10010., 10595., 11180.,  9860., 10472., 11084., 11696., 10295., 10934., 11573., 12212., 10730., 11396., 12062., 12728., 11165., 11858., 12551., 13244., 11600., 12320., 13040., 13760.,  3996.,  4320.,  4644.,  4968.,  4504.,  4864.,  5224.,  5584.,  5012.,  5408.,  5804.,  6200.,  5520.,  5952.,  6384.,  6816.,  6028.,  6496.,  6964.,  7432.,  6536.,  7040.,  7544.,  8048.,  7044.,  7584.,  8124.,  8664.,  7552.,  8128.,  8704.,  9280.,  6431.,  6962.,  7493.,  8024.,  6758.,  7316.,  7874.,  8432.,  7085.,  7670.,  8255.,  8840.,  7412.,  8024.,  8636.,  9248.,  7739.,  8378.,  9017.,  9656.,  8066.,  8732.,  9398., 10064.,  8393.,  9086.,  9779., 10472.,  8720.,  9440., 10160., 10880.,  2071.,  2242.,  2413.,  2584.,  2398.,  2596.,  2794.,  2992.,  2725.,  2950.,  3175.,  3400.,  3052.,  3304.,  3556.,  3808.,  5075.,  5390.,  5705.,  6020.,  5510.,  5852.,  6194.,  6536.,  5945.,  6314.,  6683.,  7052.,  6380.,  6776.,  7172.,  7568.,  6815.,  7238.,  7661.,  8084.,  7250.,  7700.,  8150.,  8600.,  7685.,  8162.,  8639.,  9116.,  8120.,  8624.,  9128.,  9632.,  9212.,  9824., 10436., 11048.,  9720., 10368., 11016., 11664., 10228., 10912., 11596., 12280., 10736., 11456., 12176., 12896., 11244., 12000., 12756., 13512., 11752., 12544., 13336., 14128., 12260., 13088., 13916., 14744., 12768., 13632., 14496., 15360.,  3815.,  4130.,  4445.,  4760.,  4142.,  4484.,  4826.,  5168.,  4469.,  4838.,  5207.,  5576.,  4796.,  5192.,  5588.,  5984.,  5123.,  5546.,  5969.,  6392.,  5450.,  5900.,  6350.,  6800.,  5777.,  6254.,  6731.,  7208.,  6104.,  6608.,  7112.,  7616.,  6431.,  6962.,  7493.,  8024.,  6758.,  7316.,  7874.,  8432.,  7085.,  7670.,  8255.,  8840.,  7412.,  8024.,  8636.,  9248.,  4386.,  4644.,  4902.,  5160.,  4692.,  4968.,  5244.,  5520.,  4998.,  5292.,  5586.,  5880.,  5304.,  5616.,  5928.,  6240.,  5610.,  5940.,  6270.,  6600.,  5916.,  6264.,  6612.,  6960.,  6222.,  6588.,  6954.,  7320.,  6528.,  6912.,  7296.,  7680.,  3624.,  3840.,  4056.,  4272.,  3984.,  4224.,  4464.,  4704.,  4344.,  4608.,  4872.,  5136.,  4704.,  4992.,  5280.,  5568.,  5064.,  5376.,  5688.,  6000.,  5424.,  5760.,  6096.,  6432.,  5784.,  6144.,  6504.,  6864.,  6144.,  6528.,  6912.,  7296.,  3354.,  3612.,  3870.,  4128.,  3588.,  3864.,  4140.,  4416.,  3822.,  4116.,  4410.,  4704.,  4056.,  4368.,  4680.,  4992.,  4290.,  4620.,  4950.,  5280.,  4524.,  4872.,  5220.,  5568.,  4758.,  5124.,  5490.,  5856.,  4992.,  5376.,  5760.,  6144.,  2730.,  2940.,  3150.,  3360.,  2964.,  3192.,  3420.,  3648.,  3198.,  3444.,  3690.,  3936.,  3432.,  3696.,  3960.,  4224.,  1938.,  2052.,  2166.,  2280.,  2244.,  2376.,  2508.,  2640.,  2550.,  2700.,  2850.,  3000.,  2856.,  3024.,  3192.,  3360.,  3162.,  3348.,  3534.,  3720.,  3468.,  3672.,  3876.,  4080.,  3774.,  3996.,  4218.,  4440.,  4080.,  4320.,  4560.,  4800.,  5736.,  6144.,  6552.,  6960.,  6096.,  6528.,  6960.,  7392.,  6456.,  6912.,  7368.,  7824.,  6816.,  7296.,  7776.,  8256.,  7176.,  7680.,  8184.,  8688.,  7536.,  8064.,  8592.,  9120.,  7896.,  8448.,  9000.,  9552.,  8256.,  8832.,  9408.,  9984.,  1482.,  1596.,  1710.,  1824.,  1716.,  1848.,  1980.,  2112.,  1950.,  2100.,  2250.,  2400.,  2184.,  2352.,  2520.,  2688.,  2418.,  2604.,  2790.,  2976.,  2652.,  2856.,  3060.,  3264.,  2886.,  3108.,  3330.,  3552.,  3120.,  3360.,  3600.,  3840.,  3354.,  3612.,  3870.,  4128.,  3588.,  3864.,  4140.,  4416.,  3822.,  4116.,  4410.,  4704.,  4056.,  4368.,  4680.,  4992.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13236., 13792., 14348., 14904., 13512., 14080., 14648., 15216., 13788., 14368., 14948., 15528., 14064., 14656., 15248., 15840., 14340., 14944., 15548., 16152., 14616., 15232., 15848., 16464., 14892., 15520., 16148., 16776., 15168., 15808., 16448., 17088., 15444., 16096., 16748., 17400., 15720., 16384., 17048., 17712., 15996., 16672., 17348., 18024., 16272., 16960., 17648., 18336., 16548., 17248., 17948., 18648., 16824., 17536., 18248., 18960., 17100., 17824., 18548., 19272., 17376., 18112., 18848., 19584., 15988., 16608., 17228., 17848., 16264., 16896., 17528., 18160., 16540., 17184., 17828., 18472., 16816., 17472., 18128., 18784., 17092., 17760., 18428., 19096., 17368., 18048., 18728., 19408., 17644., 18336., 19028., 19720., 17920., 18624., 19328., 20032., 18196., 18912., 19628., 20344., 18472., 19200., 19928., 20656., 18748., 19488., 20228., 20968., 19024., 19776., 20528., 21280., 21140., 21984., 22828., 23672., 21416., 22272., 23128., 23984., 21692., 22560., 23428., 24296., 21968., 22848., 23728., 24608., 22244., 23136., 24028., 24920., 22520., 23424., 24328., 25232., 22796., 23712., 24628., 25544., 23072., 24000., 24928., 25856., 19124., 19936., 20748., 21560., 19400., 20224., 21048., 21872., 19676., 20512., 21348., 22184., 19952., 20800., 21648., 22496., 20228., 21088., 21948., 22808., 20504., 21376., 22248., 23120., 20780., 21664., 22548., 23432., 21056., 21952., 22848., 23744., 21332., 22240., 23148., 24056., 21608., 22528., 23448., 24368., 21884., 22816., 23748., 24680., 22160., 23104., 24048., 24992., 22436., 23392., 24348., 25304., 22712., 23680., 24648., 25616., 22988., 23968., 24948., 25928., 23264., 24256., 25248., 26240., 15092., 15840., 16588., 17336., 15368., 16128., 16888., 17648., 15644., 16416., 17188., 17960., 15920., 16704., 17488., 18272., 12148., 12768., 13388., 14008., 12424., 13056., 13688., 14320., 12700., 13344., 13988., 14632., 12976., 13632., 14288., 14944., 13252., 13920., 14588., 15256., 13528., 14208., 14888., 15568., 13804., 14496., 15188., 15880., 14080., 14784., 15488., 16192., 14356., 15072., 15788., 16504., 14632., 15360., 16088., 16816., 14908., 15648., 16388., 17128., 15184., 15936., 16688., 17440., 15460., 16224., 16988., 17752., 15736., 16512., 17288., 18064., 16012., 16800., 17588., 18376., 16288., 17088., 17888., 18688., 13236., 13792., 14348., 14904., 13512., 14080., 14648., 15216., 13788., 14368., 14948., 15528., 14064., 14656., 15248., 15840., 14340., 14944., 15548., 16152., 14616., 15232., 15848., 16464., 14892., 15520., 16148., 16776., 15168., 15808., 16448., 17088., 15444., 16096., 16748., 17400., 15720., 16384., 17048., 17712., 15996., 16672., 17348., 18024., 16272., 16960., 17648., 18336., 21460., 22240., 23020., 23800., 21736., 22528., 23320., 24112., 22012., 22816., 23620., 24424., 22288., 23104., 23920., 24736., 22564., 23392., 24220., 25048., 22840., 23680., 24520., 25360., 23116., 23968., 24820., 25672., 23392., 24256., 25120., 25984., 18932., 19680., 20428., 21176., 19208., 19968., 20728., 21488., 19484., 20256., 21028., 21800., 19760., 20544., 21328., 22112., 20036., 20832., 21628., 22424., 20312., 21120., 21928., 22736., 20588., 21408., 22228., 23048., 20864., 21696., 22528., 23360., 21140., 21984., 22828., 23672., 21416., 22272., 23128., 23984., 21692., 22560., 23428., 24296., 21968., 22848., 23728., 24608., 22244., 23136., 24028., 24920., 22520., 23424., 24328., 25232., 22796., 23712., 24628., 25544., 23072., 24000., 24928., 25856., 19124., 19936., 20748., 21560., 19400., 20224., 21048., 21872., 19676., 20512., 21348., 22184., 19952., 20800., 21648., 22496., 12084., 12768., 13452., 14136., 12360., 13056., 13752., 14448., 12636., 13344., 14052., 14760., 12912., 13632., 14352., 15072., 13188., 13920., 14652., 15384., 13464., 14208., 14952., 15696., 13740., 14496., 15252., 16008., 14016., 14784., 15552., 16320., 14292., 15072., 15852., 16632., 14568., 15360., 16152., 16944., 14844., 15648., 16452., 17256., 15120., 15936., 16752., 17568., 15396., 16224., 17052., 17880., 15672., 16512., 17352., 18192., 15948., 16800., 17652., 18504., 16224., 17088., 17952., 18816., 12148., 12768., 13388., 14008., 12424., 13056., 13688., 14320., 12700., 13344., 13988., 14632., 12976., 13632., 14288., 14944., 13252., 13920., 14588., 15256., 13528., 14208., 14888., 15568., 13804., 14496., 15188., 15880., 14080., 14784., 15488., 16192., 14356., 15072., 15788., 16504., 14632., 15360., 16088., 16816., 14908., 15648., 16388., 17128., 15184., 15936., 16688., 17440., 18196., 18912., 19628., 20344., 18472., 19200., 19928., 20656., 18748., 19488., 20228., 20968., 19024., 19776., 20528., 21280., 19300., 20064., 20828., 21592., 19576., 20352., 21128., 21904., 19852., 20640., 21428., 22216., 20128., 20928., 21728., 22528., 19252., 19936., 20620., 21304., 19528., 20224., 20920., 21616., 19804., 20512., 21220., 21928., 20080., 20800., 21520., 22240., 20356., 21088., 21820., 22552., 20632., 21376., 22120., 22864., 20908., 21664., 22420., 23176., 21184., 21952., 22720., 23488., 21460., 22240., 23020., 23800., 21736., 22528., 23320., 24112., 22012., 22816., 23620., 24424., 22288., 23104., 23920., 24736., 22564., 23392., 24220., 25048., 22840., 23680., 24520., 25360., 23116., 23968., 24820., 25672., 23392., 24256., 25120., 25984., 18932., 19680., 20428., 21176., 19208., 19968., 20728., 21488., 19484., 20256., 21028., 21800., 19760., 20544., 21328., 22112., 15092., 15840., 16588., 17336., 15368., 16128., 16888., 17648., 15644., 16416., 17188., 17960., 15920., 16704., 17488., 18272., 16196., 16992., 17788., 18584., 16472., 17280., 18088., 18896., 16748., 17568., 18388., 19208., 17024., 17856., 18688., 19520., 17300., 18144., 18988., 19832., 17576., 18432., 19288., 20144., 17852., 18720., 19588., 20456., 18128., 19008., 19888., 20768., 18404., 19296., 20188., 21080., 18680., 19584., 20488., 21392., 18956., 19872., 20788., 21704., 19232., 20160., 21088., 22016., 12084., 12768., 13452., 14136., 12360., 13056., 13752., 14448., 12636., 13344., 14052., 14760., 12912., 13632., 14352., 15072., 13188., 13920., 14652., 15384., 13464., 14208., 14952., 15696., 13740., 14496., 15252., 16008., 14016., 14784., 15552., 16320., 14292., 15072., 15852., 16632., 14568., 15360., 16152., 16944., 14844., 15648., 16452., 17256., 15120., 15936., 16752., 17568.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12915., 13284., 18972., 19512., 17940., 12672., 13023., 11662., 11263., 16848., 16300., 16840., 10709., 11060., 17112., 17568., 22830., 23496., 24162., 16752., 14944., 12848., 12024., 19724., 18406., 19072., 11328., 11760., 11133., 11448., 16299., 16758., 15297., 10836., 11133.,  9862.,  9601., 14244., 13807., 14266.,  9047.,  9344., 11343., 11658., 14493., 14952., 15411., 11034.,  9283.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19166., 19244., 19322., 19400., 19478., 19556., 19634., 20024., 20102., 20180., 20258., 20336., 20414., 20492., 20882., 20960., 21038., 21116., 21194., 21272., 21350., 21740., 21818., 21896., 21974., 22052., 22130., 22208., 22598., 22676., 22754., 22832., 22910., 22988., 23066., 23456., 23534., 23612., 23690., 23768., 23846., 23924., 24314., 24392., 24470., 24548., 24626., 24704., 24782.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3988., 4294., 4228., 4552., 6429., 6872., 6810., 7280., 6807., 7240., 5180., 5504., 5288., 5598., 4644., 4956., 4148., 4446., 6812., 7264., 7161., 7608., 7542., 8016., 4832., 5130., 5100., 5416., 5144., 5520., 5488., 5888., 7736., 8284., 8264., 8848., 7576., 8132., 5648., 6048., 5368., 5728., 5088., 5472., 5208., 5584., 8584., 9176., 8184., 8716., 8712., 9280., 6120., 6496., 6480., 6880., 4584., 4890., 4844., 5168., 7483., 7926., 7894., 8364., 7281., 7714., 5540., 5864., 4836., 5146., 4564., 4876., 4280., 4578., 6852., 7304., 6399., 6846., 6810., 7284., 4708., 5006., 4996., 5312., 3744., 4030., 4004., 4308., 6093., 6490., 6504., 6928., 6755., 7174., 5124., 5428., 4132., 4390.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15704., 16828., 15848., 16984., 15992., 17140., 16136., 17296., 16280., 17452., 16424., 17608., 16568., 17764., 17288., 18544., 17432., 18700., 17576., 18856., 17720., 19012., 17864., 19168., 18008., 19324., 18152., 19480., 18872., 20260., 19016., 20416., 19160., 20572., 19304., 20728., 19448., 20884., 19592., 21040., 19736., 21196., 20456., 21976., 20600., 22132., 20744., 22288., 20888., 22444., 21032., 22600., 21176., 22756., 21320., 22912., 22040., 23692., 22184., 23848., 22328., 24004., 22472., 24160., 22616., 24316., 22760., 24472., 22904., 24628., 19784., 21312., 19928., 21468., 20072., 21624., 16888., 18196., 17032., 18352., 17176., 18508., 17320., 18664., 18040., 19444., 18184., 19600., 18328., 19756., 18472., 19912., 18616., 20068., 18760., 20224., 18904., 20380.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4406.,  4712.,  5018.,  5324.,  4676.,  5000.,  5324.,  5648.,  6655.,  7098.,  7541.,  7984.,  7070.,  7540.,  8010.,  8480.,  6781.,  7214.,  7647.,  8080.,  5300.,  5624.,  5948.,  6272.,  5306.,  5616.,  5926.,  6236.,  4624.,  4936.,  5248.,  5560.,  4478.,  4776.,  5074.,  5372.,  6964.,  7416.,  7868.,  8320.,  7347.,  7794.,  8241.,  8688.,  7762.,  8236.,  8710.,  9184.,  5238.,  5536.,  5834.,  6132.,  5532.,  5848.,  6164.,  6480.,  4984.,  5360.,  5736.,  6112.,  5328.,  5728.,  6128.,  6528.,  8012.,  8560.,  9108.,  9656.,  8520.,  9104.,  9688., 10272.,  7684.,  8240.,  8796.,  9352.,  5712.,  6112.,  6512.,  6912.,  4840.,  5200.,  5560.,  5920.,  5440.,  5824.,  6208.,  6592.,  5368.,  5744.,  6120.,  6496.,  8128.,  8720.,  9312.,  9904.,  7900.,  8432.,  8964.,  9496.,  8408.,  8976.,  9544., 10112.,  5880.,  6256.,  6632.,  7008.,  6224.,  6624.,  7024.,  7424.,  3998.,  4304.,  4610.,  4916.,  4244.,  4568.,  4892.,  5216.,  6491.,  6934.,  7377.,  7820.,  6870.,  7340.,  7810.,  8280.,  6289.,  6722.,  7155.,  7588.,  4996.,  5320.,  5644.,  5968.,  4338.,  4648.,  4958.,  5268.,  4208.,  4520.,  4832.,  5144.,  4422.,  4720.,  5018.,  5316.,  6788.,  7240.,  7692.,  8144.,  6495.,  6942.,  7389.,  7836.,  6874.,  7348.,  7822.,  8296.,  4286.,  4584.,  4882.,  5180.,  4556.,  4872.,  5188.,  5504.,  3874.,  4160.,  4446.,  4732.,  4120.,  4424.,  4728.,  5032.,  5869.,  6266.,  6663.,  7060.,  6248.,  6672.,  7096.,  7520.,  6339.,  6758.,  7177.,  7596.,  5016.,  5320.,  5624.,  5928.,  3814.,  4072.,  4330.,  4588.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18508., 19120., 19732., 20344., 18784., 19408., 20032., 20656., 19060., 19696., 20332., 20968., 19336., 19984., 20632., 21280., 19612., 20272., 20932., 21592., 19888., 20560., 21232., 21904., 20164., 20848., 21532., 22216., 21544., 22288., 23032., 23776., 21820., 22576., 23332., 24088., 22096., 22864., 23632., 24400., 22372., 23152., 23932., 24712., 22648., 23440., 24232., 25024., 22924., 23728., 24532., 25336., 23200., 24016., 24832., 25648., 24580., 25456., 26332., 27208., 24856., 25744., 26632., 27520., 25132., 26032., 26932., 27832., 25408., 26320., 27232., 28144., 25684., 26608., 27532., 28456., 25960., 26896., 27832., 28768., 20476., 21296., 22116., 22936., 16608., 17360., 18112., 18864., 16884., 17648., 18412., 19176., 17160., 17936., 18712., 19488., 17436., 18224., 19012., 19800., 17712., 18512., 19312., 20112., 17988., 18800., 19612., 20424., 18264., 19088., 19912., 20736., 19644., 20528., 21412., 22296., 19920., 20816., 21712., 22608., 20196., 21104., 22012., 22920., 20472., 21392., 22312., 23232., 20748., 21680., 22612., 23544., 21024., 21968., 22912., 23856., 21300., 22256., 23212., 24168., 18968., 19856., 20744., 21632., 19244., 20144., 21044., 21944., 19520., 20432., 21344., 22256., 16596., 17392., 18188., 18984., 16872., 17680., 18488., 19296., 17148., 17968., 18788., 19608., 17424., 18256., 19088., 19920., 18804., 19696., 20588., 21480., 19080., 19984., 20888., 21792., 19356., 20272., 21188., 22104., 19632., 20560., 21488., 22416., 19908., 20848., 21788., 22728., 20184., 21136., 22088., 23040., 15724., 16560., 17396., 18232.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11701., 12070., 12439., 12808., 16540., 17080., 17620., 18160., 16204., 16744., 11809., 12160., 11295., 11646., 12523., 12892., 12493., 12862., 18180., 18720., 18172., 18712., 19252., 19792., 11915., 12266., 12617., 12968., 14760., 15216., 15672., 16128., 20674., 21340., 22006., 22672., 21034., 21700., 14896., 15328., 13008., 13440., 13528., 13984., 13160., 13616., 20798., 21464., 18034., 18700., 19366., 20032., 12432., 12864., 13296., 13728.,  9919., 10234., 10549., 10864., 13963., 14422., 14881., 15340., 13687., 14146.,  9919., 10216.,  9489.,  9786., 10705., 11020., 10759., 11074., 15549., 16008., 15571., 16030., 16489., 16948., 10181., 10478., 10775., 11072.,  9635.,  9950., 10265., 10580., 12847., 13306., 13765., 14224., 13467., 13926.,  9675.,  9972.,  7901.,  8198.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16750., 16828., 16906., 16984., 17062., 17140., 17218., 17296., 17374., 17452., 17530., 17608., 17686., 17764., 18466., 18544., 18622., 18700., 18778., 18856., 18934., 19012., 19090., 19168., 19246., 19324., 19402., 19480., 20182., 20260., 20338., 20416., 20494., 20572., 20650., 20728., 20806., 20884., 20962., 21040., 21118., 21196., 21898., 21976., 22054., 22132., 22210., 22288., 22366., 22444., 22522., 22600., 22678., 22756., 22834., 22912., 23614., 23692., 23770., 23848., 23926., 24004., 24082., 24160., 24238., 24316., 24394., 24472., 24550., 24628., 21234., 21312., 21390., 21468., 21546., 21624., 18118., 18196., 18274., 18352., 18430., 18508., 18586., 18664., 19366., 19444., 19522., 19600., 19678., 19756., 19834., 19912., 19990., 20068., 20146., 20224., 20302., 20380.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3448.,  3722.,  3688.,  3980.,  3928.,  4238.,  4168.,  4496.,  5629.,  6040.,  6010.,  6448.,  6391.,  6856.,  6772.,  7264.,  5361.,  5752.,  5742.,  6160.,  4396.,  4706.,  4664.,  4992.,  4356.,  4638.,  4624.,  4924.,  4280.,  4598.,  4520.,  4856.,  3384.,  3642.,  3624.,  3900.,  5883.,  6312.,  6264.,  6720.,  6325.,  6744.,  6706.,  7152.,  7087.,  7560.,  7468.,  7968.,  4340.,  4598.,  4608.,  4884.,  4876.,  5170.,  5144.,  5456.,  5496.,  5872.,  5840.,  6240.,  6184.,  6608.,  6528.,  6976.,  7616.,  8132.,  8144.,  8696.,  8672.,  9260.,  9200.,  9824.,  8416.,  8980.,  8944.,  9544.,  6168.,  6592.,  6528.,  6976.,  5096.,  5440.,  5456.,  5824.,  5384.,  5776.,  5728.,  6144.,  5368.,  5744.,  5712.,  6112.,  9088.,  9724.,  9616., 10288.,  7712.,  8228.,  8240.,  8792.,  8768.,  9356.,  9296.,  9920.,  5832.,  6208.,  6192.,  6592.,  6552.,  6976.,  6912.,  7360.,  3468.,  3742.,  3728.,  4020.,  3988.,  4298.,  4248.,  4576.,  6299.,  6710.,  6710.,  7148.,  7121.,  7586.,  7532.,  8024.,  5895.,  6286.,  6306.,  6724.,  4968.,  5278.,  5256.,  5584.,  4328.,  4610.,  4616.,  4916.,  4804.,  5122.,  5064.,  5400.,  3500.,  3758.,  3760.,  4036.,  6573.,  7002.,  6984.,  7440.,  6435.,  6854.,  6846.,  7292.,  7257.,  7730.,  7668.,  8168.,  3944.,  4202.,  4232.,  4508.,  4520.,  4814.,  4808.,  5120.,  4412.,  4710.,  4672.,  4988.,  4932.,  5266.,  5192.,  5544.,  6143.,  6526.,  6554.,  6964.,  6965.,  7402.,  7376.,  7840.,  6699.,  7126.,  7110.,  7564.,  5608.,  5942.,  5896.,  6248.,  4136.,  4378.,  4424.,  4684.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18976., 20188., 19120., 20344., 19264., 20500., 19408., 20656., 19552., 20812., 19696., 20968., 19840., 21124., 19984., 21280., 20128., 21436., 20272., 21592., 20416., 21748., 20560., 21904., 20704., 22060., 20848., 22216., 22144., 23620., 22288., 23776., 22432., 23932., 22576., 24088., 22720., 24244., 22864., 24400., 23008., 24556., 23152., 24712., 23296., 24868., 23440., 25024., 23584., 25180., 23728., 25336., 23872., 25492., 24016., 25648., 25312., 27052., 25456., 27208., 25600., 27364., 25744., 27520., 25888., 27676., 26032., 27832., 26176., 27988., 26320., 28144., 26464., 28300., 26608., 28456., 26752., 28612., 26896., 28768., 21152., 22780., 21296., 22936., 17216., 18708., 17360., 18864., 17504., 19020., 17648., 19176., 17792., 19332., 17936., 19488., 18080., 19644., 18224., 19800., 18368., 19956., 18512., 20112., 18656., 20268., 18800., 20424., 18944., 20580., 19088., 20736., 20384., 22140., 20528., 22296., 20672., 22452., 20816., 22608., 20960., 22764., 21104., 22920., 21248., 23076., 21392., 23232., 21536., 23388., 21680., 23544., 21824., 23700., 21968., 23856., 22112., 24012., 22256., 24168., 19712., 21476., 19856., 21632., 20000., 21788., 20144., 21944., 20288., 22100., 20432., 22256., 17248., 18828., 17392., 18984., 17536., 19140., 17680., 19296., 17824., 19452., 17968., 19608., 18112., 19764., 18256., 19920., 19552., 21324., 19696., 21480., 19840., 21636., 19984., 21792., 20128., 21948., 20272., 22104., 20416., 22260., 20560., 22416., 20704., 22572., 20848., 22728., 20992., 22884., 21136., 23040., 16416., 18076., 16560., 18232.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4382.,  4656.,  4930.,  5204.,  4652.,  4944.,  5236.,  5528.,  4922.,  5232.,  5542.,  5852.,  5192.,  5520.,  5848.,  6176.,  5791.,  6202.,  6613.,  7024.,  6206.,  6644.,  7082.,  7520.,  6621.,  7086.,  7551.,  8016.,  7036.,  7528.,  8020.,  8512.,  6043.,  6434.,  6825.,  7216.,  6458.,  6876.,  7294.,  7712.,  5378.,  5688.,  5998.,  6308.,  5672.,  6000.,  6328.,  6656.,  4878.,  5160.,  5442.,  5724.,  5172.,  5472.,  5772.,  6072.,  4850.,  5168.,  5486.,  5804.,  5120.,  5456.,  5792.,  6128.,  3758.,  4016.,  4274.,  4532.,  4028.,  4304.,  4580.,  4856.,  6409.,  6838.,  7267.,  7696.,  6824.,  7280.,  7736.,  8192.,  6663.,  7082.,  7501.,  7920.,  7078.,  7524.,  7970.,  8416.,  7493.,  7966.,  8439.,  8912.,  7908.,  8408.,  8908.,  9408.,  4486.,  4744.,  5002.,  5260.,  4780.,  5056.,  5332.,  5608.,  5074.,  5368.,  5662.,  5956.,  5368.,  5680.,  5992.,  6304.,  5176.,  5552.,  5928.,  6304.,  5520.,  5920.,  6320.,  6720.,  5864.,  6288.,  6712.,  7136.,  6208.,  6656.,  7104.,  7552.,  7548.,  8064.,  8580.,  9096.,  8056.,  8608.,  9160.,  9712.,  8564.,  9152.,  9740., 10328.,  9072.,  9696., 10320., 10944.,  8076.,  8640.,  9204.,  9768.,  8584.,  9184.,  9784., 10384.,  5992.,  6416.,  6840.,  7264.,  6336.,  6784.,  7232.,  7680.,  4248.,  4592.,  4936.,  5280.,  4592.,  4960.,  5328.,  5696.,  6088.,  6480.,  6872.,  7264.,  6432.,  6848.,  7264.,  7680.,  5432.,  5808.,  6184.,  6560.,  5776.,  6176.,  6576.,  6976.,  8324.,  8960.,  9596., 10232.,  8832.,  9504., 10176., 10848.,  7740.,  8256.,  8772.,  9288.,  8248.,  8800.,  9352.,  9904.,  8756.,  9344.,  9932., 10520.,  9264.,  9888., 10512., 11136.,  5816.,  6192.,  6568.,  6944.,  6160.,  6560.,  6960.,  7360.,  6504.,  6928.,  7352.,  7776.,  6848.,  7296.,  7744.,  8192.,  3334.,  3608.,  3882.,  4156.,  3580.,  3872.,  4164.,  4456.,  3826.,  4136.,  4446.,  4756.,  4072.,  4400.,  4728.,  5056.,  5755.,  6166.,  6577.,  6988.,  6134.,  6572.,  7010.,  7448.,  6513.,  6978.,  7443.,  7908.,  6892.,  7384.,  7876.,  8368.,  5351.,  5742.,  6133.,  6524.,  5730.,  6148.,  6566.,  6984.,  4538.,  4848.,  5158.,  5468.,  4808.,  5136.,  5464.,  5792.,  3734.,  4016.,  4298.,  4580.,  4004.,  4304.,  4604.,  4904.,  4426.,  4744.,  5062.,  5380.,  4672.,  5008.,  5344.,  5680.,  3414.,  3672.,  3930.,  4188.,  3660.,  3936.,  4212.,  4488.,  6349.,  6778.,  7207.,  7636.,  6728.,  7184.,  7640.,  8096.,  6275.,  6694.,  7113.,  7532.,  6654.,  7100.,  7546.,  7992.,  7033.,  7506.,  7979.,  8452.,  7412.,  7912.,  8412.,  8912.,  3374.,  3632.,  3890.,  4148.,  3644.,  3920.,  4196.,  4472.,  3914.,  4208.,  4502.,  4796.,  4184.,  4496.,  4808.,  5120.,  4174.,  4472.,  4770.,  5068.,  4420.,  4736.,  5052.,  5368.,  4666.,  5000.,  5334.,  5668.,  4912.,  5264.,  5616.,  5968.,  5599.,  5982.,  6365.,  6748.,  5978.,  6388.,  6798.,  7208.,  6357.,  6794.,  7231.,  7668.,  6736.,  7200.,  7664.,  8128.,  6027.,  6454.,  6881.,  7308.,  6406.,  6860.,  7314.,  7768.,  5410.,  5744.,  6078.,  6412.,  5680.,  6032.,  6384.,  6736.,  4030.,  4272.,  4514.,  4756.,  4300.,  4560.,  4820.,  5080.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18820., 19520., 20220., 20920., 19096., 19808., 20520., 21232., 19372., 20096., 20820., 21544., 19648., 20384., 21120., 21856., 19924., 20672., 21420., 22168., 20200., 20960., 21720., 22480., 20476., 21248., 22020., 22792., 20752., 21536., 22320., 23104., 21028., 21824., 22620., 23416., 21304., 22112., 22920., 23728., 21580., 22400., 23220., 24040., 21856., 22688., 23520., 24352., 22132., 22976., 23820., 24664., 22408., 23264., 24120., 24976., 20156., 20992., 21828., 22664., 20432., 21280., 22128., 22976., 16484., 17216., 17948., 18680., 16760., 17504., 18248., 18992., 17036., 17792., 18548., 19304., 17312., 18080., 18848., 19616., 17588., 18368., 19148., 19928., 17864., 18656., 19448., 20240., 18140., 18944., 19748., 20552., 18416., 19232., 20048., 20864., 17028., 17728., 18428., 19128., 17304., 18016., 18728., 19440., 17580., 18304., 19028., 19752., 17856., 18592., 19328., 20064., 19188., 19904., 20620., 21336., 19464., 20192., 20920., 21648., 19740., 20480., 21220., 21960., 20016., 20768., 21520., 22272., 20292., 21056., 21820., 22584., 20568., 21344., 22120., 22896., 20844., 21632., 22420., 23208., 21120., 21920., 22720., 23520., 21396., 22208., 23020., 23832., 21672., 22496., 23320., 24144., 21948., 22784., 23620., 24456., 22224., 23072., 23920., 24768., 16740., 17472., 18204., 18936., 17016., 17760., 18504., 19248., 14252., 14976., 15700., 16424., 14528., 15264., 16000., 16736., 12116., 12736., 13356., 13976., 12392., 13024., 13656., 14288., 12668., 13312., 13956., 14600., 12944., 13600., 14256., 14912., 13220., 13888., 14556., 15224., 13496., 14176., 14856., 15536., 13772., 14464., 15156., 15848., 14048., 14752., 15456., 16160., 12148., 12736., 13324., 13912., 12424., 13024., 13624., 14224., 12700., 13312., 13924., 14536., 12976., 13600., 14224., 14848., 15460., 16192., 16924., 17656., 15736., 16480., 17224., 17968., 16012., 16768., 17524., 18280., 16288., 17056., 17824., 18592., 16564., 17344., 18124., 18904., 16840., 17632., 18424., 19216., 17116., 17920., 18724., 19528., 17392., 18208., 19024., 19840., 17668., 18496., 19324., 20152., 17944., 18784., 19624., 20464., 18220., 19072., 19924., 20776., 18496., 19360., 20224., 21088., 18772., 19648., 20524., 21400., 19048., 19936., 20824., 21712., 17820., 18688., 19556., 20424., 18096., 18976., 19856., 20736., 18372., 19264., 20156., 21048., 18648., 19552., 20456., 21360., 18924., 19840., 20756., 21672., 19200., 20128., 21056., 21984., 16276., 17088., 17900., 18712., 16552., 17376., 18200., 19024., 16828., 17664., 18500., 19336., 17104., 17952., 18800., 19648., 16740., 17472., 18204., 18936., 17016., 17760., 18504., 19248., 17292., 18048., 18804., 19560., 17568., 18336., 19104., 19872., 19924., 20672., 21420., 22168., 20200., 20960., 21720., 22480., 20476., 21248., 22020., 22792., 20752., 21536., 22320., 23104., 21028., 21824., 22620., 23416., 21304., 22112., 22920., 23728., 21580., 22400., 23220., 24040., 21856., 22688., 23520., 24352., 22132., 22976., 23820., 24664., 22408., 23264., 24120., 24976., 22684., 23552., 24420., 25288., 22960., 23840., 24720., 25600., 18500., 19264., 20028., 20792., 18776., 19552., 20328., 21104.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11257., 11626., 11995., 12364., 12733., 13102., 13471., 13840., 16028., 16568., 17108., 17648., 18188., 18728., 19268., 19808., 15356., 15896., 16436., 16976., 12131., 12482., 12833., 13184., 10847., 11198., 11549., 11900., 12453., 12822., 13191., 13560., 10409., 10778., 11147., 11516., 16748., 17288., 17828., 18368., 16476., 17016., 17556., 18096., 18636., 19176., 19716., 20256.,  9911., 10262., 10613., 10964., 11315., 11666., 12017., 12368., 14024., 14480., 14936., 15392., 15848., 16304., 16760., 17216., 18474., 19140., 19806., 20472., 21138., 21804., 22470., 23136., 20346., 21012., 21678., 22344., 15024., 15456., 15888., 16320., 11760., 12192., 12624., 13056., 14632., 15088., 15544., 16000., 13640., 14096., 14552., 15008., 22626., 23292., 23958., 24624., 18570., 19236., 19902., 20568., 21234., 21900., 22566., 23232., 12912., 13344., 13776., 14208., 14640., 15072., 15504., 15936.,  9667.,  9982., 10297., 10612., 10927., 11242., 11557., 11872., 13643., 14102., 14561., 15020., 15479., 15938., 16397., 16856., 13091., 13550., 14009., 14468., 10325., 10622., 10919., 11216.,  9209.,  9506.,  9803., 10100., 10599., 10914., 11229., 11544.,  8915.,  9230.,  9545.,  9860., 14255., 14714., 15173., 15632., 14043., 14502., 14961., 15420., 15879., 16338., 16797., 17256.,  8417.,  8714.,  9011.,  9308.,  9605.,  9902., 10199., 10496.,  9739., 10054., 10369., 10684., 10999., 11314., 11629., 11944., 12051., 12510., 12969., 13428., 13887., 14346., 14805., 15264., 13547., 14006., 14465., 14924., 10349., 10646., 10943., 11240.,  7313.,  7610.,  7907.,  8204.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20110., 20188., 20266., 20344., 20422., 20500., 20578., 20656., 20734., 20812., 20890., 20968., 21046., 21124., 21202., 21280., 21358., 21436., 21514., 21592., 21670., 21748., 21826., 21904., 21982., 22060., 22138., 22216., 23542., 23620., 23698., 23776., 23854., 23932., 24010., 24088., 24166., 24244., 24322., 24400., 24478., 24556., 24634., 24712., 24790., 24868., 24946., 25024., 25102., 25180., 25258., 25336., 25414., 25492., 25570., 25648., 26974., 27052., 27130., 27208., 27286., 27364., 27442., 27520., 27598., 27676., 27754., 27832., 27910., 27988., 28066., 28144., 28222., 28300., 28378., 28456., 28534., 28612., 28690., 28768., 22702., 22780., 22858., 22936., 18630., 18708., 18786., 18864., 18942., 19020., 19098., 19176., 19254., 19332., 19410., 19488., 19566., 19644., 19722., 19800., 19878., 19956., 20034., 20112., 20190., 20268., 20346., 20424., 20502., 20580., 20658., 20736., 22062., 22140., 22218., 22296., 22374., 22452., 22530., 22608., 22686., 22764., 22842., 22920., 22998., 23076., 23154., 23232., 23310., 23388., 23466., 23544., 23622., 23700., 23778., 23856., 23934., 24012., 24090., 24168., 21398., 21476., 21554., 21632., 21710., 21788., 21866., 21944., 22022., 22100., 22178., 22256., 18750., 18828., 18906., 18984., 19062., 19140., 19218., 19296., 19374., 19452., 19530., 19608., 19686., 19764., 19842., 19920., 21246., 21324., 21402., 21480., 21558., 21636., 21714., 21792., 21870., 21948., 22026., 22104., 22182., 22260., 22338., 22416., 22494., 22572., 22650., 22728., 22806., 22884., 22962., 23040., 17998., 18076., 18154., 18232.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2304.,  2514.,  2544.,  2772.,  2784.,  3030.,  3024.,  3288.,  3264.,  3546.,  3504.,  3804.,  3744.,  4062.,  3984.,  4320.,  5277.,  5656.,  5658.,  6064.,  6039.,  6472.,  6420.,  6880.,  6801.,  7288.,  7182.,  7696.,  7563.,  8104.,  7944.,  8512.,  4005.,  4312.,  4386.,  4720.,  4767.,  5128.,  5148.,  5536.,  3788.,  4070.,  4056.,  4356.,  4324.,  4642.,  4592.,  4928.,  4252.,  4510.,  4520.,  4796.,  4788.,  5082.,  5056.,  5368.,  4384.,  4714.,  4624.,  4972.,  4864.,  5230.,  5104.,  5488.,  2784.,  2994.,  3024.,  3252.,  3264.,  3510.,  3504.,  3768.,  5529.,  5944.,  5910.,  6352.,  6291.,  6760.,  6672.,  7168.,  6157.,  6552.,  6538.,  6960.,  6919.,  7368.,  7300.,  7776.,  7681.,  8184.,  8062.,  8592.,  8443.,  9000.,  8824.,  9408.,  3196.,  3406.,  3464.,  3692.,  3732.,  3978.,  4000.,  4264.,  4268.,  4550.,  4536.,  4836.,  4804.,  5122.,  5072.,  5408.,  5272.,  5616.,  5616.,  5984.,  5960.,  6352.,  6304.,  6720.,  6648.,  7088.,  6992.,  7456.,  7336.,  7824.,  7680.,  8192.,  6256.,  6676.,  6784.,  7240.,  7312.,  7804.,  7840.,  8368.,  8368.,  8932.,  8896.,  9496.,  9424., 10060.,  9952., 10624.,  7472.,  7988.,  8000.,  8552.,  8528.,  9116.,  9056.,  9680.,  6344.,  6784.,  6704.,  7168.,  7064.,  7552.,  7424.,  7936.,  3944.,  4224.,  4304.,  4608.,  4664.,  4992.,  5024.,  5376.,  5048.,  5424.,  5392.,  5792.,  5736.,  6160.,  6080.,  6528.,  4760.,  5104.,  5104.,  5472.,  5448.,  5840.,  5792.,  6208.,  9584., 10244., 10112., 10808., 10640., 11372., 11168., 11936.,  6064.,  6484.,  6592.,  7048.,  7120.,  7612.,  7648.,  8176.,  8176.,  8740.,  8704.,  9304.,  9232.,  9868.,  9760., 10432.,  5416.,  5760.,  5776.,  6144.,  6136.,  6528.,  6496.,  6912.,  6856.,  7296.,  7216.,  7680.,  7576.,  8064.,  7936.,  8448.,  3220.,  3430.,  3480.,  3708.,  3740.,  3986.,  4000.,  4264.,  4260.,  4542.,  4520.,  4820.,  4780.,  5098.,  5040.,  5376.,  6011.,  6390.,  6422.,  6828.,  6833.,  7266.,  7244.,  7704.,  7655.,  8142.,  8066.,  8580.,  8477.,  9018.,  8888.,  9456.,  4659.,  4966.,  5070.,  5404.,  5481.,  5842.,  5892.,  6280.,  4784.,  5066.,  5072.,  5372.,  5360.,  5678.,  5648.,  5984.,  3856.,  4114.,  4144.,  4420.,  4432.,  4726.,  4720.,  5032.,  5092.,  5422.,  5352.,  5700.,  5612.,  5978.,  5872.,  6256.,  2676.,  2886.,  2936.,  3164.,  3196.,  3442.,  3456.,  3720.,  6303.,  6718.,  6714.,  7156.,  7125.,  7594.,  7536.,  8032.,  5771.,  6166.,  6182.,  6604.,  6593.,  7042.,  7004.,  7480.,  7415.,  7918.,  7826.,  8356.,  8237.,  8794.,  8648.,  9232.,  3088.,  3298.,  3376.,  3604.,  3664.,  3910.,  3952.,  4216.,  4240.,  4522.,  4528.,  4828.,  4816.,  5134.,  5104.,  5440.,  3572.,  3830.,  3832.,  4108.,  4092.,  4386.,  4352.,  4664.,  4612.,  4942.,  4872.,  5220.,  5132.,  5498.,  5392.,  5776.,  4931.,  5254.,  5342.,  5692.,  5753.,  6130.,  6164.,  6568.,  6575.,  7006.,  6986.,  7444.,  7397.,  7882.,  7808.,  8320.,  6011.,  6390.,  6422.,  6828.,  6833.,  7266.,  7244.,  7704.,  5552.,  5882.,  5840.,  6188.,  6128.,  6494.,  6416.,  6800.,  3632.,  3842.,  3920.,  4148.,  4208.,  4454.,  4496.,  4760.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19376., 20764., 19520., 20920., 19664., 21076., 19808., 21232., 19952., 21388., 20096., 21544., 20240., 21700., 20384., 21856., 20528., 22012., 20672., 22168., 20816., 22324., 20960., 22480., 21104., 22636., 21248., 22792., 21392., 22948., 21536., 23104., 21680., 23260., 21824., 23416., 21968., 23572., 22112., 23728., 22256., 23884., 22400., 24040., 22544., 24196., 22688., 24352., 22832., 24508., 22976., 24664., 23120., 24820., 23264., 24976., 20848., 22508., 20992., 22664., 21136., 22820., 21280., 22976., 17072., 18524., 17216., 18680., 17360., 18836., 17504., 18992., 17648., 19148., 17792., 19304., 17936., 19460., 18080., 19616., 18224., 19772., 18368., 19928., 18512., 20084., 18656., 20240., 18800., 20396., 18944., 20552., 19088., 20708., 19232., 20864., 17584., 18972., 17728., 19128., 17872., 19284., 18016., 19440., 18160., 19596., 18304., 19752., 18448., 19908., 18592., 20064., 19760., 21180., 19904., 21336., 20048., 21492., 20192., 21648., 20336., 21804., 20480., 21960., 20624., 22116., 20768., 22272., 20912., 22428., 21056., 22584., 21200., 22740., 21344., 22896., 21488., 23052., 21632., 23208., 21776., 23364., 21920., 23520., 22064., 23676., 22208., 23832., 22352., 23988., 22496., 24144., 22640., 24300., 22784., 24456., 22928., 24612., 23072., 24768., 17328., 18780., 17472., 18936., 17616., 19092., 17760., 19248., 14832., 16268., 14976., 16424., 15120., 16580., 15264., 16736., 12592., 13820., 12736., 13976., 12880., 14132., 13024., 14288., 13168., 14444., 13312., 14600., 13456., 14756., 13600., 14912., 13744., 15068., 13888., 15224., 14032., 15380., 14176., 15536., 14320., 15692., 14464., 15848., 14608., 16004., 14752., 16160., 12592., 13756., 12736., 13912., 12880., 14068., 13024., 14224., 13168., 14380., 13312., 14536., 13456., 14692., 13600., 14848., 16048., 17500., 16192., 17656., 16336., 17812., 16480., 17968., 16624., 18124., 16768., 18280., 16912., 18436., 17056., 18592., 17200., 18748., 17344., 18904., 17488., 19060., 17632., 19216., 17776., 19372., 17920., 19528., 18064., 19684., 18208., 19840., 18352., 19996., 18496., 20152., 18640., 20308., 18784., 20464., 18928., 20620., 19072., 20776., 19216., 20932., 19360., 21088., 19504., 21244., 19648., 21400., 19792., 21556., 19936., 21712., 18544., 20268., 18688., 20424., 18832., 20580., 18976., 20736., 19120., 20892., 19264., 21048., 19408., 21204., 19552., 21360., 19696., 21516., 19840., 21672., 19984., 21828., 20128., 21984., 16944., 18556., 17088., 18712., 17232., 18868., 17376., 19024., 17520., 19180., 17664., 19336., 17808., 19492., 17952., 19648., 17328., 18780., 17472., 18936., 17616., 19092., 17760., 19248., 17904., 19404., 18048., 19560., 18192., 19716., 18336., 19872., 20528., 22012., 20672., 22168., 20816., 22324., 20960., 22480., 21104., 22636., 21248., 22792., 21392., 22948., 21536., 23104., 21680., 23260., 21824., 23416., 21968., 23572., 22112., 23728., 22256., 23884., 22400., 24040., 22544., 24196., 22688., 24352., 22832., 24508., 22976., 24664., 23120., 24820., 23264., 24976., 23408., 25132., 23552., 25288., 23696., 25444., 23840., 25600., 19120., 20636., 19264., 20792., 19408., 20948., 19552., 21104.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3182.,  3392.,  3602.,  3812.,  3452.,  3680.,  3908.,  4136.,  3722.,  3968.,  4214.,  4460.,  3992.,  4256.,  4520.,  4784.,  4262.,  4544.,  4826.,  5108.,  4532.,  4832.,  5132.,  5432.,  4802.,  5120.,  5438.,  5756.,  5072.,  5408.,  5744.,  6080.,  5503.,  5882.,  6261.,  6640.,  5918.,  6324.,  6730.,  7136.,  6333.,  6766.,  7199.,  7632.,  6748.,  7208.,  7668.,  8128.,  7163.,  7650.,  8137.,  8624.,  7578.,  8092.,  8606.,  9120.,  7993.,  8534.,  9075.,  9616.,  8408.,  8976.,  9544., 10112.,  4567.,  4874.,  5181.,  5488.,  4982.,  5316.,  5650.,  5984.,  5397.,  5758.,  6119.,  6480.,  5812.,  6200.,  6588.,  6976.,  4382.,  4664.,  4946.,  5228.,  4676.,  4976.,  5276.,  5576.,  4970.,  5288.,  5606.,  5924.,  5264.,  5600.,  5936.,  6272.,  4438.,  4696.,  4954.,  5212.,  4732.,  5008.,  5284.,  5560.,  5026.,  5320.,  5614.,  5908.,  5320.,  5632.,  5944.,  6256.,  4918.,  5248.,  5578.,  5908.,  5188.,  5536.,  5884.,  6232.,  5458.,  5824.,  6190.,  6556.,  5728.,  6112.,  6496.,  6880.,  3118.,  3328.,  3538.,  3748.,  3388.,  3616.,  3844.,  4072.,  3658.,  3904.,  4150.,  4396.,  3928.,  4192.,  4456.,  4720.,  6227.,  6642.,  7057.,  7472.,  6642.,  7084.,  7526.,  7968.,  7057.,  7526.,  7995.,  8464.,  7472.,  7968.,  8464.,  8960.,  6223.,  6618.,  7013.,  7408.,  6638.,  7060.,  7482.,  7904.,  7053.,  7502.,  7951.,  8400.,  7468.,  7944.,  8420.,  8896.,  7883.,  8386.,  8889.,  9392.,  8298.,  8828.,  9358.,  9888.,  8713.,  9270.,  9827., 10384.,  9128.,  9712., 10296., 10880.,  3654.,  3864.,  4074.,  4284.,  3948.,  4176.,  4404.,  4632.,  4242.,  4488.,  4734.,  4980.,  4536.,  4800.,  5064.,  5328.,  4830.,  5112.,  5394.,  5676.,  5124.,  5424.,  5724.,  6024.,  5418.,  5736.,  6054.,  6372.,  5712.,  6048.,  6384.,  6720.,  4760.,  5104.,  5448.,  5792.,  5104.,  5472.,  5840.,  6208.,  5448.,  5840.,  6232.,  6624.,  5792.,  6208.,  6624.,  7040.,  6136.,  6576.,  7016.,  7456.,  6480.,  6944.,  7408.,  7872.,  6824.,  7312.,  7800.,  8288.,  7168.,  7680.,  8192.,  8704.,  6460.,  6880.,  7300.,  7720.,  6968.,  7424.,  7880.,  8336.,  7476.,  7968.,  8460.,  8952.,  7984.,  8512.,  9040.,  9568.,  8492.,  9056.,  9620., 10184.,  9000.,  9600., 10200., 10800.,  9508., 10144., 10780., 11416., 10016., 10688., 11360., 12032.,  6748.,  7264.,  7780.,  8296.,  7256.,  7808.,  8360.,  8912.,  7764.,  8352.,  8940.,  9528.,  8272.,  8896.,  9520., 10144.,  5880.,  6320.,  6760.,  7200.,  6224.,  6688.,  7152.,  7616.,  6568.,  7056.,  7544.,  8032.,  6912.,  7424.,  7936.,  8448.,  3928.,  4208.,  4488.,  4768.,  4272.,  4576.,  4880.,  5184.,  4616.,  4944.,  5272.,  5600.,  4960.,  5312.,  5664.,  6016.,  5560.,  5936.,  6312.,  6688.,  5904.,  6304.,  6704.,  7104.,  6248.,  6672.,  7096.,  7520.,  6592.,  7040.,  7488.,  7936.,  4760.,  5104.,  5448.,  5792.,  5104.,  5472.,  5840.,  6208.,  5448.,  5840.,  6232.,  6624.,  5792.,  6208.,  6624.,  7040.,  8780.,  9440., 10100., 10760.,  9288.,  9984., 10680., 11376.,  9796., 10528., 11260., 11992., 10304., 11072., 11840., 12608.,  6076.,  6496.,  6916.,  7336.,  6584.,  7040.,  7496.,  7952.,  7092.,  7584.,  8076.,  8568.,  7600.,  8128.,  8656.,  9184.,  8108.,  8672.,  9236.,  9800.,  8616.,  9216.,  9816., 10416.,  9124.,  9760., 10396., 11032.,  9632., 10304., 10976., 11648.,  5016.,  5360.,  5704.,  6048.,  5360.,  5728.,  6096.,  6464.,  5704.,  6096.,  6488.,  6880.,  6048.,  6464.,  6880.,  7296.,  6392.,  6832.,  7272.,  7712.,  6736.,  7200.,  7664.,  8128.,  7080.,  7568.,  8056.,  8544.,  7424.,  7936.,  8448.,  8960.,  2902.,  3112.,  3322.,  3532.,  3148.,  3376.,  3604.,  3832.,  3394.,  3640.,  3886.,  4132.,  3640.,  3904.,  4168.,  4432.,  3886.,  4168.,  4450.,  4732.,  4132.,  4432.,  4732.,  5032.,  4378.,  4696.,  5014.,  5332.,  4624.,  4960.,  5296.,  5632.,  5339.,  5718.,  6097.,  6476.,  5718.,  6124.,  6530.,  6936.,  6097.,  6530.,  6963.,  7396.,  6476.,  6936.,  7396.,  7856.,  6855.,  7342.,  7829.,  8316.,  7234.,  7748.,  8262.,  8776.,  7613.,  8154.,  8695.,  9236.,  7992.,  8560.,  9128.,  9696.,  4499.,  4806.,  5113.,  5420.,  4878.,  5212.,  5546.,  5880.,  5257.,  5618.,  5979.,  6340.,  5636.,  6024.,  6412.,  6800.,  4518.,  4800.,  5082.,  5364.,  4788.,  5088.,  5388.,  5688.,  5058.,  5376.,  5694.,  6012.,  5328.,  5664.,  6000.,  6336.,  3582.,  3840.,  4098.,  4356.,  3852.,  4128.,  4404.,  4680.,  4122.,  4416.,  4710.,  5004.,  4392.,  4704.,  5016.,  5328.,  4478.,  4808.,  5138.,  5468.,  4724.,  5072.,  5420.,  5768.,  4970.,  5336.,  5702.,  6068.,  5216.,  5600.,  5984.,  6368.,  2838.,  3048.,  3258.,  3468.,  3084.,  3312.,  3540.,  3768.,  3330.,  3576.,  3822.,  4068.,  3576.,  3840.,  4104.,  4368.,  6015.,  6430.,  6845.,  7260.,  6394.,  6836.,  7278.,  7720.,  6773.,  7242.,  7711.,  8180.,  7152.,  7648.,  8144.,  8640.,  5355.,  5750.,  6145.,  6540.,  5734.,  6156.,  6578.,  7000.,  6113.,  6562.,  7011.,  7460.,  6492.,  6968.,  7444.,  7920.,  6871.,  7374.,  7877.,  8380.,  7250.,  7780.,  8310.,  8840.,  7629.,  8186.,  8743.,  9300.,  8008.,  8592.,  9176.,  9760.,  2862.,  3072.,  3282.,  3492.,  3132.,  3360.,  3588.,  3816.,  3402.,  3648.,  3894.,  4140.,  3672.,  3936.,  4200.,  4464.,  3942.,  4224.,  4506.,  4788.,  4212.,  4512.,  4812.,  5112.,  4482.,  4800.,  5118.,  5436.,  4752.,  5088.,  5424.,  5760.,  3558.,  3816.,  4074.,  4332.,  3804.,  4080.,  4356.,  4632.,  4050.,  4344.,  4638.,  4932.,  4296.,  4608.,  4920.,  5232.,  4542.,  4872.,  5202.,  5532.,  4788.,  5136.,  5484.,  5832.,  5034.,  5400.,  5766.,  6132.,  5280.,  5664.,  6048.,  6432.,  4515.,  4838.,  5161.,  5484.,  4894.,  5244.,  5594.,  5944.,  5273.,  5650.,  6027.,  6404.,  5652.,  6056.,  6460.,  6864.,  6031.,  6462.,  6893.,  7324.,  6410.,  6868.,  7326.,  7784.,  6789.,  7274.,  7759.,  8244.,  7168.,  7680.,  8192.,  8704.,  5339.,  5718.,  6097.,  6476.,  5718.,  6124.,  6530.,  6936.,  6097.,  6530.,  6963.,  7396.,  6476.,  6936.,  7396.,  7856.,  5238.,  5568.,  5898.,  6228.,  5508.,  5856.,  6204.,  6552.,  5778.,  6144.,  6510.,  6876.,  6048.,  6432.,  6816.,  7200.,  3438.,  3648.,  3858.,  4068.,  3708.,  3936.,  4164.,  4392.,  3978.,  4224.,  4470.,  4716.,  4248.,  4512.,  4776.,  5040.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14580., 15200., 15820., 16440., 14856., 15488., 16120., 16752., 15132., 15776., 16420., 17064., 15408., 16064., 16720., 17376., 15684., 16352., 17020., 17688., 15960., 16640., 17320., 18000., 16236., 16928., 17620., 18312., 16512., 17216., 17920., 18624., 14100., 14688., 15276., 15864., 14376., 14976., 15576., 16176., 14652., 15264., 15876., 16488., 14928., 15552., 16176., 16800., 15204., 15840., 16476., 17112., 15480., 16128., 16776., 17424., 15756., 16416., 17076., 17736., 16032., 16704., 17376., 18048., 16308., 16992., 17676., 18360., 16584., 17280., 17976., 18672., 16860., 17568., 18276., 18984., 17136., 17856., 18576., 19296., 17412., 18144., 18876., 19608., 17688., 18432., 19176., 19920., 17964., 18720., 19476., 20232., 18240., 19008., 19776., 20544., 16340., 16992., 17644., 18296., 16616., 17280., 17944., 18608., 16892., 17568., 18244., 18920., 17168., 17856., 18544., 19232., 17124., 17888., 18652., 19416., 17400., 18176., 18952., 19728., 17676., 18464., 19252., 20040., 17952., 18752., 19552., 20352., 14004., 14688., 15372., 16056., 14280., 14976., 15672., 16368., 14556., 15264., 15972., 16680., 14832., 15552., 16272., 16992., 15108., 15840., 16572., 17304., 15384., 16128., 16872., 17616., 15660., 16416., 17172., 17928., 15936., 16704., 17472., 18240., 16212., 16992., 17772., 18552., 16488., 17280., 18072., 18864., 16764., 17568., 18372., 19176., 17040., 17856., 18672., 19488., 17316., 18144., 18972., 19800., 17592., 18432., 19272., 20112., 17868., 18720., 19572., 20424., 18144., 19008., 19872., 20736., 16756., 17504., 18252., 19000., 17032., 17792., 18552., 19312., 17308., 18080., 18852., 19624., 17584., 18368., 19152., 19936., 17860., 18656., 19452., 20248., 18136., 18944., 19752., 20560., 18412., 19232., 20052., 20872., 18688., 19520., 20352., 21184., 18516., 19296., 20076., 20856., 18792., 19584., 20376., 21168., 19068., 19872., 20676., 21480., 19344., 20160., 20976., 21792., 19620., 20448., 21276., 22104., 19896., 20736., 21576., 22416., 20172., 21024., 21876., 22728., 20448., 21312., 22176., 23040., 20724., 21600., 22476., 23352., 21000., 21888., 22776., 23664., 21276., 22176., 23076., 23976., 21552., 22464., 23376., 24288., 21828., 22752., 23676., 24600., 22104., 23040., 23976., 24912., 22380., 23328., 24276., 25224., 22656., 23616., 24576., 25536., 19732., 20576., 21420., 22264., 20008., 20864., 21720., 22576., 20284., 21152., 22020., 22888., 20560., 21440., 22320., 23200., 20836., 21728., 22620., 23512., 21112., 22016., 22920., 23824., 21388., 22304., 23220., 24136., 21664., 22592., 23520., 24448., 15540., 16224., 16908., 17592., 15816., 16512., 17208., 17904., 16092., 16800., 17508., 18216., 16368., 17088., 17808., 18528., 15684., 16352., 17020., 17688., 15960., 16640., 17320., 18000., 16236., 16928., 17620., 18312., 16512., 17216., 17920., 18624., 14100., 14688., 15276., 15864., 14376., 14976., 15576., 16176., 14652., 15264., 15876., 16488., 14928., 15552., 16176., 16800., 15204., 15840., 16476., 17112., 15480., 16128., 16776., 17424., 15756., 16416., 17076., 17736., 16032., 16704., 17376., 18048., 16308., 16992., 17676., 18360., 16584., 17280., 17976., 18672., 16860., 17568., 18276., 18984., 17136., 17856., 18576., 19296., 17412., 18144., 18876., 19608., 17688., 18432., 19176., 19920., 17964., 18720., 19476., 20232., 18240., 19008., 19776., 20544., 16340., 16992., 17644., 18296., 16616., 17280., 17944., 18608., 16892., 17568., 18244., 18920., 17168., 17856., 18544., 19232., 17444., 18144., 18844., 19544., 17720., 18432., 19144., 19856., 17996., 18720., 19444., 20168., 18272., 19008., 19744., 20480., 14004., 14688., 15372., 16056., 14280., 14976., 15672., 16368., 14556., 15264., 15972., 16680., 14832., 15552., 16272., 16992., 15108., 15840., 16572., 17304., 15384., 16128., 16872., 17616., 15660., 16416., 17172., 17928., 15936., 16704., 17472., 18240., 16212., 16992., 17772., 18552., 16488., 17280., 18072., 18864., 16764., 17568., 18372., 19176., 17040., 17856., 18672., 19488., 17316., 18144., 18972., 19800., 17592., 18432., 19272., 20112., 17868., 18720., 19572., 20424., 18144., 19008., 19872., 20736., 16756., 17504., 18252., 19000., 17032., 17792., 18552., 19312., 17308., 18080., 18852., 19624., 17584., 18368., 19152., 19936., 17860., 18656., 19452., 20248., 18136., 18944., 19752., 20560., 18412., 19232., 20052., 20872., 18688., 19520., 20352., 21184., 18964., 19808., 20652., 21496., 19240., 20096., 20952., 21808., 19516., 20384., 21252., 22120., 19792., 20672., 21552., 22432., 19620., 20448., 21276., 22104., 19896., 20736., 21576., 22416., 20172., 21024., 21876., 22728., 20448., 21312., 22176., 23040., 20724., 21600., 22476., 23352., 21000., 21888., 22776., 23664., 21276., 22176., 23076., 23976., 21552., 22464., 23376., 24288., 21828., 22752., 23676., 24600., 22104., 23040., 23976., 24912., 22380., 23328., 24276., 25224., 22656., 23616., 24576., 25536., 19732., 20576., 21420., 22264., 20008., 20864., 21720., 22576., 20284., 21152., 22020., 22888., 20560., 21440., 22320., 23200., 20836., 21728., 22620., 23512., 21112., 22016., 22920., 23824., 21388., 22304., 23220., 24136., 21664., 22592., 23520., 24448., 15540., 16224., 16908., 17592., 15816., 16512., 17208., 17904., 16092., 16800., 17508., 18216., 16368., 17088., 17808., 18528., 16644., 17376., 18108., 18840., 16920., 17664., 18408., 19152., 17196., 17952., 18708., 19464., 17472., 18240., 19008., 19776., 14100., 14688., 15276., 15864., 14376., 14976., 15576., 16176., 14652., 15264., 15876., 16488., 14928., 15552., 16176., 16800., 15204., 15840., 16476., 17112., 15480., 16128., 16776., 17424., 15756., 16416., 17076., 17736., 16032., 16704., 17376., 18048., 16308., 16992., 17676., 18360., 16584., 17280., 17976., 18672., 16860., 17568., 18276., 18984., 17136., 17856., 18576., 19296., 17412., 18144., 18876., 19608., 17688., 18432., 19176., 19920., 17964., 18720., 19476., 20232., 18240., 19008., 19776., 20544., 16340., 16992., 17644., 18296., 16616., 17280., 17944., 18608., 16892., 17568., 18244., 18920., 17168., 17856., 18544., 19232., 17444., 18144., 18844., 19544., 17720., 18432., 19144., 19856., 17996., 18720., 19444., 20168., 18272., 19008., 19744., 20480., 13812., 14432., 15052., 15672., 14088., 14720., 15352., 15984., 14364., 15008., 15652., 16296., 14640., 15296., 15952., 16608.};
  const std::array<int, 4> in_shape = {{ 3, 14, 11, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11880., 16116., 16656., 17196., 17736., 10939., 11290., 13492., 18628., 19168., 19708., 20248., 12015., 12366., 15400., 20370., 21036., 21702., 22368., 13576., 14008., 15368., 20618., 21284., 21950., 22616., 12744., 13176., 10116., 13743., 14202., 14661., 15120.,  9313.,  9610., 11656., 16051., 16510., 16969., 17428., 10317., 10614., 10956., 14199., 14658., 15117., 15576.,  9337.,  9634.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20886., 20964., 21042., 21120., 21198., 21276., 21354., 21822., 21900., 21978., 22056., 22134., 22212., 22290., 22758., 22836., 22914., 22992., 23070., 23148., 23226., 23694., 23772., 23850., 23928., 24006., 24084., 24162., 24630., 24708., 24786., 24864., 24942., 25020., 25098., 25566., 25644., 25722., 25800., 25878., 25956., 26034., 26502., 26580., 26658., 26736., 26814., 26892., 26970.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4740.,  5072.,  5713.,  6088.,  6094.,  6496.,  6475.,  6904.,  6856.,  7312.,  3544.,  3798.,  3812.,  4084.,  4260.,  4584.,  6061.,  6504.,  6442.,  6912.,  6823.,  7320.,  7204.,  7728.,  4616.,  4926.,  4884.,  5212.,  5568.,  5968.,  7920.,  8420.,  8448.,  8984.,  8976.,  9548.,  9504., 10112.,  6344.,  6704.,  6704.,  7088.,  6880.,  7312.,  8112.,  8660.,  8640.,  9224.,  9168.,  9788.,  9696., 10352.,  4456.,  4784.,  4816.,  5168.,  4540.,  4872.,  5191.,  5566.,  5602.,  6004.,  6013.,  6442.,  6424.,  6880.,  3940.,  4194.,  4228.,  4500.,  4620.,  4944.,  7435.,  7878.,  7846.,  8316.,  8257.,  8754.,  8668.,  9192.,  5188.,  5498.,  5476.,  5804.,  4764.,  5080.,  5519.,  5902.,  5930.,  6340.,  6341.,  6778.,  6752.,  7216.,  3972.,  4242.,  4260.,  4548.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18952., 20268., 19096., 20424., 19240., 20580., 19384., 20736., 19528., 20892., 19672., 21048., 19816., 21204., 20680., 22140., 20824., 22296., 20968., 22452., 21112., 22608., 21256., 22764., 21400., 22920., 21544., 23076., 22408., 24012., 22552., 24168., 22696., 24324., 22840., 24480., 22984., 24636., 23128., 24792., 23272., 24948., 20296., 21788., 20440., 21944., 20584., 22100., 20728., 22256., 17544., 18828., 17688., 18984., 17832., 19140., 18696., 20076., 18840., 20232., 18984., 20388., 19128., 20544., 19272., 20700., 19416., 20856., 19560., 21012., 20424., 21948., 20568., 22104., 20712., 22260., 20856., 22416., 21000., 22572., 21144., 22728., 21288., 22884., 22152., 23820., 22296., 23976., 22440., 24132., 22584., 24288., 22728., 24444., 22872., 24600., 23016., 24756.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4924.,  5256.,  5588.,  5920.,  5739.,  6114.,  6489.,  6864.,  6154.,  6556.,  6958.,  7360.,  6569.,  6998.,  7427.,  7856.,  6984.,  7440.,  7896.,  8352.,  3794.,  4048.,  4302.,  4556.,  4088.,  4360.,  4632.,  4904.,  4740.,  5064.,  5388.,  5712.,  6623.,  7066.,  7509.,  7952.,  7038.,  7508.,  7978.,  8448.,  7453.,  7950.,  8447.,  8944.,  7868.,  8392.,  8916.,  9440.,  5242.,  5552.,  5862.,  6172.,  5536.,  5864.,  6192.,  6520.,  5744.,  6144.,  6544.,  6944.,  7276.,  7776.,  8276.,  8776.,  7784.,  8320.,  8856.,  9392.,  8292.,  8864.,  9436., 10008.,  8800.,  9408., 10016., 10624.,  5576.,  5936.,  6296.,  6656.,  5920.,  6304.,  6688.,  7072.,  6544.,  6976.,  7408.,  7840.,  7612.,  8160.,  8708.,  9256.,  8120.,  8704.,  9288.,  9872.,  8628.,  9248.,  9868., 10488.,  9136.,  9792., 10448., 11104.,  4776.,  5104.,  5432.,  5760.,  5120.,  5472.,  5824.,  6176.,  4140.,  4472.,  4804.,  5136.,  5239.,  5614.,  5989.,  6364.,  5618.,  6020.,  6422.,  6824.,  5997.,  6426.,  6855.,  7284.,  6376.,  6832.,  7288.,  7744.,  3626.,  3880.,  4134.,  4388.,  3896.,  4168.,  4440.,  4712.,  4308.,  4632.,  4956.,  5280.,  6715.,  7158.,  7601.,  8044.,  7094.,  7564.,  8034.,  8504.,  7473.,  7970.,  8467.,  8964.,  7852.,  8376.,  8900.,  9424.,  4658.,  4968.,  5278.,  5588.,  4928.,  5256.,  5584.,  5912.,  4604.,  4920.,  5236.,  5552.,  5119.,  5502.,  5885.,  6268.,  5498.,  5908.,  6318.,  6728.,  5877.,  6314.,  6751.,  7188.,  6256.,  6720.,  7184.,  7648.,  3930.,  4200.,  4470.,  4740.,  4200.,  4488.,  4776.,  5064.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13804., 14352., 14900., 15448., 14080., 14640., 15200., 15760., 14356., 14928., 15500., 16072., 14632., 15216., 15800., 16384., 14908., 15504., 16100., 16696., 15184., 15792., 16400., 17008., 15460., 16080., 16700., 17320., 17116., 17808., 18500., 19192., 17392., 18096., 18800., 19504., 17668., 18384., 19100., 19816., 17944., 18672., 19400., 20128., 18220., 18960., 19700., 20440., 18496., 19248., 20000., 20752., 18772., 19536., 20300., 21064., 20428., 21264., 22100., 22936., 20704., 21552., 22400., 23248., 20980., 21840., 22700., 23560., 21256., 22128., 23000., 23872., 21532., 22416., 23300., 24184., 21808., 22704., 23600., 24496., 22084., 22992., 23900., 24808., 20028., 20880., 21732., 22584., 20304., 21168., 22032., 22896., 20580., 21456., 22332., 23208., 20856., 21744., 22632., 23520., 17932., 18704., 19476., 20248., 18208., 18992., 19776., 20560., 18484., 19280., 20076., 20872., 11180., 11792., 12404., 13016., 11456., 12080., 12704., 13328., 11732., 12368., 13004., 13640., 12008., 12656., 13304., 13952., 12284., 12944., 13604., 14264., 12560., 13232., 13904., 14576., 12836., 13520., 14204., 14888., 14492., 15248., 16004., 16760., 14768., 15536., 16304., 17072., 15044., 15824., 16604., 17384., 15320., 16112., 16904., 17696., 15596., 16400., 17204., 18008., 15872., 16688., 17504., 18320., 16148., 16976., 17804., 18632., 17804., 18704., 19604., 20504., 18080., 18992., 19904., 20816., 18356., 19280., 20204., 21128., 18632., 19568., 20504., 21440., 17244., 18064., 18884., 19704., 17520., 18352., 19184., 20016., 17796., 18640., 19484., 20328.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12511., 12880., 14028., 14568., 15108., 15648., 16188., 16728., 17268., 17808.,  9495.,  9846., 10197., 10548., 13687., 14056., 18412., 18952., 19492., 20032., 20572., 21112., 21652., 22192., 12543., 12894., 13245., 13596., 14984., 15440., 17994., 18660., 19326., 19992., 20658., 21324., 21990., 22656., 12512., 12944., 13376., 13808., 15688., 16144., 19258., 19924., 20590., 21256., 21922., 22588., 23254., 23920., 11232., 11664., 12096., 12528., 10573., 10888., 11859., 12318., 12777., 13236., 13695., 14154., 14613., 15072.,  8025.,  8322.,  8619.,  8916., 11797., 12112., 15835., 16294., 16753., 17212., 17671., 18130., 18589., 19048., 10737., 11034., 11331., 11628., 10013., 10328., 11427., 11886., 12345., 12804., 13263., 13722., 14181., 14640.,  7817.,  8114.,  8411.,  8708.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20190., 20268., 20346., 20424., 20502., 20580., 20658., 20736., 20814., 20892., 20970., 21048., 21126., 21204., 22062., 22140., 22218., 22296., 22374., 22452., 22530., 22608., 22686., 22764., 22842., 22920., 22998., 23076., 23934., 24012., 24090., 24168., 24246., 24324., 24402., 24480., 24558., 24636., 24714., 24792., 24870., 24948., 21710., 21788., 21866., 21944., 22022., 22100., 22178., 22256., 18750., 18828., 18906., 18984., 19062., 19140., 19998., 20076., 20154., 20232., 20310., 20388., 20466., 20544., 20622., 20700., 20778., 20856., 20934., 21012., 21870., 21948., 22026., 22104., 22182., 22260., 22338., 22416., 22494., 22572., 22650., 22728., 22806., 22884., 23742., 23820., 23898., 23976., 24054., 24132., 24210., 24288., 24366., 24444., 24522., 24600., 24678., 24756.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5656.,  6046.,  5896.,  6304.,  5029.,  5368.,  5410.,  5776.,  5791.,  6184.,  6172.,  6592.,  6553.,  7000.,  6934.,  7408.,  7315.,  7816.,  7696.,  8224.,  3236.,  3470.,  3504.,  3756.,  3772.,  4042.,  4040.,  4328.,  4408.,  4750.,  4648.,  5008.,  6237.,  6648.,  6618.,  7056.,  6999.,  7464.,  7380.,  7872.,  7761.,  8280.,  8142.,  8688.,  8523.,  9096.,  8904.,  9504.,  4484.,  4766.,  4752.,  5052.,  5020.,  5338.,  5288.,  5624.,  5416.,  5808.,  5760.,  6176.,  5648.,  6036.,  6176.,  6600.,  6704.,  7164.,  7232.,  7728.,  7760.,  8292.,  8288.,  8856.,  8816.,  9420.,  9344.,  9984.,  5032.,  5344.,  5392.,  5728.,  5752.,  6112.,  6112.,  6496.,  6760.,  7216.,  7104.,  7584.,  6800.,  7284.,  7328.,  7848.,  7856.,  8412.,  8384.,  8976.,  8912.,  9540.,  9440., 10104.,  9968., 10668., 10496., 11232.,  3688.,  3936.,  4048.,  4320.,  4408.,  4704.,  4768.,  5088.,  5748.,  6138.,  6008.,  6416.,  5235.,  5574.,  5646.,  6012.,  6057.,  6450.,  6468.,  6888.,  6879.,  7326.,  7290.,  7764.,  7701.,  8202.,  8112.,  8640.,  3496.,  3730.,  3784.,  4036.,  4072.,  4342.,  4360.,  4648.,  4788.,  5130.,  5048.,  5408.,  6523.,  6934.,  6934.,  7372.,  7345.,  7810.,  7756.,  8248.,  8167.,  8686.,  8578.,  9124.,  8989.,  9562.,  9400., 10000.,  4456.,  4738.,  4744.,  5044.,  5032.,  5350.,  5320.,  5656.,  4020.,  4314.,  4280.,  4592.,  4355.,  4646.,  4766.,  5084.,  5177.,  5522.,  5588.,  5960.,  5999.,  6398.,  6410.,  6836.,  6821.,  7274.,  7232.,  7712.,  4104.,  4338.,  4392.,  4644.,  4680.,  4950.,  4968.,  5256.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14208., 15292., 14352., 15448., 14496., 15604., 14640., 15760., 14784., 15916., 14928., 16072., 15072., 16228., 15216., 16384., 15360., 16540., 15504., 16696., 15648., 16852., 15792., 17008., 15936., 17164., 16080., 17320., 17664., 19036., 17808., 19192., 17952., 19348., 18096., 19504., 18240., 19660., 18384., 19816., 18528., 19972., 18672., 20128., 18816., 20284., 18960., 20440., 19104., 20596., 19248., 20752., 19392., 20908., 19536., 21064., 21120., 22780., 21264., 22936., 21408., 23092., 21552., 23248., 21696., 23404., 21840., 23560., 21984., 23716., 22128., 23872., 22272., 24028., 22416., 24184., 22560., 24340., 22704., 24496., 22848., 24652., 22992., 24808., 20736., 22428., 20880., 22584., 21024., 22740., 21168., 22896., 21312., 23052., 21456., 23208., 21600., 23364., 21744., 23520., 18560., 20092., 18704., 20248., 18848., 20404., 18992., 20560., 19136., 20716., 19280., 20872., 11648., 12860., 11792., 13016., 11936., 13172., 12080., 13328., 12224., 13484., 12368., 13640., 12512., 13796., 12656., 13952., 12800., 14108., 12944., 14264., 13088., 14420., 13232., 14576., 13376., 14732., 13520., 14888., 15104., 16604., 15248., 16760., 15392., 16916., 15536., 17072., 15680., 17228., 15824., 17384., 15968., 17540., 16112., 17696., 16256., 17852., 16400., 18008., 16544., 18164., 16688., 18320., 16832., 18476., 16976., 18632., 18560., 20348., 18704., 20504., 18848., 20660., 18992., 20816., 19136., 20972., 19280., 21128., 19424., 21284., 19568., 21440., 17920., 19548., 18064., 19704., 18208., 19860., 18352., 20016., 18496., 20172., 18640., 20328.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5738.,  6128.,  6518.,  6908.,  6008.,  6416.,  6824.,  7232.,  5559.,  5898.,  6237.,  6576.,  5974.,  6340.,  6706.,  7072.,  6389.,  6782.,  7175.,  7568.,  6804.,  7224.,  7644.,  8064.,  7219.,  7666.,  8113.,  8560.,  7634.,  8108.,  8582.,  9056.,  8049.,  8550.,  9051.,  9552.,  8464.,  8992.,  9520., 10048.,  3454.,  3688.,  3922.,  4156.,  3748.,  4000.,  4252.,  4504.,  4042.,  4312.,  4582.,  4852.,  4336.,  4624.,  4912.,  5200.,  4826.,  5168.,  5510.,  5852.,  5096.,  5456.,  5816.,  6176.,  6367.,  6778.,  7189.,  7600.,  6782.,  7220.,  7658.,  8096.,  7197.,  7662.,  8127.,  8592.,  7612.,  8104.,  8596.,  9088.,  8027.,  8546.,  9065.,  9584.,  8442.,  8988.,  9534., 10080.,  8857.,  9430., 10003., 10576.,  9272.,  9872., 10472., 11072.,  4622.,  4904.,  5186.,  5468.,  4916.,  5216.,  5516.,  5816.,  5210.,  5528.,  5846.,  6164.,  5504.,  5840.,  6176.,  6512.,  5896.,  6288.,  6680.,  7072.,  6240.,  6656.,  7072.,  7488.,  5532.,  5920.,  6308.,  6696.,  6040.,  6464.,  6888.,  7312.,  6548.,  7008.,  7468.,  7928.,  7056.,  7552.,  8048.,  8544.,  7564.,  8096.,  8628.,  9160.,  8072.,  8640.,  9208.,  9776.,  8580.,  9184.,  9788., 10392.,  9088.,  9728., 10368., 11008.,  4792.,  5104.,  5416.,  5728.,  5136.,  5472.,  5808.,  6144.,  5480.,  5840.,  6200.,  6560.,  5824.,  6208.,  6592.,  6976.,  6984.,  7440.,  7896.,  8352.,  7328.,  7808.,  8288.,  8768.,  6716.,  7200.,  7684.,  8168.,  7224.,  7744.,  8264.,  8784.,  7732.,  8288.,  8844.,  9400.,  8240.,  8832.,  9424., 10016.,  8748.,  9376., 10004., 10632.,  9256.,  9920., 10584., 11248.,  9764., 10464., 11164., 11864., 10272., 11008., 11744., 12480.,  3960.,  4208.,  4456.,  4704.,  4304.,  4576.,  4848.,  5120.,  4648.,  4944.,  5240.,  5536.,  4992.,  5312.,  5632.,  5952.,  5218.,  5608.,  5998.,  6388.,  5464.,  5872.,  6280.,  6688.,  5107.,  5446.,  5785.,  6124.,  5486.,  5852.,  6218.,  6584.,  5865.,  6258.,  6651.,  7044.,  6244.,  6664.,  7084.,  7504.,  6623.,  7070.,  7517.,  7964.,  7002.,  7476.,  7950.,  8424.,  7381.,  7882.,  8383.,  8884.,  7760.,  8288.,  8816.,  9344.,  3142.,  3376.,  3610.,  3844.,  3412.,  3664.,  3916.,  4168.,  3682.,  3952.,  4222.,  4492.,  3952.,  4240.,  4528.,  4816.,  4370.,  4712.,  5054.,  5396.,  4616.,  4976.,  5336.,  5696.,  5819.,  6230.,  6641.,  7052.,  6198.,  6636.,  7074.,  7512.,  6577.,  7042.,  7507.,  7972.,  6956.,  7448.,  7940.,  8432.,  7335.,  7854.,  8373.,  8892.,  7714.,  8260.,  8806.,  9352.,  8093.,  8666.,  9239.,  9812.,  8472.,  9072.,  9672., 10272.,  4246.,  4528.,  4810.,  5092.,  4516.,  4816.,  5116.,  5416.,  4786.,  5104.,  5422.,  5740.,  5056.,  5392.,  5728.,  6064.,  3906.,  4200.,  4494.,  4788.,  4152.,  4464.,  4776.,  5088.,  3907.,  4198.,  4489.,  4780.,  4286.,  4604.,  4922.,  5240.,  4665.,  5010.,  5355.,  5700.,  5044.,  5416.,  5788.,  6160.,  5423.,  5822.,  6221.,  6620.,  5802.,  6228.,  6654.,  7080.,  6181.,  6634.,  7087.,  7540.,  6560.,  7040.,  7520.,  8000.,  3846.,  4080.,  4314.,  4548.,  4116.,  4368.,  4620.,  4872.,  4386.,  4656.,  4926.,  5196.,  4656.,  4944.,  5232.,  5520.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11460., 12032., 12604., 13176., 11736., 12320., 12904., 13488., 12012., 12608., 13204., 13800., 12288., 12896., 13504., 14112., 12564., 13184., 13804., 14424., 12840., 13472., 14104., 14736., 13116., 13760., 14404., 15048., 13392., 14048., 14704., 15360., 13668., 14336., 15004., 15672., 13944., 14624., 15304., 15984., 14220., 14912., 15604., 16296., 14496., 15200., 15904., 16608., 14772., 15488., 16204., 16920., 15048., 15776., 16504., 17232., 16420., 17152., 17884., 18616., 16696., 17440., 18184., 18928., 16972., 17728., 18484., 19240., 17248., 18016., 18784., 19552., 17524., 18304., 19084., 19864., 17800., 18592., 19384., 20176., 18076., 18880., 19684., 20488., 18352., 19168., 19984., 20800., 17476., 18176., 18876., 19576., 17752., 18464., 19176., 19888., 18028., 18752., 19476., 20200., 18304., 19040., 19776., 20512., 18580., 19328., 20076., 20824., 18856., 19616., 20376., 21136., 17028., 17664., 18300., 18936., 17304., 17952., 18600., 19248., 17580., 18240., 18900., 19560., 17856., 18528., 19200., 19872., 18132., 18816., 19500., 20184., 18408., 19104., 19800., 20496., 18684., 19392., 20100., 20808., 18960., 19680., 20400., 21120., 19236., 19968., 20700., 21432., 19512., 20256., 21000., 21744., 19788., 20544., 21300., 22056., 20064., 20832., 21600., 22368., 20340., 21120., 21900., 22680., 20616., 21408., 22200., 22992., 19940., 20736., 21532., 22328., 20216., 21024., 21832., 22640., 20492., 21312., 22132., 22952., 20768., 21600., 22432., 23264., 21044., 21888., 22732., 23576., 21320., 22176., 23032., 23888., 21596., 22464., 23332., 24200., 21872., 22752., 23632., 24512., 18948., 19712., 20476., 21240., 19224., 20000., 20776., 21552., 19500., 20288., 21076., 21864., 19776., 20576., 21376., 22176., 20052., 20864., 21676., 22488., 20328., 21152., 21976., 22800., 14404., 15104., 15804., 16504., 14680., 15392., 16104., 16816., 14956., 15680., 16404., 17128., 15232., 15968., 16704., 17440., 15508., 16256., 17004., 17752., 15784., 16544., 17304., 18064., 16060., 16832., 17604., 18376., 16336., 17120., 17904., 18688., 16612., 17408., 18204., 19000., 16888., 17696., 18504., 19312., 17164., 17984., 18804., 19624., 17440., 18272., 19104., 19936., 17716., 18560., 19404., 20248., 17992., 18848., 19704., 20560., 14628., 15360., 16092., 16824., 14904., 15648., 16392., 17136., 15180., 15936., 16692., 17448., 15456., 16224., 16992., 17760., 15732., 16512., 17292., 18072., 16008., 16800., 17592., 18384., 16284., 17088., 17892., 18696., 16560., 17376., 18192., 19008., 11460., 12032., 12604., 13176., 11736., 12320., 12904., 13488., 12012., 12608., 13204., 13800., 12288., 12896., 13504., 14112., 12564., 13184., 13804., 14424., 12840., 13472., 14104., 14736., 15876., 16640., 17404., 18168., 16152., 16928., 17704., 18480., 16428., 17216., 18004., 18792., 16704., 17504., 18304., 19104., 16980., 17792., 18604., 19416., 17256., 18080., 18904., 19728., 17532., 18368., 19204., 20040., 17808., 18656., 19504., 20352., 16420., 17152., 17884., 18616., 16696., 17440., 18184., 18928., 16972., 17728., 18484., 19240., 17248., 18016., 18784., 19552., 17524., 18304., 19084., 19864., 17800., 18592., 19384., 20176.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15693., 16062., 16431., 16800., 12924., 13464., 14004., 14544., 15084., 15624., 16164., 16704., 17244., 17784., 18324., 18864., 19404., 19944., 20484., 21024.,  8655.,  9006.,  9357.,  9708., 10059., 10410., 10761., 11112., 13629., 13998., 14367., 14736., 15996., 16536., 17076., 17616., 18156., 18696., 19236., 19776., 20316., 20856., 21396., 21936., 22476., 23016., 23556., 24096., 10719., 11070., 11421., 11772., 12123., 12474., 12825., 13176., 14536., 14992., 15448., 15904., 13818., 14484., 15150., 15816., 16482., 17148., 17814., 18480., 19146., 19812., 20478., 21144., 21810., 22476., 23142., 23808., 10768., 11200., 11632., 12064., 12496., 12928., 13360., 13792., 16712., 17168., 17624., 18080., 17114., 17780., 18446., 19112., 19778., 20444., 21110., 21776., 22442., 23108., 23774., 24440., 25106., 25772., 26438., 27104.,  8592.,  9024.,  9456.,  9888., 10320., 10752., 11184., 11616., 13407., 13722., 14037., 14352., 10971., 11430., 11889., 12348., 12807., 13266., 13725., 14184., 14643., 15102., 15561., 16020., 16479., 16938., 17397., 17856.,  7305.,  7602.,  7899.,  8196.,  8493.,  8790.,  9087.,  9384., 11631., 11946., 12261., 12576., 13611., 14070., 14529., 14988., 15447., 15906., 16365., 16824., 17283., 17742., 18201., 18660., 19119., 19578., 20037., 20496.,  9081.,  9378.,  9675.,  9972., 10269., 10566., 10863., 11160., 10047., 10362., 10677., 10992.,  9531.,  9990., 10449., 10908., 11367., 11826., 12285., 12744., 13203., 13662., 14121., 14580., 15039., 15498., 15957., 16416.,  7401.,  7698.,  7995.,  8292.,  8589.,  8886.,  9183.,  9480.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15214., 15292., 15370., 15448., 15526., 15604., 15682., 15760., 15838., 15916., 15994., 16072., 16150., 16228., 16306., 16384., 16462., 16540., 16618., 16696., 16774., 16852., 16930., 17008., 17086., 17164., 17242., 17320., 18958., 19036., 19114., 19192., 19270., 19348., 19426., 19504., 19582., 19660., 19738., 19816., 19894., 19972., 20050., 20128., 20206., 20284., 20362., 20440., 20518., 20596., 20674., 20752., 20830., 20908., 20986., 21064., 22702., 22780., 22858., 22936., 23014., 23092., 23170., 23248., 23326., 23404., 23482., 23560., 23638., 23716., 23794., 23872., 23950., 24028., 24106., 24184., 24262., 24340., 24418., 24496., 24574., 24652., 24730., 24808., 22350., 22428., 22506., 22584., 22662., 22740., 22818., 22896., 22974., 23052., 23130., 23208., 23286., 23364., 23442., 23520., 20014., 20092., 20170., 20248., 20326., 20404., 20482., 20560., 20638., 20716., 20794., 20872., 12782., 12860., 12938., 13016., 13094., 13172., 13250., 13328., 13406., 13484., 13562., 13640., 13718., 13796., 13874., 13952., 14030., 14108., 14186., 14264., 14342., 14420., 14498., 14576., 14654., 14732., 14810., 14888., 16526., 16604., 16682., 16760., 16838., 16916., 16994., 17072., 17150., 17228., 17306., 17384., 17462., 17540., 17618., 17696., 17774., 17852., 17930., 18008., 18086., 18164., 18242., 18320., 18398., 18476., 18554., 18632., 20270., 20348., 20426., 20504., 20582., 20660., 20738., 20816., 20894., 20972., 21050., 21128., 21206., 21284., 21362., 21440., 19470., 19548., 19626., 19704., 19782., 19860., 19938., 20016., 20094., 20172., 20250., 20328.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4928.,  5306.,  5168.,  5564.,  5408.,  5822.,  5648.,  6080.,  2413.,  2584.,  2794.,  2992.,  3175.,  3400.,  3556.,  3808.,  3937.,  4216.,  4318.,  4624.,  4699.,  5032.,  5080.,  5440.,  5461.,  5848.,  5842.,  6256.,  6223.,  6664.,  6604.,  7072.,  6985.,  7480.,  7366.,  7888.,  7747.,  8296.,  8128.,  8704.,  2524.,  2686.,  2792.,  2972.,  3060.,  3258.,  3328.,  3544.,  3596.,  3830.,  3864.,  4116.,  4132.,  4402.,  4400.,  4688.,  5152.,  5530.,  5392.,  5788.,  5632.,  6046.,  5872.,  6304.,  4445.,  4760.,  4826.,  5168.,  5207.,  5576.,  5588.,  5984.,  5969.,  6392.,  6350.,  6800.,  6731.,  7208.,  7112.,  7616.,  7493.,  8024.,  7874.,  8432.,  8255.,  8840.,  8636.,  9248.,  9017.,  9656.,  9398., 10064.,  9779., 10472., 10160., 10880.,  2300.,  2462.,  2568.,  2748.,  2836.,  3034.,  3104.,  3320.,  3372.,  3606.,  3640.,  3892.,  3908.,  4178.,  4176.,  4464.,  7160.,  7664.,  7504.,  8032.,  7848.,  8400.,  8192.,  8768.,  3344.,  3572.,  3872.,  4136.,  4400.,  4700.,  4928.,  5264.,  5456.,  5828.,  5984.,  6392.,  6512.,  6956.,  7040.,  7520.,  7568.,  8084.,  8096.,  8648.,  8624.,  9212.,  9152.,  9776.,  9680., 10340., 10208., 10904., 10736., 11468., 11264., 12032.,  3304.,  3520.,  3664.,  3904.,  4024.,  4288.,  4384.,  4672.,  4744.,  5056.,  5104.,  5440.,  5464.,  5824.,  5824.,  6208.,  7288.,  7792.,  7632.,  8160.,  7976.,  8528.,  8320.,  8896.,  6160.,  6580.,  6688.,  7144.,  7216.,  7708.,  7744.,  8272.,  8272.,  8836.,  8800.,  9400.,  9328.,  9964.,  9856., 10528., 10384., 11092., 10912., 11656., 11440., 12220., 11968., 12784., 12496., 13348., 13024., 13912., 13552., 14476., 14080., 15040.,  3176.,  3392.,  3536.,  3776.,  3896.,  4160.,  4256.,  4544.,  4616.,  4928.,  4976.,  5312.,  5336.,  5696.,  5696.,  6080.,  5348.,  5726.,  5608.,  6004.,  5868.,  6282.,  6128.,  6560.,  2603.,  2774.,  3014.,  3212.,  3425.,  3650.,  3836.,  4088.,  4247.,  4526.,  4658.,  4964.,  5069.,  5402.,  5480.,  5840.,  5891.,  6278.,  6302.,  6716.,  6713.,  7154.,  7124.,  7592.,  7535.,  8030.,  7946.,  8468.,  8357.,  8906.,  8768.,  9344.,  2704.,  2866.,  2992.,  3172.,  3280.,  3478.,  3568.,  3784.,  3856.,  4090.,  4144.,  4396.,  4432.,  4702.,  4720.,  5008.,  5572.,  5950.,  5832.,  6228.,  6092.,  6506.,  6352.,  6784.,  4795.,  5110.,  5206.,  5548.,  5617.,  5986.,  6028.,  6424.,  6439.,  6862.,  6850.,  7300.,  7261.,  7738.,  7672.,  8176.,  8083.,  8614.,  8494.,  9052.,  8905.,  9490.,  9316.,  9928.,  9727., 10366., 10138., 10804., 10549., 11242., 10960., 11680.,  2480.,  2642.,  2768.,  2948.,  3056.,  3254.,  3344.,  3560.,  3632.,  3866.,  3920.,  4172.,  4208.,  4478.,  4496.,  4784.,  5348.,  5726.,  5608.,  6004.,  5868.,  6282.,  6128.,  6560.,  2603.,  2774.,  3014.,  3212.,  3425.,  3650.,  3836.,  4088.,  4247.,  4526.,  4658.,  4964.,  5069.,  5402.,  5480.,  5840.,  5891.,  6278.,  6302.,  6716.,  6713.,  7154.,  7124.,  7592.,  7535.,  8030.,  7946.,  8468.,  8357.,  8906.,  8768.,  9344.,  2704.,  2866.,  2992.,  3172.,  3280.,  3478.,  3568.,  3784.,  3856.,  4090.,  4144.,  4396.,  4432.,  4702.,  4720.,  5008.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11888., 13020., 12032., 13176., 12176., 13332., 12320., 13488., 12464., 13644., 12608., 13800., 12752., 13956., 12896., 14112., 13040., 14268., 13184., 14424., 13328., 14580., 13472., 14736., 13616., 14892., 13760., 15048., 13904., 15204., 14048., 15360., 14192., 15516., 14336., 15672., 14480., 15828., 14624., 15984., 14768., 16140., 14912., 16296., 15056., 16452., 15200., 16608., 15344., 16764., 15488., 16920., 15632., 17076., 15776., 17232., 17008., 18460., 17152., 18616., 17296., 18772., 17440., 18928., 17584., 19084., 17728., 19240., 17872., 19396., 18016., 19552., 18160., 19708., 18304., 19864., 18448., 20020., 18592., 20176., 18736., 20332., 18880., 20488., 19024., 20644., 19168., 20800., 18032., 19420., 18176., 19576., 18320., 19732., 18464., 19888., 18608., 20044., 18752., 20200., 18896., 20356., 19040., 20512., 19184., 20668., 19328., 20824., 19472., 20980., 19616., 21136., 17520., 18780., 17664., 18936., 17808., 19092., 17952., 19248., 18096., 19404., 18240., 19560., 18384., 19716., 18528., 19872., 18672., 20028., 18816., 20184., 18960., 20340., 19104., 20496., 19248., 20652., 19392., 20808., 19536., 20964., 19680., 21120., 19824., 21276., 19968., 21432., 20112., 21588., 20256., 21744., 20400., 21900., 20544., 22056., 20688., 22212., 20832., 22368., 20976., 22524., 21120., 22680., 21264., 22836., 21408., 22992., 20592., 22172., 20736., 22328., 20880., 22484., 21024., 22640., 21168., 22796., 21312., 22952., 21456., 23108., 21600., 23264., 21744., 23420., 21888., 23576., 22032., 23732., 22176., 23888., 22320., 24044., 22464., 24200., 22608., 24356., 22752., 24512., 19568., 21084., 19712., 21240., 19856., 21396., 20000., 21552., 20144., 21708., 20288., 21864., 20432., 22020., 20576., 22176., 20720., 22332., 20864., 22488., 21008., 22644., 21152., 22800., 14960., 16348., 15104., 16504., 15248., 16660., 15392., 16816., 15536., 16972., 15680., 17128., 15824., 17284., 15968., 17440., 16112., 17596., 16256., 17752., 16400., 17908., 16544., 18064., 16688., 18220., 16832., 18376., 16976., 18532., 17120., 18688., 17264., 18844., 17408., 19000., 17552., 19156., 17696., 19312., 17840., 19468., 17984., 19624., 18128., 19780., 18272., 19936., 18416., 20092., 18560., 20248., 18704., 20404., 18848., 20560., 15216., 16668., 15360., 16824., 15504., 16980., 15648., 17136., 15792., 17292., 15936., 17448., 16080., 17604., 16224., 17760., 16368., 17916., 16512., 18072., 16656., 18228., 16800., 18384., 16944., 18540., 17088., 18696., 17232., 18852., 17376., 19008., 11888., 13020., 12032., 13176., 12176., 13332., 12320., 13488., 12464., 13644., 12608., 13800., 12752., 13956., 12896., 14112., 13040., 14268., 13184., 14424., 13328., 14580., 13472., 14736., 16496., 18012., 16640., 18168., 16784., 18324., 16928., 18480., 17072., 18636., 17216., 18792., 17360., 18948., 17504., 19104., 17648., 19260., 17792., 19416., 17936., 19572., 18080., 19728., 18224., 19884., 18368., 20040., 18512., 20196., 18656., 20352., 17008., 18460., 17152., 18616., 17296., 18772., 17440., 18928., 17584., 19084., 17728., 19240., 17872., 19396., 18016., 19552., 18160., 19708., 18304., 19864., 18448., 20020., 18592., 20176.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5446.,  5824.,  6202.,  6580.,  5716.,  6112.,  6508.,  6904.,  5986.,  6400.,  6814.,  7228.,  6256.,  6688.,  7120.,  7552.,  2799.,  2970.,  3141.,  3312.,  3214.,  3412.,  3610.,  3808.,  3629.,  3854.,  4079.,  4304.,  4044.,  4296.,  4548.,  4800.,  4459.,  4738.,  5017.,  5296.,  4874.,  5180.,  5486.,  5792.,  5289.,  5622.,  5955.,  6288.,  5704.,  6064.,  6424.,  6784.,  6119.,  6506.,  6893.,  7280.,  6534.,  6948.,  7362.,  7776.,  6949.,  7390.,  7831.,  8272.,  7364.,  7832.,  8300.,  8768.,  7779.,  8274.,  8769.,  9264.,  8194.,  8716.,  9238.,  9760.,  8609.,  9158.,  9707., 10256.,  9024.,  9600., 10176., 10752.,  2614.,  2776.,  2938.,  3100.,  2908.,  3088.,  3268.,  3448.,  3202.,  3400.,  3598.,  3796.,  3496.,  3712.,  3928.,  4144.,  3790.,  4024.,  4258.,  4492.,  4084.,  4336.,  4588.,  4840.,  4378.,  4648.,  4918.,  5188.,  4672.,  4960.,  5248.,  5536.,  5894.,  6272.,  6650.,  7028.,  6164.,  6560.,  6956.,  7352.,  6434.,  6848.,  7262.,  7676.,  6704.,  7136.,  7568.,  8000.,  4671.,  4986.,  5301.,  5616.,  5086.,  5428.,  5770.,  6112.,  5501.,  5870.,  6239.,  6608.,  5916.,  6312.,  6708.,  7104.,  6331.,  6754.,  7177.,  7600.,  6746.,  7196.,  7646.,  8096.,  7161.,  7638.,  8115.,  8592.,  7576.,  8080.,  8584.,  9088.,  7991.,  8522.,  9053.,  9584.,  8406.,  8964.,  9522., 10080.,  8821.,  9406.,  9991., 10576.,  9236.,  9848., 10460., 11072.,  9651., 10290., 10929., 11568., 10066., 10732., 11398., 12064., 10481., 11174., 11867., 12560., 10896., 11616., 12336., 13056.,  2678.,  2840.,  3002.,  3164.,  2972.,  3152.,  3332.,  3512.,  3266.,  3464.,  3662.,  3860.,  3560.,  3776.,  3992.,  4208.,  3854.,  4088.,  4322.,  4556.,  4148.,  4400.,  4652.,  4904.,  4442.,  4712.,  4982.,  5252.,  4736.,  5024.,  5312.,  5600.,  7096.,  7600.,  8104.,  8608.,  7440.,  7968.,  8496.,  9024.,  7784.,  8336.,  8888.,  9440.,  8128.,  8704.,  9280.,  9856.,  3388.,  3616.,  3844.,  4072.,  3896.,  4160.,  4424.,  4688.,  4404.,  4704.,  5004.,  5304.,  4912.,  5248.,  5584.,  5920.,  5420.,  5792.,  6164.,  6536.,  5928.,  6336.,  6744.,  7152.,  6436.,  6880.,  7324.,  7768.,  6944.,  7424.,  7904.,  8384.,  7452.,  7968.,  8484.,  9000.,  7960.,  8512.,  9064.,  9616.,  8468.,  9056.,  9644., 10232.,  8976.,  9600., 10224., 10848.,  9484., 10144., 10804., 11464.,  9992., 10688., 11384., 12080., 10500., 11232., 11964., 12696., 11008., 11776., 12544., 13312.,  2968.,  3184.,  3400.,  3616.,  3312.,  3552.,  3792.,  4032.,  3656.,  3920.,  4184.,  4448.,  4000.,  4288.,  4576.,  4864.,  4344.,  4656.,  4968.,  5280.,  4688.,  5024.,  5360.,  5696.,  5032.,  5392.,  5752.,  6112.,  5376.,  5760.,  6144.,  6528.,  7352.,  7856.,  8360.,  8864.,  7696.,  8224.,  8752.,  9280.,  8040.,  8592.,  9144.,  9696.,  8384.,  8960.,  9536., 10112.,  5756.,  6176.,  6596.,  7016.,  6264.,  6720.,  7176.,  7632.,  6772.,  7264.,  7756.,  8248.,  7280.,  7808.,  8336.,  8864.,  7788.,  8352.,  8916.,  9480.,  8296.,  8896.,  9496., 10096.,  8804.,  9440., 10076., 10712.,  9312.,  9984., 10656., 11328.,  9820., 10528., 11236., 11944., 10328., 11072., 11816., 12560., 10836., 11616., 12396., 13176., 11344., 12160., 12976., 13792., 11852., 12704., 13556., 14408., 12360., 13248., 14136., 15024., 12868., 13792., 14716., 15640., 13376., 14336., 15296., 16256.,  3224.,  3440.,  3656.,  3872.,  3568.,  3808.,  4048.,  4288.,  3912.,  4176.,  4440.,  4704.,  4256.,  4544.,  4832.,  5120.,  4600.,  4912.,  5224.,  5536.,  4944.,  5280.,  5616.,  5952.,  5288.,  5648.,  6008.,  6368.,  5632.,  6016.,  6400.,  6784.,  4942.,  5320.,  5698.,  6076.,  5188.,  5584.,  5980.,  6376.,  5434.,  5848.,  6262.,  6676.,  5680.,  6112.,  6544.,  6976.,  2571.,  2742.,  2913.,  3084.,  2950.,  3148.,  3346.,  3544.,  3329.,  3554.,  3779.,  4004.,  3708.,  3960.,  4212.,  4464.,  4087.,  4366.,  4645.,  4924.,  4466.,  4772.,  5078.,  5384.,  4845.,  5178.,  5511.,  5844.,  5224.,  5584.,  5944.,  6304.,  5603.,  5990.,  6377.,  6764.,  5982.,  6396.,  6810.,  7224.,  6361.,  6802.,  7243.,  7684.,  6740.,  7208.,  7676.,  8144.,  7119.,  7614.,  8109.,  8604.,  7498.,  8020.,  8542.,  9064.,  7877.,  8426.,  8975.,  9524.,  8256.,  8832.,  9408.,  9984.,  2398.,  2560.,  2722.,  2884.,  2668.,  2848.,  3028.,  3208.,  2938.,  3136.,  3334.,  3532.,  3208.,  3424.,  3640.,  3856.,  3478.,  3712.,  3946.,  4180.,  3748.,  4000.,  4252.,  4504.,  4018.,  4288.,  4558.,  4828.,  4288.,  4576.,  4864.,  5152.,  5390.,  5768.,  6146.,  6524.,  5636.,  6032.,  6428.,  6824.,  5882.,  6296.,  6710.,  7124.,  6128.,  6560.,  6992.,  7424.,  4251.,  4566.,  4881.,  5196.,  4630.,  4972.,  5314.,  5656.,  5009.,  5378.,  5747.,  6116.,  5388.,  5784.,  6180.,  6576.,  5767.,  6190.,  6613.,  7036.,  6146.,  6596.,  7046.,  7496.,  6525.,  7002.,  7479.,  7956.,  6904.,  7408.,  7912.,  8416.,  7283.,  7814.,  8345.,  8876.,  7662.,  8220.,  8778.,  9336.,  8041.,  8626.,  9211.,  9796.,  8420.,  9032.,  9644., 10256.,  8799.,  9438., 10077., 10716.,  9178.,  9844., 10510., 11176.,  9557., 10250., 10943., 11636.,  9936., 10656., 11376., 12096.,  2462.,  2624.,  2786.,  2948.,  2732.,  2912.,  3092.,  3272.,  3002.,  3200.,  3398.,  3596.,  3272.,  3488.,  3704.,  3920.,  3542.,  3776.,  4010.,  4244.,  3812.,  4064.,  4316.,  4568.,  4082.,  4352.,  4622.,  4892.,  4352.,  4640.,  4928.,  5216.,  4942.,  5320.,  5698.,  6076.,  5188.,  5584.,  5980.,  6376.,  5434.,  5848.,  6262.,  6676.,  5680.,  6112.,  6544.,  6976.,  2571.,  2742.,  2913.,  3084.,  2950.,  3148.,  3346.,  3544.,  3329.,  3554.,  3779.,  4004.,  3708.,  3960.,  4212.,  4464.,  4087.,  4366.,  4645.,  4924.,  4466.,  4772.,  5078.,  5384.,  4845.,  5178.,  5511.,  5844.,  5224.,  5584.,  5944.,  6304.,  5603.,  5990.,  6377.,  6764.,  5982.,  6396.,  6810.,  7224.,  6361.,  6802.,  7243.,  7684.,  6740.,  7208.,  7676.,  8144.,  7119.,  7614.,  8109.,  8604.,  7498.,  8020.,  8542.,  9064.,  7877.,  8426.,  8975.,  9524.,  8256.,  8832.,  9408.,  9984.,  2398.,  2560.,  2722.,  2884.,  2668.,  2848.,  3028.,  3208.,  2938.,  3136.,  3334.,  3532.,  3208.,  3424.,  3640.,  3856.,  3478.,  3712.,  3946.,  4180.,  3748.,  4000.,  4252.,  4504.,  4018.,  4288.,  4558.,  4828.,  4288.,  4576.,  4864.,  5152.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14964., 15584., 16204., 16824., 15240., 15872., 16504., 17136., 15516., 16160., 16804., 17448., 15792., 16448., 17104., 17760., 16068., 16736., 17404., 18072., 16344., 17024., 17704., 18384., 16620., 17312., 18004., 18696., 16896., 17600., 18304., 19008., 17172., 17888., 18604., 19320., 17448., 18176., 18904., 19632., 17724., 18464., 19204., 19944., 18000., 18752., 19504., 20256., 18276., 19040., 19804., 20568., 18552., 19328., 20104., 20880., 18828., 19616., 20404., 21192., 19104., 19904., 20704., 21504., 15668., 16352., 17036., 17720., 15944., 16640., 17336., 18032., 16220., 16928., 17636., 18344., 16496., 17216., 17936., 18656., 16772., 17504., 18236., 18968., 17048., 17792., 18536., 19280., 17324., 18080., 18836., 19592., 17600., 18368., 19136., 19904., 17876., 18656., 19436., 20216., 18152., 18944., 19736., 20528., 18428., 19232., 20036., 20840., 18704., 19520., 20336., 21152., 14900., 15584., 16268., 16952., 15176., 15872., 16568., 17264., 15452., 16160., 16868., 17576., 15728., 16448., 17168., 17888., 16004., 16736., 17468., 18200., 16280., 17024., 17768., 18512., 16556., 17312., 18068., 18824., 16832., 17600., 18368., 19136., 17108., 17888., 18668., 19448., 17384., 18176., 18968., 19760., 17660., 18464., 19268., 20072., 17936., 18752., 19568., 20384., 18212., 19040., 19868., 20696., 18488., 19328., 20168., 21008., 18764., 19616., 20468., 21320., 19040., 19904., 20768., 21632., 13940., 14560., 15180., 15800., 14216., 14848., 15480., 16112., 14492., 15136., 15780., 16424., 14768., 15424., 16080., 16736., 15044., 15712., 16380., 17048., 15320., 16000., 16680., 17360., 15596., 16288., 16980., 17672., 15872., 16576., 17280., 17984., 16148., 16864., 17580., 18296., 16424., 17152., 17880., 18608., 16700., 17440., 18180., 18920., 16976., 17728., 18480., 19232., 17908., 18656., 19404., 20152., 18184., 18944., 19704., 20464., 18460., 19232., 20004., 20776., 18736., 19520., 20304., 21088., 19012., 19808., 20604., 21400., 19288., 20096., 20904., 21712., 19564., 20384., 21204., 22024., 19840., 20672., 21504., 22336., 20116., 20960., 21804., 22648., 20392., 21248., 22104., 22960., 20668., 21536., 22404., 23272., 20944., 21824., 22704., 23584., 21220., 22112., 23004., 23896., 21496., 22400., 23304., 24208., 21772., 22688., 23604., 24520., 22048., 22976., 23904., 24832., 15924., 16608., 17292., 17976., 16200., 16896., 17592., 18288., 16476., 17184., 17892., 18600., 16752., 17472., 18192., 18912., 17028., 17760., 18492., 19224., 17304., 18048., 18792., 19536., 17580., 18336., 19092., 19848., 17856., 18624., 19392., 20160., 18132., 18912., 19692., 20472., 18408., 19200., 19992., 20784., 18684., 19488., 20292., 21096., 18960., 19776., 20592., 21408., 15668., 16352., 17036., 17720., 15944., 16640., 17336., 18032., 16220., 16928., 17636., 18344., 16496., 17216., 17936., 18656., 16772., 17504., 18236., 18968., 17048., 17792., 18536., 19280., 17324., 18080., 18836., 19592., 17600., 18368., 19136., 19904., 17876., 18656., 19436., 20216., 18152., 18944., 19736., 20528., 18428., 19232., 20036., 20840., 18704., 19520., 20336., 21152., 18980., 19808., 20636., 21464., 19256., 20096., 20936., 21776., 19532., 20384., 21236., 22088., 19808., 20672., 21536., 22400., 16884., 17632., 18380., 19128., 17160., 17920., 18680., 19440., 17436., 18208., 18980., 19752., 17712., 18496., 19280., 20064., 17988., 18784., 19580., 20376., 18264., 19072., 19880., 20688., 18540., 19360., 20180., 21000., 18816., 19648., 20480., 21312., 19092., 19936., 20780., 21624., 19368., 20224., 21080., 21936., 19644., 20512., 21380., 22248., 19920., 20800., 21680., 22560., 13940., 14560., 15180., 15800., 14216., 14848., 15480., 16112., 14492., 15136., 15780., 16424., 14768., 15424., 16080., 16736., 15044., 15712., 16380., 17048., 15320., 16000., 16680., 17360., 15596., 16288., 16980., 17672., 15872., 16576., 17280., 17984., 16148., 16864., 17580., 18296., 16424., 17152., 17880., 18608., 16700., 17440., 18180., 18920., 16976., 17728., 18480., 19232., 17252., 18016., 18780., 19544., 17528., 18304., 19080., 19856., 17804., 18592., 19380., 20168., 18080., 18880., 19680., 20480., 15668., 16352., 17036., 17720., 15944., 16640., 17336., 18032., 16220., 16928., 17636., 18344., 16496., 17216., 17936., 18656., 16772., 17504., 18236., 18968., 17048., 17792., 18536., 19280., 17324., 18080., 18836., 19592., 17600., 18368., 19136., 19904., 17876., 18656., 19436., 20216., 18152., 18944., 19736., 20528., 18428., 19232., 20036., 20840., 18704., 19520., 20336., 21152., 15924., 16608., 17292., 17976., 16200., 16896., 17592., 18288., 16476., 17184., 17892., 18600., 16752., 17472., 18192., 18912., 17028., 17760., 18492., 19224., 17304., 18048., 18792., 19536., 17580., 18336., 19092., 19848., 17856., 18624., 19392., 20160., 18132., 18912., 19692., 20472., 18408., 19200., 19992., 20784., 18684., 19488., 20292., 21096., 18960., 19776., 20592., 21408., 19236., 20064., 20892., 21720., 19512., 20352., 21192., 22032., 19788., 20640., 21492., 22344., 20064., 20928., 21792., 22656., 14964., 15584., 16204., 16824., 15240., 15872., 16504., 17136., 15516., 16160., 16804., 17448., 15792., 16448., 17104., 17760., 16068., 16736., 17404., 18072., 16344., 17024., 17704., 18384., 16620., 17312., 18004., 18696., 16896., 17600., 18304., 19008., 17172., 17888., 18604., 19320., 17448., 18176., 18904., 19632., 17724., 18464., 19204., 19944., 18000., 18752., 19504., 20256., 16884., 17632., 18380., 19128., 17160., 17920., 18680., 19440., 17436., 18208., 18980., 19752., 17712., 18496., 19280., 20064., 17988., 18784., 19580., 20376., 18264., 19072., 19880., 20688., 18540., 19360., 20180., 21000., 18816., 19648., 20480., 21312., 19092., 19936., 20780., 21624., 19368., 20224., 21080., 21936., 19644., 20512., 21380., 22248., 19920., 20800., 21680., 22560., 20196., 21088., 21980., 22872., 20472., 21376., 22280., 23184., 20748., 21664., 22580., 23496., 21024., 21952., 22880., 23808., 14900., 15584., 16268., 16952., 15176., 15872., 16568., 17264., 15452., 16160., 16868., 17576., 15728., 16448., 17168., 17888., 16004., 16736., 17468., 18200., 16280., 17024., 17768., 18512., 16556., 17312., 18068., 18824., 16832., 17600., 18368., 19136., 17108., 17888., 18668., 19448., 17384., 18176., 18968., 19760., 17660., 18464., 19268., 20072., 17936., 18752., 19568., 20384.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8175.,  8616.,  8986.,  9556.,  7690.,  8104.,  6406.,  5677.,  6118.,  8614.,  9184.,  5294.,  5708.,  6122.,  9436.,  9952., 10744., 11408.,  8832.,  9312.,  7744.,  7124.,  7640., 10760., 11424.,  6592.,  7072.,  7552.,  6235.,  6568.,  6826.,  7252.,  5750.,  6056.,  4890.,  4145.,  4478.,  6358.,  6784.,  3762.,  4068.,  4374.,  6567.,  6900.,  7298.,  7724.,  6062.,  6368.,  5138.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24326., 24404., 24482., 24560., 24638., 24716., 24794., 25418., 25496., 25574., 25652., 25730., 25808., 25886., 26510., 26588., 26666., 26744., 26822., 26900., 26978., 27602., 27680., 27758., 27836., 27914., 27992., 28070., 28694., 28772., 28850., 28928., 29006., 29084., 29162., 29786., 29864., 29942., 30020., 30098., 30176., 30254., 30878., 30956., 31034., 31112., 31190., 31268., 31346.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11033., 11518., 11600., 12112., 11672., 12212., 12392., 12968., 10063., 10548., 10576., 11088.,  8049.,  8428.,  7227.,  7610.,  7794.,  8204., 10648., 11212., 11368., 11968.,  6461.,  6844.,  6974.,  7384.,  7487.,  7924., 11484., 12088., 12096., 12736., 13088., 13808., 13856., 14624., 10276., 10880., 10816., 11456.,  9436.,  9984.,  7700.,  8232.,  8312.,  8880., 12000., 12816., 12768., 13632.,  6636.,  7168.,  7176.,  7744.,  7716.,  8320.,  7153.,  7638.,  7504.,  8016.,  7352.,  7892.,  7784.,  8360.,  6183.,  6668.,  6480.,  6992.,  5017.,  5396.,  4163.,  4546.,  4514.,  4924.,  6136.,  6700.,  6568.,  7168.,  3397.,  3780.,  3694.,  4104.,  3991.,  4428.,  6901.,  7406.,  7252.,  7784.,  7736.,  8324.,  8168.,  8792.,  5891.,  6396.,  6188.,  6720.,  5589.,  6020.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21608., 23052., 21752., 23208., 21896., 23364., 22040., 23520., 18856., 20092., 19000., 20248., 19144., 20404., 20296., 21652., 20440., 21808., 20584., 21964., 20728., 22120., 20872., 22276., 21016., 22432., 21160., 22588., 22312., 23836., 22456., 23992., 22600., 24148., 22744., 24304., 22888., 24460., 23032., 24616., 23176., 24772., 24328., 26020., 24472., 26176., 24616., 26332., 24760., 26488., 24904., 26644., 25048., 26800., 25192., 26956., 23528., 25132., 23672., 25288., 23816., 25444., 23960., 25600., 15912., 17052., 16056., 17208., 16200., 17364., 11976., 12980., 12120., 13136., 12264., 13292., 12408., 13448., 12552., 13604., 12696., 13760., 12840., 13916., 13992., 15164., 14136., 15320., 14280., 15476., 14424., 15632., 14568., 15788., 14712., 15944., 14856., 16100.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9101.,  9586., 10071., 10556.,  9632., 10144., 10656., 11168.,  9236.,  9776., 10316., 10856.,  9872., 10448., 11024., 11600.,  7161.,  7646.,  8131.,  8616.,  7584.,  8096.,  8608.,  9120.,  6183.,  6562.,  6941.,  7320.,  7863.,  8246.,  8629.,  9012.,  8394.,  8804.,  9214.,  9624., 10748., 11312., 11876., 12440., 11384., 11984., 12584., 13184.,  6331.,  6714.,  7097.,  7480.,  6754.,  7164.,  7574.,  7984.,  7177.,  7614.,  8051.,  8488., 10140., 10744., 11348., 11952., 10752., 11392., 12032., 12672., 10864., 11584., 12304., 13024., 11584., 12352., 13120., 13888.,  7724.,  8328.,  8932.,  9536.,  8192.,  8832.,  9472., 10112.,  6996.,  7544.,  8092.,  8640.,  8916.,  9448.,  9980., 10512.,  9528., 10096., 10664., 11232., 12176., 12992., 13808., 14624., 12896., 13760., 14624., 15488.,  6788.,  7320.,  7852.,  8384.,  7256.,  7824.,  8392.,  8960.,  7724.,  8328.,  8932.,  9536.,  7197.,  7682.,  8167.,  8652.,  7584.,  8096.,  8608.,  9120.,  6356.,  6896.,  7436.,  7976.,  6800.,  7376.,  7952.,  8528.,  5257.,  5742.,  6227.,  6712.,  5536.,  6048.,  6560.,  7072.,  3479.,  3858.,  4237.,  4616.,  5479.,  5862.,  6245.,  6628.,  5866.,  6276.,  6686.,  7096.,  6716.,  7280.,  7844.,  8408.,  7160.,  7760.,  8360.,  8960.,  3947.,  4330.,  4713.,  5096.,  4226.,  4636.,  5046.,  5456.,  4505.,  4942.,  5379.,  5816.,  7825.,  8330.,  8835.,  9340.,  8212.,  8744.,  9276.,  9808.,  7588.,  8176.,  8764.,  9352.,  8032.,  8656.,  9280.,  9904.,  5805.,  6310.,  6815.,  7320.,  6084.,  6616.,  7148.,  7680.,  4699.,  5130.,  5561.,  5992.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13740., 14288., 14836., 15384., 14016., 14576., 15136., 15696., 14292., 14864., 15436., 16008., 14568., 15152., 15736., 16320., 11644., 12112., 12580., 13048., 11920., 12400., 12880., 13360., 12196., 12688., 13180., 13672., 14404., 14992., 15580., 16168., 14680., 15280., 15880., 16480., 14956., 15568., 16180., 16792., 15232., 15856., 16480., 17104., 15508., 16144., 16780., 17416., 15784., 16432., 17080., 17728., 16060., 16720., 17380., 18040., 18268., 19024., 19780., 20536., 18544., 19312., 20080., 20848., 18820., 19600., 20380., 21160., 19096., 19888., 20680., 21472., 19372., 20176., 20980., 21784., 19648., 20464., 21280., 22096., 19924., 20752., 21580., 22408., 22132., 23056., 23980., 24904., 22408., 23344., 24280., 25216., 22684., 23632., 24580., 25528., 22960., 23920., 24880., 25840., 23236., 24208., 25180., 26152., 23512., 24496., 25480., 26464., 23788., 24784., 25780., 26776., 23308., 24272., 25236., 26200., 23584., 24560., 25536., 26512., 23860., 24848., 25836., 26824., 24136., 25136., 26136., 27136., 16476., 17232., 17988., 18744., 16752., 17520., 18288., 19056., 17028., 17808., 18588., 19368., 12324., 12944., 13564., 14184., 12600., 13232., 13864., 14496., 11724., 12240., 12756., 13272., 12000., 12528., 13056., 13584., 12276., 12816., 13356., 13896., 12552., 13104., 13656., 14208., 12828., 13392., 13956., 14520., 15036., 15696., 16356., 17016., 15312., 15984., 16656., 17328., 15588., 16272., 16956., 17640., 15864., 16560., 17256., 17952., 16140., 16848., 17556., 18264., 16416., 17136., 17856., 18576., 16692., 17424., 18156., 18888.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7237.,  7678.,  8119.,  8560.,  7418.,  7988.,  8558.,  9128.,  6774.,  7188.,  7602.,  8016.,  5678.,  6092.,  5473.,  5914.,  6355.,  6796.,  9714., 10284., 10854., 11424.,  5118.,  5532.,  5946.,  6360.,  6774.,  7188.,  8820.,  9336.,  9852., 10368.,  8664.,  9328.,  9992., 10656.,  8224.,  8704.,  9184.,  9664.,  6048.,  6528.,  6756.,  7272.,  7788.,  8304., 11256., 11920., 12584., 13248.,  6304.,  6784.,  7264.,  7744.,  8224.,  8704.,  5385.,  5718.,  6051.,  6384.,  5546.,  5972.,  6398.,  6824.,  4922.,  5228.,  5534.,  5840.,  4290.,  4596.,  4053.,  4386.,  4719.,  5052.,  7266.,  7692.,  8118.,  8544.,  3698.,  4004.,  4310.,  4616.,  4922.,  5228.,  5569.,  5902.,  6235.,  6568.,  5562.,  5988.,  6414.,  6840.,  5130.,  5436.,  5742.,  6048.,  3698.,  4004.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22974., 23052., 23130., 23208., 23286., 23364., 23442., 23520., 20014., 20092., 20170., 20248., 20326., 20404., 21574., 21652., 21730., 21808., 21886., 21964., 22042., 22120., 22198., 22276., 22354., 22432., 22510., 22588., 23758., 23836., 23914., 23992., 24070., 24148., 24226., 24304., 24382., 24460., 24538., 24616., 24694., 24772., 25942., 26020., 26098., 26176., 26254., 26332., 26410., 26488., 26566., 26644., 26722., 26800., 26878., 26956., 25054., 25132., 25210., 25288., 25366., 25444., 25522., 25600., 16974., 17052., 17130., 17208., 17286., 17364., 12902., 12980., 13058., 13136., 13214., 13292., 13370., 13448., 13526., 13604., 13682., 13760., 13838., 13916., 15086., 15164., 15242., 15320., 15398., 15476., 15554., 15632., 15710., 15788., 15866., 15944., 16022., 16100.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9755., 10218., 10322., 10812., 10889., 11406., 11456., 12000.,  9376.,  9844., 10096., 10600., 10816., 11356., 11536., 12112.,  8829.,  9292.,  9342.,  9832.,  9855., 10372., 10368., 10912.,  6625.,  6972.,  7138.,  7512.,  7487.,  7842.,  8054.,  8436.,  8621.,  9030.,  9188.,  9624., 12288., 12900., 13008., 13656., 13728., 14412., 14448., 15168.,  6777.,  7132.,  7290.,  7672.,  7803.,  8212.,  8316.,  8752.,  8829.,  9292.,  9342.,  9832., 10004., 10600., 10616., 11248., 11228., 11896., 11840., 12544., 10048., 10672., 10816., 11488., 11584., 12304., 12352., 13120.,  8812.,  9408.,  9352.,  9984.,  9892., 10560., 10432., 11136.,  7132.,  7616.,  7672.,  8192.,  7556.,  8008.,  8168.,  8656.,  8780.,  9304.,  9392.,  9952., 12992., 13808., 13760., 14624., 14528., 15440., 15296., 16256.,  6652.,  7104.,  7192.,  7680.,  7732.,  8256.,  8272.,  8832.,  8812.,  9408.,  9352.,  9984.,  6051.,  6514.,  6402.,  6892.,  6753.,  7270.,  7104.,  7648.,  5632.,  6100.,  6064.,  6568.,  6496.,  7036.,  6928.,  7504.,  5125.,  5588.,  5422.,  5912.,  5719.,  6236.,  6016.,  6560.,  3849.,  4196.,  4146.,  4520.,  4647.,  5002.,  4998.,  5380.,  5349.,  5758.,  5700.,  6136.,  7392.,  8004.,  7824.,  8472.,  8256.,  8940.,  8688.,  9408.,  3937.,  4292.,  4234.,  4616.,  4531.,  4940.,  4828.,  5264.,  5125.,  5588.,  5422.,  5912.,  5675.,  6114.,  6026.,  6492.,  6377.,  6870.,  6728.,  7248.,  5664.,  6132.,  6096.,  6600.,  6528.,  7068.,  6960.,  7536.,  4797.,  5236.,  5094.,  5560.,  5391.,  5884.,  5688.,  6208.,  3937.,  4292.,  4234.,  4616.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14144., 15228., 14288., 15384., 14432., 15540., 14576., 15696., 14720., 15852., 14864., 16008., 15008., 16164., 15152., 16320., 11968., 12892., 12112., 13048., 12256., 13204., 12400., 13360., 12544., 13516., 12688., 13672., 14848., 16012., 14992., 16168., 15136., 16324., 15280., 16480., 15424., 16636., 15568., 16792., 15712., 16948., 15856., 17104., 16000., 17260., 16144., 17416., 16288., 17572., 16432., 17728., 16576., 17884., 16720., 18040., 18880., 20380., 19024., 20536., 19168., 20692., 19312., 20848., 19456., 21004., 19600., 21160., 19744., 21316., 19888., 21472., 20032., 21628., 20176., 21784., 20320., 21940., 20464., 22096., 20608., 22252., 20752., 22408., 22912., 24748., 23056., 24904., 23200., 25060., 23344., 25216., 23488., 25372., 23632., 25528., 23776., 25684., 23920., 25840., 24064., 25996., 24208., 26152., 24352., 26308., 24496., 26464., 24640., 26620., 24784., 26776., 24128., 26044., 24272., 26200., 24416., 26356., 24560., 26512., 24704., 26668., 24848., 26824., 24992., 26980., 25136., 27136., 17088., 18588., 17232., 18744., 17376., 18900., 17520., 19056., 17664., 19212., 17808., 19368., 12800., 14028., 12944., 14184., 13088., 14340., 13232., 14496., 12096., 13116., 12240., 13272., 12384., 13428., 12528., 13584., 12672., 13740., 12816., 13896., 12960., 14052., 13104., 14208., 13248., 14364., 13392., 14520., 15552., 16860., 15696., 17016., 15840., 17172., 15984., 17328., 16128., 17484., 16272., 17640., 16416., 17796., 16560., 17952., 16704., 18108., 16848., 18264., 16992., 18420., 17136., 18576., 17280., 18732., 17424., 18888.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8999.,  9462.,  9925., 10388.,  9530., 10020., 10510., 11000., 10061., 10578., 11095., 11612., 10592., 11136., 11680., 12224.,  8300.,  8768.,  9236.,  9704.,  8936.,  9440.,  9944., 10448.,  9572., 10112., 10652., 11192., 10208., 10784., 11360., 11936.,  7147.,  7610.,  8073.,  8536.,  7570.,  8060.,  8550.,  9040.,  7993.,  8510.,  9027.,  9544.,  8416.,  8960.,  9504., 10048.,  5671.,  6018.,  6365.,  6712.,  6094.,  6468.,  6842.,  7216.,  6875.,  7230.,  7585.,  7940.,  7406.,  7788.,  8170.,  8552.,  7937.,  8346.,  8755.,  9164.,  8468.,  8904.,  9340.,  9776., 10908., 11520., 12132., 12744., 11544., 12192., 12840., 13488., 12180., 12864., 13548., 14232., 12816., 13536., 14256., 14976.,  5455.,  5810.,  6165.,  6520.,  5878.,  6260.,  6642.,  7024.,  6301.,  6710.,  7119.,  7528.,  6724.,  7160.,  7596.,  8032.,  7147.,  7610.,  8073.,  8536.,  7570.,  8060.,  8550.,  9040.,  9876., 10472., 11068., 11664., 10488., 11120., 11752., 12384., 11100., 11768., 12436., 13104., 11712., 12416., 13120., 13824.,  9488., 10112., 10736., 11360., 10208., 10880., 11552., 12224., 10928., 11648., 12368., 13088., 11648., 12416., 13184., 13952.,  7492.,  8088.,  8684.,  9280.,  7960.,  8592.,  9224.,  9856.,  8428.,  9096.,  9764., 10432.,  8896.,  9600., 10304., 11008.,  6036.,  6520.,  7004.,  7488.,  6504.,  7024.,  7544.,  8064.,  7428.,  7880.,  8332.,  8784.,  8040.,  8528.,  9016.,  9504.,  8652.,  9176.,  9700., 10224.,  9264.,  9824., 10384., 10944., 12112., 12928., 13744., 14560., 12832., 13696., 14560., 15424., 13552., 14464., 15376., 16288., 14272., 15232., 16192., 17152.,  5620.,  6072.,  6524.,  6976.,  6088.,  6576.,  7064.,  7552.,  6556.,  7080.,  7604.,  8128.,  7024.,  7584.,  8144.,  8704.,  7492.,  8088.,  8684.,  9280.,  7960.,  8592.,  9224.,  9856.,  6871.,  7334.,  7797.,  8260.,  7258.,  7748.,  8238.,  8728.,  7645.,  8162.,  8679.,  9196.,  8032.,  8576.,  9120.,  9664.,  5804.,  6272.,  6740.,  7208.,  6248.,  6752.,  7256.,  7760.,  6692.,  7232.,  7772.,  8312.,  7136.,  7712.,  8288.,  8864.,  5019.,  5482.,  5945.,  6408.,  5298.,  5788.,  6278.,  6768.,  5577.,  6094.,  6611.,  7128.,  5856.,  6400.,  6944.,  7488.,  3479.,  3826.,  4173.,  4520.,  3758.,  4132.,  4506.,  4880.,  5323.,  5678.,  6033.,  6388.,  5710.,  6092.,  6474.,  6856.,  6097.,  6506.,  6915.,  7324.,  6484.,  6920.,  7356.,  7792.,  7644.,  8256.,  8868.,  9480.,  8088.,  8736.,  9384., 10032.,  8532.,  9216.,  9900., 10584.,  8976.,  9696., 10416., 11136.,  3903.,  4258.,  4613.,  4968.,  4182.,  4564.,  4946.,  5328.,  4461.,  4870.,  5279.,  5688.,  4740.,  5176.,  5612.,  6048.,  5019.,  5482.,  5945.,  6408.,  5298.,  5788.,  6278.,  6768.,  6399.,  6838.,  7277.,  7716.,  6786.,  7252.,  7718.,  8184.,  7173.,  7666.,  8159.,  8652.,  7560.,  8080.,  8600.,  9120.,  5868.,  6336.,  6804.,  7272.,  6312.,  6816.,  7320.,  7824.,  6756.,  7296.,  7836.,  8376.,  7200.,  7776.,  8352.,  8928.,  4643.,  5082.,  5521.,  5960.,  4922.,  5388.,  5854.,  6320.,  5201.,  5694.,  6187.,  6680.,  5480.,  6000.,  6520.,  7040.,  3903.,  4258.,  4613.,  4968.,  4182.,  4564.,  4946.,  5328.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8132.,  8576.,  9020.,  9464.,  8408.,  8864.,  9320.,  9776.,  8684.,  9152.,  9620., 10088.,  8960.,  9440.,  9920., 10400.,  9236.,  9728., 10220., 10712.,  9512., 10016., 10520., 11024.,  9788., 10304., 10820., 11336., 10064., 10592., 11120., 11648.,  5476.,  5760.,  6044.,  6328.,  5752.,  6048.,  6344.,  6640.,  6028.,  6336.,  6644.,  6952.,  6304.,  6624.,  6944.,  7264.,  6580.,  6912.,  7244.,  7576.,  6856.,  7200.,  7544.,  7888.,  9844., 10240., 10636., 11032., 10120., 10528., 10936., 11344., 10396., 10816., 11236., 11656., 10672., 11104., 11536., 11968., 10948., 11392., 11836., 12280., 11224., 11680., 12136., 12592., 11500., 11968., 12436., 12904., 11776., 12256., 12736., 13216., 12052., 12544., 13036., 13528., 12328., 12832., 13336., 13840., 12604., 13120., 13636., 14152., 12880., 13408., 13936., 14464., 13156., 13696., 14236., 14776., 13432., 13984., 14536., 15088., 17572., 18304., 19036., 19768., 17848., 18592., 19336., 20080., 18124., 18880., 19636., 20392., 18400., 19168., 19936., 20704., 18676., 19456., 20236., 21016., 18952., 19744., 20536., 21328., 19228., 20032., 20836., 21640., 19504., 20320., 21136., 21952., 19780., 20608., 21436., 22264., 20056., 20896., 21736., 22576., 20332., 21184., 22036., 22888., 20608., 21472., 22336., 23200., 20884., 21760., 22636., 23512., 21160., 22048., 22936., 23824., 25300., 26368., 27436., 28504., 25576., 26656., 27736., 28816., 25852., 26944., 28036., 29128., 26128., 27232., 28336., 29440., 26404., 27520., 28636., 29752., 26680., 27808., 28936., 30064., 26956., 28096., 29236., 30376., 27232., 28384., 29536., 30688., 27508., 28672., 29836., 31000., 27784., 28960., 30136., 31312., 28060., 29248., 30436., 31624., 28336., 29536., 30736., 31936., 28612., 29824., 31036., 32248., 28888., 30112., 31336., 32560., 21380., 22400., 23420., 24440., 21656., 22688., 23720., 24752., 21932., 22976., 24020., 25064., 22208., 23264., 24320., 25376., 22484., 23552., 24620., 25688., 22760., 23840., 24920., 26000., 23036., 24128., 25220., 26312., 23312., 24416., 25520., 26624., 15012., 15744., 16476., 17208., 15288., 16032., 16776., 17520., 15564., 16320., 17076., 17832., 15840., 16608., 17376., 18144., 16116., 16896., 17676., 18456., 16392., 17184., 17976., 18768.,  6580.,  6912.,  7244.,  7576.,  6856.,  7200.,  7544.,  7888.,  7132.,  7488.,  7844.,  8200.,  7408.,  7776.,  8144.,  8512.,  6532.,  6784.,  7036.,  7288.,  6808.,  7072.,  7336.,  7600.,  7084.,  7360.,  7636.,  7912.,  7360.,  7648.,  7936.,  8224.,  7636.,  7936.,  8236.,  8536.,  7912.,  8224.,  8536.,  8848.,  8188.,  8512.,  8836.,  9160.,  8464.,  8800.,  9136.,  9472.,  8740.,  9088.,  9436.,  9784.,  9016.,  9376.,  9736., 10096., 13156., 13696., 14236., 14776., 13432., 13984., 14536., 15088., 13708., 14272., 14836., 15400., 13984., 14560., 15136., 15712., 14260., 14848., 15436., 16024., 14536., 15136., 15736., 16336., 14812., 15424., 16036., 16648., 15088., 15712., 16336., 16960., 15364., 16000., 16636., 17272., 15640., 16288., 16936., 17584., 15916., 16576., 17236., 17896., 16192., 16864., 17536., 18208., 16468., 17152., 17836., 18520., 16744., 17440., 18136., 18832.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7377.,  7818.,  8259.,  8700.,  9141.,  9582., 10023., 10464.,  5082.,  5652.,  6222.,  6792.,  7362.,  7932.,  8502.,  9072.,  6894.,  7308.,  7722.,  8136.,  8550.,  8964.,  9378.,  9792.,  3870.,  4284.,  4698.,  5112.,  3849.,  4290.,  4731.,  5172.,  5613.,  6054.,  6495.,  6936.,  9738., 10308., 10878., 11448., 12018., 12588., 13158., 13728.,  3582.,  3996.,  4410.,  4824.,  5238.,  5652.,  6066.,  6480.,  6894.,  7308.,  7722.,  8136.,  8996.,  9512., 10028., 10544., 11060., 11576., 12092., 12608.,  6040.,  6704.,  7368.,  8032.,  8696.,  9360., 10024., 10688.,  8416.,  8896.,  9376.,  9856., 10336., 10816., 11296., 11776.,  4064.,  4544.,  5024.,  5504.,  4868.,  5384.,  5900.,  6416.,  6932.,  7448.,  7964.,  8480., 11224., 11888., 12552., 13216., 13880., 14544., 15208., 15872.,  4576.,  5056.,  5536.,  6016.,  6496.,  6976.,  7456.,  7936.,  8416.,  8896.,  9376.,  9856.,  5445.,  5778.,  6111.,  6444.,  6777.,  7110.,  7443.,  7776.,  3786.,  4212.,  4638.,  5064.,  5490.,  5916.,  6342.,  6768.,  4962.,  5268.,  5574.,  5880.,  6186.,  6492.,  6798.,  7104.,  2994.,  3300.,  3606.,  3912.,  2781.,  3114.,  3447.,  3780.,  4113.,  4446.,  4779.,  5112.,  7290.,  7716.,  8142.,  8568.,  8994.,  9420.,  9846., 10272.,  2514.,  2820.,  3126.,  3432.,  3738.,  4044.,  4350.,  4656.,  4962.,  5268.,  5574.,  5880.,  5877.,  6210.,  6543.,  6876.,  7209.,  7542.,  7875.,  8208.,  3882.,  4308.,  4734.,  5160.,  5586.,  6012.,  6438.,  6864.,  5442.,  5748.,  6054.,  6360.,  6666.,  6972.,  7278.,  7584.,  2514.,  2820.,  3126.,  3432.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15150., 15228., 15306., 15384., 15462., 15540., 15618., 15696., 15774., 15852., 15930., 16008., 16086., 16164., 16242., 16320., 12814., 12892., 12970., 13048., 13126., 13204., 13282., 13360., 13438., 13516., 13594., 13672., 15934., 16012., 16090., 16168., 16246., 16324., 16402., 16480., 16558., 16636., 16714., 16792., 16870., 16948., 17026., 17104., 17182., 17260., 17338., 17416., 17494., 17572., 17650., 17728., 17806., 17884., 17962., 18040., 20302., 20380., 20458., 20536., 20614., 20692., 20770., 20848., 20926., 21004., 21082., 21160., 21238., 21316., 21394., 21472., 21550., 21628., 21706., 21784., 21862., 21940., 22018., 22096., 22174., 22252., 22330., 22408., 24670., 24748., 24826., 24904., 24982., 25060., 25138., 25216., 25294., 25372., 25450., 25528., 25606., 25684., 25762., 25840., 25918., 25996., 26074., 26152., 26230., 26308., 26386., 26464., 26542., 26620., 26698., 26776., 25966., 26044., 26122., 26200., 26278., 26356., 26434., 26512., 26590., 26668., 26746., 26824., 26902., 26980., 27058., 27136., 18510., 18588., 18666., 18744., 18822., 18900., 18978., 19056., 19134., 19212., 19290., 19368., 13950., 14028., 14106., 14184., 14262., 14340., 14418., 14496., 13038., 13116., 13194., 13272., 13350., 13428., 13506., 13584., 13662., 13740., 13818., 13896., 13974., 14052., 14130., 14208., 14286., 14364., 14442., 14520., 16782., 16860., 16938., 17016., 17094., 17172., 17250., 17328., 17406., 17484., 17562., 17640., 17718., 17796., 17874., 17952., 18030., 18108., 18186., 18264., 18342., 18420., 18498., 18576., 18654., 18732., 18810., 18888.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10143., 10626., 10710., 11220., 11277., 11814., 11844., 12408., 12411., 13002., 12978., 13596., 13545., 14190., 14112., 14784.,  6384.,  6708.,  7104.,  7464.,  7824.,  8220.,  8544.,  8976.,  9264.,  9732.,  9984., 10488., 10704., 11244., 11424., 12000.,  9177.,  9660.,  9690., 10200., 10203., 10740., 10716., 11280., 11229., 11820., 11742., 12360., 12255., 12900., 12768., 13440.,  4161.,  4380.,  4674.,  4920.,  5187.,  5460.,  5700.,  6000.,  5607.,  5874.,  6174.,  6468.,  6741.,  7062.,  7308.,  7656.,  7875.,  8250.,  8442.,  8844.,  9009.,  9438.,  9576., 10032., 12336., 12948., 13056., 13704., 13776., 14460., 14496., 15216., 15216., 15972., 15936., 16728., 16656., 17484., 17376., 18240.,  5073.,  5340.,  5586.,  5880.,  6099.,  6420.,  6612.,  6960.,  7125.,  7500.,  7638.,  8040.,  8151.,  8580.,  8664.,  9120.,  9177.,  9660.,  9690., 10200., 10203., 10740., 10716., 11280.,  9860., 10440., 10472., 11088., 11084., 11736., 11696., 12384., 12308., 13032., 12920., 13680., 13532., 14328., 14144., 14976.,  7040.,  7472.,  7808.,  8288.,  8576.,  9104.,  9344.,  9920., 10112., 10736., 10880., 11552., 11648., 12368., 12416., 13184.,  8700.,  9280.,  9240.,  9856.,  9780., 10432., 10320., 11008., 10860., 11584., 11400., 12160., 11940., 12736., 12480., 13312.,  5340.,  5696.,  5880.,  6272.,  6420.,  6848.,  6960.,  7424.,  4964.,  5256.,  5576.,  5904.,  6188.,  6552.,  6800.,  7200.,  7412.,  7848.,  8024.,  8496.,  8636.,  9144.,  9248.,  9792., 12928., 13744., 13696., 14560., 14464., 15376., 15232., 16192., 16000., 17008., 16768., 17824., 17536., 18640., 18304., 19456.,  4380.,  4672.,  4920.,  5248.,  5460.,  5824.,  6000.,  6400.,  6540.,  6976.,  7080.,  7552.,  7620.,  8128.,  8160.,  8704.,  8700.,  9280.,  9240.,  9856.,  9780., 10432., 10320., 11008.,  6279.,  6762.,  6630.,  7140.,  6981.,  7518.,  7332.,  7896.,  7683.,  8274.,  8034.,  8652.,  8385.,  9030.,  8736.,  9408.,  3792.,  4116.,  4224.,  4584.,  4656.,  5052.,  5088.,  5520.,  5520.,  5988.,  5952.,  6456.,  6384.,  6924.,  6816.,  7392.,  5313.,  5796.,  5610.,  6120.,  5907.,  6444.,  6204.,  6768.,  6501.,  7092.,  6798.,  7416.,  7095.,  7740.,  7392.,  8064.,  2409.,  2628.,  2706.,  2952.,  3003.,  3276.,  3300.,  3600.,  3471.,  3738.,  3822.,  4116.,  4173.,  4494.,  4524.,  4872.,  4875.,  5250.,  5226.,  5628.,  5577.,  6006.,  5928.,  6384.,  7440.,  8052.,  7872.,  8520.,  8304.,  8988.,  8736.,  9456.,  9168.,  9924.,  9600., 10392., 10032., 10860., 10464., 11328.,  2937.,  3204.,  3234.,  3528.,  3531.,  3852.,  3828.,  4176.,  4125.,  4500.,  4422.,  4824.,  4719.,  5148.,  5016.,  5472.,  5313.,  5796.,  5610.,  6120.,  5907.,  6444.,  6204.,  6768.,  5655.,  6090.,  6006.,  6468.,  6357.,  6846.,  6708.,  7224.,  7059.,  7602.,  7410.,  7980.,  7761.,  8358.,  8112.,  8736.,  3984.,  4308.,  4416.,  4776.,  4848.,  5244.,  5280.,  5712.,  5712.,  6180.,  6144.,  6648.,  6576.,  7116.,  7008.,  7584.,  4785.,  5220.,  5082.,  5544.,  5379.,  5868.,  5676.,  6192.,  5973.,  6516.,  6270.,  6840.,  6567.,  7164.,  6864.,  7488.,  2937.,  3204.,  3234.,  3528.,  3531.,  3852.,  3828.,  4176.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8432.,  9308.,  8576.,  9464.,  8720.,  9620.,  8864.,  9776.,  9008.,  9932.,  9152., 10088.,  9296., 10244.,  9440., 10400.,  9584., 10556.,  9728., 10712.,  9872., 10868., 10016., 11024., 10160., 11180., 10304., 11336., 10448., 11492., 10592., 11648.,  5616.,  6172.,  5760.,  6328.,  5904.,  6484.,  6048.,  6640.,  6192.,  6796.,  6336.,  6952.,  6480.,  7108.,  6624.,  7264.,  6768.,  7420.,  6912.,  7576.,  7056.,  7732.,  7200.,  7888., 10096., 10876., 10240., 11032., 10384., 11188., 10528., 11344., 10672., 11500., 10816., 11656., 10960., 11812., 11104., 11968., 11248., 12124., 11392., 12280., 11536., 12436., 11680., 12592., 11824., 12748., 11968., 12904., 12112., 13060., 12256., 13216., 12400., 13372., 12544., 13528., 12688., 13684., 12832., 13840., 12976., 13996., 13120., 14152., 13264., 14308., 13408., 14464., 13552., 14620., 13696., 14776., 13840., 14932., 13984., 15088., 18160., 19612., 18304., 19768., 18448., 19924., 18592., 20080., 18736., 20236., 18880., 20392., 19024., 20548., 19168., 20704., 19312., 20860., 19456., 21016., 19600., 21172., 19744., 21328., 19888., 21484., 20032., 21640., 20176., 21796., 20320., 21952., 20464., 22108., 20608., 22264., 20752., 22420., 20896., 22576., 21040., 22732., 21184., 22888., 21328., 23044., 21472., 23200., 21616., 23356., 21760., 23512., 21904., 23668., 22048., 23824., 26224., 28348., 26368., 28504., 26512., 28660., 26656., 28816., 26800., 28972., 26944., 29128., 27088., 29284., 27232., 29440., 27376., 29596., 27520., 29752., 27664., 29908., 27808., 30064., 27952., 30220., 28096., 30376., 28240., 30532., 28384., 30688., 28528., 30844., 28672., 31000., 28816., 31156., 28960., 31312., 29104., 31468., 29248., 31624., 29392., 31780., 29536., 31936., 29680., 32092., 29824., 32248., 29968., 32404., 30112., 32560., 22256., 24284., 22400., 24440., 22544., 24596., 22688., 24752., 22832., 24908., 22976., 25064., 23120., 25220., 23264., 25376., 23408., 25532., 23552., 25688., 23696., 25844., 23840., 26000., 23984., 26156., 24128., 26312., 24272., 26468., 24416., 26624., 15600., 17052., 15744., 17208., 15888., 17364., 16032., 17520., 16176., 17676., 16320., 17832., 16464., 17988., 16608., 18144., 16752., 18300., 16896., 18456., 17040., 18612., 17184., 18768.,  6768.,  7420.,  6912.,  7576.,  7056.,  7732.,  7200.,  7888.,  7344.,  8044.,  7488.,  8200.,  7632.,  8356.,  7776.,  8512.,  6640.,  7132.,  6784.,  7288.,  6928.,  7444.,  7072.,  7600.,  7216.,  7756.,  7360.,  7912.,  7504.,  8068.,  7648.,  8224.,  7792.,  8380.,  7936.,  8536.,  8080.,  8692.,  8224.,  8848.,  8368.,  9004.,  8512.,  9160.,  8656.,  9316.,  8800.,  9472.,  8944.,  9628.,  9088.,  9784.,  9232.,  9940.,  9376., 10096., 13552., 14620., 13696., 14776., 13840., 14932., 13984., 15088., 14128., 15244., 14272., 15400., 14416., 15556., 14560., 15712., 14704., 15868., 14848., 16024., 14992., 16180., 15136., 16336., 15280., 16492., 15424., 16648., 15568., 16804., 15712., 16960., 15856., 17116., 16000., 17272., 16144., 17428., 16288., 17584., 16432., 17740., 16576., 17896., 16720., 18052., 16864., 18208., 17008., 18364., 17152., 18520., 17296., 18676., 17440., 18832.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9499.,  9982., 10465., 10948., 10030., 10540., 11050., 11560., 10561., 11098., 11635., 12172., 11092., 11656., 12220., 12784., 11623., 12214., 12805., 13396., 12154., 12772., 13390., 14008., 12685., 13330., 13975., 14620., 13216., 13888., 14560., 15232.,  5532.,  5856.,  6180.,  6504.,  6168.,  6528.,  6888.,  7248.,  6804.,  7200.,  7596.,  7992.,  7440.,  7872.,  8304.,  8736.,  8076.,  8544.,  9012.,  9480.,  8712.,  9216.,  9720., 10224.,  9348.,  9888., 10428., 10968.,  9984., 10560., 11136., 11712.,  7567.,  8050.,  8533.,  9016.,  7990.,  8500.,  9010.,  9520.,  8413.,  8950.,  9487., 10024.,  8836.,  9400.,  9964., 10528.,  9259.,  9850., 10441., 11032.,  9682., 10300., 10918., 11536., 10105., 10750., 11395., 12040., 10528., 11200., 11872., 12544.,  3431.,  3650.,  3869.,  4088.,  3854.,  4100.,  4346.,  4592.,  4277.,  4550.,  4823.,  5096.,  4700.,  5000.,  5300.,  5600.,  5251.,  5518.,  5785.,  6052.,  5782.,  6076.,  6370.,  6664.,  6313.,  6634.,  6955.,  7276.,  6844.,  7192.,  7540.,  7888.,  7375.,  7750.,  8125.,  8500.,  7906.,  8308.,  8710.,  9112.,  8437.,  8866.,  9295.,  9724.,  8968.,  9424.,  9880., 10336., 11004., 11616., 12228., 12840., 11640., 12288., 12936., 13584., 12276., 12960., 13644., 14328., 12912., 13632., 14352., 15072., 13548., 14304., 15060., 15816., 14184., 14976., 15768., 16560., 14820., 15648., 16476., 17304., 15456., 16320., 17184., 18048.,  4183.,  4450.,  4717.,  4984.,  4606.,  4900.,  5194.,  5488.,  5029.,  5350.,  5671.,  5992.,  5452.,  5800.,  6148.,  6496.,  5875.,  6250.,  6625.,  7000.,  6298.,  6700.,  7102.,  7504.,  6721.,  7150.,  7579.,  8008.,  7144.,  7600.,  8056.,  8512.,  7567.,  8050.,  8533.,  9016.,  7990.,  8500.,  9010.,  9520.,  8413.,  8950.,  9487., 10024.,  8836.,  9400.,  9964., 10528.,  9860., 10440., 11020., 11600., 10472., 11088., 11704., 12320., 11084., 11736., 12388., 13040., 11696., 12384., 13072., 13760., 12308., 13032., 13756., 14480., 12920., 13680., 14440., 15200., 13532., 14328., 15124., 15920., 14144., 14976., 15808., 16640.,  6736.,  7168.,  7600.,  8032.,  7456.,  7936.,  8416.,  8896.,  8176.,  8704.,  9232.,  9760.,  8896.,  9472., 10048., 10624.,  9616., 10240., 10864., 11488., 10336., 11008., 11680., 12352., 11056., 11776., 12496., 13216., 11776., 12544., 13312., 14080.,  7540.,  8120.,  8700.,  9280.,  8008.,  8624.,  9240.,  9856.,  8476.,  9128.,  9780., 10432.,  8944.,  9632., 10320., 11008.,  9412., 10136., 10860., 11584.,  9880., 10640., 11400., 12160., 10348., 11144., 11940., 12736., 10816., 11648., 12480., 13312.,  4628.,  4984.,  5340.,  5696.,  5096.,  5488.,  5880.,  6272.,  5564.,  5992.,  6420.,  6848.,  6032.,  6496.,  6960.,  7424.,  4964.,  5256.,  5548.,  5840.,  5576.,  5904.,  6232.,  6560.,  6188.,  6552.,  6916.,  7280.,  6800.,  7200.,  7600.,  8000.,  7412.,  7848.,  8284.,  8720.,  8024.,  8496.,  8968.,  9440.,  8636.,  9144.,  9652., 10160.,  9248.,  9792., 10336., 10880., 11984., 12800., 13616., 14432., 12704., 13568., 14432., 15296., 13424., 14336., 15248., 16160., 14144., 15104., 16064., 17024., 14864., 15872., 16880., 17888., 15584., 16640., 17696., 18752., 16304., 17408., 18512., 19616., 17024., 18176., 19328., 20480.,  3796.,  4088.,  4380.,  4672.,  4264.,  4592.,  4920.,  5248.,  4732.,  5096.,  5460.,  5824.,  5200.,  5600.,  6000.,  6400.,  5668.,  6104.,  6540.,  6976.,  6136.,  6608.,  7080.,  7552.,  6604.,  7112.,  7620.,  8128.,  7072.,  7616.,  8160.,  8704.,  7540.,  8120.,  8700.,  9280.,  8008.,  8624.,  9240.,  9856.,  8476.,  9128.,  9780., 10432.,  8944.,  9632., 10320., 11008.,  6923.,  7406.,  7889.,  8372.,  7310.,  7820.,  8330.,  8840.,  7697.,  8234.,  8771.,  9308.,  8084.,  8648.,  9212.,  9776.,  8471.,  9062.,  9653., 10244.,  8858.,  9476., 10094., 10712.,  9245.,  9890., 10535., 11180.,  9632., 10304., 10976., 11648.,  3804.,  4128.,  4452.,  4776.,  4248.,  4608.,  4968.,  5328.,  4692.,  5088.,  5484.,  5880.,  5136.,  5568.,  6000.,  6432.,  5580.,  6048.,  6516.,  6984.,  6024.,  6528.,  7032.,  7536.,  6468.,  7008.,  7548.,  8088.,  6912.,  7488.,  8064.,  8640.,  4991.,  5474.,  5957.,  6440.,  5270.,  5780.,  6290.,  6800.,  5549.,  6086.,  6623.,  7160.,  5828.,  6392.,  6956.,  7520.,  6107.,  6698.,  7289.,  7880.,  6386.,  7004.,  7622.,  8240.,  6665.,  7310.,  7955.,  8600.,  6944.,  7616.,  8288.,  8960.,  2263.,  2482.,  2701.,  2920.,  2542.,  2788.,  3034.,  3280.,  2821.,  3094.,  3367.,  3640.,  3100.,  3400.,  3700.,  4000.,  3827.,  4094.,  4361.,  4628.,  4214.,  4508.,  4802.,  5096.,  4601.,  4922.,  5243.,  5564.,  4988.,  5336.,  5684.,  6032.,  5375.,  5750.,  6125.,  6500.,  5762.,  6164.,  6566.,  6968.,  6149.,  6578.,  7007.,  7436.,  6536.,  6992.,  7448.,  7904.,  7740.,  8352.,  8964.,  9576.,  8184.,  8832.,  9480., 10128.,  8628.,  9312.,  9996., 10680.,  9072.,  9792., 10512., 11232.,  9516., 10272., 11028., 11784.,  9960., 10752., 11544., 12336., 10404., 11232., 12060., 12888., 10848., 11712., 12576., 13440.,  2759.,  3026.,  3293.,  3560.,  3038.,  3332.,  3626.,  3920.,  3317.,  3638.,  3959.,  4280.,  3596.,  3944.,  4292.,  4640.,  3875.,  4250.,  4625.,  5000.,  4154.,  4556.,  4958.,  5360.,  4433.,  4862.,  5291.,  5720.,  4712.,  5168.,  5624.,  6080.,  4991.,  5474.,  5957.,  6440.,  5270.,  5780.,  6290.,  6800.,  5549.,  6086.,  6623.,  7160.,  5828.,  6392.,  6956.,  7520.,  6235.,  6670.,  7105.,  7540.,  6622.,  7084.,  7546.,  8008.,  7009.,  7498.,  7987.,  8476.,  7396.,  7912.,  8428.,  8944.,  7783.,  8326.,  8869.,  9412.,  8170.,  8740.,  9310.,  9880.,  8557.,  9154.,  9751., 10348.,  8944.,  9568., 10192., 10816.,  4188.,  4512.,  4836.,  5160.,  4632.,  4992.,  5352.,  5712.,  5076.,  5472.,  5868.,  6264.,  5520.,  5952.,  6384.,  6816.,  5964.,  6432.,  6900.,  7368.,  6408.,  6912.,  7416.,  7920.,  6852.,  7392.,  7932.,  8472.,  7296.,  7872.,  8448.,  9024.,  4495.,  4930.,  5365.,  5800.,  4774.,  5236.,  5698.,  6160.,  5053.,  5542.,  6031.,  6520.,  5332.,  5848.,  6364.,  6880.,  5611.,  6154.,  6697.,  7240.,  5890.,  6460.,  7030.,  7600.,  6169.,  6766.,  7363.,  7960.,  6448.,  7072.,  7696.,  8320.,  2759.,  3026.,  3293.,  3560.,  3038.,  3332.,  3626.,  3920.,  3317.,  3638.,  3959.,  4280.,  3596.,  3944.,  4292.,  4640.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9972., 10464., 10956., 11448., 10248., 10752., 11256., 11760., 10524., 11040., 11556., 12072., 10800., 11328., 11856., 12384., 11076., 11616., 12156., 12696., 11352., 11904., 12456., 13008., 11628., 12192., 12756., 13320., 11904., 12480., 13056., 13632., 12180., 12768., 13356., 13944., 12456., 13056., 13656., 14256., 12732., 13344., 13956., 14568., 13008., 13632., 14256., 14880., 13284., 13920., 14556., 15192., 13560., 14208., 14856., 15504., 13836., 14496., 15156., 15816., 14112., 14784., 15456., 16128.,  9524.,  9952., 10380., 10808.,  9800., 10240., 10680., 11120., 10076., 10528., 10980., 11432., 10352., 10816., 11280., 11744., 10628., 11104., 11580., 12056., 10904., 11392., 11880., 12368., 11180., 11680., 12180., 12680., 11456., 11968., 12480., 12992., 11732., 12256., 12780., 13304., 12008., 12544., 13080., 13616., 12284., 12832., 13380., 13928., 12560., 13120., 13680., 14240., 19412., 20192., 20972., 21752., 19688., 20480., 21272., 22064., 19964., 20768., 21572., 22376., 20240., 21056., 21872., 22688., 20516., 21344., 22172., 23000., 20792., 21632., 22472., 23312., 21068., 21920., 22772., 23624., 21344., 22208., 23072., 23936., 21620., 22496., 23372., 24248., 21896., 22784., 23672., 24560., 22172., 23072., 23972., 24872., 22448., 23360., 24272., 25184., 22724., 23648., 24572., 25496., 23000., 23936., 24872., 25808., 23276., 24224., 25172., 26120., 23552., 24512., 25472., 26432., 23828., 24800., 25772., 26744., 24104., 25088., 26072., 27056., 24380., 25376., 26372., 27368., 24656., 25664., 26672., 27680., 24932., 25952., 26972., 27992., 25208., 26240., 27272., 28304., 25484., 26528., 27572., 28616., 25760., 26816., 27872., 28928., 21300., 22240., 23180., 24120., 21576., 22528., 23480., 24432., 21852., 22816., 23780., 24744., 22128., 23104., 24080., 25056., 14644., 15328., 16012., 16696., 14920., 15616., 16312., 17008., 15196., 15904., 16612., 17320., 15472., 16192., 16912., 17632., 15748., 16480., 17212., 17944., 16024., 16768., 17512., 18256., 16300., 17056., 17812., 18568., 16576., 17344., 18112., 18880., 16852., 17632., 18412., 19192., 17128., 17920., 18712., 19504., 17404., 18208., 19012., 19816., 17680., 18496., 19312., 20128., 17956., 18784., 19612., 20440., 18232., 19072., 19912., 20752., 18508., 19360., 20212., 21064., 18784., 19648., 20512., 21376.,  9972., 10464., 10956., 11448., 10248., 10752., 11256., 11760., 10524., 11040., 11556., 12072., 10800., 11328., 11856., 12384., 11076., 11616., 12156., 12696., 11352., 11904., 12456., 13008., 11628., 12192., 12756., 13320., 11904., 12480., 13056., 13632., 12180., 12768., 13356., 13944., 12456., 13056., 13656., 14256., 12732., 13344., 13956., 14568., 13008., 13632., 14256., 14880., 14996., 15584., 16172., 16760., 15272., 15872., 16472., 17072., 15548., 16160., 16772., 17384., 15824., 16448., 17072., 17696., 16100., 16736., 17372., 18008., 16376., 17024., 17672., 18320., 16652., 17312., 17972., 18632., 16928., 17600., 18272., 18944., 17204., 17888., 18572., 19256., 17480., 18176., 18872., 19568., 17756., 18464., 19172., 19880., 18032., 18752., 19472., 20192., 18308., 19040., 19772., 20504., 18584., 19328., 20072., 20816., 18860., 19616., 20372., 21128., 19136., 19904., 20672., 21440., 19412., 20192., 20972., 21752., 19688., 20480., 21272., 22064., 19964., 20768., 21572., 22376., 20240., 21056., 21872., 22688., 20516., 21344., 22172., 23000., 20792., 21632., 22472., 23312., 21068., 21920., 22772., 23624., 21344., 22208., 23072., 23936., 21620., 22496., 23372., 24248., 21896., 22784., 23672., 24560., 22172., 23072., 23972., 24872., 22448., 23360., 24272., 25184., 18804., 19680., 20556., 21432., 19080., 19968., 20856., 21744., 19356., 20256., 21156., 22056., 19632., 20544., 21456., 22368., 19908., 20832., 21756., 22680., 20184., 21120., 22056., 22992., 20460., 21408., 22356., 23304., 20736., 21696., 22656., 23616., 21012., 21984., 22956., 23928., 21288., 22272., 23256., 24240., 21564., 22560., 23556., 24552., 21840., 22848., 23856., 24864., 22116., 23136., 24156., 25176., 22392., 23424., 24456., 25488., 22668., 23712., 24756., 25800., 22944., 24000., 25056., 26112., 14644., 15328., 16012., 16696., 14920., 15616., 16312., 17008., 15196., 15904., 16612., 17320., 15472., 16192., 16912., 17632., 15748., 16480., 17212., 17944., 16024., 16768., 17512., 18256., 16300., 17056., 17812., 18568., 16576., 17344., 18112., 18880., 16852., 17632., 18412., 19192., 17128., 17920., 18712., 19504., 17404., 18208., 19012., 19816., 17680., 18496., 19312., 20128., 11732., 12256., 12780., 13304., 12008., 12544., 13080., 13616., 12284., 12832., 13380., 13928., 12560., 13120., 13680., 14240., 12836., 13408., 13980., 14552., 13112., 13696., 14280., 14864., 13388., 13984., 14580., 15176., 13664., 14272., 14880., 15488., 12788., 13280., 13772., 14264., 13064., 13568., 14072., 14576., 13340., 13856., 14372., 14888., 13616., 14144., 14672., 15200., 13892., 14432., 14972., 15512., 14168., 14720., 15272., 15824., 14444., 15008., 15572., 16136., 14720., 15296., 15872., 16448., 14996., 15584., 16172., 16760., 15272., 15872., 16472., 17072., 15548., 16160., 16772., 17384., 15824., 16448., 17072., 17696., 16100., 16736., 17372., 18008., 16376., 17024., 17672., 18320., 16652., 17312., 17972., 18632., 16928., 17600., 18272., 18944., 17204., 17888., 18572., 19256., 17480., 18176., 18872., 19568., 17756., 18464., 19172., 19880., 18032., 18752., 19472., 20192., 21300., 22240., 23180., 24120., 21576., 22528., 23480., 24432., 21852., 22816., 23780., 24744., 22128., 23104., 24080., 25056., 22404., 23392., 24380., 25368., 22680., 23680., 24680., 25680., 22956., 23968., 24980., 25992., 23232., 24256., 25280., 26304., 23508., 24544., 25580., 26616., 23784., 24832., 25880., 26928., 24060., 25120., 26180., 27240., 24336., 25408., 26480., 27552., 24612., 25696., 26780., 27864., 24888., 25984., 27080., 28176., 25164., 26272., 27380., 28488., 25440., 26560., 27680., 28800., 18804., 19680., 20556., 21432., 19080., 19968., 20856., 21744., 19356., 20256., 21156., 22056., 19632., 20544., 21456., 22368., 19908., 20832., 21756., 22680., 20184., 21120., 22056., 22992., 20460., 21408., 22356., 23304., 20736., 21696., 22656., 23616., 21012., 21984., 22956., 23928., 21288., 22272., 23256., 24240., 21564., 22560., 23556., 24552., 21840., 22848., 23856., 24864.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}