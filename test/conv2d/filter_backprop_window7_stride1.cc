/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Pair>
using FilterBackpropWindow7Stride1 = WindowStrideTest<Pair, 7, 1>;
TYPED_TEST_SUITE(FilterBackpropWindow7Stride1, GTestTypeTriples);
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5580.,  6833.,  8120.,  9436.,  8288.,  7121.,  5940.,  6480.,  7950.,
      9464.,  11016., 9688.,  8334.,  6960.,  9420.,  11467., 13552., 15668.,
      13720., 11755., 9780.,  14080., 17000., 19936., 22880., 19936., 17000.,
      14080., 9780.,  11755., 13720., 15668., 13552., 11467., 9420.,  6960.,
      8334.,  9688.,  11016., 9464.,  7950.,  6480.,  5940.,  7121.,  8288.,
      9436.,  8120.,  6833.,  5580.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      72.,  82.,  92.,  102., 112., 122., 132., 152., 162., 172.,
      182., 192., 202., 212., 232., 242., 252., 262., 272., 282.,
      292., 312., 322., 332., 342., 352., 362., 372., 392., 402.,
      412., 422., 432., 442., 452., 472., 482., 492., 502., 512.,
      522., 532., 552., 562., 572., 582., 592., 602., 612.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5565.,  5880.,  6649.,  7042.,  7700.,  8176.,  8708.,  9272.,  7329.,
      7840.,  6013.,  6466.,  4770.,  5160.,  8110.,  8480.,  9678.,  10140.,
      11200., 11760., 12664., 13328., 10710., 11312., 8838.,  9372.,  7060.,
      7520.,  8775.,  9240.,  10451., 11030., 12068., 12768., 13612., 14440.,
      11459., 12208., 9407.,  10070., 7470.,  8040.,  12840., 13440., 15208.,
      15952., 17472., 18368., 19616., 20672., 16520., 17472., 13576., 14416.,
      10800., 11520., 9855.,  10440., 11555., 12278., 13132., 14000., 14572.,
      15592., 12075., 12992., 9743.,  10550., 7590.,  8280.,  11150., 11680.,
      13134., 13788., 15008., 15792., 16760., 17680., 14070., 14896., 11526.,
      12252., 9140.,  9760.,  6645.,  7080.,  7753.,  8290.,  8764.,  9408.,
      9668.,  10424., 7945.,  8624.,  6349.,  6946.,  4890.,  5400.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122., 144.,  138., 164.,  154., 184.,  170., 204.,  186., 224.,
      202., 244.,  218., 264.,  250., 304.,  266., 324.,  282., 344.,
      298., 364.,  314., 384.,  330., 404.,  346., 424.,  378., 464.,
      394., 484.,  410., 504.,  426., 524.,  442., 544.,  458., 564.,
      474., 584.,  506., 624.,  522., 644.,  538., 664.,  554., 684.,
      570., 704.,  586., 724.,  602., 744.,  634., 784.,  650., 804.,
      666., 824.,  682., 844.,  698., 864.,  714., 884.,  730., 904.,
      762., 944.,  778., 964.,  794., 984.,  810., 1004., 826., 1024.,
      842., 1044., 858., 1064., 890., 1104., 906., 1124., 922., 1144.,
      938., 1164., 954., 1184., 970., 1204., 986., 1224.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6815.,  7130.,  7445.,  7760.,  7817.,  8210.,  8603.,  8996.,  8652.,
      9128.,  9604.,  10080., 9300.,  9864.,  10428., 10992., 7203.,  7714.,
      8225.,  8736.,  5333.,  5786.,  6239.,  6692.,  3710.,  4100.,  4490.,
      4880.,  8010.,  8380.,  8750.,  9120.,  9198.,  9660.,  10122., 10584.,
      10192., 10752., 11312., 11872., 10968., 11632., 12296., 12960., 8498.,
      9100.,  9702.,  10304., 6294.,  6828.,  7362.,  7896.,  4380.,  4840.,
      5300.,  5760.,  10045., 10510., 10975., 11440., 11491., 12070., 12649.,
      13228., 12684., 13384., 14084., 14784., 13596., 14424., 15252., 16080.,
      10521., 11270., 12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,
      5980.,  6550.,  7120.,  12920., 13520., 14120., 14720., 14696., 15440.,
      16184., 16928., 16128., 17024., 17920., 18816., 17184., 18240., 19296.,
      20352., 13272., 14224., 15176., 16128., 9800.,  10640., 11480., 12320.,
      6800.,  7520.,  8240.,  8960.,  12565., 13150., 13735., 14320., 14227.,
      14950., 15673., 16396., 15540., 16408., 17276., 18144., 16476., 17496.,
      18516., 19536., 12705., 13622., 14539., 15456., 9367.,  10174., 10981.,
      11788., 6490.,  7180.,  7870.,  8560.,  11370., 11900., 12430., 12960.,
      12846., 13500., 14154., 14808., 14000., 14784., 15568., 16352., 14808.,
      15728., 16648., 17568., 11410., 12236., 13062., 13888., 8406.,  9132.,
      9858.,  10584., 5820.,  6440.,  7060.,  7680.,  9335.,  9770.,  10205.,
      10640., 10553., 11090., 11627., 12164., 11508., 12152., 12796., 13440.,
      12180., 12936., 13692., 14448., 9387.,  10066., 10745., 11424., 6917.,
      7514.,  8111.,  8708.,  4790.,  5300.,  5810.,  6320.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      222.,  244.,  266.,  288.,  250.,  276.,  302.,  328.,  278.,  308.,
      338.,  368.,  306.,  340.,  374.,  408.,  334.,  372.,  410.,  448.,
      362.,  404.,  446.,  488.,  390.,  436.,  482.,  528.,  446.,  500.,
      554.,  608.,  474.,  532.,  590.,  648.,  502.,  564.,  626.,  688.,
      530.,  596.,  662.,  728.,  558.,  628.,  698.,  768.,  586.,  660.,
      734.,  808.,  614.,  692.,  770.,  848.,  670.,  756.,  842.,  928.,
      698.,  788.,  878.,  968.,  726.,  820.,  914.,  1008., 754.,  852.,
      950.,  1048., 782.,  884.,  986.,  1088., 810.,  916.,  1022., 1128.,
      838.,  948.,  1058., 1168., 894.,  1012., 1130., 1248., 922.,  1044.,
      1166., 1288., 950.,  1076., 1202., 1328., 978.,  1108., 1238., 1368.,
      1006., 1140., 1274., 1408., 1034., 1172., 1310., 1448., 1062., 1204.,
      1346., 1488., 1118., 1268., 1418., 1568., 1146., 1300., 1454., 1608.,
      1174., 1332., 1490., 1648., 1202., 1364., 1526., 1688., 1230., 1396.,
      1562., 1728., 1258., 1428., 1598., 1768., 1286., 1460., 1634., 1808.,
      1342., 1524., 1706., 1888., 1370., 1556., 1742., 1928., 1398., 1588.,
      1778., 1968., 1426., 1620., 1814., 2008., 1454., 1652., 1850., 2048.,
      1482., 1684., 1886., 2088., 1510., 1716., 1922., 2128., 1566., 1780.,
      1994., 2208., 1594., 1812., 2030., 2248., 1622., 1844., 2066., 2288.,
      1650., 1876., 2102., 2328., 1678., 1908., 2138., 2368., 1706., 1940.,
      2174., 2408., 1734., 1972., 2210., 2448.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4890.,  5400.,  6349.,  6946.,  7945.,  8624.,  9668.,  10424., 8764.,
      9408.,  7753.,  8290.,  6645.,  7080.,  9140.,  9760.,  11526., 12252.,
      14070., 14896., 16760., 17680., 15008., 15792., 13134., 13788., 11150.,
      11680., 7590.,  8280.,  9743.,  10550., 12075., 12992., 14572., 15592.,
      13132., 14000., 11555., 12278., 9855.,  10440., 10800., 11520., 13576.,
      14416., 16520., 17472., 19616., 20672., 17472., 18368., 15208., 15952.,
      12840., 13440., 7470.,  8040.,  9407.,  10070., 11459., 12208., 13612.,
      14440., 12068., 12768., 10451., 11030., 8775.,  9240.,  7060.,  7520.,
      8838.,  9372.,  10710., 11312., 12664., 13328., 11200., 11760., 9678.,
      10140., 8110.,  8480.,  4770.,  5160.,  6013.,  6466.,  7329.,  7840.,
      8708.,  9272.,  7700.,  8176.,  6649.,  7042.,  5565.,  5880.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,  144.,  154.,  164.,  174.,  184.,  194.,  204.,  214.,  224.,
      234.,  244.,  254.,  264.,  294.,  304.,  314.,  324.,  334.,  344.,
      354.,  364.,  374.,  384.,  394.,  404.,  414.,  424.,  454.,  464.,
      474.,  484.,  494.,  504.,  514.,  524.,  534.,  544.,  554.,  564.,
      574.,  584.,  614.,  624.,  634.,  644.,  654.,  664.,  674.,  684.,
      694.,  704.,  714.,  724.,  734.,  744.,  774.,  784.,  794.,  804.,
      814.,  824.,  834.,  844.,  854.,  864.,  874.,  884.,  894.,  904.,
      934.,  944.,  954.,  964.,  974.,  984.,  994.,  1004., 1014., 1024.,
      1034., 1044., 1054., 1064., 1094., 1104., 1114., 1124., 1134., 1144.,
      1154., 1164., 1174., 1184., 1194., 1204., 1214., 1224.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4535.,  4820.,  5050.,  5360.,  5798.,  6170.,  6386.,  6788.,  7133.,
      7602.,  7784.,  8288.,  8520.,  9096.,  9224.,  9840.,  7357.,  7896.,
      7938.,  8512.,  6182.,  6674.,  6650.,  7172.,  5015.,  5450.,  5380.,
      5840.,  9570.,  9960.,  10140., 10560., 11796., 12300., 12444., 12984.,
      14070., 14700., 14784., 15456., 16368., 17136., 17136., 17952., 14070.,
      14784., 14700., 15456., 11796., 12444., 12300., 12984., 9570.,  10140.,
      9960.,  10560., 6445.,  6860.,  7150.,  7600.,  8194.,  8734.,  8998.,
      9580.,  10031., 10710., 10920., 11648., 11928., 12760., 12888., 13776.,
      10255., 11032., 11046., 11872., 8578.,  9286.,  9214.,  9964.,  6925.,
      7550.,  7420.,  8080.,  12760., 13280., 13520., 14080., 15728., 16400.,
      16592., 17312., 18760., 19600., 19712., 20608., 21824., 22848., 22848.,
      23936., 18760., 19712., 19600., 20608., 15728., 16592., 16400., 17312.,
      12760., 13520., 13280., 14080., 6925.,  7420.,  7550.,  8080.,  8578.,
      9214.,  9286.,  9964.,  10255., 11046., 11032., 11872., 11928., 12888.,
      12760., 13776., 10031., 10920., 10710., 11648., 8194.,  8998.,  8734.,
      9580.,  6445.,  7150.,  6860.,  7600.,  9570.,  9960.,  10140., 10560.,
      11796., 12300., 12444., 12984., 14070., 14700., 14784., 15456., 16368.,
      17136., 17136., 17952., 14070., 14784., 14700., 15456., 11796., 12444.,
      12300., 12984., 9570.,  10140., 9960.,  10560., 5015.,  5380.,  5450.,
      5840.,  6182.,  6650.,  6674.,  7172.,  7357.,  7938.,  7896.,  8512.,
      8520.,  9224.,  9096.,  9840.,  7133.,  7784.,  7602.,  8288.,  5798.,
      6386.,  6170.,  6788.,  4535.,  5050.,  4820.,  5360.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      228.,  268.,  244.,  288.,  260.,  308.,  276.,  328.,  292.,  348.,
      308.,  368.,  324.,  388.,  340.,  408.,  356.,  428.,  372.,  448.,
      388.,  468.,  404.,  488.,  420.,  508.,  436.,  528.,  484.,  588.,
      500.,  608.,  516.,  628.,  532.,  648.,  548.,  668.,  564.,  688.,
      580.,  708.,  596.,  728.,  612.,  748.,  628.,  768.,  644.,  788.,
      660.,  808.,  676.,  828.,  692.,  848.,  740.,  908.,  756.,  928.,
      772.,  948.,  788.,  968.,  804.,  988.,  820.,  1008., 836.,  1028.,
      852.,  1048., 868.,  1068., 884.,  1088., 900.,  1108., 916.,  1128.,
      932.,  1148., 948.,  1168., 996.,  1228., 1012., 1248., 1028., 1268.,
      1044., 1288., 1060., 1308., 1076., 1328., 1092., 1348., 1108., 1368.,
      1124., 1388., 1140., 1408., 1156., 1428., 1172., 1448., 1188., 1468.,
      1204., 1488., 1252., 1548., 1268., 1568., 1284., 1588., 1300., 1608.,
      1316., 1628., 1332., 1648., 1348., 1668., 1364., 1688., 1380., 1708.,
      1396., 1728., 1412., 1748., 1428., 1768., 1444., 1788., 1460., 1808.,
      1508., 1868., 1524., 1888., 1540., 1908., 1556., 1928., 1572., 1948.,
      1588., 1968., 1604., 1988., 1620., 2008., 1636., 2028., 1652., 2048.,
      1668., 2068., 1684., 2088., 1700., 2108., 1716., 2128., 1764., 2188.,
      1780., 2208., 1796., 2228., 1812., 2248., 1828., 2268., 1844., 2288.,
      1860., 2308., 1876., 2328., 1892., 2348., 1908., 2368., 1924., 2388.,
      1940., 2408., 1956., 2428., 1972., 2448.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6385.,  6670.,  6955.,  7240.,  6910.,  7220.,  7530.,  7840.,  7768.,
      8140.,  8512.,  8884.,  8338.,  8740.,  9142.,  9544.,  9093.,  9562.,
      10031., 10500., 9688.,  10192., 10696., 11200., 10320., 10896., 11472.,
      12048., 10920., 11536., 12152., 12768., 8127.,  8666.,  9205.,  9744.,
      8582.,  9156.,  9730.,  10304., 6112.,  6604.,  7096.,  7588.,  6442.,
      6964.,  7486.,  8008.,  4315.,  4750.,  5185.,  5620.,  4540.,  5000.,
      5460.,  5920.,  8670.,  9060.,  9450.,  9840.,  9300.,  9720.,  10140.,
      10560., 10416., 10920., 11424., 11928., 11100., 11640., 12180., 12720.,
      12054., 12684., 13314., 13944., 12768., 13440., 14112., 14784., 13536.,
      14304., 15072., 15840., 14256., 15072., 15888., 16704., 10626., 11340.,
      12054., 12768., 11172., 11928., 12684., 13440., 7968.,  8616.,  9264.,
      9912.,  8364.,  9048.,  9732.,  10416., 5610.,  6180.,  6750.,  7320.,
      5880.,  6480.,  7080.,  7680.,  9275.,  9690.,  10105., 10520., 10010.,
      10460., 10910., 11360., 11240., 11780., 12320., 12860., 12038., 12620.,
      13202., 13784., 13111., 13790., 14469., 15148., 13944., 14672., 15400.,
      16128., 14832., 15664., 16496., 17328., 15672., 16560., 17448., 18336.,
      11669., 12446., 13223., 14000., 12306., 13132., 13958., 14784., 8768.,
      9476.,  10184., 10892., 9230.,  9980.,  10730., 11480., 6185.,  6810.,
      7435.,  8060.,  6500.,  7160.,  7820.,  8480.,  11560., 12080., 12600.,
      13120., 12400., 12960., 13520., 14080., 13888., 14560., 15232., 15904.,
      14800., 15520., 16240., 16960., 16072., 16912., 17752., 18592., 17024.,
      17920., 18816., 19712., 18048., 19072., 20096., 21120., 19008., 20096.,
      21184., 22272., 14168., 15120., 16072., 17024., 14896., 15904., 16912.,
      17920., 10624., 11488., 12352., 13216., 11152., 12064., 12976., 13888.,
      7480.,  8240.,  9000.,  9760.,  7840.,  8640.,  9440.,  10240., 10955.,
      11450., 11945., 12440., 11690., 12220., 12750., 13280., 13064., 13700.,
      14336., 14972., 13862., 14540., 15218., 15896., 15015., 15806., 16597.,
      17388., 15848., 16688., 17528., 18368., 16752., 17712., 18672., 19632.,
      17592., 18608., 19624., 20640., 13125., 14014., 14903., 15792., 13762.,
      14700., 15638., 16576., 9824.,  10628., 11432., 12236., 10286., 11132.,
      11978., 12824., 6905.,  7610.,  8315.,  9020.,  7220.,  7960.,  8700.,
      9440.,  8670.,  9060.,  9450.,  9840.,  9300.,  9720.,  10140., 10560.,
      10416., 10920., 11424., 11928., 11100., 11640., 12180., 12720., 12054.,
      12684., 13314., 13944., 12768., 13440., 14112., 14784., 13536., 14304.,
      15072., 15840., 14256., 15072., 15888., 16704., 10626., 11340., 12054.,
      12768., 11172., 11928., 12684., 13440., 7968.,  8616.,  9264.,  9912.,
      8364.,  9048.,  9732.,  10416., 5610.,  6180.,  6750.,  7320.,  5880.,
      6480.,  7080.,  7680.,  8065.,  8430.,  8795.,  9160.,  8590.,  8980.,
      9370.,  9760.,  9592.,  10060., 10528., 10996., 10162., 10660., 11158.,
      11656., 10997., 11578., 12159., 12740., 11592., 12208., 12824., 13440.,
      12240., 12944., 13648., 14352., 12840., 13584., 14328., 15072., 9583.,
      10234., 10885., 11536., 10038., 10724., 11410., 12096., 7168.,  7756.,
      8344.,  8932.,  7498.,  8116.,  8734.,  9352.,  5035.,  5550.,  6065.,
      6580.,  5260.,  5800.,  6340.,  6880.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      416.,  456.,  496.,  536.,  444.,  488.,  532.,  576.,  472.,  520.,
      568.,  616.,  500.,  552.,  604.,  656.,  528.,  584.,  640.,  696.,
      556.,  616.,  676.,  736.,  584.,  648.,  712.,  776.,  612.,  680.,
      748.,  816.,  640.,  712.,  784.,  856.,  668.,  744.,  820.,  896.,
      696.,  776.,  856.,  936.,  724.,  808.,  892.,  976.,  752.,  840.,
      928.,  1016., 780.,  872.,  964.,  1056., 864.,  968.,  1072., 1176.,
      892.,  1000., 1108., 1216., 920.,  1032., 1144., 1256., 948.,  1064.,
      1180., 1296., 976.,  1096., 1216., 1336., 1004., 1128., 1252., 1376.,
      1032., 1160., 1288., 1416., 1060., 1192., 1324., 1456., 1088., 1224.,
      1360., 1496., 1116., 1256., 1396., 1536., 1144., 1288., 1432., 1576.,
      1172., 1320., 1468., 1616., 1200., 1352., 1504., 1656., 1228., 1384.,
      1540., 1696., 1312., 1480., 1648., 1816., 1340., 1512., 1684., 1856.,
      1368., 1544., 1720., 1896., 1396., 1576., 1756., 1936., 1424., 1608.,
      1792., 1976., 1452., 1640., 1828., 2016., 1480., 1672., 1864., 2056.,
      1508., 1704., 1900., 2096., 1536., 1736., 1936., 2136., 1564., 1768.,
      1972., 2176., 1592., 1800., 2008., 2216., 1620., 1832., 2044., 2256.,
      1648., 1864., 2080., 2296., 1676., 1896., 2116., 2336., 1760., 1992.,
      2224., 2456., 1788., 2024., 2260., 2496., 1816., 2056., 2296., 2536.,
      1844., 2088., 2332., 2576., 1872., 2120., 2368., 2616., 1900., 2152.,
      2404., 2656., 1928., 2184., 2440., 2696., 1956., 2216., 2476., 2736.,
      1984., 2248., 2512., 2776., 2012., 2280., 2548., 2816., 2040., 2312.,
      2584., 2856., 2068., 2344., 2620., 2896., 2096., 2376., 2656., 2936.,
      2124., 2408., 2692., 2976., 2208., 2504., 2800., 3096., 2236., 2536.,
      2836., 3136., 2264., 2568., 2872., 3176., 2292., 2600., 2908., 3216.,
      2320., 2632., 2944., 3256., 2348., 2664., 2980., 3296., 2376., 2696.,
      3016., 3336., 2404., 2728., 3052., 3376., 2432., 2760., 3088., 3416.,
      2460., 2792., 3124., 3456., 2488., 2824., 3160., 3496., 2516., 2856.,
      3196., 3536., 2544., 2888., 3232., 3576., 2572., 2920., 3268., 3616.,
      2656., 3016., 3376., 3736., 2684., 3048., 3412., 3776., 2712., 3080.,
      3448., 3816., 2740., 3112., 3484., 3856., 2768., 3144., 3520., 3896.,
      2796., 3176., 3556., 3936., 2824., 3208., 3592., 3976., 2852., 3240.,
      3628., 4016., 2880., 3272., 3664., 4056., 2908., 3304., 3700., 4096.,
      2936., 3336., 3736., 4136., 2964., 3368., 3772., 4176., 2992., 3400.,
      3808., 4216., 3020., 3432., 3844., 4256., 3104., 3528., 3952., 4376.,
      3132., 3560., 3988., 4416., 3160., 3592., 4024., 4456., 3188., 3624.,
      4060., 4496., 3216., 3656., 4096., 4536., 3244., 3688., 4132., 4576.,
      3272., 3720., 4168., 4616., 3300., 3752., 4204., 4656., 3328., 3784.,
      4240., 4696., 3356., 3816., 4276., 4736., 3384., 3848., 4312., 4776.,
      3412., 3880., 4348., 4816., 3440., 3912., 4384., 4856., 3468., 3944.,
      4420., 4896.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4790.,  5300.,  5810.,  6320.,  6917.,  7514.,  8111.,  8708.,  9387.,
      10066., 10745., 11424., 12180., 12936., 13692., 14448., 11508., 12152.,
      12796., 13440., 10553., 11090., 11627., 12164., 9335.,  9770.,  10205.,
      10640., 5820.,  6440.,  7060.,  7680.,  8406.,  9132.,  9858.,  10584.,
      11410., 12236., 13062., 13888., 14808., 15728., 16648., 17568., 14000.,
      14784., 15568., 16352., 12846., 13500., 14154., 14808., 11370., 11900.,
      12430., 12960., 6490.,  7180.,  7870.,  8560.,  9367.,  10174., 10981.,
      11788., 12705., 13622., 14539., 15456., 16476., 17496., 18516., 19536.,
      15540., 16408., 17276., 18144., 14227., 14950., 15673., 16396., 12565.,
      13150., 13735., 14320., 6800.,  7520.,  8240.,  8960.,  9800.,  10640.,
      11480., 12320., 13272., 14224., 15176., 16128., 17184., 18240., 19296.,
      20352., 16128., 17024., 17920., 18816., 14696., 15440., 16184., 16928.,
      12920., 13520., 14120., 14720., 5410.,  5980.,  6550.,  7120.,  7783.,
      8446.,  9109.,  9772.,  10521., 11270., 12019., 12768., 13596., 14424.,
      15252., 16080., 12684., 13384., 14084., 14784., 11491., 12070., 12649.,
      13228., 10045., 10510., 10975., 11440., 4380.,  4840.,  5300.,  5760.,
      6294.,  6828.,  7362.,  7896.,  8498.,  9100.,  9702.,  10304., 10968.,
      11632., 12296., 12960., 10192., 10752., 11312., 11872., 9198.,  9660.,
      10122., 10584., 8010.,  8380.,  8750.,  9120.,  3710.,  4100.,  4490.,
      4880.,  5333.,  5786.,  6239.,  6692.,  7203.,  7714.,  8225.,  8736.,
      9300.,  9864.,  10428., 10992., 8652.,  9128.,  9604.,  10080., 7817.,
      8210.,  8603.,  8996.,  6815.,  7130.,  7445.,  7760.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      258.,  268.,  278.,  288.,  298.,  308.,  318.,  328.,  338.,  348.,
      358.,  368.,  378.,  388.,  398.,  408.,  418.,  428.,  438.,  448.,
      458.,  468.,  478.,  488.,  498.,  508.,  518.,  528.,  578.,  588.,
      598.,  608.,  618.,  628.,  638.,  648.,  658.,  668.,  678.,  688.,
      698.,  708.,  718.,  728.,  738.,  748.,  758.,  768.,  778.,  788.,
      798.,  808.,  818.,  828.,  838.,  848.,  898.,  908.,  918.,  928.,
      938.,  948.,  958.,  968.,  978.,  988.,  998.,  1008., 1018., 1028.,
      1038., 1048., 1058., 1068., 1078., 1088., 1098., 1108., 1118., 1128.,
      1138., 1148., 1158., 1168., 1218., 1228., 1238., 1248., 1258., 1268.,
      1278., 1288., 1298., 1308., 1318., 1328., 1338., 1348., 1358., 1368.,
      1378., 1388., 1398., 1408., 1418., 1428., 1438., 1448., 1458., 1468.,
      1478., 1488., 1538., 1548., 1558., 1568., 1578., 1588., 1598., 1608.,
      1618., 1628., 1638., 1648., 1658., 1668., 1678., 1688., 1698., 1708.,
      1718., 1728., 1738., 1748., 1758., 1768., 1778., 1788., 1798., 1808.,
      1858., 1868., 1878., 1888., 1898., 1908., 1918., 1928., 1938., 1948.,
      1958., 1968., 1978., 1988., 1998., 2008., 2018., 2028., 2038., 2048.,
      2058., 2068., 2078., 2088., 2098., 2108., 2118., 2128., 2178., 2188.,
      2198., 2208., 2218., 2228., 2238., 2248., 2258., 2268., 2278., 2288.,
      2298., 2308., 2318., 2328., 2338., 2348., 2358., 2368., 2378., 2388.,
      2398., 2408., 2418., 2428., 2438., 2448.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5035.,  5260.,  5550.,  5800.,  6065.,  6340.,  6580.,  6880.,  7168.,
      7498.,  7756.,  8116.,  8344.,  8734.,  8932.,  9352.,  9583.,  10038.,
      10234., 10724., 10885., 11410., 11536., 12096., 12240., 12840., 12944.,
      13584., 13648., 14328., 14352., 15072., 10997., 11592., 11578., 12208.,
      12159., 12824., 12740., 13440., 9592.,  10162., 10060., 10660., 10528.,
      11158., 10996., 11656., 8065.,  8590.,  8430.,  8980.,  8795.,  9370.,
      9160.,  9760.,  5610.,  5880.,  6180.,  6480.,  6750.,  7080.,  7320.,
      7680.,  7968.,  8364.,  8616.,  9048.,  9264.,  9732.,  9912.,  10416.,
      10626., 11172., 11340., 11928., 12054., 12684., 12768., 13440., 13536.,
      14256., 14304., 15072., 15072., 15888., 15840., 16704., 12054., 12768.,
      12684., 13440., 13314., 14112., 13944., 14784., 10416., 11100., 10920.,
      11640., 11424., 12180., 11928., 12720., 8670.,  9300.,  9060.,  9720.,
      9450.,  10140., 9840.,  10560., 6905.,  7220.,  7610.,  7960.,  8315.,
      8700.,  9020.,  9440.,  9824.,  10286., 10628., 11132., 11432., 11978.,
      12236., 12824., 13125., 13762., 14014., 14700., 14903., 15638., 15792.,
      16576., 16752., 17592., 17712., 18608., 18672., 19624., 19632., 20640.,
      15015., 15848., 15806., 16688., 16597., 17528., 17388., 18368., 13064.,
      13862., 13700., 14540., 14336., 15218., 14972., 15896., 10955., 11690.,
      11450., 12220., 11945., 12750., 12440., 13280., 7480.,  7840.,  8240.,
      8640.,  9000.,  9440.,  9760.,  10240., 10624., 11152., 11488., 12064.,
      12352., 12976., 13216., 13888., 14168., 14896., 15120., 15904., 16072.,
      16912., 17024., 17920., 18048., 19008., 19072., 20096., 20096., 21184.,
      21120., 22272., 16072., 17024., 16912., 17920., 17752., 18816., 18592.,
      19712., 13888., 14800., 14560., 15520., 15232., 16240., 15904., 16960.,
      11560., 12400., 12080., 12960., 12600., 13520., 13120., 14080., 6185.,
      6500.,  6810.,  7160.,  7435.,  7820.,  8060.,  8480.,  8768.,  9230.,
      9476.,  9980.,  10184., 10730., 10892., 11480., 11669., 12306., 12446.,
      13132., 13223., 13958., 14000., 14784., 14832., 15672., 15664., 16560.,
      16496., 17448., 17328., 18336., 13111., 13944., 13790., 14672., 14469.,
      15400., 15148., 16128., 11240., 12038., 11780., 12620., 12320., 13202.,
      12860., 13784., 9275.,  10010., 9690.,  10460., 10105., 10910., 10520.,
      11360., 5610.,  5880.,  6180.,  6480.,  6750.,  7080.,  7320.,  7680.,
      7968.,  8364.,  8616.,  9048.,  9264.,  9732.,  9912.,  10416., 10626.,
      11172., 11340., 11928., 12054., 12684., 12768., 13440., 13536., 14256.,
      14304., 15072., 15072., 15888., 15840., 16704., 12054., 12768., 12684.,
      13440., 13314., 14112., 13944., 14784., 10416., 11100., 10920., 11640.,
      11424., 12180., 11928., 12720., 8670.,  9300.,  9060.,  9720.,  9450.,
      10140., 9840.,  10560., 4315.,  4540.,  4750.,  5000.,  5185.,  5460.,
      5620.,  5920.,  6112.,  6442.,  6604.,  6964.,  7096.,  7486.,  7588.,
      8008.,  8127.,  8582.,  8666.,  9156.,  9205.,  9730.,  9744.,  10304.,
      10320., 10920., 10896., 11536., 11472., 12152., 12048., 12768., 9093.,
      9688.,  9562.,  10192., 10031., 10696., 10500., 11200., 7768.,  8338.,
      8140.,  8740.,  8512.,  9142.,  8884.,  9544.,  6385.,  6910.,  6670.,
      7220.,  6955.,  7530.,  7240.,  7840.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      440.,  516.,  456.,  536.,  472.,  556.,  488.,  576.,  504.,  596.,
      520.,  616.,  536.,  636.,  552.,  656.,  568.,  676.,  584.,  696.,
      600.,  716.,  616.,  736.,  632.,  756.,  648.,  776.,  664.,  796.,
      680.,  816.,  696.,  836.,  712.,  856.,  728.,  876.,  744.,  896.,
      760.,  916.,  776.,  936.,  792.,  956.,  808.,  976.,  824.,  996.,
      840.,  1016., 856.,  1036., 872.,  1056., 952.,  1156., 968.,  1176.,
      984.,  1196., 1000., 1216., 1016., 1236., 1032., 1256., 1048., 1276.,
      1064., 1296., 1080., 1316., 1096., 1336., 1112., 1356., 1128., 1376.,
      1144., 1396., 1160., 1416., 1176., 1436., 1192., 1456., 1208., 1476.,
      1224., 1496., 1240., 1516., 1256., 1536., 1272., 1556., 1288., 1576.,
      1304., 1596., 1320., 1616., 1336., 1636., 1352., 1656., 1368., 1676.,
      1384., 1696., 1464., 1796., 1480., 1816., 1496., 1836., 1512., 1856.,
      1528., 1876., 1544., 1896., 1560., 1916., 1576., 1936., 1592., 1956.,
      1608., 1976., 1624., 1996., 1640., 2016., 1656., 2036., 1672., 2056.,
      1688., 2076., 1704., 2096., 1720., 2116., 1736., 2136., 1752., 2156.,
      1768., 2176., 1784., 2196., 1800., 2216., 1816., 2236., 1832., 2256.,
      1848., 2276., 1864., 2296., 1880., 2316., 1896., 2336., 1976., 2436.,
      1992., 2456., 2008., 2476., 2024., 2496., 2040., 2516., 2056., 2536.,
      2072., 2556., 2088., 2576., 2104., 2596., 2120., 2616., 2136., 2636.,
      2152., 2656., 2168., 2676., 2184., 2696., 2200., 2716., 2216., 2736.,
      2232., 2756., 2248., 2776., 2264., 2796., 2280., 2816., 2296., 2836.,
      2312., 2856., 2328., 2876., 2344., 2896., 2360., 2916., 2376., 2936.,
      2392., 2956., 2408., 2976., 2488., 3076., 2504., 3096., 2520., 3116.,
      2536., 3136., 2552., 3156., 2568., 3176., 2584., 3196., 2600., 3216.,
      2616., 3236., 2632., 3256., 2648., 3276., 2664., 3296., 2680., 3316.,
      2696., 3336., 2712., 3356., 2728., 3376., 2744., 3396., 2760., 3416.,
      2776., 3436., 2792., 3456., 2808., 3476., 2824., 3496., 2840., 3516.,
      2856., 3536., 2872., 3556., 2888., 3576., 2904., 3596., 2920., 3616.,
      3000., 3716., 3016., 3736., 3032., 3756., 3048., 3776., 3064., 3796.,
      3080., 3816., 3096., 3836., 3112., 3856., 3128., 3876., 3144., 3896.,
      3160., 3916., 3176., 3936., 3192., 3956., 3208., 3976., 3224., 3996.,
      3240., 4016., 3256., 4036., 3272., 4056., 3288., 4076., 3304., 4096.,
      3320., 4116., 3336., 4136., 3352., 4156., 3368., 4176., 3384., 4196.,
      3400., 4216., 3416., 4236., 3432., 4256., 3512., 4356., 3528., 4376.,
      3544., 4396., 3560., 4416., 3576., 4436., 3592., 4456., 3608., 4476.,
      3624., 4496., 3640., 4516., 3656., 4536., 3672., 4556., 3688., 4576.,
      3704., 4596., 3720., 4616., 3736., 4636., 3752., 4656., 3768., 4676.,
      3784., 4696., 3800., 4716., 3816., 4736., 3832., 4756., 3848., 4776.,
      3864., 4796., 3880., 4816., 3896., 4836., 3912., 4856., 3928., 4876.,
      3944., 4896.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5525.,  5750.,  5975.,  6200.,  6050.,  6300.,  6550.,  6800.,  6575.,
      6850.,  7125.,  7400.,  7100.,  7400.,  7700.,  8000.,  7670.,  8000.,
      8330.,  8660.,  8240.,  8600.,  8960.,  9320.,  8810.,  9200.,  9590.,
      9980.,  9380.,  9800.,  10220., 10640., 9975.,  10430., 10885., 11340.,
      10570., 11060., 11550., 12040., 11165., 11690., 12215., 12740., 11760.,
      12320., 12880., 13440., 12360., 12960., 13560., 14160., 12960., 13600.,
      14240., 14880., 13560., 14240., 14920., 15600., 14160., 14880., 15600.,
      16320., 9975.,  10570., 11165., 11760., 10430., 11060., 11690., 12320.,
      10885., 11550., 12215., 12880., 11340., 12040., 12740., 13440., 7670.,
      8240.,  8810.,  9380.,  8000.,  8600.,  9200.,  9800.,  8330.,  8960.,
      9590.,  10220., 8660.,  9320.,  9980.,  10640., 5525.,  6050.,  6575.,
      7100.,  5750.,  6300.,  6850.,  7400.,  5975.,  6550.,  7125.,  7700.,
      6200.,  6800.,  7400.,  8000.,  6630.,  6900.,  7170.,  7440.,  7260.,
      7560.,  7860.,  8160.,  7890.,  8220.,  8550.,  8880.,  8520.,  8880.,
      9240.,  9600.,  9204.,  9600.,  9996.,  10392., 9888.,  10320., 10752.,
      11184., 10572., 11040., 11508., 11976., 11256., 11760., 12264., 12768.,
      11970., 12516., 13062., 13608., 12684., 13272., 13860., 14448., 13398.,
      14028., 14658., 15288., 14112., 14784., 15456., 16128., 14832., 15552.,
      16272., 16992., 15552., 16320., 17088., 17856., 16272., 17088., 17904.,
      18720., 16992., 17856., 18720., 19584., 11970., 12684., 13398., 14112.,
      12516., 13272., 14028., 14784., 13062., 13860., 14658., 15456., 13608.,
      14448., 15288., 16128., 9204.,  9888.,  10572., 11256., 9600.,  10320.,
      11040., 11760., 9996.,  10752., 11508., 12264., 10392., 11184., 11976.,
      12768., 6630.,  7260.,  7890.,  8520.,  6900.,  7560.,  8220.,  8880.,
      7170.,  7860.,  8550.,  9240.,  7440.,  8160.,  8880.,  9600.,  7735.,
      8050.,  8365.,  8680.,  8470.,  8820.,  9170.,  9520.,  9205.,  9590.,
      9975.,  10360., 9940.,  10360., 10780., 11200., 10738., 11200., 11662.,
      12124., 11536., 12040., 12544., 13048., 12334., 12880., 13426., 13972.,
      13132., 13720., 14308., 14896., 13965., 14602., 15239., 15876., 14798.,
      15484., 16170., 16856., 15631., 16366., 17101., 17836., 16464., 17248.,
      18032., 18816., 17304., 18144., 18984., 19824., 18144., 19040., 19936.,
      20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840., 22848.,
      13965., 14798., 15631., 16464., 14602., 15484., 16366., 17248., 15239.,
      16170., 17101., 18032., 15876., 16856., 17836., 18816., 10738., 11536.,
      12334., 13132., 11200., 12040., 12880., 13720., 11662., 12544., 13426.,
      14308., 12124., 13048., 13972., 14896., 7735.,  8470.,  9205.,  9940.,
      8050.,  8820.,  9590.,  10360., 8365.,  9170.,  9975.,  10780., 8680.,
      9520.,  10360., 11200., 8840.,  9200.,  9560.,  9920.,  9680.,  10080.,
      10480., 10880., 10520., 10960., 11400., 11840., 11360., 11840., 12320.,
      12800., 12272., 12800., 13328., 13856., 13184., 13760., 14336., 14912.,
      14096., 14720., 15344., 15968., 15008., 15680., 16352., 17024., 15960.,
      16688., 17416., 18144., 16912., 17696., 18480., 19264., 17864., 18704.,
      19544., 20384., 18816., 19712., 20608., 21504., 19776., 20736., 21696.,
      22656., 20736., 21760., 22784., 23808., 21696., 22784., 23872., 24960.,
      22656., 23808., 24960., 26112., 15960., 16912., 17864., 18816., 16688.,
      17696., 18704., 19712., 17416., 18480., 19544., 20608., 18144., 19264.,
      20384., 21504., 12272., 13184., 14096., 15008., 12800., 13760., 14720.,
      15680., 13328., 14336., 15344., 16352., 13856., 14912., 15968., 17024.,
      8840.,  9680.,  10520., 11360., 9200.,  10080., 10960., 11840., 9560.,
      10480., 11400., 12320., 9920.,  10880., 11840., 12800., 7735.,  8050.,
      8365.,  8680.,  8470.,  8820.,  9170.,  9520.,  9205.,  9590.,  9975.,
      10360., 9940.,  10360., 10780., 11200., 10738., 11200., 11662., 12124.,
      11536., 12040., 12544., 13048., 12334., 12880., 13426., 13972., 13132.,
      13720., 14308., 14896., 13965., 14602., 15239., 15876., 14798., 15484.,
      16170., 16856., 15631., 16366., 17101., 17836., 16464., 17248., 18032.,
      18816., 17304., 18144., 18984., 19824., 18144., 19040., 19936., 20832.,
      18984., 19936., 20888., 21840., 19824., 20832., 21840., 22848., 13965.,
      14798., 15631., 16464., 14602., 15484., 16366., 17248., 15239., 16170.,
      17101., 18032., 15876., 16856., 17836., 18816., 10738., 11536., 12334.,
      13132., 11200., 12040., 12880., 13720., 11662., 12544., 13426., 14308.,
      12124., 13048., 13972., 14896., 7735.,  8470.,  9205.,  9940.,  8050.,
      8820.,  9590.,  10360., 8365.,  9170.,  9975.,  10780., 8680.,  9520.,
      10360., 11200., 6630.,  6900.,  7170.,  7440.,  7260.,  7560.,  7860.,
      8160.,  7890.,  8220.,  8550.,  8880.,  8520.,  8880.,  9240.,  9600.,
      9204.,  9600.,  9996.,  10392., 9888.,  10320., 10752., 11184., 10572.,
      11040., 11508., 11976., 11256., 11760., 12264., 12768., 11970., 12516.,
      13062., 13608., 12684., 13272., 13860., 14448., 13398., 14028., 14658.,
      15288., 14112., 14784., 15456., 16128., 14832., 15552., 16272., 16992.,
      15552., 16320., 17088., 17856., 16272., 17088., 17904., 18720., 16992.,
      17856., 18720., 19584., 11970., 12684., 13398., 14112., 12516., 13272.,
      14028., 14784., 13062., 13860., 14658., 15456., 13608., 14448., 15288.,
      16128., 9204.,  9888.,  10572., 11256., 9600.,  10320., 11040., 11760.,
      9996.,  10752., 11508., 12264., 10392., 11184., 11976., 12768., 6630.,
      7260.,  7890.,  8520.,  6900.,  7560.,  8220.,  8880.,  7170.,  7860.,
      8550.,  9240.,  7440.,  8160.,  8880.,  9600.,  5525.,  5750.,  5975.,
      6200.,  6050.,  6300.,  6550.,  6800.,  6575.,  6850.,  7125.,  7400.,
      7100.,  7400.,  7700.,  8000.,  7670.,  8000.,  8330.,  8660.,  8240.,
      8600.,  8960.,  9320.,  8810.,  9200.,  9590.,  9980.,  9380.,  9800.,
      10220., 10640., 9975.,  10430., 10885., 11340., 10570., 11060., 11550.,
      12040., 11165., 11690., 12215., 12740., 11760., 12320., 12880., 13440.,
      12360., 12960., 13560., 14160., 12960., 13600., 14240., 14880., 13560.,
      14240., 14920., 15600., 14160., 14880., 15600., 16320., 9975.,  10570.,
      11165., 11760., 10430., 11060., 11690., 12320., 10885., 11550., 12215.,
      12880., 11340., 12040., 12740., 13440., 7670.,  8240.,  8810.,  9380.,
      8000.,  8600.,  9200.,  9800.,  8330.,  8960.,  9590.,  10220., 8660.,
      9320.,  9980.,  10640., 5525.,  6050.,  6575.,  7100.,  5750.,  6300.,
      6850.,  7400.,  5975.,  6550.,  7125.,  7700.,  6200.,  6800.,  7400.,
      8000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      804.,  880.,  956.,  1032., 832.,  912.,  992.,  1072., 860.,  944.,
      1028., 1112., 888.,  976.,  1064., 1152., 916.,  1008., 1100., 1192.,
      944.,  1040., 1136., 1232., 972.,  1072., 1172., 1272., 1000., 1104.,
      1208., 1312., 1028., 1136., 1244., 1352., 1056., 1168., 1280., 1392.,
      1084., 1200., 1316., 1432., 1112., 1232., 1352., 1472., 1140., 1264.,
      1388., 1512., 1168., 1296., 1424., 1552., 1196., 1328., 1460., 1592.,
      1224., 1360., 1496., 1632., 1252., 1392., 1532., 1672., 1280., 1424.,
      1568., 1712., 1308., 1456., 1604., 1752., 1336., 1488., 1640., 1792.,
      1364., 1520., 1676., 1832., 1392., 1552., 1712., 1872., 1420., 1584.,
      1748., 1912., 1448., 1616., 1784., 1952., 1476., 1648., 1820., 1992.,
      1504., 1680., 1856., 2032., 1532., 1712., 1892., 2072., 1560., 1744.,
      1928., 2112., 1700., 1904., 2108., 2312., 1728., 1936., 2144., 2352.,
      1756., 1968., 2180., 2392., 1784., 2000., 2216., 2432., 1812., 2032.,
      2252., 2472., 1840., 2064., 2288., 2512., 1868., 2096., 2324., 2552.,
      1896., 2128., 2360., 2592., 1924., 2160., 2396., 2632., 1952., 2192.,
      2432., 2672., 1980., 2224., 2468., 2712., 2008., 2256., 2504., 2752.,
      2036., 2288., 2540., 2792., 2064., 2320., 2576., 2832., 2092., 2352.,
      2612., 2872., 2120., 2384., 2648., 2912., 2148., 2416., 2684., 2952.,
      2176., 2448., 2720., 2992., 2204., 2480., 2756., 3032., 2232., 2512.,
      2792., 3072., 2260., 2544., 2828., 3112., 2288., 2576., 2864., 3152.,
      2316., 2608., 2900., 3192., 2344., 2640., 2936., 3232., 2372., 2672.,
      2972., 3272., 2400., 2704., 3008., 3312., 2428., 2736., 3044., 3352.,
      2456., 2768., 3080., 3392., 2596., 2928., 3260., 3592., 2624., 2960.,
      3296., 3632., 2652., 2992., 3332., 3672., 2680., 3024., 3368., 3712.,
      2708., 3056., 3404., 3752., 2736., 3088., 3440., 3792., 2764., 3120.,
      3476., 3832., 2792., 3152., 3512., 3872., 2820., 3184., 3548., 3912.,
      2848., 3216., 3584., 3952., 2876., 3248., 3620., 3992., 2904., 3280.,
      3656., 4032., 2932., 3312., 3692., 4072., 2960., 3344., 3728., 4112.,
      2988., 3376., 3764., 4152., 3016., 3408., 3800., 4192., 3044., 3440.,
      3836., 4232., 3072., 3472., 3872., 4272., 3100., 3504., 3908., 4312.,
      3128., 3536., 3944., 4352., 3156., 3568., 3980., 4392., 3184., 3600.,
      4016., 4432., 3212., 3632., 4052., 4472., 3240., 3664., 4088., 4512.,
      3268., 3696., 4124., 4552., 3296., 3728., 4160., 4592., 3324., 3760.,
      4196., 4632., 3352., 3792., 4232., 4672., 3492., 3952., 4412., 4872.,
      3520., 3984., 4448., 4912., 3548., 4016., 4484., 4952., 3576., 4048.,
      4520., 4992., 3604., 4080., 4556., 5032., 3632., 4112., 4592., 5072.,
      3660., 4144., 4628., 5112., 3688., 4176., 4664., 5152., 3716., 4208.,
      4700., 5192., 3744., 4240., 4736., 5232., 3772., 4272., 4772., 5272.,
      3800., 4304., 4808., 5312., 3828., 4336., 4844., 5352., 3856., 4368.,
      4880., 5392., 3884., 4400., 4916., 5432., 3912., 4432., 4952., 5472.,
      3940., 4464., 4988., 5512., 3968., 4496., 5024., 5552., 3996., 4528.,
      5060., 5592., 4024., 4560., 5096., 5632., 4052., 4592., 5132., 5672.,
      4080., 4624., 5168., 5712., 4108., 4656., 5204., 5752., 4136., 4688.,
      5240., 5792., 4164., 4720., 5276., 5832., 4192., 4752., 5312., 5872.,
      4220., 4784., 5348., 5912., 4248., 4816., 5384., 5952., 4388., 4976.,
      5564., 6152., 4416., 5008., 5600., 6192., 4444., 5040., 5636., 6232.,
      4472., 5072., 5672., 6272., 4500., 5104., 5708., 6312., 4528., 5136.,
      5744., 6352., 4556., 5168., 5780., 6392., 4584., 5200., 5816., 6432.,
      4612., 5232., 5852., 6472., 4640., 5264., 5888., 6512., 4668., 5296.,
      5924., 6552., 4696., 5328., 5960., 6592., 4724., 5360., 5996., 6632.,
      4752., 5392., 6032., 6672., 4780., 5424., 6068., 6712., 4808., 5456.,
      6104., 6752., 4836., 5488., 6140., 6792., 4864., 5520., 6176., 6832.,
      4892., 5552., 6212., 6872., 4920., 5584., 6248., 6912., 4948., 5616.,
      6284., 6952., 4976., 5648., 6320., 6992., 5004., 5680., 6356., 7032.,
      5032., 5712., 6392., 7072., 5060., 5744., 6428., 7112., 5088., 5776.,
      6464., 7152., 5116., 5808., 6500., 7192., 5144., 5840., 6536., 7232.,
      5284., 6000., 6716., 7432., 5312., 6032., 6752., 7472., 5340., 6064.,
      6788., 7512., 5368., 6096., 6824., 7552., 5396., 6128., 6860., 7592.,
      5424., 6160., 6896., 7632., 5452., 6192., 6932., 7672., 5480., 6224.,
      6968., 7712., 5508., 6256., 7004., 7752., 5536., 6288., 7040., 7792.,
      5564., 6320., 7076., 7832., 5592., 6352., 7112., 7872., 5620., 6384.,
      7148., 7912., 5648., 6416., 7184., 7952., 5676., 6448., 7220., 7992.,
      5704., 6480., 7256., 8032., 5732., 6512., 7292., 8072., 5760., 6544.,
      7328., 8112., 5788., 6576., 7364., 8152., 5816., 6608., 7400., 8192.,
      5844., 6640., 7436., 8232., 5872., 6672., 7472., 8272., 5900., 6704.,
      7508., 8312., 5928., 6736., 7544., 8352., 5956., 6768., 7580., 8392.,
      5984., 6800., 7616., 8432., 6012., 6832., 7652., 8472., 6040., 6864.,
      7688., 8512., 6180., 7024., 7868., 8712., 6208., 7056., 7904., 8752.,
      6236., 7088., 7940., 8792., 6264., 7120., 7976., 8832., 6292., 7152.,
      8012., 8872., 6320., 7184., 8048., 8912., 6348., 7216., 8084., 8952.,
      6376., 7248., 8120., 8992., 6404., 7280., 8156., 9032., 6432., 7312.,
      8192., 9072., 6460., 7344., 8228., 9112., 6488., 7376., 8264., 9152.,
      6516., 7408., 8300., 9192., 6544., 7440., 8336., 9232., 6572., 7472.,
      8372., 9272., 6600., 7504., 8408., 9312., 6628., 7536., 8444., 9352.,
      6656., 7568., 8480., 9392., 6684., 7600., 8516., 9432., 6712., 7632.,
      8552., 9472., 6740., 7664., 8588., 9512., 6768., 7696., 8624., 9552.,
      6796., 7728., 8660., 9592., 6824., 7760., 8696., 9632., 6852., 7792.,
      8732., 9672., 6880., 7824., 8768., 9712., 6908., 7856., 8804., 9752.,
      6936., 7888., 8840., 9792.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7989.,  8600.,  9260.,  10124., 8804.,  7514.,  6259.,  7450.,  8437.,
      9480.,  11021., 9928.,  8861.,  7826.,  9773.,  11550., 13372., 15968.,
      14580., 13232., 11931., 13512., 16316., 19168., 23084., 19168., 16316.,
      13512., 11931., 13232., 14580., 15968., 13372., 11550., 9773.,  7826.,
      8861.,  9928.,  11021., 9480.,  8437.,  7450.,  6259.,  7514.,  8804.,
      10124., 9260.,  8600.,  7989.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181.,  202.,  223.,  244.,  265.,  286.,  307.,  370.,  391.,  412.,
      433.,  454.,  475.,  496.,  559.,  580.,  601.,  622.,  643.,  664.,
      685.,  748.,  769.,  790.,  811.,  832.,  853.,  874.,  937.,  958.,
      979.,  1000., 1021., 1042., 1063., 1126., 1147., 1168., 1189., 1210.,
      1231., 1252., 1315., 1336., 1357., 1378., 1399., 1420., 1441.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6501.,  6922.,  7310.,  7792.,  8148.,  8696.,  9165.,  9784.,  7996.,
      8552.,  6956.,  7444.,  6055.,  6470.,  6764.,  7284.,  8529.,  9130.,
      10304., 10992., 12525., 13306., 11408., 12112., 10445., 11066., 8624.,
      9156.,  10265., 10938., 11629., 12412., 12980., 13880., 15040., 16064.,
      13452., 14376., 12079., 12896., 10615., 11318., 11360., 12080., 13908.,
      14744., 16448., 17408., 19988., 21080., 16576., 17536., 14372., 15224.,
      11792., 12528., 10075., 10774., 11832., 12640., 13580., 14504., 15305.,
      16352., 13668., 14584., 12658., 13468., 10977., 11674., 10100., 10724.,
      13005., 13722., 13856., 14672., 14689., 15610., 11920., 12720., 10217.,
      10922., 8568.,  9172.,  6743.,  7238.,  7681.,  8244.,  8620.,  9256.,
      9550.,  10264., 8596.,  9208.,  8087.,  8624.,  7297.,  7754.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      323.,  362.,  359.,  404.,  395.,  446.,  431.,  488.,  467.,  530.,
      503.,  572.,  539.,  614.,  647.,  740.,  683.,  782.,  719.,  824.,
      755.,  866.,  791.,  908.,  827.,  950.,  863.,  992.,  971.,  1118.,
      1007., 1160., 1043., 1202., 1079., 1244., 1115., 1286., 1151., 1328.,
      1187., 1370., 1295., 1496., 1331., 1538., 1367., 1580., 1403., 1622.,
      1439., 1664., 1475., 1706., 1511., 1748., 1619., 1874., 1655., 1916.,
      1691., 1958., 1727., 2000., 1763., 2042., 1799., 2084., 1835., 2126.,
      1943., 2252., 1979., 2294., 2015., 2336., 2051., 2378., 2087., 2420.,
      2123., 2462., 2159., 2504., 2267., 2630., 2303., 2672., 2339., 2714.,
      2375., 2756., 2411., 2798., 2447., 2840., 2483., 2882.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5573.,  5994.,  6415.,  6836.,  6202.,  6684.,  7166.,  7648.,  7684.,
      8232.,  8780.,  9328.,  9295.,  9914.,  10533., 11152., 8140.,  8696.,
      9252.,  9808.,  7312.,  7800.,  8288.,  8776.,  6831.,  7246.,  7661.,
      8076.,  6896.,  7416.,  7936.,  8456.,  8457.,  9058.,  9659.,  10260.,
      10096., 10784., 11472., 12160., 12109., 12890., 13671., 14452., 10848.,
      11552., 12256., 12960., 9997.,  10618., 11239., 11860., 8556.,  9088.,
      9620.,  10152., 9841.,  10514., 11187., 11860., 11595., 12378., 13161.,
      13944., 13636., 14536., 15436., 16336., 16256., 17280., 18304., 19328.,
      14716., 15640., 16564., 17488., 12685., 13502., 14319., 15136., 10895.,
      11598., 12301., 13004., 10128., 10848., 11568., 12288., 12036., 12872.,
      13708., 14544., 14528., 15488., 16448., 17408., 17892., 18984., 20076.,
      21168., 14912., 15872., 16832., 17792., 13108., 13960., 14812., 15664.,
      11264., 12000., 12736., 13472., 9723.,  10422., 11121., 11820., 11976.,
      12784., 13592., 14400., 15100., 16024., 16948., 17872., 16027., 17074.,
      18121., 19168., 13684., 14600., 15516., 16432., 12090., 12900., 13710.,
      14520., 10153., 10850., 11547., 12244., 9080.,  9704.,  10328., 10952.,
      11949., 12666., 13383., 14100., 12656., 13472., 14288., 15104., 13225.,
      14146., 15067., 15988., 11456., 12256., 13056., 13856., 9969.,  10674.,
      11379., 12084., 8820.,  9424.,  10028., 10632., 8415.,  8910.,  9405.,
      9900.,  8847.,  9410.,  9973.,  10536., 9212.,  9848.,  10484., 11120.,
      9490.,  10204., 10918., 11632., 8196.,  8808.,  9420.,  10032., 7701.,
      8238.,  8775.,  9312.,  7161.,  7618.,  8075.,  8532.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      607.,  646.,  685.,  724.,  673.,  718.,  763.,  808.,  739.,  790.,
      841.,  892.,  805.,  862.,  919.,  976.,  871.,  934.,  997.,  1060.,
      937.,  1006., 1075., 1144., 1003., 1078., 1153., 1228., 1201., 1294.,
      1387., 1480., 1267., 1366., 1465., 1564., 1333., 1438., 1543., 1648.,
      1399., 1510., 1621., 1732., 1465., 1582., 1699., 1816., 1531., 1654.,
      1777., 1900., 1597., 1726., 1855., 1984., 1795., 1942., 2089., 2236.,
      1861., 2014., 2167., 2320., 1927., 2086., 2245., 2404., 1993., 2158.,
      2323., 2488., 2059., 2230., 2401., 2572., 2125., 2302., 2479., 2656.,
      2191., 2374., 2557., 2740., 2389., 2590., 2791., 2992., 2455., 2662.,
      2869., 3076., 2521., 2734., 2947., 3160., 2587., 2806., 3025., 3244.,
      2653., 2878., 3103., 3328., 2719., 2950., 3181., 3412., 2785., 3022.,
      3259., 3496., 2983., 3238., 3493., 3748., 3049., 3310., 3571., 3832.,
      3115., 3382., 3649., 3916., 3181., 3454., 3727., 4000., 3247., 3526.,
      3805., 4084., 3313., 3598., 3883., 4168., 3379., 3670., 3961., 4252.,
      3577., 3886., 4195., 4504., 3643., 3958., 4273., 4588., 3709., 4030.,
      4351., 4672., 3775., 4102., 4429., 4756., 3841., 4174., 4507., 4840.,
      3907., 4246., 4585., 4924., 3973., 4318., 4663., 5008., 4171., 4534.,
      4897., 5260., 4237., 4606., 4975., 5344., 4303., 4678., 5053., 5428.,
      4369., 4750., 5131., 5512., 4435., 4822., 5209., 5596., 4501., 4894.,
      5287., 5680., 4567., 4966., 5365., 5764.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7297.,  7754.,  8087.,  8624.,  8596.,  9208.,  9550.,  10264., 8620.,
      9256.,  7681.,  8244.,  6743.,  7238.,  8568.,  9172.,  10217., 10922.,
      11920., 12720., 14689., 15610., 13856., 14672., 13005., 13722., 10100.,
      10724., 10977., 11674., 12658., 13468., 13668., 14584., 15305., 16352.,
      13580., 14504., 11832., 12640., 10075., 10774., 11792., 12528., 14372.,
      15224., 16576., 17536., 19988., 21080., 16448., 17408., 13908., 14744.,
      11360., 12080., 10615., 11318., 12079., 12896., 13452., 14376., 15040.,
      16064., 12980., 13880., 11629., 12412., 10265., 10938., 8624.,  9156.,
      10445., 11066., 11408., 12112., 12525., 13306., 10304., 10992., 8529.,
      9130.,  6764.,  7284.,  6055.,  6470.,  6956.,  7444.,  7996.,  8552.,
      9165.,  9784.,  8148.,  8696.,  7310.,  7792.,  6501.,  6922.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      341.,  362.,  383.,  404.,  425.,  446.,  467.,  488.,  509.,  530.,
      551.,  572.,  593.,  614.,  719.,  740.,  761.,  782.,  803.,  824.,
      845.,  866.,  887.,  908.,  929.,  950.,  971.,  992.,  1097., 1118.,
      1139., 1160., 1181., 1202., 1223., 1244., 1265., 1286., 1307., 1328.,
      1349., 1370., 1475., 1496., 1517., 1538., 1559., 1580., 1601., 1622.,
      1643., 1664., 1685., 1706., 1727., 1748., 1853., 1874., 1895., 1916.,
      1937., 1958., 1979., 2000., 2021., 2042., 2063., 2084., 2105., 2126.,
      2231., 2252., 2273., 2294., 2315., 2336., 2357., 2378., 2399., 2420.,
      2441., 2462., 2483., 2504., 2609., 2630., 2651., 2672., 2693., 2714.,
      2735., 2756., 2777., 2798., 2819., 2840., 2861., 2882.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7734.,  8194.,  8170.,  8660.,  8589.,  9134.,  9116.,  9696.,  8776.,
      9384.,  9384.,  10032., 9427.,  10108., 10138., 10864., 8328.,  8952.,
      8952.,  9616.,  7349.,  7906.,  7896.,  8488.,  6510.,  6990.,  6990.,
      7500.,  7108.,  7664.,  7640.,  8232.,  9130.,  9778.,  9762.,  10452.,
      11088., 11808., 11808., 12576., 14110., 14914., 14938., 15796., 13392.,
      14112., 14112., 14880., 12842., 13466., 13466., 14132., 9412.,  9928.,
      9952.,  10504., 9898.,  10562., 10546., 11252., 11127., 11908., 11898.,
      12728., 11864., 12744., 12744., 13680., 13233., 14226., 14240., 15296.,
      11928., 12824., 12824., 13776., 10847., 11632., 11646., 12480., 9410.,
      10070., 10094., 10796., 11088., 11808., 11808., 12576., 14424., 15272.,
      15272., 16176., 17856., 18816., 18816., 19840., 22504., 23592., 23592.,
      24752., 17856., 18816., 18816., 19840., 14424., 15272., 15272., 16176.,
      11088., 11808., 11808., 12576., 9410.,  10094., 10070., 10796., 10847.,
      11646., 11632., 12480., 11928., 12824., 12824., 13776., 13233., 14240.,
      14226., 15296., 11864., 12744., 12744., 13680., 11127., 11898., 11908.,
      12728., 9898.,  10546., 10562., 11252., 9412.,  9952.,  9928.,  10504.,
      12842., 13466., 13466., 14132., 13392., 14112., 14112., 14880., 14110.,
      14938., 14914., 15796., 11088., 11808., 11808., 12576., 9130.,  9762.,
      9778.,  10452., 7108.,  7640.,  7664.,  8232.,  6510.,  6990.,  6990.,
      7500.,  7349.,  7896.,  7906.,  8488.,  8328.,  8952.,  8952.,  9616.,
      9427.,  10138., 10108., 10864., 8776.,  9384.,  9384.,  10032., 8589.,
      9116.,  9134.,  9696.,  7734.,  8170.,  8194.,  8660.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      610.,  682.,  646.,  724.,  682.,  766.,  718.,  808.,  754.,  850.,
      790.,  892.,  826.,  934.,  862.,  976.,  898.,  1018., 934.,  1060.,
      970.,  1102., 1006., 1144., 1042., 1186., 1078., 1228., 1258., 1438.,
      1294., 1480., 1330., 1522., 1366., 1564., 1402., 1606., 1438., 1648.,
      1474., 1690., 1510., 1732., 1546., 1774., 1582., 1816., 1618., 1858.,
      1654., 1900., 1690., 1942., 1726., 1984., 1906., 2194., 1942., 2236.,
      1978., 2278., 2014., 2320., 2050., 2362., 2086., 2404., 2122., 2446.,
      2158., 2488., 2194., 2530., 2230., 2572., 2266., 2614., 2302., 2656.,
      2338., 2698., 2374., 2740., 2554., 2950., 2590., 2992., 2626., 3034.,
      2662., 3076., 2698., 3118., 2734., 3160., 2770., 3202., 2806., 3244.,
      2842., 3286., 2878., 3328., 2914., 3370., 2950., 3412., 2986., 3454.,
      3022., 3496., 3202., 3706., 3238., 3748., 3274., 3790., 3310., 3832.,
      3346., 3874., 3382., 3916., 3418., 3958., 3454., 4000., 3490., 4042.,
      3526., 4084., 3562., 4126., 3598., 4168., 3634., 4210., 3670., 4252.,
      3850., 4462., 3886., 4504., 3922., 4546., 3958., 4588., 3994., 4630.,
      4030., 4672., 4066., 4714., 4102., 4756., 4138., 4798., 4174., 4840.,
      4210., 4882., 4246., 4924., 4282., 4966., 4318., 5008., 4498., 5218.,
      4534., 5260., 4570., 5302., 4606., 5344., 4642., 5386., 4678., 5428.,
      4714., 5470., 4750., 5512., 4786., 5554., 4822., 5596., 4858., 5638.,
      4894., 5680., 4930., 5722., 4966., 5764.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  6988.,  7448.,  7908.,  6954.,  7444.,  7934.,  8424.,  7417.,
      7962.,  8507.,  9052.,  7924.,  8504.,  9084.,  9664.,  8560.,  9168.,
      9776.,  10384., 9160.,  9808.,  10456., 11104., 10205., 10886., 11567.,
      12248., 10910., 11636., 12362., 13088., 9216.,  9840.,  10464., 11088.,
      9816.,  10480., 11144., 11808., 8605.,  9162.,  9719.,  10276., 9120.,
      9712.,  10304., 10896., 8412.,  8892.,  9372.,  9852.,  8862.,  9372.,
      9882.,  10392., 7068.,  7624.,  8180.,  8736.,  7584.,  8176.,  8768.,
      9360.,  8364.,  9012.,  9660.,  10308., 8978.,  9668.,  10358., 11048.,
      9648.,  10368., 11088., 11808., 10368., 11136., 11904., 12672., 12056.,
      12860., 13664., 14468., 12890., 13748., 14606., 15464., 11376., 12096.,
      12816., 13536., 12096., 12864., 13632., 14400., 11236., 11860., 12484.,
      13108., 11866., 12532., 13198., 13864., 8612.,  9128.,  9644.,  10160.,
      9176.,  9728.,  10280., 10832., 8956.,  9620.,  10284., 10948., 9570.,
      10276., 10982., 11688., 10721., 11502., 12283., 13064., 11446., 12276.,
      13106., 13936., 13152., 14032., 14912., 15792., 13992., 14928., 15864.,
      16800., 16225., 17218., 18211., 19204., 17184., 18240., 19296., 20352.,
      15664., 16560., 17456., 18352., 16504., 17456., 18408., 19360., 12685.,
      13470., 14255., 15040., 13434., 14268., 15102., 15936., 9808.,  10468.,
      11128., 11788., 10462., 11164., 11866., 12568., 9648.,  10368., 11088.,
      11808., 10368., 11136., 11904., 12672., 12224., 13072., 13920., 14768.,
      13064., 13968., 14872., 15776., 15168., 16128., 17088., 18048., 16128.,
      17152., 18176., 19200., 19344., 20432., 21520., 22608., 20424., 21584.,
      22744., 23904., 15424., 16384., 17344., 18304., 16384., 17408., 18432.,
      19456., 12544., 13392., 14240., 15088., 13384., 14288., 15192., 16096.,
      10224., 10944., 11664., 12384., 10944., 11712., 12480., 13248., 9592.,
      10276., 10960., 11644., 10198., 10924., 11650., 12376., 12223., 13022.,
      13821., 14620., 12944., 13792., 14640., 15488., 15920., 16816., 17712.,
      18608., 16760., 17712., 18664., 19616., 15763., 16770., 17777., 18784.,
      16694., 17764., 18834., 19904., 12576., 13456., 14336., 15216., 13416.,
      14352., 15288., 16224., 10731., 11502., 12273., 13044., 11476., 12296.,
      13116., 13936., 8844.,  9492.,  10140., 10788., 9490.,  10180., 10870.,
      11560., 8012.,  8552.,  9092.,  9632.,  8528.,  9104.,  9680.,  10256.,
      11236., 11860., 12484., 13108., 11866., 12532., 13198., 13864., 11568.,
      12288., 13008., 13728., 12288., 13056., 13824., 14592., 12032., 12860.,
      13688., 14516., 12818., 13700., 14582., 15464., 10224., 10944., 11664.,
      12384., 10944., 11712., 12480., 13248., 8956.,  9588.,  10220., 10852.,
      9602.,  10276., 10950., 11624., 7988.,  8520.,  9052.,  9584.,  8552.,
      9120.,  9688.,  10256., 8988.,  9468.,  9948.,  10428., 9438.,  9948.,
      10458., 10968., 8935.,  9482.,  10029., 10576., 9470.,  10052., 10634.,
      11216., 9024.,  9648.,  10272., 10896., 9624.,  10288., 10952., 11616.,
      9215.,  9926.,  10637., 11348., 9860.,  10616., 11372., 12128., 7920.,
      8528.,  9136.,  9744.,  8520.,  9168.,  9816.,  10464., 7435.,  7962.,
      8489.,  9016.,  7978.,  8540.,  9102.,  9664.,  6616.,  7052.,  7488.,
      7924.,  7090.,  7556.,  8022.,  8488.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1148.,  1220.,  1292.,  1364.,  1214.,  1292.,  1370.,  1448.,  1280.,
      1364.,  1448.,  1532.,  1346.,  1436.,  1526.,  1616.,  1412.,  1508.,
      1604.,  1700.,  1478.,  1580.,  1682.,  1784.,  1544.,  1652.,  1760.,
      1868.,  1610.,  1724.,  1838.,  1952.,  1676.,  1796.,  1916.,  2036.,
      1742.,  1868.,  1994.,  2120.,  1808.,  1940.,  2072.,  2204.,  1874.,
      2012.,  2150.,  2288.,  1940.,  2084.,  2228.,  2372.,  2006.,  2156.,
      2306.,  2456.,  2336.,  2516.,  2696.,  2876.,  2402.,  2588.,  2774.,
      2960.,  2468.,  2660.,  2852.,  3044.,  2534.,  2732.,  2930.,  3128.,
      2600.,  2804.,  3008.,  3212.,  2666.,  2876.,  3086.,  3296.,  2732.,
      2948.,  3164.,  3380.,  2798.,  3020.,  3242.,  3464.,  2864.,  3092.,
      3320.,  3548.,  2930.,  3164.,  3398.,  3632.,  2996.,  3236.,  3476.,
      3716.,  3062.,  3308.,  3554.,  3800.,  3128.,  3380.,  3632.,  3884.,
      3194.,  3452.,  3710.,  3968.,  3524.,  3812.,  4100.,  4388.,  3590.,
      3884.,  4178.,  4472.,  3656.,  3956.,  4256.,  4556.,  3722.,  4028.,
      4334.,  4640.,  3788.,  4100.,  4412.,  4724.,  3854.,  4172.,  4490.,
      4808.,  3920.,  4244.,  4568.,  4892.,  3986.,  4316.,  4646.,  4976.,
      4052.,  4388.,  4724.,  5060.,  4118.,  4460.,  4802.,  5144.,  4184.,
      4532.,  4880.,  5228.,  4250.,  4604.,  4958.,  5312.,  4316.,  4676.,
      5036.,  5396.,  4382.,  4748.,  5114.,  5480.,  4712.,  5108.,  5504.,
      5900.,  4778.,  5180.,  5582.,  5984.,  4844.,  5252.,  5660.,  6068.,
      4910.,  5324.,  5738.,  6152.,  4976.,  5396.,  5816.,  6236.,  5042.,
      5468.,  5894.,  6320.,  5108.,  5540.,  5972.,  6404.,  5174.,  5612.,
      6050.,  6488.,  5240.,  5684.,  6128.,  6572.,  5306.,  5756.,  6206.,
      6656.,  5372.,  5828.,  6284.,  6740.,  5438.,  5900.,  6362.,  6824.,
      5504.,  5972.,  6440.,  6908.,  5570.,  6044.,  6518.,  6992.,  5900.,
      6404.,  6908.,  7412.,  5966.,  6476.,  6986.,  7496.,  6032.,  6548.,
      7064.,  7580.,  6098.,  6620.,  7142.,  7664.,  6164.,  6692.,  7220.,
      7748.,  6230.,  6764.,  7298.,  7832.,  6296.,  6836.,  7376.,  7916.,
      6362.,  6908.,  7454.,  8000.,  6428.,  6980.,  7532.,  8084.,  6494.,
      7052.,  7610.,  8168.,  6560.,  7124.,  7688.,  8252.,  6626.,  7196.,
      7766.,  8336.,  6692.,  7268.,  7844.,  8420.,  6758.,  7340.,  7922.,
      8504.,  7088.,  7700.,  8312.,  8924.,  7154.,  7772.,  8390.,  9008.,
      7220.,  7844.,  8468.,  9092.,  7286.,  7916.,  8546.,  9176.,  7352.,
      7988.,  8624.,  9260.,  7418.,  8060.,  8702.,  9344.,  7484.,  8132.,
      8780.,  9428.,  7550.,  8204.,  8858.,  9512.,  7616.,  8276.,  8936.,
      9596.,  7682.,  8348.,  9014.,  9680.,  7748.,  8420.,  9092.,  9764.,
      7814.,  8492.,  9170.,  9848.,  7880.,  8564.,  9248.,  9932.,  7946.,
      8636.,  9326.,  10016., 8276.,  8996.,  9716.,  10436., 8342.,  9068.,
      9794.,  10520., 8408.,  9140.,  9872.,  10604., 8474.,  9212.,  9950.,
      10688., 8540.,  9284.,  10028., 10772., 8606.,  9356.,  10106., 10856.,
      8672.,  9428.,  10184., 10940., 8738.,  9500.,  10262., 11024., 8804.,
      9572.,  10340., 11108., 8870.,  9644.,  10418., 11192., 8936.,  9716.,
      10496., 11276., 9002.,  9788.,  10574., 11360., 9068.,  9860.,  10652.,
      11444., 9134.,  9932.,  10730., 11528.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7161.,  7618.,  8075.,  8532.,  7701.,  8238.,  8775.,  9312.,  8196.,
      8808.,  9420.,  10032., 9490.,  10204., 10918., 11632., 9212.,  9848.,
      10484., 11120., 8847.,  9410.,  9973.,  10536., 8415.,  8910.,  9405.,
      9900.,  8820.,  9424.,  10028., 10632., 9969.,  10674., 11379., 12084.,
      11456., 12256., 13056., 13856., 13225., 14146., 15067., 15988., 12656.,
      13472., 14288., 15104., 11949., 12666., 13383., 14100., 9080.,  9704.,
      10328., 10952., 10153., 10850., 11547., 12244., 12090., 12900., 13710.,
      14520., 13684., 14600., 15516., 16432., 16027., 17074., 18121., 19168.,
      15100., 16024., 16948., 17872., 11976., 12784., 13592., 14400., 9723.,
      10422., 11121., 11820., 11264., 12000., 12736., 13472., 13108., 13960.,
      14812., 15664., 14912., 15872., 16832., 17792., 17892., 18984., 20076.,
      21168., 14528., 15488., 16448., 17408., 12036., 12872., 13708., 14544.,
      10128., 10848., 11568., 12288., 10895., 11598., 12301., 13004., 12685.,
      13502., 14319., 15136., 14716., 15640., 16564., 17488., 16256., 17280.,
      18304., 19328., 13636., 14536., 15436., 16336., 11595., 12378., 13161.,
      13944., 9841.,  10514., 11187., 11860., 8556.,  9088.,  9620.,  10152.,
      9997.,  10618., 11239., 11860., 10848., 11552., 12256., 12960., 12109.,
      12890., 13671., 14452., 10096., 10784., 11472., 12160., 8457.,  9058.,
      9659.,  10260., 6896.,  7416.,  7936.,  8456.,  6831.,  7246.,  7661.,
      8076.,  7312.,  7800.,  8288.,  8776.,  8140.,  8696.,  9252.,  9808.,
      9295.,  9914.,  10533., 11152., 7684.,  8232.,  8780.,  9328.,  6202.,
      6684.,  7166.,  7648.,  5573.,  5994.,  6415.,  6836.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      661.,  682.,  703.,  724.,  745.,  766.,  787.,  808.,  829.,  850.,
      871.,  892.,  913.,  934.,  955.,  976.,  997.,  1018., 1039., 1060.,
      1081., 1102., 1123., 1144., 1165., 1186., 1207., 1228., 1417., 1438.,
      1459., 1480., 1501., 1522., 1543., 1564., 1585., 1606., 1627., 1648.,
      1669., 1690., 1711., 1732., 1753., 1774., 1795., 1816., 1837., 1858.,
      1879., 1900., 1921., 1942., 1963., 1984., 2173., 2194., 2215., 2236.,
      2257., 2278., 2299., 2320., 2341., 2362., 2383., 2404., 2425., 2446.,
      2467., 2488., 2509., 2530., 2551., 2572., 2593., 2614., 2635., 2656.,
      2677., 2698., 2719., 2740., 2929., 2950., 2971., 2992., 3013., 3034.,
      3055., 3076., 3097., 3118., 3139., 3160., 3181., 3202., 3223., 3244.,
      3265., 3286., 3307., 3328., 3349., 3370., 3391., 3412., 3433., 3454.,
      3475., 3496., 3685., 3706., 3727., 3748., 3769., 3790., 3811., 3832.,
      3853., 3874., 3895., 3916., 3937., 3958., 3979., 4000., 4021., 4042.,
      4063., 4084., 4105., 4126., 4147., 4168., 4189., 4210., 4231., 4252.,
      4441., 4462., 4483., 4504., 4525., 4546., 4567., 4588., 4609., 4630.,
      4651., 4672., 4693., 4714., 4735., 4756., 4777., 4798., 4819., 4840.,
      4861., 4882., 4903., 4924., 4945., 4966., 4987., 5008., 5197., 5218.,
      5239., 5260., 5281., 5302., 5323., 5344., 5365., 5386., 5407., 5428.,
      5449., 5470., 5491., 5512., 5533., 5554., 5575., 5596., 5617., 5638.,
      5659., 5680., 5701., 5722., 5743., 5764.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6616.,  7090.,  7052.,  7556.,  7488.,  8022.,  7924.,  8488.,  7435.,
      7978.,  7962.,  8540.,  8489.,  9102.,  9016.,  9664.,  7920.,  8520.,
      8528.,  9168.,  9136.,  9816.,  9744.,  10464., 9215.,  9860.,  9926.,
      10616., 10637., 11372., 11348., 12128., 9024.,  9624.,  9648.,  10288.,
      10272., 10952., 10896., 11616., 8935.,  9470.,  9482.,  10052., 10029.,
      10634., 10576., 11216., 8988.,  9438.,  9468.,  9948.,  9948.,  10458.,
      10428., 10968., 7988.,  8552.,  8520.,  9120.,  9052.,  9688.,  9584.,
      10256., 8956.,  9602.,  9588.,  10276., 10220., 10950., 10852., 11624.,
      10224., 10944., 10944., 11712., 11664., 12480., 12384., 13248., 12032.,
      12818., 12860., 13700., 13688., 14582., 14516., 15464., 11568., 12288.,
      12288., 13056., 13008., 13824., 13728., 14592., 11236., 11866., 11860.,
      12532., 12484., 13198., 13108., 13864., 8012.,  8528.,  8552.,  9104.,
      9092.,  9680.,  9632.,  10256., 8844.,  9490.,  9492.,  10180., 10140.,
      10870., 10788., 11560., 10731., 11476., 11502., 12296., 12273., 13116.,
      13044., 13936., 12576., 13416., 13456., 14352., 14336., 15288., 15216.,
      16224., 15763., 16694., 16770., 17764., 17777., 18834., 18784., 19904.,
      15920., 16760., 16816., 17712., 17712., 18664., 18608., 19616., 12223.,
      12944., 13022., 13792., 13821., 14640., 14620., 15488., 9592.,  10198.,
      10276., 10924., 10960., 11650., 11644., 12376., 10224., 10944., 10944.,
      11712., 11664., 12480., 12384., 13248., 12544., 13384., 13392., 14288.,
      14240., 15192., 15088., 16096., 15424., 16384., 16384., 17408., 17344.,
      18432., 18304., 19456., 19344., 20424., 20432., 21584., 21520., 22744.,
      22608., 23904., 15168., 16128., 16128., 17152., 17088., 18176., 18048.,
      19200., 12224., 13064., 13072., 13968., 13920., 14872., 14768., 15776.,
      9648.,  10368., 10368., 11136., 11088., 11904., 11808., 12672., 9808.,
      10462., 10468., 11164., 11128., 11866., 11788., 12568., 12685., 13434.,
      13470., 14268., 14255., 15102., 15040., 15936., 15664., 16504., 16560.,
      17456., 17456., 18408., 18352., 19360., 16225., 17184., 17218., 18240.,
      18211., 19296., 19204., 20352., 13152., 13992., 14032., 14928., 14912.,
      15864., 15792., 16800., 10721., 11446., 11502., 12276., 12283., 13106.,
      13064., 13936., 8956.,  9570.,  9620.,  10276., 10284., 10982., 10948.,
      11688., 8612.,  9176.,  9128.,  9728.,  9644.,  10280., 10160., 10832.,
      11236., 11866., 11860., 12532., 12484., 13198., 13108., 13864., 11376.,
      12096., 12096., 12864., 12816., 13632., 13536., 14400., 12056., 12890.,
      12860., 13748., 13664., 14606., 14468., 15464., 9648.,  10368., 10368.,
      11136., 11088., 11904., 11808., 12672., 8364.,  8978.,  9012.,  9668.,
      9660.,  10358., 10308., 11048., 7068.,  7584.,  7624.,  8176.,  8180.,
      8768.,  8736.,  9360.,  8412.,  8862.,  8892.,  9372.,  9372.,  9882.,
      9852.,  10392., 8605.,  9120.,  9162.,  9712.,  9719.,  10304., 10276.,
      10896., 9216.,  9816.,  9840.,  10480., 10464., 11144., 11088., 11808.,
      10205., 10910., 10886., 11636., 11567., 12362., 12248., 13088., 8560.,
      9160.,  9168.,  9808.,  9776.,  10456., 10384., 11104., 7417.,  7924.,
      7962.,  8504.,  8507.,  9084.,  9052.,  9664.,  6528.,  6954.,  6988.,
      7444.,  7448.,  7934.,  7908.,  8424.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1184., 1322.,  1220., 1364.,  1256., 1406.,  1292., 1448.,  1328., 1490.,
      1364., 1532.,  1400., 1574.,  1436., 1616.,  1472., 1658.,  1508., 1700.,
      1544., 1742.,  1580., 1784.,  1616., 1826.,  1652., 1868.,  1688., 1910.,
      1724., 1952.,  1760., 1994.,  1796., 2036.,  1832., 2078.,  1868., 2120.,
      1904., 2162.,  1940., 2204.,  1976., 2246.,  2012., 2288.,  2048., 2330.,
      2084., 2372.,  2120., 2414.,  2156., 2456.,  2480., 2834.,  2516., 2876.,
      2552., 2918.,  2588., 2960.,  2624., 3002.,  2660., 3044.,  2696., 3086.,
      2732., 3128.,  2768., 3170.,  2804., 3212.,  2840., 3254.,  2876., 3296.,
      2912., 3338.,  2948., 3380.,  2984., 3422.,  3020., 3464.,  3056., 3506.,
      3092., 3548.,  3128., 3590.,  3164., 3632.,  3200., 3674.,  3236., 3716.,
      3272., 3758.,  3308., 3800.,  3344., 3842.,  3380., 3884.,  3416., 3926.,
      3452., 3968.,  3776., 4346.,  3812., 4388.,  3848., 4430.,  3884., 4472.,
      3920., 4514.,  3956., 4556.,  3992., 4598.,  4028., 4640.,  4064., 4682.,
      4100., 4724.,  4136., 4766.,  4172., 4808.,  4208., 4850.,  4244., 4892.,
      4280., 4934.,  4316., 4976.,  4352., 5018.,  4388., 5060.,  4424., 5102.,
      4460., 5144.,  4496., 5186.,  4532., 5228.,  4568., 5270.,  4604., 5312.,
      4640., 5354.,  4676., 5396.,  4712., 5438.,  4748., 5480.,  5072., 5858.,
      5108., 5900.,  5144., 5942.,  5180., 5984.,  5216., 6026.,  5252., 6068.,
      5288., 6110.,  5324., 6152.,  5360., 6194.,  5396., 6236.,  5432., 6278.,
      5468., 6320.,  5504., 6362.,  5540., 6404.,  5576., 6446.,  5612., 6488.,
      5648., 6530.,  5684., 6572.,  5720., 6614.,  5756., 6656.,  5792., 6698.,
      5828., 6740.,  5864., 6782.,  5900., 6824.,  5936., 6866.,  5972., 6908.,
      6008., 6950.,  6044., 6992.,  6368., 7370.,  6404., 7412.,  6440., 7454.,
      6476., 7496.,  6512., 7538.,  6548., 7580.,  6584., 7622.,  6620., 7664.,
      6656., 7706.,  6692., 7748.,  6728., 7790.,  6764., 7832.,  6800., 7874.,
      6836., 7916.,  6872., 7958.,  6908., 8000.,  6944., 8042.,  6980., 8084.,
      7016., 8126.,  7052., 8168.,  7088., 8210.,  7124., 8252.,  7160., 8294.,
      7196., 8336.,  7232., 8378.,  7268., 8420.,  7304., 8462.,  7340., 8504.,
      7664., 8882.,  7700., 8924.,  7736., 8966.,  7772., 9008.,  7808., 9050.,
      7844., 9092.,  7880., 9134.,  7916., 9176.,  7952., 9218.,  7988., 9260.,
      8024., 9302.,  8060., 9344.,  8096., 9386.,  8132., 9428.,  8168., 9470.,
      8204., 9512.,  8240., 9554.,  8276., 9596.,  8312., 9638.,  8348., 9680.,
      8384., 9722.,  8420., 9764.,  8456., 9806.,  8492., 9848.,  8528., 9890.,
      8564., 9932.,  8600., 9974.,  8636., 10016., 8960., 10394., 8996., 10436.,
      9032., 10478., 9068., 10520., 9104., 10562., 9140., 10604., 9176., 10646.,
      9212., 10688., 9248., 10730., 9284., 10772., 9320., 10814., 9356., 10856.,
      9392., 10898., 9428., 10940., 9464., 10982., 9500., 11024., 9536., 11066.,
      9572., 11108., 9608., 11150., 9644., 11192., 9680., 11234., 9716., 11276.,
      9752., 11318., 9788., 11360., 9824., 11402., 9860., 11444., 9896., 11486.,
      9932., 11528.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6454.,  6928.,  7402.,  7876.,  6880.,  7384.,  7888.,  8392.,  7306.,
      7840.,  8374.,  8908.,  7732.,  8296.,  8860.,  9424.,  6647.,  7190.,
      7733.,  8276.,  7154.,  7732.,  8310.,  8888.,  7661.,  8274.,  8887.,
      9500.,  8168.,  8816.,  9464.,  10112., 7240.,  7840.,  8440.,  9040.,
      7840.,  8480.,  9120.,  9760.,  8440.,  9120.,  9800.,  10480., 9040.,
      9760.,  10480., 11200., 8665.,  9310.,  9955.,  10600., 9370.,  10060.,
      10750., 11440., 10075., 10810., 11545., 12280., 10780., 11560., 12340.,
      13120., 8520.,  9120.,  9720.,  10320., 9120.,  9760.,  10400., 11040.,
      9720.,  10400., 11080., 11760., 10320., 11040., 11760., 12480., 8855.,
      9390.,  9925.,  10460., 9370.,  9940.,  10510., 11080., 9885.,  10490.,
      11095., 11700., 10400., 11040., 11680., 12320., 9750.,  10200., 10650.,
      11100., 10200., 10680., 11160., 11640., 10650., 11160., 11670., 12180.,
      11100., 11640., 12180., 12720., 6836.,  7400.,  7964.,  8528.,  7352.,
      7952.,  8552.,  9152.,  7868.,  8504.,  9140.,  9776.,  8384.,  9056.,
      9728.,  10400., 7570.,  8216.,  8862.,  9508.,  8184.,  8872.,  9560.,
      10248., 8798.,  9528.,  10258., 10988., 9412.,  10184., 10956., 11728.,
      9072.,  9792.,  10512., 11232., 9792.,  10560., 11328., 12096., 10512.,
      11328., 12144., 12960., 11232., 12096., 12960., 13824., 11758., 12544.,
      13330., 14116., 12592., 13432., 14272., 15112., 13426., 14320., 15214.,
      16108., 14260., 15208., 16156., 17104., 12144., 12864., 13584., 14304.,
      12864., 13632., 14400., 15168., 13584., 14400., 15216., 16032., 14304.,
      15168., 16032., 16896., 13202., 13832., 14462., 15092., 13832., 14504.,
      15176., 15848., 14462., 15176., 15890., 16604., 15092., 15848., 16604.,
      17360., 8884.,  9400.,  9916.,  10432., 9448.,  10000., 10552., 11104.,
      10012., 10600., 11188., 11776., 10576., 11200., 11824., 12448., 7570.,
      8216.,  8862.,  9508.,  8184.,  8872.,  9560.,  10248., 8798.,  9528.,
      10258., 10988., 9412.,  10184., 10956., 11728., 9197.,  9942.,  10687.,
      11432., 9922.,  10716., 11510., 12304., 10647., 11490., 12333., 13176.,
      11372., 12264., 13156., 14048., 11928., 12768., 13608., 14448., 12768.,
      13664., 14560., 15456., 13608., 14560., 15512., 16464., 14448., 15456.,
      16464., 17472., 16163., 17094., 18025., 18956., 17122., 18116., 19110.,
      20104., 18081., 19138., 20195., 21252., 19040., 20160., 21280., 22400.,
      17304., 18144., 18984., 19824., 18144., 19040., 19936., 20832., 18984.,
      19936., 20888., 21840., 19824., 20832., 21840., 22848., 12173., 12894.,
      13615., 14336., 12922., 13692., 14462., 15232., 13671., 14490., 15309.,
      16128., 14420., 15288., 16156., 17024., 8690.,  9296.,  9902.,  10508.,
      9344.,  9992.,  10640., 11288., 9998.,  10688., 11378., 12068., 10652.,
      11384., 12116., 12848., 9072.,  9792.,  10512., 11232., 9792.,  10560.,
      11328., 12096., 10512., 11328., 12144., 12960., 11232., 12096., 12960.,
      13824., 11928., 12768., 13608., 14448., 12768., 13664., 14560., 15456.,
      13608., 14560., 15512., 16464., 14448., 15456., 16464., 17472., 16192.,
      17152., 18112., 19072., 17152., 18176., 19200., 20224., 18112., 19200.,
      20288., 21376., 19072., 20224., 21376., 22528., 22248., 23328., 24408.,
      25488., 23328., 24480., 25632., 26784., 24408., 25632., 26856., 28080.,
      25488., 26784., 28080., 29376., 16192., 17152., 18112., 19072., 17152.,
      18176., 19200., 20224., 18112., 19200., 20288., 21376., 19072., 20224.,
      21376., 22528., 11928., 12768., 13608., 14448., 12768., 13664., 14560.,
      15456., 13608., 14560., 15512., 16464., 14448., 15456., 16464., 17472.,
      9072.,  9792.,  10512., 11232., 9792.,  10560., 11328., 12096., 10512.,
      11328., 12144., 12960., 11232., 12096., 12960., 13824., 8690.,  9344.,
      9998.,  10652., 9296.,  9992.,  10688., 11384., 9902.,  10640., 11378.,
      12116., 10508., 11288., 12068., 12848., 12173., 12922., 13671., 14420.,
      12894., 13692., 14490., 15288., 13615., 14462., 15309., 16156., 14336.,
      15232., 16128., 17024., 17304., 18144., 18984., 19824., 18144., 19040.,
      19936., 20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840.,
      22848., 16163., 17122., 18081., 19040., 17094., 18116., 19138., 20160.,
      18025., 19110., 20195., 21280., 18956., 20104., 21252., 22400., 11928.,
      12768., 13608., 14448., 12768., 13664., 14560., 15456., 13608., 14560.,
      15512., 16464., 14448., 15456., 16464., 17472., 9197.,  9922.,  10647.,
      11372., 9942.,  10716., 11490., 12264., 10687., 11510., 12333., 13156.,
      11432., 12304., 13176., 14048., 7570.,  8184.,  8798.,  9412.,  8216.,
      8872.,  9528.,  10184., 8862.,  9560.,  10258., 10956., 9508.,  10248.,
      10988., 11728., 8884.,  9448.,  10012., 10576., 9400.,  10000., 10600.,
      11200., 9916.,  10552., 11188., 11824., 10432., 11104., 11776., 12448.,
      13202., 13832., 14462., 15092., 13832., 14504., 15176., 15848., 14462.,
      15176., 15890., 16604., 15092., 15848., 16604., 17360., 12144., 12864.,
      13584., 14304., 12864., 13632., 14400., 15168., 13584., 14400., 15216.,
      16032., 14304., 15168., 16032., 16896., 11758., 12592., 13426., 14260.,
      12544., 13432., 14320., 15208., 13330., 14272., 15214., 16156., 14116.,
      15112., 16108., 17104., 9072.,  9792.,  10512., 11232., 9792.,  10560.,
      11328., 12096., 10512., 11328., 12144., 12960., 11232., 12096., 12960.,
      13824., 7570.,  8184.,  8798.,  9412.,  8216.,  8872.,  9528.,  10184.,
      8862.,  9560.,  10258., 10956., 9508.,  10248., 10988., 11728., 6836.,
      7352.,  7868.,  8384.,  7400.,  7952.,  8504.,  9056.,  7964.,  8552.,
      9140.,  9728.,  8528.,  9152.,  9776.,  10400., 9750.,  10200., 10650.,
      11100., 10200., 10680., 11160., 11640., 10650., 11160., 11670., 12180.,
      11100., 11640., 12180., 12720., 8855.,  9370.,  9885.,  10400., 9390.,
      9940.,  10490., 11040., 9925.,  10510., 11095., 11680., 10460., 11080.,
      11700., 12320., 8520.,  9120.,  9720.,  10320., 9120.,  9760.,  10400.,
      11040., 9720.,  10400., 11080., 11760., 10320., 11040., 11760., 12480.,
      8665.,  9370.,  10075., 10780., 9310.,  10060., 10810., 11560., 9955.,
      10750., 11545., 12340., 10600., 11440., 12280., 13120., 7240.,  7840.,
      8440.,  9040.,  7840.,  8480.,  9120.,  9760.,  8440.,  9120.,  9800.,
      10480., 9040.,  9760.,  10480., 11200., 6647.,  7154.,  7661.,  8168.,
      7190.,  7732.,  8274.,  8816.,  7733.,  8310.,  8887.,  9464.,  8276.,
      8888.,  9500.,  10112., 6454.,  6880.,  7306.,  7732.,  6928.,  7384.,
      7840.,  8296.,  7402.,  7888.,  8374.,  8860.,  7876.,  8392.,  8908.,
      9424.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2230.,  2368.,  2506.,  2644.,  2296.,  2440.,  2584.,  2728.,  2362.,
      2512.,  2662.,  2812.,  2428.,  2584.,  2740.,  2896.,  2494.,  2656.,
      2818.,  2980.,  2560.,  2728.,  2896.,  3064.,  2626.,  2800.,  2974.,
      3148.,  2692.,  2872.,  3052.,  3232.,  2758.,  2944.,  3130.,  3316.,
      2824.,  3016.,  3208.,  3400.,  2890.,  3088.,  3286.,  3484.,  2956.,
      3160.,  3364.,  3568.,  3022.,  3232.,  3442.,  3652.,  3088.,  3304.,
      3520.,  3736.,  3154.,  3376.,  3598.,  3820.,  3220.,  3448.,  3676.,
      3904.,  3286.,  3520.,  3754.,  3988.,  3352.,  3592.,  3832.,  4072.,
      3418.,  3664.,  3910.,  4156.,  3484.,  3736.,  3988.,  4240.,  3550.,
      3808.,  4066.,  4324.,  3616.,  3880.,  4144.,  4408.,  3682.,  3952.,
      4222.,  4492.,  3748.,  4024.,  4300.,  4576.,  3814.,  4096.,  4378.,
      4660.,  3880.,  4168.,  4456.,  4744.,  3946.,  4240.,  4534.,  4828.,
      4012.,  4312.,  4612.,  4912.,  4606.,  4960.,  5314.,  5668.,  4672.,
      5032.,  5392.,  5752.,  4738.,  5104.,  5470.,  5836.,  4804.,  5176.,
      5548.,  5920.,  4870.,  5248.,  5626.,  6004.,  4936.,  5320.,  5704.,
      6088.,  5002.,  5392.,  5782.,  6172.,  5068.,  5464.,  5860.,  6256.,
      5134.,  5536.,  5938.,  6340.,  5200.,  5608.,  6016.,  6424.,  5266.,
      5680.,  6094.,  6508.,  5332.,  5752.,  6172.,  6592.,  5398.,  5824.,
      6250.,  6676.,  5464.,  5896.,  6328.,  6760.,  5530.,  5968.,  6406.,
      6844.,  5596.,  6040.,  6484.,  6928.,  5662.,  6112.,  6562.,  7012.,
      5728.,  6184.,  6640.,  7096.,  5794.,  6256.,  6718.,  7180.,  5860.,
      6328.,  6796.,  7264.,  5926.,  6400.,  6874.,  7348.,  5992.,  6472.,
      6952.,  7432.,  6058.,  6544.,  7030.,  7516.,  6124.,  6616.,  7108.,
      7600.,  6190.,  6688.,  7186.,  7684.,  6256.,  6760.,  7264.,  7768.,
      6322.,  6832.,  7342.,  7852.,  6388.,  6904.,  7420.,  7936.,  6982.,
      7552.,  8122.,  8692.,  7048.,  7624.,  8200.,  8776.,  7114.,  7696.,
      8278.,  8860.,  7180.,  7768.,  8356.,  8944.,  7246.,  7840.,  8434.,
      9028.,  7312.,  7912.,  8512.,  9112.,  7378.,  7984.,  8590.,  9196.,
      7444.,  8056.,  8668.,  9280.,  7510.,  8128.,  8746.,  9364.,  7576.,
      8200.,  8824.,  9448.,  7642.,  8272.,  8902.,  9532.,  7708.,  8344.,
      8980.,  9616.,  7774.,  8416.,  9058.,  9700.,  7840.,  8488.,  9136.,
      9784.,  7906.,  8560.,  9214.,  9868.,  7972.,  8632.,  9292.,  9952.,
      8038.,  8704.,  9370.,  10036., 8104.,  8776.,  9448.,  10120., 8170.,
      8848.,  9526.,  10204., 8236.,  8920.,  9604.,  10288., 8302.,  8992.,
      9682.,  10372., 8368.,  9064.,  9760.,  10456., 8434.,  9136.,  9838.,
      10540., 8500.,  9208.,  9916.,  10624., 8566.,  9280.,  9994.,  10708.,
      8632.,  9352.,  10072., 10792., 8698.,  9424.,  10150., 10876., 8764.,
      9496.,  10228., 10960., 9358.,  10144., 10930., 11716., 9424.,  10216.,
      11008., 11800., 9490.,  10288., 11086., 11884., 9556.,  10360., 11164.,
      11968., 9622.,  10432., 11242., 12052., 9688.,  10504., 11320., 12136.,
      9754.,  10576., 11398., 12220., 9820.,  10648., 11476., 12304., 9886.,
      10720., 11554., 12388., 9952.,  10792., 11632., 12472., 10018., 10864.,
      11710., 12556., 10084., 10936., 11788., 12640., 10150., 11008., 11866.,
      12724., 10216., 11080., 11944., 12808., 10282., 11152., 12022., 12892.,
      10348., 11224., 12100., 12976., 10414., 11296., 12178., 13060., 10480.,
      11368., 12256., 13144., 10546., 11440., 12334., 13228., 10612., 11512.,
      12412., 13312., 10678., 11584., 12490., 13396., 10744., 11656., 12568.,
      13480., 10810., 11728., 12646., 13564., 10876., 11800., 12724., 13648.,
      10942., 11872., 12802., 13732., 11008., 11944., 12880., 13816., 11074.,
      12016., 12958., 13900., 11140., 12088., 13036., 13984., 11734., 12736.,
      13738., 14740., 11800., 12808., 13816., 14824., 11866., 12880., 13894.,
      14908., 11932., 12952., 13972., 14992., 11998., 13024., 14050., 15076.,
      12064., 13096., 14128., 15160., 12130., 13168., 14206., 15244., 12196.,
      13240., 14284., 15328., 12262., 13312., 14362., 15412., 12328., 13384.,
      14440., 15496., 12394., 13456., 14518., 15580., 12460., 13528., 14596.,
      15664., 12526., 13600., 14674., 15748., 12592., 13672., 14752., 15832.,
      12658., 13744., 14830., 15916., 12724., 13816., 14908., 16000., 12790.,
      13888., 14986., 16084., 12856., 13960., 15064., 16168., 12922., 14032.,
      15142., 16252., 12988., 14104., 15220., 16336., 13054., 14176., 15298.,
      16420., 13120., 14248., 15376., 16504., 13186., 14320., 15454., 16588.,
      13252., 14392., 15532., 16672., 13318., 14464., 15610., 16756., 13384.,
      14536., 15688., 16840., 13450., 14608., 15766., 16924., 13516., 14680.,
      15844., 17008., 14110., 15328., 16546., 17764., 14176., 15400., 16624.,
      17848., 14242., 15472., 16702., 17932., 14308., 15544., 16780., 18016.,
      14374., 15616., 16858., 18100., 14440., 15688., 16936., 18184., 14506.,
      15760., 17014., 18268., 14572., 15832., 17092., 18352., 14638., 15904.,
      17170., 18436., 14704., 15976., 17248., 18520., 14770., 16048., 17326.,
      18604., 14836., 16120., 17404., 18688., 14902., 16192., 17482., 18772.,
      14968., 16264., 17560., 18856., 15034., 16336., 17638., 18940., 15100.,
      16408., 17716., 19024., 15166., 16480., 17794., 19108., 15232., 16552.,
      17872., 19192., 15298., 16624., 17950., 19276., 15364., 16696., 18028.,
      19360., 15430., 16768., 18106., 19444., 15496., 16840., 18184., 19528.,
      15562., 16912., 18262., 19612., 15628., 16984., 18340., 19696., 15694.,
      17056., 18418., 19780., 15760., 17128., 18496., 19864., 15826., 17200.,
      18574., 19948., 15892., 17272., 18652., 20032., 16486., 17920., 19354.,
      20788., 16552., 17992., 19432., 20872., 16618., 18064., 19510., 20956.,
      16684., 18136., 19588., 21040., 16750., 18208., 19666., 21124., 16816.,
      18280., 19744., 21208., 16882., 18352., 19822., 21292., 16948., 18424.,
      19900., 21376., 17014., 18496., 19978., 21460., 17080., 18568., 20056.,
      21544., 17146., 18640., 20134., 21628., 17212., 18712., 20212., 21712.,
      17278., 18784., 20290., 21796., 17344., 18856., 20368., 21880., 17410.,
      18928., 20446., 21964., 17476., 19000., 20524., 22048., 17542., 19072.,
      20602., 22132., 17608., 19144., 20680., 22216., 17674., 19216., 20758.,
      22300., 17740., 19288., 20836., 22384., 17806., 19360., 20914., 22468.,
      17872., 19432., 20992., 22552., 17938., 19504., 21070., 22636., 18004.,
      19576., 21148., 22720., 18070., 19648., 21226., 22804., 18136., 19720.,
      21304., 22888., 18202., 19792., 21382., 22972., 18268., 19864., 21460.,
      23056.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8108.,  10140., 11212., 12343., 10418., 8540.,  7610.,  8266.,  9544.,
      11210., 12938., 11394., 9896.,  9026.,  9810.,  11412., 13738., 16141.,
      14560., 13044., 11856., 13992., 16736., 20520., 24376., 20520., 16736.,
      13992., 11856., 13044., 14560., 16141., 13738., 11412., 9810.,  9026.,
      9896.,  11394., 12938., 11210., 9544.,  8266.,  7610.,  8540.,  10418.,
      12343., 11212., 10140., 8108.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      360.,  396.,  432.,  468.,  504.,  540.,  576.,  720.,  756.,  792.,
      828.,  864.,  900.,  936.,  1080., 1116., 1152., 1188., 1224., 1260.,
      1296., 1440., 1476., 1512., 1548., 1584., 1620., 1656., 1800., 1836.,
      1872., 1908., 1944., 1980., 2016., 2160., 2196., 2232., 2268., 2304.,
      2340., 2376., 2520., 2556., 2592., 2628., 2664., 2700., 2736.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8336.,  8792.,  10340., 10872., 11347., 11960., 12371., 13070., 10706.,
      11332., 9204.,  9752.,  7939.,  8436.,  10546., 11156., 12168., 12880.,
      14112., 14932., 16046., 16980., 14810., 15652., 13768., 14512., 12036.,
      12708., 11458., 12196., 12636., 13480., 14487., 15444., 16357., 17434.,
      14212., 15168., 12332., 13160., 10923., 11648., 13032., 13840., 15520.,
      16448., 18992., 20048., 22472., 23664., 19112., 20176., 16032., 16960.,
      13504., 14320., 11284., 12064., 12780., 13672., 14541., 15552., 16297.,
      17434., 15074., 16084., 14140., 15016., 12805., 13572., 11834., 12516.,
      12328., 13104., 13400., 14276., 14462., 15444., 11890., 12756., 9576.,
      10320., 7916.,  8564.,  7250.,  7764.,  8020.,  8600.,  9721.,  10372.,
      11447., 12174., 10784., 11416., 10340., 10872., 8525.,  8984.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      660.,  720.,  724.,  792.,  788.,  864.,  852.,  936.,  916.,  1008.,
      980.,  1080., 1044., 1152., 1300., 1440., 1364., 1512., 1428., 1584.,
      1492., 1656., 1556., 1728., 1620., 1800., 1684., 1872., 1940., 2160.,
      2004., 2232., 2068., 2304., 2132., 2376., 2196., 2448., 2260., 2520.,
      2324., 2592., 2580., 2880., 2644., 2952., 2708., 3024., 2772., 3096.,
      2836., 3168., 2900., 3240., 2964., 3312., 3220., 3600., 3284., 3672.,
      3348., 3744., 3412., 3816., 3476., 3888., 3540., 3960., 3604., 4032.,
      3860., 4320., 3924., 4392., 3988., 4464., 4052., 4536., 4116., 4608.,
      4180., 4680., 4244., 4752., 4500., 5040., 4564., 5112., 4628., 5184.,
      4692., 5256., 4756., 5328., 4820., 5400., 4884., 5472.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7192.,  7648.,  8104.,  8560.,  8948.,  9480.,  10012., 10544., 9889.,
      10502., 11115., 11728., 10763., 11462., 12161., 12860., 9298.,  9924.,
      10550., 11176., 8228.,  8776.,  9324.,  9872.,  7317.,  7814.,  8311.,
      8808.,  10274., 10884., 11494., 12104., 11112., 11824., 12536., 13248.,
      12748., 13568., 14388., 15208., 14262., 15196., 16130., 17064., 12426.,
      13268., 14110., 14952., 11080., 11824., 12568., 13312., 9416.,  10088.,
      10760., 11432., 10562., 11300., 12038., 12776., 11468., 12312., 13156.,
      14000., 13841., 14798., 15755., 16712., 16117., 17194., 18271., 19348.,
      14284., 15240., 16196., 17152., 13084., 13912., 14740., 15568., 11137.,
      11862., 12587., 13312., 11048., 11856., 12664., 13472., 13216., 14144.,
      15072., 16000., 16448., 17504., 18560., 19616., 19560., 20752., 21944.,
      23136., 16552., 17616., 18680., 19744., 14240., 15168., 16096., 17024.,
      12368., 13184., 14000., 14816., 12316., 13096., 13876., 14656., 15068.,
      15960., 16852., 17744., 15911., 16922., 17933., 18944., 16609., 17746.,
      18883., 20020., 14450., 15460., 16470., 17480., 12972., 13848., 14724.,
      15600., 11019., 11786., 12553., 13320., 11434., 12116., 12798., 13480.,
      11816., 12592., 13368., 14144., 12676., 13552., 14428., 15304., 13414.,
      14396., 15378., 16360., 11682., 12548., 13414., 14280., 10568., 11312.,
      12056., 12800., 9040.,  9688.,  10336., 10984., 6978.,  7492.,  8006.,
      8520.,  7428.,  8008.,  8588.,  9168.,  8743.,  9394.,  10045., 10696.,
      10007., 10734., 11461., 12188., 9224.,  9856.,  10488., 11120., 8948.,
      9480.,  10012., 10544., 7247.,  7706.,  8165.,  8624.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1260.,  1320.,  1380.,  1440.,  1380.,  1448.,  1516.,  1584.,  1500.,
      1576.,  1652.,  1728.,  1620.,  1704.,  1788.,  1872.,  1740.,  1832.,
      1924.,  2016.,  1860.,  1960.,  2060.,  2160.,  1980.,  2088.,  2196.,
      2304.,  2460.,  2600.,  2740.,  2880.,  2580.,  2728.,  2876.,  3024.,
      2700.,  2856.,  3012.,  3168.,  2820.,  2984.,  3148.,  3312.,  2940.,
      3112.,  3284.,  3456.,  3060.,  3240.,  3420.,  3600.,  3180.,  3368.,
      3556.,  3744.,  3660.,  3880.,  4100.,  4320.,  3780.,  4008.,  4236.,
      4464.,  3900.,  4136.,  4372.,  4608.,  4020.,  4264.,  4508.,  4752.,
      4140.,  4392.,  4644.,  4896.,  4260.,  4520.,  4780.,  5040.,  4380.,
      4648.,  4916.,  5184.,  4860.,  5160.,  5460.,  5760.,  4980.,  5288.,
      5596.,  5904.,  5100.,  5416.,  5732.,  6048.,  5220.,  5544.,  5868.,
      6192.,  5340.,  5672.,  6004.,  6336.,  5460.,  5800.,  6140.,  6480.,
      5580.,  5928.,  6276.,  6624.,  6060.,  6440.,  6820.,  7200.,  6180.,
      6568.,  6956.,  7344.,  6300.,  6696.,  7092.,  7488.,  6420.,  6824.,
      7228.,  7632.,  6540.,  6952.,  7364.,  7776.,  6660.,  7080.,  7500.,
      7920.,  6780.,  7208.,  7636.,  8064.,  7260.,  7720.,  8180.,  8640.,
      7380.,  7848.,  8316.,  8784.,  7500.,  7976.,  8452.,  8928.,  7620.,
      8104.,  8588.,  9072.,  7740.,  8232.,  8724.,  9216.,  7860.,  8360.,
      8860.,  9360.,  7980.,  8488.,  8996.,  9504.,  8460.,  9000.,  9540.,
      10080., 8580.,  9128.,  9676.,  10224., 8700.,  9256.,  9812.,  10368.,
      8820.,  9384.,  9948.,  10512., 8940.,  9512.,  10084., 10656., 9060.,
      9640.,  10220., 10800., 9180.,  9768.,  10356., 10944.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8525.,  8984.,  10340., 10872., 10784., 11416., 11447., 12174., 9721.,
      10372., 8020.,  8600.,  7250.,  7764.,  7916.,  8564.,  9576.,  10320.,
      11890., 12756., 14462., 15444., 13400., 14276., 12328., 13104., 11834.,
      12516., 12805., 13572., 14140., 15016., 15074., 16084., 16297., 17434.,
      14541., 15552., 12780., 13672., 11284., 12064., 13504., 14320., 16032.,
      16960., 19112., 20176., 22472., 23664., 18992., 20048., 15520., 16448.,
      13032., 13840., 10923., 11648., 12332., 13160., 14212., 15168., 16357.,
      17434., 14487., 15444., 12636., 13480., 11458., 12196., 12036., 12708.,
      13768., 14512., 14810., 15652., 16046., 16980., 14112., 14932., 12168.,
      12880., 10546., 11156., 7939.,  8436.,  9204.,  9752.,  10706., 11332.,
      12371., 13070., 11347., 11960., 10340., 10872., 8336.,  8792.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      684.,  720.,  756.,  792.,  828.,  864.,  900.,  936.,  972.,  1008.,
      1044., 1080., 1116., 1152., 1404., 1440., 1476., 1512., 1548., 1584.,
      1620., 1656., 1692., 1728., 1764., 1800., 1836., 1872., 2124., 2160.,
      2196., 2232., 2268., 2304., 2340., 2376., 2412., 2448., 2484., 2520.,
      2556., 2592., 2844., 2880., 2916., 2952., 2988., 3024., 3060., 3096.,
      3132., 3168., 3204., 3240., 3276., 3312., 3564., 3600., 3636., 3672.,
      3708., 3744., 3780., 3816., 3852., 3888., 3924., 3960., 3996., 4032.,
      4284., 4320., 4356., 4392., 4428., 4464., 4500., 4536., 4572., 4608.,
      4644., 4680., 4716., 4752., 5004., 5040., 5076., 5112., 5148., 5184.,
      5220., 5256., 5292., 5328., 5364., 5400., 5436., 5472.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11181., 11738., 11744., 12336., 13896., 14536., 14536., 15216., 13731.,
      14432., 14470., 15216., 13802., 14574., 14630., 15452., 11515., 12210.,
      12260., 13000., 9416.,  10024., 10088., 10736., 7973.,  8516.,  8550.,
      9128.,  9086.,  9720.,  9796.,  10472., 10736., 11472., 11536., 12320.,
      12850., 13668., 13760., 14632., 15212., 16124., 16220., 17192., 14546.,
      15376., 15444., 16328., 14064., 14800., 14864., 15648., 12958., 13620.,
      13640., 14344., 12727., 13482., 13540., 14344., 13592., 14456., 14520.,
      15440., 14217., 15172., 15278., 16296., 15150., 16210., 16330., 17460.,
      13409., 14362., 14472., 15488., 11928., 12760., 12888., 13776., 10671.,
      11400., 11510., 12288., 14888., 15776., 15792., 16736., 18240., 19264.,
      19264., 20352., 22616., 23760., 23776., 24992., 27280., 28560., 28560.,
      29920., 22616., 23776., 23760., 24992., 18240., 19264., 19264., 20352.,
      14888., 15792., 15776., 16736., 10671., 11510., 11400., 12288., 11928.,
      12888., 12760., 13776., 13409., 14472., 14362., 15488., 15150., 16330.,
      16210., 17460., 14217., 15278., 15172., 16296., 13592., 14520., 14456.,
      15440., 12727., 13540., 13482., 14344., 12958., 13640., 13620., 14344.,
      14064., 14864., 14800., 15648., 14546., 15444., 15376., 16328., 15212.,
      16220., 16124., 17192., 12850., 13760., 13668., 14632., 10736., 11536.,
      11472., 12320., 9086.,  9796.,  9720.,  10472., 7973.,  8550.,  8516.,
      9128.,  9416.,  10088., 10024., 10736., 11515., 12260., 12210., 13000.,
      13802., 14630., 14574., 15452., 13731., 14470., 14432., 15216., 13896.,
      14536., 14536., 15216., 11181., 11744., 11738., 12336.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1256., 1368.,  1320., 1440.,  1384., 1512.,  1448., 1584.,  1512., 1656.,
      1576., 1728.,  1640., 1800.,  1704., 1872.,  1768., 1944.,  1832., 2016.,
      1896., 2088.,  1960., 2160.,  2024., 2232.,  2088., 2304.,  2536., 2808.,
      2600., 2880.,  2664., 2952.,  2728., 3024.,  2792., 3096.,  2856., 3168.,
      2920., 3240.,  2984., 3312.,  3048., 3384.,  3112., 3456.,  3176., 3528.,
      3240., 3600.,  3304., 3672.,  3368., 3744.,  3816., 4248.,  3880., 4320.,
      3944., 4392.,  4008., 4464.,  4072., 4536.,  4136., 4608.,  4200., 4680.,
      4264., 4752.,  4328., 4824.,  4392., 4896.,  4456., 4968.,  4520., 5040.,
      4584., 5112.,  4648., 5184.,  5096., 5688.,  5160., 5760.,  5224., 5832.,
      5288., 5904.,  5352., 5976.,  5416., 6048.,  5480., 6120.,  5544., 6192.,
      5608., 6264.,  5672., 6336.,  5736., 6408.,  5800., 6480.,  5864., 6552.,
      5928., 6624.,  6376., 7128.,  6440., 7200.,  6504., 7272.,  6568., 7344.,
      6632., 7416.,  6696., 7488.,  6760., 7560.,  6824., 7632.,  6888., 7704.,
      6952., 7776.,  7016., 7848.,  7080., 7920.,  7144., 7992.,  7208., 8064.,
      7656., 8568.,  7720., 8640.,  7784., 8712.,  7848., 8784.,  7912., 8856.,
      7976., 8928.,  8040., 9000.,  8104., 9072.,  8168., 9144.,  8232., 9216.,
      8296., 9288.,  8360., 9360.,  8424., 9432.,  8488., 9504.,  8936., 10008.,
      9000., 10080., 9064., 10152., 9128., 10224., 9192., 10296., 9256., 10368.,
      9320., 10440., 9384., 10512., 9448., 10584., 9512., 10656., 9576., 10728.,
      9640., 10800., 9704., 10872., 9768., 10944.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9421.,  9978.,  10535., 11092., 9968.,  10560., 11152., 11744., 11536.,
      12176., 12816., 13456., 12136., 12816., 13496., 14176., 11305., 12006.,
      12707., 13408., 12002., 12748., 13494., 14240., 11344., 12116., 12888.,
      13660., 12118., 12940., 13762., 14584., 9343.,  10038., 10733., 11428.,
      10020., 10760., 11500., 12240., 7856.,  8464.,  9072.,  9680.,  8456.,
      9104.,  9752.,  10400., 7051.,  7594.,  8137.,  8680.,  7562.,  8140.,
      8718.,  9296.,  10146., 10780., 11414., 12048., 10788., 11464., 12140.,
      12816., 10880., 11616., 12352., 13088., 11600., 12384., 13168., 13952.,
      11858., 12676., 13494., 14312., 12696., 13568., 14440., 15312., 13128.,
      14040., 14952., 15864., 14060., 15032., 16004., 16976., 11846., 12676.,
      13506., 14336., 12660., 13544., 14428., 15312., 11136., 11872., 12608.,
      13344., 11856., 12640., 13424., 14208., 10278., 10940., 11602., 12264.,
      10896., 11600., 12304., 13008., 10491., 11246., 12001., 12756., 11236.,
      12040., 12844., 13648., 11600., 12464., 13328., 14192., 12440., 13360.,
      14280., 15200., 13527., 14482., 15437., 16392., 14498., 15516., 16534.,
      17552., 15800., 16860., 17920., 18980., 16874., 18004., 19134., 20264.,
      14953., 15906., 16859., 17812., 15896., 16912., 17928., 18944., 14832.,
      15664., 16496., 17328., 15672., 16560., 17448., 18336., 11781., 12510.,
      13239., 13968., 12514., 13292., 14070., 14848., 12632., 13520., 14408.,
      15296., 13488., 14432., 15376., 16320., 14976., 16000., 17024., 18048.,
      15936., 17024., 18112., 19200., 18616., 19760., 20904., 22048., 19712.,
      20928., 22144., 23360., 22560., 23840., 25120., 26400., 23760., 25120.,
      26480., 27840., 18344., 19504., 20664., 21824., 19408., 20640., 21872.,
      23104., 14976., 16000., 17024., 18048., 15936., 17024., 18112., 19200.,
      12360., 13264., 14168., 15072., 13184., 14144., 15104., 16064., 13495.,
      14334., 15173., 16012., 14232., 15120., 16008., 16896., 16752., 17712.,
      18672., 19632., 17592., 18608., 19624., 20640., 16667., 17730., 18793.,
      19856., 17614., 18740., 19866., 20992., 16832., 18012., 19192., 20372.,
      17858., 19108., 20358., 21608., 14285., 15346., 16407., 17468., 15204.,
      16328., 17452., 18576., 12560., 13488., 14416., 15344., 13400., 14384.,
      15368., 16352., 11041., 11854., 12667., 13480., 11766., 12628., 13490.,
      14352., 10962., 11644., 12326., 13008., 11604., 12328., 13052., 13776.,
      12096., 12896., 13696., 14496., 12816., 13664., 14512., 15360., 12738.,
      13636., 14534., 15432., 13544., 14496., 15448., 16400., 13544., 14552.,
      15560., 16568., 14412., 15480., 16548., 17616., 12342., 13252., 14162.,
      15072., 13124., 14088., 15052., 16016., 11840., 12640., 13440., 14240.,
      12560., 13408., 14256., 15104., 10902., 11612., 12322., 13032., 11520.,
      12272., 13024., 13776., 8009.,  8586.,  9163.,  9740.,  8548.,  9160.,
      9772.,  10384., 8816.,  9488.,  10160., 10832., 9416.,  10128., 10840.,
      11552., 10029., 10774., 11519., 12264., 10702., 11492., 12282., 13072.,
      11416., 12244., 13072., 13900., 12142., 13020., 13898., 14776., 11171.,
      11910., 12649., 13388., 11824., 12608., 13392., 14176., 11536., 12176.,
      12816., 13456., 12136., 12816., 13496., 14176., 8807.,  9370.,  9933.,
      10496., 9310.,  9908.,  10506., 11104.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2400.,  2512.,  2624.,  2736.,  2520.,  2640.,  2760.,  2880.,  2640.,
      2768.,  2896.,  3024.,  2760.,  2896.,  3032.,  3168.,  2880.,  3024.,
      3168.,  3312.,  3000.,  3152.,  3304.,  3456.,  3120.,  3280.,  3440.,
      3600.,  3240.,  3408.,  3576.,  3744.,  3360.,  3536.,  3712.,  3888.,
      3480.,  3664.,  3848.,  4032.,  3600.,  3792.,  3984.,  4176.,  3720.,
      3920.,  4120.,  4320.,  3840.,  4048.,  4256.,  4464.,  3960.,  4176.,
      4392.,  4608.,  4800.,  5072.,  5344.,  5616.,  4920.,  5200.,  5480.,
      5760.,  5040.,  5328.,  5616.,  5904.,  5160.,  5456.,  5752.,  6048.,
      5280.,  5584.,  5888.,  6192.,  5400.,  5712.,  6024.,  6336.,  5520.,
      5840.,  6160.,  6480.,  5640.,  5968.,  6296.,  6624.,  5760.,  6096.,
      6432.,  6768.,  5880.,  6224.,  6568.,  6912.,  6000.,  6352.,  6704.,
      7056.,  6120.,  6480.,  6840.,  7200.,  6240.,  6608.,  6976.,  7344.,
      6360.,  6736.,  7112.,  7488.,  7200.,  7632.,  8064.,  8496.,  7320.,
      7760.,  8200.,  8640.,  7440.,  7888.,  8336.,  8784.,  7560.,  8016.,
      8472.,  8928.,  7680.,  8144.,  8608.,  9072.,  7800.,  8272.,  8744.,
      9216.,  7920.,  8400.,  8880.,  9360.,  8040.,  8528.,  9016.,  9504.,
      8160.,  8656.,  9152.,  9648.,  8280.,  8784.,  9288.,  9792.,  8400.,
      8912.,  9424.,  9936.,  8520.,  9040.,  9560.,  10080., 8640.,  9168.,
      9696.,  10224., 8760.,  9296.,  9832.,  10368., 9600.,  10192., 10784.,
      11376., 9720.,  10320., 10920., 11520., 9840.,  10448., 11056., 11664.,
      9960.,  10576., 11192., 11808., 10080., 10704., 11328., 11952., 10200.,
      10832., 11464., 12096., 10320., 10960., 11600., 12240., 10440., 11088.,
      11736., 12384., 10560., 11216., 11872., 12528., 10680., 11344., 12008.,
      12672., 10800., 11472., 12144., 12816., 10920., 11600., 12280., 12960.,
      11040., 11728., 12416., 13104., 11160., 11856., 12552., 13248., 12000.,
      12752., 13504., 14256., 12120., 12880., 13640., 14400., 12240., 13008.,
      13776., 14544., 12360., 13136., 13912., 14688., 12480., 13264., 14048.,
      14832., 12600., 13392., 14184., 14976., 12720., 13520., 14320., 15120.,
      12840., 13648., 14456., 15264., 12960., 13776., 14592., 15408., 13080.,
      13904., 14728., 15552., 13200., 14032., 14864., 15696., 13320., 14160.,
      15000., 15840., 13440., 14288., 15136., 15984., 13560., 14416., 15272.,
      16128., 14400., 15312., 16224., 17136., 14520., 15440., 16360., 17280.,
      14640., 15568., 16496., 17424., 14760., 15696., 16632., 17568., 14880.,
      15824., 16768., 17712., 15000., 15952., 16904., 17856., 15120., 16080.,
      17040., 18000., 15240., 16208., 17176., 18144., 15360., 16336., 17312.,
      18288., 15480., 16464., 17448., 18432., 15600., 16592., 17584., 18576.,
      15720., 16720., 17720., 18720., 15840., 16848., 17856., 18864., 15960.,
      16976., 17992., 19008., 16800., 17872., 18944., 20016., 16920., 18000.,
      19080., 20160., 17040., 18128., 19216., 20304., 17160., 18256., 19352.,
      20448., 17280., 18384., 19488., 20592., 17400., 18512., 19624., 20736.,
      17520., 18640., 19760., 20880., 17640., 18768., 19896., 21024., 17760.,
      18896., 20032., 21168., 17880., 19024., 20168., 21312., 18000., 19152.,
      20304., 21456., 18120., 19280., 20440., 21600., 18240., 19408., 20576.,
      21744., 18360., 19536., 20712., 21888.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7247.,  7706.,  8165.,  8624.,  8948.,  9480.,  10012., 10544., 9224.,
      9856.,  10488., 11120., 10007., 10734., 11461., 12188., 8743.,  9394.,
      10045., 10696., 7428.,  8008.,  8588.,  9168.,  6978.,  7492.,  8006.,
      8520.,  9040.,  9688.,  10336., 10984., 10568., 11312., 12056., 12800.,
      11682., 12548., 13414., 14280., 13414., 14396., 15378., 16360., 12676.,
      13552., 14428., 15304., 11816., 12592., 13368., 14144., 11434., 12116.,
      12798., 13480., 11019., 11786., 12553., 13320., 12972., 13848., 14724.,
      15600., 14450., 15460., 16470., 17480., 16609., 17746., 18883., 20020.,
      15911., 16922., 17933., 18944., 15068., 15960., 16852., 17744., 12316.,
      13096., 13876., 14656., 12368., 13184., 14000., 14816., 14240., 15168.,
      16096., 17024., 16552., 17616., 18680., 19744., 19560., 20752., 21944.,
      23136., 16448., 17504., 18560., 19616., 13216., 14144., 15072., 16000.,
      11048., 11856., 12664., 13472., 11137., 11862., 12587., 13312., 13084.,
      13912., 14740., 15568., 14284., 15240., 16196., 17152., 16117., 17194.,
      18271., 19348., 13841., 14798., 15755., 16712., 11468., 12312., 13156.,
      14000., 10562., 11300., 12038., 12776., 9416.,  10088., 10760., 11432.,
      11080., 11824., 12568., 13312., 12426., 13268., 14110., 14952., 14262.,
      15196., 16130., 17064., 12748., 13568., 14388., 15208., 11112., 11824.,
      12536., 13248., 10274., 10884., 11494., 12104., 7317.,  7814.,  8311.,
      8808.,  8228.,  8776.,  9324.,  9872.,  9298.,  9924.,  10550., 11176.,
      10763., 11462., 12161., 12860., 9889.,  10502., 11115., 11728., 8948.,
      9480.,  10012., 10544., 7192.,  7648.,  8104.,  8560.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1332.,  1368.,  1404.,  1440.,  1476.,  1512.,  1548.,  1584.,  1620.,
      1656.,  1692.,  1728.,  1764.,  1800.,  1836.,  1872.,  1908.,  1944.,
      1980.,  2016.,  2052.,  2088.,  2124.,  2160.,  2196.,  2232.,  2268.,
      2304.,  2772.,  2808.,  2844.,  2880.,  2916.,  2952.,  2988.,  3024.,
      3060.,  3096.,  3132.,  3168.,  3204.,  3240.,  3276.,  3312.,  3348.,
      3384.,  3420.,  3456.,  3492.,  3528.,  3564.,  3600.,  3636.,  3672.,
      3708.,  3744.,  4212.,  4248.,  4284.,  4320.,  4356.,  4392.,  4428.,
      4464.,  4500.,  4536.,  4572.,  4608.,  4644.,  4680.,  4716.,  4752.,
      4788.,  4824.,  4860.,  4896.,  4932.,  4968.,  5004.,  5040.,  5076.,
      5112.,  5148.,  5184.,  5652.,  5688.,  5724.,  5760.,  5796.,  5832.,
      5868.,  5904.,  5940.,  5976.,  6012.,  6048.,  6084.,  6120.,  6156.,
      6192.,  6228.,  6264.,  6300.,  6336.,  6372.,  6408.,  6444.,  6480.,
      6516.,  6552.,  6588.,  6624.,  7092.,  7128.,  7164.,  7200.,  7236.,
      7272.,  7308.,  7344.,  7380.,  7416.,  7452.,  7488.,  7524.,  7560.,
      7596.,  7632.,  7668.,  7704.,  7740.,  7776.,  7812.,  7848.,  7884.,
      7920.,  7956.,  7992.,  8028.,  8064.,  8532.,  8568.,  8604.,  8640.,
      8676.,  8712.,  8748.,  8784.,  8820.,  8856.,  8892.,  8928.,  8964.,
      9000.,  9036.,  9072.,  9108.,  9144.,  9180.,  9216.,  9252.,  9288.,
      9324.,  9360.,  9396.,  9432.,  9468.,  9504.,  9972.,  10008., 10044.,
      10080., 10116., 10152., 10188., 10224., 10260., 10296., 10332., 10368.,
      10404., 10440., 10476., 10512., 10548., 10584., 10620., 10656., 10692.,
      10728., 10764., 10800., 10836., 10872., 10908., 10944.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8807.,  9310.,  9370.,  9908.,  9933.,  10506., 10496., 11104., 11536.,
      12136., 12176., 12816., 12816., 13496., 13456., 14176., 11171., 11824.,
      11910., 12608., 12649., 13392., 13388., 14176., 11416., 12142., 12244.,
      13020., 13072., 13898., 13900., 14776., 10029., 10702., 10774., 11492.,
      11519., 12282., 12264., 13072., 8816.,  9416.,  9488.,  10128., 10160.,
      10840., 10832., 11552., 8009.,  8548.,  8586.,  9160.,  9163.,  9772.,
      9740.,  10384., 10902., 11520., 11612., 12272., 12322., 13024., 13032.,
      13776., 11840., 12560., 12640., 13408., 13440., 14256., 14240., 15104.,
      12342., 13124., 13252., 14088., 14162., 15052., 15072., 16016., 13544.,
      14412., 14552., 15480., 15560., 16548., 16568., 17616., 12738., 13544.,
      13636., 14496., 14534., 15448., 15432., 16400., 12096., 12816., 12896.,
      13664., 13696., 14512., 14496., 15360., 10962., 11604., 11644., 12328.,
      12326., 13052., 13008., 13776., 11041., 11766., 11854., 12628., 12667.,
      13490., 13480., 14352., 12560., 13400., 13488., 14384., 14416., 15368.,
      15344., 16352., 14285., 15204., 15346., 16328., 16407., 17452., 17468.,
      18576., 16832., 17858., 18012., 19108., 19192., 20358., 20372., 21608.,
      16667., 17614., 17730., 18740., 18793., 19866., 19856., 20992., 16752.,
      17592., 17712., 18608., 18672., 19624., 19632., 20640., 13495., 14232.,
      14334., 15120., 15173., 16008., 16012., 16896., 12360., 13184., 13264.,
      14144., 14168., 15104., 15072., 16064., 14976., 15936., 16000., 17024.,
      17024., 18112., 18048., 19200., 18344., 19408., 19504., 20640., 20664.,
      21872., 21824., 23104., 22560., 23760., 23840., 25120., 25120., 26480.,
      26400., 27840., 18616., 19712., 19760., 20928., 20904., 22144., 22048.,
      23360., 14976., 15936., 16000., 17024., 17024., 18112., 18048., 19200.,
      12632., 13488., 13520., 14432., 14408., 15376., 15296., 16320., 11781.,
      12514., 12510., 13292., 13239., 14070., 13968., 14848., 14832., 15672.,
      15664., 16560., 16496., 17448., 17328., 18336., 14953., 15896., 15906.,
      16912., 16859., 17928., 17812., 18944., 15800., 16874., 16860., 18004.,
      17920., 19134., 18980., 20264., 13527., 14498., 14482., 15516., 15437.,
      16534., 16392., 17552., 11600., 12440., 12464., 13360., 13328., 14280.,
      14192., 15200., 10491., 11236., 11246., 12040., 12001., 12844., 12756.,
      13648., 10278., 10896., 10940., 11600., 11602., 12304., 12264., 13008.,
      11136., 11856., 11872., 12640., 12608., 13424., 13344., 14208., 11846.,
      12660., 12676., 13544., 13506., 14428., 14336., 15312., 13128., 14060.,
      14040., 15032., 14952., 16004., 15864., 16976., 11858., 12696., 12676.,
      13568., 13494., 14440., 14312., 15312., 10880., 11600., 11616., 12384.,
      12352., 13168., 13088., 13952., 10146., 10788., 10780., 11464., 11414.,
      12140., 12048., 12816., 7051.,  7562.,  7594.,  8140.,  8137.,  8718.,
      8680.,  9296.,  7856.,  8456.,  8464.,  9104.,  9072.,  9752.,  9680.,
      10400., 9343.,  10020., 10038., 10760., 10733., 11500., 11428., 12240.,
      11344., 12118., 12116., 12940., 12888., 13762., 13660., 14584., 11305.,
      12002., 12006., 12748., 12707., 13494., 13408., 14240., 11536., 12136.,
      12176., 12816., 12816., 13496., 13456., 14176., 9421.,  9968.,  9978.,
      10560., 10535., 11152., 11092., 11744.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2448.,  2664.,  2512.,  2736.,  2576.,  2808.,  2640.,  2880.,  2704.,
      2952.,  2768.,  3024.,  2832.,  3096.,  2896.,  3168.,  2960.,  3240.,
      3024.,  3312.,  3088.,  3384.,  3152.,  3456.,  3216.,  3528.,  3280.,
      3600.,  3344.,  3672.,  3408.,  3744.,  3472.,  3816.,  3536.,  3888.,
      3600.,  3960.,  3664.,  4032.,  3728.,  4104.,  3792.,  4176.,  3856.,
      4248.,  3920.,  4320.,  3984.,  4392.,  4048.,  4464.,  4112.,  4536.,
      4176.,  4608.,  5008.,  5544.,  5072.,  5616.,  5136.,  5688.,  5200.,
      5760.,  5264.,  5832.,  5328.,  5904.,  5392.,  5976.,  5456.,  6048.,
      5520.,  6120.,  5584.,  6192.,  5648.,  6264.,  5712.,  6336.,  5776.,
      6408.,  5840.,  6480.,  5904.,  6552.,  5968.,  6624.,  6032.,  6696.,
      6096.,  6768.,  6160.,  6840.,  6224.,  6912.,  6288.,  6984.,  6352.,
      7056.,  6416.,  7128.,  6480.,  7200.,  6544.,  7272.,  6608.,  7344.,
      6672.,  7416.,  6736.,  7488.,  7568.,  8424.,  7632.,  8496.,  7696.,
      8568.,  7760.,  8640.,  7824.,  8712.,  7888.,  8784.,  7952.,  8856.,
      8016.,  8928.,  8080.,  9000.,  8144.,  9072.,  8208.,  9144.,  8272.,
      9216.,  8336.,  9288.,  8400.,  9360.,  8464.,  9432.,  8528.,  9504.,
      8592.,  9576.,  8656.,  9648.,  8720.,  9720.,  8784.,  9792.,  8848.,
      9864.,  8912.,  9936.,  8976.,  10008., 9040.,  10080., 9104.,  10152.,
      9168.,  10224., 9232.,  10296., 9296.,  10368., 10128., 11304., 10192.,
      11376., 10256., 11448., 10320., 11520., 10384., 11592., 10448., 11664.,
      10512., 11736., 10576., 11808., 10640., 11880., 10704., 11952., 10768.,
      12024., 10832., 12096., 10896., 12168., 10960., 12240., 11024., 12312.,
      11088., 12384., 11152., 12456., 11216., 12528., 11280., 12600., 11344.,
      12672., 11408., 12744., 11472., 12816., 11536., 12888., 11600., 12960.,
      11664., 13032., 11728., 13104., 11792., 13176., 11856., 13248., 12688.,
      14184., 12752., 14256., 12816., 14328., 12880., 14400., 12944., 14472.,
      13008., 14544., 13072., 14616., 13136., 14688., 13200., 14760., 13264.,
      14832., 13328., 14904., 13392., 14976., 13456., 15048., 13520., 15120.,
      13584., 15192., 13648., 15264., 13712., 15336., 13776., 15408., 13840.,
      15480., 13904., 15552., 13968., 15624., 14032., 15696., 14096., 15768.,
      14160., 15840., 14224., 15912., 14288., 15984., 14352., 16056., 14416.,
      16128., 15248., 17064., 15312., 17136., 15376., 17208., 15440., 17280.,
      15504., 17352., 15568., 17424., 15632., 17496., 15696., 17568., 15760.,
      17640., 15824., 17712., 15888., 17784., 15952., 17856., 16016., 17928.,
      16080., 18000., 16144., 18072., 16208., 18144., 16272., 18216., 16336.,
      18288., 16400., 18360., 16464., 18432., 16528., 18504., 16592., 18576.,
      16656., 18648., 16720., 18720., 16784., 18792., 16848., 18864., 16912.,
      18936., 16976., 19008., 17808., 19944., 17872., 20016., 17936., 20088.,
      18000., 20160., 18064., 20232., 18128., 20304., 18192., 20376., 18256.,
      20448., 18320., 20520., 18384., 20592., 18448., 20664., 18512., 20736.,
      18576., 20808., 18640., 20880., 18704., 20952., 18768., 21024., 18832.,
      21096., 18896., 21168., 18960., 21240., 19024., 21312., 19088., 21384.,
      19152., 21456., 19216., 21528., 19280., 21600., 19344., 21672., 19408.,
      21744., 19472., 21816., 19536., 21888.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9271.,  9774.,  10277., 10780., 9818.,  10356., 10894., 11432., 10365.,
      10938., 11511., 12084., 10912., 11520., 12128., 12736., 12360., 12960.,
      13560., 14160., 12960., 13600., 14240., 14880., 13560., 14240., 14920.,
      15600., 14160., 14880., 15600., 16320., 10969., 11622., 12275., 12928.,
      11666., 12364., 13062., 13760., 12363., 13106., 13849., 14592., 13060.,
      13848., 14636., 15424., 10394., 11120., 11846., 12572., 11168., 11944.,
      12720., 13496., 11942., 12768., 13594., 14420., 12716., 13592., 14468.,
      15344., 8505.,  9178.,  9851.,  10524., 9182.,  9900.,  10618., 11336.,
      9859.,  10622., 11385., 12148., 10536., 11344., 12152., 12960., 7240.,
      7840.,  8440.,  9040.,  7840.,  8480.,  9120.,  9760.,  8440.,  9120.,
      9800.,  10480., 9040.,  9760.,  10480., 11200., 6551.,  7090.,  7629.,
      8168.,  7062.,  7636.,  8210.,  8784.,  7573.,  8182.,  8791.,  9400.,
      8084.,  8728.,  9372.,  10016., 10210., 10828., 11446., 12064., 10852.,
      11512., 12172., 12832., 11494., 12196., 12898., 13600., 12136., 12880.,
      13624., 14368., 10224., 10944., 11664., 12384., 10944., 11712., 12480.,
      13248., 11664., 12480., 13296., 14112., 12384., 13248., 14112., 14976.,
      10046., 10828., 11610., 12392., 10884., 11720., 12556., 13392., 11722.,
      12612., 13502., 14392., 12560., 13504., 14448., 15392., 10860., 11728.,
      12596., 13464., 11792., 12720., 13648., 14576., 12724., 13712., 14700.,
      15688., 13656., 14704., 15752., 16800., 10174., 10980., 11786., 12592.,
      10988., 11848., 12708., 13568., 11802., 12716., 13630., 14544., 12616.,
      13584., 14552., 15520., 10224., 10944., 11664., 12384., 10944., 11712.,
      12480., 13248., 11664., 12480., 13296., 14112., 12384., 13248., 14112.,
      14976., 10466., 11108., 11750., 12392., 11084., 11768., 12452., 13136.,
      11702., 12428., 13154., 13880., 12320., 13088., 13856., 14624., 9133.,
      9858.,  10583., 11308., 9878.,  10652., 11426., 12200., 10623., 11446.,
      12269., 13092., 11368., 12240., 13112., 13984., 10136., 10976., 11816.,
      12656., 10976., 11872., 12768., 13664., 11816., 12768., 13720., 14672.,
      12656., 13664., 14672., 15680., 12099., 13018., 13937., 14856., 13070.,
      14052., 15034., 16016., 14041., 15086., 16131., 17176., 15012., 16120.,
      17228., 18336., 15166., 16192., 17218., 18244., 16240., 17336., 18432.,
      19528., 17314., 18480., 19646., 20812., 18388., 19624., 20860., 22096.,
      15779., 16726., 17673., 18620., 16722., 17732., 18742., 19752., 17665.,
      18738., 19811., 20884., 18608., 19744., 20880., 22016., 17304., 18144.,
      18984., 19824., 18144., 19040., 19936., 20832., 18984., 19936., 20888.,
      21840., 19824., 20832., 21840., 22848., 12557., 13294., 14031., 14768.,
      13290., 14076., 14862., 15648., 14023., 14858., 15693., 16528., 14756.,
      15640., 16524., 17408., 10712., 11536., 12360., 13184., 11568., 12448.,
      13328., 14208., 12424., 13360., 14296., 15232., 13280., 14272., 15264.,
      16256., 13632., 14592., 15552., 16512., 14592., 15616., 16640., 17664.,
      15552., 16640., 17728., 18816., 16512., 17664., 18816., 19968., 18600.,
      19664., 20728., 21792., 19696., 20832., 21968., 23104., 20792., 22000.,
      23208., 24416., 21888., 23168., 24448., 25728., 24720., 25920., 27120.,
      28320., 25920., 27200., 28480., 29760., 27120., 28480., 29840., 31200.,
      28320., 29760., 31200., 32640., 18600., 19696., 20792., 21888., 19664.,
      20832., 22000., 23168., 20728., 21968., 23208., 24448., 21792., 23104.,
      24416., 25728., 13632., 14592., 15552., 16512., 14592., 15616., 16640.,
      17664., 15552., 16640., 17728., 18816., 16512., 17664., 18816., 19968.,
      10712., 11568., 12424., 13280., 11536., 12448., 13360., 14272., 12360.,
      13328., 14296., 15264., 13184., 14208., 15232., 16256., 12557., 13290.,
      14023., 14756., 13294., 14076., 14858., 15640., 14031., 14862., 15693.,
      16524., 14768., 15648., 16528., 17408., 17304., 18144., 18984., 19824.,
      18144., 19040., 19936., 20832., 18984., 19936., 20888., 21840., 19824.,
      20832., 21840., 22848., 15779., 16722., 17665., 18608., 16726., 17732.,
      18738., 19744., 17673., 18742., 19811., 20880., 18620., 19752., 20884.,
      22016., 15166., 16240., 17314., 18388., 16192., 17336., 18480., 19624.,
      17218., 18432., 19646., 20860., 18244., 19528., 20812., 22096., 12099.,
      13070., 14041., 15012., 13018., 14052., 15086., 16120., 13937., 15034.,
      16131., 17228., 14856., 16016., 17176., 18336., 10136., 10976., 11816.,
      12656., 10976., 11872., 12768., 13664., 11816., 12768., 13720., 14672.,
      12656., 13664., 14672., 15680., 9133.,  9878.,  10623., 11368., 9858.,
      10652., 11446., 12240., 10583., 11426., 12269., 13112., 11308., 12200.,
      13092., 13984., 10466., 11084., 11702., 12320., 11108., 11768., 12428.,
      13088., 11750., 12452., 13154., 13856., 12392., 13136., 13880., 14624.,
      10224., 10944., 11664., 12384., 10944., 11712., 12480., 13248., 11664.,
      12480., 13296., 14112., 12384., 13248., 14112., 14976., 10174., 10988.,
      11802., 12616., 10980., 11848., 12716., 13584., 11786., 12708., 13630.,
      14552., 12592., 13568., 14544., 15520., 10860., 11792., 12724., 13656.,
      11728., 12720., 13712., 14704., 12596., 13648., 14700., 15752., 13464.,
      14576., 15688., 16800., 10046., 10884., 11722., 12560., 10828., 11720.,
      12612., 13504., 11610., 12556., 13502., 14448., 12392., 13392., 14392.,
      15392., 10224., 10944., 11664., 12384., 10944., 11712., 12480., 13248.,
      11664., 12480., 13296., 14112., 12384., 13248., 14112., 14976., 10210.,
      10852., 11494., 12136., 10828., 11512., 12196., 12880., 11446., 12172.,
      12898., 13624., 12064., 12832., 13600., 14368., 6551.,  7062.,  7573.,
      8084.,  7090.,  7636.,  8182.,  8728.,  7629.,  8210.,  8791.,  9372.,
      8168.,  8784.,  9400.,  10016., 7240.,  7840.,  8440.,  9040.,  7840.,
      8480.,  9120.,  9760.,  8440.,  9120.,  9800.,  10480., 9040.,  9760.,
      10480., 11200., 8505.,  9182.,  9859.,  10536., 9178.,  9900.,  10622.,
      11344., 9851.,  10618., 11385., 12152., 10524., 11336., 12148., 12960.,
      10394., 11168., 11942., 12716., 11120., 11944., 12768., 13592., 11846.,
      12720., 13594., 14468., 12572., 13496., 14420., 15344., 10969., 11666.,
      12363., 13060., 11622., 12364., 13106., 13848., 12275., 13062., 13849.,
      14636., 12928., 13760., 14592., 15424., 12360., 12960., 13560., 14160.,
      12960., 13600., 14240., 14880., 13560., 14240., 14920., 15600., 14160.,
      14880., 15600., 16320., 9271.,  9818.,  10365., 10912., 9774.,  10356.,
      10938., 11520., 10277., 10894., 11511., 12128., 10780., 11432., 12084.,
      12736.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4680.,  4896.,  5112.,  5328.,  4800.,  5024.,  5248.,  5472.,  4920.,
      5152.,  5384.,  5616.,  5040.,  5280.,  5520.,  5760.,  5160.,  5408.,
      5656.,  5904.,  5280.,  5536.,  5792.,  6048.,  5400.,  5664.,  5928.,
      6192.,  5520.,  5792.,  6064.,  6336.,  5640.,  5920.,  6200.,  6480.,
      5760.,  6048.,  6336.,  6624.,  5880.,  6176.,  6472.,  6768.,  6000.,
      6304.,  6608.,  6912.,  6120.,  6432.,  6744.,  7056.,  6240.,  6560.,
      6880.,  7200.,  6360.,  6688.,  7016.,  7344.,  6480.,  6816.,  7152.,
      7488.,  6600.,  6944.,  7288.,  7632.,  6720.,  7072.,  7424.,  7776.,
      6840.,  7200.,  7560.,  7920.,  6960.,  7328.,  7696.,  8064.,  7080.,
      7456.,  7832.,  8208.,  7200.,  7584.,  7968.,  8352.,  7320.,  7712.,
      8104.,  8496.,  7440.,  7840.,  8240.,  8640.,  7560.,  7968.,  8376.,
      8784.,  7680.,  8096.,  8512.,  8928.,  7800.,  8224.,  8648.,  9072.,
      7920.,  8352.,  8784.,  9216.,  9480.,  10016., 10552., 11088., 9600.,
      10144., 10688., 11232., 9720.,  10272., 10824., 11376., 9840.,  10400.,
      10960., 11520., 9960.,  10528., 11096., 11664., 10080., 10656., 11232.,
      11808., 10200., 10784., 11368., 11952., 10320., 10912., 11504., 12096.,
      10440., 11040., 11640., 12240., 10560., 11168., 11776., 12384., 10680.,
      11296., 11912., 12528., 10800., 11424., 12048., 12672., 10920., 11552.,
      12184., 12816., 11040., 11680., 12320., 12960., 11160., 11808., 12456.,
      13104., 11280., 11936., 12592., 13248., 11400., 12064., 12728., 13392.,
      11520., 12192., 12864., 13536., 11640., 12320., 13000., 13680., 11760.,
      12448., 13136., 13824., 11880., 12576., 13272., 13968., 12000., 12704.,
      13408., 14112., 12120., 12832., 13544., 14256., 12240., 12960., 13680.,
      14400., 12360., 13088., 13816., 14544., 12480., 13216., 13952., 14688.,
      12600., 13344., 14088., 14832., 12720., 13472., 14224., 14976., 7368.,
      7968.,  8568.,  9168.,  7488.,  8096.,  8704.,  9312.,  7608.,  8224.,
      8840.,  9456.,  7728.,  8352.,  8976.,  9600.,  5160.,  5664.,  6168.,
      6672.,  5280.,  5792.,  6304.,  6816.,  5400.,  5920.,  6440.,  6960.,
      5520.,  6048.,  6576.,  7104.,  3464.,  3872.,  4280.,  4688.,  3584.,
      4000.,  4416.,  4832.,  3704.,  4128.,  4552.,  4976.,  3824.,  4256.,
      4688.,  5120.,  3944.,  4384.,  4824.,  5264.,  4064.,  4512.,  4960.,
      5408.,  4184.,  4640.,  5096.,  5552.,  4304.,  4768.,  5232.,  5696.,
      4424.,  4896.,  5368.,  5840.,  4544.,  5024.,  5504.,  5984.,  4664.,
      5152.,  5640.,  6128.,  4784.,  5280.,  5776.,  6272.,  4904.,  5408.,
      5912.,  6416.,  5024.,  5536.,  6048.,  6560.,  5144.,  5664.,  6184.,
      6704.,  5264.,  5792.,  6320.,  6848.,  5384.,  5920.,  6456.,  6992.,
      5504.,  6048.,  6592.,  7136.,  5624.,  6176.,  6728.,  7280.,  5744.,
      6304.,  6864.,  7424.,  4488.,  4896.,  5304.,  5712.,  4608.,  5024.,
      5440.,  5856.,  4728.,  5152.,  5576.,  6000.,  4848.,  5280.,  5712.,
      6144.,  4328.,  4640.,  4952.,  5264.,  4448.,  4768.,  5088.,  5408.,
      4568.,  4896.,  5224.,  5552.,  4688.,  5024.,  5360.,  5696.,  4680.,
      4896.,  5112.,  5328.,  4800.,  5024.,  5248.,  5472.,  4920.,  5152.,
      5384.,  5616.,  5040.,  5280.,  5520.,  5760.,  5160.,  5408.,  5656.,
      5904.,  5280.,  5536.,  5792.,  6048.,  5400.,  5664.,  5928.,  6192.,
      5520.,  5792.,  6064.,  6336.,  5640.,  5920.,  6200.,  6480.,  5760.,
      6048.,  6336.,  6624.,  5880.,  6176.,  6472.,  6768.,  6000.,  6304.,
      6608.,  6912.,  6120.,  6432.,  6744.,  7056.,  6240.,  6560.,  6880.,
      7200.,  6360.,  6688.,  7016.,  7344.,  6480.,  6816.,  7152.,  7488.,
      6600.,  6944.,  7288.,  7632.,  6720.,  7072.,  7424.,  7776.,  6840.,
      7200.,  7560.,  7920.,  6960.,  7328.,  7696.,  8064.,  8520.,  8992.,
      9464.,  9936.,  8640.,  9120.,  9600.,  10080., 8760.,  9248.,  9736.,
      10224., 8880.,  9376.,  9872.,  10368., 9000.,  9504.,  10008., 10512.,
      9120.,  9632.,  10144., 10656., 9240.,  9760.,  10280., 10800., 9360.,
      9888.,  10416., 10944., 9480.,  10016., 10552., 11088., 9600.,  10144.,
      10688., 11232., 9720.,  10272., 10824., 11376., 9840.,  10400., 10960.,
      11520., 9960.,  10528., 11096., 11664., 10080., 10656., 11232., 11808.,
      10200., 10784., 11368., 11952., 10320., 10912., 11504., 12096., 10440.,
      11040., 11640., 12240., 10560., 11168., 11776., 12384., 10680., 11296.,
      11912., 12528., 10800., 11424., 12048., 12672., 10920., 11552., 12184.,
      12816., 11040., 11680., 12320., 12960., 11160., 11808., 12456., 13104.,
      11280., 11936., 12592., 13248., 11400., 12064., 12728., 13392., 11520.,
      12192., 12864., 13536., 11640., 12320., 13000., 13680., 11760., 12448.,
      13136., 13824., 13320., 14112., 14904., 15696., 13440., 14240., 15040.,
      15840., 13560., 14368., 15176., 15984., 13680., 14496., 15312., 16128.,
      10088., 10784., 11480., 12176., 10208., 10912., 11616., 12320., 10328.,
      11040., 11752., 12464., 10448., 11168., 11888., 12608., 7368.,  7968.,
      8568.,  9168.,  7488.,  8096.,  8704.,  9312.,  7608.,  8224.,  8840.,
      9456.,  7728.,  8352.,  8976.,  9600.,  5160.,  5664.,  6168.,  6672.,
      5280.,  5792.,  6304.,  6816.,  5400.,  5920.,  6440.,  6960.,  5520.,
      6048.,  6576.,  7104.,  3464.,  3872.,  4280.,  4688.,  3584.,  4000.,
      4416.,  4832.,  3704.,  4128.,  4552.,  4976.,  3824.,  4256.,  4688.,
      5120.,  3944.,  4384.,  4824.,  5264.,  4064.,  4512.,  4960.,  5408.,
      4184.,  4640.,  5096.,  5552.,  4304.,  4768.,  5232.,  5696.,  4424.,
      4896.,  5368.,  5840.,  4544.,  5024.,  5504.,  5984.,  4664.,  5152.,
      5640.,  6128.,  4784.,  5280.,  5776.,  6272.,  6344.,  6944.,  7544.,
      8144.,  6464.,  7072.,  7680.,  8288.,  6584.,  7200.,  7816.,  8432.,
      6704.,  7328.,  7952.,  8576.,  5160.,  5664.,  6168.,  6672.,  5280.,
      5792.,  6304.,  6816.,  5400.,  5920.,  6440.,  6960.,  5520.,  6048.,
      6576.,  7104.,  4488.,  4896.,  5304.,  5712.,  4608.,  5024.,  5440.,
      5856.,  4728.,  5152.,  5576.,  6000.,  4848.,  5280.,  5712.,  6144.,
      4328.,  4640.,  4952.,  5264.,  4448.,  4768.,  5088.,  5408.,  4568.,
      4896.,  5224.,  5552.,  4688.,  5024.,  5360.,  5696.,  4680.,  4896.,
      5112.,  5328.,  4800.,  5024.,  5248.,  5472.,  4920.,  5152.,  5384.,
      5616.,  5040.,  5280.,  5520.,  5760.,  5160.,  5408.,  5656.,  5904.,
      5280.,  5536.,  5792.,  6048.,  5400.,  5664.,  5928.,  6192.,  5520.,
      5792.,  6064.,  6336.,  5640.,  5920.,  6200.,  6480.,  5760.,  6048.,
      6336.,  6624.,  5880.,  6176.,  6472.,  6768.,  6000.,  6304.,  6608.,
      6912.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5920.,  7230.,  8568.,  9928.,  8680.,  7422.,  6160.,  7060.,  8611.,
      10192., 11796., 10304., 8803.,  7300.,  10240., 12392., 14560., 16736.,
      14560., 12392., 10240., 14180., 17133., 20104., 23084., 20104., 17133.,
      14180., 10240., 12392., 14560., 16736., 14560., 12392., 10240., 7300.,
      8803.,  10304., 11796., 10192., 8611.,  7060.,  6160.,  7422.,  8680.,
      9928.,  8568.,  7230.,  5920.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265.,  286.,  307.,  328.,  349.,  370.,  391.,  433.,  454.,  475.,
      496.,  517.,  538.,  559.,  601.,  622.,  643.,  664.,  685.,  706.,
      727.,  769.,  790.,  811.,  832.,  853.,  874.,  895.,  937.,  958.,
      979.,  1000., 1021., 1042., 1063., 1105., 1126., 1147., 1168., 1189.,
      1210., 1231., 1273., 1294., 1315., 1336., 1357., 1378., 1399.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6190.,  6560.,  7374.,  7836.,  8512.,  9072.,  9592.,  10256., 8022.,
      8624.,  6534.,  7068.,  5140.,  5600.,  9175.,  9640.,  10883., 11462.,
      12516., 13216., 14060., 14888., 11795., 12544., 9647.,  10310., 7630.,
      8200.,  10280., 10880., 12136., 12880., 13888., 14784., 15520., 16576.,
      12936., 13888., 10504., 11344., 8240.,  8960.,  13025., 13640., 15453.,
      16218., 17780., 18704., 19988., 21080., 16821., 17808., 13809., 14682.,
      10970., 11720., 10280., 10880., 12136., 12880., 13888., 14784., 15520.,
      16576., 12936., 13888., 10504., 11344., 8240.,  8960.,  11335., 11880.,
      13379., 14054., 15316., 16128., 17132., 18088., 14371., 15232., 11759.,
      12518., 9310.,  9960.,  7070.,  7520.,  8334.,  8892.,  9520.,  10192.,
      10616., 11408., 8806.,  9520.,  7110.,  7740.,  5540.,  6080.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      473.,  530.,  509.,  572.,  545.,  614.,  581.,  656.,  617.,  698.,
      653.,  740.,  689.,  782.,  761.,  866.,  797.,  908.,  833.,  950.,
      869.,  992.,  905.,  1034., 941.,  1076., 977.,  1118., 1049., 1202.,
      1085., 1244., 1121., 1286., 1157., 1328., 1193., 1370., 1229., 1412.,
      1265., 1454., 1337., 1538., 1373., 1580., 1409., 1622., 1445., 1664.,
      1481., 1706., 1517., 1748., 1553., 1790., 1625., 1874., 1661., 1916.,
      1697., 1958., 1733., 2000., 1769., 2042., 1805., 2084., 1841., 2126.,
      1913., 2210., 1949., 2252., 1985., 2294., 2021., 2336., 2057., 2378.,
      2093., 2420., 2129., 2462., 2201., 2546., 2237., 2588., 2273., 2630.,
      2309., 2672., 2345., 2714., 2381., 2756., 2417., 2798.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8010.,  8380.,  8750.,  9120.,  9198.,  9660.,  10122., 10584., 10192.,
      10752., 11312., 11872., 10968., 11632., 12296., 12960., 8498.,  9100.,
      9702.,  10304., 6294.,  6828.,  7362.,  7896.,  4380.,  4840.,  5300.,
      5760.,  10045., 10510., 10975., 11440., 11491., 12070., 12649., 13228.,
      12684., 13384., 14084., 14784., 13596., 14424., 15252., 16080., 10521.,
      11270., 12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,  5980.,
      6550.,  7120.,  12920., 13520., 14120., 14720., 14696., 15440., 16184.,
      16928., 16128., 17024., 17920., 18816., 17184., 18240., 19296., 20352.,
      13272., 14224., 15176., 16128., 9800.,  10640., 11480., 12320., 6800.,
      7520.,  8240.,  8960.,  13275., 13890., 14505., 15120., 15165., 15930.,
      16695., 17460., 16716., 17640., 18564., 19488., 17892., 18984., 20076.,
      21168., 13839., 14826., 15813., 16800., 10233., 11106., 11979., 12852.,
      7110.,  7860.,  8610.,  9360.,  12920., 13520., 14120., 14720., 14696.,
      15440., 16184., 16928., 16128., 17024., 17920., 18816., 17184., 18240.,
      19296., 20352., 13272., 14224., 15176., 16128., 9800.,  10640., 11480.,
      12320., 6800.,  7520.,  8240.,  8960.,  11725., 12270., 12815., 13360.,
      13315., 13990., 14665., 15340., 14588., 15400., 16212., 17024., 15516.,
      16472., 17428., 18384., 11977., 12838., 13699., 14560., 8839.,  9598.,
      10357., 11116., 6130.,  6780.,  7430.,  8080.,  9690.,  10140., 10590.,
      11040., 11022., 11580., 12138., 12696., 12096., 12768., 13440., 14112.,
      12888., 13680., 14472., 15264., 9954.,  10668., 11382., 12096., 7350.,
      7980.,  8610.,  9240.,  5100.,  5640.,  6180.,  6720.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      889.,  946.,  1003., 1060., 955.,  1018., 1081., 1144., 1021., 1090.,
      1159., 1228., 1087., 1162., 1237., 1312., 1153., 1234., 1315., 1396.,
      1219., 1306., 1393., 1480., 1285., 1378., 1471., 1564., 1417., 1522.,
      1627., 1732., 1483., 1594., 1705., 1816., 1549., 1666., 1783., 1900.,
      1615., 1738., 1861., 1984., 1681., 1810., 1939., 2068., 1747., 1882.,
      2017., 2152., 1813., 1954., 2095., 2236., 1945., 2098., 2251., 2404.,
      2011., 2170., 2329., 2488., 2077., 2242., 2407., 2572., 2143., 2314.,
      2485., 2656., 2209., 2386., 2563., 2740., 2275., 2458., 2641., 2824.,
      2341., 2530., 2719., 2908., 2473., 2674., 2875., 3076., 2539., 2746.,
      2953., 3160., 2605., 2818., 3031., 3244., 2671., 2890., 3109., 3328.,
      2737., 2962., 3187., 3412., 2803., 3034., 3265., 3496., 2869., 3106.,
      3343., 3580., 3001., 3250., 3499., 3748., 3067., 3322., 3577., 3832.,
      3133., 3394., 3655., 3916., 3199., 3466., 3733., 4000., 3265., 3538.,
      3811., 4084., 3331., 3610., 3889., 4168., 3397., 3682., 3967., 4252.,
      3529., 3826., 4123., 4420., 3595., 3898., 4201., 4504., 3661., 3970.,
      4279., 4588., 3727., 4042., 4357., 4672., 3793., 4114., 4435., 4756.,
      3859., 4186., 4513., 4840., 3925., 4258., 4591., 4924., 4057., 4402.,
      4747., 5092., 4123., 4474., 4825., 5176., 4189., 4546., 4903., 5260.,
      4255., 4618., 4981., 5344., 4321., 4690., 5059., 5428., 4387., 4762.,
      5137., 5512., 4453., 4834., 5215., 5596.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5540.,  6080.,  7110.,  7740.,  8806.,  9520.,  10616., 11408., 9520.,
      10192., 8334.,  8892.,  7070.,  7520.,  9310.,  9960.,  11759., 12518.,
      14371., 15232., 17132., 18088., 15316., 16128., 13379., 14054., 11335.,
      11880., 8240.,  8960.,  10504., 11344., 12936., 13888., 15520., 16576.,
      13888., 14784., 12136., 12880., 10280., 10880., 10970., 11720., 13809.,
      14682., 16821., 17808., 19988., 21080., 17780., 18704., 15453., 16218.,
      13025., 13640., 8240.,  8960.,  10504., 11344., 12936., 13888., 15520.,
      16576., 13888., 14784., 12136., 12880., 10280., 10880., 7630.,  8200.,
      9647.,  10310., 11795., 12544., 14060., 14888., 12516., 13216., 10883.,
      11462., 9175.,  9640.,  5140.,  5600.,  6534.,  7068.,  8022.,  8624.,
      9592.,  10256., 8512.,  9072.,  7374.,  7836.,  6190.,  6560.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      509.,  530.,  551.,  572.,  593.,  614.,  635.,  656.,  677.,  698.,
      719.,  740.,  761.,  782.,  845.,  866.,  887.,  908.,  929.,  950.,
      971.,  992.,  1013., 1034., 1055., 1076., 1097., 1118., 1181., 1202.,
      1223., 1244., 1265., 1286., 1307., 1328., 1349., 1370., 1391., 1412.,
      1433., 1454., 1517., 1538., 1559., 1580., 1601., 1622., 1643., 1664.,
      1685., 1706., 1727., 1748., 1769., 1790., 1853., 1874., 1895., 1916.,
      1937., 1958., 1979., 2000., 2021., 2042., 2063., 2084., 2105., 2126.,
      2189., 2210., 2231., 2252., 2273., 2294., 2315., 2336., 2357., 2378.,
      2399., 2420., 2441., 2462., 2525., 2546., 2567., 2588., 2609., 2630.,
      2651., 2672., 2693., 2714., 2735., 2756., 2777., 2798.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5730.,  6120.,  6300.,  6720.,  7188.,  7692.,  7836.,  8376.,  8694.,
      9324.,  9408.,  10080., 10224., 10992., 10992., 11808., 8694.,  9408.,
      9324.,  10080., 7188.,  7836.,  7692.,  8376.,  5730.,  6300.,  6120.,
      6720.,  9885.,  10300., 10510., 10960., 12226., 12766., 12934., 13516.,
      14623., 15302., 15400., 16128., 17048., 17880., 17880., 18768., 14623.,
      15400., 15302., 16128., 12226., 12934., 12766., 13516., 9885.,  10510.,
      10300., 10960., 7640.,  8160.,  8400.,  8960.,  9584.,  10256., 10448.,
      11168., 11592., 12432., 12544., 13440., 13632., 14656., 14656., 15744.,
      11592., 12544., 12432., 13440., 9584.,  10448., 10256., 11168., 7640.,
      8400.,  8160.,  8960.,  13075., 13620., 13890., 14480., 16158., 16866.,
      17082., 17844., 19313., 20202., 20328., 21280., 22504., 23592., 23592.,
      24752., 19313., 20328., 20202., 21280., 16158., 17082., 16866., 17844.,
      13075., 13890., 13620., 14480., 7640.,  8160.,  8400.,  8960.,  9584.,
      10256., 10448., 11168., 11592., 12432., 12544., 13440., 13632., 14656.,
      14656., 15744., 11592., 12544., 12432., 13440., 9584.,  10448., 10256.,
      11168., 7640.,  8400.,  8160.,  8960.,  9885.,  10300., 10510., 10960.,
      12226., 12766., 12934., 13516., 14623., 15302., 15400., 16128., 17048.,
      17880., 17880., 18768., 14623., 15400., 15302., 16128., 12226., 12934.,
      12766., 13516., 9885.,  10510., 10300., 10960., 5730.,  6120.,  6300.,
      6720.,  7188.,  7692.,  7836.,  8376.,  8694.,  9324.,  9408.,  10080.,
      10224., 10992., 10992., 11808., 8694.,  9408.,  9324.,  10080., 7188.,
      7836.,  7692.,  8376.,  5730.,  6300.,  6120.,  6720.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      910.,  1018., 946.,  1060., 982.,  1102., 1018., 1144., 1054., 1186.,
      1090., 1228., 1126., 1270., 1162., 1312., 1198., 1354., 1234., 1396.,
      1270., 1438., 1306., 1480., 1342., 1522., 1378., 1564., 1486., 1690.,
      1522., 1732., 1558., 1774., 1594., 1816., 1630., 1858., 1666., 1900.,
      1702., 1942., 1738., 1984., 1774., 2026., 1810., 2068., 1846., 2110.,
      1882., 2152., 1918., 2194., 1954., 2236., 2062., 2362., 2098., 2404.,
      2134., 2446., 2170., 2488., 2206., 2530., 2242., 2572., 2278., 2614.,
      2314., 2656., 2350., 2698., 2386., 2740., 2422., 2782., 2458., 2824.,
      2494., 2866., 2530., 2908., 2638., 3034., 2674., 3076., 2710., 3118.,
      2746., 3160., 2782., 3202., 2818., 3244., 2854., 3286., 2890., 3328.,
      2926., 3370., 2962., 3412., 2998., 3454., 3034., 3496., 3070., 3538.,
      3106., 3580., 3214., 3706., 3250., 3748., 3286., 3790., 3322., 3832.,
      3358., 3874., 3394., 3916., 3430., 3958., 3466., 4000., 3502., 4042.,
      3538., 4084., 3574., 4126., 3610., 4168., 3646., 4210., 3682., 4252.,
      3790., 4378., 3826., 4420., 3862., 4462., 3898., 4504., 3934., 4546.,
      3970., 4588., 4006., 4630., 4042., 4672., 4078., 4714., 4114., 4756.,
      4150., 4798., 4186., 4840., 4222., 4882., 4258., 4924., 4366., 5050.,
      4402., 5092., 4438., 5134., 4474., 5176., 4510., 5218., 4546., 5260.,
      4582., 5302., 4618., 5344., 4654., 5386., 4690., 5428., 4726., 5470.,
      4762., 5512., 4798., 5554., 4834., 5596.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8670.,  9060.,  9450.,  9840.,  9300.,  9720.,  10140., 10560., 10416.,
      10920., 11424., 11928., 11100., 11640., 12180., 12720., 12054., 12684.,
      13314., 13944., 12768., 13440., 14112., 14784., 13536., 14304., 15072.,
      15840., 14256., 15072., 15888., 16704., 10626., 11340., 12054., 12768.,
      11172., 11928., 12684., 13440., 7968.,  8616.,  9264.,  9912.,  8364.,
      9048.,  9732.,  10416., 5610.,  6180.,  6750.,  7320.,  5880.,  6480.,
      7080.,  7680.,  9275.,  9690.,  10105., 10520., 10010., 10460., 10910.,
      11360., 11240., 11780., 12320., 12860., 12038., 12620., 13202., 13784.,
      13111., 13790., 14469., 15148., 13944., 14672., 15400., 16128., 14832.,
      15664., 16496., 17328., 15672., 16560., 17448., 18336., 11669., 12446.,
      13223., 14000., 12306., 13132., 13958., 14784., 8768.,  9476.,  10184.,
      10892., 9230.,  9980.,  10730., 11480., 6185.,  6810.,  7435.,  8060.,
      6500.,  7160.,  7820.,  8480.,  11560., 12080., 12600., 13120., 12400.,
      12960., 13520., 14080., 13888., 14560., 15232., 15904., 14800., 15520.,
      16240., 16960., 16072., 16912., 17752., 18592., 17024., 17920., 18816.,
      19712., 18048., 19072., 20096., 21120., 19008., 20096., 21184., 22272.,
      14168., 15120., 16072., 17024., 14896., 15904., 16912., 17920., 10624.,
      11488., 12352., 13216., 11152., 12064., 12976., 13888., 7480.,  8240.,
      9000.,  9760.,  7840.,  8640.,  9440.,  10240., 12165., 12710., 13255.,
      13800., 13110., 13700., 14290., 14880., 14712., 15420., 16128., 16836.,
      15738., 16500., 17262., 18024., 17129., 18018., 18907., 19796., 18200.,
      19152., 20104., 21056., 19344., 20432., 21520., 22608., 20424., 21584.,
      22744., 23904., 15211., 16226., 17241., 18256., 16030., 17108., 18186.,
      19264., 11424., 12348., 13272., 14196., 12018., 12996., 13974., 14952.,
      8055.,  8870.,  9685.,  10500., 8460.,  9320.,  10180., 11040., 11560.,
      12080., 12600., 13120., 12400., 12960., 13520., 14080., 13888., 14560.,
      15232., 15904., 14800., 15520., 16240., 16960., 16072., 16912., 17752.,
      18592., 17024., 17920., 18816., 19712., 18048., 19072., 20096., 21120.,
      19008., 20096., 21184., 22272., 14168., 15120., 16072., 17024., 14896.,
      15904., 16912., 17920., 10624., 11488., 12352., 13216., 11152., 12064.,
      12976., 13888., 7480.,  8240.,  9000.,  9760.,  7840.,  8640.,  9440.,
      10240., 9275.,  9690.,  10105., 10520., 10010., 10460., 10910., 11360.,
      11240., 11780., 12320., 12860., 12038., 12620., 13202., 13784., 13111.,
      13790., 14469., 15148., 13944., 14672., 15400., 16128., 14832., 15664.,
      16496., 17328., 15672., 16560., 17448., 18336., 11669., 12446., 13223.,
      14000., 12306., 13132., 13958., 14784., 8768.,  9476.,  10184., 10892.,
      9230.,  9980.,  10730., 11480., 6185.,  6810.,  7435.,  8060.,  6500.,
      7160.,  7820.,  8480.,  8670.,  9060.,  9450.,  9840.,  9300.,  9720.,
      10140., 10560., 10416., 10920., 11424., 11928., 11100., 11640., 12180.,
      12720., 12054., 12684., 13314., 13944., 12768., 13440., 14112., 14784.,
      13536., 14304., 15072., 15840., 14256., 15072., 15888., 16704., 10626.,
      11340., 12054., 12768., 11172., 11928., 12684., 13440., 7968.,  8616.,
      9264.,  9912.,  8364.,  9048.,  9732.,  10416., 5610.,  6180.,  6750.,
      7320.,  5880.,  6480.,  7080.,  7680.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1712.,  1820.,  1928.,  2036.,  1778.,  1892.,  2006.,  2120.,  1844.,
      1964.,  2084.,  2204.,  1910.,  2036.,  2162.,  2288.,  1976.,  2108.,
      2240.,  2372.,  2042.,  2180.,  2318.,  2456.,  2108.,  2252.,  2396.,
      2540.,  2174.,  2324.,  2474.,  2624.,  2240.,  2396.,  2552.,  2708.,
      2306.,  2468.,  2630.,  2792.,  2372.,  2540.,  2708.,  2876.,  2438.,
      2612.,  2786.,  2960.,  2504.,  2684.,  2864.,  3044.,  2570.,  2756.,
      2942.,  3128.,  2768.,  2972.,  3176.,  3380.,  2834.,  3044.,  3254.,
      3464.,  2900.,  3116.,  3332.,  3548.,  2966.,  3188.,  3410.,  3632.,
      3032.,  3260.,  3488.,  3716.,  3098.,  3332.,  3566.,  3800.,  3164.,
      3404.,  3644.,  3884.,  3230.,  3476.,  3722.,  3968.,  3296.,  3548.,
      3800.,  4052.,  3362.,  3620.,  3878.,  4136.,  3428.,  3692.,  3956.,
      4220.,  3494.,  3764.,  4034.,  4304.,  3560.,  3836.,  4112.,  4388.,
      3626.,  3908.,  4190.,  4472.,  3824.,  4124.,  4424.,  4724.,  3890.,
      4196.,  4502.,  4808.,  3956.,  4268.,  4580.,  4892.,  4022.,  4340.,
      4658.,  4976.,  4088.,  4412.,  4736.,  5060.,  4154.,  4484.,  4814.,
      5144.,  4220.,  4556.,  4892.,  5228.,  4286.,  4628.,  4970.,  5312.,
      4352.,  4700.,  5048.,  5396.,  4418.,  4772.,  5126.,  5480.,  4484.,
      4844.,  5204.,  5564.,  4550.,  4916.,  5282.,  5648.,  4616.,  4988.,
      5360.,  5732.,  4682.,  5060.,  5438.,  5816.,  4880.,  5276.,  5672.,
      6068.,  4946.,  5348.,  5750.,  6152.,  5012.,  5420.,  5828.,  6236.,
      5078.,  5492.,  5906.,  6320.,  5144.,  5564.,  5984.,  6404.,  5210.,
      5636.,  6062.,  6488.,  5276.,  5708.,  6140.,  6572.,  5342.,  5780.,
      6218.,  6656.,  5408.,  5852.,  6296.,  6740.,  5474.,  5924.,  6374.,
      6824.,  5540.,  5996.,  6452.,  6908.,  5606.,  6068.,  6530.,  6992.,
      5672.,  6140.,  6608.,  7076.,  5738.,  6212.,  6686.,  7160.,  5936.,
      6428.,  6920.,  7412.,  6002.,  6500.,  6998.,  7496.,  6068.,  6572.,
      7076.,  7580.,  6134.,  6644.,  7154.,  7664.,  6200.,  6716.,  7232.,
      7748.,  6266.,  6788.,  7310.,  7832.,  6332.,  6860.,  7388.,  7916.,
      6398.,  6932.,  7466.,  8000.,  6464.,  7004.,  7544.,  8084.,  6530.,
      7076.,  7622.,  8168.,  6596.,  7148.,  7700.,  8252.,  6662.,  7220.,
      7778.,  8336.,  6728.,  7292.,  7856.,  8420.,  6794.,  7364.,  7934.,
      8504.,  6992.,  7580.,  8168.,  8756.,  7058.,  7652.,  8246.,  8840.,
      7124.,  7724.,  8324.,  8924.,  7190.,  7796.,  8402.,  9008.,  7256.,
      7868.,  8480.,  9092.,  7322.,  7940.,  8558.,  9176.,  7388.,  8012.,
      8636.,  9260.,  7454.,  8084.,  8714.,  9344.,  7520.,  8156.,  8792.,
      9428.,  7586.,  8228.,  8870.,  9512.,  7652.,  8300.,  8948.,  9596.,
      7718.,  8372.,  9026.,  9680.,  7784.,  8444.,  9104.,  9764.,  7850.,
      8516.,  9182.,  9848.,  8048.,  8732.,  9416.,  10100., 8114.,  8804.,
      9494.,  10184., 8180.,  8876.,  9572.,  10268., 8246.,  8948.,  9650.,
      10352., 8312.,  9020.,  9728.,  10436., 8378.,  9092.,  9806.,  10520.,
      8444.,  9164.,  9884.,  10604., 8510.,  9236.,  9962.,  10688., 8576.,
      9308.,  10040., 10772., 8642.,  9380.,  10118., 10856., 8708.,  9452.,
      10196., 10940., 8774.,  9524.,  10274., 11024., 8840.,  9596.,  10352.,
      11108., 8906.,  9668.,  10430., 11192.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5100.,  5640.,  6180.,  6720.,  7350.,  7980.,  8610.,  9240.,  9954.,
      10668., 11382., 12096., 12888., 13680., 14472., 15264., 12096., 12768.,
      13440., 14112., 11022., 11580., 12138., 12696., 9690.,  10140., 10590.,
      11040., 6130.,  6780.,  7430.,  8080.,  8839.,  9598.,  10357., 11116.,
      11977., 12838., 13699., 14560., 15516., 16472., 17428., 18384., 14588.,
      15400., 16212., 17024., 13315., 13990., 14665., 15340., 11725., 12270.,
      12815., 13360., 6800.,  7520.,  8240.,  8960.,  9800.,  10640., 11480.,
      12320., 13272., 14224., 15176., 16128., 17184., 18240., 19296., 20352.,
      16128., 17024., 17920., 18816., 14696., 15440., 16184., 16928., 12920.,
      13520., 14120., 14720., 7110.,  7860.,  8610.,  9360.,  10233., 11106.,
      11979., 12852., 13839., 14826., 15813., 16800., 17892., 18984., 20076.,
      21168., 16716., 17640., 18564., 19488., 15165., 15930., 16695., 17460.,
      13275., 13890., 14505., 15120., 6800.,  7520.,  8240.,  8960.,  9800.,
      10640., 11480., 12320., 13272., 14224., 15176., 16128., 17184., 18240.,
      19296., 20352., 16128., 17024., 17920., 18816., 14696., 15440., 16184.,
      16928., 12920., 13520., 14120., 14720., 5410.,  5980.,  6550.,  7120.,
      7783.,  8446.,  9109.,  9772.,  10521., 11270., 12019., 12768., 13596.,
      14424., 15252., 16080., 12684., 13384., 14084., 14784., 11491., 12070.,
      12649., 13228., 10045., 10510., 10975., 11440., 4380.,  4840.,  5300.,
      5760.,  6294.,  6828.,  7362.,  7896.,  8498.,  9100.,  9702.,  10304.,
      10968., 11632., 12296., 12960., 10192., 10752., 11312., 11872., 9198.,
      9660.,  10122., 10584., 8010.,  8380.,  8750.,  9120.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      997.,  1018., 1039., 1060., 1081., 1102., 1123., 1144., 1165., 1186.,
      1207., 1228., 1249., 1270., 1291., 1312., 1333., 1354., 1375., 1396.,
      1417., 1438., 1459., 1480., 1501., 1522., 1543., 1564., 1669., 1690.,
      1711., 1732., 1753., 1774., 1795., 1816., 1837., 1858., 1879., 1900.,
      1921., 1942., 1963., 1984., 2005., 2026., 2047., 2068., 2089., 2110.,
      2131., 2152., 2173., 2194., 2215., 2236., 2341., 2362., 2383., 2404.,
      2425., 2446., 2467., 2488., 2509., 2530., 2551., 2572., 2593., 2614.,
      2635., 2656., 2677., 2698., 2719., 2740., 2761., 2782., 2803., 2824.,
      2845., 2866., 2887., 2908., 3013., 3034., 3055., 3076., 3097., 3118.,
      3139., 3160., 3181., 3202., 3223., 3244., 3265., 3286., 3307., 3328.,
      3349., 3370., 3391., 3412., 3433., 3454., 3475., 3496., 3517., 3538.,
      3559., 3580., 3685., 3706., 3727., 3748., 3769., 3790., 3811., 3832.,
      3853., 3874., 3895., 3916., 3937., 3958., 3979., 4000., 4021., 4042.,
      4063., 4084., 4105., 4126., 4147., 4168., 4189., 4210., 4231., 4252.,
      4357., 4378., 4399., 4420., 4441., 4462., 4483., 4504., 4525., 4546.,
      4567., 4588., 4609., 4630., 4651., 4672., 4693., 4714., 4735., 4756.,
      4777., 4798., 4819., 4840., 4861., 4882., 4903., 4924., 5029., 5050.,
      5071., 5092., 5113., 5134., 5155., 5176., 5197., 5218., 5239., 5260.,
      5281., 5302., 5323., 5344., 5365., 5386., 5407., 5428., 5449., 5470.,
      5491., 5512., 5533., 5554., 5575., 5596.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610.,  5880.,  6180.,  6480.,  6750.,  7080.,  7320.,  7680.,  7968.,
      8364.,  8616.,  9048.,  9264.,  9732.,  9912.,  10416., 10626., 11172.,
      11340., 11928., 12054., 12684., 12768., 13440., 13536., 14256., 14304.,
      15072., 15072., 15888., 15840., 16704., 12054., 12768., 12684., 13440.,
      13314., 14112., 13944., 14784., 10416., 11100., 10920., 11640., 11424.,
      12180., 11928., 12720., 8670.,  9300.,  9060.,  9720.,  9450.,  10140.,
      9840.,  10560., 6185.,  6500.,  6810.,  7160.,  7435.,  7820.,  8060.,
      8480.,  8768.,  9230.,  9476.,  9980.,  10184., 10730., 10892., 11480.,
      11669., 12306., 12446., 13132., 13223., 13958., 14000., 14784., 14832.,
      15672., 15664., 16560., 16496., 17448., 17328., 18336., 13111., 13944.,
      13790., 14672., 14469., 15400., 15148., 16128., 11240., 12038., 11780.,
      12620., 12320., 13202., 12860., 13784., 9275.,  10010., 9690.,  10460.,
      10105., 10910., 10520., 11360., 7480.,  7840.,  8240.,  8640.,  9000.,
      9440.,  9760.,  10240., 10624., 11152., 11488., 12064., 12352., 12976.,
      13216., 13888., 14168., 14896., 15120., 15904., 16072., 16912., 17024.,
      17920., 18048., 19008., 19072., 20096., 20096., 21184., 21120., 22272.,
      16072., 17024., 16912., 17920., 17752., 18816., 18592., 19712., 13888.,
      14800., 14560., 15520., 15232., 16240., 15904., 16960., 11560., 12400.,
      12080., 12960., 12600., 13520., 13120., 14080., 8055.,  8460.,  8870.,
      9320.,  9685.,  10180., 10500., 11040., 11424., 12018., 12348., 12996.,
      13272., 13974., 14196., 14952., 15211., 16030., 16226., 17108., 17241.,
      18186., 18256., 19264., 19344., 20424., 20432., 21584., 21520., 22744.,
      22608., 23904., 17129., 18200., 18018., 19152., 18907., 20104., 19796.,
      21056., 14712., 15738., 15420., 16500., 16128., 17262., 16836., 18024.,
      12165., 13110., 12710., 13700., 13255., 14290., 13800., 14880., 7480.,
      7840.,  8240.,  8640.,  9000.,  9440.,  9760.,  10240., 10624., 11152.,
      11488., 12064., 12352., 12976., 13216., 13888., 14168., 14896., 15120.,
      15904., 16072., 16912., 17024., 17920., 18048., 19008., 19072., 20096.,
      20096., 21184., 21120., 22272., 16072., 17024., 16912., 17920., 17752.,
      18816., 18592., 19712., 13888., 14800., 14560., 15520., 15232., 16240.,
      15904., 16960., 11560., 12400., 12080., 12960., 12600., 13520., 13120.,
      14080., 6185.,  6500.,  6810.,  7160.,  7435.,  7820.,  8060.,  8480.,
      8768.,  9230.,  9476.,  9980.,  10184., 10730., 10892., 11480., 11669.,
      12306., 12446., 13132., 13223., 13958., 14000., 14784., 14832., 15672.,
      15664., 16560., 16496., 17448., 17328., 18336., 13111., 13944., 13790.,
      14672., 14469., 15400., 15148., 16128., 11240., 12038., 11780., 12620.,
      12320., 13202., 12860., 13784., 9275.,  10010., 9690.,  10460., 10105.,
      10910., 10520., 11360., 5610.,  5880.,  6180.,  6480.,  6750.,  7080.,
      7320.,  7680.,  7968.,  8364.,  8616.,  9048.,  9264.,  9732.,  9912.,
      10416., 10626., 11172., 11340., 11928., 12054., 12684., 12768., 13440.,
      13536., 14256., 14304., 15072., 15072., 15888., 15840., 16704., 12054.,
      12768., 12684., 13440., 13314., 14112., 13944., 14784., 10416., 11100.,
      10920., 11640., 11424., 12180., 11928., 12720., 8670.,  9300.,  9060.,
      9720.,  9450.,  10140., 9840.,  10560.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1784., 1994.,  1820., 2036.,  1856., 2078.,  1892., 2120.,  1928., 2162.,
      1964., 2204.,  2000., 2246.,  2036., 2288.,  2072., 2330.,  2108., 2372.,
      2144., 2414.,  2180., 2456.,  2216., 2498.,  2252., 2540.,  2288., 2582.,
      2324., 2624.,  2360., 2666.,  2396., 2708.,  2432., 2750.,  2468., 2792.,
      2504., 2834.,  2540., 2876.,  2576., 2918.,  2612., 2960.,  2648., 3002.,
      2684., 3044.,  2720., 3086.,  2756., 3128.,  2936., 3338.,  2972., 3380.,
      3008., 3422.,  3044., 3464.,  3080., 3506.,  3116., 3548.,  3152., 3590.,
      3188., 3632.,  3224., 3674.,  3260., 3716.,  3296., 3758.,  3332., 3800.,
      3368., 3842.,  3404., 3884.,  3440., 3926.,  3476., 3968.,  3512., 4010.,
      3548., 4052.,  3584., 4094.,  3620., 4136.,  3656., 4178.,  3692., 4220.,
      3728., 4262.,  3764., 4304.,  3800., 4346.,  3836., 4388.,  3872., 4430.,
      3908., 4472.,  4088., 4682.,  4124., 4724.,  4160., 4766.,  4196., 4808.,
      4232., 4850.,  4268., 4892.,  4304., 4934.,  4340., 4976.,  4376., 5018.,
      4412., 5060.,  4448., 5102.,  4484., 5144.,  4520., 5186.,  4556., 5228.,
      4592., 5270.,  4628., 5312.,  4664., 5354.,  4700., 5396.,  4736., 5438.,
      4772., 5480.,  4808., 5522.,  4844., 5564.,  4880., 5606.,  4916., 5648.,
      4952., 5690.,  4988., 5732.,  5024., 5774.,  5060., 5816.,  5240., 6026.,
      5276., 6068.,  5312., 6110.,  5348., 6152.,  5384., 6194.,  5420., 6236.,
      5456., 6278.,  5492., 6320.,  5528., 6362.,  5564., 6404.,  5600., 6446.,
      5636., 6488.,  5672., 6530.,  5708., 6572.,  5744., 6614.,  5780., 6656.,
      5816., 6698.,  5852., 6740.,  5888., 6782.,  5924., 6824.,  5960., 6866.,
      5996., 6908.,  6032., 6950.,  6068., 6992.,  6104., 7034.,  6140., 7076.,
      6176., 7118.,  6212., 7160.,  6392., 7370.,  6428., 7412.,  6464., 7454.,
      6500., 7496.,  6536., 7538.,  6572., 7580.,  6608., 7622.,  6644., 7664.,
      6680., 7706.,  6716., 7748.,  6752., 7790.,  6788., 7832.,  6824., 7874.,
      6860., 7916.,  6896., 7958.,  6932., 8000.,  6968., 8042.,  7004., 8084.,
      7040., 8126.,  7076., 8168.,  7112., 8210.,  7148., 8252.,  7184., 8294.,
      7220., 8336.,  7256., 8378.,  7292., 8420.,  7328., 8462.,  7364., 8504.,
      7544., 8714.,  7580., 8756.,  7616., 8798.,  7652., 8840.,  7688., 8882.,
      7724., 8924.,  7760., 8966.,  7796., 9008.,  7832., 9050.,  7868., 9092.,
      7904., 9134.,  7940., 9176.,  7976., 9218.,  8012., 9260.,  8048., 9302.,
      8084., 9344.,  8120., 9386.,  8156., 9428.,  8192., 9470.,  8228., 9512.,
      8264., 9554.,  8300., 9596.,  8336., 9638.,  8372., 9680.,  8408., 9722.,
      8444., 9764.,  8480., 9806.,  8516., 9848.,  8696., 10058., 8732., 10100.,
      8768., 10142., 8804., 10184., 8840., 10226., 8876., 10268., 8912., 10310.,
      8948., 10352., 8984., 10394., 9020., 10436., 9056., 10478., 9092., 10520.,
      9128., 10562., 9164., 10604., 9200., 10646., 9236., 10688., 9272., 10730.,
      9308., 10772., 9344., 10814., 9380., 10856., 9416., 10898., 9452., 10940.,
      9488., 10982., 9524., 11024., 9560., 11066., 9596., 11108., 9632., 11150.,
      9668., 11192.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6630.,  6900.,  7170.,  7440.,  7260.,  7560.,  7860.,  8160.,  7890.,
      8220.,  8550.,  8880.,  8520.,  8880.,  9240.,  9600.,  9204.,  9600.,
      9996.,  10392., 9888.,  10320., 10752., 11184., 10572., 11040., 11508.,
      11976., 11256., 11760., 12264., 12768., 11970., 12516., 13062., 13608.,
      12684., 13272., 13860., 14448., 13398., 14028., 14658., 15288., 14112.,
      14784., 15456., 16128., 14832., 15552., 16272., 16992., 15552., 16320.,
      17088., 17856., 16272., 17088., 17904., 18720., 16992., 17856., 18720.,
      19584., 11970., 12684., 13398., 14112., 12516., 13272., 14028., 14784.,
      13062., 13860., 14658., 15456., 13608., 14448., 15288., 16128., 9204.,
      9888.,  10572., 11256., 9600.,  10320., 11040., 11760., 9996.,  10752.,
      11508., 12264., 10392., 11184., 11976., 12768., 6630.,  7260.,  7890.,
      8520.,  6900.,  7560.,  8220.,  8880.,  7170.,  7860.,  8550.,  9240.,
      7440.,  8160.,  8880.,  9600.,  7735.,  8050.,  8365.,  8680.,  8470.,
      8820.,  9170.,  9520.,  9205.,  9590.,  9975.,  10360., 9940.,  10360.,
      10780., 11200., 10738., 11200., 11662., 12124., 11536., 12040., 12544.,
      13048., 12334., 12880., 13426., 13972., 13132., 13720., 14308., 14896.,
      13965., 14602., 15239., 15876., 14798., 15484., 16170., 16856., 15631.,
      16366., 17101., 17836., 16464., 17248., 18032., 18816., 17304., 18144.,
      18984., 19824., 18144., 19040., 19936., 20832., 18984., 19936., 20888.,
      21840., 19824., 20832., 21840., 22848., 13965., 14798., 15631., 16464.,
      14602., 15484., 16366., 17248., 15239., 16170., 17101., 18032., 15876.,
      16856., 17836., 18816., 10738., 11536., 12334., 13132., 11200., 12040.,
      12880., 13720., 11662., 12544., 13426., 14308., 12124., 13048., 13972.,
      14896., 7735.,  8470.,  9205.,  9940.,  8050.,  8820.,  9590.,  10360.,
      8365.,  9170.,  9975.,  10780., 8680.,  9520.,  10360., 11200., 8840.,
      9200.,  9560.,  9920.,  9680.,  10080., 10480., 10880., 10520., 10960.,
      11400., 11840., 11360., 11840., 12320., 12800., 12272., 12800., 13328.,
      13856., 13184., 13760., 14336., 14912., 14096., 14720., 15344., 15968.,
      15008., 15680., 16352., 17024., 15960., 16688., 17416., 18144., 16912.,
      17696., 18480., 19264., 17864., 18704., 19544., 20384., 18816., 19712.,
      20608., 21504., 19776., 20736., 21696., 22656., 20736., 21760., 22784.,
      23808., 21696., 22784., 23872., 24960., 22656., 23808., 24960., 26112.,
      15960., 16912., 17864., 18816., 16688., 17696., 18704., 19712., 17416.,
      18480., 19544., 20608., 18144., 19264., 20384., 21504., 12272., 13184.,
      14096., 15008., 12800., 13760., 14720., 15680., 13328., 14336., 15344.,
      16352., 13856., 14912., 15968., 17024., 8840.,  9680.,  10520., 11360.,
      9200.,  10080., 10960., 11840., 9560.,  10480., 11400., 12320., 9920.,
      10880., 11840., 12800., 9945.,  10350., 10755., 11160., 10890., 11340.,
      11790., 12240., 11835., 12330., 12825., 13320., 12780., 13320., 13860.,
      14400., 13806., 14400., 14994., 15588., 14832., 15480., 16128., 16776.,
      15858., 16560., 17262., 17964., 16884., 17640., 18396., 19152., 17955.,
      18774., 19593., 20412., 19026., 19908., 20790., 21672., 20097., 21042.,
      21987., 22932., 21168., 22176., 23184., 24192., 22248., 23328., 24408.,
      25488., 23328., 24480., 25632., 26784., 24408., 25632., 26856., 28080.,
      25488., 26784., 28080., 29376., 17955., 19026., 20097., 21168., 18774.,
      19908., 21042., 22176., 19593., 20790., 21987., 23184., 20412., 21672.,
      22932., 24192., 13806., 14832., 15858., 16884., 14400., 15480., 16560.,
      17640., 14994., 16128., 17262., 18396., 15588., 16776., 17964., 19152.,
      9945.,  10890., 11835., 12780., 10350., 11340., 12330., 13320., 10755.,
      11790., 12825., 13860., 11160., 12240., 13320., 14400., 8840.,  9200.,
      9560.,  9920.,  9680.,  10080., 10480., 10880., 10520., 10960., 11400.,
      11840., 11360., 11840., 12320., 12800., 12272., 12800., 13328., 13856.,
      13184., 13760., 14336., 14912., 14096., 14720., 15344., 15968., 15008.,
      15680., 16352., 17024., 15960., 16688., 17416., 18144., 16912., 17696.,
      18480., 19264., 17864., 18704., 19544., 20384., 18816., 19712., 20608.,
      21504., 19776., 20736., 21696., 22656., 20736., 21760., 22784., 23808.,
      21696., 22784., 23872., 24960., 22656., 23808., 24960., 26112., 15960.,
      16912., 17864., 18816., 16688., 17696., 18704., 19712., 17416., 18480.,
      19544., 20608., 18144., 19264., 20384., 21504., 12272., 13184., 14096.,
      15008., 12800., 13760., 14720., 15680., 13328., 14336., 15344., 16352.,
      13856., 14912., 15968., 17024., 8840.,  9680.,  10520., 11360., 9200.,
      10080., 10960., 11840., 9560.,  10480., 11400., 12320., 9920.,  10880.,
      11840., 12800., 7735.,  8050.,  8365.,  8680.,  8470.,  8820.,  9170.,
      9520.,  9205.,  9590.,  9975.,  10360., 9940.,  10360., 10780., 11200.,
      10738., 11200., 11662., 12124., 11536., 12040., 12544., 13048., 12334.,
      12880., 13426., 13972., 13132., 13720., 14308., 14896., 13965., 14602.,
      15239., 15876., 14798., 15484., 16170., 16856., 15631., 16366., 17101.,
      17836., 16464., 17248., 18032., 18816., 17304., 18144., 18984., 19824.,
      18144., 19040., 19936., 20832., 18984., 19936., 20888., 21840., 19824.,
      20832., 21840., 22848., 13965., 14798., 15631., 16464., 14602., 15484.,
      16366., 17248., 15239., 16170., 17101., 18032., 15876., 16856., 17836.,
      18816., 10738., 11536., 12334., 13132., 11200., 12040., 12880., 13720.,
      11662., 12544., 13426., 14308., 12124., 13048., 13972., 14896., 7735.,
      8470.,  9205.,  9940.,  8050.,  8820.,  9590.,  10360., 8365.,  9170.,
      9975.,  10780., 8680.,  9520.,  10360., 11200., 6630.,  6900.,  7170.,
      7440.,  7260.,  7560.,  7860.,  8160.,  7890.,  8220.,  8550.,  8880.,
      8520.,  8880.,  9240.,  9600.,  9204.,  9600.,  9996.,  10392., 9888.,
      10320., 10752., 11184., 10572., 11040., 11508., 11976., 11256., 11760.,
      12264., 12768., 11970., 12516., 13062., 13608., 12684., 13272., 13860.,
      14448., 13398., 14028., 14658., 15288., 14112., 14784., 15456., 16128.,
      14832., 15552., 16272., 16992., 15552., 16320., 17088., 17856., 16272.,
      17088., 17904., 18720., 16992., 17856., 18720., 19584., 11970., 12684.,
      13398., 14112., 12516., 13272., 14028., 14784., 13062., 13860., 14658.,
      15456., 13608., 14448., 15288., 16128., 9204.,  9888.,  10572., 11256.,
      9600.,  10320., 11040., 11760., 9996.,  10752., 11508., 12264., 10392.,
      11184., 11976., 12768., 6630.,  7260.,  7890.,  8520.,  6900.,  7560.,
      8220.,  8880.,  7170.,  7860.,  8550.,  9240.,  7440.,  8160.,  8880.,
      9600.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3358.,  3568.,  3778.,  3988.,  3424.,  3640.,  3856.,  4072.,  3490.,
      3712.,  3934.,  4156.,  3556.,  3784.,  4012.,  4240.,  3622.,  3856.,
      4090.,  4324.,  3688.,  3928.,  4168.,  4408.,  3754.,  4000.,  4246.,
      4492.,  3820.,  4072.,  4324.,  4576.,  3886.,  4144.,  4402.,  4660.,
      3952.,  4216.,  4480.,  4744.,  4018.,  4288.,  4558.,  4828.,  4084.,
      4360.,  4636.,  4912.,  4150.,  4432.,  4714.,  4996.,  4216.,  4504.,
      4792.,  5080.,  4282.,  4576.,  4870.,  5164.,  4348.,  4648.,  4948.,
      5248.,  4414.,  4720.,  5026.,  5332.,  4480.,  4792.,  5104.,  5416.,
      4546.,  4864.,  5182.,  5500.,  4612.,  4936.,  5260.,  5584.,  4678.,
      5008.,  5338.,  5668.,  4744.,  5080.,  5416.,  5752.,  4810.,  5152.,
      5494.,  5836.,  4876.,  5224.,  5572.,  5920.,  4942.,  5296.,  5650.,
      6004.,  5008.,  5368.,  5728.,  6088.,  5074.,  5440.,  5806.,  6172.,
      5140.,  5512.,  5884.,  6256.,  5470.,  5872.,  6274.,  6676.,  5536.,
      5944.,  6352.,  6760.,  5602.,  6016.,  6430.,  6844.,  5668.,  6088.,
      6508.,  6928.,  5734.,  6160.,  6586.,  7012.,  5800.,  6232.,  6664.,
      7096.,  5866.,  6304.,  6742.,  7180.,  5932.,  6376.,  6820.,  7264.,
      5998.,  6448.,  6898.,  7348.,  6064.,  6520.,  6976.,  7432.,  6130.,
      6592.,  7054.,  7516.,  6196.,  6664.,  7132.,  7600.,  6262.,  6736.,
      7210.,  7684.,  6328.,  6808.,  7288.,  7768.,  6394.,  6880.,  7366.,
      7852.,  6460.,  6952.,  7444.,  7936.,  6526.,  7024.,  7522.,  8020.,
      6592.,  7096.,  7600.,  8104.,  6658.,  7168.,  7678.,  8188.,  6724.,
      7240.,  7756.,  8272.,  6790.,  7312.,  7834.,  8356.,  6856.,  7384.,
      7912.,  8440.,  6922.,  7456.,  7990.,  8524.,  6988.,  7528.,  8068.,
      8608.,  7054.,  7600.,  8146.,  8692.,  7120.,  7672.,  8224.,  8776.,
      7186.,  7744.,  8302.,  8860.,  7252.,  7816.,  8380.,  8944.,  7582.,
      8176.,  8770.,  9364.,  7648.,  8248.,  8848.,  9448.,  7714.,  8320.,
      8926.,  9532.,  7780.,  8392.,  9004.,  9616.,  7846.,  8464.,  9082.,
      9700.,  7912.,  8536.,  9160.,  9784.,  7978.,  8608.,  9238.,  9868.,
      8044.,  8680.,  9316.,  9952.,  8110.,  8752.,  9394.,  10036., 8176.,
      8824.,  9472.,  10120., 8242.,  8896.,  9550.,  10204., 8308.,  8968.,
      9628.,  10288., 8374.,  9040.,  9706.,  10372., 8440.,  9112.,  9784.,
      10456., 8506.,  9184.,  9862.,  10540., 8572.,  9256.,  9940.,  10624.,
      8638.,  9328.,  10018., 10708., 8704.,  9400.,  10096., 10792., 8770.,
      9472.,  10174., 10876., 8836.,  9544.,  10252., 10960., 8902.,  9616.,
      10330., 11044., 8968.,  9688.,  10408., 11128., 9034.,  9760.,  10486.,
      11212., 9100.,  9832.,  10564., 11296., 9166.,  9904.,  10642., 11380.,
      9232.,  9976.,  10720., 11464., 9298.,  10048., 10798., 11548., 9364.,
      10120., 10876., 11632., 9694.,  10480., 11266., 12052., 9760.,  10552.,
      11344., 12136., 9826.,  10624., 11422., 12220., 9892.,  10696., 11500.,
      12304., 9958.,  10768., 11578., 12388., 10024., 10840., 11656., 12472.,
      10090., 10912., 11734., 12556., 10156., 10984., 11812., 12640., 10222.,
      11056., 11890., 12724., 10288., 11128., 11968., 12808., 10354., 11200.,
      12046., 12892., 10420., 11272., 12124., 12976., 10486., 11344., 12202.,
      13060., 10552., 11416., 12280., 13144., 10618., 11488., 12358., 13228.,
      10684., 11560., 12436., 13312., 10750., 11632., 12514., 13396., 10816.,
      11704., 12592., 13480., 10882., 11776., 12670., 13564., 10948., 11848.,
      12748., 13648., 11014., 11920., 12826., 13732., 11080., 11992., 12904.,
      13816., 11146., 12064., 12982., 13900., 11212., 12136., 13060., 13984.,
      11278., 12208., 13138., 14068., 11344., 12280., 13216., 14152., 11410.,
      12352., 13294., 14236., 11476., 12424., 13372., 14320., 11806., 12784.,
      13762., 14740., 11872., 12856., 13840., 14824., 11938., 12928., 13918.,
      14908., 12004., 13000., 13996., 14992., 12070., 13072., 14074., 15076.,
      12136., 13144., 14152., 15160., 12202., 13216., 14230., 15244., 12268.,
      13288., 14308., 15328., 12334., 13360., 14386., 15412., 12400., 13432.,
      14464., 15496., 12466., 13504., 14542., 15580., 12532., 13576., 14620.,
      15664., 12598., 13648., 14698., 15748., 12664., 13720., 14776., 15832.,
      12730., 13792., 14854., 15916., 12796., 13864., 14932., 16000., 12862.,
      13936., 15010., 16084., 12928., 14008., 15088., 16168., 12994., 14080.,
      15166., 16252., 13060., 14152., 15244., 16336., 13126., 14224., 15322.,
      16420., 13192., 14296., 15400., 16504., 13258., 14368., 15478., 16588.,
      13324., 14440., 15556., 16672., 13390., 14512., 15634., 16756., 13456.,
      14584., 15712., 16840., 13522., 14656., 15790., 16924., 13588., 14728.,
      15868., 17008., 13918., 15088., 16258., 17428., 13984., 15160., 16336.,
      17512., 14050., 15232., 16414., 17596., 14116., 15304., 16492., 17680.,
      14182., 15376., 16570., 17764., 14248., 15448., 16648., 17848., 14314.,
      15520., 16726., 17932., 14380., 15592., 16804., 18016., 14446., 15664.,
      16882., 18100., 14512., 15736., 16960., 18184., 14578., 15808., 17038.,
      18268., 14644., 15880., 17116., 18352., 14710., 15952., 17194., 18436.,
      14776., 16024., 17272., 18520., 14842., 16096., 17350., 18604., 14908.,
      16168., 17428., 18688., 14974., 16240., 17506., 18772., 15040., 16312.,
      17584., 18856., 15106., 16384., 17662., 18940., 15172., 16456., 17740.,
      19024., 15238., 16528., 17818., 19108., 15304., 16600., 17896., 19192.,
      15370., 16672., 17974., 19276., 15436., 16744., 18052., 19360., 15502.,
      16816., 18130., 19444., 15568., 16888., 18208., 19528., 15634., 16960.,
      18286., 19612., 15700., 17032., 18364., 19696., 16030., 17392., 18754.,
      20116., 16096., 17464., 18832., 20200., 16162., 17536., 18910., 20284.,
      16228., 17608., 18988., 20368., 16294., 17680., 19066., 20452., 16360.,
      17752., 19144., 20536., 16426., 17824., 19222., 20620., 16492., 17896.,
      19300., 20704., 16558., 17968., 19378., 20788., 16624., 18040., 19456.,
      20872., 16690., 18112., 19534., 20956., 16756., 18184., 19612., 21040.,
      16822., 18256., 19690., 21124., 16888., 18328., 19768., 21208., 16954.,
      18400., 19846., 21292., 17020., 18472., 19924., 21376., 17086., 18544.,
      20002., 21460., 17152., 18616., 20080., 21544., 17218., 18688., 20158.,
      21628., 17284., 18760., 20236., 21712., 17350., 18832., 20314., 21796.,
      17416., 18904., 20392., 21880., 17482., 18976., 20470., 21964., 17548.,
      19048., 20548., 22048., 17614., 19120., 20626., 22132., 17680., 19192.,
      20704., 22216., 17746., 19264., 20782., 22300., 17812., 19336., 20860.,
      22384.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9442.,  10294., 11192., 12290., 10696., 9138.,  7622.,  9686.,  11013.,
      12384., 14240., 12720., 11241., 9810.,  10392., 12224., 14112., 16784.,
      15072., 13680., 12328., 14530., 17520., 20560., 24665., 20560., 17520.,
      14530., 12328., 13680., 15072., 16784., 14112., 12224., 10392., 9810.,
      11241., 12720., 14240., 12384., 11013., 9686.,  7622.,  9138.,  10696.,
      12290., 11192., 10294., 9442.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      663.,  708.,  753.,  798.,  843.,  888.,  933.,  1068., 1113., 1158.,
      1203., 1248., 1293., 1338., 1473., 1518., 1563., 1608., 1653., 1698.,
      1743., 1878., 1923., 1968., 2013., 2058., 2103., 2148., 2283., 2328.,
      2373., 2418., 2463., 2508., 2553., 2688., 2733., 2778., 2823., 2868.,
      2913., 2958., 3093., 3138., 3183., 3228., 3273., 3318., 3363.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8700.,  9220.,  9939.,  10540., 11200., 11888., 12631., 13412., 11632.,
      12336., 10071., 10692., 8664.,  9196.,  10187., 10860., 12571., 13354.,
      14940., 15840., 17728., 18752., 16772., 17696., 15009., 15826., 12421.,
      13124., 11296., 12016., 12732., 13568., 14176., 15136., 16348., 17440.,
      14400., 15360., 12940., 13792., 11376., 12112., 12879., 13668., 15752.,
      16672., 18620., 19680., 22489., 23698., 19252., 20320., 16682., 17632.,
      13741., 14564., 10800., 11568., 12644., 13536., 14464., 15488., 16532.,
      17696., 14720., 15744., 13556., 14464., 11744., 12528., 11791., 12484.,
      14993., 15794., 16140., 17056., 17266., 18304., 14164., 15072., 12135.,
      12938., 10169., 10860., 7192.,  7756.,  8445.,  9092.,  9712.,  10448.,
      10981., 11812., 9952.,  10672., 9393.,  10028., 8580.,  9124.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1227., 1326., 1308., 1416., 1389., 1506., 1470., 1596., 1551., 1686.,
      1632., 1776., 1713., 1866., 1956., 2136., 2037., 2226., 2118., 2316.,
      2199., 2406., 2280., 2496., 2361., 2586., 2442., 2676., 2685., 2946.,
      2766., 3036., 2847., 3126., 2928., 3216., 3009., 3306., 3090., 3396.,
      3171., 3486., 3414., 3756., 3495., 3846., 3576., 3936., 3657., 4026.,
      3738., 4116., 3819., 4206., 3900., 4296., 4143., 4566., 4224., 4656.,
      4305., 4746., 4386., 4836., 4467., 4926., 4548., 5016., 4629., 5106.,
      4872., 5376., 4953., 5466., 5034., 5556., 5115., 5646., 5196., 5736.,
      5277., 5826., 5358., 5916., 5601., 6186., 5682., 6276., 5763., 6366.,
      5844., 6456., 5925., 6546., 6006., 6636., 6087., 6726.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7312.,  7832.,  8352.,  8872.,  8173.,  8774.,  9375.,  9976.,  9840.,
      10528., 11216., 11904., 11585., 12366., 13147., 13928., 10528., 11232.,
      11936., 12640., 9153.,  9774.,  10395., 11016., 8188.,  8720.,  9252.,
      9784.,  9589.,  10262., 10935., 11608., 11463., 12246., 13029., 13812.,
      13332., 14232., 15132., 16032., 15488., 16512., 17536., 18560., 14316.,
      15240., 16164., 17088., 12657., 13474., 14291., 15108., 10507., 11210.,
      11913., 12616., 10512., 11232., 11952., 12672., 12244., 13080., 13916.,
      14752., 14272., 15232., 16192., 17152., 16884., 17976., 19068., 20160.,
      15424., 16384., 17344., 18304., 13252., 14104., 14956., 15808., 11328.,
      12064., 12800., 13536., 11337., 12126., 12915., 13704., 13432., 14352.,
      15272., 16192., 16084., 17144., 18204., 19264., 19577., 20786., 21995.,
      23204., 16700., 17768., 18836., 19904., 14494., 15444., 16394., 17344.,
      12291., 13114., 13937., 14760., 11104., 11872., 12640., 13408., 13516.,
      14408., 15300., 16192., 16768., 17792., 18816., 19840., 18076., 19240.,
      20404., 21568., 15360., 16384., 17408., 18432., 13436., 14344., 15252.,
      16160., 11216., 12000., 12784., 13568., 10185., 10878., 11571., 12264.,
      13153., 13954., 14755., 15556., 14212., 15128., 16044., 16960., 15126.,
      16164., 17202., 18240., 13052., 13960., 14868., 15776., 11307., 12110.,
      12913., 13716., 9951.,  10642., 11333., 12024., 9244.,  9808.,  10372.,
      10936., 10003., 10650., 11297., 11944., 10688., 11424., 12160., 12896.,
      11275., 12106., 12937., 13768., 9744.,  10464., 11184., 11904., 9063.,
      9698.,  10333., 10968., 8392.,  8936.,  9480.,  10024.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2355.,  2454.,  2553.,  2652.,  2508.,  2616.,  2724.,  2832.,  2661.,
      2778.,  2895.,  3012.,  2814.,  2940.,  3066.,  3192.,  2967.,  3102.,
      3237.,  3372.,  3120.,  3264.,  3408.,  3552.,  3273.,  3426.,  3579.,
      3732.,  3732.,  3912.,  4092.,  4272.,  3885.,  4074.,  4263.,  4452.,
      4038.,  4236.,  4434.,  4632.,  4191.,  4398.,  4605.,  4812.,  4344.,
      4560.,  4776.,  4992.,  4497.,  4722.,  4947.,  5172.,  4650.,  4884.,
      5118.,  5352.,  5109.,  5370.,  5631.,  5892.,  5262.,  5532.,  5802.,
      6072.,  5415.,  5694.,  5973.,  6252.,  5568.,  5856.,  6144.,  6432.,
      5721.,  6018.,  6315.,  6612.,  5874.,  6180.,  6486.,  6792.,  6027.,
      6342.,  6657.,  6972.,  6486.,  6828.,  7170.,  7512.,  6639.,  6990.,
      7341.,  7692.,  6792.,  7152.,  7512.,  7872.,  6945.,  7314.,  7683.,
      8052.,  7098.,  7476.,  7854.,  8232.,  7251.,  7638.,  8025.,  8412.,
      7404.,  7800.,  8196.,  8592.,  7863.,  8286.,  8709.,  9132.,  8016.,
      8448.,  8880.,  9312.,  8169.,  8610.,  9051.,  9492.,  8322.,  8772.,
      9222.,  9672.,  8475.,  8934.,  9393.,  9852.,  8628.,  9096.,  9564.,
      10032., 8781.,  9258.,  9735.,  10212., 9240.,  9744.,  10248., 10752.,
      9393.,  9906.,  10419., 10932., 9546.,  10068., 10590., 11112., 9699.,
      10230., 10761., 11292., 9852.,  10392., 10932., 11472., 10005., 10554.,
      11103., 11652., 10158., 10716., 11274., 11832., 10617., 11202., 11787.,
      12372., 10770., 11364., 11958., 12552., 10923., 11526., 12129., 12732.,
      11076., 11688., 12300., 12912., 11229., 11850., 12471., 13092., 11382.,
      12012., 12642., 13272., 11535., 12174., 12813., 13452.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8580.,  9124.,  9393.,  10028., 9952.,  10672., 10981., 11812., 9712.,
      10448., 8445.,  9092.,  7192.,  7756.,  10169., 10860., 12135., 12938.,
      14164., 15072., 17266., 18304., 16140., 17056., 14993., 15794., 11791.,
      12484., 11744., 12528., 13556., 14464., 14720., 15744., 16532., 17696.,
      14464., 15488., 12644., 13536., 10800., 11568., 13741., 14564., 16682.,
      17632., 19252., 20320., 22489., 23698., 18620., 19680., 15752., 16672.,
      12879., 13668., 11376., 12112., 12940., 13792., 14400., 15360., 16348.,
      17440., 14176., 15136., 12732., 13568., 11296., 12016., 12421., 13124.,
      15009., 15826., 16772., 17696., 17728., 18752., 14940., 15840., 12571.,
      13354., 10187., 10860., 8664.,  9196.,  10071., 10692., 11632., 12336.,
      12631., 13412., 11200., 11888., 9939.,  10540., 8700.,  9220.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1281., 1326., 1371., 1416., 1461., 1506., 1551., 1596., 1641., 1686.,
      1731., 1776., 1821., 1866., 2091., 2136., 2181., 2226., 2271., 2316.,
      2361., 2406., 2451., 2496., 2541., 2586., 2631., 2676., 2901., 2946.,
      2991., 3036., 3081., 3126., 3171., 3216., 3261., 3306., 3351., 3396.,
      3441., 3486., 3711., 3756., 3801., 3846., 3891., 3936., 3981., 4026.,
      4071., 4116., 4161., 4206., 4251., 4296., 4521., 4566., 4611., 4656.,
      4701., 4746., 4791., 4836., 4881., 4926., 4971., 5016., 5061., 5106.,
      5331., 5376., 5421., 5466., 5511., 5556., 5601., 5646., 5691., 5736.,
      5781., 5826., 5871., 5916., 6141., 6186., 6231., 6276., 6321., 6366.,
      6411., 6456., 6501., 6546., 6591., 6636., 6681., 6726.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10044., 10600., 10616., 11208., 10874., 11522., 11558., 12248., 11088.,
      11808., 11872., 12640., 11814., 12618., 12718., 13576., 10416., 11136.,
      11232., 12000., 8810.,  9434.,  9518.,  10184., 7372.,  7888.,  7984.,
      8536.,  9466.,  10130., 10134., 10840., 12033., 12814., 12822., 13652.,
      14552., 15432., 15448., 16384., 18147., 19140., 19168., 20224., 17784.,
      18680., 18696., 19648., 16657., 17442., 17442., 18276., 12650., 13310.,
      13322., 14024., 11088., 11808., 11872., 12640., 12504., 13352., 13432.,
      14336., 13472., 14432., 14528., 15552., 15112., 16200., 16312., 17472.,
      13632., 14592., 14720., 15744., 12408., 13256., 13368., 14272., 10800.,
      11520., 11616., 12384., 13990., 14842., 14846., 15752., 17955., 18964.,
      18960., 20032., 22024., 23176., 23160., 24384., 27281., 28562., 28562.,
      29924., 22024., 23160., 23176., 24384., 17955., 18960., 18964., 20032.,
      13990., 14846., 14842., 15752., 10800., 11616., 11520., 12384., 12408.,
      13368., 13256., 14272., 13632., 14720., 14592., 15744., 15112., 16312.,
      16200., 17472., 13472., 14528., 14432., 15552., 12504., 13432., 13352.,
      14336., 11088., 11872., 11808., 12640., 12650., 13322., 13310., 14024.,
      16657., 17442., 17442., 18276., 17784., 18696., 18680., 19648., 18147.,
      19168., 19140., 20224., 14552., 15448., 15432., 16384., 12033., 12822.,
      12814., 13652., 9466.,  10134., 10130., 10840., 7372.,  7984.,  7888.,
      8536.,  8810.,  9518.,  9434.,  10184., 10416., 11232., 11136., 12000.,
      11814., 12718., 12618., 13576., 11088., 11872., 11808., 12640., 10874.,
      11558., 11522., 12248., 10044., 10616., 10600., 11208.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2373.,  2562.,  2454.,  2652.,  2535.,  2742.,  2616.,  2832.,  2697.,
      2922.,  2778.,  3012.,  2859.,  3102.,  2940.,  3192.,  3021.,  3282.,
      3102.,  3372.,  3183.,  3462.,  3264.,  3552.,  3345.,  3642.,  3426.,
      3732.,  3831.,  4182.,  3912.,  4272.,  3993.,  4362.,  4074.,  4452.,
      4155.,  4542.,  4236.,  4632.,  4317.,  4722.,  4398.,  4812.,  4479.,
      4902.,  4560.,  4992.,  4641.,  5082.,  4722.,  5172.,  4803.,  5262.,
      4884.,  5352.,  5289.,  5802.,  5370.,  5892.,  5451.,  5982.,  5532.,
      6072.,  5613.,  6162.,  5694.,  6252.,  5775.,  6342.,  5856.,  6432.,
      5937.,  6522.,  6018.,  6612.,  6099.,  6702.,  6180.,  6792.,  6261.,
      6882.,  6342.,  6972.,  6747.,  7422.,  6828.,  7512.,  6909.,  7602.,
      6990.,  7692.,  7071.,  7782.,  7152.,  7872.,  7233.,  7962.,  7314.,
      8052.,  7395.,  8142.,  7476.,  8232.,  7557.,  8322.,  7638.,  8412.,
      7719.,  8502.,  7800.,  8592.,  8205.,  9042.,  8286.,  9132.,  8367.,
      9222.,  8448.,  9312.,  8529.,  9402.,  8610.,  9492.,  8691.,  9582.,
      8772.,  9672.,  8853.,  9762.,  8934.,  9852.,  9015.,  9942.,  9096.,
      10032., 9177.,  10122., 9258.,  10212., 9663.,  10662., 9744.,  10752.,
      9825.,  10842., 9906.,  10932., 9987.,  11022., 10068., 11112., 10149.,
      11202., 10230., 11292., 10311., 11382., 10392., 11472., 10473., 11562.,
      10554., 11652., 10635., 11742., 10716., 11832., 11121., 12282., 11202.,
      12372., 11283., 12462., 11364., 12552., 11445., 12642., 11526., 12732.,
      11607., 12822., 11688., 12912., 11769., 13002., 11850., 13092., 11931.,
      13182., 12012., 13272., 12093., 13362., 12174., 13452.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8140.,  8696.,  9252.,  9808.,  8672.,  9264.,  9856.,  10448., 8812.,
      9460.,  10108., 10756., 9434.,  10124., 10814., 11504., 9776.,  10496.,
      11216., 11936., 10496., 11264., 12032., 12800., 11272., 12076., 12880.,
      13684., 12098., 12956., 13814., 14672., 10224., 10944., 11664., 12384.,
      10944., 11712., 12480., 13248., 9316.,  9940.,  10564., 11188., 9922.,
      10588., 11254., 11920., 8948.,  9464.,  9980.,  10496., 9464.,  10016.,
      10568., 11120., 8956.,  9620.,  10284., 10948., 9578.,  10284., 10990.,
      11696., 10581., 11362., 12143., 12924., 11310., 12140., 12970., 13800.,
      12160., 13040., 13920., 14800., 13000., 13936., 14872., 15808., 14821.,
      15814., 16807., 17800., 15776., 16832., 17888., 18944., 14352., 15248.,
      16144., 17040., 15192., 16144., 17096., 18048., 13553., 14338., 15123.,
      15908., 14274., 15108., 15942., 16776., 10336., 10996., 11656., 12316.,
      10966., 11668., 12370., 13072., 9776.,  10496., 11216., 11936., 10496.,
      11264., 12032., 12800., 11616., 12464., 13312., 14160., 12456., 13360.,
      14264., 15168., 14144., 15104., 16064., 17024., 15104., 16128., 17152.,
      18176., 17328., 18416., 19504., 20592., 18408., 19568., 20728., 21888.,
      16960., 17920., 18880., 19840., 17920., 18944., 19968., 20992., 13728.,
      14576., 15424., 16272., 14568., 15472., 16376., 17280., 10608., 11328.,
      12048., 12768., 11328., 12096., 12864., 13632., 11960., 12812., 13664.,
      14516., 12786., 13692., 14598., 15504., 14901., 15910., 16919., 17928.,
      15856., 16928., 18000., 19072., 18160., 19312., 20464., 21616., 19240.,
      20464., 21688., 22912., 22561., 23842., 25123., 26404., 23762., 25124.,
      26486., 27848., 17952., 19088., 20224., 21360., 19032., 20240., 21448.,
      22656., 14425., 15430., 16435., 17440., 15356., 16424., 17492., 18560.,
      11540., 12396., 13252., 14108., 12326., 13236., 14146., 15056., 12240.,
      13056., 13872., 14688., 12960., 13824., 14688., 15552., 15184., 16144.,
      17104., 18064., 16024., 17040., 18056., 19072., 19136., 20224., 21312.,
      22400., 20096., 21248., 22400., 23552., 18784., 19984., 21184., 22384.,
      19864., 21136., 22408., 23680., 15008., 16064., 17120., 18176., 15968.,
      17088., 18208., 19328., 12656., 13584., 14512., 15440., 13496., 14480.,
      15464., 16448., 10352., 11136., 11920., 12704., 11072., 11904., 12736.,
      13568., 10132., 10804., 11476., 12148., 10738., 11452., 12166., 12880.,
      13553., 14338., 15123., 15908., 14274., 15108., 15942., 16776., 14560.,
      15472., 16384., 17296., 15400., 16368., 17336., 18304., 14889., 15910.,
      16931., 17952., 15820., 16904., 17988., 19072., 12624., 13520., 14416.,
      15312., 13464., 14416., 15368., 16320., 10989., 11778., 12567., 13356.,
      11734., 12572., 13410., 14248., 9752.,  10420., 11088., 11756., 10398.,
      11108., 11818., 12528., 10580., 11192., 11804., 12416., 11096., 11744.,
      12392., 13040., 11152., 11860., 12568., 13276., 11782., 12532., 13282.,
      14032., 11856., 12672., 13488., 14304., 12576., 13440., 14304., 15168.,
      11972., 12876., 13780., 14684., 12758., 13716., 14674., 15632., 10352.,
      11136., 11920., 12704., 11072., 11904., 12736., 13568., 9640.,  10324.,
      11008., 11692., 10286., 11012., 11738., 12464., 8700.,  9272.,  9844.,
      10416., 9264.,  9872.,  10480., 11088.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4557.,  4746.,  4935.,  5124.,  4710.,  4908.,  5106.,  5304.,  4863.,
      5070.,  5277.,  5484.,  5016.,  5232.,  5448.,  5664.,  5169.,  5394.,
      5619.,  5844.,  5322.,  5556.,  5790.,  6024.,  5475.,  5718.,  5961.,
      6204.,  5628.,  5880.,  6132.,  6384.,  5781.,  6042.,  6303.,  6564.,
      5934.,  6204.,  6474.,  6744.,  6087.,  6366.,  6645.,  6924.,  6240.,
      6528.,  6816.,  7104.,  6393.,  6690.,  6987.,  7284.,  6546.,  6852.,
      7158.,  7464.,  7311.,  7662.,  8013.,  8364.,  7464.,  7824.,  8184.,
      8544.,  7617.,  7986.,  8355.,  8724.,  7770.,  8148.,  8526.,  8904.,
      7923.,  8310.,  8697.,  9084.,  8076.,  8472.,  8868.,  9264.,  8229.,
      8634.,  9039.,  9444.,  8382.,  8796.,  9210.,  9624.,  8535.,  8958.,
      9381.,  9804.,  8688.,  9120.,  9552.,  9984.,  8841.,  9282.,  9723.,
      10164., 8994.,  9444.,  9894.,  10344., 9147.,  9606.,  10065., 10524.,
      9300.,  9768.,  10236., 10704., 10065., 10578., 11091., 11604., 10218.,
      10740., 11262., 11784., 10371., 10902., 11433., 11964., 10524., 11064.,
      11604., 12144., 10677., 11226., 11775., 12324., 10830., 11388., 11946.,
      12504., 10983., 11550., 12117., 12684., 11136., 11712., 12288., 12864.,
      11289., 11874., 12459., 13044., 11442., 12036., 12630., 13224., 11595.,
      12198., 12801., 13404., 11748., 12360., 12972., 13584., 11901., 12522.,
      13143., 13764., 12054., 12684., 13314., 13944., 12819., 13494., 14169.,
      14844., 12972., 13656., 14340., 15024., 13125., 13818., 14511., 15204.,
      13278., 13980., 14682., 15384., 13431., 14142., 14853., 15564., 13584.,
      14304., 15024., 15744., 13737., 14466., 15195., 15924., 13890., 14628.,
      15366., 16104., 14043., 14790., 15537., 16284., 14196., 14952., 15708.,
      16464., 14349., 15114., 15879., 16644., 14502., 15276., 16050., 16824.,
      14655., 15438., 16221., 17004., 14808., 15600., 16392., 17184., 15573.,
      16410., 17247., 18084., 15726., 16572., 17418., 18264., 15879., 16734.,
      17589., 18444., 16032., 16896., 17760., 18624., 16185., 17058., 17931.,
      18804., 16338., 17220., 18102., 18984., 16491., 17382., 18273., 19164.,
      16644., 17544., 18444., 19344., 16797., 17706., 18615., 19524., 16950.,
      17868., 18786., 19704., 17103., 18030., 18957., 19884., 17256., 18192.,
      19128., 20064., 17409., 18354., 19299., 20244., 17562., 18516., 19470.,
      20424., 18327., 19326., 20325., 21324., 18480., 19488., 20496., 21504.,
      18633., 19650., 20667., 21684., 18786., 19812., 20838., 21864., 18939.,
      19974., 21009., 22044., 19092., 20136., 21180., 22224., 19245., 20298.,
      21351., 22404., 19398., 20460., 21522., 22584., 19551., 20622., 21693.,
      22764., 19704., 20784., 21864., 22944., 19857., 20946., 22035., 23124.,
      20010., 21108., 22206., 23304., 20163., 21270., 22377., 23484., 20316.,
      21432., 22548., 23664., 21081., 22242., 23403., 24564., 21234., 22404.,
      23574., 24744., 21387., 22566., 23745., 24924., 21540., 22728., 23916.,
      25104., 21693., 22890., 24087., 25284., 21846., 23052., 24258., 25464.,
      21999., 23214., 24429., 25644., 22152., 23376., 24600., 25824., 22305.,
      23538., 24771., 26004., 22458., 23700., 24942., 26184., 22611., 23862.,
      25113., 26364., 22764., 24024., 25284., 26544., 22917., 24186., 25455.,
      26724., 23070., 24348., 25626., 26904.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8392.,  8936.,  9480.,  10024., 9063.,  9698.,  10333., 10968., 9744.,
      10464., 11184., 11904., 11275., 12106., 12937., 13768., 10688., 11424.,
      12160., 12896., 10003., 10650., 11297., 11944., 9244.,  9808.,  10372.,
      10936., 9951.,  10642., 11333., 12024., 11307., 12110., 12913., 13716.,
      13052., 13960., 14868., 15776., 15126., 16164., 17202., 18240., 14212.,
      15128., 16044., 16960., 13153., 13954., 14755., 15556., 10185., 10878.,
      11571., 12264., 11216., 12000., 12784., 13568., 13436., 14344., 15252.,
      16160., 15360., 16384., 17408., 18432., 18076., 19240., 20404., 21568.,
      16768., 17792., 18816., 19840., 13516., 14408., 15300., 16192., 11104.,
      11872., 12640., 13408., 12291., 13114., 13937., 14760., 14494., 15444.,
      16394., 17344., 16700., 17768., 18836., 19904., 19577., 20786., 21995.,
      23204., 16084., 17144., 18204., 19264., 13432., 14352., 15272., 16192.,
      11337., 12126., 12915., 13704., 11328., 12064., 12800., 13536., 13252.,
      14104., 14956., 15808., 15424., 16384., 17344., 18304., 16884., 17976.,
      19068., 20160., 14272., 15232., 16192., 17152., 12244., 13080., 13916.,
      14752., 10512., 11232., 11952., 12672., 10507., 11210., 11913., 12616.,
      12657., 13474., 14291., 15108., 14316., 15240., 16164., 17088., 15488.,
      16512., 17536., 18560., 13332., 14232., 15132., 16032., 11463., 12246.,
      13029., 13812., 9589.,  10262., 10935., 11608., 8188.,  8720.,  9252.,
      9784.,  9153.,  9774.,  10395., 11016., 10528., 11232., 11936., 12640.,
      11585., 12366., 13147., 13928., 9840.,  10528., 11216., 11904., 8173.,
      8774.,  9375.,  9976.,  7312.,  7832.,  8352.,  8872.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2517.,  2562.,  2607.,  2652.,  2697.,  2742.,  2787.,  2832.,  2877.,
      2922.,  2967.,  3012.,  3057.,  3102.,  3147.,  3192.,  3237.,  3282.,
      3327.,  3372.,  3417.,  3462.,  3507.,  3552.,  3597.,  3642.,  3687.,
      3732.,  4137.,  4182.,  4227.,  4272.,  4317.,  4362.,  4407.,  4452.,
      4497.,  4542.,  4587.,  4632.,  4677.,  4722.,  4767.,  4812.,  4857.,
      4902.,  4947.,  4992.,  5037.,  5082.,  5127.,  5172.,  5217.,  5262.,
      5307.,  5352.,  5757.,  5802.,  5847.,  5892.,  5937.,  5982.,  6027.,
      6072.,  6117.,  6162.,  6207.,  6252.,  6297.,  6342.,  6387.,  6432.,
      6477.,  6522.,  6567.,  6612.,  6657.,  6702.,  6747.,  6792.,  6837.,
      6882.,  6927.,  6972.,  7377.,  7422.,  7467.,  7512.,  7557.,  7602.,
      7647.,  7692.,  7737.,  7782.,  7827.,  7872.,  7917.,  7962.,  8007.,
      8052.,  8097.,  8142.,  8187.,  8232.,  8277.,  8322.,  8367.,  8412.,
      8457.,  8502.,  8547.,  8592.,  8997.,  9042.,  9087.,  9132.,  9177.,
      9222.,  9267.,  9312.,  9357.,  9402.,  9447.,  9492.,  9537.,  9582.,
      9627.,  9672.,  9717.,  9762.,  9807.,  9852.,  9897.,  9942.,  9987.,
      10032., 10077., 10122., 10167., 10212., 10617., 10662., 10707., 10752.,
      10797., 10842., 10887., 10932., 10977., 11022., 11067., 11112., 11157.,
      11202., 11247., 11292., 11337., 11382., 11427., 11472., 11517., 11562.,
      11607., 11652., 11697., 11742., 11787., 11832., 12237., 12282., 12327.,
      12372., 12417., 12462., 12507., 12552., 12597., 12642., 12687., 12732.,
      12777., 12822., 12867., 12912., 12957., 13002., 13047., 13092., 13137.,
      13182., 13227., 13272., 13317., 13362., 13407., 13452.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8700.,  9264.,  9272.,  9872.,  9844.,  10480., 10416., 11088., 9640.,
      10286., 10324., 11012., 11008., 11738., 11692., 12464., 10352., 11072.,
      11136., 11904., 11920., 12736., 12704., 13568., 11972., 12758., 12876.,
      13716., 13780., 14674., 14684., 15632., 11856., 12576., 12672., 13440.,
      13488., 14304., 14304., 15168., 11152., 11782., 11860., 12532., 12568.,
      13282., 13276., 14032., 10580., 11096., 11192., 11744., 11804., 12392.,
      12416., 13040., 9752.,  10398., 10420., 11108., 11088., 11818., 11756.,
      12528., 10989., 11734., 11778., 12572., 12567., 13410., 13356., 14248.,
      12624., 13464., 13520., 14416., 14416., 15368., 15312., 16320., 14889.,
      15820., 15910., 16904., 16931., 17988., 17952., 19072., 14560., 15400.,
      15472., 16368., 16384., 17336., 17296., 18304., 13553., 14274., 14338.,
      15108., 15123., 15942., 15908., 16776., 10132., 10738., 10804., 11452.,
      11476., 12166., 12148., 12880., 10352., 11072., 11136., 11904., 11920.,
      12736., 12704., 13568., 12656., 13496., 13584., 14480., 14512., 15464.,
      15440., 16448., 15008., 15968., 16064., 17088., 17120., 18208., 18176.,
      19328., 18784., 19864., 19984., 21136., 21184., 22408., 22384., 23680.,
      19136., 20096., 20224., 21248., 21312., 22400., 22400., 23552., 15184.,
      16024., 16144., 17040., 17104., 18056., 18064., 19072., 12240., 12960.,
      13056., 13824., 13872., 14688., 14688., 15552., 11540., 12326., 12396.,
      13236., 13252., 14146., 14108., 15056., 14425., 15356., 15430., 16424.,
      16435., 17492., 17440., 18560., 17952., 19032., 19088., 20240., 20224.,
      21448., 21360., 22656., 22561., 23762., 23842., 25124., 25123., 26486.,
      26404., 27848., 18160., 19240., 19312., 20464., 20464., 21688., 21616.,
      22912., 14901., 15856., 15910., 16928., 16919., 18000., 17928., 19072.,
      11960., 12786., 12812., 13692., 13664., 14598., 14516., 15504., 10608.,
      11328., 11328., 12096., 12048., 12864., 12768., 13632., 13728., 14568.,
      14576., 15472., 15424., 16376., 16272., 17280., 16960., 17920., 17920.,
      18944., 18880., 19968., 19840., 20992., 17328., 18408., 18416., 19568.,
      19504., 20728., 20592., 21888., 14144., 15104., 15104., 16128., 16064.,
      17152., 17024., 18176., 11616., 12456., 12464., 13360., 13312., 14264.,
      14160., 15168., 9776.,  10496., 10496., 11264., 11216., 12032., 11936.,
      12800., 10336., 10966., 10996., 11668., 11656., 12370., 12316., 13072.,
      13553., 14274., 14338., 15108., 15123., 15942., 15908., 16776., 14352.,
      15192., 15248., 16144., 16144., 17096., 17040., 18048., 14821., 15776.,
      15814., 16832., 16807., 17888., 17800., 18944., 12160., 13000., 13040.,
      13936., 13920., 14872., 14800., 15808., 10581., 11310., 11362., 12140.,
      12143., 12970., 12924., 13800., 8956.,  9578.,  9620.,  10284., 10284.,
      10990., 10948., 11696., 8948.,  9464.,  9464.,  10016., 9980.,  10568.,
      10496., 11120., 9316.,  9922.,  9940.,  10588., 10564., 11254., 11188.,
      11920., 10224., 10944., 10944., 11712., 11664., 12480., 12384., 13248.,
      11272., 12098., 12076., 12956., 12880., 13814., 13684., 14672., 9776.,
      10496., 10496., 11264., 11216., 12032., 11936., 12800., 8812.,  9434.,
      9460.,  10124., 10108., 10814., 10756., 11504., 8140.,  8672.,  8696.,
      9264.,  9252.,  9856.,  9808.,  10448.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4665.,  5034.,  4746.,  5124.,  4827.,  5214.,  4908.,  5304.,  4989.,
      5394.,  5070.,  5484.,  5151.,  5574.,  5232.,  5664.,  5313.,  5754.,
      5394.,  5844.,  5475.,  5934.,  5556.,  6024.,  5637.,  6114.,  5718.,
      6204.,  5799.,  6294.,  5880.,  6384.,  5961.,  6474.,  6042.,  6564.,
      6123.,  6654.,  6204.,  6744.,  6285.,  6834.,  6366.,  6924.,  6447.,
      7014.,  6528.,  7104.,  6609.,  7194.,  6690.,  7284.,  6771.,  7374.,
      6852.,  7464.,  7581.,  8274.,  7662.,  8364.,  7743.,  8454.,  7824.,
      8544.,  7905.,  8634.,  7986.,  8724.,  8067.,  8814.,  8148.,  8904.,
      8229.,  8994.,  8310.,  9084.,  8391.,  9174.,  8472.,  9264.,  8553.,
      9354.,  8634.,  9444.,  8715.,  9534.,  8796.,  9624.,  8877.,  9714.,
      8958.,  9804.,  9039.,  9894.,  9120.,  9984.,  9201.,  10074., 9282.,
      10164., 9363.,  10254., 9444.,  10344., 9525.,  10434., 9606.,  10524.,
      9687.,  10614., 9768.,  10704., 10497., 11514., 10578., 11604., 10659.,
      11694., 10740., 11784., 10821., 11874., 10902., 11964., 10983., 12054.,
      11064., 12144., 11145., 12234., 11226., 12324., 11307., 12414., 11388.,
      12504., 11469., 12594., 11550., 12684., 11631., 12774., 11712., 12864.,
      11793., 12954., 11874., 13044., 11955., 13134., 12036., 13224., 12117.,
      13314., 12198., 13404., 12279., 13494., 12360., 13584., 12441., 13674.,
      12522., 13764., 12603., 13854., 12684., 13944., 13413., 14754., 13494.,
      14844., 13575., 14934., 13656., 15024., 13737., 15114., 13818., 15204.,
      13899., 15294., 13980., 15384., 14061., 15474., 14142., 15564., 14223.,
      15654., 14304., 15744., 14385., 15834., 14466., 15924., 14547., 16014.,
      14628., 16104., 14709., 16194., 14790., 16284., 14871., 16374., 14952.,
      16464., 15033., 16554., 15114., 16644., 15195., 16734., 15276., 16824.,
      15357., 16914., 15438., 17004., 15519., 17094., 15600., 17184., 16329.,
      17994., 16410., 18084., 16491., 18174., 16572., 18264., 16653., 18354.,
      16734., 18444., 16815., 18534., 16896., 18624., 16977., 18714., 17058.,
      18804., 17139., 18894., 17220., 18984., 17301., 19074., 17382., 19164.,
      17463., 19254., 17544., 19344., 17625., 19434., 17706., 19524., 17787.,
      19614., 17868., 19704., 17949., 19794., 18030., 19884., 18111., 19974.,
      18192., 20064., 18273., 20154., 18354., 20244., 18435., 20334., 18516.,
      20424., 19245., 21234., 19326., 21324., 19407., 21414., 19488., 21504.,
      19569., 21594., 19650., 21684., 19731., 21774., 19812., 21864., 19893.,
      21954., 19974., 22044., 20055., 22134., 20136., 22224., 20217., 22314.,
      20298., 22404., 20379., 22494., 20460., 22584., 20541., 22674., 20622.,
      22764., 20703., 22854., 20784., 22944., 20865., 23034., 20946., 23124.,
      21027., 23214., 21108., 23304., 21189., 23394., 21270., 23484., 21351.,
      23574., 21432., 23664., 22161., 24474., 22242., 24564., 22323., 24654.,
      22404., 24744., 22485., 24834., 22566., 24924., 22647., 25014., 22728.,
      25104., 22809., 25194., 22890., 25284., 22971., 25374., 23052., 25464.,
      23133., 25554., 23214., 25644., 23295., 25734., 23376., 25824., 23457.,
      25914., 23538., 26004., 23619., 26094., 23700., 26184., 23781., 26274.,
      23862., 26364., 23943., 26454., 24024., 26544., 24105., 26634., 24186.,
      26724., 24267., 26814., 24348., 26904.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7940.,  8504.,  9068.,  9632.,  8472.,  9072.,  9672.,  10272., 9004.,
      9640.,  10276., 10912., 9536.,  10208., 10880., 11552., 8074.,  8720.,
      9366.,  10012., 8696.,  9384.,  10072., 10760., 9318.,  10048., 10778.,
      11508., 9940.,  10712., 11484., 12256., 8688.,  9408.,  10128., 10848.,
      9408.,  10176., 10944., 11712., 10128., 10944., 11760., 12576., 10848.,
      11712., 12576., 13440., 10198., 10984., 11770., 12556., 11024., 11864.,
      12704., 13544., 11850., 12744., 13638., 14532., 12676., 13624., 14572.,
      15520., 10224., 10944., 11664., 12384., 10944., 11712., 12480., 13248.,
      11664., 12480., 13296., 14112., 12384., 13248., 14112., 14976., 10154.,
      10784., 11414., 12044., 10760., 11432., 12104., 12776., 11366., 12080.,
      12794., 13508., 11972., 12728., 13484., 14240., 10756., 11272., 11788.,
      12304., 11272., 11824., 12376., 12928., 11788., 12376., 12964., 13552.,
      12304., 12928., 13552., 14176., 8074.,  8720.,  9366.,  10012., 8696.,
      9384.,  10072., 10760., 9318.,  10048., 10778., 11508., 9940.,  10712.,
      11484., 12256., 8913.,  9658.,  10403., 11148., 9642.,  10436., 11230.,
      12024., 10371., 11214., 12057., 12900., 11100., 11992., 12884., 13776.,
      10584., 11424., 12264., 13104., 11424., 12320., 13216., 14112., 12264.,
      13216., 14168., 15120., 13104., 14112., 15120., 16128., 13487., 14418.,
      15349., 16280., 14442., 15436., 16430., 17424., 15397., 16454., 17511.,
      18568., 16352., 17472., 18592., 19712., 14168., 15008., 15848., 16688.,
      15008., 15904., 16800., 17696., 15848., 16800., 17752., 18704., 16688.,
      17696., 18704., 19712., 14833., 15554., 16275., 16996., 15554., 16324.,
      17094., 17864., 16275., 17094., 17913., 18732., 16996., 17864., 18732.,
      19600., 10154., 10760., 11366., 11972., 10784., 11432., 12080., 12728.,
      11414., 12104., 12794., 13484., 12044., 12776., 13508., 14240., 8688.,
      9408.,  10128., 10848., 9408.,  10176., 10944., 11712., 10128., 10944.,
      11760., 12576., 10848., 11712., 12576., 13440., 10584., 11424., 12264.,
      13104., 11424., 12320., 13216., 14112., 12264., 13216., 14168., 15120.,
      13104., 14112., 15120., 16128., 13632., 14592., 15552., 16512., 14592.,
      15616., 16640., 17664., 15552., 16640., 17728., 18816., 16512., 17664.,
      18816., 19968., 18216., 19296., 20376., 21456., 19296., 20448., 21600.,
      22752., 20376., 21600., 22824., 24048., 21456., 22752., 24048., 25344.,
      19776., 20736., 21696., 22656., 20736., 21760., 22784., 23808., 21696.,
      22784., 23872., 24960., 22656., 23808., 24960., 26112., 14168., 15008.,
      15848., 16688., 15008., 15904., 16800., 17696., 15848., 16800., 17752.,
      18704., 16688., 17696., 18704., 19712., 10224., 10944., 11664., 12384.,
      10944., 11712., 12480., 13248., 11664., 12480., 13296., 14112., 12384.,
      13248., 14112., 14976., 10198., 10984., 11770., 12556., 11024., 11864.,
      12704., 13544., 11850., 12744., 13638., 14532., 12676., 13624., 14572.,
      15520., 13487., 14418., 15349., 16280., 14442., 15436., 16430., 17424.,
      15397., 16454., 17511., 18568., 16352., 17472., 18592., 19712., 18216.,
      19296., 20376., 21456., 19296., 20448., 21600., 22752., 20376., 21600.,
      22824., 24048., 21456., 22752., 24048., 25344., 24721., 25922., 27123.,
      28324., 25922., 27204., 28486., 29768., 27123., 28486., 29849., 31212.,
      28324., 29768., 31212., 32656., 18216., 19296., 20376., 21456., 19296.,
      20448., 21600., 22752., 20376., 21600., 22824., 24048., 21456., 22752.,
      24048., 25344., 13487., 14442., 15397., 16352., 14418., 15436., 16454.,
      17472., 15349., 16430., 17511., 18592., 16280., 17424., 18568., 19712.,
      10198., 11024., 11850., 12676., 10984., 11864., 12744., 13624., 11770.,
      12704., 13638., 14572., 12556., 13544., 14532., 15520., 10224., 10944.,
      11664., 12384., 10944., 11712., 12480., 13248., 11664., 12480., 13296.,
      14112., 12384., 13248., 14112., 14976., 14168., 15008., 15848., 16688.,
      15008., 15904., 16800., 17696., 15848., 16800., 17752., 18704., 16688.,
      17696., 18704., 19712., 19776., 20736., 21696., 22656., 20736., 21760.,
      22784., 23808., 21696., 22784., 23872., 24960., 22656., 23808., 24960.,
      26112., 18216., 19296., 20376., 21456., 19296., 20448., 21600., 22752.,
      20376., 21600., 22824., 24048., 21456., 22752., 24048., 25344., 13632.,
      14592., 15552., 16512., 14592., 15616., 16640., 17664., 15552., 16640.,
      17728., 18816., 16512., 17664., 18816., 19968., 10584., 11424., 12264.,
      13104., 11424., 12320., 13216., 14112., 12264., 13216., 14168., 15120.,
      13104., 14112., 15120., 16128., 8688.,  9408.,  10128., 10848., 9408.,
      10176., 10944., 11712., 10128., 10944., 11760., 12576., 10848., 11712.,
      12576., 13440., 10154., 10784., 11414., 12044., 10760., 11432., 12104.,
      12776., 11366., 12080., 12794., 13508., 11972., 12728., 13484., 14240.,
      14833., 15554., 16275., 16996., 15554., 16324., 17094., 17864., 16275.,
      17094., 17913., 18732., 16996., 17864., 18732., 19600., 14168., 15008.,
      15848., 16688., 15008., 15904., 16800., 17696., 15848., 16800., 17752.,
      18704., 16688., 17696., 18704., 19712., 13487., 14442., 15397., 16352.,
      14418., 15436., 16454., 17472., 15349., 16430., 17511., 18592., 16280.,
      17424., 18568., 19712., 10584., 11424., 12264., 13104., 11424., 12320.,
      13216., 14112., 12264., 13216., 14168., 15120., 13104., 14112., 15120.,
      16128., 8913.,  9642.,  10371., 11100., 9658.,  10436., 11214., 11992.,
      10403., 11230., 12057., 12884., 11148., 12024., 12900., 13776., 8074.,
      8696.,  9318.,  9940.,  8720.,  9384.,  10048., 10712., 9366.,  10072.,
      10778., 11484., 10012., 10760., 11508., 12256., 10756., 11272., 11788.,
      12304., 11272., 11824., 12376., 12928., 11788., 12376., 12964., 13552.,
      12304., 12928., 13552., 14176., 10154., 10760., 11366., 11972., 10784.,
      11432., 12080., 12728., 11414., 12104., 12794., 13484., 12044., 12776.,
      13508., 14240., 10224., 10944., 11664., 12384., 10944., 11712., 12480.,
      13248., 11664., 12480., 13296., 14112., 12384., 13248., 14112., 14976.,
      10198., 11024., 11850., 12676., 10984., 11864., 12744., 13624., 11770.,
      12704., 13638., 14572., 12556., 13544., 14532., 15520., 8688.,  9408.,
      10128., 10848., 9408.,  10176., 10944., 11712., 10128., 10944., 11760.,
      12576., 10848., 11712., 12576., 13440., 8074.,  8696.,  9318.,  9940.,
      8720.,  9384.,  10048., 10712., 9366.,  10072., 10778., 11484., 10012.,
      10760., 11508., 12256., 7940.,  8472.,  9004.,  9536.,  8504.,  9072.,
      9640.,  10208., 9068.,  9672.,  10276., 10880., 9632.,  10272., 10912.,
      11552.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8961.,  9330.,  9699.,  10068., 9114.,  9492.,  9870.,  10248., 9267.,
      9654.,  10041., 10428., 9420.,  9816.,  10212., 10608., 9573.,  9978.,
      10383., 10788., 9726.,  10140., 10554., 10968., 9879.,  10302., 10725.,
      11148., 10032., 10464., 10896., 11328., 10185., 10626., 11067., 11508.,
      10338., 10788., 11238., 11688., 10491., 10950., 11409., 11868., 10644.,
      11112., 11580., 12048., 10797., 11274., 11751., 12228., 10950., 11436.,
      11922., 12408., 11103., 11598., 12093., 12588., 11256., 11760., 12264.,
      12768., 11409., 11922., 12435., 12948., 11562., 12084., 12606., 13128.,
      11715., 12246., 12777., 13308., 11868., 12408., 12948., 13488., 12021.,
      12570., 13119., 13668., 12174., 12732., 13290., 13848., 12327., 12894.,
      13461., 14028., 12480., 13056., 13632., 14208., 12633., 13218., 13803.,
      14388., 12786., 13380., 13974., 14568., 12939., 13542., 14145., 14748.,
      13092., 13704., 14316., 14928., 14469., 15162., 15855., 16548., 14622.,
      15324., 16026., 16728., 14775., 15486., 16197., 16908., 14928., 15648.,
      16368., 17088., 15081., 15810., 16539., 17268., 15234., 15972., 16710.,
      17448., 15387., 16134., 16881., 17628., 15540., 16296., 17052., 17808.,
      15693., 16458., 17223., 17988., 15846., 16620., 17394., 18168., 15999.,
      16782., 17565., 18348., 16152., 16944., 17736., 18528., 12081., 12754.,
      13427., 14100., 12234., 12916., 13598., 14280., 12387., 13078., 13769.,
      14460., 12540., 13240., 13940., 14640., 8981.,  9562.,  10143., 10724.,
      9134.,  9724.,  10314., 10904., 9287.,  9886.,  10485., 11084., 9440.,
      10048., 10656., 11264., 6393.,  6882.,  7371.,  7860.,  6546.,  7044.,
      7542.,  8040.,  6699.,  7206.,  7713.,  8220.,  6852.,  7368.,  7884.,
      8400.,  7005.,  7530.,  8055.,  8580.,  7158.,  7692.,  8226.,  8760.,
      7311.,  7854.,  8397.,  8940.,  7464.,  8016.,  8568.,  9120.,  8841.,
      9474.,  10107., 10740., 8994.,  9636.,  10278., 10920., 9147.,  9798.,
      10449., 11100., 9300.,  9960.,  10620., 11280., 9453.,  10122., 10791.,
      11460., 9606.,  10284., 10962., 11640., 9759.,  10446., 11133., 11820.,
      9912.,  10608., 11304., 12000., 10065., 10770., 11475., 12180., 10218.,
      10932., 11646., 12360., 10371., 11094., 11817., 12540., 10524., 11256.,
      11988., 12720., 7989.,  8602.,  9215.,  9828.,  8142.,  8764.,  9386.,
      10008., 8295.,  8926.,  9557.,  10188., 8448.,  9088.,  9728.,  10368.,
      6425.,  6946.,  7467.,  7988.,  6578.,  7108.,  7638.,  8168.,  6731.,
      7270.,  7809.,  8348.,  6884.,  7432.,  7980.,  8528.,  5373.,  5802.,
      6231.,  6660.,  5526.,  5964.,  6402.,  6840.,  5679.,  6126.,  6573.,
      7020.,  5832.,  6288.,  6744.,  7200.,  5985.,  6450.,  6915.,  7380.,
      6138.,  6612.,  7086.,  7560.,  6291.,  6774.,  7257.,  7740.,  6444.,
      6936.,  7428.,  7920.,  7821.,  8394.,  8967.,  9540.,  7974.,  8556.,
      9138.,  9720.,  8127.,  8718.,  9309.,  9900.,  8280.,  8880.,  9480.,
      10080., 8433.,  9042.,  9651.,  10260., 8586.,  9204.,  9822.,  10440.,
      8739.,  9366.,  9993.,  10620., 8892.,  9528.,  10164., 10800., 9045.,
      9690.,  10335., 10980., 9198.,  9852.,  10506., 11160., 9351.,  10014.,
      10677., 11340., 9504.,  10176., 10848., 11520., 8505.,  9058.,  9611.,
      10164., 8658.,  9220.,  9782.,  10344., 8811.,  9382.,  9953.,  10524.,
      8964.,  9544.,  10124., 10704., 8477.,  8938.,  9399.,  9860.,  8630.,
      9100.,  9570.,  10040., 8783.,  9262.,  9741.,  10220., 8936.,  9424.,
      9912.,  10400., 8961.,  9330.,  9699.,  10068., 9114.,  9492.,  9870.,
      10248., 9267.,  9654.,  10041., 10428., 9420.,  9816.,  10212., 10608.,
      9573.,  9978.,  10383., 10788., 9726.,  10140., 10554., 10968., 9879.,
      10302., 10725., 11148., 10032., 10464., 10896., 11328., 11409., 11922.,
      12435., 12948., 11562., 12084., 12606., 13128., 11715., 12246., 12777.,
      13308., 11868., 12408., 12948., 13488., 12021., 12570., 13119., 13668.,
      12174., 12732., 13290., 13848., 12327., 12894., 13461., 14028., 12480.,
      13056., 13632., 14208., 12633., 13218., 13803., 14388., 12786., 13380.,
      13974., 14568., 12939., 13542., 14145., 14748., 13092., 13704., 14316.,
      14928., 13245., 13866., 14487., 15108., 13398., 14028., 14658., 15288.,
      13551., 14190., 14829., 15468., 13704., 14352., 15000., 15648., 13857.,
      14514., 15171., 15828., 14010., 14676., 15342., 16008., 14163., 14838.,
      15513., 16188., 14316., 15000., 15684., 16368., 14469., 15162., 15855.,
      16548., 14622., 15324., 16026., 16728., 14775., 15486., 16197., 16908.,
      14928., 15648., 16368., 17088., 15081., 15810., 16539., 17268., 15234.,
      15972., 16710., 17448., 15387., 16134., 16881., 17628., 15540., 16296.,
      17052., 17808., 8981.,  9562.,  10143., 10724., 9134.,  9724.,  10314.,
      10904., 9287.,  9886.,  10485., 11084., 9440.,  10048., 10656., 11264.,
      6393.,  6882.,  7371.,  7860.,  6546.,  7044.,  7542.,  8040.,  6699.,
      7206.,  7713.,  8220.,  6852.,  7368.,  7884.,  8400.,  7005.,  7530.,
      8055.,  8580.,  7158.,  7692.,  8226.,  8760.,  7311.,  7854.,  8397.,
      8940.,  7464.,  8016.,  8568.,  9120.,  7617.,  8178.,  8739.,  9300.,
      7770.,  8340.,  8910.,  9480.,  7923.,  8502.,  9081.,  9660.,  8076.,
      8664.,  9252.,  9840.,  8229.,  8826.,  9423.,  10020., 8382.,  8988.,
      9594.,  10200., 8535.,  9150.,  9765.,  10380., 8688.,  9312.,  9936.,
      10560., 8841.,  9474.,  10107., 10740., 8994.,  9636.,  10278., 10920.,
      9147.,  9798.,  10449., 11100., 9300.,  9960.,  10620., 11280., 9453.,
      10122., 10791., 11460., 9606.,  10284., 10962., 11640., 9759.,  10446.,
      11133., 11820., 9912.,  10608., 11304., 12000., 6425.,  6946.,  7467.,
      7988.,  6578.,  7108.,  7638.,  8168.,  6731.,  7270.,  7809.,  8348.,
      6884.,  7432.,  7980.,  8528.,  5373.,  5802.,  6231.,  6660.,  5526.,
      5964.,  6402.,  6840.,  5679.,  6126.,  6573.,  7020.,  5832.,  6288.,
      6744.,  7200.,  5985.,  6450.,  6915.,  7380.,  6138.,  6612.,  7086.,
      7560.,  6291.,  6774.,  7257.,  7740.,  6444.,  6936.,  7428.,  7920.,
      6597.,  7098.,  7599.,  8100.,  6750.,  7260.,  7770.,  8280.,  6903.,
      7422.,  7941.,  8460.,  7056.,  7584.,  8112.,  8640.,  7209.,  7746.,
      8283.,  8820.,  7362.,  7908.,  8454.,  9000.,  7515.,  8070.,  8625.,
      9180.,  7668.,  8232.,  8796.,  9360.,  7821.,  8394.,  8967.,  9540.,
      7974.,  8556.,  9138.,  9720.,  8127.,  8718.,  9309.,  9900.,  8280.,
      8880.,  9480.,  10080., 8433.,  9042.,  9651.,  10260., 8586.,  9204.,
      9822.,  10440., 8739.,  9366.,  9993.,  10620., 8892.,  9528.,  10164.,
      10800.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11678., 14232., 15826., 17478., 15014., 12600., 11138., 11046., 12300.,
      13964., 15711., 13560., 11468., 10018., 11448., 13344., 15976., 18696.,
      16888., 15136., 13704., 17240., 20468., 24738., 29081., 24738., 20468.,
      17240., 13704., 15136., 16888., 18696., 15976., 13344., 11448., 10018.,
      11468., 13560., 15711., 13964., 12300., 11046., 11138., 12600., 15014.,
      17478., 15826., 14232., 11678.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1310., 1388., 1466., 1544., 1622., 1700., 1778., 2090., 2168., 2246.,
      2324., 2402., 2480., 2558., 2870., 2948., 3026., 3104., 3182., 3260.,
      3338., 3650., 3728., 3806., 3884., 3962., 4040., 4118., 4430., 4508.,
      4586., 4664., 4742., 4820., 4898., 5210., 5288., 5366., 5444., 5522.,
      5600., 5678., 5990., 6068., 6146., 6224., 6302., 6380., 6458.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10394., 11004., 12584., 13296., 13744., 14564., 14886., 15820., 12770.,
      13612., 10856., 11600., 9220.,  9892.,  11882., 12620., 13324., 14168.,
      15099., 16056., 16873., 17950., 15380., 16336., 14140., 14968., 12271.,
      12996., 12424., 13232., 13728., 14656., 15696., 16752., 17672., 18864.,
      15304., 16368., 13216., 14144., 11616., 12432., 14908., 15856., 17572.,
      18664., 21191., 22436., 24787., 26194., 21014., 22276., 17556., 18664.,
      14687., 15664., 14840., 15760., 16800., 17856., 19008., 20208., 21192.,
      22544., 19352., 20560., 17824., 18880., 15920., 16848., 13134., 13956.,
      14188., 15128., 15815., 16880., 17425., 18622., 14704., 15768., 12284.,
      13208., 10563., 11372., 9686.,  10340., 10728., 11472., 12676., 13516.,
      14622., 15564., 13478., 14308., 12584., 13296., 10352., 10972.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2470.,  2620.,  2614.,  2776.,  2758.,  2932.,  2902.,  3088.,  3046.,
      3244.,  3190.,  3400.,  3334.,  3556.,  3910.,  4180.,  4054.,  4336.,
      4198.,  4492.,  4342.,  4648.,  4486.,  4804.,  4630.,  4960.,  4774.,
      5116.,  5350.,  5740.,  5494.,  5896.,  5638.,  6052.,  5782.,  6208.,
      5926.,  6364.,  6070.,  6520.,  6214.,  6676.,  6790.,  7300.,  6934.,
      7456.,  7078.,  7612.,  7222.,  7768.,  7366.,  7924.,  7510.,  8080.,
      7654.,  8236.,  8230.,  8860.,  8374.,  9016.,  8518.,  9172.,  8662.,
      9328.,  8806.,  9484.,  8950.,  9640.,  9094.,  9796.,  9670.,  10420.,
      9814.,  10576., 9958.,  10732., 10102., 10888., 10246., 11044., 10390.,
      11200., 10534., 11356., 11110., 11980., 11254., 12136., 11398., 12292.,
      11542., 12448., 11686., 12604., 11830., 12760., 11974., 12916.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9586.,  10196., 10806., 11416., 11624., 12336., 13048., 13760., 12780.,
      13600., 14420., 15240., 13798., 14732., 15666., 16600., 12314., 13156.,
      13998., 14840., 11336., 12080., 12824., 13568., 9704.,  10376., 11048.,
      11720., 12658., 13396., 14134., 14872., 13068., 13912., 14756., 15600.,
      14297., 15254., 16211., 17168., 15421., 16498., 17575., 18652., 13260.,
      14216., 15172., 16128., 11740., 12568., 13396., 14224., 9833.,  10558.,
      11283., 12008., 11624., 12432., 13240., 14048., 12704., 13632., 14560.,
      15488., 15232., 16288., 17344., 18400., 17640., 18832., 20024., 21216.,
      15848., 16912., 17976., 19040., 14752., 15680., 16608., 17536., 12432.,
      13248., 14064., 14880., 13220., 14168., 15116., 16064., 15652., 16744.,
      17836., 18928., 19089., 20334., 21579., 22824., 22343., 23750., 25157.,
      26564., 19326., 20588., 21850., 23112., 17108., 18216., 19324., 20432.,
      14573., 15550., 16527., 17504., 14808., 15728., 16648., 17568., 17696.,
      18752., 19808., 20864., 19152., 20352., 21552., 22752., 20424., 21776.,
      23128., 24480., 17656., 18864., 20072., 21280., 15648., 16704., 17760.,
      18816., 13248., 14176., 15104., 16032., 13350., 14172., 14994., 15816.,
      14252., 15192., 16132., 17072., 15589., 16654., 17719., 18784., 16757.,
      17954., 19151., 20348., 14616., 15680., 16744., 17808., 13180., 14104.,
      15028., 15952., 11421., 12230., 13039., 13848., 8958.,  9612.,  10266.,
      10920., 9800.,  10544., 11288., 12032., 11456., 12296., 13136., 13976.,
      13006., 13948., 14890., 15832., 12014., 12844., 13674., 14504., 11624.,
      12336., 13048., 13760., 9908.,  10528., 11148., 11768.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4790.,  4940.,  5090.,  5240.,  5066.,  5228.,  5390.,  5552.,  5342.,
      5516.,  5690.,  5864.,  5618.,  5804.,  5990.,  6176.,  5894.,  6092.,
      6290.,  6488.,  6170.,  6380.,  6590.,  6800.,  6446.,  6668.,  6890.,
      7112.,  7550.,  7820.,  8090.,  8360.,  7826.,  8108.,  8390.,  8672.,
      8102.,  8396.,  8690.,  8984.,  8378.,  8684.,  8990.,  9296.,  8654.,
      8972.,  9290.,  9608.,  8930.,  9260.,  9590.,  9920.,  9206.,  9548.,
      9890.,  10232., 10310., 10700., 11090., 11480., 10586., 10988., 11390.,
      11792., 10862., 11276., 11690., 12104., 11138., 11564., 11990., 12416.,
      11414., 11852., 12290., 12728., 11690., 12140., 12590., 13040., 11966.,
      12428., 12890., 13352., 13070., 13580., 14090., 14600., 13346., 13868.,
      14390., 14912., 13622., 14156., 14690., 15224., 13898., 14444., 14990.,
      15536., 14174., 14732., 15290., 15848., 14450., 15020., 15590., 16160.,
      14726., 15308., 15890., 16472., 15830., 16460., 17090., 17720., 16106.,
      16748., 17390., 18032., 16382., 17036., 17690., 18344., 16658., 17324.,
      17990., 18656., 16934., 17612., 18290., 18968., 17210., 17900., 18590.,
      19280., 17486., 18188., 18890., 19592., 18590., 19340., 20090., 20840.,
      18866., 19628., 20390., 21152., 19142., 19916., 20690., 21464., 19418.,
      20204., 20990., 21776., 19694., 20492., 21290., 22088., 19970., 20780.,
      21590., 22400., 20246., 21068., 21890., 22712., 21350., 22220., 23090.,
      23960., 21626., 22508., 23390., 24272., 21902., 22796., 23690., 24584.,
      22178., 23084., 23990., 24896., 22454., 23372., 24290., 25208., 22730.,
      23660., 24590., 25520., 23006., 23948., 24890., 25832.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10352., 10972., 12584., 13296., 13478., 14308., 14622., 15564., 12676.,
      13516., 10728., 11472., 9686.,  10340., 10563., 11372., 12284., 13208.,
      14704., 15768., 17425., 18622., 15815., 16880., 14188., 15128., 13134.,
      13956., 15920., 16848., 17824., 18880., 19352., 20560., 21192., 22544.,
      19008., 20208., 16800., 17856., 14840., 15760., 14687., 15664., 17556.,
      18664., 21014., 22276., 24787., 26194., 21191., 22436., 17572., 18664.,
      14908., 15856., 11616., 12432., 13216., 14144., 15304., 16368., 17672.,
      18864., 15696., 16752., 13728., 14656., 12424., 13232., 12271., 12996.,
      14140., 14968., 15380., 16336., 16873., 17950., 15099., 16056., 13324.,
      14168., 11882., 12620., 9220.,  9892.,  10856., 11600., 12770., 13612.,
      14886., 15820., 13744., 14564., 12584., 13296., 10394., 11004.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2542.,  2620.,  2698.,  2776.,  2854.,  2932.,  3010.,  3088.,  3166.,
      3244.,  3322.,  3400.,  3478.,  3556.,  4102.,  4180.,  4258.,  4336.,
      4414.,  4492.,  4570.,  4648.,  4726.,  4804.,  4882.,  4960.,  5038.,
      5116.,  5662.,  5740.,  5818.,  5896.,  5974.,  6052.,  6130.,  6208.,
      6286.,  6364.,  6442.,  6520.,  6598.,  6676.,  7222.,  7300.,  7378.,
      7456.,  7534.,  7612.,  7690.,  7768.,  7846.,  7924.,  8002.,  8080.,
      8158.,  8236.,  8782.,  8860.,  8938.,  9016.,  9094.,  9172.,  9250.,
      9328.,  9406.,  9484.,  9562.,  9640.,  9718.,  9796.,  10342., 10420.,
      10498., 10576., 10654., 10732., 10810., 10888., 10966., 11044., 11122.,
      11200., 11278., 11356., 11902., 11980., 12058., 12136., 12214., 12292.,
      12370., 12448., 12526., 12604., 12682., 12760., 12838., 12916.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12294., 12928., 12948., 13624., 15216., 15952., 15952., 16736., 15258.,
      16076., 16096., 16968., 15532., 16444., 16460., 17432., 12970., 13800.,
      13796., 14680., 10608., 11344., 11344., 12128., 8918.,  9580.,  9544.,
      10248., 10387., 11142., 11188., 11992., 11928., 12792., 12824., 13744.,
      13957., 14912., 14966., 15984., 16254., 17314., 17362., 18492., 15317.,
      16270., 16296., 17312., 14616., 15448., 15480., 16368., 13347., 14076.,
      14078., 14856., 14568., 15456., 15472., 16416., 15680., 16704., 16704.,
      17792., 16536., 17680., 17696., 18912., 17680., 18960., 18960., 20320.,
      15512., 16672., 16656., 17888., 13632., 14656., 14656., 15744., 12008.,
      12912., 12896., 13856., 15637., 16574., 16632., 17632., 19176., 20264.,
      20296., 21456., 23747., 24972., 25006., 26312., 28610., 29990., 29990.,
      31460., 23747., 25006., 24972., 26312., 19176., 20296., 20264., 21456.,
      15637., 16632., 16574., 17632., 12008., 12896., 12912., 13856., 13632.,
      14656., 14656., 15744., 15512., 16656., 16672., 17888., 17680., 18960.,
      18960., 20320., 16536., 17696., 17680., 18912., 15680., 16704., 16704.,
      17792., 14568., 15472., 15456., 16416., 13347., 14078., 14076., 14856.,
      14616., 15480., 15448., 16368., 15317., 16296., 16270., 17312., 16254.,
      17362., 17314., 18492., 13957., 14966., 14912., 15984., 11928., 12824.,
      12792., 13744., 10387., 11188., 11142., 11992., 8918.,  9544.,  9580.,
      10248., 10608., 11344., 11344., 12128., 12970., 13796., 13800., 14680.,
      15532., 16460., 16444., 17432., 15258., 16096., 16076., 16968., 15216.,
      15952., 15952., 16736., 12294., 12948., 12928., 13624.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4796.,  5084.,  4940.,  5240.,  5084.,  5396.,  5228.,  5552.,  5372.,
      5708.,  5516.,  5864.,  5660.,  6020.,  5804.,  6176.,  5948.,  6332.,
      6092.,  6488.,  6236.,  6644.,  6380.,  6800.,  6524.,  6956.,  6668.,
      7112.,  7676.,  8204.,  7820.,  8360.,  7964.,  8516.,  8108.,  8672.,
      8252.,  8828.,  8396.,  8984.,  8540.,  9140.,  8684.,  9296.,  8828.,
      9452.,  8972.,  9608.,  9116.,  9764.,  9260.,  9920.,  9404.,  10076.,
      9548.,  10232., 10556., 11324., 10700., 11480., 10844., 11636., 10988.,
      11792., 11132., 11948., 11276., 12104., 11420., 12260., 11564., 12416.,
      11708., 12572., 11852., 12728., 11996., 12884., 12140., 13040., 12284.,
      13196., 12428., 13352., 13436., 14444., 13580., 14600., 13724., 14756.,
      13868., 14912., 14012., 15068., 14156., 15224., 14300., 15380., 14444.,
      15536., 14588., 15692., 14732., 15848., 14876., 16004., 15020., 16160.,
      15164., 16316., 15308., 16472., 16316., 17564., 16460., 17720., 16604.,
      17876., 16748., 18032., 16892., 18188., 17036., 18344., 17180., 18500.,
      17324., 18656., 17468., 18812., 17612., 18968., 17756., 19124., 17900.,
      19280., 18044., 19436., 18188., 19592., 19196., 20684., 19340., 20840.,
      19484., 20996., 19628., 21152., 19772., 21308., 19916., 21464., 20060.,
      21620., 20204., 21776., 20348., 21932., 20492., 22088., 20636., 22244.,
      20780., 22400., 20924., 22556., 21068., 22712., 22076., 23804., 22220.,
      23960., 22364., 24116., 22508., 24272., 22652., 24428., 22796., 24584.,
      22940., 24740., 23084., 24896., 23228., 25052., 23372., 25208., 23516.,
      25364., 23660., 25520., 23804., 25676., 23948., 25832.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10546., 11180., 11814., 12448., 11204., 11880., 12556., 13232., 12928.,
      13664., 14400., 15136., 13648., 14432., 15216., 16000., 12962., 13780.,
      14598., 15416., 13784., 14656., 15528., 16400., 13256., 14168., 15080.,
      15992., 14156., 15128., 16100., 17072., 11382., 12212., 13042., 13872.,
      12180., 13064., 13948., 14832., 10112., 10848., 11584., 12320., 10832.,
      11616., 12400., 13184., 8822.,  9484.,  10146., 10808., 9424.,  10128.,
      10832., 11536., 12371., 13126., 13881., 14636., 13124., 13928., 14732.,
      15536., 12752., 13616., 14480., 15344., 13592., 14512., 15432., 16352.,
      13423., 14378., 15333., 16288., 14386., 15404., 16422., 17440., 14424.,
      15484., 16544., 17604., 15482., 16612., 17742., 18872., 12913., 13866.,
      14819., 15772., 13848., 14864., 15880., 16896., 12144., 12976., 13808.,
      14640., 12984., 13872., 14760., 15648., 10989., 11718., 12447., 13176.,
      11698., 12476., 13254., 14032., 12504., 13392., 14280., 15168., 13360.,
      14304., 15248., 16192., 13952., 14976., 16000., 17024., 14912., 16000.,
      17088., 18176., 16184., 17328., 18472., 19616., 17280., 18496., 19712.,
      20928., 18720., 20000., 21280., 22560., 19920., 21280., 22640., 24000.,
      17960., 19120., 20280., 21440., 19024., 20256., 21488., 22720., 18048.,
      19072., 20096., 21120., 19008., 20096., 21184., 22272., 14280., 15184.,
      16088., 16992., 15104., 16064., 17024., 17984., 13313., 14250., 15187.,
      16124., 14280., 15280., 16280., 17280., 15888., 16976., 18064., 19152.,
      16968., 18128., 19288., 20448., 19773., 20998., 22223., 23448., 20994.,
      22300., 23606., 24912., 23968., 25348., 26728., 28108., 25294., 26764.,
      28234., 29704., 19899., 21158., 22417., 23676., 21084., 22424., 23764.,
      25104., 16752., 17872., 18992., 20112., 17832., 19024., 20216., 21408.,
      13767., 14762., 15757., 16752., 14682., 15740., 16798., 17856., 14552.,
      15440., 16328., 17216., 15408., 16352., 17296., 18240., 18048., 19072.,
      20096., 21120., 19008., 20096., 21184., 22272., 18232., 19376., 20520.,
      21664., 19328., 20544., 21760., 22976., 18720., 20000., 21280., 22560.,
      19920., 21280., 22640., 24000., 15912., 17072., 18232., 19392., 16976.,
      18208., 19440., 20672., 13952., 14976., 16000., 17024., 14912., 16000.,
      17088., 18176., 12232., 13136., 14040., 14944., 13056., 14016., 14976.,
      15936., 11659., 12390., 13121., 13852., 12396., 13176., 13956., 14736.,
      13008., 13872., 14736., 15600., 13848., 14768., 15688., 16608., 13911.,
      14890., 15869., 16848., 14858., 15900., 16942., 17984., 15016., 16124.,
      17232., 18340., 16042., 17220., 18398., 19576., 13689., 14698., 15707.,
      16716., 14608., 15680., 16752., 17824., 13104., 14000., 14896., 15792.,
      13944., 14896., 15848., 16800., 12133., 12934., 13735., 14536., 12858.,
      13708., 14558., 15408., 8570.,  9196.,  9822.,  10448., 9212.,  9880.,
      10548., 11216., 9600.,  10336., 11072., 11808., 10320., 11104., 11888.,
      12672., 11066., 11892., 12718., 13544., 11872., 12752., 13632., 14512.,
      12728., 13656., 14584., 15512., 13596., 14584., 15572., 16560., 12494.,
      13332., 14170., 15008., 13276., 14168., 15060., 15952., 12928., 13664.,
      14400., 15136., 13648., 14432., 15216., 16000., 10334., 10988., 11642.,
      12296., 10952., 11648., 12344., 13040.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9304.,  9592.,  9880.,  10168., 9580.,  9880.,  10180., 10480., 9856.,
      10168., 10480., 10792., 10132., 10456., 10780., 11104., 10408., 10744.,
      11080., 11416., 10684., 11032., 11380., 11728., 10960., 11320., 11680.,
      12040., 11236., 11608., 11980., 12352., 11512., 11896., 12280., 12664.,
      11788., 12184., 12580., 12976., 12064., 12472., 12880., 13288., 12340.,
      12760., 13180., 13600., 12616., 13048., 13480., 13912., 12892., 13336.,
      13780., 14224., 9320.,  9720.,  10120., 10520., 9596.,  10008., 10420.,
      10832., 7504.,  7864.,  8224.,  8584.,  7780.,  8152.,  8524.,  8896.,
      5944.,  6264.,  6584.,  6904.,  6220.,  6552.,  6884.,  7216.,  6496.,
      6840.,  7184.,  7528.,  6772.,  7128.,  7484.,  7840.,  7048.,  7416.,
      7784.,  8152.,  7324.,  7704.,  8084.,  8464.,  7600.,  7992.,  8384.,
      8776.,  7876.,  8280.,  8684.,  9088.,  8152.,  8568.,  8984.,  9400.,
      8428.,  8856.,  9284.,  9712.,  6904.,  7288.,  7672.,  8056.,  7180.,
      7576.,  7972.,  8368.,  6112.,  6456.,  6800.,  7144.,  6388.,  6744.,
      7100.,  7456.,  5576.,  5880.,  6184.,  6488.,  5852.,  6168.,  6484.,
      6800.,  6128.,  6456.,  6784.,  7112.,  6404.,  6744.,  7084.,  7424.,
      6680.,  7032.,  7384.,  7736.,  6956.,  7320.,  7684.,  8048.,  7232.,
      7608.,  7984.,  8360.,  7508.,  7896.,  8284.,  8672.,  7784.,  8184.,
      8584.,  8984.,  8060.,  8472.,  8884.,  9296.,  8584.,  8952.,  9320.,
      9688.,  8860.,  9240.,  9620.,  10000., 8816.,  9144.,  9472.,  9800.,
      9092.,  9432.,  9772.,  10112., 9304.,  9592.,  9880.,  10168., 9580.,
      9880.,  10180., 10480., 9856.,  10168., 10480., 10792., 10132., 10456.,
      10780., 11104., 10408., 10744., 11080., 11416., 10684., 11032., 11380.,
      11728., 10960., 11320., 11680., 12040., 11236., 11608., 11980., 12352.,
      11512., 11896., 12280., 12664., 11788., 12184., 12580., 12976., 13720.,
      14200., 14680., 15160., 13996., 14488., 14980., 15472., 11392., 11832.,
      12272., 12712., 11668., 12120., 12572., 13024., 9320.,  9720.,  10120.,
      10520., 9596.,  10008., 10420., 10832., 7504.,  7864.,  8224.,  8584.,
      7780.,  8152.,  8524.,  8896.,  5944.,  6264.,  6584.,  6904.,  6220.,
      6552.,  6884.,  7216.,  6496.,  6840.,  7184.,  7528.,  6772.,  7128.,
      7484.,  7840.,  7048.,  7416.,  7784.,  8152.,  7324.,  7704.,  8084.,
      8464.,  9256.,  9720.,  10184., 10648., 9532.,  10008., 10484., 10960.,
      7952.,  8376.,  8800.,  9224.,  8228.,  8664.,  9100.,  9536.,  6904.,
      7288.,  7672.,  8056.,  7180.,  7576.,  7972.,  8368.,  6112.,  6456.,
      6800.,  7144.,  6388.,  6744.,  7100.,  7456.,  5576.,  5880.,  6184.,
      6488.,  5852.,  6168.,  6484.,  6800.,  6128.,  6456.,  6784.,  7112.,
      6404.,  6744.,  7084.,  7424.,  6680.,  7032.,  7384.,  7736.,  6956.,
      7320.,  7684.,  8048.,  8888.,  9336.,  9784.,  10232., 9164.,  9624.,
      10084., 10544., 8608.,  9016.,  9424.,  9832.,  8884.,  9304.,  9724.,
      10144., 8584.,  8952.,  9320.,  9688.,  8860.,  9240.,  9620.,  10000.,
      8816.,  9144.,  9472.,  9800.,  9092.,  9432.,  9772.,  10112., 9304.,
      9592.,  9880.,  10168., 9580.,  9880.,  10180., 10480., 9856.,  10168.,
      10480., 10792., 10132., 10456., 10780., 11104., 10408., 10744., 11080.,
      11416., 10684., 11032., 11380., 11728.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9908.,  10528., 11148., 11768., 11624., 12336., 13048., 13760., 12014.,
      12844., 13674., 14504., 13006., 13948., 14890., 15832., 11456., 12296.,
      13136., 13976., 9800.,  10544., 11288., 12032., 8958.,  9612.,  10266.,
      10920., 11421., 12230., 13039., 13848., 13180., 14104., 15028., 15952.,
      14616., 15680., 16744., 17808., 16757., 17954., 19151., 20348., 15589.,
      16654., 17719., 18784., 14252., 15192., 16132., 17072., 13350., 14172.,
      14994., 15816., 13248., 14176., 15104., 16032., 15648., 16704., 17760.,
      18816., 17656., 18864., 20072., 21280., 20424., 21776., 23128., 24480.,
      19152., 20352., 21552., 22752., 17696., 18752., 19808., 20864., 14808.,
      15728., 16648., 17568., 14573., 15550., 16527., 17504., 17108., 18216.,
      19324., 20432., 19326., 20588., 21850., 23112., 22343., 23750., 25157.,
      26564., 19089., 20334., 21579., 22824., 15652., 16744., 17836., 18928.,
      13220., 14168., 15116., 16064., 12432., 13248., 14064., 14880., 14752.,
      15680., 16608., 17536., 15848., 16912., 17976., 19040., 17640., 18832.,
      20024., 21216., 15232., 16288., 17344., 18400., 12704., 13632., 14560.,
      15488., 11624., 12432., 13240., 14048., 9833.,  10558., 11283., 12008.,
      11740., 12568., 13396., 14224., 13260., 14216., 15172., 16128., 15421.,
      16498., 17575., 18652., 14297., 15254., 16211., 17168., 13068., 13912.,
      14756., 15600., 12658., 13396., 14134., 14872., 9704.,  10376., 11048.,
      11720., 11336., 12080., 12824., 13568., 12314., 13156., 13998., 14840.,
      13798., 14732., 15666., 16600., 12780., 13600., 14420., 15240., 11624.,
      12336., 13048., 13760., 9586.,  10196., 10806., 11416.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5006.,  5084.,  5162.,  5240.,  5318.,  5396.,  5474.,  5552.,  5630.,
      5708.,  5786.,  5864.,  5942.,  6020.,  6098.,  6176.,  6254.,  6332.,
      6410.,  6488.,  6566.,  6644.,  6722.,  6800.,  6878.,  6956.,  7034.,
      7112.,  8126.,  8204.,  8282.,  8360.,  8438.,  8516.,  8594.,  8672.,
      8750.,  8828.,  8906.,  8984.,  9062.,  9140.,  9218.,  9296.,  9374.,
      9452.,  9530.,  9608.,  9686.,  9764.,  9842.,  9920.,  9998.,  10076.,
      10154., 10232., 11246., 11324., 11402., 11480., 11558., 11636., 11714.,
      11792., 11870., 11948., 12026., 12104., 12182., 12260., 12338., 12416.,
      12494., 12572., 12650., 12728., 12806., 12884., 12962., 13040., 13118.,
      13196., 13274., 13352., 14366., 14444., 14522., 14600., 14678., 14756.,
      14834., 14912., 14990., 15068., 15146., 15224., 15302., 15380., 15458.,
      15536., 15614., 15692., 15770., 15848., 15926., 16004., 16082., 16160.,
      16238., 16316., 16394., 16472., 17486., 17564., 17642., 17720., 17798.,
      17876., 17954., 18032., 18110., 18188., 18266., 18344., 18422., 18500.,
      18578., 18656., 18734., 18812., 18890., 18968., 19046., 19124., 19202.,
      19280., 19358., 19436., 19514., 19592., 20606., 20684., 20762., 20840.,
      20918., 20996., 21074., 21152., 21230., 21308., 21386., 21464., 21542.,
      21620., 21698., 21776., 21854., 21932., 22010., 22088., 22166., 22244.,
      22322., 22400., 22478., 22556., 22634., 22712., 23726., 23804., 23882.,
      23960., 24038., 24116., 24194., 24272., 24350., 24428., 24506., 24584.,
      24662., 24740., 24818., 24896., 24974., 25052., 25130., 25208., 25286.,
      25364., 25442., 25520., 25598., 25676., 25754., 25832.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10334., 10952., 10988., 11648., 11642., 12344., 12296., 13040., 12928.,
      13648., 13664., 14432., 14400., 15216., 15136., 16000., 12494., 13276.,
      13332., 14168., 14170., 15060., 15008., 15952., 12728., 13596., 13656.,
      14584., 14584., 15572., 15512., 16560., 11066., 11872., 11892., 12752.,
      12718., 13632., 13544., 14512., 9600.,  10320., 10336., 11104., 11072.,
      11888., 11808., 12672., 8570.,  9212.,  9196.,  9880.,  9822.,  10548.,
      10448., 11216., 12133., 12858., 12934., 13708., 13735., 14558., 14536.,
      15408., 13104., 13944., 14000., 14896., 14896., 15848., 15792., 16800.,
      13689., 14608., 14698., 15680., 15707., 16752., 16716., 17824., 15016.,
      16042., 16124., 17220., 17232., 18398., 18340., 19576., 13911., 14858.,
      14890., 15900., 15869., 16942., 16848., 17984., 13008., 13848., 13872.,
      14768., 14736., 15688., 15600., 16608., 11659., 12396., 12390., 13176.,
      13121., 13956., 13852., 14736., 12232., 13056., 13136., 14016., 14040.,
      14976., 14944., 15936., 13952., 14912., 14976., 16000., 16000., 17088.,
      17024., 18176., 15912., 16976., 17072., 18208., 18232., 19440., 19392.,
      20672., 18720., 19920., 20000., 21280., 21280., 22640., 22560., 24000.,
      18232., 19328., 19376., 20544., 20520., 21760., 21664., 22976., 18048.,
      19008., 19072., 20096., 20096., 21184., 21120., 22272., 14552., 15408.,
      15440., 16352., 16328., 17296., 17216., 18240., 13767., 14682., 14762.,
      15740., 15757., 16798., 16752., 17856., 16752., 17832., 17872., 19024.,
      18992., 20216., 20112., 21408., 19899., 21084., 21158., 22424., 22417.,
      23764., 23676., 25104., 23968., 25294., 25348., 26764., 26728., 28234.,
      28108., 29704., 19773., 20994., 20998., 22300., 22223., 23606., 23448.,
      24912., 15888., 16968., 16976., 18128., 18064., 19288., 19152., 20448.,
      13313., 14280., 14250., 15280., 15187., 16280., 16124., 17280., 14280.,
      15104., 15184., 16064., 16088., 17024., 16992., 17984., 18048., 19008.,
      19072., 20096., 20096., 21184., 21120., 22272., 17960., 19024., 19120.,
      20256., 20280., 21488., 21440., 22720., 18720., 19920., 20000., 21280.,
      21280., 22640., 22560., 24000., 16184., 17280., 17328., 18496., 18472.,
      19712., 19616., 20928., 13952., 14912., 14976., 16000., 16000., 17088.,
      17024., 18176., 12504., 13360., 13392., 14304., 14280., 15248., 15168.,
      16192., 10989., 11698., 11718., 12476., 12447., 13254., 13176., 14032.,
      12144., 12984., 12976., 13872., 13808., 14760., 14640., 15648., 12913.,
      13848., 13866., 14864., 14819., 15880., 15772., 16896., 14424., 15482.,
      15484., 16612., 16544., 17742., 17604., 18872., 13423., 14386., 14378.,
      15404., 15333., 16422., 16288., 17440., 12752., 13592., 13616., 14512.,
      14480., 15432., 15344., 16352., 12371., 13124., 13126., 13928., 13881.,
      14732., 14636., 15536., 8822.,  9424.,  9484.,  10128., 10146., 10832.,
      10808., 11536., 10112., 10832., 10848., 11616., 11584., 12400., 12320.,
      13184., 11382., 12180., 12212., 13064., 13042., 13948., 13872., 14832.,
      13256., 14156., 14168., 15128., 15080., 16100., 15992., 17072., 12962.,
      13784., 13780., 14656., 14598., 15528., 15416., 16400., 12928., 13648.,
      13664., 14432., 14400., 15216., 15136., 16000., 10546., 11204., 11180.,
      11880., 11814., 12556., 12448., 13232.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9448.,  10012., 9592.,  10168., 9736.,  10324., 9880.,  10480., 10024.,
      10636., 10168., 10792., 10312., 10948., 10456., 11104., 10600., 11260.,
      10744., 11416., 10888., 11572., 11032., 11728., 11176., 11884., 11320.,
      12040., 11464., 12196., 11608., 12352., 11752., 12508., 11896., 12664.,
      12040., 12820., 12184., 12976., 12328., 13132., 12472., 13288., 12616.,
      13444., 12760., 13600., 12904., 13756., 13048., 13912., 13192., 14068.,
      13336., 14224., 9576.,  10364., 9720.,  10520., 9864.,  10676., 10008.,
      10832., 7720.,  8428.,  7864.,  8584.,  8008.,  8740.,  8152.,  8896.,
      6120.,  6748.,  6264.,  6904.,  6408.,  7060.,  6552.,  7216.,  6696.,
      7372.,  6840.,  7528.,  6984.,  7684.,  7128.,  7840.,  7272.,  7996.,
      7416.,  8152.,  7560.,  8308.,  7704.,  8464.,  7848.,  8620.,  7992.,
      8776.,  8136.,  8932.,  8280.,  9088.,  8424.,  9244.,  8568.,  9400.,
      8712.,  9556.,  8856.,  9712.,  7144.,  7900.,  7288.,  8056.,  7432.,
      8212.,  7576.,  8368.,  6312.,  6988.,  6456.,  7144.,  6600.,  7300.,
      6744.,  7456.,  5736.,  6332.,  5880.,  6488.,  6024.,  6644.,  6168.,
      6800.,  6312.,  6956.,  6456.,  7112.,  6600.,  7268.,  6744.,  7424.,
      6888.,  7580.,  7032.,  7736.,  7176.,  7892.,  7320.,  8048.,  7464.,
      8204.,  7608.,  8360.,  7752.,  8516.,  7896.,  8672.,  8040.,  8828.,
      8184.,  8984.,  8328.,  9140.,  8472.,  9296.,  8808.,  9532.,  8952.,
      9688.,  9096.,  9844.,  9240.,  10000., 9000.,  9644.,  9144.,  9800.,
      9288.,  9956.,  9432.,  10112., 9448.,  10012., 9592.,  10168., 9736.,
      10324., 9880.,  10480., 10024., 10636., 10168., 10792., 10312., 10948.,
      10456., 11104., 10600., 11260., 10744., 11416., 10888., 11572., 11032.,
      11728., 11176., 11884., 11320., 12040., 11464., 12196., 11608., 12352.,
      11752., 12508., 11896., 12664., 12040., 12820., 12184., 12976., 14056.,
      15004., 14200., 15160., 14344., 15316., 14488., 15472., 11688., 12556.,
      11832., 12712., 11976., 12868., 12120., 13024., 9576.,  10364., 9720.,
      10520., 9864.,  10676., 10008., 10832., 7720.,  8428.,  7864.,  8584.,
      8008.,  8740.,  8152.,  8896.,  6120.,  6748.,  6264.,  6904.,  6408.,
      7060.,  6552.,  7216.,  6696.,  7372.,  6840.,  7528.,  6984.,  7684.,
      7128.,  7840.,  7272.,  7996.,  7416.,  8152.,  7560.,  8308.,  7704.,
      8464.,  9576.,  10492., 9720.,  10648., 9864.,  10804., 10008., 10960.,
      8232.,  9068.,  8376.,  9224.,  8520.,  9380.,  8664.,  9536.,  7144.,
      7900.,  7288.,  8056.,  7432.,  8212.,  7576.,  8368.,  6312.,  6988.,
      6456.,  7144.,  6600.,  7300.,  6744.,  7456.,  5736.,  6332.,  5880.,
      6488.,  6024.,  6644.,  6168.,  6800.,  6312.,  6956.,  6456.,  7112.,
      6600.,  7268.,  6744.,  7424.,  6888.,  7580.,  7032.,  7736.,  7176.,
      7892.,  7320.,  8048.,  9192.,  10076., 9336.,  10232., 9480.,  10388.,
      9624.,  10544., 8872.,  9676.,  9016.,  9832.,  9160.,  9988.,  9304.,
      10144., 8808.,  9532.,  8952.,  9688.,  9096.,  9844.,  9240.,  10000.,
      9000.,  9644.,  9144.,  9800.,  9288.,  9956.,  9432.,  10112., 9448.,
      10012., 9592.,  10168., 9736.,  10324., 9880.,  10480., 10024., 10636.,
      10168., 10792., 10312., 10948., 10456., 11104., 10600., 11260., 10744.,
      11416., 10888., 11572., 11032., 11728.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1986., 2268., 2550., 2832., 2292., 2616., 2940., 3264., 2598., 2964.,
      3330., 3696., 2904., 3312., 3720., 4128., 3312., 3648., 3984., 4320.,
      3648., 4032., 4416., 4800., 3984., 4416., 4848., 5280., 4320., 4800.,
      5280., 5760., 2334., 2700., 3066., 3432., 2724., 3144., 3564., 3984.,
      3114., 3588., 4062., 4536., 3504., 4032., 4560., 5088., 2220., 2640.,
      3060., 3480., 2640., 3120., 3600., 4080., 3060., 3600., 4140., 4680.,
      3480., 4080., 4680., 5280., 2334., 2724., 3114., 3504., 2700., 3144.,
      3588., 4032., 3066., 3564., 4062., 4560., 3432., 3984., 4536., 5088.,
      3312., 3648., 3984., 4320., 3648., 4032., 4416., 4800., 3984., 4416.,
      4848., 5280., 4320., 4800., 5280., 5760., 1986., 2292., 2598., 2904.,
      2268., 2616., 2964., 3312., 2550., 2940., 3330., 3720., 2832., 3264.,
      3696., 4128., 2037., 2362., 2687., 3012., 2390., 2764., 3138., 3512.,
      2743., 3166., 3589., 4012., 3096., 3568., 4040., 4512., 2072., 2464.,
      2856., 3248., 2464., 2912., 3360., 3808., 2856., 3360., 3864., 4368.,
      3248., 3808., 4368., 4928., 2891., 3314., 3737., 4160., 3342., 3828.,
      4314., 4800., 3793., 4342., 4891., 5440., 4244., 4856., 5468., 6080.,
      4718., 5200., 5682., 6164., 5200., 5752., 6304., 6856., 5682., 6304.,
      6926., 7548., 6164., 6856., 7548., 8240., 2891., 3342., 3793., 4244.,
      3314., 3828., 4342., 4856., 3737., 4314., 4891., 5468., 4160., 4800.,
      5440., 6080., 2072., 2464., 2856., 3248., 2464., 2912., 3360., 3808.,
      2856., 3360., 3864., 4368., 3248., 3808., 4368., 4928., 2037., 2390.,
      2743., 3096., 2362., 2764., 3166., 3568., 2687., 3138., 3589., 4040.,
      3012., 3512., 4012., 4512., 2648., 3024., 3400., 3776., 3056., 3488.,
      3920., 4352., 3464., 3952., 4440., 4928., 3872., 4416., 4960., 5504.,
      4416., 4864., 5312., 5760., 4864., 5376., 5888., 6400., 5312., 5888.,
      6464., 7040., 5760., 6400., 7040., 7680., 3112., 3600., 4088., 4576.,
      3632., 4192., 4752., 5312., 4152., 4784., 5416., 6048., 4672., 5376.,
      6080., 6784., 2960., 3520., 4080., 4640., 3520., 4160., 4800., 5440.,
      4080., 4800., 5520., 6240., 4640., 5440., 6240., 7040., 3112., 3632.,
      4152., 4672., 3600., 4192., 4784., 5376., 4088., 4752., 5416., 6080.,
      4576., 5312., 6048., 6784., 4416., 4864., 5312., 5760., 4864., 5376.,
      5888., 6400., 5312., 5888., 6464., 7040., 5760., 6400., 7040., 7680.,
      2648., 3056., 3464., 3872., 3024., 3488., 3952., 4416., 3400., 3920.,
      4440., 4960., 3776., 4352., 4928., 5504., 2635., 3054., 3473., 3892.,
      3090., 3572., 4054., 4536., 3545., 4090., 4635., 5180., 4000., 4608.,
      5216., 5824., 2664., 3168., 3672., 4176., 3168., 3744., 4320., 4896.,
      3672., 4320., 4968., 5616., 4176., 4896., 5616., 6336., 3733., 4278.,
      4823., 5368., 4314., 4940., 5566., 6192., 4895., 5602., 6309., 7016.,
      5476., 6264., 7052., 7840., 6098., 6720., 7342., 7964., 6720., 7432.,
      8144., 8856., 7342., 8144., 8946., 9748., 7964., 8856., 9748., 10640.,
      3733., 4314., 4895., 5476., 4278., 4940., 5602., 6264., 4823., 5566.,
      6309., 7052., 5368., 6192., 7016., 7840., 2664., 3168., 3672., 4176.,
      3168., 3744., 4320., 4896., 3672., 4320., 4968., 5616., 4176., 4896.,
      5616., 6336., 2635., 3090., 3545., 4000., 3054., 3572., 4090., 4608.,
      3473., 4054., 4635., 5216., 3892., 4536., 5180., 5824., 2648., 3024.,
      3400., 3776., 3056., 3488., 3920., 4352., 3464., 3952., 4440., 4928.,
      3872., 4416., 4960., 5504., 4416., 4864., 5312., 5760., 4864., 5376.,
      5888., 6400., 5312., 5888., 6464., 7040., 5760., 6400., 7040., 7680.,
      3112., 3600., 4088., 4576., 3632., 4192., 4752., 5312., 4152., 4784.,
      5416., 6048., 4672., 5376., 6080., 6784., 2960., 3520., 4080., 4640.,
      3520., 4160., 4800., 5440., 4080., 4800., 5520., 6240., 4640., 5440.,
      6240., 7040., 3112., 3632., 4152., 4672., 3600., 4192., 4784., 5376.,
      4088., 4752., 5416., 6080., 4576., 5312., 6048., 6784., 4416., 4864.,
      5312., 5760., 4864., 5376., 5888., 6400., 5312., 5888., 6464., 7040.,
      5760., 6400., 7040., 7680., 2648., 3056., 3464., 3872., 3024., 3488.,
      3952., 4416., 3400., 3920., 4440., 4960., 3776., 4352., 4928., 5504.,
      2037., 2362., 2687., 3012., 2390., 2764., 3138., 3512., 2743., 3166.,
      3589., 4012., 3096., 3568., 4040., 4512., 2072., 2464., 2856., 3248.,
      2464., 2912., 3360., 3808., 2856., 3360., 3864., 4368., 3248., 3808.,
      4368., 4928., 2891., 3314., 3737., 4160., 3342., 3828., 4314., 4800.,
      3793., 4342., 4891., 5440., 4244., 4856., 5468., 6080., 4718., 5200.,
      5682., 6164., 5200., 5752., 6304., 6856., 5682., 6304., 6926., 7548.,
      6164., 6856., 7548., 8240., 2891., 3342., 3793., 4244., 3314., 3828.,
      4342., 4856., 3737., 4314., 4891., 5468., 4160., 4800., 5440., 6080.,
      2072., 2464., 2856., 3248., 2464., 2912., 3360., 3808., 2856., 3360.,
      3864., 4368., 3248., 3808., 4368., 4928., 2037., 2390., 2743., 3096.,
      2362., 2764., 3166., 3568., 2687., 3138., 3589., 4040., 3012., 3512.,
      4012., 4512., 1986., 2268., 2550., 2832., 2292., 2616., 2940., 3264.,
      2598., 2964., 3330., 3696., 2904., 3312., 3720., 4128., 3312., 3648.,
      3984., 4320., 3648., 4032., 4416., 4800., 3984., 4416., 4848., 5280.,
      4320., 4800., 5280., 5760., 2334., 2700., 3066., 3432., 2724., 3144.,
      3564., 3984., 3114., 3588., 4062., 4536., 3504., 4032., 4560., 5088.,
      2220., 2640., 3060., 3480., 2640., 3120., 3600., 4080., 3060., 3600.,
      4140., 4680., 3480., 4080., 4680., 5280., 2334., 2724., 3114., 3504.,
      2700., 3144., 3588., 4032., 3066., 3564., 4062., 4560., 3432., 3984.,
      4536., 5088., 3312., 3648., 3984., 4320., 3648., 4032., 4416., 4800.,
      3984., 4416., 4848., 5280., 4320., 4800., 5280., 5760., 1986., 2292.,
      2598., 2904., 2268., 2616., 2964., 3312., 2550., 2940., 3330., 3720.,
      2832., 3264., 3696., 4128.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18332., 18896., 19460., 20024., 18608., 19184., 19760., 20336., 18884.,
      19472., 20060., 20648., 19160., 19760., 20360., 20960., 19436., 20048.,
      20660., 21272., 19712., 20336., 20960., 21584., 19988., 20624., 21260.,
      21896., 20264., 20912., 21560., 22208., 20540., 21200., 21860., 22520.,
      20816., 21488., 22160., 22832., 21092., 21776., 22460., 23144., 21368.,
      22064., 22760., 23456., 21644., 22352., 23060., 23768., 21920., 22640.,
      23360., 24080., 22196., 22928., 23660., 24392., 22472., 23216., 23960.,
      24704., 22748., 23504., 24260., 25016., 23024., 23792., 24560., 25328.,
      23300., 24080., 24860., 25640., 23576., 24368., 25160., 25952., 23852.,
      24656., 25460., 26264., 24128., 24944., 25760., 26576., 24404., 25232.,
      26060., 26888., 24680., 25520., 26360., 27200., 24956., 25808., 26660.,
      27512., 25232., 26096., 26960., 27824., 25508., 26384., 27260., 28136.,
      25784., 26672., 27560., 28448., 18364., 19152., 19940., 20728., 18640.,
      19440., 20240., 21040., 18916., 19728., 20540., 21352., 19192., 20016.,
      20840., 21664., 14732., 15440., 16148., 16856., 15008., 15728., 16448.,
      17168., 15284., 16016., 16748., 17480., 15560., 16304., 17048., 17792.,
      11612., 12240., 12868., 13496., 11888., 12528., 13168., 13808., 12164.,
      12816., 13468., 14120., 12440., 13104., 13768., 14432., 12716., 13392.,
      14068., 14744., 12992., 13680., 14368., 15056., 13268., 13968., 14668.,
      15368., 13544., 14256., 14968., 15680., 13820., 14544., 15268., 15992.,
      14096., 14832., 15568., 16304., 14372., 15120., 15868., 16616., 14648.,
      15408., 16168., 16928., 14924., 15696., 16468., 17240., 15200., 15984.,
      16768., 17552., 15476., 16272., 17068., 17864., 15752., 16560., 17368.,
      18176., 16028., 16848., 17668., 18488., 16304., 17136., 17968., 18800.,
      16580., 17424., 18268., 19112., 16856., 17712., 18568., 19424., 13532.,
      14288., 15044., 15800., 13808., 14576., 15344., 16112., 14084., 14864.,
      15644., 16424., 14360., 15152., 15944., 16736., 11948., 12624., 13300.,
      13976., 12224., 12912., 13600., 14288., 12500., 13200., 13900., 14600.,
      12776., 13488., 14200., 14912., 10876., 11472., 12068., 12664., 11152.,
      11760., 12368., 12976., 11428., 12048., 12668., 13288., 11704., 12336.,
      12968., 13600., 11980., 12624., 13268., 13912., 12256., 12912., 13568.,
      14224., 12532., 13200., 13868., 14536., 12808., 13488., 14168., 14848.,
      13084., 13776., 14468., 15160., 13360., 14064., 14768., 15472., 13636.,
      14352., 15068., 15784., 13912., 14640., 15368., 16096., 14188., 14928.,
      15668., 16408., 14464., 15216., 15968., 16720., 14740., 15504., 16268.,
      17032., 15016., 15792., 16568., 17344., 15292., 16080., 16868., 17656.,
      15568., 16368., 17168., 17968., 15844., 16656., 17468., 18280., 16120.,
      16944., 17768., 18592., 16892., 17616., 18340., 19064., 17168., 17904.,
      18640., 19376., 17444., 18192., 18940., 19688., 17720., 18480., 19240.,
      20000., 17356., 18000., 18644., 19288., 17632., 18288., 18944., 19600.,
      17908., 18576., 19244., 19912., 18184., 18864., 19544., 20224., 18332.,
      18896., 19460., 20024., 18608., 19184., 19760., 20336., 18884., 19472.,
      20060., 20648., 19160., 19760., 20360., 20960., 19436., 20048., 20660.,
      21272., 19712., 20336., 20960., 21584., 19988., 20624., 21260., 21896.,
      20264., 20912., 21560., 22208., 20540., 21200., 21860., 22520., 20816.,
      21488., 22160., 22832., 21092., 21776., 22460., 23144., 21368., 22064.,
      22760., 23456., 21644., 22352., 23060., 23768., 21920., 22640., 23360.,
      24080., 22196., 22928., 23660., 24392., 22472., 23216., 23960., 24704.,
      22748., 23504., 24260., 25016., 23024., 23792., 24560., 25328., 23300.,
      24080., 24860., 25640., 23576., 24368., 25160., 25952., 27164., 28112.,
      29060., 30008., 27440., 28400., 29360., 30320., 27716., 28688., 29660.,
      30632., 27992., 28976., 29960., 30944., 22508., 23376., 24244., 25112.,
      22784., 23664., 24544., 25424., 23060., 23952., 24844., 25736., 23336.,
      24240., 25144., 26048., 18364., 19152., 19940., 20728., 18640., 19440.,
      20240., 21040., 18916., 19728., 20540., 21352., 19192., 20016., 20840.,
      21664., 14732., 15440., 16148., 16856., 15008., 15728., 16448., 17168.,
      15284., 16016., 16748., 17480., 15560., 16304., 17048., 17792., 11612.,
      12240., 12868., 13496., 11888., 12528., 13168., 13808., 12164., 12816.,
      13468., 14120., 12440., 13104., 13768., 14432., 12716., 13392., 14068.,
      14744., 12992., 13680., 14368., 15056., 13268., 13968., 14668., 15368.,
      13544., 14256., 14968., 15680., 13820., 14544., 15268., 15992., 14096.,
      14832., 15568., 16304., 14372., 15120., 15868., 16616., 14648., 15408.,
      16168., 16928., 18236., 19152., 20068., 20984., 18512., 19440., 20368.,
      21296., 18788., 19728., 20668., 21608., 19064., 20016., 20968., 21920.,
      15628., 16464., 17300., 18136., 15904., 16752., 17600., 18448., 16180.,
      17040., 17900., 18760., 16456., 17328., 18200., 19072., 13532., 14288.,
      15044., 15800., 13808., 14576., 15344., 16112., 14084., 14864., 15644.,
      16424., 14360., 15152., 15944., 16736., 11948., 12624., 13300., 13976.,
      12224., 12912., 13600., 14288., 12500., 13200., 13900., 14600., 12776.,
      13488., 14200., 14912., 10876., 11472., 12068., 12664., 11152., 11760.,
      12368., 12976., 11428., 12048., 12668., 13288., 11704., 12336., 12968.,
      13600., 11980., 12624., 13268., 13912., 12256., 12912., 13568., 14224.,
      12532., 13200., 13868., 14536., 12808., 13488., 14168., 14848., 13084.,
      13776., 14468., 15160., 13360., 14064., 14768., 15472., 13636., 14352.,
      15068., 15784., 13912., 14640., 15368., 16096., 17500., 18384., 19268.,
      20152., 17776., 18672., 19568., 20464., 18052., 18960., 19868., 20776.,
      18328., 19248., 20168., 21088., 16940., 17744., 18548., 19352., 17216.,
      18032., 18848., 19664., 17492., 18320., 19148., 19976., 17768., 18608.,
      19448., 20288., 16892., 17616., 18340., 19064., 17168., 17904., 18640.,
      19376., 17444., 18192., 18940., 19688., 17720., 18480., 19240., 20000.,
      17356., 18000., 18644., 19288., 17632., 18288., 18944., 19600., 17908.,
      18576., 19244., 19912., 18184., 18864., 19544., 20224., 18332., 18896.,
      19460., 20024., 18608., 19184., 19760., 20336., 18884., 19472., 20060.,
      20648., 19160., 19760., 20360., 20960., 19436., 20048., 20660., 21272.,
      19712., 20336., 20960., 21584., 19988., 20624., 21260., 21896., 20264.,
      20912., 21560., 22208., 20540., 21200., 21860., 22520., 20816., 21488.,
      22160., 22832., 21092., 21776., 22460., 23144., 21368., 22064., 22760.,
      23456.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,  8827.,  10416., 12020., 10472., 8923.,  7380.,  8960.,  10856.,
      12768., 14688., 12768., 10856., 8960.,  10460., 12693., 14952., 17228.,
      15008., 12789., 10580., 14960., 18082., 21224., 24376., 21224., 18082.,
      14960., 10580., 12789., 15008., 17228., 14952., 12693., 10460., 8960.,
      10856., 12768., 14688., 12768., 10856., 8960.,  7380.,  8923.,  10472.,
      12020., 10416., 8827.,  7260.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      648.,  684.,  720.,  756.,  792.,  828.,  864.,  936.,  972.,  1008.,
      1044., 1080., 1116., 1152., 1224., 1260., 1296., 1332., 1368., 1404.,
      1440., 1512., 1548., 1584., 1620., 1656., 1692., 1728., 1800., 1836.,
      1872., 1908., 1944., 1980., 2016., 2088., 2124., 2160., 2196., 2232.,
      2268., 2304., 2376., 2412., 2448., 2484., 2520., 2556., 2592.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8775.,  9240.,  10451., 11030., 12068., 12768., 13612., 14440., 11459.,
      12208., 9407.,  10070., 7470.,  8040.,  12840., 13440., 15208., 15952.,
      17472., 18368., 19616., 20672., 16520., 17472., 13576., 14416., 10800.,
      11520., 10705., 11320., 12717., 13482., 14644., 15568., 16468., 17560.,
      13797., 14784., 11265., 12138., 8890.,  9640.,  14530., 15200., 17282.,
      18116., 19936., 20944., 22472., 23664., 18970., 20048., 15626., 16580.,
      12460., 13280., 10905., 11560., 12861., 13674., 14700., 15680., 16404.,
      17560., 13629., 14672., 11025., 11946., 8610.,  9400.,  12840., 13440.,
      15208., 15952., 17472., 18368., 19616., 20672., 16520., 17472., 13576.,
      14416., 10800., 11520., 7695.,  8200.,  9059.,  9686.,  10332., 11088.,
      11500., 12392., 9499.,  10304., 7631.,  8342.,  5910.,  6520.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1188., 1296., 1252., 1368., 1316., 1440., 1380., 1512., 1444., 1584.,
      1508., 1656., 1572., 1728., 1700., 1872., 1764., 1944., 1828., 2016.,
      1892., 2088., 1956., 2160., 2020., 2232., 2084., 2304., 2212., 2448.,
      2276., 2520., 2340., 2592., 2404., 2664., 2468., 2736., 2532., 2808.,
      2596., 2880., 2724., 3024., 2788., 3096., 2852., 3168., 2916., 3240.,
      2980., 3312., 3044., 3384., 3108., 3456., 3236., 3600., 3300., 3672.,
      3364., 3744., 3428., 3816., 3492., 3888., 3556., 3960., 3620., 4032.,
      3748., 4176., 3812., 4248., 3876., 4320., 3940., 4392., 4004., 4464.,
      4068., 4536., 4132., 4608., 4260., 4752., 4324., 4824., 4388., 4896.,
      4452., 4968., 4516., 5040., 4580., 5112., 4644., 5184.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10045., 10510., 10975., 11440., 11491., 12070., 12649., 13228., 12684.,
      13384., 14084., 14784., 13596., 14424., 15252., 16080., 10521., 11270.,
      12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,  5980.,  6550.,
      7120.,  12920., 13520., 14120., 14720., 14696., 15440., 16184., 16928.,
      16128., 17024., 17920., 18816., 17184., 18240., 19296., 20352., 13272.,
      14224., 15176., 16128., 9800.,  10640., 11480., 12320., 6800.,  7520.,
      8240.,  8960.,  13275., 13890., 14505., 15120., 15165., 15930., 16695.,
      17460., 16716., 17640., 18564., 19488., 17892., 18984., 20076., 21168.,
      13839., 14826., 15813., 16800., 10233., 11106., 11979., 12852., 7110.,
      7860.,  8610.,  9360.,  14470., 15140., 15810., 16480., 16546., 17380.,
      18214., 19048., 18256., 19264., 20272., 21280., 19560., 20752., 21944.,
      23136., 15134., 16212., 17290., 18368., 11194., 12148., 13102., 14056.,
      7780.,  8600.,  9420.,  10240., 14115., 14770., 15425., 16080., 16077.,
      16890., 17703., 18516., 17668., 18648., 19628., 20608., 18852., 20008.,
      21164., 22320., 14567., 15610., 16653., 17696., 10761., 11682., 12603.,
      13524., 7470.,  8260.,  9050.,  9840.,  12920., 13520., 14120., 14720.,
      14696., 15440., 16184., 16928., 16128., 17024., 17920., 18816., 17184.,
      18240., 19296., 20352., 13272., 14224., 15176., 16128., 9800.,  10640.,
      11480., 12320., 6800.,  7520.,  8240.,  8960.,  10885., 11390., 11895.,
      12400., 12403., 13030., 13657., 14284., 13636., 14392., 15148., 15904.,
      14556., 15448., 16340., 17232., 11249., 12054., 12859., 13664., 8311.,
      9022.,  9733.,  10444., 5770.,  6380.,  6990.,  7600.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2268., 2376.,  2484., 2592., 2388., 2504., 2620., 2736.,  2508., 2632.,
      2756., 2880.,  2628., 2760., 2892., 3024., 2748., 2888.,  3028., 3168.,
      2868., 3016.,  3164., 3312., 2988., 3144., 3300., 3456.,  3228., 3400.,
      3572., 3744.,  3348., 3528., 3708., 3888., 3468., 3656.,  3844., 4032.,
      3588., 3784.,  3980., 4176., 3708., 3912., 4116., 4320.,  3828., 4040.,
      4252., 4464.,  3948., 4168., 4388., 4608., 4188., 4424.,  4660., 4896.,
      4308., 4552.,  4796., 5040., 4428., 4680., 4932., 5184.,  4548., 4808.,
      5068., 5328.,  4668., 4936., 5204., 5472., 4788., 5064.,  5340., 5616.,
      4908., 5192.,  5476., 5760., 5148., 5448., 5748., 6048.,  5268., 5576.,
      5884., 6192.,  5388., 5704., 6020., 6336., 5508., 5832.,  6156., 6480.,
      5628., 5960.,  6292., 6624., 5748., 6088., 6428., 6768.,  5868., 6216.,
      6564., 6912.,  6108., 6472., 6836., 7200., 6228., 6600.,  6972., 7344.,
      6348., 6728.,  7108., 7488., 6468., 6856., 7244., 7632.,  6588., 6984.,
      7380., 7776.,  6708., 7112., 7516., 7920., 6828., 7240.,  7652., 8064.,
      7068., 7496.,  7924., 8352., 7188., 7624., 8060., 8496.,  7308., 7752.,
      8196., 8640.,  7428., 7880., 8332., 8784., 7548., 8008.,  8468., 8928.,
      7668., 8136.,  8604., 9072., 7788., 8264., 8740., 9216.,  8028., 8520.,
      9012., 9504.,  8148., 8648., 9148., 9648., 8268., 8776.,  9284., 9792.,
      8388., 8904.,  9420., 9936., 8508., 9032., 9556., 10080., 8628., 9160.,
      9692., 10224., 8748., 9288., 9828., 10368.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5910.,  6520.,  7631.,  8342.,  9499.,  10304., 11500., 12392., 10332.,
      11088., 9059.,  9686.,  7695.,  8200.,  10800., 11520., 13576., 14416.,
      16520., 17472., 19616., 20672., 17472., 18368., 15208., 15952., 12840.,
      13440., 8610.,  9400.,  11025., 11946., 13629., 14672., 16404., 17560.,
      14700., 15680., 12861., 13674., 10905., 11560., 12460., 13280., 15626.,
      16580., 18970., 20048., 22472., 23664., 19936., 20944., 17282., 18116.,
      14530., 15200., 8890.,  9640.,  11265., 12138., 13797., 14784., 16468.,
      17560., 14644., 15568., 12717., 13482., 10705., 11320., 10800., 11520.,
      13576., 14416., 16520., 17472., 19616., 20672., 17472., 18368., 15208.,
      15952., 12840., 13440., 7470.,  8040.,  9407.,  10070., 11459., 12208.,
      13612., 14440., 12068., 12768., 10451., 11030., 8775.,  9240.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1260., 1296., 1332., 1368., 1404., 1440., 1476., 1512., 1548., 1584.,
      1620., 1656., 1692., 1728., 1836., 1872., 1908., 1944., 1980., 2016.,
      2052., 2088., 2124., 2160., 2196., 2232., 2268., 2304., 2412., 2448.,
      2484., 2520., 2556., 2592., 2628., 2664., 2700., 2736., 2772., 2808.,
      2844., 2880., 2988., 3024., 3060., 3096., 3132., 3168., 3204., 3240.,
      3276., 3312., 3348., 3384., 3420., 3456., 3564., 3600., 3636., 3672.,
      3708., 3744., 3780., 3816., 3852., 3888., 3924., 3960., 3996., 4032.,
      4140., 4176., 4212., 4248., 4284., 4320., 4356., 4392., 4428., 4464.,
      4500., 4536., 4572., 4608., 4716., 4752., 4788., 4824., 4860., 4896.,
      4932., 4968., 5004., 5040., 5076., 5112., 5148., 5184.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6445.,  6860.,  7150.,  7600.,  8194.,  8734.,  8998.,  9580.,  10031.,
      10710., 10920., 11648., 11928., 12760., 12888., 13776., 10255., 11032.,
      11046., 11872., 8578.,  9286.,  9214.,  9964.,  6925.,  7550.,  7420.,
      8080.,  12760., 13280., 13520., 14080., 15728., 16400., 16592., 17312.,
      18760., 19600., 19712., 20608., 21824., 22848., 22848., 23936., 18760.,
      19712., 19600., 20608., 15728., 16592., 16400., 17312., 12760., 13520.,
      13280., 14080., 8355.,  8900.,  9250.,  9840.,  10590., 11298., 11610.,
      12372., 12929., 13818., 14056., 15008., 15336., 16424., 16552., 17712.,
      13153., 14168., 14154., 15232., 10974., 11898., 11778., 12756., 8835.,
      9650.,  9460.,  10320., 15950., 16600., 16900., 17600., 19660., 20500.,
      20740., 21640., 23450., 24500., 24640., 25760., 27280., 28560., 28560.,
      29920., 23450., 24640., 24500., 25760., 19660., 20740., 20500., 21640.,
      15950., 16900., 16600., 17600., 8835.,  9460.,  9650.,  10320., 10974.,
      11778., 11898., 12756., 13153., 14154., 14168., 15232., 15336., 16552.,
      16424., 17712., 12929., 14056., 13818., 15008., 10590., 11610., 11298.,
      12372., 8355.,  9250.,  8900.,  9840.,  12760., 13280., 13520., 14080.,
      15728., 16400., 16592., 17312., 18760., 19600., 19712., 20608., 21824.,
      22848., 22848., 23936., 18760., 19712., 19600., 20608., 15728., 16592.,
      16400., 17312., 12760., 13520., 13280., 14080., 6925.,  7420.,  7550.,
      8080.,  8578.,  9214.,  9286.,  9964.,  10255., 11046., 11032., 11872.,
      11928., 12888., 12760., 13776., 10031., 10920., 10710., 11648., 8194.,
      8998.,  8734.,  9580.,  6445.,  7150.,  6860.,  7600.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2312., 2520.,  2376., 2592.,  2440., 2664.,  2504., 2736.,  2568., 2808.,
      2632., 2880.,  2696., 2952.,  2760., 3024.,  2824., 3096.,  2888., 3168.,
      2952., 3240.,  3016., 3312.,  3080., 3384.,  3144., 3456.,  3336., 3672.,
      3400., 3744.,  3464., 3816.,  3528., 3888.,  3592., 3960.,  3656., 4032.,
      3720., 4104.,  3784., 4176.,  3848., 4248.,  3912., 4320.,  3976., 4392.,
      4040., 4464.,  4104., 4536.,  4168., 4608.,  4360., 4824.,  4424., 4896.,
      4488., 4968.,  4552., 5040.,  4616., 5112.,  4680., 5184.,  4744., 5256.,
      4808., 5328.,  4872., 5400.,  4936., 5472.,  5000., 5544.,  5064., 5616.,
      5128., 5688.,  5192., 5760.,  5384., 5976.,  5448., 6048.,  5512., 6120.,
      5576., 6192.,  5640., 6264.,  5704., 6336.,  5768., 6408.,  5832., 6480.,
      5896., 6552.,  5960., 6624.,  6024., 6696.,  6088., 6768.,  6152., 6840.,
      6216., 6912.,  6408., 7128.,  6472., 7200.,  6536., 7272.,  6600., 7344.,
      6664., 7416.,  6728., 7488.,  6792., 7560.,  6856., 7632.,  6920., 7704.,
      6984., 7776.,  7048., 7848.,  7112., 7920.,  7176., 7992.,  7240., 8064.,
      7432., 8280.,  7496., 8352.,  7560., 8424.,  7624., 8496.,  7688., 8568.,
      7752., 8640.,  7816., 8712.,  7880., 8784.,  7944., 8856.,  8008., 8928.,
      8072., 9000.,  8136., 9072.,  8200., 9144.,  8264., 9216.,  8456., 9432.,
      8520., 9504.,  8584., 9576.,  8648., 9648.,  8712., 9720.,  8776., 9792.,
      8840., 9864.,  8904., 9936.,  8968., 10008., 9032., 10080., 9096., 10152.,
      9160., 10224., 9224., 10296., 9288., 10368.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9275.,  9690.,  10105., 10520., 10010., 10460., 10910., 11360., 11240.,
      11780., 12320., 12860., 12038., 12620., 13202., 13784., 13111., 13790.,
      14469., 15148., 13944., 14672., 15400., 16128., 14832., 15664., 16496.,
      17328., 15672., 16560., 17448., 18336., 11669., 12446., 13223., 14000.,
      12306., 13132., 13958., 14784., 8768.,  9476.,  10184., 10892., 9230.,
      9980.,  10730., 11480., 6185.,  6810.,  7435.,  8060.,  6500.,  7160.,
      7820.,  8480.,  11560., 12080., 12600., 13120., 12400., 12960., 13520.,
      14080., 13888., 14560., 15232., 15904., 14800., 15520., 16240., 16960.,
      16072., 16912., 17752., 18592., 17024., 17920., 18816., 19712., 18048.,
      19072., 20096., 21120., 19008., 20096., 21184., 22272., 14168., 15120.,
      16072., 17024., 14896., 15904., 16912., 17920., 10624., 11488., 12352.,
      13216., 11152., 12064., 12976., 13888., 7480.,  8240.,  9000.,  9760.,
      7840.,  8640.,  9440.,  10240., 12165., 12710., 13255., 13800., 13110.,
      13700., 14290., 14880., 14712., 15420., 16128., 16836., 15738., 16500.,
      17262., 18024., 17129., 18018., 18907., 19796., 18200., 19152., 20104.,
      21056., 19344., 20432., 21520., 22608., 20424., 21584., 22744., 23904.,
      15211., 16226., 17241., 18256., 16030., 17108., 18186., 19264., 11424.,
      12348., 13272., 14196., 12018., 12996., 13974., 14952., 8055.,  8870.,
      9685.,  10500., 8460.,  9320.,  10180., 11040., 14450., 15100., 15750.,
      16400., 15500., 16200., 16900., 17600., 17360., 18200., 19040., 19880.,
      18500., 19400., 20300., 21200., 20090., 21140., 22190., 23240., 21280.,
      22400., 23520., 24640., 22560., 23840., 25120., 26400., 23760., 25120.,
      26480., 27840., 17710., 18900., 20090., 21280., 18620., 19880., 21140.,
      22400., 13280., 14360., 15440., 16520., 13940., 15080., 16220., 17360.,
      9350.,  10300., 11250., 12200., 9800.,  10800., 11800., 12800., 13845.,
      14470., 15095., 15720., 14790., 15460., 16130., 16800., 16536., 17340.,
      18144., 18948., 17562., 18420., 19278., 20136., 19033., 20034., 21035.,
      22036., 20104., 21168., 22232., 23296., 21264., 22480., 23696., 24912.,
      22344., 23632., 24920., 26208., 16667., 17794., 18921., 20048., 17486.,
      18676., 19866., 21056., 12480., 13500., 14520., 15540., 13074., 14148.,
      15222., 16296., 8775.,  9670.,  10565., 11460., 9180.,  10120., 11060.,
      12000., 11560., 12080., 12600., 13120., 12400., 12960., 13520., 14080.,
      13888., 14560., 15232., 15904., 14800., 15520., 16240., 16960., 16072.,
      16912., 17752., 18592., 17024., 17920., 18816., 19712., 18048., 19072.,
      20096., 21120., 19008., 20096., 21184., 22272., 14168., 15120., 16072.,
      17024., 14896., 15904., 16912., 17920., 10624., 11488., 12352., 13216.,
      11152., 12064., 12976., 13888., 7480.,  8240.,  9000.,  9760.,  7840.,
      8640.,  9440.,  10240., 10955., 11450., 11945., 12440., 11690., 12220.,
      12750., 13280., 13064., 13700., 14336., 14972., 13862., 14540., 15218.,
      15896., 15015., 15806., 16597., 17388., 15848., 16688., 17528., 18368.,
      16752., 17712., 18672., 19632., 17592., 18608., 19624., 20640., 13125.,
      14014., 14903., 15792., 13762., 14700., 15638., 16576., 9824.,  10628.,
      11432., 12236., 10286., 11132., 11978., 12824., 6905.,  7610.,  8315.,
      9020.,  7220.,  7960.,  8700.,  9440.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4416.,  4624.,  4832.,  5040.,  4536.,  4752.,  4968.,  5184.,  4656.,
      4880.,  5104.,  5328.,  4776.,  5008.,  5240.,  5472.,  4896.,  5136.,
      5376.,  5616.,  5016.,  5264.,  5512.,  5760.,  5136.,  5392.,  5648.,
      5904.,  5256.,  5520.,  5784.,  6048.,  5376.,  5648.,  5920.,  6192.,
      5496.,  5776.,  6056.,  6336.,  5616.,  5904.,  6192.,  6480.,  5736.,
      6032.,  6328.,  6624.,  5856.,  6160.,  6464.,  6768.,  5976.,  6288.,
      6600.,  6912.,  6336.,  6672.,  7008.,  7344.,  6456.,  6800.,  7144.,
      7488.,  6576.,  6928.,  7280.,  7632.,  6696.,  7056.,  7416.,  7776.,
      6816.,  7184.,  7552.,  7920.,  6936.,  7312.,  7688.,  8064.,  7056.,
      7440.,  7824.,  8208.,  7176.,  7568.,  7960.,  8352.,  7296.,  7696.,
      8096.,  8496.,  7416.,  7824.,  8232.,  8640.,  7536.,  7952.,  8368.,
      8784.,  7656.,  8080.,  8504.,  8928.,  7776.,  8208.,  8640.,  9072.,
      7896.,  8336.,  8776.,  9216.,  8256.,  8720.,  9184.,  9648.,  8376.,
      8848.,  9320.,  9792.,  8496.,  8976.,  9456.,  9936.,  8616.,  9104.,
      9592.,  10080., 8736.,  9232.,  9728.,  10224., 8856.,  9360.,  9864.,
      10368., 8976.,  9488.,  10000., 10512., 9096.,  9616.,  10136., 10656.,
      9216.,  9744.,  10272., 10800., 9336.,  9872.,  10408., 10944., 9456.,
      10000., 10544., 11088., 9576.,  10128., 10680., 11232., 9696.,  10256.,
      10816., 11376., 9816.,  10384., 10952., 11520., 10176., 10768., 11360.,
      11952., 10296., 10896., 11496., 12096., 10416., 11024., 11632., 12240.,
      10536., 11152., 11768., 12384., 10656., 11280., 11904., 12528., 10776.,
      11408., 12040., 12672., 10896., 11536., 12176., 12816., 11016., 11664.,
      12312., 12960., 11136., 11792., 12448., 13104., 11256., 11920., 12584.,
      13248., 11376., 12048., 12720., 13392., 11496., 12176., 12856., 13536.,
      11616., 12304., 12992., 13680., 11736., 12432., 13128., 13824., 12096.,
      12816., 13536., 14256., 12216., 12944., 13672., 14400., 12336., 13072.,
      13808., 14544., 12456., 13200., 13944., 14688., 12576., 13328., 14080.,
      14832., 12696., 13456., 14216., 14976., 12816., 13584., 14352., 15120.,
      12936., 13712., 14488., 15264., 13056., 13840., 14624., 15408., 13176.,
      13968., 14760., 15552., 13296., 14096., 14896., 15696., 13416., 14224.,
      15032., 15840., 13536., 14352., 15168., 15984., 13656., 14480., 15304.,
      16128., 14016., 14864., 15712., 16560., 14136., 14992., 15848., 16704.,
      14256., 15120., 15984., 16848., 14376., 15248., 16120., 16992., 14496.,
      15376., 16256., 17136., 14616., 15504., 16392., 17280., 14736., 15632.,
      16528., 17424., 14856., 15760., 16664., 17568., 14976., 15888., 16800.,
      17712., 15096., 16016., 16936., 17856., 15216., 16144., 17072., 18000.,
      15336., 16272., 17208., 18144., 15456., 16400., 17344., 18288., 15576.,
      16528., 17480., 18432., 15936., 16912., 17888., 18864., 16056., 17040.,
      18024., 19008., 16176., 17168., 18160., 19152., 16296., 17296., 18296.,
      19296., 16416., 17424., 18432., 19440., 16536., 17552., 18568., 19584.,
      16656., 17680., 18704., 19728., 16776., 17808., 18840., 19872., 16896.,
      17936., 18976., 20016., 17016., 18064., 19112., 20160., 17136., 18192.,
      19248., 20304., 17256., 18320., 19384., 20448., 17376., 18448., 19520.,
      20592., 17496., 18576., 19656., 20736.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5770.,  6380.,  6990.,  7600.,  8311.,  9022.,  9733.,  10444., 11249.,
      12054., 12859., 13664., 14556., 15448., 16340., 17232., 13636., 14392.,
      15148., 15904., 12403., 13030., 13657., 14284., 10885., 11390., 11895.,
      12400., 6800.,  7520.,  8240.,  8960.,  9800.,  10640., 11480., 12320.,
      13272., 14224., 15176., 16128., 17184., 18240., 19296., 20352., 16128.,
      17024., 17920., 18816., 14696., 15440., 16184., 16928., 12920., 13520.,
      14120., 14720., 7470.,  8260.,  9050.,  9840.,  10761., 11682., 12603.,
      13524., 14567., 15610., 16653., 17696., 18852., 20008., 21164., 22320.,
      17668., 18648., 19628., 20608., 16077., 16890., 17703., 18516., 14115.,
      14770., 15425., 16080., 7780.,  8600.,  9420.,  10240., 11194., 12148.,
      13102., 14056., 15134., 16212., 17290., 18368., 19560., 20752., 21944.,
      23136., 18256., 19264., 20272., 21280., 16546., 17380., 18214., 19048.,
      14470., 15140., 15810., 16480., 7110.,  7860.,  8610.,  9360.,  10233.,
      11106., 11979., 12852., 13839., 14826., 15813., 16800., 17892., 18984.,
      20076., 21168., 16716., 17640., 18564., 19488., 15165., 15930., 16695.,
      17460., 13275., 13890., 14505., 15120., 6800.,  7520.,  8240.,  8960.,
      9800.,  10640., 11480., 12320., 13272., 14224., 15176., 16128., 17184.,
      18240., 19296., 20352., 16128., 17024., 17920., 18816., 14696., 15440.,
      16184., 16928., 12920., 13520., 14120., 14720., 5410.,  5980.,  6550.,
      7120.,  7783.,  8446.,  9109.,  9772.,  10521., 11270., 12019., 12768.,
      13596., 14424., 15252., 16080., 12684., 13384., 14084., 14784., 11491.,
      12070., 12649., 13228., 10045., 10510., 10975., 11440.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2484.,  2520.,  2556.,  2592.,  2628.,  2664.,  2700.,  2736.,  2772.,
      2808.,  2844.,  2880.,  2916.,  2952.,  2988.,  3024.,  3060.,  3096.,
      3132.,  3168.,  3204.,  3240.,  3276.,  3312.,  3348.,  3384.,  3420.,
      3456.,  3636.,  3672.,  3708.,  3744.,  3780.,  3816.,  3852.,  3888.,
      3924.,  3960.,  3996.,  4032.,  4068.,  4104.,  4140.,  4176.,  4212.,
      4248.,  4284.,  4320.,  4356.,  4392.,  4428.,  4464.,  4500.,  4536.,
      4572.,  4608.,  4788.,  4824.,  4860.,  4896.,  4932.,  4968.,  5004.,
      5040.,  5076.,  5112.,  5148.,  5184.,  5220.,  5256.,  5292.,  5328.,
      5364.,  5400.,  5436.,  5472.,  5508.,  5544.,  5580.,  5616.,  5652.,
      5688.,  5724.,  5760.,  5940.,  5976.,  6012.,  6048.,  6084.,  6120.,
      6156.,  6192.,  6228.,  6264.,  6300.,  6336.,  6372.,  6408.,  6444.,
      6480.,  6516.,  6552.,  6588.,  6624.,  6660.,  6696.,  6732.,  6768.,
      6804.,  6840.,  6876.,  6912.,  7092.,  7128.,  7164.,  7200.,  7236.,
      7272.,  7308.,  7344.,  7380.,  7416.,  7452.,  7488.,  7524.,  7560.,
      7596.,  7632.,  7668.,  7704.,  7740.,  7776.,  7812.,  7848.,  7884.,
      7920.,  7956.,  7992.,  8028.,  8064.,  8244.,  8280.,  8316.,  8352.,
      8388.,  8424.,  8460.,  8496.,  8532.,  8568.,  8604.,  8640.,  8676.,
      8712.,  8748.,  8784.,  8820.,  8856.,  8892.,  8928.,  8964.,  9000.,
      9036.,  9072.,  9108.,  9144.,  9180.,  9216.,  9396.,  9432.,  9468.,
      9504.,  9540.,  9576.,  9612.,  9648.,  9684.,  9720.,  9756.,  9792.,
      9828.,  9864.,  9900.,  9936.,  9972.,  10008., 10044., 10080., 10116.,
      10152., 10188., 10224., 10260., 10296., 10332., 10368.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6905.,  7220.,  7610.,  7960.,  8315.,  8700.,  9020.,  9440.,  9824.,
      10286., 10628., 11132., 11432., 11978., 12236., 12824., 13125., 13762.,
      14014., 14700., 14903., 15638., 15792., 16576., 16752., 17592., 17712.,
      18608., 18672., 19624., 19632., 20640., 15015., 15848., 15806., 16688.,
      16597., 17528., 17388., 18368., 13064., 13862., 13700., 14540., 14336.,
      15218., 14972., 15896., 10955., 11690., 11450., 12220., 11945., 12750.,
      12440., 13280., 7480.,  7840.,  8240.,  8640.,  9000.,  9440.,  9760.,
      10240., 10624., 11152., 11488., 12064., 12352., 12976., 13216., 13888.,
      14168., 14896., 15120., 15904., 16072., 16912., 17024., 17920., 18048.,
      19008., 19072., 20096., 20096., 21184., 21120., 22272., 16072., 17024.,
      16912., 17920., 17752., 18816., 18592., 19712., 13888., 14800., 14560.,
      15520., 15232., 16240., 15904., 16960., 11560., 12400., 12080., 12960.,
      12600., 13520., 13120., 14080., 8775.,  9180.,  9670.,  10120., 10565.,
      11060., 11460., 12000., 12480., 13074., 13500., 14148., 14520., 15222.,
      15540., 16296., 16667., 17486., 17794., 18676., 18921., 19866., 20048.,
      21056., 21264., 22344., 22480., 23632., 23696., 24920., 24912., 26208.,
      19033., 20104., 20034., 21168., 21035., 22232., 22036., 23296., 16536.,
      17562., 17340., 18420., 18144., 19278., 18948., 20136., 13845., 14790.,
      14470., 15460., 15095., 16130., 15720., 16800., 9350.,  9800.,  10300.,
      10800., 11250., 11800., 12200., 12800., 13280., 13940., 14360., 15080.,
      15440., 16220., 16520., 17360., 17710., 18620., 18900., 19880., 20090.,
      21140., 21280., 22400., 22560., 23760., 23840., 25120., 25120., 26480.,
      26400., 27840., 20090., 21280., 21140., 22400., 22190., 23520., 23240.,
      24640., 17360., 18500., 18200., 19400., 19040., 20300., 19880., 21200.,
      14450., 15500., 15100., 16200., 15750., 16900., 16400., 17600., 8055.,
      8460.,  8870.,  9320.,  9685.,  10180., 10500., 11040., 11424., 12018.,
      12348., 12996., 13272., 13974., 14196., 14952., 15211., 16030., 16226.,
      17108., 17241., 18186., 18256., 19264., 19344., 20424., 20432., 21584.,
      21520., 22744., 22608., 23904., 17129., 18200., 18018., 19152., 18907.,
      20104., 19796., 21056., 14712., 15738., 15420., 16500., 16128., 17262.,
      16836., 18024., 12165., 13110., 12710., 13700., 13255., 14290., 13800.,
      14880., 7480.,  7840.,  8240.,  8640.,  9000.,  9440.,  9760.,  10240.,
      10624., 11152., 11488., 12064., 12352., 12976., 13216., 13888., 14168.,
      14896., 15120., 15904., 16072., 16912., 17024., 17920., 18048., 19008.,
      19072., 20096., 20096., 21184., 21120., 22272., 16072., 17024., 16912.,
      17920., 17752., 18816., 18592., 19712., 13888., 14800., 14560., 15520.,
      15232., 16240., 15904., 16960., 11560., 12400., 12080., 12960., 12600.,
      13520., 13120., 14080., 6185.,  6500.,  6810.,  7160.,  7435.,  7820.,
      8060.,  8480.,  8768.,  9230.,  9476.,  9980.,  10184., 10730., 10892.,
      11480., 11669., 12306., 12446., 13132., 13223., 13958., 14000., 14784.,
      14832., 15672., 15664., 16560., 16496., 17448., 17328., 18336., 13111.,
      13944., 13790., 14672., 14469., 15400., 15148., 16128., 11240., 12038.,
      11780., 12620., 12320., 13202., 12860., 13784., 9275.,  10010., 9690.,
      10460., 10105., 10910., 10520., 11360.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4560.,  4968.,  4624.,  5040.,  4688.,  5112.,  4752.,  5184.,  4816.,
      5256.,  4880.,  5328.,  4944.,  5400.,  5008.,  5472.,  5072.,  5544.,
      5136.,  5616.,  5200.,  5688.,  5264.,  5760.,  5328.,  5832.,  5392.,
      5904.,  5456.,  5976.,  5520.,  6048.,  5584.,  6120.,  5648.,  6192.,
      5712.,  6264.,  5776.,  6336.,  5840.,  6408.,  5904.,  6480.,  5968.,
      6552.,  6032.,  6624.,  6096.,  6696.,  6160.,  6768.,  6224.,  6840.,
      6288.,  6912.,  6608.,  7272.,  6672.,  7344.,  6736.,  7416.,  6800.,
      7488.,  6864.,  7560.,  6928.,  7632.,  6992.,  7704.,  7056.,  7776.,
      7120.,  7848.,  7184.,  7920.,  7248.,  7992.,  7312.,  8064.,  7376.,
      8136.,  7440.,  8208.,  7504.,  8280.,  7568.,  8352.,  7632.,  8424.,
      7696.,  8496.,  7760.,  8568.,  7824.,  8640.,  7888.,  8712.,  7952.,
      8784.,  8016.,  8856.,  8080.,  8928.,  8144.,  9000.,  8208.,  9072.,
      8272.,  9144.,  8336.,  9216.,  8656.,  9576.,  8720.,  9648.,  8784.,
      9720.,  8848.,  9792.,  8912.,  9864.,  8976.,  9936.,  9040.,  10008.,
      9104.,  10080., 9168.,  10152., 9232.,  10224., 9296.,  10296., 9360.,
      10368., 9424.,  10440., 9488.,  10512., 9552.,  10584., 9616.,  10656.,
      9680.,  10728., 9744.,  10800., 9808.,  10872., 9872.,  10944., 9936.,
      11016., 10000., 11088., 10064., 11160., 10128., 11232., 10192., 11304.,
      10256., 11376., 10320., 11448., 10384., 11520., 10704., 11880., 10768.,
      11952., 10832., 12024., 10896., 12096., 10960., 12168., 11024., 12240.,
      11088., 12312., 11152., 12384., 11216., 12456., 11280., 12528., 11344.,
      12600., 11408., 12672., 11472., 12744., 11536., 12816., 11600., 12888.,
      11664., 12960., 11728., 13032., 11792., 13104., 11856., 13176., 11920.,
      13248., 11984., 13320., 12048., 13392., 12112., 13464., 12176., 13536.,
      12240., 13608., 12304., 13680., 12368., 13752., 12432., 13824., 12752.,
      14184., 12816., 14256., 12880., 14328., 12944., 14400., 13008., 14472.,
      13072., 14544., 13136., 14616., 13200., 14688., 13264., 14760., 13328.,
      14832., 13392., 14904., 13456., 14976., 13520., 15048., 13584., 15120.,
      13648., 15192., 13712., 15264., 13776., 15336., 13840., 15408., 13904.,
      15480., 13968., 15552., 14032., 15624., 14096., 15696., 14160., 15768.,
      14224., 15840., 14288., 15912., 14352., 15984., 14416., 16056., 14480.,
      16128., 14800., 16488., 14864., 16560., 14928., 16632., 14992., 16704.,
      15056., 16776., 15120., 16848., 15184., 16920., 15248., 16992., 15312.,
      17064., 15376., 17136., 15440., 17208., 15504., 17280., 15568., 17352.,
      15632., 17424., 15696., 17496., 15760., 17568., 15824., 17640., 15888.,
      17712., 15952., 17784., 16016., 17856., 16080., 17928., 16144., 18000.,
      16208., 18072., 16272., 18144., 16336., 18216., 16400., 18288., 16464.,
      18360., 16528., 18432., 16848., 18792., 16912., 18864., 16976., 18936.,
      17040., 19008., 17104., 19080., 17168., 19152., 17232., 19224., 17296.,
      19296., 17360., 19368., 17424., 19440., 17488., 19512., 17552., 19584.,
      17616., 19656., 17680., 19728., 17744., 19800., 17808., 19872., 17872.,
      19944., 17936., 20016., 18000., 20088., 18064., 20160., 18128., 20232.,
      18192., 20304., 18256., 20376., 18320., 20448., 18384., 20520., 18448.,
      20592., 18512., 20664., 18576., 20736.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7735.,  8050.,  8365.,  8680.,  8470.,  8820.,  9170.,  9520.,  9205.,
      9590.,  9975.,  10360., 9940.,  10360., 10780., 11200., 10738., 11200.,
      11662., 12124., 11536., 12040., 12544., 13048., 12334., 12880., 13426.,
      13972., 13132., 13720., 14308., 14896., 13965., 14602., 15239., 15876.,
      14798., 15484., 16170., 16856., 15631., 16366., 17101., 17836., 16464.,
      17248., 18032., 18816., 17304., 18144., 18984., 19824., 18144., 19040.,
      19936., 20832., 18984., 19936., 20888., 21840., 19824., 20832., 21840.,
      22848., 13965., 14798., 15631., 16464., 14602., 15484., 16366., 17248.,
      15239., 16170., 17101., 18032., 15876., 16856., 17836., 18816., 10738.,
      11536., 12334., 13132., 11200., 12040., 12880., 13720., 11662., 12544.,
      13426., 14308., 12124., 13048., 13972., 14896., 7735.,  8470.,  9205.,
      9940.,  8050.,  8820.,  9590.,  10360., 8365.,  9170.,  9975.,  10780.,
      8680.,  9520.,  10360., 11200., 8840.,  9200.,  9560.,  9920.,  9680.,
      10080., 10480., 10880., 10520., 10960., 11400., 11840., 11360., 11840.,
      12320., 12800., 12272., 12800., 13328., 13856., 13184., 13760., 14336.,
      14912., 14096., 14720., 15344., 15968., 15008., 15680., 16352., 17024.,
      15960., 16688., 17416., 18144., 16912., 17696., 18480., 19264., 17864.,
      18704., 19544., 20384., 18816., 19712., 20608., 21504., 19776., 20736.,
      21696., 22656., 20736., 21760., 22784., 23808., 21696., 22784., 23872.,
      24960., 22656., 23808., 24960., 26112., 15960., 16912., 17864., 18816.,
      16688., 17696., 18704., 19712., 17416., 18480., 19544., 20608., 18144.,
      19264., 20384., 21504., 12272., 13184., 14096., 15008., 12800., 13760.,
      14720., 15680., 13328., 14336., 15344., 16352., 13856., 14912., 15968.,
      17024., 8840.,  9680.,  10520., 11360., 9200.,  10080., 10960., 11840.,
      9560.,  10480., 11400., 12320., 9920.,  10880., 11840., 12800., 9945.,
      10350., 10755., 11160., 10890., 11340., 11790., 12240., 11835., 12330.,
      12825., 13320., 12780., 13320., 13860., 14400., 13806., 14400., 14994.,
      15588., 14832., 15480., 16128., 16776., 15858., 16560., 17262., 17964.,
      16884., 17640., 18396., 19152., 17955., 18774., 19593., 20412., 19026.,
      19908., 20790., 21672., 20097., 21042., 21987., 22932., 21168., 22176.,
      23184., 24192., 22248., 23328., 24408., 25488., 23328., 24480., 25632.,
      26784., 24408., 25632., 26856., 28080., 25488., 26784., 28080., 29376.,
      17955., 19026., 20097., 21168., 18774., 19908., 21042., 22176., 19593.,
      20790., 21987., 23184., 20412., 21672., 22932., 24192., 13806., 14832.,
      15858., 16884., 14400., 15480., 16560., 17640., 14994., 16128., 17262.,
      18396., 15588., 16776., 17964., 19152., 9945.,  10890., 11835., 12780.,
      10350., 11340., 12330., 13320., 10755., 11790., 12825., 13860., 11160.,
      12240., 13320., 14400., 11050., 11500., 11950., 12400., 12100., 12600.,
      13100., 13600., 13150., 13700., 14250., 14800., 14200., 14800., 15400.,
      16000., 15340., 16000., 16660., 17320., 16480., 17200., 17920., 18640.,
      17620., 18400., 19180., 19960., 18760., 19600., 20440., 21280., 19950.,
      20860., 21770., 22680., 21140., 22120., 23100., 24080., 22330., 23380.,
      24430., 25480., 23520., 24640., 25760., 26880., 24720., 25920., 27120.,
      28320., 25920., 27200., 28480., 29760., 27120., 28480., 29840., 31200.,
      28320., 29760., 31200., 32640., 19950., 21140., 22330., 23520., 20860.,
      22120., 23380., 24640., 21770., 23100., 24430., 25760., 22680., 24080.,
      25480., 26880., 15340., 16480., 17620., 18760., 16000., 17200., 18400.,
      19600., 16660., 17920., 19180., 20440., 17320., 18640., 19960., 21280.,
      11050., 12100., 13150., 14200., 11500., 12600., 13700., 14800., 11950.,
      13100., 14250., 15400., 12400., 13600., 14800., 16000., 9945.,  10350.,
      10755., 11160., 10890., 11340., 11790., 12240., 11835., 12330., 12825.,
      13320., 12780., 13320., 13860., 14400., 13806., 14400., 14994., 15588.,
      14832., 15480., 16128., 16776., 15858., 16560., 17262., 17964., 16884.,
      17640., 18396., 19152., 17955., 18774., 19593., 20412., 19026., 19908.,
      20790., 21672., 20097., 21042., 21987., 22932., 21168., 22176., 23184.,
      24192., 22248., 23328., 24408., 25488., 23328., 24480., 25632., 26784.,
      24408., 25632., 26856., 28080., 25488., 26784., 28080., 29376., 17955.,
      19026., 20097., 21168., 18774., 19908., 21042., 22176., 19593., 20790.,
      21987., 23184., 20412., 21672., 22932., 24192., 13806., 14832., 15858.,
      16884., 14400., 15480., 16560., 17640., 14994., 16128., 17262., 18396.,
      15588., 16776., 17964., 19152., 9945.,  10890., 11835., 12780., 10350.,
      11340., 12330., 13320., 10755., 11790., 12825., 13860., 11160., 12240.,
      13320., 14400., 8840.,  9200.,  9560.,  9920.,  9680.,  10080., 10480.,
      10880., 10520., 10960., 11400., 11840., 11360., 11840., 12320., 12800.,
      12272., 12800., 13328., 13856., 13184., 13760., 14336., 14912., 14096.,
      14720., 15344., 15968., 15008., 15680., 16352., 17024., 15960., 16688.,
      17416., 18144., 16912., 17696., 18480., 19264., 17864., 18704., 19544.,
      20384., 18816., 19712., 20608., 21504., 19776., 20736., 21696., 22656.,
      20736., 21760., 22784., 23808., 21696., 22784., 23872., 24960., 22656.,
      23808., 24960., 26112., 15960., 16912., 17864., 18816., 16688., 17696.,
      18704., 19712., 17416., 18480., 19544., 20608., 18144., 19264., 20384.,
      21504., 12272., 13184., 14096., 15008., 12800., 13760., 14720., 15680.,
      13328., 14336., 15344., 16352., 13856., 14912., 15968., 17024., 8840.,
      9680.,  10520., 11360., 9200.,  10080., 10960., 11840., 9560.,  10480.,
      11400., 12320., 9920.,  10880., 11840., 12800., 7735.,  8050.,  8365.,
      8680.,  8470.,  8820.,  9170.,  9520.,  9205.,  9590.,  9975.,  10360.,
      9940.,  10360., 10780., 11200., 10738., 11200., 11662., 12124., 11536.,
      12040., 12544., 13048., 12334., 12880., 13426., 13972., 13132., 13720.,
      14308., 14896., 13965., 14602., 15239., 15876., 14798., 15484., 16170.,
      16856., 15631., 16366., 17101., 17836., 16464., 17248., 18032., 18816.,
      17304., 18144., 18984., 19824., 18144., 19040., 19936., 20832., 18984.,
      19936., 20888., 21840., 19824., 20832., 21840., 22848., 13965., 14798.,
      15631., 16464., 14602., 15484., 16366., 17248., 15239., 16170., 17101.,
      18032., 15876., 16856., 17836., 18816., 10738., 11536., 12334., 13132.,
      11200., 12040., 12880., 13720., 11662., 12544., 13426., 14308., 12124.,
      13048., 13972., 14896., 7735.,  8470.,  9205.,  9940.,  8050.,  8820.,
      9590.,  10360., 8365.,  9170.,  9975.,  10780., 8680.,  9520.,  10360.,
      11200.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8712.,  9120.,  9528.,  9936.,  8832.,  9248.,  9664.,  10080., 8952.,
      9376.,  9800.,  10224., 9072.,  9504.,  9936.,  10368., 9192.,  9632.,
      10072., 10512., 9312.,  9760.,  10208., 10656., 9432.,  9888.,  10344.,
      10800., 9552.,  10016., 10480., 10944., 9672.,  10144., 10616., 11088.,
      9792.,  10272., 10752., 11232., 9912.,  10400., 10888., 11376., 10032.,
      10528., 11024., 11520., 10152., 10656., 11160., 11664., 10272., 10784.,
      11296., 11808., 10392., 10912., 11432., 11952., 10512., 11040., 11568.,
      12096., 10632., 11168., 11704., 12240., 10752., 11296., 11840., 12384.,
      10872., 11424., 11976., 12528., 10992., 11552., 12112., 12672., 11112.,
      11680., 12248., 12816., 11232., 11808., 12384., 12960., 11352., 11936.,
      12520., 13104., 11472., 12064., 12656., 13248., 11592., 12192., 12792.,
      13392., 11712., 12320., 12928., 13536., 11832., 12448., 13064., 13680.,
      11952., 12576., 13200., 13824., 12552., 13216., 13880., 14544., 12672.,
      13344., 14016., 14688., 12792., 13472., 14152., 14832., 12912., 13600.,
      14288., 14976., 13032., 13728., 14424., 15120., 13152., 13856., 14560.,
      15264., 13272., 13984., 14696., 15408., 13392., 14112., 14832., 15552.,
      13512., 14240., 14968., 15696., 13632., 14368., 15104., 15840., 13752.,
      14496., 15240., 15984., 13872., 14624., 15376., 16128., 13992., 14752.,
      15512., 16272., 14112., 14880., 15648., 16416., 14232., 15008., 15784.,
      16560., 14352., 15136., 15920., 16704., 14472., 15264., 16056., 16848.,
      14592., 15392., 16192., 16992., 14712., 15520., 16328., 17136., 14832.,
      15648., 16464., 17280., 14952., 15776., 16600., 17424., 15072., 15904.,
      16736., 17568., 15192., 16032., 16872., 17712., 15312., 16160., 17008.,
      17856., 15432., 16288., 17144., 18000., 15552., 16416., 17280., 18144.,
      15672., 16544., 17416., 18288., 15792., 16672., 17552., 18432., 16392.,
      17312., 18232., 19152., 16512., 17440., 18368., 19296., 16632., 17568.,
      18504., 19440., 16752., 17696., 18640., 19584., 16872., 17824., 18776.,
      19728., 16992., 17952., 18912., 19872., 17112., 18080., 19048., 20016.,
      17232., 18208., 19184., 20160., 17352., 18336., 19320., 20304., 17472.,
      18464., 19456., 20448., 17592., 18592., 19592., 20592., 17712., 18720.,
      19728., 20736., 17832., 18848., 19864., 20880., 17952., 18976., 20000.,
      21024., 18072., 19104., 20136., 21168., 18192., 19232., 20272., 21312.,
      18312., 19360., 20408., 21456., 18432., 19488., 20544., 21600., 18552.,
      19616., 20680., 21744., 18672., 19744., 20816., 21888., 18792., 19872.,
      20952., 22032., 18912., 20000., 21088., 22176., 19032., 20128., 21224.,
      22320., 19152., 20256., 21360., 22464., 19272., 20384., 21496., 22608.,
      19392., 20512., 21632., 22752., 19512., 20640., 21768., 22896., 19632.,
      20768., 21904., 23040., 20232., 21408., 22584., 23760., 20352., 21536.,
      22720., 23904., 20472., 21664., 22856., 24048., 20592., 21792., 22992.,
      24192., 20712., 21920., 23128., 24336., 20832., 22048., 23264., 24480.,
      20952., 22176., 23400., 24624., 21072., 22304., 23536., 24768., 21192.,
      22432., 23672., 24912., 21312., 22560., 23808., 25056., 21432., 22688.,
      23944., 25200., 21552., 22816., 24080., 25344., 21672., 22944., 24216.,
      25488., 21792., 23072., 24352., 25632., 21912., 23200., 24488., 25776.,
      22032., 23328., 24624., 25920., 22152., 23456., 24760., 26064., 22272.,
      23584., 24896., 26208., 22392., 23712., 25032., 26352., 22512., 23840.,
      25168., 26496., 22632., 23968., 25304., 26640., 22752., 24096., 25440.,
      26784., 22872., 24224., 25576., 26928., 22992., 24352., 25712., 27072.,
      23112., 24480., 25848., 27216., 23232., 24608., 25984., 27360., 23352.,
      24736., 26120., 27504., 23472., 24864., 26256., 27648., 24072., 25504.,
      26936., 28368., 24192., 25632., 27072., 28512., 24312., 25760., 27208.,
      28656., 24432., 25888., 27344., 28800., 24552., 26016., 27480., 28944.,
      24672., 26144., 27616., 29088., 24792., 26272., 27752., 29232., 24912.,
      26400., 27888., 29376., 25032., 26528., 28024., 29520., 25152., 26656.,
      28160., 29664., 25272., 26784., 28296., 29808., 25392., 26912., 28432.,
      29952., 25512., 27040., 28568., 30096., 25632., 27168., 28704., 30240.,
      25752., 27296., 28840., 30384., 25872., 27424., 28976., 30528., 25992.,
      27552., 29112., 30672., 26112., 27680., 29248., 30816., 26232., 27808.,
      29384., 30960., 26352., 27936., 29520., 31104., 26472., 28064., 29656.,
      31248., 26592., 28192., 29792., 31392., 26712., 28320., 29928., 31536.,
      26832., 28448., 30064., 31680., 26952., 28576., 30200., 31824., 27072.,
      28704., 30336., 31968., 27192., 28832., 30472., 32112., 27312., 28960.,
      30608., 32256., 14088., 15264., 16440., 17616., 14208., 15392., 16576.,
      17760., 14328., 15520., 16712., 17904., 14448., 15648., 16848., 18048.,
      14568., 15776., 16984., 18192., 14688., 15904., 17120., 18336., 14808.,
      16032., 17256., 18480., 14928., 16160., 17392., 18624., 15048., 16288.,
      17528., 18768., 15168., 16416., 17664., 18912., 15288., 16544., 17800.,
      19056., 15408., 16672., 17936., 19200., 15528., 16800., 18072., 19344.,
      15648., 16928., 18208., 19488., 15768., 17056., 18344., 19632., 15888.,
      17184., 18480., 19776., 16008., 17312., 18616., 19920., 16128., 17440.,
      18752., 20064., 16248., 17568., 18888., 20208., 16368., 17696., 19024.,
      20352., 16488., 17824., 19160., 20496., 16608., 17952., 19296., 20640.,
      16728., 18080., 19432., 20784., 16848., 18208., 19568., 20928., 16968.,
      18336., 19704., 21072., 17088., 18464., 19840., 21216., 17208., 18592.,
      19976., 21360., 17328., 18720., 20112., 21504., 8200.,  9120.,  10040.,
      10960., 8320.,  9248.,  10176., 11104., 8440.,  9376.,  10312., 11248.,
      8560.,  9504.,  10448., 11392., 8680.,  9632.,  10584., 11536., 8800.,
      9760.,  10720., 11680., 8920.,  9888.,  10856., 11824., 9040.,  10016.,
      10992., 11968., 9160.,  10144., 11128., 12112., 9280.,  10272., 11264.,
      12256., 9400.,  10400., 11400., 12400., 9520.,  10528., 11536., 12544.,
      9640.,  10656., 11672., 12688., 9760.,  10784., 11808., 12832., 9880.,
      10912., 11944., 12976., 10000., 11040., 12080., 13120., 10120., 11168.,
      12216., 13264., 10240., 11296., 12352., 13408., 10360., 11424., 12488.,
      13552., 10480., 11552., 12624., 13696., 10600., 11680., 12760., 13840.,
      10720., 11808., 12896., 13984., 10840., 11936., 13032., 14128., 10960.,
      12064., 13168., 14272., 11080., 12192., 13304., 14416., 11200., 12320.,
      13440., 14560., 11320., 12448., 13576., 14704., 11440., 12576., 13712.,
      14848.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13055., 14508., 16004., 17696., 15468., 13282., 11145., 10728., 12164.,
      13664., 15668., 13536., 12004., 10504., 12031., 14184., 16404., 19418.,
      17436., 15766., 14129., 17438., 20929., 24472., 29081., 24472., 20929.,
      17438., 14129., 15766., 17436., 19418., 16404., 14184., 12031., 10504.,
      12004., 13536., 15668., 13664., 12164., 10728., 11145., 13282., 15468.,
      17696., 16004., 14508., 13055.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1622., 1700., 1778., 1856., 1934., 2012., 2090., 2324., 2402., 2480.,
      2558., 2636., 2714., 2792., 3026., 3104., 3182., 3260., 3338., 3416.,
      3494., 3728., 3806., 3884., 3962., 4040., 4118., 4196., 4430., 4508.,
      4586., 4664., 4742., 4820., 4898., 5132., 5210., 5288., 5366., 5444.,
      5522., 5600., 5834., 5912., 5990., 6068., 6146., 6224., 6302.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10877., 11550., 12361., 13144., 13828., 14728., 15424., 16448., 13916.,
      14840., 11891., 12708., 10067., 10770., 10720., 11440., 13124., 13960.,
      15520., 16480., 18340., 19432., 17216., 18176., 15380., 16232., 12720.,
      13456., 12297., 13086., 13880., 14800., 15460., 16520., 17755., 18964.,
      15564., 16632., 13878., 14828., 12107., 12930., 14636., 15548., 17719.,
      18786., 20768., 22000., 24787., 26194., 21136., 22384., 18187., 19298.,
      14904., 15868., 13543., 14434., 15901., 16940., 18220., 19416., 20770.,
      22132., 19124., 20328., 17315., 18384., 14881., 15806., 13056., 13872.,
      16372., 17320., 17600., 18688., 19348., 20584., 15936., 17024., 13636.,
      14600., 11440., 12272., 10179., 10866., 11882., 12676., 13580., 14488.,
      15259., 16288., 13636., 14536., 12508., 13304., 11153., 11838.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3058.,  3244.,  3202.,  3400.,  3346.,  3556.,  3490.,  3712.,  3634.,
      3868.,  3778.,  4024.,  3922.,  4180.,  4354.,  4648.,  4498.,  4804.,
      4642.,  4960.,  4786.,  5116.,  4930.,  5272.,  5074.,  5428.,  5218.,
      5584.,  5650.,  6052.,  5794.,  6208.,  5938.,  6364.,  6082.,  6520.,
      6226.,  6676.,  6370.,  6832.,  6514.,  6988.,  6946.,  7456.,  7090.,
      7612.,  7234.,  7768.,  7378.,  7924.,  7522.,  8080.,  7666.,  8236.,
      7810.,  8392.,  8242.,  8860.,  8386.,  9016.,  8530.,  9172.,  8674.,
      9328.,  8818.,  9484.,  8962.,  9640.,  9106.,  9796.,  9538.,  10264.,
      9682.,  10420., 9826.,  10576., 9970.,  10732., 10114., 10888., 10258.,
      11044., 10402., 11200., 10834., 11668., 10978., 11824., 11122., 11980.,
      11266., 12136., 11410., 12292., 11554., 12448., 11698., 12604.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9753.,  10426., 11099., 11772., 11011., 11794., 12577., 13360., 12996.,
      13896., 14796., 15696., 14976., 16000., 17024., 18048., 13884., 14808.,
      15732., 16656., 12597., 13414., 14231., 15048., 10823., 11526., 12229.,
      12932., 10320., 11040., 11760., 12480., 12164., 13000., 13836., 14672.,
      14016., 14976., 15936., 16896., 16164., 17256., 18348., 19440., 14912.,
      15872., 16832., 17792., 13364., 14216., 15068., 15920., 11072., 11808.,
      12544., 13280., 11581., 12370., 13159., 13948., 13528., 14448., 15368.,
      16288., 15748., 16808., 17868., 18928., 18525., 19734., 20943., 22152.,
      17100., 18168., 19236., 20304., 15030., 15980., 16930., 17880., 12703.,
      13526., 14349., 15172., 13288., 14200., 15112., 16024., 15715., 16782.,
      17849., 18916., 18640., 19872., 21104., 22336., 22343., 23750., 25157.,
      26564., 19456., 20704., 21952., 23200., 17343., 18454., 19565., 20676.,
      14476., 15440., 16404., 17368., 13267., 14158., 15049., 15940., 15947.,
      16986., 18025., 19064., 19404., 20600., 21796., 22992., 20850., 22212.,
      23574., 24936., 18228., 19432., 20636., 21840., 15641., 16710., 17779.,
      18848., 12837., 13762., 14687., 15612., 12592., 13408., 14224., 15040.,
      15764., 16712., 17660., 18608., 16960., 18048., 19136., 20224., 18516.,
      19752., 20988., 22224., 15808., 16896., 17984., 19072., 13508., 14472.,
      15436., 16400., 11680., 12512., 13344., 14176., 11159., 11846., 12533.,
      13220., 12026., 12820., 13614., 14408., 13324., 14232., 15140., 16048.,
      14481., 15510., 16539., 17568., 12420., 13320., 14220., 15120., 11292.,
      12088., 12884., 13680., 10261., 10946., 11631., 12316.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5930.,  6116.,  6302.,  6488.,  6206.,  6404.,  6602.,  6800.,  6482.,
      6692.,  6902.,  7112.,  6758.,  6980.,  7202.,  7424.,  7034.,  7268.,
      7502.,  7736.,  7310.,  7556.,  7802.,  8048.,  7586.,  7844.,  8102.,
      8360.,  8414.,  8708.,  9002.,  9296.,  8690.,  8996.,  9302.,  9608.,
      8966.,  9284.,  9602.,  9920.,  9242.,  9572.,  9902.,  10232., 9518.,
      9860.,  10202., 10544., 9794.,  10148., 10502., 10856., 10070., 10436.,
      10802., 11168., 10898., 11300., 11702., 12104., 11174., 11588., 12002.,
      12416., 11450., 11876., 12302., 12728., 11726., 12164., 12602., 13040.,
      12002., 12452., 12902., 13352., 12278., 12740., 13202., 13664., 12554.,
      13028., 13502., 13976., 13382., 13892., 14402., 14912., 13658., 14180.,
      14702., 15224., 13934., 14468., 15002., 15536., 14210., 14756., 15302.,
      15848., 14486., 15044., 15602., 16160., 14762., 15332., 15902., 16472.,
      15038., 15620., 16202., 16784., 15866., 16484., 17102., 17720., 16142.,
      16772., 17402., 18032., 16418., 17060., 17702., 18344., 16694., 17348.,
      18002., 18656., 16970., 17636., 18302., 18968., 17246., 17924., 18602.,
      19280., 17522., 18212., 18902., 19592., 18350., 19076., 19802., 20528.,
      18626., 19364., 20102., 20840., 18902., 19652., 20402., 21152., 19178.,
      19940., 20702., 21464., 19454., 20228., 21002., 21776., 19730., 20516.,
      21302., 22088., 20006., 20804., 21602., 22400., 20834., 21668., 22502.,
      23336., 21110., 21956., 22802., 23648., 21386., 22244., 23102., 23960.,
      21662., 22532., 23402., 24272., 21938., 22820., 23702., 24584., 22214.,
      23108., 24002., 24896., 22490., 23396., 24302., 25208.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11153., 11838., 12508., 13304., 13636., 14536., 15259., 16288., 13580.,
      14488., 11882., 12676., 10179., 10866., 11440., 12272., 13636., 14600.,
      15936., 17024., 19348., 20584., 17600., 18688., 16372., 17320., 13056.,
      13872., 14881., 15806., 17315., 18384., 19124., 20328., 20770., 22132.,
      18220., 19416., 15901., 16940., 13543., 14434., 14904., 15868., 18187.,
      19298., 21136., 22384., 24787., 26194., 20768., 22000., 17719., 18786.,
      14636., 15548., 12107., 12930., 13878., 14828., 15564., 16632., 17755.,
      18964., 15460., 16520., 13880., 14800., 12297., 13086., 12720., 13456.,
      15380., 16232., 17216., 18176., 18340., 19432., 15520., 16480., 13124.,
      13960., 10720., 11440., 10067., 10770., 11891., 12708., 13916., 14840.,
      15424., 16448., 13828., 14728., 12361., 13144., 10877., 11550.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3166.,  3244.,  3322.,  3400.,  3478.,  3556.,  3634.,  3712.,  3790.,
      3868.,  3946.,  4024.,  4102.,  4180.,  4570.,  4648.,  4726.,  4804.,
      4882.,  4960.,  5038.,  5116.,  5194.,  5272.,  5350.,  5428.,  5506.,
      5584.,  5974.,  6052.,  6130.,  6208.,  6286.,  6364.,  6442.,  6520.,
      6598.,  6676.,  6754.,  6832.,  6910.,  6988.,  7378.,  7456.,  7534.,
      7612.,  7690.,  7768.,  7846.,  7924.,  8002.,  8080.,  8158.,  8236.,
      8314.,  8392.,  8782.,  8860.,  8938.,  9016.,  9094.,  9172.,  9250.,
      9328.,  9406.,  9484.,  9562.,  9640.,  9718.,  9796.,  10186., 10264.,
      10342., 10420., 10498., 10576., 10654., 10732., 10810., 10888., 10966.,
      11044., 11122., 11200., 11590., 11668., 11746., 11824., 11902., 11980.,
      12058., 12136., 12214., 12292., 12370., 12448., 12526., 12604.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11626., 12290., 12282., 12988., 12715., 13496., 13490., 14320., 13176.,
      14056., 14056., 14992., 14133., 15126., 15136., 16192., 12344., 13240.,
      13240., 14192., 10371., 11156., 11142., 11976., 8594.,  9254.,  9254.,
      9956.,  10160., 10880., 10912., 11680., 12824., 13672., 13704., 14608.,
      15456., 16416., 16448., 17472., 19176., 20264., 20296., 21456., 18592.,
      19552., 19584., 20608., 17336., 18184., 18184., 19088., 13200., 13920.,
      13920., 14688., 13006., 13858., 13874., 14780., 14709., 15718., 15728.,
      16800., 15944., 17096., 17096., 18320., 17219., 18500., 18518., 19880.,
      15336., 16472., 16504., 17712., 13741., 14746., 14764., 15832., 11798.,
      12654., 12662., 13572., 14732., 15632., 15672., 16632., 18886., 19958.,
      19982., 21124., 23152., 24384., 24384., 25696., 28610., 29990., 29990.,
      31460., 23152., 24384., 24384., 25696., 18886., 19982., 19958., 21124.,
      14732., 15672., 15632., 16632., 11798., 12662., 12654., 13572., 13741.,
      14764., 14746., 15832., 15336., 16504., 16472., 17712., 17219., 18518.,
      18500., 19880., 15944., 17096., 17096., 18320., 14709., 15728., 15718.,
      16800., 13006., 13874., 13858., 14780., 13200., 13920., 13920., 14688.,
      17336., 18184., 18184., 19088., 18592., 19584., 19552., 20608., 19176.,
      20296., 20264., 21456., 15456., 16448., 16416., 17472., 12824., 13704.,
      13672., 14608., 10160., 10912., 10880., 11680., 8594.,  9254.,  9254.,
      9956.,  10371., 11142., 11156., 11976., 12344., 13240., 13240., 14192.,
      14133., 15136., 15126., 16192., 13176., 14056., 14056., 14992., 12715.,
      13490., 13496., 14320., 11626., 12282., 12290., 12988.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5972.,  6332.,  6116.,  6488.,  6260.,  6644.,  6404.,  6800.,  6548.,
      6956.,  6692.,  7112.,  6836.,  7268.,  6980.,  7424.,  7124.,  7580.,
      7268.,  7736.,  7412.,  7892.,  7556.,  8048.,  7700.,  8204.,  7844.,
      8360.,  8564.,  9140.,  8708.,  9296.,  8852.,  9452.,  8996.,  9608.,
      9140.,  9764.,  9284.,  9920.,  9428.,  10076., 9572.,  10232., 9716.,
      10388., 9860.,  10544., 10004., 10700., 10148., 10856., 10292., 11012.,
      10436., 11168., 11156., 11948., 11300., 12104., 11444., 12260., 11588.,
      12416., 11732., 12572., 11876., 12728., 12020., 12884., 12164., 13040.,
      12308., 13196., 12452., 13352., 12596., 13508., 12740., 13664., 12884.,
      13820., 13028., 13976., 13748., 14756., 13892., 14912., 14036., 15068.,
      14180., 15224., 14324., 15380., 14468., 15536., 14612., 15692., 14756.,
      15848., 14900., 16004., 15044., 16160., 15188., 16316., 15332., 16472.,
      15476., 16628., 15620., 16784., 16340., 17564., 16484., 17720., 16628.,
      17876., 16772., 18032., 16916., 18188., 17060., 18344., 17204., 18500.,
      17348., 18656., 17492., 18812., 17636., 18968., 17780., 19124., 17924.,
      19280., 18068., 19436., 18212., 19592., 18932., 20372., 19076., 20528.,
      19220., 20684., 19364., 20840., 19508., 20996., 19652., 21152., 19796.,
      21308., 19940., 21464., 20084., 21620., 20228., 21776., 20372., 21932.,
      20516., 22088., 20660., 22244., 20804., 22400., 21524., 23180., 21668.,
      23336., 21812., 23492., 21956., 23648., 22100., 23804., 22244., 23960.,
      22388., 24116., 22532., 24272., 22676., 24428., 22820., 24584., 22964.,
      24740., 23108., 24896., 23252., 25052., 23396., 25208.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9788.,  10452., 11116., 11780., 10418., 11124., 11830., 12536., 10825.,
      11606., 12387., 13168., 11558., 12388., 13218., 14048., 12128., 13008.,
      13888., 14768., 12968., 13904., 14840., 15776., 13929., 14922., 15915.,
      16908., 14880., 15936., 16992., 18048., 12976., 13872., 14768., 15664.,
      13816., 14768., 15720., 16672., 12277., 13062., 13847., 14632., 13002.,
      13836., 14670., 15504., 11248., 11908., 12568., 13228., 11854., 12556.,
      13258., 13960., 9776.,  10496., 11216., 11936., 10496., 11264., 12032.,
      12800., 11456., 12304., 13152., 14000., 12296., 13200., 14104., 15008.,
      13120., 14080., 15040., 16000., 14080., 15104., 16128., 17152., 15888.,
      16976., 18064., 19152., 16968., 18128., 19288., 20448., 15424., 16384.,
      17344., 18304., 16384., 17408., 18432., 19456., 14848., 15696., 16544.,
      17392., 15688., 16592., 17496., 18400., 11376., 12096., 12816., 13536.,
      12096., 12864., 13632., 14400., 11816., 12668., 13520., 14372., 12634.,
      13540., 14446., 15352., 14073., 15082., 16091., 17100., 15024., 16096.,
      17168., 18240., 16976., 18128., 19280., 20432., 18056., 19280., 20504.,
      21728., 20325., 21606., 22887., 24168., 21530., 22892., 24254., 25616.,
      20160., 21296., 22432., 23568., 21240., 22448., 23656., 24864., 16237.,
      17242., 18247., 19252., 17196., 18264., 19332., 20400., 12468., 13324.,
      14180., 15036., 13278., 14188., 15098., 16008., 12628., 13528., 14428.,
      15328., 13552., 14512., 15472., 16432., 15804., 16876., 17948., 19020.,
      16870., 18012., 19154., 20296., 19312., 20544., 21776., 23008., 20512.,
      21824., 23136., 24448., 23968., 25348., 26728., 28108., 25294., 26764.,
      28234., 29704., 19504., 20736., 21968., 23200., 20704., 22016., 23328.,
      24640., 16196., 17292., 18388., 19484., 17246., 18412., 19578., 20744.,
      12940., 13880., 14820., 15760., 13816., 14816., 15816., 16816., 13068.,
      13932., 14796., 15660., 13894., 14812., 15730., 16648., 16251., 17274.,
      18297., 19320., 17206., 18292., 19378., 20464., 20448., 21616., 22784.,
      23952., 21528., 22768., 24008., 25248., 20339., 21638., 22937., 24236.,
      21540., 22920., 24300., 25680., 16784., 17936., 19088., 20240., 17864.,
      19088., 20312., 21536., 14063., 15082., 16101., 17120., 14994., 16076.,
      17158., 18240., 11416., 12284., 13152., 14020., 12202., 13124., 14046.,
      14968., 11184., 11904., 12624., 13344., 11904., 12672., 13440., 14208.,
      14848., 15696., 16544., 17392., 15688., 16592., 17496., 18400., 16096.,
      17088., 18080., 19072., 17056., 18112., 19168., 20224., 16752., 17872.,
      18992., 20112., 17832., 19024., 20216., 21408., 14176., 15168., 16160.,
      17152., 15136., 16192., 17248., 18304., 12256., 13136., 14016., 14896.,
      13096., 14032., 14968., 15904., 10768., 11520., 12272., 13024., 11488.,
      12288., 13088., 13888., 11440., 12100., 12760., 13420., 12046., 12748.,
      13450., 14152., 12195., 12966., 13737., 14508., 12916., 13736., 14556.,
      15376., 13168., 14064., 14960., 15856., 14008., 14960., 15912., 16864.,
      13599., 14602., 15605., 16608., 14530., 15596., 16662., 17728., 11744.,
      12624., 13504., 14384., 12584., 13520., 14456., 15392., 10831., 11606.,
      12381., 13156., 11576., 12400., 13224., 14048., 9732.,  10388., 11044.,
      11700., 10378., 11076., 11774., 12472.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11584., 11944., 12304., 12664., 11860., 12232., 12604., 12976., 12136.,
      12520., 12904., 13288., 12412., 12808., 13204., 13600., 12688., 13096.,
      13504., 13912., 12964., 13384., 13804., 14224., 10360., 10728., 11096.,
      11464., 10636., 11016., 11396., 11776., 8288.,  8616.,  8944.,  9272.,
      8564.,  8904.,  9244.,  9584.,  6472.,  6760.,  7048.,  7336.,  6748.,
      7048.,  7348.,  7648.,  7024.,  7336.,  7648.,  7960.,  7300.,  7624.,
      7948.,  8272.,  8680.,  9064.,  9448.,  9832.,  8956.,  9352.,  9748.,
      10144., 9232.,  9640.,  10048., 10456., 9508.,  9928.,  10348., 10768.,
      9784.,  10216., 10648., 11080., 10060., 10504., 10948., 11392., 8224.,
      8616.,  9008.,  9400.,  8500.,  8904.,  9308.,  9712.,  6920.,  7272.,
      7624.,  7976.,  7196.,  7560.,  7924.,  8288.,  5872.,  6184.,  6496.,
      6808.,  6148.,  6472.,  6796.,  7120.,  6424.,  6760.,  7096.,  7432.,
      6700.,  7048.,  7396.,  7744.,  8080.,  8488.,  8896.,  9304.,  8356.,
      8776.,  9196.,  9616.,  8632.,  9064.,  9496.,  9928.,  8908.,  9352.,
      9796.,  10240., 9184.,  9640.,  10096., 10552., 9460.,  9928.,  10396.,
      10864., 8392.,  8808.,  9224.,  9640.,  8668.,  9096.,  9524.,  9952.,
      7856.,  8232.,  8608.,  8984.,  8132.,  8520.,  8908.,  9296.,  7576.,
      7912.,  8248.,  8584.,  7852.,  8200.,  8548.,  8896.,  8128.,  8488.,
      8848.,  9208.,  8404.,  8776.,  9148.,  9520.,  9784.,  10216., 10648.,
      11080., 10060., 10504., 10948., 11392., 10336., 10792., 11248., 11704.,
      10612., 11080., 11548., 12016., 10888., 11368., 11848., 12328., 11164.,
      11656., 12148., 12640., 10864., 11304., 11744., 12184., 11140., 11592.,
      12044., 12496., 11096., 11496., 11896., 12296., 11372., 11784., 12196.,
      12608., 11584., 11944., 12304., 12664., 11860., 12232., 12604., 12976.,
      12136., 12520., 12904., 13288., 12412., 12808., 13204., 13600., 8288.,
      8616.,  8944.,  9272.,  8564.,  8904.,  9244.,  9584.,  6472.,  6760.,
      7048.,  7336.,  6748.,  7048.,  7348.,  7648.,  7024.,  7336.,  7648.,
      7960.,  7300.,  7624.,  7948.,  8272.,  7576.,  7912.,  8248.,  8584.,
      7852.,  8200.,  8548.,  8896.,  8128.,  8488.,  8848.,  9208.,  8404.,
      8776.,  9148.,  9520.,  8680.,  9064.,  9448.,  9832.,  8956.,  9352.,
      9748.,  10144., 9232.,  9640.,  10048., 10456., 9508.,  9928.,  10348.,
      10768., 6920.,  7272.,  7624.,  7976.,  7196.,  7560.,  7924.,  8288.,
      5872.,  6184.,  6496.,  6808.,  6148.,  6472.,  6796.,  7120.,  6424.,
      6760.,  7096.,  7432.,  6700.,  7048.,  7396.,  7744.,  6976.,  7336.,
      7696.,  8056.,  7252.,  7624.,  7996.,  8368.,  7528.,  7912.,  8296.,
      8680.,  7804.,  8200.,  8596.,  8992.,  8080.,  8488.,  8896.,  9304.,
      8356.,  8776.,  9196.,  9616.,  8632.,  9064.,  9496.,  9928.,  8908.,
      9352.,  9796.,  10240., 7856.,  8232.,  8608.,  8984.,  8132.,  8520.,
      8908.,  9296.,  7576.,  7912.,  8248.,  8584.,  7852.,  8200.,  8548.,
      8896.,  8128.,  8488.,  8848.,  9208.,  8404.,  8776.,  9148.,  9520.,
      8680.,  9064.,  9448.,  9832.,  8956.,  9352.,  9748.,  10144., 9232.,
      9640.,  10048., 10456., 9508.,  9928.,  10348., 10768., 9784.,  10216.,
      10648., 11080., 10060., 10504., 10948., 11392., 10336., 10792., 11248.,
      11704., 10612., 11080., 11548., 12016.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10261., 10946., 11631., 12316., 11292., 12088., 12884., 13680., 12420.,
      13320., 14220., 15120., 14481., 15510., 16539., 17568., 13324., 14232.,
      15140., 16048., 12026., 12820., 13614., 14408., 11159., 11846., 12533.,
      13220., 11680., 12512., 13344., 14176., 13508., 14472., 15436., 16400.,
      15808., 16896., 17984., 19072., 18516., 19752., 20988., 22224., 16960.,
      18048., 19136., 20224., 15764., 16712., 17660., 18608., 12592., 13408.,
      14224., 15040., 12837., 13762., 14687., 15612., 15641., 16710., 17779.,
      18848., 18228., 19432., 20636., 21840., 20850., 22212., 23574., 24936.,
      19404., 20600., 21796., 22992., 15947., 16986., 18025., 19064., 13267.,
      14158., 15049., 15940., 14476., 15440., 16404., 17368., 17343., 18454.,
      19565., 20676., 19456., 20704., 21952., 23200., 22343., 23750., 25157.,
      26564., 18640., 19872., 21104., 22336., 15715., 16782., 17849., 18916.,
      13288., 14200., 15112., 16024., 12703., 13526., 14349., 15172., 15030.,
      15980., 16930., 17880., 17100., 18168., 19236., 20304., 18525., 19734.,
      20943., 22152., 15748., 16808., 17868., 18928., 13528., 14448., 15368.,
      16288., 11581., 12370., 13159., 13948., 11072., 11808., 12544., 13280.,
      13364., 14216., 15068., 15920., 14912., 15872., 16832., 17792., 16164.,
      17256., 18348., 19440., 14016., 14976., 15936., 16896., 12164., 13000.,
      13836., 14672., 10320., 11040., 11760., 12480., 10823., 11526., 12229.,
      12932., 12597., 13414., 14231., 15048., 13884., 14808., 15732., 16656.,
      14976., 16000., 17024., 18048., 12996., 13896., 14796., 15696., 11011.,
      11794., 12577., 13360., 9753.,  10426., 11099., 11772.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6254.,  6332.,  6410.,  6488.,  6566.,  6644.,  6722.,  6800.,  6878.,
      6956.,  7034.,  7112.,  7190.,  7268.,  7346.,  7424.,  7502.,  7580.,
      7658.,  7736.,  7814.,  7892.,  7970.,  8048.,  8126.,  8204.,  8282.,
      8360.,  9062.,  9140.,  9218.,  9296.,  9374.,  9452.,  9530.,  9608.,
      9686.,  9764.,  9842.,  9920.,  9998.,  10076., 10154., 10232., 10310.,
      10388., 10466., 10544., 10622., 10700., 10778., 10856., 10934., 11012.,
      11090., 11168., 11870., 11948., 12026., 12104., 12182., 12260., 12338.,
      12416., 12494., 12572., 12650., 12728., 12806., 12884., 12962., 13040.,
      13118., 13196., 13274., 13352., 13430., 13508., 13586., 13664., 13742.,
      13820., 13898., 13976., 14678., 14756., 14834., 14912., 14990., 15068.,
      15146., 15224., 15302., 15380., 15458., 15536., 15614., 15692., 15770.,
      15848., 15926., 16004., 16082., 16160., 16238., 16316., 16394., 16472.,
      16550., 16628., 16706., 16784., 17486., 17564., 17642., 17720., 17798.,
      17876., 17954., 18032., 18110., 18188., 18266., 18344., 18422., 18500.,
      18578., 18656., 18734., 18812., 18890., 18968., 19046., 19124., 19202.,
      19280., 19358., 19436., 19514., 19592., 20294., 20372., 20450., 20528.,
      20606., 20684., 20762., 20840., 20918., 20996., 21074., 21152., 21230.,
      21308., 21386., 21464., 21542., 21620., 21698., 21776., 21854., 21932.,
      22010., 22088., 22166., 22244., 22322., 22400., 23102., 23180., 23258.,
      23336., 23414., 23492., 23570., 23648., 23726., 23804., 23882., 23960.,
      24038., 24116., 24194., 24272., 24350., 24428., 24506., 24584., 24662.,
      24740., 24818., 24896., 24974., 25052., 25130., 25208.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9732.,  10378., 10388., 11076., 11044., 11774., 11700., 12472., 10831.,
      11576., 11606., 12400., 12381., 13224., 13156., 14048., 11744., 12584.,
      12624., 13520., 13504., 14456., 14384., 15392., 13599., 14530., 14602.,
      15596., 15605., 16662., 16608., 17728., 13168., 14008., 14064., 14960.,
      14960., 15912., 15856., 16864., 12195., 12916., 12966., 13736., 13737.,
      14556., 14508., 15376., 11440., 12046., 12100., 12748., 12760., 13450.,
      13420., 14152., 10768., 11488., 11520., 12288., 12272., 13088., 13024.,
      13888., 12256., 13096., 13136., 14032., 14016., 14968., 14896., 15904.,
      14176., 15136., 15168., 16192., 16160., 17248., 17152., 18304., 16752.,
      17832., 17872., 19024., 18992., 20216., 20112., 21408., 16096., 17056.,
      17088., 18112., 18080., 19168., 19072., 20224., 14848., 15688., 15696.,
      16592., 16544., 17496., 17392., 18400., 11184., 11904., 11904., 12672.,
      12624., 13440., 13344., 14208., 11416., 12202., 12284., 13124., 13152.,
      14046., 14020., 14968., 14063., 14994., 15082., 16076., 16101., 17158.,
      17120., 18240., 16784., 17864., 17936., 19088., 19088., 20312., 20240.,
      21536., 20339., 21540., 21638., 22920., 22937., 24300., 24236., 25680.,
      20448., 21528., 21616., 22768., 22784., 24008., 23952., 25248., 16251.,
      17206., 17274., 18292., 18297., 19378., 19320., 20464., 13068., 13894.,
      13932., 14812., 14796., 15730., 15660., 16648., 12940., 13816., 13880.,
      14816., 14820., 15816., 15760., 16816., 16196., 17246., 17292., 18412.,
      18388., 19578., 19484., 20744., 19504., 20704., 20736., 22016., 21968.,
      23328., 23200., 24640., 23968., 25294., 25348., 26764., 26728., 28234.,
      28108., 29704., 19312., 20512., 20544., 21824., 21776., 23136., 23008.,
      24448., 15804., 16870., 16876., 18012., 17948., 19154., 19020., 20296.,
      12628., 13552., 13528., 14512., 14428., 15472., 15328., 16432., 12468.,
      13278., 13324., 14188., 14180., 15098., 15036., 16008., 16237., 17196.,
      17242., 18264., 18247., 19332., 19252., 20400., 20160., 21240., 21296.,
      22448., 22432., 23656., 23568., 24864., 20325., 21530., 21606., 22892.,
      22887., 24254., 24168., 25616., 16976., 18056., 18128., 19280., 19280.,
      20504., 20432., 21728., 14073., 15024., 15082., 16096., 16091., 17168.,
      17100., 18240., 11816., 12634., 12668., 13540., 13520., 14446., 14372.,
      15352., 11376., 12096., 12096., 12864., 12816., 13632., 13536., 14400.,
      14848., 15688., 15696., 16592., 16544., 17496., 17392., 18400., 15424.,
      16384., 16384., 17408., 17344., 18432., 18304., 19456., 15888., 16968.,
      16976., 18128., 18064., 19288., 19152., 20448., 13120., 14080., 14080.,
      15104., 15040., 16128., 16000., 17152., 11456., 12296., 12304., 13200.,
      13152., 14104., 14000., 15008., 9776.,  10496., 10496., 11264., 11216.,
      12032., 11936., 12800., 11248., 11854., 11908., 12556., 12568., 13258.,
      13228., 13960., 12277., 13002., 13062., 13836., 13847., 14670., 14632.,
      15504., 12976., 13816., 13872., 14768., 14768., 15720., 15664., 16672.,
      13929., 14880., 14922., 15936., 15915., 16992., 16908., 18048., 12128.,
      12968., 13008., 13904., 13888., 14840., 14768., 15776., 10825., 11558.,
      11606., 12388., 12387., 13218., 13168., 14048., 9788.,  10418., 10452.,
      11124., 11116., 11830., 11780., 12536.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11800., 12508., 11944., 12664., 12088., 12820., 12232., 12976., 12376.,
      13132., 12520., 13288., 12664., 13444., 12808., 13600., 12952., 13756.,
      13096., 13912., 13240., 14068., 13384., 14224., 10584., 11308., 10728.,
      11464., 10872., 11620., 11016., 11776., 8472.,  9116.,  8616.,  9272.,
      8760.,  9428.,  8904.,  9584.,  6616.,  7180.,  6760.,  7336.,  6904.,
      7492.,  7048.,  7648.,  7192.,  7804.,  7336.,  7960.,  7480.,  8116.,
      7624.,  8272.,  8920.,  9676.,  9064.,  9832.,  9208.,  9988.,  9352.,
      10144., 9496.,  10300., 9640.,  10456., 9784.,  10612., 9928.,  10768.,
      10072., 10924., 10216., 11080., 10360., 11236., 10504., 11392., 8472.,
      9244.,  8616.,  9400.,  8760.,  9556.,  8904.,  9712.,  7128.,  7820.,
      7272.,  7976.,  7416.,  8132.,  7560.,  8288.,  6040.,  6652.,  6184.,
      6808.,  6328.,  6964.,  6472.,  7120.,  6616.,  7276.,  6760.,  7432.,
      6904.,  7588.,  7048.,  7744.,  8344.,  9148.,  8488.,  9304.,  8632.,
      9460.,  8776.,  9616.,  8920.,  9772.,  9064.,  9928.,  9208.,  10084.,
      9352.,  10240., 9496.,  10396., 9640.,  10552., 9784.,  10708., 9928.,
      10864., 8664.,  9484.,  8808.,  9640.,  8952.,  9796.,  9096.,  9952.,
      8088.,  8828.,  8232.,  8984.,  8376.,  9140.,  8520.,  9296.,  7768.,
      8428.,  7912.,  8584.,  8056.,  8740.,  8200.,  8896.,  8344.,  9052.,
      8488.,  9208.,  8632.,  9364.,  8776.,  9520.,  10072., 10924., 10216.,
      11080., 10360., 11236., 10504., 11392., 10648., 11548., 10792., 11704.,
      10936., 11860., 11080., 12016., 11224., 12172., 11368., 12328., 11512.,
      12484., 11656., 12640., 11160., 12028., 11304., 12184., 11448., 12340.,
      11592., 12496., 11352., 12140., 11496., 12296., 11640., 12452., 11784.,
      12608., 11800., 12508., 11944., 12664., 12088., 12820., 12232., 12976.,
      12376., 13132., 12520., 13288., 12664., 13444., 12808., 13600., 8472.,
      9116.,  8616.,  9272.,  8760.,  9428.,  8904.,  9584.,  6616.,  7180.,
      6760.,  7336.,  6904.,  7492.,  7048.,  7648.,  7192.,  7804.,  7336.,
      7960.,  7480.,  8116.,  7624.,  8272.,  7768.,  8428.,  7912.,  8584.,
      8056.,  8740.,  8200.,  8896.,  8344.,  9052.,  8488.,  9208.,  8632.,
      9364.,  8776.,  9520.,  8920.,  9676.,  9064.,  9832.,  9208.,  9988.,
      9352.,  10144., 9496.,  10300., 9640.,  10456., 9784.,  10612., 9928.,
      10768., 7128.,  7820.,  7272.,  7976.,  7416.,  8132.,  7560.,  8288.,
      6040.,  6652.,  6184.,  6808.,  6328.,  6964.,  6472.,  7120.,  6616.,
      7276.,  6760.,  7432.,  6904.,  7588.,  7048.,  7744.,  7192.,  7900.,
      7336.,  8056.,  7480.,  8212.,  7624.,  8368.,  7768.,  8524.,  7912.,
      8680.,  8056.,  8836.,  8200.,  8992.,  8344.,  9148.,  8488.,  9304.,
      8632.,  9460.,  8776.,  9616.,  8920.,  9772.,  9064.,  9928.,  9208.,
      10084., 9352.,  10240., 8088.,  8828.,  8232.,  8984.,  8376.,  9140.,
      8520.,  9296.,  7768.,  8428.,  7912.,  8584.,  8056.,  8740.,  8200.,
      8896.,  8344.,  9052.,  8488.,  9208.,  8632.,  9364.,  8776.,  9520.,
      8920.,  9676.,  9064.,  9832.,  9208.,  9988.,  9352.,  10144., 9496.,
      10300., 9640.,  10456., 9784.,  10612., 9928.,  10768., 10072., 10924.,
      10216., 11080., 10360., 11236., 10504., 11392., 10648., 11548., 10792.,
      11704., 10936., 11860., 11080., 12016.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554., 1848., 2142., 2436., 1848., 2184., 2520., 2856., 2142., 2520.,
      2898., 3276., 2436., 2856., 3276., 3696., 2277., 2622., 2967., 3312.,
      2626., 3020., 3414., 3808., 2975., 3418., 3861., 4304., 3324., 3816.,
      4308., 4800., 3864., 4256., 4648., 5040., 4256., 4704., 5152., 5600.,
      4648., 5152., 5656., 6160., 5040., 5600., 6160., 6720., 2763., 3198.,
      3633., 4068., 3202., 3700., 4198., 4696., 3641., 4202., 4763., 5324.,
      4080., 4704., 5328., 5952., 2072., 2464., 2856., 3248., 2464., 2912.,
      3360., 3808., 2856., 3360., 3864., 4368., 3248., 3808., 4368., 4928.,
      2165., 2502., 2839., 3176., 2506., 2892., 3278., 3664., 2847., 3282.,
      3717., 4152., 3188., 3672., 4156., 4640., 2786., 3072., 3358., 3644.,
      3072., 3400., 3728., 4056., 3358., 3728., 4098., 4468., 3644., 4056.,
      4468., 4880., 2160., 2496., 2832., 3168., 2496., 2880., 3264., 3648.,
      2832., 3264., 3696., 4128., 3168., 3648., 4128., 4608., 3864., 4256.,
      4648., 5040., 4256., 4704., 5152., 5600., 4648., 5152., 5656., 6160.,
      5040., 5600., 6160., 6720., 2880., 3328., 3776., 4224., 3328., 3840.,
      4352., 4864., 3776., 4352., 4928., 5504., 4224., 4864., 5504., 6144.,
      2664., 3168., 3672., 4176., 3168., 3744., 4320., 4896., 3672., 4320.,
      4968., 5616., 4176., 4896., 5616., 6336., 2880., 3328., 3776., 4224.,
      3328., 3840., 4352., 4864., 3776., 4352., 4928., 5504., 4224., 4864.,
      5504., 6144., 3864., 4256., 4648., 5040., 4256., 4704., 5152., 5600.,
      4648., 5152., 5656., 6160., 5040., 5600., 6160., 6720., 2160., 2496.,
      2832., 3168., 2496., 2880., 3264., 3648., 2832., 3264., 3696., 4128.,
      3168., 3648., 4128., 4608., 3614., 3984., 4354., 4724., 3984., 4408.,
      4832., 5256., 4354., 4832., 5310., 5788., 4724., 5256., 5788., 6320.,
      2763., 3198., 3633., 4068., 3202., 3700., 4198., 4696., 3641., 4202.,
      4763., 5324., 4080., 4704., 5328., 5952., 2664., 3168., 3672., 4176.,
      3168., 3744., 4320., 4896., 3672., 4320., 4968., 5616., 4176., 4896.,
      5616., 6336., 3605., 4166., 4727., 5288., 4170., 4812., 5454., 6096.,
      4735., 5458., 6181., 6904., 5300., 6104., 6908., 7712., 4968., 5472.,
      5976., 6480., 5472., 6048., 6624., 7200., 5976., 6624., 7272., 7920.,
      6480., 7200., 7920., 8640., 2875., 3318., 3761., 4204., 3322., 3828.,
      4334., 4840., 3769., 4338., 4907., 5476., 4216., 4848., 5480., 6112.,
      1998., 2376., 2754., 3132., 2376., 2808., 3240., 3672., 2754., 3240.,
      3726., 4212., 3132., 3672., 4212., 4752., 2588., 3000., 3412., 3824.,
      3000., 3472., 3944., 4416., 3412., 3944., 4476., 5008., 3824., 4416.,
      5008., 5600., 2590., 3080., 3570., 4060., 3080., 3640., 4200., 4760.,
      3570., 4200., 4830., 5460., 4060., 4760., 5460., 6160., 3600., 4160.,
      4720., 5280., 4160., 4800., 5440., 6080., 4720., 5440., 6160., 6880.,
      5280., 6080., 6880., 7680., 6098., 6720., 7342., 7964., 6720., 7432.,
      8144., 8856., 7342., 8144., 8946., 9748., 7964., 8856., 9748., 10640.,
      3600., 4160., 4720., 5280., 4160., 4800., 5440., 6080., 4720., 5440.,
      6160., 6880., 5280., 6080., 6880., 7680., 2590., 3080., 3570., 4060.,
      3080., 3640., 4200., 4760., 3570., 4200., 4830., 5460., 4060., 4760.,
      5460., 6160., 2588., 3000., 3412., 3824., 3000., 3472., 3944., 4416.,
      3412., 3944., 4476., 5008., 3824., 4416., 5008., 5600., 1998., 2376.,
      2754., 3132., 2376., 2808., 3240., 3672., 2754., 3240., 3726., 4212.,
      3132., 3672., 4212., 4752., 2875., 3322., 3769., 4216., 3318., 3828.,
      4338., 4848., 3761., 4334., 4907., 5480., 4204., 4840., 5476., 6112.,
      4968., 5472., 5976., 6480., 5472., 6048., 6624., 7200., 5976., 6624.,
      7272., 7920., 6480., 7200., 7920., 8640., 3605., 4170., 4735., 5300.,
      4166., 4812., 5458., 6104., 4727., 5454., 6181., 6908., 5288., 6096.,
      6904., 7712., 2664., 3168., 3672., 4176., 3168., 3744., 4320., 4896.,
      3672., 4320., 4968., 5616., 4176., 4896., 5616., 6336., 2763., 3202.,
      3641., 4080., 3198., 3700., 4202., 4704., 3633., 4198., 4763., 5328.,
      4068., 4696., 5324., 5952., 3614., 3984., 4354., 4724., 3984., 4408.,
      4832., 5256., 4354., 4832., 5310., 5788., 4724., 5256., 5788., 6320.,
      2160., 2496., 2832., 3168., 2496., 2880., 3264., 3648., 2832., 3264.,
      3696., 4128., 3168., 3648., 4128., 4608., 3864., 4256., 4648., 5040.,
      4256., 4704., 5152., 5600., 4648., 5152., 5656., 6160., 5040., 5600.,
      6160., 6720., 2880., 3328., 3776., 4224., 3328., 3840., 4352., 4864.,
      3776., 4352., 4928., 5504., 4224., 4864., 5504., 6144., 2664., 3168.,
      3672., 4176., 3168., 3744., 4320., 4896., 3672., 4320., 4968., 5616.,
      4176., 4896., 5616., 6336., 2880., 3328., 3776., 4224., 3328., 3840.,
      4352., 4864., 3776., 4352., 4928., 5504., 4224., 4864., 5504., 6144.,
      3864., 4256., 4648., 5040., 4256., 4704., 5152., 5600., 4648., 5152.,
      5656., 6160., 5040., 5600., 6160., 6720., 2160., 2496., 2832., 3168.,
      2496., 2880., 3264., 3648., 2832., 3264., 3696., 4128., 3168., 3648.,
      4128., 4608., 2786., 3072., 3358., 3644., 3072., 3400., 3728., 4056.,
      3358., 3728., 4098., 4468., 3644., 4056., 4468., 4880., 2165., 2506.,
      2847., 3188., 2502., 2892., 3282., 3672., 2839., 3278., 3717., 4156.,
      3176., 3664., 4152., 4640., 2072., 2464., 2856., 3248., 2464., 2912.,
      3360., 3808., 2856., 3360., 3864., 4368., 3248., 3808., 4368., 4928.,
      2763., 3202., 3641., 4080., 3198., 3700., 4202., 4704., 3633., 4198.,
      4763., 5328., 4068., 4696., 5324., 5952., 3864., 4256., 4648., 5040.,
      4256., 4704., 5152., 5600., 4648., 5152., 5656., 6160., 5040., 5600.,
      6160., 6720., 2277., 2626., 2975., 3324., 2622., 3020., 3418., 3816.,
      2967., 3414., 3861., 4308., 3312., 3808., 4304., 4800., 1554., 1848.,
      2142., 2436., 1848., 2184., 2520., 2856., 2142., 2520., 2898., 3276.,
      2436., 2856., 3276., 3696.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22892., 23600., 24308., 25016., 23168., 23888., 24608., 25328., 23444.,
      24176., 24908., 25640., 23720., 24464., 25208., 25952., 23996., 24752.,
      25508., 26264., 24272., 25040., 25808., 26576., 24548., 25328., 26108.,
      26888., 24824., 25616., 26408., 27200., 25100., 25904., 26708., 27512.,
      25376., 26192., 27008., 27824., 25652., 26480., 27308., 28136., 25928.,
      26768., 27608., 28448., 20444., 21168., 21892., 22616., 20720., 21456.,
      22192., 22928., 20996., 21744., 22492., 23240., 21272., 22032., 22792.,
      23552., 16300., 16944., 17588., 18232., 16576., 17232., 17888., 18544.,
      16852., 17520., 18188., 18856., 17128., 17808., 18488., 19168., 12668.,
      13232., 13796., 14360., 12944., 13520., 14096., 14672., 13220., 13808.,
      14396., 14984., 13496., 14096., 14696., 15296., 13772., 14384., 14996.,
      15608., 14048., 14672., 15296., 15920., 14324., 14960., 15596., 16232.,
      14600., 15248., 15896., 16544., 17084., 17840., 18596., 19352., 17360.,
      18128., 18896., 19664., 17636., 18416., 19196., 19976., 17912., 18704.,
      19496., 20288., 18188., 18992., 19796., 20600., 18464., 19280., 20096.,
      20912., 18740., 19568., 20396., 21224., 19016., 19856., 20696., 21536.,
      19292., 20144., 20996., 21848., 19568., 20432., 21296., 22160., 19844.,
      20720., 21596., 22472., 20120., 21008., 21896., 22784., 16172., 16944.,
      17716., 18488., 16448., 17232., 18016., 18800., 16724., 17520., 18316.,
      19112., 17000., 17808., 18616., 19424., 13564., 14256., 14948., 15640.,
      13840., 14544., 15248., 15952., 14116., 14832., 15548., 16264., 14392.,
      15120., 15848., 16576., 11468., 12080., 12692., 13304., 11744., 12368.,
      12992., 13616., 12020., 12656., 13292., 13928., 12296., 12944., 13592.,
      14240., 12572., 13232., 13892., 14552., 12848., 13520., 14192., 14864.,
      13124., 13808., 14492., 15176., 13400., 14096., 14792., 15488., 15884.,
      16688., 17492., 18296., 16160., 16976., 17792., 18608., 16436., 17264.,
      18092., 18920., 16712., 17552., 18392., 19232., 16988., 17840., 18692.,
      19544., 17264., 18128., 18992., 19856., 17540., 18416., 19292., 20168.,
      17816., 18704., 19592., 20480., 18092., 18992., 19892., 20792., 18368.,
      19280., 20192., 21104., 18644., 19568., 20492., 21416., 18920., 19856.,
      20792., 21728., 16508., 17328., 18148., 18968., 16784., 17616., 18448.,
      19280., 17060., 17904., 18748., 19592., 17336., 18192., 19048., 19904.,
      15436., 16176., 16916., 17656., 15712., 16464., 17216., 17968., 15988.,
      16752., 17516., 18280., 16264., 17040., 17816., 18592., 14876., 15536.,
      16196., 16856., 15152., 15824., 16496., 17168., 15428., 16112., 16796.,
      17480., 15704., 16400., 17096., 17792., 15980., 16688., 17396., 18104.,
      16256., 16976., 17696., 18416., 16532., 17264., 17996., 18728., 16808.,
      17552., 18296., 19040., 19292., 20144., 20996., 21848., 19568., 20432.,
      21296., 22160., 19844., 20720., 21596., 22472., 20120., 21008., 21896.,
      22784., 20396., 21296., 22196., 23096., 20672., 21584., 22496., 23408.,
      20948., 21872., 22796., 23720., 21224., 22160., 23096., 24032., 21500.,
      22448., 23396., 24344., 21776., 22736., 23696., 24656., 22052., 23024.,
      23996., 24968., 22328., 23312., 24296., 25280., 21452., 22320., 23188.,
      24056., 21728., 22608., 23488., 24368., 22004., 22896., 23788., 24680.,
      22280., 23184., 24088., 24992., 21916., 22704., 23492., 24280., 22192.,
      22992., 23792., 24592., 22468., 23280., 24092., 24904., 22744., 23568.,
      24392., 25216., 22892., 23600., 24308., 25016., 23168., 23888., 24608.,
      25328., 23444., 24176., 24908., 25640., 23720., 24464., 25208., 25952.,
      23996., 24752., 25508., 26264., 24272., 25040., 25808., 26576., 24548.,
      25328., 26108., 26888., 24824., 25616., 26408., 27200., 16300., 16944.,
      17588., 18232., 16576., 17232., 17888., 18544., 16852., 17520., 18188.,
      18856., 17128., 17808., 18488., 19168., 12668., 13232., 13796., 14360.,
      12944., 13520., 14096., 14672., 13220., 13808., 14396., 14984., 13496.,
      14096., 14696., 15296., 13772., 14384., 14996., 15608., 14048., 14672.,
      15296., 15920., 14324., 14960., 15596., 16232., 14600., 15248., 15896.,
      16544., 14876., 15536., 16196., 16856., 15152., 15824., 16496., 17168.,
      15428., 16112., 16796., 17480., 15704., 16400., 17096., 17792., 15980.,
      16688., 17396., 18104., 16256., 16976., 17696., 18416., 16532., 17264.,
      17996., 18728., 16808., 17552., 18296., 19040., 17084., 17840., 18596.,
      19352., 17360., 18128., 18896., 19664., 17636., 18416., 19196., 19976.,
      17912., 18704., 19496., 20288., 18188., 18992., 19796., 20600., 18464.,
      19280., 20096., 20912., 18740., 19568., 20396., 21224., 19016., 19856.,
      20696., 21536., 13564., 14256., 14948., 15640., 13840., 14544., 15248.,
      15952., 14116., 14832., 15548., 16264., 14392., 15120., 15848., 16576.,
      11468., 12080., 12692., 13304., 11744., 12368., 12992., 13616., 12020.,
      12656., 13292., 13928., 12296., 12944., 13592., 14240., 12572., 13232.,
      13892., 14552., 12848., 13520., 14192., 14864., 13124., 13808., 14492.,
      15176., 13400., 14096., 14792., 15488., 13676., 14384., 15092., 15800.,
      13952., 14672., 15392., 16112., 14228., 14960., 15692., 16424., 14504.,
      15248., 15992., 16736., 14780., 15536., 16292., 17048., 15056., 15824.,
      16592., 17360., 15332., 16112., 16892., 17672., 15608., 16400., 17192.,
      17984., 15884., 16688., 17492., 18296., 16160., 16976., 17792., 18608.,
      16436., 17264., 18092., 18920., 16712., 17552., 18392., 19232., 16988.,
      17840., 18692., 19544., 17264., 18128., 18992., 19856., 17540., 18416.,
      19292., 20168., 17816., 18704., 19592., 20480., 15436., 16176., 16916.,
      17656., 15712., 16464., 17216., 17968., 15988., 16752., 17516., 18280.,
      16264., 17040., 17816., 18592., 14876., 15536., 16196., 16856., 15152.,
      15824., 16496., 17168., 15428., 16112., 16796., 17480., 15704., 16400.,
      17096., 17792., 15980., 16688., 17396., 18104., 16256., 16976., 17696.,
      18416., 16532., 17264., 17996., 18728., 16808., 17552., 18296., 19040.,
      17084., 17840., 18596., 19352., 17360., 18128., 18896., 19664., 17636.,
      18416., 19196., 19976., 17912., 18704., 19496., 20288., 18188., 18992.,
      19796., 20600., 18464., 19280., 20096., 20912., 18740., 19568., 20396.,
      21224., 19016., 19856., 20696., 21536., 19292., 20144., 20996., 21848.,
      19568., 20432., 21296., 22160., 19844., 20720., 21596., 22472., 20120.,
      21008., 21896., 22784., 20396., 21296., 22196., 23096., 20672., 21584.,
      22496., 23408., 20948., 21872., 22796., 23720., 21224., 22160., 23096.,
      24032.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4074., 5060., 5086., 5185., 4336., 3556., 2964., 3480., 4064., 4776.,
      5560., 5288., 5088., 4760., 4256., 4668., 5028., 5471., 4910., 4428.,
      4018., 5046., 6152., 7534., 9006., 7534., 6152., 5046., 4018., 4428.,
      4910., 5471., 5028., 4668., 4256., 4760., 5088., 5288., 5560., 4776.,
      4064., 3480., 2964., 3556., 4336., 5185., 5086., 5060., 4074.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200.,  3336.,  3472.,  3608.,  3744.,  3880.,  4016.,  4560.,  4696.,
      4832.,  4968.,  5104.,  5240.,  5376.,  5920.,  6056.,  6192.,  6328.,
      6464.,  6600.,  6736.,  7280.,  7416.,  7552.,  7688.,  7824.,  7960.,
      8096.,  8640.,  8776.,  8912.,  9048.,  9184.,  9320.,  9456.,  10000.,
      10136., 10272., 10408., 10544., 10680., 10816., 11360., 11496., 11632.,
      11768., 11904., 12040., 12176.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13074., 13812., 16060., 16904., 17023., 17980., 17997., 19074., 15140.,
      16096., 12556., 13384., 10323., 11048., 12776., 13584., 14496., 15424.,
      16560., 17616., 18632., 19824., 17192., 18256., 16032., 16960., 14272.,
      15088., 14348., 15296., 16180., 17272., 18667., 19912., 21151., 22558.,
      18766., 20028., 16708., 17816., 15187., 16164., 17638., 18764., 20920.,
      22192., 25192., 26620., 29474., 31068., 24846., 26268., 20600., 21840.,
      17012., 18092., 17018., 18116., 18660., 19896., 20565., 21948., 22459.,
      23998., 20272., 21640., 18452., 19640., 16313., 17344., 17448., 18448.,
      18208., 19328., 19568., 20816., 20936., 22320., 17544., 18768., 14496.,
      15552., 12192., 13104., 11304., 12136., 12908., 13832., 15457., 16480.,
      18041., 19170., 16894., 17884., 16060., 16904., 12929., 13652.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6120.,  6400.,  6376.,  6672.,  6632.,  6944.,  6888.,  7216.,  7144.,
      7488.,  7400.,  7760.,  7656.,  8032.,  8680.,  9120.,  8936.,  9392.,
      9192.,  9664.,  9448.,  9936.,  9704.,  10208., 9960.,  10480., 10216.,
      10752., 11240., 11840., 11496., 12112., 11752., 12384., 12008., 12656.,
      12264., 12928., 12520., 13200., 12776., 13472., 13800., 14560., 14056.,
      14832., 14312., 15104., 14568., 15376., 14824., 15648., 15080., 15920.,
      15336., 16192., 16360., 17280., 16616., 17552., 16872., 17824., 17128.,
      18096., 17384., 18368., 17640., 18640., 17896., 18912., 18920., 20000.,
      19176., 20272., 19432., 20544., 19688., 20816., 19944., 21088., 20200.,
      21360., 20456., 21632., 21480., 22720., 21736., 22992., 21992., 23264.,
      22248., 23536., 22504., 23808., 22760., 24080., 23016., 24352.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11938., 12676., 13414., 14152., 14540., 15384., 16228., 17072., 15265.,
      16222., 17179., 18136., 15877., 16954., 18031., 19108., 13772., 14728.,
      15684., 16640., 12316., 13144., 13972., 14800., 10353., 11078., 11803.,
      12528., 13608., 14416., 15224., 16032., 14240., 15168., 16096., 17024.,
      15680., 16736., 17792., 18848., 17000., 18192., 19384., 20576., 14760.,
      15824., 16888., 17952., 13216., 14144., 15072., 16000., 11344., 12160.,
      12976., 13792., 13604., 14552., 15500., 16448., 15076., 16168., 17260.,
      18352., 17945., 19190., 20435., 21680., 20639., 22046., 23453., 24860.,
      18638., 19900., 21162., 22424., 17428., 18536., 19644., 20752., 15093.,
      16070., 17047., 18024., 15814., 16940., 18066., 19192., 18520., 19792.,
      21064., 22336., 22268., 23696., 25124., 26552., 25866., 27460., 29054.,
      30648., 21998., 23420., 24842., 26264., 19064., 20304., 21544., 22784.,
      15952., 17032., 18112., 19192., 17930., 19028., 20126., 21224., 21140.,
      22376., 23612., 24848., 21923., 23306., 24689., 26072., 22547., 24086.,
      25625., 27164., 19208., 20576., 21944., 23312., 16772., 17960., 19148.,
      20336., 13931., 14962., 15993., 17024., 16104., 17104., 18104., 19104.,
      16352., 17472., 18592., 19712., 17920., 19168., 20416., 21664., 19368.,
      20752., 22136., 23520., 16840., 18064., 19288., 20512., 15136., 16192.,
      17248., 18304., 13232., 14144., 15056., 15968., 11152., 11984., 12816.,
      13648., 12220., 13144., 14068., 14992., 14147., 15170., 16193., 17216.,
      16009., 17138., 18267., 19396., 14910., 15900., 16890., 17880., 14540.,
      15384., 16228., 17072., 11951., 12674., 13397., 14120.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11960., 12240., 12520., 12800., 12456., 12752., 13048., 13344., 12952.,
      13264., 13576., 13888., 13448., 13776., 14104., 14432., 13944., 14288.,
      14632., 14976., 14440., 14800., 15160., 15520., 14936., 15312., 15688.,
      16064., 16920., 17360., 17800., 18240., 17416., 17872., 18328., 18784.,
      17912., 18384., 18856., 19328., 18408., 18896., 19384., 19872., 18904.,
      19408., 19912., 20416., 19400., 19920., 20440., 20960., 19896., 20432.,
      20968., 21504., 21880., 22480., 23080., 23680., 22376., 22992., 23608.,
      24224., 22872., 23504., 24136., 24768., 23368., 24016., 24664., 25312.,
      23864., 24528., 25192., 25856., 24360., 25040., 25720., 26400., 24856.,
      25552., 26248., 26944., 26840., 27600., 28360., 29120., 23432., 24144.,
      24856., 25568., 20280., 20944., 21608., 22272., 17384., 18000., 18616.,
      19232., 14744., 15312., 15880., 16448., 15240., 15824., 16408., 16992.,
      15736., 16336., 16936., 17536., 17720., 18384., 19048., 19712., 15336.,
      15952., 16568., 17184., 13208., 13776., 14344., 14912., 11336., 11856.,
      12376., 12896., 9720.,  10192., 10664., 11136., 10216., 10704., 11192.,
      11680., 10712., 11216., 11720., 12224., 12696., 13264., 13832., 14400.,
      11336., 11856., 12376., 12896., 10232., 10704., 11176., 11648., 9384.,
      9808.,  10232., 10656., 8792.,  9168.,  9544.,  9920.,  9288.,  9680.,
      10072., 10464., 9784.,  10192., 10600., 11008., 11768., 12240., 12712.,
      13184., 11432., 11856., 12280., 12704., 11352., 11728., 12104., 12480.,
      11528., 11856., 12184., 12512., 11960., 12240., 12520., 12800., 12456.,
      12752., 13048., 13344., 12952., 13264., 13576., 13888.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12929., 13652., 16060., 16904., 16894., 17884., 18041., 19170., 15457.,
      16480., 12908., 13832., 11304., 12136., 12192., 13104., 14496., 15552.,
      17544., 18768., 20936., 22320., 19568., 20816., 18208., 19328., 17448.,
      18448., 16313., 17344., 18452., 19640., 20272., 21640., 22459., 23998.,
      20565., 21948., 18660., 19896., 17018., 18116., 17012., 18092., 20600.,
      21840., 24846., 26268., 29474., 31068., 25192., 26620., 20920., 22192.,
      17638., 18764., 15187., 16164., 16708., 17816., 18766., 20028., 21151.,
      22558., 18667., 19912., 16180., 17272., 14348., 15296., 14272., 15088.,
      16032., 16960., 17192., 18256., 18632., 19824., 16560., 17616., 14496.,
      15424., 12776., 13584., 10323., 11048., 12556., 13384., 15140., 16096.,
      17997., 19074., 17023., 17980., 16060., 16904., 13074., 13812.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6264.,  6400.,  6536.,  6672.,  6808.,  6944.,  7080.,  7216.,  7352.,
      7488.,  7624.,  7760.,  7896.,  8032.,  8984.,  9120.,  9256.,  9392.,
      9528.,  9664.,  9800.,  9936.,  10072., 10208., 10344., 10480., 10616.,
      10752., 11704., 11840., 11976., 12112., 12248., 12384., 12520., 12656.,
      12792., 12928., 13064., 13200., 13336., 13472., 14424., 14560., 14696.,
      14832., 14968., 15104., 15240., 15376., 15512., 15648., 15784., 15920.,
      16056., 16192., 17144., 17280., 17416., 17552., 17688., 17824., 17960.,
      18096., 18232., 18368., 18504., 18640., 18776., 18912., 19864., 20000.,
      20136., 20272., 20408., 20544., 20680., 20816., 20952., 21088., 21224.,
      21360., 21496., 21632., 22584., 22720., 22856., 22992., 23128., 23264.,
      23400., 23536., 23672., 23808., 23944., 24080., 24216., 24352.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3647., 4034., 4052., 4488., 4760., 5208., 5208., 5712., 4305., 4796.,
      4814., 5368., 4110., 4658., 4666., 5284., 3417., 3922., 3912., 4480.,
      2968., 3416., 3416., 3920., 2615., 3008., 2998., 3440., 3880., 4320.,
      4336., 4832., 3904., 4416., 4416., 4992., 3928., 4496., 4512., 5152.,
      4240., 4880., 4880., 5600., 3928., 4512., 4496., 5152., 3904., 4416.,
      4416., 4992., 3880., 4336., 4320., 4832., 3353., 3842., 3864., 4416.,
      3816., 4392., 4392., 5040., 4439., 5072., 5094., 5808., 5394., 6102.,
      6110., 6908., 5599., 6250., 6236., 6968., 6120., 6696., 6696., 7344.,
      4625., 5140., 5126., 5704., 3890., 4440., 4460., 5080., 4880., 5520.,
      5520., 6240., 6382., 7084., 7104., 7896., 8244., 9028., 9028., 9912.,
      6382., 7104., 7084., 7896., 4880., 5520., 5520., 6240., 3890., 4460.,
      4440., 5080., 4625., 5126., 5140., 5704., 6120., 6696., 6696., 7344.,
      5599., 6236., 6250., 6968., 5394., 6110., 6102., 6908., 4439., 5094.,
      5072., 5808., 3816., 4392., 4392., 5040., 3353., 3864., 3842., 4416.,
      3880., 4320., 4336., 4832., 3904., 4416., 4416., 4992., 3928., 4496.,
      4512., 5152., 4240., 4880., 4880., 5600., 3928., 4512., 4496., 5152.,
      3904., 4416., 4416., 4992., 3880., 4336., 4320., 4832., 2615., 2998.,
      3008., 3440., 2968., 3416., 3416., 3920., 3417., 3912., 3922., 4480.,
      4110., 4666., 4658., 5284., 4305., 4814., 4796., 5368., 4760., 5208.,
      5208., 5712., 3647., 4052., 4034., 4488.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11984., 12528., 12240., 12800., 12496., 13072., 12752., 13344., 13008.,
      13616., 13264., 13888., 13520., 14160., 13776., 14432., 14032., 14704.,
      14288., 14976., 14544., 15248., 14800., 15520., 15056., 15792., 15312.,
      16064., 17104., 17968., 17360., 18240., 17616., 18512., 17872., 18784.,
      18128., 19056., 18384., 19328., 18640., 19600., 18896., 19872., 19152.,
      20144., 19408., 20416., 19664., 20688., 19920., 20960., 20176., 21232.,
      20432., 21504., 22224., 23408., 22480., 23680., 22736., 23952., 22992.,
      24224., 23248., 24496., 23504., 24768., 23760., 25040., 24016., 25312.,
      24272., 25584., 24528., 25856., 24784., 26128., 25040., 26400., 25296.,
      26672., 25552., 26944., 27344., 28848., 27600., 29120., 23888., 25296.,
      24144., 25568., 20688., 22000., 20944., 22272., 17744., 18960., 18000.,
      19232., 15056., 16176., 15312., 16448., 15568., 16720., 15824., 16992.,
      16080., 17264., 16336., 17536., 18128., 19440., 18384., 19712., 15696.,
      16912., 15952., 17184., 13520., 14640., 13776., 14912., 11600., 12624.,
      11856., 12896., 9936.,  10864., 10192., 11136., 10448., 11408., 10704.,
      11680., 10960., 11952., 11216., 12224., 13008., 14128., 13264., 14400.,
      11600., 12624., 11856., 12896., 10448., 11376., 10704., 11648., 9552.,
      10384., 9808.,  10656., 8912.,  9648.,  9168.,  9920.,  9424.,  10192.,
      9680.,  10464., 9936.,  10736., 10192., 11008., 11984., 12912., 12240.,
      13184., 11600., 12432., 11856., 12704., 11472., 12208., 11728., 12480.,
      11600., 12240., 11856., 12512., 11984., 12528., 12240., 12800., 12496.,
      13072., 12752., 13344., 13008., 13616., 13264., 13888.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2827., 3214., 3601., 3988., 3188., 3624., 4060., 4496., 3696., 4144.,
      4592., 5040., 4088., 4592., 5096., 5600., 3399., 3890., 4381., 4872.,
      3858., 4412., 4966., 5520., 3512., 4060., 4608., 5156., 4010., 4628.,
      5246., 5864., 3305., 3810., 4315., 4820., 3736., 4304., 4872., 5440.,
      3696., 4144., 4592., 5040., 4088., 4592., 5096., 5600., 2597., 2990.,
      3383., 3776., 2930., 3372., 3814., 4256., 3032., 3472., 3912., 4352.,
      3440., 3936., 4432., 4928., 3200., 3712., 4224., 4736., 3648., 4224.,
      4800., 5376., 4024., 4592., 5160., 5728., 4544., 5184., 5824., 6464.,
      5280., 5920., 6560., 7200., 5840., 6560., 7280., 8000., 3880., 4464.,
      5048., 5632., 4368., 5024., 5680., 6336., 3200., 3712., 4224., 4736.,
      3648., 4224., 4800., 5376., 2888., 3344., 3800., 4256., 3264., 3776.,
      4288., 4800., 3577., 4066., 4555., 5044., 4040., 4592., 5144., 5696.,
      4752., 5328., 5904., 6480., 5256., 5904., 6552., 7200., 4341., 4974.,
      5607., 6240., 4930., 5644., 6358., 7072., 4448., 5156., 5864., 6572.,
      5086., 5884., 6682., 7480., 4211., 4862., 5513., 6164., 4764., 5496.,
      6228., 6960., 4752., 5328., 5904., 6480., 5256., 5904., 6552., 7200.,
      3423., 3938., 4453., 4968., 3850., 4428., 5006., 5584., 3758., 4308.,
      4858., 5408., 4268., 4888., 5508., 6128., 4000., 4640., 5280., 5920.,
      4560., 5280., 6000., 6720., 4958., 5660., 6362., 7064., 5608., 6400.,
      7192., 7984., 6488., 7272., 8056., 8840., 7188., 8072., 8956., 9840.,
      4810., 5532., 6254., 6976., 5420., 6232., 7044., 7856., 4000., 4640.,
      5280., 5920., 4560., 5280., 6000., 6720., 3642., 4212., 4782., 5352.,
      4112., 4752., 5392., 6032., 3565., 4066., 4567., 5068., 4020., 4584.,
      5148., 5712., 4752., 5328., 5904., 6480., 5256., 5904., 6552., 7200.,
      4353., 4990., 5627., 6264., 4934., 5652., 6370., 7088., 4440., 5156.,
      5872., 6588., 5062., 5868., 6674., 7480., 4191., 4846., 5501., 6156.,
      4736., 5472., 6208., 6944., 4752., 5328., 5904., 6480., 5256., 5904.,
      6552., 7200., 3331., 3842., 4353., 4864., 3750., 4324., 4898., 5472.,
      3032., 3472., 3912., 4352., 3440., 3936., 4432., 4928., 3200., 3712.,
      4224., 4736., 3648., 4224., 4800., 5376., 4024., 4592., 5160., 5728.,
      4544., 5184., 5824., 6464., 5280., 5920., 6560., 7200., 5840., 6560.,
      7280., 8000., 3880., 4464., 5048., 5632., 4368., 5024., 5680., 6336.,
      3200., 3712., 4224., 4736., 3648., 4224., 4800., 5376., 2888., 3344.,
      3800., 4256., 3264., 3776., 4288., 4800., 2735., 3118., 3501., 3884.,
      3088., 3520., 3952., 4384., 3696., 4144., 4592., 5040., 4088., 4592.,
      5096., 5600., 3347., 3842., 4337., 4832., 3798., 4356., 4914., 5472.,
      3376., 3932., 4488., 5044., 3858., 4484., 5110., 5736., 3221., 3730.,
      4239., 4748., 3644., 4216., 4788., 5360., 3696., 4144., 4592., 5040.,
      4088., 4592., 5096., 5600., 2649., 3054., 3459., 3864., 2974., 3428.,
      3882., 4336.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15872., 16288., 16704., 17120., 16368., 16800., 17232., 17664., 13472.,
      13856., 14240., 14624., 13968., 14368., 14768., 15168., 11328., 11680.,
      12032., 12384., 11824., 12192., 12560., 12928., 12320., 12704., 13088.,
      13472., 12816., 13216., 13616., 14016., 13312., 13728., 14144., 14560.,
      13808., 14240., 14672., 15104., 14304., 14752., 15200., 15648., 14800.,
      15264., 15728., 16192., 15296., 15776., 16256., 16736., 15792., 16288.,
      16784., 17280., 13760., 14240., 14720., 15200., 14256., 14752., 15248.,
      15744., 12384., 12832., 13280., 13728., 12880., 13344., 13808., 14272.,
      11264., 11680., 12096., 12512., 11760., 12192., 12624., 13056., 12256.,
      12704., 13152., 13600., 12752., 13216., 13680., 14144., 13248., 13728.,
      14208., 14688., 13744., 14240., 14736., 15232., 14240., 14752., 15264.,
      15776., 14736., 15264., 15792., 16320., 15232., 15776., 16320., 16864.,
      15728., 16288., 16848., 17408., 15744., 16288., 16832., 17376., 16240.,
      16800., 17360., 17920., 15392., 15904., 16416., 16928., 15888., 16416.,
      16944., 17472., 15296., 15776., 16256., 16736., 15792., 16288., 16784.,
      17280., 16288., 16800., 17312., 17824., 16784., 17312., 17840., 18368.,
      17280., 17824., 18368., 18912., 17776., 18336., 18896., 19456., 18272.,
      18848., 19424., 20000., 18768., 19360., 19952., 20544., 19264., 19872.,
      20480., 21088., 19760., 20384., 21008., 21632., 21824., 22432., 23040.,
      23648., 22320., 22944., 23568., 24192., 18592., 19104., 19616., 20128.,
      19088., 19616., 20144., 20672., 15872., 16288., 16704., 17120., 16368.,
      16800., 17232., 17664., 13472., 13856., 14240., 14624., 13968., 14368.,
      14768., 15168., 11328., 11680., 12032., 12384., 11824., 12192., 12560.,
      12928., 12320., 12704., 13088., 13472., 12816., 13216., 13616., 14016.,
      13312., 13728., 14144., 14560., 13808., 14240., 14672., 15104., 17280.,
      17824., 18368., 18912., 17776., 18336., 18896., 19456., 15392., 15904.,
      16416., 16928., 15888., 16416., 16944., 17472., 13760., 14240., 14720.,
      15200., 14256., 14752., 15248., 15744., 12384., 12832., 13280., 13728.,
      12880., 13344., 13808., 14272., 11264., 11680., 12096., 12512., 11760.,
      12192., 12624., 13056., 12256., 12704., 13152., 13600., 12752., 13216.,
      13680., 14144., 13248., 13728., 14208., 14688., 13744., 14240., 14736.,
      15232., 17216., 17824., 18432., 19040., 17712., 18336., 18960., 19584.,
      16352., 16928., 17504., 18080., 16848., 17440., 18032., 18624., 15744.,
      16288., 16832., 17376., 16240., 16800., 17360., 17920., 15392., 15904.,
      16416., 16928., 15888., 16416., 16944., 17472., 15296., 15776., 16256.,
      16736., 15792., 16288., 16784., 17280., 16288., 16800., 17312., 17824.,
      16784., 17312., 17840., 18368., 17280., 17824., 18368., 18912., 17776.,
      18336., 18896., 19456., 21248., 21920., 22592., 23264., 21744., 22432.,
      23120., 23808., 21408., 22048., 22688., 23328., 21904., 22560., 23216.,
      23872., 21824., 22432., 23040., 23648., 22320., 22944., 23568., 24192.,
      18592., 19104., 19616., 20128., 19088., 19616., 20144., 20672., 15872.,
      16288., 16704., 17120., 16368., 16800., 17232., 17664., 13472., 13856.,
      14240., 14624., 13968., 14368., 14768., 15168., 11328., 11680., 12032.,
      12384., 11824., 12192., 12560., 12928.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11951., 12674., 13397., 14120., 14540., 15384., 16228., 17072., 14910.,
      15900., 16890., 17880., 16009., 17138., 18267., 19396., 14147., 15170.,
      16193., 17216., 12220., 13144., 14068., 14992., 11152., 11984., 12816.,
      13648., 13232., 14144., 15056., 15968., 15136., 16192., 17248., 18304.,
      16840., 18064., 19288., 20512., 19368., 20752., 22136., 23520., 17920.,
      19168., 20416., 21664., 16352., 17472., 18592., 19712., 16104., 17104.,
      18104., 19104., 13931., 14962., 15993., 17024., 16772., 17960., 19148.,
      20336., 19208., 20576., 21944., 23312., 22547., 24086., 25625., 27164.,
      21923., 23306., 24689., 26072., 21140., 22376., 23612., 24848., 17930.,
      19028., 20126., 21224., 15952., 17032., 18112., 19192., 19064., 20304.,
      21544., 22784., 21998., 23420., 24842., 26264., 25866., 27460., 29054.,
      30648., 22268., 23696., 25124., 26552., 18520., 19792., 21064., 22336.,
      15814., 16940., 18066., 19192., 15093., 16070., 17047., 18024., 17428.,
      18536., 19644., 20752., 18638., 19900., 21162., 22424., 20639., 22046.,
      23453., 24860., 17945., 19190., 20435., 21680., 15076., 16168., 17260.,
      18352., 13604., 14552., 15500., 16448., 11344., 12160., 12976., 13792.,
      13216., 14144., 15072., 16000., 14760., 15824., 16888., 17952., 17000.,
      18192., 19384., 20576., 15680., 16736., 17792., 18848., 14240., 15168.,
      16096., 17024., 13608., 14416., 15224., 16032., 10353., 11078., 11803.,
      12528., 12316., 13144., 13972., 14800., 13772., 14728., 15684., 16640.,
      15877., 16954., 18031., 19108., 15265., 16222., 17179., 18136., 14540.,
      15384., 16228., 17072., 11938., 12676., 13414., 14152.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12392., 12528., 12664., 12800., 12936., 13072., 13208., 13344., 13480.,
      13616., 13752., 13888., 14024., 14160., 14296., 14432., 14568., 14704.,
      14840., 14976., 15112., 15248., 15384., 15520., 15656., 15792., 15928.,
      16064., 17832., 17968., 18104., 18240., 18376., 18512., 18648., 18784.,
      18920., 19056., 19192., 19328., 19464., 19600., 19736., 19872., 20008.,
      20144., 20280., 20416., 20552., 20688., 20824., 20960., 21096., 21232.,
      21368., 21504., 23272., 23408., 23544., 23680., 23816., 23952., 24088.,
      24224., 24360., 24496., 24632., 24768., 24904., 25040., 25176., 25312.,
      25448., 25584., 25720., 25856., 25992., 26128., 26264., 26400., 26536.,
      26672., 26808., 26944., 28712., 28848., 28984., 29120., 25160., 25296.,
      25432., 25568., 21864., 22000., 22136., 22272., 18824., 18960., 19096.,
      19232., 16040., 16176., 16312., 16448., 16584., 16720., 16856., 16992.,
      17128., 17264., 17400., 17536., 19304., 19440., 19576., 19712., 16776.,
      16912., 17048., 17184., 14504., 14640., 14776., 14912., 12488., 12624.,
      12760., 12896., 10728., 10864., 11000., 11136., 11272., 11408., 11544.,
      11680., 11816., 11952., 12088., 12224., 13992., 14128., 14264., 14400.,
      12488., 12624., 12760., 12896., 11240., 11376., 11512., 11648., 10248.,
      10384., 10520., 10656., 9512.,  9648.,  9784.,  9920.,  10056., 10192.,
      10328., 10464., 10600., 10736., 10872., 11008., 12776., 12912., 13048.,
      13184., 12296., 12432., 12568., 12704., 12072., 12208., 12344., 12480.,
      12104., 12240., 12376., 12512., 12392., 12528., 12664., 12800., 12936.,
      13072., 13208., 13344., 13480., 13616., 13752., 13888.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2649., 2974., 3054., 3428., 3459., 3882., 3864., 4336., 3696., 4088.,
      4144., 4592., 4592., 5096., 5040., 5600., 3221., 3644., 3730., 4216.,
      4239., 4788., 4748., 5360., 3376., 3858., 3932., 4484., 4488., 5110.,
      5044., 5736., 3347., 3798., 3842., 4356., 4337., 4914., 4832., 5472.,
      3696., 4088., 4144., 4592., 4592., 5096., 5040., 5600., 2735., 3088.,
      3118., 3520., 3501., 3952., 3884., 4384., 2888., 3264., 3344., 3776.,
      3800., 4288., 4256., 4800., 3200., 3648., 3712., 4224., 4224., 4800.,
      4736., 5376., 3880., 4368., 4464., 5024., 5048., 5680., 5632., 6336.,
      5280., 5840., 5920., 6560., 6560., 7280., 7200., 8000., 4024., 4544.,
      4592., 5184., 5160., 5824., 5728., 6464., 3200., 3648., 3712., 4224.,
      4224., 4800., 4736., 5376., 3032., 3440., 3472., 3936., 3912., 4432.,
      4352., 4928., 3331., 3750., 3842., 4324., 4353., 4898., 4864., 5472.,
      4752., 5256., 5328., 5904., 5904., 6552., 6480., 7200., 4191., 4736.,
      4846., 5472., 5501., 6208., 6156., 6944., 4440., 5062., 5156., 5868.,
      5872., 6674., 6588., 7480., 4353., 4934., 4990., 5652., 5627., 6370.,
      6264., 7088., 4752., 5256., 5328., 5904., 5904., 6552., 6480., 7200.,
      3565., 4020., 4066., 4584., 4567., 5148., 5068., 5712., 3642., 4112.,
      4212., 4752., 4782., 5392., 5352., 6032., 4000., 4560., 4640., 5280.,
      5280., 6000., 5920., 6720., 4810., 5420., 5532., 6232., 6254., 7044.,
      6976., 7856., 6488., 7188., 7272., 8072., 8056., 8956., 8840., 9840.,
      4958., 5608., 5660., 6400., 6362., 7192., 7064., 7984., 4000., 4560.,
      4640., 5280., 5280., 6000., 5920., 6720., 3758., 4268., 4308., 4888.,
      4858., 5508., 5408., 6128., 3423., 3850., 3938., 4428., 4453., 5006.,
      4968., 5584., 4752., 5256., 5328., 5904., 5904., 6552., 6480., 7200.,
      4211., 4764., 4862., 5496., 5513., 6228., 6164., 6960., 4448., 5086.,
      5156., 5884., 5864., 6682., 6572., 7480., 4341., 4930., 4974., 5644.,
      5607., 6358., 6240., 7072., 4752., 5256., 5328., 5904., 5904., 6552.,
      6480., 7200., 3577., 4040., 4066., 4592., 4555., 5144., 5044., 5696.,
      2888., 3264., 3344., 3776., 3800., 4288., 4256., 4800., 3200., 3648.,
      3712., 4224., 4224., 4800., 4736., 5376., 3880., 4368., 4464., 5024.,
      5048., 5680., 5632., 6336., 5280., 5840., 5920., 6560., 6560., 7280.,
      7200., 8000., 4024., 4544., 4592., 5184., 5160., 5824., 5728., 6464.,
      3200., 3648., 3712., 4224., 4224., 4800., 4736., 5376., 3032., 3440.,
      3472., 3936., 3912., 4432., 4352., 4928., 2597., 2930., 2990., 3372.,
      3383., 3814., 3776., 4256., 3696., 4088., 4144., 4592., 4592., 5096.,
      5040., 5600., 3305., 3736., 3810., 4304., 4315., 4872., 4820., 5440.,
      3512., 4010., 4060., 4628., 4608., 5246., 5156., 5864., 3399., 3858.,
      3890., 4412., 4381., 4966., 4872., 5520., 3696., 4088., 4144., 4592.,
      4592., 5096., 5040., 5600., 2827., 3188., 3214., 3624., 3601., 4060.,
      3988., 4496.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16032., 16848., 16288., 17120., 16544., 17392., 16800., 17664., 13600.,
      14352., 13856., 14624., 14112., 14896., 14368., 15168., 11424., 12112.,
      11680., 12384., 11936., 12656., 12192., 12928., 12448., 13200., 12704.,
      13472., 12960., 13744., 13216., 14016., 13472., 14288., 13728., 14560.,
      13984., 14832., 14240., 15104., 14496., 15376., 14752., 15648., 15008.,
      15920., 15264., 16192., 15520., 16464., 15776., 16736., 16032., 17008.,
      16288., 17280., 13984., 14928., 14240., 15200., 14496., 15472., 14752.,
      15744., 12576., 13456., 12832., 13728., 13088., 14000., 13344., 14272.,
      11424., 12240., 11680., 12512., 11936., 12784., 12192., 13056., 12448.,
      13328., 12704., 13600., 12960., 13872., 13216., 14144., 13472., 14416.,
      13728., 14688., 13984., 14960., 14240., 15232., 14496., 15504., 14752.,
      15776., 15008., 16048., 15264., 16320., 15520., 16592., 15776., 16864.,
      16032., 17136., 16288., 17408., 16032., 17104., 16288., 17376., 16544.,
      17648., 16800., 17920., 15648., 16656., 15904., 16928., 16160., 17200.,
      16416., 17472., 15520., 16464., 15776., 16736., 16032., 17008., 16288.,
      17280., 16544., 17552., 16800., 17824., 17056., 18096., 17312., 18368.,
      17568., 18640., 17824., 18912., 18080., 19184., 18336., 19456., 18592.,
      19728., 18848., 20000., 19104., 20272., 19360., 20544., 19616., 20816.,
      19872., 21088., 20128., 21360., 20384., 21632., 22176., 23376., 22432.,
      23648., 22688., 23920., 22944., 24192., 18848., 19856., 19104., 20128.,
      19360., 20400., 19616., 20672., 16032., 16848., 16288., 17120., 16544.,
      17392., 16800., 17664., 13600., 14352., 13856., 14624., 14112., 14896.,
      14368., 15168., 11424., 12112., 11680., 12384., 11936., 12656., 12192.,
      12928., 12448., 13200., 12704., 13472., 12960., 13744., 13216., 14016.,
      13472., 14288., 13728., 14560., 13984., 14832., 14240., 15104., 17568.,
      18640., 17824., 18912., 18080., 19184., 18336., 19456., 15648., 16656.,
      15904., 16928., 16160., 17200., 16416., 17472., 13984., 14928., 14240.,
      15200., 14496., 15472., 14752., 15744., 12576., 13456., 12832., 13728.,
      13088., 14000., 13344., 14272., 11424., 12240., 11680., 12512., 11936.,
      12784., 12192., 13056., 12448., 13328., 12704., 13600., 12960., 13872.,
      13216., 14144., 13472., 14416., 13728., 14688., 13984., 14960., 14240.,
      15232., 17568., 18768., 17824., 19040., 18080., 19312., 18336., 19584.,
      16672., 17808., 16928., 18080., 17184., 18352., 17440., 18624., 16032.,
      17104., 16288., 17376., 16544., 17648., 16800., 17920., 15648., 16656.,
      15904., 16928., 16160., 17200., 16416., 17472., 15520., 16464., 15776.,
      16736., 16032., 17008., 16288., 17280., 16544., 17552., 16800., 17824.,
      17056., 18096., 17312., 18368., 17568., 18640., 17824., 18912., 18080.,
      19184., 18336., 19456., 21664., 22992., 21920., 23264., 22176., 23536.,
      22432., 23808., 21792., 23056., 22048., 23328., 22304., 23600., 22560.,
      23872., 22176., 23376., 22432., 23648., 22688., 23920., 22944., 24192.,
      18848., 19856., 19104., 20128., 19360., 20400., 19616., 20672., 16032.,
      16848., 16288., 17120., 16544., 17392., 16800., 17664., 13600., 14352.,
      13856., 14624., 14112., 14896., 14368., 15168., 11424., 12112., 11680.,
      12384., 11936., 12656., 12192., 12928.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2333., 2658.,  2983.,  3308.,  2694.,  3068., 3442., 3816.,  3055.,
      3478., 3901.,  4324.,  3416.,  3888.,  4360., 4832., 3864.,  4256.,
      4648., 5040.,  4256.,  4704.,  5152.,  5600., 4648., 5152.,  5656.,
      6160., 5040.,  5600.,  6160.,  6720.,  2707., 3130., 3553.,  3976.,
      3166., 3652.,  4138.,  4624.,  3625.,  4174., 4723., 5272.,  4084.,
      4696., 5308.,  5920.,  2590.,  3072.,  3554., 4036., 3088.,  3640.,
      4192., 4744.,  3586.,  4208.,  4830.,  5452., 4084., 4776.,  5468.,
      6160., 2739.,  3190.,  3641.,  4092.,  3170., 3684., 4198.,  4712.,
      3601., 4178.,  4755.,  5332.,  4032.,  4672., 5312., 5952.,  3864.,
      4256., 4648.,  5040.,  4256.,  4704.,  5152., 5600., 4648.,  5152.,
      5656., 6160.,  5040.,  5600.,  6160.,  6720., 2301., 2654.,  3007.,
      3360., 2634.,  3036.,  3438.,  3840.,  2967., 3418., 3869.,  4320.,
      3300., 3800.,  4300.,  4800.,  2392.,  2768., 3144., 3520.,  2800.,
      3232., 3664.,  4096.,  3208.,  3696.,  4184., 4672., 3616.,  4160.,
      4704., 5248.,  2368.,  2816.,  3264.,  3712., 2816., 3328.,  3840.,
      4352., 3264.,  3840.,  4416.,  4992.,  3712., 4352., 4992.,  5632.,
      3368., 3856.,  4344.,  4832.,  3888.,  4448., 5008., 5568.,  4408.,
      5040., 5672.,  6304.,  4928.,  5632.,  6336., 7040., 5520.,  6080.,
      6640., 7200.,  6080.,  6720.,  7360.,  8000., 6640., 7360.,  8080.,
      8800., 7200.,  8000.,  8800.,  9600.,  3368., 3888., 4408.,  4928.,
      3856., 4448.,  5040.,  5632.,  4344.,  5008., 5672., 6336.,  4832.,
      5568., 6304.,  7040.,  2368.,  2816.,  3264., 3712., 2816.,  3328.,
      3840., 4352.,  3264.,  3840.,  4416.,  4992., 3712., 4352.,  4992.,
      5632., 2392.,  2800.,  3208.,  3616.,  2768., 3232., 3696.,  4160.,
      3144., 3664.,  4184.,  4704.,  3520.,  4096., 4672., 5248.,  2995.,
      3414., 3833.,  4252.,  3458.,  3940.,  4422., 4904., 3921.,  4466.,
      5011., 5556.,  4384.,  4992.,  5600.,  6208., 4968., 5472.,  5976.,
      6480., 5472.,  6048.,  6624.,  7200.,  5976., 6624., 7272.,  7920.,
      6480., 7200.,  7920.,  8640.,  3485.,  4030., 4575., 5120.,  4074.,
      4700., 5326.,  5952.,  4663.,  5370.,  6077., 6784., 5252.,  6040.,
      6828., 7616.,  3330.,  3952.,  4574.,  5196., 3968., 4680.,  5392.,
      6104., 4606.,  5408.,  6210.,  7012.,  5244., 6136., 7028.,  7920.,
      3517., 4098.,  4679.,  5260.,  4070.,  4732., 5394., 6056.,  4623.,
      5366., 6109.,  6852.,  5176.,  6000.,  6824., 7648., 4968.,  5472.,
      5976., 6480.,  5472.,  6048.,  6624.,  7200., 5976., 6624.,  7272.,
      7920., 6480.,  7200.,  7920.,  8640.,  2963., 3418., 3873.,  4328.,
      3390., 3908.,  4426.,  4944.,  3817.,  4398., 4979., 5560.,  4244.,
      4888., 5532.,  6176.,  2990.,  3460.,  3930., 4400., 3500.,  4040.,
      4580., 5120.,  4010.,  4620.,  5230.,  5840., 4520., 5200.,  5880.,
      6560., 2960.,  3520.,  4080.,  4640.,  3520., 4160., 4800.,  5440.,
      4080., 4800.,  5520.,  6240.,  4640.,  5440., 6240., 7040.,  4210.,
      4820., 5430.,  6040.,  4860.,  5560.,  6260., 6960., 5510.,  6300.,
      7090., 7880.,  6160.,  7040.,  7920.,  8800., 6900., 7600.,  8300.,
      9000., 7600.,  8400.,  9200.,  10000., 8300., 9200., 10100., 11000.,
      9000., 10000., 11000., 12000., 4210.,  4860., 5510., 6160.,  4820.,
      5560., 6300.,  7040.,  5430.,  6260.,  7090., 7920., 6040.,  6960.,
      7880., 8800.,  2960.,  3520.,  4080.,  4640., 3520., 4160.,  4800.,
      5440., 4080.,  4800.,  5520.,  6240.,  4640., 5440., 6240.,  7040.,
      2990., 3500.,  4010.,  4520.,  3460.,  4040., 4620., 5200.,  3930.,
      4580., 5230.,  5880.,  4400.,  5120.,  5840., 6560., 2963.,  3390.,
      3817., 4244.,  3418.,  3908.,  4398.,  4888., 3873., 4426.,  4979.,
      5532., 4328.,  4944.,  5560.,  6176.,  4968., 5472., 5976.,  6480.,
      5472., 6048.,  6624.,  7200.,  5976.,  6624., 7272., 7920.,  6480.,
      7200., 7920.,  8640.,  3517.,  4070.,  4623., 5176., 4098.,  4732.,
      5366., 6000.,  4679.,  5394.,  6109.,  6824., 5260., 6056.,  6852.,
      7648., 3330.,  3968.,  4606.,  5244.,  3952., 4680., 5408.,  6136.,
      4574., 5392.,  6210.,  7028.,  5196.,  6104., 7012., 7920.,  3485.,
      4074., 4663.,  5252.,  4030.,  4700.,  5370., 6040., 4575.,  5326.,
      6077., 6828.,  5120.,  5952.,  6784.,  7616., 4968., 5472.,  5976.,
      6480., 5472.,  6048.,  6624.,  7200.,  5976., 6624., 7272.,  7920.,
      6480., 7200.,  7920.,  8640.,  2995.,  3458., 3921., 4384.,  3414.,
      3940., 4466.,  4992.,  3833.,  4422.,  5011., 5600., 4252.,  4904.,
      5556., 6208.,  2392.,  2768.,  3144.,  3520., 2800., 3232.,  3664.,
      4096., 3208.,  3696.,  4184.,  4672.,  3616., 4160., 4704.,  5248.,
      2368., 2816.,  3264.,  3712.,  2816.,  3328., 3840., 4352.,  3264.,
      3840., 4416.,  4992.,  3712.,  4352.,  4992., 5632., 3368.,  3856.,
      4344., 4832.,  3888.,  4448.,  5008.,  5568., 4408., 5040.,  5672.,
      6304., 4928.,  5632.,  6336.,  7040.,  5520., 6080., 6640.,  7200.,
      6080., 6720.,  7360.,  8000.,  6640.,  7360., 8080., 8800.,  7200.,
      8000., 8800.,  9600.,  3368.,  3888.,  4408., 4928., 3856.,  4448.,
      5040., 5632.,  4344.,  5008.,  5672.,  6336., 4832., 5568.,  6304.,
      7040., 2368.,  2816.,  3264.,  3712.,  2816., 3328., 3840.,  4352.,
      3264., 3840.,  4416.,  4992.,  3712.,  4352., 4992., 5632.,  2392.,
      2800., 3208.,  3616.,  2768.,  3232.,  3696., 4160., 3144.,  3664.,
      4184., 4704.,  3520.,  4096.,  4672.,  5248., 2301., 2634.,  2967.,
      3300., 2654.,  3036.,  3418.,  3800.,  3007., 3438., 3869.,  4300.,
      3360., 3840.,  4320.,  4800.,  3864.,  4256., 4648., 5040.,  4256.,
      4704., 5152.,  5600.,  4648.,  5152.,  5656., 6160., 5040.,  5600.,
      6160., 6720.,  2739.,  3170.,  3601.,  4032., 3190., 3684.,  4178.,
      4672., 3641.,  4198.,  4755.,  5312.,  4092., 4712., 5332.,  5952.,
      2590., 3088.,  3586.,  4084.,  3072.,  3640., 4208., 4776.,  3554.,
      4192., 4830.,  5468.,  4036.,  4744.,  5452., 6160., 2707.,  3166.,
      3625., 4084.,  3130.,  3652.,  4174.,  4696., 3553., 4138.,  4723.,
      5308., 3976.,  4624.,  5272.,  5920.,  3864., 4256., 4648.,  5040.,
      4256., 4704.,  5152.,  5600.,  4648.,  5152., 5656., 6160.,  5040.,
      5600., 6160.,  6720.,  2333.,  2694.,  3055., 3416., 2658.,  3068.,
      3478., 3888.,  2983.,  3442.,  3901.,  4360., 3308., 3816.,  4324.,
      4832.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14736., 15168., 15600., 16032., 15232., 15680., 16128., 16576., 15728.,
      16192., 16656., 17120., 16224., 16704., 17184., 17664., 13328., 13760.,
      14192., 14624., 13824., 14272., 14720., 15168., 14320., 14784., 15248.,
      15712., 14816., 15296., 15776., 16256., 12176., 12608., 13040., 13472.,
      12672., 13120., 13568., 14016., 13168., 13632., 14096., 14560., 13664.,
      14144., 14624., 15104., 12304., 12736., 13168., 13600., 12800., 13248.,
      13696., 14144., 13296., 13760., 14224., 14688., 13792., 14272., 14752.,
      15232., 12688., 13120., 13552., 13984., 13184., 13632., 14080., 14528.,
      13680., 14144., 14608., 15072., 14176., 14656., 15136., 15616., 13328.,
      13760., 14192., 14624., 13824., 14272., 14720., 15168., 14320., 14784.,
      15248., 15712., 14816., 15296., 15776., 16256., 14224., 14656., 15088.,
      15520., 14720., 15168., 15616., 16064., 15216., 15680., 16144., 16608.,
      15712., 16192., 16672., 17152., 16656., 17216., 17776., 18336., 17152.,
      17728., 18304., 18880., 17648., 18240., 18832., 19424., 18144., 18752.,
      19360., 19968., 16272., 16832., 17392., 17952., 16768., 17344., 17920.,
      18496., 17264., 17856., 18448., 19040., 17760., 18368., 18976., 19584.,
      16144., 16704., 17264., 17824., 16640., 17216., 17792., 18368., 17136.,
      17728., 18320., 18912., 17632., 18240., 18848., 19456., 17296., 17856.,
      18416., 18976., 17792., 18368., 18944., 19520., 18288., 18880., 19472.,
      20064., 18784., 19392., 20000., 20608., 18704., 19264., 19824., 20384.,
      19200., 19776., 20352., 20928., 19696., 20288., 20880., 21472., 20192.,
      20800., 21408., 22016., 16464., 16960., 17456., 17952., 16960., 17472.,
      17984., 18496., 17456., 17984., 18512., 19040., 17952., 18496., 19040.,
      19584., 14736., 15168., 15600., 16032., 15232., 15680., 16128., 16576.,
      15728., 16192., 16656., 17120., 16224., 16704., 17184., 17664., 12688.,
      13120., 13552., 13984., 13184., 13632., 14080., 14528., 13680., 14144.,
      14608., 15072., 14176., 14656., 15136., 15616., 13328., 13760., 14192.,
      14624., 13824., 14272., 14720., 15168., 14320., 14784., 15248., 15712.,
      14816., 15296., 15776., 16256., 14224., 14656., 15088., 15520., 14720.,
      15168., 15616., 16064., 15216., 15680., 16144., 16608., 15712., 16192.,
      16672., 17152., 16208., 16704., 17200., 17696., 16704., 17216., 17728.,
      18240., 17200., 17728., 18256., 18784., 17696., 18240., 18784., 19328.,
      18192., 18752., 19312., 19872., 18688., 19264., 19840., 20416., 19184.,
      19776., 20368., 20960., 19680., 20288., 20896., 21504., 17296., 17856.,
      18416., 18976., 17792., 18368., 18944., 19520., 18288., 18880., 19472.,
      20064., 18784., 19392., 20000., 20608., 16656., 17216., 17776., 18336.,
      17152., 17728., 18304., 18880., 17648., 18240., 18832., 19424., 18144.,
      18752., 19360., 19968., 18704., 19264., 19824., 20384., 19200., 19776.,
      20352., 20928., 19696., 20288., 20880., 21472., 20192., 20800., 21408.,
      22016., 16464., 16960., 17456., 17952., 16960., 17472., 17984., 18496.,
      17456., 17984., 18512., 19040., 17952., 18496., 19040., 19584., 14736.,
      15168., 15600., 16032., 15232., 15680., 16128., 16576., 15728., 16192.,
      16656., 17120., 16224., 16704., 17184., 17664., 13328., 13760., 14192.,
      14624., 13824., 14272., 14720., 15168., 14320., 14784., 15248., 15712.,
      14816., 15296., 15776., 16256., 12176., 12608., 13040., 13472., 12672.,
      13120., 13568., 14016., 13168., 13632., 14096., 14560., 13664., 14144.,
      14624., 15104., 12304., 12736., 13168., 13600., 12800., 13248., 13696.,
      14144., 13296., 13760., 14224., 14688., 13792., 14272., 14752., 15232.,
      12688., 13120., 13552., 13984., 13184., 13632., 14080., 14528., 13680.,
      14144., 14608., 15072., 14176., 14656., 15136., 15616., 18192., 18752.,
      19312., 19872., 18688., 19264., 19840., 20416., 19184., 19776., 20368.,
      20960., 19680., 20288., 20896., 21504., 17296., 17856., 18416., 18976.,
      17792., 18368., 18944., 19520., 18288., 18880., 19472., 20064., 18784.,
      19392., 20000., 20608., 16656., 17216., 17776., 18336., 17152., 17728.,
      18304., 18880., 17648., 18240., 18832., 19424., 18144., 18752., 19360.,
      19968., 16272., 16832., 17392., 17952., 16768., 17344., 17920., 18496.,
      17264., 17856., 18448., 19040., 17760., 18368., 18976., 19584., 16144.,
      16704., 17264., 17824., 16640., 17216., 17792., 18368., 17136., 17728.,
      18320., 18912., 17632., 18240., 18848., 19456., 17296., 17856., 18416.,
      18976., 17792., 18368., 18944., 19520., 18288., 18880., 19472., 20064.,
      18784., 19392., 20000., 20608., 18704., 19264., 19824., 20384., 19200.,
      19776., 20352., 20928., 19696., 20288., 20880., 21472., 20192., 20800.,
      21408., 22016., 12176., 12608., 13040., 13472., 12672., 13120., 13568.,
      14016., 13168., 13632., 14096., 14560., 13664., 14144., 14624., 15104.,
      12304., 12736., 13168., 13600., 12800., 13248., 13696., 14144., 13296.,
      13760., 14224., 14688., 13792., 14272., 14752., 15232., 12688., 13120.,
      13552., 13984., 13184., 13632., 14080., 14528., 13680., 14144., 14608.,
      15072., 14176., 14656., 15136., 15616., 13328., 13760., 14192., 14624.,
      13824., 14272., 14720., 15168., 14320., 14784., 15248., 15712., 14816.,
      15296., 15776., 16256., 14224., 14656., 15088., 15520., 14720., 15168.,
      15616., 16064., 15216., 15680., 16144., 16608., 15712., 16192., 16672.,
      17152., 16208., 16704., 17200., 17696., 16704., 17216., 17728., 18240.,
      17200., 17728., 18256., 18784., 17696., 18240., 18784., 19328., 18192.,
      18752., 19312., 19872., 18688., 19264., 19840., 20416., 19184., 19776.,
      20368., 20960., 19680., 20288., 20896., 21504., 16144., 16704., 17264.,
      17824., 16640., 17216., 17792., 18368., 17136., 17728., 18320., 18912.,
      17632., 18240., 18848., 19456., 17296., 17856., 18416., 18976., 17792.,
      18368., 18944., 19520., 18288., 18880., 19472., 20064., 18784., 19392.,
      20000., 20608., 18704., 19264., 19824., 20384., 19200., 19776., 20352.,
      20928., 19696., 20288., 20880., 21472., 20192., 20800., 21408., 22016.,
      16464., 16960., 17456., 17952., 16960., 17472., 17984., 18496., 17456.,
      17984., 18512., 19040., 17952., 18496., 19040., 19584., 14736., 15168.,
      15600., 16032., 15232., 15680., 16128., 16576., 15728., 16192., 16656.,
      17120., 16224., 16704., 17184., 17664., 13328., 13760., 14192., 14624.,
      13824., 14272., 14720., 15168., 14320., 14784., 15248., 15712., 14816.,
      15296., 15776., 16256., 12176., 12608., 13040., 13472., 12672., 13120.,
      13568., 14016., 13168., 13632., 14096., 14560., 13664., 14144., 14624.,
      15104.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4020.,  5091.,  6216.,  7380.,  6384.,  5379.,  4380.,  7920.,  9738.,
      11592., 13464., 11592., 9738.,  7920.,  5700.,  7185.,  8736.,  10332.,
      8904.,  7473.,  6060.,  10560., 12984., 15456., 17952., 15456., 12984.,
      10560., 6060.,  7473.,  8904.,  10332., 8736.,  7185.,  5700.,  7920.,
      9738.,  11592., 13464., 11592., 9738.,  7920.,  4380.,  5379.,  6384.,
      7380.,  6216.,  5091.,  4020.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7520.,  7598.,  7676.,  7754.,  7832.,  7910.,  7988.,  8144.,  8222.,
      8300.,  8378.,  8456.,  8534.,  8612.,  8768.,  8846.,  8924.,  9002.,
      9080.,  9158.,  9236.,  9392.,  9470.,  9548.,  9626.,  9704.,  9782.,
      9860.,  10016., 10094., 10172., 10250., 10328., 10406., 10484., 10640.,
      10718., 10796., 10874., 10952., 11030., 11108., 11264., 11342., 11420.,
      11498., 11576., 11654., 11732.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5415.,  5880.,  6555.,  7158.,  7644.,  8400.,  8652.,  9576.,  6867.,
      7728.,  5223.,  6006.,  3750.,  4440.,  7290.,  7920.,  8730.,  9540.,
      10080., 11088., 11304., 12528., 8946.,  10080., 6786.,  7812.,  4860.,
      5760.,  7845.,  8520.,  9465.,  10338., 11004., 12096., 12420., 13752.,
      9849.,  11088., 7485.,  8610.,  5370.,  6360.,  9720.,  10560., 11640.,
      12720., 13440., 14784., 15072., 16704., 11928., 13440., 9048.,  10416.,
      6480.,  7680.,  9165.,  9960.,  10905., 11922., 12516., 13776., 13956.,
      15480., 11025., 12432., 8349.,  9618.,  5970.,  7080.,  7290.,  7920.,
      8730.,  9540.,  10080., 11088., 11304., 12528., 8946.,  10080., 6786.,
      7812.,  4860.,  5760.,  6735.,  7320.,  7995.,  8742.,  9156.,  10080.,
      10188., 11304., 8043.,  9072.,  6087.,  7014.,  4350.,  5160.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14206., 15040., 14350., 15196., 14494., 15352., 14638., 15508., 14782.,
      15664., 14926., 15820., 15070., 15976., 15358., 16288., 15502., 16444.,
      15646., 16600., 15790., 16756., 15934., 16912., 16078., 17068., 16222.,
      17224., 16510., 17536., 16654., 17692., 16798., 17848., 16942., 18004.,
      17086., 18160., 17230., 18316., 17374., 18472., 17662., 18784., 17806.,
      18940., 17950., 19096., 18094., 19252., 18238., 19408., 18382., 19564.,
      18526., 19720., 18814., 20032., 18958., 20188., 19102., 20344., 19246.,
      20500., 19390., 20656., 19534., 20812., 19678., 20968., 19966., 21280.,
      20110., 21436., 20254., 21592., 20398., 21748., 20542., 21904., 20686.,
      22060., 20830., 22216., 21118., 22528., 21262., 22684., 21406., 22840.,
      21550., 22996., 21694., 23152., 21838., 23308., 21982., 23464.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3933.,  4398.,  4863.,  5328.,  5115.,  5718.,  6321.,  6924.,  6180.,
      6936.,  7692.,  8448.,  7068.,  7992.,  8916.,  9840.,  5529.,  6390.,
      7251.,  8112.,  4527.,  5310.,  6093.,  6876.,  4122.,  4812.,  5502.,
      6192.,  5310.,  5940.,  6570.,  7200.,  6858.,  7668.,  8478.,  9288.,
      8208.,  9216.,  10224., 11232., 9288.,  10512., 11736., 12960., 7254.,
      8388.,  9522.,  10656., 5922.,  6948.,  7974.,  9000.,  5364.,  6264.,
      7164.,  8064.,  5703.,  6378.,  7053.,  7728.,  7401.,  8274.,  9147.,
      10020., 8916.,  10008., 11100., 12192., 10164., 11496., 12828., 14160.,
      7947.,  9186.,  10425., 11664., 6501.,  7626.,  8751.,  9876.,  5910.,
      6900.,  7890.,  8880.,  7080.,  7920.,  8760.,  9600.,  9144.,  10224.,
      11304., 12384., 10944., 12288., 13632., 14976., 12384., 14016., 15648.,
      17280., 9672.,  11184., 12696., 14208., 7896.,  9264.,  10632., 12000.,
      7152.,  8352.,  9552.,  10752., 6687.,  7482.,  8277.,  9072.,  8601.,
      9618.,  10635., 11652., 10236., 11496., 12756., 14016., 11508., 13032.,
      14556., 16080., 8979.,  10386., 11793., 13200., 7317.,  8586.,  9855.,
      11124., 6606.,  7716.,  8826.,  9936.,  5310.,  5940.,  6570.,  7200.,
      6858.,  7668.,  8478.,  9288.,  8208.,  9216.,  10224., 11232., 9288.,
      10512., 11736., 12960., 7254.,  8388.,  9522.,  10656., 5922.,  6948.,
      7974.,  9000.,  5364.,  6264.,  7164.,  8064.,  4917.,  5502.,  6087.,
      6672.,  6315.,  7062.,  7809.,  8556.,  7500.,  8424.,  9348.,  10272.,
      8412.,  9528.,  10644., 11760., 6561.,  7590.,  8619.,  9648.,  5343.,
      6270.,  7197.,  8124.,  4818.,  5628.,  6438.,  7248.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7610.,  7932.,  8254.,  8576.,  7886.,  8220.,  8554.,  8888.,  8162.,
      8508.,  8854.,  9200.,  8438.,  8796.,  9154.,  9512.,  8714.,  9084.,
      9454.,  9824.,  8990.,  9372.,  9754.,  10136., 9266.,  9660.,  10054.,
      10448., 9818.,  10236., 10654., 11072., 10094., 10524., 10954., 11384.,
      10370., 10812., 11254., 11696., 10646., 11100., 11554., 12008., 10922.,
      11388., 11854., 12320., 11198., 11676., 12154., 12632., 11474., 11964.,
      12454., 12944., 12026., 12540., 13054., 13568., 12302., 12828., 13354.,
      13880., 12578., 13116., 13654., 14192., 12854., 13404., 13954., 14504.,
      13130., 13692., 14254., 14816., 13406., 13980., 14554., 15128., 13682.,
      14268., 14854., 15440., 14234., 14844., 15454., 16064., 14510., 15132.,
      15754., 16376., 14786., 15420., 16054., 16688., 15062., 15708., 16354.,
      17000., 15338., 15996., 16654., 17312., 15614., 16284., 16954., 17624.,
      15890., 16572., 17254., 17936., 16442., 17148., 17854., 18560., 16718.,
      17436., 18154., 18872., 16994., 17724., 18454., 19184., 17270., 18012.,
      18754., 19496., 17546., 18300., 19054., 19808., 17822., 18588., 19354.,
      20120., 18098., 18876., 19654., 20432., 18650., 19452., 20254., 21056.,
      18926., 19740., 20554., 21368., 19202., 20028., 20854., 21680., 19478.,
      20316., 21154., 21992., 19754., 20604., 21454., 22304., 20030., 20892.,
      21754., 22616., 20306., 21180., 22054., 22928., 20858., 21756., 22654.,
      23552., 21134., 22044., 22954., 23864., 21410., 22332., 23254., 24176.,
      21686., 22620., 23554., 24488., 21962., 22908., 23854., 24800., 22238.,
      23196., 24154., 25112., 22514., 23484., 24454., 25424.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4350.,  5160.,  6087.,  7014.,  8043.,  9072.,  10188., 11304., 9156.,
      10080., 7995.,  8742.,  6735.,  7320.,  4860.,  5760.,  6786.,  7812.,
      8946.,  10080., 11304., 12528., 10080., 11088., 8730.,  9540.,  7290.,
      7920.,  5970.,  7080.,  8349.,  9618.,  11025., 12432., 13956., 15480.,
      12516., 13776., 10905., 11922., 9165.,  9960.,  6480.,  7680.,  9048.,
      10416., 11928., 13440., 15072., 16704., 13440., 14784., 11640., 12720.,
      9720.,  10560., 5370.,  6360.,  7485.,  8610.,  9849.,  11088., 12420.,
      13752., 11004., 12096., 9465.,  10338., 7845.,  8520.,  4860.,  5760.,
      6786.,  7812.,  8946.,  10080., 11304., 12528., 10080., 11088., 8730.,
      9540.,  7290.,  7920.,  3750.,  4440.,  5223.,  6006.,  6867.,  7728.,
      8652.,  9576.,  7644.,  8400.,  6555.,  7158.,  5415.,  5880.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14962., 15040., 15118., 15196., 15274., 15352., 15430., 15508., 15586.,
      15664., 15742., 15820., 15898., 15976., 16210., 16288., 16366., 16444.,
      16522., 16600., 16678., 16756., 16834., 16912., 16990., 17068., 17146.,
      17224., 17458., 17536., 17614., 17692., 17770., 17848., 17926., 18004.,
      18082., 18160., 18238., 18316., 18394., 18472., 18706., 18784., 18862.,
      18940., 19018., 19096., 19174., 19252., 19330., 19408., 19486., 19564.,
      19642., 19720., 19954., 20032., 20110., 20188., 20266., 20344., 20422.,
      20500., 20578., 20656., 20734., 20812., 20890., 20968., 21202., 21280.,
      21358., 21436., 21514., 21592., 21670., 21748., 21826., 21904., 21982.,
      22060., 22138., 22216., 22450., 22528., 22606., 22684., 22762., 22840.,
      22918., 22996., 23074., 23152., 23230., 23308., 23386., 23464.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4725.,  5100.,  5550.,  6000.,  6450.,  6990.,  7350.,  7980.,  8295.,
      9030.,  9240.,  10080., 10200., 11160., 11160., 12240., 8295.,  9240.,
      9030.,  10080., 6450.,  7350.,  6990.,  7980.,  4725.,  5550.,  5100.,
      6000.,  5670.,  6120.,  6660.,  7200.,  7740.,  8388.,  8820.,  9576.,
      9954.,  10836., 11088., 12096., 12240., 13392., 13392., 14688., 9954.,
      11088., 10836., 12096., 7740.,  8820.,  8388.,  9576.,  5670.,  6660.,
      6120.,  7200.,  6615.,  7140.,  7770.,  8400.,  9030.,  9786.,  10290.,
      11172., 11613., 12642., 12936., 14112., 14280., 15624., 15624., 17136.,
      11613., 12936., 12642., 14112., 9030.,  10290., 9786.,  11172., 6615.,
      7770.,  7140.,  8400.,  7560.,  8160.,  8880.,  9600.,  10320., 11184.,
      11760., 12768., 13272., 14448., 14784., 16128., 16320., 17856., 17856.,
      19584., 13272., 14784., 14448., 16128., 10320., 11760., 11184., 12768.,
      7560.,  8880.,  8160.,  9600.,  6615.,  7140.,  7770.,  8400.,  9030.,
      9786.,  10290., 11172., 11613., 12642., 12936., 14112., 14280., 15624.,
      15624., 17136., 11613., 12936., 12642., 14112., 9030.,  10290., 9786.,
      11172., 6615.,  7770.,  7140.,  8400.,  5670.,  6120.,  6660.,  7200.,
      7740.,  8388.,  8820.,  9576.,  9954.,  10836., 11088., 12096., 12240.,
      13392., 13392., 14688., 9954.,  11088., 10836., 12096., 7740.,  8820.,
      8388.,  9576.,  5670.,  6660.,  6120.,  7200.,  4725.,  5100.,  5550.,
      6000.,  6450.,  6990.,  7350.,  7980.,  8295.,  9030.,  9240.,  10080.,
      10200., 11160., 11160., 12240., 8295.,  9240.,  9030.,  10080., 6450.,
      7350.,  6990.,  7980.,  4725.,  5550.,  5100.,  6000.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7788.,  8420.,  7932.,  8576.,  8076.,  8732.,  8220.,  8888.,  8364.,
      9044.,  8508.,  9200.,  8652.,  9356.,  8796.,  9512.,  8940.,  9668.,
      9084.,  9824.,  9228.,  9980.,  9372.,  10136., 9516.,  10292., 9660.,
      10448., 10092., 10916., 10236., 11072., 10380., 11228., 10524., 11384.,
      10668., 11540., 10812., 11696., 10956., 11852., 11100., 12008., 11244.,
      12164., 11388., 12320., 11532., 12476., 11676., 12632., 11820., 12788.,
      11964., 12944., 12396., 13412., 12540., 13568., 12684., 13724., 12828.,
      13880., 12972., 14036., 13116., 14192., 13260., 14348., 13404., 14504.,
      13548., 14660., 13692., 14816., 13836., 14972., 13980., 15128., 14124.,
      15284., 14268., 15440., 14700., 15908., 14844., 16064., 14988., 16220.,
      15132., 16376., 15276., 16532., 15420., 16688., 15564., 16844., 15708.,
      17000., 15852., 17156., 15996., 17312., 16140., 17468., 16284., 17624.,
      16428., 17780., 16572., 17936., 17004., 18404., 17148., 18560., 17292.,
      18716., 17436., 18872., 17580., 19028., 17724., 19184., 17868., 19340.,
      18012., 19496., 18156., 19652., 18300., 19808., 18444., 19964., 18588.,
      20120., 18732., 20276., 18876., 20432., 19308., 20900., 19452., 21056.,
      19596., 21212., 19740., 21368., 19884., 21524., 20028., 21680., 20172.,
      21836., 20316., 21992., 20460., 22148., 20604., 22304., 20748., 22460.,
      20892., 22616., 21036., 22772., 21180., 22928., 21612., 23396., 21756.,
      23552., 21900., 23708., 22044., 23864., 22188., 24020., 22332., 24176.,
      22476., 24332., 22620., 24488., 22764., 24644., 22908., 24800., 23052.,
      24956., 23196., 25112., 23340., 25268., 23484., 25424.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3315.,  3690.,  4065.,  4440.,  3930.,  4380.,  4830.,  5280.,  4680.,
      5220.,  5760.,  6300.,  5430.,  6060.,  6690.,  7320.,  6255.,  6990.,
      7725.,  8460.,  7080.,  7920.,  8760.,  9600.,  7920.,  8880.,  9840.,
      10800., 8760.,  9840.,  10920., 12000., 6285.,  7230.,  8175.,  9120.,
      6930.,  7980.,  9030.,  10080., 5280.,  6180.,  7080.,  7980.,  5790.,
      6780.,  7770.,  8760.,  5025.,  5850.,  6675.,  7500.,  5460.,  6360.,
      7260.,  8160.,  3978.,  4428.,  4878.,  5328.,  4716.,  5256.,  5796.,
      6336.,  5616.,  6264.,  6912.,  7560.,  6516.,  7272.,  8028.,  8784.,
      7506.,  8388.,  9270.,  10152., 8496.,  9504.,  10512., 11520., 9504.,
      10656., 11808., 12960., 10512., 11808., 13104., 14400., 7542.,  8676.,
      9810.,  10944., 8316.,  9576.,  10836., 12096., 6336.,  7416.,  8496.,
      9576.,  6948.,  8136.,  9324.,  10512., 6030.,  7020.,  8010.,  9000.,
      6552.,  7632.,  8712.,  9792.,  4641.,  5166.,  5691.,  6216.,  5502.,
      6132.,  6762.,  7392.,  6552.,  7308.,  8064.,  8820.,  7602.,  8484.,
      9366.,  10248., 8757.,  9786.,  10815., 11844., 9912.,  11088., 12264.,
      13440., 11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800.,
      8799.,  10122., 11445., 12768., 9702.,  11172., 12642., 14112., 7392.,
      8652.,  9912.,  11172., 8106.,  9492.,  10878., 12264., 7035.,  8190.,
      9345.,  10500., 7644.,  8904.,  10164., 11424., 5304.,  5904.,  6504.,
      7104.,  6288.,  7008.,  7728.,  8448.,  7488.,  8352.,  9216.,  10080.,
      8688.,  9696.,  10704., 11712., 10008., 11184., 12360., 13536., 11328.,
      12672., 14016., 15360., 12672., 14208., 15744., 17280., 14016., 15744.,
      17472., 19200., 10056., 11568., 13080., 14592., 11088., 12768., 14448.,
      16128., 8448.,  9888.,  11328., 12768., 9264.,  10848., 12432., 14016.,
      8040.,  9360.,  10680., 12000., 8736.,  10176., 11616., 13056., 4641.,
      5166.,  5691.,  6216.,  5502.,  6132.,  6762.,  7392.,  6552.,  7308.,
      8064.,  8820.,  7602.,  8484.,  9366.,  10248., 8757.,  9786.,  10815.,
      11844., 9912.,  11088., 12264., 13440., 11088., 12432., 13776., 15120.,
      12264., 13776., 15288., 16800., 8799.,  10122., 11445., 12768., 9702.,
      11172., 12642., 14112., 7392.,  8652.,  9912.,  11172., 8106.,  9492.,
      10878., 12264., 7035.,  8190.,  9345.,  10500., 7644.,  8904.,  10164.,
      11424., 3978.,  4428.,  4878.,  5328.,  4716.,  5256.,  5796.,  6336.,
      5616.,  6264.,  6912.,  7560.,  6516.,  7272.,  8028.,  8784.,  7506.,
      8388.,  9270.,  10152., 8496.,  9504.,  10512., 11520., 9504.,  10656.,
      11808., 12960., 10512., 11808., 13104., 14400., 7542.,  8676.,  9810.,
      10944., 8316.,  9576.,  10836., 12096., 6336.,  7416.,  8496.,  9576.,
      6948.,  8136.,  9324.,  10512., 6030.,  7020.,  8010.,  9000.,  6552.,
      7632.,  8712.,  9792.,  3315.,  3690.,  4065.,  4440.,  3930.,  4380.,
      4830.,  5280.,  4680.,  5220.,  5760.,  6300.,  5430.,  6060.,  6690.,
      7320.,  6255.,  6990.,  7725.,  8460.,  7080.,  7920.,  8760.,  9600.,
      7920.,  8880.,  9840.,  10800., 8760.,  9840.,  10920., 12000., 6285.,
      7230.,  8175.,  9120.,  6930.,  7980.,  9030.,  10080., 5280.,  6180.,
      7080.,  7980.,  5790.,  6780.,  7770.,  8760.,  5025.,  5850.,  6675.,
      7500.,  5460.,  6360.,  7260.,  8160.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3168.,  3288.,  3408.,  3528.,  3444.,  3576.,  3708.,  3840.,  3720.,
      3864.,  4008.,  4152.,  3996.,  4152.,  4308.,  4464.,  4272.,  4440.,
      4608.,  4776.,  4548.,  4728.,  4908.,  5088.,  4824.,  5016.,  5208.,
      5400.,  5100.,  5304.,  5508.,  5712.,  5376.,  5592.,  5808.,  6024.,
      5652.,  5880.,  6108.,  6336.,  5928.,  6168.,  6408.,  6648.,  6204.,
      6456.,  6708.,  6960.,  6480.,  6744.,  7008.,  7272.,  6756.,  7032.,
      7308.,  7584.,  7584.,  7896.,  8208.,  8520.,  7860.,  8184.,  8508.,
      8832.,  8136.,  8472.,  8808.,  9144.,  8412.,  8760.,  9108.,  9456.,
      8688.,  9048.,  9408.,  9768.,  8964.,  9336.,  9708.,  10080., 9240.,
      9624.,  10008., 10392., 9516.,  9912.,  10308., 10704., 9792.,  10200.,
      10608., 11016., 10068., 10488., 10908., 11328., 10344., 10776., 11208.,
      11640., 10620., 11064., 11508., 11952., 10896., 11352., 11808., 12264.,
      11172., 11640., 12108., 12576., 12000., 12504., 13008., 13512., 12276.,
      12792., 13308., 13824., 12552., 13080., 13608., 14136., 12828., 13368.,
      13908., 14448., 13104., 13656., 14208., 14760., 13380., 13944., 14508.,
      15072., 13656., 14232., 14808., 15384., 13932., 14520., 15108., 15696.,
      14208., 14808., 15408., 16008., 14484., 15096., 15708., 16320., 14760.,
      15384., 16008., 16632., 15036., 15672., 16308., 16944., 15312., 15960.,
      16608., 17256., 15588., 16248., 16908., 17568., 6048.,  6360.,  6672.,
      6984.,  6324.,  6648.,  6972.,  7296.,  6600.,  6936.,  7272.,  7608.,
      6876.,  7224.,  7572.,  7920.,  7152.,  7512.,  7872.,  8232.,  7428.,
      7800.,  8172.,  8544.,  7704.,  8088.,  8472.,  8856.,  7980.,  8376.,
      8772.,  9168.,  8256.,  8664.,  9072.,  9480.,  8532.,  8952.,  9372.,
      9792.,  8808.,  9240.,  9672.,  10104., 9084.,  9528.,  9972.,  10416.,
      9360.,  9816.,  10272., 10728., 9636.,  10104., 10572., 11040., 3168.,
      3288.,  3408.,  3528.,  3444.,  3576.,  3708.,  3840.,  3720.,  3864.,
      4008.,  4152.,  3996.,  4152.,  4308.,  4464.,  4272.,  4440.,  4608.,
      4776.,  4548.,  4728.,  4908.,  5088.,  4824.,  5016.,  5208.,  5400.,
      5100.,  5304.,  5508.,  5712.,  5376.,  5592.,  5808.,  6024.,  5652.,
      5880.,  6108.,  6336.,  5928.,  6168.,  6408.,  6648.,  6204.,  6456.,
      6708.,  6960.,  6480.,  6744.,  7008.,  7272.,  6756.,  7032.,  7308.,
      7584.,  7584.,  7896.,  8208.,  8520.,  7860.,  8184.,  8508.,  8832.,
      8136.,  8472.,  8808.,  9144.,  8412.,  8760.,  9108.,  9456.,  8688.,
      9048.,  9408.,  9768.,  8964.,  9336.,  9708.,  10080., 9240.,  9624.,
      10008., 10392., 9516.,  9912.,  10308., 10704., 9792.,  10200., 10608.,
      11016., 10068., 10488., 10908., 11328., 10344., 10776., 11208., 11640.,
      10620., 11064., 11508., 11952., 10896., 11352., 11808., 12264., 11172.,
      11640., 12108., 12576., 12000., 12504., 13008., 13512., 12276., 12792.,
      13308., 13824., 12552., 13080., 13608., 14136., 12828., 13368., 13908.,
      14448., 13104., 13656., 14208., 14760., 13380., 13944., 14508., 15072.,
      13656., 14232., 14808., 15384., 13932., 14520., 15108., 15696., 14208.,
      14808., 15408., 16008., 14484., 15096., 15708., 16320., 14760., 15384.,
      16008., 16632., 15036., 15672., 16308., 16944., 15312., 15960., 16608.,
      17256., 15588., 16248., 16908., 17568.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4818.,  5628.,  6438.,  7248.,  5343.,  6270.,  7197.,  8124.,  6561.,
      7590.,  8619.,  9648.,  8412.,  9528.,  10644., 11760., 7500.,  8424.,
      9348.,  10272., 6315.,  7062.,  7809.,  8556.,  4917.,  5502.,  6087.,
      6672.,  5364.,  6264.,  7164.,  8064.,  5922.,  6948.,  7974.,  9000.,
      7254.,  8388.,  9522.,  10656., 9288.,  10512., 11736., 12960., 8208.,
      9216.,  10224., 11232., 6858.,  7668.,  8478.,  9288.,  5310.,  5940.,
      6570.,  7200.,  6606.,  7716.,  8826.,  9936.,  7317.,  8586.,  9855.,
      11124., 8979.,  10386., 11793., 13200., 11508., 13032., 14556., 16080.,
      10236., 11496., 12756., 14016., 8601.,  9618.,  10635., 11652., 6687.,
      7482.,  8277.,  9072.,  7152.,  8352.,  9552.,  10752., 7896.,  9264.,
      10632., 12000., 9672.,  11184., 12696., 14208., 12384., 14016., 15648.,
      17280., 10944., 12288., 13632., 14976., 9144.,  10224., 11304., 12384.,
      7080.,  7920.,  8760.,  9600.,  5910.,  6900.,  7890.,  8880.,  6501.,
      7626.,  8751.,  9876.,  7947.,  9186.,  10425., 11664., 10164., 11496.,
      12828., 14160., 8916.,  10008., 11100., 12192., 7401.,  8274.,  9147.,
      10020., 5703.,  6378.,  7053.,  7728.,  5364.,  6264.,  7164.,  8064.,
      5922.,  6948.,  7974.,  9000.,  7254.,  8388.,  9522.,  10656., 9288.,
      10512., 11736., 12960., 8208.,  9216.,  10224., 11232., 6858.,  7668.,
      8478.,  9288.,  5310.,  5940.,  6570.,  7200.,  4122.,  4812.,  5502.,
      6192.,  4527.,  5310.,  6093.,  6876.,  5529.,  6390.,  7251.,  8112.,
      7068.,  7992.,  8916.,  9840.,  6180.,  6936.,  7692.,  8448.,  5115.,
      5718.,  6321.,  6924.,  3933.,  4398.,  4863.,  5328.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8342.,  8420.,  8498.,  8576.,  8654.,  8732.,  8810.,  8888.,  8966.,
      9044.,  9122.,  9200.,  9278.,  9356.,  9434.,  9512.,  9590.,  9668.,
      9746.,  9824.,  9902.,  9980.,  10058., 10136., 10214., 10292., 10370.,
      10448., 10838., 10916., 10994., 11072., 11150., 11228., 11306., 11384.,
      11462., 11540., 11618., 11696., 11774., 11852., 11930., 12008., 12086.,
      12164., 12242., 12320., 12398., 12476., 12554., 12632., 12710., 12788.,
      12866., 12944., 13334., 13412., 13490., 13568., 13646., 13724., 13802.,
      13880., 13958., 14036., 14114., 14192., 14270., 14348., 14426., 14504.,
      14582., 14660., 14738., 14816., 14894., 14972., 15050., 15128., 15206.,
      15284., 15362., 15440., 15830., 15908., 15986., 16064., 16142., 16220.,
      16298., 16376., 16454., 16532., 16610., 16688., 16766., 16844., 16922.,
      17000., 17078., 17156., 17234., 17312., 17390., 17468., 17546., 17624.,
      17702., 17780., 17858., 17936., 18326., 18404., 18482., 18560., 18638.,
      18716., 18794., 18872., 18950., 19028., 19106., 19184., 19262., 19340.,
      19418., 19496., 19574., 19652., 19730., 19808., 19886., 19964., 20042.,
      20120., 20198., 20276., 20354., 20432., 20822., 20900., 20978., 21056.,
      21134., 21212., 21290., 21368., 21446., 21524., 21602., 21680., 21758.,
      21836., 21914., 21992., 22070., 22148., 22226., 22304., 22382., 22460.,
      22538., 22616., 22694., 22772., 22850., 22928., 23318., 23396., 23474.,
      23552., 23630., 23708., 23786., 23864., 23942., 24020., 24098., 24176.,
      24254., 24332., 24410., 24488., 24566., 24644., 24722., 24800., 24878.,
      24956., 25034., 25112., 25190., 25268., 25346., 25424.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5025.,  5460.,  5850.,  6360.,  6675.,  7260.,  7500.,  8160.,  5280.,
      5790.,  6180.,  6780.,  7080.,  7770.,  7980.,  8760.,  6285.,  6930.,
      7230.,  7980.,  8175.,  9030.,  9120.,  10080., 7920.,  8760.,  8880.,
      9840.,  9840.,  10920., 10800., 12000., 6255.,  7080.,  6990.,  7920.,
      7725.,  8760.,  8460.,  9600.,  4680.,  5430.,  5220.,  6060.,  5760.,
      6690.,  6300.,  7320.,  3315.,  3930.,  3690.,  4380.,  4065.,  4830.,
      4440.,  5280.,  6030.,  6552.,  7020.,  7632.,  8010.,  8712.,  9000.,
      9792.,  6336.,  6948.,  7416.,  8136.,  8496.,  9324.,  9576.,  10512.,
      7542.,  8316.,  8676.,  9576.,  9810.,  10836., 10944., 12096., 9504.,
      10512., 10656., 11808., 11808., 13104., 12960., 14400., 7506.,  8496.,
      8388.,  9504.,  9270.,  10512., 10152., 11520., 5616.,  6516.,  6264.,
      7272.,  6912.,  8028.,  7560.,  8784.,  3978.,  4716.,  4428.,  5256.,
      4878.,  5796.,  5328.,  6336.,  7035.,  7644.,  8190.,  8904.,  9345.,
      10164., 10500., 11424., 7392.,  8106.,  8652.,  9492.,  9912.,  10878.,
      11172., 12264., 8799.,  9702.,  10122., 11172., 11445., 12642., 12768.,
      14112., 11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800.,
      8757.,  9912.,  9786.,  11088., 10815., 12264., 11844., 13440., 6552.,
      7602.,  7308.,  8484.,  8064.,  9366.,  8820.,  10248., 4641.,  5502.,
      5166.,  6132.,  5691.,  6762.,  6216.,  7392.,  8040.,  8736.,  9360.,
      10176., 10680., 11616., 12000., 13056., 8448.,  9264.,  9888.,  10848.,
      11328., 12432., 12768., 14016., 10056., 11088., 11568., 12768., 13080.,
      14448., 14592., 16128., 12672., 14016., 14208., 15744., 15744., 17472.,
      17280., 19200., 10008., 11328., 11184., 12672., 12360., 14016., 13536.,
      15360., 7488.,  8688.,  8352.,  9696.,  9216.,  10704., 10080., 11712.,
      5304.,  6288.,  5904.,  7008.,  6504.,  7728.,  7104.,  8448.,  7035.,
      7644.,  8190.,  8904.,  9345.,  10164., 10500., 11424., 7392.,  8106.,
      8652.,  9492.,  9912.,  10878., 11172., 12264., 8799.,  9702.,  10122.,
      11172., 11445., 12642., 12768., 14112., 11088., 12264., 12432., 13776.,
      13776., 15288., 15120., 16800., 8757.,  9912.,  9786.,  11088., 10815.,
      12264., 11844., 13440., 6552.,  7602.,  7308.,  8484.,  8064.,  9366.,
      8820.,  10248., 4641.,  5502.,  5166.,  6132.,  5691.,  6762.,  6216.,
      7392.,  6030.,  6552.,  7020.,  7632.,  8010.,  8712.,  9000.,  9792.,
      6336.,  6948.,  7416.,  8136.,  8496.,  9324.,  9576.,  10512., 7542.,
      8316.,  8676.,  9576.,  9810.,  10836., 10944., 12096., 9504.,  10512.,
      10656., 11808., 11808., 13104., 12960., 14400., 7506.,  8496.,  8388.,
      9504.,  9270.,  10512., 10152., 11520., 5616.,  6516.,  6264.,  7272.,
      6912.,  8028.,  7560.,  8784.,  3978.,  4716.,  4428.,  5256.,  4878.,
      5796.,  5328.,  6336.,  5025.,  5460.,  5850.,  6360.,  6675.,  7260.,
      7500.,  8160.,  5280.,  5790.,  6180.,  6780.,  7080.,  7770.,  7980.,
      8760.,  6285.,  6930.,  7230.,  7980.,  8175.,  9030.,  9120.,  10080.,
      7920.,  8760.,  8880.,  9840.,  9840.,  10920., 10800., 12000., 6255.,
      7080.,  6990.,  7920.,  7725.,  8760.,  8460.,  9600.,  4680.,  5430.,
      5220.,  6060.,  5760.,  6690.,  6300.,  7320.,  3315.,  3930.,  3690.,
      4380.,  4065.,  4830.,  4440.,  5280.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3144.,  3372.,  3288.,  3528.,  3432.,  3684.,  3576.,  3840.,  3720.,
      3996.,  3864.,  4152.,  4008.,  4308.,  4152.,  4464.,  4296.,  4620.,
      4440.,  4776.,  4584.,  4932.,  4728.,  5088.,  4872.,  5244.,  5016.,
      5400.,  5160.,  5556.,  5304.,  5712.,  5448.,  5868.,  5592.,  6024.,
      5736.,  6180.,  5880.,  6336.,  6024.,  6492.,  6168.,  6648.,  6312.,
      6804.,  6456.,  6960.,  6600.,  7116.,  6744.,  7272.,  6888.,  7428.,
      7032.,  7584.,  7752.,  8364.,  7896.,  8520.,  8040.,  8676.,  8184.,
      8832.,  8328.,  8988.,  8472.,  9144.,  8616.,  9300.,  8760.,  9456.,
      8904.,  9612.,  9048.,  9768.,  9192.,  9924.,  9336.,  10080., 9480.,
      10236., 9624.,  10392., 9768.,  10548., 9912.,  10704., 10056., 10860.,
      10200., 11016., 10344., 11172., 10488., 11328., 10632., 11484., 10776.,
      11640., 10920., 11796., 11064., 11952., 11208., 12108., 11352., 12264.,
      11496., 12420., 11640., 12576., 12360., 13356., 12504., 13512., 12648.,
      13668., 12792., 13824., 12936., 13980., 13080., 14136., 13224., 14292.,
      13368., 14448., 13512., 14604., 13656., 14760., 13800., 14916., 13944.,
      15072., 14088., 15228., 14232., 15384., 14376., 15540., 14520., 15696.,
      14664., 15852., 14808., 16008., 14952., 16164., 15096., 16320., 15240.,
      16476., 15384., 16632., 15528., 16788., 15672., 16944., 15816., 17100.,
      15960., 17256., 16104., 17412., 16248., 17568., 6216.,  6828.,  6360.,
      6984.,  6504.,  7140.,  6648.,  7296.,  6792.,  7452.,  6936.,  7608.,
      7080.,  7764.,  7224.,  7920.,  7368.,  8076.,  7512.,  8232.,  7656.,
      8388.,  7800.,  8544.,  7944.,  8700.,  8088.,  8856.,  8232.,  9012.,
      8376.,  9168.,  8520.,  9324.,  8664.,  9480.,  8808.,  9636.,  8952.,
      9792.,  9096.,  9948.,  9240.,  10104., 9384.,  10260., 9528.,  10416.,
      9672.,  10572., 9816.,  10728., 9960.,  10884., 10104., 11040., 3144.,
      3372.,  3288.,  3528.,  3432.,  3684.,  3576.,  3840.,  3720.,  3996.,
      3864.,  4152.,  4008.,  4308.,  4152.,  4464.,  4296.,  4620.,  4440.,
      4776.,  4584.,  4932.,  4728.,  5088.,  4872.,  5244.,  5016.,  5400.,
      5160.,  5556.,  5304.,  5712.,  5448.,  5868.,  5592.,  6024.,  5736.,
      6180.,  5880.,  6336.,  6024.,  6492.,  6168.,  6648.,  6312.,  6804.,
      6456.,  6960.,  6600.,  7116.,  6744.,  7272.,  6888.,  7428.,  7032.,
      7584.,  7752.,  8364.,  7896.,  8520.,  8040.,  8676.,  8184.,  8832.,
      8328.,  8988.,  8472.,  9144.,  8616.,  9300.,  8760.,  9456.,  8904.,
      9612.,  9048.,  9768.,  9192.,  9924.,  9336.,  10080., 9480.,  10236.,
      9624.,  10392., 9768.,  10548., 9912.,  10704., 10056., 10860., 10200.,
      11016., 10344., 11172., 10488., 11328., 10632., 11484., 10776., 11640.,
      10920., 11796., 11064., 11952., 11208., 12108., 11352., 12264., 11496.,
      12420., 11640., 12576., 12360., 13356., 12504., 13512., 12648., 13668.,
      12792., 13824., 12936., 13980., 13080., 14136., 13224., 14292., 13368.,
      14448., 13512., 14604., 13656., 14760., 13800., 14916., 13944., 15072.,
      14088., 15228., 14232., 15384., 14376., 15540., 14520., 15696., 14664.,
      15852., 14808., 16008., 14952., 16164., 15096., 16320., 15240., 16476.,
      15384., 16632., 15528., 16788., 15672., 16944., 15816., 17100., 15960.,
      17256., 16104., 17412., 16248., 17568.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2895.,  3330.,  3765.,  4200.,  3510.,  4020.,  4530.,  5040.,  4125.,
      4710.,  5295.,  5880.,  4740.,  5400.,  6060.,  6720.,  3330.,  3840.,
      4350.,  4860.,  4080.,  4680.,  5280.,  5880.,  4830.,  5520.,  6210.,
      6900.,  5580.,  6360.,  7140.,  7920.,  5205.,  5850.,  6495.,  7140.,
      6030.,  6780.,  7530.,  8280.,  6855.,  7710.,  8565.,  9420.,  7680.,
      8640.,  9600.,  10560., 8280.,  9120.,  9960.,  10800., 9120.,  10080.,
      11040., 12000., 9960.,  11040., 12120., 13200., 10800., 12000., 13200.,
      14400., 5205.,  6030.,  6855.,  7680.,  5850.,  6780.,  7710.,  8640.,
      6495.,  7530.,  8565.,  9600.,  7140.,  8280.,  9420.,  10560., 3330.,
      4080.,  4830.,  5580.,  3840.,  4680.,  5520.,  6360.,  4350.,  5280.,
      6210.,  7140.,  4860.,  5880.,  6900.,  7920.,  2895.,  3510.,  4125.,
      4740.,  3330.,  4020.,  4710.,  5400.,  3765.,  4530.,  5295.,  6060.,
      4200.,  5040.,  5880.,  6720.,  3474.,  3996.,  4518.,  5040.,  4212.,
      4824.,  5436.,  6048.,  4950.,  5652.,  6354.,  7056.,  5688.,  6480.,
      7272.,  8064.,  3996.,  4608.,  5220.,  5832.,  4896.,  5616.,  6336.,
      7056.,  5796.,  6624.,  7452.,  8280.,  6696.,  7632.,  8568.,  9504.,
      6246.,  7020.,  7794.,  8568.,  7236.,  8136.,  9036.,  9936.,  8226.,
      9252.,  10278., 11304., 9216.,  10368., 11520., 12672., 9936.,  10944.,
      11952., 12960., 10944., 12096., 13248., 14400., 11952., 13248., 14544.,
      15840., 12960., 14400., 15840., 17280., 6246.,  7236.,  8226.,  9216.,
      7020.,  8136.,  9252.,  10368., 7794.,  9036.,  10278., 11520., 8568.,
      9936.,  11304., 12672., 3996.,  4896.,  5796.,  6696.,  4608.,  5616.,
      6624.,  7632.,  5220.,  6336.,  7452.,  8568.,  5832.,  7056.,  8280.,
      9504.,  3474.,  4212.,  4950.,  5688.,  3996.,  4824.,  5652.,  6480.,
      4518.,  5436.,  6354.,  7272.,  5040.,  6048.,  7056.,  8064.,  4053.,
      4662.,  5271.,  5880.,  4914.,  5628.,  6342.,  7056.,  5775.,  6594.,
      7413.,  8232.,  6636.,  7560.,  8484.,  9408.,  4662.,  5376.,  6090.,
      6804.,  5712.,  6552.,  7392.,  8232.,  6762.,  7728.,  8694.,  9660.,
      7812.,  8904.,  9996.,  11088., 7287.,  8190.,  9093.,  9996.,  8442.,
      9492.,  10542., 11592., 9597.,  10794., 11991., 13188., 10752., 12096.,
      13440., 14784., 11592., 12768., 13944., 15120., 12768., 14112., 15456.,
      16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480., 20160.,
      7287.,  8442.,  9597.,  10752., 8190.,  9492.,  10794., 12096., 9093.,
      10542., 11991., 13440., 9996.,  11592., 13188., 14784., 4662.,  5712.,
      6762.,  7812.,  5376.,  6552.,  7728.,  8904.,  6090.,  7392.,  8694.,
      9996.,  6804.,  8232.,  9660.,  11088., 4053.,  4914.,  5775.,  6636.,
      4662.,  5628.,  6594.,  7560.,  5271.,  6342.,  7413.,  8484.,  5880.,
      7056.,  8232.,  9408.,  4632.,  5328.,  6024.,  6720.,  5616.,  6432.,
      7248.,  8064.,  6600.,  7536.,  8472.,  9408.,  7584.,  8640.,  9696.,
      10752., 5328.,  6144.,  6960.,  7776.,  6528.,  7488.,  8448.,  9408.,
      7728.,  8832.,  9936.,  11040., 8928.,  10176., 11424., 12672., 8328.,
      9360.,  10392., 11424., 9648.,  10848., 12048., 13248., 10968., 12336.,
      13704., 15072., 12288., 13824., 15360., 16896., 13248., 14592., 15936.,
      17280., 14592., 16128., 17664., 19200., 15936., 17664., 19392., 21120.,
      17280., 19200., 21120., 23040., 8328.,  9648.,  10968., 12288., 9360.,
      10848., 12336., 13824., 10392., 12048., 13704., 15360., 11424., 13248.,
      15072., 16896., 5328.,  6528.,  7728.,  8928.,  6144.,  7488.,  8832.,
      10176., 6960.,  8448.,  9936.,  11424., 7776.,  9408.,  11040., 12672.,
      4632.,  5616.,  6600.,  7584.,  5328.,  6432.,  7536.,  8640.,  6024.,
      7248.,  8472.,  9696.,  6720.,  8064.,  9408.,  10752., 4053.,  4662.,
      5271.,  5880.,  4914.,  5628.,  6342.,  7056.,  5775.,  6594.,  7413.,
      8232.,  6636.,  7560.,  8484.,  9408.,  4662.,  5376.,  6090.,  6804.,
      5712.,  6552.,  7392.,  8232.,  6762.,  7728.,  8694.,  9660.,  7812.,
      8904.,  9996.,  11088., 7287.,  8190.,  9093.,  9996.,  8442.,  9492.,
      10542., 11592., 9597.,  10794., 11991., 13188., 10752., 12096., 13440.,
      14784., 11592., 12768., 13944., 15120., 12768., 14112., 15456., 16800.,
      13944., 15456., 16968., 18480., 15120., 16800., 18480., 20160., 7287.,
      8442.,  9597.,  10752., 8190.,  9492.,  10794., 12096., 9093.,  10542.,
      11991., 13440., 9996.,  11592., 13188., 14784., 4662.,  5712.,  6762.,
      7812.,  5376.,  6552.,  7728.,  8904.,  6090.,  7392.,  8694.,  9996.,
      6804.,  8232.,  9660.,  11088., 4053.,  4914.,  5775.,  6636.,  4662.,
      5628.,  6594.,  7560.,  5271.,  6342.,  7413.,  8484.,  5880.,  7056.,
      8232.,  9408.,  3474.,  3996.,  4518.,  5040.,  4212.,  4824.,  5436.,
      6048.,  4950.,  5652.,  6354.,  7056.,  5688.,  6480.,  7272.,  8064.,
      3996.,  4608.,  5220.,  5832.,  4896.,  5616.,  6336.,  7056.,  5796.,
      6624.,  7452.,  8280.,  6696.,  7632.,  8568.,  9504.,  6246.,  7020.,
      7794.,  8568.,  7236.,  8136.,  9036.,  9936.,  8226.,  9252.,  10278.,
      11304., 9216.,  10368., 11520., 12672., 9936.,  10944., 11952., 12960.,
      10944., 12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960.,
      14400., 15840., 17280., 6246.,  7236.,  8226.,  9216.,  7020.,  8136.,
      9252.,  10368., 7794.,  9036.,  10278., 11520., 8568.,  9936.,  11304.,
      12672., 3996.,  4896.,  5796.,  6696.,  4608.,  5616.,  6624.,  7632.,
      5220.,  6336.,  7452.,  8568.,  5832.,  7056.,  8280.,  9504.,  3474.,
      4212.,  4950.,  5688.,  3996.,  4824.,  5652.,  6480.,  4518.,  5436.,
      6354.,  7272.,  5040.,  6048.,  7056.,  8064.,  2895.,  3330.,  3765.,
      4200.,  3510.,  4020.,  4530.,  5040.,  4125.,  4710.,  5295.,  5880.,
      4740.,  5400.,  6060.,  6720.,  3330.,  3840.,  4350.,  4860.,  4080.,
      4680.,  5280.,  5880.,  4830.,  5520.,  6210.,  6900.,  5580.,  6360.,
      7140.,  7920.,  5205.,  5850.,  6495.,  7140.,  6030.,  6780.,  7530.,
      8280.,  6855.,  7710.,  8565.,  9420.,  7680.,  8640.,  9600.,  10560.,
      8280.,  9120.,  9960.,  10800., 9120.,  10080., 11040., 12000., 9960.,
      11040., 12120., 13200., 10800., 12000., 13200., 14400., 5205.,  6030.,
      6855.,  7680.,  5850.,  6780.,  7710.,  8640.,  6495.,  7530.,  8565.,
      9600.,  7140.,  8280.,  9420.,  10560., 3330.,  4080.,  4830.,  5580.,
      3840.,  4680.,  5520.,  6360.,  4350.,  5280.,  6210.,  7140.,  4860.,
      5880.,  6900.,  7920.,  2895.,  3510.,  4125.,  4740.,  3330.,  4020.,
      4710.,  5400.,  3765.,  4530.,  5295.,  6060.,  4200.,  5040.,  5880.,
      6720.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6060.,  6288.,  6516.,  6744.,  6336.,  6576.,  6816.,  7056.,  6612.,
      6864.,  7116.,  7368.,  6888.,  7152.,  7416.,  7680.,  7164.,  7440.,
      7716.,  7992.,  7440.,  7728.,  8016.,  8304.,  7716.,  8016.,  8316.,
      8616.,  7992.,  8304.,  8616.,  8928.,  8268.,  8592.,  8916.,  9240.,
      8544.,  8880.,  9216.,  9552.,  8820.,  9168.,  9516.,  9864.,  9096.,
      9456.,  9816.,  10176., 9372.,  9744.,  10116., 10488., 9648.,  10032.,
      10416., 10800., 9924.,  10320., 10716., 11112., 10200., 10608., 11016.,
      11424., 10476., 10896., 11316., 11736., 10752., 11184., 11616., 12048.,
      11028., 11472., 11916., 12360., 11304., 11760., 12216., 12672., 11580.,
      12048., 12516., 12984., 11856., 12336., 12816., 13296., 12132., 12624.,
      13116., 13608., 12408., 12912., 13416., 13920., 12684., 13200., 13716.,
      14232., 12960., 13488., 14016., 14544., 13236., 13776., 14316., 14856.,
      13512., 14064., 14616., 15168., 4524.,  4752.,  4980.,  5208.,  4800.,
      5040.,  5280.,  5520.,  5076.,  5328.,  5580.,  5832.,  5352.,  5616.,
      5880.,  6144.,  5628.,  5904.,  6180.,  6456.,  5904.,  6192.,  6480.,
      6768.,  6180.,  6480.,  6780.,  7080.,  6456.,  6768.,  7080.,  7392.,
      6732.,  7056.,  7380.,  7704.,  7008.,  7344.,  7680.,  8016.,  7284.,
      7632.,  7980.,  8328.,  7560.,  7920.,  8280.,  8640.,  7836.,  8208.,
      8580.,  8952.,  8112.,  8496.,  8880.,  9264.,  8388.,  8784.,  9180.,
      9576.,  8664.,  9072.,  9480.,  9888.,  8940.,  9360.,  9780.,  10200.,
      9216.,  9648.,  10080., 10512., 9492.,  9936.,  10380., 10824., 9768.,
      10224., 10680., 11136., 10044., 10512., 10980., 11448., 10320., 10800.,
      11280., 11760., 10596., 11088., 11580., 12072., 10872., 11376., 11880.,
      12384., 11148., 11664., 12180., 12696., 11424., 11952., 12480., 13008.,
      11700., 12240., 12780., 13320., 11976., 12528., 13080., 13632., 6060.,
      6288.,  6516.,  6744.,  6336.,  6576.,  6816.,  7056.,  6612.,  6864.,
      7116.,  7368.,  6888.,  7152.,  7416.,  7680.,  7164.,  7440.,  7716.,
      7992.,  7440.,  7728.,  8016.,  8304.,  7716.,  8016.,  8316.,  8616.,
      7992.,  8304.,  8616.,  8928.,  8268.,  8592.,  8916.,  9240.,  8544.,
      8880.,  9216.,  9552.,  8820.,  9168.,  9516.,  9864.,  9096.,  9456.,
      9816.,  10176., 9372.,  9744.,  10116., 10488., 9648.,  10032., 10416.,
      10800., 9924.,  10320., 10716., 11112., 10200., 10608., 11016., 11424.,
      10476., 10896., 11316., 11736., 10752., 11184., 11616., 12048., 11028.,
      11472., 11916., 12360., 11304., 11760., 12216., 12672., 11580., 12048.,
      12516., 12984., 11856., 12336., 12816., 13296., 12132., 12624., 13116.,
      13608., 12408., 12912., 13416., 13920., 12684., 13200., 13716., 14232.,
      12960., 13488., 14016., 14544., 13236., 13776., 14316., 14856., 13512.,
      14064., 14616., 15168., 4524.,  4752.,  4980.,  5208.,  4800.,  5040.,
      5280.,  5520.,  5076.,  5328.,  5580.,  5832.,  5352.,  5616.,  5880.,
      6144.,  5628.,  5904.,  6180.,  6456.,  5904.,  6192.,  6480.,  6768.,
      6180.,  6480.,  6780.,  7080.,  6456.,  6768.,  7080.,  7392.,  6732.,
      7056.,  7380.,  7704.,  7008.,  7344.,  7680.,  8016.,  7284.,  7632.,
      7980.,  8328.,  7560.,  7920.,  8280.,  8640.,  7836.,  8208.,  8580.,
      8952.,  8112.,  8496.,  8880.,  9264.,  8388.,  8784.,  9180.,  9576.,
      8664.,  9072.,  9480.,  9888.,  8940.,  9360.,  9780.,  10200., 9216.,
      9648.,  10080., 10512., 9492.,  9936.,  10380., 10824., 9768.,  10224.,
      10680., 11136., 10044., 10512., 10980., 11448., 10320., 10800., 11280.,
      11760., 10596., 11088., 11580., 12072., 10872., 11376., 11880., 12384.,
      11148., 11664., 12180., 12696., 11424., 11952., 12480., 13008., 11700.,
      12240., 12780., 13320., 11976., 12528., 13080., 13632., 6060.,  6288.,
      6516.,  6744.,  6336.,  6576.,  6816.,  7056.,  6612.,  6864.,  7116.,
      7368.,  6888.,  7152.,  7416.,  7680.,  7164.,  7440.,  7716.,  7992.,
      7440.,  7728.,  8016.,  8304.,  7716.,  8016.,  8316.,  8616.,  7992.,
      8304.,  8616.,  8928.,  8268.,  8592.,  8916.,  9240.,  8544.,  8880.,
      9216.,  9552.,  8820.,  9168.,  9516.,  9864.,  9096.,  9456.,  9816.,
      10176., 9372.,  9744.,  10116., 10488., 9648.,  10032., 10416., 10800.,
      9924.,  10320., 10716., 11112., 10200., 10608., 11016., 11424., 10476.,
      10896., 11316., 11736., 10752., 11184., 11616., 12048., 11028., 11472.,
      11916., 12360., 11304., 11760., 12216., 12672., 11580., 12048., 12516.,
      12984., 11856., 12336., 12816., 13296., 12132., 12624., 13116., 13608.,
      12408., 12912., 13416., 13920., 12684., 13200., 13716., 14232., 12960.,
      13488., 14016., 14544., 13236., 13776., 14316., 14856., 13512., 14064.,
      14616., 15168., 4524.,  4752.,  4980.,  5208.,  4800.,  5040.,  5280.,
      5520.,  5076.,  5328.,  5580.,  5832.,  5352.,  5616.,  5880.,  6144.,
      5628.,  5904.,  6180.,  6456.,  5904.,  6192.,  6480.,  6768.,  6180.,
      6480.,  6780.,  7080.,  6456.,  6768.,  7080.,  7392.,  6732.,  7056.,
      7380.,  7704.,  7008.,  7344.,  7680.,  8016.,  7284.,  7632.,  7980.,
      8328.,  7560.,  7920.,  8280.,  8640.,  7836.,  8208.,  8580.,  8952.,
      8112.,  8496.,  8880.,  9264.,  8388.,  8784.,  9180.,  9576.,  8664.,
      9072.,  9480.,  9888.,  8940.,  9360.,  9780.,  10200., 9216.,  9648.,
      10080., 10512., 9492.,  9936.,  10380., 10824., 9768.,  10224., 10680.,
      11136., 10044., 10512., 10980., 11448., 10320., 10800., 11280., 11760.,
      10596., 11088., 11580., 12072., 10872., 11376., 11880., 12384., 11148.,
      11664., 12180., 12696., 11424., 11952., 12480., 13008., 11700., 12240.,
      12780., 13320., 11976., 12528., 13080., 13632., 6060.,  6288.,  6516.,
      6744.,  6336.,  6576.,  6816.,  7056.,  6612.,  6864.,  7116.,  7368.,
      6888.,  7152.,  7416.,  7680.,  7164.,  7440.,  7716.,  7992.,  7440.,
      7728.,  8016.,  8304.,  7716.,  8016.,  8316.,  8616.,  7992.,  8304.,
      8616.,  8928.,  8268.,  8592.,  8916.,  9240.,  8544.,  8880.,  9216.,
      9552.,  8820.,  9168.,  9516.,  9864.,  9096.,  9456.,  9816.,  10176.,
      9372.,  9744.,  10116., 10488., 9648.,  10032., 10416., 10800., 9924.,
      10320., 10716., 11112., 10200., 10608., 11016., 11424., 10476., 10896.,
      11316., 11736., 10752., 11184., 11616., 12048., 11028., 11472., 11916.,
      12360., 11304., 11760., 12216., 12672., 11580., 12048., 12516., 12984.,
      11856., 12336., 12816., 13296., 12132., 12624., 13116., 13608., 12408.,
      12912., 13416., 13920., 12684., 13200., 13716., 14232., 12960., 13488.,
      14016., 14544., 13236., 13776., 14316., 14856., 13512., 14064., 14616.,
      15168.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7039.,  7680.,  8068.,  8556.,  7484.,  6502.,  5625.,  6718.,  8383.,
      10248., 12663., 11976., 11415., 8694.,  8711.,  9682.,  10532., 11608.,
      10332., 9224.,  8097.,  10248., 12948., 15968., 19652., 15968., 12948.,
      10248., 8097.,  9224.,  10332., 11608., 10532., 9682.,  8711.,  8694.,
      11415., 11976., 12663., 10248., 8383.,  6718.,  5625.,  6502.,  7484.,
      8556.,  8068.,  7680.,  7039.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18741., 18912., 19083., 19254., 19425., 19596., 19767., 20280., 20451.,
      20622., 20793., 20964., 21135., 21306., 21819., 21990., 22161., 22332.,
      22503., 22674., 22845., 23358., 23529., 23700., 23871., 24042., 24213.,
      24384., 24897., 25068., 25239., 25410., 25581., 25752., 25923., 26436.,
      26607., 26778., 26949., 27120., 27291., 27462., 27975., 28146., 28317.,
      28488., 28659., 28830., 29001.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5759.,  6526.,  6498.,  7392.,  7452.,  8456.,  8799.,  9912.,  7940.,
      8952.,  7388.,  8284.,  7173.,  7938.,  6516.,  7436.,  7587.,  8654.,
      8880.,  10080., 10791., 12126., 10080., 11280., 9783.,  10830., 7632.,
      8508.,  7739.,  8814.,  9231.,  10484., 11180., 12600., 13688., 15280.,
      13156., 14584., 10581., 11824., 8421.,  9474.,  8880.,  10080., 10940.,
      12344., 13440., 15040., 16700., 18504., 13504., 15104., 11020., 12424.,
      9024.,  10224., 8145.,  9234.,  10336., 11600., 13220., 14648., 13443.,
      15056., 11036., 12456., 9326.,  10564., 7859.,  8910.,  7260.,  8172.,
      9783.,  10830., 10128., 11328., 10563., 11934., 9024.,  10224., 7883.,
      8926.,  6968.,  7852.,  7317.,  8082.,  7563.,  8444.,  7892.,  8904.,
      8274.,  9432.,  7292.,  8296.,  6669.,  7536.,  6003.,  6734.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13029., 13674., 13353., 14016., 13677., 14358., 14001., 14700., 14325.,
      15042., 14649., 15384., 14973., 15726., 15945., 16752., 16269., 17094.,
      16593., 17436., 16917., 17778., 17241., 18120., 17565., 18462., 17889.,
      18804., 18861., 19830., 19185., 20172., 19509., 20514., 19833., 20856.,
      20157., 21198., 20481., 21540., 20805., 21882., 21777., 22908., 22101.,
      23250., 22425., 23592., 22749., 23934., 23073., 24276., 23397., 24618.,
      23721., 24960., 24693., 25986., 25017., 26328., 25341., 26670., 25665.,
      27012., 25989., 27354., 26313., 27696., 26637., 28038., 24665., 25992.,
      22301., 23518., 20193., 21300., 20517., 21642., 20841., 21984., 21165.,
      22326., 21489., 22668., 20285., 21390., 18689., 19684., 17349., 18234.,
      17673., 18576., 17997., 18918., 18321., 19260., 18645., 19602.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5391.,  6158.,  6925.,  7692.,  6342.,  7236.,  8130.,  9024.,  7660.,
      8664.,  9668.,  10672., 7845.,  8958.,  10071., 11184., 6708.,  7720.,
      8732.,  9744.,  6120.,  7016.,  7912.,  8808.,  5917.,  6682.,  7447.,
      8212.,  6608.,  7528.,  8448.,  9368.,  8123.,  9190.,  10257., 11324.,
      8176.,  9376.,  10576., 11776., 9079.,  10414., 11749., 13084., 8272.,
      9472.,  10672., 11872., 8055.,  9102.,  10149., 11196., 6228.,  7104.,
      7980.,  8856.,  8163.,  9238.,  10313., 11388., 8569.,  9822.,  11075.,
      12328., 9516.,  10936., 12356., 13776., 11192., 12784., 14376., 15968.,
      10772., 12200., 13628., 15056., 8671.,  9914.,  11157., 12400., 7101.,
      8154.,  9207.,  10260., 8176.,  9376.,  10576., 11776., 9308.,  10712.,
      12116., 13520., 10944., 12544., 14144., 15744., 13708., 15512., 17316.,
      19120., 11072., 12672., 14272., 15872., 9340.,  10744., 12148., 13552.,
      8336.,  9536.,  10736., 11936., 7041.,  8130.,  9219.,  10308., 8464.,
      9728.,  10992., 12256., 10900., 12328., 13756., 15184., 10985., 12598.,
      14211., 15824., 9356.,  10776., 12196., 13616., 8550.,  9788.,  11026.,
      12264., 7931.,  8982.,  10033., 11084., 5976.,  6888.,  7800.,  8712.,
      8055.,  9102.,  10149., 11196., 8240.,  9440.,  10640., 11840., 8987.,
      10358., 11729., 13100., 8336.,  9536.,  10736., 11936., 7859.,  8902.,
      9945.,  10988., 5948.,  6832.,  7716.,  8600.,  6077.,  6842.,  7607.,
      8372.,  6133.,  7014.,  7895.,  8776.,  6740.,  7752.,  8764.,  9776.,
      7806.,  8964.,  10122., 11280., 7596.,  8600.,  9604.,  10608., 5895.,
      6762.,  7629.,  8496.,  4699.,  5430.,  6161.,  6892.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8453.,  8714.,  8975.,  9236.,  8955.,  9234.,  9513.,  9792.,  9457.,
      9754.,  10051., 10348., 9959.,  10274., 10589., 10904., 10461., 10794.,
      11127., 11460., 10963., 11314., 11665., 12016., 11465., 11834., 12203.,
      12572., 12971., 13394., 13817., 14240., 13473., 13914., 14355., 14796.,
      13975., 14434., 14893., 15352., 14477., 14954., 15431., 15908., 14979.,
      15474., 15969., 16464., 15481., 15994., 16507., 17020., 15983., 16514.,
      17045., 17576., 17489., 18074., 18659., 19244., 17991., 18594., 19197.,
      19800., 18493., 19114., 19735., 20356., 18995., 19634., 20273., 20912.,
      19497., 20154., 20811., 21468., 19999., 20674., 21349., 22024., 20501.,
      21194., 21887., 22580., 22007., 22754., 23501., 24248., 22509., 23274.,
      24039., 24804., 23011., 23794., 24577., 25360., 23513., 24314., 25115.,
      25916., 24015., 24834., 25653., 26472., 24517., 25354., 26191., 27028.,
      25019., 25874., 26729., 27584., 26525., 27434., 28343., 29252., 26707.,
      27570., 28433., 29296., 27145., 27962., 28779., 29596., 23743., 24514.,
      25285., 26056., 24245., 25034., 25823., 26612., 24747., 25554., 26361.,
      27168., 25249., 26074., 26899., 27724., 23875., 24690., 25505., 26320.,
      18105., 18810., 19515., 20220., 12847., 13442., 14037., 14632., 10213.,
      10762., 11311., 11860., 10715., 11282., 11849., 12416., 11217., 11802.,
      12387., 12972., 11719., 12322., 12925., 13528., 8681.,  9146.,  9611.,
      10076., 6495.,  6850.,  7205.,  7560.,  5397.,  5706.,  6015.,  6324.,
      5899.,  6226.,  6553.,  6880.,  6401.,  6746.,  7091.,  7436.,  6903.,
      7266.,  7629.,  7992.,  7405.,  7786.,  8167.,  8548.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6003.,  6734.,  6669.,  7536.,  7292.,  8296.,  8274.,  9432.,  7892.,
      8904.,  7563.,  8444.,  7317.,  8082.,  6968.,  7852.,  7883.,  8926.,
      9024.,  10224., 10563., 11934., 10128., 11328., 9783.,  10830., 7260.,
      8172.,  7859.,  8910.,  9326.,  10564., 11036., 12456., 13443., 15056.,
      13220., 14648., 10336., 11600., 8145.,  9234.,  9024.,  10224., 11020.,
      12424., 13504., 15104., 16700., 18504., 13440., 15040., 10940., 12344.,
      8880.,  10080., 8421.,  9474.,  10581., 11824., 13156., 14584., 13688.,
      15280., 11180., 12600., 9231.,  10484., 7739.,  8814.,  7632.,  8508.,
      9783.,  10830., 10080., 11280., 10791., 12126., 8880.,  10080., 7587.,
      8654.,  6516.,  7436.,  7173.,  7938.,  7388.,  8284.,  7940.,  8952.,
      8799.,  9912.,  7452.,  8456.,  6498.,  7392.,  5759.,  6526.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13503., 13674., 13845., 14016., 14187., 14358., 14529., 14700., 14871.,
      15042., 15213., 15384., 15555., 15726., 16581., 16752., 16923., 17094.,
      17265., 17436., 17607., 17778., 17949., 18120., 18291., 18462., 18633.,
      18804., 19659., 19830., 20001., 20172., 20343., 20514., 20685., 20856.,
      21027., 21198., 21369., 21540., 21711., 21882., 22737., 22908., 23079.,
      23250., 23421., 23592., 23763., 23934., 24105., 24276., 24447., 24618.,
      24789., 24960., 25815., 25986., 26157., 26328., 26499., 26670., 26841.,
      27012., 27183., 27354., 27525., 27696., 27867., 28038., 25821., 25992.,
      23347., 23518., 21129., 21300., 21471., 21642., 21813., 21984., 22155.,
      22326., 22497., 22668., 21219., 21390., 19513., 19684., 18063., 18234.,
      18405., 18576., 18747., 18918., 19089., 19260., 19431., 19602.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5538.,  6294.,  6222.,  7068.,  5799.,  6666.,  6612.,  7584.,  6360.,
      7320.,  7320.,  8400.,  7545.,  8580.,  8670.,  9840.,  7320.,  8280.,
      8280.,  9360.,  7455.,  8310.,  8280.,  9240.,  8010.,  8730.,  8730.,
      9540.,  5964.,  6864.,  6792.,  7800.,  6654.,  7686.,  7638.,  8796.,
      7920.,  9072.,  9072.,  10368., 10074., 11334., 11406., 12828., 10224.,
      11376., 11376., 12672., 10878., 11886., 11886., 13020., 7500.,  8328.,
      8400.,  9336.,  6654.,  7686.,  7638.,  8796.,  8037.,  9228.,  9198.,
      10536., 10248., 11592., 11592., 13104., 13587., 15078., 15120., 16800.,
      14280., 15624., 15624., 17136., 10269., 11424., 11466., 12768., 7494.,
      8466.,  8538.,  9636.,  7920.,  9072.,  9072.,  10368., 10248., 11592.,
      11592., 13104., 13632., 15168., 15168., 16896., 18360., 20088., 20088.,
      22032., 13632., 15168., 15168., 16896., 10248., 11592., 11592., 13104.,
      7920.,  9072.,  9072.,  10368., 7494.,  8538.,  8466.,  9636.,  10269.,
      11466., 11424., 12768., 14280., 15624., 15624., 17136., 13587., 15120.,
      15078., 16800., 10248., 11592., 11592., 13104., 8037.,  9198.,  9228.,
      10536., 6654.,  7638.,  7686.,  8796.,  7500.,  8400.,  8328.,  9336.,
      10878., 11886., 11886., 13020., 10224., 11376., 11376., 12672., 10074.,
      11406., 11334., 12828., 7920.,  9072.,  9072.,  10368., 6654.,  7638.,
      7686.,  8796.,  5964.,  6792.,  6864.,  7800.,  8010.,  8730.,  8730.,
      9540.,  7455.,  8280.,  8310.,  9240.,  7320.,  8280.,  8280.,  9360.,
      7545.,  8670.,  8580.,  9840.,  6360.,  7320.,  7320.,  8400.,  5799.,
      6612.,  6666.,  7584.,  5538.,  6222.,  6294.,  7068.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11910., 12414., 12234., 12756., 12558., 13098., 12882., 13440., 13206.,
      13782., 13530., 14124., 13854., 14466., 14178., 14808., 14502., 15150.,
      14826., 15492., 12910., 13530., 13234., 13872., 11446., 12038., 11770.,
      12380., 11406., 12042., 11730., 12384., 12054., 12726., 12378., 13068.,
      12702., 13410., 13026., 13752., 13350., 14094., 13674., 14436., 12526.,
      13242., 12850., 13584., 9974.,  10598., 10298., 10940., 7678.,  8210.,
      8002.,  8552.,  8022.,  8598.,  8346.,  8940.,  8670.,  9282.,  8994.,
      9624.,  9318.,  9966.,  9642.,  10308., 9262.,  9882.,  9586.,  10224.,
      8246.,  8774.,  8570.,  9116.,  7486.,  7922.,  7810.,  8264.,  7302.,
      7710.,  7626.,  8052.,  9246.,  9762.,  9570.,  10104., 9894.,  10446.,
      10218., 10788., 10542., 11130., 10866., 11472., 10870., 11430., 11194.,
      11772., 11326., 11858., 11650., 12200., 11910., 12414., 12234., 12756.,
      12558., 13098., 12882., 13440., 14502., 15150., 14826., 15492., 12910.,
      13530., 13234., 13872., 11446., 12038., 11770., 12380., 10110., 10674.,
      10434., 11016., 10758., 11358., 11082., 11700., 11406., 12042., 11730.,
      12384., 12054., 12726., 12378., 13068., 12526., 13242., 12850., 13584.,
      9974.,  10598., 10298., 10940., 7678.,  8210.,  8002.,  8552.,  6726.,
      7230.,  7050.,  7572.,  7374.,  7914.,  7698.,  8256.,  8022.,  8598.,
      8346.,  8940.,  8670.,  9282.,  8994.,  9624.,  8246.,  8774.,  8570.,
      9116.,  7486.,  7922.,  7810.,  8264.,  7302.,  7710.,  7626.,  8052.,
      7950.,  8394.,  8274.,  8736.,  8598.,  9078.,  8922.,  9420.,  9246.,
      9762.,  9570.,  10104., 9894.,  10446., 10218., 10788.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5088.,  5844.,  6600.,  7356.,  5742.,  6588.,  7434.,  8280.,  6123.,
      6990.,  7857.,  8724.,  6876.,  7848.,  8820.,  9792.,  7920.,  8880.,
      9840.,  10800., 8760.,  9840.,  10920., 12000., 7143.,  8178.,  9213.,
      10248., 8106.,  9276.,  10446., 11616., 6000.,  6960.,  7920.,  8880.,
      6840.,  7920.,  9000.,  10080., 5751.,  6606.,  7461.,  8316.,  6480.,
      7440.,  8400.,  9360.,  6324.,  7044.,  7764.,  8484.,  6954.,  7764.,
      8574.,  9384.,  6420.,  7320.,  8220.,  9120.,  7200.,  8208.,  9216.,
      10224., 8436.,  9468.,  10500., 11532., 9318.,  10476., 11634., 12792.,
      7776.,  8928.,  10080., 11232., 8784.,  10080., 11376., 12672., 8136.,
      9396.,  10656., 11916., 9294.,  10716., 12138., 13560., 7776.,  8928.,
      10080., 11232., 8784.,  10080., 11376., 12672., 8508.,  9516.,  10524.,
      11532., 9390.,  10524., 11658., 12792., 5676.,  6504.,  7332.,  8160.,
      6456.,  7392.,  8328.,  9264.,  8436.,  9468.,  10500., 11532., 9318.,
      10476., 11634., 12792., 7971.,  9162.,  10353., 11544., 8994.,  10332.,
      11670., 13008., 8400.,  9744.,  11088., 12432., 9576.,  11088., 12600.,
      14112., 10323., 11814., 13305., 14796., 11664., 13344., 15024., 16704.,
      11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800., 7815.,
      8970.,  10125., 11280., 8862.,  10164., 11466., 12768., 6144.,  7116.,
      8088.,  9060.,  7050.,  8148.,  9246.,  10344., 7776.,  8928.,  10080.,
      11232., 8784.,  10080., 11376., 12672., 8400.,  9744.,  11088., 12432.,
      9576.,  11088., 12600., 14112., 10368., 11904., 13440., 14976., 11712.,
      13440., 15168., 16896., 14256., 15984., 17712., 19440., 15768., 17712.,
      19656., 21600., 10368., 11904., 13440., 14976., 11712., 13440., 15168.,
      16896., 8400.,  9744.,  11088., 12432., 9576.,  11088., 12600., 14112.,
      7776.,  8928.,  10080., 11232., 8784.,  10080., 11376., 12672., 6264.,
      7308.,  8352.,  9396.,  7122.,  8292.,  9462.,  10632., 7821.,  9018.,
      10215., 11412., 8832.,  10176., 11520., 12864., 11088., 12432., 13776.,
      15120., 12264., 13776., 15288., 16800., 10329., 11862., 13395., 14928.,
      11634., 13356., 15078., 16800., 8400.,  9744.,  11088., 12432., 9576.,
      11088., 12600., 14112., 7857.,  9018.,  10179., 11340., 8892.,  10200.,
      11508., 12816., 8100.,  9084.,  10068., 11052., 8982.,  10092., 11202.,
      12312., 5796.,  6696.,  7596.,  8496.,  6528.,  7536.,  8544.,  9552.,
      8508.,  9516.,  10524., 11532., 9390.,  10524., 11658., 12792., 7776.,
      8928.,  10080., 11232., 8784.,  10080., 11376., 12672., 8256.,  9588.,
      10920., 12252., 9366.,  10860., 12354., 13848., 7776.,  8928.,  10080.,
      11232., 8784.,  10080., 11376., 12672., 8100.,  9084.,  10068., 11052.,
      8982.,  10092., 11202., 12312., 5532.,  6360.,  7188.,  8016.,  6264.,
      7200.,  8136.,  9072.,  6324.,  7044.,  7764.,  8484.,  6954.,  7764.,
      8574.,  9384.,  5637.,  6462.,  7287.,  8112.,  6378.,  7308.,  8238.,
      9168.,  6000.,  6960.,  7920.,  8880.,  6840.,  7920.,  9000.,  10080.,
      7485.,  8610.,  9735.,  10860., 8412.,  9672.,  10932., 12192., 7920.,
      8880.,  9840.,  10800., 8760.,  9840.,  10920., 12000., 5457.,  6270.,
      7083.,  7896.,  6174.,  7092.,  8010.,  8928.,  4200.,  4884.,  5568.,
      6252.,  4806.,  5580.,  6354.,  7128.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16404., 16908., 17412., 17916., 16906., 17428., 17950., 18472., 17408.,
      17948., 18488., 19028., 17910., 18468., 19026., 19584., 18412., 18988.,
      19564., 20140., 18914., 19508., 20102., 20696., 19416., 20028., 20640.,
      21252., 19918., 20548., 21178., 21808., 20420., 21068., 21716., 22364.,
      20922., 21588., 22254., 22920., 21104., 21724., 22344., 22964., 21606.,
      22244., 22882., 23520., 22044., 22636., 23228., 23820., 22546., 23156.,
      23766., 24376., 21152., 21788., 22424., 23060., 21654., 22308., 22962.,
      23616., 22156., 22828., 23500., 24172., 22658., 23348., 24038., 24728.,
      23160., 23868., 24576., 25284., 23662., 24388., 25114., 25840., 24164.,
      24908., 25652., 26396., 24666., 25428., 26190., 26952., 22288., 23004.,
      23720., 24436., 22790., 23524., 24258., 24992., 17020., 17644., 18268.,
      18892., 17522., 18164., 18806., 19448., 12264., 12796., 13328., 13860.,
      12766., 13316., 13866., 14416., 12140., 12716., 13292., 13868., 12642.,
      13236., 13830., 14424., 13144., 13756., 14368., 14980., 13646., 14276.,
      14906., 15536., 14148., 14796., 15444., 16092., 14650., 15316., 15982.,
      16648., 13808., 14428., 15048., 15668., 14310., 14948., 15586., 16224.,
      11612., 12140., 12668., 13196., 12114., 12660., 13206., 13752., 9928.,
      10364., 10800., 11236., 10430., 10884., 11338., 11792., 9332.,  9740.,
      10148., 10556., 9834.,  10260., 10686., 11112., 12344., 12860., 13376.,
      13892., 12846., 13380., 13914., 14448., 13348., 13900., 14452., 15004.,
      13850., 14420., 14990., 15560., 14352., 14940., 15528., 16116., 14854.,
      15460., 16066., 16672., 14780., 15340., 15900., 16460., 15282., 15860.,
      16438., 17016., 15464., 15996., 16528., 17060., 15966., 16516., 17066.,
      17616., 16404., 16908., 17412., 17916., 16906., 17428., 17950., 18472.,
      17408., 17948., 18488., 19028., 17910., 18468., 19026., 19584., 20420.,
      21068., 21716., 22364., 20922., 21588., 22254., 22920., 21104., 21724.,
      22344., 22964., 21606., 22244., 22882., 23520., 22044., 22636., 23228.,
      23820., 22546., 23156., 23766., 24376., 19144., 19708., 20272., 20836.,
      19646., 20228., 20810., 21392., 20148., 20748., 21348., 21948., 20650.,
      21268., 21886., 22504., 21152., 21788., 22424., 23060., 21654., 22308.,
      22962., 23616., 22156., 22828., 23500., 24172., 22658., 23348., 24038.,
      24728., 22288., 23004., 23720., 24436., 22790., 23524., 24258., 24992.,
      17020., 17644., 18268., 18892., 17522., 18164., 18806., 19448., 12264.,
      12796., 13328., 13860., 12766., 13316., 13866., 14416., 10132., 10636.,
      11140., 11644., 10634., 11156., 11678., 12200., 11136., 11676., 12216.,
      12756., 11638., 12196., 12754., 13312., 12140., 12716., 13292., 13868.,
      12642., 13236., 13830., 14424., 13144., 13756., 14368., 14980., 13646.,
      14276., 14906., 15536., 11612., 12140., 12668., 13196., 12114., 12660.,
      13206., 13752., 9928.,  10364., 10800., 11236., 10430., 10884., 11338.,
      11792., 9332.,  9740.,  10148., 10556., 9834.,  10260., 10686., 11112.,
      10336., 10780., 11224., 11668., 10838., 11300., 11762., 12224., 11340.,
      11820., 12300., 12780., 11842., 12340., 12838., 13336., 12344., 12860.,
      13376., 13892., 12846., 13380., 13914., 14448., 13348., 13900., 14452.,
      15004., 13850., 14420., 14990., 15560.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4699.,  5430.,  6161.,  6892.,  5895.,  6762.,  7629.,  8496.,  7596.,
      8600.,  9604.,  10608., 7806.,  8964.,  10122., 11280., 6740.,  7752.,
      8764.,  9776.,  6133.,  7014.,  7895.,  8776.,  6077.,  6842.,  7607.,
      8372.,  5948.,  6832.,  7716.,  8600.,  7859.,  8902.,  9945.,  10988.,
      8336.,  9536.,  10736., 11936., 8987.,  10358., 11729., 13100., 8240.,
      9440.,  10640., 11840., 8055.,  9102.,  10149., 11196., 5976.,  6888.,
      7800.,  8712.,  7931.,  8982.,  10033., 11084., 8550.,  9788.,  11026.,
      12264., 9356.,  10776., 12196., 13616., 10985., 12598., 14211., 15824.,
      10900., 12328., 13756., 15184., 8464.,  9728.,  10992., 12256., 7041.,
      8130.,  9219.,  10308., 8336.,  9536.,  10736., 11936., 9340.,  10744.,
      12148., 13552., 11072., 12672., 14272., 15872., 13708., 15512., 17316.,
      19120., 10944., 12544., 14144., 15744., 9308.,  10712., 12116., 13520.,
      8176.,  9376.,  10576., 11776., 7101.,  8154.,  9207.,  10260., 8671.,
      9914.,  11157., 12400., 10772., 12200., 13628., 15056., 11192., 12784.,
      14376., 15968., 9516.,  10936., 12356., 13776., 8569.,  9822.,  11075.,
      12328., 8163.,  9238.,  10313., 11388., 6228.,  7104.,  7980.,  8856.,
      8055.,  9102.,  10149., 11196., 8272.,  9472.,  10672., 11872., 9079.,
      10414., 11749., 13084., 8176.,  9376.,  10576., 11776., 8123.,  9190.,
      10257., 11324., 6608.,  7528.,  8448.,  9368.,  5917.,  6682.,  7447.,
      8212.,  6120.,  7016.,  7912.,  8808.,  6708.,  7720.,  8732.,  9744.,
      7845.,  8958.,  10071., 11184., 7660.,  8664.,  9668.,  10672., 6342.,
      7236.,  8130.,  9024.,  5391.,  6158.,  6925.,  7692.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12243., 12414., 12585., 12756., 12927., 13098., 13269., 13440., 13611.,
      13782., 13953., 14124., 14295., 14466., 14637., 14808., 14979., 15150.,
      15321., 15492., 13359., 13530., 13701., 13872., 11867., 12038., 12209.,
      12380., 11871., 12042., 12213., 12384., 12555., 12726., 12897., 13068.,
      13239., 13410., 13581., 13752., 13923., 14094., 14265., 14436., 13071.,
      13242., 13413., 13584., 10427., 10598., 10769., 10940., 8039.,  8210.,
      8381.,  8552.,  8427.,  8598.,  8769.,  8940.,  9111.,  9282.,  9453.,
      9624.,  9795.,  9966.,  10137., 10308., 9711.,  9882.,  10053., 10224.,
      8603.,  8774.,  8945.,  9116.,  7751.,  7922.,  8093.,  8264.,  7539.,
      7710.,  7881.,  8052.,  9591.,  9762.,  9933.,  10104., 10275., 10446.,
      10617., 10788., 10959., 11130., 11301., 11472., 11259., 11430., 11601.,
      11772., 11687., 11858., 12029., 12200., 12243., 12414., 12585., 12756.,
      12927., 13098., 13269., 13440., 14979., 15150., 15321., 15492., 13359.,
      13530., 13701., 13872., 11867., 12038., 12209., 12380., 10503., 10674.,
      10845., 11016., 11187., 11358., 11529., 11700., 11871., 12042., 12213.,
      12384., 12555., 12726., 12897., 13068., 13071., 13242., 13413., 13584.,
      10427., 10598., 10769., 10940., 8039.,  8210.,  8381.,  8552.,  7059.,
      7230.,  7401.,  7572.,  7743.,  7914.,  8085.,  8256.,  8427.,  8598.,
      8769.,  8940.,  9111.,  9282.,  9453.,  9624.,  8603.,  8774.,  8945.,
      9116.,  7751.,  7922.,  8093.,  8264.,  7539.,  7710.,  7881.,  8052.,
      8223.,  8394.,  8565.,  8736.,  8907.,  9078.,  9249.,  9420.,  9591.,
      9762.,  9933.,  10104., 10275., 10446., 10617., 10788.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4200.,  4806.,  4884.,  5580.,  5568.,  6354.,  6252.,  7128.,  5457.,
      6174.,  6270.,  7092.,  7083.,  8010.,  7896.,  8928.,  7920.,  8760.,
      8880.,  9840.,  9840.,  10920., 10800., 12000., 7485.,  8412.,  8610.,
      9672.,  9735.,  10932., 10860., 12192., 6000.,  6840.,  6960.,  7920.,
      7920.,  9000.,  8880.,  10080., 5637.,  6378.,  6462.,  7308.,  7287.,
      8238.,  8112.,  9168.,  6324.,  6954.,  7044.,  7764.,  7764.,  8574.,
      8484.,  9384.,  5532.,  6264.,  6360.,  7200.,  7188.,  8136.,  8016.,
      9072.,  8100.,  8982.,  9084.,  10092., 10068., 11202., 11052., 12312.,
      7776.,  8784.,  8928.,  10080., 10080., 11376., 11232., 12672., 8256.,
      9366.,  9588.,  10860., 10920., 12354., 12252., 13848., 7776.,  8784.,
      8928.,  10080., 10080., 11376., 11232., 12672., 8508.,  9390.,  9516.,
      10524., 10524., 11658., 11532., 12792., 5796.,  6528.,  6696.,  7536.,
      7596.,  8544.,  8496.,  9552.,  8100.,  8982.,  9084.,  10092., 10068.,
      11202., 11052., 12312., 7857.,  8892.,  9018.,  10200., 10179., 11508.,
      11340., 12816., 8400.,  9576.,  9744.,  11088., 11088., 12600., 12432.,
      14112., 10329., 11634., 11862., 13356., 13395., 15078., 14928., 16800.,
      11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800., 7821.,
      8832.,  9018.,  10176., 10215., 11520., 11412., 12864., 6264.,  7122.,
      7308.,  8292.,  8352.,  9462.,  9396.,  10632., 7776.,  8784.,  8928.,
      10080., 10080., 11376., 11232., 12672., 8400.,  9576.,  9744.,  11088.,
      11088., 12600., 12432., 14112., 10368., 11712., 11904., 13440., 13440.,
      15168., 14976., 16896., 14256., 15768., 15984., 17712., 17712., 19656.,
      19440., 21600., 10368., 11712., 11904., 13440., 13440., 15168., 14976.,
      16896., 8400.,  9576.,  9744.,  11088., 11088., 12600., 12432., 14112.,
      7776.,  8784.,  8928.,  10080., 10080., 11376., 11232., 12672., 6144.,
      7050.,  7116.,  8148.,  8088.,  9246.,  9060.,  10344., 7815.,  8862.,
      8970.,  10164., 10125., 11466., 11280., 12768., 11088., 12264., 12432.,
      13776., 13776., 15288., 15120., 16800., 10323., 11664., 11814., 13344.,
      13305., 15024., 14796., 16704., 8400.,  9576.,  9744.,  11088., 11088.,
      12600., 12432., 14112., 7971.,  8994.,  9162.,  10332., 10353., 11670.,
      11544., 13008., 8436.,  9318.,  9468.,  10476., 10500., 11634., 11532.,
      12792., 5676.,  6456.,  6504.,  7392.,  7332.,  8328.,  8160.,  9264.,
      8508.,  9390.,  9516.,  10524., 10524., 11658., 11532., 12792., 7776.,
      8784.,  8928.,  10080., 10080., 11376., 11232., 12672., 8136.,  9294.,
      9396.,  10716., 10656., 12138., 11916., 13560., 7776.,  8784.,  8928.,
      10080., 10080., 11376., 11232., 12672., 8436.,  9318.,  9468.,  10476.,
      10500., 11634., 11532., 12792., 6420.,  7200.,  7320.,  8208.,  8220.,
      9216.,  9120.,  10224., 6324.,  6954.,  7044.,  7764.,  7764.,  8574.,
      8484.,  9384.,  5751.,  6480.,  6606.,  7440.,  7461.,  8400.,  8316.,
      9360.,  6000.,  6840.,  6960.,  7920.,  7920.,  9000.,  8880.,  10080.,
      7143.,  8106.,  8178.,  9276.,  9213.,  10446., 10248., 11616., 7920.,
      8760.,  8880.,  9840.,  9840.,  10920., 10800., 12000., 6123.,  6876.,
      6990.,  7848.,  7857.,  8820.,  8724.,  9792.,  5088.,  5742.,  5844.,
      6588.,  6600.,  7434.,  7356.,  8280.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23496., 24486., 23820., 24828., 24144., 25170., 24468., 25512., 24792.,
      25854., 25116., 26196., 25440., 26538., 25764., 26880., 26088., 27222.,
      26412., 27564., 26736., 27906., 27060., 28248., 27384., 28590., 27708.,
      28932., 28032., 29274., 28356., 29616., 28680., 29958., 29004., 30300.,
      29328., 30642., 29652., 30984., 25496., 26718., 25820., 27060., 26144.,
      27402., 26468., 27744., 22568., 23734., 22892., 24076., 23216., 24418.,
      23540., 24760., 22488., 23742., 22812., 24084., 23136., 24426., 23460.,
      24768., 23784., 25110., 24108., 25452., 24432., 25794., 24756., 26136.,
      25080., 26478., 25404., 26820., 25728., 27162., 26052., 27504., 26376.,
      27846., 26700., 28188., 27024., 28530., 27348., 28872., 24728., 26142.,
      25052., 26484., 25376., 26826., 25700., 27168., 19624., 20854., 19948.,
      21196., 20272., 21538., 20596., 21880., 15032., 16078., 15356., 16420.,
      15680., 16762., 16004., 17104., 15720., 16854., 16044., 17196., 16368.,
      17538., 16692., 17880., 17016., 18222., 17340., 18564., 17664., 18906.,
      17988., 19248., 18312., 19590., 18636., 19932., 18960., 20274., 19284.,
      20616., 18200., 19422., 18524., 19764., 18848., 20106., 19172., 20448.,
      16168., 17206., 16492., 17548., 16816., 17890., 17140., 18232., 14648.,
      15502., 14972., 15844., 15296., 16186., 15620., 16528., 14280., 15078.,
      14604., 15420., 14928., 15762., 15252., 16104., 18168., 19182., 18492.,
      19524., 18816., 19866., 19140., 20208., 19464., 20550., 19788., 20892.,
      20112., 21234., 20436., 21576., 20760., 21918., 21084., 22260., 21408.,
      22602., 21732., 22944., 21416., 22518., 21740., 22860., 22064., 23202.,
      22388., 23544., 22328., 23374., 22652., 23716., 22976., 24058., 23300.,
      24400., 23496., 24486., 23820., 24828., 24144., 25170., 24468., 25512.,
      24792., 25854., 25116., 26196., 25440., 26538., 25764., 26880., 28680.,
      29958., 29004., 30300., 29328., 30642., 29652., 30984., 25496., 26718.,
      25820., 27060., 26144., 27402., 26468., 27744., 22568., 23734., 22892.,
      24076., 23216., 24418., 23540., 24760., 19896., 21006., 20220., 21348.,
      20544., 21690., 20868., 22032., 21192., 22374., 21516., 22716., 21840.,
      23058., 22164., 23400., 22488., 23742., 22812., 24084., 23136., 24426.,
      23460., 24768., 23784., 25110., 24108., 25452., 24432., 25794., 24756.,
      26136., 24728., 26142., 25052., 26484., 25376., 26826., 25700., 27168.,
      19624., 20854., 19948., 21196., 20272., 21538., 20596., 21880., 15032.,
      16078., 15356., 16420., 15680., 16762., 16004., 17104., 13128., 14118.,
      13452., 14460., 13776., 14802., 14100., 15144., 14424., 15486., 14748.,
      15828., 15072., 16170., 15396., 16512., 15720., 16854., 16044., 17196.,
      16368., 17538., 16692., 17880., 17016., 18222., 17340., 18564., 17664.,
      18906., 17988., 19248., 16168., 17206., 16492., 17548., 16816., 17890.,
      17140., 18232., 14648., 15502., 14972., 15844., 15296., 16186., 15620.,
      16528., 14280., 15078., 14604., 15420., 14928., 15762., 15252., 16104.,
      15576., 16446., 15900., 16788., 16224., 17130., 16548., 17472., 16872.,
      17814., 17196., 18156., 17520., 18498., 17844., 18840., 18168., 19182.,
      18492., 19524., 18816., 19866., 19140., 20208., 19464., 20550., 19788.,
      20892., 20112., 21234., 20436., 21576.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3330.,  3936.,  4542.,  5148.,  3984.,  4680.,  5376.,  6072.,  4638.,
      5424.,  6210.,  6996.,  5292.,  6168.,  7044.,  7920.,  4821.,  5538.,
      6255.,  6972.,  5574.,  6396.,  7218.,  8040.,  6327.,  7254.,  8181.,
      9108.,  7080.,  8112.,  9144.,  10176., 8280.,  9120.,  9960.,  10800.,
      9120.,  10080., 11040., 12000., 9960.,  11040., 12120., 13200., 10800.,
      12000., 13200., 14400., 5979.,  6906.,  7833.,  8760.,  6942.,  8004.,
      9066.,  10128., 7905.,  9102.,  10299., 11496., 8868.,  10200., 11532.,
      12864., 4440.,  5280.,  6120.,  6960.,  5280.,  6240.,  7200.,  8160.,
      6120.,  7200.,  8280.,  9360.,  6960.,  8160.,  9360.,  10560., 4725.,
      5466.,  6207.,  6948.,  5454.,  6300.,  7146.,  7992.,  6183.,  7134.,
      8085.,  9036.,  6912.,  7968.,  9024.,  10080., 6306.,  6936.,  7566.,
      8196.,  6936.,  7656.,  8376.,  9096.,  7566.,  8376.,  9186.,  9996.,
      8196.,  9096.,  9996.,  10896., 4956.,  5688.,  6420.,  7152.,  5736.,
      6576.,  7416.,  8256.,  6516.,  7464.,  8412.,  9360.,  7296.,  8352.,
      9408.,  10464., 8598.,  9480.,  10362., 11244., 9480.,  10488., 11496.,
      12504., 10362., 11496., 12630., 13764., 11244., 12504., 13764., 15024.,
      6480.,  7488.,  8496.,  9504.,  7488.,  8640.,  9792.,  10944., 8496.,
      9792.,  11088., 12384., 9504.,  10944., 12384., 13824., 5994.,  7104.,
      8214.,  9324.,  7152.,  8424.,  9696.,  10968., 8310.,  9744.,  11178.,
      12612., 9468.,  11064., 12660., 14256., 6480.,  7488.,  8496.,  9504.,
      7488.,  8640.,  9792.,  10944., 8496.,  9792.,  11088., 12384., 9504.,
      10944., 12384., 13824., 8790.,  9672.,  10554., 11436., 9672.,  10680.,
      11688., 12696., 10554., 11688., 12822., 13956., 11436., 12696., 13956.,
      15216., 4764.,  5496.,  6228.,  6960.,  5544.,  6384.,  7224.,  8064.,
      6324.,  7272.,  8220.,  9168.,  7104.,  8160.,  9216.,  10272., 8598.,
      9480.,  10362., 11244., 9480.,  10488., 11496., 12504., 10362., 11496.,
      12630., 13764., 11244., 12504., 13764., 15024., 6615.,  7650.,  8685.,
      9720.,  7638.,  8820.,  10002., 11184., 8661.,  9990.,  11319., 12648.,
      9684.,  11160., 12636., 14112., 6216.,  7392.,  8568.,  9744.,  7392.,
      8736.,  10080., 11424., 8568.,  10080., 11592., 13104., 9744.,  11424.,
      13104., 14784., 8601.,  9906.,  11211., 12516., 9942.,  11436., 12930.,
      14424., 11283., 12966., 14649., 16332., 12624., 14496., 16368., 18240.,
      11592., 12768., 13944., 15120., 12768., 14112., 15456., 16800., 13944.,
      15456., 16968., 18480., 15120., 16800., 18480., 20160., 6519.,  7530.,
      8541.,  9552.,  7566.,  8724.,  9882.,  11040., 8613.,  9918.,  11223.,
      12528., 9660.,  11112., 12564., 14016., 4662.,  5520.,  6378.,  7236.,
      5568.,  6552.,  7536.,  8520.,  6474.,  7584.,  8694.,  9804.,  7380.,
      8616.,  9852.,  11088., 6480.,  7488.,  8496.,  9504.,  7488.,  8640.,
      9792.,  10944., 8496.,  9792.,  11088., 12384., 9504.,  10944., 12384.,
      13824., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080., 11424.,
      8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784., 8640.,
      9984.,  11328., 12672., 9984.,  11520., 13056., 14592., 11328., 13056.,
      14784., 16512., 12672., 14592., 16512., 18432., 14904., 16416., 17928.,
      19440., 16416., 18144., 19872., 21600., 17928., 19872., 21816., 23760.,
      19440., 21600., 23760., 25920., 8640.,  9984.,  11328., 12672., 9984.,
      11520., 13056., 14592., 11328., 13056., 14784., 16512., 12672., 14592.,
      16512., 18432., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080.,
      11424., 8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784.,
      6480.,  7488.,  8496.,  9504.,  7488.,  8640.,  9792.,  10944., 8496.,
      9792.,  11088., 12384., 9504.,  10944., 12384., 13824., 4662.,  5568.,
      6474.,  7380.,  5520.,  6552.,  7584.,  8616.,  6378.,  7536.,  8694.,
      9852.,  7236.,  8520.,  9804.,  11088., 6519.,  7566.,  8613.,  9660.,
      7530.,  8724.,  9918.,  11112., 8541.,  9882.,  11223., 12564., 9552.,
      11040., 12528., 14016., 11592., 12768., 13944., 15120., 12768., 14112.,
      15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480.,
      20160., 8601.,  9942.,  11283., 12624., 9906.,  11436., 12966., 14496.,
      11211., 12930., 14649., 16368., 12516., 14424., 16332., 18240., 6216.,
      7392.,  8568.,  9744.,  7392.,  8736.,  10080., 11424., 8568.,  10080.,
      11592., 13104., 9744.,  11424., 13104., 14784., 6615.,  7638.,  8661.,
      9684.,  7650.,  8820.,  9990.,  11160., 8685.,  10002., 11319., 12636.,
      9720.,  11184., 12648., 14112., 8598.,  9480.,  10362., 11244., 9480.,
      10488., 11496., 12504., 10362., 11496., 12630., 13764., 11244., 12504.,
      13764., 15024., 4764.,  5544.,  6324.,  7104.,  5496.,  6384.,  7272.,
      8160.,  6228.,  7224.,  8220.,  9216.,  6960.,  8064.,  9168.,  10272.,
      8790.,  9672.,  10554., 11436., 9672.,  10680., 11688., 12696., 10554.,
      11688., 12822., 13956., 11436., 12696., 13956., 15216., 6480.,  7488.,
      8496.,  9504.,  7488.,  8640.,  9792.,  10944., 8496.,  9792.,  11088.,
      12384., 9504.,  10944., 12384., 13824., 5994.,  7152.,  8310.,  9468.,
      7104.,  8424.,  9744.,  11064., 8214.,  9696.,  11178., 12660., 9324.,
      10968., 12612., 14256., 6480.,  7488.,  8496.,  9504.,  7488.,  8640.,
      9792.,  10944., 8496.,  9792.,  11088., 12384., 9504.,  10944., 12384.,
      13824., 8598.,  9480.,  10362., 11244., 9480.,  10488., 11496., 12504.,
      10362., 11496., 12630., 13764., 11244., 12504., 13764., 15024., 4956.,
      5736.,  6516.,  7296.,  5688.,  6576.,  7464.,  8352.,  6420.,  7416.,
      8412.,  9408.,  7152.,  8256.,  9360.,  10464., 6306.,  6936.,  7566.,
      8196.,  6936.,  7656.,  8376.,  9096.,  7566.,  8376.,  9186.,  9996.,
      8196.,  9096.,  9996.,  10896., 4725.,  5454.,  6183.,  6912.,  5466.,
      6300.,  7134.,  7968.,  6207.,  7146.,  8085.,  9024.,  6948.,  7992.,
      9036.,  10080., 4440.,  5280.,  6120.,  6960.,  5280.,  6240.,  7200.,
      8160.,  6120.,  7200.,  8280.,  9360.,  6960.,  8160.,  9360.,  10560.,
      5979.,  6942.,  7905.,  8868.,  6906.,  8004.,  9102.,  10200., 7833.,
      9066.,  10299., 11532., 8760.,  10128., 11496., 12864., 8280.,  9120.,
      9960.,  10800., 9120.,  10080., 11040., 12000., 9960.,  11040., 12120.,
      13200., 10800., 12000., 13200., 14400., 4821.,  5574.,  6327.,  7080.,
      5538.,  6396.,  7254.,  8112.,  6255.,  7218.,  8181.,  9144.,  6972.,
      8040.,  9108.,  10176., 3330.,  3984.,  4638.,  5292.,  3936.,  4680.,
      5424.,  6168.,  4542.,  5376.,  6210.,  7044.,  5148.,  6072.,  6996.,
      7920.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9970.,  10384., 10798., 11212., 10472., 10904., 11336., 11768., 10974.,
      11424., 11874., 12324., 11476., 11944., 12412., 12880., 11978., 12464.,
      12950., 13436., 12480., 12984., 13488., 13992., 12982., 13504., 14026.,
      14548., 13484., 14024., 14564., 15104., 13986., 14544., 15102., 15660.,
      14488., 15064., 15640., 16216., 14990., 15584., 16178., 16772., 15492.,
      16104., 16716., 17328., 15994., 16624., 17254., 17884., 16496., 17144.,
      17792., 18440., 16998., 17664., 18330., 18996., 17500., 18184., 18868.,
      19552., 18002., 18704., 19406., 20108., 18504., 19224., 19944., 20664.,
      19006., 19744., 20482., 21220., 19508., 20264., 21020., 21776., 18346.,
      18992., 19638., 20284., 18848., 19512., 20176., 20840., 19350., 20032.,
      20714., 21396., 19852., 20552., 21252., 21952., 17090., 17616., 18142.,
      18668., 17592., 18136., 18680., 19224., 18094., 18656., 19218., 19780.,
      18596., 19176., 19756., 20336., 14922., 15408., 15894., 16380., 15424.,
      15928., 16432., 16936., 15926., 16448., 16970., 17492., 16428., 16968.,
      17508., 18048., 16930., 17488., 18046., 18604., 17432., 18008., 18584.,
      19160., 17934., 18528., 19122., 19716., 18436., 19048., 19660., 20272.,
      18938., 19568., 20198., 20828., 19440., 20088., 20736., 21384., 19942.,
      20608., 21274., 21940., 20444., 21128., 21812., 22496., 20946., 21648.,
      22350., 23052., 21448., 22168., 22888., 23608., 21950., 22688., 23426.,
      24164., 22452., 23208., 23964., 24720., 20074., 20784., 21494., 22204.,
      20576., 21304., 22032., 22760., 21078., 21824., 22570., 23316., 21580.,
      22344., 23108., 23872., 15234., 15824., 16414., 17004., 15736., 16344.,
      16952., 17560., 16238., 16864., 17490., 18116., 16740., 17384., 18028.,
      18672., 11162., 11632., 12102., 12572., 11664., 12152., 12640., 13128.,
      12166., 12672., 13178., 13684., 12668., 13192., 13716., 14240., 13986.,
      14544., 15102., 15660., 14488., 15064., 15640., 16216., 14990., 15584.,
      16178., 16772., 15492., 16104., 16716., 17328., 15994., 16624., 17254.,
      17884., 16496., 17144., 17792., 18440., 16998., 17664., 18330., 18996.,
      17500., 18184., 18868., 19552., 18002., 18704., 19406., 20108., 18504.,
      19224., 19944., 20664., 19006., 19744., 20482., 21220., 19508., 20264.,
      21020., 21776., 18346., 18992., 19638., 20284., 18848., 19512., 20176.,
      20840., 19350., 20032., 20714., 21396., 19852., 20552., 21252., 21952.,
      17090., 17616., 18142., 18668., 17592., 18136., 18680., 19224., 18094.,
      18656., 19218., 19780., 18596., 19176., 19756., 20336., 12506., 12912.,
      13318., 13724., 13008., 13432., 13856., 14280., 13510., 13952., 14394.,
      14836., 14012., 14472., 14932., 15392., 12914., 13328., 13742., 14156.,
      13416., 13848., 14280., 14712., 13918., 14368., 14818., 15268., 14420.,
      14888., 15356., 15824., 18938., 19568., 20198., 20828., 19440., 20088.,
      20736., 21384., 19942., 20608., 21274., 21940., 20444., 21128., 21812.,
      22496., 20946., 21648., 22350., 23052., 21448., 22168., 22888., 23608.,
      21950., 22688., 23426., 24164., 22452., 23208., 23964., 24720., 20074.,
      20784., 21494., 22204., 20576., 21304., 22032., 22760., 21078., 21824.,
      22570., 23316., 21580., 22344., 23108., 23872., 15234., 15824., 16414.,
      17004., 15736., 16344., 16952., 17560., 16238., 16864., 17490., 18116.,
      16740., 17384., 18028., 18672., 11162., 11632., 12102., 12572., 11664.,
      12152., 12640., 13128., 12166., 12672., 13178., 13684., 12668., 13192.,
      13716., 14240., 9970.,  10384., 10798., 11212., 10472., 10904., 11336.,
      11768., 10974., 11424., 11874., 12324., 11476., 11944., 12412., 12880.,
      11978., 12464., 12950., 13436., 12480., 12984., 13488., 13992., 12982.,
      13504., 14026., 14548., 13484., 14024., 14564., 15104., 18002., 18704.,
      19406., 20108., 18504., 19224., 19944., 20664., 19006., 19744., 20482.,
      21220., 19508., 20264., 21020., 21776., 18346., 18992., 19638., 20284.,
      18848., 19512., 20176., 20840., 19350., 20032., 20714., 21396., 19852.,
      20552., 21252., 21952., 17090., 17616., 18142., 18668., 17592., 18136.,
      18680., 19224., 18094., 18656., 19218., 19780., 18596., 19176., 19756.,
      20336., 12506., 12912., 13318., 13724., 13008., 13432., 13856., 14280.,
      13510., 13952., 14394., 14836., 14012., 14472., 14932., 15392., 12914.,
      13328., 13742., 14156., 13416., 13848., 14280., 14712., 13918., 14368.,
      14818., 15268., 14420., 14888., 15356., 15824., 14922., 15408., 15894.,
      16380., 15424., 15928., 16432., 16936., 15926., 16448., 16970., 17492.,
      16428., 16968., 17508., 18048., 16930., 17488., 18046., 18604., 17432.,
      18008., 18584., 19160., 17934., 18528., 19122., 19716., 18436., 19048.,
      19660., 20272., 20074., 20784., 21494., 22204., 20576., 21304., 22032.,
      22760., 21078., 21824., 22570., 23316., 21580., 22344., 23108., 23872.,
      15234., 15824., 16414., 17004., 15736., 16344., 16952., 17560., 16238.,
      16864., 17490., 18116., 16740., 17384., 18028., 18672., 11162., 11632.,
      12102., 12572., 11664., 12152., 12640., 13128., 12166., 12672., 13178.,
      13684., 12668., 13192., 13716., 14240., 9970.,  10384., 10798., 11212.,
      10472., 10904., 11336., 11768., 10974., 11424., 11874., 12324., 11476.,
      11944., 12412., 12880., 11978., 12464., 12950., 13436., 12480., 12984.,
      13488., 13992., 12982., 13504., 14026., 14548., 13484., 14024., 14564.,
      15104., 13986., 14544., 15102., 15660., 14488., 15064., 15640., 16216.,
      14990., 15584., 16178., 16772., 15492., 16104., 16716., 17328., 15994.,
      16624., 17254., 17884., 16496., 17144., 17792., 18440., 16998., 17664.,
      18330., 18996., 17500., 18184., 18868., 19552., 17090., 17616., 18142.,
      18668., 17592., 18136., 18680., 19224., 18094., 18656., 19218., 19780.,
      18596., 19176., 19756., 20336., 12506., 12912., 13318., 13724., 13008.,
      13432., 13856., 14280., 13510., 13952., 14394., 14836., 14012., 14472.,
      14932., 15392., 12914., 13328., 13742., 14156., 13416., 13848., 14280.,
      14712., 13918., 14368., 14818., 15268., 14420., 14888., 15356., 15824.,
      14922., 15408., 15894., 16380., 15424., 15928., 16432., 16936., 15926.,
      16448., 16970., 17492., 16428., 16968., 17508., 18048., 16930., 17488.,
      18046., 18604., 17432., 18008., 18584., 19160., 17934., 18528., 19122.,
      19716., 18436., 19048., 19660., 20272., 18938., 19568., 20198., 20828.,
      19440., 20088., 20736., 21384., 19942., 20608., 21274., 21940., 20444.,
      21128., 21812., 22496., 20946., 21648., 22350., 23052., 21448., 22168.,
      22888., 23608., 21950., 22688., 23426., 24164., 22452., 23208., 23964.,
      24720.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9252.,  11412., 11412., 11589., 9750.,  8052.,  6846.,  7854.,  9240.,
      10974., 12894., 12246., 11736., 10758., 10758., 11580., 12222., 13095.,
      11616., 10332., 9216.,  12552., 15264., 18744., 22440., 18744., 15264.,
      12552., 9216.,  10332., 11616., 13095., 12222., 11580., 10758., 10758.,
      11736., 12246., 12894., 10974., 9240.,  7854.,  6846.,  8052.,  9750.,
      11589., 11412., 11412., 9252.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15768., 16068., 16368., 16668., 16968., 17268., 17568., 18768., 19068.,
      19368., 19668., 19968., 20268., 20568., 21768., 22068., 22368., 22668.,
      22968., 23268., 23568., 24768., 25068., 25368., 25668., 25968., 24220.,
      22600., 20344., 20644., 20944., 21244., 21544., 20308., 19200., 17968.,
      18268., 18568., 18868., 19168., 19468., 19768., 20968., 21268., 21568.,
      21868., 22168., 22468., 22768.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7920.,  8808.,  9612.,  10632., 9561.,  10680., 9705.,  10938., 8070.,
      9180.,  6828.,  7800.,  6105.,  6972.,  8598.,  9612.,  9288.,  10464.,
      10176., 11484., 11274., 12732., 10158., 11484., 9480.,  10656., 8700.,
      9756.,  9030.,  10236., 10020., 11400., 11637., 13164., 13503., 15198.,
      12684., 14208., 12420., 13752., 9969.,  11136., 10824., 12240., 12768.,
      14400., 15696., 17520., 18840., 20880., 15480., 17328., 12768., 14400.,
      10608., 12048., 11340., 12672., 13956., 15480., 14055., 15744., 14331.,
      16206., 12246., 13932., 10788., 12264., 9471.,  10764., 9246.,  10332.,
      10248., 11520., 10872., 12300., 11610., 13212., 10566., 12012., 10056.,
      11328., 9204.,  10332., 6870.,  7788.,  7596.,  8664.,  8619.,  9804.,
      9765.,  11082., 9456.,  10632., 9612.,  10632., 7431.,  8328.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18172., 18736., 18748., 19336., 19324., 19936., 19900., 20536., 20476.,
      21136., 21052., 21736., 21628., 22336., 23932., 24736., 24508., 25336.,
      25084., 25936., 25660., 26536., 26236., 27136., 26812., 27736., 27388.,
      28336., 23804., 24720., 21628., 22504., 19580., 20416., 20156., 21016.,
      20732., 21616., 21308., 22216., 21884., 22816., 19324., 20224., 17660.,
      18520., 16124., 16944., 16700., 17544., 17276., 18144., 15868., 16696.,
      14588., 15376., 13564., 14320., 14140., 14920., 14716., 15520., 15292.,
      16120., 15868., 16720., 14972., 15784., 14204., 14976., 14204., 14944.,
      13820., 14520., 13564., 14224., 13436., 14056., 13436., 14016., 14012.,
      14616., 14588., 15216., 16892., 17616., 17020., 17704., 17276., 17920.,
      17660., 18264., 18172., 18736., 18748., 19336., 19324., 19936.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6696.,  7584.,  8472.,  9360.,  8124.,  9144.,  10164., 11184., 8067.,
      9186.,  10305., 11424., 8241.,  9474.,  10707., 11940., 7254.,  8364.,
      9474.,  10584., 7212.,  8184.,  9156.,  10128., 5823.,  6690.,  7557.,
      8424.,  7062.,  8076.,  9090.,  10104., 7608.,  8784.,  9960.,  11136.,
      9252.,  10560., 11868., 13176., 11106., 12564., 14022., 15480., 9006.,
      10332., 11658., 12984., 7992.,  9168.,  10344., 11520., 6984.,  8040.,
      9096.,  10152., 8886.,  10092., 11298., 12504., 10692., 12072., 13452.,
      14832., 10899., 12426., 13953., 15480., 11391., 13086., 14781., 16476.,
      10116., 11640., 13164., 14688., 10164., 11496., 12828., 14160., 7875.,
      9042.,  10209., 11376., 10056., 11472., 12888., 14304., 10848., 12480.,
      14112., 15744., 13056., 14880., 16704., 18528., 15480., 17520., 19560.,
      21600., 12408., 14256., 16104., 17952., 10848., 12480., 14112., 15744.,
      9408.,  10848., 12288., 13728., 9540.,  10872., 12204., 13536., 11508.,
      13032., 14556., 16080., 11781., 13470., 15159., 16848., 12243., 14118.,
      15993., 17868., 11094., 12780., 14466., 16152., 11364., 12840., 14316.,
      15792., 8577.,  9870.,  11163., 12456., 7806.,  8892.,  9978.,  11064.,
      8664.,  9936.,  11208., 12480., 10332., 11760., 13188., 14616., 12114.,
      13716., 15318., 16920., 9606.,  11052., 12498., 13944., 8280.,  9552.,
      10824., 12096., 7248.,  8376.,  9504.,  10632., 6486.,  7404.,  8322.,
      9240.,  7884.,  8952.,  10020., 11088., 8085.,  9270.,  10455., 11640.,
      8421.,  9738.,  11055., 12372., 7752.,  8928.,  10104., 11280., 8124.,
      9144.,  10164., 11184., 6045.,  6942.,  7839.,  8736.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15556., 16120., 16684., 17248., 16172., 16760., 17348., 17936., 16788.,
      17400., 18012., 18624., 17404., 18040., 18676., 19312., 18020., 18680.,
      19340., 20000., 18636., 19320., 20004., 20688., 19252., 19960., 20668.,
      21376., 21716., 22520., 23324., 24128., 22332., 23160., 23988., 24816.,
      22948., 23800., 24652., 25504., 23564., 24440., 25316., 26192., 24180.,
      25080., 25980., 26880., 24796., 25720., 26644., 27568., 25412., 26360.,
      27308., 28256., 24420., 25336., 26252., 27168., 23692., 24568., 25444.,
      26320., 23220., 24056., 24892., 25728., 23836., 24696., 25556., 26416.,
      24452., 25336., 26220., 27104., 25068., 25976., 26884., 27792., 25684.,
      26616., 27548., 28480., 26740., 27640., 28540., 29440., 27036., 27896.,
      28756., 29616., 27588., 28408., 29228., 30048., 28204., 29048., 29892.,
      30736., 28820., 29688., 30556., 31424., 25532., 26360., 27188., 28016.,
      22500., 23288., 24076., 24864., 18436., 19192., 19948., 20704., 19052.,
      19832., 20612., 21392., 19668., 20472., 21276., 22080., 20284., 21112.,
      21940., 22768., 20900., 21752., 22604., 23456., 18636., 19448., 20260.,
      21072., 16628., 17400., 18172., 18944., 14612., 15352., 16092., 16832.,
      13372., 14072., 14772., 15472., 12388., 13048., 13708., 14368., 11660.,
      12280., 12900., 13520., 11188., 11768., 12348., 12928., 11804., 12408.,
      13012., 13616., 12420., 13048., 13676., 14304., 14884., 15608., 16332.,
      17056., 14668., 15352., 16036., 16720., 14708., 15352., 15996., 16640.,
      15004., 15608., 16212., 16816., 15556., 16120., 16684., 17248., 16172.,
      16760., 17348., 17936., 16788., 17400., 18012., 18624.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7431.,  8328.,  9612.,  10632., 9456.,  10632., 9765.,  11082., 8619.,
      9804.,  7596.,  8664.,  6870.,  7788.,  9204.,  10332., 10056., 11328.,
      10566., 12012., 11610., 13212., 10872., 12300., 10248., 11520., 9246.,
      10332., 9471.,  10764., 10788., 12264., 12246., 13932., 14331., 16206.,
      14055., 15744., 13956., 15480., 11340., 12672., 10608., 12048., 12768.,
      14400., 15480., 17328., 18840., 20880., 15696., 17520., 12768., 14400.,
      10824., 12240., 9969.,  11136., 12420., 13752., 12684., 14208., 13503.,
      15198., 11637., 13164., 10020., 11400., 9030.,  10236., 8700.,  9756.,
      9480.,  10656., 10158., 11484., 11274., 12732., 10176., 11484., 9288.,
      10464., 8598.,  9612.,  6105.,  6972.,  6828.,  7800.,  8070.,  9180.,
      9705.,  10938., 9561.,  10680., 9612.,  10632., 7920.,  8808.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18436., 18736., 19036., 19336., 19636., 19936., 20236., 20536., 20836.,
      21136., 21436., 21736., 22036., 22336., 24436., 24736., 25036., 25336.,
      25636., 25936., 26236., 26536., 26836., 27136., 27436., 27736., 28036.,
      28336., 24420., 24720., 22204., 22504., 20116., 20416., 20716., 21016.,
      21316., 21616., 21916., 22216., 22516., 22816., 19924., 20224., 18220.,
      18520., 16644., 16944., 17244., 17544., 17844., 18144., 16396., 16696.,
      15076., 15376., 14020., 14320., 14620., 14920., 15220., 15520., 15820.,
      16120., 16420., 16720., 15484., 15784., 14676., 14976., 14644., 14944.,
      14220., 14520., 13924., 14224., 13756., 14056., 13716., 14016., 14316.,
      14616., 14916., 15216., 17316., 17616., 17404., 17704., 17620., 17920.,
      17964., 18264., 18436., 18736., 19036., 19336., 19636., 19936.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7767.,  8574.,  8640.,  9552.,  10200., 11160., 11160., 12240., 9273.,
      10320., 10386., 11568., 8958.,  10122., 10194., 11508., 7425.,  8502.,
      8508.,  9720.,  6360.,  7320.,  7320.,  8400.,  5727.,  6588.,  6546.,
      7512.,  8634.,  9624.,  9660.,  10776., 8784.,  9936.,  9936.,  11232.,
      8790.,  10044., 10128., 11544., 9540.,  10932., 11028., 12600., 8886.,
      10176., 10188., 11640., 8784.,  9936.,  9936.,  11232., 8826.,  9852.,
      9816.,  10968., 7989.,  9150.,  9180.,  10488., 8904.,  10248., 10248.,
      11760., 10539., 12012., 12090., 13752., 13002., 14646., 14718., 16572.,
      13299., 14814., 14808., 16512., 14280., 15624., 15624., 17136., 10557.,
      11736., 11730., 13056., 9336.,  10656., 10704., 12192., 11712., 13248.,
      13248., 14976., 15624., 17328., 17376., 19296., 20400., 22320., 22320.,
      24480., 15624., 17376., 17328., 19296., 11712., 13248., 13248., 14976.,
      9336.,  10704., 10656., 12192., 10557., 11730., 11736., 13056., 14280.,
      15624., 15624., 17136., 13299., 14808., 14814., 16512., 13002., 14718.,
      14646., 16572., 10539., 12090., 12012., 13752., 8904.,  10248., 10248.,
      11760., 7989.,  9180.,  9150.,  10488., 8826.,  9816.,  9852.,  10968.,
      8784.,  9936.,  9936.,  11232., 8886.,  10188., 10176., 11640., 9540.,
      11028., 10932., 12600., 8790.,  10128., 10044., 11544., 8784.,  9936.,
      9936.,  11232., 8634.,  9660.,  9624.,  10776., 5727.,  6546.,  6588.,
      7512.,  6360.,  7320.,  7320.,  8400.,  7425.,  8508.,  8502.,  9720.,
      8958.,  10194., 10122., 11508., 9273.,  10386., 10320., 11568., 10200.,
      11160., 11160., 12240., 7767.,  8640.,  8574.,  9552.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15288., 15880., 15864., 16480., 16440., 17080., 17016., 17680., 17592.,
      18280., 18168., 18880., 16760., 17432., 17336., 18032., 16056., 16712.,
      16632., 17312., 15480., 16120., 16056., 16720., 15032., 15656., 15608.,
      16256., 19640., 20456., 20216., 21056., 20792., 21656., 21368., 22256.,
      21944., 22856., 22520., 23456., 21624., 22520., 22200., 23120., 21432.,
      22312., 22008., 22912., 21368., 22232., 21944., 22832., 21432., 22280.,
      22008., 22880., 18360., 19144., 18936., 19744., 16056., 16760., 16632.,
      17360., 14008., 14632., 14584., 15232., 15160., 15832., 15736., 16432.,
      16312., 17032., 16888., 17632., 17464., 18232., 18040., 18832., 18616.,
      19432., 19192., 20032., 17592., 18344., 18168., 18944., 16312., 16984.,
      16888., 17584., 15288., 15880., 15864., 16480., 16440., 17080., 17016.,
      17680., 17592., 18280., 18168., 18880., 16760., 17432., 17336., 18032.,
      16056., 16712., 16632., 17312., 17336., 18056., 17912., 18656., 18488.,
      19256., 19064., 19856., 19640., 20456., 20216., 21056., 20792., 21656.,
      21368., 22256., 21944., 22856., 22520., 23456., 21624., 22520., 22200.,
      23120., 21432., 22312., 22008., 22912., 23736., 24680., 24312., 25280.,
      20920., 21784., 21496., 22384., 18360., 19144., 18936., 19744., 16056.,
      16760., 16632., 17360., 14008., 14632., 14584., 15232., 15160., 15832.,
      15736., 16432., 16312., 17032., 16888., 17632., 20920., 21832., 21496.,
      22432., 19128., 19960., 19704., 20560., 17592., 18344., 18168., 18944.,
      16312., 16984., 16888., 17584., 15288., 15880., 15864., 16480., 16440.,
      17080., 17016., 17680., 17592., 18280., 18168., 18880.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5991.,  6798.,  7605.,  8412.,  6768.,  7680.,  8592.,  9504.,  7920.,
      8880.,  9840.,  10800., 8760.,  9840.,  10920., 12000., 7179.,  8226.,
      9273.,  10320., 8166.,  9348.,  10530., 11712., 7344.,  8508.,  9672.,
      10836., 8418.,  9732.,  11046., 12360., 7005.,  8082.,  9159.,  10236.,
      7932.,  9144.,  10356., 11568., 7920.,  8880.,  9840.,  10800., 8760.,
      9840.,  10920., 12000., 5745.,  6606.,  7467.,  8328.,  6462.,  7428.,
      8394.,  9360.,  6726.,  7716.,  8706.,  9696.,  7644.,  8760.,  9876.,
      10992., 7200.,  8352.,  9504.,  10656., 8208.,  9504.,  10800., 12096.,
      8838.,  10092., 11346., 12600., 10008., 11424., 12840., 14256., 11544.,
      12936., 14328., 15720., 12804., 14376., 15948., 17520., 8610.,  9900.,
      11190., 12480., 9708.,  11160., 12612., 14064., 7200.,  8352.,  9504.,
      10656., 8208.,  9504.,  10800., 12096., 6594.,  7620.,  8646.,  9672.,
      7440.,  8592.,  9744.,  10896., 8481.,  9642.,  10803., 11964., 9564.,
      10872., 12180., 13488., 11088., 12432., 13776., 15120., 12264., 13776.,
      15288., 16800., 10197., 11670., 13143., 14616., 11574., 13236., 14898.,
      16560., 10536., 12180., 13824., 15468., 12030., 13884., 15738., 17592.,
      9915.,  11430., 12945., 14460., 11208., 12912., 14616., 16320., 11088.,
      12432., 13776., 15120., 12264., 13776., 15288., 16800., 7791.,  8970.,
      10149., 11328., 8790.,  10116., 11442., 12768., 9096.,  10416., 11736.,
      13056., 10320., 11808., 13296., 14784., 9600.,  11136., 12672., 14208.,
      10944., 12672., 14400., 16128., 12072., 13776., 15480., 17184., 13632.,
      15552., 17472., 19392., 15840., 17760., 19680., 21600., 17520., 19680.,
      21840., 24000., 11640., 13392., 15144., 16896., 13104., 15072., 17040.,
      19008., 9600.,  11136., 12672., 14208., 10944., 12672., 14400., 16128.,
      8664.,  10032., 11400., 12768., 9792.,  11328., 12864., 14400., 8229.,
      9402.,  10575., 11748., 9288.,  10608., 11928., 13248., 11088., 12432.,
      13776., 15120., 12264., 13776., 15288., 16800., 10353., 11862., 13371.,
      14880., 11706., 13404., 15102., 16800., 10656., 12372., 14088., 15804.,
      12102., 14028., 15954., 17880., 9879.,  11430., 12981., 14532., 11148.,
      12888., 14628., 16368., 11088., 12432., 13776., 15120., 12264., 13776.,
      15288., 16800., 7827.,  9018.,  10209., 11400., 8802.,  10140., 11478.,
      12816., 6918.,  7908.,  8898.,  9888.,  7836.,  8952.,  10068., 11184.,
      7200.,  8352.,  9504.,  10656., 8208.,  9504.,  10800., 12096., 9270.,
      10572., 11874., 13176., 10440., 11904., 13368., 14832., 12216., 13704.,
      15192., 16680., 13476., 15144., 16812., 18480., 8850.,  10188., 11526.,
      12864., 9948.,  11448., 12948., 14448., 7200.,  8352.,  9504.,  10656.,
      8208.,  9504.,  10800., 12096., 6402.,  7428.,  8454.,  9480.,  7248.,
      8400.,  9552.,  10704., 5739.,  6558.,  7377.,  8196.,  6492.,  7416.,
      8340.,  9264.,  7920.,  8880.,  9840.,  10800., 8760.,  9840.,  10920.,
      12000., 7335.,  8418.,  9501.,  10584., 8298.,  9516.,  10734., 11952.,
      7464.,  8700.,  9936.,  11172., 8490.,  9876.,  11262., 12648., 6969.,
      8082.,  9195.,  10308., 7872.,  9120.,  10368., 11616., 7920.,  8880.,
      9840.,  10800., 8760.,  9840.,  10920., 12000., 5781.,  6654.,  7527.,
      8400.,  6474.,  7452.,  8430.,  9408.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22816., 23408., 24000., 24592., 23432., 24048., 24664., 25280., 24048.,
      24688., 25328., 25968., 24664., 25328., 25992., 26656., 25280., 25968.,
      26656., 27344., 25896., 26608., 27320., 28032., 22608., 23280., 23952.,
      24624., 23224., 23920., 24616., 25312., 20192., 20848., 21504., 22160.,
      20808., 21488., 22168., 22848., 18032., 18672., 19312., 19952., 18648.,
      19312., 19976., 20640., 16128., 16752., 17376., 18000., 16744., 17392.,
      18040., 18688., 21056., 21872., 22688., 23504., 21672., 22512., 23352.,
      24192., 22288., 23152., 24016., 24880., 22904., 23792., 24680., 25568.,
      23520., 24432., 25344., 26256., 24136., 25072., 26008., 26944., 21872.,
      22768., 23664., 24560., 22488., 23408., 24328., 25248., 20480., 21360.,
      22240., 23120., 21096., 22000., 22904., 23808., 19344., 20208., 21072.,
      21936., 19960., 20848., 21736., 22624., 18464., 19312., 20160., 21008.,
      19080., 19952., 20824., 21696., 16480., 17264., 18048., 18832., 17096.,
      17904., 18712., 19520., 15024., 15728., 16432., 17136., 15640., 16368.,
      17096., 17824., 14080., 14704., 15328., 15952., 14696., 15344., 15992.,
      16640., 15312., 15984., 16656., 17328., 15928., 16624., 17320., 18016.,
      16544., 17264., 17984., 18704., 17160., 17904., 18648., 19392., 17776.,
      18544., 19312., 20080., 18392., 19184., 19976., 20768., 19008., 19824.,
      20640., 21456., 19624., 20464., 21304., 22144., 21120., 21872., 22624.,
      23376., 21736., 22512., 23288., 24064., 21712., 22384., 23056., 23728.,
      22328., 23024., 23720., 24416., 22816., 23408., 24000., 24592., 23432.,
      24048., 24664., 25280., 24048., 24688., 25328., 25968., 24664., 25328.,
      25992., 26656., 25280., 25968., 26656., 27344., 25896., 26608., 27320.,
      28032., 22608., 23280., 23952., 24624., 23224., 23920., 24616., 25312.,
      20192., 20848., 21504., 22160., 20808., 21488., 22168., 22848., 18592.,
      19312., 20032., 20752., 19208., 19952., 20696., 21440., 19824., 20592.,
      21360., 22128., 20440., 21232., 22024., 22816., 21056., 21872., 22688.,
      23504., 21672., 22512., 23352., 24192., 22288., 23152., 24016., 24880.,
      22904., 23792., 24680., 25568., 23520., 24432., 25344., 26256., 24136.,
      25072., 26008., 26944., 21872., 22768., 23664., 24560., 22488., 23408.,
      24328., 25248., 20480., 21360., 22240., 23120., 21096., 22000., 22904.,
      23808., 20928., 21872., 22816., 23760., 21544., 22512., 23480., 24448.,
      18448., 19312., 20176., 21040., 19064., 19952., 20840., 21728., 16480.,
      17264., 18048., 18832., 17096., 17904., 18712., 19520., 15024., 15728.,
      16432., 17136., 15640., 16368., 17096., 17824., 14080., 14704., 15328.,
      15952., 14696., 15344., 15992., 16640., 15312., 15984., 16656., 17328.,
      15928., 16624., 17320., 18016., 16544., 17264., 17984., 18704., 17160.,
      17904., 18648., 19392., 21472., 22384., 23296., 24208., 22088., 23024.,
      23960., 24896., 21040., 21872., 22704., 23536., 21656., 22512., 23368.,
      24224., 21120., 21872., 22624., 23376., 21736., 22512., 23288., 24064.,
      21712., 22384., 23056., 23728., 22328., 23024., 23720., 24416., 22816.,
      23408., 24000., 24592., 23432., 24048., 24664., 25280., 24048., 24688.,
      25328., 25968., 24664., 25328., 25992., 26656., 25280., 25968., 26656.,
      27344., 25896., 26608., 27320., 28032.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6045.,  6942.,  7839.,  8736.,  8124.,  9144.,  10164., 11184., 7752.,
      8928.,  10104., 11280., 8421.,  9738.,  11055., 12372., 8085.,  9270.,
      10455., 11640., 7884.,  8952.,  10020., 11088., 6486.,  7404.,  8322.,
      9240.,  7248.,  8376.,  9504.,  10632., 8280.,  9552.,  10824., 12096.,
      9606.,  11052., 12498., 13944., 12114., 13716., 15318., 16920., 10332.,
      11760., 13188., 14616., 8664.,  9936.,  11208., 12480., 7806.,  8892.,
      9978.,  11064., 8577.,  9870.,  11163., 12456., 11364., 12840., 14316.,
      15792., 11094., 12780., 14466., 16152., 12243., 14118., 15993., 17868.,
      11781., 13470., 15159., 16848., 11508., 13032., 14556., 16080., 9540.,
      10872., 12204., 13536., 9408.,  10848., 12288., 13728., 10848., 12480.,
      14112., 15744., 12408., 14256., 16104., 17952., 15480., 17520., 19560.,
      21600., 13056., 14880., 16704., 18528., 10848., 12480., 14112., 15744.,
      10056., 11472., 12888., 14304., 7875.,  9042.,  10209., 11376., 10164.,
      11496., 12828., 14160., 10116., 11640., 13164., 14688., 11391., 13086.,
      14781., 16476., 10899., 12426., 13953., 15480., 10692., 12072., 13452.,
      14832., 8886.,  10092., 11298., 12504., 6984.,  8040.,  9096.,  10152.,
      7992.,  9168.,  10344., 11520., 9006.,  10332., 11658., 12984., 11106.,
      12564., 14022., 15480., 9252.,  10560., 11868., 13176., 7608.,  8784.,
      9960.,  11136., 7062.,  8076.,  9090.,  10104., 5823.,  6690.,  7557.,
      8424.,  7212.,  8184.,  9156.,  10128., 7254.,  8364.,  9474.,  10584.,
      8241.,  9474.,  10707., 11940., 8067.,  9186.,  10305., 11424., 8124.,
      9144.,  10164., 11184., 6696.,  7584.,  8472.,  9360.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15580., 15880., 16180., 16480., 16780., 17080., 17380., 17680., 17980.,
      18280., 18580., 18880., 17132., 17432., 17732., 18032., 16412., 16712.,
      17012., 17312., 15820., 16120., 16420., 16720., 15356., 15656., 15956.,
      16256., 20156., 20456., 20756., 21056., 21356., 21656., 21956., 22256.,
      22556., 22856., 23156., 23456., 22220., 22520., 22820., 23120., 22012.,
      22312., 22612., 22912., 21932., 22232., 22532., 22832., 21980., 22280.,
      22580., 22880., 18844., 19144., 19444., 19744., 16460., 16760., 17060.,
      17360., 14332., 14632., 14932., 15232., 15532., 15832., 16132., 16432.,
      16732., 17032., 17332., 17632., 17932., 18232., 18532., 18832., 19132.,
      19432., 19732., 20032., 18044., 18344., 18644., 18944., 16684., 16984.,
      17284., 17584., 15580., 15880., 16180., 16480., 16780., 17080., 17380.,
      17680., 17980., 18280., 18580., 18880., 17132., 17432., 17732., 18032.,
      16412., 16712., 17012., 17312., 17756., 18056., 18356., 18656., 18956.,
      19256., 19556., 19856., 20156., 20456., 20756., 21056., 21356., 21656.,
      21956., 22256., 22556., 22856., 23156., 23456., 22220., 22520., 22820.,
      23120., 22012., 22312., 22612., 22912., 24380., 24680., 24980., 25280.,
      21484., 21784., 22084., 22384., 18844., 19144., 19444., 19744., 16460.,
      16760., 17060., 17360., 14332., 14632., 14932., 15232., 15532., 15832.,
      16132., 16432., 16732., 17032., 17332., 17632., 21532., 21832., 22132.,
      22432., 19660., 19960., 20260., 20560., 18044., 18344., 18644., 18944.,
      16684., 16984., 17284., 17584., 15580., 15880., 16180., 16480., 16780.,
      17080., 17380., 17680., 17980., 18280., 18580., 18880.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5781.,  6474.,  6654.,  7452.,  7527.,  8430.,  8400.,  9408.,  7920.,
      8760.,  8880.,  9840.,  9840.,  10920., 10800., 12000., 6969.,  7872.,
      8082.,  9120.,  9195.,  10368., 10308., 11616., 7464.,  8490.,  8700.,
      9876.,  9936.,  11262., 11172., 12648., 7335.,  8298.,  8418.,  9516.,
      9501.,  10734., 10584., 11952., 7920.,  8760.,  8880.,  9840.,  9840.,
      10920., 10800., 12000., 5739.,  6492.,  6558.,  7416.,  7377.,  8340.,
      8196.,  9264.,  6402.,  7248.,  7428.,  8400.,  8454.,  9552.,  9480.,
      10704., 7200.,  8208.,  8352.,  9504.,  9504.,  10800., 10656., 12096.,
      8850.,  9948.,  10188., 11448., 11526., 12948., 12864., 14448., 12216.,
      13476., 13704., 15144., 15192., 16812., 16680., 18480., 9270.,  10440.,
      10572., 11904., 11874., 13368., 13176., 14832., 7200.,  8208.,  8352.,
      9504.,  9504.,  10800., 10656., 12096., 6918.,  7836.,  7908.,  8952.,
      8898.,  10068., 9888.,  11184., 7827.,  8802.,  9018.,  10140., 10209.,
      11478., 11400., 12816., 11088., 12264., 12432., 13776., 13776., 15288.,
      15120., 16800., 9879.,  11148., 11430., 12888., 12981., 14628., 14532.,
      16368., 10656., 12102., 12372., 14028., 14088., 15954., 15804., 17880.,
      10353., 11706., 11862., 13404., 13371., 15102., 14880., 16800., 11088.,
      12264., 12432., 13776., 13776., 15288., 15120., 16800., 8229.,  9288.,
      9402.,  10608., 10575., 11928., 11748., 13248., 8664.,  9792.,  10032.,
      11328., 11400., 12864., 12768., 14400., 9600.,  10944., 11136., 12672.,
      12672., 14400., 14208., 16128., 11640., 13104., 13392., 15072., 15144.,
      17040., 16896., 19008., 15840., 17520., 17760., 19680., 19680., 21840.,
      21600., 24000., 12072., 13632., 13776., 15552., 15480., 17472., 17184.,
      19392., 9600.,  10944., 11136., 12672., 12672., 14400., 14208., 16128.,
      9096.,  10320., 10416., 11808., 11736., 13296., 13056., 14784., 7791.,
      8790.,  8970.,  10116., 10149., 11442., 11328., 12768., 11088., 12264.,
      12432., 13776., 13776., 15288., 15120., 16800., 9915.,  11208., 11430.,
      12912., 12945., 14616., 14460., 16320., 10536., 12030., 12180., 13884.,
      13824., 15738., 15468., 17592., 10197., 11574., 11670., 13236., 13143.,
      14898., 14616., 16560., 11088., 12264., 12432., 13776., 13776., 15288.,
      15120., 16800., 8481.,  9564.,  9642.,  10872., 10803., 12180., 11964.,
      13488., 6594.,  7440.,  7620.,  8592.,  8646.,  9744.,  9672.,  10896.,
      7200.,  8208.,  8352.,  9504.,  9504.,  10800., 10656., 12096., 8610.,
      9708.,  9900.,  11160., 11190., 12612., 12480., 14064., 11544., 12804.,
      12936., 14376., 14328., 15948., 15720., 17520., 8838.,  10008., 10092.,
      11424., 11346., 12840., 12600., 14256., 7200.,  8208.,  8352.,  9504.,
      9504.,  10800., 10656., 12096., 6726.,  7644.,  7716.,  8760.,  8706.,
      9876.,  9696.,  10992., 5745.,  6462.,  6606.,  7428.,  7467.,  8394.,
      8328.,  9360.,  7920.,  8760.,  8880.,  9840.,  9840.,  10920., 10800.,
      12000., 7005.,  7932.,  8082.,  9144.,  9159.,  10356., 10236., 11568.,
      7344.,  8418.,  8508.,  9732.,  9672.,  11046., 10836., 12360., 7179.,
      8166.,  8226.,  9348.,  9273.,  10530., 10320., 11712., 7920.,  8760.,
      8880.,  9840.,  9840.,  10920., 10800., 12000., 5991.,  6768.,  6798.,
      7680.,  7605.,  8592.,  8412.,  9504.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17712., 18360., 18288., 18960., 18864., 19560., 19440., 20160., 20016.,
      20760., 20592., 21360., 21168., 21960., 21744., 22560., 22320., 23160.,
      22896., 23760., 23472., 24360., 24048., 24960., 18672., 19416., 19248.,
      20016., 19824., 20616., 20400., 21216., 15408., 16056., 15984., 16656.,
      16560., 17256., 17136., 17856., 12528., 13080., 13104., 13680., 13680.,
      14280., 14256., 14880., 10032., 10488., 10608., 11088., 11184., 11688.,
      11760., 12288., 19248., 20088., 19824., 20688., 20400., 21288., 20976.,
      21888., 21552., 22488., 22128., 23088., 22704., 23688., 23280., 24288.,
      23856., 24888., 24432., 25488., 25008., 26088., 25584., 26688., 21744.,
      22680., 22320., 23280., 22896., 23880., 23472., 24480., 20016., 20856.,
      20592., 21456., 21168., 22056., 21744., 22656., 18672., 19416., 19248.,
      20016., 19824., 20616., 20400., 21216., 17712., 18360., 18288., 18960.,
      18864., 19560., 19440., 20160., 15408., 16056., 15984., 16656., 16560.,
      17256., 17136., 17856., 12528., 13080., 13104., 13680., 13680., 14280.,
      14256., 14880., 10032., 10488., 10608., 11088., 11184., 11688., 11760.,
      12288., 12336., 12888., 12912., 13488., 13488., 14088., 14064., 14688.,
      14640., 15288., 15216., 15888., 15792., 16488., 16368., 17088., 16944.,
      17688., 17520., 18288., 18096., 18888., 18672., 19488., 19248., 20088.,
      19824., 20688., 20400., 21288., 20976., 21888., 20016., 20856., 20592.,
      21456., 21168., 22056., 21744., 22656., 18672., 19416., 19248., 20016.,
      19824., 20616., 20400., 21216., 17712., 18360., 18288., 18960., 18864.,
      19560., 19440., 20160., 20016., 20760., 20592., 21360., 21168., 21960.,
      21744., 22560., 22320., 23160., 22896., 23760., 23472., 24360., 24048.,
      24960., 18672., 19416., 19248., 20016., 19824., 20616., 20400., 21216.,
      15408., 16056., 15984., 16656., 16560., 17256., 17136., 17856., 14640.,
      15288., 15216., 15888., 15792., 16488., 16368., 17088., 16944., 17688.,
      17520., 18288., 18096., 18888., 18672., 19488., 19248., 20088., 19824.,
      20688., 20400., 21288., 20976., 21888., 21552., 22488., 22128., 23088.,
      22704., 23688., 23280., 24288., 23856., 24888., 24432., 25488., 25008.,
      26088., 25584., 26688., 21744., 22680., 22320., 23280., 22896., 23880.,
      23472., 24480., 20016., 20856., 20592., 21456., 21168., 22056., 21744.,
      22656., 22320., 23160., 22896., 23760., 23472., 24360., 24048., 24960.,
      18672., 19416., 19248., 20016., 19824., 20616., 20400., 21216., 15408.,
      16056., 15984., 16656., 16560., 17256., 17136., 17856., 12528., 13080.,
      13104., 13680., 13680., 14280., 14256., 14880., 10032., 10488., 10608.,
      11088., 11184., 11688., 11760., 12288., 12336., 12888., 12912., 13488.,
      13488., 14088., 14064., 14688., 14640., 15288., 15216., 15888., 15792.,
      16488., 16368., 17088., 23856., 24888., 24432., 25488., 25008., 26088.,
      25584., 26688., 21744., 22680., 22320., 23280., 22896., 23880., 23472.,
      24480., 20016., 20856., 20592., 21456., 21168., 22056., 21744., 22656.,
      18672., 19416., 19248., 20016., 19824., 20616., 20400., 21216., 17712.,
      18360., 18288., 18960., 18864., 19560., 19440., 20160., 20016., 20760.,
      20592., 21360., 21168., 21960., 21744., 22560., 22320., 23160., 22896.,
      23760., 23472., 24360., 24048., 24960.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5013.,  5706.,  6399.,  7092.,  5790.,  6588.,  7386.,  8184.,  6567.,
      7470.,  8373.,  9276.,  7344.,  8352.,  9360.,  10368., 8280.,  9120.,
      9960.,  10800., 9120.,  10080., 11040., 12000., 9960.,  11040., 12120.,
      13200., 10800., 12000., 13200., 14400., 5787.,  6690.,  7593.,  8496.,
      6774.,  7812.,  8850.,  9888.,  7761.,  8934.,  10107., 11280., 8748.,
      10056., 11364., 12672., 5550.,  6576.,  7602.,  8628.,  6624.,  7800.,
      8976.,  10152., 7698.,  9024.,  10350., 11676., 8772.,  10248., 11724.,
      13200., 5883.,  6846.,  7809.,  8772.,  6810.,  7908.,  9006.,  10104.,
      7737.,  8970.,  10203., 11436., 8664.,  10032., 11400., 12768., 8280.,
      9120.,  9960.,  10800., 9120.,  10080., 11040., 12000., 9960.,  11040.,
      12120., 13200., 10800., 12000., 13200., 14400., 4917.,  5670.,  6423.,
      7176.,  5634.,  6492.,  7350.,  8208.,  6351.,  7314.,  8277.,  9240.,
      7068.,  8136.,  9204.,  10272., 5382.,  6228.,  7074.,  7920.,  6300.,
      7272.,  8244.,  9216.,  7218.,  8316.,  9414.,  10512., 8136.,  9360.,
      10584., 11808., 5328.,  6336.,  7344.,  8352.,  6336.,  7488.,  8640.,
      9792.,  7344.,  8640.,  9936.,  11232., 8352.,  9792.,  11232., 12672.,
      7578.,  8676.,  9774.,  10872., 8748.,  10008., 11268., 12528., 9918.,
      11340., 12762., 14184., 11088., 12672., 14256., 15840., 12420., 13680.,
      14940., 16200., 13680., 15120., 16560., 18000., 14940., 16560., 18180.,
      19800., 16200., 18000., 19800., 21600., 7578.,  8748.,  9918.,  11088.,
      8676.,  10008., 11340., 12672., 9774.,  11268., 12762., 14256., 10872.,
      12528., 14184., 15840., 5328.,  6336.,  7344.,  8352.,  6336.,  7488.,
      8640.,  9792.,  7344.,  8640.,  9936.,  11232., 8352.,  9792.,  11232.,
      12672., 5382.,  6300.,  7218.,  8136.,  6228.,  7272.,  8316.,  9360.,
      7074.,  8244.,  9414.,  10584., 7920.,  9216.,  10512., 11808., 6999.,
      7974.,  8949.,  9924.,  8082.,  9204.,  10326., 11448., 9165.,  10434.,
      11703., 12972., 10248., 11664., 13080., 14496., 11592., 12768., 13944.,
      15120., 12768., 14112., 15456., 16800., 13944., 15456., 16968., 18480.,
      15120., 16800., 18480., 20160., 8121.,  9390.,  10659., 11928., 9498.,
      10956., 12414., 13872., 10875., 12522., 14169., 15816., 12252., 14088.,
      15924., 17760., 7770.,  9216.,  10662., 12108., 9264.,  10920., 12576.,
      14232., 10758., 12624., 14490., 16356., 12252., 14328., 16404., 18480.,
      8217.,  9570.,  10923., 12276., 9510.,  11052., 12594., 14136., 10803.,
      12534., 14265., 15996., 12096., 14016., 15936., 17856., 11592., 12768.,
      13944., 15120., 12768., 14112., 15456., 16800., 13944., 15456., 16968.,
      18480., 15120., 16800., 18480., 20160., 6903.,  7962.,  9021.,  10080.,
      7902.,  9108.,  10314., 11520., 8901.,  10254., 11607., 12960., 9900.,
      11400., 12900., 14400., 7176.,  8304.,  9432.,  10560., 8400.,  9696.,
      10992., 12288., 9624.,  11088., 12552., 14016., 10848., 12480., 14112.,
      15744., 7104.,  8448.,  9792.,  11136., 8448.,  9984.,  11520., 13056.,
      9792.,  11520., 13248., 14976., 11136., 13056., 14976., 16896., 10104.,
      11568., 13032., 14496., 11664., 13344., 15024., 16704., 13224., 15120.,
      17016., 18912., 14784., 16896., 19008., 21120., 16560., 18240., 19920.,
      21600., 18240., 20160., 22080., 24000., 19920., 22080., 24240., 26400.,
      21600., 24000., 26400., 28800., 10104., 11664., 13224., 14784., 11568.,
      13344., 15120., 16896., 13032., 15024., 17016., 19008., 14496., 16704.,
      18912., 21120., 7104.,  8448.,  9792.,  11136., 8448.,  9984.,  11520.,
      13056., 9792.,  11520., 13248., 14976., 11136., 13056., 14976., 16896.,
      7176.,  8400.,  9624.,  10848., 8304.,  9696.,  11088., 12480., 9432.,
      10992., 12552., 14112., 10560., 12288., 14016., 15744., 6903.,  7902.,
      8901.,  9900.,  7962.,  9108.,  10254., 11400., 9021.,  10314., 11607.,
      12900., 10080., 11520., 12960., 14400., 11592., 12768., 13944., 15120.,
      12768., 14112., 15456., 16800., 13944., 15456., 16968., 18480., 15120.,
      16800., 18480., 20160., 8217.,  9510.,  10803., 12096., 9570.,  11052.,
      12534., 14016., 10923., 12594., 14265., 15936., 12276., 14136., 15996.,
      17856., 7770.,  9264.,  10758., 12252., 9216.,  10920., 12624., 14328.,
      10662., 12576., 14490., 16404., 12108., 14232., 16356., 18480., 8121.,
      9498.,  10875., 12252., 9390.,  10956., 12522., 14088., 10659., 12414.,
      14169., 15924., 11928., 13872., 15816., 17760., 11592., 12768., 13944.,
      15120., 12768., 14112., 15456., 16800., 13944., 15456., 16968., 18480.,
      15120., 16800., 18480., 20160., 6999.,  8082.,  9165.,  10248., 7974.,
      9204.,  10434., 11664., 8949.,  10326., 11703., 13080., 9924.,  11448.,
      12972., 14496., 5382.,  6228.,  7074.,  7920.,  6300.,  7272.,  8244.,
      9216.,  7218.,  8316.,  9414.,  10512., 8136.,  9360.,  10584., 11808.,
      5328.,  6336.,  7344.,  8352.,  6336.,  7488.,  8640.,  9792.,  7344.,
      8640.,  9936.,  11232., 8352.,  9792.,  11232., 12672., 7578.,  8676.,
      9774.,  10872., 8748.,  10008., 11268., 12528., 9918.,  11340., 12762.,
      14184., 11088., 12672., 14256., 15840., 12420., 13680., 14940., 16200.,
      13680., 15120., 16560., 18000., 14940., 16560., 18180., 19800., 16200.,
      18000., 19800., 21600., 7578.,  8748.,  9918.,  11088., 8676.,  10008.,
      11340., 12672., 9774.,  11268., 12762., 14256., 10872., 12528., 14184.,
      15840., 5328.,  6336.,  7344.,  8352.,  6336.,  7488.,  8640.,  9792.,
      7344.,  8640.,  9936.,  11232., 8352.,  9792.,  11232., 12672., 5382.,
      6300.,  7218.,  8136.,  6228.,  7272.,  8316.,  9360.,  7074.,  8244.,
      9414.,  10584., 7920.,  9216.,  10512., 11808., 4917.,  5634.,  6351.,
      7068.,  5670.,  6492.,  7314.,  8136.,  6423.,  7350.,  8277.,  9204.,
      7176.,  8208.,  9240.,  10272., 8280.,  9120.,  9960.,  10800., 9120.,
      10080., 11040., 12000., 9960.,  11040., 12120., 13200., 10800., 12000.,
      13200., 14400., 5883.,  6810.,  7737.,  8664.,  6846.,  7908.,  8970.,
      10032., 7809.,  9006.,  10203., 11400., 8772.,  10104., 11436., 12768.,
      5550.,  6624.,  7698.,  8772.,  6576.,  7800.,  9024.,  10248., 7602.,
      8976.,  10350., 11724., 8628.,  10152., 11676., 13200., 5787.,  6774.,
      7761.,  8748.,  6690.,  7812.,  8934.,  10056., 7593.,  8850.,  10107.,
      11364., 8496.,  9888.,  11280., 12672., 8280.,  9120.,  9960.,  10800.,
      9120.,  10080., 11040., 12000., 9960.,  11040., 12120., 13200., 10800.,
      12000., 13200., 14400., 5013.,  5790.,  6567.,  7344.,  5706.,  6588.,
      7470.,  8352.,  6399.,  7386.,  8373.,  9360.,  7092.,  8184.,  9276.,
      10368.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20952., 21600., 22248., 22896., 21568., 22240., 22912., 23584., 22184.,
      22880., 23576., 24272., 22800., 23520., 24240., 24960., 23416., 24160.,
      24904., 25648., 24032., 24800., 25568., 26336., 24648., 25440., 26232.,
      27024., 25264., 26080., 26896., 27712., 25880., 26720., 27560., 28400.,
      26496., 27360., 28224., 29088., 27112., 28000., 28888., 29776., 27728.,
      28640., 29552., 30464., 20728., 21472., 22216., 22960., 21344., 22112.,
      22880., 23648., 21960., 22752., 23544., 24336., 22576., 23392., 24208.,
      25024., 16344., 16992., 17640., 18288., 16960., 17632., 18304., 18976.,
      17576., 18272., 18968., 19664., 18192., 18912., 19632., 20352., 12728.,
      13280., 13832., 14384., 13344., 13920., 14496., 15072., 13960., 14560.,
      15160., 15760., 14576., 15200., 15824., 16448., 9880.,  10336., 10792.,
      11248., 10496., 10976., 11456., 11936., 11112., 11616., 12120., 12624.,
      11728., 12256., 12784., 13312., 19736., 20576., 21416., 22256., 20352.,
      21216., 22080., 22944., 20968., 21856., 22744., 23632., 21584., 22496.,
      23408., 24320., 22200., 23136., 24072., 25008., 22816., 23776., 24736.,
      25696., 23432., 24416., 25400., 26384., 24048., 25056., 26064., 27072.,
      24664., 25696., 26728., 27760., 25280., 26336., 27392., 28448., 25896.,
      26976., 28056., 29136., 26512., 27616., 28720., 29824., 22584., 23520.,
      24456., 25392., 23200., 24160., 25120., 26080., 23816., 24800., 25784.,
      26768., 24432., 25440., 26448., 27456., 21272., 22112., 22952., 23792.,
      21888., 22752., 23616., 24480., 22504., 23392., 24280., 25168., 23120.,
      24032., 24944., 25856., 20728., 21472., 22216., 22960., 21344., 22112.,
      22880., 23648., 21960., 22752., 23544., 24336., 22576., 23392., 24208.,
      25024., 20952., 21600., 22248., 22896., 21568., 22240., 22912., 23584.,
      22184., 22880., 23576., 24272., 22800., 23520., 24240., 24960., 16344.,
      16992., 17640., 18288., 16960., 17632., 18304., 18976., 17576., 18272.,
      18968., 19664., 18192., 18912., 19632., 20352., 12728., 13280., 13832.,
      14384., 13344., 13920., 14496., 15072., 13960., 14560., 15160., 15760.,
      14576., 15200., 15824., 16448., 9880.,  10336., 10792., 11248., 10496.,
      10976., 11456., 11936., 11112., 11616., 12120., 12624., 11728., 12256.,
      12784., 13312., 12344., 12896., 13448., 14000., 12960., 13536., 14112.,
      14688., 13576., 14176., 14776., 15376., 14192., 14816., 15440., 16064.,
      14808., 15456., 16104., 16752., 15424., 16096., 16768., 17440., 16040.,
      16736., 17432., 18128., 16656., 17376., 18096., 18816., 17272., 18016.,
      18760., 19504., 17888., 18656., 19424., 20192., 18504., 19296., 20088.,
      20880., 19120., 19936., 20752., 21568., 19736., 20576., 21416., 22256.,
      20352., 21216., 22080., 22944., 20968., 21856., 22744., 23632., 21584.,
      22496., 23408., 24320., 21272., 22112., 22952., 23792., 21888., 22752.,
      23616., 24480., 22504., 23392., 24280., 25168., 23120., 24032., 24944.,
      25856., 20728., 21472., 22216., 22960., 21344., 22112., 22880., 23648.,
      21960., 22752., 23544., 24336., 22576., 23392., 24208., 25024., 20952.,
      21600., 22248., 22896., 21568., 22240., 22912., 23584., 22184., 22880.,
      23576., 24272., 22800., 23520., 24240., 24960., 23416., 24160., 24904.,
      25648., 24032., 24800., 25568., 26336., 24648., 25440., 26232., 27024.,
      25264., 26080., 26896., 27712., 25880., 26720., 27560., 28400., 26496.,
      27360., 28224., 29088., 27112., 28000., 28888., 29776., 27728., 28640.,
      29552., 30464., 20728., 21472., 22216., 22960., 21344., 22112., 22880.,
      23648., 21960., 22752., 23544., 24336., 22576., 23392., 24208., 25024.,
      16344., 16992., 17640., 18288., 16960., 17632., 18304., 18976., 17576.,
      18272., 18968., 19664., 18192., 18912., 19632., 20352., 14808., 15456.,
      16104., 16752., 15424., 16096., 16768., 17440., 16040., 16736., 17432.,
      18128., 16656., 17376., 18096., 18816., 17272., 18016., 18760., 19504.,
      17888., 18656., 19424., 20192., 18504., 19296., 20088., 20880., 19120.,
      19936., 20752., 21568., 19736., 20576., 21416., 22256., 20352., 21216.,
      22080., 22944., 20968., 21856., 22744., 23632., 21584., 22496., 23408.,
      24320., 22200., 23136., 24072., 25008., 22816., 23776., 24736., 25696.,
      23432., 24416., 25400., 26384., 24048., 25056., 26064., 27072., 24664.,
      25696., 26728., 27760., 25280., 26336., 27392., 28448., 25896., 26976.,
      28056., 29136., 26512., 27616., 28720., 29824., 22584., 23520., 24456.,
      25392., 23200., 24160., 25120., 26080., 23816., 24800., 25784., 26768.,
      24432., 25440., 26448., 27456., 21272., 22112., 22952., 23792., 21888.,
      22752., 23616., 24480., 22504., 23392., 24280., 25168., 23120., 24032.,
      24944., 25856., 25880., 26720., 27560., 28400., 26496., 27360., 28224.,
      29088., 27112., 28000., 28888., 29776., 27728., 28640., 29552., 30464.,
      20728., 21472., 22216., 22960., 21344., 22112., 22880., 23648., 21960.,
      22752., 23544., 24336., 22576., 23392., 24208., 25024., 16344., 16992.,
      17640., 18288., 16960., 17632., 18304., 18976., 17576., 18272., 18968.,
      19664., 18192., 18912., 19632., 20352., 12728., 13280., 13832., 14384.,
      13344., 13920., 14496., 15072., 13960., 14560., 15160., 15760., 14576.,
      15200., 15824., 16448., 9880.,  10336., 10792., 11248., 10496., 10976.,
      11456., 11936., 11112., 11616., 12120., 12624., 11728., 12256., 12784.,
      13312., 12344., 12896., 13448., 14000., 12960., 13536., 14112., 14688.,
      13576., 14176., 14776., 15376., 14192., 14816., 15440., 16064., 14808.,
      15456., 16104., 16752., 15424., 16096., 16768., 17440., 16040., 16736.,
      17432., 18128., 16656., 17376., 18096., 18816., 24664., 25696., 26728.,
      27760., 25280., 26336., 27392., 28448., 25896., 26976., 28056., 29136.,
      26512., 27616., 28720., 29824., 22584., 23520., 24456., 25392., 23200.,
      24160., 25120., 26080., 23816., 24800., 25784., 26768., 24432., 25440.,
      26448., 27456., 21272., 22112., 22952., 23792., 21888., 22752., 23616.,
      24480., 22504., 23392., 24280., 25168., 23120., 24032., 24944., 25856.,
      20728., 21472., 22216., 22960., 21344., 22112., 22880., 23648., 21960.,
      22752., 23544., 24336., 22576., 23392., 24208., 25024., 20952., 21600.,
      22248., 22896., 21568., 22240., 22912., 23584., 22184., 22880., 23576.,
      24272., 22800., 23520., 24240., 24960., 23416., 24160., 24904., 25648.,
      24032., 24800., 25568., 26336., 24648., 25440., 26232., 27024., 25264.,
      26080., 26896., 27712., 25880., 26720., 27560., 28400., 26496., 27360.,
      28224., 29088., 27112., 28000., 28888., 29776., 27728., 28640., 29552.,
      30464.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5040.,  6282.,  7560.,  8856.,  7560.,  6282.,  5040.,  8900.,  10953.,
      13048., 15164., 13048., 10953., 8900.,  6720.,  8376.,  10080., 11808.,
      10080., 8376.,  6720.,  11540., 14199., 16912., 19652., 16912., 14199.,
      11540., 6720.,  8376.,  10080., 11808., 10080., 8376.,  6720.,  8900.,
      10953., 13048., 15164., 13048., 10953., 8900.,  5040.,  6282.,  7560.,
      8856.,  7560.,  6282.,  5040.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19317., 19488., 19659., 19830., 20001., 20172., 20343., 20685., 20856.,
      21027., 21198., 21369., 21540., 21711., 22053., 22224., 22395., 22566.,
      22737., 22908., 23079., 23421., 23592., 23763., 23934., 24105., 24276.,
      24447., 24789., 24960., 25131., 25302., 25473., 25644., 25815., 26157.,
      26328., 26499., 26670., 26841., 27012., 27183., 27525., 27696., 27867.,
      28038., 28209., 28380., 28551.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7290.,  7920.,  8730.,  9540.,  10080., 11088., 11304., 12528., 8946.,
      10080., 6786.,  7812.,  4860.,  5760.,  8285.,  9000.,  9945.,  10866.,
      11508., 12656., 12932., 14328., 10241., 11536., 7773.,  8946.,  5570.,
      6600.,  9720.,  10560., 11640., 12720., 13440., 14784., 15072., 16704.,
      11928., 13440., 9048.,  10416., 6480.,  7680.,  10715., 11640., 12855.,
      14046., 14868., 16352., 16700., 18504., 13223., 14896., 10035., 11550.,
      7190.,  8520.,  9720.,  10560., 11640., 12720., 13440., 14784., 15072.,
      16704., 11928., 13440., 9048.,  10416., 6480.,  7680.,  8285.,  9000.,
      9945.,  10866., 11508., 12656., 12932., 14328., 10241., 11536., 7773.,
      8946.,  5570.,  6600.,  7290.,  7920.,  8730.,  9540.,  10080., 11088.,
      11304., 12528., 8946.,  10080., 6786.,  7812.,  4860.,  5760.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14127., 14826., 14451., 15168., 14775., 15510., 15099., 15852., 15423.,
      16194., 15747., 16536., 16071., 16878., 16719., 17562., 17043., 17904.,
      17367., 18246., 17691., 18588., 18015., 18930., 18339., 19272., 18663.,
      19614., 19311., 20298., 19635., 20640., 19959., 20982., 20283., 21324.,
      20607., 21666., 20931., 22008., 21255., 22350., 21903., 23034., 22227.,
      23376., 22551., 23718., 22875., 24060., 23199., 24402., 23523., 24744.,
      23847., 25086., 24495., 25770., 24819., 26112., 25143., 26454., 25467.,
      26796., 25791., 27138., 26115., 27480., 26439., 27822., 21455., 22618.,
      21779., 22960., 22103., 23302., 22427., 23644., 22751., 23986., 23075.,
      24328., 23399., 24670., 19439., 20490., 19763., 20832., 20087., 21174.,
      20411., 21516., 20735., 21858., 21059., 22200., 21383., 22542.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5310.,  5940.,  6570.,  7200.,  6858.,  7668.,  8478.,  9288.,  8208.,
      9216.,  10224., 11232., 9288.,  10512., 11736., 12960., 7254.,  8388.,
      9522.,  10656., 5922.,  6948.,  7974.,  9000.,  5364.,  6264.,  7164.,
      8064.,  6031.,  6746.,  7461.,  8176.,  7801.,  8722.,  9643.,  10564.,
      9356.,  10504., 11652., 12800., 10612., 12008., 13404., 14800., 8291.,
      9586.,  10881., 12176., 6773.,  7946.,  9119.,  10292., 6142.,  7172.,
      8202.,  9232.,  7080.,  7920.,  8760.,  9600.,  9144.,  10224., 11304.,
      12384., 10944., 12288., 13632., 14976., 12384., 14016., 15648., 17280.,
      9672.,  11184., 12696., 14208., 7896.,  9264.,  10632., 12000., 7152.,
      8352.,  9552.,  10752., 7801.,  8726.,  9651.,  10576., 10087., 11278.,
      12469., 13660., 12092., 13576., 15060., 16544., 13708., 15512., 17316.,
      19120., 10709., 12382., 14055., 15728., 8747.,  10262., 11777., 13292.,
      7930.,  9260.,  10590., 11920., 7080.,  7920.,  8760.,  9600.,  9144.,
      10224., 11304., 12384., 10944., 12288., 13632., 14976., 12384., 14016.,
      15648., 17280., 9672.,  11184., 12696., 14208., 7896.,  9264.,  10632.,
      12000., 7152.,  8352.,  9552.,  10752., 6031.,  6746.,  7461.,  8176.,
      7801.,  8722.,  9643.,  10564., 9356.,  10504., 11652., 12800., 10612.,
      12008., 13404., 14800., 8291.,  9586.,  10881., 12176., 6773.,  7946.,
      9119.,  10292., 6142.,  7172.,  8202.,  9232.,  5310.,  5940.,  6570.,
      7200.,  6858.,  7668.,  8478.,  9288.,  8208.,  9216.,  10224., 11232.,
      9288.,  10512., 11736., 12960., 7254.,  8388.,  9522.,  10656., 5922.,
      6948.,  7974.,  9000.,  5364.,  6264.,  7164.,  8064.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9827.,  10142., 10457., 10772., 10329., 10662., 10995., 11328., 10831.,
      11182., 11533., 11884., 11333., 11702., 12071., 12440., 11835., 12222.,
      12609., 12996., 12337., 12742., 13147., 13552., 12839., 13262., 13685.,
      14108., 13843., 14302., 14761., 15220., 14345., 14822., 15299., 15776.,
      14847., 15342., 15837., 16332., 15349., 15862., 16375., 16888., 15851.,
      16382., 16913., 17444., 16353., 16902., 17451., 18000., 16855., 17422.,
      17989., 18556., 17859., 18462., 19065., 19668., 18361., 18982., 19603.,
      20224., 18863., 19502., 20141., 20780., 19365., 20022., 20679., 21336.,
      19867., 20542., 21217., 21892., 20369., 21062., 21755., 22448., 20871.,
      21582., 22293., 23004., 21875., 22622., 23369., 24116., 22377., 23142.,
      23907., 24672., 22879., 23662., 24445., 25228., 23381., 24182., 24983.,
      25784., 23883., 24702., 25521., 26340., 24385., 25222., 26059., 26896.,
      24887., 25742., 26597., 27452., 25507., 26270., 27033., 27796., 26009.,
      26790., 27571., 28352., 26511., 27310., 28109., 28908., 27013., 27830.,
      28647., 29464., 27515., 28350., 29185., 30020., 28017., 28870., 29723.,
      30576., 28519., 29390., 30261., 31132., 16467., 17118., 17769., 18420.,
      16969., 17638., 18307., 18976., 17471., 18158., 18845., 19532., 17973.,
      18678., 19383., 20088., 18475., 19198., 19921., 20644., 18977., 19718.,
      20459., 21200., 19479., 20238., 20997., 21756., 7043.,  7454.,  7865.,
      8276.,  7545.,  7974.,  8403.,  8832.,  8047.,  8494.,  8941.,  9388.,
      8549.,  9014.,  9479.,  9944.,  9051.,  9534.,  10017., 10500., 9553.,
      10054., 10555., 11056., 10055., 10574., 11093., 11612.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4860.,  5760.,  6786.,  7812.,  8946.,  10080., 11304., 12528., 10080.,
      11088., 8730.,  9540.,  7290.,  7920.,  5570.,  6600.,  7773.,  8946.,
      10241., 11536., 12932., 14328., 11508., 12656., 9945.,  10866., 8285.,
      9000.,  6480.,  7680.,  9048.,  10416., 11928., 13440., 15072., 16704.,
      13440., 14784., 11640., 12720., 9720.,  10560., 7190.,  8520.,  10035.,
      11550., 13223., 14896., 16700., 18504., 14868., 16352., 12855., 14046.,
      10715., 11640., 6480.,  7680.,  9048.,  10416., 11928., 13440., 15072.,
      16704., 13440., 14784., 11640., 12720., 9720.,  10560., 5570.,  6600.,
      7773.,  8946.,  10241., 11536., 12932., 14328., 11508., 12656., 9945.,
      10866., 8285.,  9000.,  4860.,  5760.,  6786.,  7812.,  8946.,  10080.,
      11304., 12528., 10080., 11088., 8730.,  9540.,  7290.,  7920.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14655., 14826., 14997., 15168., 15339., 15510., 15681., 15852., 16023.,
      16194., 16365., 16536., 16707., 16878., 17391., 17562., 17733., 17904.,
      18075., 18246., 18417., 18588., 18759., 18930., 19101., 19272., 19443.,
      19614., 20127., 20298., 20469., 20640., 20811., 20982., 21153., 21324.,
      21495., 21666., 21837., 22008., 22179., 22350., 22863., 23034., 23205.,
      23376., 23547., 23718., 23889., 24060., 24231., 24402., 24573., 24744.,
      24915., 25086., 25599., 25770., 25941., 26112., 26283., 26454., 26625.,
      26796., 26967., 27138., 27309., 27480., 27651., 27822., 22447., 22618.,
      22789., 22960., 23131., 23302., 23473., 23644., 23815., 23986., 24157.,
      24328., 24499., 24670., 20319., 20490., 20661., 20832., 21003., 21174.,
      21345., 21516., 21687., 21858., 22029., 22200., 22371., 22542.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5670.,  6120.,  6660.,  7200.,  7740.,  8388.,  8820.,  9576.,  9954.,
      10836., 11088., 12096., 12240., 13392., 13392., 14688., 9954.,  11088.,
      10836., 12096., 7740.,  8820.,  8388.,  9576.,  5670.,  6660.,  6120.,
      7200.,  6615.,  7140.,  7770.,  8400.,  9030.,  9786.,  10290., 11172.,
      11613., 12642., 12936., 14112., 14280., 15624., 15624., 17136., 11613.,
      12936., 12642., 14112., 9030.,  10290., 9786.,  11172., 6615.,  7770.,
      7140.,  8400.,  7560.,  8160.,  8880.,  9600.,  10320., 11184., 11760.,
      12768., 13272., 14448., 14784., 16128., 16320., 17856., 17856., 19584.,
      13272., 14784., 14448., 16128., 10320., 11760., 11184., 12768., 7560.,
      8880.,  8160.,  9600.,  8505.,  9180.,  9990.,  10800., 11610., 12582.,
      13230., 14364., 14931., 16254., 16632., 18144., 18360., 20088., 20088.,
      22032., 14931., 16632., 16254., 18144., 11610., 13230., 12582., 14364.,
      8505.,  9990.,  9180.,  10800., 7560.,  8160.,  8880.,  9600.,  10320.,
      11184., 11760., 12768., 13272., 14448., 14784., 16128., 16320., 17856.,
      17856., 19584., 13272., 14784., 14448., 16128., 10320., 11760., 11184.,
      12768., 7560.,  8880.,  8160.,  9600.,  6615.,  7140.,  7770.,  8400.,
      9030.,  9786.,  10290., 11172., 11613., 12642., 12936., 14112., 14280.,
      15624., 15624., 17136., 11613., 12936., 12642., 14112., 9030.,  10290.,
      9786.,  11172., 6615.,  7770.,  7140.,  8400.,  5670.,  6120.,  6660.,
      7200.,  7740.,  8388.,  8820.,  9576.,  9954.,  10836., 11088., 12096.,
      12240., 13392., 13392., 14688., 9954.,  11088., 10836., 12096., 7740.,
      8820.,  8388.,  9576.,  5670.,  6660.,  6120.,  7200.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9754.,  10238., 10078., 10580., 10402., 10922., 10726., 11264., 11050.,
      11606., 11374., 11948., 11698., 12290., 12022., 12632., 12346., 12974.,
      12670., 13316., 12994., 13658., 13318., 14000., 13642., 14342., 13966.,
      14684., 8282.,  8798.,  8606.,  9140.,  8930.,  9482.,  9254.,  9824.,
      9578.,  10166., 9902.,  10508., 10226., 10850., 10550., 11192., 10874.,
      11534., 11198., 11876., 11522., 12218., 11846., 12560., 12170., 12902.,
      12494., 13244., 6554.,  6974.,  6878.,  7316.,  7202.,  7658.,  7526.,
      8000.,  7850.,  8342.,  8174.,  8684.,  8498.,  9026.,  8822.,  9368.,
      9146.,  9710.,  9470.,  10052., 9794.,  10394., 10118., 10736., 10442.,
      11078., 10766., 11420., 9178.,  9630.,  9502.,  9972.,  9826.,  10314.,
      10150., 10656., 10474., 10998., 10798., 11340., 11122., 11682., 11446.,
      12024., 11770., 12366., 12094., 12708., 12418., 13050., 12742., 13392.,
      13066., 13734., 13390., 14076., 9754.,  10238., 10078., 10580., 10402.,
      10922., 10726., 11264., 11050., 11606., 11374., 11948., 11698., 12290.,
      12022., 12632., 12346., 12974., 12670., 13316., 12994., 13658., 13318.,
      14000., 13642., 14342., 13966., 14684., 8282.,  8798.,  8606.,  9140.,
      8930.,  9482.,  9254.,  9824.,  9578.,  10166., 9902.,  10508., 10226.,
      10850., 10550., 11192., 10874., 11534., 11198., 11876., 11522., 12218.,
      11846., 12560., 12170., 12902., 12494., 13244., 6554.,  6974.,  6878.,
      7316.,  7202.,  7658.,  7526.,  8000.,  7850.,  8342.,  8174.,  8684.,
      8498.,  9026.,  8822.,  9368.,  9146.,  9710.,  9470.,  10052., 9794.,
      10394., 10118., 10736., 10442., 11078., 10766., 11420.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3978.,  4428.,  4878.,  5328.,  4716.,  5256.,  5796.,  6336.,  5616.,
      6264.,  6912.,  7560.,  6516.,  7272.,  8028.,  8784.,  7506.,  8388.,
      9270.,  10152., 8496.,  9504.,  10512., 11520., 9504.,  10656., 11808.,
      12960., 10512., 11808., 13104., 14400., 7542.,  8676.,  9810.,  10944.,
      8316.,  9576.,  10836., 12096., 6336.,  7416.,  8496.,  9576.,  6948.,
      8136.,  9324.,  10512., 6030.,  7020.,  8010.,  9000.,  6552.,  7632.,
      8712.,  9792.,  4641.,  5166.,  5691.,  6216.,  5502.,  6132.,  6762.,
      7392.,  6552.,  7308.,  8064.,  8820.,  7602.,  8484.,  9366.,  10248.,
      8757.,  9786.,  10815., 11844., 9912.,  11088., 12264., 13440., 11088.,
      12432., 13776., 15120., 12264., 13776., 15288., 16800., 8799.,  10122.,
      11445., 12768., 9702.,  11172., 12642., 14112., 7392.,  8652.,  9912.,
      11172., 8106.,  9492.,  10878., 12264., 7035.,  8190.,  9345.,  10500.,
      7644.,  8904.,  10164., 11424., 5304.,  5904.,  6504.,  7104.,  6288.,
      7008.,  7728.,  8448.,  7488.,  8352.,  9216.,  10080., 8688.,  9696.,
      10704., 11712., 10008., 11184., 12360., 13536., 11328., 12672., 14016.,
      15360., 12672., 14208., 15744., 17280., 14016., 15744., 17472., 19200.,
      10056., 11568., 13080., 14592., 11088., 12768., 14448., 16128., 8448.,
      9888.,  11328., 12768., 9264.,  10848., 12432., 14016., 8040.,  9360.,
      10680., 12000., 8736.,  10176., 11616., 13056., 5967.,  6642.,  7317.,
      7992.,  7074.,  7884.,  8694.,  9504.,  8424.,  9396.,  10368., 11340.,
      9774.,  10908., 12042., 13176., 11259., 12582., 13905., 15228., 12744.,
      14256., 15768., 17280., 14256., 15984., 17712., 19440., 15768., 17712.,
      19656., 21600., 11313., 13014., 14715., 16416., 12474., 14364., 16254.,
      18144., 9504.,  11124., 12744., 14364., 10422., 12204., 13986., 15768.,
      9045.,  10530., 12015., 13500., 9828.,  11448., 13068., 14688., 5304.,
      5904.,  6504.,  7104.,  6288.,  7008.,  7728.,  8448.,  7488.,  8352.,
      9216.,  10080., 8688.,  9696.,  10704., 11712., 10008., 11184., 12360.,
      13536., 11328., 12672., 14016., 15360., 12672., 14208., 15744., 17280.,
      14016., 15744., 17472., 19200., 10056., 11568., 13080., 14592., 11088.,
      12768., 14448., 16128., 8448.,  9888.,  11328., 12768., 9264.,  10848.,
      12432., 14016., 8040.,  9360.,  10680., 12000., 8736.,  10176., 11616.,
      13056., 4641.,  5166.,  5691.,  6216.,  5502.,  6132.,  6762.,  7392.,
      6552.,  7308.,  8064.,  8820.,  7602.,  8484.,  9366.,  10248., 8757.,
      9786.,  10815., 11844., 9912.,  11088., 12264., 13440., 11088., 12432.,
      13776., 15120., 12264., 13776., 15288., 16800., 8799.,  10122., 11445.,
      12768., 9702.,  11172., 12642., 14112., 7392.,  8652.,  9912.,  11172.,
      8106.,  9492.,  10878., 12264., 7035.,  8190.,  9345.,  10500., 7644.,
      8904.,  10164., 11424., 3978.,  4428.,  4878.,  5328.,  4716.,  5256.,
      5796.,  6336.,  5616.,  6264.,  6912.,  7560.,  6516.,  7272.,  8028.,
      8784.,  7506.,  8388.,  9270.,  10152., 8496.,  9504.,  10512., 11520.,
      9504.,  10656., 11808., 12960., 10512., 11808., 13104., 14400., 7542.,
      8676.,  9810.,  10944., 8316.,  9576.,  10836., 12096., 6336.,  7416.,
      8496.,  9576.,  6948.,  8136.,  9324.,  10512., 6030.,  7020.,  8010.,
      9000.,  6552.,  7632.,  8712.,  9792.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18768., 19252., 19736., 20220., 19270., 19772., 20274., 20776., 19772.,
      20292., 20812., 21332., 20274., 20812., 21350., 21888., 20776., 21332.,
      21888., 22444., 21278., 21852., 22426., 23000., 21780., 22372., 22964.,
      23556., 22282., 22892., 23502., 24112., 22784., 23412., 24040., 24668.,
      23286., 23932., 24578., 25224., 23788., 24452., 25116., 25780., 24290.,
      24972., 25654., 26336., 24792., 25492., 26192., 26892., 25294., 26012.,
      26730., 27448., 13744., 14260., 14776., 15292., 14246., 14780., 15314.,
      15848., 14748., 15300., 15852., 16404., 15250., 15820., 16390., 16960.,
      15752., 16340., 16928., 17516., 16254., 16860., 17466., 18072., 16756.,
      17380., 18004., 18628., 17258., 17900., 18542., 19184., 17760., 18420.,
      19080., 19740., 18262., 18940., 19618., 20296., 18764., 19460., 20156.,
      20852., 19266., 19980., 20694., 21408., 19768., 20500., 21232., 21964.,
      20270., 21020., 21770., 22520., 8336.,  8756.,  9176.,  9596.,  8838.,
      9276.,  9714.,  10152., 9340.,  9796.,  10252., 10708., 9842.,  10316.,
      10790., 11264., 10344., 10836., 11328., 11820., 10846., 11356., 11866.,
      12376., 11348., 11876., 12404., 12932., 11850., 12396., 12942., 13488.,
      12352., 12916., 13480., 14044., 12854., 13436., 14018., 14600., 13356.,
      13956., 14556., 15156., 13858., 14476., 15094., 15712., 14360., 14996.,
      15632., 16268., 14862., 15516., 16170., 16824., 11504., 11956., 12408.,
      12860., 12006., 12476., 12946., 13416., 12508., 12996., 13484., 13972.,
      13010., 13516., 14022., 14528., 13512., 14036., 14560., 15084., 14014.,
      14556., 15098., 15640., 14516., 15076., 15636., 16196., 15018., 15596.,
      16174., 16752., 15520., 16116., 16712., 17308., 16022., 16636., 17250.,
      17864., 16524., 17156., 17788., 18420., 17026., 17676., 18326., 18976.,
      17528., 18196., 18864., 19532., 18030., 18716., 19402., 20088., 18768.,
      19252., 19736., 20220., 19270., 19772., 20274., 20776., 19772., 20292.,
      20812., 21332., 20274., 20812., 21350., 21888., 20776., 21332., 21888.,
      22444., 21278., 21852., 22426., 23000., 21780., 22372., 22964., 23556.,
      22282., 22892., 23502., 24112., 22784., 23412., 24040., 24668., 23286.,
      23932., 24578., 25224., 23788., 24452., 25116., 25780., 24290., 24972.,
      25654., 26336., 24792., 25492., 26192., 26892., 25294., 26012., 26730.,
      27448., 13744., 14260., 14776., 15292., 14246., 14780., 15314., 15848.,
      14748., 15300., 15852., 16404., 15250., 15820., 16390., 16960., 15752.,
      16340., 16928., 17516., 16254., 16860., 17466., 18072., 16756., 17380.,
      18004., 18628., 17258., 17900., 18542., 19184., 17760., 18420., 19080.,
      19740., 18262., 18940., 19618., 20296., 18764., 19460., 20156., 20852.,
      19266., 19980., 20694., 21408., 19768., 20500., 21232., 21964., 20270.,
      21020., 21770., 22520., 8336.,  8756.,  9176.,  9596.,  8838.,  9276.,
      9714.,  10152., 9340.,  9796.,  10252., 10708., 9842.,  10316., 10790.,
      11264., 10344., 10836., 11328., 11820., 10846., 11356., 11866., 12376.,
      11348., 11876., 12404., 12932., 11850., 12396., 12942., 13488., 12352.,
      12916., 13480., 14044., 12854., 13436., 14018., 14600., 13356., 13956.,
      14556., 15156., 13858., 14476., 15094., 15712., 14360., 14996., 15632.,
      16268., 14862., 15516., 16170., 16824.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5364.,  6264.,  7164.,  8064.,  5922.,  6948.,  7974.,  9000.,  7254.,
      8388.,  9522.,  10656., 9288.,  10512., 11736., 12960., 8208.,  9216.,
      10224., 11232., 6858.,  7668.,  8478.,  9288.,  5310.,  5940.,  6570.,
      7200.,  6142.,  7172.,  8202.,  9232.,  6773.,  7946.,  9119.,  10292.,
      8291.,  9586.,  10881., 12176., 10612., 12008., 13404., 14800., 9356.,
      10504., 11652., 12800., 7801.,  8722.,  9643.,  10564., 6031.,  6746.,
      7461.,  8176.,  7152.,  8352.,  9552.,  10752., 7896.,  9264.,  10632.,
      12000., 9672.,  11184., 12696., 14208., 12384., 14016., 15648., 17280.,
      10944., 12288., 13632., 14976., 9144.,  10224., 11304., 12384., 7080.,
      7920.,  8760.,  9600.,  7930.,  9260.,  10590., 11920., 8747.,  10262.,
      11777., 13292., 10709., 12382., 14055., 15728., 13708., 15512., 17316.,
      19120., 12092., 13576., 15060., 16544., 10087., 11278., 12469., 13660.,
      7801.,  8726.,  9651.,  10576., 7152.,  8352.,  9552.,  10752., 7896.,
      9264.,  10632., 12000., 9672.,  11184., 12696., 14208., 12384., 14016.,
      15648., 17280., 10944., 12288., 13632., 14976., 9144.,  10224., 11304.,
      12384., 7080.,  7920.,  8760.,  9600.,  6142.,  7172.,  8202.,  9232.,
      6773.,  7946.,  9119.,  10292., 8291.,  9586.,  10881., 12176., 10612.,
      12008., 13404., 14800., 9356.,  10504., 11652., 12800., 7801.,  8722.,
      9643.,  10564., 6031.,  6746.,  7461.,  8176.,  5364.,  6264.,  7164.,
      8064.,  5922.,  6948.,  7974.,  9000.,  7254.,  8388.,  9522.,  10656.,
      9288.,  10512., 11736., 12960., 8208.,  9216.,  10224., 11232., 6858.,
      7668.,  8478.,  9288.,  5310.,  5940.,  6570.,  7200.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10067., 10238., 10409., 10580., 10751., 10922., 11093., 11264., 11435.,
      11606., 11777., 11948., 12119., 12290., 12461., 12632., 12803., 12974.,
      13145., 13316., 13487., 13658., 13829., 14000., 14171., 14342., 14513.,
      14684., 8627.,  8798.,  8969.,  9140.,  9311.,  9482.,  9653.,  9824.,
      9995.,  10166., 10337., 10508., 10679., 10850., 11021., 11192., 11363.,
      11534., 11705., 11876., 12047., 12218., 12389., 12560., 12731., 12902.,
      13073., 13244., 6803.,  6974.,  7145.,  7316.,  7487.,  7658.,  7829.,
      8000.,  8171.,  8342.,  8513.,  8684.,  8855.,  9026.,  9197.,  9368.,
      9539.,  9710.,  9881.,  10052., 10223., 10394., 10565., 10736., 10907.,
      11078., 11249., 11420., 9459.,  9630.,  9801.,  9972.,  10143., 10314.,
      10485., 10656., 10827., 10998., 11169., 11340., 11511., 11682., 11853.,
      12024., 12195., 12366., 12537., 12708., 12879., 13050., 13221., 13392.,
      13563., 13734., 13905., 14076., 10067., 10238., 10409., 10580., 10751.,
      10922., 11093., 11264., 11435., 11606., 11777., 11948., 12119., 12290.,
      12461., 12632., 12803., 12974., 13145., 13316., 13487., 13658., 13829.,
      14000., 14171., 14342., 14513., 14684., 8627.,  8798.,  8969.,  9140.,
      9311.,  9482.,  9653.,  9824.,  9995.,  10166., 10337., 10508., 10679.,
      10850., 11021., 11192., 11363., 11534., 11705., 11876., 12047., 12218.,
      12389., 12560., 12731., 12902., 13073., 13244., 6803.,  6974.,  7145.,
      7316.,  7487.,  7658.,  7829.,  8000.,  8171.,  8342.,  8513.,  8684.,
      8855.,  9026.,  9197.,  9368.,  9539.,  9710.,  9881.,  10052., 10223.,
      10394., 10565., 10736., 10907., 11078., 11249., 11420.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6030.,  6552.,  7020.,  7632.,  8010.,  8712.,  9000.,  9792.,  6336.,
      6948.,  7416.,  8136.,  8496.,  9324.,  9576.,  10512., 7542.,  8316.,
      8676.,  9576.,  9810.,  10836., 10944., 12096., 9504.,  10512., 10656.,
      11808., 11808., 13104., 12960., 14400., 7506.,  8496.,  8388.,  9504.,
      9270.,  10512., 10152., 11520., 5616.,  6516.,  6264.,  7272.,  6912.,
      8028.,  7560.,  8784.,  3978.,  4716.,  4428.,  5256.,  4878.,  5796.,
      5328.,  6336.,  7035.,  7644.,  8190.,  8904.,  9345.,  10164., 10500.,
      11424., 7392.,  8106.,  8652.,  9492.,  9912.,  10878., 11172., 12264.,
      8799.,  9702.,  10122., 11172., 11445., 12642., 12768., 14112., 11088.,
      12264., 12432., 13776., 13776., 15288., 15120., 16800., 8757.,  9912.,
      9786.,  11088., 10815., 12264., 11844., 13440., 6552.,  7602.,  7308.,
      8484.,  8064.,  9366.,  8820.,  10248., 4641.,  5502.,  5166.,  6132.,
      5691.,  6762.,  6216.,  7392.,  8040.,  8736.,  9360.,  10176., 10680.,
      11616., 12000., 13056., 8448.,  9264.,  9888.,  10848., 11328., 12432.,
      12768., 14016., 10056., 11088., 11568., 12768., 13080., 14448., 14592.,
      16128., 12672., 14016., 14208., 15744., 15744., 17472., 17280., 19200.,
      10008., 11328., 11184., 12672., 12360., 14016., 13536., 15360., 7488.,
      8688.,  8352.,  9696.,  9216.,  10704., 10080., 11712., 5304.,  6288.,
      5904.,  7008.,  6504.,  7728.,  7104.,  8448.,  9045.,  9828.,  10530.,
      11448., 12015., 13068., 13500., 14688., 9504.,  10422., 11124., 12204.,
      12744., 13986., 14364., 15768., 11313., 12474., 13014., 14364., 14715.,
      16254., 16416., 18144., 14256., 15768., 15984., 17712., 17712., 19656.,
      19440., 21600., 11259., 12744., 12582., 14256., 13905., 15768., 15228.,
      17280., 8424.,  9774.,  9396.,  10908., 10368., 12042., 11340., 13176.,
      5967.,  7074.,  6642.,  7884.,  7317.,  8694.,  7992.,  9504.,  8040.,
      8736.,  9360.,  10176., 10680., 11616., 12000., 13056., 8448.,  9264.,
      9888.,  10848., 11328., 12432., 12768., 14016., 10056., 11088., 11568.,
      12768., 13080., 14448., 14592., 16128., 12672., 14016., 14208., 15744.,
      15744., 17472., 17280., 19200., 10008., 11328., 11184., 12672., 12360.,
      14016., 13536., 15360., 7488.,  8688.,  8352.,  9696.,  9216.,  10704.,
      10080., 11712., 5304.,  6288.,  5904.,  7008.,  6504.,  7728.,  7104.,
      8448.,  7035.,  7644.,  8190.,  8904.,  9345.,  10164., 10500., 11424.,
      7392.,  8106.,  8652.,  9492.,  9912.,  10878., 11172., 12264., 8799.,
      9702.,  10122., 11172., 11445., 12642., 12768., 14112., 11088., 12264.,
      12432., 13776., 13776., 15288., 15120., 16800., 8757.,  9912.,  9786.,
      11088., 10815., 12264., 11844., 13440., 6552.,  7602.,  7308.,  8484.,
      8064.,  9366.,  8820.,  10248., 4641.,  5502.,  5166.,  6132.,  5691.,
      6762.,  6216.,  7392.,  6030.,  6552.,  7020.,  7632.,  8010.,  8712.,
      9000.,  9792.,  6336.,  6948.,  7416.,  8136.,  8496.,  9324.,  9576.,
      10512., 7542.,  8316.,  8676.,  9576.,  9810.,  10836., 10944., 12096.,
      9504.,  10512., 10656., 11808., 11808., 13104., 12960., 14400., 7506.,
      8496.,  8388.,  9504.,  9270.,  10512., 10152., 11520., 5616.,  6516.,
      6264.,  7272.,  6912.,  8028.,  7560.,  8784.,  3978.,  4716.,  4428.,
      5256.,  4878.,  5796.,  5328.,  6336.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19184., 20134., 19508., 20476., 19832., 20818., 20156., 21160., 20480.,
      21502., 20804., 21844., 21128., 22186., 21452., 22528., 21776., 22870.,
      22100., 23212., 22424., 23554., 22748., 23896., 23072., 24238., 23396.,
      24580., 23720., 24922., 24044., 25264., 24368., 25606., 24692., 25948.,
      25016., 26290., 25340., 26632., 25664., 26974., 25988., 27316., 26312.,
      27658., 26636., 28000., 26960., 28342., 27284., 28684., 27608., 29026.,
      27932., 29368., 16240., 17254., 16564., 17596., 16888., 17938., 17212.,
      18280., 17536., 18622., 17860., 18964., 18184., 19306., 18508., 19648.,
      18832., 19990., 19156., 20332., 19480., 20674., 19804., 21016., 20128.,
      21358., 20452., 21700., 20776., 22042., 21100., 22384., 21424., 22726.,
      21748., 23068., 22072., 23410., 22396., 23752., 22720., 24094., 23044.,
      24436., 23368., 24778., 23692., 25120., 24016., 25462., 24340., 25804.,
      24664., 26146., 24988., 26488., 12784., 13606., 13108., 13948., 13432.,
      14290., 13756., 14632., 14080., 14974., 14404., 15316., 14728., 15658.,
      15052., 16000., 15376., 16342., 15700., 16684., 16024., 17026., 16348.,
      17368., 16672., 17710., 16996., 18052., 17320., 18394., 17644., 18736.,
      17968., 19078., 18292., 19420., 18616., 19762., 18940., 20104., 19264.,
      20446., 19588., 20788., 19912., 21130., 20236., 21472., 20560., 21814.,
      20884., 22156., 21208., 22498., 21532., 22840., 18032., 18918., 18356.,
      19260., 18680., 19602., 19004., 19944., 19328., 20286., 19652., 20628.,
      19976., 20970., 20300., 21312., 20624., 21654., 20948., 21996., 21272.,
      22338., 21596., 22680., 21920., 23022., 22244., 23364., 22568., 23706.,
      22892., 24048., 23216., 24390., 23540., 24732., 23864., 25074., 24188.,
      25416., 24512., 25758., 24836., 26100., 25160., 26442., 25484., 26784.,
      25808., 27126., 26132., 27468., 26456., 27810., 26780., 28152., 19184.,
      20134., 19508., 20476., 19832., 20818., 20156., 21160., 20480., 21502.,
      20804., 21844., 21128., 22186., 21452., 22528., 21776., 22870., 22100.,
      23212., 22424., 23554., 22748., 23896., 23072., 24238., 23396., 24580.,
      23720., 24922., 24044., 25264., 24368., 25606., 24692., 25948., 25016.,
      26290., 25340., 26632., 25664., 26974., 25988., 27316., 26312., 27658.,
      26636., 28000., 26960., 28342., 27284., 28684., 27608., 29026., 27932.,
      29368., 16240., 17254., 16564., 17596., 16888., 17938., 17212., 18280.,
      17536., 18622., 17860., 18964., 18184., 19306., 18508., 19648., 18832.,
      19990., 19156., 20332., 19480., 20674., 19804., 21016., 20128., 21358.,
      20452., 21700., 20776., 22042., 21100., 22384., 21424., 22726., 21748.,
      23068., 22072., 23410., 22396., 23752., 22720., 24094., 23044., 24436.,
      23368., 24778., 23692., 25120., 24016., 25462., 24340., 25804., 24664.,
      26146., 24988., 26488., 12784., 13606., 13108., 13948., 13432., 14290.,
      13756., 14632., 14080., 14974., 14404., 15316., 14728., 15658., 15052.,
      16000., 15376., 16342., 15700., 16684., 16024., 17026., 16348., 17368.,
      16672., 17710., 16996., 18052., 17320., 18394., 17644., 18736., 17968.,
      19078., 18292., 19420., 18616., 19762., 18940., 20104., 19264., 20446.,
      19588., 20788., 19912., 21130., 20236., 21472., 20560., 21814., 20884.,
      22156., 21208., 22498., 21532., 22840.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3474.,  3996.,  4518.,  5040.,  4212.,  4824.,  5436.,  6048.,  4950.,
      5652.,  6354.,  7056.,  5688.,  6480.,  7272.,  8064.,  3996.,  4608.,
      5220.,  5832.,  4896.,  5616.,  6336.,  7056.,  5796.,  6624.,  7452.,
      8280.,  6696.,  7632.,  8568.,  9504.,  6246.,  7020.,  7794.,  8568.,
      7236.,  8136.,  9036.,  9936.,  8226.,  9252.,  10278., 11304., 9216.,
      10368., 11520., 12672., 9936.,  10944., 11952., 12960., 10944., 12096.,
      13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400., 15840.,
      17280., 6246.,  7236.,  8226.,  9216.,  7020.,  8136.,  9252.,  10368.,
      7794.,  9036.,  10278., 11520., 8568.,  9936.,  11304., 12672., 3996.,
      4896.,  5796.,  6696.,  4608.,  5616.,  6624.,  7632.,  5220.,  6336.,
      7452.,  8568.,  5832.,  7056.,  8280.,  9504.,  3474.,  4212.,  4950.,
      5688.,  3996.,  4824.,  5652.,  6480.,  4518.,  5436.,  6354.,  7272.,
      5040.,  6048.,  7056.,  8064.,  4053.,  4662.,  5271.,  5880.,  4914.,
      5628.,  6342.,  7056.,  5775.,  6594.,  7413.,  8232.,  6636.,  7560.,
      8484.,  9408.,  4662.,  5376.,  6090.,  6804.,  5712.,  6552.,  7392.,
      8232.,  6762.,  7728.,  8694.,  9660.,  7812.,  8904.,  9996.,  11088.,
      7287.,  8190.,  9093.,  9996.,  8442.,  9492.,  10542., 11592., 9597.,
      10794., 11991., 13188., 10752., 12096., 13440., 14784., 11592., 12768.,
      13944., 15120., 12768., 14112., 15456., 16800., 13944., 15456., 16968.,
      18480., 15120., 16800., 18480., 20160., 7287.,  8442.,  9597.,  10752.,
      8190.,  9492.,  10794., 12096., 9093.,  10542., 11991., 13440., 9996.,
      11592., 13188., 14784., 4662.,  5712.,  6762.,  7812.,  5376.,  6552.,
      7728.,  8904.,  6090.,  7392.,  8694.,  9996.,  6804.,  8232.,  9660.,
      11088., 4053.,  4914.,  5775.,  6636.,  4662.,  5628.,  6594.,  7560.,
      5271.,  6342.,  7413.,  8484.,  5880.,  7056.,  8232.,  9408.,  4632.,
      5328.,  6024.,  6720.,  5616.,  6432.,  7248.,  8064.,  6600.,  7536.,
      8472.,  9408.,  7584.,  8640.,  9696.,  10752., 5328.,  6144.,  6960.,
      7776.,  6528.,  7488.,  8448.,  9408.,  7728.,  8832.,  9936.,  11040.,
      8928.,  10176., 11424., 12672., 8328.,  9360.,  10392., 11424., 9648.,
      10848., 12048., 13248., 10968., 12336., 13704., 15072., 12288., 13824.,
      15360., 16896., 13248., 14592., 15936., 17280., 14592., 16128., 17664.,
      19200., 15936., 17664., 19392., 21120., 17280., 19200., 21120., 23040.,
      8328.,  9648.,  10968., 12288., 9360.,  10848., 12336., 13824., 10392.,
      12048., 13704., 15360., 11424., 13248., 15072., 16896., 5328.,  6528.,
      7728.,  8928.,  6144.,  7488.,  8832.,  10176., 6960.,  8448.,  9936.,
      11424., 7776.,  9408.,  11040., 12672., 4632.,  5616.,  6600.,  7584.,
      5328.,  6432.,  7536.,  8640.,  6024.,  7248.,  8472.,  9696.,  6720.,
      8064.,  9408.,  10752., 5211.,  5994.,  6777.,  7560.,  6318.,  7236.,
      8154.,  9072.,  7425.,  8478.,  9531.,  10584., 8532.,  9720.,  10908.,
      12096., 5994.,  6912.,  7830.,  8748.,  7344.,  8424.,  9504.,  10584.,
      8694.,  9936.,  11178., 12420., 10044., 11448., 12852., 14256., 9369.,
      10530., 11691., 12852., 10854., 12204., 13554., 14904., 12339., 13878.,
      15417., 16956., 13824., 15552., 17280., 19008., 14904., 16416., 17928.,
      19440., 16416., 18144., 19872., 21600., 17928., 19872., 21816., 23760.,
      19440., 21600., 23760., 25920., 9369.,  10854., 12339., 13824., 10530.,
      12204., 13878., 15552., 11691., 13554., 15417., 17280., 12852., 14904.,
      16956., 19008., 5994.,  7344.,  8694.,  10044., 6912.,  8424.,  9936.,
      11448., 7830.,  9504.,  11178., 12852., 8748.,  10584., 12420., 14256.,
      5211.,  6318.,  7425.,  8532.,  5994.,  7236.,  8478.,  9720.,  6777.,
      8154.,  9531.,  10908., 7560.,  9072.,  10584., 12096., 4632.,  5328.,
      6024.,  6720.,  5616.,  6432.,  7248.,  8064.,  6600.,  7536.,  8472.,
      9408.,  7584.,  8640.,  9696.,  10752., 5328.,  6144.,  6960.,  7776.,
      6528.,  7488.,  8448.,  9408.,  7728.,  8832.,  9936.,  11040., 8928.,
      10176., 11424., 12672., 8328.,  9360.,  10392., 11424., 9648.,  10848.,
      12048., 13248., 10968., 12336., 13704., 15072., 12288., 13824., 15360.,
      16896., 13248., 14592., 15936., 17280., 14592., 16128., 17664., 19200.,
      15936., 17664., 19392., 21120., 17280., 19200., 21120., 23040., 8328.,
      9648.,  10968., 12288., 9360.,  10848., 12336., 13824., 10392., 12048.,
      13704., 15360., 11424., 13248., 15072., 16896., 5328.,  6528.,  7728.,
      8928.,  6144.,  7488.,  8832.,  10176., 6960.,  8448.,  9936.,  11424.,
      7776.,  9408.,  11040., 12672., 4632.,  5616.,  6600.,  7584.,  5328.,
      6432.,  7536.,  8640.,  6024.,  7248.,  8472.,  9696.,  6720.,  8064.,
      9408.,  10752., 4053.,  4662.,  5271.,  5880.,  4914.,  5628.,  6342.,
      7056.,  5775.,  6594.,  7413.,  8232.,  6636.,  7560.,  8484.,  9408.,
      4662.,  5376.,  6090.,  6804.,  5712.,  6552.,  7392.,  8232.,  6762.,
      7728.,  8694.,  9660.,  7812.,  8904.,  9996.,  11088., 7287.,  8190.,
      9093.,  9996.,  8442.,  9492.,  10542., 11592., 9597.,  10794., 11991.,
      13188., 10752., 12096., 13440., 14784., 11592., 12768., 13944., 15120.,
      12768., 14112., 15456., 16800., 13944., 15456., 16968., 18480., 15120.,
      16800., 18480., 20160., 7287.,  8442.,  9597.,  10752., 8190.,  9492.,
      10794., 12096., 9093.,  10542., 11991., 13440., 9996.,  11592., 13188.,
      14784., 4662.,  5712.,  6762.,  7812.,  5376.,  6552.,  7728.,  8904.,
      6090.,  7392.,  8694.,  9996.,  6804.,  8232.,  9660.,  11088., 4053.,
      4914.,  5775.,  6636.,  4662.,  5628.,  6594.,  7560.,  5271.,  6342.,
      7413.,  8484.,  5880.,  7056.,  8232.,  9408.,  3474.,  3996.,  4518.,
      5040.,  4212.,  4824.,  5436.,  6048.,  4950.,  5652.,  6354.,  7056.,
      5688.,  6480.,  7272.,  8064.,  3996.,  4608.,  5220.,  5832.,  4896.,
      5616.,  6336.,  7056.,  5796.,  6624.,  7452.,  8280.,  6696.,  7632.,
      8568.,  9504.,  6246.,  7020.,  7794.,  8568.,  7236.,  8136.,  9036.,
      9936.,  8226.,  9252.,  10278., 11304., 9216.,  10368., 11520., 12672.,
      9936.,  10944., 11952., 12960., 10944., 12096., 13248., 14400., 11952.,
      13248., 14544., 15840., 12960., 14400., 15840., 17280., 6246.,  7236.,
      8226.,  9216.,  7020.,  8136.,  9252.,  10368., 7794.,  9036.,  10278.,
      11520., 8568.,  9936.,  11304., 12672., 3996.,  4896.,  5796.,  6696.,
      4608.,  5616.,  6624.,  7632.,  5220.,  6336.,  7452.,  8568.,  5832.,
      7056.,  8280.,  9504.,  3474.,  4212.,  4950.,  5688.,  3996.,  4824.,
      5652.,  6480.,  4518.,  5436.,  6354.,  7272.,  5040.,  6048.,  7056.,
      8064.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10538., 10848., 11158., 11468., 11040., 11368., 11696., 12024., 11542.,
      11888., 12234., 12580., 12044., 12408., 12772., 13136., 12546., 12928.,
      13310., 13692., 13048., 13448., 13848., 14248., 13550., 13968., 14386.,
      14804., 14052., 14488., 14924., 15360., 14554., 15008., 15462., 15916.,
      15056., 15528., 16000., 16472., 15558., 16048., 16538., 17028., 16060.,
      16568., 17076., 17584., 16562., 17088., 17614., 18140., 17064., 17608.,
      18152., 18696., 17566., 18128., 18690., 19252., 18068., 18648., 19228.,
      19808., 18570., 19168., 19766., 20364., 19072., 19688., 20304., 20920.,
      19574., 20208., 20842., 21476., 20076., 20728., 21380., 22032., 20578.,
      21248., 21918., 22588., 21080., 21768., 22456., 23144., 21582., 22288.,
      22994., 23700., 22084., 22808., 23532., 24256., 22586., 23328., 24070.,
      24812., 23088., 23848., 24608., 25368., 23590., 24368., 25146., 25924.,
      24092., 24888., 25684., 26480., 8682.,  9056.,  9430.,  9804.,  9184.,
      9576.,  9968.,  10360., 9686.,  10096., 10506., 10916., 10188., 10616.,
      11044., 11472., 10690., 11136., 11582., 12028., 11192., 11656., 12120.,
      12584., 11694., 12176., 12658., 13140., 12196., 12696., 13196., 13696.,
      12698., 13216., 13734., 14252., 13200., 13736., 14272., 14808., 13702.,
      14256., 14810., 15364., 14204., 14776., 15348., 15920., 14706., 15296.,
      15886., 16476., 15208., 15816., 16424., 17032., 15710., 16336., 16962.,
      17588., 16212., 16856., 17500., 18144., 16714., 17376., 18038., 18700.,
      17216., 17896., 18576., 19256., 17718., 18416., 19114., 19812., 18220.,
      18936., 19652., 20368., 18722., 19456., 20190., 20924., 19224., 19976.,
      20728., 21480., 19726., 20496., 21266., 22036., 20228., 21016., 21804.,
      22592., 20730., 21536., 22342., 23148., 21232., 22056., 22880., 23704.,
      21734., 22576., 23418., 24260., 22236., 23096., 23956., 24816., 10538.,
      10848., 11158., 11468., 11040., 11368., 11696., 12024., 11542., 11888.,
      12234., 12580., 12044., 12408., 12772., 13136., 12546., 12928., 13310.,
      13692., 13048., 13448., 13848., 14248., 13550., 13968., 14386., 14804.,
      14052., 14488., 14924., 15360., 14554., 15008., 15462., 15916., 15056.,
      15528., 16000., 16472., 15558., 16048., 16538., 17028., 16060., 16568.,
      17076., 17584., 16562., 17088., 17614., 18140., 17064., 17608., 18152.,
      18696., 17566., 18128., 18690., 19252., 18068., 18648., 19228., 19808.,
      18570., 19168., 19766., 20364., 19072., 19688., 20304., 20920., 19574.,
      20208., 20842., 21476., 20076., 20728., 21380., 22032., 20578., 21248.,
      21918., 22588., 21080., 21768., 22456., 23144., 21582., 22288., 22994.,
      23700., 22084., 22808., 23532., 24256., 22586., 23328., 24070., 24812.,
      23088., 23848., 24608., 25368., 23590., 24368., 25146., 25924., 24092.,
      24888., 25684., 26480., 8682.,  9056.,  9430.,  9804.,  9184.,  9576.,
      9968.,  10360., 9686.,  10096., 10506., 10916., 10188., 10616., 11044.,
      11472., 10690., 11136., 11582., 12028., 11192., 11656., 12120., 12584.,
      11694., 12176., 12658., 13140., 12196., 12696., 13196., 13696., 12698.,
      13216., 13734., 14252., 13200., 13736., 14272., 14808., 13702., 14256.,
      14810., 15364., 14204., 14776., 15348., 15920., 14706., 15296., 15886.,
      16476., 15208., 15816., 16424., 17032., 15710., 16336., 16962., 17588.,
      16212., 16856., 17500., 18144., 16714., 17376., 18038., 18700., 17216.,
      17896., 18576., 19256., 17718., 18416., 19114., 19812., 18220., 18936.,
      19652., 20368., 18722., 19456., 20190., 20924., 19224., 19976., 20728.,
      21480., 19726., 20496., 21266., 22036., 20228., 21016., 21804., 22592.,
      20730., 21536., 22342., 23148., 21232., 22056., 22880., 23704., 21734.,
      22576., 23418., 24260., 22236., 23096., 23956., 24816., 10538., 10848.,
      11158., 11468., 11040., 11368., 11696., 12024., 11542., 11888., 12234.,
      12580., 12044., 12408., 12772., 13136., 12546., 12928., 13310., 13692.,
      13048., 13448., 13848., 14248., 13550., 13968., 14386., 14804., 14052.,
      14488., 14924., 15360., 14554., 15008., 15462., 15916., 15056., 15528.,
      16000., 16472., 15558., 16048., 16538., 17028., 16060., 16568., 17076.,
      17584., 16562., 17088., 17614., 18140., 17064., 17608., 18152., 18696.,
      17566., 18128., 18690., 19252., 18068., 18648., 19228., 19808., 18570.,
      19168., 19766., 20364., 19072., 19688., 20304., 20920., 19574., 20208.,
      20842., 21476., 20076., 20728., 21380., 22032., 20578., 21248., 21918.,
      22588., 21080., 21768., 22456., 23144., 21582., 22288., 22994., 23700.,
      22084., 22808., 23532., 24256., 22586., 23328., 24070., 24812., 23088.,
      23848., 24608., 25368., 23590., 24368., 25146., 25924., 24092., 24888.,
      25684., 26480., 8682.,  9056.,  9430.,  9804.,  9184.,  9576.,  9968.,
      10360., 9686.,  10096., 10506., 10916., 10188., 10616., 11044., 11472.,
      10690., 11136., 11582., 12028., 11192., 11656., 12120., 12584., 11694.,
      12176., 12658., 13140., 12196., 12696., 13196., 13696., 12698., 13216.,
      13734., 14252., 13200., 13736., 14272., 14808., 13702., 14256., 14810.,
      15364., 14204., 14776., 15348., 15920., 14706., 15296., 15886., 16476.,
      15208., 15816., 16424., 17032., 15710., 16336., 16962., 17588., 16212.,
      16856., 17500., 18144., 16714., 17376., 18038., 18700., 17216., 17896.,
      18576., 19256., 17718., 18416., 19114., 19812., 18220., 18936., 19652.,
      20368., 18722., 19456., 20190., 20924., 19224., 19976., 20728., 21480.,
      19726., 20496., 21266., 22036., 20228., 21016., 21804., 22592., 20730.,
      21536., 22342., 23148., 21232., 22056., 22880., 23704., 21734., 22576.,
      23418., 24260., 22236., 23096., 23956., 24816., 10538., 10848., 11158.,
      11468., 11040., 11368., 11696., 12024., 11542., 11888., 12234., 12580.,
      12044., 12408., 12772., 13136., 12546., 12928., 13310., 13692., 13048.,
      13448., 13848., 14248., 13550., 13968., 14386., 14804., 14052., 14488.,
      14924., 15360., 14554., 15008., 15462., 15916., 15056., 15528., 16000.,
      16472., 15558., 16048., 16538., 17028., 16060., 16568., 17076., 17584.,
      16562., 17088., 17614., 18140., 17064., 17608., 18152., 18696., 17566.,
      18128., 18690., 19252., 18068., 18648., 19228., 19808., 18570., 19168.,
      19766., 20364., 19072., 19688., 20304., 20920., 19574., 20208., 20842.,
      21476., 20076., 20728., 21380., 22032., 20578., 21248., 21918., 22588.,
      21080., 21768., 22456., 23144., 21582., 22288., 22994., 23700., 22084.,
      22808., 23532., 24256., 22586., 23328., 24070., 24812., 23088., 23848.,
      24608., 25368., 23590., 24368., 25146., 25924., 24092., 24888., 25684.,
      26480.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8306.,  8832.,  9352.,  10184., 8760.,  7444.,  6286.,  8384.,  10298.,
      12488., 15221., 14648., 13766., 10724., 9352.,  10472., 11680., 13128.,
      11808., 10680., 9528.,  11896., 14965., 18376., 22454., 18376., 14965.,
      11896., 9528.,  10680., 11808., 13128., 11680., 10472., 9352.,  10724.,
      13766., 14648., 15221., 12488., 10298., 8384.,  6286.,  7444.,  8760.,
      10184., 9352.,  8832.,  8306.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21906., 22284., 22662., 23040., 23418., 23796., 24174., 25308., 25686.,
      26064., 26442., 26820., 27198., 27576., 28710., 29088., 29466., 29844.,
      30222., 30600., 30978., 29808., 28010., 26340., 26718., 27096., 27474.,
      27852., 27066., 25652., 24366., 24744., 25122., 25500., 25878., 25476.,
      24446., 23544., 23922., 24300., 24678., 25056., 26190., 26568., 26946.,
      27324., 27702., 28080., 28458.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7136.,  8020.,  7591.,  8608.,  8432.,  9584.,  9767.,  11072., 8896.,
      10048., 8083.,  9080.,  7332.,  8172.,  8015.,  9088.,  9172.,  10420.,
      10652., 12080., 12701., 14314., 12084., 13520., 11398., 12652., 8749.,
      9816.,  8432.,  9584.,  9996.,  11344., 12112., 13664., 14764., 16528.,
      14336., 15904., 11644., 13024., 9376.,  10560., 10335., 11712., 12629.,
      14234., 15372., 17200., 18862., 20908., 15332., 17152., 12571., 14170.,
      10201., 11568., 10256., 11552., 12692., 14192., 15808., 17504., 15812.,
      17696., 12832., 14496., 10612., 12064., 8832.,  10064., 8747.,  9816.,
      11398., 12652., 12124., 13568., 12723., 14346., 10724., 12160., 9336.,
      10596., 8297.,  9376.,  8596.,  9548.,  9157.,  10264., 9776.,  11040.,
      10321., 11728., 8832.,  10064., 8017.,  9088.,  7448.,  8356.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6704., 7076., 7081., 7480., 7458., 7884., 7835., 8288., 7284., 7732.,
      6797., 7240., 6374., 6812., 7505., 8024., 7210., 7724., 6979., 7488.,
      6268., 6740., 5429., 5864., 4718., 5116., 4487., 4880., 5618., 6092.,
      5515., 5984., 5476., 5940., 5149., 5576., 5238., 5660., 5391., 5808.,
      5768., 6212., 6803., 7296., 6860., 7316., 6021., 6440., 6078., 6460.,
      6359., 6736., 6704., 7076., 7081., 7480., 7284., 7732., 6797., 7240.,
      6374., 6812., 6751., 7216., 7128., 7620., 7505., 8024., 7210., 7724.,
      5429., 5864., 4718., 5116., 4487., 4880., 4864., 5284., 5241., 5688.,
      5618., 6092., 5515., 5984., 5238., 5660., 5391., 5808., 5768., 6212.,
      6145., 6616., 6522., 7020., 6803., 7296., 6860., 7316.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5756.,  6640.,  7524.,  8408.,  6949.,  7966.,  8983.,  10000., 8864.,
      10016., 11168., 12320., 8949.,  10254., 11559., 12864., 7616.,  8768.,
      9920.,  11072., 6817.,  7814.,  8811.,  9808.,  6272.,  7112.,  7952.,
      8792.,  7357.,  8430.,  9503.,  10576., 9464.,  10712., 11960., 13208.,
      9796.,  11224., 12652., 14080., 10733., 12346., 13959., 15572., 9964.,
      11400., 12836., 14272., 9446.,  10700., 11954., 13208., 7295.,  8362.,
      9429.,  10496., 8864.,  10016., 11168., 12320., 9332.,  10680., 12028.,
      13376., 10384., 11936., 13488., 15040., 12116., 13880., 15644., 17408.,
      11744., 13312., 14880., 16448., 9524.,  10904., 12284., 13664., 7904.,
      9088.,  10272., 11456., 9373.,  10750., 12127., 13504., 10597., 12202.,
      13807., 15412., 12500., 14328., 16156., 17984., 15518., 17564., 19610.,
      21656., 12556., 14376., 16196., 18016., 10647., 12246., 13845., 15444.,
      9467.,  10834., 12201., 13568., 8656.,  9952.,  11248., 12544., 10348.,
      11848., 13348., 14848., 13024., 14720., 16416., 18112., 12940., 14824.,
      16708., 18592., 10944., 12608., 14272., 15936., 9948.,  11400., 12852.,
      14304., 9456.,  10688., 11920., 13152., 7305.,  8374.,  9443.,  10512.,
      9446.,  10700., 11954., 13208., 9908.,  11352., 12796., 14240., 10799.,
      12422., 14045., 15668., 9932.,  11368., 12804., 14240., 9556.,  10816.,
      12076., 13336., 7467.,  8546.,  9625.,  10704., 7280.,  8232.,  9184.,
      10136., 7559.,  8666.,  9773.,  10880., 8368.,  9632.,  10896., 12160.,
      9667.,  11074., 12481., 13888., 9456.,  10688., 11920., 13152., 7427.,
      8498.,  9569.,  10640., 6100.,  7008.,  7916.,  8824.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5612., 5984., 6356., 6728., 5987., 6386., 6785., 7184., 6362., 6788.,
      7214., 7640., 6737., 7190., 7643., 8096., 6312., 6760., 7208., 7656.,
      6015., 6458., 6901., 7344., 5846., 6284., 6722., 7160., 6971., 7490.,
      8009., 8528., 7058., 7572., 8086., 8600., 7273., 7782., 8291., 8800.,
      7584., 8056., 8528., 9000., 6615., 7050., 7485., 7920., 5902., 6300.,
      6698., 7096., 6117., 6510., 6903., 7296., 7242., 7716., 8190., 8664.,
      6689., 7158., 7627., 8096., 6264., 6728., 7192., 7656., 5295., 5722.,
      6149., 6576., 5126., 5548., 5970., 6392., 5085., 5502., 5919., 6336.,
      5460., 5904., 6348., 6792., 6425., 6918., 7411., 7904., 6224., 6680.,
      7136., 7592., 5255., 5674., 6093., 6512., 5054., 5436., 5818., 6200.,
      5269., 5646., 6023., 6400., 5612., 5984., 6356., 6728., 5987., 6386.,
      6785., 7184., 6312., 6760., 7208., 7656., 6015., 6458., 6901., 7344.,
      5846., 6284., 6722., 7160., 6221., 6686., 7151., 7616., 6596., 7088.,
      7580., 8072., 6971., 7490., 8009., 8528., 7058., 7572., 8086., 8600.,
      6615., 7050., 7485., 7920., 5902., 6300., 6698., 7096., 6117., 6510.,
      6903., 7296., 6492., 6912., 7332., 7752., 6867., 7314., 7761., 8208.,
      7242., 7716., 8190., 8664., 6689., 7158., 7627., 8096., 5126., 5548.,
      5970., 6392., 5085., 5502., 5919., 6336., 5460., 5904., 6348., 6792.,
      5835., 6306., 6777., 7248., 6210., 6708., 7206., 7704., 6425., 6918.,
      7411., 7904., 6224., 6680., 7136., 7592.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7448.,  8356.,  8017.,  9088.,  8832.,  10064., 10321., 11728., 9776.,
      11040., 9157.,  10264., 8596.,  9548.,  8297.,  9376.,  9336.,  10596.,
      10724., 12160., 12723., 14346., 12124., 13568., 11398., 12652., 8747.,
      9816.,  8832.,  10064., 10612., 12064., 12832., 14496., 15812., 17696.,
      15808., 17504., 12692., 14192., 10256., 11552., 10201., 11568., 12571.,
      14170., 15332., 17152., 18862., 20908., 15372., 17200., 12629., 14234.,
      10335., 11712., 9376.,  10560., 11644., 13024., 14336., 15904., 14764.,
      16528., 12112., 13664., 9996.,  11344., 8432.,  9584.,  8749.,  9816.,
      11398., 12652., 12084., 13520., 12701., 14314., 10652., 12080., 9172.,
      10420., 8015.,  9088.,  7332.,  8172.,  8083.,  9080.,  8896.,  10048.,
      9767.,  11072., 8432.,  9584.,  7591.,  8608.,  7136.,  8020.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10794., 11172., 11550., 11928., 12306., 12684., 13062., 13440., 12858.,
      13236., 12718., 13096., 12642., 13020., 14910., 15288., 13938., 14316.,
      13030., 13408., 11610., 11988., 11086., 11464., 10690., 11068., 10806.,
      11184., 13074., 13452., 12294., 12672., 11578., 11956., 10542., 10920.,
      10978., 11356., 11478., 11856., 12234., 12612., 13350., 13728., 11674.,
      12052., 10126., 10504., 9474.,  9852.,  10102., 10480., 10794., 11172.,
      11550., 11928., 12858., 13236., 12718., 13096., 12642., 13020., 13398.,
      13776., 14154., 14532., 14910., 15288., 13938., 14316., 11086., 11464.,
      10690., 11068., 10806., 11184., 11562., 11940., 12318., 12696., 13074.,
      13452., 12294., 12672., 10978., 11356., 11478., 11856., 12234., 12612.,
      12990., 13368., 13746., 14124., 13350., 13728., 11674., 12052.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7108.,  8016.,  7984.,  9000.,  7118.,  8146.,  8126.,  9280.,  7632.,
      8784.,  8784.,  10080., 9010.,  10306., 10318., 11776., 8784.,  9936.,
      9936.,  11232., 8606.,  9594.,  9590.,  10704., 8548.,  9368.,  9368.,
      10296., 7118.,  8146.,  8126.,  9280.,  7811.,  8992.,  8984.,  10312.,
      9240.,  10584., 10584., 12096., 11641., 13158., 13162., 14868., 11928.,
      13272., 13272., 14784., 12275., 13436., 13436., 14744., 8606.,  9590.,
      9594.,  10704., 7632.,  8784.,  8784.,  10080., 9240.,  10584., 10584.,
      12096., 11712., 13248., 13248., 14976., 15336., 17064., 17064., 19008.,
      16320., 17856., 17856., 19584., 11928., 13272., 13272., 14784., 8784.,
      9936.,  9936.,  11232., 9010.,  10306., 10318., 11776., 11641., 13158.,
      13162., 14868., 15336., 17064., 17064., 19008., 20435., 22364., 22364.,
      24536., 15336., 17064., 17064., 19008., 11641., 13162., 13158., 14868.,
      9010.,  10318., 10306., 11776., 8784.,  9936.,  9936.,  11232., 11928.,
      13272., 13272., 14784., 16320., 17856., 17856., 19584., 15336., 17064.,
      17064., 19008., 11712., 13248., 13248., 14976., 9240.,  10584., 10584.,
      12096., 7632.,  8784.,  8784.,  10080., 8606.,  9594.,  9590.,  10704.,
      12275., 13436., 13436., 14744., 11928., 13272., 13272., 14784., 11641.,
      13162., 13158., 14868., 9240.,  10584., 10584., 12096., 7811.,  8984.,
      8992.,  10312., 7118.,  8126.,  8146.,  9280.,  8548.,  9368.,  9368.,
      10296., 8606.,  9590.,  9594.,  10704., 8784.,  9936.,  9936.,  11232.,
      9010.,  10318., 10306., 11776., 7632.,  8784.,  8784.,  10080., 7118.,
      8126.,  8146.,  9280.,  7108.,  7984.,  8016.,  9000.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20871., 21588., 21600., 22344., 22329., 23100., 23058., 23856., 23787.,
      24612., 24516., 25368., 25245., 26124., 25974., 26880., 24847., 25716.,
      25576., 26472., 24577., 25436., 25306., 26192., 24435., 25284., 25164.,
      26040., 28809., 29820., 29538., 30576., 26875., 27876., 27604., 28632.,
      25069., 26060., 25798., 26816., 22303., 23220., 23032., 23976., 21329.,
      22172., 22058., 22928., 20611., 21380., 21340., 22136., 20853., 21612.,
      21582., 22368., 25227., 26148., 25956., 26904., 23677., 24588., 24406.,
      25344., 22255., 23156., 22984., 23912., 20257., 21084., 20986., 21840.,
      21139., 21956., 21868., 22712., 22149., 22956., 22878., 23712., 23607.,
      24468., 24336., 25224., 25741., 26700., 26470., 27456., 22463., 23348.,
      23192., 24104., 19441., 20252., 20170., 21008., 18211., 18948., 18940.,
      19704., 19477., 20204., 20206., 20960., 20871., 21588., 21600., 22344.,
      22329., 23100., 23058., 23856., 24847., 25716., 25576., 26472., 24577.,
      25436., 25306., 26192., 24435., 25284., 25164., 26040., 25893., 26796.,
      26622., 27552., 27351., 28308., 28080., 29064., 28809., 29820., 29538.,
      30576., 26875., 27876., 27604., 28632., 21329., 22172., 22058., 22928.,
      20611., 21380., 21340., 22136., 20853., 21612., 21582., 22368., 22311.,
      23124., 23040., 23880., 23769., 24636., 24498., 25392., 25227., 26148.,
      25956., 26904., 23677., 24588., 24406., 25344., 21139., 21956., 21868.,
      22712., 22149., 22956., 22878., 23712., 23607., 24468., 24336., 25224.,
      25065., 25980., 25794., 26736., 26523., 27492., 27252., 28248., 25741.,
      26700., 26470., 27456., 22463., 23348., 23192., 24104.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5596.,  6504.,  7412.,  8320.,  6344.,  7360.,  8376.,  9392.,  6952.,
      7980.,  9008.,  10036., 7834.,  8988.,  10142., 11296., 9504.,  10656.,
      11808., 12960., 10512., 11808., 13104., 14400., 8708.,  10004., 11300.,
      12596., 9834.,  11292., 12750., 14208., 7200.,  8352.,  9504.,  10656.,
      8208.,  9504.,  10800., 12096., 6624.,  7612.,  8600.,  9588.,  7506.,
      8620.,  9734.,  10848., 6820.,  7640.,  8460.,  9280.,  7568.,  8496.,
      9424.,  10352., 6952.,  7980.,  9008.,  10036., 7834.,  8988.,  10142.,
      11296., 9817.,  10998., 12179., 13360., 10848., 12176., 13504., 14832.,
      9072.,  10416., 11760., 13104., 10248., 11760., 13272., 14784., 9477.,
      10994., 12511., 14028., 10794., 12500., 14206., 15912., 9072.,  10416.,
      11760., 13104., 10248., 11760., 13272., 14784., 9565.,  10726., 11887.,
      13048., 10588., 11896., 13204., 14512., 6612.,  7596.,  8580.,  9564.,
      7486.,  8596.,  9706.,  10816., 9504.,  10656., 11808., 12960., 10512.,
      11808., 13104., 14400., 9072.,  10416., 11760., 13104., 10248., 11760.,
      13272., 14784., 9600.,  11136., 12672., 14208., 10944., 12672., 14400.,
      16128., 11664., 13392., 15120., 16848., 13176., 15120., 17064., 19008.,
      12672., 14208., 15744., 17280., 14016., 15744., 17472., 19200., 9072.,
      10416., 11760., 13104., 10248., 11760., 13272., 14784., 7200.,  8352.,
      9504.,  10656., 8208.,  9504.,  10800., 12096., 8708.,  10004., 11300.,
      12596., 9834.,  11292., 12750., 14208., 9477.,  10994., 12511., 14028.,
      10794., 12500., 14206., 15912., 11664., 13392., 15120., 16848., 13176.,
      15120., 17064., 19008., 15901., 17830., 19759., 21688., 17596., 19768.,
      21940., 24112., 11664., 13392., 15120., 16848., 13176., 15120., 17064.,
      19008., 9521.,  11042., 12563., 14084., 10846., 12556., 14266., 15976.,
      8856.,  10164., 11472., 12780., 9990.,  11460., 12930., 14400., 7200.,
      8352.,  9504.,  10656., 8208.,  9504.,  10800., 12096., 9072.,  10416.,
      11760., 13104., 10248., 11760., 13272., 14784., 12672., 14208., 15744.,
      17280., 14016., 15744., 17472., 19200., 11664., 13392., 15120., 16848.,
      13176., 15120., 17064., 19008., 9600.,  11136., 12672., 14208., 10944.,
      12672., 14400., 16128., 9072.,  10416., 11760., 13104., 10248., 11760.,
      13272., 14784., 9504.,  10656., 11808., 12960., 10512., 11808., 13104.,
      14400., 6624.,  7612.,  8600.,  9588.,  7506.,  8620.,  9734.,  10848.,
      9565.,  10726., 11887., 13048., 10588., 11896., 13204., 14512., 9072.,
      10416., 11760., 13104., 10248., 11760., 13272., 14784., 9521.,  11042.,
      12563., 14084., 10846., 12556., 14266., 15976., 9072.,  10416., 11760.,
      13104., 10248., 11760., 13272., 14784., 9649.,  10822., 11995., 13168.,
      10680., 12000., 13320., 14640., 6876.,  7884.,  8892.,  9900.,  7766.,
      8900.,  10034., 11168., 6820.,  7640.,  8460.,  9280.,  7568.,  8496.,
      9424.,  10352., 6612.,  7596.,  8580.,  9564.,  7486.,  8596.,  9706.,
      10816., 7200.,  8352.,  9504.,  10656., 8208.,  9504.,  10800., 12096.,
      8856.,  10164., 11472., 12780., 9990.,  11460., 12930., 14400., 9504.,
      10656., 11808., 12960., 10512., 11808., 13104., 14400., 6876.,  7884.,
      8892.,  9900.,  7766.,  8900.,  10034., 11168., 5676.,  6552.,  7428.,
      8304.,  6440.,  7424.,  8408.,  9392.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5729., 6062., 6395., 6728., 6104., 6464., 6824., 7184., 6479., 6866.,
      7253., 7640., 6854., 7268., 7682., 8096., 7229., 7670., 8111., 8552.,
      7604., 8072., 8540., 9008., 7051., 7514., 7977., 8440., 7426., 7916.,
      8406., 8896., 6201., 6654., 7107., 7560., 6576., 7056., 7536., 8016.,
      4935., 5346., 5757., 6168., 5310., 5748., 6186., 6624., 4597., 4998.,
      5399., 5800., 4972., 5400., 5828., 6256., 6431., 6962., 7493., 8024.,
      6806., 7364., 7922., 8480., 6893., 7446., 7999., 8552., 7268., 7848.,
      8428., 9008., 7323., 7866., 8409., 8952., 7698., 8268., 8838., 9408.,
      7433., 7902., 8371., 8840., 7808., 8304., 8800., 9296., 5495., 5890.,
      6285., 6680., 5870., 6292., 6714., 7136., 4581., 4902., 5223., 5544.,
      4956., 5304., 5652., 6000., 5011., 5322., 5633., 5944., 5386., 5724.,
      6062., 6400., 7229., 7670., 8111., 8552., 7604., 8072., 8540., 9008.,
      7051., 7514., 7977., 8440., 7426., 7916., 8406., 8896., 6201., 6654.,
      7107., 7560., 6576., 7056., 7536., 8016., 4935., 5346., 5757., 6168.,
      5310., 5748., 6186., 6624., 4597., 4998., 5399., 5800., 4972., 5400.,
      5828., 6256., 4931., 5354., 5777., 6200., 5306., 5756., 6206., 6656.,
      5681., 6158., 6635., 7112., 6056., 6560., 7064., 7568., 7323., 7866.,
      8409., 8952., 7698., 8268., 8838., 9408., 7433., 7902., 8371., 8840.,
      7808., 8304., 8800., 9296., 5495., 5890., 6285., 6680., 5870., 6292.,
      6714., 7136., 4581., 4902., 5223., 5544., 4956., 5304., 5652., 6000.,
      5011., 5322., 5633., 5944., 5386., 5724., 6062., 6400., 5729., 6062.,
      6395., 6728., 6104., 6464., 6824., 7184., 6479., 6866., 7253., 7640.,
      6854., 7268., 7682., 8096., 6201., 6654., 7107., 7560., 6576., 7056.,
      7536., 8016., 4935., 5346., 5757., 6168., 5310., 5748., 6186., 6624.,
      4597., 4998., 5399., 5800., 4972., 5400., 5828., 6256., 4931., 5354.,
      5777., 6200., 5306., 5756., 6206., 6656., 5681., 6158., 6635., 7112.,
      6056., 6560., 7064., 7568., 6431., 6962., 7493., 8024., 6806., 7364.,
      7922., 8480., 6893., 7446., 7999., 8552., 7268., 7848., 8428., 9008.,
      5495., 5890., 6285., 6680., 5870., 6292., 6714., 7136., 4581., 4902.,
      5223., 5544., 4956., 5304., 5652., 6000., 5011., 5322., 5633., 5944.,
      5386., 5724., 6062., 6400., 5729., 6062., 6395., 6728., 6104., 6464.,
      6824., 7184., 6479., 6866., 7253., 7640., 6854., 7268., 7682., 8096.,
      7229., 7670., 8111., 8552., 7604., 8072., 8540., 9008., 7051., 7514.,
      7977., 8440., 7426., 7916., 8406., 8896., 4597., 4998., 5399., 5800.,
      4972., 5400., 5828., 6256., 4931., 5354., 5777., 6200., 5306., 5756.,
      6206., 6656., 5681., 6158., 6635., 7112., 6056., 6560., 7064., 7568.,
      6431., 6962., 7493., 8024., 6806., 7364., 7922., 8480., 6893., 7446.,
      7999., 8552., 7268., 7848., 8428., 9008., 7323., 7866., 8409., 8952.,
      7698., 8268., 8838., 9408., 7433., 7902., 8371., 8840., 7808., 8304.,
      8800., 9296.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6100.,  7008.,  7916.,  8824.,  7427.,  8498.,  9569.,  10640., 9456.,
      10688., 11920., 13152., 9667.,  11074., 12481., 13888., 8368.,  9632.,
      10896., 12160., 7559.,  8666.,  9773.,  10880., 7280.,  8232.,  9184.,
      10136., 7467.,  8546.,  9625.,  10704., 9556.,  10816., 12076., 13336.,
      9932.,  11368., 12804., 14240., 10799., 12422., 14045., 15668., 9908.,
      11352., 12796., 14240., 9446.,  10700., 11954., 13208., 7305.,  8374.,
      9443.,  10512., 9456.,  10688., 11920., 13152., 9948.,  11400., 12852.,
      14304., 10944., 12608., 14272., 15936., 12940., 14824., 16708., 18592.,
      13024., 14720., 16416., 18112., 10348., 11848., 13348., 14848., 8656.,
      9952.,  11248., 12544., 9467.,  10834., 12201., 13568., 10647., 12246.,
      13845., 15444., 12556., 14376., 16196., 18016., 15518., 17564., 19610.,
      21656., 12500., 14328., 16156., 17984., 10597., 12202., 13807., 15412.,
      9373.,  10750., 12127., 13504., 7904.,  9088.,  10272., 11456., 9524.,
      10904., 12284., 13664., 11744., 13312., 14880., 16448., 12116., 13880.,
      15644., 17408., 10384., 11936., 13488., 15040., 9332.,  10680., 12028.,
      13376., 8864.,  10016., 11168., 12320., 7295.,  8362.,  9429.,  10496.,
      9446.,  10700., 11954., 13208., 9964.,  11400., 12836., 14272., 10733.,
      12346., 13959., 15572., 9796.,  11224., 12652., 14080., 9464.,  10712.,
      11960., 13208., 7357.,  8430.,  9503.,  10576., 6272.,  7112.,  7952.,
      8792.,  6817.,  7814.,  8811.,  9808.,  7616.,  8768.,  9920.,  11072.,
      8949.,  10254., 11559., 12864., 8864.,  10016., 11168., 12320., 6949.,
      7966.,  8983.,  10000., 5756.,  6640.,  7524.,  8408.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21210., 21588., 21966., 22344., 22722., 23100., 23478., 23856., 24234.,
      24612., 24990., 25368., 25746., 26124., 26502., 26880., 25338., 25716.,
      26094., 26472., 25058., 25436., 25814., 26192., 24906., 25284., 25662.,
      26040., 29442., 29820., 30198., 30576., 27498., 27876., 28254., 28632.,
      25682., 26060., 26438., 26816., 22842., 23220., 23598., 23976., 21794.,
      22172., 22550., 22928., 21002., 21380., 21758., 22136., 21234., 21612.,
      21990., 22368., 25770., 26148., 26526., 26904., 24210., 24588., 24966.,
      25344., 22778., 23156., 23534., 23912., 20706., 21084., 21462., 21840.,
      21578., 21956., 22334., 22712., 22578., 22956., 23334., 23712., 24090.,
      24468., 24846., 25224., 26322., 26700., 27078., 27456., 22970., 23348.,
      23726., 24104., 19874., 20252., 20630., 21008., 18570., 18948., 19326.,
      19704., 19826., 20204., 20582., 20960., 21210., 21588., 21966., 22344.,
      22722., 23100., 23478., 23856., 25338., 25716., 26094., 26472., 25058.,
      25436., 25814., 26192., 24906., 25284., 25662., 26040., 26418., 26796.,
      27174., 27552., 27930., 28308., 28686., 29064., 29442., 29820., 30198.,
      30576., 27498., 27876., 28254., 28632., 21794., 22172., 22550., 22928.,
      21002., 21380., 21758., 22136., 21234., 21612., 21990., 22368., 22746.,
      23124., 23502., 23880., 24258., 24636., 25014., 25392., 25770., 26148.,
      26526., 26904., 24210., 24588., 24966., 25344., 21578., 21956., 22334.,
      22712., 22578., 22956., 23334., 23712., 24090., 24468., 24846., 25224.,
      25602., 25980., 26358., 26736., 27114., 27492., 27870., 28248., 26322.,
      26700., 27078., 27456., 22970., 23348., 23726., 24104.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5676.,  6440.,  6552.,  7424.,  7428.,  8408.,  8304.,  9392.,  6876.,
      7766.,  7884.,  8900.,  8892.,  10034., 9900.,  11168., 9504.,  10512.,
      10656., 11808., 11808., 13104., 12960., 14400., 8856.,  9990.,  10164.,
      11460., 11472., 12930., 12780., 14400., 7200.,  8208.,  8352.,  9504.,
      9504.,  10800., 10656., 12096., 6612.,  7486.,  7596.,  8596.,  8580.,
      9706.,  9564.,  10816., 6820.,  7568.,  7640.,  8496.,  8460.,  9424.,
      9280.,  10352., 6876.,  7766.,  7884.,  8900.,  8892.,  10034., 9900.,
      11168., 9649.,  10680., 10822., 12000., 11995., 13320., 13168., 14640.,
      9072.,  10248., 10416., 11760., 11760., 13272., 13104., 14784., 9521.,
      10846., 11042., 12556., 12563., 14266., 14084., 15976., 9072.,  10248.,
      10416., 11760., 11760., 13272., 13104., 14784., 9565.,  10588., 10726.,
      11896., 11887., 13204., 13048., 14512., 6624.,  7506.,  7612.,  8620.,
      8600.,  9734.,  9588.,  10848., 9504.,  10512., 10656., 11808., 11808.,
      13104., 12960., 14400., 9072.,  10248., 10416., 11760., 11760., 13272.,
      13104., 14784., 9600.,  10944., 11136., 12672., 12672., 14400., 14208.,
      16128., 11664., 13176., 13392., 15120., 15120., 17064., 16848., 19008.,
      12672., 14016., 14208., 15744., 15744., 17472., 17280., 19200., 9072.,
      10248., 10416., 11760., 11760., 13272., 13104., 14784., 7200.,  8208.,
      8352.,  9504.,  9504.,  10800., 10656., 12096., 8856.,  9990.,  10164.,
      11460., 11472., 12930., 12780., 14400., 9521.,  10846., 11042., 12556.,
      12563., 14266., 14084., 15976., 11664., 13176., 13392., 15120., 15120.,
      17064., 16848., 19008., 15901., 17596., 17830., 19768., 19759., 21940.,
      21688., 24112., 11664., 13176., 13392., 15120., 15120., 17064., 16848.,
      19008., 9477.,  10794., 10994., 12500., 12511., 14206., 14028., 15912.,
      8708.,  9834.,  10004., 11292., 11300., 12750., 12596., 14208., 7200.,
      8208.,  8352.,  9504.,  9504.,  10800., 10656., 12096., 9072.,  10248.,
      10416., 11760., 11760., 13272., 13104., 14784., 12672., 14016., 14208.,
      15744., 15744., 17472., 17280., 19200., 11664., 13176., 13392., 15120.,
      15120., 17064., 16848., 19008., 9600.,  10944., 11136., 12672., 12672.,
      14400., 14208., 16128., 9072.,  10248., 10416., 11760., 11760., 13272.,
      13104., 14784., 9504.,  10512., 10656., 11808., 11808., 13104., 12960.,
      14400., 6612.,  7486.,  7596.,  8596.,  8580.,  9706.,  9564.,  10816.,
      9565.,  10588., 10726., 11896., 11887., 13204., 13048., 14512., 9072.,
      10248., 10416., 11760., 11760., 13272., 13104., 14784., 9477.,  10794.,
      10994., 12500., 12511., 14206., 14028., 15912., 9072.,  10248., 10416.,
      11760., 11760., 13272., 13104., 14784., 9817.,  10848., 10998., 12176.,
      12179., 13504., 13360., 14832., 6952.,  7834.,  7980.,  8988.,  9008.,
      10142., 10036., 11296., 6820.,  7568.,  7640.,  8496.,  8460.,  9424.,
      9280.,  10352., 6624.,  7506.,  7612.,  8620.,  8600.,  9734.,  9588.,
      10848., 7200.,  8208.,  8352.,  9504.,  9504.,  10800., 10656., 12096.,
      8708.,  9834.,  10004., 11292., 11300., 12750., 12596., 14208., 9504.,
      10512., 10656., 11808., 11808., 13104., 12960., 14400., 6952.,  7834.,
      7980.,  8988.,  9008.,  10142., 10036., 11296., 5596.,  6344.,  6504.,
      7360.,  7412.,  8376.,  8320.,  9392.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5237., 5588., 5614., 5992., 5991., 6396., 6368., 6800., 6745., 7204.,
      7122., 7608., 7499., 8012., 7876., 8416., 7581., 8116., 7958., 8520.,
      8335., 8924., 8712., 9328., 7905., 8452., 8282., 8856., 8659., 9260.,
      9036., 9664., 6661., 7124., 7038., 7528., 7415., 7932., 7792., 8336.,
      4169., 4516., 4546., 4920., 4923., 5324., 5300., 5728., 3181., 3444.,
      3558., 3848., 3935., 4252., 4312., 4656., 6745., 7204., 7122., 7608.,
      7499., 8012., 7876., 8416., 7581., 8116., 7958., 8520., 8335., 8924.,
      8712., 9328., 7905., 8452., 8282., 8856., 8659., 9260., 9036., 9664.,
      6661., 7124., 7038., 7528., 7415., 7932., 7792., 8336., 4169., 4516.,
      4546., 4920., 4923., 5324., 5300., 5728., 3181., 3444., 3558., 3848.,
      3935., 4252., 4312., 4656., 3761., 4036., 4138., 4440., 4515., 4844.,
      4892., 5248., 7581., 8116., 7958., 8520., 8335., 8924., 8712., 9328.,
      7905., 8452., 8282., 8856., 8659., 9260., 9036., 9664., 6661., 7124.,
      7038., 7528., 7415., 7932., 7792., 8336., 4169., 4516., 4546., 4920.,
      4923., 5324., 5300., 5728., 3181., 3444., 3558., 3848., 3935., 4252.,
      4312., 4656., 3761., 4036., 4138., 4440., 4515., 4844., 4892., 5248.,
      5237., 5588., 5614., 5992., 5991., 6396., 6368., 6800., 7905., 8452.,
      8282., 8856., 8659., 9260., 9036., 9664., 6661., 7124., 7038., 7528.,
      7415., 7932., 7792., 8336., 4169., 4516., 4546., 4920., 4923., 5324.,
      5300., 5728., 3181., 3444., 3558., 3848., 3935., 4252., 4312., 4656.,
      3761., 4036., 4138., 4440., 4515., 4844., 4892., 5248., 5237., 5588.,
      5614., 5992., 5991., 6396., 6368., 6800., 6745., 7204., 7122., 7608.,
      7499., 8012., 7876., 8416., 6661., 7124., 7038., 7528., 7415., 7932.,
      7792., 8336., 4169., 4516., 4546., 4920., 4923., 5324., 5300., 5728.,
      3181., 3444., 3558., 3848., 3935., 4252., 4312., 4656., 3761., 4036.,
      4138., 4440., 4515., 4844., 4892., 5248., 5237., 5588., 5614., 5992.,
      5991., 6396., 6368., 6800., 6745., 7204., 7122., 7608., 7499., 8012.,
      7876., 8416., 7581., 8116., 7958., 8520., 8335., 8924., 8712., 9328.,
      4169., 4516., 4546., 4920., 4923., 5324., 5300., 5728., 3181., 3444.,
      3558., 3848., 3935., 4252., 4312., 4656., 3761., 4036., 4138., 4440.,
      4515., 4844., 4892., 5248., 5237., 5588., 5614., 5992., 5991., 6396.,
      6368., 6800., 6745., 7204., 7122., 7608., 7499., 8012., 7876., 8416.,
      7581., 8116., 7958., 8520., 8335., 8924., 8712., 9328., 7905., 8452.,
      8282., 8856., 8659., 9260., 9036., 9664., 3181., 3444., 3558., 3848.,
      3935., 4252., 4312., 4656., 3761., 4036., 4138., 4440., 4515., 4844.,
      4892., 5248., 5237., 5588., 5614., 5992., 5991., 6396., 6368., 6800.,
      6745., 7204., 7122., 7608., 7499., 8012., 7876., 8416., 7581., 8116.,
      7958., 8520., 8335., 8924., 8712., 9328., 7905., 8452., 8282., 8856.,
      8659., 9260., 9036., 9664., 6661., 7124., 7038., 7528., 7415., 7932.,
      7792., 8336.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3996.,  4760.,  5524.,  6288.,  4744.,  5616.,  6488.,  7360.,  5492.,
      6472.,  7452.,  8432.,  6240.,  7328.,  8416.,  9504.,  5710.,  6600.,
      7490.,  8380.,  6592.,  7608.,  8624.,  9640.,  7474.,  8616.,  9758.,
      10900., 8356.,  9624.,  10892., 12160., 9936.,  10944., 11952., 12960.,
      10944., 12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960.,
      14400., 15840., 17280., 7250.,  8384.,  9518.,  10652., 8376.,  9672.,
      10968., 12264., 9502.,  10960., 12418., 13876., 10628., 12248., 13868.,
      15488., 5328.,  6336.,  7344.,  8352.,  6336.,  7488.,  8640.,  9792.,
      7344.,  8640.,  9936.,  11232., 8352.,  9792.,  11232., 12672., 5630.,
      6504.,  7378.,  8252.,  6512.,  7512.,  8512.,  9512.,  7394.,  8520.,
      9646.,  10772., 8276.,  9528.,  10780., 12032., 7308.,  8056.,  8804.,
      9552.,  8056.,  8912.,  9768.,  10624., 8804.,  9768.,  10732., 11696.,
      9552.,  10624., 11696., 12768., 5710.,  6600.,  7490.,  8380.,  6592.,
      7608.,  8624.,  9640.,  7474.,  8616.,  9758.,  10900., 8356.,  9624.,
      10892., 12160., 10187., 11218., 12249., 13280., 11218., 12396., 13574.,
      14752., 12249., 13574., 14899., 16224., 13280., 14752., 16224., 17696.,
      7560.,  8736.,  9912.,  11088., 8736.,  10080., 11424., 12768., 9912.,
      11424., 12936., 14448., 11088., 12768., 14448., 16128., 6965.,  8290.,
      9615.,  10940., 8282.,  9796.,  11310., 12824., 9599.,  11302., 13005.,
      14708., 10916., 12808., 14700., 16592., 7560.,  8736.,  9912.,  11088.,
      8736.,  10080., 11424., 12768., 9912.,  11424., 12936., 14448., 11088.,
      12768., 14448., 16128., 10043., 11066., 12089., 13112., 11066., 12236.,
      13406., 14576., 12089., 13406., 14723., 16040., 13112., 14576., 16040.,
      17504., 5630.,  6512.,  7394.,  8276.,  6504.,  7512.,  8520.,  9528.,
      7378.,  8512.,  9646.,  10780., 8252.,  9512.,  10772., 12032., 9936.,
      10944., 11952., 12960., 10944., 12096., 13248., 14400., 11952., 13248.,
      14544., 15840., 12960., 14400., 15840., 17280., 7560.,  8736.,  9912.,
      11088., 8736.,  10080., 11424., 12768., 9912.,  11424., 12936., 14448.,
      11088., 12768., 14448., 16128., 7104.,  8448.,  9792.,  11136., 8448.,
      9984.,  11520., 13056., 9792.,  11520., 13248., 14976., 11136., 13056.,
      14976., 16896., 9720.,  11232., 12744., 14256., 11232., 12960., 14688.,
      16416., 12744., 14688., 16632., 18576., 14256., 16416., 18576., 20736.,
      13248., 14592., 15936., 17280., 14592., 16128., 17664., 19200., 15936.,
      17664., 19392., 21120., 17280., 19200., 21120., 23040., 7560.,  8736.,
      9912.,  11088., 8736.,  10080., 11424., 12768., 9912.,  11424., 12936.,
      14448., 11088., 12768., 14448., 16128., 5328.,  6336.,  7344.,  8352.,
      6336.,  7488.,  8640.,  9792.,  7344.,  8640.,  9936.,  11232., 8352.,
      9792.,  11232., 12672., 7250.,  8384.,  9518.,  10652., 8376.,  9672.,
      10968., 12264., 9502.,  10960., 12418., 13876., 10628., 12248., 13868.,
      15488., 6965.,  8290.,  9615.,  10940., 8282.,  9796.,  11310., 12824.,
      9599.,  11302., 13005., 14708., 10916., 12808., 14700., 16592., 9720.,
      11232., 12744., 14256., 11232., 12960., 14688., 16416., 12744., 14688.,
      16632., 18576., 14256., 16416., 18576., 20736., 16667., 18362., 20057.,
      21752., 18362., 20300., 22238., 24176., 20057., 22238., 24419., 26600.,
      21752., 24176., 26600., 29024., 9720.,  11232., 12744., 14256., 11232.,
      12960., 14688., 16416., 12744., 14688., 16632., 18576., 14256., 16416.,
      18576., 20736., 6965.,  8282.,  9599.,  10916., 8290.,  9796.,  11302.,
      12808., 9615.,  11310., 13005., 14700., 10940., 12824., 14708., 16592.,
      7250.,  8376.,  9502.,  10628., 8384.,  9672.,  10960., 12248., 9518.,
      10968., 12418., 13868., 10652., 12264., 13876., 15488., 5328.,  6336.,
      7344.,  8352.,  6336.,  7488.,  8640.,  9792.,  7344.,  8640.,  9936.,
      11232., 8352.,  9792.,  11232., 12672., 7560.,  8736.,  9912.,  11088.,
      8736.,  10080., 11424., 12768., 9912.,  11424., 12936., 14448., 11088.,
      12768., 14448., 16128., 13248., 14592., 15936., 17280., 14592., 16128.,
      17664., 19200., 15936., 17664., 19392., 21120., 17280., 19200., 21120.,
      23040., 9720.,  11232., 12744., 14256., 11232., 12960., 14688., 16416.,
      12744., 14688., 16632., 18576., 14256., 16416., 18576., 20736., 7104.,
      8448.,  9792.,  11136., 8448.,  9984.,  11520., 13056., 9792.,  11520.,
      13248., 14976., 11136., 13056., 14976., 16896., 7560.,  8736.,  9912.,
      11088., 8736.,  10080., 11424., 12768., 9912.,  11424., 12936., 14448.,
      11088., 12768., 14448., 16128., 9936.,  10944., 11952., 12960., 10944.,
      12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400.,
      15840., 17280., 5630.,  6504.,  7378.,  8252.,  6512.,  7512.,  8512.,
      9512.,  7394.,  8520.,  9646.,  10772., 8276.,  9528.,  10780., 12032.,
      10043., 11066., 12089., 13112., 11066., 12236., 13406., 14576., 12089.,
      13406., 14723., 16040., 13112., 14576., 16040., 17504., 7560.,  8736.,
      9912.,  11088., 8736.,  10080., 11424., 12768., 9912.,  11424., 12936.,
      14448., 11088., 12768., 14448., 16128., 6965.,  8282.,  9599.,  10916.,
      8290.,  9796.,  11302., 12808., 9615.,  11310., 13005., 14700., 10940.,
      12824., 14708., 16592., 7560.,  8736.,  9912.,  11088., 8736.,  10080.,
      11424., 12768., 9912.,  11424., 12936., 14448., 11088., 12768., 14448.,
      16128., 10187., 11218., 12249., 13280., 11218., 12396., 13574., 14752.,
      12249., 13574., 14899., 16224., 13280., 14752., 16224., 17696., 5710.,
      6592.,  7474.,  8356.,  6600.,  7608.,  8616.,  9624.,  7490.,  8624.,
      9758.,  10892., 8380.,  9640.,  10900., 12160., 7308.,  8056.,  8804.,
      9552.,  8056.,  8912.,  9768.,  10624., 8804.,  9768.,  10732., 11696.,
      9552.,  10624., 11696., 12768., 5630.,  6512.,  7394.,  8276.,  6504.,
      7512.,  8520.,  9528.,  7378.,  8512.,  9646.,  10780., 8252.,  9512.,
      10772., 12032., 5328.,  6336.,  7344.,  8352.,  6336.,  7488.,  8640.,
      9792.,  7344.,  8640.,  9936.,  11232., 8352.,  9792.,  11232., 12672.,
      7250.,  8376.,  9502.,  10628., 8384.,  9672.,  10960., 12248., 9518.,
      10968., 12418., 13868., 10652., 12264., 13876., 15488., 9936.,  10944.,
      11952., 12960., 10944., 12096., 13248., 14400., 11952., 13248., 14544.,
      15840., 12960., 14400., 15840., 17280., 5710.,  6592.,  7474.,  8356.,
      6600.,  7608.,  8616.,  9624.,  7490.,  8624.,  9758.,  10892., 8380.,
      9640.,  10900., 12160., 3996.,  4744.,  5492.,  6240.,  4760.,  5616.,
      6472.,  7328.,  5524.,  6488.,  7452.,  8416.,  6288.,  7360.,  8432.,
      9504.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5035.,  5386.,  5737.,  6088.,  5410.,  5788.,  6166.,  6544.,  5785.,
      6190.,  6595.,  7000.,  6160.,  6592.,  7024.,  7456.,  6535.,  6994.,
      7453.,  7912.,  6910.,  7396.,  7882.,  8368.,  7285.,  7798.,  8311.,
      8824.,  7660.,  8200.,  8740.,  9280.,  7747.,  8282.,  8817.,  9352.,
      8122.,  8684.,  9246.,  9808.,  8497.,  9086.,  9675.,  10264., 8872.,
      9488.,  10104., 10720., 7999.,  8546.,  9093.,  9640.,  8374.,  8948.,
      9522.,  10096., 8749.,  9350.,  9951.,  10552., 9124.,  9752.,  10380.,
      11008., 7259.,  7722.,  8185.,  8648.,  7634.,  8124.,  8614.,  9104.,
      8009.,  8526.,  9043.,  9560.,  8384.,  8928.,  9472.,  10016., 4055.,
      4402.,  4749.,  5096.,  4430.,  4804.,  5178.,  5552.,  4805.,  5206.,
      5607.,  6008.,  5180.,  5608.,  6036.,  6464.,  2803.,  3066.,  3329.,
      3592.,  3178.,  3468.,  3758.,  4048.,  3553.,  3870.,  4187.,  4504.,
      3928.,  4272.,  4616.,  4960.,  6535.,  6994.,  7453.,  7912.,  6910.,
      7396.,  7882.,  8368.,  7285.,  7798.,  8311.,  8824.,  7660.,  8200.,
      8740.,  9280.,  7747.,  8282.,  8817.,  9352.,  8122.,  8684.,  9246.,
      9808.,  8497.,  9086.,  9675.,  10264., 8872.,  9488.,  10104., 10720.,
      7999.,  8546.,  9093.,  9640.,  8374.,  8948.,  9522.,  10096., 8749.,
      9350.,  9951.,  10552., 9124.,  9752.,  10380., 11008., 7259.,  7722.,
      8185.,  8648.,  7634.,  8124.,  8614.,  9104.,  8009.,  8526.,  9043.,
      9560.,  8384.,  8928.,  9472.,  10016., 4055.,  4402.,  4749.,  5096.,
      4430.,  4804.,  5178.,  5552.,  4805.,  5206.,  5607.,  6008.,  5180.,
      5608.,  6036.,  6464.,  2803.,  3066.,  3329.,  3592.,  3178.,  3468.,
      3758.,  4048.,  3553.,  3870.,  4187.,  4504.,  3928.,  4272.,  4616.,
      4960.,  3567.,  3842.,  4117.,  4392.,  3942.,  4244.,  4546.,  4848.,
      4317.,  4646.,  4975.,  5304.,  4692.,  5048.,  5404.,  5760.,  7747.,
      8282.,  8817.,  9352.,  8122.,  8684.,  9246.,  9808.,  8497.,  9086.,
      9675.,  10264., 8872.,  9488.,  10104., 10720., 7999.,  8546.,  9093.,
      9640.,  8374.,  8948.,  9522.,  10096., 8749.,  9350.,  9951.,  10552.,
      9124.,  9752.,  10380., 11008., 7259.,  7722.,  8185.,  8648.,  7634.,
      8124.,  8614.,  9104.,  8009.,  8526.,  9043.,  9560.,  8384.,  8928.,
      9472.,  10016., 4055.,  4402.,  4749.,  5096.,  4430.,  4804.,  5178.,
      5552.,  4805.,  5206.,  5607.,  6008.,  5180.,  5608.,  6036.,  6464.,
      2803.,  3066.,  3329.,  3592.,  3178.,  3468.,  3758.,  4048.,  3553.,
      3870.,  4187.,  4504.,  3928.,  4272.,  4616.,  4960.,  3567.,  3842.,
      4117.,  4392.,  3942.,  4244.,  4546.,  4848.,  4317.,  4646.,  4975.,
      5304.,  4692.,  5048.,  5404.,  5760.,  5035.,  5386.,  5737.,  6088.,
      5410.,  5788.,  6166.,  6544.,  5785.,  6190.,  6595.,  7000.,  6160.,
      6592.,  7024.,  7456.,  7999.,  8546.,  9093.,  9640.,  8374.,  8948.,
      9522.,  10096., 8749.,  9350.,  9951.,  10552., 9124.,  9752.,  10380.,
      11008., 7259.,  7722.,  8185.,  8648.,  7634.,  8124.,  8614.,  9104.,
      8009.,  8526.,  9043.,  9560.,  8384.,  8928.,  9472.,  10016., 4055.,
      4402.,  4749.,  5096.,  4430.,  4804.,  5178.,  5552.,  4805.,  5206.,
      5607.,  6008.,  5180.,  5608.,  6036.,  6464.,  2803.,  3066.,  3329.,
      3592.,  3178.,  3468.,  3758.,  4048.,  3553.,  3870.,  4187.,  4504.,
      3928.,  4272.,  4616.,  4960.,  3567.,  3842.,  4117.,  4392.,  3942.,
      4244.,  4546.,  4848.,  4317.,  4646.,  4975.,  5304.,  4692.,  5048.,
      5404.,  5760.,  5035.,  5386.,  5737.,  6088.,  5410.,  5788.,  6166.,
      6544.,  5785.,  6190.,  6595.,  7000.,  6160.,  6592.,  7024.,  7456.,
      6535.,  6994.,  7453.,  7912.,  6910.,  7396.,  7882.,  8368.,  7285.,
      7798.,  8311.,  8824.,  7660.,  8200.,  8740.,  9280.,  7259.,  7722.,
      8185.,  8648.,  7634.,  8124.,  8614.,  9104.,  8009.,  8526.,  9043.,
      9560.,  8384.,  8928.,  9472.,  10016., 4055.,  4402.,  4749.,  5096.,
      4430.,  4804.,  5178.,  5552.,  4805.,  5206.,  5607.,  6008.,  5180.,
      5608.,  6036.,  6464.,  2803.,  3066.,  3329.,  3592.,  3178.,  3468.,
      3758.,  4048.,  3553.,  3870.,  4187.,  4504.,  3928.,  4272.,  4616.,
      4960.,  3567.,  3842.,  4117.,  4392.,  3942.,  4244.,  4546.,  4848.,
      4317.,  4646.,  4975.,  5304.,  4692.,  5048.,  5404.,  5760.,  5035.,
      5386.,  5737.,  6088.,  5410.,  5788.,  6166.,  6544.,  5785.,  6190.,
      6595.,  7000.,  6160.,  6592.,  7024.,  7456.,  6535.,  6994.,  7453.,
      7912.,  6910.,  7396.,  7882.,  8368.,  7285.,  7798.,  8311.,  8824.,
      7660.,  8200.,  8740.,  9280.,  7747.,  8282.,  8817.,  9352.,  8122.,
      8684.,  9246.,  9808.,  8497.,  9086.,  9675.,  10264., 8872.,  9488.,
      10104., 10720., 4055.,  4402.,  4749.,  5096.,  4430.,  4804.,  5178.,
      5552.,  4805.,  5206.,  5607.,  6008.,  5180.,  5608.,  6036.,  6464.,
      2803.,  3066.,  3329.,  3592.,  3178.,  3468.,  3758.,  4048.,  3553.,
      3870.,  4187.,  4504.,  3928.,  4272.,  4616.,  4960.,  3567.,  3842.,
      4117.,  4392.,  3942.,  4244.,  4546.,  4848.,  4317.,  4646.,  4975.,
      5304.,  4692.,  5048.,  5404.,  5760.,  5035.,  5386.,  5737.,  6088.,
      5410.,  5788.,  6166.,  6544.,  5785.,  6190.,  6595.,  7000.,  6160.,
      6592.,  7024.,  7456.,  6535.,  6994.,  7453.,  7912.,  6910.,  7396.,
      7882.,  8368.,  7285.,  7798.,  8311.,  8824.,  7660.,  8200.,  8740.,
      9280.,  7747.,  8282.,  8817.,  9352.,  8122.,  8684.,  9246.,  9808.,
      8497.,  9086.,  9675.,  10264., 8872.,  9488.,  10104., 10720., 7999.,
      8546.,  9093.,  9640.,  8374.,  8948.,  9522.,  10096., 8749.,  9350.,
      9951.,  10552., 9124.,  9752.,  10380., 11008., 2803.,  3066.,  3329.,
      3592.,  3178.,  3468.,  3758.,  4048.,  3553.,  3870.,  4187.,  4504.,
      3928.,  4272.,  4616.,  4960.,  3567.,  3842.,  4117.,  4392.,  3942.,
      4244.,  4546.,  4848.,  4317.,  4646.,  4975.,  5304.,  4692.,  5048.,
      5404.,  5760.,  5035.,  5386.,  5737.,  6088.,  5410.,  5788.,  6166.,
      6544.,  5785.,  6190.,  6595.,  7000.,  6160.,  6592.,  7024.,  7456.,
      6535.,  6994.,  7453.,  7912.,  6910.,  7396.,  7882.,  8368.,  7285.,
      7798.,  8311.,  8824.,  7660.,  8200.,  8740.,  9280.,  7747.,  8282.,
      8817.,  9352.,  8122.,  8684.,  9246.,  9808.,  8497.,  9086.,  9675.,
      10264., 8872.,  9488.,  10104., 10720., 7999.,  8546.,  9093.,  9640.,
      8374.,  8948.,  9522.,  10096., 8749.,  9350.,  9951.,  10552., 9124.,
      9752.,  10380., 11008., 7259.,  7722.,  8185.,  8648.,  7634.,  8124.,
      8614.,  9104.,  8009.,  8526.,  9043.,  9560.,  8384.,  8928.,  9472.,
      10016.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11078., 13704., 13898., 14250., 11894., 9704.,  8114.,  9232.,  10820.,
      12598., 14561., 13818., 13268., 12308., 12312., 13344., 14184., 15240.,
      13416., 11808., 10392., 14058., 17084., 20900., 24951., 20900., 17084.,
      14058., 10392., 11808., 13416., 15240., 14184., 13344., 12312., 12308.,
      13268., 13818., 14561., 12598., 10820., 9232.,  8114.,  9704.,  11894.,
      14250., 13898., 13704., 11078.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21270., 20016., 18826., 19492., 20158., 20824., 21490., 20634., 19636.,
      18702., 19368., 20034., 19164., 18358., 18270., 18936., 19602., 20268.,
      20934., 20320., 19770., 20194., 20860., 21526., 22192., 22858., 22500.,
      22206., 23142., 23040., 23002., 23028., 23118., 23784., 24450., 27114.,
      27268., 27486., 25464., 23570., 22060., 20614., 23278., 23688., 24162.,
      22652., 21270., 20016., 18826.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9258.,  10332., 11400., 12640., 11524., 12900., 11818., 13348., 10138.,
      11516., 8968.,  10176., 7896.,  8964.,  10556., 11792., 11300., 12728.,
      12067., 13660., 13023., 14802., 11758., 13364., 11076., 12488., 10107.,
      11352., 10728., 12144., 12000., 13632., 13872., 15696., 15960., 18000.,
      15192., 17040., 15072., 16704., 12048., 13488., 12070., 13652., 14268.,
      16088., 17475., 19512., 20917., 23198., 17312., 19384., 14428., 16264.,
      11999., 13620., 12264., 13680., 15072., 16704., 15408., 17232., 15960.,
      18000., 13656., 15504., 12000., 13632., 10512., 11952., 10376., 11608.,
      11236., 12664., 12119., 13716., 13191., 14978., 11922., 13548., 11204.,
      12648., 10359., 11632., 7742.,  8788.,  8712.,  9920.,  10224., 11580.,
      11890., 13412., 11414., 12804., 11400., 12640., 9116.,  10204.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10306., 10860., 9970.,  10528., 9698.,  10260., 9234.,  9800.,  8834.,
      9404.,  8498.,  9072.,  8226.,  8804.,  7522.,  8116.,  6834.,  7400.,
      6274.,  6812.,  6802.,  7376.,  7330.,  7940.,  7378.,  7992.,  7490.,
      8108.,  8066.,  8700.,  8018.,  8624.,  8098.,  8676.,  8530.,  9112.,
      9026.,  9612.,  9330.,  9920.,  9698.,  10292., 11298., 11908., 10738.,
      11320., 10306., 10860., 9970.,  10528., 9698.,  10260., 9234.,  9800.,
      8834.,  9404.,  9282.,  9932.,  8338.,  8960.,  7522.,  8116.,  6834.,
      7400.,  6274.,  6812.,  6802.,  7376.,  7330.,  7940.,  7906.,  8532.,
      7954.,  8584.,  8066.,  8700.,  8018.,  8624.,  8098.,  8676.,  8530.,
      9112.,  9026.,  9612.,  10626., 11228., 10930., 11536., 11298., 11908.,
      10738., 11320., 10306., 10860., 9970.,  10528., 9698.,  10260.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7842.,  8916.,  9990.,  11064., 9464.,  10704., 11944., 13184., 9704.,
      11080., 12456., 13832., 10138., 11668., 13198., 14728., 9106.,  10484.,
      11862., 13240., 9240.,  10448., 11656., 12864., 7188.,  8256.,  9324.,
      10392., 8740.,  9976.,  11212., 12448., 9492.,  10920., 12348., 13776.,
      11373., 12966., 14559., 16152., 13451., 15230., 17009., 18788., 10710.,
      12316., 13922., 15528., 9316.,  10728., 12140., 13552., 8041.,  9286.,
      10531., 11776., 10248., 11664., 13080., 14496., 12384., 14016., 15648.,
      17280., 12864., 14688., 16512., 18336., 13560., 15600., 17640., 19680.,
      12216., 14064., 15912., 17760., 12384., 14016., 15648., 17280., 9600.,
      11040., 12480., 13920., 11166., 12748., 14330., 15912., 12028., 13848.,
      15668., 17488., 14497., 16534., 18571., 20608., 17201., 19482., 21763.,
      24044., 13928., 16000., 18072., 20144., 12332., 14168., 16004., 17840.,
      10617., 12238., 13859., 15480., 10248., 11664., 13080., 14496., 12384.,
      14016., 15648., 17280., 12864., 14688., 16512., 18336., 13560., 15600.,
      17640., 19680., 12216., 14064., 15912., 17760., 12384., 14016., 15648.,
      17280., 9600.,  11040., 12480., 13920., 8768.,  10000., 11232., 12464.,
      9620.,  11048., 12476., 13904., 11457., 13054., 14651., 16248., 13475.,
      15262., 17049., 18836., 10858., 12484., 14110., 15736., 9540.,  10984.,
      12428., 13872., 8277.,  9550.,  10823., 12096., 7494.,  8540.,  9586.,
      10632., 8984.,  10192., 11400., 12608., 9508.,  10864., 12220., 13576.,
      10178., 11700., 13222., 14744., 9278.,  10668., 12058., 13448., 9464.,
      10704., 11944., 13184., 7224.,  8312.,  9400.,  10488.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8538.,  9092.,  9646.,  10200., 8374.,  8932.,  9490.,  10048., 8338.,
      8900.,  9462.,  10024., 7918.,  8484.,  9050.,  9616.,  7626.,  8196.,
      8766.,  9336.,  7462.,  8036.,  8610.,  9184.,  7426.,  8004.,  8582.,
      9160.,  8050.,  8644.,  9238.,  9832.,  8238.,  8804.,  9370.,  9936.,
      8682.,  9220.,  9758.,  10296., 9190.,  9764.,  10338., 10912., 9698.,
      10308., 10918., 11528., 9278.,  9892.,  10506., 11120., 8986.,  9604.,
      10222., 10840., 8074.,  8708.,  9342.,  9976.,  7494.,  8100.,  8706.,
      9312.,  7170.,  7748.,  8326.,  8904.,  7518.,  8100.,  8682.,  9264.,
      7994.,  8580.,  9166.,  9752.,  8086.,  8676.,  9266.,  9856.,  8306.,
      8900.,  9494.,  10088., 9442.,  10052., 10662., 11272., 8862.,  9444.,
      10026., 10608., 8538.,  9092.,  9646.,  10200., 8374.,  8932.,  9490.,
      10048., 8338.,  8900.,  9462.,  10024., 7918.,  8484.,  9050.,  9616.,
      7626.,  8196.,  8766.,  9336.,  8442.,  9092.,  9742.,  10392., 8118.,
      8740.,  9362.,  9984.,  8050.,  8644.,  9238.,  9832.,  8238.,  8804.,
      9370.,  9936.,  8682.,  9220.,  9758.,  10296., 9190.,  9764.,  10338.,
      10912., 9698.,  10308., 10918., 11528., 8786.,  9412.,  10038., 10664.,
      8366.,  8996.,  9626.,  10256., 8074.,  8708.,  9342.,  9976.,  7494.,
      8100.,  8706.,  9312.,  7170.,  7748.,  8326.,  8904.,  7518.,  8100.,
      8682.,  9264.,  7994.,  8580.,  9166.,  9752.,  9130.,  9732.,  10334.,
      10936., 9222.,  9828.,  10434., 11040., 9442.,  10052., 10662., 11272.,
      8862.,  9444.,  10026., 10608., 8538.,  9092.,  9646.,  10200., 8374.,
      8932.,  9490.,  10048., 8338.,  8900.,  9462.,  10024.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9116.,  10204., 11400., 12640., 11414., 12804., 11890., 13412., 10224.,
      11580., 8712.,  9920.,  7742.,  8788.,  10359., 11632., 11204., 12648.,
      11922., 13548., 13191., 14978., 12119., 13716., 11236., 12664., 10376.,
      11608., 10512., 11952., 12000., 13632., 13656., 15504., 15960., 18000.,
      15408., 17232., 15072., 16704., 12264., 13680., 11999., 13620., 14428.,
      16264., 17312., 19384., 20917., 23198., 17475., 19512., 14268., 16088.,
      12070., 13652., 12048., 13488., 15072., 16704., 15192., 17040., 15960.,
      18000., 13872., 15696., 12000., 13632., 10728., 12144., 10107., 11352.,
      11076., 12488., 11758., 13364., 13023., 14802., 12067., 13660., 11300.,
      12728., 10556., 11792., 7896.,  8964.,  8968.,  10176., 10138., 11516.,
      11818., 13348., 11524., 12900., 11400., 12640., 9258.,  10332.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20818., 21484., 20230., 20896., 19706., 20372., 20014., 20680., 20386.,
      21052., 20822., 21488., 21322., 21988., 21658., 22324., 20686., 21352.,
      19842., 20508., 21174., 21840., 22506., 23172., 22302., 22968., 22162.,
      22828., 23778., 24444., 22422., 23088., 21194., 21860., 20350., 21016.,
      19570., 20236., 19622., 20288., 19738., 20404., 22378., 23044., 21534.,
      22200., 20818., 21484., 20230., 20896., 19706., 20372., 20014., 20680.,
      20386., 21052., 23986., 24652., 22758., 23424., 21658., 22324., 20686.,
      21352., 19842., 20508., 21174., 21840., 22506., 23172., 22074., 22740.,
      22894., 23560., 23778., 24444., 22422., 23088., 21194., 21860., 20350.,
      21016., 19570., 20236., 20162., 20828., 21238., 21904., 22378., 23044.,
      21534., 22200., 20818., 21484., 20230., 20896., 19706., 20372.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9202.,  10200., 10228., 11352., 12240., 13392., 13392., 14688., 11246.,
      12524., 12552., 13992., 10884., 12324., 12308., 13928., 8926.,  10240.,
      10196., 11672., 7632.,  8784.,  8784.,  10080., 6802.,  7820.,  7792.,
      8936.,  10233., 11390., 11432., 12736., 10248., 11592., 11592., 13104.,
      10287., 11780., 11814., 13496., 11066., 12750., 12734., 14628., 10271.,
      11806., 11756., 13480., 10248., 11592., 11592., 13104., 10073., 11264.,
      11222., 12560., 9144.,  10464., 10512., 12000., 10176., 11712., 11712.,
      13440., 11976., 13680., 13728., 15648., 14640., 16560., 16560., 18720.,
      15048., 16800., 16752., 18720., 16320., 17856., 17856., 19584., 12216.,
      13584., 13536., 15072., 10463., 11950., 11996., 13672., 13176., 14904.,
      14904., 16848., 17465., 19376., 19430., 21584., 22726., 24874., 24874.,
      27292., 17465., 19430., 19376., 21584., 13176., 14904., 14904., 16848.,
      10463., 11996., 11950., 13672., 12216., 13536., 13584., 15072., 16320.,
      17856., 17856., 19584., 15048., 16752., 16800., 18720., 14640., 16560.,
      16560., 18720., 11976., 13728., 13680., 15648., 10176., 11712., 11712.,
      13440., 9144.,  10512., 10464., 12000., 10073., 11222., 11264., 12560.,
      10248., 11592., 11592., 13104., 10271., 11756., 11806., 13480., 11066.,
      12734., 12750., 14628., 10287., 11814., 11780., 13496., 10248., 11592.,
      11592., 13104., 10233., 11432., 11390., 12736., 6802.,  7792.,  7820.,
      8936.,  7632.,  8784.,  8784.,  10080., 8926.,  10196., 10240., 11672.,
      10884., 12308., 12324., 13928., 11246., 12552., 12524., 13992., 12240.,
      13392., 13392., 14688., 9202.,  10228., 10200., 11352.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8820.,  9380.,  9348.,  9944.,  8660.,  9228.,  9188.,  9792.,  8628.,
      9204.,  9156.,  9768.,  8212.,  8796.,  8740.,  9360.,  7924.,  8516.,
      8452.,  9080.,  7540.,  8108.,  8068.,  8672.,  7348.,  7892.,  7876.,
      8456.,  8244.,  8820.,  8772.,  9384.,  7988.,  8540.,  8516.,  9104.,
      7924.,  8452.,  8452.,  9016.,  8756.,  9324.,  9284.,  9888.,  9652.,
      10260., 10180., 10824., 9140.,  9724.,  9668.,  10288., 8820.,  9380.,
      9348.,  9944.,  7924.,  8516.,  8452.,  9080.,  7540.,  8108.,  8068.,
      8672.,  7348.,  7892.,  7876.,  8456.,  8308.,  8892.,  8836.,  9456.,
      9332.,  9956.,  9860.,  10520., 8692.,  9292.,  9220.,  9856.,  8244.,
      8820.,  8772.,  9384.,  9652.,  10260., 10180., 10824., 9140.,  9724.,
      9668.,  10288., 8820.,  9380.,  9348.,  9944.,  8660.,  9228.,  9188.,
      9792.,  8628.,  9204.,  9156.,  9768.,  8212.,  8796.,  8740.,  9360.,
      7924.,  8516.,  8452.,  9080.,  9332.,  9956.,  9860.,  10520., 8692.,
      9292.,  9220.,  9856.,  8244.,  8820.,  8772.,  9384.,  7988.,  8540.,
      8516.,  9104.,  7924.,  8452.,  8452.,  9016.,  8756.,  9324.,  9284.,
      9888.,  9652.,  10260., 10180., 10824., 8628.,  9204.,  9156.,  9768.,
      8212.,  8796.,  8740.,  9360.,  7924.,  8516.,  8452.,  9080.,  7540.,
      8108.,  8068.,  8672.,  7348.,  7892.,  7876.,  8456.,  8308.,  8892.,
      8836.,  9456.,  9332.,  9956.,  9860.,  10520., 7924.,  8452.,  8452.,
      9016.,  8756.,  9324.,  9284.,  9888.,  9652.,  10260., 10180., 10824.,
      9140.,  9724.,  9668.,  10288., 8820.,  9380.,  9348.,  9944.,  8660.,
      9228.,  9188.,  9792.,  8628.,  9204.,  9156.,  9768.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7150.,  8148.,  9146.,  10144., 8068.,  9192.,  10316., 11440., 9504.,
      10656., 11808., 12960., 10512., 11808., 13104., 14400., 8798.,  10076.,
      11354., 12632., 9968.,  11408., 12848., 14288., 9064.,  10504., 11944.,
      13384., 10324., 11944., 13564., 15184., 8474.,  9788.,  11102., 12416.,
      9572.,  11048., 12524., 14000., 9504.,  10656., 11808., 12960., 10512.,
      11808., 13104., 14400., 6714.,  7732.,  8750.,  9768.,  7560.,  8704.,
      9848.,  10992., 7949.,  9106.,  10263., 11420., 9016.,  10320., 11624.,
      12928., 8400.,  9744.,  11088., 12432., 9576.,  11088., 12600., 14112.,
      10537., 12030., 13523., 15016., 11898., 13580., 15262., 16944., 13792.,
      15476., 17160., 18844., 15254., 17148., 19042., 20936., 10143., 11678.,
      13213., 14748., 11420., 13144., 14868., 16592., 8400.,  9744.,  11088.,
      12432., 9576.,  11088., 12600., 14112., 7483.,  8674.,  9865.,  11056.,
      8466.,  9804.,  11142., 12480., 9480.,  10800., 12120., 13440., 10704.,
      12192., 13680., 15168., 12672., 14208., 15744., 17280., 14016., 15744.,
      17472., 19200., 11688., 13392., 15096., 16800., 13248., 15168., 17088.,
      19008., 12000., 13920., 15840., 17760., 13680., 15840., 18000., 20160.,
      11256., 13008., 14760., 16512., 12720., 14688., 16656., 18624., 12672.,
      14208., 15744., 17280., 14016., 15744., 17472., 19200., 9048.,  10416.,
      11784., 13152., 10176., 11712., 13248., 14784., 10191., 11678., 13165.,
      14652., 11564., 13240., 14916., 16592., 10800., 12528., 14256., 15984.,
      12312., 14256., 16200., 18144., 13483., 15394., 17305., 19216., 15234.,
      17388., 19542., 21696., 17640., 19788., 21936., 24084., 19522., 21940.,
      24358., 26776., 13013., 14978., 16943., 18908., 14656., 16864., 19072.,
      21280., 10800., 12528., 14256., 15984., 12312., 14256., 16200., 18144.,
      9681.,  11214., 12747., 14280., 10946., 12668., 14390., 16112., 9480.,
      10800., 12120., 13440., 10704., 12192., 13680., 15168., 12672., 14208.,
      15744., 17280., 14016., 15744., 17472., 19200., 11688., 13392., 15096.,
      16800., 13248., 15168., 17088., 19008., 12000., 13920., 15840., 17760.,
      13680., 15840., 18000., 20160., 11256., 13008., 14760., 16512., 12720.,
      14688., 16656., 18624., 12672., 14208., 15744., 17280., 14016., 15744.,
      17472., 19200., 9048.,  10416., 11784., 13152., 10176., 11712., 13248.,
      14784., 7877.,  9026.,  10175., 11324., 8944.,  10240., 11536., 12832.,
      8400.,  9744.,  11088., 12432., 9576.,  11088., 12600., 14112., 10497.,
      11982., 13467., 14952., 11858., 13532., 15206., 16880., 13744., 15412.,
      17080., 18748., 15206., 17084., 18962., 20840., 10135., 11662., 13189.,
      14716., 11412., 13128., 14844., 16560., 8400.,  9744.,  11088., 12432.,
      9576.,  11088., 12600., 14112., 7587.,  8786.,  9985.,  11184., 8570.,
      9916.,  11262., 12608., 7142.,  8132.,  9122.,  10112., 8060.,  9176.,
      10292., 11408., 9504.,  10656., 11808., 12960., 10512., 11808., 13104.,
      14400., 8694.,  9964.,  11234., 12504., 9864.,  11296., 12728., 14160.,
      8888.,  10312., 11736., 13160., 10148., 11752., 13356., 14960., 8402.,
      9708.,  11014., 12320., 9500.,  10968., 12436., 13904., 9504.,  10656.,
      11808., 12960., 10512., 11808., 13104., 14400., 6754.,  7780.,  8806.,
      9832.,  7600.,  8752.,  9904.,  11056.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8888.,  9448.,  10008., 10568., 9396.,  9992.,  10588., 11184., 8560.,
      9128.,  9696.,  10264., 9068.,  9672.,  10276., 10880., 8488.,  9064.,
      9640.,  10216., 8996.,  9608.,  10220., 10832., 7648.,  8232.,  8816.,
      9400.,  8156.,  8776.,  9396.,  10016., 7064.,  7656.,  8248.,  8840.,
      7572.,  8200.,  8828.,  9456.,  6320.,  6888.,  7456.,  8024.,  6828.,
      7432.,  8036.,  8640.,  5960.,  6504.,  7048.,  7592.,  6468.,  7048.,
      7628.,  8208.,  7720.,  8296.,  8872.,  9448.,  8228.,  8840.,  9452.,
      10064., 8256.,  8808.,  9360.,  9912.,  8764.,  9352.,  9940.,  10528.,
      9176.,  9704.,  10232., 10760., 9684.,  10248., 10812., 11376., 9776.,
      10344., 10912., 11480., 10284., 10888., 11492., 12096., 10504., 11112.,
      11720., 12328., 11012., 11656., 12300., 12944., 9504.,  10088., 10672.,
      11256., 10012., 10632., 11252., 11872., 8888.,  9448.,  10008., 10568.,
      9396.,  9992.,  10588., 11184., 7064.,  7656.,  8248.,  8840.,  7572.,
      8200.,  8828.,  9456.,  6320.,  6888.,  7456.,  8024.,  6828.,  7432.,
      8036.,  8640.,  5960.,  6504.,  7048.,  7592.,  6468.,  7048.,  7628.,
      8208.,  6816.,  7400.,  7984.,  8568.,  7324.,  7944.,  8564.,  9184.,
      7800.,  8424.,  9048.,  9672.,  8308.,  8968.,  9628.,  10288., 7568.,
      8168.,  8768.,  9368.,  8076.,  8712.,  9348.,  9984.,  7720.,  8296.,
      8872.,  9448.,  8228.,  8840.,  9452.,  10064., 10504., 11112., 11720.,
      12328., 11012., 11656., 12300., 12944., 9504.,  10088., 10672., 11256.,
      10012., 10632., 11252., 11872., 8888.,  9448.,  10008., 10568., 9396.,
      9992.,  10588., 11184., 8560.,  9128.,  9696.,  10264., 9068.,  9672.,
      10276., 10880., 8488.,  9064.,  9640.,  10216., 8996.,  9608.,  10220.,
      10832., 7648.,  8232.,  8816.,  9400.,  8156.,  8776.,  9396.,  10016.,
      7064.,  7656.,  8248.,  8840.,  7572.,  8200.,  8828.,  9456.,  7800.,
      8424.,  9048.,  9672.,  8308.,  8968.,  9628.,  10288., 7568.,  8168.,
      8768.,  9368.,  8076.,  8712.,  9348.,  9984.,  7720.,  8296.,  8872.,
      9448.,  8228.,  8840.,  9452.,  10064., 8256.,  8808.,  9360.,  9912.,
      8764.,  9352.,  9940.,  10528., 9176.,  9704.,  10232., 10760., 9684.,
      10248., 10812., 11376., 9776.,  10344., 10912., 11480., 10284., 10888.,
      11492., 12096., 10504., 11112., 11720., 12328., 11012., 11656., 12300.,
      12944., 8488.,  9064.,  9640.,  10216., 8996.,  9608.,  10220., 10832.,
      7648.,  8232.,  8816.,  9400.,  8156.,  8776.,  9396.,  10016., 7064.,
      7656.,  8248.,  8840.,  7572.,  8200.,  8828.,  9456.,  6320.,  6888.,
      7456.,  8024.,  6828.,  7432.,  8036.,  8640.,  5960.,  6504.,  7048.,
      7592.,  6468.,  7048.,  7628.,  8208.,  6816.,  7400.,  7984.,  8568.,
      7324.,  7944.,  8564.,  9184.,  7800.,  8424.,  9048.,  9672.,  8308.,
      8968.,  9628.,  10288., 9176.,  9704.,  10232., 10760., 9684.,  10248.,
      10812., 11376., 9776.,  10344., 10912., 11480., 10284., 10888., 11492.,
      12096., 10504., 11112., 11720., 12328., 11012., 11656., 12300., 12944.,
      9504.,  10088., 10672., 11256., 10012., 10632., 11252., 11872., 8888.,
      9448.,  10008., 10568., 9396.,  9992.,  10588., 11184., 8560.,  9128.,
      9696.,  10264., 9068.,  9672.,  10276., 10880., 8488.,  9064.,  9640.,
      10216., 8996.,  9608.,  10220., 10832.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7224.,  8312.,  9400.,  10488., 9464.,  10704., 11944., 13184., 9278.,
      10668., 12058., 13448., 10178., 11700., 13222., 14744., 9508.,  10864.,
      12220., 13576., 8984.,  10192., 11400., 12608., 7494.,  8540.,  9586.,
      10632., 8277.,  9550.,  10823., 12096., 9540.,  10984., 12428., 13872.,
      10858., 12484., 14110., 15736., 13475., 15262., 17049., 18836., 11457.,
      13054., 14651., 16248., 9620.,  11048., 12476., 13904., 8768.,  10000.,
      11232., 12464., 9600.,  11040., 12480., 13920., 12384., 14016., 15648.,
      17280., 12216., 14064., 15912., 17760., 13560., 15600., 17640., 19680.,
      12864., 14688., 16512., 18336., 12384., 14016., 15648., 17280., 10248.,
      11664., 13080., 14496., 10617., 12238., 13859., 15480., 12332., 14168.,
      16004., 17840., 13928., 16000., 18072., 20144., 17201., 19482., 21763.,
      24044., 14497., 16534., 18571., 20608., 12028., 13848., 15668., 17488.,
      11166., 12748., 14330., 15912., 9600.,  11040., 12480., 13920., 12384.,
      14016., 15648., 17280., 12216., 14064., 15912., 17760., 13560., 15600.,
      17640., 19680., 12864., 14688., 16512., 18336., 12384., 14016., 15648.,
      17280., 10248., 11664., 13080., 14496., 8041.,  9286.,  10531., 11776.,
      9316.,  10728., 12140., 13552., 10710., 12316., 13922., 15528., 13451.,
      15230., 17009., 18788., 11373., 12966., 14559., 16152., 9492.,  10920.,
      12348., 13776., 8740.,  9976.,  11212., 12448., 7188.,  8256.,  9324.,
      10392., 9240.,  10448., 11656., 12864., 9106.,  10484., 11862., 13240.,
      10138., 11668., 13198., 14728., 9704.,  11080., 12456., 13832., 9464.,
      10704., 11944., 13184., 7842.,  8916.,  9990.,  11064.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21002., 21668., 22334., 23000., 20338., 21004., 21670., 22336., 19802.,
      20468., 21134., 21800., 20930., 21596., 22262., 22928., 22186., 22852.,
      23518., 24184., 21266., 21932., 22598., 23264., 20538., 21204., 21870.,
      22536., 19418., 20084., 20750., 21416., 18626., 19292., 19958., 20624.,
      18026., 18692., 19358., 20024., 20434., 21100., 21766., 22432., 22906.,
      23572., 24238., 24904., 21858., 22524., 23190., 23856., 21002., 21668.,
      22334., 23000., 22186., 22852., 23518., 24184., 21266., 21932., 22598.,
      23264., 20538., 21204., 21870., 22536., 21026., 21692., 22358., 23024.,
      21578., 22244., 22910., 23576., 20402., 21068., 21734., 22400., 19418.,
      20084., 20750., 21416., 22906., 23572., 24238., 24904., 21858., 22524.,
      23190., 23856., 21002., 21668., 22334., 23000., 20338., 21004., 21670.,
      22336., 19802., 20468., 21134., 21800., 20930., 21596., 22262., 22928.,
      22186., 22852., 23518., 24184., 21578., 22244., 22910., 23576., 20402.,
      21068., 21734., 22400., 19418., 20084., 20750., 21416., 18626., 19292.,
      19958., 20624., 18026., 18692., 19358., 20024., 20434., 21100., 21766.,
      22432., 22906., 23572., 24238., 24904., 19802., 20468., 21134., 21800.,
      20930., 21596., 22262., 22928., 22186., 22852., 23518., 24184., 21266.,
      21932., 22598., 23264., 20538., 21204., 21870., 22536., 21026., 21692.,
      22358., 23024., 21578., 22244., 22910., 23576., 18026., 18692., 19358.,
      20024., 20434., 21100., 21766., 22432., 22906., 23572., 24238., 24904.,
      21858., 22524., 23190., 23856., 21002., 21668., 22334., 23000., 20338.,
      21004., 21670., 22336., 19802., 20468., 21134., 21800.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6754.,  7600.,  7780.,  8752.,  8806.,  9904.,  9832.,  11056., 9504.,
      10512., 10656., 11808., 11808., 13104., 12960., 14400., 8402.,  9500.,
      9708.,  10968., 11014., 12436., 12320., 13904., 8888.,  10148., 10312.,
      11752., 11736., 13356., 13160., 14960., 8694.,  9864.,  9964.,  11296.,
      11234., 12728., 12504., 14160., 9504.,  10512., 10656., 11808., 11808.,
      13104., 12960., 14400., 7142.,  8060.,  8132.,  9176.,  9122.,  10292.,
      10112., 11408., 7587.,  8570.,  8786.,  9916.,  9985.,  11262., 11184.,
      12608., 8400.,  9576.,  9744.,  11088., 11088., 12600., 12432., 14112.,
      10135., 11412., 11662., 13128., 13189., 14844., 14716., 16560., 13744.,
      15206., 15412., 17084., 17080., 18962., 18748., 20840., 10497., 11858.,
      11982., 13532., 13467., 15206., 14952., 16880., 8400.,  9576.,  9744.,
      11088., 11088., 12600., 12432., 14112., 7877.,  8944.,  9026.,  10240.,
      10175., 11536., 11324., 12832., 9048.,  10176., 10416., 11712., 11784.,
      13248., 13152., 14784., 12672., 14016., 14208., 15744., 15744., 17472.,
      17280., 19200., 11256., 12720., 13008., 14688., 14760., 16656., 16512.,
      18624., 12000., 13680., 13920., 15840., 15840., 18000., 17760., 20160.,
      11688., 13248., 13392., 15168., 15096., 17088., 16800., 19008., 12672.,
      14016., 14208., 15744., 15744., 17472., 17280., 19200., 9480.,  10704.,
      10800., 12192., 12120., 13680., 13440., 15168., 9681.,  10946., 11214.,
      12668., 12747., 14390., 14280., 16112., 10800., 12312., 12528., 14256.,
      14256., 16200., 15984., 18144., 13013., 14656., 14978., 16864., 16943.,
      19072., 18908., 21280., 17640., 19522., 19788., 21940., 21936., 24358.,
      24084., 26776., 13483., 15234., 15394., 17388., 17305., 19542., 19216.,
      21696., 10800., 12312., 12528., 14256., 14256., 16200., 15984., 18144.,
      10191., 11564., 11678., 13240., 13165., 14916., 14652., 16592., 9048.,
      10176., 10416., 11712., 11784., 13248., 13152., 14784., 12672., 14016.,
      14208., 15744., 15744., 17472., 17280., 19200., 11256., 12720., 13008.,
      14688., 14760., 16656., 16512., 18624., 12000., 13680., 13920., 15840.,
      15840., 18000., 17760., 20160., 11688., 13248., 13392., 15168., 15096.,
      17088., 16800., 19008., 12672., 14016., 14208., 15744., 15744., 17472.,
      17280., 19200., 9480.,  10704., 10800., 12192., 12120., 13680., 13440.,
      15168., 7483.,  8466.,  8674.,  9804.,  9865.,  11142., 11056., 12480.,
      8400.,  9576.,  9744.,  11088., 11088., 12600., 12432., 14112., 10143.,
      11420., 11678., 13144., 13213., 14868., 14748., 16592., 13792., 15254.,
      15476., 17148., 17160., 19042., 18844., 20936., 10537., 11898., 12030.,
      13580., 13523., 15262., 15016., 16944., 8400.,  9576.,  9744.,  11088.,
      11088., 12600., 12432., 14112., 7949.,  9016.,  9106.,  10320., 10263.,
      11624., 11420., 12928., 6714.,  7560.,  7732.,  8704.,  8750.,  9848.,
      9768.,  10992., 9504.,  10512., 10656., 11808., 11808., 13104., 12960.,
      14400., 8474.,  9572.,  9788.,  11048., 11102., 12524., 12416., 14000.,
      9064.,  10324., 10504., 11944., 11944., 13564., 13384., 15184., 8798.,
      9968.,  10076., 11408., 11354., 12848., 12632., 14288., 9504.,  10512.,
      10656., 11808., 11808., 13104., 12960., 14400., 7150.,  8068.,  8148.,
      9192.,  9146.,  10316., 10144., 11440.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9176.,  9748.,  9704.,  10312., 10232., 10876., 10760., 11440., 8376.,
      8932.,  8904.,  9496.,  9432.,  10060., 9960.,  10624., 7896.,  8436.,
      8424.,  9000.,  8952.,  9564.,  9480.,  10128., 7224.,  7748.,  7752.,
      8312.,  8280.,  8876.,  8808.,  9440.,  6872.,  7380.,  7400.,  7944.,
      7928.,  8508.,  8456.,  9072.,  7320.,  7844.,  7848.,  8408.,  8376.,
      8972.,  8904.,  9536.,  8024.,  8564.,  8552.,  9128.,  9080.,  9692.,
      9608.,  10256., 7896.,  8436.,  8424.,  9000.,  8952.,  9564.,  9480.,
      10128., 7224.,  7748.,  7752.,  8312.,  8280.,  8876.,  8808.,  9440.,
      6872.,  7380.,  7400.,  7944.,  7928.,  8508.,  8456.,  9072.,  7320.,
      7844.,  7848.,  8408.,  8376.,  8972.,  8904.,  9536.,  8024.,  8564.,
      8552.,  9128.,  9080.,  9692.,  9608.,  10256., 8472.,  9028.,  9000.,
      9592.,  9528.,  10156., 10056., 10720., 9176.,  9748.,  9704.,  10312.,
      10232., 10876., 10760., 11440., 6872.,  7380.,  7400.,  7944.,  7928.,
      8508.,  8456.,  9072.,  7320.,  7844.,  7848.,  8408.,  8376.,  8972.,
      8904.,  9536.,  8024.,  8564.,  8552.,  9128.,  9080.,  9692.,  9608.,
      10256., 8472.,  9028.,  9000.,  9592.,  9528.,  10156., 10056., 10720.,
      9176.,  9748.,  9704.,  10312., 10232., 10876., 10760., 11440., 8376.,
      8932.,  8904.,  9496.,  9432.,  10060., 9960.,  10624., 7896.,  8436.,
      8424.,  9000.,  8952.,  9564.,  9480.,  10128., 8024.,  8564.,  8552.,
      9128.,  9080.,  9692.,  9608.,  10256., 8472.,  9028.,  9000.,  9592.,
      9528.,  10156., 10056., 10720., 9176.,  9748.,  9704.,  10312., 10232.,
      10876., 10760., 11440., 8376.,  8932.,  8904.,  9496.,  9432.,  10060.,
      9960.,  10624., 7896.,  8436.,  8424.,  9000.,  8952.,  9564.,  9480.,
      10128., 7224.,  7748.,  7752.,  8312.,  8280.,  8876.,  8808.,  9440.,
      6872.,  7380.,  7400.,  7944.,  7928.,  8508.,  8456.,  9072.,  9176.,
      9748.,  9704.,  10312., 10232., 10876., 10760., 11440., 8376.,  8932.,
      8904.,  9496.,  9432.,  10060., 9960.,  10624., 7896.,  8436.,  8424.,
      9000.,  8952.,  9564.,  9480.,  10128., 7224.,  7748.,  7752.,  8312.,
      8280.,  8876.,  8808.,  9440.,  6872.,  7380.,  7400.,  7944.,  7928.,
      8508.,  8456.,  9072.,  7320.,  7844.,  7848.,  8408.,  8376.,  8972.,
      8904.,  9536.,  8024.,  8564.,  8552.,  9128.,  9080.,  9692.,  9608.,
      10256., 7896.,  8436.,  8424.,  9000.,  8952.,  9564.,  9480.,  10128.,
      7224.,  7748.,  7752.,  8312.,  8280.,  8876.,  8808.,  9440.,  6872.,
      7380.,  7400.,  7944.,  7928.,  8508.,  8456.,  9072.,  7320.,  7844.,
      7848.,  8408.,  8376.,  8972.,  8904.,  9536.,  8024.,  8564.,  8552.,
      9128.,  9080.,  9692.,  9608.,  10256., 8472.,  9028.,  9000.,  9592.,
      9528.,  10156., 10056., 10720., 9176.,  9748.,  9704.,  10312., 10232.,
      10876., 10760., 11440., 6872.,  7380.,  7400.,  7944.,  7928.,  8508.,
      8456.,  9072.,  7320.,  7844.,  7848.,  8408.,  8376.,  8972.,  8904.,
      9536.,  8024.,  8564.,  8552.,  9128.,  9080.,  9692.,  9608.,  10256.,
      8472.,  9028.,  9000.,  9592.,  9528.,  10156., 10056., 10720., 9176.,
      9748.,  9704.,  10312., 10232., 10876., 10760., 11440., 8376.,  8932.,
      8904.,  9496.,  9432.,  10060., 9960.,  10624., 7896.,  8436.,  8424.,
      9000.,  8952.,  9564.,  9480.,  10128.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5958.,  6804.,  7650.,  8496.,  6876.,  7848.,  8820.,  9792.,  7794.,
      8892.,  9990.,  11088., 8712.,  9936.,  11160., 12384., 9936.,  10944.,
      11952., 12960., 10944., 12096., 13248., 14400., 11952., 13248., 14544.,
      15840., 12960., 14400., 15840., 17280., 7002.,  8100.,  9198.,  10296.,
      8172.,  9432.,  10692., 11952., 9342.,  10764., 12186., 13608., 10512.,
      12096., 13680., 15264., 6660.,  7920.,  9180.,  10440., 7920.,  9360.,
      10800., 12240., 9180.,  10800., 12420., 14040., 10440., 12240., 14040.,
      15840., 7002.,  8172.,  9342.,  10512., 8100.,  9432.,  10764., 12096.,
      9198.,  10692., 12186., 13680., 10296., 11952., 13608., 15264., 9936.,
      10944., 11952., 12960., 10944., 12096., 13248., 14400., 11952., 13248.,
      14544., 15840., 12960., 14400., 15840., 17280., 5958.,  6876.,  7794.,
      8712.,  6804.,  7848.,  8892.,  9936.,  7650.,  8820.,  9990.,  11160.,
      8496.,  9792.,  11088., 12384., 6223.,  7206.,  8189.,  9172.,  7290.,
      8420.,  9550.,  10680., 8357.,  9634.,  10911., 12188., 9424.,  10848.,
      12272., 13696., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080.,
      11424., 8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784.,
      8785.,  10062., 11339., 12616., 10146., 11612., 13078., 14544., 11507.,
      13162., 14817., 16472., 12868., 14712., 16556., 18400., 14378., 15840.,
      17302., 18764., 15840., 17512., 19184., 20856., 17302., 19184., 21066.,
      22948., 18764., 20856., 22948., 25040., 8785.,  10146., 11507., 12868.,
      10062., 11612., 13162., 14712., 11339., 13078., 14817., 16556., 12616.,
      14544., 16472., 18400., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,
      10080., 11424., 8568.,  10080., 11592., 13104., 9744.,  11424., 13104.,
      14784., 6223.,  7290.,  8357.,  9424.,  7206.,  8420.,  9634.,  10848.,
      8189.,  9550.,  10911., 12272., 9172.,  10680., 12188., 13696., 7944.,
      9072.,  10200., 11328., 9168.,  10464., 11760., 13056., 10392., 11856.,
      13320., 14784., 11616., 13248., 14880., 16512., 13248., 14592., 15936.,
      17280., 14592., 16128., 17664., 19200., 15936., 17664., 19392., 21120.,
      17280., 19200., 21120., 23040., 9336.,  10800., 12264., 13728., 10896.,
      12576., 14256., 15936., 12456., 14352., 16248., 18144., 14016., 16128.,
      18240., 20352., 8880.,  10560., 12240., 13920., 10560., 12480., 14400.,
      16320., 12240., 14400., 16560., 18720., 13920., 16320., 18720., 21120.,
      9336.,  10896., 12456., 14016., 10800., 12576., 14352., 16128., 12264.,
      14256., 16248., 18240., 13728., 15936., 18144., 20352., 13248., 14592.,
      15936., 17280., 14592., 16128., 17664., 19200., 15936., 17664., 19392.,
      21120., 17280., 19200., 21120., 23040., 7944.,  9168.,  10392., 11616.,
      9072.,  10464., 11856., 13248., 10200., 11760., 13320., 14880., 11328.,
      13056., 14784., 16512., 8017.,  9282.,  10547., 11812., 9390.,  10844.,
      12298., 13752., 10763., 12406., 14049., 15692., 12136., 13968., 15800.,
      17632., 7992.,  9504.,  11016., 12528., 9504.,  11232., 12960., 14688.,
      11016., 12960., 14904., 16848., 12528., 14688., 16848., 19008., 11311.,
      12954., 14597., 16240., 13062., 14948., 16834., 18720., 14813., 16942.,
      19071., 21200., 16564., 18936., 21308., 23680., 18518., 20400., 22282.,
      24164., 20400., 22552., 24704., 26856., 22282., 24704., 27126., 29548.,
      24164., 26856., 29548., 32240., 11311., 13062., 14813., 16564., 12954.,
      14948., 16942., 18936., 14597., 16834., 19071., 21308., 16240., 18720.,
      21200., 23680., 7992.,  9504.,  11016., 12528., 9504.,  11232., 12960.,
      14688., 11016., 12960., 14904., 16848., 12528., 14688., 16848., 19008.,
      8017.,  9390.,  10763., 12136., 9282.,  10844., 12406., 13968., 10547.,
      12298., 14049., 15800., 11812., 13752., 15692., 17632., 7944.,  9072.,
      10200., 11328., 9168.,  10464., 11760., 13056., 10392., 11856., 13320.,
      14784., 11616., 13248., 14880., 16512., 13248., 14592., 15936., 17280.,
      14592., 16128., 17664., 19200., 15936., 17664., 19392., 21120., 17280.,
      19200., 21120., 23040., 9336.,  10800., 12264., 13728., 10896., 12576.,
      14256., 15936., 12456., 14352., 16248., 18144., 14016., 16128., 18240.,
      20352., 8880.,  10560., 12240., 13920., 10560., 12480., 14400., 16320.,
      12240., 14400., 16560., 18720., 13920., 16320., 18720., 21120., 9336.,
      10896., 12456., 14016., 10800., 12576., 14352., 16128., 12264., 14256.,
      16248., 18240., 13728., 15936., 18144., 20352., 13248., 14592., 15936.,
      17280., 14592., 16128., 17664., 19200., 15936., 17664., 19392., 21120.,
      17280., 19200., 21120., 23040., 7944.,  9168.,  10392., 11616., 9072.,
      10464., 11856., 13248., 10200., 11760., 13320., 14880., 11328., 13056.,
      14784., 16512., 6223.,  7206.,  8189.,  9172.,  7290.,  8420.,  9550.,
      10680., 8357.,  9634.,  10911., 12188., 9424.,  10848., 12272., 13696.,
      6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080., 11424., 8568.,
      10080., 11592., 13104., 9744.,  11424., 13104., 14784., 8785.,  10062.,
      11339., 12616., 10146., 11612., 13078., 14544., 11507., 13162., 14817.,
      16472., 12868., 14712., 16556., 18400., 14378., 15840., 17302., 18764.,
      15840., 17512., 19184., 20856., 17302., 19184., 21066., 22948., 18764.,
      20856., 22948., 25040., 8785.,  10146., 11507., 12868., 10062., 11612.,
      13162., 14712., 11339., 13078., 14817., 16556., 12616., 14544., 16472.,
      18400., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080., 11424.,
      8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784., 6223.,
      7290.,  8357.,  9424.,  7206.,  8420.,  9634.,  10848., 8189.,  9550.,
      10911., 12272., 9172.,  10680., 12188., 13696., 5958.,  6804.,  7650.,
      8496.,  6876.,  7848.,  8820.,  9792.,  7794.,  8892.,  9990.,  11088.,
      8712.,  9936.,  11160., 12384., 9936.,  10944., 11952., 12960., 10944.,
      12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960., 14400.,
      15840., 17280., 7002.,  8100.,  9198.,  10296., 8172.,  9432.,  10692.,
      11952., 9342.,  10764., 12186., 13608., 10512., 12096., 13680., 15264.,
      6660.,  7920.,  9180.,  10440., 7920.,  9360.,  10800., 12240., 9180.,
      10800., 12420., 14040., 10440., 12240., 14040., 15840., 7002.,  8172.,
      9342.,  10512., 8100.,  9432.,  10764., 12096., 9198.,  10692., 12186.,
      13680., 10296., 11952., 13608., 15264., 9936.,  10944., 11952., 12960.,
      10944., 12096., 13248., 14400., 11952., 13248., 14544., 15840., 12960.,
      14400., 15840., 17280., 5958.,  6876.,  7794.,  8712.,  6804.,  7848.,
      8892.,  9936.,  7650.,  8820.,  9990.,  11160., 8496.,  9792.,  11088.,
      12384.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8052.,  8624.,  9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,
      9712.,  10356., 11000., 9576.,  10256., 10936., 11616., 7492.,  8048.,
      8604.,  9160.,  8000.,  8592.,  9184.,  9776.,  8508.,  9136.,  9764.,
      10392., 9016.,  9680.,  10344., 11008., 7572.,  8112.,  8652.,  9192.,
      8080.,  8656.,  9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,
      9744.,  10392., 11040., 7268.,  7792.,  8316.,  8840.,  7776.,  8336.,
      8896.,  9456.,  8284.,  8880.,  9476.,  10072., 8792.,  9424.,  10056.,
      10688., 7604.,  8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,
      8620.,  9200.,  9780.,  10360., 9128.,  9744.,  10360., 10976., 7460.,
      7984.,  8508.,  9032.,  7968.,  8528.,  9088.,  9648.,  8476.,  9072.,
      9668.,  10264., 8984.,  9616.,  10248., 10880., 7828.,  8368.,  8908.,
      9448.,  8336.,  8912.,  9488.,  10064., 8844.,  9456.,  10068., 10680.,
      9352.,  10000., 10648., 11296., 7572.,  8112.,  8652.,  9192.,  8080.,
      8656.,  9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,  9744.,
      10392., 11040., 7268.,  7792.,  8316.,  8840.,  7776.,  8336.,  8896.,
      9456.,  8284.,  8880.,  9476.,  10072., 8792.,  9424.,  10056., 10688.,
      7604.,  8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  8620.,
      9200.,  9780.,  10360., 9128.,  9744.,  10360., 10976., 7460.,  7984.,
      8508.,  9032.,  7968.,  8528.,  9088.,  9648.,  8476.,  9072.,  9668.,
      10264., 8984.,  9616.,  10248., 10880., 7828.,  8368.,  8908.,  9448.,
      8336.,  8912.,  9488.,  10064., 8844.,  9456.,  10068., 10680., 9352.,
      10000., 10648., 11296., 7684.,  8240.,  8796.,  9352.,  8192.,  8784.,
      9376.,  9968.,  8700.,  9328.,  9956.,  10584., 9208.,  9872.,  10536.,
      11200., 8052.,  8624.,  9196.,  9768.,  8560.,  9168.,  9776.,  10384.,
      9068.,  9712.,  10356., 11000., 9576.,  10256., 10936., 11616., 7604.,
      8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  8620.,  9200.,
      9780.,  10360., 9128.,  9744.,  10360., 10976., 7460.,  7984.,  8508.,
      9032.,  7968.,  8528.,  9088.,  9648.,  8476.,  9072.,  9668.,  10264.,
      8984.,  9616.,  10248., 10880., 7828.,  8368.,  8908.,  9448.,  8336.,
      8912.,  9488.,  10064., 8844.,  9456.,  10068., 10680., 9352.,  10000.,
      10648., 11296., 7684.,  8240.,  8796.,  9352.,  8192.,  8784.,  9376.,
      9968.,  8700.,  9328.,  9956.,  10584., 9208.,  9872.,  10536., 11200.,
      8052.,  8624.,  9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,
      9712.,  10356., 11000., 9576.,  10256., 10936., 11616., 7492.,  8048.,
      8604.,  9160.,  8000.,  8592.,  9184.,  9776.,  8508.,  9136.,  9764.,
      10392., 9016.,  9680.,  10344., 11008., 7572.,  8112.,  8652.,  9192.,
      8080.,  8656.,  9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,
      9744.,  10392., 11040., 7828.,  8368.,  8908.,  9448.,  8336.,  8912.,
      9488.,  10064., 8844.,  9456.,  10068., 10680., 9352.,  10000., 10648.,
      11296., 7684.,  8240.,  8796.,  9352.,  8192.,  8784.,  9376.,  9968.,
      8700.,  9328.,  9956.,  10584., 9208.,  9872.,  10536., 11200., 8052.,
      8624.,  9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,  9712.,
      10356., 11000., 9576.,  10256., 10936., 11616., 7492.,  8048.,  8604.,
      9160.,  8000.,  8592.,  9184.,  9776.,  8508.,  9136.,  9764.,  10392.,
      9016.,  9680.,  10344., 11008., 7572.,  8112.,  8652.,  9192.,  8080.,
      8656.,  9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,  9744.,
      10392., 11040., 7268.,  7792.,  8316.,  8840.,  7776.,  8336.,  8896.,
      9456.,  8284.,  8880.,  9476.,  10072., 8792.,  9424.,  10056., 10688.,
      7604.,  8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  8620.,
      9200.,  9780.,  10360., 9128.,  9744.,  10360., 10976., 8052.,  8624.,
      9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,  9712.,  10356.,
      11000., 9576.,  10256., 10936., 11616., 7492.,  8048.,  8604.,  9160.,
      8000.,  8592.,  9184.,  9776.,  8508.,  9136.,  9764.,  10392., 9016.,
      9680.,  10344., 11008., 7572.,  8112.,  8652.,  9192.,  8080.,  8656.,
      9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,  9744.,  10392.,
      11040., 7268.,  7792.,  8316.,  8840.,  7776.,  8336.,  8896.,  9456.,
      8284.,  8880.,  9476.,  10072., 8792.,  9424.,  10056., 10688., 7604.,
      8112.,  8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  8620.,  9200.,
      9780.,  10360., 9128.,  9744.,  10360., 10976., 7460.,  7984.,  8508.,
      9032.,  7968.,  8528.,  9088.,  9648.,  8476.,  9072.,  9668.,  10264.,
      8984.,  9616.,  10248., 10880., 7828.,  8368.,  8908.,  9448.,  8336.,
      8912.,  9488.,  10064., 8844.,  9456.,  10068., 10680., 9352.,  10000.,
      10648., 11296., 7572.,  8112.,  8652.,  9192.,  8080.,  8656.,  9232.,
      9808.,  8588.,  9200.,  9812.,  10424., 9096.,  9744.,  10392., 11040.,
      7268.,  7792.,  8316.,  8840.,  7776.,  8336.,  8896.,  9456.,  8284.,
      8880.,  9476.,  10072., 8792.,  9424.,  10056., 10688., 7604.,  8112.,
      8620.,  9128.,  8112.,  8656.,  9200.,  9744.,  8620.,  9200.,  9780.,
      10360., 9128.,  9744.,  10360., 10976., 7460.,  7984.,  8508.,  9032.,
      7968.,  8528.,  9088.,  9648.,  8476.,  9072.,  9668.,  10264., 8984.,
      9616.,  10248., 10880., 7828.,  8368.,  8908.,  9448.,  8336.,  8912.,
      9488.,  10064., 8844.,  9456.,  10068., 10680., 9352.,  10000., 10648.,
      11296., 7684.,  8240.,  8796.,  9352.,  8192.,  8784.,  9376.,  9968.,
      8700.,  9328.,  9956.,  10584., 9208.,  9872.,  10536., 11200., 8052.,
      8624.,  9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,  9712.,
      10356., 11000., 9576.,  10256., 10936., 11616., 7604.,  8112.,  8620.,
      9128.,  8112.,  8656.,  9200.,  9744.,  8620.,  9200.,  9780.,  10360.,
      9128.,  9744.,  10360., 10976., 7460.,  7984.,  8508.,  9032.,  7968.,
      8528.,  9088.,  9648.,  8476.,  9072.,  9668.,  10264., 8984.,  9616.,
      10248., 10880., 7828.,  8368.,  8908.,  9448.,  8336.,  8912.,  9488.,
      10064., 8844.,  9456.,  10068., 10680., 9352.,  10000., 10648., 11296.,
      7684.,  8240.,  8796.,  9352.,  8192.,  8784.,  9376.,  9968.,  8700.,
      9328.,  9956.,  10584., 9208.,  9872.,  10536., 11200., 8052.,  8624.,
      9196.,  9768.,  8560.,  9168.,  9776.,  10384., 9068.,  9712.,  10356.,
      11000., 9576.,  10256., 10936., 11616., 7492.,  8048.,  8604.,  9160.,
      8000.,  8592.,  9184.,  9776.,  8508.,  9136.,  9764.,  10392., 9016.,
      9680.,  10344., 11008., 7572.,  8112.,  8652.,  9192.,  8080.,  8656.,
      9232.,  9808.,  8588.,  9200.,  9812.,  10424., 9096.,  9744.,  10392.,
      11040.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5700.,  7185.,  8736.,  10332., 8904.,  7473.,  6060.,  10560., 12984.,
      15456., 17952., 15456., 12984., 10560., 7380.,  9279.,  11256., 13284.,
      11424., 9567.,  7740.,  13200., 16230., 19320., 22440., 19320., 16230.,
      13200., 7740.,  9567.,  11424., 13284., 11256., 9279.,  7380.,  10560.,
      12984., 15456., 17952., 15456., 12984., 10560., 6060.,  7473.,  8904.,
      10332., 8736.,  7185.,  5700.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17784., 18084., 18384., 18684., 18984., 19284., 19584., 20184., 20484.,
      20784., 21084., 21384., 21684., 21984., 22584., 22884., 23184., 23484.,
      23784., 24084., 24384., 21016., 21316., 21616., 21916., 22216., 22516.,
      22816., 19960., 20260., 20560., 20860., 21160., 21460., 21760., 19416.,
      19716., 20016., 20316., 20616., 20916., 21216., 19384., 19684., 19984.,
      20284., 20584., 20884., 21184.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7845.,  8520.,  9465.,  10338., 11004., 12096., 12420., 13752., 9849.,
      11088., 7485.,  8610.,  5370.,  6360.,  9720.,  10560., 11640., 12720.,
      13440., 14784., 15072., 16704., 11928., 13440., 9048.,  10416., 6480.,
      7680.,  10275., 11160., 12375., 13518., 14364., 15792., 16188., 17928.,
      12831., 14448., 9747.,  11214., 6990.,  8280.,  12150., 13200., 14550.,
      15900., 16800., 18480., 18840., 20880., 14910., 16800., 11310., 13020.,
      8100.,  9600.,  11595., 12600., 13815., 15102., 15876., 17472., 17724.,
      19656., 14007., 15792., 10611., 12222., 7590.,  9000.,  9720.,  10560.,
      11640., 12720., 13440., 14784., 15072., 16704., 11928., 13440., 9048.,
      10416., 6480.,  7680.,  9165.,  9960.,  10905., 11922., 12516., 13776.,
      13956., 15480., 11025., 12432., 8349.,  9618.,  5970.,  7080.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22060., 22768., 22636., 23368., 23212., 23968., 23788., 24568., 24364.,
      25168., 24940., 25768., 25516., 26368., 20780., 21552., 21356., 22152.,
      21932., 22752., 22508., 23352., 23084., 23952., 23660., 24552., 24236.,
      25152., 20012., 20848., 20588., 21448., 21164., 22048., 21740., 22648.,
      22316., 23248., 22892., 23848., 23468., 24448., 15916., 16688., 16492.,
      17288., 17068., 17888., 17644., 18488., 18220., 19088., 18796., 19688.,
      19372., 20288., 12844., 13552., 13420., 14152., 13996., 14752., 14572.,
      15352., 15148., 15952., 15724., 16552., 16300., 17152., 12844., 13488.,
      13420., 14088., 13996., 14688., 14572., 15288., 15148., 15888., 15724.,
      16488., 16300., 17088., 13868., 14448., 14444., 15048., 15020., 15648.,
      15596., 16248., 16172., 16848., 16748., 17448., 17324., 18048.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5703.,  6378.,  7053.,  7728.,  7401.,  8274.,  9147.,  10020., 8916.,
      10008., 11100., 12192., 10164., 11496., 12828., 14160., 7947.,  9186.,
      10425., 11664., 6501.,  7626.,  8751.,  9876.,  5910.,  6900.,  7890.,
      8880.,  7080.,  7920.,  8760.,  9600.,  9144.,  10224., 11304., 12384.,
      10944., 12288., 13632., 14976., 12384., 14016., 15648., 17280., 9672.,
      11184., 12696., 14208., 7896.,  9264.,  10632., 12000., 7152.,  8352.,
      9552.,  10752., 7473.,  8358.,  9243.,  10128., 9687.,  10830., 11973.,
      13116., 11652., 13080., 14508., 15936., 13260., 15000., 16740., 18480.,
      10365., 11982., 13599., 15216., 8475.,  9942.,  11409., 12876., 7698.,
      8988.,  10278., 11568., 8850.,  9900.,  10950., 12000., 11430., 12780.,
      14130., 15480., 13680., 15360., 17040., 18720., 15480., 17520., 19560.,
      21600., 12090., 13980., 15870., 17760., 9870.,  11580., 13290., 15000.,
      8940.,  10440., 11940., 13440., 8457.,  9462.,  10467., 11472., 10887.,
      12174., 13461., 14748., 12972., 14568., 16164., 17760., 14604., 16536.,
      18468., 20400., 11397., 13182., 14967., 16752., 9291.,  10902., 12513.,
      14124., 8394.,  9804.,  11214., 12624., 7080.,  7920.,  8760.,  9600.,
      9144.,  10224., 11304., 12384., 10944., 12288., 13632., 14976., 12384.,
      14016., 15648., 17280., 9672.,  11184., 12696., 14208., 7896.,  9264.,
      10632., 12000., 7152.,  8352.,  9552.,  10752., 6687.,  7482.,  8277.,
      9072.,  8601.,  9618.,  10635., 11652., 10236., 11496., 12756., 14016.,
      11508., 13032., 14556., 16080., 8979.,  10386., 11793., 13200., 7317.,
      8586.,  9855.,  11124., 6606.,  7716.,  8826.,  9936.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20116., 20824., 21532., 22240., 20732., 21464., 22196., 22928., 21348.,
      22104., 22860., 23616., 21964., 22744., 23524., 24304., 22580., 23384.,
      24188., 24992., 23196., 24024., 24852., 25680., 23812., 24664., 25516.,
      26368., 21588., 22360., 23132., 23904., 22204., 23000., 23796., 24592.,
      22820., 23640., 24460., 25280., 23436., 24280., 25124., 25968., 24052.,
      24920., 25788., 26656., 24668., 25560., 26452., 27344., 25284., 26200.,
      27116., 28032., 24084., 24920., 25756., 26592., 24700., 25560., 26420.,
      27280., 25316., 26200., 27084., 27968., 25932., 26840., 27748., 28656.,
      26548., 27480., 28412., 29344., 27164., 28120., 29076., 30032., 27780.,
      28760., 29740., 30720., 20052., 20824., 21596., 22368., 20668., 21464.,
      22260., 23056., 21284., 22104., 22924., 23744., 21900., 22744., 23588.,
      24432., 22516., 23384., 24252., 25120., 23132., 24024., 24916., 25808.,
      23748., 24664., 25580., 26496., 18068., 18776., 19484., 20192., 18684.,
      19416., 20148., 20880., 19300., 20056., 20812., 21568., 19916., 20696.,
      21476., 22256., 20532., 21336., 22140., 22944., 21148., 21976., 22804.,
      23632., 21764., 22616., 23468., 24320., 14036., 14680., 15324., 15968.,
      14652., 15320., 15988., 16656., 15268., 15960., 16652., 17344., 15884.,
      16600., 17316., 18032., 16500., 17240., 17980., 18720., 17116., 17880.,
      18644., 19408., 17732., 18520., 19308., 20096., 12052., 12632., 13212.,
      13792., 12668., 13272., 13876., 14480., 13284., 13912., 14540., 15168.,
      13900., 14552., 15204., 15856., 14516., 15192., 15868., 16544., 15132.,
      15832., 16532., 17232., 15748., 16472., 17196., 17920.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5970.,  7080.,  8349.,  9618.,  11025., 12432., 13956., 15480., 12516.,
      13776., 10905., 11922., 9165.,  9960.,  6480.,  7680.,  9048.,  10416.,
      11928., 13440., 15072., 16704., 13440., 14784., 11640., 12720., 9720.,
      10560., 7590.,  9000.,  10611., 12222., 14007., 15792., 17724., 19656.,
      15876., 17472., 13815., 15102., 11595., 12600., 8100.,  9600.,  11310.,
      13020., 14910., 16800., 18840., 20880., 16800., 18480., 14550., 15900.,
      12150., 13200., 6990.,  8280.,  9747.,  11214., 12831., 14448., 16188.,
      17928., 14364., 15792., 12375., 13518., 10275., 11160., 6480.,  7680.,
      9048.,  10416., 11928., 13440., 15072., 16704., 13440., 14784., 11640.,
      12720., 9720.,  10560., 5370.,  6360.,  7485.,  8610.,  9849.,  11088.,
      12420., 13752., 11004., 12096., 9465.,  10338., 7845.,  8520.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22468., 22768., 23068., 23368., 23668., 23968., 24268., 24568., 24868.,
      25168., 25468., 25768., 26068., 26368., 21252., 21552., 21852., 22152.,
      22452., 22752., 23052., 23352., 23652., 23952., 24252., 24552., 24852.,
      25152., 20548., 20848., 21148., 21448., 21748., 22048., 22348., 22648.,
      22948., 23248., 23548., 23848., 24148., 24448., 16388., 16688., 16988.,
      17288., 17588., 17888., 18188., 18488., 18788., 19088., 19388., 19688.,
      19988., 20288., 13252., 13552., 13852., 14152., 14452., 14752., 15052.,
      15352., 15652., 15952., 16252., 16552., 16852., 17152., 13188., 13488.,
      13788., 14088., 14388., 14688., 14988., 15288., 15588., 15888., 16188.,
      16488., 16788., 17088., 14148., 14448., 14748., 15048., 15348., 15648.,
      15948., 16248., 16548., 16848., 17148., 17448., 17748., 18048.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6615.,  7140.,  7770.,  8400.,  9030.,  9786.,  10290., 11172., 11613.,
      12642., 12936., 14112., 14280., 15624., 15624., 17136., 11613., 12936.,
      12642., 14112., 9030.,  10290., 9786.,  11172., 6615.,  7770.,  7140.,
      8400.,  7560.,  8160.,  8880.,  9600.,  10320., 11184., 11760., 12768.,
      13272., 14448., 14784., 16128., 16320., 17856., 17856., 19584., 13272.,
      14784., 14448., 16128., 10320., 11760., 11184., 12768., 7560.,  8880.,
      8160.,  9600.,  8505.,  9180.,  9990.,  10800., 11610., 12582., 13230.,
      14364., 14931., 16254., 16632., 18144., 18360., 20088., 20088., 22032.,
      14931., 16632., 16254., 18144., 11610., 13230., 12582., 14364., 8505.,
      9990.,  9180.,  10800., 9450.,  10200., 11100., 12000., 12900., 13980.,
      14700., 15960., 16590., 18060., 18480., 20160., 20400., 22320., 22320.,
      24480., 16590., 18480., 18060., 20160., 12900., 14700., 13980., 15960.,
      9450.,  11100., 10200., 12000., 8505.,  9180.,  9990.,  10800., 11610.,
      12582., 13230., 14364., 14931., 16254., 16632., 18144., 18360., 20088.,
      20088., 22032., 14931., 16632., 16254., 18144., 11610., 13230., 12582.,
      14364., 8505.,  9990.,  9180.,  10800., 7560.,  8160.,  8880.,  9600.,
      10320., 11184., 11760., 12768., 13272., 14448., 14784., 16128., 16320.,
      17856., 17856., 19584., 13272., 14784., 14448., 16128., 10320., 11760.,
      11184., 12768., 7560.,  8880.,  8160.,  9600.,  6615.,  7140.,  7770.,
      8400.,  9030.,  9786.,  10290., 11172., 11613., 12642., 12936., 14112.,
      14280., 15624., 15624., 17136., 11613., 12936., 12642., 14112., 9030.,
      10290., 9786.,  11172., 6615.,  7770.,  7140.,  8400.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15896., 16520., 16472., 17120., 17048., 17720., 17624., 18320., 18200.,
      18920., 18776., 19520., 19352., 20120., 19928., 20720., 20504., 21320.,
      21080., 21920., 21656., 22520., 22232., 23120., 22808., 23720., 23384.,
      24320., 14616., 15240., 15192., 15840., 15768., 16440., 16344., 17040.,
      16920., 17640., 17496., 18240., 18072., 18840., 18648., 19440., 19224.,
      20040., 19800., 20640., 20376., 21240., 20952., 21840., 21528., 22440.,
      22104., 23040., 14872., 15496., 15448., 16096., 16024., 16696., 16600.,
      17296., 17176., 17896., 17752., 18496., 18328., 19096., 18904., 19696.,
      19480., 20296., 20056., 20896., 20632., 21496., 21208., 22096., 21784.,
      22696., 22360., 23296., 14616., 15240., 15192., 15840., 15768., 16440.,
      16344., 17040., 16920., 17640., 17496., 18240., 18072., 18840., 18648.,
      19440., 19224., 20040., 19800., 20640., 20376., 21240., 20952., 21840.,
      21528., 22440., 22104., 23040., 15896., 16520., 16472., 17120., 17048.,
      17720., 17624., 18320., 18200., 18920., 18776., 19520., 19352., 20120.,
      19928., 20720., 20504., 21320., 21080., 21920., 21656., 22520., 22232.,
      23120., 22808., 23720., 23384., 24320., 14616., 15240., 15192., 15840.,
      15768., 16440., 16344., 17040., 16920., 17640., 17496., 18240., 18072.,
      18840., 18648., 19440., 19224., 20040., 19800., 20640., 20376., 21240.,
      20952., 21840., 21528., 22440., 22104., 23040., 14872., 15496., 15448.,
      16096., 16024., 16696., 16600., 17296., 17176., 17896., 17752., 18496.,
      18328., 19096., 18904., 19696., 19480., 20296., 20056., 20896., 20632.,
      21496., 21208., 22096., 21784., 22696., 22360., 23296.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4641.,  5166.,  5691.,  6216.,  5502.,  6132.,  6762.,  7392.,  6552.,
      7308.,  8064.,  8820.,  7602.,  8484.,  9366.,  10248., 8757.,  9786.,
      10815., 11844., 9912.,  11088., 12264., 13440., 11088., 12432., 13776.,
      15120., 12264., 13776., 15288., 16800., 8799.,  10122., 11445., 12768.,
      9702.,  11172., 12642., 14112., 7392.,  8652.,  9912.,  11172., 8106.,
      9492.,  10878., 12264., 7035.,  8190.,  9345.,  10500., 7644.,  8904.,
      10164., 11424., 5304.,  5904.,  6504.,  7104.,  6288.,  7008.,  7728.,
      8448.,  7488.,  8352.,  9216.,  10080., 8688.,  9696.,  10704., 11712.,
      10008., 11184., 12360., 13536., 11328., 12672., 14016., 15360., 12672.,
      14208., 15744., 17280., 14016., 15744., 17472., 19200., 10056., 11568.,
      13080., 14592., 11088., 12768., 14448., 16128., 8448.,  9888.,  11328.,
      12768., 9264.,  10848., 12432., 14016., 8040.,  9360.,  10680., 12000.,
      8736.,  10176., 11616., 13056., 5967.,  6642.,  7317.,  7992.,  7074.,
      7884.,  8694.,  9504.,  8424.,  9396.,  10368., 11340., 9774.,  10908.,
      12042., 13176., 11259., 12582., 13905., 15228., 12744., 14256., 15768.,
      17280., 14256., 15984., 17712., 19440., 15768., 17712., 19656., 21600.,
      11313., 13014., 14715., 16416., 12474., 14364., 16254., 18144., 9504.,
      11124., 12744., 14364., 10422., 12204., 13986., 15768., 9045.,  10530.,
      12015., 13500., 9828.,  11448., 13068., 14688., 6630.,  7380.,  8130.,
      8880.,  7860.,  8760.,  9660.,  10560., 9360.,  10440., 11520., 12600.,
      10860., 12120., 13380., 14640., 12510., 13980., 15450., 16920., 14160.,
      15840., 17520., 19200., 15840., 17760., 19680., 21600., 17520., 19680.,
      21840., 24000., 12570., 14460., 16350., 18240., 13860., 15960., 18060.,
      20160., 10560., 12360., 14160., 15960., 11580., 13560., 15540., 17520.,
      10050., 11700., 13350., 15000., 10920., 12720., 14520., 16320., 5967.,
      6642.,  7317.,  7992.,  7074.,  7884.,  8694.,  9504.,  8424.,  9396.,
      10368., 11340., 9774.,  10908., 12042., 13176., 11259., 12582., 13905.,
      15228., 12744., 14256., 15768., 17280., 14256., 15984., 17712., 19440.,
      15768., 17712., 19656., 21600., 11313., 13014., 14715., 16416., 12474.,
      14364., 16254., 18144., 9504.,  11124., 12744., 14364., 10422., 12204.,
      13986., 15768., 9045.,  10530., 12015., 13500., 9828.,  11448., 13068.,
      14688., 5304.,  5904.,  6504.,  7104.,  6288.,  7008.,  7728.,  8448.,
      7488.,  8352.,  9216.,  10080., 8688.,  9696.,  10704., 11712., 10008.,
      11184., 12360., 13536., 11328., 12672., 14016., 15360., 12672., 14208.,
      15744., 17280., 14016., 15744., 17472., 19200., 10056., 11568., 13080.,
      14592., 11088., 12768., 14448., 16128., 8448.,  9888.,  11328., 12768.,
      9264.,  10848., 12432., 14016., 8040.,  9360.,  10680., 12000., 8736.,
      10176., 11616., 13056., 4641.,  5166.,  5691.,  6216.,  5502.,  6132.,
      6762.,  7392.,  6552.,  7308.,  8064.,  8820.,  7602.,  8484.,  9366.,
      10248., 8757.,  9786.,  10815., 11844., 9912.,  11088., 12264., 13440.,
      11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800., 8799.,
      10122., 11445., 12768., 9702.,  11172., 12642., 14112., 7392.,  8652.,
      9912.,  11172., 8106.,  9492.,  10878., 12264., 7035.,  8190.,  9345.,
      10500., 7644.,  8904.,  10164., 11424.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17856., 18480., 19104., 19728., 18472., 19120., 19768., 20416., 19088.,
      19760., 20432., 21104., 19704., 20400., 21096., 21792., 20320., 21040.,
      21760., 22480., 20936., 21680., 22424., 23168., 21552., 22320., 23088.,
      23856., 22168., 22960., 23752., 24544., 22784., 23600., 24416., 25232.,
      23400., 24240., 25080., 25920., 24016., 24880., 25744., 26608., 24632.,
      25520., 26408., 27296., 25248., 26160., 27072., 27984., 25864., 26800.,
      27736., 28672., 15296., 15920., 16544., 17168., 15912., 16560., 17208.,
      17856., 16528., 17200., 17872., 18544., 17144., 17840., 18536., 19232.,
      17760., 18480., 19200., 19920., 18376., 19120., 19864., 20608., 18992.,
      19760., 20528., 21296., 19608., 20400., 21192., 21984., 20224., 21040.,
      21856., 22672., 20840., 21680., 22520., 23360., 21456., 22320., 23184.,
      24048., 22072., 22960., 23848., 24736., 22688., 23600., 24512., 25424.,
      23304., 24240., 25176., 26112., 15808., 16432., 17056., 17680., 16424.,
      17072., 17720., 18368., 17040., 17712., 18384., 19056., 17656., 18352.,
      19048., 19744., 18272., 18992., 19712., 20432., 18888., 19632., 20376.,
      21120., 19504., 20272., 21040., 21808., 20120., 20912., 21704., 22496.,
      20736., 21552., 22368., 23184., 21352., 22192., 23032., 23872., 21968.,
      22832., 23696., 24560., 22584., 23472., 24360., 25248., 23200., 24112.,
      25024., 25936., 23816., 24752., 25688., 26624., 15296., 15920., 16544.,
      17168., 15912., 16560., 17208., 17856., 16528., 17200., 17872., 18544.,
      17144., 17840., 18536., 19232., 17760., 18480., 19200., 19920., 18376.,
      19120., 19864., 20608., 18992., 19760., 20528., 21296., 19608., 20400.,
      21192., 21984., 20224., 21040., 21856., 22672., 20840., 21680., 22520.,
      23360., 21456., 22320., 23184., 24048., 22072., 22960., 23848., 24736.,
      22688., 23600., 24512., 25424., 23304., 24240., 25176., 26112., 17856.,
      18480., 19104., 19728., 18472., 19120., 19768., 20416., 19088., 19760.,
      20432., 21104., 19704., 20400., 21096., 21792., 20320., 21040., 21760.,
      22480., 20936., 21680., 22424., 23168., 21552., 22320., 23088., 23856.,
      22168., 22960., 23752., 24544., 22784., 23600., 24416., 25232., 23400.,
      24240., 25080., 25920., 24016., 24880., 25744., 26608., 24632., 25520.,
      26408., 27296., 25248., 26160., 27072., 27984., 25864., 26800., 27736.,
      28672., 15296., 15920., 16544., 17168., 15912., 16560., 17208., 17856.,
      16528., 17200., 17872., 18544., 17144., 17840., 18536., 19232., 17760.,
      18480., 19200., 19920., 18376., 19120., 19864., 20608., 18992., 19760.,
      20528., 21296., 19608., 20400., 21192., 21984., 20224., 21040., 21856.,
      22672., 20840., 21680., 22520., 23360., 21456., 22320., 23184., 24048.,
      22072., 22960., 23848., 24736., 22688., 23600., 24512., 25424., 23304.,
      24240., 25176., 26112., 15808., 16432., 17056., 17680., 16424., 17072.,
      17720., 18368., 17040., 17712., 18384., 19056., 17656., 18352., 19048.,
      19744., 18272., 18992., 19712., 20432., 18888., 19632., 20376., 21120.,
      19504., 20272., 21040., 21808., 20120., 20912., 21704., 22496., 20736.,
      21552., 22368., 23184., 21352., 22192., 23032., 23872., 21968., 22832.,
      23696., 24560., 22584., 23472., 24360., 25248., 23200., 24112., 25024.,
      25936., 23816., 24752., 25688., 26624.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6606.,  7716.,  8826.,  9936.,  7317.,  8586.,  9855.,  11124., 8979.,
      10386., 11793., 13200., 11508., 13032., 14556., 16080., 10236., 11496.,
      12756., 14016., 8601.,  9618.,  10635., 11652., 6687.,  7482.,  8277.,
      9072.,  7152.,  8352.,  9552.,  10752., 7896.,  9264.,  10632., 12000.,
      9672.,  11184., 12696., 14208., 12384., 14016., 15648., 17280., 10944.,
      12288., 13632., 14976., 9144.,  10224., 11304., 12384., 7080.,  7920.,
      8760.,  9600.,  8394.,  9804.,  11214., 12624., 9291.,  10902., 12513.,
      14124., 11397., 13182., 14967., 16752., 14604., 16536., 18468., 20400.,
      12972., 14568., 16164., 17760., 10887., 12174., 13461., 14748., 8457.,
      9462.,  10467., 11472., 8940.,  10440., 11940., 13440., 9870.,  11580.,
      13290., 15000., 12090., 13980., 15870., 17760., 15480., 17520., 19560.,
      21600., 13680., 15360., 17040., 18720., 11430., 12780., 14130., 15480.,
      8850.,  9900.,  10950., 12000., 7698.,  8988.,  10278., 11568., 8475.,
      9942.,  11409., 12876., 10365., 11982., 13599., 15216., 13260., 15000.,
      16740., 18480., 11652., 13080., 14508., 15936., 9687.,  10830., 11973.,
      13116., 7473.,  8358.,  9243.,  10128., 7152.,  8352.,  9552.,  10752.,
      7896.,  9264.,  10632., 12000., 9672.,  11184., 12696., 14208., 12384.,
      14016., 15648., 17280., 10944., 12288., 13632., 14976., 9144.,  10224.,
      11304., 12384., 7080.,  7920.,  8760.,  9600.,  5910.,  6900.,  7890.,
      8880.,  6501.,  7626.,  8751.,  9876.,  7947.,  9186.,  10425., 11664.,
      10164., 11496., 12828., 14160., 8916.,  10008., 11100., 12192., 7401.,
      8274.,  9147.,  10020., 5703.,  6378.,  7053.,  7728.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16220., 16520., 16820., 17120., 17420., 17720., 18020., 18320., 18620.,
      18920., 19220., 19520., 19820., 20120., 20420., 20720., 21020., 21320.,
      21620., 21920., 22220., 22520., 22820., 23120., 23420., 23720., 24020.,
      24320., 14940., 15240., 15540., 15840., 16140., 16440., 16740., 17040.,
      17340., 17640., 17940., 18240., 18540., 18840., 19140., 19440., 19740.,
      20040., 20340., 20640., 20940., 21240., 21540., 21840., 22140., 22440.,
      22740., 23040., 15196., 15496., 15796., 16096., 16396., 16696., 16996.,
      17296., 17596., 17896., 18196., 18496., 18796., 19096., 19396., 19696.,
      19996., 20296., 20596., 20896., 21196., 21496., 21796., 22096., 22396.,
      22696., 22996., 23296., 14940., 15240., 15540., 15840., 16140., 16440.,
      16740., 17040., 17340., 17640., 17940., 18240., 18540., 18840., 19140.,
      19440., 19740., 20040., 20340., 20640., 20940., 21240., 21540., 21840.,
      22140., 22440., 22740., 23040., 16220., 16520., 16820., 17120., 17420.,
      17720., 18020., 18320., 18620., 18920., 19220., 19520., 19820., 20120.,
      20420., 20720., 21020., 21320., 21620., 21920., 22220., 22520., 22820.,
      23120., 23420., 23720., 24020., 24320., 14940., 15240., 15540., 15840.,
      16140., 16440., 16740., 17040., 17340., 17640., 17940., 18240., 18540.,
      18840., 19140., 19440., 19740., 20040., 20340., 20640., 20940., 21240.,
      21540., 21840., 22140., 22440., 22740., 23040., 15196., 15496., 15796.,
      16096., 16396., 16696., 16996., 17296., 17596., 17896., 18196., 18496.,
      18796., 19096., 19396., 19696., 19996., 20296., 20596., 20896., 21196.,
      21496., 21796., 22096., 22396., 22696., 22996., 23296.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7035.,  7644.,  8190.,  8904.,  9345.,  10164., 10500., 11424., 7392.,
      8106.,  8652.,  9492.,  9912.,  10878., 11172., 12264., 8799.,  9702.,
      10122., 11172., 11445., 12642., 12768., 14112., 11088., 12264., 12432.,
      13776., 13776., 15288., 15120., 16800., 8757.,  9912.,  9786.,  11088.,
      10815., 12264., 11844., 13440., 6552.,  7602.,  7308.,  8484.,  8064.,
      9366.,  8820.,  10248., 4641.,  5502.,  5166.,  6132.,  5691.,  6762.,
      6216.,  7392.,  8040.,  8736.,  9360.,  10176., 10680., 11616., 12000.,
      13056., 8448.,  9264.,  9888.,  10848., 11328., 12432., 12768., 14016.,
      10056., 11088., 11568., 12768., 13080., 14448., 14592., 16128., 12672.,
      14016., 14208., 15744., 15744., 17472., 17280., 19200., 10008., 11328.,
      11184., 12672., 12360., 14016., 13536., 15360., 7488.,  8688.,  8352.,
      9696.,  9216.,  10704., 10080., 11712., 5304.,  6288.,  5904.,  7008.,
      6504.,  7728.,  7104.,  8448.,  9045.,  9828.,  10530., 11448., 12015.,
      13068., 13500., 14688., 9504.,  10422., 11124., 12204., 12744., 13986.,
      14364., 15768., 11313., 12474., 13014., 14364., 14715., 16254., 16416.,
      18144., 14256., 15768., 15984., 17712., 17712., 19656., 19440., 21600.,
      11259., 12744., 12582., 14256., 13905., 15768., 15228., 17280., 8424.,
      9774.,  9396.,  10908., 10368., 12042., 11340., 13176., 5967.,  7074.,
      6642.,  7884.,  7317.,  8694.,  7992.,  9504.,  10050., 10920., 11700.,
      12720., 13350., 14520., 15000., 16320., 10560., 11580., 12360., 13560.,
      14160., 15540., 15960., 17520., 12570., 13860., 14460., 15960., 16350.,
      18060., 18240., 20160., 15840., 17520., 17760., 19680., 19680., 21840.,
      21600., 24000., 12510., 14160., 13980., 15840., 15450., 17520., 16920.,
      19200., 9360.,  10860., 10440., 12120., 11520., 13380., 12600., 14640.,
      6630.,  7860.,  7380.,  8760.,  8130.,  9660.,  8880.,  10560., 9045.,
      9828.,  10530., 11448., 12015., 13068., 13500., 14688., 9504.,  10422.,
      11124., 12204., 12744., 13986., 14364., 15768., 11313., 12474., 13014.,
      14364., 14715., 16254., 16416., 18144., 14256., 15768., 15984., 17712.,
      17712., 19656., 19440., 21600., 11259., 12744., 12582., 14256., 13905.,
      15768., 15228., 17280., 8424.,  9774.,  9396.,  10908., 10368., 12042.,
      11340., 13176., 5967.,  7074.,  6642.,  7884.,  7317.,  8694.,  7992.,
      9504.,  8040.,  8736.,  9360.,  10176., 10680., 11616., 12000., 13056.,
      8448.,  9264.,  9888.,  10848., 11328., 12432., 12768., 14016., 10056.,
      11088., 11568., 12768., 13080., 14448., 14592., 16128., 12672., 14016.,
      14208., 15744., 15744., 17472., 17280., 19200., 10008., 11328., 11184.,
      12672., 12360., 14016., 13536., 15360., 7488.,  8688.,  8352.,  9696.,
      9216.,  10704., 10080., 11712., 5304.,  6288.,  5904.,  7008.,  6504.,
      7728.,  7104.,  8448.,  7035.,  7644.,  8190.,  8904.,  9345.,  10164.,
      10500., 11424., 7392.,  8106.,  8652.,  9492.,  9912.,  10878., 11172.,
      12264., 8799.,  9702.,  10122., 11172., 11445., 12642., 12768., 14112.,
      11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800., 8757.,
      9912.,  9786.,  11088., 10815., 12264., 11844., 13440., 6552.,  7602.,
      7308.,  8484.,  8064.,  9366.,  8820.,  10248., 4641.,  5502.,  5166.,
      6132.,  5691.,  6762.,  6216.,  7392.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11760., 12216., 12336., 12816., 12912., 13416., 13488., 14016., 14064.,
      14616., 14640., 15216., 15216., 15816., 15792., 16416., 16368., 17016.,
      16944., 17616., 17520., 18216., 18096., 18816., 18672., 19416., 19248.,
      20016., 19824., 20616., 20400., 21216., 20976., 21816., 21552., 22416.,
      22128., 23016., 22704., 23616., 23280., 24216., 23856., 24816., 24432.,
      25416., 25008., 26016., 25584., 26616., 26160., 27216., 26736., 27816.,
      27312., 28416., 10224., 10680., 10800., 11280., 11376., 11880., 11952.,
      12480., 12528., 13080., 13104., 13680., 13680., 14280., 14256., 14880.,
      14832., 15480., 15408., 16080., 15984., 16680., 16560., 17280., 17136.,
      17880., 17712., 18480., 18288., 19080., 18864., 19680., 19440., 20280.,
      20016., 20880., 20592., 21480., 21168., 22080., 21744., 22680., 22320.,
      23280., 22896., 23880., 23472., 24480., 24048., 25080., 24624., 25680.,
      25200., 26280., 25776., 26880., 11760., 12216., 12336., 12816., 12912.,
      13416., 13488., 14016., 14064., 14616., 14640., 15216., 15216., 15816.,
      15792., 16416., 16368., 17016., 16944., 17616., 17520., 18216., 18096.,
      18816., 18672., 19416., 19248., 20016., 19824., 20616., 20400., 21216.,
      20976., 21816., 21552., 22416., 22128., 23016., 22704., 23616., 23280.,
      24216., 23856., 24816., 24432., 25416., 25008., 26016., 25584., 26616.,
      26160., 27216., 26736., 27816., 27312., 28416., 10224., 10680., 10800.,
      11280., 11376., 11880., 11952., 12480., 12528., 13080., 13104., 13680.,
      13680., 14280., 14256., 14880., 14832., 15480., 15408., 16080., 15984.,
      16680., 16560., 17280., 17136., 17880., 17712., 18480., 18288., 19080.,
      18864., 19680., 19440., 20280., 20016., 20880., 20592., 21480., 21168.,
      22080., 21744., 22680., 22320., 23280., 22896., 23880., 23472., 24480.,
      24048., 25080., 24624., 25680., 25200., 26280., 25776., 26880., 11760.,
      12216., 12336., 12816., 12912., 13416., 13488., 14016., 14064., 14616.,
      14640., 15216., 15216., 15816., 15792., 16416., 16368., 17016., 16944.,
      17616., 17520., 18216., 18096., 18816., 18672., 19416., 19248., 20016.,
      19824., 20616., 20400., 21216., 20976., 21816., 21552., 22416., 22128.,
      23016., 22704., 23616., 23280., 24216., 23856., 24816., 24432., 25416.,
      25008., 26016., 25584., 26616., 26160., 27216., 26736., 27816., 27312.,
      28416., 10224., 10680., 10800., 11280., 11376., 11880., 11952., 12480.,
      12528., 13080., 13104., 13680., 13680., 14280., 14256., 14880., 14832.,
      15480., 15408., 16080., 15984., 16680., 16560., 17280., 17136., 17880.,
      17712., 18480., 18288., 19080., 18864., 19680., 19440., 20280., 20016.,
      20880., 20592., 21480., 21168., 22080., 21744., 22680., 22320., 23280.,
      22896., 23880., 23472., 24480., 24048., 25080., 24624., 25680., 25200.,
      26280., 25776., 26880., 11760., 12216., 12336., 12816., 12912., 13416.,
      13488., 14016., 14064., 14616., 14640., 15216., 15216., 15816., 15792.,
      16416., 16368., 17016., 16944., 17616., 17520., 18216., 18096., 18816.,
      18672., 19416., 19248., 20016., 19824., 20616., 20400., 21216., 20976.,
      21816., 21552., 22416., 22128., 23016., 22704., 23616., 23280., 24216.,
      23856., 24816., 24432., 25416., 25008., 26016., 25584., 26616., 26160.,
      27216., 26736., 27816., 27312., 28416.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4053.,  4662.,  5271.,  5880.,  4914.,  5628.,  6342.,  7056.,  5775.,
      6594.,  7413.,  8232.,  6636.,  7560.,  8484.,  9408.,  4662.,  5376.,
      6090.,  6804.,  5712.,  6552.,  7392.,  8232.,  6762.,  7728.,  8694.,
      9660.,  7812.,  8904.,  9996.,  11088., 7287.,  8190.,  9093.,  9996.,
      8442.,  9492.,  10542., 11592., 9597.,  10794., 11991., 13188., 10752.,
      12096., 13440., 14784., 11592., 12768., 13944., 15120., 12768., 14112.,
      15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480.,
      20160., 7287.,  8442.,  9597.,  10752., 8190.,  9492.,  10794., 12096.,
      9093.,  10542., 11991., 13440., 9996.,  11592., 13188., 14784., 4662.,
      5712.,  6762.,  7812.,  5376.,  6552.,  7728.,  8904.,  6090.,  7392.,
      8694.,  9996.,  6804.,  8232.,  9660.,  11088., 4053.,  4914.,  5775.,
      6636.,  4662.,  5628.,  6594.,  7560.,  5271.,  6342.,  7413.,  8484.,
      5880.,  7056.,  8232.,  9408.,  4632.,  5328.,  6024.,  6720.,  5616.,
      6432.,  7248.,  8064.,  6600.,  7536.,  8472.,  9408.,  7584.,  8640.,
      9696.,  10752., 5328.,  6144.,  6960.,  7776.,  6528.,  7488.,  8448.,
      9408.,  7728.,  8832.,  9936.,  11040., 8928.,  10176., 11424., 12672.,
      8328.,  9360.,  10392., 11424., 9648.,  10848., 12048., 13248., 10968.,
      12336., 13704., 15072., 12288., 13824., 15360., 16896., 13248., 14592.,
      15936., 17280., 14592., 16128., 17664., 19200., 15936., 17664., 19392.,
      21120., 17280., 19200., 21120., 23040., 8328.,  9648.,  10968., 12288.,
      9360.,  10848., 12336., 13824., 10392., 12048., 13704., 15360., 11424.,
      13248., 15072., 16896., 5328.,  6528.,  7728.,  8928.,  6144.,  7488.,
      8832.,  10176., 6960.,  8448.,  9936.,  11424., 7776.,  9408.,  11040.,
      12672., 4632.,  5616.,  6600.,  7584.,  5328.,  6432.,  7536.,  8640.,
      6024.,  7248.,  8472.,  9696.,  6720.,  8064.,  9408.,  10752., 5211.,
      5994.,  6777.,  7560.,  6318.,  7236.,  8154.,  9072.,  7425.,  8478.,
      9531.,  10584., 8532.,  9720.,  10908., 12096., 5994.,  6912.,  7830.,
      8748.,  7344.,  8424.,  9504.,  10584., 8694.,  9936.,  11178., 12420.,
      10044., 11448., 12852., 14256., 9369.,  10530., 11691., 12852., 10854.,
      12204., 13554., 14904., 12339., 13878., 15417., 16956., 13824., 15552.,
      17280., 19008., 14904., 16416., 17928., 19440., 16416., 18144., 19872.,
      21600., 17928., 19872., 21816., 23760., 19440., 21600., 23760., 25920.,
      9369.,  10854., 12339., 13824., 10530., 12204., 13878., 15552., 11691.,
      13554., 15417., 17280., 12852., 14904., 16956., 19008., 5994.,  7344.,
      8694.,  10044., 6912.,  8424.,  9936.,  11448., 7830.,  9504.,  11178.,
      12852., 8748.,  10584., 12420., 14256., 5211.,  6318.,  7425.,  8532.,
      5994.,  7236.,  8478.,  9720.,  6777.,  8154.,  9531.,  10908., 7560.,
      9072.,  10584., 12096., 5790.,  6660.,  7530.,  8400.,  7020.,  8040.,
      9060.,  10080., 8250.,  9420.,  10590., 11760., 9480.,  10800., 12120.,
      13440., 6660.,  7680.,  8700.,  9720.,  8160.,  9360.,  10560., 11760.,
      9660.,  11040., 12420., 13800., 11160., 12720., 14280., 15840., 10410.,
      11700., 12990., 14280., 12060., 13560., 15060., 16560., 13710., 15420.,
      17130., 18840., 15360., 17280., 19200., 21120., 16560., 18240., 19920.,
      21600., 18240., 20160., 22080., 24000., 19920., 22080., 24240., 26400.,
      21600., 24000., 26400., 28800., 10410., 12060., 13710., 15360., 11700.,
      13560., 15420., 17280., 12990., 15060., 17130., 19200., 14280., 16560.,
      18840., 21120., 6660.,  8160.,  9660.,  11160., 7680.,  9360.,  11040.,
      12720., 8700.,  10560., 12420., 14280., 9720.,  11760., 13800., 15840.,
      5790.,  7020.,  8250.,  9480.,  6660.,  8040.,  9420.,  10800., 7530.,
      9060.,  10590., 12120., 8400.,  10080., 11760., 13440., 5211.,  5994.,
      6777.,  7560.,  6318.,  7236.,  8154.,  9072.,  7425.,  8478.,  9531.,
      10584., 8532.,  9720.,  10908., 12096., 5994.,  6912.,  7830.,  8748.,
      7344.,  8424.,  9504.,  10584., 8694.,  9936.,  11178., 12420., 10044.,
      11448., 12852., 14256., 9369.,  10530., 11691., 12852., 10854., 12204.,
      13554., 14904., 12339., 13878., 15417., 16956., 13824., 15552., 17280.,
      19008., 14904., 16416., 17928., 19440., 16416., 18144., 19872., 21600.,
      17928., 19872., 21816., 23760., 19440., 21600., 23760., 25920., 9369.,
      10854., 12339., 13824., 10530., 12204., 13878., 15552., 11691., 13554.,
      15417., 17280., 12852., 14904., 16956., 19008., 5994.,  7344.,  8694.,
      10044., 6912.,  8424.,  9936.,  11448., 7830.,  9504.,  11178., 12852.,
      8748.,  10584., 12420., 14256., 5211.,  6318.,  7425.,  8532.,  5994.,
      7236.,  8478.,  9720.,  6777.,  8154.,  9531.,  10908., 7560.,  9072.,
      10584., 12096., 4632.,  5328.,  6024.,  6720.,  5616.,  6432.,  7248.,
      8064.,  6600.,  7536.,  8472.,  9408.,  7584.,  8640.,  9696.,  10752.,
      5328.,  6144.,  6960.,  7776.,  6528.,  7488.,  8448.,  9408.,  7728.,
      8832.,  9936.,  11040., 8928.,  10176., 11424., 12672., 8328.,  9360.,
      10392., 11424., 9648.,  10848., 12048., 13248., 10968., 12336., 13704.,
      15072., 12288., 13824., 15360., 16896., 13248., 14592., 15936., 17280.,
      14592., 16128., 17664., 19200., 15936., 17664., 19392., 21120., 17280.,
      19200., 21120., 23040., 8328.,  9648.,  10968., 12288., 9360.,  10848.,
      12336., 13824., 10392., 12048., 13704., 15360., 11424., 13248., 15072.,
      16896., 5328.,  6528.,  7728.,  8928.,  6144.,  7488.,  8832.,  10176.,
      6960.,  8448.,  9936.,  11424., 7776.,  9408.,  11040., 12672., 4632.,
      5616.,  6600.,  7584.,  5328.,  6432.,  7536.,  8640.,  6024.,  7248.,
      8472.,  9696.,  6720.,  8064.,  9408.,  10752., 4053.,  4662.,  5271.,
      5880.,  4914.,  5628.,  6342.,  7056.,  5775.,  6594.,  7413.,  8232.,
      6636.,  7560.,  8484.,  9408.,  4662.,  5376.,  6090.,  6804.,  5712.,
      6552.,  7392.,  8232.,  6762.,  7728.,  8694.,  9660.,  7812.,  8904.,
      9996.,  11088., 7287.,  8190.,  9093.,  9996.,  8442.,  9492.,  10542.,
      11592., 9597.,  10794., 11991., 13188., 10752., 12096., 13440., 14784.,
      11592., 12768., 13944., 15120., 12768., 14112., 15456., 16800., 13944.,
      15456., 16968., 18480., 15120., 16800., 18480., 20160., 7287.,  8442.,
      9597.,  10752., 8190.,  9492.,  10794., 12096., 9093.,  10542., 11991.,
      13440., 9996.,  11592., 13188., 14784., 4662.,  5712.,  6762.,  7812.,
      5376.,  6552.,  7728.,  8904.,  6090.,  7392.,  8694.,  9996.,  6804.,
      8232.,  9660.,  11088., 4053.,  4914.,  5775.,  6636.,  4662.,  5628.,
      6594.,  7560.,  5271.,  6342.,  7413.,  8484.,  5880.,  7056.,  8232.,
      9408.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1176.,  1248.,  1320.,  1392.,  1536.,  1632.,  1728.,  1824.,  1896.,
      2016.,  2136.,  2256.,  2256.,  2400.,  2544.,  2688.,  2616.,  2784.,
      2952.,  3120.,  2976.,  3168.,  3360.,  3552.,  3336.,  3552.,  3768.,
      3984.,  3696.,  3936.,  4176.,  4416.,  4056.,  4320.,  4584.,  4848.,
      4416.,  4704.,  4992.,  5280.,  4776.,  5088.,  5400.,  5712.,  5136.,
      5472.,  5808.,  6144.,  5496.,  5856.,  6216.,  6576.,  5856.,  6240.,
      6624.,  7008.,  6216.,  6624.,  7032.,  7440.,  6576.,  7008.,  7440.,
      7872.,  6936.,  7392.,  7848.,  8304.,  7296.,  7776.,  8256.,  8736.,
      7656.,  8160.,  8664.,  9168.,  8016.,  8544.,  9072.,  9600.,  8376.,
      8928.,  9480.,  10032., 8736.,  9312.,  9888.,  10464., 9096.,  9696.,
      10296., 10896., 9456.,  10080., 10704., 11328., 9816.,  10464., 11112.,
      11760., 10176., 10848., 11520., 12192., 10536., 11232., 11928., 12624.,
      10896., 11616., 12336., 13056., 1176.,  1248.,  1320.,  1392.,  1536.,
      1632.,  1728.,  1824.,  1896.,  2016.,  2136.,  2256.,  2256.,  2400.,
      2544.,  2688.,  2616.,  2784.,  2952.,  3120.,  2976.,  3168.,  3360.,
      3552.,  3336.,  3552.,  3768.,  3984.,  3696.,  3936.,  4176.,  4416.,
      4056.,  4320.,  4584.,  4848.,  4416.,  4704.,  4992.,  5280.,  4776.,
      5088.,  5400.,  5712.,  5136.,  5472.,  5808.,  6144.,  5496.,  5856.,
      6216.,  6576.,  5856.,  6240.,  6624.,  7008.,  6216.,  6624.,  7032.,
      7440.,  6576.,  7008.,  7440.,  7872.,  6936.,  7392.,  7848.,  8304.,
      7296.,  7776.,  8256.,  8736.,  7656.,  8160.,  8664.,  9168.,  8016.,
      8544.,  9072.,  9600.,  8376.,  8928.,  9480.,  10032., 8736.,  9312.,
      9888.,  10464., 9096.,  9696.,  10296., 10896., 9456.,  10080., 10704.,
      11328., 9816.,  10464., 11112., 11760., 10176., 10848., 11520., 12192.,
      10536., 11232., 11928., 12624., 10896., 11616., 12336., 13056., 1176.,
      1248.,  1320.,  1392.,  1536.,  1632.,  1728.,  1824.,  1896.,  2016.,
      2136.,  2256.,  2256.,  2400.,  2544.,  2688.,  2616.,  2784.,  2952.,
      3120.,  2976.,  3168.,  3360.,  3552.,  3336.,  3552.,  3768.,  3984.,
      3696.,  3936.,  4176.,  4416.,  4056.,  4320.,  4584.,  4848.,  4416.,
      4704.,  4992.,  5280.,  4776.,  5088.,  5400.,  5712.,  5136.,  5472.,
      5808.,  6144.,  5496.,  5856.,  6216.,  6576.,  5856.,  6240.,  6624.,
      7008.,  6216.,  6624.,  7032.,  7440.,  6576.,  7008.,  7440.,  7872.,
      6936.,  7392.,  7848.,  8304.,  7296.,  7776.,  8256.,  8736.,  7656.,
      8160.,  8664.,  9168.,  8016.,  8544.,  9072.,  9600.,  8376.,  8928.,
      9480.,  10032., 8736.,  9312.,  9888.,  10464., 9096.,  9696.,  10296.,
      10896., 9456.,  10080., 10704., 11328., 9816.,  10464., 11112., 11760.,
      10176., 10848., 11520., 12192., 10536., 11232., 11928., 12624., 10896.,
      11616., 12336., 13056., 1176.,  1248.,  1320.,  1392.,  1536.,  1632.,
      1728.,  1824.,  1896.,  2016.,  2136.,  2256.,  2256.,  2400.,  2544.,
      2688.,  2616.,  2784.,  2952.,  3120.,  2976.,  3168.,  3360.,  3552.,
      3336.,  3552.,  3768.,  3984.,  3696.,  3936.,  4176.,  4416.,  4056.,
      4320.,  4584.,  4848.,  4416.,  4704.,  4992.,  5280.,  4776.,  5088.,
      5400.,  5712.,  5136.,  5472.,  5808.,  6144.,  5496.,  5856.,  6216.,
      6576.,  5856.,  6240.,  6624.,  7008.,  6216.,  6624.,  7032.,  7440.,
      6576.,  7008.,  7440.,  7872.,  6936.,  7392.,  7848.,  8304.,  7296.,
      7776.,  8256.,  8736.,  7656.,  8160.,  8664.,  9168.,  8016.,  8544.,
      9072.,  9600.,  8376.,  8928.,  9480.,  10032., 8736.,  9312.,  9888.,
      10464., 9096.,  9696.,  10296., 10896., 9456.,  10080., 10704., 11328.,
      9816.,  10464., 11112., 11760., 10176., 10848., 11520., 12192., 10536.,
      11232., 11928., 12624., 10896., 11616., 12336., 13056., 1176.,  1248.,
      1320.,  1392.,  1536.,  1632.,  1728.,  1824.,  1896.,  2016.,  2136.,
      2256.,  2256.,  2400.,  2544.,  2688.,  2616.,  2784.,  2952.,  3120.,
      2976.,  3168.,  3360.,  3552.,  3336.,  3552.,  3768.,  3984.,  3696.,
      3936.,  4176.,  4416.,  4056.,  4320.,  4584.,  4848.,  4416.,  4704.,
      4992.,  5280.,  4776.,  5088.,  5400.,  5712.,  5136.,  5472.,  5808.,
      6144.,  5496.,  5856.,  6216.,  6576.,  5856.,  6240.,  6624.,  7008.,
      6216.,  6624.,  7032.,  7440.,  6576.,  7008.,  7440.,  7872.,  6936.,
      7392.,  7848.,  8304.,  7296.,  7776.,  8256.,  8736.,  7656.,  8160.,
      8664.,  9168.,  8016.,  8544.,  9072.,  9600.,  8376.,  8928.,  9480.,
      10032., 8736.,  9312.,  9888.,  10464., 9096.,  9696.,  10296., 10896.,
      9456.,  10080., 10704., 11328., 9816.,  10464., 11112., 11760., 10176.,
      10848., 11520., 12192., 10536., 11232., 11928., 12624., 10896., 11616.,
      12336., 13056., 1176.,  1248.,  1320.,  1392.,  1536.,  1632.,  1728.,
      1824.,  1896.,  2016.,  2136.,  2256.,  2256.,  2400.,  2544.,  2688.,
      2616.,  2784.,  2952.,  3120.,  2976.,  3168.,  3360.,  3552.,  3336.,
      3552.,  3768.,  3984.,  3696.,  3936.,  4176.,  4416.,  4056.,  4320.,
      4584.,  4848.,  4416.,  4704.,  4992.,  5280.,  4776.,  5088.,  5400.,
      5712.,  5136.,  5472.,  5808.,  6144.,  5496.,  5856.,  6216.,  6576.,
      5856.,  6240.,  6624.,  7008.,  6216.,  6624.,  7032.,  7440.,  6576.,
      7008.,  7440.,  7872.,  6936.,  7392.,  7848.,  8304.,  7296.,  7776.,
      8256.,  8736.,  7656.,  8160.,  8664.,  9168.,  8016.,  8544.,  9072.,
      9600.,  8376.,  8928.,  9480.,  10032., 8736.,  9312.,  9888.,  10464.,
      9096.,  9696.,  10296., 10896., 9456.,  10080., 10704., 11328., 9816.,
      10464., 11112., 11760., 10176., 10848., 11520., 12192., 10536., 11232.,
      11928., 12624., 10896., 11616., 12336., 13056., 1176.,  1248.,  1320.,
      1392.,  1536.,  1632.,  1728.,  1824.,  1896.,  2016.,  2136.,  2256.,
      2256.,  2400.,  2544.,  2688.,  2616.,  2784.,  2952.,  3120.,  2976.,
      3168.,  3360.,  3552.,  3336.,  3552.,  3768.,  3984.,  3696.,  3936.,
      4176.,  4416.,  4056.,  4320.,  4584.,  4848.,  4416.,  4704.,  4992.,
      5280.,  4776.,  5088.,  5400.,  5712.,  5136.,  5472.,  5808.,  6144.,
      5496.,  5856.,  6216.,  6576.,  5856.,  6240.,  6624.,  7008.,  6216.,
      6624.,  7032.,  7440.,  6576.,  7008.,  7440.,  7872.,  6936.,  7392.,
      7848.,  8304.,  7296.,  7776.,  8256.,  8736.,  7656.,  8160.,  8664.,
      9168.,  8016.,  8544.,  9072.,  9600.,  8376.,  8928.,  9480.,  10032.,
      8736.,  9312.,  9888.,  10464., 9096.,  9696.,  10296., 10896., 9456.,
      10080., 10704., 11328., 9816.,  10464., 11112., 11760., 10176., 10848.,
      11520., 12192., 10536., 11232., 11928., 12624., 10896., 11616., 12336.,
      13056.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10025., 10786., 11532., 12386., 10660., 9060.,  7639.,  9528.,  11708.,
      14112., 17084., 16432., 15516., 12200., 11265., 12538., 13724., 15004.,
      13284., 11780., 10279., 13202., 16647., 20456., 24951., 20456., 16647.,
      13202., 10279., 11780., 13284., 15004., 13724., 12538., 11265., 12200.,
      15516., 16432., 17084., 14112., 11708., 9528.,  7639.,  9060.,  10660.,
      12386., 11532., 10786., 10025.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23502., 22248., 21058., 19932., 20598., 21264., 21930., 22392., 19858.,
      17452., 16518., 17184., 17850., 18516., 19170., 18556., 18006., 18672.,
      19338., 20004., 20670., 21516., 21094., 20736., 21402., 22068., 22734.,
      23400., 22966., 22096., 21930., 22596., 23262., 23928., 24594., 25504.,
      25722., 24084., 22510., 21000., 21666., 22332., 23626., 24036., 22590.,
      21208., 19890., 20556., 21222.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8435.,  9506.,  9369.,  10612., 10492., 11912., 11970., 13572., 11156.,
      12584., 10487., 11736., 9717.,  10782., 9120.,  10336., 10492., 11912.,
      12080., 13696., 14268., 16088., 13648., 15264., 13068., 14488., 10192.,
      11408., 10047., 11426., 11978., 13588., 14380., 16216., 17295., 19352.,
      16900., 18728., 13572., 15176., 10741., 12110., 11292., 12820., 13929.,
      15710., 17040., 19072., 20917., 23198., 17056., 19088., 14037., 15822.,
      11488., 13012., 10857., 12238., 13593., 15208., 17012., 18856., 17316.,
      19384., 14364., 16200., 12059., 13668., 10119., 11490., 10176., 11392.,
      13068., 14488., 13792., 15424., 14428., 16264., 12256., 13888., 10572.,
      12008., 9216.,  10448., 9733.,  10798., 10412., 11656., 11172., 12600.,
      11907., 13508., 10364., 11784., 9250.,  10500., 8399.,  9474.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10982., 11612., 10646., 11280., 10374., 11012., 9430.,  10040., 8358.,
      8940.,  7414.,  7968.,  7142.,  7700.,  8246.,  8880.,  7686.,  8292.,
      7254.,  7832.,  6694.,  7244.,  6742.,  7296.,  6854.,  7412.,  7158.,
      7720.,  8198.,  8772.,  8502.,  9080.,  8870.,  9452.,  9046.,  9632.,
      9286.,  9876.,  9590.,  10184., 10086., 10684., 9654.,  10264., 10150.,
      10764., 9686.,  10304., 10054., 10676., 10486., 11112., 10982., 11612.,
      10646., 11280., 8358.,  8940.,  7414.,  7968.,  7142.,  7700.,  7670.,
      8264.,  8198.,  8828.,  8246.,  8880.,  7686.,  8292.,  6742.,  7296.,
      6854.,  7412.,  7158.,  7720.,  7526.,  8092.,  7958.,  8528.,  8198.,
      8772.,  8502.,  9080.,  9286.,  9876.,  9590.,  10184., 10086., 10684.,
      9622.,  10224., 9222.,  9828.,  9654.,  10264., 10150., 10764.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7095.,  8166.,  9237.,  10308., 8663.,  9906.,  11149., 12392., 10828.,
      12248., 13668., 15088., 11042., 12644., 14246., 15848., 9460.,  10888.,
      12316., 13744., 8573.,  9822.,  11071., 12320., 7985.,  9050.,  10115.,
      11180., 8384.,  9600.,  10816., 12032., 10828., 12248., 13668., 15088.,
      11024., 12640., 14256., 15872., 12028., 13848., 15668., 17488., 11088.,
      12704., 14320., 15936., 10732., 12152., 13572., 14992., 8352.,  9568.,
      10784., 12000., 10395., 11774., 13153., 14532., 11050., 12660., 14270.,
      15880., 12236., 14072., 15908., 17744., 14213., 16270., 18327., 20384.,
      13956., 15784., 17612., 19440., 11172., 12776., 14380., 15984., 9089.,
      10458., 11827., 13196., 10416., 11944., 13472., 15000., 11837., 13618.,
      15399., 17180., 13936., 15968., 18000., 20032., 17201., 19482., 21763.,
      24044., 13968., 16000., 18032., 20064., 11873., 13658., 15443., 17228.,
      10444., 11968., 13492., 15016., 9229.,  10610., 11991., 13372., 11059.,
      12674., 14289., 15904., 13908., 15752., 17596., 19440., 14100., 16168.,
      18236., 20304., 12204., 14040., 15876., 17712., 11037., 12646., 14255.,
      15864., 10371., 11742., 13113., 14484., 8320.,  9536.,  10752., 11968.,
      10732., 12152., 13572., 14992., 11360., 12992., 14624., 16256., 12332.,
      14168., 16004., 17840., 11360., 12992., 14624., 16256., 10844., 12280.,
      13716., 15152., 8432.,  9664.,  10896., 12128., 8017.,  9082.,  10147.,
      11212., 8540.,  9784.,  11028., 12272., 9492.,  10920., 12348., 13776.,
      10869., 12470., 14071., 15672., 10700., 12120., 13540., 14960., 8546.,
      9796.,  11046., 12296., 7195.,  8270.,  9345.,  10420.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9494.,  10124., 10754., 11384., 9330.,  9964.,  10598., 11232., 9294.,
      9932.,  10570., 11208., 8970.,  9580.,  10190., 10800., 8390.,  8972.,
      9554.,  10136., 8066.,  8620.,  9174.,  9728.,  8030.,  8588.,  9146.,
      9704.,  8626.,  9260.,  9894.,  10528., 8046.,  8652.,  9258.,  9864.,
      7722.,  8300.,  8878.,  9456.,  8166.,  8716.,  9266.,  9816.,  7746.,
      8300.,  8854.,  9408.,  7454.,  8012.,  8570.,  9128.,  7546.,  8108.,
      8670.,  9232.,  8078.,  8652.,  9226.,  9800.,  8170.,  8748.,  9326.,
      9904.,  8390.,  8972.,  9554.,  10136., 8226.,  8812.,  9398.,  9984.,
      8190.,  8780.,  9370.,  9960.,  8282.,  8876.,  9470.,  10064., 8758.,
      9356.,  9954.,  10552., 8394.,  9004.,  9614.,  10224., 8870.,  9484.,
      10098., 10712., 8450.,  9068.,  9686.,  10304., 8670.,  9292.,  9914.,
      10536., 9018.,  9644.,  10270., 10896., 9494.,  10124., 10754., 11384.,
      9330.,  9964.,  10598., 11232., 8390.,  8972.,  9554.,  10136., 8066.,
      8620.,  9174.,  9728.,  8030.,  8588.,  9146.,  9704.,  8538.,  9132.,
      9726.,  10320., 9046.,  9676.,  10306., 10936., 8626.,  9260.,  9894.,
      10528., 8046.,  8652.,  9258.,  9864.,  7746.,  8300.,  8854.,  9408.,
      7454.,  8012.,  8570.,  9128.,  7546.,  8108.,  8670.,  9232.,  7766.,
      8332.,  8898.,  9464.,  8114.,  8684.,  9254.,  9824.,  8078.,  8652.,
      9226.,  9800.,  8170.,  8748.,  9326.,  9904.,  8190.,  8780.,  9370.,
      9960.,  8282.,  8876.,  9470.,  10064., 8758.,  9356.,  9954.,  10552.,
      8338.,  8940.,  9542.,  10144., 8046.,  8652.,  9258.,  9864.,  8394.,
      9004.,  9614.,  10224., 8870.,  9484.,  10098., 10712.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8399.,  9474.,  9250.,  10500., 10364., 11784., 11907., 13508., 11172.,
      12600., 10412., 11656., 9733.,  10798., 9216.,  10448., 10572., 12008.,
      12256., 13888., 14428., 16264., 13792., 15424., 13068., 14488., 10176.,
      11392., 10119., 11490., 12059., 13668., 14364., 16200., 17316., 19384.,
      17012., 18856., 13593., 15208., 10857., 12238., 11488., 13012., 14037.,
      15822., 17056., 19088., 20917., 23198., 17040., 19072., 13929., 15710.,
      11292., 12820., 10741., 12110., 13572., 15176., 16900., 18728., 17295.,
      19352., 14380., 16216., 11978., 13588., 10047., 11426., 10192., 11408.,
      13068., 14488., 13648., 15264., 14268., 16088., 12080., 13696., 10492.,
      11912., 9120.,  10336., 9717.,  10782., 10487., 11736., 11156., 12584.,
      11970., 13572., 10492., 11912., 9369.,  10612., 8435.,  9506.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24258., 24924., 23670., 24336., 23146., 23812., 21918., 22584., 21586.,
      22252., 21382., 22048., 21882., 22548., 24342., 25008., 22474., 23140.,
      20734., 21400., 19890., 20556., 20710., 21376., 21594., 22260., 20622.,
      21288., 18858., 19524., 18910., 19576., 19026., 19692., 19974., 20640.,
      20986., 21652., 22062., 22728., 21282., 21948., 20094., 20760., 20338.,
      21004., 20646., 21312., 21786., 22452., 22990., 23656., 24258., 24924.,
      23670., 24336., 21586., 22252., 21382., 22048., 21882., 22548., 23214.,
      23880., 24546., 25212., 24342., 25008., 22474., 23140., 20710., 21376.,
      21594., 22260., 20622., 21288., 19714., 20380., 18870., 19536., 18858.,
      19524., 18910., 19576., 20986., 21652., 22062., 22728., 21282., 21948.,
      20566., 21232., 19914., 20580., 20094., 20760., 20338., 21004.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7742.,  8750.,  8758.,  9892.,  8097.,  9268.,  9282.,  10600., 8904.,
      10248., 10248., 11760., 10367., 11878., 11876., 13576., 10248., 11592.,
      11592., 13104., 10361., 11528., 11534., 12848., 10486., 11482., 11482.,
      12604., 7920.,  9072.,  9072.,  10368., 8904.,  10248., 10248., 11760.,
      10560., 12096., 12096., 13824., 13176., 14904., 14904., 16848., 13632.,
      15168., 15168., 16896., 14280., 15624., 15624., 17136., 10224., 11376.,
      11376., 12672., 8522.,  9822.,  9806.,  11268., 10367., 11878., 11876.,
      13576., 13176., 14904., 14904., 16848., 17177., 19112., 19118., 21296.,
      18360., 20088., 20088., 22032., 13495., 15010., 15016., 16720., 9938.,
      11234., 11242., 12700., 9876.,  11328., 11304., 12936., 12866., 14554.,
      14546., 16444., 17040., 18960., 18960., 21120., 22726., 24874., 24874.,
      27292., 17040., 18960., 18960., 21120., 12866., 14546., 14554., 16444.,
      9876.,  11304., 11328., 12936., 9938.,  11242., 11234., 12700., 13495.,
      15016., 15010., 16720., 18360., 20088., 20088., 22032., 17177., 19118.,
      19112., 21296., 13176., 14904., 14904., 16848., 10367., 11876., 11878.,
      13576., 8522.,  9806.,  9822.,  11268., 10224., 11376., 11376., 12672.,
      14280., 15624., 15624., 17136., 13632., 15168., 15168., 16896., 13176.,
      14904., 14904., 16848., 10560., 12096., 12096., 13824., 8904.,  10248.,
      10248., 11760., 7920.,  9072.,  9072.,  10368., 10486., 11482., 11482.,
      12604., 10361., 11534., 11528., 12848., 10248., 11592., 11592., 13104.,
      10367., 11876., 11878., 13576., 8904.,  10248., 10248., 11760., 8097.,
      9282.,  9268.,  10600., 7742.,  8758.,  8750.,  9892.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9532.,  10116., 10060., 10680., 9628.,  10220., 10156., 10784., 9596.,
      10196., 10124., 10760., 8956.,  9532.,  9484.,  10096., 8252.,  8804.,
      8780.,  9368.,  7484.,  8012.,  8012.,  8576.,  7452.,  7988.,  7980.,
      8552.,  8892.,  9516.,  9420.,  10080., 7932.,  8532.,  8460.,  9096.,
      7932.,  8508.,  8460.,  9072.,  7868.,  8420.,  8396.,  8984.,  7452.,
      8012.,  7980.,  8576.,  7932.,  8500.,  8460.,  9064.,  8668.,  9244.,
      9196.,  9808.,  9596.,  10196., 10124., 10760., 8956.,  9532.,  9484.,
      10096., 8252.,  8804.,  8780.,  9368.,  7484.,  8012.,  8012.,  8576.,
      7452.,  7988.,  7980.,  8552.,  8284.,  8860.,  8812.,  9424.,  9308.,
      9924.,  9836.,  10488., 7932.,  8508.,  8460.,  9072.,  7868.,  8420.,
      8396.,  8984.,  7452.,  8012.,  7980.,  8576.,  7932.,  8500.,  8460.,
      9064.,  8668.,  9244.,  9196.,  9808.,  9532.,  10116., 10060., 10680.,
      9628.,  10220., 10156., 10784., 8252.,  8804.,  8780.,  9368.,  7484.,
      8012.,  8012.,  8576.,  7452.,  7988.,  7980.,  8552.,  8284.,  8860.,
      8812.,  9424.,  9308.,  9924.,  9836.,  10488., 8892.,  9516.,  9420.,
      10080., 7932.,  8532.,  8460.,  9096.,  7452.,  8012.,  7980.,  8576.,
      7932.,  8500.,  8460.,  9064.,  8668.,  9244.,  9196.,  9808.,  9532.,
      10116., 10060., 10680., 9628.,  10220., 10156., 10784., 9596.,  10196.,
      10124., 10760., 8956.,  9532.,  9484.,  10096., 7452.,  7988.,  7980.,
      8552.,  8284.,  8860.,  8812.,  9424.,  9308.,  9924.,  9836.,  10488.,
      8892.,  9516.,  9420.,  10080., 7932.,  8532.,  8460.,  9096.,  7932.,
      8508.,  8460.,  9072.,  7868.,  8420.,  8396.,  8984.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6284.,  7292.,  8300.,  9308.,  7166.,  8300.,  9434.,  10568., 8015.,
      9186.,  10357., 11528., 9054.,  10372., 11690., 13008., 11088., 12432.,
      13776., 15120., 12264., 13776., 15288., 16800., 10167., 11678., 13189.,
      14700., 11492., 13192., 14892., 16592., 8400.,  9744.,  11088., 12432.,
      9576.,  11088., 12600., 14112., 7891.,  9058.,  10225., 11392., 8922.,
      10236., 11550., 12864., 8136.,  9132.,  10128., 11124., 9010.,  10132.,
      11254., 12376., 7776.,  8928.,  10080., 11232., 8784.,  10080., 11376.,
      12672., 11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800.,
      10368., 11904., 13440., 14976., 11712., 13440., 15168., 16896., 10800.,
      12528., 14256., 15984., 12312., 14256., 16200., 18144., 10368., 11904.,
      13440., 14976., 11712., 13440., 15168., 16896., 11088., 12432., 13776.,
      15120., 12264., 13776., 15288., 16800., 7776.,  8928.,  10080., 11232.,
      8784.,  10080., 11376., 12672., 10624., 11924., 13224., 14524., 11750.,
      13212., 14674., 16136., 10167., 11678., 13189., 14700., 11492., 13192.,
      14892., 16592., 10800., 12528., 14256., 15984., 12312., 14256., 16200.,
      18144., 13075., 15010., 16945., 18880., 14778., 16956., 19134., 21312.,
      14256., 15984., 17712., 19440., 15768., 17712., 19656., 21600., 10291.,
      11806., 13321., 14836., 11624., 13328., 15032., 16736., 8084.,  9380.,
      10676., 11972., 9218.,  10676., 12134., 13592., 9708.,  11160., 12612.,
      14064., 10960., 12592., 14224., 15856., 10556., 12244., 13932., 15620.,
      12026., 13924., 15822., 17720., 12960., 14880., 16800., 18720., 14640.,
      16800., 18960., 21120., 17640., 19788., 21936., 24084., 19522., 21940.,
      24358., 26776., 12960., 14880., 16800., 18720., 14640., 16800., 18960.,
      21120., 10484., 12164., 13844., 15524., 11954., 13844., 15734., 17624.,
      9556.,  10984., 12412., 13840., 10808., 12416., 14024., 15632., 8156.,
      9460.,  10764., 12068., 9290.,  10756., 12222., 13688., 10253., 11774.,
      13295., 14816., 11574., 13284., 14994., 16704., 14256., 15984., 17712.,
      19440., 15768., 17712., 19656., 21600., 13037., 14978., 16919., 18860.,
      14728., 16912., 19096., 21280., 10800., 12528., 14256., 15984., 12312.,
      14256., 16200., 18144., 10089., 11598., 13107., 14616., 11402., 13100.,
      14798., 16496., 10576., 11860., 13144., 14428., 11702., 13148., 14594.,
      16040., 7776.,  8928.,  10080., 11232., 8784.,  10080., 11376., 12672.,
      11088., 12432., 13776., 15120., 12264., 13776., 15288., 16800., 10368.,
      11904., 13440., 14976., 11712., 13440., 15168., 16896., 10800., 12528.,
      14256., 15984., 12312., 14256., 16200., 18144., 10368., 11904., 13440.,
      14976., 11712., 13440., 15168., 16896., 11088., 12432., 13776., 15120.,
      12264., 13776., 15288., 16800., 7776.,  8928.,  10080., 11232., 8784.,
      10080., 11376., 12672., 8136.,  9132.,  10128., 11124., 9010.,  10132.,
      11254., 12376., 7853.,  9026.,  10199., 11372., 8872.,  10192., 11512.,
      12832., 8400.,  9744.,  11088., 12432., 9576.,  11088., 12600., 14112.,
      10089., 11598., 13107., 14616., 11402., 13100., 14798., 16496., 11088.,
      12432., 13776., 15120., 12264., 13776., 15288., 16800., 7985.,  9170.,
      10355., 11540., 9012.,  10344., 11676., 13008., 6356.,  7372.,  8388.,
      9404.,  7238.,  8380.,  9522.,  10664.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8624.,  9208.,  9792.,  10376., 9132.,  9752.,  10372., 10992., 8808.,
      9400.,  9992.,  10584., 9316.,  9944.,  10572., 11200., 8736.,  9336.,
      9936.,  10536., 9244.,  9880.,  10516., 11152., 8504.,  9080.,  9656.,
      10232., 9012.,  9624.,  10236., 10848., 8144.,  8696.,  9248.,  9800.,
      8652.,  9240.,  9828.,  10416., 7656.,  8184.,  8712.,  9240.,  8164.,
      8728.,  9292.,  9856.,  7584.,  8120.,  8656.,  9192.,  8092.,  8664.,
      9236.,  9808.,  8328.,  8952.,  9576.,  10200., 8836.,  9496.,  10156.,
      10816., 7456.,  8056.,  8656.,  9256.,  7964.,  8600.,  9236.,  9872.,
      7480.,  8056.,  8632.,  9208.,  7988.,  8600.,  9212.,  9824.,  8400.,
      8952.,  9504.,  10056., 8908.,  9496.,  10084., 10672., 7560.,  8120.,
      8680.,  9240.,  8068.,  8664.,  9260.,  9856.,  7488.,  8056.,  8624.,
      9192.,  7996.,  8600.,  9204.,  9808.,  7928.,  8504.,  9080.,  9656.,
      8436.,  9048.,  9660.,  10272., 8736.,  9336.,  9936.,  10536., 9244.,
      9880.,  10516., 11152., 8504.,  9080.,  9656.,  10232., 9012.,  9624.,
      10236., 10848., 8144.,  8696.,  9248.,  9800.,  8652.,  9240.,  9828.,
      10416., 7656.,  8184.,  8712.,  9240.,  8164.,  8728.,  9292.,  9856.,
      7584.,  8120.,  8656.,  9192.,  8092.,  8664.,  9236.,  9808.,  8184.,
      8760.,  9336.,  9912.,  8692.,  9304.,  9916.,  10528., 9168.,  9784.,
      10400., 11016., 9676.,  10328., 10980., 11632., 7480.,  8056.,  8632.,
      9208.,  7988.,  8600.,  9212.,  9824.,  8400.,  8952.,  9504.,  10056.,
      8908.,  9496.,  10084., 10672., 7560.,  8120.,  8680.,  9240.,  8068.,
      8664.,  9260.,  9856.,  7488.,  8056.,  8624.,  9192.,  7996.,  8600.,
      9204.,  9808.,  7928.,  8504.,  9080.,  9656.,  8436.,  9048.,  9660.,
      10272., 8624.,  9208.,  9792.,  10376., 9132.,  9752.,  10372., 10992.,
      8808.,  9400.,  9992.,  10584., 9316.,  9944.,  10572., 11200., 8144.,
      8696.,  9248.,  9800.,  8652.,  9240.,  9828.,  10416., 7656.,  8184.,
      8712.,  9240.,  8164.,  8728.,  9292.,  9856.,  7584.,  8120.,  8656.,
      9192.,  8092.,  8664.,  9236.,  9808.,  8184.,  8760.,  9336.,  9912.,
      8692.,  9304.,  9916.,  10528., 9168.,  9784.,  10400., 11016., 9676.,
      10328., 10980., 11632., 8328.,  8952.,  9576.,  10200., 8836.,  9496.,
      10156., 10816., 7456.,  8056.,  8656.,  9256.,  7964.,  8600.,  9236.,
      9872.,  7560.,  8120.,  8680.,  9240.,  8068.,  8664.,  9260.,  9856.,
      7488.,  8056.,  8624.,  9192.,  7996.,  8600.,  9204.,  9808.,  7928.,
      8504.,  9080.,  9656.,  8436.,  9048.,  9660.,  10272., 8624.,  9208.,
      9792.,  10376., 9132.,  9752.,  10372., 10992., 8808.,  9400.,  9992.,
      10584., 9316.,  9944.,  10572., 11200., 8736.,  9336.,  9936.,  10536.,
      9244.,  9880.,  10516., 11152., 8504.,  9080.,  9656.,  10232., 9012.,
      9624.,  10236., 10848., 7584.,  8120.,  8656.,  9192.,  8092.,  8664.,
      9236.,  9808.,  8184.,  8760.,  9336.,  9912.,  8692.,  9304.,  9916.,
      10528., 9168.,  9784.,  10400., 11016., 9676.,  10328., 10980., 11632.,
      8328.,  8952.,  9576.,  10200., 8836.,  9496.,  10156., 10816., 7456.,
      8056.,  8656.,  9256.,  7964.,  8600.,  9236.,  9872.,  7480.,  8056.,
      8632.,  9208.,  7988.,  8600.,  9212.,  9824.,  8400.,  8952.,  9504.,
      10056., 8908.,  9496.,  10084., 10672.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7195.,  8270.,  9345.,  10420., 8546.,  9796.,  11046., 12296., 10700.,
      12120., 13540., 14960., 10869., 12470., 14071., 15672., 9492.,  10920.,
      12348., 13776., 8540.,  9784.,  11028., 12272., 8017.,  9082.,  10147.,
      11212., 8432.,  9664.,  10896., 12128., 10844., 12280., 13716., 15152.,
      11360., 12992., 14624., 16256., 12332., 14168., 16004., 17840., 11360.,
      12992., 14624., 16256., 10732., 12152., 13572., 14992., 8320.,  9536.,
      10752., 11968., 10371., 11742., 13113., 14484., 11037., 12646., 14255.,
      15864., 12204., 14040., 15876., 17712., 14100., 16168., 18236., 20304.,
      13908., 15752., 17596., 19440., 11059., 12674., 14289., 15904., 9229.,
      10610., 11991., 13372., 10444., 11968., 13492., 15016., 11873., 13658.,
      15443., 17228., 13968., 16000., 18032., 20064., 17201., 19482., 21763.,
      24044., 13936., 15968., 18000., 20032., 11837., 13618., 15399., 17180.,
      10416., 11944., 13472., 15000., 9089.,  10458., 11827., 13196., 11172.,
      12776., 14380., 15984., 13956., 15784., 17612., 19440., 14213., 16270.,
      18327., 20384., 12236., 14072., 15908., 17744., 11050., 12660., 14270.,
      15880., 10395., 11774., 13153., 14532., 8352.,  9568.,  10784., 12000.,
      10732., 12152., 13572., 14992., 11088., 12704., 14320., 15936., 12028.,
      13848., 15668., 17488., 11024., 12640., 14256., 15872., 10828., 12248.,
      13668., 15088., 8384.,  9600.,  10816., 12032., 7985.,  9050.,  10115.,
      11180., 8573.,  9822.,  11071., 12320., 9460.,  10888., 12316., 13744.,
      11042., 12644., 14246., 15848., 10828., 12248., 13668., 15088., 8663.,
      9906.,  11149., 12392., 7095.,  8166.,  9237.,  10308.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21994., 22660., 23326., 23992., 20562., 21228., 21894., 22560., 20026.,
      20692., 21358., 22024., 18850., 19516., 20182., 20848., 18634., 19300.,
      19966., 20632., 19378., 20044., 20710., 21376., 20890., 21556., 22222.,
      22888., 22930., 23596., 24262., 24928., 20410., 21076., 21742., 22408.,
      18850., 19516., 20182., 20848., 18250., 18916., 19582., 20248., 19378.,
      20044., 20710., 21376., 21402., 22068., 22734., 23400., 21634., 22300.,
      22966., 23632., 20026., 20692., 21358., 22024., 18850., 19516., 20182.,
      20848., 18634., 19300., 19966., 20632., 19378., 20044., 20710., 21376.,
      20890., 21556., 22222., 22888., 23298., 23964., 24630., 25296., 23850.,
      24516., 25182., 25848., 18850., 19516., 20182., 20848., 18250., 18916.,
      19582., 20248., 19378., 20044., 20710., 21376., 21402., 22068., 22734.,
      23400., 21634., 22300., 22966., 23632., 21994., 22660., 23326., 23992.,
      20562., 21228., 21894., 22560., 18634., 19300., 19966., 20632., 19378.,
      20044., 20710., 21376., 20890., 21556., 22222., 22888., 23298., 23964.,
      24630., 25296., 23850., 24516., 25182., 25848., 22930., 23596., 24262.,
      24928., 20410., 21076., 21742., 22408., 19378., 20044., 20710., 21376.,
      21402., 22068., 22734., 23400., 21634., 22300., 22966., 23632., 21994.,
      22660., 23326., 23992., 20562., 21228., 21894., 22560., 20026., 20692.,
      21358., 22024., 18850., 19516., 20182., 20848., 20890., 21556., 22222.,
      22888., 23298., 23964., 24630., 25296., 23850., 24516., 25182., 25848.,
      22930., 23596., 24262., 24928., 20410., 21076., 21742., 22408., 18850.,
      19516., 20182., 20848., 18250., 18916., 19582., 20248.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6356.,  7238.,  7372.,  8380.,  8388.,  9522.,  9404.,  10664., 7985.,
      9012.,  9170.,  10344., 10355., 11676., 11540., 13008., 11088., 12264.,
      12432., 13776., 13776., 15288., 15120., 16800., 10089., 11402., 11598.,
      13100., 13107., 14798., 14616., 16496., 8400.,  9576.,  9744.,  11088.,
      11088., 12600., 12432., 14112., 7853.,  8872.,  9026.,  10192., 10199.,
      11512., 11372., 12832., 8136.,  9010.,  9132.,  10132., 10128., 11254.,
      11124., 12376., 7776.,  8784.,  8928.,  10080., 10080., 11376., 11232.,
      12672., 11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800.,
      10368., 11712., 11904., 13440., 13440., 15168., 14976., 16896., 10800.,
      12312., 12528., 14256., 14256., 16200., 15984., 18144., 10368., 11712.,
      11904., 13440., 13440., 15168., 14976., 16896., 11088., 12264., 12432.,
      13776., 13776., 15288., 15120., 16800., 7776.,  8784.,  8928.,  10080.,
      10080., 11376., 11232., 12672., 10576., 11702., 11860., 13148., 13144.,
      14594., 14428., 16040., 10089., 11402., 11598., 13100., 13107., 14798.,
      14616., 16496., 10800., 12312., 12528., 14256., 14256., 16200., 15984.,
      18144., 13037., 14728., 14978., 16912., 16919., 19096., 18860., 21280.,
      14256., 15768., 15984., 17712., 17712., 19656., 19440., 21600., 10253.,
      11574., 11774., 13284., 13295., 14994., 14816., 16704., 8156.,  9290.,
      9460.,  10756., 10764., 12222., 12068., 13688., 9556.,  10808., 10984.,
      12416., 12412., 14024., 13840., 15632., 10484., 11954., 12164., 13844.,
      13844., 15734., 15524., 17624., 12960., 14640., 14880., 16800., 16800.,
      18960., 18720., 21120., 17640., 19522., 19788., 21940., 21936., 24358.,
      24084., 26776., 12960., 14640., 14880., 16800., 16800., 18960., 18720.,
      21120., 10556., 12026., 12244., 13924., 13932., 15822., 15620., 17720.,
      9708.,  10960., 11160., 12592., 12612., 14224., 14064., 15856., 8084.,
      9218.,  9380.,  10676., 10676., 12134., 11972., 13592., 10291., 11624.,
      11806., 13328., 13321., 15032., 14836., 16736., 14256., 15768., 15984.,
      17712., 17712., 19656., 19440., 21600., 13075., 14778., 15010., 16956.,
      16945., 19134., 18880., 21312., 10800., 12312., 12528., 14256., 14256.,
      16200., 15984., 18144., 10167., 11492., 11678., 13192., 13189., 14892.,
      14700., 16592., 10624., 11750., 11924., 13212., 13224., 14674., 14524.,
      16136., 7776.,  8784.,  8928.,  10080., 10080., 11376., 11232., 12672.,
      11088., 12264., 12432., 13776., 13776., 15288., 15120., 16800., 10368.,
      11712., 11904., 13440., 13440., 15168., 14976., 16896., 10800., 12312.,
      12528., 14256., 14256., 16200., 15984., 18144., 10368., 11712., 11904.,
      13440., 13440., 15168., 14976., 16896., 11088., 12264., 12432., 13776.,
      13776., 15288., 15120., 16800., 7776.,  8784.,  8928.,  10080., 10080.,
      11376., 11232., 12672., 8136.,  9010.,  9132.,  10132., 10128., 11254.,
      11124., 12376., 7891.,  8922.,  9058.,  10236., 10225., 11550., 11392.,
      12864., 8400.,  9576.,  9744.,  11088., 11088., 12600., 12432., 14112.,
      10167., 11492., 11678., 13192., 13189., 14892., 14700., 16592., 11088.,
      12264., 12432., 13776., 13776., 15288., 15120., 16800., 8015.,  9054.,
      9186.,  10372., 10357., 11690., 11528., 13008., 6284.,  7166.,  7292.,
      8300.,  8300.,  9434.,  9308.,  10568.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9864.,  10452., 10392., 11016., 10920., 11580., 11448., 12144., 9544.,
      10148., 10072., 10712., 10600., 11276., 11128., 11840., 8552.,  9140.,
      9080.,  9704.,  9608.,  10268., 10136., 10832., 7912.,  8452.,  8440.,
      9016.,  8968.,  9580.,  9496.,  10144., 7144.,  7636.,  7672.,  8200.,
      8200.,  8764.,  8728.,  9328.,  5960.,  6436.,  6488.,  7000.,  7016.,
      7564.,  7544.,  8128.,  6408.,  6900.,  6936.,  7464.,  7464.,  8028.,
      7992.,  8592.,  9544.,  10148., 10072., 10712., 10600., 11276., 11128.,
      11840., 8552.,  9140.,  9080.,  9704.,  9608.,  10268., 10136., 10832.,
      7912.,  8452.,  8440.,  9016.,  8968.,  9580.,  9496.,  10144., 7144.,
      7636.,  7672.,  8200.,  8200.,  8764.,  8728.,  9328.,  5960.,  6436.,
      6488.,  7000.,  7016.,  7564.,  7544.,  8128.,  6408.,  6900.,  6936.,
      7464.,  7464.,  8028.,  7992.,  8592.,  7976.,  8516.,  8504.,  9080.,
      9032.,  9644.,  9560.,  10208., 8552.,  9140.,  9080.,  9704.,  9608.,
      10268., 10136., 10832., 7912.,  8452.,  8440.,  9016.,  8968.,  9580.,
      9496.,  10144., 7144.,  7636.,  7672.,  8200.,  8200.,  8764.,  8728.,
      9328.,  5960.,  6436.,  6488.,  7000.,  7016.,  7564.,  7544.,  8128.,
      6408.,  6900.,  6936.,  7464.,  7464.,  8028.,  7992.,  8592.,  7976.,
      8516.,  8504.,  9080.,  9032.,  9644.,  9560.,  10208., 9864.,  10452.,
      10392., 11016., 10920., 11580., 11448., 12144., 7912.,  8452.,  8440.,
      9016.,  8968.,  9580.,  9496.,  10144., 7144.,  7636.,  7672.,  8200.,
      8200.,  8764.,  8728.,  9328.,  5960.,  6436.,  6488.,  7000.,  7016.,
      7564.,  7544.,  8128.,  6408.,  6900.,  6936.,  7464.,  7464.,  8028.,
      7992.,  8592.,  7976.,  8516.,  8504.,  9080.,  9032.,  9644.,  9560.,
      10208., 9864.,  10452., 10392., 11016., 10920., 11580., 11448., 12144.,
      9544.,  10148., 10072., 10712., 10600., 11276., 11128., 11840., 7144.,
      7636.,  7672.,  8200.,  8200.,  8764.,  8728.,  9328.,  5960.,  6436.,
      6488.,  7000.,  7016.,  7564.,  7544.,  8128.,  6408.,  6900.,  6936.,
      7464.,  7464.,  8028.,  7992.,  8592.,  7976.,  8516.,  8504.,  9080.,
      9032.,  9644.,  9560.,  10208., 9864.,  10452., 10392., 11016., 10920.,
      11580., 11448., 12144., 9544.,  10148., 10072., 10712., 10600., 11276.,
      11128., 11840., 8552.,  9140.,  9080.,  9704.,  9608.,  10268., 10136.,
      10832., 5960.,  6436.,  6488.,  7000.,  7016.,  7564.,  7544.,  8128.,
      6408.,  6900.,  6936.,  7464.,  7464.,  8028.,  7992.,  8592.,  7976.,
      8516.,  8504.,  9080.,  9032.,  9644.,  9560.,  10208., 9864.,  10452.,
      10392., 11016., 10920., 11580., 11448., 12144., 9544.,  10148., 10072.,
      10712., 10600., 11276., 11128., 11840., 8552.,  9140.,  9080.,  9704.,
      9608.,  10268., 10136., 10832., 7912.,  8452.,  8440.,  9016.,  8968.,
      9580.,  9496.,  10144., 6408.,  6900.,  6936.,  7464.,  7464.,  8028.,
      7992.,  8592.,  7976.,  8516.,  8504.,  9080.,  9032.,  9644.,  9560.,
      10208., 9864.,  10452., 10392., 11016., 10920., 11580., 11448., 12144.,
      9544.,  10148., 10072., 10712., 10600., 11276., 11128., 11840., 8552.,
      9140.,  9080.,  9704.,  9608.,  10268., 10136., 10832., 7912.,  8452.,
      8440.,  9016.,  8968.,  9580.,  9496.,  10144., 7144.,  7636.,  7672.,
      8200.,  8200.,  8764.,  8728.,  9328.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4662.,  5544.,  6426.,  7308.,  5544.,  6552.,  7560.,  8568.,  6426.,
      7560.,  8694.,  9828.,  7308.,  8568.,  9828.,  11088., 6719.,  7746.,
      8773.,  9800.,  7758.,  8932.,  10106., 11280., 8797.,  10118., 11439.,
      12760., 9836.,  11304., 12772., 14240., 11592., 12768., 13944., 15120.,
      12768., 14112., 15456., 16800., 13944., 15456., 16968., 18480., 15120.,
      16800., 18480., 20160., 8401.,  9714.,  11027., 12340., 9726.,  11228.,
      12730., 14232., 11051., 12742., 14433., 16124., 12376., 14256., 16136.,
      18016., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080., 11424.,
      8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784., 6607.,
      7626.,  8645.,  9664.,  7638.,  8804.,  9970.,  11136., 8669.,  9982.,
      11295., 12608., 9700.,  11160., 12620., 14080., 8582.,  9456.,  10330.,
      11204., 9456.,  10456., 11456., 12456., 10330., 11456., 12582., 13708.,
      11204., 12456., 13708., 14960., 6480.,  7488.,  8496.,  9504.,  7488.,
      8640.,  9792.,  10944., 8496.,  9792.,  11088., 12384., 9504.,  10944.,
      12384., 13824., 11592., 12768., 13944., 15120., 12768., 14112., 15456.,
      16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480., 20160.,
      8640.,  9984.,  11328., 12672., 9984.,  11520., 13056., 14592., 11328.,
      13056., 14784., 16512., 12672., 14592., 16512., 18432., 7992.,  9504.,
      11016., 12528., 9504.,  11232., 12960., 14688., 11016., 12960., 14904.,
      16848., 12528., 14688., 16848., 19008., 8640.,  9984.,  11328., 12672.,
      9984.,  11520., 13056., 14592., 11328., 13056., 14784., 16512., 12672.,
      14592., 16512., 18432., 11592., 12768., 13944., 15120., 12768., 14112.,
      15456., 16800., 13944., 15456., 16968., 18480., 15120., 16800., 18480.,
      20160., 6480.,  7488.,  8496.,  9504.,  7488.,  8640.,  9792.,  10944.,
      8496.,  9792.,  11088., 12384., 9504.,  10944., 12384., 13824., 11066.,
      12192., 13318., 14444., 12192., 13480., 14768., 16056., 13318., 14768.,
      16218., 17668., 14444., 16056., 17668., 19280., 8401.,  9714.,  11027.,
      12340., 9726.,  11228., 12730., 14232., 11051., 12742., 14433., 16124.,
      12376., 14256., 16136., 18016., 7992.,  9504.,  11016., 12528., 9504.,
      11232., 12960., 14688., 11016., 12960., 14904., 16848., 12528., 14688.,
      16848., 19008., 10927., 12618., 14309., 16000., 12630., 14564., 16498.,
      18432., 14333., 16510., 18687., 20864., 16036., 18456., 20876., 23296.,
      14904., 16416., 17928., 19440., 16416., 18144., 19872., 21600., 17928.,
      19872., 21816., 23760., 19440., 21600., 23760., 25920., 8513.,  9834.,
      11155., 12476., 9846.,  11356., 12866., 14376., 11179., 12878., 14577.,
      16276., 12512., 14400., 16288., 18176., 5994.,  7128.,  8262.,  9396.,
      7128.,  8424.,  9720.,  11016., 8262.,  9720.,  11178., 12636., 9396.,
      11016., 12636., 14256., 7988.,  9240.,  10492., 11744., 9240.,  10672.,
      12104., 13536., 10492., 12104., 13716., 15328., 11744., 13536., 15328.,
      17120., 7770.,  9240.,  10710., 12180., 9240.,  10920., 12600., 14280.,
      10710., 12600., 14490., 16380., 12180., 14280., 16380., 18480., 10800.,
      12480., 14160., 15840., 12480., 14400., 16320., 18240., 14160., 16320.,
      18480., 20640., 15840., 18240., 20640., 23040., 18518., 20400., 22282.,
      24164., 20400., 22552., 24704., 26856., 22282., 24704., 27126., 29548.,
      24164., 26856., 29548., 32240., 10800., 12480., 14160., 15840., 12480.,
      14400., 16320., 18240., 14160., 16320., 18480., 20640., 15840., 18240.,
      20640., 23040., 7770.,  9240.,  10710., 12180., 9240.,  10920., 12600.,
      14280., 10710., 12600., 14490., 16380., 12180., 14280., 16380., 18480.,
      7988.,  9240.,  10492., 11744., 9240.,  10672., 12104., 13536., 10492.,
      12104., 13716., 15328., 11744., 13536., 15328., 17120., 5994.,  7128.,
      8262.,  9396.,  7128.,  8424.,  9720.,  11016., 8262.,  9720.,  11178.,
      12636., 9396.,  11016., 12636., 14256., 8513.,  9846.,  11179., 12512.,
      9834.,  11356., 12878., 14400., 11155., 12866., 14577., 16288., 12476.,
      14376., 16276., 18176., 14904., 16416., 17928., 19440., 16416., 18144.,
      19872., 21600., 17928., 19872., 21816., 23760., 19440., 21600., 23760.,
      25920., 10927., 12630., 14333., 16036., 12618., 14564., 16510., 18456.,
      14309., 16498., 18687., 20876., 16000., 18432., 20864., 23296., 7992.,
      9504.,  11016., 12528., 9504.,  11232., 12960., 14688., 11016., 12960.,
      14904., 16848., 12528., 14688., 16848., 19008., 8401.,  9726.,  11051.,
      12376., 9714.,  11228., 12742., 14256., 11027., 12730., 14433., 16136.,
      12340., 14232., 16124., 18016., 11066., 12192., 13318., 14444., 12192.,
      13480., 14768., 16056., 13318., 14768., 16218., 17668., 14444., 16056.,
      17668., 19280., 6480.,  7488.,  8496.,  9504.,  7488.,  8640.,  9792.,
      10944., 8496.,  9792.,  11088., 12384., 9504.,  10944., 12384., 13824.,
      11592., 12768., 13944., 15120., 12768., 14112., 15456., 16800., 13944.,
      15456., 16968., 18480., 15120., 16800., 18480., 20160., 8640.,  9984.,
      11328., 12672., 9984.,  11520., 13056., 14592., 11328., 13056., 14784.,
      16512., 12672., 14592., 16512., 18432., 7992.,  9504.,  11016., 12528.,
      9504.,  11232., 12960., 14688., 11016., 12960., 14904., 16848., 12528.,
      14688., 16848., 19008., 8640.,  9984.,  11328., 12672., 9984.,  11520.,
      13056., 14592., 11328., 13056., 14784., 16512., 12672., 14592., 16512.,
      18432., 11592., 12768., 13944., 15120., 12768., 14112., 15456., 16800.,
      13944., 15456., 16968., 18480., 15120., 16800., 18480., 20160., 6480.,
      7488.,  8496.,  9504.,  7488.,  8640.,  9792.,  10944., 8496.,  9792.,
      11088., 12384., 9504.,  10944., 12384., 13824., 8582.,  9456.,  10330.,
      11204., 9456.,  10456., 11456., 12456., 10330., 11456., 12582., 13708.,
      11204., 12456., 13708., 14960., 6607.,  7638.,  8669.,  9700.,  7626.,
      8804.,  9982.,  11160., 8645.,  9970.,  11295., 12620., 9664.,  11136.,
      12608., 14080., 6216.,  7392.,  8568.,  9744.,  7392.,  8736.,  10080.,
      11424., 8568.,  10080., 11592., 13104., 9744.,  11424., 13104., 14784.,
      8401.,  9726.,  11051., 12376., 9714.,  11228., 12742., 14256., 11027.,
      12730., 14433., 16136., 12340., 14232., 16124., 18016., 11592., 12768.,
      13944., 15120., 12768., 14112., 15456., 16800., 13944., 15456., 16968.,
      18480., 15120., 16800., 18480., 20160., 6719.,  7758.,  8797.,  9836.,
      7746.,  8932.,  10118., 11304., 8773.,  10106., 11439., 12772., 9800.,
      11280., 12760., 14240., 4662.,  5544.,  6426.,  7308.,  5544.,  6552.,
      7560.,  8568.,  6426.,  7560.,  8694.,  9828.,  7308.,  8568.,  9828.,
      11088.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9156.,  9744.,  10332., 10920., 9664.,  10288., 10912., 11536., 10172.,
      10832., 11492., 12152., 10680., 11376., 12072., 12768., 8500.,  9104.,
      9708.,  10312., 9008.,  9648.,  10288., 10928., 9516.,  10192., 10868.,
      11544., 10024., 10736., 11448., 12160., 7556.,  8144.,  8732.,  9320.,
      8064.,  8688.,  9312.,  9936.,  8572.,  9232.,  9892.,  10552., 9080.,
      9776.,  10472., 11168., 7348.,  7888.,  8428.,  8968.,  7856.,  8432.,
      9008.,  9584.,  8364.,  8976.,  9588.,  10200., 8872.,  9520.,  10168.,
      10816., 7908.,  8400.,  8892.,  9384.,  8416.,  8944.,  9472.,  10000.,
      8924.,  9488.,  10052., 10616., 9432.,  10032., 10632., 11232., 6580.,
      7056.,  7532.,  8008.,  7088.,  7600.,  8112.,  8624.,  7596.,  8144.,
      8692.,  9240.,  8104.,  8688.,  9272.,  9856.,  6436.,  6928.,  7420.,
      7912.,  6944.,  7472.,  8000.,  8528.,  7452.,  8016.,  8580.,  9144.,
      7960.,  8560.,  9160.,  9760.,  8500.,  9104.,  9708.,  10312., 9008.,
      9648.,  10288., 10928., 9516.,  10192., 10868., 11544., 10024., 10736.,
      11448., 12160., 7556.,  8144.,  8732.,  9320.,  8064.,  8688.,  9312.,
      9936.,  8572.,  9232.,  9892.,  10552., 9080.,  9776.,  10472., 11168.,
      7348.,  7888.,  8428.,  8968.,  7856.,  8432.,  9008.,  9584.,  8364.,
      8976.,  9588.,  10200., 8872.,  9520.,  10168., 10816., 7908.,  8400.,
      8892.,  9384.,  8416.,  8944.,  9472.,  10000., 8924.,  9488.,  10052.,
      10616., 9432.,  10032., 10632., 11232., 6580.,  7056.,  7532.,  8008.,
      7088.,  7600.,  8112.,  8624.,  7596.,  8144.,  8692.,  9240.,  8104.,
      8688.,  9272.,  9856.,  6436.,  6928.,  7420.,  7912.,  6944.,  7472.,
      8000.,  8528.,  7452.,  8016.,  8580.,  9144.,  7960.,  8560.,  9160.,
      9760.,  7476.,  8016.,  8556.,  9096.,  7984.,  8560.,  9136.,  9712.,
      8492.,  9104.,  9716.,  10328., 9000.,  9648.,  10296., 10944., 7556.,
      8144.,  8732.,  9320.,  8064.,  8688.,  9312.,  9936.,  8572.,  9232.,
      9892.,  10552., 9080.,  9776.,  10472., 11168., 7348.,  7888.,  8428.,
      8968.,  7856.,  8432.,  9008.,  9584.,  8364.,  8976.,  9588.,  10200.,
      8872.,  9520.,  10168., 10816., 7908.,  8400.,  8892.,  9384.,  8416.,
      8944.,  9472.,  10000., 8924.,  9488.,  10052., 10616., 9432.,  10032.,
      10632., 11232., 6580.,  7056.,  7532.,  8008.,  7088.,  7600.,  8112.,
      8624.,  7596.,  8144.,  8692.,  9240.,  8104.,  8688.,  9272.,  9856.,
      6436.,  6928.,  7420.,  7912.,  6944.,  7472.,  8000.,  8528.,  7452.,
      8016.,  8580.,  9144.,  7960.,  8560.,  9160.,  9760.,  7476.,  8016.,
      8556.,  9096.,  7984.,  8560.,  9136.,  9712.,  8492.,  9104.,  9716.,
      10328., 9000.,  9648.,  10296., 10944., 9156.,  9744.,  10332., 10920.,
      9664.,  10288., 10912., 11536., 10172., 10832., 11492., 12152., 10680.,
      11376., 12072., 12768., 7348.,  7888.,  8428.,  8968.,  7856.,  8432.,
      9008.,  9584.,  8364.,  8976.,  9588.,  10200., 8872.,  9520.,  10168.,
      10816., 7908.,  8400.,  8892.,  9384.,  8416.,  8944.,  9472.,  10000.,
      8924.,  9488.,  10052., 10616., 9432.,  10032., 10632., 11232., 6580.,
      7056.,  7532.,  8008.,  7088.,  7600.,  8112.,  8624.,  7596.,  8144.,
      8692.,  9240.,  8104.,  8688.,  9272.,  9856.,  6436.,  6928.,  7420.,
      7912.,  6944.,  7472.,  8000.,  8528.,  7452.,  8016.,  8580.,  9144.,
      7960.,  8560.,  9160.,  9760.,  7476.,  8016.,  8556.,  9096.,  7984.,
      8560.,  9136.,  9712.,  8492.,  9104.,  9716.,  10328., 9000.,  9648.,
      10296., 10944., 9156.,  9744.,  10332., 10920., 9664.,  10288., 10912.,
      11536., 10172., 10832., 11492., 12152., 10680., 11376., 12072., 12768.,
      8500.,  9104.,  9708.,  10312., 9008.,  9648.,  10288., 10928., 9516.,
      10192., 10868., 11544., 10024., 10736., 11448., 12160., 7908.,  8400.,
      8892.,  9384.,  8416.,  8944.,  9472.,  10000., 8924.,  9488.,  10052.,
      10616., 9432.,  10032., 10632., 11232., 6580.,  7056.,  7532.,  8008.,
      7088.,  7600.,  8112.,  8624.,  7596.,  8144.,  8692.,  9240.,  8104.,
      8688.,  9272.,  9856.,  6436.,  6928.,  7420.,  7912.,  6944.,  7472.,
      8000.,  8528.,  7452.,  8016.,  8580.,  9144.,  7960.,  8560.,  9160.,
      9760.,  7476.,  8016.,  8556.,  9096.,  7984.,  8560.,  9136.,  9712.,
      8492.,  9104.,  9716.,  10328., 9000.,  9648.,  10296., 10944., 9156.,
      9744.,  10332., 10920., 9664.,  10288., 10912., 11536., 10172., 10832.,
      11492., 12152., 10680., 11376., 12072., 12768., 8500.,  9104.,  9708.,
      10312., 9008.,  9648.,  10288., 10928., 9516.,  10192., 10868., 11544.,
      10024., 10736., 11448., 12160., 7556.,  8144.,  8732.,  9320.,  8064.,
      8688.,  9312.,  9936.,  8572.,  9232.,  9892.,  10552., 9080.,  9776.,
      10472., 11168., 6580.,  7056.,  7532.,  8008.,  7088.,  7600.,  8112.,
      8624.,  7596.,  8144.,  8692.,  9240.,  8104.,  8688.,  9272.,  9856.,
      6436.,  6928.,  7420.,  7912.,  6944.,  7472.,  8000.,  8528.,  7452.,
      8016.,  8580.,  9144.,  7960.,  8560.,  9160.,  9760.,  7476.,  8016.,
      8556.,  9096.,  7984.,  8560.,  9136.,  9712.,  8492.,  9104.,  9716.,
      10328., 9000.,  9648.,  10296., 10944., 9156.,  9744.,  10332., 10920.,
      9664.,  10288., 10912., 11536., 10172., 10832., 11492., 12152., 10680.,
      11376., 12072., 12768., 8500.,  9104.,  9708.,  10312., 9008.,  9648.,
      10288., 10928., 9516.,  10192., 10868., 11544., 10024., 10736., 11448.,
      12160., 7556.,  8144.,  8732.,  9320.,  8064.,  8688.,  9312.,  9936.,
      8572.,  9232.,  9892.,  10552., 9080.,  9776.,  10472., 11168., 7348.,
      7888.,  8428.,  8968.,  7856.,  8432.,  9008.,  9584.,  8364.,  8976.,
      9588.,  10200., 8872.,  9520.,  10168., 10816., 6436.,  6928.,  7420.,
      7912.,  6944.,  7472.,  8000.,  8528.,  7452.,  8016.,  8580.,  9144.,
      7960.,  8560.,  9160.,  9760.,  7476.,  8016.,  8556.,  9096.,  7984.,
      8560.,  9136.,  9712.,  8492.,  9104.,  9716.,  10328., 9000.,  9648.,
      10296., 10944., 9156.,  9744.,  10332., 10920., 9664.,  10288., 10912.,
      11536., 10172., 10832., 11492., 12152., 10680., 11376., 12072., 12768.,
      8500.,  9104.,  9708.,  10312., 9008.,  9648.,  10288., 10928., 9516.,
      10192., 10868., 11544., 10024., 10736., 11448., 12160., 7556.,  8144.,
      8732.,  9320.,  8064.,  8688.,  9312.,  9936.,  8572.,  9232.,  9892.,
      10552., 9080.,  9776.,  10472., 11168., 7348.,  7888.,  8428.,  8968.,
      7856.,  8432.,  9008.,  9584.,  8364.,  8976.,  9588.,  10200., 8872.,
      9520.,  10168., 10816., 7908.,  8400.,  8892.,  9384.,  8416.,  8944.,
      9472.,  10000., 8924.,  9488.,  10052., 10616., 9432.,  10032., 10632.,
      11232.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12554., 15340., 15726., 16299., 13796., 11468., 9560.,  10440., 12192.,
      14328., 16680., 15864., 15264., 14280., 13556., 14804., 15752., 16949.,
      14998., 13284., 11786., 15466., 18744., 23026., 27578., 23026., 18744.,
      15466., 11786., 13284., 14998., 16949., 15752., 14804., 13556., 14280.,
      15264., 15864., 16680., 14328., 12192., 10440., 9560.,  11468., 13796.,
      16299., 15726., 15340., 12554.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9984.,  9816.,  9712.,  10056., 10432., 10200., 10000., 10288., 10376.,
      10528., 11000., 11504., 11400., 11328., 12128., 12472., 12880., 12968.,
      13120., 12696., 12336., 9744.,  9832.,  9984.,  9816.,  9712.,  10056.,
      10432., 9696.,  9976.,  10288., 10376., 10528., 11000., 11504., 11280.,
      11688., 12128., 12472., 12880., 12968., 13120., 10528., 10104., 9744.,
      9832.,  9984.,  9816.,  9712.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10626., 11844., 12964., 14376., 13313., 14892., 13855., 15622., 11968.,
      13576., 10628., 12056., 9317.,  10576., 11976., 13392., 12768., 14400.,
      13776., 15600., 15000., 17040., 13560., 15408., 12768., 14400., 11760.,
      13200., 12088., 13672., 13628., 15464., 15725., 17776., 18069., 20362.,
      17174., 19260., 16988., 18840., 13709., 15348., 13354., 15108., 15736.,
      17760., 19312., 21572., 23158., 25684., 19074., 21364., 15800., 17824.,
      13204., 14996., 13714., 15300., 16924., 18744., 17179., 19212., 17673.,
      19946., 15084., 17136., 13244., 15048., 11503., 13096., 11976., 13392.,
      12768., 14400., 13776., 15600., 15000., 17040., 13560., 15408., 12768.,
      14400., 11760., 13200., 9108.,  10320., 10244., 11640., 11815., 13384.,
      13555., 15318., 12974., 14572., 12964., 14376., 10479., 11732.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12344., 13056., 11512., 12208., 10808., 11488., 10968., 11664., 11192.,
      11904., 11224., 11952., 11320., 12064., 11832., 12640., 11512., 12304.,
      11320., 12096., 11736., 12528., 12216., 13024., 12504., 13328., 12856.,
      13696., 14392., 15296., 14584., 15472., 14904., 15776., 14584., 15440.,
      14392., 15232., 14072., 14896., 13880., 14688., 12856., 13600., 12536.,
      13264., 12344., 13056., 11512., 12208., 10808., 11488., 10968., 11664.,
      11192., 11904., 11704., 12480., 11736., 12528., 11832., 12640., 11512.,
      12304., 11320., 12096., 11736., 12528., 12216., 13024., 13752., 14624.,
      14040., 14928., 14392., 15296., 14584., 15472., 14904., 15776., 14584.,
      15440., 14392., 15232., 13368., 14144., 13048., 13808., 12856., 13600.,
      12536., 13264., 12344., 13056., 11512., 12208., 10808., 11488.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8930.,  10148., 11366., 12584., 10660., 12072., 13484., 14896., 11223.,
      12802., 14381., 15960., 11991., 13758., 15525., 17292., 10776., 12384.,
      13992., 15600., 10836., 12264., 13692., 15120., 8495.,  9754.,  11013.,
      12272., 10056., 11472., 12888., 14304., 10848., 12480., 14112., 15744.,
      13056., 14880., 16704., 18528., 15480., 17520., 19560., 21600., 12408.,
      14256., 16104., 17952., 10848., 12480., 14112., 15744., 9408.,  10848.,
      12288., 13728., 11616., 13200., 14784., 16368., 13932., 15768., 17604.,
      19440., 14567., 16618., 18669., 20720., 15461., 17754., 20047., 22340.,
      13894., 15980., 18066., 20152., 13980., 15832., 17684., 19536., 11011.,
      12650., 14289., 15928., 12410., 14164., 15918., 17672., 13384., 15408.,
      17432., 19456., 16140., 18400., 20660., 22920., 19182., 21708., 24234.,
      26760., 15410., 17700., 19990., 22280., 13512., 15536., 17560., 19584.,
      11736., 13528., 15320., 17112., 11378., 12964., 14550., 16136., 13884.,
      15704., 17524., 19344., 14261., 16294., 18327., 20360., 14881., 17154.,
      19427., 21700., 13428., 15480., 17532., 19584., 13708., 15512., 17316.,
      19120., 10533., 12126., 13719., 15312., 10056., 11472., 12888., 14304.,
      10848., 12480., 14112., 15744., 13056., 14880., 16704., 18528., 15480.,
      17520., 19560., 21600., 12408., 14256., 16104., 17952., 10848., 12480.,
      14112., 15744., 9408.,  10848., 12288., 13728., 8652.,  9864.,  11076.,
      12288., 10612., 12008., 13404., 14800., 10989., 12558., 14127., 15696.,
      11523., 13286., 15049., 16812., 10430., 12028., 13626., 15224., 10660.,
      12072., 13484., 14896., 8249.,  9502.,  10755., 12008.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10024., 10736., 11448., 12160., 9656.,  10352., 11048., 11744., 9544.,
      10224., 10904., 11584., 10104., 10800., 11496., 12192., 10792., 11504.,
      12216., 12928., 11096., 11824., 12552., 13280., 11528., 12272., 13016.,
      13760., 13512., 14320., 15128., 15936., 13144., 13936., 14728., 15520.,
      13032., 13808., 14584., 15360., 13080., 13872., 14664., 15456., 13256.,
      14064., 14872., 15680., 13048., 13872., 14696., 15520., 12968., 13808.,
      14648., 15488., 12904., 13808., 14712., 15616., 12536., 13424., 14312.,
      15200., 12424., 13296., 14168., 15040., 12056., 12912., 13768., 14624.,
      11944., 12784., 13624., 14464., 11576., 12400., 13224., 14048., 11464.,
      12272., 13080., 13888., 10504., 11248., 11992., 12736., 10136., 10864.,
      11592., 12320., 10024., 10736., 11448., 12160., 9656.,  10352., 11048.,
      11744., 9544.,  10224., 10904., 11584., 10104., 10800., 11496., 12192.,
      10792., 11504., 12216., 12928., 12776., 13552., 14328., 15104., 13080.,
      13872., 14664., 15456., 13512., 14320., 15128., 15936., 13144., 13936.,
      14728., 15520., 13032., 13808., 14584., 15360., 13080., 13872., 14664.,
      15456., 13256., 14064., 14872., 15680., 13192., 14064., 14936., 15808.,
      12984., 13872., 14760., 15648., 12904., 13808., 14712., 15616., 12536.,
      13424., 14312., 15200., 12424., 13296., 14168., 15040., 12056., 12912.,
      13768., 14624., 11944., 12784., 13624., 14464., 10984., 11760., 12536.,
      13312., 10616., 11376., 12136., 12896., 10504., 11248., 11992., 12736.,
      10136., 10864., 11592., 12320., 10024., 10736., 11448., 12160., 9656.,
      10352., 11048., 11744., 9544.,  10224., 10904., 11584.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10479., 11732., 12964., 14376., 12974., 14572., 13555., 15318., 11815.,
      13384., 10244., 11640., 9108.,  10320., 11760., 13200., 12768., 14400.,
      13560., 15408., 15000., 17040., 13776., 15600., 12768., 14400., 11976.,
      13392., 11503., 13096., 13244., 15048., 15084., 17136., 17673., 19946.,
      17179., 19212., 16924., 18744., 13714., 15300., 13204., 14996., 15800.,
      17824., 19074., 21364., 23158., 25684., 19312., 21572., 15736., 17760.,
      13354., 15108., 13709., 15348., 16988., 18840., 17174., 19260., 18069.,
      20362., 15725., 17776., 13628., 15464., 12088., 13672., 11760., 13200.,
      12768., 14400., 13560., 15408., 15000., 17040., 13776., 15600., 12768.,
      14400., 11976., 13392., 9317.,  10576., 10628., 12056., 11968., 13576.,
      13855., 15622., 13313., 14892., 12964., 14376., 10626., 11844.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10024., 10688., 9816.,  10480., 9704.,  10368., 10456., 11120., 11272.,
      11936., 11384., 12048., 11592., 12256., 11336., 12000., 10488., 11152.,
      9768.,  10432., 9816.,  10480., 9960.,  10624., 9944.,  10608., 10024.,
      10688., 11272., 11936., 11384., 12048., 11592., 12256., 11512., 12176.,
      11528., 12192., 11384., 12048., 11336., 12000., 9960.,  10624., 9944.,
      10608., 10024., 10688., 9816.,  10480., 9704.,  10368., 10456., 11120.,
      11272., 11936., 11528., 12192., 11384., 12048., 11336., 12000., 10488.,
      11152., 9768.,  10432., 9816.,  10480., 9960.,  10624., 9704.,  10368.,
      10456., 11120., 11272., 11936., 11384., 12048., 11592., 12256., 11512.,
      12176., 11528., 12192., 9768.,  10432., 9816.,  10480., 9960.,  10624.,
      9944.,  10608., 10024., 10688., 9816.,  10480., 9704.,  10368.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10813., 11966., 12020., 13320., 14280., 15624., 15624., 17136., 13043.,
      14524., 14578., 16248., 12586., 14246., 14270., 16140., 10379., 11902.,
      11872., 13584., 8904.,  10248., 10248., 11760., 7973.,  9160.,  9130.,
      10464., 11640., 12960., 13008., 14496., 11712., 13248., 13248., 14976.,
      11784., 13488., 13536., 15456., 12720., 14640., 14640., 16800., 11784.,
      13536., 13488., 15456., 11712., 13248., 13248., 14976., 11640., 13008.,
      12960., 14496., 10187., 11662., 11728., 13392., 11448., 13176., 13176.,
      15120., 13445., 15352., 15418., 17568., 16438., 18578., 18602., 21012.,
      16925., 18886., 18844., 21048., 18360., 20088., 20088., 22032., 13747.,
      15284., 15242., 16968., 11670., 13320., 13380., 15240., 14640., 16560.,
      16560., 18720., 19402., 21524., 21584., 23976., 25244., 27628., 27628.,
      30312., 19402., 21584., 21524., 23976., 14640., 16560., 16560., 18720.,
      11670., 13380., 13320., 15240., 13747., 15242., 15284., 16968., 18360.,
      20088., 20088., 22032., 16925., 18844., 18886., 21048., 16438., 18602.,
      18578., 21012., 13445., 15418., 15352., 17568., 11448., 13176., 13176.,
      15120., 10187., 11728., 11662., 13392., 11640., 12960., 13008., 14496.,
      11712., 13248., 13248., 14976., 11784., 13488., 13536., 15456., 12720.,
      14640., 14640., 16800., 11784., 13536., 13488., 15456., 11712., 13248.,
      13248., 14976., 11640., 13008., 12960., 14496., 7973.,  9130.,  9160.,
      10464., 8904.,  10248., 10248., 11760., 10379., 11872., 11902., 13584.,
      12586., 14270., 14246., 16140., 13043., 14578., 14524., 16248., 14280.,
      15624., 15624., 17136., 10813., 12020., 11966., 13320.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12144., 12880., 12912., 13696., 11728., 12464., 12496., 13280., 11504.,
      12240., 12272., 13056., 11952., 12720., 12720., 13536., 12528., 13328.,
      13296., 14144., 12752., 13552., 13520., 14368., 13168., 13968., 13936.,
      14784., 12656., 13456., 13424., 14272., 12016., 12784., 12784., 13600.,
      11632., 12368., 12400., 13184., 11728., 12464., 12496., 13280., 12016.,
      12752., 12784., 13568., 11984., 12720., 12752., 13536., 12144., 12880.,
      12912., 13696., 12528., 13328., 13296., 14144., 12752., 13552., 13520.,
      14368., 13168., 13968., 13936., 14784., 13008., 13808., 13776., 14624.,
      13040., 13840., 13808., 14656., 12752., 13552., 13520., 14368., 12656.,
      13456., 13424., 14272., 12016., 12752., 12784., 13568., 11984., 12720.,
      12752., 13536., 12144., 12880., 12912., 13696., 11728., 12464., 12496.,
      13280., 11504., 12240., 12272., 13056., 11952., 12720., 12720., 13536.,
      12528., 13328., 13296., 14144., 13040., 13840., 13808., 14656., 12752.,
      13552., 13520., 14368., 12656., 13456., 13424., 14272., 12016., 12784.,
      12784., 13600., 11632., 12368., 12400., 13184., 11728., 12464., 12496.,
      13280., 12016., 12752., 12784., 13568., 11504., 12240., 12272., 13056.,
      11952., 12720., 12720., 13536., 12528., 13328., 13296., 14144., 12752.,
      13552., 13520., 14368., 13168., 13968., 13936., 14784., 13008., 13808.,
      13776., 14624., 13040., 13840., 13808., 14656., 11632., 12368., 12400.,
      13184., 11728., 12464., 12496., 13280., 12016., 12752., 12784., 13568.,
      11984., 12720., 12752., 13536., 12144., 12880., 12912., 13696., 11728.,
      12464., 12496., 13280., 11504., 12240., 12272., 13056.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8409.,  9562.,  10715., 11868., 9492.,  10792., 12092., 13392., 11088.,
      12432., 13776., 15120., 12264., 13776., 15288., 16800., 10237., 11718.,
      13199., 14680., 11614., 13284., 14954., 16624., 10584., 12244., 13904.,
      15564., 12078., 13948., 15818., 17688., 9923.,  11446., 12969., 14492.,
      11216., 12928., 14640., 16352., 11088., 12432., 13776., 15120., 12264.,
      13776., 15288., 16800., 7895.,  9082.,  10269., 11456., 8894.,  10228.,
      11562., 12896., 9096.,  10416., 11736., 13056., 10320., 11808., 13296.,
      14784., 9600.,  11136., 12672., 14208., 10944., 12672., 14400., 16128.,
      12072., 13776., 15480., 17184., 13632., 15552., 17472., 19392., 15840.,
      17760., 19680., 21600., 17520., 19680., 21840., 24000., 11640., 13392.,
      15144., 16896., 13104., 15072., 17040., 19008., 9600.,  11136., 12672.,
      14208., 10944., 12672., 14400., 16128., 8664.,  10032., 11400., 12768.,
      9792.,  11328., 12864., 14400., 10739., 12214., 13689., 15164., 12128.,
      13792., 15456., 17120., 14256., 15984., 17712., 19440., 15768., 17712.,
      19656., 21600., 13127., 15034., 16941., 18848., 14894., 17044., 19194.,
      21344., 13520., 15660., 17800., 19940., 15434., 17844., 20254., 22664.,
      12705., 14666., 16627., 18588., 14364., 16568., 18772., 20976., 14256.,
      15984., 17712., 19440., 15768., 17712., 19656., 21600., 10229., 11766.,
      13303., 14840., 11510., 13236., 14962., 16688., 11338., 12988., 14638.,
      16288., 12868., 14728., 16588., 18448., 12000., 13920., 15840., 17760.,
      13680., 15840., 18000., 20160., 15018., 17140., 19262., 21384., 16968.,
      19360., 21752., 24144., 19688., 22072., 24456., 26840., 21788., 24472.,
      27156., 29840., 14510., 16692., 18874., 21056., 16340., 18792., 21244.,
      23696., 12000., 13920., 15840., 17760., 13680., 15840., 18000., 20160.,
      10862., 12572., 14282., 15992., 12272., 14192., 16112., 18032., 10623.,
      12118., 13613., 15108., 11988., 13672., 15356., 17040., 14256., 15984.,
      17712., 19440., 15768., 17712., 19656., 21600., 13099., 15018., 16937.,
      18856., 14842., 17004., 19166., 21328., 13368., 15532., 17696., 19860.,
      15234., 17668., 20102., 22536., 12581., 14554., 16527., 18500., 14216.,
      16432., 18648., 20864., 14256., 15984., 17712., 19440., 15768., 17712.,
      19656., 21600., 10097., 11638., 13179., 14720., 11354., 13084., 14814.,
      16544., 9096.,  10416., 11736., 13056., 10320., 11808., 13296., 14784.,
      9600.,  11136., 12672., 14208., 10944., 12672., 14400., 16128., 12072.,
      13776., 15480., 17184., 13632., 15552., 17472., 19392., 15840., 17760.,
      19680., 21600., 17520., 19680., 21840., 24000., 11640., 13392., 15144.,
      16896., 13104., 15072., 17040., 19008., 9600.,  11136., 12672., 14208.,
      10944., 12672., 14400., 16128., 8664.,  10032., 11400., 12768., 9792.,
      11328., 12864., 14400., 8213.,  9370.,  10527., 11684., 9272.,  10576.,
      11880., 13184., 11088., 12432., 13776., 15120., 12264., 13776., 15288.,
      16800., 10145., 11638., 13131., 14624., 11498., 13180., 14862., 16544.,
      10304., 11988., 13672., 15356., 11750., 13644., 15538., 17432., 9735.,
      11270., 12805., 14340., 11004., 12728., 14452., 16176., 11088., 12432.,
      13776., 15120., 12264., 13776., 15288., 16800., 7907.,  9114.,  10321.,
      11528., 8882.,  10236., 11590., 12944.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10752., 11488., 12224., 12960., 11472., 12256., 13040., 13824., 10432.,
      11168., 11904., 12640., 11152., 11936., 12720., 13504., 10496., 11232.,
      11968., 12704., 11216., 12000., 12784., 13568., 10848., 11616., 12384.,
      13152., 11568., 12384., 13200., 14016., 11456., 12256., 13056., 13856.,
      12176., 13024., 13872., 14720., 11392., 12192., 12992., 13792., 12112.,
      12960., 13808., 14656., 11712., 12512., 13312., 14112., 12432., 13280.,
      14128., 14976., 12736., 13536., 14336., 15136., 13456., 14304., 15152.,
      16000., 12000., 12768., 13536., 14304., 12720., 13536., 14352., 15168.,
      11776., 12512., 13248., 13984., 12496., 13280., 14064., 14848., 11456.,
      12192., 12928., 13664., 12176., 12960., 13744., 14528., 11520., 12256.,
      12992., 13728., 12240., 13024., 13808., 14592., 10944., 11680., 12416.,
      13152., 11664., 12448., 13232., 14016., 10752., 11488., 12224., 12960.,
      11472., 12256., 13040., 13824., 11456., 12256., 13056., 13856., 12176.,
      13024., 13872., 14720., 11392., 12192., 12992., 13792., 12112., 12960.,
      13808., 14656., 11712., 12512., 13312., 14112., 12432., 13280., 14128.,
      14976., 11904., 12704., 13504., 14304., 12624., 13472., 14320., 15168.,
      12480., 13280., 14080., 14880., 13200., 14048., 14896., 15744., 12416.,
      13216., 14016., 14816., 13136., 13984., 14832., 15680., 12736., 13536.,
      14336., 15136., 13456., 14304., 15152., 16000., 11520., 12256., 12992.,
      13728., 12240., 13024., 13808., 14592., 10944., 11680., 12416., 13152.,
      11664., 12448., 13232., 14016., 10752., 11488., 12224., 12960., 11472.,
      12256., 13040., 13824., 10432., 11168., 11904., 12640., 11152., 11936.,
      12720., 13504., 10496., 11232., 11968., 12704., 11216., 12000., 12784.,
      13568., 10848., 11616., 12384., 13152., 11568., 12384., 13200., 14016.,
      11456., 12256., 13056., 13856., 12176., 13024., 13872., 14720., 12480.,
      13280., 14080., 14880., 13200., 14048., 14896., 15744., 12416., 13216.,
      14016., 14816., 13136., 13984., 14832., 15680., 12736., 13536., 14336.,
      15136., 13456., 14304., 15152., 16000., 12000., 12768., 13536., 14304.,
      12720., 13536., 14352., 15168., 11776., 12512., 13248., 13984., 12496.,
      13280., 14064., 14848., 11456., 12192., 12928., 13664., 12176., 12960.,
      13744., 14528., 11520., 12256., 12992., 13728., 12240., 13024., 13808.,
      14592., 10496., 11232., 11968., 12704., 11216., 12000., 12784., 13568.,
      10848., 11616., 12384., 13152., 11568., 12384., 13200., 14016., 11456.,
      12256., 13056., 13856., 12176., 13024., 13872., 14720., 11392., 12192.,
      12992., 13792., 12112., 12960., 13808., 14656., 11712., 12512., 13312.,
      14112., 12432., 13280., 14128., 14976., 11904., 12704., 13504., 14304.,
      12624., 13472., 14320., 15168., 12480., 13280., 14080., 14880., 13200.,
      14048., 14896., 15744., 11776., 12512., 13248., 13984., 12496., 13280.,
      14064., 14848., 11456., 12192., 12928., 13664., 12176., 12960., 13744.,
      14528., 11520., 12256., 12992., 13728., 12240., 13024., 13808., 14592.,
      10944., 11680., 12416., 13152., 11664., 12448., 13232., 14016., 10752.,
      11488., 12224., 12960., 11472., 12256., 13040., 13824., 10432., 11168.,
      11904., 12640., 11152., 11936., 12720., 13504., 10496., 11232., 11968.,
      12704., 11216., 12000., 12784., 13568.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8249.,  9502.,  10755., 12008., 10660., 12072., 13484., 14896., 10430.,
      12028., 13626., 15224., 11523., 13286., 15049., 16812., 10989., 12558.,
      14127., 15696., 10612., 12008., 13404., 14800., 8652.,  9864.,  11076.,
      12288., 9408.,  10848., 12288., 13728., 10848., 12480., 14112., 15744.,
      12408., 14256., 16104., 17952., 15480., 17520., 19560., 21600., 13056.,
      14880., 16704., 18528., 10848., 12480., 14112., 15744., 10056., 11472.,
      12888., 14304., 10533., 12126., 13719., 15312., 13708., 15512., 17316.,
      19120., 13428., 15480., 17532., 19584., 14881., 17154., 19427., 21700.,
      14261., 16294., 18327., 20360., 13884., 15704., 17524., 19344., 11378.,
      12964., 14550., 16136., 11736., 13528., 15320., 17112., 13512., 15536.,
      17560., 19584., 15410., 17700., 19990., 22280., 19182., 21708., 24234.,
      26760., 16140., 18400., 20660., 22920., 13384., 15408., 17432., 19456.,
      12410., 14164., 15918., 17672., 11011., 12650., 14289., 15928., 13980.,
      15832., 17684., 19536., 13894., 15980., 18066., 20152., 15461., 17754.,
      20047., 22340., 14567., 16618., 18669., 20720., 13932., 15768., 17604.,
      19440., 11616., 13200., 14784., 16368., 9408.,  10848., 12288., 13728.,
      10848., 12480., 14112., 15744., 12408., 14256., 16104., 17952., 15480.,
      17520., 19560., 21600., 13056., 14880., 16704., 18528., 10848., 12480.,
      14112., 15744., 10056., 11472., 12888., 14304., 8495.,  9754.,  11013.,
      12272., 10836., 12264., 13692., 15120., 10776., 12384., 13992., 15600.,
      11991., 13758., 15525., 17292., 11223., 12802., 14381., 15960., 10660.,
      12072., 13484., 14896., 8930.,  10148., 11366., 12584.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10264., 10928., 11592., 12256., 9912.,  10576., 11240., 11904., 9752.,
      10416., 11080., 11744., 9656.,  10320., 10984., 11648., 9752.,  10416.,
      11080., 11744., 9912.,  10576., 11240., 11904., 10264., 10928., 11592.,
      12256., 9752.,  10416., 11080., 11744., 9656.,  10320., 10984., 11648.,
      9752.,  10416., 11080., 11744., 9912.,  10576., 11240., 11904., 10264.,
      10928., 11592., 12256., 10168., 10832., 11496., 12160., 10264., 10928.,
      11592., 12256., 9752.,  10416., 11080., 11744., 9912.,  10576., 11240.,
      11904., 10264., 10928., 11592., 12256., 10168., 10832., 11496., 12160.,
      10264., 10928., 11592., 12256., 9912.,  10576., 11240., 11904., 9752.,
      10416., 11080., 11744., 10264., 10928., 11592., 12256., 10168., 10832.,
      11496., 12160., 10264., 10928., 11592., 12256., 9912.,  10576., 11240.,
      11904., 9752.,  10416., 11080., 11744., 9656.,  10320., 10984., 11648.,
      9752.,  10416., 11080., 11744., 10264., 10928., 11592., 12256., 9912.,
      10576., 11240., 11904., 9752.,  10416., 11080., 11744., 9656.,  10320.,
      10984., 11648., 9752.,  10416., 11080., 11744., 9912.,  10576., 11240.,
      11904., 10264., 10928., 11592., 12256., 9752.,  10416., 11080., 11744.,
      9656.,  10320., 10984., 11648., 9752.,  10416., 11080., 11744., 9912.,
      10576., 11240., 11904., 10264., 10928., 11592., 12256., 10168., 10832.,
      11496., 12160., 10264., 10928., 11592., 12256., 9752.,  10416., 11080.,
      11744., 9912.,  10576., 11240., 11904., 10264., 10928., 11592., 12256.,
      10168., 10832., 11496., 12160., 10264., 10928., 11592., 12256., 9912.,
      10576., 11240., 11904., 9752.,  10416., 11080., 11744.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7907.,  8882.,  9114.,  10236., 10321., 11590., 11528., 12944., 11088.,
      12264., 12432., 13776., 13776., 15288., 15120., 16800., 9735.,  11004.,
      11270., 12728., 12805., 14452., 14340., 16176., 10304., 11750., 11988.,
      13644., 13672., 15538., 15356., 17432., 10145., 11498., 11638., 13180.,
      13131., 14862., 14624., 16544., 11088., 12264., 12432., 13776., 13776.,
      15288., 15120., 16800., 8213.,  9272.,  9370.,  10576., 10527., 11880.,
      11684., 13184., 8664.,  9792.,  10032., 11328., 11400., 12864., 12768.,
      14400., 9600.,  10944., 11136., 12672., 12672., 14400., 14208., 16128.,
      11640., 13104., 13392., 15072., 15144., 17040., 16896., 19008., 15840.,
      17520., 17760., 19680., 19680., 21840., 21600., 24000., 12072., 13632.,
      13776., 15552., 15480., 17472., 17184., 19392., 9600.,  10944., 11136.,
      12672., 12672., 14400., 14208., 16128., 9096.,  10320., 10416., 11808.,
      11736., 13296., 13056., 14784., 10097., 11354., 11638., 13084., 13179.,
      14814., 14720., 16544., 14256., 15768., 15984., 17712., 17712., 19656.,
      19440., 21600., 12581., 14216., 14554., 16432., 16527., 18648., 18500.,
      20864., 13368., 15234., 15532., 17668., 17696., 20102., 19860., 22536.,
      13099., 14842., 15018., 17004., 16937., 19166., 18856., 21328., 14256.,
      15768., 15984., 17712., 17712., 19656., 19440., 21600., 10623., 11988.,
      12118., 13672., 13613., 15356., 15108., 17040., 10862., 12272., 12572.,
      14192., 14282., 16112., 15992., 18032., 12000., 13680., 13920., 15840.,
      15840., 18000., 17760., 20160., 14510., 16340., 16692., 18792., 18874.,
      21244., 21056., 23696., 19688., 21788., 22072., 24472., 24456., 27156.,
      26840., 29840., 15018., 16968., 17140., 19360., 19262., 21752., 21384.,
      24144., 12000., 13680., 13920., 15840., 15840., 18000., 17760., 20160.,
      11338., 12868., 12988., 14728., 14638., 16588., 16288., 18448., 10229.,
      11510., 11766., 13236., 13303., 14962., 14840., 16688., 14256., 15768.,
      15984., 17712., 17712., 19656., 19440., 21600., 12705., 14364., 14666.,
      16568., 16627., 18772., 18588., 20976., 13520., 15434., 15660., 17844.,
      17800., 20254., 19940., 22664., 13127., 14894., 15034., 17044., 16941.,
      19194., 18848., 21344., 14256., 15768., 15984., 17712., 17712., 19656.,
      19440., 21600., 10739., 12128., 12214., 13792., 13689., 15456., 15164.,
      17120., 8664.,  9792.,  10032., 11328., 11400., 12864., 12768., 14400.,
      9600.,  10944., 11136., 12672., 12672., 14400., 14208., 16128., 11640.,
      13104., 13392., 15072., 15144., 17040., 16896., 19008., 15840., 17520.,
      17760., 19680., 19680., 21840., 21600., 24000., 12072., 13632., 13776.,
      15552., 15480., 17472., 17184., 19392., 9600.,  10944., 11136., 12672.,
      12672., 14400., 14208., 16128., 9096.,  10320., 10416., 11808., 11736.,
      13296., 13056., 14784., 7895.,  8894.,  9082.,  10228., 10269., 11562.,
      11456., 12896., 11088., 12264., 12432., 13776., 13776., 15288., 15120.,
      16800., 9923.,  11216., 11446., 12928., 12969., 14640., 14492., 16352.,
      10584., 12078., 12244., 13948., 13904., 15818., 15564., 17688., 10237.,
      11614., 11718., 13284., 13199., 14954., 14680., 16624., 11088., 12264.,
      12432., 13776., 13776., 15288., 15120., 16800., 8409.,  9492.,  9562.,
      10792., 10715., 12092., 11868., 13392.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12128., 12848., 12896., 13664., 13664., 14480., 14432., 15296., 11424.,
      12144., 12192., 12960., 12960., 13776., 13728., 14592., 11104., 11824.,
      11872., 12640., 12640., 13456., 13408., 14272., 10912., 11632., 11680.,
      12448., 12448., 13264., 13216., 14080., 11104., 11824., 11872., 12640.,
      12640., 13456., 13408., 14272., 11424., 12144., 12192., 12960., 12960.,
      13776., 13728., 14592., 12128., 12848., 12896., 13664., 13664., 14480.,
      14432., 15296., 11104., 11824., 11872., 12640., 12640., 13456., 13408.,
      14272., 10912., 11632., 11680., 12448., 12448., 13264., 13216., 14080.,
      11104., 11824., 11872., 12640., 12640., 13456., 13408., 14272., 11424.,
      12144., 12192., 12960., 12960., 13776., 13728., 14592., 12128., 12848.,
      12896., 13664., 13664., 14480., 14432., 15296., 11936., 12656., 12704.,
      13472., 13472., 14288., 14240., 15104., 12128., 12848., 12896., 13664.,
      13664., 14480., 14432., 15296., 11104., 11824., 11872., 12640., 12640.,
      13456., 13408., 14272., 11424., 12144., 12192., 12960., 12960., 13776.,
      13728., 14592., 12128., 12848., 12896., 13664., 13664., 14480., 14432.,
      15296., 11936., 12656., 12704., 13472., 13472., 14288., 14240., 15104.,
      12128., 12848., 12896., 13664., 13664., 14480., 14432., 15296., 11424.,
      12144., 12192., 12960., 12960., 13776., 13728., 14592., 11104., 11824.,
      11872., 12640., 12640., 13456., 13408., 14272., 12128., 12848., 12896.,
      13664., 13664., 14480., 14432., 15296., 11936., 12656., 12704., 13472.,
      13472., 14288., 14240., 15104., 12128., 12848., 12896., 13664., 13664.,
      14480., 14432., 15296., 11424., 12144., 12192., 12960., 12960., 13776.,
      13728., 14592., 11104., 11824., 11872., 12640., 12640., 13456., 13408.,
      14272., 10912., 11632., 11680., 12448., 12448., 13264., 13216., 14080.,
      11104., 11824., 11872., 12640., 12640., 13456., 13408., 14272., 12128.,
      12848., 12896., 13664., 13664., 14480., 14432., 15296., 11424., 12144.,
      12192., 12960., 12960., 13776., 13728., 14592., 11104., 11824., 11872.,
      12640., 12640., 13456., 13408., 14272., 10912., 11632., 11680., 12448.,
      12448., 13264., 13216., 14080., 11104., 11824., 11872., 12640., 12640.,
      13456., 13408., 14272., 11424., 12144., 12192., 12960., 12960., 13776.,
      13728., 14592., 12128., 12848., 12896., 13664., 13664., 14480., 14432.,
      15296., 11104., 11824., 11872., 12640., 12640., 13456., 13408., 14272.,
      10912., 11632., 11680., 12448., 12448., 13264., 13216., 14080., 11104.,
      11824., 11872., 12640., 12640., 13456., 13408., 14272., 11424., 12144.,
      12192., 12960., 12960., 13776., 13728., 14592., 12128., 12848., 12896.,
      13664., 13664., 14480., 14432., 15296., 11936., 12656., 12704., 13472.,
      13472., 14288., 14240., 15104., 12128., 12848., 12896., 13664., 13664.,
      14480., 14432., 15296., 11104., 11824., 11872., 12640., 12640., 13456.,
      13408., 14272., 11424., 12144., 12192., 12960., 12960., 13776., 13728.,
      14592., 12128., 12848., 12896., 13664., 13664., 14480., 14432., 15296.,
      11936., 12656., 12704., 13472., 13472., 14288., 14240., 15104., 12128.,
      12848., 12896., 13664., 13664., 14480., 14432., 15296., 11424., 12144.,
      12192., 12960., 12960., 13776., 13728., 14592., 11104., 11824., 11872.,
      12640., 12640., 13456., 13408., 14272.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      735.,  1134.,  1533., 1932., 1218., 1764.,  2310., 2856.,  1701.,  2394.,
      3087., 3780.,  2184., 3024., 3864., 4704.,  2184., 2688.,  3192.,  3696.,
      2688., 3360.,  4032., 4704., 3192., 4032.,  4872., 5712.,  3696.,  4704.,
      5712., 6720.,  945.,  1470., 1995., 2520.,  1554., 2268.,  2982.,  3696.,
      2163., 3066.,  3969., 4872., 2772., 3864.,  4956., 6048.,  2730.,  3360.,
      3990., 4620.,  3360., 4200., 5040., 5880.,  3990., 5040.,  6090.,  7140.,
      4620., 5880.,  7140., 8400., 945.,  1554.,  2163., 2772.,  1470.,  2268.,
      3066., 3864.,  1995., 2982., 3969., 4956.,  2520., 3696.,  4872.,  6048.,
      2184., 2688.,  3192., 3696., 2688., 3360.,  4032., 4704.,  3192.,  4032.,
      4872., 5712.,  3696., 4704., 5712., 6720.,  735.,  1218.,  1701.,  2184.,
      1134., 1764.,  2394., 3024., 1533., 2310.,  3087., 3864.,  1932.,  2856.,
      3780., 4704.,  840.,  1296., 1752., 2208.,  1392., 2016.,  2640.,  3264.,
      1944., 2736.,  3528., 4320., 2496., 3456.,  4416., 5376.,  2496.,  3072.,
      3648., 4224.,  3072., 3840., 4608., 5376.,  3648., 4608.,  5568.,  6528.,
      4224., 5376.,  6528., 7680., 1080., 1680.,  2280., 2880.,  1776.,  2592.,
      3408., 4224.,  2472., 3504., 4536., 5568.,  3168., 4416.,  5664.,  6912.,
      3120., 3840.,  4560., 5280., 3840., 4800.,  5760., 6720.,  4560.,  5760.,
      6960., 8160.,  5280., 6720., 8160., 9600.,  1080., 1776.,  2472.,  3168.,
      1680., 2592.,  3504., 4416., 2280., 3408.,  4536., 5664.,  2880.,  4224.,
      5568., 6912.,  2496., 3072., 3648., 4224.,  3072., 3840.,  4608.,  5376.,
      3648., 4608.,  5568., 6528., 4224., 5376.,  6528., 7680.,  840.,   1392.,
      1944., 2496.,  1296., 2016., 2736., 3456.,  1752., 2640.,  3528.,  4416.,
      2208., 3264.,  4320., 5376., 945.,  1458.,  1971., 2484.,  1566.,  2268.,
      2970., 3672.,  2187., 3078., 3969., 4860.,  2808., 3888.,  4968.,  6048.,
      2808., 3456.,  4104., 4752., 3456., 4320.,  5184., 6048.,  4104.,  5184.,
      6264., 7344.,  4752., 6048., 7344., 8640.,  1215., 1890.,  2565.,  3240.,
      1998., 2916.,  3834., 4752., 2781., 3942.,  5103., 6264.,  3564.,  4968.,
      6372., 7776.,  3510., 4320., 5130., 5940.,  4320., 5400.,  6480.,  7560.,
      5130., 6480.,  7830., 9180., 5940., 7560.,  9180., 10800., 1215.,  1998.,
      2781., 3564.,  1890., 2916., 3942., 4968.,  2565., 3834.,  5103.,  6372.,
      3240., 4752.,  6264., 7776., 2808., 3456.,  4104., 4752.,  3456.,  4320.,
      5184., 6048.,  4104., 5184., 6264., 7344.,  4752., 6048.,  7344.,  8640.,
      945.,  1566.,  2187., 2808., 1458., 2268.,  3078., 3888.,  1971.,  2970.,
      3969., 4968.,  2484., 3672., 4860., 6048.,  1050., 1620.,  2190.,  2760.,
      1740., 2520.,  3300., 4080., 2430., 3420.,  4410., 5400.,  3120.,  4320.,
      5520., 6720.,  3120., 3840., 4560., 5280.,  3840., 4800.,  5760.,  6720.,
      4560., 5760.,  6960., 8160., 5280., 6720.,  8160., 9600.,  1350.,  2100.,
      2850., 3600.,  2220., 3240., 4260., 5280.,  3090., 4380.,  5670.,  6960.,
      3960., 5520.,  7080., 8640., 3900., 4800.,  5700., 6600.,  4800.,  6000.,
      7200., 8400.,  5700., 7200., 8700., 10200., 6600., 8400.,  10200., 12000.,
      1350., 2220.,  3090., 3960., 2100., 3240.,  4380., 5520.,  2850.,  4260.,
      5670., 7080.,  3600., 5280., 6960., 8640.,  3120., 3840.,  4560.,  5280.,
      3840., 4800.,  5760., 6720., 4560., 5760.,  6960., 8160.,  5280.,  6720.,
      8160., 9600.,  1050., 1740., 2430., 3120.,  1620., 2520.,  3420.,  4320.,
      2190., 3300.,  4410., 5520., 2760., 4080.,  5400., 6720.,  945.,   1458.,
      1971., 2484.,  1566., 2268., 2970., 3672.,  2187., 3078.,  3969.,  4860.,
      2808., 3888.,  4968., 6048., 2808., 3456.,  4104., 4752.,  3456.,  4320.,
      5184., 6048.,  4104., 5184., 6264., 7344.,  4752., 6048.,  7344.,  8640.,
      1215., 1890.,  2565., 3240., 1998., 2916.,  3834., 4752.,  2781.,  3942.,
      5103., 6264.,  3564., 4968., 6372., 7776.,  3510., 4320.,  5130.,  5940.,
      4320., 5400.,  6480., 7560., 5130., 6480.,  7830., 9180.,  5940.,  7560.,
      9180., 10800., 1215., 1998., 2781., 3564.,  1890., 2916.,  3942.,  4968.,
      2565., 3834.,  5103., 6372., 3240., 4752.,  6264., 7776.,  2808.,  3456.,
      4104., 4752.,  3456., 4320., 5184., 6048.,  4104., 5184.,  6264.,  7344.,
      4752., 6048.,  7344., 8640., 945.,  1566.,  2187., 2808.,  1458.,  2268.,
      3078., 3888.,  1971., 2970., 3969., 4968.,  2484., 3672.,  4860.,  6048.,
      840.,  1296.,  1752., 2208., 1392., 2016.,  2640., 3264.,  1944.,  2736.,
      3528., 4320.,  2496., 3456., 4416., 5376.,  2496., 3072.,  3648.,  4224.,
      3072., 3840.,  4608., 5376., 3648., 4608.,  5568., 6528.,  4224.,  5376.,
      6528., 7680.,  1080., 1680., 2280., 2880.,  1776., 2592.,  3408.,  4224.,
      2472., 3504.,  4536., 5568., 3168., 4416.,  5664., 6912.,  3120.,  3840.,
      4560., 5280.,  3840., 4800., 5760., 6720.,  4560., 5760.,  6960.,  8160.,
      5280., 6720.,  8160., 9600., 1080., 1776.,  2472., 3168.,  1680.,  2592.,
      3504., 4416.,  2280., 3408., 4536., 5664.,  2880., 4224.,  5568.,  6912.,
      2496., 3072.,  3648., 4224., 3072., 3840.,  4608., 5376.,  3648.,  4608.,
      5568., 6528.,  4224., 5376., 6528., 7680.,  840.,  1392.,  1944.,  2496.,
      1296., 2016.,  2736., 3456., 1752., 2640.,  3528., 4416.,  2208.,  3264.,
      4320., 5376.,  735.,  1134., 1533., 1932.,  1218., 1764.,  2310.,  2856.,
      1701., 2394.,  3087., 3780., 2184., 3024.,  3864., 4704.,  2184.,  2688.,
      3192., 3696.,  2688., 3360., 4032., 4704.,  3192., 4032.,  4872.,  5712.,
      3696., 4704.,  5712., 6720., 945.,  1470.,  1995., 2520.,  1554.,  2268.,
      2982., 3696.,  2163., 3066., 3969., 4872.,  2772., 3864.,  4956.,  6048.,
      2730., 3360.,  3990., 4620., 3360., 4200.,  5040., 5880.,  3990.,  5040.,
      6090., 7140.,  4620., 5880., 7140., 8400.,  945.,  1554.,  2163.,  2772.,
      1470., 2268.,  3066., 3864., 1995., 2982.,  3969., 4956.,  2520.,  3696.,
      4872., 6048.,  2184., 2688., 3192., 3696.,  2688., 3360.,  4032.,  4704.,
      3192., 4032.,  4872., 5712., 3696., 4704.,  5712., 6720.,  735.,   1218.,
      1701., 2184.,  1134., 1764., 2394., 3024.,  1533., 2310.,  3087.,  3864.,
      1932., 2856.,  3780., 4704.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 8.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432.,
      13248., 14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328.,
      12048., 12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680.,
      14496., 12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152.,
      11712., 12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152.,
      14016., 14880., 15744., 10608., 11328., 12048., 12768., 11328., 12096.,
      12864., 13632., 12048., 12864., 13680., 14496., 12768., 13632., 14496.,
      15360., 10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016.,
      12432., 13248., 14064., 14880., 13152., 14016., 14880., 15744., 10608.,
      11328., 12048., 12768., 11328., 12096., 12864., 13632., 12048., 12864.,
      13680., 14496., 12768., 13632., 14496., 15360., 10992., 11712., 12432.,
      13152., 11712., 12480., 13248., 14016., 12432., 13248., 14064., 14880.,
      13152., 14016., 14880., 15744., 10992., 11712., 12432., 13152., 11712.,
      12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016.,
      14880., 15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864.,
      13632., 12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360.,
      10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432.,
      13248., 14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328.,
      12048., 12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680.,
      14496., 12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152.,
      11712., 12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152.,
      14016., 14880., 15744., 10608., 11328., 12048., 12768., 11328., 12096.,
      12864., 13632., 12048., 12864., 13680., 14496., 12768., 13632., 14496.,
      15360., 10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016.,
      12432., 13248., 14064., 14880., 13152., 14016., 14880., 15744., 10992.,
      11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248.,
      14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048.,
      12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496.,
      12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712.,
      12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016.,
      14880., 15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864.,
      13632., 12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360.,
      10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432.,
      13248., 14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328.,
      12048., 12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680.,
      14496., 12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152.,
      11712., 12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152.,
      14016., 14880., 15744., 10992., 11712., 12432., 13152., 11712., 12480.,
      13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880.,
      15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864., 13632.,
      12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360., 10992.,
      11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248.,
      14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048.,
      12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496.,
      12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712.,
      12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016.,
      14880., 15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864.,
      13632., 12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360.,
      10992., 11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432.,
      13248., 14064., 14880., 13152., 14016., 14880., 15744., 10992., 11712.,
      12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248., 14064.,
      14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048., 12768.,
      11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496., 12768.,
      13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712., 12480.,
      13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880.,
      15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864., 13632.,
      12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360., 10992.,
      11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248.,
      14064., 14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048.,
      12768., 11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496.,
      12768., 13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712.,
      12480., 13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016.,
      14880., 15744., 10992., 11712., 12432., 13152., 11712., 12480., 13248.,
      14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880., 15744.,
      10608., 11328., 12048., 12768., 11328., 12096., 12864., 13632., 12048.,
      12864., 13680., 14496., 12768., 13632., 14496., 15360., 10992., 11712.,
      12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248., 14064.,
      14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048., 12768.,
      11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496., 12768.,
      13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712., 12480.,
      13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880.,
      15744., 10608., 11328., 12048., 12768., 11328., 12096., 12864., 13632.,
      12048., 12864., 13680., 14496., 12768., 13632., 14496., 15360., 10992.,
      11712., 12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248.,
      14064., 14880., 13152., 14016., 14880., 15744., 10992., 11712., 12432.,
      13152., 11712., 12480., 13248., 14016., 12432., 13248., 14064., 14880.,
      13152., 14016., 14880., 15744., 10608., 11328., 12048., 12768., 11328.,
      12096., 12864., 13632., 12048., 12864., 13680., 14496., 12768., 13632.,
      14496., 15360., 10992., 11712., 12432., 13152., 11712., 12480., 13248.,
      14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880., 15744.,
      10608., 11328., 12048., 12768., 11328., 12096., 12864., 13632., 12048.,
      12864., 13680., 14496., 12768., 13632., 14496., 15360., 10992., 11712.,
      12432., 13152., 11712., 12480., 13248., 14016., 12432., 13248., 14064.,
      14880., 13152., 14016., 14880., 15744., 10608., 11328., 12048., 12768.,
      11328., 12096., 12864., 13632., 12048., 12864., 13680., 14496., 12768.,
      13632., 14496., 15360., 10992., 11712., 12432., 13152., 11712., 12480.,
      13248., 14016., 12432., 13248., 14064., 14880., 13152., 14016., 14880.,
      15744.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, features, padding,
                                 max_input_val);
}