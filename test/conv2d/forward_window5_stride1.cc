/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Pair>
using ForwardWindow5Stride1 = WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(ForwardWindow5Stride1, GTestTypeTriples);
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554., 2142., 2760., 3030., 2460., 1869., 2636., 3564., 4510.,
      4820., 3860., 2894., 3850., 5140., 6425., 6750., 5350., 3970.,
      5110., 6760., 8375., 8700., 6850., 5050., 3632., 4756., 5830.,
      6040., 4700., 3422., 2292., 2958., 3570., 3690., 2820., 2013.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425., 6750., 8375., 8700.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 6988.,  7264.,  9136.,  9512.,  11180., 11660.,
      11580., 12080., 8992.,  9400.,  6532.,  6844.,  4350.,  4584.,  5598.,
      5916.,  6735.,  7140.,  6960.,  7380.,  5298.,  5640.,  3765.,  4026.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500.,
                                         16225., 16750., 16850., 17400.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,
      3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,
      3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,
      4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,
      7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,
      4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,
      8238.,  8528.,  10431., 10806., 11181., 11556., 11080., 11480., 11880.,
      12280., 8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,
      8404.,  8704.,  9004.,  9304.,  10706., 11116., 11526., 11936., 14325.,
      14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100.,
      12550., 13000., 8669.,  9014.,  9359.,  9704.,  7556.,  7832.,  8108.,
      8384.,  9576.,  9952.,  10328., 10704., 13304., 13784., 14264., 14744.,
      13828., 14328., 14828., 15328., 10856., 11264., 11672., 12080., 8208.,
      8520.,  8832.,  9144.,  8466.,  8700.,  8934.,  9168.,  10878., 11196.,
      11514., 11832., 13065., 13470., 13875., 14280., 13500., 13920., 14340.,
      14760., 10254., 10596., 10938., 11280., 7269.,  7530.,  7791.,  8052.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,
      14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980., 5989.,  5975.,  4716.,  3545.,  4600.,  6272., 9112.,
      10048., 8384., 6800.,  8471.,  11348., 12649., 12287., 9180., 6233.,
      7363.,  9028., 10541., 10083., 7372.,  5413.,  5872.,  7456., 10304.,
      10856., 6944., 5160.,  5747.,  6516.,  7365.,  6791.,  4300., 3177.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12649., 12287., 10541., 10083.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  6460.,  6912.,  7728.,  8320.,  9556.,  10240.,
      9684.,  10320., 6064.,  6528.,  4860.,  5200.,  4583.,  4870.,  5564.,
      5928.,  6565.,  7018.,  6573.,  7022.,  5356.,  5688.,  5031.,  5298.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12527., 13298., 12663., 13470.,
                                         13599., 14458., 13607., 14438.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  6484.,  6936.,  7388.,
      7840.,  7888.,  8480.,  9072.,  9664.,  10492., 11176., 11860., 12544.,
      9772.,  10408., 11044., 11680., 5968.,  6432.,  6896.,  7360.,  4804.,
      5144.,  5484.,  5824.,  3151.,  3438.,  3725.,  4012.,  5324.,  5688.,
      6052.,  6416.,  7397.,  7850.,  8303.,  8756.,  6521.,  6970.,  7419.,
      7868.,  5036.,  5368.,  5700.,  6032.,  4419.,  4686.,  4953.,  5220.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.,
      12131., 12990., 13849., 14708., 12687., 13518., 14349., 15180.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 10008., 13600., 18600.,
      21192., 15136., 13880., 8310.,  9928.,  12186., 14066., 11240., 10206.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24510., 24614., 25774., 28118.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 12024., 12784., 15008., 16064., 21064., 22352.,
      22088., 23440., 15008., 16064., 13048., 13872., 5826.,  6316.,  10104.,
      10768., 15102., 15988., 15166., 16164., 12920., 13712., 10786., 11452.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24226., 25724., 26338., 27980.,
                                         22562., 24156., 25186., 26796.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 11128., 11888., 12648.,
      13408., 16160., 17216., 18272., 19328., 20232., 21520., 22808., 24096.,
      21192., 22544., 23896., 25248., 16160., 17216., 18272., 19328., 12088.,
      12912., 13736., 14560., 7322.,  7812.,  8302.,  8792.,  9944.,  10608.,
      11272., 11936., 13254., 14140., 15026., 15912., 13782., 14780., 15778.,
      16776., 12376., 13168., 13960., 14752., 9578.,  10244., 10910., 11576.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755., 2404., 3080., 3350., 3620., 2920., 2205., 3008.,  4048.,
      5100., 5410., 5720., 4560., 3404., 4420., 5880., 7325.,  7650.,
      7975., 6300., 4660., 5890., 7770., 9600., 9925., 10250., 8050.,
      5920., 4190., 5472., 6690., 6900., 7110., 5520., 4010.,  2646.,
      3406., 4100., 4220., 4340., 3310., 2358.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325., 7650., 7975.,
                                         9600., 9925., 10250.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 8062.,  8380.,  10512., 10944., 12830., 13380., 13230.,
      13800., 13630., 14220., 10560., 11040., 7654.,  8020.,  5022.,  5292.,
      6446.,  6812.,  7735.,  8200.,  7960.,  8440.,  8185.,  8680.,  6218.,
      6620.,  4410.,  4716.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300.,
                                         15475., 15950., 18600., 19200.,
                                         19225., 19850., 19850., 20500.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,
      3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,
      5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,
      3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,
      7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,
      8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,
      5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,
      9696.,  11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440., 7692.,
      7992.,  8292.,  8592.,  9661.,  10006., 10351., 10696., 12262., 12732.,
      13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275.,
      18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304.,
      10177., 10582., 10987., 11392., 8702.,  9020.,  9338.,  9656.,  10992.,
      11424., 11856., 12288., 15254., 15804., 16354., 16904., 15778., 16348.,
      16918., 17488., 16302., 16892., 17482., 18072., 12768., 13248., 13728.,
      14208., 9630.,  9996.,  10362., 10728., 9774.,  10044., 10314., 10584.,
      12526., 12892., 13258., 13624., 15005., 15470., 15935., 16400., 15440.,
      15920., 16400., 16880., 15875., 16370., 16865., 17360., 12034., 12436.,
      12838., 13240., 8514.,  8820.,  9126.,  9432.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 16376., 16976., 17576., 18176.,
      17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113., 5483., 4700.,  3925.,  5140.,  6704.,
      10252., 11444., 10716., 8592., 6500., 8395.,  9956.,  11141., 10043.,
      9201.,  7092.,  5135.,  6953., 8412., 11007., 11189., 11627., 9548.,
      5597.,  7148.,  9104.,  9652., 8796., 8196.,  5840.,  3612.,  5115.,
      6868.,  7357.,  7167.,  7105., 5124., 3255.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11141., 10043., 9201.,
                                         11007., 11189., 11627.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  6732.,  7160.,  8240.,  8800.,  8420.,  9064.,  7780.,
      8376.,  7652.,  8200.,  6192.,  6624.,  5260.,  5560.,  4455.,  4758.,
      6716.,  7144.,  8421.,  8922.,  9197.,  9694.,  8181.,  8674.,  5292.,
      5672.,  2895.,  3150.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13215., 13994., 11943., 12694.,
                                         11183., 11906., 13015., 13854.,
                                         12255., 13066., 12007., 12790.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  6924.,  7352.,  7780.,  8208.,  8432.,
      8992.,  9552.,  10112., 8772.,  9416.,  10060., 10704., 8564.,  9160.,
      9756.,  10352., 9380.,  9928.,  10476., 11024., 6768.,  7200.,  7632.,
      8064.,  4748.,  5048.,  5348.,  5648.,  4159.,  4462.,  4765.,  5068.,
      6284.,  6712.,  7140.,  7568.,  7221.,  7722.,  8223.,  8724.,  7881.,
      8378.,  8875.,  9372.,  7005.,  7498.,  7991.,  8484.,  5500.,  5880.,
      6260.,  6640.,  3615.,  3870.,  4125.,  4380.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 12007., 12846., 13685., 14524.,
      11027., 11838., 12649., 13460., 11071., 11854., 12637., 13420.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912., 15392.,
      19448., 19928., 18680., 16736., 15560., 18658., 20632., 26254., 23158.,
      24478., 17496., 13778., 19850., 25080., 27622., 26254., 23158., 19000.,
      12154., 15592., 20128., 23640., 18936., 16280., 11168., 9960.,  13078.,
      16520., 19514., 18194., 14314., 9096.,  5094.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26254., 23158., 24478.,
                                         27622., 26254., 23158.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 18296., 19344., 21664., 22976., 24776., 26288., 19656.,
      20976., 18632., 19760., 13472., 14272., 10104., 10640., 11970., 12780.,
      17784., 18832., 18174., 19380., 16190., 17252., 13182., 14100., 11384.,
      11984., 6498.,  6860.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25634., 27164., 21602., 23020.,
                                         22178., 23612., 26082., 27852.,
                                         25634., 27164., 21602., 23020.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8234.,  8708.,  9182.,  9656.,  7960.,  8560.,  9160.,  9760.,  12726.,
      13500., 14274., 15048., 10310., 11068., 11826., 12584., 12886., 13756.,
      14626., 15496., 12376., 13168., 13960., 14752., 9578.,  10244., 10910.,
      11576., 10328., 11120., 11912., 12704., 16288., 17216., 18144., 19072.,
      15528., 16656., 17784., 18912., 17640., 18704., 19768., 20832., 16552.,
      17680., 18808., 19936., 14240., 15168., 16096., 17024., 12376., 13168.,
      13960., 14752., 17302., 18364., 19426., 20488., 17896., 19216., 20536.,
      21856., 25418., 26948., 28478., 30008., 19514., 20932., 22350., 23768.,
      22698., 24132., 25566., 27000., 16552., 17680., 18808., 19936., 12886.,
      13756., 14626., 15496., 16518., 17724., 18930., 20136., 24872., 26384.,
      27896., 29408., 24026., 25796., 27566., 29336., 25418., 26948., 28478.,
      30008., 19514., 20932., 22350., 23768., 17640., 18704., 19768., 20832.,
      10310., 11068., 11826., 12584., 16728., 17776., 18824., 19872., 18976.,
      20288., 21600., 22912., 24872., 26384., 27896., 29408., 17896., 19216.,
      20536., 21856., 19112., 20240., 21368., 22496., 11296., 12096., 12896.,
      13696., 9048.,  9584.,  10120., 10656., 11610., 12420., 13230., 14040.,
      16728., 17776., 18824., 19872., 16518., 17724., 18930., 20136., 17302.,
      18364., 19426., 20488., 11942., 12860., 13778., 14696., 10520., 11120.,
      11720., 12320., 4378.,  4740.,  5102.,  5464.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25418., 26948., 28478., 30008., 19514., 20932., 22350., 23768.,
      22698., 24132., 25566., 27000., 24026., 25796., 27566., 29336.,
      25418., 26948., 28478., 30008., 19514., 20932., 22350., 23768.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956., 2666., 3400., 3670., 3940., 4210., 3380.,  2541.,  3380.,  4532.,
      5690., 6000., 6310., 6620., 5260., 3914., 4990.,  6620.,  8225.,  8550.,
      8875., 9200., 7250., 5350., 6670., 8780., 10825., 11150., 11475., 11800.,
      9250., 6790., 4748., 6188., 7550., 7760., 7970.,  8180.,  6340.,  4598.,
      3000., 3854., 4630., 4750., 4870., 4990., 3800.,  2703.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8550.,  8875.,  9200.,
                                         10825., 11150., 11475., 11800.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 9136.,  9496.,  11888., 12376., 14480., 15100., 14880., 15520.,
      15280., 15940., 15680., 16360., 12128., 12680., 8776.,  9196.,  5694.,
      6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,  9185.,  9740.,
      9410.,  9980.,  7138.,  7600.,  5055.,  5406.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,
      4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,
      5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,
      4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,
      5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,
      9152.,  9472.,  9792.,  9436.,  9776.,  10116., 10456., 10040., 10400.,
      10760., 11120., 7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,
      6696.,  7630.,  7900.,  8170.,  8440.,  9754.,  10124., 10494., 10864.,
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292.,
      12742., 13192., 8845.,  9190.,  9535.,  9880.,  10918., 11308., 11698.,
      12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452.,
      19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374.,
      21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150.,
      12615., 13080., 9848.,  10208., 10568., 10928., 12408., 12896., 13384.,
      13872., 17204., 17824., 18444., 19064., 17728., 18368., 19008., 19648.,
      18252., 18912., 19572., 20232., 18776., 19456., 20136., 20816., 14680.,
      15232., 15784., 16336., 11052., 11472., 11892., 12312., 11082., 11388.,
      11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995.,
      18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480.,
      18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200., 9759.,
      10110., 10461., 10812.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384.,
      14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832.,
      18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176.,
      19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599., 2340., 4265.,  5243.,  6221.,  7199.,  6028.,  4913.,
      5584., 7648., 9856.,  11144., 12432., 13720., 10912., 8216.,
      3839., 5364., 8065.,  9463.,  10861., 12259., 9868.,  7621.,
      6479., 8756., 11121., 12519., 13917., 15315., 11980., 8853.,
      3496., 4800., 7240.,  8368.,  9496.,  10624., 8576.,  6672.,
      4515., 6132., 7765.,  8695.,  9625.,  10555., 8188.,  5925.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8065.,  9463.,  10861., 12259.,
                                         11121., 12519., 13917., 15315.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3420.,  3696.,  5168.,  5568.,  7924.,  8464.,  9076.,  9696.,
      10228., 10928., 11380., 12160., 9648.,  10304., 8476.,  8992.,  4455.,
      4710.,  5820.,  6184.,  7077.,  7562.,  7981.,  8526.,  8885.,  9490.,
      9789.,  10454., 7532.,  8088.,  5751.,  6186.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4420.,  4696.,  4972.,  5248.,  6032.,  6432.,  6832.,
      7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216., 10836., 11456.,
      10796., 11496., 12196., 12896., 11996., 12776., 13556., 14336., 9872.,
      10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,  3439.,  3694.,
      3949.,  4204.,  5324.,  5688.,  6052.,  6416.,  6853.,  7338.,  7823.,
      8308.,  7705.,  8250.,  8795.,  9340.,  8557.,  9162.,  9767.,  10372.,
      9409.,  10074., 10739., 11404., 8396.,  8952.,  9508.,  10064., 6459.,
      6894.,  7329.,  7764.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684.,
      13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344.,
      1750., 3208., 3802., 4242., 4426., 4354., 3592., 3470.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6590., 6790., 7246., 7958.,
                                         6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456.,
      5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656.,
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052., 2286., 2520., 3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680., 3702., 4188., 4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956., 5538., 6120., 3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960., 2424., 2736., 3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072., 5656., 6240., 4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520., 5832., 6608., 7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272., 4776., 5280., 3030., 3420., 3810., 4200.,  5160., 5840.,
      6520., 7200., 5610., 6340., 7070., 7800., 6170., 6980.,  7790., 8600.,
      6730., 7620., 8510., 9400., 7290., 8260., 9230., 10200., 5160., 5840.,
      6520., 7200., 4710., 5340., 5970., 6600., 3030., 3420.,  3810., 4200.,
      5160., 5840., 6520., 7200., 5610., 6340., 7070., 7800.,  6170., 6980.,
      7790., 8600., 6730., 7620., 8510., 9400., 7290., 8260.,  9230., 10200.,
      5160., 5840., 6520., 7200., 4710., 5340., 5970., 6600.,  2424., 2736.,
      3048., 3360., 4128., 4672., 5216., 5760., 4488., 5072.,  5656., 6240.,
      4936., 5584., 6232., 6880., 5384., 6096., 6808., 7520.,  5832., 6608.,
      7384., 8160., 4128., 4672., 5216., 5760., 3768., 4272.,  4776., 5280.,
      1818., 2052., 2286., 2520., 3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680., 3702., 4188., 4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956., 5538., 6120., 3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340., 7070., 7800., 6170., 6980., 7790., 8600.,
      6730., 7620., 8510., 9400., 7290., 8260., 9230., 10200.,
      5610., 6340., 7070., 7800., 6170., 6980., 7790., 8600.,
      6730., 7620., 8510., 9400., 7290., 8260., 9230., 10200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142., 2760., 3030., 2460., 1869., 2636., 3564., 4510.,
      4820.,  3860., 2894., 3850., 5140., 6425., 6750., 5350., 3970.,
      5110.,  6760., 8375., 8700., 6850., 5050., 6370., 8380., 10325.,
      10650., 8350., 6130., 4460., 5812., 7090., 7300., 5660., 4106.,
      2778.,  3570., 4290., 4410., 3360., 2391.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425., 6750.,  8375.,
                                         8700., 10325., 10650.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 8572.,  8920.,  11152.,
      11624., 13580., 14180., 13980., 14600., 10816., 11320., 7828.,  8212.,
      5268.,  5556.,  6750.,  7140.,  8085.,  8580.,  8310.,  8820.,  6306.,
      6720.,  4467.,  4782.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500.,
                                         16225., 16750., 16850., 17400.,
                                         19975., 20650., 20600., 21300.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,
      3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,
      3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,
      4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,
      7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,
      4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,
      8238.,  8528.,  10431., 10806., 11181., 11556., 11080., 11480., 11880.,
      12280., 8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,
      8404.,  8704.,  9004.,  9304.,  10706., 11116., 11526., 11936., 14325.,
      14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100.,
      12550., 13000., 8669.,  9014.,  9359.,  9704.,  10870., 11260., 11650.,
      12040., 13754., 14284., 14814., 15344., 18219., 18894., 19569., 20244.,
      18868., 19568., 20268., 20968., 14602., 15172., 15742., 16312., 10799.,
      11234., 11669., 12104., 9500.,  9848.,  10196., 10544., 11976., 12448.,
      12920., 13392., 16448., 17048., 17648., 18248., 16972., 17592., 18212.,
      18832., 13256., 13760., 14264., 14768., 9960.,  10344., 10728., 11112.,
      10248., 10536., 10824., 11112., 13110., 13500., 13890., 14280., 15675.,
      16170., 16665., 17160., 16110., 16620., 17130., 17640., 12198., 12612.,
      13026., 13440., 8619.,  8934.,  9249.,  9564.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,
      14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624.,
      18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980., 5989.,  5975.,  4716.,  3545.,  4600.,  6272., 9112.,
      10048., 8384., 6800.,  8471.,  11348., 12649., 12287., 9180., 6233.,
      7363.,  9028., 10541., 10083., 7372.,  5413.,  6959.,  8948., 12209.,
      13031., 8636., 6385.,  6144.,  7008.,  8528.,  8152.,  5536., 4344.,
      4887.,  5764., 6705.,  6771.,  4764.,  3501.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12649., 12287., 10541.,
                                         10083., 12209., 13031.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  7701.,  8222.,  9620.,  10312., 12111., 12930.,
      12631., 13422., 9316.,  9912.,  7205.,  7650.,  5308.,  5664.,  6448.,
      6912.,  8148.,  8736.,  8404.,  9008.,  6832.,  7296.,  6268.,  6640.,
      5143.,  5454.,  7612.,  8008.,  8021.,  8514.,  7261.,  7750.,  4460.,
      4824.,  3351.,  3642.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12527., 13298., 12663., 13470.,
                                         13599., 14458., 13607., 14438.,
                                         12111., 12930., 12631., 13422.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  7553.,  8074.,  8595.,
      9116.,  9364.,  10056., 10748., 11440., 12267., 13086., 13905., 14724.,
      11799., 12590., 13381., 14172., 8116.,  8712.,  9308.,  9904.,  6029.,
      6474.,  6919.,  7364.,  4532.,  4888.,  5244.,  5600.,  6992.,  7456.,
      7920.,  8384.,  9820.,  10408., 10996., 11584., 9292.,  9896.,  10500.,
      11104., 6992.,  7456.,  7920.,  8384.,  5796.,  6168.,  6540.,  6912.,
      4503.,  4814.,  5125.,  5436.,  6828.,  7224.,  7620.,  8016.,  6941.,
      7434.,  7927.,  8420.,  6577.,  7066.,  7555.,  8044.,  5516.,  5880.,
      6244.,  6608.,  4107.,  4398.,  4689.,  4980.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.,
      12131., 12990., 13849., 14708., 12687., 13518., 14349., 15180.,
      12267., 13086., 13905., 14724., 11799., 12590., 13381., 14172.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 14994., 21208., 28574.,
      28870., 20920., 17066., 11288., 13600., 16808., 18376., 15136., 14136.,
      11110., 17160., 16234., 13698., 8616.,  6990.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24510., 24614., 25774.,
                                         28118., 28574., 28870.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 16478., 17508., 21192., 22640., 28066., 29756.,
      26594., 28300., 17864., 19184., 14206., 15188., 11512., 12272., 17056.,
      18112., 21576., 22864., 20552., 21904., 17056., 18112., 14584., 15408.,
      8258.,  8844.,  14200., 14992., 13950., 14868., 13502., 14404., 12920.,
      13584., 8610.,  9116.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24226., 25724., 26338., 27980.,
                                         22562., 24156., 25186., 26796.,
                                         28066., 29756., 26594., 28300.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 14518., 15548., 16578.,
      17608., 21864., 23312., 24760., 26208., 26538., 28228., 29918., 31608.,
      25626., 27332., 29038., 30744., 20456., 21776., 23096., 24416., 13414.,
      14396., 15378., 16360., 12152., 12912., 13672., 14432., 16160., 17216.,
      18272., 19328., 19208., 20496., 21784., 23072., 20168., 21520., 22872.,
      24224., 16160., 17216., 18272., 19328., 13112., 13936., 14760., 15584.,
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736.,
      26538., 28228., 29918., 31608., 25626., 27332., 29038., 30744.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350., 3620., 2920.,  2205., 3008., 4048., 5100.,
      5410.,  5720.,  4560.,  3404., 4420., 5880.,  7325., 7650., 7975., 6300.,
      4660.,  5890.,  7770.,  9600., 9925., 10250., 8050., 5920., 7360., 9660.,
      11875., 12200., 12525., 9800., 7180., 5156.,  6704., 8160., 8370., 8580.,
      6640.,  4808.,  3213.,  4120., 4940., 5060.,  5180., 3940., 2799.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7650.,  7975.,  9600., 9925.,
                                         10250., 11875., 12200., 12525.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 9910.,  10312.,
      12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688.,
      13280., 9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,
      9535.,  10120., 9760.,  10360., 7394.,  7880.,  5229.,  5598.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,
      3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,
      5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,
      3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,
      7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,
      8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,
      5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,
      9696.,  11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440., 7692.,
      7992.,  8292.,  8592.,  9661.,  10006., 10351., 10696., 12262., 12732.,
      13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275.,
      18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304.,
      10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818.,
      16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368.,
      23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498.,
      19168., 12662., 13172., 13682., 14192., 10970., 11372., 11774., 12176.,
      13792., 14336., 14880., 15424., 18922., 19612., 20302., 20992., 19446.,
      20156., 20866., 21576., 19970., 20700., 21430., 22160., 15568., 16160.,
      16752., 17344., 11674., 12124., 12574., 13024., 11853., 12186., 12519.,
      12852., 15130., 15580., 16030., 16480., 18050., 18620., 19190., 19760.,
      18485., 19070., 19655., 20240., 18920., 19520., 20120., 20720., 14302.,
      14788., 15274., 15760., 10089., 10458., 10827., 11196.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131.,
      13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650.,
      18275., 18900., 17674., 18324., 18974., 19624., 20919., 21694., 22469.,
      23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113.,  5483.,  4700.,  3925.,  5140.,  6704.,
      10252., 11444., 10716., 8592.,  6500.,  8395.,  9956.,  11141., 10043.,
      9201.,  7092.,  5135.,  6953.,  8412.,  11007., 11189., 11627., 9548.,
      5597.,  9351.,  11988., 13177., 12591., 11141., 7940.,  4939.,  5908.,
      7792.,  9708.,  9716.,  9372.,  7184.,  5220.,  6165.,  8188.,  9547.,
      9997.,  8687.,  6444.,  4353.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11141., 10043., 9201.,  11007., 11189.,
                                         11627., 13177., 12591., 11141.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  9365.,  9934.,  12052., 12808., 13327., 14226., 13079.,
      13950., 13215., 13994., 10212., 10824., 7789.,  8214.,  5900.,  6344.,
      8368.,  8992.,  11492., 12248., 12516., 13288., 10852., 11576., 7472.,
      8032.,  4812.,  5192.,  6111.,  6474.,  7996.,  8504.,  8477.,  9078.,
      8485.,  9082.,  7085.,  7614.,  5484.,  5880.,  4455.,  4706.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13215., 13994., 11943., 12694., 11183., 11906., 13015., 13854., 12255.,
      13066., 12007., 12790., 13327., 14226., 13079., 13950., 13215., 13994.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  9169.,  9738.,  10307., 10876., 11348.,
      12104., 12860., 13616., 12059., 12958., 13857., 14756., 12103., 12974.,
      13845., 14716., 12979., 13758., 14537., 15316., 8868.,  9480.,  10092.,
      10704., 5681.,  6106.,  6531.,  6956.,  6908.,  7352.,  7796.,  8240.,
      9392.,  10016., 10640., 11264., 11732., 12488., 13244., 14000., 12740.,
      13512., 14284., 15056., 10484., 11208., 11932., 12656., 7920.,  8480.,
      9040.,  9600.,  5436.,  5816.,  6196.,  6576.,  4979.,  5342.,  5705.,
      6068.,  7484.,  7992.,  8500.,  9008.,  9153.,  9754.,  10355., 10956.,
      8277.,  8874.,  9471.,  10068., 6697.,  7226.,  7755.,  8284.,  5484.,
      5880.,  6276.,  6672.,  5203.,  5454.,  5705.,  5956.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,
      10718., 11441., 12164., 12007., 12846., 13685., 14524., 11027., 11838.,
      12649., 13460., 11071., 11854., 12637., 13420., 12059., 12958., 13857.,
      14756., 12103., 12974., 13845., 14716., 12979., 13758., 14537., 15316.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912., 15392.,
      19448., 19928., 18680., 16736., 15560., 18658., 20632., 26254., 23158.,
      24478., 17496., 13778., 19850., 25080., 27622., 26254., 23158., 19000.,
      12154., 18674., 25112., 30718., 27622., 26254., 18776., 14946., 15048.,
      19104., 23928., 23640., 18936., 13024., 8712.,  10670., 15720., 18466.,
      19514., 18194., 12264., 7550.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26254., 23158., 24478., 27622., 26254.,
                                         23158., 30718., 27622., 26254.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 21086., 22308., 25800., 27376., 30114., 31996., 26082.,
      27852., 25634., 27164., 17864., 18992., 12222., 12996., 15736., 16720.,
      22688., 24000., 25288., 26864., 24776., 26288., 19656., 20976., 16032.,
      16960., 10104., 10704., 9858.,  10524., 15224., 16208., 19646., 20868.,
      18174., 19380., 16190., 17252., 11896., 12688., 9250.,  9724.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25634., 27164., 21602., 23020., 22178., 23612., 26082., 27852., 25634.,
      27164., 21602., 23020., 30114., 31996., 26082., 27852., 25634., 27164.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      3096., 3504., 3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      5160., 5840., 6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200.,
      3702., 4188., 4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840.,
      6520., 7200., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316.,
      4818., 5320., 3926., 4444., 4962., 5480., 5160., 5840., 6520., 7200.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 5160., 5840., 6520., 7200., 3926., 4444., 4962., 5480.,
      3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320., 2154., 2436.,
      2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444., 4962., 5480.,
      3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160., 3096., 3504.,
      3912., 4320., 2154., 2436., 2718., 3000.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506.,
      7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222.,
      9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956., 2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,
      3380., 4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,
      4990., 6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,
      6670., 8780.,  10825., 11150., 11475., 11800., 9250.,  6790.,
      8350., 10940., 13425., 13750., 14075., 14400., 11250., 8230.,
      5852., 7596.,  9230.,  9440.,  9650.,  9860.,  7620.,  5510.,
      3648., 4670.,  5590.,  5710.,  5830.,  5950.,  4520.,  3207.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8550.,  8875.,  9200.,
                                         10825., 11150., 11475., 11800.,
                                         13425., 13750., 14075., 14400.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500.,
      27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 11248.,
      11704., 14576., 15192., 17680., 18460., 18080., 18880., 18480., 19300.,
      18880., 19720., 14560., 15240., 10504., 11020., 6918.,  7296.,  8830.,
      9340.,  10535., 11180., 10760., 11420., 10985., 11660., 11210., 11900.,
      8482.,  9040.,  5991.,  6414.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.,
      25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,
      4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,
      5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,
      4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,
      5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,
      9152.,  9472.,  9792.,  9436.,  9776.,  10116., 10456., 10040., 10400.,
      10760., 11120., 7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,
      6696.,  7630.,  7900.,  8170.,  8440.,  9754.,  10124., 10494., 10864.,
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292.,
      12742., 13192., 8845.,  9190.,  9535.,  9880.,  10918., 11308., 11698.,
      12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452.,
      19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374.,
      21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150.,
      12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262.,
      19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968.,
      24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714.,
      20484., 21254., 22024., 14525., 15110., 15695., 16280., 12440., 12896.,
      13352., 13808., 15608., 16224., 16840., 17456., 21396., 22176., 22956.,
      23736., 21920., 22720., 23520., 24320., 22444., 23264., 24084., 24904.,
      22968., 23808., 24648., 25488., 17880., 18560., 19240., 19920., 13388.,
      13904., 14420., 14936., 13458., 13836., 14214., 14592., 17150., 17660.,
      18170., 18680., 20425., 21070., 21715., 22360., 20860., 21520., 22180.,
      22840., 21295., 21970., 22645., 23320., 21730., 22420., 23110., 23800.,
      16406., 16964., 17522., 18080., 11559., 11982., 12405., 12828.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384.,
      14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832.,
      18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176.,
      19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624.,
      23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968.,
      24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599., 2340., 4265.,  5243.,  6221.,  7199.,  6028.,  4913.,
      5584., 7648., 9856.,  11144., 12432., 13720., 10912., 8216.,
      3839., 5364., 8065.,  9463.,  10861., 12259., 9868.,  7621.,
      6479., 8756., 11121., 12519., 13917., 15315., 11980., 8853.,
      3839., 5364., 8065.,  9463.,  10861., 12259., 9868.,  7621.,
      4648., 6336., 8136.,  9264.,  10392., 11520., 9088.,  6800.,
      2835., 4020., 5285.,  6215.,  7145.,  8075.,  6332.,  4629.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8065.,  9463.,  10861., 12259.,
                                         11121., 12519., 13917., 15315.,
                                         8065.,  9463.,  10861., 12259.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 12132., 12888., 10293., 10890., 4700.,
      4976.,  6192.,  6592.,  7668.,  8208.,  8820.,  9440.,  9972.,  10672.,
      11124., 11904., 8624.,  9280.,  6684.,  7200.,  2215.,  2374.,  3772.,
      4008.,  5349.,  5674.,  6253.,  6638.,  7157.,  7602.,  8061.,  8566.,
      7020.,  7448.,  6327.,  6666.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,
      7856.,  9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540.,
      12296., 13052., 13808., 8981.,  9578.,  10175., 10772., 3908.,  4184.,
      4460.,  4736.,  6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,
      9504.,  9084.,  9704.,  10324., 10944., 10284., 10984., 11684., 12384.,
      11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840., 7508.,
      8024.,  8540.,  9056.,  2127.,  2286.,  2445.,  2604.,  3404.,  3640.,
      3876.,  4112.,  4581.,  4906.,  5231.,  5556.,  5433.,  5818.,  6203.,
      6588.,  6285.,  6730.,  7175.,  7620.,  7137.,  7642.,  8147.,  8652.,
      6476.,  6904.,  7332.,  7760.,  5659.,  5998.,  6337.,  6676.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684.,
      13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208.,
      3802., 4242., 4426., 4354., 3592., 3470.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6590., 6790., 7246., 7958.,
                                         6590., 6790., 7246., 7958.,
                                         6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608.,
      6408., 7184., 4512., 5056., 4152., 4656., 1858., 2092., 3256., 3664.,
      3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920.,
      2946., 3324.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052.,  2286., 2520., 3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188., 4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120., 3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960.,  2424., 2736., 3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240., 4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608., 7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280., 3030., 3420., 3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340., 7070., 7800., 6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400., 7290., 8260., 9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340., 5970., 6600., 3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200., 5610., 6340., 7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620., 8510., 9400., 7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200., 4710., 5340., 5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840., 6520., 7200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600., 6730., 7620., 8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840., 6520., 7200., 4710., 5340.,  5970., 6600.,
      2424., 2736.,  3048., 3360., 4128., 4672., 5216., 5760.,  4488., 5072.,
      5656., 6240.,  4936., 5584., 6232., 6880., 5384., 6096.,  6808., 7520.,
      5832., 6608.,  7384., 8160., 4128., 4672., 5216., 5760.,  3768., 4272.,
      4776., 5280.,  1818., 2052., 2286., 2520., 3096., 3504.,  3912., 4320.,
      3366., 3804.,  4242., 4680., 3702., 4188., 4674., 5160.,  4038., 4572.,
      5106., 5640.,  4374., 4956., 5538., 6120., 3096., 3504.,  3912., 4320.,
      2826., 3204.,  3582., 3960.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340.,  7070., 7800., 6170., 6980.,  7790., 8600., 6730., 7620.,
      8510., 9400.,  7290., 8260., 9230., 10200., 5610., 6340., 7070., 7800.,
      6170., 6980.,  7790., 8600., 6730., 7620.,  8510., 9400., 7290., 8260.,
      9230., 10200., 5610., 6340., 7070., 7800.,  6170., 6980., 7790., 8600.,
      6730., 7620.,  8510., 9400., 7290., 8260.,  9230., 10200.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554., 2142.,  2760.,  3030.,  2460., 1869., 2636.,  3564.,  4510., 4820.,
      3860., 2894.,  3850.,  5140.,  6425., 6750., 5350.,  3970.,  5110., 6760.,
      8375., 8700.,  6850.,  5050.,  6370., 8380., 10325., 10650., 8350., 6130.,
      7630., 10000., 12275., 12600., 9850., 7210., 5288.,  6868.,  8350., 8560.,
      6620., 4790.,  3264.,  4182.,  5010., 5130., 3900.,  2769.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425.,  6750.,  8375.,  8700.,
                                         10325., 10650., 12275., 12600.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 14780., 15260., 19350.,
      20000., 23725., 24550., 24350., 25200., 19010., 19700., 13895., 14420.,
      10156., 10576., 13168., 13736., 15980., 16700., 16380., 17120., 12640.,
      13240., 9124.,  9580.,  6186.,  6528.,  7902.,  8364.,  9435.,  10020.,
      9660.,  10260., 7314.,  7800.,  5169.,  5538.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400.,
      19975., 20650., 20600., 21300., 23725., 24550., 24350., 25200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,
      3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,
      3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,
      4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,
      7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,
      4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,
      8238.,  8528.,  10431., 10806., 11181., 11556., 11080., 11480., 11880.,
      12280., 8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,
      8404.,  8704.,  9004.,  9304.,  10706., 11116., 11526., 11936., 14325.,
      14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100.,
      12550., 13000., 8669.,  9014.,  9359.,  9704.,  10870., 11260., 11650.,
      12040., 13754., 14284., 14814., 15344., 18219., 18894., 19569., 20244.,
      18868., 19568., 20268., 20968., 14602., 15172., 15742., 16312., 10799.,
      11234., 11669., 12104., 13336., 13816., 14296., 14776., 16802., 17452.,
      18102., 18752., 22113., 22938., 23763., 24588., 22762., 23612., 24462.,
      25312., 17554., 18244., 18934., 19624., 12929., 13454., 13979., 14504.,
      11444., 11864., 12284., 12704., 14376., 14944., 15512., 16080., 19592.,
      20312., 21032., 21752., 20116., 20856., 21596., 22336., 15656., 16256.,
      16856., 17456., 11712., 12168., 12624., 13080., 12030., 12372., 12714.,
      13056., 15342., 15804., 16266., 16728., 18285., 18870., 19455., 20040.,
      18720., 19320., 19920., 20520., 14142., 14628., 15114., 15600., 9969.,
      10338., 10707., 11076.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,
      14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624.,
      18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968.,
      22113., 22938., 23763., 24588., 22762., 23612., 24462., 25312.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980.,  5989.,  5975.,  4716.,  3545.,  4600.,  6272.,
      9112.,  10048., 8384.,  6800.,  8471.,  11348., 12649., 12287.,
      9180.,  6233.,  7363.,  9028.,  10541., 10083., 7372.,  5413.,
      6959.,  8948.,  12209., 13031., 8636.,  6385.,  8347.,  9892.,
      12053., 11947., 8428.,  6397.,  5680.,  6688.,  9056.,  9320.,
      7008.,  5544.,  5947.,  7572.,  9245.,  9951.,  7788.,  5745.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12649., 12287., 10541., 10083.,
                                         12209., 13031., 12053., 11947.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  7701.,  8222.,  9620.,  10312., 12111., 12930.,
      12631., 13422., 9316.,  9912.,  7205.,  7650.,  7941.,  8438.,  10260.,
      10920., 13055., 13898., 13703., 14582., 12388., 13080., 10197., 10746.,
      6588.,  7040.,  9264.,  9856.,  11092., 11840., 10580., 11344., 7088.,
      7680.,  5500.,  5968.,  5447.,  5782.,  6588.,  7016.,  7685.,  8218.,
      8205.,  8734.,  6636.,  7032.,  5511.,  5826.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438.,
      12111., 12930., 12631., 13422., 13055., 13898., 13703., 14582.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  7553.,  8074.,  8595.,
      9116.,  9364.,  10056., 10748., 11440., 12267., 13086., 13905., 14724.,
      11799., 12590., 13381., 14172., 8116.,  8712.,  9308.,  9904.,  6029.,
      6474.,  6919.,  7364.,  6777.,  7274.,  7771.,  8268.,  9908.,  10568.,
      11228., 11888., 13107., 13950., 14793., 15636., 12831., 13710., 14589.,
      15468., 10580., 11272., 11964., 12656., 7813.,  8362.,  8911.,  9460.,
      7252.,  7704.,  8156.,  8608.,  9936.,  10528., 11120., 11712., 11452.,
      12200., 12948., 13696., 11436., 12200., 12964., 13728., 8912.,  9504.,
      10096., 10688., 6468.,  6936.,  7404.,  7872.,  5343.,  5678.,  6013.,
      6348.,  6284.,  6712.,  7140.,  7568.,  6997.,  7530.,  8063.,  8596.,
      7145.,  7674.,  8203.,  8732.,  5996.,  6392.,  6788.,  7184.,  5331.,
      5646.,  5961.,  6276.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.,
      12131., 12990., 13849., 14708., 12687., 13518., 14349., 15180.,
      12267., 13086., 13905., 14724., 11799., 12590., 13381., 14172.,
      13107., 13950., 14793., 15636., 12831., 13710., 14589., 15468.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944.,
      19336., 21672., 21408., 19224., 14258., 22104., 24510., 24614.,
      19896., 15946., 17858., 21656., 25774., 28118., 20856., 15066.,
      14994., 21208., 28574., 28870., 20920., 17066., 14370., 18584.,
      23886., 27062., 25080., 21434., 13080., 19744., 20648., 19144.,
      13088., 10808., 10326., 14152., 17530., 20114., 14312., 9534.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24510., 24614., 25774., 28118.,
                                         28574., 28870., 23886., 27062.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 16478., 17508., 21192., 22640., 28066., 29756.,
      26594., 28300., 17864., 19184., 14206., 15188., 14302., 15236., 21192.,
      22512., 26914., 28572., 26978., 28780., 24008., 25456., 18686., 19828.,
      12024., 12784., 19104., 20160., 21064., 22352., 22088., 23440., 19104.,
      20160., 13048., 13872., 11714., 12396., 14200., 15120., 15358., 16436.,
      16958., 18020., 12920., 13712., 9506.,  10108.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.,
      28066., 29756., 26594., 28300., 26914., 28572., 26978., 28780.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 14518., 15548., 16578.,
      17608., 21864., 23312., 24760., 26208., 26538., 28228., 29918., 31608.,
      25626., 27332., 29038., 30744., 20456., 21776., 23096., 24416., 13414.,
      14396., 15378., 16360., 14358., 15292., 16226., 17160., 19944., 21264.,
      22584., 23904., 24266., 25924., 27582., 29240., 26298., 28100., 29902.,
      31704., 22376., 23824., 25272., 26720., 17094., 18236., 19378., 20520.,
      11128., 11888., 12648., 13408., 16160., 17216., 18272., 19328., 20232.,
      21520., 22808., 24096., 21192., 22544., 23896., 25248., 16160., 17216.,
      18272., 19328., 12088., 12912., 13736., 14560., 10714., 11396., 12078.,
      12760., 13784., 14704., 15624., 16544., 15622., 16700., 17778., 18856.,
      15254., 16316., 17378., 18440., 12376., 13168., 13960., 14752., 9130.,
      9732.,  10334., 10936.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736.,
      26538., 28228., 29918., 31608., 25626., 27332., 29038., 30744.,
      24266., 25924., 27582., 29240., 26298., 28100., 29902., 31704.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080., 3350., 3620.,  2920.,  2205.,  3008.,
      4048.,  5100.,  5410., 5720., 4560.,  3404.,  4420.,  5880.,
      7325.,  7650.,  7975., 6300., 4660.,  5890.,  7770.,  9600.,
      9925.,  10250., 8050., 5920., 7360.,  9660.,  11875., 12200.,
      12525., 9800.,  7180., 8830., 11550., 14150., 14475., 14800.,
      11550., 8440.,  6122., 7936., 9630.,  9840.,  10050., 7760.,
      5606.,  3780.,  4834., 5780., 5900.,  6020.,  4570.,  3240.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7650.,  7975.,  9600.,
                                         9925.,  10250., 11875., 12200.,
                                         12525., 14150., 14475., 14800.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 17105., 17660.,
      22350., 23100., 27350., 28300., 27975., 28950., 28600., 29600., 22290.,
      23100., 16265., 16880., 11758., 12244., 15216., 15872., 18430., 19260.,
      18830., 19680., 19230., 20100., 14816., 15520., 10678., 11212., 7164.,
      7560.,  9134.,  9668.,  10885., 11560., 11110., 11800., 11335., 12040.,
      8570.,  9140.,  6048.,  6480.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200.,
      19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400.,
      24225., 25050., 27350., 28300., 27975., 28950., 28600., 29600.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,
      3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,
      5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,
      3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,
      7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,
      8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,
      5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,
      9696.,  11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440., 7692.,
      7992.,  8292.,  8592.,  9661.,  10006., 10351., 10696., 12262., 12732.,
      13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275.,
      18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304.,
      10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818.,
      16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368.,
      23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498.,
      19168., 12662., 13172., 13682., 14192., 15415., 15970., 16525., 17080.,
      19374., 20124., 20874., 21624., 25462., 26412., 27362., 28312., 26111.,
      27086., 28061., 29036., 26760., 27760., 28760., 29760., 20602., 21412.,
      22222., 23032., 15147., 15762., 16377., 16992., 13238., 13724., 14210.,
      14696., 16592., 17248., 17904., 18560., 22590., 23420., 24250., 25080.,
      23114., 23964., 24814., 25664., 23638., 24508., 25378., 26248., 18368.,
      19072., 19776., 20480., 13718., 14252., 14786., 15320., 13932., 14328.,
      14724., 15120., 17734., 18268., 18802., 19336., 21095., 21770., 22445.,
      23120., 21530., 22220., 22910., 23600., 21965., 22670., 23375., 24080.,
      16570., 17140., 17710., 18280., 11664., 12096., 12528., 12960.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 16376., 16976., 17576., 18176.,
      17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624.,
      20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968.,
      22217., 23042., 23867., 24692., 25462., 26412., 27362., 28312.,
      26111., 27086., 28061., 29036., 26760., 27760., 28760., 29760.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113.,  5483.,  4700.,  3925.,  5140.,
      6704.,  10252., 11444., 10716., 8592.,  6500.,  8395.,  9956.,
      11141., 10043., 9201.,  7092.,  5135.,  6953.,  8412.,  11007.,
      11189., 11627., 9548.,  5597.,  9351.,  11988., 13177., 12591.,
      11141., 7940.,  4939.,  6437.,  8588.,  10803., 11081., 11007.,
      8476.,  6169.,  6364.,  8464.,  10116., 10764., 9652.,  7344.,
      5228.,  3855.,  5284.,  6745.,  7675.,  7357.,  5588.,  3883.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11141., 10043., 9201.,  11007.,
                                         11189., 11627., 13177., 12591.,
                                         11141., 10803., 11081., 11007.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  9365.,  9934.,  12052., 12808., 13327., 14226., 13079.,
      13950., 13215., 13994., 10212., 10824., 7789.,  8214.,  6445.,  6922.,
      9300.,  9976.,  12871., 13702., 14287., 15154., 13015., 13854., 9956.,
      10616., 6629.,  7090.,  6476.,  6872.,  8496.,  9056.,  9316.,  9992.,
      9572.,  10264., 8420.,  9064.,  6576.,  7072.,  5388.,  5720.,  3287.,
      3518.,  5180.,  5512.,  6997.,  7442.,  7901.,  8406.,  8421.,  8922.,
      7468.,  7880.,  4863.,  5174.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13215., 13994., 11943., 12694., 11183., 11906., 13015., 13854.,
      12255., 13066., 12007., 12790., 13327., 14226., 13079., 13950.,
      13215., 13994., 12871., 13702., 14287., 15154., 13015., 13854.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  9169.,  9738.,  10307., 10876., 11348.,
      12104., 12860., 13616., 12059., 12958., 13857., 14756., 12103., 12974.,
      13845., 14716., 12979., 13758., 14537., 15316., 8868.,  9480.,  10092.,
      10704., 5681.,  6106.,  6531.,  6956.,  7389.,  7866.,  8343.,  8820.,
      10148., 10824., 11500., 12176., 12751., 13582., 14413., 15244., 14011.,
      14878., 15745., 16612., 12007., 12846., 13685., 14524., 9588.,  10248.,
      10908., 11568., 6397.,  6858.,  7319.,  7780.,  5676.,  6072.,  6468.,
      6864.,  8432.,  8992.,  9552.,  10112., 10532., 11208., 11884., 12560.,
      10004., 10696., 11388., 12080., 8772.,  9416.,  10060., 10704., 6960.,
      7456.,  7952.,  8448.,  6252.,  6584.,  6916.,  7248.,  3175.,  3406.,
      3637.,  3868.,  4844.,  5176.,  5508.,  5840.,  6221.,  6666.,  7111.,
      7556.,  7073.,  7578.,  8083.,  8588.,  7221.,  7722.,  8223.,  8724.,
      7004.,  7416.,  7828.,  8240.,  4423.,  4734.,  5045.,  5356.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 12007., 12846., 13685., 14524.,
      11027., 11838., 12649., 13460., 11071., 11854., 12637., 13420.,
      12059., 12958., 13857., 14756., 12103., 12974., 13845., 14716.,
      12979., 13758., 14537., 15316., 12751., 13582., 14413., 15244.,
      14011., 14878., 15745., 16612., 12007., 12846., 13685., 14524.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912.,
      15392., 19448., 19928., 18680., 16736., 15560., 18658., 20632.,
      26254., 23158., 24478., 17496., 13778., 19850., 25080., 27622.,
      26254., 23158., 19000., 12154., 18674., 25112., 30718., 27622.,
      26254., 18776., 14946., 17178., 22776., 29398., 30718., 27622.,
      22968., 16010., 12136., 17760., 21848., 23928., 23640., 16736.,
      11368., 8262.,  12552., 17098., 18466., 19514., 16968., 11350.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26254., 23158., 24478., 27622.,
                                         26254., 23158., 30718., 27622.,
                                         26254., 29398., 30718., 27622.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 21086., 22308., 25800., 27376., 30114., 31996., 26082.,
      27852., 25634., 27164., 17864., 18992., 12222., 12996., 17694., 18804.,
      25800., 27312., 29538., 31404., 30114., 31996., 26082., 27852., 22984.,
      24304., 14206., 15124., 12664., 13456., 19104., 20288., 25288., 26800.,
      25288., 26864., 24776., 26288., 18080., 19264., 13688., 14480., 7746.,
      8268.,  12152., 12944., 16510., 17620., 19646., 20868., 18174., 19380.,
      15480., 16464., 10466., 11180.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25634., 27164., 21602., 23020., 22178., 23612., 26082., 27852.,
      25634., 27164., 21602., 23020., 30114., 31996., 26082., 27852.,
      25634., 27164., 29538., 31404., 30114., 31996., 26082., 27852.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      3096., 3504., 3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      5160., 5840., 6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200.,
      3702., 4188., 4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840.,
      6520., 7200., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316.,
      4818., 5320., 3926., 4444., 4962., 5480., 5160., 5840., 6520., 7200.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 5160., 5840., 6520., 7200., 3926., 4444., 4962., 5480.,
      4038., 4572., 5106., 5640., 5160., 5840., 6520., 7200., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.,
      5160., 5840., 6520., 7200., 4038., 4572., 5106., 5640., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 2490., 2820., 3150., 3480.,
      3096., 3504., 3912., 4320., 4038., 4572., 5106., 5640., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3096., 3504., 3912., 4320.,
      2490., 2820., 3150., 3480.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,
      3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,
      4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,
      6670.,  8780.,  10825., 11150., 11475., 11800., 9250.,  6790.,
      8350.,  10940., 13425., 13750., 14075., 14400., 11250., 8230.,
      10030., 13100., 16025., 16350., 16675., 17000., 13250., 9670.,
      6956.,  9004.,  10910., 11120., 11330., 11540., 8900.,  6422.,
      4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,  3711.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1134., 1224., 1494., 1620., 2123., 2288., 2360., 2540., 2597., 2792.,
      2834., 3044., 2266., 2440., 1747., 1882., 2368., 2536., 3072., 3304.,
      4264., 4564., 4576., 4896., 4888., 5228., 5200., 5560., 4112., 4408.,
      3120., 3348., 2510., 2684., 3270., 3512., 4775., 5090., 5112., 5452.,
      5449., 5814., 5786., 6176., 4610., 4932., 3539., 3788., 3734., 3932.,
      4870., 5144., 5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408.,
      5378., 5732., 3899., 4172., 2846., 3068., 3654., 3960., 4663., 5058.,
      5000., 5420., 5337., 5782., 5674., 6144., 4354., 4740., 3171., 3468.,
      2918., 3164., 3718., 4056., 4959., 5394., 5296., 5756., 5633., 6118.,
      5970., 6480., 4610., 5028., 3403., 3724., 2416., 2584., 3120., 3352.,
      4560., 4860., 4832., 5152., 5104., 5444., 5376., 5736., 4288., 4584.,
      3304., 3532., 3246., 3408., 4222., 4444., 5135., 5420., 5360., 5660.,
      5585., 5900., 5810., 6140., 4450., 4720., 3183., 3390.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775., 5090., 5112., 5452., 5449., 5814., 5786., 6176.,
      5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408.,
      4663., 5058., 5000., 5420., 5337., 5782., 5674., 6144.,
      4959., 5394., 5296., 5756., 5633., 6118., 5970., 6480.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1378., 1468., 1558., 1648., 1902., 2028., 2154., 2280., 2641., 2806.,
      2971., 3136., 2876., 3056., 3236., 3416., 3111., 3306., 3501., 3696.,
      3346., 3556., 3766., 3976., 3110., 3284., 3458., 3632., 2239., 2374.,
      2509., 2644., 2584., 2752., 2920., 3088., 3448., 3680., 3912., 4144.,
      4708., 5008., 5308., 5608., 5024., 5344., 5664., 5984., 5340., 5680.,
      6020., 6360., 5656., 6016., 6376., 6736., 5144., 5440., 5736., 6032.,
      3868., 4096., 4324., 4552., 2350., 2524., 2698., 2872., 3066., 3308.,
      3550., 3792., 4435., 4750., 5065., 5380., 4796., 5136., 5476., 5816.,
      5157., 5522., 5887., 6252., 5518., 5908., 6298., 6688., 4578., 4900.,
      5222., 5544., 3661., 3910., 4159., 4408., 3238., 3436., 3634., 3832.,
      4442., 4716., 4990., 5264., 5499., 5854., 6209., 6564., 5860., 6240.,
      6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012., 7442., 7872.,
      5570., 5924., 6278., 6632., 4357., 4630., 4903., 5176., 2974., 3196.,
      3418., 3640., 4282., 4588., 4894., 5200., 5667., 6062., 6457., 6852.,
      6028., 6448., 6868., 7288., 6389., 6834., 7279., 7724., 6750., 7220.,
      7690., 8160., 6050., 6436., 6822., 7208., 4925., 5222., 5519., 5816.,
      3606., 3852., 4098., 4344., 4634., 4972., 5310., 5648., 5963., 6398.,
      6833., 7268., 6324., 6784., 7244., 7704., 6685., 7170., 7655., 8140.,
      7046., 7556., 8066., 8576., 6018., 6436., 6854., 7272., 4341., 4662.,
      4983., 5304., 2264., 2432., 2600., 2768., 2904., 3136., 3368., 3600.,
      4180., 4480., 4780., 5080., 4448., 4768., 5088., 5408., 4716., 5056.,
      5396., 5736., 4984., 5344., 5704., 6064., 3960., 4256., 4552., 4848.,
      3212., 3440., 3668., 3896., 2650., 2812., 2974., 3136., 3582., 3804.,
      4026., 4248., 4353., 4638., 4923., 5208., 4564., 4864., 5164., 5464.,
      4775., 5090., 5405., 5720., 4986., 5316., 5646., 5976., 3958., 4228.,
      4498., 4768., 3183., 3390., 3597., 3804.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4435., 4750., 5065., 5380., 4796., 5136., 5476., 5816., 5157., 5522.,
      5887., 6252., 5518., 5908., 6298., 6688., 5499., 5854., 6209., 6564.,
      5860., 6240., 6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012.,
      7442., 7872., 5667., 6062., 6457., 6852., 6028., 6448., 6868., 7288.,
      6389., 6834., 7279., 7724., 6750., 7220., 7690., 8160., 5963., 6398.,
      6833., 7268., 6324., 6784., 7244., 7704., 6685., 7170., 7655., 8140.,
      7046., 7556., 8066., 8576.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599., 2340., 4265.,  5243.,  6221.,  7199.,  6028.,  4913.,
      5584., 7648., 9856.,  11144., 12432., 13720., 10912., 8216.,
      3839., 5364., 8065.,  9463.,  10861., 12259., 9868.,  7621.,
      6479., 8756., 11121., 12519., 13917., 15315., 11980., 8853.,
      3839., 5364., 8065.,  9463.,  10861., 12259., 9868.,  7621.,
      6479., 8756., 11121., 12519., 13917., 15315., 11980., 8853.,
      3496., 4800., 7240.,  8368.,  9496.,  10624., 8576.,  6672.,
      4515., 6132., 7765.,  8695.,  9625.,  10555., 8188.,  5925.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 12132., 12888., 10293., 10890., 6869.,
      7262.,  9364.,  9928.,  11791., 12546., 13335., 14190., 14879., 15834.,
      16423., 17478., 14180., 15064., 10613., 11306., 3420.,  3696.,  5168.,
      5568.,  7924.,  8464.,  9076.,  9696.,  10228., 10928., 11380., 12160.,
      9648.,  10304., 8476.,  8992.,  4455.,  4710.,  5820.,  6184.,  7077.,
      7562.,  7981.,  8526.,  8885.,  9490.,  9789.,  10454., 7532.,  8088.,
      5751.,  6186.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,
      7856.,  9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540.,
      12296., 13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,
      6547.,  6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177.,
      12932., 12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436.,
      15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,
      10218., 10911., 11604., 4420.,  4696.,  4972.,  5248.,  6032.,  6432.,
      6832.,  7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216., 10836.,
      11456., 10796., 11496., 12196., 12896., 11996., 12776., 13556., 14336.,
      9872.,  10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,  3439.,
      3694.,  3949.,  4204.,  5324.,  5688.,  6052.,  6416.,  6853.,  7338.,
      7823.,  8308.,  7705.,  8250.,  8795.,  9340.,  8557.,  9162.,  9767.,
      10372., 9409.,  10074., 10739., 11404., 8396.,  8952.,  9508.,  10064.,
      6459.,  6894.,  7329.,  7764.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684.,
      13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684.,
      13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208., 3802., 4242.,
      4426., 4354., 3592., 3470.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.,
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292.,
      4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052.,  2286., 2520.,  3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960.,  2424., 2736.,  3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  3030., 3420., 3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800., 6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260., 9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600., 3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340., 7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400., 7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340., 5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620., 8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200., 4710., 5340.,  5970., 6600.,
      3030., 3420.,  3810., 4200.,  5160., 5840., 6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600., 6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840., 6520., 7200.,  4710., 5340.,
      5970., 6600.,  2424., 2736.,  3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  1818., 2052., 2286., 2520.,  3096., 3504.,
      3912., 4320.,  3366., 3804.,  4242., 4680., 3702., 4188.,  4674., 5160.,
      4038., 4572.,  5106., 5640.,  4374., 4956., 5538., 6120.,  3096., 3504.,
      3912., 4320.,  2826., 3204.,  3582., 3960.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340.,  7070., 7800., 6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260., 9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600., 6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340., 7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400., 7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980., 7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  3632.,  4756.,  5830.,
      6040.,  4700.,  3422.,  2292.,  2958.,  3570.,  3690.,  2820.,  2013.,
      7710.,  10134., 12480., 12750., 10020., 7377.,  9764.,  12780., 15670.,
      15980., 12500., 9158.,  11410., 14860., 18125., 18450., 14350., 10450.,
      12670., 16480., 20075., 20400., 15850., 11530., 8600.,  11092., 13390.,
      13600., 10460., 7526.,  5208.,  6630.,  7890.,  8010.,  6060.,  4281.,
      13866., 18126., 22200., 22470., 17580., 12885., 16892., 21996., 26830.,
      27140., 21140., 15422., 18970., 24580., 29825., 30150., 23350., 16930.,
      20230., 26200., 31775., 32100., 24850., 18010., 13568., 17428., 20950.,
      21160., 16220., 11630., 8124.,  10302., 12210., 12330., 9300.,  6549.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425.,  6750.,  8375.,  8700.,
                                         18125., 18450., 20075., 20400.,
                                         29825., 30150., 31775., 32100.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      924.,  996.,  1238., 1340., 1769., 1904., 2006., 2156., 1626., 1752.,
      1271., 1370., 1876., 2008., 2464., 2648., 3436., 3676., 3748., 4008.,
      2992., 3208., 2292., 2460., 3074., 3284., 3974., 4264., 5403., 5778.,
      5740., 6140., 4514., 4844., 3397., 3652., 3808., 4076., 4534., 4880.,
      5985., 6414., 5970., 6392., 4514., 4836., 3451., 3700., 3692., 3936.,
      4592., 4904., 6412., 6796., 6652., 7024., 4352., 4632., 3140., 3356.,
      3422., 3624., 3806., 4060., 4143., 4452., 3632., 3924., 2226., 2440.,
      1557., 1722., 1488., 1596., 1942., 2092., 2717., 2912., 2954., 3164.,
      2362., 2536., 1819., 1954., 2644., 2824., 3424., 3672., 4684., 5004.,
      4996., 5336., 3952., 4232., 2996., 3212., 3926., 4196., 5030., 5400.,
      6207., 6650., 6064., 6500., 4642., 4988., 3369., 3620., 3764., 4028.,
      4822., 5184., 6469., 6902., 6646., 7072., 5282., 5620., 4063., 4308.,
      4108., 4336., 5296., 5608., 5548., 5916., 4956., 5312., 3520., 3800.,
      2212., 2412., 2370., 2544., 3038., 3276., 3027., 3300., 2708., 2964.,
      1874., 2072., 1129., 1266., 2052., 2196., 2646., 2844., 3665., 3920.,
      3902., 4172., 3098., 3320., 2367., 2538., 3412., 3640., 4384., 4696.,
      5932., 6332., 6244., 6664., 4912., 5256., 3700., 3964., 3338., 3572.,
      4294., 4616., 6019., 6434., 6356., 6796., 5026., 5388., 3821., 4100.,
      4136., 4364., 5366., 5680., 6537., 6942., 6874., 7304., 5282., 5636.,
      3811., 4084., 2188., 2368., 2800., 3048., 3564., 3884., 3836., 4176.,
      2944., 3224., 2148., 2364., 1350., 1464., 1758., 1916., 2135., 2340.,
      2360., 2580., 1778., 1960., 1245., 1386.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5403., 5778., 5740., 6140., 5985., 6414., 5970., 6392.,
      6207., 6650., 6064., 6500., 6469., 6902., 6646., 7072.,
      6019., 6434., 6356., 6796., 6537., 6942., 6874., 7304.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1104., 1176., 1248., 1320., 1542., 1644., 1746., 1848., 2155., 2290.,
      2425., 2560., 2390., 2540., 2690., 2840., 2262., 2388., 2514., 2640.,
      1643., 1742., 1841., 1940., 2020., 2152., 2284., 2416., 2728., 2912.,
      3096., 3280., 3752., 3992., 4232., 4472., 4068., 4328., 4588., 4848.,
      3752., 3968., 4184., 4400., 2848., 3016., 3184., 3352., 3186., 3396.,
      3606., 3816., 4298., 4588., 4878., 5168., 5823., 6198., 6573., 6948.,
      6184., 6584., 6984., 7384., 5530., 5860., 6190., 6520., 4203., 4458.,
      4713., 4968., 4468., 4736., 5004., 5272., 5042., 5388., 5734., 6080.,
      6229., 6658., 7087., 7516., 5918., 6340., 6762., 7184., 4386., 4708.,
      5030., 5352., 3549., 3798., 4047., 4296., 3332., 3576., 3820., 4064.,
      4104., 4416., 4728., 5040., 5688., 6072., 6456., 6840., 5924., 6296.,
      6668., 7040., 3976., 4256., 4536., 4816., 3216., 3432., 3648., 3864.,
      2898., 3100., 3302., 3504., 3486., 3740., 3994., 4248., 3945., 4254.,
      4563., 4872., 3740., 4032., 4324., 4616., 2958., 3172., 3386., 3600.,
      2661., 2826., 2991., 3156., 1684., 1792., 1900., 2008., 2262., 2412.,
      2562., 2712., 3095., 3290., 3485., 3680., 3330., 3540., 3750., 3960.,
      3046., 3220., 3394., 3568., 2191., 2326., 2461., 2596., 2740., 2920.,
      3100., 3280., 3688., 3936., 4184., 4432., 5016., 5336., 5656., 5976.,
      5332., 5672., 6012., 6352., 4840., 5120., 5400., 5680., 3696., 3912.,
      4128., 4344., 4062., 4332., 4602., 4872., 5434., 5804., 6174., 6544.,
      7235., 7678., 8121., 8564., 6668., 7104., 7540., 7976., 5002., 5348.,
      5694., 6040., 3639., 3890., 4141., 4392., 3616., 3880., 4144., 4408.,
      4706., 5068., 5430., 5792., 6041., 6474., 6907., 7340., 6114., 6540.,
      6966., 7392., 5138., 5476., 5814., 6152., 4265., 4510., 4755., 5000.,
      3540., 3768., 3996., 4224., 4744., 5056., 5368., 5680., 5000., 5368.,
      5736., 6104., 4596., 4952., 5308., 5664., 3592., 3872., 4152., 4432.,
      2912., 3112., 3312., 3512., 2230., 2404., 2578., 2752., 3246., 3484.,
      3722., 3960., 3925., 4198., 4471., 4744., 4104., 4360., 4616., 4872.,
      2654., 2852., 3050., 3248., 1449., 1586., 1723., 1860., 2264., 2408.,
      2552., 2696., 2982., 3180., 3378., 3576., 4035., 4290., 4545., 4800.,
      4270., 4540., 4810., 5080., 3830., 4052., 4274., 4496., 2739., 2910.,
      3081., 3252., 3460., 3688., 3916., 4144., 4648., 4960., 5272., 5584.,
      6280., 6680., 7080., 7480., 6596., 7016., 7436., 7856., 5928., 6272.,
      6616., 6960., 4544., 4808., 5072., 5336., 3178., 3412., 3646., 3880.,
      4138., 4460., 4782., 5104., 5735., 6150., 6565., 6980., 6096., 6536.,
      6976., 7416., 4986., 5348., 5710., 6072., 4003., 4282., 4561., 4840.,
      3628., 3856., 4084., 4312., 4946., 5260., 5574., 5888., 6077., 6482.,
      6887., 7292., 6438., 6868., 7298., 7728., 5378., 5732., 6086., 6440.,
      4245., 4518., 4791., 5064., 2180., 2360., 2540., 2720., 3144., 3392.,
      3640., 3888., 4152., 4472., 4792., 5112., 4420., 4760., 5100., 5440.,
      3720., 4000., 4280., 4560., 3280., 3496., 3712., 3928., 1658., 1772.,
      1886., 2000., 2046., 2204., 2362., 2520., 2337., 2542., 2747., 2952.,
      2548., 2768., 2988., 3208., 1838., 2020., 2202., 2384., 1293., 1434.,
      1575., 1716.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384., 6229., 6658.,
      7087., 7516., 5918., 6340., 6762., 7184., 7235., 7678., 8121., 8564.,
      6668., 7104., 7540., 7976., 6041., 6474., 6907., 7340., 6114., 6540.,
      6966., 7392., 5735., 6150., 6565., 6980., 6096., 6536., 6976., 7416.,
      6077., 6482., 6887., 7292., 6438., 6868., 7298., 7728.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980.,  5989.,  5975.,  4716.,  3545.,  4600.,  6272., 9112.,
      10048., 8384.,  6800.,  8471.,  11348., 12649., 12287., 9180., 6233.,
      7363.,  9028.,  10541., 10083., 7372.,  5413.,  5872.,  7456., 10304.,
      10856., 6944.,  5160.,  5747.,  6516.,  7365.,  6791.,  4300., 3177.,
      3051.,  4180.,  6701.,  7679.,  6412.,  5201.,  6712.,  9088., 11576.,
      12864., 10240., 7696.,  6719.,  8948.,  10849., 11255., 8700., 6337.,
      5675.,  7588.,  10597., 11643., 9452.,  7437.,  6640.,  8928., 9664.,
      9032.,  6688.,  4456.,  4875.,  6548.,  6957.,  6767.,  4972., 3265.,
      4899.,  6260.,  9557.,  10439., 6764.,  5129.,  7992.,  9408., 11448.,
      11232., 7936.,  6096.,  6023.,  7252.,  9881.,  10415., 7900., 6217.,
      7539.,  9732.,  12061., 13235., 10444., 7829.,  4144.,  5600., 7904.,
      9032.,  7264.,  5608.,  4035.,  5492.,  6965.,  7895.,  6156., 4473.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12649., 12287., 10541., 10083.,
                                         10849., 11255., 10597., 11643.,
                                         9881.,  10415., 12061., 13235.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  6460.,  6912.,  7728.,  8320.,  9556.,  10240.,
      9684.,  10320., 6064.,  6528.,  4860.,  5200.,  4583.,  4870.,  5564.,
      5928.,  6565.,  7018.,  6573.,  7022.,  5356.,  5688.,  5031.,  5298.,
      3311.,  3542.,  4348.,  4680.,  6653.,  7098.,  7653.,  8158.,  6540.,
      6968.,  4943.,  5282.,  5868.,  6192.,  8336.,  8800.,  10788., 11408.,
      12132., 12832., 10992., 11584., 8780.,  9248.,  7253.,  7742.,  10644.,
      11336., 14479., 15330., 14103., 14990., 11364., 12088., 9061.,  9602.,
      6725.,  7190.,  8724.,  9384.,  11199., 12010., 12103., 12950., 10340.,
      11032., 8213.,  8730.,  5564.,  5888.,  7728.,  8192.,  8404.,  8960.,
      8148.,  8720.,  6576.,  7040.,  5500.,  5840.,  4359.,  4662.,  6588.,
      7016.,  8261.,  8762.,  9037.,  9534.,  6124.,  6520.,  3655.,  3938.,
      4879.,  5190.,  5884.,  6280.,  8733.,  9226.,  9605.,  10094., 6796.,
      7160.,  4847.,  5138.,  7276.,  7728.,  9360.,  9952.,  11940., 12688.,
      12388., 13152., 11504., 12096., 9676.,  10144., 6901.,  7374.,  9876.,
      10504., 12079., 12882., 11959., 12798., 8804.,  9464.,  6789.,  7314.,
      7397.,  7846.,  9492.,  10088., 11615., 12378., 12775., 13574., 11364.,
      11992., 9013.,  9514.,  4156.,  4480.,  6192.,  6656.,  8916.,  9536.,
      10068., 10768., 8624.,  9216.,  7676.,  8144.,  4263.,  4518.,  5564.,
      5928.,  6757.,  7242.,  7661.,  8206.,  5868.,  6328.,  4455.,  4818.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438.,
      14479., 15330., 14103., 14990., 11199., 12010., 12103., 12950.,
      12079., 12882., 11959., 12798., 11615., 12378., 12775., 13574.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  6484.,  6936.,  7388.,
      7840.,  7888.,  8480.,  9072.,  9664.,  10492., 11176., 11860., 12544.,
      9772.,  10408., 11044., 11680., 5968.,  6432.,  6896.,  7360.,  4804.,
      5144.,  5484.,  5824.,  3151.,  3438.,  3725.,  4012.,  5324.,  5688.,
      6052.,  6416.,  7397.,  7850.,  8303.,  8756.,  6521.,  6970.,  7419.,
      7868.,  5036.,  5368.,  5700.,  6032.,  4419.,  4686.,  4953.,  5220.,
      3863.,  4094.,  4325.,  4556.,  5100.,  5432.,  5764.,  6096.,  7357.,
      7802.,  8247.,  8692.,  8273.,  8778.,  9283.,  9788.,  6476.,  6904.,
      7332.,  7760.,  4715.,  5054.,  5393.,  5732.,  4436.,  4760.,  5084.,
      5408.,  6992.,  7456.,  7920.,  8384.,  9148.,  9768.,  10388., 11008.,
      10348., 11048., 11748., 12448., 8912.,  9504.,  10096., 10688., 7108.,
      7576.,  8044.,  8512.,  7713.,  8202.,  8691.,  9180.,  10388., 11080.,
      11772., 12464., 12875., 13726., 14577., 15428., 12599., 13486., 14373.,
      15260., 10036., 10760., 11484., 12208., 7597.,  8138.,  8679.,  9220.,
      7449.,  7914.,  8379.,  8844.,  9908.,  10568., 11228., 11888., 11475.,
      12286., 13097., 13908., 11711., 12558., 13405., 14252., 10580., 11272.,
      11964., 12656., 7973.,  8490.,  9007.,  9524.,  4308.,  4632.,  4956.,
      5280.,  6992.,  7456.,  7920.,  8384.,  8316.,  8872.,  9428.,  9984.,
      8812.,  9384.,  9956.,  10528., 8016.,  8480.,  8944.,  9408.,  5572.,
      5912.,  6252.,  6592.,  4223.,  4526.,  4829.,  5132.,  6284.,  6712.,
      7140.,  7568.,  7157.,  7658.,  8159.,  8660.,  7817.,  8314.,  8811.,
      9308.,  5996.,  6392.,  6788.,  7184.,  3699.,  3982.,  4265.,  4548.,
      4359.,  4670.,  4981.,  5292.,  5036.,  5432.,  5828.,  6224.,  7373.,
      7866.,  8359.,  8852.,  8097.,  8586.,  9075.,  9564.,  5516.,  5880.,
      6244.,  6608.,  4059.,  4350.,  4641.,  4932.,  6100.,  6552.,  7004.,
      7456.,  8912.,  9504.,  10096., 10688., 11836., 12584., 13332., 14080.,
      11308., 12072., 12836., 13600., 8912.,  9504.,  10096., 10688., 6852.,
      7320.,  7788.,  8256.,  7537.,  8010.,  8483.,  8956.,  10452., 11080.,
      11708., 12336., 12219., 13022., 13825., 14628., 12455., 13294., 14133.,
      14972., 10100., 10760., 11420., 12080., 7165.,  7690.,  8215.,  8740.,
      7273.,  7722.,  8171.,  8620.,  8948.,  9544.,  10140., 10736., 10307.,
      11070., 11833., 12596., 11055., 11854., 12653., 13452., 9620.,  10248.,
      10876., 11504., 7541.,  8042.,  8543.,  9044.,  5076.,  5400.,  5724.,
      6048.,  6992.,  7456.,  7920.,  8384.,  9276.,  9896.,  10516., 11136.,
      10476., 11176., 11876., 12576., 8912.,  9504.,  10096., 10688., 7236.,
      7704.,  8172.,  8640.,  3567.,  3822.,  4077.,  4332.,  5324.,  5688.,
      6052.,  6416.,  6725.,  7210.,  7695.,  8180.,  7577.,  8122.,  8667.,
      9212.,  6956.,  7416.,  7876.,  8336.,  5219.,  5582.,  5945.,  6308.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.,
      12131., 12990., 13849., 14708., 12687., 13518., 14349., 15180.,
      12875., 13726., 14577., 15428., 12599., 13486., 14373., 15260.,
      11475., 12286., 13097., 13908., 11711., 12558., 13405., 14252.,
      12219., 13022., 13825., 14628., 12455., 13294., 14133., 14972.,
      10307., 11070., 11833., 12596., 11055., 11854., 12653., 13452.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 10008., 13600., 18600.,
      21192., 15136., 13880., 8310.,  9928.,  12186., 14066., 11240., 10206.,
      9366.,  13320., 15354., 16594., 14952., 10878., 14776., 19040., 23432.,
      25768., 19360., 14104., 14994., 21208., 28574., 28870., 20920., 17066.,
      14370., 18584., 23886., 27062., 25080., 21434., 13080., 19744., 20648.,
      19144., 13088., 10808., 10326., 14152., 17530., 20114., 14312., 9534.,
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 10008., 13600., 18600.,
      21192., 15136., 13880., 8310.,  9928.,  12186., 14066., 11240., 10206.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24510., 24614., 25774., 28118.,
                                         28574., 28870., 23886., 27062.,
                                         24510., 24614., 25774., 28118.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 12024., 12784., 15008., 16064., 21064., 22352.,
      22088., 23440., 15008., 16064., 13048., 13872., 5826.,  6316.,  10104.,
      10768., 15102., 15988., 15166., 16164., 12920., 13712., 10786., 11452.,
      8418.,  8940.,  13176., 13968., 16414., 17396., 18782., 19876., 17016.,
      17936., 10242., 10940., 13560., 14320., 17056., 18112., 19528., 20816.,
      22600., 23952., 17056., 18112., 12536., 13360., 16478., 17508., 21192.,
      22640., 28066., 29756., 26594., 28300., 17864., 19184., 14206., 15188.,
      14302., 15236., 21192., 22512., 26914., 28572., 26978., 28780., 24008.,
      25456., 18686., 19828., 12024., 12784., 19104., 20160., 21064., 22352.,
      22088., 23440., 19104., 20160., 13048., 13872., 11714., 12396., 14200.,
      15120., 15358., 16436., 16958., 18020., 12920., 13712., 9506.,  10108.,
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 12024., 12784., 15008., 16064., 21064., 22352.,
      22088., 23440., 15008., 16064., 13048., 13872., 5826.,  6316.,  10104.,
      10768., 15102., 15988., 15166., 16164., 12920., 13712., 10786., 11452.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.,
      28066., 29756., 26594., 28300., 26914., 28572., 26978., 28780.,
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 11128., 11888., 12648.,
      13408., 16160., 17216., 18272., 19328., 20232., 21520., 22808., 24096.,
      21192., 22544., 23896., 25248., 16160., 17216., 18272., 19328., 12088.,
      12912., 13736., 14560., 7322.,  7812.,  8302.,  8792.,  9944.,  10608.,
      11272., 11936., 13254., 14140., 15026., 15912., 13782., 14780., 15778.,
      16776., 12376., 13168., 13960., 14752., 9578.,  10244., 10910., 11576.,
      7546.,  8068.,  8590.,  9112.,  11864., 12656., 13448., 14240., 15462.,
      16444., 17426., 18408., 15990., 17084., 18178., 19272., 14296., 15216.,
      16136., 17056., 9802.,  10500., 11198., 11896., 12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 14518., 15548., 16578., 17608., 21864., 23312.,
      24760., 26208., 26538., 28228., 29918., 31608., 25626., 27332., 29038.,
      30744., 20456., 21776., 23096., 24416., 13414., 14396., 15378., 16360.,
      14358., 15292., 16226., 17160., 19944., 21264., 22584., 23904., 24266.,
      25924., 27582., 29240., 26298., 28100., 29902., 31704., 22376., 23824.,
      25272., 26720., 17094., 18236., 19378., 20520., 11128., 11888., 12648.,
      13408., 16160., 17216., 18272., 19328., 20232., 21520., 22808., 24096.,
      21192., 22544., 23896., 25248., 16160., 17216., 18272., 19328., 12088.,
      12912., 13736., 14560., 10714., 11396., 12078., 12760., 13784., 14704.,
      15624., 16544., 15622., 16700., 17778., 18856., 15254., 16316., 17378.,
      18440., 12376., 13168., 13960., 14752., 9130.,  9732.,  10334., 10936.,
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 11128., 11888., 12648.,
      13408., 16160., 17216., 18272., 19328., 20232., 21520., 22808., 24096.,
      21192., 22544., 23896., 25248., 16160., 17216., 18272., 19328., 12088.,
      12912., 13736., 14560., 7322.,  7812.,  8302.,  8792.,  9944.,  10608.,
      11272., 11936., 13254., 14140., 15026., 15912., 13782., 14780., 15778.,
      16776., 12376., 13168., 13960., 14752., 9578.,  10244., 10910., 11576.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736.,
      26538., 28228., 29918., 31608., 25626., 27332., 29038., 30744.,
      24266., 25924., 27582., 29240., 26298., 28100., 29902., 31704.,
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  4190.,  5472.,  6690.,  6900.,  7110.,  5520.,  4010.,  2646.,
      3406.,  4100.,  4220.,  4340.,  3310.,  2358.,  8937.,  11728., 14420.,
      14690., 14960., 11740., 8631.,  8188.,  10192., 12104., 11070., 11380.,
      8880.,  6488.,  6136.,  7556.,  8879.,  8180.,  8505.,  6560.,  4732.,
      4598.,  5670.,  6674.,  6295.,  6620.,  5110.,  3688.,  2434.,  2944.,
      3414.,  3240.,  3450.,  2640.,  1886.,  1056.,  1290.,  1524.,  1580.,
      1700.,  1330.,  972.,   5175.,  6844.,  8480.,  8750.,  9020.,  7120.,
      5265.,  6968.,  9168.,  11300., 11610., 11920., 9360.,  6884.,  8620.,
      11280., 13825., 14150., 14475., 11300., 8260.,  10090., 13170., 16100.,
      16425., 16750., 13050., 9520.,  6950.,  8992.,  10890., 11100., 11310.,
      8720.,  6290.,  4266.,  5446.,  6500.,  6620.,  6740.,  5110.,  3618.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325., 7650., 7975., 9600.,  9925.,  10250., 8879.,  8180.,  8505.,
      6674., 6295., 6620., 13825., 14150., 14475., 16100., 16425., 16750.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1029., 1110., 1366., 1480., 1946., 2096., 2183., 2348., 2420., 2600.,
      1946., 2096., 1509., 1626., 2122., 2272., 2768., 2976., 3850., 4120.,
      4162., 4452., 4474., 4784., 3552., 3808., 2706., 2904., 3512., 3752.,
      4518., 4848., 5585., 5978., 5442., 5828., 5363., 5742., 4082., 4376.,
      2940., 3144., 3563., 3812., 4574., 4916., 6184., 6592., 6361., 6762.,
      6602., 6996., 5298., 5604., 3115., 3328., 4030., 4252., 5200., 5504.,
      5470., 5828., 4878., 5224., 4350., 4684., 2944., 3200., 1670., 1844.,
      2430., 2604., 3118., 3356., 3127., 3400., 2808., 3064., 2553., 2792.,
      1706., 1884., 954.,  1068., 2439., 2610., 3126., 3360., 4316., 4616.,
      4553., 4868., 4790., 5120., 3786., 4056., 2879., 3086., 3018., 3224.,
      3728., 4000., 5178., 5520., 5202., 5532., 5514., 5864., 4416., 4704.,
      3410., 3632., 3818., 4048., 4886., 5192., 6907., 7294., 6252., 6632.,
      6589., 6994., 5074., 5408., 3670., 3928., 3421., 3660., 4110., 4428.,
      4946., 5348., 4611., 5006., 4948., 5368., 3794., 4140., 2757., 3024.,
      1966., 2148., 2320., 2560., 3070., 3372., 2990., 3280., 3262., 3572.,
      2560., 2816., 1942., 2140., 1816., 1920., 2318., 2452., 2817., 2984.,
      3010., 3160., 3235., 3400., 2522., 2660., 1836., 1944., 2409., 2574.,
      3094., 3320., 4606., 4896., 4619., 4892., 4696., 4952., 3834., 4032.,
      3065., 3202., 4042., 4240., 5264., 5536., 6506., 6856., 5890., 6228.,
      5338., 5664., 3872., 4128., 2514., 2696., 3260., 3512., 4166., 4512.,
      5285., 5730., 5014., 5452., 4807., 5238., 3538., 3880., 2416., 2664.,
      3119., 3380., 3966., 4324., 5244., 5704., 5293., 5746., 5406., 5852.,
      4178., 4532., 3103., 3360., 2494., 2668., 3216., 3456., 4638., 4948.,
      4910., 5240., 5182., 5532., 4128., 4416., 3174., 3396., 3186., 3348.,
      4142., 4364., 5035., 5320., 5260., 5560., 5485., 5800., 4202., 4460.,
      3006., 3204.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5585., 5978., 5442., 5828., 5363., 5742., 6184., 6592., 6361.,
      6762., 6602., 6996., 6907., 7294., 6252., 6632., 6589., 6994.,
      4946., 5348., 4611., 5006., 4948., 5368., 5285., 5730., 5014.,
      5452., 4807., 5238., 5244., 5704., 5293., 5746., 5406., 5852.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241., 1322., 1403., 1484., 1722., 1836., 1950., 2064., 2398., 2548.,
      2698., 2848., 2633., 2798., 2963., 3128., 2868., 3048., 3228., 3408.,
      2686., 2836., 2986., 3136., 1941., 2058., 2175., 2292., 2302., 2452.,
      2602., 2752., 3088., 3296., 3504., 3712., 4230., 4500., 4770., 5040.,
      4546., 4836., 5126., 5416., 4862., 5172., 5482., 5792., 4448., 4704.,
      4960., 5216., 3358., 3556., 3754., 3952., 3648., 3888., 4128., 4368.,
      4898., 5228., 5558., 5888., 6585., 6978., 7371., 7764., 6018., 6404.,
      6790., 7176., 5579., 5958., 6337., 6716., 4126., 4420., 4714., 5008.,
      2924., 3128., 3332., 3536., 3421., 3670., 3919., 4168., 4454., 4796.,
      5138., 5480., 5752., 6160., 6568., 6976., 5825., 6226., 6627., 7028.,
      6026., 6420., 6814., 7208., 5202., 5508., 5814., 6120., 3393., 3606.,
      3819., 4032., 3454., 3676., 3898., 4120., 4624., 4928., 5232., 5536.,
      4886., 5244., 5602., 5960., 4482., 4828., 5174., 5520., 4206., 4540.,
      4874., 5208., 3296., 3552., 3808., 4064., 2718., 2892., 3066., 3240.,
      2254., 2428., 2602., 2776., 3278., 3516., 3754., 3992., 3965., 4238.,
      4511., 4784., 4144., 4400., 4656., 4912., 3427., 3666., 3905., 4144.,
      2050., 2228., 2406., 2584., 930.,  1044., 1158., 1272., 2691., 2862.,
      3033., 3204., 3522., 3756., 3990., 4224., 4748., 5048., 5348., 5648.,
      4983., 5298., 5613., 5928., 5218., 5548., 5878., 6208., 4646., 4916.,
      5186., 5456., 3311., 3518., 3725., 3932., 3142., 3348., 3554., 3760.,
      3728., 4000., 4272., 4544., 4958., 5300., 5642., 5984., 4730., 5060.,
      5390., 5720., 5046., 5396., 5746., 6096., 4224., 4512., 4800., 5088.,
      3462., 3684., 3906., 4128., 3374., 3604., 3834., 4064., 4442., 4748.,
      5054., 5360., 6355., 6742., 7129., 7516., 5788., 6168., 6548., 6928.,
      6149., 6554., 6959., 7364., 5174., 5508., 5842., 6176., 4074., 4332.,
      4590., 4848., 3275., 3514., 3753., 3992., 4382., 4700., 5018., 5336.,
      5522., 5924., 6326., 6728., 5595., 5990., 6385., 6780., 5956., 6376.,
      6796., 7216., 5354., 5700., 6046., 6392., 4415., 4682., 4949., 5216.,
      2886., 3068., 3250., 3432., 3152., 3392., 3632., 3872., 3726., 4028.,
      4330., 4632., 3322., 3612., 3902., 4192., 3590., 3900., 4210., 4520.,
      2656., 2912., 3168., 3424., 1958., 2156., 2354., 2552., 1544., 1648.,
      1752., 1856., 1910., 2044., 2178., 2312., 2235., 2402., 2569., 2736.,
      2414., 2564., 2714., 2864., 2625., 2790., 2955., 3120., 2122., 2260.,
      2398., 2536., 1740., 1848., 1956., 2064., 2381., 2546., 2711., 2876.,
      2890., 3116., 3342., 3568., 4122., 4412., 4702., 4992., 3941., 4214.,
      4487., 4760., 3888., 4144., 4400., 4656., 3214., 3412., 3610., 3808.,
      2473., 2610., 2747., 2884., 3278., 3476., 3674., 3872., 4560., 4832.,
      5104., 5376., 5750., 6100., 6450., 6800., 5266., 5604., 5942., 6280.,
      4910., 5236., 5562., 5888., 4320., 4576., 4832., 5088., 3502., 3684.,
      3866., 4048., 3388., 3640., 3892., 4144., 4818., 5164., 5510., 5856.,
      6317., 6762., 7207., 7652., 6518., 6956., 7394., 7832., 6847., 7278.,
      7709., 8140., 5294., 5636., 5978., 6320., 3368., 3616., 3864., 4112.,
      3801., 4062., 4323., 4584., 4886., 5244., 5602., 5960., 6252., 6712.,
      7172., 7632., 6069., 6522., 6975., 7428., 6014., 6460., 6906., 7352.,
      5218., 5572., 5926., 6280., 3837., 4094., 4351., 4608., 2350., 2524.,
      2698., 2872., 3024., 3264., 3504., 3744., 4294., 4604., 4914., 5224.,
      4562., 4892., 5222., 5552., 4830., 5180., 5530., 5880., 3840., 4128.,
      4416., 4704., 3118., 3340., 3562., 3784., 2626., 2788., 2950., 3112.,
      3550., 3772., 3994., 4216., 4313., 4598., 4883., 5168., 4524., 4824.,
      5124., 5424., 4735., 5050., 5365., 5680., 3762., 4020., 4278., 4536.,
      3030., 3228., 3426., 3624.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6585., 6978., 7371., 7764., 6018., 6404., 6790., 7176., 5579.,
      5958., 6337., 6716., 5752., 6160., 6568., 6976., 5825., 6226.,
      6627., 7028., 6026., 6420., 6814., 7208., 6355., 6742., 7129.,
      7516., 5788., 6168., 6548., 6928., 6149., 6554., 6959., 7364.,
      5522., 5924., 6326., 6728., 5595., 5990., 6385., 6780., 5956.,
      6376., 6796., 7216., 6317., 6762., 7207., 7652., 6518., 6956.,
      7394., 7832., 6847., 7278., 7709., 8140., 6252., 6712., 7172.,
      7632., 6069., 6522., 6975., 7428., 6014., 6460., 6906., 7352.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113.,  5483.,  4700.,  3925.,  5140.,  6704.,
      10252., 11444., 10716., 8592.,  6500.,  8395.,  9956.,  11141., 10043.,
      9201.,  7092.,  5135.,  6953.,  8412.,  11007., 11189., 11627., 9548.,
      5597.,  7148.,  9104.,  9652.,  8796.,  8196.,  5840.,  3612.,  5115.,
      6868.,  7357.,  7167.,  7105.,  5124.,  3255.,  5925.,  7932.,  10139.,
      11117., 10207., 7852.,  5617.,  5092.,  6544.,  9148.,  9828.,  9868.,
      7920.,  6068.,  6655.,  8788.,  12929., 12311., 13101., 10244., 7555.,
      7517.,  8300.,  10043., 9201.,  9863.,  7548.,  5905.,  5628.,  6544.,
      9284.,  9452.,  10484., 6704.,  5004.,  6967.,  7236.,  7633.,  6835.,
      6261.,  3924.,  2931.,  3489.,  4716.,  7439.,  7937.,  8563.,  7164.,
      5869.,  7732.,  10352., 13292., 12692., 12220., 9168.,  6276.,  5555.,
      7492.,  10653., 10803., 11081., 8628.,  6359.,  7313.,  9788.,  12311.,
      13101., 14019., 10956., 8101.,  3820.,  5200.,  7572.,  8700.,  9828.,
      7920.,  6140.,  4275.,  5812.,  7365.,  8295.,  9225.,  7172.,  5199.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11141., 10043., 9201., 11007., 11189., 11627., 12929., 12311., 13101.,
      10043., 9201.,  9863., 10653., 10803., 11081., 12311., 13101., 14019.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  6732.,  7160.,  8240.,  8800.,  8420.,  9064.,  7780.,
      8376.,  7652.,  8200.,  6192.,  6624.,  5260.,  5560.,  4455.,  4758.,
      6716.,  7144.,  8421.,  8922.,  9197.,  9694.,  8181.,  8674.,  5292.,
      5672.,  2895.,  3150.,  5671.,  5962.,  7676.,  8088.,  9717.,  10262.,
      10717., 11322., 10053., 10654., 8844.,  9336.,  6127.,  6498.,  5404.,
      5768.,  7184.,  7680.,  10004., 10648., 10196., 10856., 11156., 11832.,
      10480., 11040., 7484.,  7912.,  7157.,  7614.,  9364.,  9992.,  13423.,
      14242., 13047., 13902., 13439., 14330., 11620., 12360., 8781.,  9350.,
      7565.,  8058.,  10324., 10936., 11943., 12694., 11183., 11906., 11319.,
      12078., 9188.,  9784.,  8133.,  8610.,  7500.,  7960.,  7728.,  8288.,
      9700.,  10376., 9060.,  9688.,  10084., 10728., 6320.,  6816.,  4876.,
      5272.,  5815.,  6158.,  5948.,  6344.,  6197.,  6658.,  5821.,  6214.,
      5829.,  6218.,  4780.,  5064.,  4575.,  4806.,  3895.,  4162.,  5116.,
      5496.,  7685.,  8190.,  7789.,  8290.,  8149.,  8646.,  7308.,  7704.,
      5695.,  5978.,  7068.,  7464.,  9872.,  10432., 12820., 13560., 12500.,
      13256., 12436., 13208., 11376., 12000., 8892.,  9352.,  5509.,  5926.,
      8084.,  8680.,  11711., 12506., 12871., 13702., 14287., 15154., 10980.,
      11688., 7453.,  7982.,  7709.,  8162.,  10452., 11096., 13047., 13902.,
      13439., 14330., 14087., 15014., 12260., 13016., 9365.,  9930.,  3788.,
      4088.,  5680.,  6112.,  8420.,  9000.,  9572.,  10232., 10724., 11464.,
      9136.,  9760.,  8076.,  8568.,  4359.,  4614.,  5692.,  6056.,  6917.,
      7402.,  7821.,  8366.,  8725.,  9330.,  6700.,  7208.,  5103.,  5502.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13215., 13994., 11943., 12694., 11183., 11906., 13015., 13854., 12255.,
      13066., 12007., 12790., 13423., 14242., 13047., 13902., 13439., 14330.,
      11943., 12694., 11183., 11906., 11319., 12078., 11711., 12506., 12871.,
      13702., 14287., 15154., 13047., 13902., 13439., 14330., 14087., 15014.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  6924.,  7352.,  7780.,  8208.,  8432.,
      8992.,  9552.,  10112., 8772.,  9416.,  10060., 10704., 8564.,  9160.,
      9756.,  10352., 9380.,  9928.,  10476., 11024., 6768.,  7200.,  7632.,
      8064.,  4748.,  5048.,  5348.,  5648.,  4159.,  4462.,  4765.,  5068.,
      6284.,  6712.,  7140.,  7568.,  7221.,  7722.,  8223.,  8724.,  7881.,
      8378.,  8875.,  9372.,  7005.,  7498.,  7991.,  8484.,  5500.,  5880.,
      6260.,  6640.,  3615.,  3870.,  4125.,  4380.,  4171.,  4462.,  4753.,
      5044.,  6300.,  6712.,  7124.,  7536.,  8137.,  8682.,  9227.,  9772.,
      9053.,  9658.,  10263., 10868., 8753.,  9354.,  9955.,  10556., 7692.,
      8184.,  8676.,  9168.,  5771.,  6142.,  6513.,  6884.,  5900.,  6264.,
      6628.,  6992.,  7216.,  7712.,  8208.,  8704.,  9220.,  9864.,  10508.,
      11152., 10228., 10888., 11548., 12208., 10724., 11400., 12076., 12752.,
      9200.,  9760.,  10320., 10880., 6092.,  6520.,  6948.,  7376.,  6401.,
      6858.,  7315.,  7772.,  8660.,  9288.,  9916.,  10544., 12331., 13150.,
      13969., 14788., 12055., 12910., 13765., 14620., 13315., 14206., 15097.,
      15988., 10532., 11272., 12012., 12752., 7521.,  8090.,  8659.,  9228.,
      7053.,  7546.,  8039.,  8532.,  10724., 11336., 11948., 12560., 10975.,
      11726., 12477., 13228., 9995.,  10718., 11441., 12164., 10743., 11502.,
      12261., 13020., 9140.,  9736.,  10332., 10928., 7341.,  7818.,  8295.,
      8772.,  8172.,  8632.,  9092.,  9552.,  7920.,  8480.,  9040.,  9600.,
      9252.,  9928.,  10604., 11280., 9044.,  9672.,  10300., 10928., 10052.,
      10696., 11340., 11984., 7472.,  7968.,  8464.,  8960.,  5676.,  6072.,
      6468.,  6864.,  4535.,  4878.,  5221.,  5564.,  5292.,  5688.,  6084.,
      6480.,  6141.,  6602.,  7063.,  7524.,  6609.,  7002.,  7395.,  7788.,
      5733.,  6122.,  6511.,  6900.,  4316.,  4600.,  4884.,  5168.,  3927.,
      4158.,  4389.,  4620.,  4483.,  4750.,  5017.,  5284.,  5820.,  6200.,
      6580.,  6960.,  8209.,  8714.,  9219.,  9724.,  7397.,  7898.,  8399.,
      8900.,  7097.,  7594.,  8091.,  8588.,  5996.,  6392.,  6788.,  7184.,
      4739.,  5022.,  5305.,  5588.,  5612.,  6008.,  6404.,  6800.,  8432.,
      8992.,  9552.,  10112., 10916., 11656., 12396., 13136., 10900., 11656.,
      12412., 13168., 11396., 12168., 12940., 13712., 10416., 11040., 11664.,
      12288., 6828.,  7288.,  7748.,  8208.,  6473.,  6890.,  7307.,  7724.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 12751.,
      13582., 14413., 15244., 14011., 14878., 15745., 16612., 10820., 11528.,
      12236., 12944., 6953.,  7482.,  8011.,  8540.,  6613.,  7066.,  7519.,
      7972.,  9668.,  10312., 10956., 11600., 12055., 12910., 13765., 14620.,
      13315., 14206., 15097., 15988., 13039., 13966., 14893., 15820., 10516.,
      11272., 12028., 12784., 7669.,  8234.,  8799.,  9364.,  4748.,  5048.,
      5348.,  5648.,  6512.,  6944.,  7376.,  7808.,  8836.,  9416.,  9996.,
      10576., 10036., 10696., 11356., 12016., 11236., 11976., 12716., 13456.,
      9392.,  10016., 10640., 11264., 7628.,  8120.,  8612.,  9104.,  3503.,
      3758.,  4013.,  4268.,  5324.,  5688.,  6052.,  6416.,  6789.,  7274.,
      7759.,  8244.,  7641.,  8186.,  8731.,  9276.,  8493.,  9098.,  9703.,
      10308., 7676.,  8184.,  8692.,  9200.,  5839.,  6238.,  6637.,  7036.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,
      10718., 11441., 12164., 12007., 12846., 13685., 14524., 11027., 11838.,
      12649., 13460., 11071., 11854., 12637., 13420., 12331., 13150., 13969.,
      14788., 12055., 12910., 13765., 14620., 13315., 14206., 15097., 15988.,
      10975., 11726., 12477., 13228., 9995.,  10718., 11441., 12164., 10743.,
      11502., 12261., 13020., 12003., 12798., 13593., 14388., 12751., 13582.,
      14413., 15244., 14011., 14878., 15745., 16612., 12055., 12910., 13765.,
      14620., 13315., 14206., 15097., 15988., 13039., 13966., 14893., 15820.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912., 15392.,
      19448., 19928., 18680., 16736., 15560., 18658., 20632., 26254., 23158.,
      24478., 17496., 13778., 19850., 25080., 27622., 26254., 23158., 19000.,
      12154., 15592., 20128., 23640., 18936., 16280., 11168., 9960.,  13078.,
      16520., 19514., 18194., 14314., 9096.,  5094.,  6702.,  10152., 14754.,
      18874., 19602., 17832., 13118., 9480.,  13536., 18680., 21848., 26552.,
      25888., 19016., 13714., 16664., 24478., 24070., 25710., 23832., 20418.,
      13882., 18232., 23158., 24478., 24070., 20408., 17770., 13672., 13024.,
      16280., 15480., 18584., 13024., 11880., 12838., 15112., 14314., 11970.,
      10970., 8840.,  8310.,  11774., 16488., 19602., 18986., 19074., 14376.,
      10190., 12424., 19104., 26552., 28376., 25272., 21472., 15048., 13314.,
      20120., 25710., 29398., 30718., 25112., 17586., 12842., 17976., 24070.,
      25710., 29398., 27448., 19674., 7144.,  10656., 18584., 19448., 21848.,
      18592., 16360., 5814.,  8072.,  10970., 13362., 17098., 14664., 12870.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26254., 23158., 24478., 27622., 26254., 23158., 24478., 24070., 25710.,
      23158., 24478., 24070., 25710., 29398., 30718., 24070., 25710., 29398.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 18296., 19344., 21664., 22976., 24776., 26288., 19656.,
      20976., 18632., 19760., 13472., 14272., 10104., 10640., 11970., 12780.,
      17784., 18832., 18174., 19380., 16190., 17252., 13182., 14100., 11384.,
      11984., 6498.,  6860.,  6306.,  6684.,  10104., 10704., 14814., 15684.,
      18718., 19828., 20062., 21284., 17528., 18576., 13570., 14396., 8824.,
      9360.,  12448., 13248., 16840., 17968., 21448., 22768., 25032., 26544.,
      22688., 24000., 15992., 17040., 13662., 14436., 15560., 16624., 22178.,
      23612., 23266., 24844., 28450., 30172., 23496., 25008., 18622., 19844.,
      13342., 14260., 19144., 20272., 21602., 23020., 22178., 23612., 23266.,
      24844., 21960., 23280., 17534., 18644., 13688., 14480., 13984., 14912.,
      18632., 19760., 17096., 18160., 19144., 20272., 15008., 15936., 12664.,
      13456., 10562., 11276., 13176., 13968., 13182., 14100., 13246., 14020.,
      11774., 12532., 9848.,  10448., 8674.,  9196.,  11042., 11708., 16248.,
      17232., 20062., 21284., 18846., 20052., 19166., 20228., 11896., 12688.,
      7042.,  7516.,  12408., 13200., 19104., 20288., 25032., 26544., 27080.,
      28656., 23496., 25008., 20128., 21312., 12408., 13200., 13790., 14660.,
      21192., 22512., 28450., 30172., 29538., 31404., 30114., 31996., 24008.,
      25520., 17214., 18276., 12446., 13204., 17608., 18736., 23266., 24844.,
      28450., 30172., 29538., 31404., 25544., 27120., 17150., 18356., 8056.,
      8592.,  11424., 12224., 19144., 20272., 20680., 22000., 25288., 26800.,
      19616., 20928., 16248., 17296., 4034.,  4396.,  9592.,  10128., 11774.,
      12532., 12862., 13732., 16510., 17620., 15992., 16976., 13410., 14220.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25634., 27164., 21602., 23020., 22178., 23612., 26082., 27852., 25634.,
      27164., 21602., 23020., 22178., 23612., 23266., 24844., 28450., 30172.,
      21602., 23020., 22178., 23612., 23266., 24844., 28450., 30172., 29538.,
      31404., 30114., 31996., 23266., 24844., 28450., 30172., 29538., 31404.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      3096., 3504., 3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      5160., 5840., 6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200.,
      3702., 4188., 4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840.,
      6520., 7200., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316.,
      4818., 5320., 3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320.,
      2266., 2564., 2862., 3160., 3096., 3504., 3912., 4320., 3814., 4316.,
      4818., 5320., 3702., 4188., 4674., 5160., 4038., 4572., 5106., 5640.,
      3096., 3504., 3912., 4320., 2266., 2564., 2862., 3160., 2378., 2692.,
      3006., 3320., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      4038., 4572., 5106., 5640., 3926., 4444., 4962., 5480., 3096., 3504.,
      3912., 4320., 2378., 2692., 3006., 3320., 3096., 3504., 3912., 4320.,
      4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760.,
      3096., 3504., 3912., 4320., 3926., 4444., 4962., 5480., 5160., 5840.,
      6520., 7200., 6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.,
      6282., 7108., 7934., 8760., 5160., 5840., 6520., 7200., 3926., 4444.,
      4962., 5480., 4038., 4572., 5106., 5640., 5160., 5840., 6520., 7200.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 5160., 5840., 6520., 7200., 4038., 4572., 5106., 5640.,
      3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320., 2490., 2820.,
      3150., 3480., 3096., 3504., 3912., 4320., 4038., 4572., 5106., 5640.,
      3926., 4444., 4962., 5480., 3814., 4316., 4818., 5320., 3096., 3504.,
      3912., 4320., 2490., 2820., 3150., 3480., 2154., 2436., 2718., 3000.,
      3096., 3504., 3912., 4320., 3926., 4444., 4962., 5480., 3814., 4316.,
      4818., 5320., 3702., 4188., 4674., 5160., 3096., 3504., 3912., 4320.,
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 4128., 4672.,
      5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504.,
      3912., 4320., 3702., 4188., 4674., 5160., 5160., 5840., 6520., 7200.,
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 5160., 5840., 6520., 7200., 3702., 4188., 4674., 5160.,
      3814., 4316., 4818., 5320., 5160., 5840., 6520., 7200., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      5160., 5840., 6520., 7200., 3814., 4316., 4818., 5320., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 2266., 2564., 2862., 3160.,
      3096., 3504., 3912., 4320., 3814., 4316., 4818., 5320., 3702., 4188.,
      4674., 5160., 4038., 4572., 5106., 5640., 3096., 3504., 3912., 4320.,
      2266., 2564., 2862., 3160.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506.,
      7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222.,
      9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618.,
      7492., 8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492., 8366.,
      9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940., 4210., 3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620., 5260., 3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250., 5350., 6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790., 4748., 6188.,  7550.,  7760.,
      7970.,  8180.,  6340.,  4598.,  3000., 3854., 4630.,  4750.,  4870.,
      4990.,  3800.,  2703.,  5556.,  7306., 9000., 9270.,  9540.,  9810.,
      7700.,  5661.,  4628.,  6068.,  7450., 7760., 8070.,  8380.,  6540.,
      4778.,  4126.,  5372.,  6545.,  6870., 7195., 7520.,  5810.,  4198.,
      4078.,  5356.,  6585.,  6910.,  7235., 7560., 5890.,  4294.,  2540.,
      3372.,  4190.,  4400.,  4610.,  4820., 3780., 2774.,  1704.,  2222.,
      2710.,  2830.,  2950.,  3070.,  2360., 1695., 7428.,  9770.,  12040.,
      12310., 12580., 12850., 10100., 7437., 9716., 12724., 15610., 15920.,
      16230., 16540., 12940., 9482.,  7102., 9244., 11265., 11590., 11915.,
      12240., 9490.,  6886.,  5134.,  6668., 8105., 8430.,  8755.,  9080.,
      7010.,  5062.,  2828.,  3628.,  4350., 4560., 4770.,  4980.,  3780.,
      2678.,  1176.,  1486.,  1750.,  1870., 1990., 2110.,  1560.,  1071.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      23825., 24150., 24475., 24800., 26425., 26750., 27075., 27400.,
      24705., 25030., 25355., 25680., 15785., 16110., 16435., 16760.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1134., 1224., 1494., 1620., 2123., 2288., 2360., 2540., 2597., 2792.,
      2834., 3044., 2266., 2440., 1747., 1882., 2368., 2536., 3072., 3304.,
      4264., 4564., 4576., 4896., 4888., 5228., 5200., 5560., 4112., 4408.,
      3120., 3348., 2510., 2684., 3270., 3512., 4775., 5090., 5112., 5452.,
      5449., 5814., 5786., 6176., 4610., 4932., 3539., 3788., 3734., 3932.,
      4870., 5144., 5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408.,
      5378., 5732., 3899., 4172., 2032., 2200., 2608., 2840., 3408., 3708.,
      3680., 4000., 3952., 4292., 4224., 4584., 3264., 3560., 2408., 2636.,
      1470., 1584., 1918., 2076., 2335., 2540., 2560., 2780., 2785., 3020.,
      3010., 3260., 2274., 2480., 1599., 1758., 1950., 2088., 2518., 2708.,
      3835., 4080., 4072., 4332., 4309., 4584., 4546., 4836., 3674., 3912.,
      2883., 3066., 3520., 3688., 4608., 4840., 5672., 5972., 5984., 6304.,
      6296., 6636., 6608., 6968., 5136., 5432., 3760., 3988., 2846., 3068.,
      3654., 3960., 4663., 5058., 5000., 5420., 5337., 5782., 5674., 6144.,
      4354., 4740., 3171., 3468., 2918., 3164., 3718., 4056., 4959., 5394.,
      5296., 5756., 5633., 6118., 5970., 6480., 4610., 5028., 3403., 3724.,
      2416., 2584., 3120., 3352., 4560., 4860., 4832., 5152., 5104., 5444.,
      5376., 5736., 4288., 4584., 3304., 3532., 3246., 3408., 4222., 4444.,
      5135., 5420., 5360., 5660., 5585., 5900., 5810., 6140., 4450., 4720.,
      3183., 3390., 1134., 1224., 1494., 1620., 2123., 2288., 2360., 2540.,
      2597., 2792., 2834., 3044., 2266., 2440., 1747., 1882., 2368., 2536.,
      3072., 3304., 4264., 4564., 4576., 4896., 4888., 5228., 5200., 5560.,
      4112., 4408., 3120., 3348., 2510., 2684., 3270., 3512., 4775., 5090.,
      5112., 5452., 5449., 5814., 5786., 6176., 4610., 4932., 3539., 3788.,
      3734., 3932., 4870., 5144., 5967., 6322., 6304., 6684., 6641., 7046.,
      6978., 7408., 5378., 5732., 3899., 4172., 2032., 2200., 2608., 2840.,
      3408., 3708., 3680., 4000., 3952., 4292., 4224., 4584., 3264., 3560.,
      2408., 2636., 1470., 1584., 1918., 2076., 2335., 2540., 2560., 2780.,
      2785., 3020., 3010., 3260., 2274., 2480., 1599., 1758.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.,
      12375., 13090., 13000., 13740., 13625., 14390., 14250., 15040.,
      12575., 13170., 13200., 13820., 13825., 14470., 14450., 15120.,
      21575., 22530., 22200., 23180., 22825., 23830., 23450., 24480.,
      15375., 16210., 16000., 16860., 16625., 17510., 17250., 18160.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,
      4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,
      5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,
      4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,
      5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,
      9152.,  9472.,  9792.,  9436.,  9776.,  10116., 10456., 10040., 10400.,
      10760., 11120., 7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,
      6696.,  7630.,  7900.,  8170.,  8440.,  9754.,  10124., 10494., 10864.,
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292.,
      12742., 13192., 8845.,  9190.,  9535.,  9880.,  10918., 11308., 11698.,
      12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452.,
      19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374.,
      21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150.,
      12615., 13080., 9848.,  10208., 10568., 10928., 12408., 12896., 13384.,
      13872., 17204., 17824., 18444., 19064., 17728., 18368., 19008., 19648.,
      18252., 18912., 19572., 20232., 18776., 19456., 20136., 20816., 14680.,
      15232., 15784., 16336., 11052., 11472., 11892., 12312., 11082., 11388.,
      11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995.,
      18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480.,
      18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200., 9759.,
      10110., 10461., 10812., 9714.,  10044., 10374., 10704., 12270., 12716.,
      13162., 13608., 18113., 18678., 19243., 19808., 18572., 19152., 19732.,
      20312., 19031., 19626., 20221., 20816., 19490., 20100., 20710., 21320.,
      15558., 16052., 16546., 17040., 12047., 12422., 12797., 13172., 15128.,
      15488., 15848., 16208., 19480., 19968., 20456., 20944., 23524., 24144.,
      24764., 25384., 24128., 24768., 25408., 26048., 24732., 25392., 26052.,
      26712., 25336., 26016., 26696., 27376., 19448., 20000., 20552., 21104.,
      14012., 14432., 14852., 15272., 9886.,  10300., 10714., 11128., 12378.,
      12940., 13502., 14064., 15011., 15726., 16441., 17156., 15660., 16400.,
      17140., 17880., 16309., 17074., 17839., 18604., 16958., 17748., 18538.,
      19328., 12674., 13316., 13958., 14600., 8925.,  9414.,  9903.,  10392.,
      6838.,  7180.,  7522.,  7864.,  8506.,  8972.,  9438.,  9904.,  10923.,
      11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866.,
      13511., 14156., 12870., 13540., 14210., 14880., 9698.,  10244., 10790.,
      11336., 6965.,  7382.,  7799.,  8216.,  4664.,  4832.,  5000.,  5168.,
      6008.,  6240.,  6472.,  6704.,  8820.,  9120.,  9420.,  9720.,  9344.,
      9664.,  9984.,  10304., 9868.,  10208., 10548., 10888., 10392., 10752.,
      11112., 11472., 8280.,  8576.,  8872.,  9168.,  6380.,  6608.,  6836.,
      7064.,  6330.,  6492.,  6654.,  6816.,  8222.,  8444.,  8666.,  8888.,
      9985.,  10270., 10555., 10840., 10420., 10720., 11020., 11320., 10855.,
      11170., 11485., 11800., 11290., 11620., 11950., 12280., 8630.,  8900.,
      9170.,  9440.,  6159.,  6366.,  6573.,  6780.,  10914., 11292., 11670.,
      12048., 13742., 14252., 14762., 15272., 18769., 19414., 20059., 20704.,
      19228., 19888., 20548., 21208., 19687., 20362., 21037., 21712., 20146.,
      20836., 21526., 22216., 15750., 16308., 16866., 17424., 11839., 12262.,
      12685., 13108., 16472., 17024., 17576., 18128., 20760., 21504., 22248.,
      22992., 27556., 28496., 29436., 30376., 28160., 29120., 30080., 31040.,
      28764., 29744., 30724., 31704., 29368., 30368., 31368., 32368., 22776.,
      23584., 24392., 25200., 16892., 17504., 18116., 18728., 15214., 15772.,
      16330., 16888., 19098., 19852., 20606., 21360., 26003., 26958., 27913.,
      28868., 26652., 27632., 28612., 29592., 27301., 28306., 29311., 30316.,
      27950., 28980., 30010., 31040., 21698., 22532., 23366., 24200., 16173.,
      16806., 17439., 18072., 16774., 17260., 17746., 18232., 21370., 22028.,
      22686., 23344., 25499., 26334., 27169., 28004., 26148., 27008., 27868.,
      28728., 26797., 27682., 28567., 29452., 27446., 28356., 29266., 30176.,
      20770., 21508., 22246., 22984., 14725., 15286., 15847., 16408., 8312.,
      8672.,  9032.,  9392.,  10360., 10848., 11336., 11824., 12596., 13216.,
      13836., 14456., 13120., 13760., 14400., 15040., 13644., 14304., 14964.,
      15624., 14168., 14848., 15528., 16208., 10584., 11136., 11688., 12240.,
      7468.,  7888.,  8308.,  8728.,  4074.,  4284.,  4494.,  4704.,  5086.,
      5372.,  5658.,  5944.,  5905.,  6270.,  6635.,  7000.,  6340.,  6720.,
      7100.,  7480.,  6775.,  7170.,  7565.,  7960.,  7210.,  7620.,  8030.,
      8440.,  5238.,  5572.,  5906.,  6240.,  3519.,  3774.,  4029.,  4284.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102.,
      19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175.,
      21900., 20374., 21124., 21874., 22624., 15011., 15726., 16441., 17156.,
      15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604., 16958.,
      17748., 18538., 19328., 10923., 11518., 12113., 12708., 11572., 12192.,
      12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210.,
      14880., 26003., 26958., 27913., 28868., 26652., 27632., 28612., 29592.,
      27301., 28306., 29311., 30316., 27950., 28980., 30010., 31040., 25499.,
      26334., 27169., 28004., 26148., 27008., 27868., 28728., 26797., 27682.,
      28567., 29452., 27446., 28356., 29266., 30176.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599.,  2340.,  4265.,  5243.,  6221.,  7199.,  6028.,  4913.,  5584.,
      7648.,  9856.,  11144., 12432., 13720., 10912., 8216.,  3839.,  5364.,
      8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121.,
      12519., 13917., 15315., 11980., 8853.,  3496.,  4800.,  7240.,  8368.,
      9496.,  10624., 8576.,  6672.,  4515.,  6132.,  7765.,  8695.,  9625.,
      10555., 8188.,  5925.,  1599.,  2340.,  4265.,  5243.,  6221.,  7199.,
      6028.,  4913.,  5584.,  7648.,  9856.,  11144., 12432., 13720., 10912.,
      8216.,  3839.,  5364.,  8065.,  9463.,  10861., 12259., 9868.,  7621.,
      6479.,  8756.,  11121., 12519., 13917., 15315., 11980., 8853.,  3496.,
      4800.,  7240.,  8368.,  9496.,  10624., 8576.,  6672.,  4515.,  6132.,
      7765.,  8695.,  9625.,  10555., 8188.,  5925.,  1599.,  2340.,  4265.,
      5243.,  6221.,  7199.,  6028.,  4913.,  5584.,  7648.,  9856.,  11144.,
      12432., 13720., 10912., 8216.,  3839.,  5364.,  8065.,  9463.,  10861.,
      12259., 9868.,  7621.,  6479.,  8756.,  11121., 12519., 13917., 15315.,
      11980., 8853.,  3496.,  4800.,  7240.,  8368.,  9496.,  10624., 8576.,
      6672.,  4515.,  6132.,  7765.,  8695.,  9625.,  10555., 8188.,  5925.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3420.,  3696.,  5168.,  5568.,  7924.,  8464.,  9076.,  9696.,
      10228., 10928., 11380., 12160., 9648.,  10304., 8476.,  8992.,  4455.,
      4710.,  5820.,  6184.,  7077.,  7562.,  7981.,  8526.,  8885.,  9490.,
      9789.,  10454., 7532.,  8088.,  5751.,  6186.,  2015.,  2174.,  2812.,
      3048.,  4717.,  5042.,  5717.,  6102.,  6717.,  7162.,  7717.,  8222.,
      6796.,  7224.,  5135.,  5474.,  5196.,  5472.,  7312.,  7712.,  9476.,
      10016., 10820., 11440., 12164., 12864., 13508., 14288., 12272., 12928.,
      9516.,  10032., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455.,
      11150., 11999., 12794., 13543., 14438., 12132., 12888., 10293., 10890.,
      6869.,  7262.,  9364.,  9928.,  11791., 12546., 13335., 14190., 14879.,
      15834., 16423., 17478., 14180., 15064., 10613., 11306., 3420.,  3696.,
      5168.,  5568.,  7924.,  8464.,  9076.,  9696.,  10228., 10928., 11380.,
      12160., 9648.,  10304., 8476.,  8992.,  4455.,  4710.,  5820.,  6184.,
      7077.,  7562.,  7981.,  8526.,  8885.,  9490.,  9789.,  10454., 7532.,
      8088.,  5751.,  6186.,  2015.,  2174.,  2812.,  3048.,  4717.,  5042.,
      5717.,  6102.,  6717.,  7162.,  7717.,  8222.,  6796.,  7224.,  5135.,
      5474.,  5196.,  5472.,  7312.,  7712.,  9476.,  10016., 10820., 11440.,
      12164., 12864., 13508., 14288., 12272., 12928., 9516.,  10032., 3733.,
      4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150., 11999., 12794.,
      13543., 14438., 12132., 12888., 10293., 10890., 6869.,  7262.,  9364.,
      9928.,  11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.,
      14180., 15064., 10613., 11306., 3420.,  3696.,  5168.,  5568.,  7924.,
      8464.,  9076.,  9696.,  10228., 10928., 11380., 12160., 9648.,  10304.,
      8476.,  8992.,  4455.,  4710.,  5820.,  6184.,  7077.,  7562.,  7981.,
      8526.,  8885.,  9490.,  9789.,  10454., 7532.,  8088.,  5751.,  6186.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4420.,  4696.,  4972.,  5248.,  6032.,  6432.,  6832.,
      7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216., 10836., 11456.,
      10796., 11496., 12196., 12896., 11996., 12776., 13556., 14336., 9872.,
      10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,  3439.,  3694.,
      3949.,  4204.,  5324.,  5688.,  6052.,  6416.,  6853.,  7338.,  7823.,
      8308.,  7705.,  8250.,  8795.,  9340.,  8557.,  9162.,  9767.,  10372.,
      9409.,  10074., 10739., 11404., 8396.,  8952.,  9508.,  10064., 6459.,
      6894.,  7329.,  7764.,  2879.,  3038.,  3197.,  3356.,  3660.,  3896.,
      4132.,  4368.,  5397.,  5722.,  6047.,  6372.,  6313.,  6698.,  7083.,
      7468.,  7229.,  7674.,  8119.,  8564.,  8145.,  8650.,  9155.,  9660.,
      6476.,  6904.,  7332.,  7760.,  4587.,  4926.,  5265.,  5604.,  3908.,
      4184.,  4460.,  4736.,  6032.,  6432.,  6832.,  7232.,  7884.,  8424.,
      8964.,  9504.,  9084.,  9704.,  10324., 10944., 10284., 10984., 11684.,
      12384., 11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840.,
      7508.,  8024.,  8540.,  9056.,  4705.,  5002.,  5299.,  5596.,  6548.,
      6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948., 10615., 11310.,
      12005., 12700., 12067., 12862., 13657., 14452., 13519., 14414., 15309.,
      16204., 11540., 12296., 13052., 13808., 8981.,  9578.,  10175., 10772.,
      5761.,  6154.,  6547.,  6940.,  8468.,  9032.,  9596.,  10160., 10667.,
      11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526.,
      15481., 16436., 15023., 16078., 17133., 18188., 13460., 14344., 15228.,
      16112., 9525.,  10218., 10911., 11604., 4420.,  4696.,  4972.,  5248.,
      6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 9596.,
      10216., 10836., 11456., 10796., 11496., 12196., 12896., 11996., 12776.,
      13556., 14336., 9872.,  10528., 11184., 11840., 8020.,  8536.,  9052.,
      9568.,  3439.,  3694.,  3949.,  4204.,  5324.,  5688.,  6052.,  6416.,
      6853.,  7338.,  7823.,  8308.,  7705.,  8250.,  8795.,  9340.,  8557.,
      9162.,  9767.,  10372., 9409.,  10074., 10739., 11404., 8396.,  8952.,
      9508.,  10064., 6459.,  6894.,  7329.,  7764.,  2879.,  3038.,  3197.,
      3356.,  3660.,  3896.,  4132.,  4368.,  5397.,  5722.,  6047.,  6372.,
      6313.,  6698.,  7083.,  7468.,  7229.,  7674.,  8119.,  8564.,  8145.,
      8650.,  9155.,  9660.,  6476.,  6904.,  7332.,  7760.,  4587.,  4926.,
      5265.,  5604.,  3908.,  4184.,  4460.,  4736.,  6032.,  6432.,  6832.,
      7232.,  7884.,  8424.,  8964.,  9504.,  9084.,  9704.,  10324., 10944.,
      10284., 10984., 11684., 12384., 11484., 12264., 13044., 13824., 9872.,
      10528., 11184., 11840., 7508.,  8024.,  8540.,  9056.,  4705.,  5002.,
      5299.,  5596.,  6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353.,
      10948., 10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452.,
      13519., 14414., 15309., 16204., 11540., 12296., 13052., 13808., 8981.,
      9578.,  10175., 10772., 5761.,  6154.,  6547.,  6940.,  8468.,  9032.,
      9596.,  10160., 10667., 11422., 12177., 12932., 12119., 12974., 13829.,
      14684., 13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188.,
      13460., 14344., 15228., 16112., 9525.,  10218., 10911., 11604., 4420.,
      4696.,  4972.,  5248.,  6032.,  6432.,  6832.,  7232.,  8396.,  8936.,
      9476.,  10016., 9596.,  10216., 10836., 11456., 10796., 11496., 12196.,
      12896., 11996., 12776., 13556., 14336., 9872.,  10528., 11184., 11840.,
      8020.,  8536.,  9052.,  9568.,  3439.,  3694.,  3949.,  4204.,  5324.,
      5688.,  6052.,  6416.,  6853.,  7338.,  7823.,  8308.,  7705.,  8250.,
      8795.,  9340.,  8557.,  9162.,  9767.,  10372., 9409.,  10074., 10739.,
      11404., 8396.,  8952.,  9508.,  10064., 6459.,  6894.,  7329.,  7764.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667., 11422.,
      12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526., 15481.,
      16436., 15023., 16078., 17133., 18188., 9163.,  9758.,  10353., 10948.,
      10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519.,
      14414., 15309., 16204., 10667., 11422., 12177., 12932., 12119., 12974.,
      13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078., 17133.,
      18188., 9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667.,
      11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526.,
      15481., 16436., 15023., 16078., 17133., 18188.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344.,
      1750., 3208., 3802., 4242., 4426., 4354., 3592., 3470., 2214., 3720.,
      3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704., 5064., 5608.,
      6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208.,
      3802., 4242., 4426., 4354., 3592., 3470., 2214., 3720., 3882., 3938.,
      4762., 5330., 3592., 2878., 2712., 4704., 5064., 5608., 6152., 6696.,
      4704., 4344., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208., 3802., 4242.,
      4426., 4354., 3592., 3470.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.,
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.,
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456.,
      5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656.,
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 1858., 2092., 3256., 3664.,
      3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920.,
      2946., 3324., 2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032.,
      5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608.,
      6408., 7184., 4512., 5056., 4152., 4656., 1858., 2092., 3256., 3664.,
      3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920.,
      2946., 3324., 1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292.,
      4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928.,
      4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184.,
      4512., 5056., 4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292.,
      4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052.,  2286., 2520.,  3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960.,  2424., 2736.,  3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  3030., 3420., 3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800., 6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260., 9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600., 3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340., 7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400., 7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340., 5970., 6600.,  2424., 2736.,
      3048., 3360.,  4128., 4672.,  5216., 5760., 4488., 5072.,  5656., 6240.,
      4936., 5584.,  6232., 6880.,  5384., 6096., 6808., 7520.,  5832., 6608.,
      7384., 8160.,  4128., 4672.,  5216., 5760., 3768., 4272.,  4776., 5280.,
      1818., 2052.,  2286., 2520.,  3096., 3504., 3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160., 4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504., 3912., 4320.,  2826., 3204.,
      3582., 3960.,  1818., 2052.,  2286., 2520., 3096., 3504.,  3912., 4320.,
      3366., 3804.,  4242., 4680.,  3702., 4188., 4674., 5160.,  4038., 4572.,
      5106., 5640.,  4374., 4956.,  5538., 6120., 3096., 3504.,  3912., 4320.,
      2826., 3204.,  3582., 3960.,  2424., 2736., 3048., 3360.,  4128., 4672.,
      5216., 5760.,  4488., 5072.,  5656., 6240., 4936., 5584.,  6232., 6880.,
      5384., 6096.,  6808., 7520.,  5832., 6608., 7384., 8160.,  4128., 4672.,
      5216., 5760.,  3768., 4272.,  4776., 5280., 3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340., 7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400., 7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340., 5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620., 8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200., 4710., 5340.,  5970., 6600.,
      2424., 2736.,  3048., 3360.,  4128., 4672., 5216., 5760.,  4488., 5072.,
      5656., 6240.,  4936., 5584.,  6232., 6880., 5384., 6096.,  6808., 7520.,
      5832., 6608.,  7384., 8160.,  4128., 4672., 5216., 5760.,  3768., 4272.,
      4776., 5280.,  1818., 2052.,  2286., 2520., 3096., 3504.,  3912., 4320.,
      3366., 3804.,  4242., 4680.,  3702., 4188., 4674., 5160.,  4038., 4572.,
      5106., 5640.,  4374., 4956.,  5538., 6120., 3096., 3504.,  3912., 4320.,
      2826., 3204.,  3582., 3960.,  1818., 2052., 2286., 2520.,  3096., 3504.,
      3912., 4320.,  3366., 3804.,  4242., 4680., 3702., 4188.,  4674., 5160.,
      4038., 4572.,  5106., 5640.,  4374., 4956., 5538., 6120.,  3096., 3504.,
      3912., 4320.,  2826., 3204.,  3582., 3960., 2424., 2736.,  3048., 3360.,
      4128., 4672.,  5216., 5760.,  4488., 5072., 5656., 6240.,  4936., 5584.,
      6232., 6880.,  5384., 6096.,  6808., 7520., 5832., 6608.,  7384., 8160.,
      4128., 4672.,  5216., 5760.,  3768., 4272., 4776., 5280.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620., 8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200., 4710., 5340.,  5970., 6600.,
      3030., 3420.,  3810., 4200.,  5160., 5840., 6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600., 6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840., 6520., 7200.,  4710., 5340.,
      5970., 6600.,  2424., 2736.,  3048., 3360., 4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584., 6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160., 4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  1818., 2052., 2286., 2520.,  3096., 3504.,
      3912., 4320.,  3366., 3804.,  4242., 4680., 3702., 4188.,  4674., 5160.,
      4038., 4572.,  5106., 5640.,  4374., 4956., 5538., 6120.,  3096., 3504.,
      3912., 4320.,  2826., 3204.,  3582., 3960.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380.,  10325.,
      10650., 8350.,  6130.,  4460.,  5812.,  7090.,  7300.,  5660.,  4106.,
      2778.,  3570.,  4290.,  4410.,  3360.,  2391.,  8736.,  11466., 14100.,
      14370., 11280., 8295.,  10952., 14316., 15930., 14704., 10932., 7322.,
      8062.,  10464., 11435., 10544., 7722.,  5066.,  5674.,  7348.,  7945.,
      7374.,  5382.,  3522.,  4246.,  5512.,  6055.,  5804.,  4322.,  2938.,
      2192.,  2836.,  3110.,  3064.,  2332.,  1662.,  996.,   1326.,  1650.,
      1770.,  1380.,  1005.,  4974.,  6582.,  8160.,  8430.,  6660.,  4929.,
      6596.,  8684.,  10710., 11020., 8660.,  6374.,  8050.,  10540., 12925.,
      13250., 10350., 7570.,  9310.,  12160., 14875., 15200., 11850., 8650.,
      10570., 13780., 16825., 17150., 13350., 9730.,  7220.,  9332.,  11290.,
      11500., 8860.,  6386.,  4398.,  5610.,  6690.,  6810.,  5160.,  3651.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6425., 6750., 8375., 8700.,  10325., 10650., 11435., 10544., 7945.,
      7374., 6055., 5804., 12925., 13250., 14875., 15200., 16825., 17150.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      924.,  996.,  1238., 1340., 1769., 1904., 2006., 2156., 1626., 1752.,
      1271., 1370., 1876., 2008., 2464., 2648., 3436., 3676., 3748., 4008.,
      2992., 3208., 2292., 2460., 3074., 3284., 3974., 4264., 5403., 5778.,
      5740., 6140., 4514., 4844., 3397., 3652., 3808., 4076., 4534., 4880.,
      5985., 6414., 5970., 6392., 4514., 4836., 3451., 3700., 3966., 4228.,
      4966., 5304., 6887., 7306., 7192., 7604., 4770., 5084., 3441., 3684.,
      3516., 3736., 3920., 4200., 4428., 4772., 3964., 4296., 2528., 2776.,
      1844., 2036., 2068., 2228., 2270., 2468., 2453., 2692., 2262., 2484.,
      1442., 1600., 1011., 1134., 2334., 2496., 2998., 3220., 4139., 4424.,
      4376., 4676., 3466., 3712., 2641., 2830., 3796., 4048., 4864., 5208.,
      6012., 6420., 5844., 6240., 4496., 4808., 3284., 3508., 3764., 4028.,
      4822., 5184., 6469., 6902., 6646., 7072., 5282., 5620., 4063., 4308.,
      4562., 4820., 5894., 6248., 6283., 6706., 5756., 6172., 4130., 4460.,
      2645., 2884., 3248., 3500., 4150., 4496., 4625., 5038., 4418., 4824.,
      3234., 3556., 2187., 2420., 1900., 2080., 2416., 2664., 3052., 3340.,
      3100., 3376., 2432., 2648., 1860., 2012., 1902., 1992., 2526., 2652.,
      3135., 3300., 3360., 3540., 2610., 2760., 1893., 2010., 2304., 2460.,
      2966., 3180., 4429., 4704., 4666., 4956., 3770., 4008., 2955., 3138.,
      3796., 3976., 4960., 5208., 6092., 6412., 6404., 6744., 4976., 5256.,
      3636., 3852., 2822., 3044., 3622., 3928., 4559., 4954., 4896., 5316.,
      3746., 4092., 2713., 2980., 2468., 2684., 3158., 3456., 4181., 4566.,
      4518., 4928., 3490., 3828., 2575., 2836., 3074., 3284., 3974., 4264.,
      5403., 5778., 5740., 6140., 4514., 4844., 3397., 3652., 2908., 3112.,
      3728., 4008., 5260., 5620., 5532., 5912., 4384., 4696., 3348., 3588.,
      3432., 3612., 4446., 4692., 5385., 5700., 5610., 5940., 4290., 4560.,
      3063., 3270.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5403., 5778., 5740., 6140., 5985., 6414., 5970., 6392., 6887.,
      7306., 7192., 7604., 6469., 6902., 6646., 7072., 6283., 6706.,
      5756., 6172., 4625., 5038., 4418., 4824., 4559., 4954., 4896.,
      5316., 4181., 4566., 4518., 4928., 5403., 5778., 5740., 6140.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1104., 1176., 1248., 1320., 1542., 1644., 1746., 1848., 2155., 2290.,
      2425., 2560., 2390., 2540., 2690., 2840., 2262., 2388., 2514., 2640.,
      1643., 1742., 1841., 1940., 2020., 2152., 2284., 2416., 2728., 2912.,
      3096., 3280., 3752., 3992., 4232., 4472., 4068., 4328., 4588., 4848.,
      3752., 3968., 4184., 4400., 2848., 3016., 3184., 3352., 3186., 3396.,
      3606., 3816., 4298., 4588., 4878., 5168., 5823., 6198., 6573., 6948.,
      6184., 6584., 6984., 7384., 5530., 5860., 6190., 6520., 4203., 4458.,
      4713., 4968., 4468., 4736., 5004., 5272., 5042., 5388., 5734., 6080.,
      6229., 6658., 7087., 7516., 5918., 6340., 6762., 7184., 4386., 4708.,
      5030., 5352., 3549., 3798., 4047., 4296., 3638., 3900., 4162., 4424.,
      4570., 4908., 5246., 5584., 6315., 6734., 7153., 7572., 6644., 7056.,
      7468., 7880., 4778., 5092., 5406., 5720., 3791., 4034., 4277., 4520.,
      3068., 3288., 3508., 3728., 3688., 3968., 4248., 4528., 4320., 4664.,
      5008., 5352., 4172., 4504., 4836., 5168., 3304., 3552., 3800., 4048.,
      2952., 3144., 3336., 3528., 2344., 2504., 2664., 2824., 3414., 3612.,
      3810., 4008., 3387., 3626., 3865., 4104., 2798., 3020., 3242., 3464.,
      1510., 1668., 1826., 1984., 1035., 1158., 1281., 1404., 2554., 2716.,
      2878., 3040., 3342., 3564., 3786., 4008., 4505., 4790., 5075., 5360.,
      4740., 5040., 5340., 5640., 4222., 4468., 4714., 4960., 3013., 3202.,
      3391., 3580., 3820., 4072., 4324., 4576., 5128., 5472., 5816., 6160.,
      6880., 7288., 7696., 8104., 6268., 6664., 7060., 7456., 4744., 5056.,
      5368., 5680., 3496., 3720., 3944., 4168., 3616., 3880., 4144., 4408.,
      4706., 5068., 5430., 5792., 6041., 6474., 6907., 7340., 6114., 6540.,
      6966., 7392., 5138., 5476., 5814., 6152., 4265., 4510., 4755., 5000.,
      4066., 4324., 4582., 4840., 5514., 5868., 6222., 6576., 5999., 6422.,
      6845., 7268., 5688., 6104., 6520., 6936., 4762., 5092., 5422., 5752.,
      3739., 3978., 4217., 4456., 3364., 3616., 3868., 4120., 4786., 5132.,
      5478., 5824., 6085., 6498., 6911., 7324., 6414., 6820., 7226., 7632.,
      4898., 5220., 5542., 5864., 3085., 3318., 3551., 3784., 2372., 2552.,
      2732., 2912., 2888., 3136., 3384., 3632., 3160., 3448., 3736., 4024.,
      3012., 3288., 3564., 3840., 2248., 2464., 2680., 2896., 1744., 1896.,
      2048., 2200., 1506., 1596., 1686., 1776., 2078., 2204., 2330., 2456.,
      2585., 2750., 2915., 3080., 2796., 2976., 3156., 3336., 2254., 2404.,
      2554., 2704., 1845., 1962., 2079., 2196., 2244., 2400., 2556., 2712.,
      2710., 2924., 3138., 3352., 3879., 4154., 4429., 4704., 4114., 4404.,
      4694., 4984., 3238., 3476., 3714., 3952., 2367., 2550., 2733., 2916.,
      2996., 3176., 3356., 3536., 4200., 4448., 4696., 4944., 5272., 5592.,
      5912., 6232., 5588., 5928., 6268., 6608., 4840., 5120., 5400., 5680.,
      3952., 4168., 4384., 4600., 2926., 3148., 3370., 3592., 4218., 4524.,
      4830., 5136., 5523., 5918., 6313., 6708., 5884., 6304., 6724., 7144.,
      5258., 5604., 5950., 6296., 4359., 4626., 4893., 5160., 3120., 3336.,
      3552., 3768., 4002., 4300., 4598., 4896., 5097., 5482., 5867., 6252.,
      5458., 5868., 6278., 6688., 4626., 4964., 5302., 5640., 3321., 3582.,
      3843., 4104., 3186., 3396., 3606., 3816., 4298., 4588., 4878., 5168.,
      5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384., 5530., 5860.,
      6190., 6520., 4203., 4458., 4713., 4968., 2764., 2968., 3172., 3376.,
      3560., 3840., 4120., 4400., 4944., 5304., 5664., 6024., 5212., 5592.,
      5972., 6352., 4136., 4448., 4760., 5072., 3352., 3592., 3832., 4072.,
      2876., 3056., 3236., 3416., 3878., 4124., 4370., 4616., 4695., 5010.,
      5325., 5640., 4906., 5236., 5566., 5896., 3894., 4164., 4434., 4704.,
      3135., 3342., 3549., 3756.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384., 6229.,
      6658., 7087., 7516., 5918., 6340., 6762., 7184., 6315., 6734.,
      7153., 7572., 6644., 7056., 7468., 7880., 6041., 6474., 6907.,
      7340., 6114., 6540., 6966., 7392., 5999., 6422., 6845., 7268.,
      5688., 6104., 6520., 6936., 6085., 6498., 6911., 7324., 6414.,
      6820., 7226., 7632., 5523., 5918., 6313., 6708., 5884., 6304.,
      6724., 7144., 5097., 5482., 5867., 6252., 5458., 5868., 6278.,
      6688., 5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980.,  5989.,  5975.,  4716.,  3545.,  4600.,  6272.,  9112.,
      10048., 8384.,  6800.,  8471.,  11348., 12649., 12287., 9180.,  6233.,
      7363.,  9028.,  10541., 10083., 7372.,  5413.,  6959.,  8948.,  12209.,
      13031., 8636.,  6385.,  6144.,  7008.,  8528.,  8152.,  5536.,  4344.,
      4887.,  5764.,  6705.,  6771.,  4764.,  3501.,  5487.,  7396.,  9401.,
      10379., 8284.,  6261.,  6184.,  8256.,  10024., 10320., 8064.,  5952.,
      5675.,  7588.,  10597., 11643., 9452.,  7437.,  8471.,  11348., 12649.,
      12287., 9180.,  6233.,  7363.,  9028.,  10541., 10083., 7372.,  5413.,
      5872.,  7456.,  10304., 10856., 6944.,  5160.,  5747.,  6516.,  7365.,
      6791.,  4300.,  3177.,  3051.,  4180.,  6701.,  7679.,  6412.,  5201.,
      6712.,  9088.,  11576., 12864., 10240., 7696.,  6719.,  8948.,  10849.,
      11255., 8700.,  6337.,  5675.,  7588.,  10597., 11643., 9452.,  7437.,
      8471.,  11348., 12649., 12287., 9180.,  6233.,  5536.,  7328.,  8912.,
      8920.,  6880.,  5016.,  5295.,  7076.,  8217.,  8667.,  6716.,  4869.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12649., 12287., 10541., 10083., 12209., 13031., 10597., 11643., 12649.,
      12287., 10541., 10083., 10849., 11255., 10597., 11643., 12649., 12287.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  7701.,  8222.,  9620.,  10312., 12111., 12930.,
      12631., 13422., 9316.,  9912.,  7205.,  7650.,  5308.,  5664.,  6448.,
      6912.,  8148.,  8736.,  8404.,  9008.,  6832.,  7296.,  6268.,  6640.,
      5143.,  5454.,  7612.,  8008.,  8021.,  8514.,  7261.,  7750.,  4460.,
      4824.,  3351.,  3642.,  5087.,  5342.,  6908.,  7272.,  8685.,  9170.,
      9685.,  10230., 8460.,  8920.,  6015.,  6378.,  6252.,  6672.,  9360.,
      9952.,  12964., 13680., 12388., 13120., 10224., 10816., 8396.,  8832.,
      6725.,  7190.,  8724.,  9384.,  11199., 12010., 12103., 12950., 10340.,
      11032., 8213.,  8730.,  7733.,  8174.,  10900., 11528., 12527., 13298.,
      12663., 13470., 11364., 12024., 8901.,  9394.,  8997.,  9542.,  11028.,
      11752., 13599., 14458., 13607., 14438., 9316.,  9944.,  6261.,  6730.,
      6460.,  6912.,  7728.,  8320.,  9556.,  10240., 9684.,  10320., 6064.,
      6528.,  4860.,  5200.,  4583.,  4870.,  5564.,  5928.,  6565.,  7018.,
      6573.,  7022.,  5356.,  5688.,  5031.,  5298.,  3311.,  3542.,  4348.,
      4680.,  6653.,  7098.,  7653.,  8158.,  6540.,  6968.,  4943.,  5282.,
      5868.,  6192.,  8336.,  8800.,  10788., 11408., 12132., 12832., 10992.,
      11584., 8780.,  9248.,  7253.,  7742.,  10644., 11336., 14479., 15330.,
      14103., 14990., 11364., 12088., 9061.,  9602.,  6725.,  7190.,  8724.,
      9384.,  11199., 12010., 12103., 12950., 10340., 11032., 8213.,  8730.,
      7733.,  8174.,  10900., 11528., 12527., 13298., 12663., 13470., 11364.,
      12024., 8901.,  9394.,  5564.,  5984.,  7984.,  8576.,  10836., 11552.,
      11860., 12592., 8368.,  8960.,  5500.,  5936.,  5431.,  5758.,  7100.,
      7560.,  7413.,  7954.,  7421.,  7958.,  5740.,  6168.,  4535.,  4842.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438., 12111.,
      12930., 12631., 13422., 11199., 12010., 12103., 12950., 12527., 13298.,
      12663., 13470., 13599., 14458., 13607., 14438., 14479., 15330., 14103.,
      14990., 11199., 12010., 12103., 12950., 12527., 13298., 12663., 13470.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  7553.,  8074.,  8595.,
      9116.,  9364.,  10056., 10748., 11440., 12267., 13086., 13905., 14724.,
      11799., 12590., 13381., 14172., 8116.,  8712.,  9308.,  9904.,  6029.,
      6474.,  6919.,  7364.,  4532.,  4888.,  5244.,  5600.,  6992.,  7456.,
      7920.,  8384.,  9820.,  10408., 10996., 11584., 9292.,  9896.,  10500.,
      11104., 6992.,  7456.,  7920.,  8384.,  5796.,  6168.,  6540.,  6912.,
      4503.,  4814.,  5125.,  5436.,  6828.,  7224.,  7620.,  8016.,  6941.,
      7434.,  7927.,  8420.,  6577.,  7066.,  7555.,  8044.,  5516.,  5880.,
      6244.,  6608.,  4107.,  4398.,  4689.,  4980.,  3551.,  3806.,  4061.,
      4316.,  5580.,  5944.,  6308.,  6672.,  7285.,  7770.,  8255.,  8740.,
      8201.,  8746.,  9291.,  9836.,  6956.,  7416.,  7876.,  8336.,  5043.,
      5406.,  5769.,  6132.,  6644.,  7064.,  7484.,  7904.,  8912.,  9504.,
      10096., 10688., 11100., 11816., 12532., 13248., 10572., 11304., 12036.,
      12768., 7888.,  8480.,  9072.,  9664.,  6372.,  6808.,  7244.,  7680.,
      7449.,  7914.,  8379.,  8844.,  9908.,  10568., 11228., 11888., 11475.,
      12286., 13097., 13908., 11711., 12558., 13405., 14252., 10580., 11272.,
      11964., 12656., 7973.,  8490.,  9007.,  9524.,  6161.,  6602.,  7043.,
      7484.,  9428.,  10056., 10684., 11312., 11099., 11870., 12641., 13412.,
      11847., 12654., 13461., 14268., 11124., 11784., 12444., 13104., 7325.,
      7818.,  8311.,  8804.,  9353.,  9898.,  10443., 10988., 10868., 11592.,
      12316., 13040., 12131., 12990., 13849., 14708., 12687., 13518., 14349.,
      15180., 9620.,  10248., 10876., 11504., 6165.,  6634.,  7103.,  7572.,
      6484.,  6936.,  7388.,  7840.,  7888.,  8480.,  9072.,  9664.,  10492.,
      11176., 11860., 12544., 9772.,  10408., 11044., 11680., 5968.,  6432.,
      6896.,  7360.,  4804.,  5144.,  5484.,  5824.,  3151.,  3438.,  3725.,
      4012.,  5324.,  5688.,  6052.,  6416.,  7397.,  7850.,  8303.,  8756.,
      6521.,  6970.,  7419.,  7868.,  5036.,  5368.,  5700.,  6032.,  4419.,
      4686.,  4953.,  5220.,  3863.,  4094.,  4325.,  4556.,  5100.,  5432.,
      5764.,  6096.,  7357.,  7802.,  8247.,  8692.,  8273.,  8778.,  9283.,
      9788.,  6476.,  6904.,  7332.,  7760.,  4715.,  5054.,  5393.,  5732.,
      4436.,  4760.,  5084.,  5408.,  6992.,  7456.,  7920.,  8384.,  9148.,
      9768.,  10388., 11008., 10348., 11048., 11748., 12448., 8912.,  9504.,
      10096., 10688., 7108.,  7576.,  8044.,  8512.,  7713.,  8202.,  8691.,
      9180.,  10388., 11080., 11772., 12464., 12875., 13726., 14577., 15428.,
      12599., 13486., 14373., 15260., 10036., 10760., 11484., 12208., 7597.,
      8138.,  8679.,  9220.,  7449.,  7914.,  8379.,  8844.,  9908.,  10568.,
      11228., 11888., 11475., 12286., 13097., 13908., 11711., 12558., 13405.,
      14252., 10580., 11272., 11964., 12656., 7973.,  8490.,  9007.,  9524.,
      6161.,  6602.,  7043.,  7484.,  9428.,  10056., 10684., 11312., 11099.,
      11870., 12641., 13412., 11847., 12654., 13461., 14268., 11124., 11784.,
      12444., 13104., 7325.,  7818.,  8311.,  8804.,  6516.,  6936.,  7356.,
      7776.,  8912.,  9504.,  10096., 10688., 10972., 11688., 12404., 13120.,
      11980., 12712., 13444., 14176., 8912.,  9504.,  10096., 10688., 5732.,
      6168.,  6604.,  7040.,  4551.,  4878.,  5205.,  5532.,  6764.,  7224.,
      7684.,  8144.,  8237.,  8778.,  9319.,  9860.,  7361.,  7898.,  8435.,
      8972.,  5452.,  5880.,  6308.,  6736.,  4411.,  4718.,  5025.,  5332.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 12267., 13086.,
      13905., 14724., 11799., 12590., 13381., 14172., 11475., 12286., 13097.,
      13908., 11711., 12558., 13405., 14252., 11099., 11870., 12641., 13412.,
      11847., 12654., 13461., 14268., 12131., 12990., 13849., 14708., 12687.,
      13518., 14349., 15180., 12875., 13726., 14577., 15428., 12599., 13486.,
      14373., 15260., 11475., 12286., 13097., 13908., 11711., 12558., 13405.,
      14252., 11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 14994., 21208., 28574.,
      28870., 20920., 17066., 11288., 13600., 16808., 18376., 15136., 14136.,
      11110., 17160., 16234., 13698., 8616.,  6990.,  11590., 13256., 15754.,
      16994., 13352., 10286., 10936., 15968., 24712., 26024., 19360., 16408.,
      14370., 18584., 23886., 27062., 25080., 21434., 14258., 22104., 24510.,
      24614., 19896., 15946., 17858., 21656., 25774., 28118., 20856., 15066.,
      10008., 13600., 18600., 21192., 15136., 13880., 8310.,  9928.,  12186.,
      14066., 11240., 10206., 9366.,  13320., 15354., 16594., 14952., 10878.,
      14776., 19040., 23432., 25768., 19360., 14104., 14994., 21208., 28574.,
      28870., 20920., 17066., 14370., 18584., 23886., 27062., 25080., 21434.,
      14258., 22104., 24510., 24614., 19896., 15946., 11288., 15648., 19880.,
      23496., 17184., 12088., 7878.,  12040., 14090., 15970., 13864., 12590.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24510., 24614., 25774., 28118., 28574., 28870., 23886., 27062., 24510.,
      24614., 25774., 28118., 28574., 28870., 23886., 27062., 24510., 24614.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 16478., 17508., 21192., 22640., 28066., 29756.,
      26594., 28300., 17864., 19184., 14206., 15188., 11512., 12272., 17056.,
      18112., 21576., 22864., 20552., 21904., 17056., 18112., 14584., 15408.,
      8258.,  8844.,  14200., 14992., 13950., 14868., 13502., 14404., 12920.,
      13584., 8610.,  9116.,  9826.,  10316., 11128., 11792., 13214., 14100.,
      15582., 16580., 12920., 13712., 10114., 10780., 12024., 12784., 15008.,
      16064., 21064., 22352., 22088., 23440., 15008., 16064., 13048., 13872.,
      14302., 15236., 21192., 22512., 26914., 28572., 26978., 28780., 24008.,
      25456., 18686., 19828., 13150., 13988., 21192., 22384., 24226., 25724.,
      26338., 27980., 24008., 25328., 15998., 17044., 19166., 20164., 21192.,
      22512., 22562., 24156., 25186., 26796., 19912., 21104., 14334., 15284.,
      12024., 12784., 15008., 16064., 21064., 22352., 22088., 23440., 15008.,
      16064., 13048., 13872., 5826.,  6316.,  10104., 10768., 15102., 15988.,
      15166., 16164., 12920., 13712., 10786., 11452., 8418.,  8940.,  13176.,
      13968., 16414., 17396., 18782., 19876., 17016., 17936., 10242., 10940.,
      13560., 14320., 17056., 18112., 19528., 20816., 22600., 23952., 17056.,
      18112., 12536., 13360., 16478., 17508., 21192., 22640., 28066., 29756.,
      26594., 28300., 17864., 19184., 14206., 15188., 14302., 15236., 21192.,
      22512., 26914., 28572., 26978., 28780., 24008., 25456., 18686., 19828.,
      13150., 13988., 21192., 22384., 24226., 25724., 26338., 27980., 24008.,
      25328., 15998., 17044., 13560., 14320., 17056., 18112., 19528., 20816.,
      22600., 23952., 17056., 18112., 12536., 13360., 8002.,  8524.,  12152.,
      12944., 15742., 16724., 15806., 16900., 12920., 13840., 11426., 12124.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796., 28066.,
      29756., 26594., 28300., 26914., 28572., 26978., 28780., 24226., 25724.,
      26338., 27980., 22562., 24156., 25186., 26796., 28066., 29756., 26594.,
      28300., 26914., 28572., 26978., 28780., 24226., 25724., 26338., 27980.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 14518., 15548., 16578.,
      17608., 21864., 23312., 24760., 26208., 26538., 28228., 29918., 31608.,
      25626., 27332., 29038., 30744., 20456., 21776., 23096., 24416., 13414.,
      14396., 15378., 16360., 12152., 12912., 13672., 14432., 16160., 17216.,
      18272., 19328., 19208., 20496., 21784., 23072., 20168., 21520., 22872.,
      24224., 16160., 17216., 18272., 19328., 13112., 13936., 14760., 15584.,
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  7322.,  7812.,  8302.,
      8792.,  9944.,  10608., 11272., 11936., 13254., 14140., 15026., 15912.,
      13782., 14780., 15778., 16776., 12376., 13168., 13960., 14752., 9578.,
      10244., 10910., 11576., 11128., 11888., 12648., 13408., 16160., 17216.,
      18272., 19328., 20232., 21520., 22808., 24096., 21192., 22544., 23896.,
      25248., 16160., 17216., 18272., 19328., 12088., 12912., 13736., 14560.,
      14358., 15292., 16226., 17160., 19944., 21264., 22584., 23904., 24266.,
      25924., 27582., 29240., 26298., 28100., 29902., 31704., 22376., 23824.,
      25272., 26720., 17094., 18236., 19378., 20520., 12150., 12988., 13826.,
      14664., 18024., 19216., 20408., 21600., 23146., 24644., 26142., 27640.,
      25178., 26820., 28462., 30104., 20456., 21776., 23096., 24416., 14886.,
      15932., 16978., 18024., 15830., 16828., 17826., 18824., 19944., 21264.,
      22584., 23904., 23818., 25412., 27006., 28600., 22906., 24516., 26126.,
      27736., 18536., 19728., 20920., 22112., 14726., 15676., 16626., 17576.,
      11128., 11888., 12648., 13408., 16160., 17216., 18272., 19328., 20232.,
      21520., 22808., 24096., 21192., 22544., 23896., 25248., 16160., 17216.,
      18272., 19328., 12088., 12912., 13736., 14560., 7322.,  7812.,  8302.,
      8792.,  9944.,  10608., 11272., 11936., 13254., 14140., 15026., 15912.,
      13782., 14780., 15778., 16776., 12376., 13168., 13960., 14752., 9578.,
      10244., 10910., 11576., 7546.,  8068.,  8590.,  9112.,  11864., 12656.,
      13448., 14240., 15462., 16444., 17426., 18408., 15990., 17084., 18178.,
      19272., 14296., 15216., 16136., 17056., 9802.,  10500., 11198., 11896.,
      12152., 12912., 13672., 14432., 16160., 17216., 18272., 19328., 19208.,
      20496., 21784., 23072., 20168., 21520., 22872., 24224., 16160., 17216.,
      18272., 19328., 13112., 13936., 14760., 15584., 14518., 15548., 16578.,
      17608., 21864., 23312., 24760., 26208., 26538., 28228., 29918., 31608.,
      25626., 27332., 29038., 30744., 20456., 21776., 23096., 24416., 13414.,
      14396., 15378., 16360., 14358., 15292., 16226., 17160., 19944., 21264.,
      22584., 23904., 24266., 25924., 27582., 29240., 26298., 28100., 29902.,
      31704., 22376., 23824., 25272., 26720., 17094., 18236., 19378., 20520.,
      12150., 12988., 13826., 14664., 18024., 19216., 20408., 21600., 23146.,
      24644., 26142., 27640., 25178., 26820., 28462., 30104., 20456., 21776.,
      23096., 24416., 14886., 15932., 16978., 18024., 12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 7546.,  8068.,  8590.,  9112.,  11864., 12656.,
      13448., 14240., 15462., 16444., 17426., 18408., 15990., 17084., 18178.,
      19272., 14296., 15216., 16136., 17056., 9802.,  10500., 11198., 11896.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 26538., 28228.,
      29918., 31608., 25626., 27332., 29038., 30744., 24266., 25924., 27582.,
      29240., 26298., 28100., 29902., 31704., 23146., 24644., 26142., 27640.,
      25178., 26820., 28462., 30104., 23818., 25412., 27006., 28600., 22906.,
      24516., 26126., 27736., 26538., 28228., 29918., 31608., 25626., 27332.,
      29038., 30744., 24266., 25924., 27582., 29240., 26298., 28100., 29902.,
      31704., 23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  7360.,  9660.,  11875., 12200., 12525., 9800.,  7180.,  5156.,
      6704.,  8160.,  8370.,  8580.,  6640.,  4808.,  3213.,  4120.,  4940.,
      5060.,  5180.,  3940.,  2799.,  6998.,  8674.,  10294., 9220.,  9490.,
      7450.,  5478.,  5606.,  6928.,  8194.,  7480.,  7790.,  6080.,  4442.,
      4598.,  5670.,  6674.,  6295.,  6620.,  5110.,  3688.,  4020.,  5064.,
      6069.,  6010.,  6335.,  4940.,  3604.,  4402.,  5738.,  7064.,  7325.,
      7650.,  6050.,  4480.,  3086.,  4064.,  5010.,  5220.,  5430.,  4240.,
      3098.,  1998.,  2590.,  3140.,  3260.,  3380.,  2590.,  1854.,  7569.,
      9952.,  12260., 12530., 12800., 10060., 7407.,  9740.,  12752., 15640.,
      15950., 16260., 12720., 9320.,  9960.,  11924., 13767., 12684., 11665.,
      9040.,  6556.,  7142.,  8438.,  9642.,  8879.,  8180.,  6310.,  4552.,
      5284.,  6232.,  7117.,  6674.,  6295.,  4860.,  3508.,  2872.,  3280.,
      3652.,  3414.,  3240.,  2480.,  1772.,  1231.,  1380.,  1532.,  1524.,
      1580.,  1240.,  909.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7650.,  7975.,  9600.,  9925.,  10250., 11875., 12200., 12525.,
      23250., 23575., 23900., 25525., 25850., 26175., 27800., 28125., 28450.,
      29959., 27468., 25105., 19434., 17583., 15860., 12109., 10898., 9815.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 9910.,  10312.,
      12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688.,
      13280., 9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,
      9535.,  10120., 9760.,  10360., 7394.,  7880.,  5229.,  5598.,  13602.,
      13996., 16838., 17348., 19959., 20588., 17860., 18440., 18385., 18980.,
      14418., 14900., 10590., 10956., 10794., 11212., 13312., 13856., 15714.,
      16388., 14330., 14960., 14930., 15580., 11632., 12160., 8482.,  8884.,
      8733.,  9196.,  10734., 11340., 12594., 13348., 11875., 12590., 12500.,
      13240., 9618.,  10220., 6917.,  7376.,  7664.,  8040.,  9638.,  10128.,
      11529., 12138., 11450., 12020., 12075., 12670., 9394.,  9880.,  6836.,
      7208.,  8515.,  8804.,  11102., 11476., 13664., 14128., 14225., 14650.,
      14850., 15300., 11730., 12100., 8675.,  8960.,  5950.,  6172.,  7824.,
      8128.,  9630.,  10020., 10030., 10440., 10430., 10860., 8128.,  8480.,
      5926.,  6196.,  3798.,  3996.,  4910.,  5180.,  5935.,  6280.,  6160.,
      6520.,  6385.,  6760.,  4874.,  5180.,  3474.,  3708.,  14751., 15138.,
      19382., 19904., 23860., 24520., 24385., 25060., 24910., 25600., 19562.,
      20120., 14391., 14814., 18922., 19480., 24752., 25504., 30330., 31280.,
      30930., 31900., 31530., 32520., 24640., 25440., 18034., 18640., 19234.,
      19920., 22966., 23848., 26451., 27534., 24324., 25368., 22325., 23330.,
      17266., 18080., 12494., 13112., 13685., 14284., 16110., 16876., 18346.,
      19284., 16859., 17758., 15500., 16360., 11922., 12620., 8573.,  9104.,
      10056., 10568., 11814., 12464., 13441., 14234., 12594., 13348., 11875.,
      12590., 9138.,  9720.,  6572.,  7016.,  5382.,  5744.,  6112.,  6560.,
      6766.,  7304.,  6334.,  6828.,  6030.,  6480.,  4592.,  4960.,  3262.,
      3544.,  2271.,  2462.,  2542.,  2760.,  2816.,  3064.,  2849.,  3048.,
      3010.,  3160.,  2354.,  2480.,  1719.,  1818.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.,
      12594., 13348., 11875., 12590., 12500., 13240., 11529., 12138., 11450.,
      12020., 12075., 12670., 13664., 14128., 14225., 14650., 14850., 15300.,
      26451., 27534., 24324., 25368., 22325., 23330., 18346., 19284., 16859.,
      17758., 15500., 16360., 13441., 14234., 12594., 13348., 11875., 12590.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,
      3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,
      5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,
      3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,
      7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,
      8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,
      5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,
      9696.,  11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440., 7692.,
      7992.,  8292.,  8592.,  9661.,  10006., 10351., 10696., 12262., 12732.,
      13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275.,
      18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304.,
      10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818.,
      16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368.,
      23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498.,
      19168., 12662., 13172., 13682., 14192., 10970., 11372., 11774., 12176.,
      13792., 14336., 14880., 15424., 18922., 19612., 20302., 20992., 19446.,
      20156., 20866., 21576., 19970., 20700., 21430., 22160., 15568., 16160.,
      16752., 17344., 11674., 12124., 12574., 13024., 11853., 12186., 12519.,
      12852., 15130., 15580., 16030., 16480., 18050., 18620., 19190., 19760.,
      18485., 19070., 19655., 20240., 18920., 19520., 20120., 20720., 14302.,
      14788., 15274., 15760., 10089., 10458., 10827., 11196., 11386., 11780.,
      12174., 12568., 13710., 14220., 14730., 15240., 19321., 19950., 20579.,
      21208., 18692., 19272., 19852., 20432., 19151., 19746., 20341., 20936.,
      15298., 15780., 16262., 16744., 11854., 12220., 12586., 12952., 15346.,
      15764., 16182., 16600., 19424., 19968., 20512., 21056., 27234., 27908.,
      28582., 29256., 23934., 24564., 25194., 25824., 24538., 25188., 25838.,
      26488., 18832., 19360., 19888., 20416., 13554., 13956., 14358., 14760.,
      12587., 13050., 13513., 13976., 14718., 15324., 15930., 16536., 16882.,
      17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556., 16296.,
      17036., 17776., 11594., 12196., 12798., 13400., 8127.,  8586.,  9045.,
      9504.,  7848.,  8224.,  8600.,  8976.,  9058.,  9548.,  10038., 10528.,
      10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819.,
      11414., 12009., 12604., 8126.,  8612.,  9098.,  9584.,  5812.,  6184.,
      6556.,  6928.,  6949.,  7238.,  7527.,  7816.,  8518.,  8892.,  9266.,
      9640.,  11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108.,
      12482., 12932., 13382., 13832., 9778.,  10148., 10518., 10888., 7337.,
      7622.,  7907.,  8192.,  6110.,  6332.,  6554.,  6776.,  7792.,  8096.,
      8400.,  8704.,  11062., 11452., 11842., 12232., 11586., 11996., 12406.,
      12816., 12110., 12540., 12970., 13400., 9568.,  9920.,  10272., 10624.,
      7294.,  7564.,  7834.,  8104.,  7398.,  7596.,  7794.,  7992.,  9550.,
      9820.,  10090., 10360., 11525., 11870., 12215., 12560., 11960., 12320.,
      12680., 13040., 12395., 12770., 13145., 13520., 9442.,  9748.,  10054.,
      10360., 6714.,  6948.,  7182.,  7416.,  11259., 11646., 12033., 12420.,
      14178., 14700., 15222., 15744., 19348., 20008., 20668., 21328., 19807.,
      20482., 21157., 21832., 20266., 20956., 21646., 22336., 15846., 16404.,
      16962., 17520., 11911., 12334., 12757., 13180., 16742., 17300., 17858.,
      18416., 21104., 21856., 22608., 23360., 27966., 28916., 29866., 30816.,
      28570., 29540., 30510., 31480., 29174., 30164., 31154., 32144., 22624.,
      23424., 24224., 25024., 16774., 17380., 17986., 18592., 18646., 19332.,
      20018., 20704., 22010., 22892., 23774., 24656., 28331., 29414., 30497.,
      31580., 27636., 28680., 29724., 30768., 27197., 28202., 29207., 30212.,
      21110., 21924., 22738., 23552., 15730., 16348., 16966., 17584., 17235.,
      17834., 18433., 19032., 21214., 21980., 22746., 23512., 28714., 29652.,
      30590., 31528., 29299., 30198., 31097., 31996., 26044., 26904., 27764.,
      28624., 19690., 20388., 21086., 21784., 13927., 14458., 14989., 15520.,
      15568., 16080., 16592., 17104., 17346., 17996., 18646., 19296., 19113.,
      19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622.,
      16337., 17052., 11102., 11684., 12266., 12848., 7772.,  8216.,  8660.,
      9104.,  7714.,  8076.,  8438.,  8800.,  8064.,  8512.,  8960.,  9408.,
      9026.,  9564.,  10102., 10640., 7950.,  8444.,  8938.,  9432.,  7130.,
      7580.,  8030.,  8480.,  5360.,  5728.,  6096.,  6464.,  3874.,  4156.,
      4438.,  4720.,  4351.,  4542.,  4733.,  4924.,  4866.,  5084.,  5302.,
      5520.,  5384.,  5632.,  5880.,  6128.,  5499.,  5698.,  5897.,  6096.,
      5870.,  6020.,  6170.,  6320.,  4582.,  4708.,  4834.,  4960.,  3339.,
      3438.,  3537.,  3636.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131.,
      13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650.,
      18275., 18900., 17674., 18324., 18974., 19624., 20919., 21694., 22469.,
      23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692.,
      16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556.,
      16296., 17036., 17776., 10865., 11474., 12083., 12692., 10170., 10740.,
      11310., 11880., 10819., 11414., 12009., 12604., 11248., 11712., 12176.,
      12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      28331., 29414., 30497., 31580., 27636., 28680., 29724., 30768., 27197.,
      28202., 29207., 30212., 28714., 29652., 30590., 31528., 29299., 30198.,
      31097., 31996., 26044., 26904., 27764., 28624., 19113., 19906., 20699.,
      21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113.,  5483.,  4700.,  3925.,  5140.,  6704.,
      10252., 11444., 10716., 8592.,  6500.,  8395.,  9956.,  11141., 10043.,
      9201.,  7092.,  5135.,  6953.,  8412.,  11007., 11189., 11627., 9548.,
      5597.,  9351.,  11988., 13177., 12591., 11141., 7940.,  4939.,  5908.,
      7792.,  9708.,  9716.,  9372.,  7184.,  5220.,  6165.,  8188.,  9547.,
      9997.,  8687.,  6444.,  4353.,  2607.,  3268.,  5113.,  5483.,  6461.,
      5460.,  4491.,  5580.,  7472.,  11444., 10716., 12004., 9584.,  7228.,
      7517.,  8300.,  10043., 9201.,  9863.,  7548.,  5905.,  6715.,  8036.,
      11189., 11627., 12929., 8596.,  6367.,  9753.,  10844., 12591., 11141.,
      10043., 6764.,  4973.,  6604.,  7408.,  9716.,  9372.,  9284.,  7088.,
      5756.,  6795.,  8372.,  9997.,  8687.,  7633.,  5412.,  3335.,  2325.,
      3260.,  5483.,  6461.,  7439.,  6220.,  5057.,  6148.,  8368.,  10716.,
      12004., 13292., 10576., 7956.,  5647.,  6900.,  9201.,  9863.,  10653.,
      8612.,  6675.,  6125.,  7916.,  11627., 12929., 12311., 9660.,  7137.,
      8395.,  9956.,  11141., 10043., 9201.,  7092.,  5135.,  6052.,  7152.,
      9372.,  9284.,  9452.,  7856.,  4372.,  6817.,  8684.,  8687.,  7633.,
      6835.,  4604.,  2445.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11141., 10043., 9201.,  11007., 11189., 11627., 13177., 12591., 11141.,
      10043., 9201.,  9863.,  11189., 11627., 12929., 12591., 11141., 10043.,
      9201.,  9863.,  10653., 11627., 12929., 12311., 11141., 10043., 9201.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  9365.,  9934.,  12052., 12808., 13327., 14226., 13079.,
      13950., 13215., 13994., 10212., 10824., 7789.,  8214.,  5900.,  6344.,
      8368.,  8992.,  11492., 12248., 12516., 13288., 10852., 11576., 7472.,
      8032.,  4812.,  5192.,  6111.,  6474.,  7996.,  8504.,  8477.,  9078.,
      8485.,  9082.,  7085.,  7614.,  5484.,  5880.,  4455.,  4706.,  3711.,
      3934.,  4220.,  4520.,  5837.,  6226.,  5685.,  6070.,  6685.,  7130.,
      5836.,  6216.,  4455.,  4758.,  5148.,  5464.,  6928.,  7360.,  10708.,
      11272., 10132., 10712., 11476., 12136., 10480., 11040., 8252.,  8696.,
      7565.,  8058.,  10324., 10936., 11943., 12694., 11183., 11906., 11319.,
      12078., 9188.,  9784.,  8133.,  8610.,  8741.,  9270.,  9620.,  10280.,
      12255., 13066., 12007., 12790., 13423., 14242., 9956.,  10600., 7485.,
      7998.,  9405.,  9970.,  10964., 11672., 13079., 13950., 13215., 13994.,
      11943., 12694., 9188.,  9752.,  7349.,  7770.,  6604.,  7096.,  8880.,
      9504.,  12516., 13288., 10852., 11576., 9700.,  10376., 6576.,  7072.,
      5388.,  5752.,  6695.,  7094.,  7612.,  8104.,  8485.,  9082.,  7085.,
      7614.,  6197.,  6658.,  4908.,  5224.,  4111.,  4334.,  2663.,  2858.,
      3580.,  3864.,  5685.,  6070.,  6685.,  7130.,  7685.,  8190.,  6668.,
      7096.,  5039.,  5378.,  5532.,  5832.,  7824.,  8256.,  10132., 10712.,
      11476., 12136., 12820., 13560., 11632., 12256., 9148.,  9640.,  7221.,
      7646.,  8724.,  9288.,  11183., 11906., 11319., 12078., 11711., 12506.,
      10468., 11144., 9101.,  9638.,  6861.,  7322.,  8532.,  9144.,  12007.,
      12790., 13423., 14242., 13047., 13902., 11236., 11960., 8453.,  9026.,
      8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694., 11183.,
      11906., 9060.,  9640.,  7165.,  7582.,  6924.,  7400.,  9648.,  10272.,
      10852., 11576., 9700.,  10376., 9060.,  9688.,  7344.,  7840.,  4172.,
      4520.,  6127.,  6498.,  7484.,  7960.,  7085.,  7614.,  6197.,  6658.,
      5821.,  6214.,  4716.,  5016.,  4023.,  4218.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13215., 13994., 11943., 12694., 11183., 11906., 13015., 13854., 12255.,
      13066., 12007., 12790., 13327., 14226., 13079., 13950., 13215., 13994.,
      11943., 12694., 11183., 11906., 11319., 12078., 12255., 13066., 12007.,
      12790., 13423., 14242., 13079., 13950., 13215., 13994., 11943., 12694.,
      11183., 11906., 11319., 12078., 11711., 12506., 12007., 12790., 13423.,
      14242., 13047., 13902., 13215., 13994., 11943., 12694., 11183., 11906.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  9169.,  9738.,  10307., 10876., 11348.,
      12104., 12860., 13616., 12059., 12958., 13857., 14756., 12103., 12974.,
      13845., 14716., 12979., 13758., 14537., 15316., 8868.,  9480.,  10092.,
      10704., 5681.,  6106.,  6531.,  6956.,  6908.,  7352.,  7796.,  8240.,
      9392.,  10016., 10640., 11264., 11732., 12488., 13244., 14000., 12740.,
      13512., 14284., 15056., 10484., 11208., 11932., 12656., 7920.,  8480.,
      9040.,  9600.,  5436.,  5816.,  6196.,  6576.,  4979.,  5342.,  5705.,
      6068.,  7484.,  7992.,  8500.,  9008.,  9153.,  9754.,  10355., 10956.,
      8277.,  8874.,  9471.,  10068., 6697.,  7226.,  7755.,  8284.,  5484.,
      5880.,  6276.,  6672.,  5203.,  5454.,  5705.,  5956.,  4031.,  4254.,
      4477.,  4700.,  4364.,  4664.,  4964.,  5264.,  5653.,  6042.,  6431.,
      6820.,  6377.,  6762.,  7147.,  7532.,  7293.,  7738.,  8183.,  8628.,
      5756.,  6136.,  6516.,  6896.,  4159.,  4462.,  4765.,  5068.,  4156.,
      4472.,  4788.,  5104.,  5744.,  6176.,  6608.,  7040.,  9044.,  9608.,
      10172., 10736., 8516.,  9096.,  9676.,  10256., 9716.,  10376., 11036.,
      11696., 8432.,  8992.,  9552.,  10112., 6588.,  7032.,  7476.,  7920.,
      7053.,  7546.,  8039.,  8532.,  10724., 11336., 11948., 12560., 10975.,
      11726., 12477., 13228., 9995.,  10718., 11441., 12164., 10743., 11502.,
      12261., 13020., 9140.,  9736.,  10332., 10928., 7341.,  7818.,  8295.,
      8772.,  9241.,  9770.,  10299., 10828., 9396.,  10056., 10716., 11376.,
      11027., 11838., 12649., 13460., 11071., 11854., 12637., 13420., 12331.,
      13150., 13969., 14788., 9860.,  10504., 11148., 11792., 7033.,  7546.,
      8059.,  8572.,  8357.,  8922.,  9487.,  10052., 10116., 10824., 11532.,
      12240., 12103., 12974., 13845., 14716., 12979., 13758., 14537., 15316.,
      10975., 11726., 12477., 13228., 7636.,  8200.,  8764.,  9328.,  5829.,
      6250.,  6671.,  7092.,  7628.,  8120.,  8612.,  9104.,  9648.,  10272.,
      10896., 11520., 12740., 13512., 14284., 15056., 10484., 11208., 11932.,
      12656., 9252.,  9928.,  10604., 11280., 7472.,  7968.,  8464.,  8960.,
      5964.,  6328.,  6692.,  7056.,  5471.,  5870.,  6269.,  6668.,  8012.,
      8504.,  8996.,  9488.,  8277.,  8874.,  9471.,  10068., 6697.,  7226.,
      7755.,  8284.,  6141.,  6602.,  7063.,  7524.,  5820.,  6136.,  6452.,
      6768.,  4031.,  4254.,  4477.,  4700.,  3371.,  3566.,  3761.,  3956.,
      4380.,  4664.,  4948.,  5232.,  6377.,  6762.,  7147.,  7532.,  7293.,
      7738.,  8183.,  8628.,  8209.,  8714.,  9219.,  9724.,  6476.,  6904.,
      7332.,  7760.,  4651.,  4990.,  5329.,  5668.,  4172.,  4472.,  4772.,
      5072.,  6512.,  6944.,  7376.,  7808.,  8516.,  9096.,  9676.,  10256.,
      9716.,  10376., 11036., 11696., 10916., 11656., 12396., 13136., 9392.,
      10016., 10640., 11264., 7308.,  7800.,  8292.,  8784.,  7585.,  8010.,
      8435.,  8860.,  8468.,  9032.,  9596.,  10160., 9995.,  10718., 11441.,
      12164., 10743., 11502., 12261., 13020., 12003., 12798., 13593., 14388.,
      10340., 11016., 11692., 12368., 8193.,  8730.,  9267.,  9804.,  6701.,
      7162.,  7623.,  8084.,  8164.,  8776.,  9388.,  10000., 11071., 11854.,
      12637., 13420., 12331., 13150., 13969., 14788., 12055., 12910., 13765.,
      14620., 11060., 11784., 12508., 13232., 7885.,  8458.,  9031.,  9604.,
      6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228., 11888., 12979.,
      13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,  10718.,
      11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,  6906.,  7323.,
      7740.,  7644.,  8120.,  8596.,  9072.,  10416., 11040., 11664., 12288.,
      10484., 11208., 11932., 12656., 9252.,  9928.,  10604., 11280., 9044.,
      9672.,  10300., 10928., 8240.,  8736.,  9232.,  9728.,  4956.,  5304.,
      5652.,  6000.,  5771.,  6142.,  6513.,  6884.,  7004.,  7480.,  7956.,
      8432.,  6697.,  7226.,  7755.,  8284.,  6141.,  6602.,  7063.,  7524.,
      6609.,  7002.,  7395.,  7788.,  4812.,  5112.,  5412.,  5712.,  3371.,
      3566.,  3761.,  3956.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,
      10718., 11441., 12164., 12007., 12846., 13685., 14524., 11027., 11838.,
      12649., 13460., 11071., 11854., 12637., 13420., 12059., 12958., 13857.,
      14756., 12103., 12974., 13845., 14716., 12979., 13758., 14537., 15316.,
      10975., 11726., 12477., 13228., 9995.,  10718., 11441., 12164., 10743.,
      11502., 12261., 13020., 11027., 11838., 12649., 13460., 11071., 11854.,
      12637., 13420., 12331., 13150., 13969., 14788., 12103., 12974., 13845.,
      14716., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 10743., 11502., 12261., 13020., 12003.,
      12798., 13593., 14388., 11071., 11854., 12637., 13420., 12331., 13150.,
      13969., 14788., 12055., 12910., 13765., 14620., 12979., 13758., 14537.,
      15316., 10975., 11726., 12477., 13228., 9995.,  10718., 11441., 12164.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912., 15392.,
      19448., 19928., 18680., 16736., 15560., 18658., 20632., 26254., 23158.,
      24478., 17496., 13778., 19850., 25080., 27622., 26254., 23158., 19000.,
      12154., 18674., 25112., 30718., 27622., 26254., 18776., 14946., 15048.,
      19104., 23928., 23640., 18936., 13024., 8712.,  10670., 15720., 18466.,
      19514., 18194., 12264., 7550.,  7558.,  9864.,  13002., 14754., 18874.,
      17288., 13078., 11048., 13024., 19928., 18680., 21848., 21472., 19240.,
      13882., 18232., 23158., 24478., 24070., 20408., 17770., 18658., 20632.,
      26254., 23158., 24478., 17496., 13778., 19850., 25080., 27622., 26254.,
      23158., 19000., 12154., 15592., 20128., 23640., 18936., 16280., 11168.,
      9960.,  13078., 16520., 19514., 18194., 14314., 9096.,  5094.,  6702.,
      10152., 14754., 18874., 19602., 17832., 13118., 9480.,  13536., 18680.,
      21848., 26552., 25888., 19016., 13714., 16664., 24478., 24070., 25710.,
      23832., 20418., 13882., 18232., 23158., 24478., 24070., 20408., 17770.,
      18658., 20632., 26254., 23158., 24478., 17496., 13778., 15816., 18784.,
      18936., 16280., 15480., 13216., 8968.,  13118., 17000., 18194., 14314.,
      11970., 7272.,  6030.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26254., 23158., 24478., 27622., 26254., 23158., 30718., 27622., 26254.,
      23158., 24478., 24070., 26254., 23158., 24478., 27622., 26254., 23158.,
      24478., 24070., 25710., 23158., 24478., 24070., 26254., 23158., 24478.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 21086., 22308., 25800., 27376., 30114., 31996., 26082.,
      27852., 25634., 27164., 17864., 18992., 12222., 12996., 15736., 16720.,
      22688., 24000., 25288., 26864., 24776., 26288., 19656., 20976., 16032.,
      16960., 10104., 10704., 9858.,  10524., 15224., 16208., 19646., 20868.,
      18174., 19380., 16190., 17252., 11896., 12688., 9250.,  9724.,  6498.,
      6860.,  8568.,  9104.,  11422., 12180., 14814., 15684., 18718., 19828.,
      15992., 16976., 11970., 12780., 10872., 11472., 11424., 12224., 16840.,
      17904., 16840., 17968., 21448., 22768., 19104., 20288., 16504., 17488.,
      13342., 14260., 19144., 20272., 21602., 23020., 22178., 23612., 23266.,
      24844., 21960., 23280., 17534., 18644., 18142., 19204., 20168., 21488.,
      25634., 27164., 21602., 23020., 22178., 23612., 17352., 18480., 13886.,
      14756., 19870., 21076., 25288., 26800., 26082., 27852., 25634., 27164.,
      21602., 23020., 17352., 18416., 10750., 11508., 18296., 19344., 21664.,
      22976., 24776., 26288., 19656., 20976., 18632., 19760., 13472., 14272.,
      10104., 10640., 11970., 12780., 17784., 18832., 18174., 19380., 16190.,
      17252., 13182., 14100., 11384., 11984., 6498.,  6860.,  6306.,  6684.,
      10104., 10704., 14814., 15684., 18718., 19828., 20062., 21284., 17528.,
      18576., 13570., 14396., 8824.,  9360.,  12448., 13248., 16840., 17968.,
      21448., 22768., 25032., 26544., 22688., 24000., 15992., 17040., 13662.,
      14436., 15560., 16624., 22178., 23612., 23266., 24844., 28450., 30172.,
      23496., 25008., 18622., 19844., 13342., 14260., 19144., 20272., 21602.,
      23020., 22178., 23612., 23266., 24844., 21960., 23280., 17534., 18644.,
      18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020., 22178.,
      23612., 17352., 18480., 13886., 14756., 16248., 17232., 20128., 21312.,
      19656., 20976., 18632., 19760., 17096., 18160., 14496., 15296., 9592.,
      10192., 13570., 14396., 15736., 16720., 16190., 17252., 13182., 14100.,
      13246., 14020., 9336.,  9872.,  6306.,  6684.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25634., 27164., 21602., 23020., 22178., 23612., 26082., 27852., 25634.,
      27164., 21602., 23020., 30114., 31996., 26082., 27852., 25634., 27164.,
      21602., 23020., 22178., 23612., 23266., 24844., 25634., 27164., 21602.,
      23020., 22178., 23612., 26082., 27852., 25634., 27164., 21602., 23020.,
      22178., 23612., 23266., 24844., 28450., 30172., 21602., 23020., 22178.,
      23612., 23266., 24844., 25634., 27164., 21602., 23020., 22178., 23612.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      3096., 3504., 3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      5160., 5840., 6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200.,
      3702., 4188., 4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840.,
      6520., 7200., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316.,
      4818., 5320., 3926., 4444., 4962., 5480., 5160., 5840., 6520., 7200.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 5160., 5840., 6520., 7200., 3926., 4444., 4962., 5480.,
      3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320., 2154., 2436.,
      2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444., 4962., 5480.,
      3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160., 3096., 3504.,
      3912., 4320., 2154., 2436., 2718., 3000., 2266., 2564., 2862., 3160.,
      3096., 3504., 3912., 4320., 3814., 4316., 4818., 5320., 3702., 4188.,
      4674., 5160., 4038., 4572., 5106., 5640., 3096., 3504., 3912., 4320.,
      2266., 2564., 2862., 3160., 3096., 3504., 3912., 4320., 4128., 4672.,
      5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504.,
      3912., 4320., 4038., 4572., 5106., 5640., 5160., 5840., 6520., 7200.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 5160., 5840., 6520., 7200., 4038., 4572., 5106., 5640.,
      3702., 4188., 4674., 5160., 5160., 5840., 6520., 7200., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      5160., 5840., 6520., 7200., 3702., 4188., 4674., 5160., 3814., 4316.,
      4818., 5320., 5160., 5840., 6520., 7200., 6618., 7492., 8366., 9240.,
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 5160., 5840.,
      6520., 7200., 3814., 4316., 4818., 5320., 3096., 3504., 3912., 4320.,
      4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760.,
      3096., 3504., 3912., 4320., 2266., 2564., 2862., 3160., 3096., 3504.,
      3912., 4320., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      4038., 4572., 5106., 5640., 3096., 3504., 3912., 4320., 2266., 2564.,
      2862., 3160., 2378., 2692., 3006., 3320., 3096., 3504., 3912., 4320.,
      3702., 4188., 4674., 5160., 4038., 4572., 5106., 5640., 3926., 4444.,
      4962., 5480., 3096., 3504., 3912., 4320., 2378., 2692., 3006., 3320.,
      3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200.,
      4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 5160., 5840., 6520., 7200., 6506., 7364., 8222., 9080.,
      6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760., 5160., 5840.,
      6520., 7200., 3926., 4444., 4962., 5480., 4038., 4572., 5106., 5640.,
      5160., 5840., 6520., 7200., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 5160., 5840., 6520., 7200.,
      4038., 4572., 5106., 5640., 3702., 4188., 4674., 5160., 5160., 5840.,
      6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200., 3702., 4188.,
      4674., 5160., 3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320.,
      2378., 2692., 3006., 3320., 3096., 3504., 3912., 4320., 3702., 4188.,
      4674., 5160., 4038., 4572., 5106., 5640., 3926., 4444., 4962., 5480.,
      3096., 3504., 3912., 4320., 2378., 2692., 3006., 3320.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.,
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790.,  8350.,  10940., 13425., 13750.,
      14075., 14400., 11250., 8230.,  5852.,  7596.,  9230.,  9440.,  9650.,
      9860.,  7620.,  5510.,  3648.,  4670.,  5590.,  5710.,  5830.,  5950.,
      4520.,  3207.,  11532., 15098., 18520., 18790., 19060., 19330., 15140.,
      11109., 14468., 18868., 23050., 23360., 23670., 23980., 18700., 13658.,
      16750., 21740., 26425., 26750., 27075., 27400., 21250., 15430., 18430.,
      23900., 29025., 29350., 29675., 30000., 23250., 16870., 20110., 26060.,
      31625., 31950., 32275., 32600., 25250., 18310., 13580., 17452., 20990.,
      21200., 21410., 21620., 16580., 11894., 8184.,  10382., 12310., 12430.,
      12550., 12670., 9560.,  6735.,  11892., 15498., 18920., 19190., 19460.,
      19730., 15380., 11229., 9044.,  11700., 14170., 14480., 14790., 15100.,
      11660., 8426.,  6622.,  8444.,  10065., 10390., 10715., 11040., 8370.,
      5926.,  4846.,  6252.,  7545.,  7870.,  8195.,  8520.,  6530.,  4678.,
      4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  3644.,
      4780.,  5870.,  6080.,  6290.,  6500.,  5060.,  3686.,  2352.,  3038.,
      3670.,  3790.,  3910.,  4030.,  3080.,  2199.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800., 13425.,
      13750., 14075., 14400., 26425., 26750., 27075., 27400., 29025., 29350.,
      29675., 30000., 31625., 31950., 32275., 32600., 10065., 10390., 10715.,
      11040., 7545.,  7870.,  8195.,  8520.,  8225.,  8550.,  8875.,  9200.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500.,
      27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 11248.,
      11704., 14576., 15192., 17680., 18460., 18080., 18880., 18480., 19300.,
      18880., 19720., 14560., 15240., 10504., 11020., 6918.,  7296.,  8830.,
      9340.,  10535., 11180., 10760., 11420., 10985., 11660., 11210., 11900.,
      8482.,  9040.,  5991.,  6414.,  6342.,  6552.,  8406.,  8692.,  10435.,
      10800., 10960., 11340., 11485., 11880., 12010., 12420., 9466.,  9800.,
      6987.,  7242.,  6784.,  7048.,  8960.,  9320.,  11080., 11540., 11680.,
      12160., 12280., 12780., 12880., 13400., 10096., 10520., 7408.,  7732.,
      7814.,  8156.,  10246., 10712., 12575., 13170., 13200., 13820., 13825.,
      14470., 14450., 15120., 11234., 11780., 8171.,  8588.,  9710.,  9980.,
      12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850.,
      18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890.,
      18500., 13115., 13580., 9136.,  9496.,  11888., 12376., 14480., 15100.,
      14880., 15520., 15280., 15940., 15680., 16360., 12128., 12680., 8776.,
      9196.,  5694.,  6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,
      9185.,  9740.,  9410.,  9980.,  7138.,  7600.,  5055.,  5406.,  10782.,
      11112., 14166., 14612., 17435., 18000., 17960., 18540., 18485., 19080.,
      19010., 19620., 14906., 15400., 10947., 11322., 8896.,  9256.,  11648.,
      12136., 14280., 14900., 14880., 15520., 15480., 16140., 16080., 16760.,
      12528., 13080., 9136.,  9556.,  7838.,  8252.,  10182., 10744., 12375.,
      13090., 13000., 13740., 13625., 14390., 14250., 15040., 10978., 11620.,
      7907.,  8396.,  7814.,  8156.,  10246., 10712., 12575., 13170., 13200.,
      13820., 13825., 14470., 14450., 15120., 11234., 11780., 8171.,  8588.,
      9710.,  9980.,  12870., 13240., 15975., 16450., 16600., 17100., 17225.,
      17750., 17850., 18400., 14050., 14500., 10355., 10700., 7024.,  7288.,
      9200.,  9560.,  11280., 11740., 11680., 12160., 12080., 12580., 12480.,
      13000., 9696.,  10120., 7048.,  7372.,  4470.,  4704.,  5758.,  6076.,
      6935.,  7340.,  7160.,  7580.,  7385.,  7820.,  7610.,  8060.,  5794.,
      6160.,  4119.,  4398.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975.,
      21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850.,
      26600., 27500., 27225., 28150., 27850., 28800., 12575., 13170., 13200.,
      13820., 13825., 14470., 14450., 15120., 15975., 16450., 16600., 17100.,
      17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225.,
      22950., 22850., 23600., 12375., 13090., 13000., 13740., 13625., 14390.,
      14250., 15040., 12575., 13170., 13200., 13820., 13825., 14470., 14450.,
      15120., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,
      4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,
      5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,
      4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,
      5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,
      9152.,  9472.,  9792.,  9436.,  9776.,  10116., 10456., 10040., 10400.,
      10760., 11120., 7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,
      6696.,  7630.,  7900.,  8170.,  8440.,  9754.,  10124., 10494., 10864.,
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292.,
      12742., 13192., 8845.,  9190.,  9535.,  9880.,  10918., 11308., 11698.,
      12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452.,
      19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374.,
      21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150.,
      12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262.,
      19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968.,
      24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714.,
      20484., 21254., 22024., 14525., 15110., 15695., 16280., 12440., 12896.,
      13352., 13808., 15608., 16224., 16840., 17456., 21396., 22176., 22956.,
      23736., 21920., 22720., 23520., 24320., 22444., 23264., 24084., 24904.,
      22968., 23808., 24648., 25488., 17880., 18560., 19240., 19920., 13388.,
      13904., 14420., 14936., 13458., 13836., 14214., 14592., 17150., 17660.,
      18170., 18680., 20425., 21070., 21715., 22360., 20860., 21520., 22180.,
      22840., 21295., 21970., 22645., 23320., 21730., 22420., 23110., 23800.,
      16406., 16964., 17522., 18080., 11559., 11982., 12405., 12828., 10170.,
      10380., 10590., 10800., 13198., 13484., 13770., 14056., 16089., 16454.,
      16819., 17184., 16548., 16928., 17308., 17688., 17007., 17402., 17797.,
      18192., 17466., 17876., 18286., 18696., 13542., 13876., 14210., 14544.,
      9879.,  10134., 10389., 10644., 7928.,  8192.,  8456.,  8720.,  10136.,
      10496., 10856., 11216., 12676., 13136., 13596., 14056., 13280., 13760.,
      14240., 14720., 13884., 14384., 14884., 15384., 14488., 15008., 15528.,
      16048., 11128., 11552., 11976., 12400., 8092.,  8416.,  8740.,  9064.,
      6838.,  7180.,  7522.,  7864.,  8506.,  8972.,  9438.,  9904.,  10923.,
      11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866.,
      13511., 14156., 12870., 13540., 14210., 14880., 9698.,  10244., 10790.,
      11336., 6965.,  7382.,  7799.,  8216.,  7630.,  7900.,  8170.,  8440.,
      9754.,  10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884.,
      14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732.,
      16282., 16832., 11842., 12292., 12742., 13192., 8845.,  9190.,  9535.,
      9880.,  10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408.,
      18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725.,
      20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388.,
      16998., 17608., 11685., 12150., 12615., 13080., 9848.,  10208., 10568.,
      10928., 12408., 12896., 13384., 13872., 17204., 17824., 18444., 19064.,
      17728., 18368., 19008., 19648., 18252., 18912., 19572., 20232., 18776.,
      19456., 20136., 20816., 14680., 15232., 15784., 16336., 11052., 11472.,
      11892., 12312., 11082., 11388., 11694., 12000., 14174., 14588., 15002.,
      15416., 16945., 17470., 17995., 18520., 17380., 17920., 18460., 19000.,
      17815., 18370., 18925., 19480., 18250., 18820., 19390., 19960., 13814.,
      14276., 14738., 15200., 9759.,  10110., 10461., 10812., 9714.,  10044.,
      10374., 10704., 12270., 12716., 13162., 13608., 18113., 18678., 19243.,
      19808., 18572., 19152., 19732., 20312., 19031., 19626., 20221., 20816.,
      19490., 20100., 20710., 21320., 15558., 16052., 16546., 17040., 12047.,
      12422., 12797., 13172., 15128., 15488., 15848., 16208., 19480., 19968.,
      20456., 20944., 23524., 24144., 24764., 25384., 24128., 24768., 25408.,
      26048., 24732., 25392., 26052., 26712., 25336., 26016., 26696., 27376.,
      19448., 20000., 20552., 21104., 14012., 14432., 14852., 15272., 9886.,
      10300., 10714., 11128., 12378., 12940., 13502., 14064., 15011., 15726.,
      16441., 17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839.,
      18604., 16958., 17748., 18538., 19328., 12674., 13316., 13958., 14600.,
      8925.,  9414.,  9903.,  10392., 6838.,  7180.,  7522.,  7864.,  8506.,
      8972.,  9438.,  9904.,  10923., 11518., 12113., 12708., 11572., 12192.,
      12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210.,
      14880., 9698.,  10244., 10790., 11336., 6965.,  7382.,  7799.,  8216.,
      7630.,  7900.,  8170.,  8440.,  9754.,  10124., 10494., 10864., 13235.,
      13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058.,
      15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742.,
      13192., 8845.,  9190.,  9535.,  9880.,  7256.,  7520.,  7784.,  8048.,
      9208.,  9568.,  9928.,  10288., 13012., 13472., 13932., 14392., 13536.,
      14016., 14496., 14976., 14060., 14560., 15060., 15560., 14584., 15104.,
      15624., 16144., 11480., 11904., 12328., 12752., 8716.,  9040.,  9364.,
      9688.,  8706.,  8940.,  9174.,  9408.,  11198., 11516., 11834., 12152.,
      13465., 13870., 14275., 14680., 13900., 14320., 14740., 15160., 14335.,
      14770., 15205., 15640., 14770., 15220., 15670., 16120., 11222., 11588.,
      11954., 12320., 7959.,  8238.,  8517.,  8796.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533.,
      15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102.,
      19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175.,
      21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244.,
      24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566.,
      26516., 27466., 28416., 10923., 11518., 12113., 12708., 11572., 12192.,
      12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210.,
      14880., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384.,
      14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427.,
      19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450.,
      21175., 21900., 20374., 21124., 21874., 22624., 15011., 15726., 16441.,
      17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604.,
      16958., 17748., 18538., 19328., 10923., 11518., 12113., 12708., 11572.,
      12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540.,
      14210., 14880., 13235., 13710., 14185., 14660., 13884., 14384., 14884.,
      15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599.,  2340.,  4265.,  5243.,  6221.,  7199.,  6028.,  4913.,  5584.,
      7648.,  9856.,  11144., 12432., 13720., 10912., 8216.,  3839.,  5364.,
      8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121.,
      12519., 13917., 15315., 11980., 8853.,  3839.,  5364.,  8065.,  9463.,
      10861., 12259., 9868.,  7621.,  4648.,  6336.,  8136.,  9264.,  10392.,
      11520., 9088.,  6800.,  2835.,  4020.,  5285.,  6215.,  7145.,  8075.,
      6332.,  4629.,  5199.,  7012.,  8921.,  9899.,  10877., 11855., 9420.,
      7105.,  3664.,  5088.,  7680.,  8968.,  10256., 11544., 9376.,  7320.,
      6479.,  8756.,  11121., 12519., 13917., 15315., 11980., 8853.,  3839.,
      5364.,  8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,
      11121., 12519., 13917., 15315., 11980., 8853.,  3496.,  4800.,  7240.,
      8368.,  9496.,  10624., 8576.,  6672.,  4515.,  6132.,  7765.,  8695.,
      9625.,  10555., 8188.,  5925.,  1599.,  2340.,  4265.,  5243.,  6221.,
      7199.,  6028.,  4913.,  5584.,  7648.,  9856.,  11144., 12432., 13720.,
      10912., 8216.,  3839.,  5364.,  8065.,  9463.,  10861., 12259., 9868.,
      7621.,  6479.,  8756.,  11121., 12519., 13917., 15315., 11980., 8853.,
      3839.,  5364.,  8065.,  9463.,  10861., 12259., 9868.,  7621.,  4648.,
      6336.,  8136.,  9264.,  10392., 11520., 9088.,  6800.,  2835.,  4020.,
      5285.,  6215.,  7145.,  8075.,  6332.,  4629.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8065.,  9463.,  10861., 12259., 11121., 12519., 13917., 15315., 8065.,
      9463.,  10861., 12259., 11121., 12519., 13917., 15315., 8065.,  9463.,
      10861., 12259., 11121., 12519., 13917., 15315., 8065.,  9463.,  10861.,
      12259., 11121., 12519., 13917., 15315., 8065.,  9463.,  10861., 12259.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 12132., 12888., 10293., 10890., 4700.,
      4976.,  6192.,  6592.,  7668.,  8208.,  8820.,  9440.,  9972.,  10672.,
      11124., 11904., 8624.,  9280.,  6684.,  7200.,  2215.,  2374.,  3772.,
      4008.,  5349.,  5674.,  6253.,  6638.,  7157.,  7602.,  8061.,  8566.,
      7020.,  7448.,  6327.,  6666.,  5023.,  5278.,  6908.,  7272.,  8749.,
      9234.,  9749.,  10294., 10749., 11354., 11749., 12414., 10380., 10936.,
      7375.,  7810.,  3404.,  3680.,  5264.,  5664.,  8196.,  8736.,  9540.,
      10160., 10884., 11584., 12228., 13008., 11248., 11904., 9772.,  10288.,
      6869.,  7262.,  9364.,  9928.,  11791., 12546., 13335., 14190., 14879.,
      15834., 16423., 17478., 14180., 15064., 10613., 11306., 3733.,  4030.,
      5780.,  6216.,  8911.,  9506.,  10455., 11150., 11999., 12794., 13543.,
      14438., 12132., 12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478., 14180.,
      15064., 10613., 11306., 3420.,  3696.,  5168.,  5568.,  7924.,  8464.,
      9076.,  9696.,  10228., 10928., 11380., 12160., 9648.,  10304., 8476.,
      8992.,  4455.,  4710.,  5820.,  6184.,  7077.,  7562.,  7981.,  8526.,
      8885.,  9490.,  9789.,  10454., 7532.,  8088.,  5751.,  6186.,  2015.,
      2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,  7162.,
      7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,  7312.,
      7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508., 14288.,
      12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,  8911.,
      9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132., 12888.,
      10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546., 13335.,
      14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613., 11306.,
      3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150., 11999.,
      12794., 13543., 14438., 12132., 12888., 10293., 10890., 4700.,  4976.,
      6192.,  6592.,  7668.,  8208.,  8820.,  9440.,  9972.,  10672., 11124.,
      11904., 8624.,  9280.,  6684.,  7200.,  2215.,  2374.,  3772.,  4008.,
      5349.,  5674.,  6253.,  6638.,  7157.,  7602.,  8061.,  8566.,  7020.,
      7448.,  6327.,  6666.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 11791.,
      12546., 13335., 14190., 14879., 15834., 16423., 17478., 8911.,  9506.,
      10455., 11150., 11999., 12794., 13543., 14438., 11791., 12546., 13335.,
      14190., 14879., 15834., 16423., 17478., 8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 11791., 12546., 13335., 14190., 14879.,
      15834., 16423., 17478., 8911.,  9506.,  10455., 11150., 11999., 12794.,
      13543., 14438., 11791., 12546., 13335., 14190., 14879., 15834., 16423.,
      17478., 8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,
      7856.,  9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540.,
      12296., 13052., 13808., 8981.,  9578.,  10175., 10772., 3908.,  4184.,
      4460.,  4736.,  6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,
      9504.,  9084.,  9704.,  10324., 10944., 10284., 10984., 11684., 12384.,
      11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840., 7508.,
      8024.,  8540.,  9056.,  2127.,  2286.,  2445.,  2604.,  3404.,  3640.,
      3876.,  4112.,  4581.,  4906.,  5231.,  5556.,  5433.,  5818.,  6203.,
      6588.,  6285.,  6730.,  7175.,  7620.,  7137.,  7642.,  8147.,  8652.,
      6476.,  6904.,  7332.,  7760.,  5659.,  5998.,  6337.,  6676.,  3679.,
      3934.,  4189.,  4444.,  5580.,  5944.,  6308.,  6672.,  7157.,  7642.,
      8127.,  8612.,  8073.,  8618.,  9163.,  9708.,  8989.,  9594.,  10199.,
      10804., 9905.,  10570., 11235., 11900., 8396.,  8952.,  9508.,  10064.,
      5899.,  6334.,  6769.,  7204.,  4420.,  4696.,  4972.,  5248.,  6032.,
      6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216.,
      10836., 11456., 10796., 11496., 12196., 12896., 11996., 12776., 13556.,
      14336., 9872.,  10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,
      5761.,  6154.,  6547.,  6940.,  8468.,  9032.,  9596.,  10160., 10667.,
      11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526.,
      15481., 16436., 15023., 16078., 17133., 18188., 13460., 14344., 15228.,
      16112., 9525.,  10218., 10911., 11604., 4705.,  5002.,  5299.,  5596.,
      6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948., 10615.,
      11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519., 14414.,
      15309., 16204., 11540., 12296., 13052., 13808., 8981.,  9578.,  10175.,
      10772., 5761.,  6154.,  6547.,  6940.,  8468.,  9032.,  9596.,  10160.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571.,
      14526., 15481., 16436., 15023., 16078., 17133., 18188., 13460., 14344.,
      15228., 16112., 9525.,  10218., 10911., 11604., 4420.,  4696.,  4972.,
      5248.,  6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016.,
      9596.,  10216., 10836., 11456., 10796., 11496., 12196., 12896., 11996.,
      12776., 13556., 14336., 9872.,  10528., 11184., 11840., 8020.,  8536.,
      9052.,  9568.,  3439.,  3694.,  3949.,  4204.,  5324.,  5688.,  6052.,
      6416.,  6853.,  7338.,  7823.,  8308.,  7705.,  8250.,  8795.,  9340.,
      8557.,  9162.,  9767.,  10372., 9409.,  10074., 10739., 11404., 8396.,
      8952.,  9508.,  10064., 6459.,  6894.,  7329.,  7764.,  2879.,  3038.,
      3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,  5722.,  6047.,
      6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,  8119.,  8564.,
      8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,  7760.,  4587.,
      4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,  6032.,  6432.,
      6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,  9704.,  10324.,
      10944., 10284., 10984., 11684., 12384., 11484., 12264., 13044., 13824.,
      9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,  9056.,  4705.,
      5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,  9163.,  9758.,
      10353., 10948., 10615., 11310., 12005., 12700., 12067., 12862., 13657.,
      14452., 13519., 14414., 15309., 16204., 11540., 12296., 13052., 13808.,
      8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,  6940.,  8468.,
      9032.,  9596.,  10160., 10667., 11422., 12177., 12932., 12119., 12974.,
      13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078., 17133.,
      18188., 13460., 14344., 15228., 16112., 9525.,  10218., 10911., 11604.,
      4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,  9163.,
      9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067., 12862.,
      13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296., 13052.,
      13808., 8981.,  9578.,  10175., 10772., 3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  2127.,  2286.,  2445.,  2604.,  3404.,  3640.,  3876.,  4112.,
      4581.,  4906.,  5231.,  5556.,  5433.,  5818.,  6203.,  6588.,  6285.,
      6730.,  7175.,  7620.,  7137.,  7642.,  8147.,  8652.,  6476.,  6904.,
      7332.,  7760.,  5659.,  5998.,  6337.,  6676.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667., 11422.,
      12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526., 15481.,
      16436., 15023., 16078., 17133., 18188., 9163.,  9758.,  10353., 10948.,
      10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519.,
      14414., 15309., 16204., 10667., 11422., 12177., 12932., 12119., 12974.,
      13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078., 17133.,
      18188., 9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667.,
      11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526.,
      15481., 16436., 15023., 16078., 17133., 18188., 9163.,  9758.,  10353.,
      10948., 10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452.,
      13519., 14414., 15309., 16204., 10667., 11422., 12177., 12932., 12119.,
      12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078.,
      17133., 18188., 9163.,  9758.,  10353., 10948., 10615., 11310., 12005.,
      12700., 12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208.,
      3802., 4242., 4426., 4354., 3592., 3470., 2214., 3720., 3882., 3938.,
      4762., 5330., 3592., 2878., 2712., 4704., 5064., 5608., 6152., 6696.,
      4704., 4344., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 3314., 5816.,
      6590., 6790., 7246., 7958., 6200., 5306., 2712., 4704., 5064., 5608.,
      6152., 6696., 4704., 4344., 1750., 3208., 3802., 4242., 4426., 4354.,
      3592., 3470., 2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878.,
      2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816.,
      6590., 6790., 7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344.,
      1750., 3208., 3802., 4242., 4426., 4354., 3592., 3470.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958., 6590.,
      6790., 7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790.,
      7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790., 7246.,
      7958., 6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608.,
      6408., 7184., 4512., 5056., 4152., 4656., 1858., 2092., 3256., 3664.,
      3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920.,
      2946., 3324., 1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292.,
      4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928.,
      4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184.,
      4512., 5056., 4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448.,
      5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032.,
      5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656., 1858., 2092.,
      3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028.,
      3512., 3920., 2946., 3324., 1858., 2092., 3256., 3664., 3742., 4180.,
      3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324.,
      2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032., 5896., 6608.,
      6408., 7184., 4512., 5056., 4152., 4656., 3166., 3556., 5512., 6192.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448.,
      5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456.,
      5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656.,
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178.,
      6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908., 6498.,
      7308., 7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308., 7330.,
      8220., 7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220., 7650.,
      8620., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,  2826., 3204.,
      3582., 3960.,  2424., 2736.,  3048., 3360.,  4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  3030., 3420.,  3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,
      2424., 2736.,  3048., 3360.,  4128., 4672.,  5216., 5760.,  4488., 5072.,
      5656., 6240.,  4936., 5584.,  6232., 6880.,  5384., 6096.,  6808., 7520.,
      5832., 6608.,  7384., 8160.,  4128., 4672.,  5216., 5760.,  3768., 4272.,
      4776., 5280.,  1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,
      3366., 3804.,  4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,
      5106., 5640.,  4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,
      2826., 3204.,  3582., 3960.,  1818., 2052.,  2286., 2520.,  3096., 3504.,
      3912., 4320.,  3366., 3804.,  4242., 4680.,  3702., 4188.,  4674., 5160.,
      4038., 4572.,  5106., 5640.,  4374., 4956.,  5538., 6120.,  3096., 3504.,
      3912., 4320.,  2826., 3204.,  3582., 3960.,  2424., 2736.,  3048., 3360.,
      4128., 4672.,  5216., 5760.,  4488., 5072.,  5656., 6240.,  4936., 5584.,
      6232., 6880.,  5384., 6096.,  6808., 7520.,  5832., 6608.,  7384., 8160.,
      4128., 4672.,  5216., 5760.,  3768., 4272.,  4776., 5280.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,
      3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,
      5970., 6600.,  3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,
      4710., 5340.,  5970., 6600.,  2424., 2736.,  3048., 3360.,  4128., 4672.,
      5216., 5760.,  4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,
      5384., 6096.,  6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,
      5216., 5760.,  3768., 4272.,  4776., 5280.,  1818., 2052.,  2286., 2520.,
      3096., 3504.,  3912., 4320.,  3366., 3804.,  4242., 4680.,  3702., 4188.,
      4674., 5160.,  4038., 4572.,  5106., 5640.,  4374., 4956.,  5538., 6120.,
      3096., 3504.,  3912., 4320.,  2826., 3204.,  3582., 3960.,  1818., 2052.,
      2286., 2520.,  3096., 3504.,  3912., 4320.,  3366., 3804.,  4242., 4680.,
      3702., 4188.,  4674., 5160.,  4038., 4572.,  5106., 5640.,  4374., 4956.,
      5538., 6120.,  3096., 3504.,  3912., 4320.,  2826., 3204.,  3582., 3960.,
      2424., 2736.,  3048., 3360.,  4128., 4672.,  5216., 5760.,  4488., 5072.,
      5656., 6240.,  4936., 5584.,  6232., 6880.,  5384., 6096.,  6808., 7520.,
      5832., 6608.,  7384., 8160.,  4128., 4672.,  5216., 5760.,  3768., 4272.,
      4776., 5280.,  3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,
      4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,  2424., 2736.,
      3048., 3360.,  4128., 4672.,  5216., 5760.,  4488., 5072.,  5656., 6240.,
      4936., 5584.,  6232., 6880.,  5384., 6096.,  6808., 7520.,  5832., 6608.,
      7384., 8160.,  4128., 4672.,  5216., 5760.,  3768., 4272.,  4776., 5280.,
      1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,  2826., 3204.,
      3582., 3960.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380.,  10325.,
      10650., 8350.,  6130.,  7630.,  10000., 12275., 12600., 9850.,  7210.,
      5288.,  6868.,  8350.,  8560.,  6620.,  4790.,  3264.,  4182.,  5010.,
      5130.,  3900.,  2769.,  9762.,  12798., 14120., 12854., 9532.,  6333.,
      7532.,  9836.,  10750., 9844.,  7252.,  4782.,  5674.,  7348.,  7945.,
      7374.,  5382.,  3522.,  4246.,  5512.,  6055.,  5804.,  4322.,  2938.,
      3778.,  4956.,  5765.,  5834.,  4542.,  3314.,  4270.,  5680.,  7075.,
      7400.,  5850.,  4330.,  3080.,  4052.,  4990.,  5200.,  4060.,  2966.,
      1968.,  2550.,  3090.,  3210.,  2460.,  1761.,  7026.,  9246.,  11400.,
      11670., 9180.,  6765.,  8972.,  11756., 14430., 14740., 11540., 8462.,
      10570., 13780., 16825., 17150., 13350., 9730.,  10230., 12264., 14167.,
      13084., 9090.,  6586.,  7202.,  8508.,  9717.,  8954.,  6110.,  4402.,
      5134.,  6032.,  6867.,  6424.,  4410.,  3178.,  2728.,  3092.,  3422.,
      3184.,  2140.,  1526.,  1120.,  1238.,  1362.,  1354.,  1020.,  753.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6425.,  6750.,  8375.,  8700.,  10325., 10650., 12275., 12600.,
      7945.,  7374.,  6055.,  5804.,  5765.,  5834.,  7075.,  7400.,
      16825., 17150., 14167., 13084., 9717.,  8954.,  6867.,  6424.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      924.,  996.,  1238., 1340., 1769., 1904., 2006., 2156., 1626., 1752.,
      1271., 1370., 1876., 2008., 2464., 2648., 3436., 3676., 3748., 4008.,
      2992., 3208., 2292., 2460., 3074., 3284., 3974., 4264., 5403., 5778.,
      5740., 6140., 4514., 4844., 3397., 3652., 3808., 4076., 4534., 4880.,
      5985., 6414., 5970., 6392., 4514., 4836., 3451., 3700., 3966., 4228.,
      4966., 5304., 6887., 7306., 7192., 7604., 4770., 5084., 3441., 3684.,
      4060., 4316., 4630., 4960., 5293., 5702., 4894., 5296., 3234., 3540.,
      2343., 2580., 2252., 2448., 2480., 2728., 3020., 3324., 2876., 3168.,
      1984., 2200., 1508., 1676., 1674., 1792., 2014., 2156., 2363., 2532.,
      2492., 2644., 1938., 2040., 1425., 1506., 3180., 3396., 4054., 4348.,
      5017., 5360., 4774., 5100., 3674., 3928., 2695., 2874., 3508., 3736.,
      4512., 4824., 6124., 6492., 6276., 6632., 5040., 5320., 3924., 4124.,
      4562., 4820., 5894., 6248., 6283., 6706., 5756., 6172., 4130., 4460.,
      2645., 2884., 3248., 3500., 4150., 4496., 4625., 5038., 4418., 4824.,
      3234., 3556., 2187., 2420., 2894., 3140., 3686., 4024., 4567., 4970.,
      4680., 5076., 3618., 3932., 2689., 2916., 3500., 3740., 4502., 4832.,
      6077., 6502., 6414., 6864., 5026., 5396., 3767., 4052., 3244., 3472.,
      4144., 4456., 5804., 6204., 6076., 6496., 4800., 5144., 3652., 3916.,
      3738., 3936., 4830., 5100., 5835., 6180., 6060., 6420., 4626., 4920.,
      3297., 3522., 924.,  996.,  1238., 1340., 1769., 1904., 2006., 2156.,
      1626., 1752., 1271., 1370., 1876., 2008., 2464., 2648., 3436., 3676.,
      3748., 4008., 2992., 3208., 2292., 2460., 3074., 3284., 3974., 4264.,
      5403., 5778., 5740., 6140., 4514., 4844., 3397., 3652., 3808., 4076.,
      4534., 4880., 5985., 6414., 5970., 6392., 4514., 4836., 3451., 3700.,
      3966., 4228., 4966., 5304., 6887., 7306., 7192., 7604., 4770., 5084.,
      3441., 3684., 4060., 4316., 4630., 4960., 5293., 5702., 4894., 5296.,
      3234., 3540., 2343., 2580., 2252., 2448., 2480., 2728., 3020., 3324.,
      2876., 3168., 1984., 2200., 1508., 1676., 1674., 1792., 2014., 2156.,
      2363., 2532., 2492., 2644., 1938., 2040., 1425., 1506.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5403., 5778., 5740., 6140., 5985., 6414., 5970., 6392., 6887., 7306.,
      7192., 7604., 5293., 5702., 4894., 5296., 6283., 6706., 5756., 6172.,
      4625., 5038., 4418., 4824., 4567., 4970., 4680., 5076., 6077., 6502.,
      6414., 6864., 5403., 5778., 5740., 6140., 5985., 6414., 5970., 6392.,
      6887., 7306., 7192., 7604., 5293., 5702., 4894., 5296.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1104., 1176., 1248., 1320., 1542., 1644., 1746., 1848., 2155., 2290.,
      2425., 2560., 2390., 2540., 2690., 2840., 2262., 2388., 2514., 2640.,
      1643., 1742., 1841., 1940., 2020., 2152., 2284., 2416., 2728., 2912.,
      3096., 3280., 3752., 3992., 4232., 4472., 4068., 4328., 4588., 4848.,
      3752., 3968., 4184., 4400., 2848., 3016., 3184., 3352., 3186., 3396.,
      3606., 3816., 4298., 4588., 4878., 5168., 5823., 6198., 6573., 6948.,
      6184., 6584., 6984., 7384., 5530., 5860., 6190., 6520., 4203., 4458.,
      4713., 4968., 4468., 4736., 5004., 5272., 5042., 5388., 5734., 6080.,
      6229., 6658., 7087., 7516., 5918., 6340., 6762., 7184., 4386., 4708.,
      5030., 5352., 3549., 3798., 4047., 4296., 3638., 3900., 4162., 4424.,
      4570., 4908., 5246., 5584., 6315., 6734., 7153., 7572., 6644., 7056.,
      7468., 7880., 4778., 5092., 5406., 5720., 3791., 4034., 4277., 4520.,
      3704., 3960., 4216., 4472., 4610., 4940., 5270., 5600., 5505., 5914.,
      6323., 6732., 5450., 5852., 6254., 6656., 4658., 4964., 5270., 5576.,
      3905., 4142., 4379., 4616., 2676., 2872., 3068., 3264., 3784., 4032.,
      4280., 4528., 4104., 4408., 4712., 5016., 3572., 3864., 4156., 4448.,
      2120., 2336., 2552., 2768., 1536., 1704., 1872., 2040., 1662., 1780.,
      1898., 2016., 1806., 1948., 2090., 2232., 1933., 2102., 2271., 2440.,
      1984., 2136., 2288., 2440., 1598., 1700., 1802., 1904., 1329., 1410.,
      1491., 1572., 3424., 3640., 3856., 4072., 4422., 4716., 5010., 5304.,
      5883., 6226., 6569., 6912., 5190., 5516., 5842., 6168., 3670., 3924.,
      4178., 4432., 2363., 2542., 2721., 2900., 3140., 3368., 3596., 3824.,
      4136., 4448., 4760., 5072., 5416., 5784., 6152., 6520., 5444., 5800.,
      6156., 6512., 4712., 4992., 5272., 5552., 4032., 4232., 4432., 4632.,
      4066., 4324., 4582., 4840., 5514., 5868., 6222., 6576., 5999., 6422.,
      6845., 7268., 5688., 6104., 6520., 6936., 4762., 5092., 5422., 5752.,
      3739., 3978., 4217., 4456., 3364., 3616., 3868., 4120., 4786., 5132.,
      5478., 5824., 6085., 6498., 6911., 7324., 6414., 6820., 7226., 7632.,
      4898., 5220., 5542., 5864., 3085., 3318., 3551., 3784., 3558., 3804.,
      4050., 4296., 4570., 4908., 5246., 5584., 5275., 5678., 6081., 6484.,
      5220., 5616., 6012., 6408., 4522., 4836., 5150., 5464., 3327., 3554.,
      3781., 4008., 3624., 3864., 4104., 4344., 4866., 5196., 5526., 5856.,
      6545., 6970., 7395., 7820., 6906., 7356., 7806., 8256., 6130., 6500.,
      6870., 7240., 4657., 4942., 5227., 5512., 3092., 3320., 3548., 3776.,
      3976., 4288., 4600., 4912., 5480., 5880., 6280., 6680., 5748., 6168.,
      6588., 7008., 4552., 4896., 5240., 5584., 3680., 3944., 4208., 4472.,
      3150., 3348., 3546., 3744., 4238., 4508., 4778., 5048., 5117., 5462.,
      5807., 6152., 5328., 5688., 6048., 6408., 4222., 4516., 4810., 5104.,
      3393., 3618., 3843., 4068., 1104., 1176., 1248., 1320., 1542., 1644.,
      1746., 1848., 2155., 2290., 2425., 2560., 2390., 2540., 2690., 2840.,
      2262., 2388., 2514., 2640., 1643., 1742., 1841., 1940., 2020., 2152.,
      2284., 2416., 2728., 2912., 3096., 3280., 3752., 3992., 4232., 4472.,
      4068., 4328., 4588., 4848., 3752., 3968., 4184., 4400., 2848., 3016.,
      3184., 3352., 3186., 3396., 3606., 3816., 4298., 4588., 4878., 5168.,
      5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384., 5530., 5860.,
      6190., 6520., 4203., 4458., 4713., 4968., 4468., 4736., 5004., 5272.,
      5042., 5388., 5734., 6080., 6229., 6658., 7087., 7516., 5918., 6340.,
      6762., 7184., 4386., 4708., 5030., 5352., 3549., 3798., 4047., 4296.,
      3638., 3900., 4162., 4424., 4570., 4908., 5246., 5584., 6315., 6734.,
      7153., 7572., 6644., 7056., 7468., 7880., 4778., 5092., 5406., 5720.,
      3791., 4034., 4277., 4520., 3704., 3960., 4216., 4472., 4610., 4940.,
      5270., 5600., 5505., 5914., 6323., 6732., 5450., 5852., 6254., 6656.,
      4658., 4964., 5270., 5576., 3905., 4142., 4379., 4616., 2676., 2872.,
      3068., 3264., 3784., 4032., 4280., 4528., 4104., 4408., 4712., 5016.,
      3572., 3864., 4156., 4448., 2120., 2336., 2552., 2768., 1536., 1704.,
      1872., 2040., 1662., 1780., 1898., 2016., 1806., 1948., 2090., 2232.,
      1933., 2102., 2271., 2440., 1984., 2136., 2288., 2440., 1598., 1700.,
      1802., 1904., 1329., 1410., 1491., 1572.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5823., 6198., 6573., 6948., 6184., 6584., 6984., 7384., 6229., 6658.,
      7087., 7516., 5918., 6340., 6762., 7184., 6315., 6734., 7153., 7572.,
      6644., 7056., 7468., 7880., 5505., 5914., 6323., 6732., 5450., 5852.,
      6254., 6656., 5999., 6422., 6845., 7268., 5688., 6104., 6520., 6936.,
      6085., 6498., 6911., 7324., 6414., 6820., 7226., 7632., 5275., 5678.,
      6081., 6484., 5220., 5616., 6012., 6408., 6545., 6970., 7395., 7820.,
      6906., 7356., 7806., 8256., 5823., 6198., 6573., 6948., 6184., 6584.,
      6984., 7384., 6229., 6658., 7087., 7516., 5918., 6340., 6762., 7184.,
      6315., 6734., 7153., 7572., 6644., 7056., 7468., 7880., 5505., 5914.,
      6323., 6732., 5450., 5852., 6254., 6656.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3699.,  4980.,  5989.,  5975.,  4716.,  3545.,  4600.,  6272.,  9112.,
      10048., 8384.,  6800.,  8471.,  11348., 12649., 12287., 9180.,  6233.,
      7363.,  9028.,  10541., 10083., 7372.,  5413.,  6959.,  8948.,  12209.,
      13031., 8636.,  6385.,  8347.,  9892.,  12053., 11947., 8428.,  6397.,
      5680.,  6688.,  9056.,  9320.,  7008.,  5544.,  5947.,  7572.,  9245.,
      9951.,  7788.,  5745.,  3699.,  4980.,  5989.,  5975.,  4716.,  3545.,
      4600.,  6272.,  9112.,  10048., 8384.,  6800.,  8471.,  11348., 12649.,
      12287., 9180.,  6233.,  7363.,  9028.,  10541., 10083., 7372.,  5413.,
      6959.,  8948.,  12209., 13031., 8636.,  6385.,  8347.,  9892.,  12053.,
      11947., 8428.,  6397.,  5680.,  6688.,  9056.,  9320.,  7008.,  5544.,
      5947.,  7572.,  9245.,  9951.,  7788.,  5745.,  3699.,  4980.,  5989.,
      5975.,  4716.,  3545.,  4600.,  6272.,  9112.,  10048., 8384.,  6800.,
      8471.,  11348., 12649., 12287., 9180.,  6233.,  7363.,  9028.,  10541.,
      10083., 7372.,  5413.,  6959.,  8948.,  12209., 13031., 8636.,  6385.,
      8347.,  9892.,  12053., 11947., 8428.,  6397.,  5680.,  6688.,  9056.,
      9320.,  7008.,  5544.,  5947.,  7572.,  9245.,  9951.,  7788.,  5745.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12649., 12287., 10541., 10083., 12209., 13031., 12053., 11947.,
      12649., 12287., 10541., 10083., 12209., 13031., 12053., 11947.,
      12649., 12287., 10541., 10083., 12209., 13031., 12053., 11947.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4559.,  4838.,  6396.,  6792.,  8797.,  9258.,  7877.,  8334.,  5772.,
      6136.,  3759.,  4018.,  4716.,  5040.,  6288.,  6752.,  8484.,  9040.,
      9188.,  9760.,  8432.,  8896.,  7116.,  7456.,  7733.,  8174.,  10900.,
      11528., 12527., 13298., 12663., 13470., 11364., 12024., 8901.,  9394.,
      8997.,  9542.,  11028., 11752., 13599., 14458., 13607., 14438., 9316.,
      9944.,  6261.,  6730.,  7701.,  8222.,  9620.,  10312., 12111., 12930.,
      12631., 13422., 9316.,  9912.,  7205.,  7650.,  7941.,  8438.,  10260.,
      10920., 13055., 13898., 13703., 14582., 12388., 13080., 10197., 10746.,
      6588.,  7040.,  9264.,  9856.,  11092., 11840., 10580., 11344., 7088.,
      7680.,  5500.,  5968.,  5447.,  5782.,  6588.,  7016.,  7685.,  8218.,
      8205.,  8734.,  6636.,  7032.,  5511.,  5826.,  4559.,  4838.,  6396.,
      6792.,  8797.,  9258.,  7877.,  8334.,  5772.,  6136.,  3759.,  4018.,
      4716.,  5040.,  6288.,  6752.,  8484.,  9040.,  9188.,  9760.,  8432.,
      8896.,  7116.,  7456.,  7733.,  8174.,  10900., 11528., 12527., 13298.,
      12663., 13470., 11364., 12024., 8901.,  9394.,  8997.,  9542.,  11028.,
      11752., 13599., 14458., 13607., 14438., 9316.,  9944.,  6261.,  6730.,
      7701.,  8222.,  9620.,  10312., 12111., 12930., 12631., 13422., 9316.,
      9912.,  7205.,  7650.,  7941.,  8438.,  10260., 10920., 13055., 13898.,
      13703., 14582., 12388., 13080., 10197., 10746., 6588.,  7040.,  9264.,
      9856.,  11092., 11840., 10580., 11344., 7088.,  7680.,  5500.,  5968.,
      5447.,  5782.,  6588.,  7016.,  7685.,  8218.,  8205.,  8734.,  6636.,
      7032.,  5511.,  5826.,  4559.,  4838.,  6396.,  6792.,  8797.,  9258.,
      7877.,  8334.,  5772.,  6136.,  3759.,  4018.,  4716.,  5040.,  6288.,
      6752.,  8484.,  9040.,  9188.,  9760.,  8432.,  8896.,  7116.,  7456.,
      7733.,  8174.,  10900., 11528., 12527., 13298., 12663., 13470., 11364.,
      12024., 8901.,  9394.,  8997.,  9542.,  11028., 11752., 13599., 14458.,
      13607., 14438., 9316.,  9944.,  6261.,  6730.,  7701.,  8222.,  9620.,
      10312., 12111., 12930., 12631., 13422., 9316.,  9912.,  7205.,  7650.,
      7941.,  8438.,  10260., 10920., 13055., 13898., 13703., 14582., 12388.,
      13080., 10197., 10746., 6588.,  7040.,  9264.,  9856.,  11092., 11840.,
      10580., 11344., 7088.,  7680.,  5500.,  5968.,  5447.,  5782.,  6588.,
      7016.,  7685.,  8218.,  8205.,  8734.,  6636.,  7032.,  5511.,  5826.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438.,
      12111., 12930., 12631., 13422., 13055., 13898., 13703., 14582.,
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438.,
      12111., 12930., 12631., 13422., 13055., 13898., 13703., 14582.,
      12527., 13298., 12663., 13470., 13599., 14458., 13607., 14438.,
      12111., 12930., 12631., 13422., 13055., 13898., 13703., 14582.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775.,  5054.,  5333.,  5612.,  6060.,  6456.,  6852.,  7248.,  7533.,
      7994.,  8455.,  8916.,  6721.,  7178.,  7635.,  8092.,  4492.,  4856.,
      5220.,  5584.,  2939.,  3198.,  3457.,  3716.,  5204.,  5528.,  5852.,
      6176.,  6992.,  7456.,  7920.,  8384.,  8188.,  8744.,  9300.,  9856.,
      8172.,  8744.,  9316.,  9888.,  6992.,  7456.,  7920.,  8384.,  5956.,
      6296.,  6636.,  6976.,  6161.,  6602.,  7043.,  7484.,  9428.,  10056.,
      10684., 11312., 11099., 11870., 12641., 13412., 11847., 12654., 13461.,
      14268., 11124., 11784., 12444., 13104., 7325.,  7818.,  8311.,  8804.,
      9353.,  9898.,  10443., 10988., 10868., 11592., 12316., 13040., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 9620.,  10248.,
      10876., 11504., 6165.,  6634.,  7103.,  7572.,  7553.,  8074.,  8595.,
      9116.,  9364.,  10056., 10748., 11440., 12267., 13086., 13905., 14724.,
      11799., 12590., 13381., 14172., 8116.,  8712.,  9308.,  9904.,  6029.,
      6474.,  6919.,  7364.,  6777.,  7274.,  7771.,  8268.,  9908.,  10568.,
      11228., 11888., 13107., 13950., 14793., 15636., 12831., 13710., 14589.,
      15468., 10580., 11272., 11964., 12656., 7813.,  8362.,  8911.,  9460.,
      7252.,  7704.,  8156.,  8608.,  9936.,  10528., 11120., 11712., 11452.,
      12200., 12948., 13696., 11436., 12200., 12964., 13728., 8912.,  9504.,
      10096., 10688., 6468.,  6936.,  7404.,  7872.,  5343.,  5678.,  6013.,
      6348.,  6284.,  6712.,  7140.,  7568.,  6997.,  7530.,  8063.,  8596.,
      7145.,  7674.,  8203.,  8732.,  5996.,  6392.,  6788.,  7184.,  5331.,
      5646.,  5961.,  6276.,  4775.,  5054.,  5333.,  5612.,  6060.,  6456.,
      6852.,  7248.,  7533.,  7994.,  8455.,  8916.,  6721.,  7178.,  7635.,
      8092.,  4492.,  4856.,  5220.,  5584.,  2939.,  3198.,  3457.,  3716.,
      5204.,  5528.,  5852.,  6176.,  6992.,  7456.,  7920.,  8384.,  8188.,
      8744.,  9300.,  9856.,  8172.,  8744.,  9316.,  9888.,  6992.,  7456.,
      7920.,  8384.,  5956.,  6296.,  6636.,  6976.,  6161.,  6602.,  7043.,
      7484.,  9428.,  10056., 10684., 11312., 11099., 11870., 12641., 13412.,
      11847., 12654., 13461., 14268., 11124., 11784., 12444., 13104., 7325.,
      7818.,  8311.,  8804.,  9353.,  9898.,  10443., 10988., 10868., 11592.,
      12316., 13040., 12131., 12990., 13849., 14708., 12687., 13518., 14349.,
      15180., 9620.,  10248., 10876., 11504., 6165.,  6634.,  7103.,  7572.,
      7553.,  8074.,  8595.,  9116.,  9364.,  10056., 10748., 11440., 12267.,
      13086., 13905., 14724., 11799., 12590., 13381., 14172., 8116.,  8712.,
      9308.,  9904.,  6029.,  6474.,  6919.,  7364.,  6777.,  7274.,  7771.,
      8268.,  9908.,  10568., 11228., 11888., 13107., 13950., 14793., 15636.,
      12831., 13710., 14589., 15468., 10580., 11272., 11964., 12656., 7813.,
      8362.,  8911.,  9460.,  7252.,  7704.,  8156.,  8608.,  9936.,  10528.,
      11120., 11712., 11452., 12200., 12948., 13696., 11436., 12200., 12964.,
      13728., 8912.,  9504.,  10096., 10688., 6468.,  6936.,  7404.,  7872.,
      5343.,  5678.,  6013.,  6348.,  6284.,  6712.,  7140.,  7568.,  6997.,
      7530.,  8063.,  8596.,  7145.,  7674.,  8203.,  8732.,  5996.,  6392.,
      6788.,  7184.,  5331.,  5646.,  5961.,  6276.,  4775.,  5054.,  5333.,
      5612.,  6060.,  6456.,  6852.,  7248.,  7533.,  7994.,  8455.,  8916.,
      6721.,  7178.,  7635.,  8092.,  4492.,  4856.,  5220.,  5584.,  2939.,
      3198.,  3457.,  3716.,  5204.,  5528.,  5852.,  6176.,  6992.,  7456.,
      7920.,  8384.,  8188.,  8744.,  9300.,  9856.,  8172.,  8744.,  9316.,
      9888.,  6992.,  7456.,  7920.,  8384.,  5956.,  6296.,  6636.,  6976.,
      6161.,  6602.,  7043.,  7484.,  9428.,  10056., 10684., 11312., 11099.,
      11870., 12641., 13412., 11847., 12654., 13461., 14268., 11124., 11784.,
      12444., 13104., 7325.,  7818.,  8311.,  8804.,  9353.,  9898.,  10443.,
      10988., 10868., 11592., 12316., 13040., 12131., 12990., 13849., 14708.,
      12687., 13518., 14349., 15180., 9620.,  10248., 10876., 11504., 6165.,
      6634.,  7103.,  7572.,  7553.,  8074.,  8595.,  9116.,  9364.,  10056.,
      10748., 11440., 12267., 13086., 13905., 14724., 11799., 12590., 13381.,
      14172., 8116.,  8712.,  9308.,  9904.,  6029.,  6474.,  6919.,  7364.,
      6777.,  7274.,  7771.,  8268.,  9908.,  10568., 11228., 11888., 13107.,
      13950., 14793., 15636., 12831., 13710., 14589., 15468., 10580., 11272.,
      11964., 12656., 7813.,  8362.,  8911.,  9460.,  7252.,  7704.,  8156.,
      8608.,  9936.,  10528., 11120., 11712., 11452., 12200., 12948., 13696.,
      11436., 12200., 12964., 13728., 8912.,  9504.,  10096., 10688., 6468.,
      6936.,  7404.,  7872.,  5343.,  5678.,  6013.,  6348.,  6284.,  6712.,
      7140.,  7568.,  6997.,  7530.,  8063.,  8596.,  7145.,  7674.,  8203.,
      8732.,  5996.,  6392.,  6788.,  7184.,  5331.,  5646.,  5961.,  6276.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268., 12131.,
      12990., 13849., 14708., 12687., 13518., 14349., 15180., 12267., 13086.,
      13905., 14724., 11799., 12590., 13381., 14172., 13107., 13950., 14793.,
      15636., 12831., 13710., 14589., 15468., 11099., 11870., 12641., 13412.,
      11847., 12654., 13461., 14268., 12131., 12990., 13849., 14708., 12687.,
      13518., 14349., 15180., 12267., 13086., 13905., 14724., 11799., 12590.,
      13381., 14172., 13107., 13950., 14793., 15636., 12831., 13710., 14589.,
      15468., 11099., 11870., 12641., 13412., 11847., 12654., 13461., 14268.,
      12131., 12990., 13849., 14708., 12687., 13518., 14349., 15180., 12267.,
      13086., 13905., 14724., 11799., 12590., 13381., 14172., 13107., 13950.,
      14793., 15636., 12831., 13710., 14589., 15468.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9014.,  12296., 19034., 18930., 11752., 7838.,  11704., 14944., 19336.,
      21672., 21408., 19224., 14258., 22104., 24510., 24614., 19896., 15946.,
      17858., 21656., 25774., 28118., 20856., 15066., 14994., 21208., 28574.,
      28870., 20920., 17066., 14370., 18584., 23886., 27062., 25080., 21434.,
      13080., 19744., 20648., 19144., 13088., 10808., 10326., 14152., 17530.,
      20114., 14312., 9534.,  9014.,  12296., 19034., 18930., 11752., 7838.,
      11704., 14944., 19336., 21672., 21408., 19224., 14258., 22104., 24510.,
      24614., 19896., 15946., 17858., 21656., 25774., 28118., 20856., 15066.,
      14994., 21208., 28574., 28870., 20920., 17066., 14370., 18584., 23886.,
      27062., 25080., 21434., 13080., 19744., 20648., 19144., 13088., 10808.,
      10326., 14152., 17530., 20114., 14312., 9534.,  9014.,  12296., 19034.,
      18930., 11752., 7838.,  11704., 14944., 19336., 21672., 21408., 19224.,
      14258., 22104., 24510., 24614., 19896., 15946., 17858., 21656., 25774.,
      28118., 20856., 15066., 14994., 21208., 28574., 28870., 20920., 17066.,
      14370., 18584., 23886., 27062., 25080., 21434., 13080., 19744., 20648.,
      19144., 13088., 10808., 10326., 14152., 17530., 20114., 14312., 9534.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24510., 24614., 25774., 28118., 28574., 28870., 23886., 27062.,
      24510., 24614., 25774., 28118., 28574., 28870., 23886., 27062.,
      24510., 24614., 25774., 28118., 28574., 28870., 23886., 27062.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9698.,  10284., 11128., 11920., 15646., 16564., 15454., 16356., 8824.,
      9488.,  6402.,  6908.,  11512., 12272., 17056., 18112., 21576., 22864.,
      20552., 21904., 17056., 18112., 14584., 15408., 13150., 13988., 21192.,
      22384., 24226., 25724., 26338., 27980., 24008., 25328., 15998., 17044.,
      19166., 20164., 21192., 22512., 22562., 24156., 25186., 26796., 19912.,
      21104., 14334., 15284., 16478., 17508., 21192., 22640., 28066., 29756.,
      26594., 28300., 17864., 19184., 14206., 15188., 14302., 15236., 21192.,
      22512., 26914., 28572., 26978., 28780., 24008., 25456., 18686., 19828.,
      12024., 12784., 19104., 20160., 21064., 22352., 22088., 23440., 19104.,
      20160., 13048., 13872., 11714., 12396., 14200., 15120., 15358., 16436.,
      16958., 18020., 12920., 13712., 9506.,  10108., 9698.,  10284., 11128.,
      11920., 15646., 16564., 15454., 16356., 8824.,  9488.,  6402.,  6908.,
      11512., 12272., 17056., 18112., 21576., 22864., 20552., 21904., 17056.,
      18112., 14584., 15408., 13150., 13988., 21192., 22384., 24226., 25724.,
      26338., 27980., 24008., 25328., 15998., 17044., 19166., 20164., 21192.,
      22512., 22562., 24156., 25186., 26796., 19912., 21104., 14334., 15284.,
      16478., 17508., 21192., 22640., 28066., 29756., 26594., 28300., 17864.,
      19184., 14206., 15188., 14302., 15236., 21192., 22512., 26914., 28572.,
      26978., 28780., 24008., 25456., 18686., 19828., 12024., 12784., 19104.,
      20160., 21064., 22352., 22088., 23440., 19104., 20160., 13048., 13872.,
      11714., 12396., 14200., 15120., 15358., 16436., 16958., 18020., 12920.,
      13712., 9506.,  10108., 9698.,  10284., 11128., 11920., 15646., 16564.,
      15454., 16356., 8824.,  9488.,  6402.,  6908.,  11512., 12272., 17056.,
      18112., 21576., 22864., 20552., 21904., 17056., 18112., 14584., 15408.,
      13150., 13988., 21192., 22384., 24226., 25724., 26338., 27980., 24008.,
      25328., 15998., 17044., 19166., 20164., 21192., 22512., 22562., 24156.,
      25186., 26796., 19912., 21104., 14334., 15284., 16478., 17508., 21192.,
      22640., 28066., 29756., 26594., 28300., 17864., 19184., 14206., 15188.,
      14302., 15236., 21192., 22512., 26914., 28572., 26978., 28780., 24008.,
      25456., 18686., 19828., 12024., 12784., 19104., 20160., 21064., 22352.,
      22088., 23440., 19104., 20160., 13048., 13872., 11714., 12396., 14200.,
      15120., 15358., 16436., 16958., 18020., 12920., 13712., 9506.,  10108.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.,
      28066., 29756., 26594., 28300., 26914., 28572., 26978., 28780.,
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.,
      28066., 29756., 26594., 28300., 26914., 28572., 26978., 28780.,
      24226., 25724., 26338., 27980., 22562., 24156., 25186., 26796.,
      28066., 29756., 26594., 28300., 26914., 28572., 26978., 28780.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7994.,  8580.,  9166.,  9752.,  11864., 12656., 13448., 14240., 13990.,
      14908., 15826., 16744., 13622., 14524., 15426., 16328., 10456., 11120.,
      11784., 12448., 6410.,  6916.,  7422.,  7928.,  12152., 12912., 13672.,
      14432., 16160., 17216., 18272., 19328., 19208., 20496., 21784., 23072.,
      20168., 21520., 22872., 24224., 16160., 17216., 18272., 19328., 13112.,
      13936., 14760., 15584., 12150., 12988., 13826., 14664., 18024., 19216.,
      20408., 21600., 23146., 24644., 26142., 27640., 25178., 26820., 28462.,
      30104., 20456., 21776., 23096., 24416., 14886., 15932., 16978., 18024.,
      15830., 16828., 17826., 18824., 19944., 21264., 22584., 23904., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 18536., 19728.,
      20920., 22112., 14726., 15676., 16626., 17576., 14518., 15548., 16578.,
      17608., 21864., 23312., 24760., 26208., 26538., 28228., 29918., 31608.,
      25626., 27332., 29038., 30744., 20456., 21776., 23096., 24416., 13414.,
      14396., 15378., 16360., 14358., 15292., 16226., 17160., 19944., 21264.,
      22584., 23904., 24266., 25924., 27582., 29240., 26298., 28100., 29902.,
      31704., 22376., 23824., 25272., 26720., 17094., 18236., 19378., 20520.,
      11128., 11888., 12648., 13408., 16160., 17216., 18272., 19328., 20232.,
      21520., 22808., 24096., 21192., 22544., 23896., 25248., 16160., 17216.,
      18272., 19328., 12088., 12912., 13736., 14560., 10714., 11396., 12078.,
      12760., 13784., 14704., 15624., 16544., 15622., 16700., 17778., 18856.,
      15254., 16316., 17378., 18440., 12376., 13168., 13960., 14752., 9130.,
      9732.,  10334., 10936., 7994.,  8580.,  9166.,  9752.,  11864., 12656.,
      13448., 14240., 13990., 14908., 15826., 16744., 13622., 14524., 15426.,
      16328., 10456., 11120., 11784., 12448., 6410.,  6916.,  7422.,  7928.,
      12152., 12912., 13672., 14432., 16160., 17216., 18272., 19328., 19208.,
      20496., 21784., 23072., 20168., 21520., 22872., 24224., 16160., 17216.,
      18272., 19328., 13112., 13936., 14760., 15584., 12150., 12988., 13826.,
      14664., 18024., 19216., 20408., 21600., 23146., 24644., 26142., 27640.,
      25178., 26820., 28462., 30104., 20456., 21776., 23096., 24416., 14886.,
      15932., 16978., 18024., 15830., 16828., 17826., 18824., 19944., 21264.,
      22584., 23904., 23818., 25412., 27006., 28600., 22906., 24516., 26126.,
      27736., 18536., 19728., 20920., 22112., 14726., 15676., 16626., 17576.,
      14518., 15548., 16578., 17608., 21864., 23312., 24760., 26208., 26538.,
      28228., 29918., 31608., 25626., 27332., 29038., 30744., 20456., 21776.,
      23096., 24416., 13414., 14396., 15378., 16360., 14358., 15292., 16226.,
      17160., 19944., 21264., 22584., 23904., 24266., 25924., 27582., 29240.,
      26298., 28100., 29902., 31704., 22376., 23824., 25272., 26720., 17094.,
      18236., 19378., 20520., 11128., 11888., 12648., 13408., 16160., 17216.,
      18272., 19328., 20232., 21520., 22808., 24096., 21192., 22544., 23896.,
      25248., 16160., 17216., 18272., 19328., 12088., 12912., 13736., 14560.,
      10714., 11396., 12078., 12760., 13784., 14704., 15624., 16544., 15622.,
      16700., 17778., 18856., 15254., 16316., 17378., 18440., 12376., 13168.,
      13960., 14752., 9130.,  9732.,  10334., 10936., 7994.,  8580.,  9166.,
      9752.,  11864., 12656., 13448., 14240., 13990., 14908., 15826., 16744.,
      13622., 14524., 15426., 16328., 10456., 11120., 11784., 12448., 6410.,
      6916.,  7422.,  7928.,  12152., 12912., 13672., 14432., 16160., 17216.,
      18272., 19328., 19208., 20496., 21784., 23072., 20168., 21520., 22872.,
      24224., 16160., 17216., 18272., 19328., 13112., 13936., 14760., 15584.,
      12150., 12988., 13826., 14664., 18024., 19216., 20408., 21600., 23146.,
      24644., 26142., 27640., 25178., 26820., 28462., 30104., 20456., 21776.,
      23096., 24416., 14886., 15932., 16978., 18024., 15830., 16828., 17826.,
      18824., 19944., 21264., 22584., 23904., 23818., 25412., 27006., 28600.,
      22906., 24516., 26126., 27736., 18536., 19728., 20920., 22112., 14726.,
      15676., 16626., 17576., 14518., 15548., 16578., 17608., 21864., 23312.,
      24760., 26208., 26538., 28228., 29918., 31608., 25626., 27332., 29038.,
      30744., 20456., 21776., 23096., 24416., 13414., 14396., 15378., 16360.,
      14358., 15292., 16226., 17160., 19944., 21264., 22584., 23904., 24266.,
      25924., 27582., 29240., 26298., 28100., 29902., 31704., 22376., 23824.,
      25272., 26720., 17094., 18236., 19378., 20520., 11128., 11888., 12648.,
      13408., 16160., 17216., 18272., 19328., 20232., 21520., 22808., 24096.,
      21192., 22544., 23896., 25248., 16160., 17216., 18272., 19328., 12088.,
      12912., 13736., 14560., 10714., 11396., 12078., 12760., 13784., 14704.,
      15624., 16544., 15622., 16700., 17778., 18856., 15254., 16316., 17378.,
      18440., 12376., 13168., 13960., 14752., 9130.,  9732.,  10334., 10936.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104., 23818.,
      25412., 27006., 28600., 22906., 24516., 26126., 27736., 26538., 28228.,
      29918., 31608., 25626., 27332., 29038., 30744., 24266., 25924., 27582.,
      29240., 26298., 28100., 29902., 31704., 23146., 24644., 26142., 27640.,
      25178., 26820., 28462., 30104., 23818., 25412., 27006., 28600., 22906.,
      24516., 26126., 27736., 26538., 28228., 29918., 31608., 25626., 27332.,
      29038., 30744., 24266., 25924., 27582., 29240., 26298., 28100., 29902.,
      31704., 23146., 24644., 26142., 27640., 25178., 26820., 28462., 30104.,
      23818., 25412., 27006., 28600., 22906., 24516., 26126., 27736., 26538.,
      28228., 29918., 31608., 25626., 27332., 29038., 30744., 24266., 25924.,
      27582., 29240., 26298., 28100., 29902., 31704.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  7360.,  9660.,  11875., 12200., 12525., 9800.,  7180.,  8830.,
      11550., 14150., 14475., 14800., 11550., 8440.,  6122.,  7936.,  9630.,
      9840.,  10050., 7760.,  5606.,  3780.,  4834.,  5780.,  5900.,  6020.,
      4570.,  3240.,  4227.,  5172.,  6104.,  5350.,  5620.,  4440.,  3285.,
      3984.,  4944.,  5884.,  5490.,  5800.,  4560.,  3356.,  4020.,  5064.,
      6069.,  6010.,  6335.,  4940.,  3604.,  4402.,  5738.,  7064.,  7325.,
      7650.,  6050.,  4480.,  5680.,  7500.,  9275.,  9600.,  9925.,  7800.,
      5740.,  7150.,  9390.,  11550., 11875., 12200., 9550.,  7000.,  5018.,
      6528.,  7950.,  8160.,  8370.,  6480.,  4694.,  3132.,  4018.,  4820.,
      4940.,  5060.,  3850.,  2736.,  8363.,  9924.,  11432., 10294., 9220.,
      7240.,  5325.,  6624.,  7824.,  8972.,  8194.,  7480.,  5840.,  4268.,
      5284.,  6232.,  7117.,  6674.,  6295.,  4860.,  3508.,  4386.,  5306.,
      6192.,  6069.,  6010.,  4690.,  3424.,  4448.,  5660.,  6867.,  7064.,
      7325.,  5800.,  4300.,  5470.,  7230.,  8950.,  9275.,  9600.,  7550.,
      5560.,  3914.,  5120.,  6270.,  6480.,  6690.,  5200.,  3782.,  2484.,
      3202.,  3860.,  3980.,  4100.,  3130.,  2232.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7650.,  7975.,  9600.,  9925.,  10250., 11875., 12200., 12525.,
      14150., 14475., 14800., 6069.,  6010.,  6335.,  7064.,  7325.,  7650.,
      9275.,  9600.,  9925.,  11550., 11875., 12200., 7117.,  6674.,  6295.,
      6192.,  6069.,  6010.,  6867.,  7064.,  7325.,  8950.,  9275.,  9600.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 17105., 17660.,
      22350., 23100., 27350., 28300., 27975., 28950., 28600., 29600., 22290.,
      23100., 16265., 16880., 11758., 12244., 15216., 15872., 18430., 19260.,
      18830., 19680., 19230., 20100., 14816., 15520., 10678., 11212., 7164.,
      7560.,  9134.,  9668.,  10885., 11560., 11110., 11800., 11335., 12040.,
      8570.,  9140.,  6048.,  6480.,  8189.,  8454.,  10006., 10344., 11794.,
      12208., 10335., 10700., 10860., 11240., 8570.,  8880.,  6333.,  6570.,
      7658.,  7968.,  9488.,  9888.,  11274., 11768., 10530., 10980., 11130.,
      11600., 8736.,  9120.,  6418.,  6712.,  7664.,  8040.,  9638.,  10128.,
      11529., 12138., 11450., 12020., 12075., 12670., 9394.,  9880.,  6836.,
      7208.,  8515.,  8804.,  11102., 11476., 13664., 14128., 14225., 14650.,
      14850., 15300., 11730., 12100., 8675.,  8960.,  11030., 11360., 14550.,
      15000., 17975., 18550., 18600., 19200., 19225., 19850., 15090., 15600.,
      11090., 11480., 13865., 14300., 18190., 18780., 22350., 23100., 22975.,
      23750., 23600., 24400., 18450., 19100., 13505., 14000., 9646.,  10036.,
      12528., 13056., 15230., 15900., 15630., 16320., 16030., 16740., 12384.,
      12960., 8950.,  9388.,  5940.,  6264.,  7598.,  8036.,  9085.,  9640.,
      9310.,  9880.,  9535.,  10120., 7226.,  7700.,  5112.,  5472.,  16277.,
      16726., 19286., 19848., 22186., 22864., 19959., 20588., 17860., 18440.,
      14010., 14480., 10293., 10650., 12778., 13248., 15056., 15648., 17226.,
      17944., 15714., 16388., 14330., 14960., 11168., 11680., 8146.,  8536.,
      10056., 10568., 11814., 12464., 13441., 14234., 12594., 13348., 11875.,
      12590., 9138.,  9720.,  6572.,  7016.,  8347.,  8772.,  10078., 10612.,
      11736., 12384., 11529., 12138., 11450., 12020., 8914.,  9380.,  6491.,
      6848.,  8558.,  8896.,  10902., 11320., 13231., 13734., 13664., 14128.,
      14225., 14650., 11250., 11600., 8330.,  8600.,  10625., 10940., 14030.,
      14460., 17350., 17900., 17975., 18550., 18600., 19200., 14610., 15100.,
      10745., 11120., 7534.,  7828.,  9840.,  10240., 12030., 12540., 12430.,
      12960., 12830., 13380., 9952.,  10400., 7222.,  7564.,  4716.,  4968.,
      6062.,  6404.,  7285.,  7720.,  7510.,  7960.,  7735.,  8200.,  5882.,
      6260.,  4176.,  4464.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.,
      27350., 28300., 27975., 28950., 28600., 29600., 11529., 12138., 11450.,
      12020., 12075., 12670., 13664., 14128., 14225., 14650., 14850., 15300.,
      17975., 18550., 18600., 19200., 19225., 19850., 22350., 23100., 22975.,
      23750., 23600., 24400., 13441., 14234., 12594., 13348., 11875., 12590.,
      11736., 12384., 11529., 12138., 11450., 12020., 13231., 13734., 13664.,
      14128., 14225., 14650., 17350., 17900., 17975., 18550., 18600., 19200.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,
      3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,
      5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,
      3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,
      7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,
      8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,
      5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,
      9696.,  11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440., 7692.,
      7992.,  8292.,  8592.,  9661.,  10006., 10351., 10696., 12262., 12732.,
      13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275.,
      18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304.,
      10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818.,
      16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368.,
      23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498.,
      19168., 12662., 13172., 13682., 14192., 15415., 15970., 16525., 17080.,
      19374., 20124., 20874., 21624., 25462., 26412., 27362., 28312., 26111.,
      27086., 28061., 29036., 26760., 27760., 28760., 29760., 20602., 21412.,
      22222., 23032., 15147., 15762., 16377., 16992., 13238., 13724., 14210.,
      14696., 16592., 17248., 17904., 18560., 22590., 23420., 24250., 25080.,
      23114., 23964., 24814., 25664., 23638., 24508., 25378., 26248., 18368.,
      19072., 19776., 20480., 13718., 14252., 14786., 15320., 13932., 14328.,
      14724., 15120., 17734., 18268., 18802., 19336., 21095., 21770., 22445.,
      23120., 21530., 22220., 22910., 23600., 21965., 22670., 23375., 24080.,
      16570., 17140., 17710., 18280., 11664., 12096., 12528., 12960., 10289.,
      10554., 10819., 11084., 13018., 13356., 13694., 14032., 19654., 20068.,
      20482., 20896., 16209., 16574., 16939., 17304., 16668., 17048., 17428.,
      17808., 12926., 13236., 13546., 13856., 9421.,  9658.,  9895.,  10132.,
      10590., 10900., 11210., 11520., 12432., 12832., 13232., 13632., 14502.,
      14996., 15490., 15984., 12482., 12932., 13382., 13832., 13086., 13556.,
      14026., 14496., 10048., 10432., 10816., 11200., 7294.,  7588.,  7882.,
      8176.,  7848.,  8224.,  8600.,  8976.,  9058.,  9548.,  10038., 10528.,
      10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819.,
      11414., 12009., 12604., 8126.,  8612.,  9098.,  9584.,  5812.,  6184.,
      6556.,  6928.,  6949.,  7238.,  7527.,  7816.,  8518.,  8892.,  9266.,
      9640.,  11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108.,
      12482., 12932., 13382., 13832., 9778.,  10148., 10518., 10888., 7337.,
      7622.,  7907.,  8192.,  9250.,  9580.,  9910.,  10240., 11754., 12204.,
      12654., 13104., 15727., 16302., 16877., 17452., 16376., 16976., 17576.,
      18176., 17025., 17650., 18275., 18900., 13222., 13732., 14242., 14752.,
      9822.,  10212., 10602., 10992., 12127., 12562., 12997., 13432., 15310.,
      15900., 16490., 17080., 20270., 21020., 21770., 22520., 20919., 21694.,
      22469., 23244., 21568., 22368., 23168., 23968., 16666., 17316., 17966.,
      18616., 12307., 12802., 13297., 13792., 10646., 11036., 11426., 11816.,
      13392., 13920., 14448., 14976., 18398., 19068., 19738., 20408., 18922.,
      19612., 20302., 20992., 19446., 20156., 20866., 21576., 15168., 15744.,
      16320., 16896., 11382., 11820., 12258., 12696., 11556., 11880., 12204.,
      12528., 14758., 15196., 15634., 16072., 17615., 18170., 18725., 19280.,
      18050., 18620., 19190., 19760., 18485., 19070., 19655., 20240., 13978.,
      14452., 14926., 15400., 9864.,  10224., 10584., 10944., 12969., 13418.,
      13867., 14316., 14970., 15532., 16094., 16656., 20206., 20884., 21562.,
      22240., 19321., 19950., 20579., 21208., 18692., 19272., 19852., 20432.,
      14942., 15412., 15882., 16352., 11589., 11946., 12303., 12660., 15550.,
      16020., 16490., 16960., 19280., 19872., 20464., 21056., 26694., 27412.,
      28130., 28848., 27234., 27908., 28582., 29256., 23934., 24564., 25194.,
      25824., 18368., 18880., 19392., 19904., 13214., 13604., 13994., 14384.,
      15568., 16080., 16592., 17104., 17346., 17996., 18646., 19296., 19113.,
      19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622.,
      16337., 17052., 11102., 11684., 12266., 12848., 7772.,  8216.,  8660.,
      9104.,  9549.,  9974.,  10399., 10824., 10406., 10940., 11474., 12008.,
      11816., 12464., 13112., 13760., 10865., 11474., 12083., 12692., 10170.,
      10740., 11310., 11880., 7634.,  8100.,  8566.,  9032.,  5457.,  5814.,
      6171.,  6528.,  7370.,  7708.,  8046.,  8384.,  8586.,  9004.,  9422.,
      9840.,  10919., 11422., 11925., 12428., 11248., 11712., 12176., 12640.,
      11833., 12258., 12683., 13108., 9286.,  9636.,  9986.,  10336., 6982.,
      7252.,  7522.,  7792.,  8839.,  9154.,  9469.,  9784.,  11246., 11676.,
      12106., 12536., 15078., 15628., 16178., 16728., 15727., 16302., 16877.,
      17452., 16376., 16976., 17576., 18176., 12730., 13220., 13710., 14200.,
      9467.,  9842.,  10217., 10592., 8054.,  8348.,  8642.,  8936.,  10192.,
      10592., 10992., 11392., 14206., 14716., 15226., 15736., 14730., 15260.,
      15790., 16320., 15254., 15804., 16354., 16904., 11968., 12416., 12864.,
      13312., 9046.,  9388.,  9730.,  10072., 9180.,  9432.,  9684.,  9936.,
      11782., 12124., 12466., 12808., 14135., 14570., 15005., 15440., 14570.,
      15020., 15470., 15920., 15005., 15470., 15935., 16400., 11386., 11764.,
      12142., 12520., 8064.,  8352.,  8640.,  8928.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131.,
      13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650.,
      18275., 18900., 17674., 18324., 18974., 19624., 20919., 21694., 22469.,
      23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692.,
      25462., 26412., 27362., 28312., 26111., 27086., 28061., 29036., 26760.,
      27760., 28760., 29760., 10865., 11474., 12083., 12692., 10170., 10740.,
      11310., 11880., 10819., 11414., 12009., 12604., 11248., 11712., 12176.,
      12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,
      15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176., 17025.,
      17650., 18275., 18900., 20270., 21020., 21770., 22520., 20919., 21694.,
      22469., 23244., 21568., 22368., 23168., 23968., 19113., 19906., 20699.,
      21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052.,
      11816., 12464., 13112., 13760., 10865., 11474., 12083., 12692., 10170.,
      10740., 11310., 11880., 10919., 11422., 11925., 12428., 11248., 11712.,
      12176., 12640., 11833., 12258., 12683., 13108., 15078., 15628., 16178.,
      16728., 15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3017.,  3404.,  4871.,  5113.,  5483.,  4700.,  3925.,  5140.,  6704.,
      10252., 11444., 10716., 8592.,  6500.,  8395.,  9956.,  11141., 10043.,
      9201.,  7092.,  5135.,  6953.,  8412.,  11007., 11189., 11627., 9548.,
      5597.,  9351.,  11988., 13177., 12591., 11141., 7940.,  4939.,  6437.,
      8588.,  10803., 11081., 11007., 8476.,  6169.,  6364.,  8464.,  10116.,
      10764., 9652.,  7344.,  5228.,  3855.,  5284.,  6745.,  7675.,  7357.,
      5588.,  3883.,  4985.,  6572.,  10199., 9161.,  10139., 8092.,  6117.,
      7252.,  7920.,  9548.,  8596.,  9148.,  7056.,  5604.,  6715.,  8036.,
      11189., 11627., 12929., 8596.,  6367.,  9753.,  10844., 12591., 11141.,
      10043., 6764.,  4973.,  7319.,  8436.,  11081., 11007., 11189., 8580.,
      6843.,  9077.,  11372., 14019., 13177., 12591., 9372.,  6409.,  5212.,
      6928.,  9828.,  9708.,  9716.,  7536.,  5548.,  5535.,  7396.,  9225.,
      9547.,  9997.,  7732.,  5595.,  3017.,  3404.,  4871.,  5113.,  5483.,
      4700.,  3925.,  5140.,  6704.,  10252., 11444., 10716., 8592.,  6500.,
      8395.,  9956.,  11141., 10043., 9201.,  7092.,  5135.,  6953.,  8412.,
      11007., 11189., 11627., 9548.,  5597.,  9351.,  11988., 13177., 12591.,
      11141., 7940.,  4939.,  6437.,  8588.,  10803., 11081., 11007., 8476.,
      6169.,  6364.,  8464.,  10116., 10764., 9652.,  7344.,  5228.,  3855.,
      5284.,  6745.,  7675.,  7357.,  5588.,  3883.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11141., 10043., 9201.,  11007., 11189., 11627., 13177., 12591., 11141.,
      10803., 11081., 11007., 11189., 11627., 12929., 12591., 11141., 10043.,
      11081., 11007., 11189., 14019., 13177., 12591., 11141., 10043., 9201.,
      11007., 11189., 11627., 13177., 12591., 11141., 10803., 11081., 11007.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5015.,  5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,
      6070.,  5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,
      9492.,  10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,
      7752.,  8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694.,
      11183., 11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220.,
      11928., 13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224.,
      6517.,  6970.,  9365.,  9934.,  12052., 12808., 13327., 14226., 13079.,
      13950., 13215., 13994., 10212., 10824., 7789.,  8214.,  6445.,  6922.,
      9300.,  9976.,  12871., 13702., 14287., 15154., 13015., 13854., 9956.,
      10616., 6629.,  7090.,  6476.,  6872.,  8496.,  9056.,  9316.,  9992.,
      9572.,  10264., 8420.,  9064.,  6576.,  7072.,  5388.,  5720.,  3287.,
      3518.,  5180.,  5512.,  6997.,  7442.,  7901.,  8406.,  8421.,  8922.,
      7468.,  7880.,  4863.,  5174.,  4823.,  5106.,  6268.,  6648.,  9637.,
      10126., 8717.,  9202.,  9717.,  10262., 8588.,  9048.,  6111.,  6474.,
      7068.,  7528.,  9616.,  10176., 11028., 11704., 10068., 10696., 10004.,
      10648., 8304.,  8800.,  7612.,  8008.,  8741.,  9270.,  9620.,  10280.,
      12255., 13066., 12007., 12790., 13423., 14242., 9956.,  10600., 7485.,
      7998.,  9405.,  9970.,  10964., 11672., 13079., 13950., 13215., 13994.,
      11943., 12694., 9188.,  9752.,  7349.,  7770.,  7381.,  7918.,  10132.,
      10824., 14287., 15154., 13015., 13854., 12255., 13066., 9444.,  10056.,
      7469.,  7926.,  9581.,  10154., 11732., 12472., 14087., 15014., 13327.,
      14226., 13079., 13950., 11748., 12408., 9125.,  9618.,  5196.,  5592.,
      7472.,  8032.,  10724., 11464., 11492., 12248., 12516., 13288., 8880.,
      9504.,  5900.,  6360.,  5527.,  5854.,  7228.,  7688.,  8725.,  9330.,
      8477.,  9078.,  8485.,  9082.,  6572.,  7048.,  5183.,  5526.,  5015.,
      5266.,  5116.,  5432.,  6245.,  6638.,  5837.,  6226.,  5685.,  6070.,
      5004.,  5336.,  3871.,  4138.,  5020.,  5352.,  6288.,  6720.,  9492.,
      10040., 10708., 11272., 10132., 10712., 9328.,  9824.,  7356.,  7752.,
      8037.,  8534.,  10388., 11048., 13215., 13994., 11943., 12694., 11183.,
      11906., 9060.,  9640.,  7165.,  7582.,  7933.,  8466.,  11220., 11928.,
      13015., 13854., 12255., 13066., 12007., 12790., 10596., 11224., 6517.,
      6970.,  9365.,  9934.,  12052., 12808., 13327., 14226., 13079., 13950.,
      13215., 13994., 10212., 10824., 7789.,  8214.,  6445.,  6922.,  9300.,
      9976.,  12871., 13702., 14287., 15154., 13015., 13854., 9956.,  10616.,
      6629.,  7090.,  6476.,  6872.,  8496.,  9056.,  9316.,  9992.,  9572.,
      10264., 8420.,  9064.,  6576.,  7072.,  5388.,  5720.,  3287.,  3518.,
      5180.,  5512.,  6997.,  7442.,  7901.,  8406.,  8421.,  8922.,  7468.,
      7880.,  4863.,  5174.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13215., 13994., 11943., 12694., 11183., 11906., 13015., 13854., 12255.,
      13066., 12007., 12790., 13327., 14226., 13079., 13950., 13215., 13994.,
      12871., 13702., 14287., 15154., 13015., 13854., 12255., 13066., 12007.,
      12790., 13423., 14242., 13079., 13950., 13215., 13994., 11943., 12694.,
      14287., 15154., 13015., 13854., 12255., 13066., 14087., 15014., 13327.,
      14226., 13079., 13950., 13215., 13994., 11943., 12694., 11183., 11906.,
      13015., 13854., 12255., 13066., 12007., 12790., 13327., 14226., 13079.,
      13950., 13215., 13994., 12871., 13702., 14287., 15154., 13015., 13854.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5203.,  5454.,  5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,
      5834.,  6227.,  6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,
      7147.,  7532.,  5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,
      4468.,  4652.,  4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,
      8036.,  8584.,  9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,
      9096.,  9676.,  10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,
      6660.,  7056.,  6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228.,
      11888., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      9995.,  10718., 11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,
      6906.,  7323.,  7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360.,
      13068., 13776., 12007., 12846., 13685., 14524., 11027., 11838., 12649.,
      13460., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      6181.,  6634.,  7087.,  7540.,  9169.,  9738.,  10307., 10876., 11348.,
      12104., 12860., 13616., 12059., 12958., 13857., 14756., 12103., 12974.,
      13845., 14716., 12979., 13758., 14537., 15316., 8868.,  9480.,  10092.,
      10704., 5681.,  6106.,  6531.,  6956.,  7389.,  7866.,  8343.,  8820.,
      10148., 10824., 11500., 12176., 12751., 13582., 14413., 15244., 14011.,
      14878., 15745., 16612., 12007., 12846., 13685., 14524., 9588.,  10248.,
      10908., 11568., 6397.,  6858.,  7319.,  7780.,  5676.,  6072.,  6468.,
      6864.,  8432.,  8992.,  9552.,  10112., 10532., 11208., 11884., 12560.,
      10004., 10696., 11388., 12080., 8772.,  9416.,  10060., 10704., 6960.,
      7456.,  7952.,  8448.,  6252.,  6584.,  6916.,  7248.,  3175.,  3406.,
      3637.,  3868.,  4844.,  5176.,  5508.,  5840.,  6221.,  6666.,  7111.,
      7556.,  7073.,  7578.,  8083.,  8588.,  7221.,  7722.,  8223.,  8724.,
      7004.,  7416.,  7828.,  8240.,  4423.,  4734.,  5045.,  5356.,  3763.,
      4046.,  4329.,  4612.,  5052.,  5432.,  5812.,  6192.,  8033.,  8522.,
      9011.,  9500.,  7221.,  7706.,  8191.,  8676.,  8137.,  8682.,  9227.,
      9772.,  6956.,  7416.,  7876.,  8336.,  4979.,  5342.,  5705.,  6068.,
      6572.,  7032.,  7492.,  7952.,  9968.,  10528., 11088., 11648., 9956.,
      10632., 11308., 11984., 8724.,  9352.,  9980.,  10608., 9220.,  9864.,
      10508., 11152., 7472.,  7968.,  8464.,  8960.,  6380.,  6776.,  7172.,
      7568.,  9241.,  9770.,  10299., 10828., 9396.,  10056., 10716., 11376.,
      11027., 11838., 12649., 13460., 11071., 11854., 12637., 13420., 12331.,
      13150., 13969., 14788., 9860.,  10504., 11148., 11792., 7033.,  7546.,
      8059.,  8572.,  8357.,  8922.,  9487.,  10052., 10116., 10824., 11532.,
      12240., 12103., 12974., 13845., 14716., 12979., 13758., 14537., 15316.,
      10975., 11726., 12477., 13228., 7636.,  8200.,  8764.,  9328.,  5829.,
      6250.,  6671.,  7092.,  8305.,  8842.,  9379.,  9916.,  10644., 11336.,
      12028., 12720., 14011., 14878., 15745., 16612., 12007., 12846., 13685.,
      14524., 11027., 11838., 12649., 13460., 9380.,  9992.,  10604., 11216.,
      7057.,  7514.,  7971.,  8428.,  8445.,  9018.,  9591.,  10164., 11876.,
      12616., 13356., 14096., 13039., 13966., 14893., 15820., 12059., 12958.,
      13857., 14756., 12103., 12974., 13845., 14716., 11124., 11784., 12444.,
      13104., 7261.,  7754.,  8247.,  8740.,  6188.,  6584.,  6980.,  7376.,
      8432.,  8992.,  9552.,  10112., 11236., 11976., 12716., 13456., 11732.,
      12488., 13244., 14000., 12740., 13512., 14284., 15056., 9392.,  10016.,
      10640., 11264., 6124.,  6584.,  7044.,  7504.,  4487.,  4814.,  5141.,
      5468.,  6764.,  7224.,  7684.,  8144.,  8493.,  9098.,  9703.,  10308.,
      9153.,  9754.,  10355., 10956., 8277.,  8874.,  9471.,  10068., 6172.,
      6648.,  7124.,  7600.,  5031.,  5374.,  5717.,  6060.,  5203.,  5454.,
      5705.,  5956.,  4860.,  5176.,  5492.,  5808.,  5441.,  5834.,  6227.,
      6620.,  5653.,  6042.,  6431.,  6820.,  6377.,  6762.,  7147.,  7532.,
      5036.,  5368.,  5700.,  6032.,  3667.,  3934.,  4201.,  4468.,  4652.,
      4984.,  5316.,  5648.,  5488.,  5920.,  6352.,  6784.,  8036.,  8584.,
      9132.,  9680.,  9044.,  9608.,  10172., 10736., 8516.,  9096.,  9676.,
      10256., 7472.,  7968.,  8464.,  8960.,  5868.,  6264.,  6660.,  7056.,
      6841.,  7338.,  7835.,  8332.,  9908.,  10568., 11228., 11888., 12979.,
      13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,  10718.,
      11441., 12164., 8132.,  8712.,  9292.,  9872.,  6489.,  6906.,  7323.,
      7740.,  8517.,  9050.,  9583.,  10116., 11652., 12360., 13068., 13776.,
      12007., 12846., 13685., 14524., 11027., 11838., 12649., 13460., 11071.,
      11854., 12637., 13420., 10388., 11016., 11644., 12272., 6181.,  6634.,
      7087.,  7540.,  9169.,  9738.,  10307., 10876., 11348., 12104., 12860.,
      13616., 12059., 12958., 13857., 14756., 12103., 12974., 13845., 14716.,
      12979., 13758., 14537., 15316., 8868.,  9480.,  10092., 10704., 5681.,
      6106.,  6531.,  6956.,  7389.,  7866.,  8343.,  8820.,  10148., 10824.,
      11500., 12176., 12751., 13582., 14413., 15244., 14011., 14878., 15745.,
      16612., 12007., 12846., 13685., 14524., 9588.,  10248., 10908., 11568.,
      6397.,  6858.,  7319.,  7780.,  5676.,  6072.,  6468.,  6864.,  8432.,
      8992.,  9552.,  10112., 10532., 11208., 11884., 12560., 10004., 10696.,
      11388., 12080., 8772.,  9416.,  10060., 10704., 6960.,  7456.,  7952.,
      8448.,  6252.,  6584.,  6916.,  7248.,  3175.,  3406.,  3637.,  3868.,
      4844.,  5176.,  5508.,  5840.,  6221.,  6666.,  7111.,  7556.,  7073.,
      7578.,  8083.,  8588.,  7221.,  7722.,  8223.,  8724.,  7004.,  7416.,
      7828.,  8240.,  4423.,  4734.,  5045.,  5356.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228., 9995.,
      10718., 11441., 12164., 12007., 12846., 13685., 14524., 11027., 11838.,
      12649., 13460., 11071., 11854., 12637., 13420., 12059., 12958., 13857.,
      14756., 12103., 12974., 13845., 14716., 12979., 13758., 14537., 15316.,
      12751., 13582., 14413., 15244., 14011., 14878., 15745., 16612., 12007.,
      12846., 13685., 14524., 11027., 11838., 12649., 13460., 11071., 11854.,
      12637., 13420., 12331., 13150., 13969., 14788., 12103., 12974., 13845.,
      14716., 12979., 13758., 14537., 15316., 10975., 11726., 12477., 13228.,
      14011., 14878., 15745., 16612., 12007., 12846., 13685., 14524., 11027.,
      11838., 12649., 13460., 13039., 13966., 14893., 15820., 12059., 12958.,
      13857., 14756., 12103., 12974., 13845., 14716., 12979., 13758., 14537.,
      15316., 10975., 11726., 12477., 13228., 9995.,  10718., 11441., 12164.,
      12007., 12846., 13685., 14524., 11027., 11838., 12649., 13460., 11071.,
      11854., 12637., 13420., 12059., 12958., 13857., 14756., 12103., 12974.,
      13845., 14716., 12979., 13758., 14537., 15316., 12751., 13582., 14413.,
      15244., 14011., 14878., 15745., 16612., 12007., 12846., 13685., 14524.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9758.,  10408., 15666., 13002., 14754., 13864., 10670., 11912., 15392.,
      19448., 19928., 18680., 16736., 15560., 18658., 20632., 26254., 23158.,
      24478., 17496., 13778., 19850., 25080., 27622., 26254., 23158., 19000.,
      12154., 18674., 25112., 30718., 27622., 26254., 18776., 14946., 17178.,
      22776., 29398., 30718., 27622., 22968., 16010., 12136., 17760., 21848.,
      23928., 23640., 16736., 11368., 8262.,  12552., 17098., 18466., 19514.,
      16968., 11350., 9758.,  10408., 15666., 13002., 14754., 13864., 10670.,
      11912., 15392., 19448., 19928., 18680., 16736., 15560., 18658., 20632.,
      26254., 23158., 24478., 17496., 13778., 19850., 25080., 27622., 26254.,
      23158., 19000., 12154., 18674., 25112., 30718., 27622., 26254., 18776.,
      14946., 17178., 22776., 29398., 30718., 27622., 22968., 16010., 12136.,
      17760., 21848., 23928., 23640., 16736., 11368., 8262.,  12552., 17098.,
      18466., 19514., 16968., 11350., 9758.,  10408., 15666., 13002., 14754.,
      13864., 10670., 11912., 15392., 19448., 19928., 18680., 16736., 15560.,
      18658., 20632., 26254., 23158., 24478., 17496., 13778., 19850., 25080.,
      27622., 26254., 23158., 19000., 12154., 18674., 25112., 30718., 27622.,
      26254., 18776., 14946., 17178., 22776., 29398., 30718., 27622., 22968.,
      16010., 12136., 17760., 21848., 23928., 23640., 16736., 11368., 8262.,
      12552., 17098., 18466., 19514., 16968., 11350.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26254., 23158., 24478., 27622., 26254., 23158., 30718., 27622., 26254.,
      29398., 30718., 27622., 26254., 23158., 24478., 27622., 26254., 23158.,
      30718., 27622., 26254., 29398., 30718., 27622., 26254., 23158., 24478.,
      27622., 26254., 23158., 30718., 27622., 26254., 29398., 30718., 27622.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9250.,  9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814.,
      15684., 12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960.,
      17352., 18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432.,
      14224., 18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020.,
      22178., 23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288.,
      26800., 26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416.,
      10750., 11508., 21086., 22308., 25800., 27376., 30114., 31996., 26082.,
      27852., 25634., 27164., 17864., 18992., 12222., 12996., 17694., 18804.,
      25800., 27312., 29538., 31404., 30114., 31996., 26082., 27852., 22984.,
      24304., 14206., 15124., 12664., 13456., 19104., 20288., 25288., 26800.,
      25288., 26864., 24776., 26288., 18080., 19264., 13688., 14480., 7746.,
      8268.,  12152., 12944., 16510., 17620., 19646., 20868., 18174., 19380.,
      15480., 16464., 10466., 11180., 9250.,  9724.,  8568.,  9168.,  12638.,
      13412., 11422., 12180., 14814., 15684., 12920., 13712., 9858.,  10524.,
      11384., 12176., 16032., 16960., 17352., 18480., 16840., 17904., 16840.,
      17968., 15008., 15936., 13432., 14224., 18142., 19204., 20168., 21488.,
      25634., 27164., 21602., 23020., 22178., 23612., 17352., 18480., 13886.,
      14756., 19870., 21076., 25288., 26800., 26082., 27852., 25634., 27164.,
      21602., 23020., 17352., 18416., 10750., 11508., 21086., 22308., 25800.,
      27376., 30114., 31996., 26082., 27852., 25634., 27164., 17864., 18992.,
      12222., 12996., 17694., 18804., 25800., 27312., 29538., 31404., 30114.,
      31996., 26082., 27852., 22984., 24304., 14206., 15124., 12664., 13456.,
      19104., 20288., 25288., 26800., 25288., 26864., 24776., 26288., 18080.,
      19264., 13688., 14480., 7746.,  8268.,  12152., 12944., 16510., 17620.,
      19646., 20868., 18174., 19380., 15480., 16464., 10466., 11180., 9250.,
      9724.,  8568.,  9168.,  12638., 13412., 11422., 12180., 14814., 15684.,
      12920., 13712., 9858.,  10524., 11384., 12176., 16032., 16960., 17352.,
      18480., 16840., 17904., 16840., 17968., 15008., 15936., 13432., 14224.,
      18142., 19204., 20168., 21488., 25634., 27164., 21602., 23020., 22178.,
      23612., 17352., 18480., 13886., 14756., 19870., 21076., 25288., 26800.,
      26082., 27852., 25634., 27164., 21602., 23020., 17352., 18416., 10750.,
      11508., 21086., 22308., 25800., 27376., 30114., 31996., 26082., 27852.,
      25634., 27164., 17864., 18992., 12222., 12996., 17694., 18804., 25800.,
      27312., 29538., 31404., 30114., 31996., 26082., 27852., 22984., 24304.,
      14206., 15124., 12664., 13456., 19104., 20288., 25288., 26800., 25288.,
      26864., 24776., 26288., 18080., 19264., 13688., 14480., 7746.,  8268.,
      12152., 12944., 16510., 17620., 19646., 20868., 18174., 19380., 15480.,
      16464., 10466., 11180.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25634., 27164., 21602., 23020., 22178., 23612., 26082., 27852., 25634.,
      27164., 21602., 23020., 30114., 31996., 26082., 27852., 25634., 27164.,
      29538., 31404., 30114., 31996., 26082., 27852., 25634., 27164., 21602.,
      23020., 22178., 23612., 26082., 27852., 25634., 27164., 21602., 23020.,
      30114., 31996., 26082., 27852., 25634., 27164., 29538., 31404., 30114.,
      31996., 26082., 27852., 25634., 27164., 21602., 23020., 22178., 23612.,
      26082., 27852., 25634., 27164., 21602., 23020., 30114., 31996., 26082.,
      27852., 25634., 27164., 29538., 31404., 30114., 31996., 26082., 27852.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160.,
      3096., 3504., 3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160.,
      5160., 5840., 6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200.,
      3702., 4188., 4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840.,
      6520., 7200., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316.,
      4818., 5320., 3926., 4444., 4962., 5480., 5160., 5840., 6520., 7200.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 5160., 5840., 6520., 7200., 3926., 4444., 4962., 5480.,
      4038., 4572., 5106., 5640., 5160., 5840., 6520., 7200., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.,
      5160., 5840., 6520., 7200., 4038., 4572., 5106., 5640., 3096., 3504.,
      3912., 4320., 4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672.,
      5216., 5760., 3096., 3504., 3912., 4320., 2490., 2820., 3150., 3480.,
      3096., 3504., 3912., 4320., 4038., 4572., 5106., 5640., 3926., 4444.,
      4962., 5480., 3814., 4316., 4818., 5320., 3096., 3504., 3912., 4320.,
      2490., 2820., 3150., 3480., 2154., 2436., 2718., 3000., 3096., 3504.,
      3912., 4320., 3926., 4444., 4962., 5480., 3814., 4316., 4818., 5320.,
      3702., 4188., 4674., 5160., 3096., 3504., 3912., 4320., 2154., 2436.,
      2718., 3000., 3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320.,
      3702., 4188., 4674., 5160., 5160., 5840., 6520., 7200., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      5160., 5840., 6520., 7200., 3702., 4188., 4674., 5160., 3814., 4316.,
      4818., 5320., 5160., 5840., 6520., 7200., 6618., 7492., 8366., 9240.,
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 5160., 5840.,
      6520., 7200., 3814., 4316., 4818., 5320., 3926., 4444., 4962., 5480.,
      5160., 5840., 6520., 7200., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 5160., 5840., 6520., 7200.,
      3926., 4444., 4962., 5480., 4038., 4572., 5106., 5640., 5160., 5840.,
      6520., 7200., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      6618., 7492., 8366., 9240., 5160., 5840., 6520., 7200., 4038., 4572.,
      5106., 5640., 3096., 3504., 3912., 4320., 4128., 4672., 5216., 5760.,
      5160., 5840., 6520., 7200., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 4128., 4672., 5216., 5760., 3096., 3504., 3912., 4320.,
      2490., 2820., 3150., 3480., 3096., 3504., 3912., 4320., 4038., 4572.,
      5106., 5640., 3926., 4444., 4962., 5480., 3814., 4316., 4818., 5320.,
      3096., 3504., 3912., 4320., 2490., 2820., 3150., 3480., 2154., 2436.,
      2718., 3000., 3096., 3504., 3912., 4320., 3926., 4444., 4962., 5480.,
      3814., 4316., 4818., 5320., 3702., 4188., 4674., 5160., 3096., 3504.,
      3912., 4320., 2154., 2436., 2718., 3000., 3096., 3504., 3912., 4320.,
      4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760.,
      3096., 3504., 3912., 4320., 3702., 4188., 4674., 5160., 5160., 5840.,
      6520., 7200., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 5160., 5840., 6520., 7200., 3702., 4188.,
      4674., 5160., 3814., 4316., 4818., 5320., 5160., 5840., 6520., 7200.,
      6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 5160., 5840., 6520., 7200., 3814., 4316., 4818., 5320.,
      3926., 4444., 4962., 5480., 5160., 5840., 6520., 7200., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      5160., 5840., 6520., 7200., 3926., 4444., 4962., 5480., 4038., 4572.,
      5106., 5640., 5160., 5840., 6520., 7200., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 5160., 5840.,
      6520., 7200., 4038., 4572., 5106., 5640., 3096., 3504., 3912., 4320.,
      4128., 4672., 5216., 5760., 5160., 5840., 6520., 7200., 5160., 5840.,
      6520., 7200., 5160., 5840., 6520., 7200., 4128., 4672., 5216., 5760.,
      3096., 3504., 3912., 4320., 2490., 2820., 3150., 3480., 3096., 3504.,
      3912., 4320., 4038., 4572., 5106., 5640., 3926., 4444., 4962., 5480.,
      3814., 4316., 4818., 5320., 3096., 3504., 3912., 4320., 2490., 2820.,
      3150., 3480.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236.,
      8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240.,
      6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364.,
      8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108., 7934., 8760.,
      6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080., 6618., 7492.,
      8366., 9240., 6282., 7108., 7934., 8760., 6394., 7236., 8078., 8920.,
      6506., 7364., 8222., 9080., 6618., 7492., 8366., 9240., 6282., 7108.,
      7934., 8760., 6394., 7236., 8078., 8920., 6506., 7364., 8222., 9080.,
      6618., 7492., 8366., 9240.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790.,  8350.,  10940., 13425., 13750.,
      14075., 14400., 11250., 8230.,  10030., 13100., 16025., 16350., 16675.,
      17000., 13250., 9670.,  6956.,  9004.,  10910., 11120., 11330., 11540.,
      8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,
      3711.,  1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,
      3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,
      6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,
      10825., 11150., 11475., 11800., 9250.,  6790.,  8350.,  10940., 13425.,
      13750., 14075., 14400., 11250., 8230.,  10030., 13100., 16025., 16350.,
      16675., 17000., 13250., 9670.,  6956.,  9004.,  10910., 11120., 11330.,
      11540., 8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,  6910.,
      5240.,  3711.,  1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,
      2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,
      4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,
      8780.,  10825., 11150., 11475., 11800., 9250.,  6790.,  8350.,  10940.,
      13425., 13750., 14075., 14400., 11250., 8230.,  10030., 13100., 16025.,
      16350., 16675., 17000., 13250., 9670.,  6956.,  9004.,  10910., 11120.,
      11330., 11540., 8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,
      6910.,  5240.,  3711.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.,
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.,
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1134., 1224., 1494., 1620., 2123., 2288., 2360., 2540., 2597., 2792.,
      2834., 3044., 2266., 2440., 1747., 1882., 2368., 2536., 3072., 3304.,
      4264., 4564., 4576., 4896., 4888., 5228., 5200., 5560., 4112., 4408.,
      3120., 3348., 2510., 2684., 3270., 3512., 4775., 5090., 5112., 5452.,
      5449., 5814., 5786., 6176., 4610., 4932., 3539., 3788., 3734., 3932.,
      4870., 5144., 5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408.,
      5378., 5732., 3899., 4172., 2846., 3068., 3654., 3960., 4663., 5058.,
      5000., 5420., 5337., 5782., 5674., 6144., 4354., 4740., 3171., 3468.,
      2918., 3164., 3718., 4056., 4959., 5394., 5296., 5756., 5633., 6118.,
      5970., 6480., 4610., 5028., 3403., 3724., 2416., 2584., 3120., 3352.,
      4560., 4860., 4832., 5152., 5104., 5444., 5376., 5736., 4288., 4584.,
      3304., 3532., 3246., 3408., 4222., 4444., 5135., 5420., 5360., 5660.,
      5585., 5900., 5810., 6140., 4450., 4720., 3183., 3390., 1134., 1224.,
      1494., 1620., 2123., 2288., 2360., 2540., 2597., 2792., 2834., 3044.,
      2266., 2440., 1747., 1882., 2368., 2536., 3072., 3304., 4264., 4564.,
      4576., 4896., 4888., 5228., 5200., 5560., 4112., 4408., 3120., 3348.,
      2510., 2684., 3270., 3512., 4775., 5090., 5112., 5452., 5449., 5814.,
      5786., 6176., 4610., 4932., 3539., 3788., 3734., 3932., 4870., 5144.,
      5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408., 5378., 5732.,
      3899., 4172., 2846., 3068., 3654., 3960., 4663., 5058., 5000., 5420.,
      5337., 5782., 5674., 6144., 4354., 4740., 3171., 3468., 2918., 3164.,
      3718., 4056., 4959., 5394., 5296., 5756., 5633., 6118., 5970., 6480.,
      4610., 5028., 3403., 3724., 2416., 2584., 3120., 3352., 4560., 4860.,
      4832., 5152., 5104., 5444., 5376., 5736., 4288., 4584., 3304., 3532.,
      3246., 3408., 4222., 4444., 5135., 5420., 5360., 5660., 5585., 5900.,
      5810., 6140., 4450., 4720., 3183., 3390., 1134., 1224., 1494., 1620.,
      2123., 2288., 2360., 2540., 2597., 2792., 2834., 3044., 2266., 2440.,
      1747., 1882., 2368., 2536., 3072., 3304., 4264., 4564., 4576., 4896.,
      4888., 5228., 5200., 5560., 4112., 4408., 3120., 3348., 2510., 2684.,
      3270., 3512., 4775., 5090., 5112., 5452., 5449., 5814., 5786., 6176.,
      4610., 4932., 3539., 3788., 3734., 3932., 4870., 5144., 5967., 6322.,
      6304., 6684., 6641., 7046., 6978., 7408., 5378., 5732., 3899., 4172.,
      2846., 3068., 3654., 3960., 4663., 5058., 5000., 5420., 5337., 5782.,
      5674., 6144., 4354., 4740., 3171., 3468., 2918., 3164., 3718., 4056.,
      4959., 5394., 5296., 5756., 5633., 6118., 5970., 6480., 4610., 5028.,
      3403., 3724., 2416., 2584., 3120., 3352., 4560., 4860., 4832., 5152.,
      5104., 5444., 5376., 5736., 4288., 4584., 3304., 3532., 3246., 3408.,
      4222., 4444., 5135., 5420., 5360., 5660., 5585., 5900., 5810., 6140.,
      4450., 4720., 3183., 3390.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4775., 5090., 5112., 5452., 5449., 5814., 5786., 6176., 5967., 6322.,
      6304., 6684., 6641., 7046., 6978., 7408., 4663., 5058., 5000., 5420.,
      5337., 5782., 5674., 6144., 4959., 5394., 5296., 5756., 5633., 6118.,
      5970., 6480., 4775., 5090., 5112., 5452., 5449., 5814., 5786., 6176.,
      5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408., 4663., 5058.,
      5000., 5420., 5337., 5782., 5674., 6144., 4959., 5394., 5296., 5756.,
      5633., 6118., 5970., 6480., 4775., 5090., 5112., 5452., 5449., 5814.,
      5786., 6176., 5967., 6322., 6304., 6684., 6641., 7046., 6978., 7408.,
      4663., 5058., 5000., 5420., 5337., 5782., 5674., 6144., 4959., 5394.,
      5296., 5756., 5633., 6118., 5970., 6480.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1378., 1468., 1558., 1648., 1902., 2028., 2154., 2280., 2641., 2806.,
      2971., 3136., 2876., 3056., 3236., 3416., 3111., 3306., 3501., 3696.,
      3346., 3556., 3766., 3976., 3110., 3284., 3458., 3632., 2239., 2374.,
      2509., 2644., 2584., 2752., 2920., 3088., 3448., 3680., 3912., 4144.,
      4708., 5008., 5308., 5608., 5024., 5344., 5664., 5984., 5340., 5680.,
      6020., 6360., 5656., 6016., 6376., 6736., 5144., 5440., 5736., 6032.,
      3868., 4096., 4324., 4552., 2350., 2524., 2698., 2872., 3066., 3308.,
      3550., 3792., 4435., 4750., 5065., 5380., 4796., 5136., 5476., 5816.,
      5157., 5522., 5887., 6252., 5518., 5908., 6298., 6688., 4578., 4900.,
      5222., 5544., 3661., 3910., 4159., 4408., 3238., 3436., 3634., 3832.,
      4442., 4716., 4990., 5264., 5499., 5854., 6209., 6564., 5860., 6240.,
      6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012., 7442., 7872.,
      5570., 5924., 6278., 6632., 4357., 4630., 4903., 5176., 2974., 3196.,
      3418., 3640., 4282., 4588., 4894., 5200., 5667., 6062., 6457., 6852.,
      6028., 6448., 6868., 7288., 6389., 6834., 7279., 7724., 6750., 7220.,
      7690., 8160., 6050., 6436., 6822., 7208., 4925., 5222., 5519., 5816.,
      3606., 3852., 4098., 4344., 4634., 4972., 5310., 5648., 5963., 6398.,
      6833., 7268., 6324., 6784., 7244., 7704., 6685., 7170., 7655., 8140.,
      7046., 7556., 8066., 8576., 6018., 6436., 6854., 7272., 4341., 4662.,
      4983., 5304., 2264., 2432., 2600., 2768., 2904., 3136., 3368., 3600.,
      4180., 4480., 4780., 5080., 4448., 4768., 5088., 5408., 4716., 5056.,
      5396., 5736., 4984., 5344., 5704., 6064., 3960., 4256., 4552., 4848.,
      3212., 3440., 3668., 3896., 2650., 2812., 2974., 3136., 3582., 3804.,
      4026., 4248., 4353., 4638., 4923., 5208., 4564., 4864., 5164., 5464.,
      4775., 5090., 5405., 5720., 4986., 5316., 5646., 5976., 3958., 4228.,
      4498., 4768., 3183., 3390., 3597., 3804., 1378., 1468., 1558., 1648.,
      1902., 2028., 2154., 2280., 2641., 2806., 2971., 3136., 2876., 3056.,
      3236., 3416., 3111., 3306., 3501., 3696., 3346., 3556., 3766., 3976.,
      3110., 3284., 3458., 3632., 2239., 2374., 2509., 2644., 2584., 2752.,
      2920., 3088., 3448., 3680., 3912., 4144., 4708., 5008., 5308., 5608.,
      5024., 5344., 5664., 5984., 5340., 5680., 6020., 6360., 5656., 6016.,
      6376., 6736., 5144., 5440., 5736., 6032., 3868., 4096., 4324., 4552.,
      2350., 2524., 2698., 2872., 3066., 3308., 3550., 3792., 4435., 4750.,
      5065., 5380., 4796., 5136., 5476., 5816., 5157., 5522., 5887., 6252.,
      5518., 5908., 6298., 6688., 4578., 4900., 5222., 5544., 3661., 3910.,
      4159., 4408., 3238., 3436., 3634., 3832., 4442., 4716., 4990., 5264.,
      5499., 5854., 6209., 6564., 5860., 6240., 6620., 7000., 6221., 6626.,
      7031., 7436., 6582., 7012., 7442., 7872., 5570., 5924., 6278., 6632.,
      4357., 4630., 4903., 5176., 2974., 3196., 3418., 3640., 4282., 4588.,
      4894., 5200., 5667., 6062., 6457., 6852., 6028., 6448., 6868., 7288.,
      6389., 6834., 7279., 7724., 6750., 7220., 7690., 8160., 6050., 6436.,
      6822., 7208., 4925., 5222., 5519., 5816., 3606., 3852., 4098., 4344.,
      4634., 4972., 5310., 5648., 5963., 6398., 6833., 7268., 6324., 6784.,
      7244., 7704., 6685., 7170., 7655., 8140., 7046., 7556., 8066., 8576.,
      6018., 6436., 6854., 7272., 4341., 4662., 4983., 5304., 2264., 2432.,
      2600., 2768., 2904., 3136., 3368., 3600., 4180., 4480., 4780., 5080.,
      4448., 4768., 5088., 5408., 4716., 5056., 5396., 5736., 4984., 5344.,
      5704., 6064., 3960., 4256., 4552., 4848., 3212., 3440., 3668., 3896.,
      2650., 2812., 2974., 3136., 3582., 3804., 4026., 4248., 4353., 4638.,
      4923., 5208., 4564., 4864., 5164., 5464., 4775., 5090., 5405., 5720.,
      4986., 5316., 5646., 5976., 3958., 4228., 4498., 4768., 3183., 3390.,
      3597., 3804., 1378., 1468., 1558., 1648., 1902., 2028., 2154., 2280.,
      2641., 2806., 2971., 3136., 2876., 3056., 3236., 3416., 3111., 3306.,
      3501., 3696., 3346., 3556., 3766., 3976., 3110., 3284., 3458., 3632.,
      2239., 2374., 2509., 2644., 2584., 2752., 2920., 3088., 3448., 3680.,
      3912., 4144., 4708., 5008., 5308., 5608., 5024., 5344., 5664., 5984.,
      5340., 5680., 6020., 6360., 5656., 6016., 6376., 6736., 5144., 5440.,
      5736., 6032., 3868., 4096., 4324., 4552., 2350., 2524., 2698., 2872.,
      3066., 3308., 3550., 3792., 4435., 4750., 5065., 5380., 4796., 5136.,
      5476., 5816., 5157., 5522., 5887., 6252., 5518., 5908., 6298., 6688.,
      4578., 4900., 5222., 5544., 3661., 3910., 4159., 4408., 3238., 3436.,
      3634., 3832., 4442., 4716., 4990., 5264., 5499., 5854., 6209., 6564.,
      5860., 6240., 6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012.,
      7442., 7872., 5570., 5924., 6278., 6632., 4357., 4630., 4903., 5176.,
      2974., 3196., 3418., 3640., 4282., 4588., 4894., 5200., 5667., 6062.,
      6457., 6852., 6028., 6448., 6868., 7288., 6389., 6834., 7279., 7724.,
      6750., 7220., 7690., 8160., 6050., 6436., 6822., 7208., 4925., 5222.,
      5519., 5816., 3606., 3852., 4098., 4344., 4634., 4972., 5310., 5648.,
      5963., 6398., 6833., 7268., 6324., 6784., 7244., 7704., 6685., 7170.,
      7655., 8140., 7046., 7556., 8066., 8576., 6018., 6436., 6854., 7272.,
      4341., 4662., 4983., 5304., 2264., 2432., 2600., 2768., 2904., 3136.,
      3368., 3600., 4180., 4480., 4780., 5080., 4448., 4768., 5088., 5408.,
      4716., 5056., 5396., 5736., 4984., 5344., 5704., 6064., 3960., 4256.,
      4552., 4848., 3212., 3440., 3668., 3896., 2650., 2812., 2974., 3136.,
      3582., 3804., 4026., 4248., 4353., 4638., 4923., 5208., 4564., 4864.,
      5164., 5464., 4775., 5090., 5405., 5720., 4986., 5316., 5646., 5976.,
      3958., 4228., 4498., 4768., 3183., 3390., 3597., 3804.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4435., 4750., 5065., 5380., 4796., 5136., 5476., 5816., 5157., 5522.,
      5887., 6252., 5518., 5908., 6298., 6688., 5499., 5854., 6209., 6564.,
      5860., 6240., 6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012.,
      7442., 7872., 5667., 6062., 6457., 6852., 6028., 6448., 6868., 7288.,
      6389., 6834., 7279., 7724., 6750., 7220., 7690., 8160., 5963., 6398.,
      6833., 7268., 6324., 6784., 7244., 7704., 6685., 7170., 7655., 8140.,
      7046., 7556., 8066., 8576., 4435., 4750., 5065., 5380., 4796., 5136.,
      5476., 5816., 5157., 5522., 5887., 6252., 5518., 5908., 6298., 6688.,
      5499., 5854., 6209., 6564., 5860., 6240., 6620., 7000., 6221., 6626.,
      7031., 7436., 6582., 7012., 7442., 7872., 5667., 6062., 6457., 6852.,
      6028., 6448., 6868., 7288., 6389., 6834., 7279., 7724., 6750., 7220.,
      7690., 8160., 5963., 6398., 6833., 7268., 6324., 6784., 7244., 7704.,
      6685., 7170., 7655., 8140., 7046., 7556., 8066., 8576., 4435., 4750.,
      5065., 5380., 4796., 5136., 5476., 5816., 5157., 5522., 5887., 6252.,
      5518., 5908., 6298., 6688., 5499., 5854., 6209., 6564., 5860., 6240.,
      6620., 7000., 6221., 6626., 7031., 7436., 6582., 7012., 7442., 7872.,
      5667., 6062., 6457., 6852., 6028., 6448., 6868., 7288., 6389., 6834.,
      7279., 7724., 6750., 7220., 7690., 8160., 5963., 6398., 6833., 7268.,
      6324., 6784., 7244., 7704., 6685., 7170., 7655., 8140., 7046., 7556.,
      8066., 8576.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1599.,  2340.,  4265.,  5243.,  6221.,  7199.,  6028.,  4913.,  5584.,
      7648.,  9856.,  11144., 12432., 13720., 10912., 8216.,  3839.,  5364.,
      8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121.,
      12519., 13917., 15315., 11980., 8853.,  3839.,  5364.,  8065.,  9463.,
      10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121., 12519., 13917.,
      15315., 11980., 8853.,  3496.,  4800.,  7240.,  8368.,  9496.,  10624.,
      8576.,  6672.,  4515.,  6132.,  7765.,  8695.,  9625.,  10555., 8188.,
      5925.,  1599.,  2340.,  4265.,  5243.,  6221.,  7199.,  6028.,  4913.,
      5584.,  7648.,  9856.,  11144., 12432., 13720., 10912., 8216.,  3839.,
      5364.,  8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,
      11121., 12519., 13917., 15315., 11980., 8853.,  3839.,  5364.,  8065.,
      9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121., 12519.,
      13917., 15315., 11980., 8853.,  3496.,  4800.,  7240.,  8368.,  9496.,
      10624., 8576.,  6672.,  4515.,  6132.,  7765.,  8695.,  9625.,  10555.,
      8188.,  5925.,  1599.,  2340.,  4265.,  5243.,  6221.,  7199.,  6028.,
      4913.,  5584.,  7648.,  9856.,  11144., 12432., 13720., 10912., 8216.,
      3839.,  5364.,  8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,
      8756.,  11121., 12519., 13917., 15315., 11980., 8853.,  3839.,  5364.,
      8065.,  9463.,  10861., 12259., 9868.,  7621.,  6479.,  8756.,  11121.,
      12519., 13917., 15315., 11980., 8853.,  3496.,  4800.,  7240.,  8368.,
      9496.,  10624., 8576.,  6672.,  4515.,  6132.,  7765.,  8695.,  9625.,
      10555., 8188.,  5925.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.,
      8065., 9463., 10861., 12259., 11121., 12519., 13917., 15315.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,  6102.,  6717.,
      7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,  5196.,  5472.,
      7312.,  7712.,  9476.,  10016., 10820., 11440., 12164., 12864., 13508.,
      14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 12132., 12888., 10293., 10890., 6869.,
      7262.,  9364.,  9928.,  11791., 12546., 13335., 14190., 14879., 15834.,
      16423., 17478., 14180., 15064., 10613., 11306., 3420.,  3696.,  5168.,
      5568.,  7924.,  8464.,  9076.,  9696.,  10228., 10928., 11380., 12160.,
      9648.,  10304., 8476.,  8992.,  4455.,  4710.,  5820.,  6184.,  7077.,
      7562.,  7981.,  8526.,  8885.,  9490.,  9789.,  10454., 7532.,  8088.,
      5751.,  6186.,  2015.,  2174.,  2812.,  3048.,  4717.,  5042.,  5717.,
      6102.,  6717.,  7162.,  7717.,  8222.,  6796.,  7224.,  5135.,  5474.,
      5196.,  5472.,  7312.,  7712.,  9476.,  10016., 10820., 11440., 12164.,
      12864., 13508., 14288., 12272., 12928., 9516.,  10032., 3733.,  4030.,
      5780.,  6216.,  8911.,  9506.,  10455., 11150., 11999., 12794., 13543.,
      14438., 12132., 12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478., 14180.,
      15064., 10613., 11306., 3733.,  4030.,  5780.,  6216.,  8911.,  9506.,
      10455., 11150., 11999., 12794., 13543., 14438., 12132., 12888., 10293.,
      10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546., 13335., 14190.,
      14879., 15834., 16423., 17478., 14180., 15064., 10613., 11306., 3420.,
      3696.,  5168.,  5568.,  7924.,  8464.,  9076.,  9696.,  10228., 10928.,
      11380., 12160., 9648.,  10304., 8476.,  8992.,  4455.,  4710.,  5820.,
      6184.,  7077.,  7562.,  7981.,  8526.,  8885.,  9490.,  9789.,  10454.,
      7532.,  8088.,  5751.,  6186.,  2015.,  2174.,  2812.,  3048.,  4717.,
      5042.,  5717.,  6102.,  6717.,  7162.,  7717.,  8222.,  6796.,  7224.,
      5135.,  5474.,  5196.,  5472.,  7312.,  7712.,  9476.,  10016., 10820.,
      11440., 12164., 12864., 13508., 14288., 12272., 12928., 9516.,  10032.,
      3733.,  4030.,  5780.,  6216.,  8911.,  9506.,  10455., 11150., 11999.,
      12794., 13543., 14438., 12132., 12888., 10293., 10890., 6869.,  7262.,
      9364.,  9928.,  11791., 12546., 13335., 14190., 14879., 15834., 16423.,
      17478., 14180., 15064., 10613., 11306., 3733.,  4030.,  5780.,  6216.,
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 12132.,
      12888., 10293., 10890., 6869.,  7262.,  9364.,  9928.,  11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478., 14180., 15064., 10613.,
      11306., 3420.,  3696.,  5168.,  5568.,  7924.,  8464.,  9076.,  9696.,
      10228., 10928., 11380., 12160., 9648.,  10304., 8476.,  8992.,  4455.,
      4710.,  5820.,  6184.,  7077.,  7562.,  7981.,  8526.,  8885.,  9490.,
      9789.,  10454., 7532.,  8088.,  5751.,  6186.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438., 11791.,
      12546., 13335., 14190., 14879., 15834., 16423., 17478., 8911.,  9506.,
      10455., 11150., 11999., 12794., 13543., 14438., 11791., 12546., 13335.,
      14190., 14879., 15834., 16423., 17478., 8911.,  9506.,  10455., 11150.,
      11999., 12794., 13543., 14438., 11791., 12546., 13335., 14190., 14879.,
      15834., 16423., 17478., 8911.,  9506.,  10455., 11150., 11999., 12794.,
      13543., 14438., 11791., 12546., 13335., 14190., 14879., 15834., 16423.,
      17478., 8911.,  9506.,  10455., 11150., 11999., 12794., 13543., 14438.,
      11791., 12546., 13335., 14190., 14879., 15834., 16423., 17478., 8911.,
      9506.,  10455., 11150., 11999., 12794., 13543., 14438., 11791., 12546.,
      13335., 14190., 14879., 15834., 16423., 17478.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2879.,  3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,
      5722.,  6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,
      8119.,  8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,
      7760.,  4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,
      9704.,  10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,
      9056.,  4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,
      7856.,  9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540.,
      12296., 13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,
      6547.,  6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177.,
      12932., 12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436.,
      15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,
      10218., 10911., 11604., 4420.,  4696.,  4972.,  5248.,  6032.,  6432.,
      6832.,  7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216., 10836.,
      11456., 10796., 11496., 12196., 12896., 11996., 12776., 13556., 14336.,
      9872.,  10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,  3439.,
      3694.,  3949.,  4204.,  5324.,  5688.,  6052.,  6416.,  6853.,  7338.,
      7823.,  8308.,  7705.,  8250.,  8795.,  9340.,  8557.,  9162.,  9767.,
      10372., 9409.,  10074., 10739., 11404., 8396.,  8952.,  9508.,  10064.,
      6459.,  6894.,  7329.,  7764.,  2879.,  3038.,  3197.,  3356.,  3660.,
      3896.,  4132.,  4368.,  5397.,  5722.,  6047.,  6372.,  6313.,  6698.,
      7083.,  7468.,  7229.,  7674.,  8119.,  8564.,  8145.,  8650.,  9155.,
      9660.,  6476.,  6904.,  7332.,  7760.,  4587.,  4926.,  5265.,  5604.,
      3908.,  4184.,  4460.,  4736.,  6032.,  6432.,  6832.,  7232.,  7884.,
      8424.,  8964.,  9504.,  9084.,  9704.,  10324., 10944., 10284., 10984.,
      11684., 12384., 11484., 12264., 13044., 13824., 9872.,  10528., 11184.,
      11840., 7508.,  8024.,  8540.,  9056.,  4705.,  5002.,  5299.,  5596.,
      6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948., 10615.,
      11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519., 14414.,
      15309., 16204., 11540., 12296., 13052., 13808., 8981.,  9578.,  10175.,
      10772., 5761.,  6154.,  6547.,  6940.,  8468.,  9032.,  9596.,  10160.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571.,
      14526., 15481., 16436., 15023., 16078., 17133., 18188., 13460., 14344.,
      15228., 16112., 9525.,  10218., 10911., 11604., 4705.,  5002.,  5299.,
      5596.,  6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948.,
      10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519.,
      14414., 15309., 16204., 11540., 12296., 13052., 13808., 8981.,  9578.,
      10175., 10772., 5761.,  6154.,  6547.,  6940.,  8468.,  9032.,  9596.,
      10160., 10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684.,
      13571., 14526., 15481., 16436., 15023., 16078., 17133., 18188., 13460.,
      14344., 15228., 16112., 9525.,  10218., 10911., 11604., 4420.,  4696.,
      4972.,  5248.,  6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,
      10016., 9596.,  10216., 10836., 11456., 10796., 11496., 12196., 12896.,
      11996., 12776., 13556., 14336., 9872.,  10528., 11184., 11840., 8020.,
      8536.,  9052.,  9568.,  3439.,  3694.,  3949.,  4204.,  5324.,  5688.,
      6052.,  6416.,  6853.,  7338.,  7823.,  8308.,  7705.,  8250.,  8795.,
      9340.,  8557.,  9162.,  9767.,  10372., 9409.,  10074., 10739., 11404.,
      8396.,  8952.,  9508.,  10064., 6459.,  6894.,  7329.,  7764.,  2879.,
      3038.,  3197.,  3356.,  3660.,  3896.,  4132.,  4368.,  5397.,  5722.,
      6047.,  6372.,  6313.,  6698.,  7083.,  7468.,  7229.,  7674.,  8119.,
      8564.,  8145.,  8650.,  9155.,  9660.,  6476.,  6904.,  7332.,  7760.,
      4587.,  4926.,  5265.,  5604.,  3908.,  4184.,  4460.,  4736.,  6032.,
      6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  9084.,  9704.,
      10324., 10944., 10284., 10984., 11684., 12384., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 7508.,  8024.,  8540.,  9056.,
      4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,  9163.,
      9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067., 12862.,
      13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296., 13052.,
      13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,  6940.,
      8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932., 12119.,
      12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078.,
      17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218., 10911.,
      11604., 4705.,  5002.,  5299.,  5596.,  6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 11540., 12296.,
      13052., 13808., 8981.,  9578.,  10175., 10772., 5761.,  6154.,  6547.,
      6940.,  8468.,  9032.,  9596.,  10160., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 9525.,  10218.,
      10911., 11604., 4420.,  4696.,  4972.,  5248.,  6032.,  6432.,  6832.,
      7232.,  8396.,  8936.,  9476.,  10016., 9596.,  10216., 10836., 11456.,
      10796., 11496., 12196., 12896., 11996., 12776., 13556., 14336., 9872.,
      10528., 11184., 11840., 8020.,  8536.,  9052.,  9568.,  3439.,  3694.,
      3949.,  4204.,  5324.,  5688.,  6052.,  6416.,  6853.,  7338.,  7823.,
      8308.,  7705.,  8250.,  8795.,  9340.,  8557.,  9162.,  9767.,  10372.,
      9409.,  10074., 10739., 11404., 8396.,  8952.,  9508.,  10064., 6459.,
      6894.,  7329.,  7764.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700., 12067.,
      12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667., 11422.,
      12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526., 15481.,
      16436., 15023., 16078., 17133., 18188., 9163.,  9758.,  10353., 10948.,
      10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452., 13519.,
      14414., 15309., 16204., 10667., 11422., 12177., 12932., 12119., 12974.,
      13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078., 17133.,
      18188., 9163.,  9758.,  10353., 10948., 10615., 11310., 12005., 12700.,
      12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204., 10667.,
      11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571., 14526.,
      15481., 16436., 15023., 16078., 17133., 18188., 9163.,  9758.,  10353.,
      10948., 10615., 11310., 12005., 12700., 12067., 12862., 13657., 14452.,
      13519., 14414., 15309., 16204., 10667., 11422., 12177., 12932., 12119.,
      12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023., 16078.,
      17133., 18188., 9163.,  9758.,  10353., 10948., 10615., 11310., 12005.,
      12700., 12067., 12862., 13657., 14452., 13519., 14414., 15309., 16204.,
      10667., 11422., 12177., 12932., 12119., 12974., 13829., 14684., 13571.,
      14526., 15481., 16436., 15023., 16078., 17133., 18188., 9163.,  9758.,
      10353., 10948., 10615., 11310., 12005., 12700., 12067., 12862., 13657.,
      14452., 13519., 14414., 15309., 16204., 10667., 11422., 12177., 12932.,
      12119., 12974., 13829., 14684., 13571., 14526., 15481., 16436., 15023.,
      16078., 17133., 18188.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2214., 3720., 3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 2712., 4704.,
      5064., 5608., 6152., 6696., 4704., 4344., 1750., 3208., 3802., 4242.,
      4426., 4354., 3592., 3470., 2214., 3720., 3882., 3938., 4762., 5330.,
      3592., 2878., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 3314., 5816.,
      6590., 6790., 7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790.,
      7246., 7958., 6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 2712., 4704., 5064., 5608., 6152., 6696., 4704., 4344.,
      1750., 3208., 3802., 4242., 4426., 4354., 3592., 3470., 2214., 3720.,
      3882., 3938., 4762., 5330., 3592., 2878., 2712., 4704., 5064., 5608.,
      6152., 6696., 4704., 4344., 3314., 5816., 6590., 6790., 7246., 7958.,
      6200., 5306., 3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306.,
      3314., 5816., 6590., 6790., 7246., 7958., 6200., 5306., 3314., 5816.,
      6590., 6790., 7246., 7958., 6200., 5306., 2712., 4704., 5064., 5608.,
      6152., 6696., 4704., 4344., 1750., 3208., 3802., 4242., 4426., 4354.,
      3592., 3470.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790.,
      7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.,
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790.,
      7246., 7958., 6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.,
      6590., 6790., 7246., 7958., 6590., 6790., 7246., 7958.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056.,
      4872., 5456., 5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056.,
      4152., 4656., 1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292.,
      4382., 4916., 4446., 5028., 3512., 3920., 2946., 3324., 1858., 2092.,
      3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028.,
      3512., 3920., 2946., 3324., 2616., 2928., 4512., 5056., 4872., 5456.,
      5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448.,
      5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456.,
      5384., 6032., 5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656.,
      1858., 2092., 3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916.,
      4446., 5028., 3512., 3920., 2946., 3324., 1858., 2092., 3256., 3664.,
      3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028., 3512., 3920.,
      2946., 3324., 2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032.,
      5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656., 3166., 3556.,
      5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448., 5022., 5652.,
      3166., 3556., 5512., 6192., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 5768., 6448., 5022., 5652., 3166., 3556., 5512., 6192.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 5768., 6448.,
      5022., 5652., 2616., 2928., 4512., 5056., 4872., 5456., 5384., 6032.,
      5896., 6608., 6408., 7184., 4512., 5056., 4152., 4656., 1858., 2092.,
      3256., 3664., 3742., 4180., 3806., 4292., 4382., 4916., 4446., 5028.,
      3512., 3920., 2946., 3324.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308.,
      7330., 8220., 7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220.,
      7650., 8620., 6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620.,
      6178., 6908., 6498., 7308., 7330., 8220., 7650., 8620., 6178., 6908.,
      6498., 7308., 7330., 8220., 7650., 8620.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,  2826., 3204.,
      3582., 3960.,  2424., 2736.,  3048., 3360.,  4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  3030., 3420.,  3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,
      3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,
      5970., 6600.,  2424., 2736.,  3048., 3360.,  4128., 4672.,  5216., 5760.,
      4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,  5384., 6096.,
      6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,  5216., 5760.,
      3768., 4272.,  4776., 5280.,  1818., 2052.,  2286., 2520.,  3096., 3504.,
      3912., 4320.,  3366., 3804.,  4242., 4680.,  3702., 4188.,  4674., 5160.,
      4038., 4572.,  5106., 5640.,  4374., 4956.,  5538., 6120.,  3096., 3504.,
      3912., 4320.,  2826., 3204.,  3582., 3960.,  1818., 2052.,  2286., 2520.,
      3096., 3504.,  3912., 4320.,  3366., 3804.,  4242., 4680.,  3702., 4188.,
      4674., 5160.,  4038., 4572.,  5106., 5640.,  4374., 4956.,  5538., 6120.,
      3096., 3504.,  3912., 4320.,  2826., 3204.,  3582., 3960.,  2424., 2736.,
      3048., 3360.,  4128., 4672.,  5216., 5760.,  4488., 5072.,  5656., 6240.,
      4936., 5584.,  6232., 6880.,  5384., 6096.,  6808., 7520.,  5832., 6608.,
      7384., 8160.,  4128., 4672.,  5216., 5760.,  3768., 4272.,  4776., 5280.,
      3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,
      5970., 6600.,  3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,
      4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,  5160., 5840.,
      6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,
      6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,  2424., 2736.,
      3048., 3360.,  4128., 4672.,  5216., 5760.,  4488., 5072.,  5656., 6240.,
      4936., 5584.,  6232., 6880.,  5384., 6096.,  6808., 7520.,  5832., 6608.,
      7384., 8160.,  4128., 4672.,  5216., 5760.,  3768., 4272.,  4776., 5280.,
      1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,  3366., 3804.,
      4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,  5106., 5640.,
      4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,  2826., 3204.,
      3582., 3960.,  1818., 2052.,  2286., 2520.,  3096., 3504.,  3912., 4320.,
      3366., 3804.,  4242., 4680.,  3702., 4188.,  4674., 5160.,  4038., 4572.,
      5106., 5640.,  4374., 4956.,  5538., 6120.,  3096., 3504.,  3912., 4320.,
      2826., 3204.,  3582., 3960.,  2424., 2736.,  3048., 3360.,  4128., 4672.,
      5216., 5760.,  4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,
      5384., 6096.,  6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,
      5216., 5760.,  3768., 4272.,  4776., 5280.,  3030., 3420.,  3810., 4200.,
      5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,  3030., 3420.,
      3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,  5970., 6600.,
      3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,  5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,  4710., 5340.,
      5970., 6600.,  3030., 3420.,  3810., 4200.,  5160., 5840.,  6520., 7200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5160., 5840.,  6520., 7200.,
      4710., 5340.,  5970., 6600.,  2424., 2736.,  3048., 3360.,  4128., 4672.,
      5216., 5760.,  4488., 5072.,  5656., 6240.,  4936., 5584.,  6232., 6880.,
      5384., 6096.,  6808., 7520.,  5832., 6608.,  7384., 8160.,  4128., 4672.,
      5216., 5760.,  3768., 4272.,  4776., 5280.,  1818., 2052.,  2286., 2520.,
      3096., 3504.,  3912., 4320.,  3366., 3804.,  4242., 4680.,  3702., 4188.,
      4674., 5160.,  4038., 4572.,  5106., 5640.,  4374., 4956.,  5538., 6120.,
      3096., 3504.,  3912., 4320.,  2826., 3204.,  3582., 3960.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,
      6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,
      7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,
      7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,  6170., 6980.,
      7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,  9230., 10200.,
      5610., 6340.,  7070., 7800.,  6170., 6980.,  7790., 8600.,  6730., 7620.,
      8510., 9400.,  7290., 8260.,  9230., 10200., 5610., 6340.,  7070., 7800.,
      6170., 6980.,  7790., 8600.,  6730., 7620.,  8510., 9400.,  7290., 8260.,
      9230., 10200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}