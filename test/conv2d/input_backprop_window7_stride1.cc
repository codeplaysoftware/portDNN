/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;


template <typename Pair>
using InputBackpropWindow7Stride1 = WindowStrideTest<Pair, 7, 1>;
TYPED_TEST_SUITE(InputBackpropWindow7Stride1, GTestTypeTriples);
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  4998.,  6703.,  8583., 10644., 11297., 10269.,  9010.,  7514.,  6124.,  7787.,  9596., 11556., 12132., 10771.,  9212.,  7450.,  5084.,  6126.,  7270.,  8520.,  8970.,  7802.,  6484.,  5012.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,  55.,  65.,  75.,  85.,  56.,  39., 105., 115., 125., 135., 145., 155.,  98.,  67., 175., 185., 195., 205., 215., 225., 140.,  95., 245., 255., 265., 275., 285., 295., 182., 123., 315., 325., 335., 345., 355., 365., 224., 151., 385., 395., 405., 415., 425., 435., 266., 129., 304., 311., 318., 325., 332., 339., 196.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,  102.,  122.,   95.,   64.,  224.,  296.,  368.,  440.,  512.,  584.,  396.,  260.,  728.,  800.,  872.,  944., 1016., 1088.,  704.,  456., 1232., 1304., 1376., 1448., 1520., 1592., 1012.,  652., 1736., 1808., 1880., 1952., 2024., 2096., 1320.,  848., 2240., 2312., 2384., 2456., 2528., 2600., 1628., 1044., 2744., 2816., 2888., 2960., 3032., 3104., 1936.,  941., 2246., 2298., 2350., 2402., 2454., 2506., 1463.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  1876.,  5384.,  5928.,  6472.,  7016.,  7560.,  8104.,  5316.,  3332.,  9192.,  9736., 10280., 10824., 11368., 11912.,  7668.,  4788., 13000., 13544., 14088., 14632., 15176., 15720., 10020.,  6244., 16808., 17352., 17896., 18440., 18984., 19528., 12372.,  7700., 20616., 21160., 21704., 22248., 22792., 23336., 14724.,  7166., 17228., 17628., 18028., 18428., 18828., 19228., 11286.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6800.,  7212.,  8940.,  9470., 11360., 12014., 13528., 14312., 14248., 15074., 12580., 13306., 10520., 11140.,  8856.,  9364.,  6566.,  6904.,  8131.,  8566.,  9919., 10456., 11140., 11784., 11713., 12392.,  9873., 10470.,  7706.,  8216.,  6258.,  6676.,  4176.,  4408.,  5136.,  5436.,  6264.,  6636.,  7536.,  7984.,  8024.,  8500.,  7216.,  7636.,  6176.,  6536.,  4896.,  5192.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   2.,   5.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,  35.,  38.,  26.,  28.,  18.,  22.,  60.,  70.,  80.,  90., 100., 110., 120., 130., 140., 150., 160., 170., 106., 112.,  74.,  78., 200., 210., 220., 230., 240., 250., 260., 270., 280., 290., 300., 310., 190., 196., 130., 134., 340., 350., 360., 370., 380., 390., 400., 410., 420., 430., 440., 450., 274., 280., 186., 190., 480., 490., 500., 510., 520., 530., 540., 550., 560., 570., 580., 590., 358., 364., 242., 246., 620., 630., 640., 650., 660., 670., 680., 690., 700., 710., 720., 730., 442., 448., 298., 302., 760., 770., 780., 790., 800., 810., 820., 830., 840., 850., 860., 870., 526., 532., 255., 258., 601., 608., 615., 622., 629., 636., 643., 650., 657., 664., 671., 678., 388., 392.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   68.,   88.,  108.,  128.,  148.,  168.,  188.,  208.,  228.,  248.,  179.,  193.,  106.,  134.,  392.,  464.,  536.,  608.,  680.,  752.,  824.,  896.,  968., 1040., 1112., 1184.,  758.,  802.,  498.,  526., 1400., 1472., 1544., 1616., 1688., 1760., 1832., 1904., 1976., 2048., 2120., 2192., 1374., 1418.,  890.,  918., 2408., 2480., 2552., 2624., 2696., 2768., 2840., 2912., 2984., 3056., 3128., 3200., 1990., 2034., 1282., 1310., 3416., 3488., 3560., 3632., 3704., 3776., 3848., 3920., 3992., 4064., 4136., 4208., 2606., 2650., 1674., 1702., 4424., 4496., 4568., 4640., 4712., 4784., 4856., 4928., 5000., 5072., 5144., 5216., 3222., 3266., 2066., 2094., 5432., 5504., 5576., 5648., 5720., 5792., 5864., 5936., 6008., 6080., 6152., 6224., 3838., 3882., 1865., 1887., 4452., 4504., 4556., 4608., 4660., 4712., 4764., 4816., 4868., 4920., 4972., 5024., 2903., 2933.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,  1332.,  1476.,  1620.,  1764.,  1318.,  1422.,   700.,   908.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  7144.,  7688.,  8232.,  8776.,  5708.,  6044.,  3612.,  3820., 10408., 10952., 11496., 12040., 12584., 13128., 13672., 14216., 14760., 15304., 15848., 16392., 10412., 10748.,  6524.,  6732., 18024., 18568., 19112., 19656., 20200., 20744., 21288., 21832., 22376., 22920., 23464., 24008., 15116., 15452.,  9436.,  9644., 25640., 26184., 26728., 27272., 27816., 28360., 26344., 26888., 20776., 21320., 21864., 22408., 13164., 13500.,  9788.,  9996., 24040., 24584., 25128., 25672., 26216., 26760., 16552., 17096.,  2792.,  3336.,  3880.,  4424.,  3020.,  3356.,  1948.,  2156.,  6056.,  6600.,  7144.,  7688.,  8232.,  8776.,  9320.,  9864., 10408., 10952., 11496., 12040.,  7724.,  8060.,  3470.,  3638.,  8596.,  8996.,  9396.,  9796., 10196., 10596., 10996., 11396., 11796., 12196., 12596., 12996.,  7574.,  7806.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6468.,  6880.,  7292.,  7704.,  8550.,  9080.,  9610., 10140., 10290., 10944., 11598., 12252., 11936., 12720., 13504., 14288., 12566., 13392., 14218., 15044., 10450., 11176., 11902., 12628.,  8708.,  9328.,  9948., 10568.,  7092.,  7600.,  8108.,  8616.,  5754.,  6092.,  6430.,  6768.,  7091.,  7526.,  7961.,  8396.,  8773.,  9310.,  9847., 10384., 10020., 10664., 11308., 11952., 10555., 11234., 11913., 12592.,  9037.,  9634., 10231., 10828.,  6966.,  7476.,  7986.,  8496.,  5378.,  5796.,  6214.,  6632.,  4632.,  4864.,  5096.,  5328.,  5364.,  5664.,  5964.,  6264.,  6076.,  6448.,  6820.,  7192.,  7008.,  7456.,  7904.,  8352.,  7444.,  7920.,  8396.,  8872.,  6460.,  6880.,  7300.,  7720.,  5080.,  5440.,  5800.,  6160.,  3288.,  3584.,  3880.,  4176.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,   54.,   56.,   32.,   36.,   40.,   44.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,  206.,  212.,  218.,  224.,  144.,  148.,  152.,  156.,  390.,  400.,  410.,  420.,  430.,  440.,  450.,  460.,  470.,  480.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,  610.,  620.,  374.,  380.,  386.,  392.,  256.,  260.,  264.,  268.,  670.,  680.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  890.,  900.,  542.,  548.,  554.,  560.,  368.,  372.,  376.,  380.,  950.,  960.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120., 1130., 1140., 1150., 1160., 1170., 1180.,  710.,  716.,  722.,  728.,  480.,  484.,  488.,  492., 1230., 1240., 1250., 1260., 1270., 1280., 1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380., 1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460.,  878.,  884.,  890.,  896.,  592.,  596.,  600.,  604., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740., 1046., 1052., 1058., 1064.,  507.,  510.,  513.,  516., 1195., 1202., 1209., 1216., 1223., 1230., 1237., 1244., 1251., 1258., 1265., 1272., 1279., 1286., 1293., 1300., 1307., 1314., 1321., 1328., 1335., 1342., 1349., 1356.,  772.,  776.,  780.,  784.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,  1614.,   974.,  1002.,  1030.,  1058.,  2744.,  2816.,  2888.,  2960.,  3032.,  3104.,  3176.,  3248.,  3320.,  3392.,  3464.,  3536.,  3608.,  3680.,  3752.,  3824.,  3896.,  3968.,  4040.,  4112.,  4184.,  4256.,  4328.,  4400.,  2714.,  2758.,  2802.,  2846.,  1758.,  1786.,  1814.,  1842.,  4760.,  4832.,  4904.,  4976.,  5048.,  5120.,  5192.,  5264.,  5336.,  5408.,  5480.,  5552.,  5624.,  5696.,  5768.,  5840.,  5912.,  5984.,  6056.,  6128.,  6200.,  6272.,  6344.,  6416.,  3946.,  3990.,  4034.,  4078.,  2542.,  2570.,  2598.,  2626.,  6776.,  6848.,  6920.,  6992.,  7064.,  7136.,  7208.,  7280.,  7352.,  7424.,  7496.,  7568.,  7640.,  7712.,  7784.,  7856.,  7928.,  8000.,  8072.,  8144.,  8216.,  8288.,  8360.,  8432.,  5178.,  5222.,  5266.,  5310.,  3326.,  3354.,  3382.,  3410.,  8792.,  8864.,  8936.,  9008.,  9080.,  9152.,  9224.,  9296.,  9368.,  9440.,  9512.,  9584.,  9656.,  9728.,  9800.,  9872.,  9944., 10016., 10088., 10160., 10232., 10304., 10376., 10448.,  6410.,  6454.,  6498.,  6542.,  4110.,  4138.,  4166.,  4194., 10808., 10880., 10952., 11024., 11096., 11168., 11240., 11312., 11384., 11456., 11528., 11600., 11672., 11744., 11816., 11888., 11960., 12032., 12104., 12176., 12248., 12320., 12392., 12464.,  7642.,  7686.,  7730.,  7774.,  3713.,  3735.,  3757.,  3779.,  8864.,  8916.,  8968.,  9020.,  9072.,  9124.,  9176.,  9228.,  9280.,  9332.,  9384.,  9436.,  9488.,  9540.,  9592.,  9644.,  9696.,  9748.,  9800.,  9852.,  9904.,  9956., 10008., 10060.,  5783.,  5813.,  5843.,  5873.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  2564.,  2708.,  2852.,  2996.,  3140.,  3284.,  3428.,  3572.,  2566.,  2670.,  2774.,  2878.,  1260.,  1468.,  1676.,  1884.,  5224.,  5768.,  6312.,  6856.,  7400.,  7944.,  8488.,  9032.,  9576., 10120., 10664., 11208., 11752., 12296., 12840., 13384., 13928., 14472., 15016., 15560., 16104., 16648., 17192., 17736., 11196., 11532., 11868., 12204.,  7084.,  7292.,  7500.,  7708., 20456., 21000., 21544., 22088., 20072., 20616., 21160., 21704., 15592., 16136., 16680., 17224., 17768., 18312., 18856., 19400., 19944., 20488., 21032., 21576., 22120., 22664., 23208., 23752., 13948., 14284., 14620., 14956., 10348., 10556., 10764., 10972., 26472., 27016., 27560., 28104., 17896., 18440., 18984., 19528.,  5224.,  5768.,  6312.,  6856.,  7400.,  7944.,  8488.,  9032.,  9576., 10120., 10664., 11208., 11752., 12296., 12840., 13384.,  8508.,  8844.,  9180.,  9516.,  5420.,  5628.,  5836.,  6044., 16104., 16648., 17192., 17736., 18280., 18824., 19368., 19912., 20456., 21000., 21544., 22088., 20072., 20616., 21160., 21704., 15592., 16136., 16680., 17224., 17768., 18312., 18856., 19400., 11260., 11596., 11932., 12268.,  8684.,  8892.,  9100.,  9308., 22120., 22664., 23208., 23752., 24296., 24840., 25384., 25928., 26472., 27016., 27560., 28104., 17896., 18440., 18984., 19528.,  5224.,  5768.,  6312.,  6856.,  7400.,  7944.,  8488.,  9032.,  5820.,  6156.,  6492.,  6828.,  3756.,  3964.,  4172.,  4380., 11752., 12296., 12840., 13384., 13928., 14472., 15016., 15560., 16104., 16648., 17192., 17736., 18280., 18824., 19368., 19912., 20456., 21000., 21544., 22088., 20072., 20616., 21160., 21704.,  8572.,  8908.,  9244.,  9580.,  6830.,  6998.,  7166.,  7334., 16932., 17332., 17732., 18132., 18532., 18932., 19332., 19732., 20132., 20532., 20932., 21332., 21732., 22132., 22532., 22932., 23332., 23732., 24132., 24532., 14180., 14580., 14980., 15380.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  5920.,  7659.,  9440., 11365., 11378., 11807., 10412.,  8785.,  6920.,  6462.,  7920.,  9165., 10522., 10010., 10138.,  8617.,  6900.,  4982.,  4576.,  5106.,  5728.,  6446.,  6000.,  6450.,  5528.,  4462.,  3248.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,  10.,  16.,  22.,  28.,  34.,  32.,  21.,  12.,  38.,  80., 101., 122., 143., 164., 138.,  84.,  47., 122., 227., 248., 269., 290., 311., 250., 147.,  82., 206., 374., 395., 416., 437., 458., 362., 210., 117., 290., 521., 542., 563., 584., 605., 474., 273., 152., 374., 668., 689., 710., 731., 752., 586., 336., 187., 458., 815., 836., 857., 878., 899., 698., 399., 172., 391., 658., 673., 688., 703., 718., 533., 294.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192., 14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167.,  9684.,  9552., 11756., 14296., 16596., 16108., 16996., 14360., 12348.,  9680.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  185.,  227.,  222.,  149.,   70.,  244.,  538.,  694.,  850., 1006., 1162.,  996.,  614.,  322.,  860., 1630., 1786., 1942., 2098., 2254., 1836., 1090.,  574., 1476., 2722., 2878., 3034., 3190., 3346., 2676., 1566.,  826., 2092., 3814., 3970., 4126., 4282., 4438., 3516., 2042., 1078., 2708., 4906., 5062., 5218., 5374., 5530., 4356., 2518., 1330., 3324., 5998., 6154., 6310., 6466., 6622., 5196., 2994., 1283., 2938., 4973., 5087., 5201., 5315., 5429., 4050., 2243.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  6672., 10228., 10424., 12764., 11340., 13404., 10008.,  8916.,  6672.,  6200.,  7542.,  9636.,  9218., 11034., 10450.,  9636.,  6566.,  6200.,  4448.,  5944.,  6672.,  8936.,  7784.,  8424.,  6672.,  6456.,  4448.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,  2364.,  6424., 12308., 13508., 14708., 15908., 17108., 14040.,  8380.,  4268., 11128., 20708., 21908., 23108., 24308., 25508., 20536., 12076.,  6172., 15832., 29108., 30308., 30228., 28100., 23924., 18328., 10396.,  6796., 15928., 27524., 28724., 22500., 14228.,  3908.,  3832.,  2572.,  1276.,  3736.,  7508.,  8708.,  9908., 11108., 12308., 10328.,  6268.,  2470.,  5852., 10210., 11098., 11986., 12874., 13762., 10556.,  5990.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7096.,  7520.,  8957.,  9494., 10864., 11488., 12381., 13098., 11885., 12580., 12189., 12894., 10140., 10744.,  7697.,  8194.,  5872.,  6256.,  6406.,  6748.,  8176.,  8608.,  9483.,  9978., 10049., 10612.,  9534., 10068.,  9243.,  9780.,  7497.,  7954.,  5428.,  5800.,  4338.,  4620.,  4576.,  4800.,  5322.,  5604.,  6216.,  6560.,  7106.,  7516.,  6858.,  7264.,  7346.,  7780.,  6480.,  6864.,  5394.,  5724.,  4080.,  4352.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,   64.,   76.,  139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,  307.,  328.,  260.,  276.,  159.,  168.,   89.,   94.,  232.,  244.,  433.,  454.,  475.,  496.,  517.,  538.,  559.,  580.,  601.,  622.,  484.,  500.,  285.,  294.,  159.,  164.,  400.,  412.,  727.,  748.,  769.,  790.,  811.,  832.,  853.,  874.,  895.,  916.,  708.,  724.,  411.,  420.,  229.,  234.,  568.,  580., 1021., 1042., 1063., 1084., 1105., 1126., 1147., 1168., 1189., 1210.,  932.,  948.,  537.,  546.,  299.,  304.,  736.,  748., 1315., 1336., 1357., 1378., 1399., 1420., 1441., 1462., 1483., 1504., 1156., 1172.,  663.,  672.,  369.,  374.,  904.,  916., 1609., 1630., 1651., 1672., 1693., 1714., 1735., 1756., 1777., 1798., 1380., 1396.,  789.,  798.,  340.,  344.,  773.,  782., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436., 1055., 1066.,  582.,  588.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 13976., 15528., 16524., 18456., 17420., 19652., 20440., 23020., 19940., 22472., 20304., 22916., 15268., 17468., 12556., 14424., 10184., 11672., 13144., 14560., 15503., 17245., 17264., 19244., 17835., 20093., 17709., 19863., 18191., 20369., 14516., 16320., 10047., 11565.,  7264.,  8456.,  8912.,  9904., 11440., 12632., 12600., 14024., 13480., 15168., 12528., 14184., 14232., 15984., 12936., 14424., 11024., 12344.,  8080.,  9200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,   112.,   148.,   420.,   508.,   956.,  1112.,  1268.,  1424.,  1580.,  1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,   616.,   652.,  1652.,  1740.,  3140.,  3296.,  3452.,  3608.,  3764.,  3920.,  4076.,  4232.,  4388.,  4544.,  3580.,  3700.,  2128.,  2196.,  1120.,  1156.,  2884.,  2972.,  5324.,  5480.,  5636.,  5792.,  5948.,  6104.,  6260.,  6416.,  6572.,  6728.,  5260.,  5380.,  3080.,  3148.,  1624.,  1660.,  4116.,  4204.,  7508.,  7664.,  7820.,  7976.,  8132.,  8288.,  8444.,  8600.,  8756.,  8912.,  6940.,  7060.,  4032.,  4100.,  2128.,  2164.,  5348.,  5436.,  9692.,  9848., 10004., 10160., 10316., 10472., 10628., 10784., 10940., 11096.,  8620.,  8740.,  4984.,  5052.,  2632.,  2668.,  6580.,  6668., 11876., 12032., 12188., 12344., 12500., 12656., 12812., 12968., 13124., 13280., 10300., 10420.,  5936.,  6004.,  2543.,  2573.,  5824.,  5892.,  9859.,  9973., 10087., 10201., 10315., 10429., 10543., 10657., 10771., 10885.,  8036.,  8120.,  4451.,  4497.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  4656.,  7920.,  7948., 12156.,  7064., 12088., 10964., 16676.,  7940., 13524., 10708., 16420.,  7320., 12344.,  7948., 12156.,  4656.,  7920.,  5160.,  7880.,  4806.,  8302.,  7868., 11948.,  6538., 11266.,  8674., 13338.,  6874., 11730.,  7948., 12156.,  4806.,  8302.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1826.,  2138.,  2450.,  2762.,  3074.,  3386.,  3108.,  3380.,  2126.,  2294.,   740.,  1012.,  3000.,  3672.,  7036.,  8236.,  9436., 10636., 11836., 13036., 14236., 15436., 16636., 17836., 14488., 15416.,  9028.,  9556.,  4548.,  4820., 12408., 13080., 22556., 23756., 21628., 22828., 18652., 19852., 21052., 22252., 23452., 24652., 18776., 19704., 11044., 11572.,  7076.,  7348., 17208., 17880., 23228., 24428., 16156., 17356.,  7036.,  8236.,  9436., 10636., 11836., 13036., 10776., 11704.,  6916.,  7444.,  3460.,  3732.,  9720., 10392., 19036., 20236., 21436., 22636., 22556., 23756., 21628., 22828., 18652., 19852., 15064., 15992.,  8932.,  9460.,  5988.,  6260., 14520., 15192., 25852., 27052., 28252., 29452., 23228., 24428., 16156., 17356.,  7036.,  8236.,  7064.,  7992.,  4804.,  5332.,  2372.,  2644.,  7032.,  7704., 14236., 15436., 16636., 17836., 19036., 20236., 21436., 22636., 22556., 23756., 16728., 17656.,  6820.,  7348.,  4790.,  5022., 11364., 11892., 19850., 20738., 21626., 22514., 23402., 24290., 25178., 26066., 19530., 20418., 11220., 11876.,   230.,   590.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7112.,  7536.,  7960.,  8384.,  9217.,  9754., 10291., 10828., 10448., 11072., 11696., 12320., 11373., 12090., 12807., 13524., 10659., 11354., 12049., 12744., 10489., 11194., 11899., 12604.,  8092.,  8696.,  9300.,  9904.,  6321.,  6818.,  7315.,  7812.,  4896.,  5280.,  5664.,  6048.,  5814.,  6156.,  6498.,  6840.,  7280.,  7712.,  8144.,  8576.,  8647.,  9142.,  9637., 10132.,  9327.,  9890., 10453., 11016.,  8774.,  9308.,  9842., 10376.,  8637.,  9174.,  9711., 10248.,  6857.,  7314.,  7771.,  8228.,  4532.,  4904.,  5276.,  5648.,  2954.,  3236.,  3518.,  3800.,  3936.,  4160.,  4384.,  4608.,  4922.,  5204.,  5486.,  5768.,  5688.,  6032.,  6376.,  6720.,  6506.,  6916.,  7326.,  7736.,  6526.,  6932.,  7338.,  7744.,  6962.,  7396.,  7830.,  8264.,  6240.,  6624.,  7008.,  7392.,  5146.,  5476.,  5806.,  6136.,  3664.,  3936.,  4208.,  4480.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   94.,  100.,  106.,  112.,  118.,  124.,  130.,  136.,  113.,  118.,  123.,  128.,   75.,   78.,   81.,   84.,   33.,   38.,   43.,   48.,  116.,  128.,  140.,  152.,  257.,  278.,  299.,  320.,  341.,  362.,  383.,  404.,  425.,  446.,  467.,  488.,  509.,  530.,  551.,  572.,  593.,  614.,  635.,  656.,  504.,  520.,  536.,  552.,  309.,  318.,  327.,  336.,  173.,  178.,  183.,  188.,  452.,  464.,  476.,  488.,  845.,  866.,  887.,  908.,  929.,  950.,  971.,  992., 1013., 1034., 1055., 1076., 1097., 1118., 1139., 1160., 1181., 1202., 1223., 1244.,  952.,  968.,  984., 1000.,  561.,  570.,  579.,  588.,  313.,  318.,  323.,  328.,  788.,  800.,  812.,  824., 1433., 1454., 1475., 1496., 1517., 1538., 1559., 1580., 1601., 1622., 1643., 1664., 1685., 1706., 1727., 1748., 1769., 1790., 1811., 1832., 1400., 1416., 1432., 1448.,  813.,  822.,  831.,  840.,  453.,  458.,  463.,  468., 1124., 1136., 1148., 1160., 2021., 2042., 2063., 2084., 2105., 2126., 2147., 2168., 2189., 2210., 2231., 2252., 2273., 2294., 2315., 2336., 2357., 2378., 2399., 2420., 1848., 1864., 1880., 1896., 1065., 1074., 1083., 1092.,  593.,  598.,  603.,  608., 1460., 1472., 1484., 1496., 2609., 2630., 2651., 2672., 2693., 2714., 2735., 2756., 2777., 2798., 2819., 2840., 2861., 2882., 2903., 2924., 2945., 2966., 2987., 3008., 2296., 2312., 2328., 2344., 1317., 1326., 1335., 1344.,  733.,  738.,  743.,  748., 1796., 1808., 1820., 1832., 3197., 3218., 3239., 3260., 3281., 3302., 3323., 3344., 3365., 3386., 3407., 3428., 3449., 3470., 3491., 3512., 3533., 3554., 3575., 3596., 2744., 2760., 2776., 2792., 1569., 1578., 1587., 1596.,  676.,  680.,  684.,  688., 1537., 1546., 1555., 1564., 2587., 2602., 2617., 2632., 2647., 2662., 2677., 2692., 2707., 2722., 2737., 2752., 2767., 2782., 2797., 2812., 2827., 2842., 2857., 2872., 2099., 2110., 2121., 2132., 1158., 1164., 1170., 1176.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2264., 3176., 4088., 5000., 3344., 4444., 5544., 6644., 3132., 4404., 5676., 6948., 4380., 5808., 7236., 8664., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 2996., 4172., 5348., 6524., 2864., 3836., 4808., 5780., 2040., 2824., 3608., 4392., 2368., 3144., 3920., 4696., 2135., 3045., 3955., 4865., 3156., 4176., 5196., 6216., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 2864., 3836., 4808., 5780., 2063., 2877., 3691., 4505., 1912., 2592., 3272., 3952., 1424., 2032., 2640., 3248., 2168., 2848., 3528., 4208., 1912., 2696., 3480., 4264., 2832., 3752., 4672., 5592., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2040., 2824., 3608., 4392., 1912., 2592., 3272., 3952., 1680., 2288., 2896., 3504.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,   935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,   196.,   232.,   268.,   304.,   772.,   860.,   948.,  1036.,  1792.,  1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,  3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,  4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,  1204.,  1240.,  1276.,  1312.,  3236.,  3324.,  3412.,  3500.,  6160.,  6316.,  6472.,  6628.,  6784.,  6940.,  7096.,  7252.,  7408.,  7564.,  7720.,  7876.,  8032.,  8188.,  8344.,  8500.,  8656.,  8812.,  8968.,  9124.,  7068.,  7188.,  7308.,  7428.,  4204.,  4272.,  4340.,  4408.,  2212.,  2248.,  2284.,  2320.,  5700.,  5788.,  5876.,  5964., 10528., 10684., 10840., 10996., 11152., 11308., 11464., 11620., 11776., 11932., 12088., 12244., 12400., 12556., 12712., 12868., 13024., 13180., 13336., 13492., 10428., 10548., 10668., 10788.,  6108.,  6176.,  6244.,  6312.,  3220.,  3256.,  3292.,  3328.,  8164.,  8252.,  8340.,  8428., 14896., 15052., 15208., 15364., 15520., 15676., 15832., 15988., 16144., 16300., 16456., 16612., 16768., 16924., 17080., 17236., 17392., 17548., 17704., 17860., 13788., 13908., 14028., 14148.,  8012.,  8080.,  8148.,  8216.,  4228.,  4264.,  4300.,  4336., 10628., 10716., 10804., 10892., 19264., 19420., 19576., 19732., 19888., 20044., 20200., 20356., 20512., 20668., 20824., 20980., 21136., 21292., 21448., 21604., 21760., 21916., 22072., 22228., 17148., 17268., 17388., 17508.,  9916.,  9984., 10052., 10120.,  5236.,  5272.,  5308.,  5344., 13092., 13180., 13268., 13356., 23632., 23788., 23944., 24100., 24256., 24412., 24568., 24724., 24880., 25036., 25192., 25348., 25504., 25660., 25816., 25972., 26128., 26284., 26440., 26596., 20508., 20628., 20748., 20868., 11820., 11888., 11956., 12024.,  5063.,  5093.,  5123.,  5153., 11596., 11664., 11732., 11800., 19631., 19745., 19859., 19973., 20087., 20201., 20315., 20429., 20543., 20657., 20771., 20885., 20999., 21113., 21227., 21341., 21455., 21569., 21683., 21797., 16008., 16092., 16176., 16260.,  8867.,  8913.,  8959.,  9005.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2700.,  6780., 10860., 14940.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2780.,  6988., 11196., 15404.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2194.,  2506.,  2818.,  3130.,  3442.,  3754.,  4066.,  4378.,  4690.,  5002.,  5314.,  5626.,  5938.,  6250.,  6562.,  6874.,  6036.,  6308.,  6580.,  6852.,  4142.,  4310.,  4478.,  4646.,  1300.,  1572.,  1844.,  2116.,  4280.,  4952.,  5624.,  6296.,  8684.,  9884., 11084., 12284.,  8108.,  9308., 10508., 11708., 12908., 14108., 15308., 16508., 17708., 18908., 20108., 21308., 22508., 23708., 24908., 26108., 19672., 20600., 21528., 22456., 12340., 12868., 13396., 13924.,  7636.,  7908.,  8180.,  8452., 12344., 13016., 13688., 14360., 18732., 19932., 21132., 22332.,  8684.,  9884., 11084., 12284.,  8108.,  9308., 10508., 11708., 12908., 14108., 15308., 16508., 17708., 18908., 20108., 21308., 15960., 16888., 17816., 18744., 10228., 10756., 11284., 11812.,  6548.,  6820.,  7092.,  7364., 17080., 17752., 18424., 19096., 24684., 25884., 27084., 28284., 18732., 19932., 21132., 22332.,  8684.,  9884., 11084., 12284.,  8108.,  9308., 10508., 11708., 12908., 14108., 15308., 16508., 12248., 13176., 14104., 15032.,  8116.,  8644.,  9172.,  9700.,  5460.,  5732.,  6004.,  6276., 14392., 15064., 15736., 16408., 27308., 28508., 29708., 30908., 24684., 25884., 27084., 28284., 18732., 19932., 21132., 22332.,  8684.,  9884., 11084., 12284.,  8108.,  9308., 10508., 11708.,  8536.,  9464., 10392., 11320.,  6004.,  6532.,  7060.,  7588.,  4372.,  4644.,  4916.,  5188., 11704., 12376., 13048., 13720., 22508., 23708., 24908., 26108., 27308., 28508., 29708., 30908., 24684., 25884., 27084., 28284., 18732., 19932., 21132., 22332.,  8684.,  9884., 11084., 12284.,  4824.,  5752.,  6680.,  7608.,  3892.,  4420.,  4948.,  5476.,  3284.,  3556.,  3828.,  4100.,  9016.,  9688., 10360., 11032., 17708., 18908., 20108., 21308., 22508., 23708., 24908., 26108., 27308., 28508., 29708., 30908., 24684., 25884., 27084., 28284., 18732., 19932., 21132., 22332.,  6488.,  7416.,  8344.,  9272.,  1780.,  2308.,  2836.,  3364.,  2006.,  2238.,  2470.,  2702.,  5492.,  6020.,  6548.,  7076., 10714., 11602., 12490., 13378., 14266., 15154., 16042., 16930., 17818., 18706., 19594., 20482., 21370., 22258., 23146., 24034., 17498., 18386., 19274., 20162., 10500., 11156., 11812., 12468.,   230.,   590.,   950.,  1310.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7066.,  8487., 10041., 11734., 11523., 11248., 11261.,  9435.,  8080.,  6518.,  7024.,  7701.,  8478.,  9360.,  8624.,  7824.,  7536.,  5791.,  4780.,  3602.,  5476.,  5334.,  5274.,  5300.,  4726.,  5144.,  5530.,  4982.,  4392.,  3660.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,   13.,   41.,   86.,  150.,  186.,  222.,  258.,  239.,  191.,  112.,   55.,  139.,  254.,  402.,  438.,  474.,  510.,  449.,  345.,  196.,   97.,  237.,  422.,  654.,  690.,  726.,  762.,  659.,  499.,  280.,  139.,  335.,  590.,  906.,  942.,  978., 1014.,  869.,  653.,  364.,  181.,  433.,  758., 1158., 1194., 1230., 1266., 1079.,  807.,  448.,  223.,  531.,  926., 1410., 1446., 1482., 1518., 1289.,  961.,  532.,  215.,  478.,  790., 1152., 1178., 1204., 1230., 1006.,  727.,  392.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807., 19033., 19571., 19949., 15646., 11955.,  9476., 12992., 14416., 16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   384.,   992.,  1840.,  2944.,  3216.,  3488.,  3760.,  3340.,  2584.,  1476.,   692.,  1720.,  3100.,  4848.,  5120.,  5392.,  5664.,  4936.,  3760.,  2120.,  1000.,  2448.,  4360.,  6752.,  7024.,  7296.,  7568.,  6532.,  4936.,  2764.,  1308.,  3176.,  5620.,  8656.,  8928.,  9200.,  9472.,  8128.,  6112.,  3408.,  1616.,  3904.,  6880., 10560., 10832., 11104., 11376.,  9724.,  7288.,  4052.,  1625.,  3630.,  6023.,  8812.,  9012.,  9212.,  9412.,  7721.,  5594.,  3023.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1864.,  4220.,  7696.,  9808., 11920., 14032., 13292., 10792.,  6404.,  2852.,  7464., 13324., 20176., 19600., 18000., 20112., 17660., 13576.,  7732.,  4564., 10760., 13980., 18064., 13392.,  7696.,  9808.,  9740.,  8168.,  4964.,  2180.,  5864., 11180., 18256., 19728., 20176., 19600., 14108., 10952.,  6292.,  3892.,  9160., 15932., 24336., 21712., 18064., 13392.,  6188.,  5544.,  3524.,  1508.,  4264.,  8396., 14032., 16144., 18256., 19728., 16956., 12040.,  4852.,  3150.,  7276., 12442., 18712., 20280., 21848., 18680., 14002.,  7900.,   310.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  7840.,  8276.,  8750.,  9262.,  9856., 10450., 11522., 12204., 11602., 12262., 11554., 12192., 12050., 12698., 10516., 11062.,  8938.,  9408.,  7240.,  7628.,  6694.,  7040.,  7549.,  7946.,  8535.,  8988.,  8670.,  9184.,  7707.,  8192.,  7640.,  8096.,  7541.,  8000.,  5761.,  6142.,  4462.,  4792.,  3442.,  3716.,  5680.,  5960.,  5892.,  6220.,  6232.,  6612.,  6420.,  6856.,  5916.,  6348.,  6372.,  6800.,  6764.,  7188.,  6128.,  6476.,  5444.,  5744.,  4544.,  4792.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,   95.,  104.,   83.,   90.,   52.,   56.,   20.,   26.,   68.,   82.,  148.,  172.,  264.,  300.,  336.,  372.,  408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,  104.,  110.,  264.,  278.,  484.,  508.,  768.,  804.,  840.,  876.,  912.,  948.,  984., 1020.,  868.,  898.,  668.,  690.,  380.,  392.,  188.,  194.,  460.,  474.,  820.,  844., 1272., 1308., 1344., 1380., 1416., 1452., 1488., 1524., 1288., 1318.,  976.,  998.,  548.,  560.,  272.,  278.,  656.,  670., 1156., 1180., 1776., 1812., 1848., 1884., 1920., 1956., 1992., 2028., 1708., 1738., 1284., 1306.,  716.,  728.,  356.,  362.,  852.,  866., 1492., 1516., 2280., 2316., 2352., 2388., 2424., 2460., 2496., 2532., 2128., 2158., 1592., 1614.,  884.,  896.,  440.,  446., 1048., 1062., 1828., 1852., 2784., 2820., 2856., 2892., 2928., 2964., 3000., 3036., 2548., 2578., 1900., 1922., 1052., 1064.,  425.,  430.,  945.,  956., 1562., 1580., 2278., 2304., 2330., 2356., 2382., 2408., 2434., 2460., 1991., 2012., 1439., 1454.,  776.,  784.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15040., 16688., 16902., 18890., 17512., 19888., 20166., 22978., 22322., 25214., 22846., 25690., 23210., 26134., 18072., 20576., 14474., 16638., 12096., 13872., 13904., 15352., 15997., 17715., 17476., 19504., 17525., 19903., 17751., 20153., 18649., 20947., 19131., 21453., 15436., 17400., 11235., 12929.,  7728.,  9112., 11680., 12864., 13252., 14684., 14960., 16672., 15972., 17996., 15884., 18004., 16980., 19068., 17564., 19620., 14928., 16640., 11772., 13236.,  7424.,  8608.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   448.,   552.,  1022.,  1202.,  1872.,  2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,  2688.,  2856.,  1594.,  1686.,   734.,   778.,  1904.,  2008.,  3542.,  3722.,  5680.,  5952.,  6224.,  6496.,  6768.,  7040.,  7312.,  7584.,  6506.,  6734.,  5040.,  5208.,  2882.,  2974.,  1350.,  1394.,  3360.,  3464.,  6062.,  6242.,  9488.,  9760., 10032., 10304., 10576., 10848., 11120., 11392.,  9698.,  9926.,  7392.,  7560.,  4170.,  4262.,  1966.,  2010.,  4816.,  4920.,  8582.,  8762., 13296., 13568., 13840., 14112., 14384., 14656., 14928., 15200., 12890., 13118.,  9744.,  9912.,  5458.,  5550.,  2582.,  2626.,  6272.,  6376., 11102., 11282., 17104., 17376., 17648., 17920., 18192., 18464., 18736., 19008., 16082., 16310., 12096., 12264.,  6746.,  6838.,  3198.,  3242.,  7728.,  7832., 13622., 13802., 20912., 21184., 21456., 21728., 22000., 22272., 22544., 22816., 19274., 19502., 14448., 14616.,  8034.,  8126.,  3221.,  3259.,  7196.,  7280., 11941., 12079., 17472., 17672., 17872., 18072., 18272., 18472., 18672., 18872., 15319., 15481., 11100., 11216.,  5999.,  6061.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2440.,  2984.,  3528.,  4072.,  4616.,  5160.,  5114.,  5618.,  4596.,  4996.,  2934.,  3166.,   780.,  1116.,  2568.,  3368.,  5236.,  6628.,  9040., 11152.,  9552., 11664., 13776., 15888., 18000., 20112., 17380., 19156., 14344., 15656.,  8636.,  9356.,  4844.,  5180.,  7368.,  8168., 10900., 12292., 15312., 17424.,  9040., 11152.,  9552., 11664., 13776., 15888., 13828., 15604., 11720., 13032.,  7196.,  7916.,  4172.,  4508., 10504., 11304., 14516., 15908., 19536., 21648., 15312., 17424.,  9040., 11152.,  9552., 11664., 10276., 12052.,  9096., 10408.,  5756.,  6476.,  3500.,  3836.,  8904.,  9704., 16468., 17860., 21712., 23824., 19536., 21648., 15312., 17424.,  9040., 11152.,  6724.,  8500.,  6472.,  7784.,  4316.,  5036.,  2828.,  3164.,  7304.,  8104., 13684., 15076., 22224., 24336., 21712., 23824., 19536., 21648., 15312., 17424.,  6884.,  8660.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  5704.,  6504., 10900., 12292., 18000., 20112., 22224., 24336., 21712., 23824., 19536., 21648., 13828., 15604.,  4936.,  6248.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  6914.,  7994., 11336., 12904., 14472., 16040., 17608., 19176., 16008., 17576., 12602., 13874.,  7412.,  8324.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  7628.,  8064.,  8500.,  8936.,  8444.,  8956.,  9468.,  9980.,  8558.,  9152.,  9746., 10340.,  9306.,  9988., 10670., 11352.,  9744., 10404., 11064., 11724.,  9926., 10564., 11202., 11840., 10140., 10788., 11436., 12084.,  8230.,  8776.,  9322.,  9868.,  6846.,  7316.,  7786.,  8256.,  5132.,  5520.,  5908.,  6296.,  6770.,  7116.,  7462.,  7808.,  7181.,  7578.,  7975.,  8372.,  7497.,  7950.,  8403.,  8856.,  7002.,  7516.,  8030.,  8544.,  6577.,  7062.,  7547.,  8032.,  6920.,  7376.,  7832.,  8288.,  7167.,  7626.,  8085.,  8544.,  5893.,  6274.,  6655.,  7036.,  4626.,  4956.,  5286.,  5616.,  3474.,  3748.,  4022.,  4296.,  5608.,  5888.,  6168.,  6448.,  6208.,  6536.,  6864.,  7192.,  6388.,  6768.,  7148.,  7528.,  6452.,  6888.,  7324.,  7760.,  5960.,  6392.,  6824.,  7256.,  6364.,  6792.,  7220.,  7648.,  6640.,  7064.,  7488.,  7912.,  5764.,  6112.,  6460.,  6808.,  4828.,  5128.,  5428.,  5728.,  3528.,  3776.,  4024.,  4272.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  181.,  190.,  199.,  208.,  159.,  166.,  173.,  180.,  100.,  104.,  108.,  112.,   34.,   40.,   46.,   52.,  122.,  136.,  150.,  164.,  272.,  296.,  320.,  344.,  492.,  528.,  564.,  600.,  636.,  672.,  708.,  744.,  780.,  816.,  852.,  888.,  924.,  960.,  996., 1032.,  866.,  896.,  926.,  956.,  698.,  720.,  742.,  764.,  412.,  424.,  436.,  448.,  202.,  208.,  214.,  220.,  514.,  528.,  542.,  556.,  944.,  968.,  992., 1016., 1500., 1536., 1572., 1608., 1644., 1680., 1716., 1752., 1788., 1824., 1860., 1896., 1932., 1968., 2004., 2040., 1706., 1736., 1766., 1796., 1314., 1336., 1358., 1380.,  748.,  760.,  772.,  784.,  370.,  376.,  382.,  388.,  906.,  920.,  934.,  948., 1616., 1640., 1664., 1688., 2508., 2544., 2580., 2616., 2652., 2688., 2724., 2760., 2796., 2832., 2868., 2904., 2940., 2976., 3012., 3048., 2546., 2576., 2606., 2636., 1930., 1952., 1974., 1996., 1084., 1096., 1108., 1120.,  538.,  544.,  550.,  556., 1298., 1312., 1326., 1340., 2288., 2312., 2336., 2360., 3516., 3552., 3588., 3624., 3660., 3696., 3732., 3768., 3804., 3840., 3876., 3912., 3948., 3984., 4020., 4056., 3386., 3416., 3446., 3476., 2546., 2568., 2590., 2612., 1420., 1432., 1444., 1456.,  706.,  712.,  718.,  724., 1690., 1704., 1718., 1732., 2960., 2984., 3008., 3032., 4524., 4560., 4596., 4632., 4668., 4704., 4740., 4776., 4812., 4848., 4884., 4920., 4956., 4992., 5028., 5064., 4226., 4256., 4286., 4316., 3162., 3184., 3206., 3228., 1756., 1768., 1780., 1792.,  874.,  880.,  886.,  892., 2082., 2096., 2110., 2124., 3632., 3656., 3680., 3704., 5532., 5568., 5604., 5640., 5676., 5712., 5748., 5784., 5820., 5856., 5892., 5928., 5964., 6000., 6036., 6072., 5066., 5096., 5126., 5156., 3778., 3800., 3822., 3844., 2092., 2104., 2116., 2128.,  845.,  850.,  855.,  860., 1879., 1890., 1901., 1912., 3106., 3124., 3142., 3160., 4530., 4556., 4582., 4608., 4634., 4660., 4686., 4712., 4738., 4764., 4790., 4816., 4842., 4868., 4894., 4920., 3961., 3982., 4003., 4024., 2863., 2878., 2893., 2908., 1544., 1552., 1560., 1568.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2432., 3312., 4192., 5072., 2938., 3966., 4994., 6022., 3384., 4608., 5832., 7056., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3384., 4608., 5832., 7056., 3070., 4146., 5222., 6298., 2432., 3312., 4192., 5072., 1848., 2528., 3208., 3888., 2197., 3019., 3841., 4663., 2728., 3732., 4736., 5740., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3000., 4068., 5136., 6204., 2403., 3329., 4255., 5181., 2088., 2832., 3576., 4320., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   904.,   976.,  1048.,  1120.,  1192.,  1264.,  1336.,  1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,   743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   816.,   920.,  1024.,  1128.,  1906.,  2086.,  2266.,  2446.,  3536.,  3808.,  4080.,  4352.,  4624.,  4896.,  5168.,  5440.,  5712.,  5984.,  6256.,  6528.,  6800.,  7072.,  7344.,  7616.,  6454.,  6682.,  6910.,  7138.,  5248.,  5416.,  5584.,  5752.,  3118.,  3210.,  3302.,  3394.,  1434.,  1478.,  1522.,  1566.,  3728.,  3832.,  3936.,  4040.,  6946.,  7126.,  7306.,  7486., 11152., 11424., 11696., 11968., 12240., 12512., 12784., 13056., 13328., 13600., 13872., 14144., 14416., 14688., 14960., 15232., 12838., 13066., 13294., 13522.,  9952., 10120., 10288., 10456.,  5694.,  5786.,  5878.,  5970.,  2666.,  2710.,  2754.,  2798.,  6640.,  6744.,  6848.,  6952., 11986., 12166., 12346., 12526., 18768., 19040., 19312., 19584., 19856., 20128., 20400., 20672., 20944., 21216., 21488., 21760., 22032., 22304., 22576., 22848., 19222., 19450., 19678., 19906., 14656., 14824., 14992., 15160.,  8270.,  8362.,  8454.,  8546.,  3898.,  3942.,  3986.,  4030.,  9552.,  9656.,  9760.,  9864., 17026., 17206., 17386., 17566., 26384., 26656., 26928., 27200., 26704., 26976., 27248., 27520., 26000., 26272., 26544., 26816., 24272., 24544., 24816., 25088., 17158., 17386., 17614., 17842., 12704., 12872., 13040., 13208.,  7006.,  7098.,  7190.,  7282.,  4362.,  4406.,  4450.,  4494.,  9904., 10008., 10112., 10216., 16690., 16870., 17050., 17230., 24784., 25056., 25328., 25600., 21008., 21280., 21552., 21824., 16208., 16480., 16752., 17024., 10384., 10656., 10928., 11200.,  2806.,  3034.,  3262.,  3490.,  2560.,  2728.,  2896.,  3064.,  1646.,  1738.,  1830.,  1922.,   730.,   774.,   818.,   862.,  2064.,  2168.,  2272.,  2376.,  4066.,  4246.,  4426.,  4606.,  6800.,  7072.,  7344.,  7616.,  7888.,  8160.,  8432.,  8704.,  8976.,  9248.,  9520.,  9792., 10064., 10336., 10608., 10880.,  9190.,  9418.,  9646.,  9874.,  7264.,  7432.,  7600.,  7768.,  4222.,  4314.,  4406.,  4498.,  1549.,  1587.,  1625.,  1663.,  3576.,  3660.,  3744.,  3828.,  6113.,  6251.,  6389.,  6527.,  9192.,  9392.,  9592.,  9792.,  9992., 10192., 10392., 10592., 10792., 10992., 11192., 11392., 11592., 11792., 11992., 12192.,  9779.,  9941., 10103., 10265.,  7264.,  7380.,  7496.,  7612.,  4015.,  4077.,  4139.,  4201.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2344.,  2888.,  3432.,  3976.,  3880.,  4424.,  4968.,  5512.,  4392.,  4936.,  5480.,  6024.,  3880.,  4424.,  4968.,  5512.,  1834.,  2338.,  2842.,  3346.,  2532.,  2932.,  3332.,  3732.,  2006.,  2238.,  2470.,  2702.,   700.,  1036.,  1372.,  1708.,  2952.,  3752.,  4552.,  5352.,  6884.,  8276.,  9668., 11060., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 15056., 17168., 19280., 21392.,  8916., 10692., 12468., 14244.,  6856.,  8168.,  9480., 10792.,  5292.,  6012.,  6732.,  7452.,  4092.,  4428.,  4764.,  5100.,  6152.,  6952.,  7752.,  8552.,  9764., 11156., 12548., 13940., 15056., 17168., 19280., 21392., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 12308., 14084., 15860., 17636.,  5320.,  6632.,  7944.,  9256.,  2412.,  3132.,  3852.,  4572.,  2748.,  3084.,  3420.,  3756.,  7688.,  8488.,  9288., 10088., 10596., 11988., 13380., 14772., 15056., 17168., 19280., 21392., 15056., 17168., 19280., 21392., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 13652., 15428., 17204., 18980., 10568., 11880., 13192., 14504.,  3244.,  3964.,  4684.,  5404.,  1404.,  1740.,  2076.,  2412.,  4488.,  5288.,  6088.,  6888.,  9764., 11156., 12548., 13940., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 15056., 17168., 19280., 21392., 13008., 15120., 17232., 19344., 12308., 14084., 15860., 17636., 12104., 13416., 14728., 16040.,  8172.,  8892.,  9612., 10332.,   700.,  1036.,  1372.,  1708.,  2952.,  3752.,  4552.,  5352.,  6884.,  8276.,  9668., 11060., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 15056., 17168., 19280., 21392.,  8916., 10692., 12468., 14244.,  6856.,  8168.,  9480., 10792.,  5292.,  6012.,  6732.,  7452.,  4092.,  4428.,  4764.,  5100.,  6152.,  6952.,  7752.,  8552.,  9764., 11156., 12548., 13940., 15056., 17168., 19280., 21392., 13008., 15120., 17232., 19344., 13008., 15120., 17232., 19344., 15056., 17168., 19280., 21392., 12308., 14084., 15860., 17636.,  5320.,  6632.,  7944.,  9256.,  2412.,  3132.,  3852.,  4572.,  2558.,  2854.,  3150.,  3446.,  6852.,  7508.,  8164.,  8820.,  8402.,  9482., 10562., 11642., 11176., 12744., 14312., 15880., 10664., 12232., 13800., 15368.,  9128., 10696., 12264., 13832., 10664., 12232., 13800., 15368.,  9802., 11074., 12346., 13618.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6214.,  7927.,  9799., 11836., 12489., 11133.,  9562.,  7770.,  5244.,  6371.,  7620.,  8996.,  9572.,  8395.,  7044.,  5514.,  4380.,  4990.,  5702.,  6520.,  6970.,  5978.,  4836.,  3540.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  1.,   4.,   7.,  10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,  55.,  65.,  75.,  85.,  56.,  44., 121., 142., 163., 184., 205., 226., 140., 107., 268., 289., 310., 331., 352., 373., 224., 170., 415., 436., 457., 478., 499., 520., 308., 233., 562., 583., 604., 625., 646., 667., 392., 296., 709., 730., 751., 772., 793., 814., 476., 309., 705., 723., 741., 759., 777., 795., 448., 215., 478., 489., 500., 511., 522., 533., 294.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128., 18700., 15312.,  6668.,  9517., 12810., 16491., 18853., 17262., 14811., 12580.,  9440., 11880., 14736., 16920., 18928., 17120., 14640., 11456.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,  102.,  122.,   95.,   64.,  224.,  296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,  986., 1142., 1298., 1454., 1610., 1015.,  751., 1922., 2078., 2234., 2390., 2546., 2702., 1645., 1213., 3014., 3170., 3326., 3482., 3638., 3794., 2275., 1675., 4106., 4262., 4418., 4574., 4730., 4886., 2905., 2137., 5198., 5354., 5510., 5666., 5822., 5978., 3535., 2300., 5288., 5424., 5560., 5696., 5832., 5968., 3384., 1625., 3630., 3714., 3798., 3882., 3966., 4050., 2243.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,  7300.,  8500.,  9700., 10900., 12100.,  7706.,  5594., 14500., 15700., 16900., 18100., 19300., 20500., 12578.,  9122., 22900., 24100., 25300., 25220., 23092., 24292., 14122., 11370., 26692., 27892., 29092., 24916., 18692., 19892., 11570.,  9522., 22292., 23492., 24692., 16420.,  6100.,  7300.,  4922.,  2868.,  7112.,  8168.,  9224., 10280., 11336., 12392.,  7332.,  3150.,  7276.,  7932.,  8588.,  9244.,  9900., 10556.,  5990.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6736.,  7084.,  8396.,  8846., 10304., 10862., 11672., 12344., 12392., 13106., 10564., 11194.,  8376.,  8916.,  6872.,  7316.,  4390.,  4632.,  5419.,  5734.,  6623.,  7016.,  7980.,  8456.,  8553.,  9064.,  7569.,  8022.,  6306.,  6696.,  5042.,  5364.,  4816.,  5048.,  5680.,  5980.,  6712.,  7084.,  7632.,  8080.,  8120.,  8596.,  7152.,  7572.,  5952.,  6312.,  4512.,  4808.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  106.,  112.,   79.,   88.,  221.,  242.,  263.,  284.,  305.,  326.,  347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  205.,  214.,  515.,  536.,  557.,  578.,  599.,  620.,  641.,  662.,  683.,  704.,  725.,  746.,  436.,  448.,  331.,  340.,  809.,  830.,  851.,  872.,  893.,  914.,  935.,  956.,  977.,  998., 1019., 1040.,  604.,  616.,  457.,  466., 1103., 1124., 1145., 1166., 1187., 1208., 1229., 1250., 1271., 1292., 1313., 1334.,  772.,  784.,  583.,  592., 1397., 1418., 1439., 1460., 1481., 1502., 1523., 1544., 1565., 1586., 1607., 1628.,  940.,  952.,  610.,  618., 1392., 1410., 1428., 1446., 1464., 1482., 1500., 1518., 1536., 1554., 1572., 1590.,  886.,  896.,  425.,  430.,  945.,  956.,  967.,  978.,  989., 1000., 1011., 1022., 1033., 1044., 1055., 1066.,  582.,  588.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 10928., 12128., 14034., 15654., 17840., 19928., 21290., 23894., 23894., 26834., 20720., 23384., 16974., 19314., 13712., 15680.,  8416.,  9288., 11249., 12439., 13564., 15112., 16337., 18283., 18547., 20773., 16572., 18600., 13291., 15081.,  9744., 11256.,  7680.,  8480.,  9980., 11060., 12736., 14128., 14860., 16596., 16660., 18620., 15424., 17200., 13124., 14684.,  9696., 11008.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,   392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,  1040.,  1112.,  1184.,   758.,   802.,   527.,   593.,  1540.,  1696.,  1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,  3256.,  1961.,  2051.,  1451.,  1517.,  3724.,  3880.,  4036.,  4192.,  4348.,  4504.,  4660.,  4816.,  4972.,  5128.,  5284.,  5440.,  3221.,  3311.,  2375.,  2441.,  5908.,  6064.,  6220.,  6376.,  6532.,  6688.,  6844.,  7000.,  7156.,  7312.,  7468.,  7624.,  4481.,  4571.,  3299.,  3365.,  8092.,  8248.,  8404.,  8560.,  8716.,  8872.,  9028.,  9184.,  9340.,  9496.,  9652.,  9808.,  5741.,  5831.,  4223.,  4289., 10276., 10432., 10588., 10744., 10900., 11056., 11212., 11368., 11524., 11680., 11836., 11992.,  7001.,  7091.,  4554.,  4614., 10472., 10608., 10744., 10880., 11016., 11152., 11288., 11424., 11560., 11696., 11832., 11968.,  6710.,  6786.,  3221.,  3259.,  7196.,  7280.,  7364.,  7448.,  7532.,  7616.,  7700.,  7784.,  7868.,  7952.,  8036.,  8120.,  4451.,  4497.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,  1332.,  1476.,  1620.,  1764.,  1318.,  1422.,   700.,   908.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  7144.,  7688.,  8232.,  8776.,  5708.,  6044.,  3802.,  4306., 11420., 12620., 12540., 13740., 11612., 12812., 14012., 15212., 16412., 17612., 18812., 20012., 11634., 12330.,  9578., 10082., 23612., 24812., 20636., 21836., 15612., 16812., 18012., 19212., 20412., 21612., 22812., 24012., 13954., 14650., 11258., 11762., 27612., 28812., 20540., 21740., 11420., 12620., 12540., 13740., 11612., 12812., 14012., 15212.,  8850.,  9546.,  7562.,  8066., 18812., 20012., 21212., 22412., 23612., 24812., 20636., 21836., 15612., 16812., 18012., 19212., 11170., 11866.,  9242.,  9746., 22812., 24012., 25212., 26412., 27612., 28812., 20540., 21740., 11420., 12620., 12540., 13740.,  6066.,  6762.,  5436.,  5900., 13544., 14600., 15656., 16712., 17768., 18824., 19880., 20936., 21992., 23048., 18728., 19784.,  6860.,  7452.,  6110.,  6406., 14132., 14788., 15444., 16100., 16756., 17412., 18068., 18724., 19380., 20036., 11220., 11876.,   230.,   590.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  5892.,  6240.,  6588.,  6936.,  7286.,  7736.,  8186.,  8636.,  9042.,  9600., 10158., 10716., 10384., 11056., 11728., 12400., 11014., 11728., 12442., 13156.,  9330.,  9960., 10590., 11220.,  7316.,  7856.,  8396.,  8936.,  5748.,  6192.,  6636.,  7080.,  4826.,  5068.,  5310.,  5552.,  5627.,  5942.,  6257.,  6572.,  6421.,  6814.,  7207.,  7600.,  7452.,  7928.,  8404.,  8880.,  7987.,  8498.,  9009.,  9520.,  6877.,  7330.,  7783.,  8236.,  5310.,  5700.,  6090.,  6480.,  3554.,  3876.,  4198.,  4520.,  4632.,  4864.,  5096.,  5328.,  5684.,  5984.,  6284.,  6584.,  6460.,  6832.,  7204.,  7576.,  7200.,  7648.,  8096.,  8544.,  7636.,  8112.,  8588.,  9064.,  6844.,  7264.,  7684.,  8104.,  5656.,  6016.,  6376.,  6736.,  4056.,  4352.,  4648.,  4944.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,   54.,   56.,   32.,   36.,   40.,   44.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,  206.,  212.,  218.,  224.,  149.,  158.,  167.,  176.,  421.,  442.,  463.,  484.,  505.,  526.,  547.,  568.,  589.,  610.,  631.,  652.,  673.,  694.,  715.,  736.,  757.,  778.,  799.,  820.,  841.,  862.,  883.,  904.,  524.,  536.,  548.,  560.,  401.,  410.,  419.,  428., 1009., 1030., 1051., 1072., 1093., 1114., 1135., 1156., 1177., 1198., 1219., 1240., 1261., 1282., 1303., 1324., 1345., 1366., 1387., 1408., 1429., 1450., 1471., 1492.,  860.,  872.,  884.,  896.,  653.,  662.,  671.,  680., 1597., 1618., 1639., 1660., 1681., 1702., 1723., 1744., 1765., 1786., 1807., 1828., 1849., 1870., 1891., 1912., 1933., 1954., 1975., 1996., 2017., 2038., 2059., 2080., 1196., 1208., 1220., 1232.,  905.,  914.,  923.,  932., 2185., 2206., 2227., 2248., 2269., 2290., 2311., 2332., 2353., 2374., 2395., 2416., 2437., 2458., 2479., 2500., 2521., 2542., 2563., 2584., 2605., 2626., 2647., 2668., 1532., 1544., 1556., 1568., 1157., 1166., 1175., 1184., 2773., 2794., 2815., 2836., 2857., 2878., 2899., 2920., 2941., 2962., 2983., 3004., 3025., 3046., 3067., 3088., 3109., 3130., 3151., 3172., 3193., 3214., 3235., 3256., 1868., 1880., 1892., 1904., 1212., 1220., 1228., 1236., 2766., 2784., 2802., 2820., 2838., 2856., 2874., 2892., 2910., 2928., 2946., 2964., 2982., 3000., 3018., 3036., 3054., 3072., 3090., 3108., 3126., 3144., 3162., 3180., 1762., 1772., 1782., 1792.,  845.,  850.,  855.,  860., 1879., 1890., 1901., 1912., 1923., 1934., 1945., 1956., 1967., 1978., 1989., 2000., 2011., 2022., 2033., 2044., 2055., 2066., 2077., 2088., 2099., 2110., 2121., 2132., 1158., 1164., 1170., 1176.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,  1614.,  1003.,  1069.,  1135.,  1201.,  2960.,  3116.,  3272.,  3428.,  3584.,  3740.,  3896.,  4052.,  4208.,  4364.,  4520.,  4676.,  4832.,  4988.,  5144.,  5300.,  5456.,  5612.,  5768.,  5924.,  6080.,  6236.,  6392.,  6548.,  3853.,  3943.,  4033.,  4123.,  2851.,  2917.,  2983.,  3049.,  7328.,  7484.,  7640.,  7796.,  7952.,  8108.,  8264.,  8420.,  8576.,  8732.,  8888.,  9044.,  9200.,  9356.,  9512.,  9668.,  9824.,  9980., 10136., 10292., 10448., 10604., 10760., 10916.,  6373.,  6463.,  6553.,  6643.,  4699.,  4765.,  4831.,  4897., 11696., 11852., 12008., 12164., 12320., 12476., 12632., 12788., 12944., 13100., 13256., 13412., 13568., 13724., 13880., 14036., 14192., 14348., 14504., 14660., 14816., 14972., 15128., 15284.,  8893.,  8983.,  9073.,  9163.,  6547.,  6613.,  6679.,  6745., 16064., 16220., 16376., 16532., 16688., 16844., 17000., 17156., 17312., 17468., 17624., 17780., 17936., 18092., 18248., 18404., 18560., 18716., 18872., 19028., 19184., 19340., 19496., 19652., 11413., 11503., 11593., 11683.,  8395.,  8461.,  8527.,  8593., 20432., 20588., 20744., 20900., 21056., 21212., 21368., 21524., 21680., 21836., 21992., 22148., 22304., 22460., 22616., 22772., 22928., 23084., 23240., 23396., 23552., 23708., 23864., 24020., 13933., 14023., 14113., 14203.,  9062.,  9122.,  9182.,  9242., 20840., 20976., 21112., 21248., 21384., 21520., 21656., 21792., 21928., 22064., 22200., 22336., 22472., 22608., 22744., 22880., 23016., 23152., 23288., 23424., 23560., 23696., 23832., 23968., 13362., 13438., 13514., 13590.,  6413.,  6451.,  6489.,  6527., 14328., 14412., 14496., 14580., 14664., 14748., 14832., 14916., 15000., 15084., 15168., 15252., 15336., 15420., 15504., 15588., 15672., 15756., 15840., 15924., 16008., 16092., 16176., 16260.,  8867.,  8913.,  8959.,  9005.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  2564.,  2708.,  2852.,  2996.,  3140.,  3284.,  3428.,  3572.,  2566.,  2670.,  2774.,  2878.,  1260.,  1468.,  1676.,  1884.,  3944.,  4488.,  5032.,  5576.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  7144.,  7688.,  8232.,  8776.,  9320.,  9864., 10408., 10952., 11496., 12040., 12584., 13128.,  7868.,  8204.,  8540.,  8876.,  5994.,  6498.,  7002.,  7506., 12076., 13276., 14476., 15676.,  8172.,  9372., 10572., 11772.,  9644., 10844., 12044., 13244., 14444., 15644., 16844., 18044., 19244., 20444., 21644., 22844., 24044., 25244., 26444., 27644., 15394., 16090., 16786., 17482., 13450., 13954., 14458., 14962., 24172., 25372., 26572., 27772., 12076., 13276., 14476., 15676.,  8172.,  9372., 10572., 11772.,  9644., 10844., 12044., 13244., 14444., 15644., 16844., 18044., 19244., 20444., 21644., 22844., 12610., 13306., 14002., 14698., 11434., 11938., 12442., 12946., 28844., 30044., 31244., 32444., 24172., 25372., 26572., 27772., 12076., 13276., 14476., 15676.,  8172.,  9372., 10572., 11772.,  9644., 10844., 12044., 13244., 14444., 15644., 16844., 18044.,  9826., 10522., 11218., 11914.,  9418.,  9922., 10426., 10930., 24044., 25244., 26444., 27644., 28844., 30044., 31244., 32444., 24172., 25372., 26572., 27772., 12076., 13276., 14476., 15676.,  8172.,  9372., 10572., 11772.,  9644., 10844., 12044., 13244.,  7042.,  7738.,  8434.,  9130.,  7402.,  7906.,  8410.,  8914., 19244., 20444., 21644., 22844., 24044., 25244., 26444., 27644., 28844., 30044., 31244., 32444., 24172., 25372., 26572., 27772., 12076., 13276., 14476., 15676.,  8172.,  9372., 10572., 11772.,  4258.,  4954.,  5650.,  6346.,  5196.,  5660.,  6124.,  6588., 13608., 14664., 15720., 16776., 17832., 18888., 19944., 21000., 22056., 23112., 24168., 25224., 26280., 27336., 28392., 29448., 21032., 22088., 23144., 24200.,  8360.,  9416., 10472., 11528.,  1820.,  2412.,  3004.,  3596.,  2558.,  2854.,  3150.,  3446.,  6852.,  7508.,  8164.,  8820.,  9476., 10132., 10788., 11444., 12100., 12756., 13412., 14068., 14724., 15380., 16036., 16692., 17348., 18004., 18660., 19316., 10500., 11156., 11812., 12468.,   230.,   590.,   950.,  1310.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  6020.,  7814.,  9664., 11673., 11714., 12171., 10786.,  9150.,  7256.,  6856.,  8460.,  9872., 11418., 10983., 11188.,  9600.,  7790.,  5752.,  5264.,  6031.,  6918.,  7930.,  7610.,  8186.,  7120.,  5877.,  4452.,  3488.,  3412.,  4456.,  5600.,  5954.,  6404.,  5816.,  5080.,  4192.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,   38.,   80.,  101.,  122.,  143.,  164.,  138.,   84.,   54.,  144.,  273.,  318.,  363.,  408.,  453.,  360.,  210.,  138.,  333.,  588.,  633.,  678.,  723.,  768.,  591.,  336.,  222.,  522.,  903.,  948.,  993., 1038., 1083.,  822.,  462.,  306.,  711., 1218., 1263., 1308., 1353., 1398., 1053.,  588.,  390.,  900., 1533., 1578., 1623., 1668., 1713., 1284.,  714.,  424.,  938., 1544., 1583., 1622., 1661., 1700., 1238.,  672.,  301.,  652., 1054., 1078., 1102., 1126., 1150.,  824.,  441.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236., 17096., 20382., 22908., 24466., 25094., 25082., 21308., 16774., 14248., 12476., 15137., 18226., 21175., 21041., 20395., 15890., 13797., 11004., 10800., 11348., 14312., 15916., 15684., 14940., 13960., 12420., 10192.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   101.,   143.,   185.,   227.,   222.,   149.,    70.,   244.,   538.,   694.,   850.,  1006.,  1162.,   996.,   614.,   363.,  1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,   993.,  2430.,  4335.,  4677.,  5019.,  5361.,  5703.,  4422.,  2529.,  1623.,  3858.,  6729.,  7071.,  7413.,  7755.,  8097.,  6186.,  3495.,  2253.,  5286.,  9123.,  9465.,  9807., 10149., 10491.,  7950.,  4461.,  2883.,  6714., 11517., 11859., 12201., 12543., 12885.,  9714.,  5427.,  3214.,  7140., 11794., 12094., 12394., 12694., 12994.,  9492.,  5166.,  2309.,  5014.,  8123.,  8309.,  8495.,  8681.,  8867.,  6366.,  3413.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  7440.,  8548., 11288., 11340., 13404., 11884., 11288.,  8004.,  7440.,  5816.,  7294.,  7956., 11034., 10450., 10730.,  7828.,  7726.,  5816.,  4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,  2634.,  7428., 13934., 14934., 14910., 17574., 20238., 16036.,  9354.,  6866., 16212., 24518., 22446., 19350., 22014., 24678., 19316., 11154.,  8026., 18852., 25886., 20742., 13934., 14934., 14910., 12100.,  7194.,  5474., 13044., 22902., 25566., 24518., 22446., 19350., 15380.,  8994.,  6634., 15684., 27342., 30006., 25886., 20742., 13934., 10852.,  5034.,  4012.,  9592., 16868., 19220., 21572., 23924., 22564., 15288.,  5548.,  4510., 10124., 16906., 18370., 19834., 21298., 15978.,  8940.,   350.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7254.,  7720.,  9212.,  9804., 11243., 11936., 12913., 13714., 12466., 13252., 12819., 13622., 10801., 11492.,  8352.,  8924.,  6482.,  6928.,  7152.,  7536.,  9201.,  9688., 10828., 11392., 11757., 12404., 11389., 12014., 11245., 11880.,  9376.,  9920.,  7133.,  7580.,  5816.,  6160.,  5302.,  5568.,  6157.,  6494.,  7183.,  7596.,  8230.,  8724.,  8067.,  8564.,  8640.,  9172.,  7337.,  7808.,  5749.,  6154.,  4442.,  4776.,  4176.,  4416.,  4442.,  4744.,  5888.,  6256.,  7050.,  7488.,  7378.,  7812.,  7866.,  8328.,  7224.,  7632.,  6354.,  6704.,  5248.,  5536.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,   64.,   76.,  139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,  307.,  328.,  260.,  276.,  159.,  168.,   96.,  108.,  261.,  288.,  501.,  546.,  591.,  636.,  681.,  726.,  771.,  816.,  861.,  906.,  687.,  720.,  402.,  420.,  264.,  276.,  639.,  666., 1131., 1176., 1221., 1266., 1311., 1356., 1401., 1446., 1491., 1536., 1149., 1182.,  654.,  672.,  432.,  444., 1017., 1044., 1761., 1806., 1851., 1896., 1941., 1986., 2031., 2076., 2121., 2166., 1611., 1644.,  906.,  924.,  600.,  612., 1395., 1422., 2391., 2436., 2481., 2526., 2571., 2616., 2661., 2706., 2751., 2796., 2073., 2106., 1158., 1176.,  768.,  780., 1773., 1800., 3021., 3066., 3111., 3156., 3201., 3246., 3291., 3336., 3381., 3426., 2535., 2568., 1410., 1428.,  837.,  848., 1852., 1876., 3049., 3088., 3127., 3166., 3205., 3244., 3283., 3322., 3361., 3400., 2448., 2476., 1329., 1344.,  595.,  602., 1289., 1304., 2084., 2108., 2132., 2156., 2180., 2204., 2228., 2252., 2276., 2300., 1631., 1648.,  873.,  882.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 15128., 17008., 18409., 20771., 20248., 23020., 24437., 27675., 24315., 27561., 24961., 28215., 19940., 22696., 16953., 19283., 14000., 15848., 15144., 16888., 18160., 20332., 20772., 23292., 22404., 25320., 22672., 25540., 21660., 24480., 18076., 20436., 13520., 15500., 10360., 11912., 11632., 12952., 14741., 16363., 16660., 18624., 18493., 20839., 17951., 20321., 18433., 20827., 15480., 17524., 13573., 15355., 10456., 11936., 11184., 12304., 12168., 13520., 14792., 16408., 16048., 17960., 15608., 17488., 14144., 15992., 12344., 13896.,  9608., 10960.,  7824.,  8944.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,   112.,   148.,   420.,   508.,   956.,  1112.,  1268.,  1424.,  1580.,  1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,   657.,   747.,  1848.,  2052.,  3621.,  3963.,  4305.,  4647.,  4989.,  5331.,  5673.,  6015.,  6357.,  6699.,  5124.,  5376.,  3021.,  3159.,  1917.,  2007.,  4704.,  4908.,  8409.,  8751.,  9093.,  9435.,  9777., 10119., 10461., 10803., 11145., 11487.,  8652.,  8904.,  4953.,  5091.,  3177.,  3267.,  7560.,  7764., 13197., 13539., 13881., 14223., 14565., 14907., 15249., 15591., 15933., 16275., 12180., 12432.,  6885.,  7023.,  4437.,  4527., 10416., 10620., 17985., 18327., 18669., 19011., 19353., 19695., 20037., 20379., 20721., 21063., 15708., 15960.,  8817.,  8955.,  5697.,  5787., 13272., 13476., 22773., 23115., 23457., 23799., 24141., 24483., 24825., 25167., 25509., 25851., 19236., 19488., 10749., 10887.,  6364.,  6448., 14140., 14324., 23360., 23660., 23960., 24260., 24560., 24860., 25160., 25460., 25760., 26060., 18820., 19036., 10244., 10360.,  4577.,  4631.,  9940., 10056., 16105., 16291., 16477., 16663., 16849., 17035., 17221., 17407., 17593., 17779., 12632., 12764.,  6773.,  6843.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  6192.,  9456.,  5692.,  9772.,  9208., 13976.,  7940., 13524., 10708., 16420.,  8356., 14196.,  9624., 14648.,  5692.,  9772.,  6192.,  9456.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1826.,  2138.,  2450.,  2762.,  3074.,  3386.,  3108.,  3380.,  2126.,  2294.,   740.,  1012.,  2360.,  3032.,  4732.,  5932.,  4444.,  5644.,  6844.,  8044.,  9244., 10444., 11644., 12844., 10136., 11064.,  6340.,  6868.,  4178.,  4874.,  7820.,  9404., 13358., 16022., 11262., 13926., 13902., 16566., 19230., 21894., 24558., 27222., 20316., 22284., 12258., 13338.,  9570., 10266., 16172., 17756., 22238., 24902., 13358., 16022., 11262., 13926., 13902., 16566., 19230., 21894., 16380., 18348., 10098., 11178.,  8178.,  8874., 19788., 21372., 28430., 31094., 22238., 24902., 13358., 16022., 11262., 13926., 13902., 16566., 12444., 14412.,  7938.,  9018.,  6786.,  7482., 16620., 18204., 29886., 32550., 28430., 31094., 22238., 24902., 13358., 16022., 11262., 13926.,  8508., 10476.,  5778.,  6858.,  5394.,  6090., 13452., 15036., 24558., 27222., 29886., 32550., 28430., 31094., 22238., 24902., 13358., 16022.,  7260.,  9228.,  3618.,  4698.,  3892.,  4548.,  9816., 11256., 18028., 20380., 22732., 25084., 27436., 29788., 25356., 27708., 18540., 20892.,  7096.,  8792.,  1684.,  2596.,  1966.,  2390.,  5076.,  5988.,  9458., 10922., 12386., 13850., 15314., 16778., 18242., 19706., 14386., 15850.,  8388.,  9428.,   350.,   902.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7386.,  7852.,  8318.,  8784.,  9672., 10264., 10856., 11448., 11137., 11830., 12523., 13216., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088., 11651., 12454., 13257., 14060.,  9327., 10018., 10709., 11400.,  7556.,  8128.,  8700.,  9272.,  6054.,  6500.,  6946.,  7392.,  6304.,  6688.,  7072.,  7456.,  7931.,  8418.,  8905.,  9392.,  9508., 10072., 10636., 11200., 10451., 11098., 11745., 12392.,  9993., 10618., 11243., 11868.,  9951., 10586., 11221., 11856.,  7744.,  8288.,  8832.,  9376.,  5467.,  5914.,  6361.,  6808.,  3864.,  4208.,  4552.,  4896.,  4610.,  4876.,  5142.,  5408.,  5737.,  6074.,  6411.,  6748.,  6689.,  7102.,  7515.,  7928.,  7742.,  8236.,  8730.,  9224.,  7861.,  8358.,  8855.,  9352.,  8396.,  8928.,  9460.,  9992.,  7323.,  7794.,  8265.,  8736.,  5781.,  6186.,  6591.,  6996.,  4326.,  4660.,  4994.,  5328.,  4624.,  4864.,  5104.,  5344.,  5094.,  5396.,  5698.,  6000.,  6096.,  6464.,  6832.,  7200.,  6878.,  7316.,  7754.,  8192.,  7026.,  7460.,  7894.,  8328.,  7462.,  7924.,  8386.,  8848.,  6744.,  7152.,  7560.,  7968.,  5638.,  5988.,  6338.,  6688.,  4128.,  4416.,  4704.,  4992.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   22.,   28.,   34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,   94.,  100.,  106.,  112.,  118.,  124.,  130.,  136.,  113.,  118.,  123.,  128.,   75.,   78.,   81.,   84.,   33.,   38.,   43.,   48.,  116.,  128.,  140.,  152.,  257.,  278.,  299.,  320.,  341.,  362.,  383.,  404.,  425.,  446.,  467.,  488.,  509.,  530.,  551.,  572.,  593.,  614.,  635.,  656.,  504.,  520.,  536.,  552.,  309.,  318.,  327.,  336.,  180.,  192.,  204.,  216.,  495.,  522.,  549.,  576.,  957., 1002., 1047., 1092., 1137., 1182., 1227., 1272., 1317., 1362., 1407., 1452., 1497., 1542., 1587., 1632., 1677., 1722., 1767., 1812., 1341., 1374., 1407., 1440.,  786.,  804.,  822.,  840.,  516.,  528.,  540.,  552., 1251., 1278., 1305., 1332., 2217., 2262., 2307., 2352., 2397., 2442., 2487., 2532., 2577., 2622., 2667., 2712., 2757., 2802., 2847., 2892., 2937., 2982., 3027., 3072., 2265., 2298., 2331., 2364., 1290., 1308., 1326., 1344.,  852.,  864.,  876.,  888., 2007., 2034., 2061., 2088., 3477., 3522., 3567., 3612., 3657., 3702., 3747., 3792., 3837., 3882., 3927., 3972., 4017., 4062., 4107., 4152., 4197., 4242., 4287., 4332., 3189., 3222., 3255., 3288., 1794., 1812., 1830., 1848., 1188., 1200., 1212., 1224., 2763., 2790., 2817., 2844., 4737., 4782., 4827., 4872., 4917., 4962., 5007., 5052., 5097., 5142., 5187., 5232., 5277., 5322., 5367., 5412., 5457., 5502., 5547., 5592., 4113., 4146., 4179., 4212., 2298., 2316., 2334., 2352., 1524., 1536., 1548., 1560., 3519., 3546., 3573., 3600., 5997., 6042., 6087., 6132., 6177., 6222., 6267., 6312., 6357., 6402., 6447., 6492., 6537., 6582., 6627., 6672., 6717., 6762., 6807., 6852., 5037., 5070., 5103., 5136., 2802., 2820., 2838., 2856., 1663., 1674., 1685., 1696., 3680., 3704., 3728., 3752., 6059., 6098., 6137., 6176., 6215., 6254., 6293., 6332., 6371., 6410., 6449., 6488., 6527., 6566., 6605., 6644., 6683., 6722., 6761., 6800., 4868., 4896., 4924., 4952., 2643., 2658., 2673., 2688., 1183., 1190., 1197., 1204., 2563., 2578., 2593., 2608., 4144., 4168., 4192., 4216., 4240., 4264., 4288., 4312., 4336., 4360., 4384., 4408., 4432., 4456., 4480., 4504., 4528., 4552., 4576., 4600., 3245., 3262., 3279., 3296., 1737., 1746., 1755., 1764.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2600., 3448., 4296., 5144., 2484., 3504., 4524., 5544., 3636., 4812., 5988., 7164., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 3568., 4980., 6392., 7804., 3596., 4804., 6012., 7220., 2612., 3632., 4652., 5672., 2472., 3320., 4168., 5016., 1592., 2272., 2952., 3632., 2429., 3219., 4009., 4799., 2296., 3236., 4176., 5116., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2612., 3632., 4652., 5672., 2501., 3387., 4273., 5159., 2048., 2824., 3600., 4376., 1584., 2064., 2544., 3024., 1392., 1976., 2560., 3144., 2248., 2968., 3688., 4408., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2408., 3360., 4312., 5264., 2472., 3320., 4168., 5016., 2048., 2824., 3600., 4376., 1984., 2656., 3328., 4000.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,   935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,   196.,   232.,   268.,   304.,   772.,   860.,   948.,  1036.,  1792.,  1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,  3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,  4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,  1245.,  1335.,  1425.,  1515.,  3540.,  3744.,  3948.,  4152.,  6981.,  7323.,  7665.,  8007.,  8349.,  8691.,  9033.,  9375.,  9717., 10059., 10401., 10743., 11085., 11427., 11769., 12111., 12453., 12795., 13137., 13479., 10056., 10308., 10560., 10812.,  5937.,  6075.,  6213.,  6351.,  3765.,  3855.,  3945.,  4035.,  9252.,  9456.,  9660.,  9864., 16557., 16899., 17241., 17583., 17925., 18267., 18609., 18951., 19293., 19635., 19977., 20319., 20661., 21003., 21345., 21687., 22029., 22371., 22713., 23055., 17112., 17364., 17616., 17868.,  9801.,  9939., 10077., 10215.,  6285.,  6375.,  6465.,  6555., 14964., 15168., 15372., 15576., 26133., 26475., 26817., 27159., 27501., 27843., 28185., 28527., 28101., 28443., 28785., 29127., 27677., 28019., 28361., 28703., 26229., 26571., 26913., 27255., 19560., 19812., 20064., 20316., 10849., 10987., 11125., 11263.,  8037.,  8127.,  8217.,  8307., 18116., 18320., 18524., 18728., 30333., 30675., 31017., 31359., 31701., 32043., 32385., 32727., 29229., 29571., 29913., 30255., 25733., 26075., 26417., 26759., 21213., 21555., 21897., 22239., 15864., 16116., 16368., 16620.,  8825.,  8963.,  9101.,  9239.,  6717.,  6807.,  6897.,  6987., 15124., 15328., 15532., 15736., 25317., 25659., 26001., 26343., 26685., 27027., 27369., 27711., 21141., 21483., 21825., 22167., 14573., 14915., 15257., 15599.,  6981.,  7323.,  7665.,  8007.,  6024.,  6276.,  6528.,  6780.,  3729.,  3867.,  4005.,  4143.,  1912.,  1996.,  2080.,  2164.,  4588.,  4772.,  4956.,  5140.,  8092.,  8392.,  8692.,  8992.,  9292.,  9592.,  9892., 10192., 10492., 10792., 11092., 11392., 11692., 11992., 12292., 12592., 12892., 13192., 13492., 13792.,  9828., 10044., 10260., 10476.,  5552.,  5668.,  5784.,  5900.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  8261.,  8447.,  8633.,  8819.,  9005.,  9191.,  9377.,  9563.,  9749.,  9935., 10121., 10307., 10493., 10679., 10865., 11051., 11237., 11423., 11609., 11795.,  8268.,  8400.,  8532.,  8664.,  4533.,  4603.,  4673.,  4743.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2700.,  6780., 10860., 14940.,  3160.,  7928., 12696., 17464.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3320.,  8344., 13368., 18392.,  2700.,  6780., 10860., 14940.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   946.,  1258.,  1570.,  1882.,  2194.,  2506.,  2818.,  3130.,  2802.,  3114.,  3426.,  3738.,  2386.,  2698.,  3010.,  3322.,   946.,  1258.,  1570.,  1882.,  1684.,  1956.,  2228.,  2500.,  1454.,  1622.,  1790.,  1958.,   660.,   932.,  1204.,  1476.,  2616.,  3288.,  3960.,  4632.,  5996.,  7196.,  8396.,  9596.,  8108.,  9308., 10508., 11708.,  9196., 10396., 11596., 12796.,  8620.,  9820., 11020., 12220.,  5996.,  7196.,  8396.,  9596.,  4824.,  5752.,  6680.,  7608.,  3892.,  4420.,  4948.,  5476.,  3554.,  4250.,  4946.,  5642.,  7580.,  9164., 10748., 12332., 14894., 17558., 20222., 22886., 18126., 20790., 23454., 26118., 19310., 21974., 24638., 27302., 18446., 21110., 23774., 26438., 14894., 17558., 20222., 22886., 10572., 12540., 14508., 16476.,  6546.,  7626.,  8706.,  9786.,  7554.,  8250.,  8946.,  9642., 12764., 14348., 15932., 17516., 18446., 21110., 23774., 26438., 14894., 17558., 20222., 22886., 18126., 20790., 23454., 26118., 19310., 21974., 24638., 27302., 18446., 21110., 23774., 26438., 10124., 12092., 14060., 16028.,  4914.,  5994.,  7074.,  8154.,  4770.,  5466.,  6162.,  6858., 13212., 14796., 16380., 17964., 19310., 21974., 24638., 27302., 18446., 21110., 23774., 26438., 14894., 17558., 20222., 22886., 18126., 20790., 23454., 26118., 19310., 21974., 24638., 27302., 15820., 17788., 19756., 21724.,  6354.,  7434.,  8514.,  9594.,  2626.,  3322.,  4018.,  4714.,  8540., 10124., 11708., 13292., 18126., 20790., 23454., 26118., 19310., 21974., 24638., 27302., 18446., 21110., 23774., 26438., 14894., 17558., 20222., 22886., 18126., 20790., 23454., 26118., 15756., 17724., 19692., 21660., 10866., 11946., 13026., 14106.,  3554.,  4250.,  4946.,  5642.,  7580.,  9164., 10748., 12332., 14894., 17558., 20222., 22886., 18126., 20790., 23454., 26118., 19310., 21974., 24638., 27302., 18446., 21110., 23774., 26438., 14894., 17558., 20222., 22886., 10572., 12540., 14508., 16476.,  6546.,  7626.,  8706.,  9786.,  7364.,  8020.,  8676.,  9332., 11928., 13368., 14808., 16248., 16252., 18604., 20956., 23308., 12092., 14444., 16796., 19148., 15740., 18092., 20444., 22796., 18364., 20716., 23068., 25420., 16252., 18604., 20956., 23308.,  7352.,  9048., 10744., 12440.,  2788.,  3700.,  4612.,  5524.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308., 11202., 12666., 14130., 15594.,  9250., 10714., 12178., 13642.,  6274.,  7738.,  9202., 10666., 12130., 13594., 15058., 16522., 11202., 12666., 14130., 15594.,  7284.,  8324.,  9364., 10404.,   350.,   902.,  1454.,  2006.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7246.,  8762., 10433., 12266., 12083., 11836., 11877., 10052.,  8670.,  7052.,  7722.,  8641.,  9689., 10872., 10213.,  9490.,  9279.,  7395.,  6210.,  4822.,  6692.,  6939.,  7304.,  7792.,  7344.,  7888.,  8400.,  7573.,  6662.,  5566.,  4452.,  5578.,  6794.,  8104.,  8330.,  8524.,  8686.,  7382.,  6252.,  4972.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,   13.,   41.,   86.,  150.,  186.,  222.,  258.,  239.,  191.,  112.,   64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,  169.,  398.,  690., 1048., 1126., 1204., 1282., 1086.,  809.,  448.,  274.,  629., 1068., 1594., 1672., 1750., 1828., 1527., 1124.,  616.,  379.,  860., 1446., 2140., 2218., 2296., 2374., 1968., 1439.,  784.,  484., 1091., 1824., 2686., 2764., 2842., 2920., 2409., 1754.,  952.,  539., 1171., 1898., 2722., 2790., 2858., 2926., 2357., 1681.,  896.,  387.,  826., 1318., 1864., 1906., 1948., 1990., 1582., 1115.,  588.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 13328., 16284., 19736., 21844., 21672., 22812., 23792., 19424., 15520., 12672., 13804., 15509., 17626., 19075., 19421., 20311., 20945., 17974., 14447., 11348.,  8192., 10176., 12480., 14784., 15928., 16944., 17832., 15088., 12952., 10144.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   437.,  1174.,  2235.,  3644.,  4244.,  4844.,  5444.,  4809.,  3706.,  2111.,  1235.,  2938.,  5133.,  7844.,  8444.,  9044.,  9644.,  8211.,  6142.,  3413.,  2033.,  4702.,  8031., 12044., 12644., 13244., 13844., 11613.,  8578.,  4715.,  2831.,  6466., 10929., 16244., 16844., 17444., 18044., 15015., 11014.,  6017.,  3629.,  8230., 13827., 20444., 21044., 21644., 22244., 18417., 13450.,  7319.,  4128.,  8992., 14608., 20992., 21520., 22048., 22576., 18220., 13016.,  6948.,  2993.,  6398., 10223., 14476., 14804., 15132., 15460., 12305.,  8682.,  4583.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  6800.,  8172., 11304., 12516., 12180., 11364., 13332., 10760.,  8444.,  6800.,  6072.,  7086.,  8340.,  9930., 11298., 10394.,  9810.,  8708.,  7718.,  5944.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2506.,  6340.,  9134., 12616.,  9192.,  6600.,  7400.,  7926.,  6996.,  4418.,  2130.,  5716., 10630., 14504., 12616.,  9192.,  6600.,  5646.,  5284.,  3466.,  1754.,  4772.,  9246., 15048., 14504., 12616.,  9192.,  5222.,  3572.,  2514.,  1378.,  3828.,  7542., 12712., 15048., 14504., 12616.,  8190.,  3716.,  1562.,   932.,  2600.,  5132.,  8656., 10768., 12560., 11472.,  8764.,  4424.,   692.,   110.,   428.,  1018.,  1944.,  2488.,  3032.,  3256.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  8126.,  8636.,  9205.,  9812., 10523., 11234., 12446., 13268., 12575., 13382., 12576., 13368., 13121., 13930., 11609., 12296.,  9998., 10588.,  8210.,  8696.,  8016.,  8436.,  9334.,  9826., 10840., 11410., 11554., 12208., 10738., 11370., 10818., 11428., 10866., 11486.,  8828.,  9350.,  7202.,  7652.,  5784.,  6156.,  6918.,  7272.,  7279.,  7702.,  7807.,  8304.,  8224.,  8800.,  7805.,  8384.,  8346.,  8928.,  8823.,  9408.,  7489.,  7978.,  6024.,  6444.,  5122.,  5468.,  5136.,  5448.,  6532.,  6900.,  8072.,  8500.,  9156.,  9648.,  9228.,  9716.,  9236.,  9720.,  9180.,  9660.,  7680.,  8076.,  6564.,  6904.,  5216.,  5496.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,   95.,  104.,   83.,   90.,   52.,   56.,   20.,   26.,   68.,   82.,  148.,  172.,  264.,  300.,  336.,  372.,  408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,  113.,  128.,  301.,  334.,  570.,  624.,  926., 1004., 1082., 1160., 1238., 1316., 1394., 1472., 1227., 1290.,  943.,  988.,  536.,  560.,  323.,  338.,  763.,  796., 1326., 1380., 2018., 2096., 2174., 2252., 2330., 2408., 2486., 2564., 2109., 2172., 1573., 1618.,  872.,  896.,  533.,  548., 1225., 1258., 2082., 2136., 3110., 3188., 3266., 3344., 3422., 3500., 3578., 3656., 2991., 3054., 2203., 2248., 1208., 1232.,  743.,  758., 1687., 1720., 2838., 2892., 4202., 4280., 4358., 4436., 4514., 4592., 4670., 4748., 3873., 3936., 2833., 2878., 1544., 1568.,  953.,  968., 2149., 2182., 3594., 3648., 5294., 5372., 5450., 5528., 5606., 5684., 5762., 5840., 4755., 4818., 3463., 3508., 1880., 1904., 1064., 1078., 2312., 2342., 3748., 3796., 5376., 5444., 5512., 5580., 5648., 5716., 5784., 5852., 4660., 4714., 3324., 3362., 1772., 1792.,  765.,  774., 1633., 1652., 2606., 2636., 3686., 3728., 3770., 3812., 3854., 3896., 3938., 3980., 3131., 3164., 2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 14432., 15952., 16750., 18578., 18520., 20704., 18942., 21530., 19562., 22230., 20854., 23474., 21730., 24430., 17160., 19472., 13170., 15174.,  9696., 11344., 12416., 13672., 14265., 15807., 16300., 18168., 17705., 19939., 18027., 20413., 19533., 21943., 20527., 22961., 17204., 19264., 13087., 14861.,  8864., 10312.,  9184., 10112., 11412., 12524., 12368., 13696., 13268., 14844., 13436., 15108., 13348., 15116., 15052., 16916., 13552., 15136., 11404., 12804.,  8192.,  9376.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   448.,   552.,  1022.,  1202.,  1872.,  2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,  2688.,  2856.,  1594.,  1686.,   787.,   901.,  2156.,  2408.,  4155.,  4569.,  6832.,  7432.,  8032.,  8632.,  9232.,  9832., 10432., 11032.,  9249.,  9735.,  7148.,  7496.,  4081.,  4267.,  2383.,  2497.,  5684.,  5936.,  9951., 10365., 15232., 15832., 16432., 17032., 17632., 18232., 18832., 19432., 16053., 16539., 12020., 12368.,  6685.,  6871.,  3979.,  4093.,  9212.,  9464., 15747., 16161., 23632., 24232., 24448., 25048., 24752., 25352., 24544., 25144., 18633., 19119., 13564., 13912.,  7369.,  7555.,  5191.,  5305., 11460., 11712., 18855., 19269., 27424., 28024., 26192., 26792., 24448., 25048., 22192., 22792., 15069., 15555., 11012., 11360.,  6005.,  6191.,  4355.,  4469.,  9612.,  9864., 15819., 16233., 23024., 23624., 19744., 20344., 15952., 16552., 11648., 12248.,  5361.,  5847.,  4364.,  4712.,  2593.,  2779.,  1262.,  1370.,  2960.,  3192.,  5126.,  5498.,  7792.,  8320.,  8848.,  9376.,  9904., 10432., 10960., 11488.,  9242.,  9662.,  6864.,  7160.,  3794.,  3950.,  1453.,  1523.,  3212.,  3360.,  5293.,  5527.,  7712.,  8040.,  8368.,  8696.,  9024.,  9352.,  9680., 10008.,  7903.,  8161.,  5708.,  5888.,  3079.,  3173.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  9304., 11960.,  9560., 12216.,  9326., 11606.,  6300.,  8012.,  2466.,  3418.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   570.,   946.,  2204.,  3148.,  5094.,  6798.,  9304., 11960.,  9560., 12216., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   190.,   230.,   756.,   900.,  1506.,  1818.,  2376.,  2920.,  2120.,  2664.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  8126.,  8636.,  9146.,  9656.,  9259.,  9866., 10473., 11080.,  9775., 10486., 11197., 11908., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 11816., 12608., 13400., 14192., 12121., 12930., 13739., 14548., 10275., 10962., 11649., 12336.,  8846.,  9436., 10026., 10616.,  6974.,  7460.,  7946.,  8432.,  7612.,  8032.,  8452.,  8872.,  8288.,  8780.,  9272.,  9764.,  8950.,  9520., 10090., 10660.,  8886.,  9540., 10194., 10848.,  8556.,  9188.,  9820., 10452.,  8994.,  9604., 10214., 10824.,  9336.,  9956., 10576., 11196.,  7374.,  7896.,  8418.,  8940.,  6146.,  6596.,  7046.,  7496.,  4924.,  5296.,  5668.,  6040.,  6762.,  7116.,  7470.,  7824.,  7575.,  7998.,  8421.,  8844.,  8045.,  8542.,  9039.,  9536.,  8480.,  9056.,  9632., 10208.,  8087.,  8666.,  9245.,  9824.,  8590.,  9172.,  9754., 10336.,  8965.,  9550., 10135., 10720.,  7513.,  8002.,  8491.,  8980.,  5868.,  6288.,  6708.,  7128.,  4586.,  4932.,  5278.,  5624.,  5704.,  6016.,  6328.,  6640.,  7000.,  7368.,  7736.,  8104.,  7588.,  8016.,  8444.,  8872.,  7772.,  8264.,  8756.,  9248.,  7408.,  7896.,  8384.,  8872.,  6916.,  7400.,  7884.,  8368.,  7320.,  7800.,  8280.,  8760.,  6388.,  6784.,  7180.,  7576.,  5236.,  5576.,  5916.,  6256.,  3688.,  3968.,  4248.,  4528.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,   100.,   104.,   108.,   112.,    34.,    40.,    46.,    52.,   122.,   136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,   564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,   866.,   896.,   926.,   956.,   698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,   226.,   241.,   256.,   569.,   602.,   635.,   668.,  1086.,  1140.,  1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,  2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,  2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,  1072.,  1096.,  1120.,   631.,   646.,   661.,   676.,  1493.,  1526.,  1559.,  1592.,  2598.,  2652.,  2706.,  2760.,  3958.,  4036.,  4114.,  4192.,  4270.,  4348.,  4426.,  4504.,  4582.,  4660.,  4738.,  4816.,  4894.,  4972.,  5050.,  5128.,  4155.,  4218.,  4281.,  4344.,  3101.,  3146.,  3191.,  3236.,  1720.,  1744.,  1768.,  1792.,  1051.,  1066.,  1081.,  1096.,  2417.,  2450.,  2483.,  2516.,  4110.,  4164.,  4218.,  4272.,  6142.,  6220.,  6298.,  6376.,  6454.,  6532.,  6610.,  6688.,  6766.,  6844.,  6922.,  7000.,  7078.,  7156.,  7234.,  7312.,  5919.,  5982.,  6045.,  6108.,  4361.,  4406.,  4451.,  4496.,  2392.,  2416.,  2440.,  2464.,  1471.,  1486.,  1501.,  1516.,  3341.,  3374.,  3407.,  3440.,  5622.,  5676.,  5730.,  5784.,  8326.,  8404.,  8482.,  8560.,  8638.,  8716.,  8794.,  8872.,  8950.,  9028.,  9106.,  9184.,  9262.,  9340.,  9418.,  9496.,  7683.,  7746.,  7809.,  7872.,  5621.,  5666.,  5711.,  5756.,  3064.,  3088.,  3112.,  3136.,  1891.,  1906.,  1921.,  1936.,  4265.,  4298.,  4331.,  4364.,  7134.,  7188.,  7242.,  7296., 10510., 10588., 10666., 10744., 10822., 10900., 10978., 11056., 11134., 11212., 11290., 11368., 11446., 11524., 11602., 11680.,  9447.,  9510.,  9573.,  9636.,  6881.,  6926.,  6971.,  7016.,  3736.,  3760.,  3784.,  3808.,  2114.,  2128.,  2142.,  2156.,  4594.,  4624.,  4654.,  4684.,  7448.,  7496.,  7544.,  7592., 10684., 10752., 10820., 10888., 10956., 11024., 11092., 11160., 11228., 11296., 11364., 11432., 11500., 11568., 11636., 11704.,  9266.,  9320.,  9374.,  9428.,  6610.,  6648.,  6686.,  6724.,  3524.,  3544.,  3564.,  3584.,  1521.,  1530.,  1539.,  1548.,  3247.,  3266.,  3285.,  3304.,  5182.,  5212.,  5242.,  5272.,  7330.,  7372.,  7414.,  7456.,  7498.,  7540.,  7582.,  7624.,  7666.,  7708.,  7750.,  7792.,  7834.,  7876.,  7918.,  7960.,  6229.,  6262.,  6295.,  6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2080., 2832., 3584., 4336., 2546., 3478., 4410., 5342., 3208., 4368., 5528., 6688., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 3560., 4848., 6136., 7424., 3030., 4138., 5246., 6354., 2432., 3312., 4192., 5072., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   904.,   976.,  1048.,  1120.,  1192.,  1264.,  1336.,  1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,   743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   816.,   920.,  1024.,  1128.,  1906.,  2086.,  2266.,  2446.,  3536.,  3808.,  4080.,  4352.,  4624.,  4896.,  5168.,  5440.,  5712.,  5984.,  6256.,  6528.,  6800.,  7072.,  7344.,  7616.,  6454.,  6682.,  6910.,  7138.,  5248.,  5416.,  5584.,  5752.,  3118.,  3210.,  3302.,  3394.,  1487.,  1601.,  1715.,  1829.,  4120.,  4372.,  4624.,  4876.,  7611.,  8025.,  8439.,  8853., 11928., 12528., 13128., 13728., 12920., 13520., 14120., 14720., 13400., 14000., 14600., 15200., 15800., 16400., 17000., 17600., 13905., 14391., 14877., 15363., 10704., 11052., 11400., 11748.,  6101.,  6287.,  6473.,  6659.,  4295.,  4409.,  4523.,  4637.,  9896., 10148., 10400., 10652., 14467., 14881., 15295., 15709., 20024., 20624., 21224., 21824., 18968., 19568., 20168., 20768., 17400., 18000., 18600., 19200., 19800., 20400., 21000., 21600., 17145., 17631., 18117., 18603., 13024., 13372., 13720., 14068.,  7341.,  7527.,  7713.,  7899.,  5055.,  5169.,  5283.,  5397., 11576., 11828., 12080., 12332., 15179., 15593., 16007., 16421., 19928., 20528., 21128., 21728., 16440., 17040., 17640., 18240., 11928., 12528., 13128., 13728., 12920., 13520., 14120., 14720., 10017., 10503., 10989., 11475.,  7920.,  8268.,  8616.,  8964.,  4613.,  4799.,  4985.,  5171.,  3383.,  3497.,  3611.,  3725.,  7880.,  8132.,  8384.,  8636., 13587., 14001., 14415., 14829., 20600., 21200., 21800., 22400., 20568., 21168., 21768., 22368., 20024., 20624., 21224., 21824., 18968., 19568., 20168., 20768., 13257., 13743., 14229., 14715., 10240., 10588., 10936., 11284.,  5853.,  6039.,  6225.,  6411.,  4143.,  4257.,  4371.,  4485.,  9560.,  9812., 10064., 10316., 16347., 16761., 17175., 17589., 24600., 25200., 25800., 26400., 22520., 23120., 23720., 24320., 19928., 20528., 21128., 21728., 16440., 17040., 17640., 18240.,  9457.,  9943., 10429., 10915.,  7056.,  7404.,  7752.,  8100.,  3125.,  3311.,  3497.,  3683.,  2442.,  2550.,  2658.,  2766.,  5744.,  5976.,  6208.,  6440.,  9970., 10342., 10714., 11086., 15184., 15712., 16240., 16768., 17296., 17824., 18352., 18880., 19408., 19936., 20464., 20992., 19088., 19616., 20144., 20672., 15222., 15642., 16062., 16482., 10048., 10344., 10640., 10936.,  3502.,  3658.,  3814.,  3970.,  2853.,  2923.,  2993.,  3063.,  6312.,  6460.,  6608.,  6756., 10409., 10643., 10877., 11111., 15176., 15504., 15832., 16160., 16488., 16816., 17144., 17472., 17800., 18128., 18456., 18784., 14632., 14960., 15288., 15616., 10619., 10877., 11135., 11393.,  5776.,  5956.,  6136.,  6316.,    71.,   165.,   259.,   353.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5638.,  6911.,  8327.,  9892., 10545.,  9309.,  7874.,  6234.,  5068.,  5915.,  6892.,  8004.,  8580.,  7459.,  6156.,  4666.,  2780.,  3758.,  4838.,  6024.,  6474.,  5882.,  5140.,  4244.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   16.,   19.,   14.,   11.,   35.,   45.,   55.,   65.,   75.,   85.,   56.,   44.,  121.,  142.,  163.,  184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,  470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,  338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450., 1046., 1082., 1118., 1154., 1190., 1226.,  700.,  512., 1147., 1180., 1213., 1246., 1279., 1312.,  728.,  467., 1025., 1051., 1077., 1103., 1129., 1155.,  630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   42.,   62.,   82.,  102.,  122.,   95.,   64.,  224.,  296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,  986., 1142., 1298., 1454., 1610., 1015.,  792., 2064., 2336., 2608., 2880., 3152., 3424., 2064., 1632., 3968., 4240., 4512., 4784., 5056., 5328., 3128., 2472., 5872., 6144., 6416., 6688., 6960., 7232., 4192., 3312., 7776., 8048., 8320., 8592., 8864., 9136., 5256., 3853., 8678., 8930., 9182., 9434., 9686., 9938., 5539., 3556., 7832., 8032., 8232., 8432., 8632., 8832., 4832., 2309., 5014., 5130., 5246., 5362., 5478., 5594., 3023.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,  6660.,  6196.,  7396.,  8596.,  9796.,  6042.,  5224., 13200., 12624., 11024., 13136., 15248., 17360., 10440.,  9032., 21584., 18960., 15312., 16784., 17232., 19344., 11304., 10152., 23568., 18896., 13200., 12624., 11024., 13136.,  8072.,  7176., 17360., 19472., 21584., 18960., 15312., 16784.,  8936.,  8226., 19060., 21028., 22996., 18180., 12340., 11620.,  4906.,  4692., 11016., 12584., 14152., 15720., 17288., 14120.,  4932.,  4510., 10124., 11036., 11948., 12860., 13772.,  7900.,   310.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5136.,  5420.,  6444.,  6814.,  7968.,  8430.,  9688., 10248., 10408., 11010.,  9316.,  9850.,  7896.,  8356.,  6424.,  6804.,  5542.,  5816.,  6515.,  6870.,  7679.,  8120.,  8756.,  9288.,  9329.,  9896.,  7953.,  8454.,  6282.,  6712.,  4850.,  5204.,  3664.,  3896.,  5008.,  5308.,  6520.,  6892.,  7664.,  8112.,  8152.,  8628.,  7472.,  7892.,  6560.,  6920.,  5408.,  5704.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  106.,  112.,   79.,   88.,  221.,  242.,  263.,  284.,  305.,  326.,  347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  212.,  228.,  544.,  580.,  616.,  652.,  688.,  724.,  760.,  796.,  832.,  868.,  904.,  940.,  540.,  560.,  436.,  452., 1048., 1084., 1120., 1156., 1192., 1228., 1264., 1300., 1336., 1372., 1408., 1444.,  820.,  840.,  660.,  676., 1552., 1588., 1624., 1660., 1696., 1732., 1768., 1804., 1840., 1876., 1912., 1948., 1100., 1120.,  884.,  900., 2056., 2092., 2128., 2164., 2200., 2236., 2272., 2308., 2344., 2380., 2416., 2452., 1380., 1400., 1009., 1024., 2261., 2294., 2327., 2360., 2393., 2426., 2459., 2492., 2525., 2558., 2591., 2624., 1438., 1456.,  922.,  934., 2024., 2050., 2076., 2102., 2128., 2154., 2180., 2206., 2232., 2258., 2284., 2310., 1246., 1260.,  595.,  602., 1289., 1304., 1319., 1334., 1349., 1364., 1379., 1394., 1409., 1424., 1439., 1454.,  776.,  784.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,   392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,  1040.,  1112.,  1184.,   758.,   802.,   527.,   593.,  1540.,  1696.,  1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,  3256.,  1961.,  2051.,  1492.,  1612.,  3920.,  4192.,  4464.,  4736.,  5008.,  5280.,  5552.,  5824.,  6096.,  6368.,  6640.,  6912.,  4012.,  4164.,  3172.,  3292.,  7728.,  8000.,  8272.,  8544.,  8816.,  9088.,  9360.,  9632.,  9904., 10176., 10448., 10720.,  6140.,  6292.,  4852.,  4972., 11536., 11808., 12080., 12352., 12624., 12896., 13168., 13440., 13712., 13984., 14256., 14528.,  8268.,  8420.,  6532.,  6652., 15344., 15616., 15888., 16160., 16432., 16704., 16976., 17248., 17520., 17792., 18064., 18336., 10396., 10548.,  7619.,  7733., 17164., 17416., 17668., 17920., 18172., 18424., 18676., 18928., 19180., 19432., 19684., 19936., 10973., 11111.,  7042.,  7134., 15512., 15712., 15912., 16112., 16312., 16512., 16712., 16912., 17112., 17312., 17512., 17712.,  9582.,  9690.,  4577.,  4631.,  9940., 10056., 10172., 10288., 10404., 10520., 10636., 10752., 10868., 10984., 11100., 11216.,  5999.,  6061.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,  1044.,  1188.,  1332.,  1476.,  1620.,  1764.,  1318.,  1422.,   700.,   908.,  2152.,  2696.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  4840.,  5384.,  5928.,  6472.,  4044.,  4380.,  3162.,  3666.,  6428.,  7628.,  4476.,  5676.,  5212.,  6412.,  7612.,  8812., 10012., 11212., 12412., 13612.,  7922.,  8618.,  7160.,  8088., 13904., 16016.,  9680., 11792.,  9552., 11664., 12112., 14224., 16336., 18448., 20560., 22672., 12696., 13880., 12088., 13016., 22224., 24336., 13904., 16016.,  9680., 11792.,  9552., 11664., 12112., 14224., 16336., 18448., 10328., 11512., 10232., 11160., 24784., 26896., 22224., 24336., 13904., 16016.,  9680., 11792.,  9552., 11664., 12112., 14224.,  7960.,  9144.,  8376.,  9304., 20560., 22672., 24784., 26896., 22224., 24336., 13904., 16016.,  9680., 11792.,  9552., 11664.,  5592.,  6776.,  6410.,  7298., 15868., 17836., 19804., 21772., 23740., 25708., 20892., 22860., 12284., 14252.,  7772.,  9740.,  3362.,  4442.,  4188.,  4908., 10536., 12104., 13672., 15240., 16808., 18376., 19944., 21512., 16296., 17864.,  6888.,  8456.,  1516.,  2364.,  1966.,  2390.,  5076.,  5988.,  6900.,  7812.,  8724.,  9636., 10548., 11460., 12372., 13284.,  7412.,  8324.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5316.,  5600.,  5884.,  6168.,  6278.,  6648.,  7018.,  7388.,  7282.,  7744.,  8206.,  8668.,  8576.,  9136.,  9696., 10256.,  9206.,  9808., 10410., 11012.,  7698.,  8232.,  8766.,  9300.,  6180.,  6640.,  7100.,  7560.,  4404.,  4784.,  5164.,  5544.,  5306.,  5580.,  5854.,  6128.,  6499.,  6854.,  7209.,  7564.,  7461.,  7902.,  8343.,  8784.,  8436.,  8968.,  9500., 10032.,  8971.,  9538., 10105., 10672.,  7853.,  8354.,  8855.,  9356.,  6246.,  6676.,  7106.,  7536.,  4674.,  5028.,  5382.,  5736.,  4120.,  4352.,  4584.,  4816.,  5620.,  5920.,  6220.,  6520.,  6588.,  6960.,  7332.,  7704.,  7264.,  7712.,  8160.,  8608.,  7700.,  8176.,  8652.,  9128.,  6972.,  7392.,  7812.,  8232.,  5848.,  6208.,  6568.,  6928.,  4312.,  4608.,  4904.,  5200.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,   54.,   56.,   32.,   36.,   40.,   44.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,  206.,  212.,  218.,  224.,  149.,  158.,  167.,  176.,  421.,  442.,  463.,  484.,  505.,  526.,  547.,  568.,  589.,  610.,  631.,  652.,  673.,  694.,  715.,  736.,  757.,  778.,  799.,  820.,  841.,  862.,  883.,  904.,  524.,  536.,  548.,  560.,  408.,  424.,  440.,  456., 1052., 1088., 1124., 1160., 1196., 1232., 1268., 1304., 1340., 1376., 1412., 1448., 1484., 1520., 1556., 1592., 1628., 1664., 1700., 1736., 1772., 1808., 1844., 1880., 1060., 1080., 1100., 1120.,  856.,  872.,  888.,  904., 2060., 2096., 2132., 2168., 2204., 2240., 2276., 2312., 2348., 2384., 2420., 2456., 2492., 2528., 2564., 2600., 2636., 2672., 2708., 2744., 2780., 2816., 2852., 2888., 1620., 1640., 1660., 1680., 1304., 1320., 1336., 1352., 3068., 3104., 3140., 3176., 3212., 3248., 3284., 3320., 3356., 3392., 3428., 3464., 3500., 3536., 3572., 3608., 3644., 3680., 3716., 3752., 3788., 3824., 3860., 3896., 2180., 2200., 2220., 2240., 1752., 1768., 1784., 1800., 4076., 4112., 4148., 4184., 4220., 4256., 4292., 4328., 4364., 4400., 4436., 4472., 4508., 4544., 4580., 4616., 4652., 4688., 4724., 4760., 4796., 4832., 4868., 4904., 2740., 2760., 2780., 2800., 2003., 2018., 2033., 2048., 4489., 4522., 4555., 4588., 4621., 4654., 4687., 4720., 4753., 4786., 4819., 4852., 4885., 4918., 4951., 4984., 5017., 5050., 5083., 5116., 5149., 5182., 5215., 5248., 2858., 2876., 2894., 2912., 1832., 1844., 1856., 1868., 4022., 4048., 4074., 4100., 4126., 4152., 4178., 4204., 4230., 4256., 4282., 4308., 4334., 4360., 4386., 4412., 4438., 4464., 4490., 4516., 4542., 4568., 4594., 4620., 2478., 2492., 2506., 2520., 1183., 1190., 1197., 1204., 2563., 2578., 2593., 2608., 2623., 2638., 2653., 2668., 2683., 2698., 2713., 2728., 2743., 2758., 2773., 2788., 2803., 2818., 2833., 2848., 2863., 2878., 2893., 2908., 1544., 1552., 1560., 1568.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,  1614.,  1003.,  1069.,  1135.,  1201.,  2960.,  3116.,  3272.,  3428.,  3584.,  3740.,  3896.,  4052.,  4208.,  4364.,  4520.,  4676.,  4832.,  4988.,  5144.,  5300.,  5456.,  5612.,  5768.,  5924.,  6080.,  6236.,  6392.,  6548.,  3853.,  3943.,  4033.,  4123.,  2892.,  3012.,  3132.,  3252.,  7632.,  7904.,  8176.,  8448.,  8720.,  8992.,  9264.,  9536.,  9808., 10080., 10352., 10624., 10896., 11168., 11440., 11712., 11984., 12256., 12528., 12800., 13072., 13344., 13616., 13888.,  7908.,  8060.,  8212.,  8364.,  6252.,  6372.,  6492.,  6612., 15248., 15520., 15792., 16064., 16336., 16608., 16880., 17152., 17424., 17696., 17968., 18240., 17744., 18016., 18288., 18560., 17040., 17312., 17584., 17856., 18128., 18400., 18672., 18944., 10372., 10524., 10676., 10828.,  8844.,  8964.,  9084.,  9204., 20304., 20576., 20848., 21120., 21392., 21664., 21936., 22208., 22480., 22752., 23024., 23296., 20752., 21024., 21296., 21568., 18000., 18272., 18544., 18816., 19088., 19360., 19632., 19904., 10788., 10940., 11092., 11244.,  9388.,  9508.,  9628.,  9748., 21264., 21536., 21808., 22080., 22352., 22624., 22896., 23168., 23440., 23712., 23984., 24256., 19664., 19936., 20208., 20480., 14864., 15136., 15408., 15680., 15952., 16224., 16496., 16768.,  9156.,  9308.,  9460.,  9612.,  7471.,  7585.,  7699.,  7813., 16728., 16980., 17232., 17484., 17736., 17988., 18240., 18492., 18744., 18996., 19248., 19500., 12840., 13092., 13344., 13596.,  5912.,  6164.,  6416.,  6668.,  6920.,  7172.,  7424.,  7676.,  4177.,  4315.,  4453.,  4591.,  2238.,  2330.,  2422.,  2514.,  5272.,  5472.,  5672.,  5872.,  6072.,  6272.,  6472.,  6672.,  6872.,  7072.,  7272.,  7472.,  7672.,  7872.,  8072.,  8272.,  8472.,  8672.,  8872.,  9072.,  9272.,  9472.,  9672.,  9872.,  5258.,  5366.,  5474.,  5582.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  5640.,  5756.,  5872.,  5988.,  6104.,  6220.,  6336.,  6452.,  6568.,  6684.,  6800.,  6916.,  7032.,  7148.,  7264.,  7380.,  7496.,  7612.,  4015.,  4077.,  4139.,  4201.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,   902.,  1006.,  1110.,  1214.,   620.,   828.,  1036.,  1244.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  2492.,  2828.,  3164.,  3500.,  2666.,  3170.,  3674.,  4178.,  6060.,  7260.,  8460.,  9660.,  6508.,  7708.,  8908., 10108.,  9644., 10844., 12044., 13244.,  9708., 10908., 12108., 13308.,  6060.,  7260.,  8460.,  9660.,  6508.,  7708.,  8908., 10108.,  4258.,  4954.,  5650.,  6346.,  5656.,  6584.,  7512.,  8440., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320.,  7352.,  8536.,  9720., 10904.,  8728.,  9656., 10584., 11512., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320.,  6328.,  7512.,  8696.,  9880.,  5656.,  6584.,  7512.,  8440., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416.,  7352.,  8536.,  9720., 10904.,  4632.,  5560.,  6488.,  7416., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 16080., 18192., 20304., 22416., 11984., 14096., 16208., 18320., 11984., 14096., 16208., 18320., 16080., 18192., 20304., 22416., 10424., 11608., 12792., 13976.,  5466.,  6354.,  7242.,  8130., 11148., 13116., 15084., 17052., 10572., 12540., 14508., 16476., 14732., 16700., 18668., 20636., 15820., 17788., 19756., 21724., 11148., 13116., 15084., 17052., 10572., 12540., 14508., 16476.,  6034.,  7114.,  8194.,  9274.,  7916.,  8636.,  9356., 10076., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  2492.,  3340.,  4188.,  5036.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  5924.,  6836.,  7748.,  8660.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  6020.,  7814.,  9664., 11673., 11714., 12171., 10786.,  9150.,  7256.,  7046.,  8750., 10285., 11978., 11571., 11804., 10217.,  8380.,  6286.,  6000.,  7021.,  8192.,  9519.,  9276.,  9929.,  8724.,  7307.,  5672.,  4770.,  5102.,  6591.,  8218.,  8698.,  9274.,  8407.,  7350.,  6098.,  4576.,  5718.,  6960.,  8306.,  8436.,  8886.,  7832.,  6626.,  5264.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,   38.,   80.,  101.,  122.,  143.,  164.,  138.,   84.,   54.,  144.,  273.,  318.,  363.,  408.,  453.,  360.,  210.,  148.,  364.,  652.,  730.,  808.,  886.,  964.,  740.,  420.,  302.,  700., 1198., 1276., 1354., 1432., 1510., 1132.,  630.,  456., 1036., 1744., 1822., 1900., 1978., 2056., 1524.,  840.,  610., 1372., 2290., 2368., 2446., 2524., 2602., 1916., 1050.,  714., 1557., 2532., 2604., 2676., 2748., 2820., 2031., 1092.,  661., 1418., 2273., 2330., 2387., 2444., 2501., 1778.,  945.,  430.,  913., 1450., 1483., 1516., 1549., 1582., 1115.,  588.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236., 17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596., 13400., 16522., 20180., 23814., 24282., 24238., 19668., 17362., 14200., 11876., 12727., 16030., 18017., 18139., 17749., 15854., 13195., 11012.,  9584., 11932., 14680., 16996., 17756., 18132., 16088., 13356.,  9904.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   101.,   143.,   185.,   227.,   222.,   149.,    70.,   244.,   538.,   694.,   850.,  1006.,  1162.,   996.,   614.,   363.,  1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,  1052.,  2632.,  4772.,  5372.,  5972.,  6572.,  7172.,  5544.,  3164.,  2228.,  5208.,  8972.,  9572., 10172., 10772., 11372.,  8568.,  4788.,  3404.,  7784., 13172., 13772., 14372., 14972., 15572., 11592.,  6412.,  4580., 10360., 17372., 17972., 18572., 19172., 19772., 14616.,  8036.,  5457., 11934., 19455., 20013., 20571., 21129., 21687., 15654.,  8433.,  5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788.,  7338.,  3335.,  7090., 11273., 11531., 11789., 12047., 12305.,  8682.,  4583.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  6672.,  8916., 10008., 13404., 11884., 12764.,  9336.,  9140.,  6672.,  6200.,  6694.,  9508., 10450., 10730.,  9218.,  9092.,  6998.,  6200.,  4448.,  6456.,  6672.,  8424.,  7784.,  8936.,  6672.,  5944.,  4448.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,  2314.,  4420.,  7214.,  5654.,  6462.,  8614., 10766.,  7908.,  3082.,  5080.,  8880.,  8776.,  8424.,  7368.,  8680., 11336.,  8880.,  4056.,  5112., 11760., 13736.,  8776.,  8424.,  7368.,  8680.,  7024.,  3256.,  4312., 10736., 15816., 13736.,  8776.,  8424.,  7368.,  5168.,  2456.,  3512.,  8880., 13992., 15816., 13736.,  8776.,  8424.,  4656.,  1656.,  2642.,  6740., 10630., 12974., 14486., 12094.,  6822.,  4596.,   914.,  1500.,  3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,   412.,   278.,   828.,  1714.,  2218.,  2722.,  3226.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7254.,  7720.,  9212.,  9804., 11243., 11936., 12913., 13714., 12466., 13252., 12819., 13622., 10801., 11492.,  8352.,  8924.,  6482.,  6928.,  7454.,  7916.,  9681., 10268., 11531., 12218., 12730., 13524., 12411., 13190., 12316., 13112., 10469., 11154.,  8193.,  8760.,  6786.,  7228.,  6696.,  7040.,  8037.,  8474.,  9608., 10144., 11261., 11902., 11245., 11896., 11965., 12658., 10404., 11016.,  8489.,  9014.,  6784.,  7216.,  5478.,  5796.,  5898.,  6300.,  7539.,  8030.,  8939.,  9524.,  9352.,  9940.,  9925., 10548.,  8585.,  9134.,  6934.,  7404.,  5826.,  6212.,  5056.,  5312.,  6442.,  6764.,  7992.,  8384.,  8978.,  9444.,  8858.,  9320.,  9346.,  9836.,  8352.,  8784.,  7122.,  7492.,  5648.,  5952.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,   64.,   76.,  139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,  307.,  328.,  260.,  276.,  159.,  168.,   96.,  108.,  261.,  288.,  501.,  546.,  591.,  636.,  681.,  726.,  771.,  816.,  861.,  906.,  687.,  720.,  402.,  420.,  274.,  296.,  680.,  728., 1226., 1304., 1382., 1460., 1538., 1616., 1694., 1772., 1850., 1928., 1424., 1480.,  810.,  840.,  582.,  604., 1352., 1400., 2318., 2396., 2474., 2552., 2630., 2708., 2786., 2864., 2942., 3020., 2208., 2264., 1230., 1260.,  890.,  912., 2024., 2072., 3410., 3488., 3566., 3644., 3722., 3800., 3878., 3956., 4034., 4112., 2992., 3048., 1650., 1680., 1198., 1220., 2696., 2744., 4502., 4580., 4658., 4736., 4814., 4892., 4970., 5048., 5126., 5204., 3776., 3832., 2070., 2100., 1407., 1428., 3069., 3114., 4992., 5064., 5136., 5208., 5280., 5352., 5424., 5496., 5568., 5640., 4011., 4062., 2157., 2184., 1305., 1322., 2800., 2836., 4489., 4546., 4603., 4660., 4717., 4774., 4831., 4888., 4945., 5002., 3516., 3556., 1869., 1890.,  850.,  860., 1805., 1826., 2867., 2900., 2933., 2966., 2999., 3032., 3065., 3098., 3131., 3164., 2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 15128., 17008., 18409., 20771., 20248., 23020., 24437., 27675., 24315., 27561., 24961., 28215., 19940., 22696., 16953., 19283., 14000., 15848., 15456., 17304., 18715., 21037., 21668., 24392., 23755., 26937., 24401., 27591., 23767., 26965., 20496., 23204., 16075., 18365., 12856., 14672., 12344., 13768., 15732., 17504., 18012., 20180., 20304., 22916., 20156., 22848., 21032., 23804., 17204., 19596., 15508., 17600., 12424., 14168., 12168., 13392., 13467., 14969., 16472., 18292., 18191., 20369., 18161., 20363., 17107., 19333., 14620., 16520., 10923., 12585.,  9264., 10648.,  8816.,  9680., 11072., 12200., 11832., 13256., 14232., 15984., 15680., 17528., 16360., 18304., 14664., 16408., 11872., 13384.,  7920.,  9168.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,   112.,   148.,   420.,   508.,   956.,  1112.,  1268.,  1424.,  1580.,  1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,   657.,   747.,  1848.,  2052.,  3621.,  3963.,  4305.,  4647.,  4989.,  5331.,  5673.,  6015.,  6357.,  6699.,  5124.,  5376.,  3021.,  3159.,  1976.,  2144.,  4984.,  5352.,  9088.,  9688., 10288., 10888., 11488., 12088., 12688., 13288., 13888., 14488., 10760., 11192.,  6152.,  6384.,  4328.,  4496., 10136., 10504., 17488., 18088., 18688., 19288., 19504., 20104., 19808., 20408., 19600., 20200., 14504., 14936.,  7992.,  8224.,  6296.,  6464., 14008., 14376., 23200., 23800., 24400., 25000., 23680., 24280., 22448., 23048., 20704., 21304., 15176., 15608.,  8296.,  8528.,  6728.,  6896., 14808., 15176., 24304., 24904., 25504., 26104., 23248., 23848., 20480., 21080., 17200., 17800., 12776., 13208.,  7064.,  7296.,  5415.,  5577., 11828., 12176., 19287., 19845., 20403., 20961., 16527., 17085., 12139., 12697.,  7239.,  7797.,  5664.,  6060.,  3267.,  3477.,  1648.,  1780.,  3780.,  4060.,  6428.,  6872.,  7316.,  7760.,  8204.,  8648.,  9092.,  9536.,  9980., 10424.,  7372.,  7684.,  4056.,  4220.,  1619.,  1697.,  3560.,  3724.,  5839.,  6097.,  6355.,  6613.,  6871.,  7129.,  7387.,  7645.,  7903.,  8161.,  5708.,  5888.,  3079.,  3173.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  4656.,  7920.,  7532., 11484.,  6904., 11672., 10708., 16420.,  8356., 14196., 10964., 16676.,  6648., 11416.,  7532., 11484.,  4656.,  7920.,  5160.,  7880.,  4726.,  8094.,  7612., 11692.,  6874., 11730.,  9010., 13802.,  6538., 11266.,  7532., 11484.,  4726.,  8094.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1298.,  1610.,   578.,   890.,   932.,  1204.,   782.,   950.,   420.,   692.,  1528.,  2200.,  3388.,  4588.,  4444.,  5644.,  4988.,  6188.,  4700.,  5900.,  3388.,  4588.,  2712.,  3640.,  2116.,  2644.,  2002.,  2698.,  4300.,  5884.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  4572.,  6028.,  1250.,  1818.,  4072.,  4872.,  7280.,  9136.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424.,  6768.,  8624.,  2536.,  3336.,  3304.,  4104.,  8304., 10160., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  5744.,  7600.,  3816.,  4616.,  2024.,  2824.,  6256.,  8112., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496.,  7792.,  9648.,  2536.,  3336.,  2280.,  3080.,  5232.,  7088., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728.,  6768.,  8624.,  2792.,  3592.,  3962.,  4722.,  6812.,  8524.,  6566.,  8910.,  8566., 10910.,  9542., 11886.,  9494., 11838.,  6566.,  8910.,  5292.,  6876.,  1418.,  2050.,  2660.,  3188.,  6264.,  7448.,  5628.,  7084.,  2780.,  4236.,  5372.,  6828.,  7452.,  8908.,  5628.,  7084.,  1176.,  2104.,   644.,   916.,   486.,   590.,  1476.,  1748.,  2266.,  2770.,  1930.,  2434.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7386.,  7852.,  8318.,  8784.,  9672., 10264., 10856., 11448., 11137., 11830., 12523., 13216., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088., 11651., 12454., 13257., 14060.,  9327., 10018., 10709., 11400.,  7556.,  8128.,  8700.,  9272.,  6054.,  6500.,  6946.,  7392.,  6830.,  7292.,  7754.,  8216.,  8791.,  9378.,  9965., 10552., 10791., 11478., 12165., 12852., 12250., 13044., 13838., 14632., 11883., 12662., 13441., 14220., 11932., 12728., 13524., 14320.,  9789., 10474., 11159., 11844.,  7467.,  8034.,  8601.,  9168.,  5706.,  6148.,  6590.,  7032.,  5496.,  5840.,  6184.,  6528.,  6901.,  7338.,  7775.,  8212.,  8216.,  8752.,  9288.,  9824.,  9721., 10362., 11003., 11644.,  9935., 10586., 11237., 11888., 10565., 11258., 11951., 12644.,  8804.,  9416., 10028., 10640.,  7301.,  7826.,  8351.,  8876.,  5776.,  6208.,  6640.,  7072.,  5838.,  6156.,  6474.,  6792.,  6530.,  6932.,  7334.,  7736.,  7835.,  8326.,  8817.,  9308.,  9005.,  9590., 10175., 10760.,  9252.,  9840., 10428., 11016.,  9787., 10410., 11033., 11656.,  8493.,  9042.,  9591., 10140.,  6678.,  7148.,  7618.,  8088.,  5186.,  5572.,  5958.,  6344.,  4800.,  5056.,  5312.,  5568.,  5906.,  6228.,  6550.,  6872.,  6248.,  6640.,  7032.,  7424.,  7122.,  7588.,  8054.,  8520.,  7398.,  7860.,  8322.,  8784.,  7834.,  8324.,  8814.,  9304.,  6992.,  7424.,  7856.,  8288.,  5746.,  6116.,  6486.,  6856.,  4080.,  4384.,  4688.,  4992.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    94.,   100.,   106.,   112.,   118.,   124.,   130.,   136.,   113.,   118.,   123.,   128.,    75.,    78.,    81.,    84.,    33.,    38.,    43.,    48.,   116.,   128.,   140.,   152.,   257.,   278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,   467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,   656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,   180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,  1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,  1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,  1812.,  1341.,  1374.,  1407.,  1440.,   786.,   804.,   822.,   840.,   526.,   548.,   570.,   592.,  1312.,  1360.,  1408.,  1456.,  2374.,  2452.,  2530.,  2608.,  2686.,  2764.,  2842.,  2920.,  2998.,  3076.,  3154.,  3232.,  3310.,  3388.,  3466.,  3544.,  3622.,  3700.,  3778.,  3856.,  2792.,  2848.,  2904.,  2960.,  1590.,  1620.,  1650.,  1680.,  1142.,  1164.,  1186.,  1208.,  2656.,  2704.,  2752.,  2800.,  4558.,  4636.,  4714.,  4792.,  4870.,  4948.,  5026.,  5104.,  5182.,  5260.,  5338.,  5416.,  5494.,  5572.,  5650.,  5728.,  5806.,  5884.,  5962.,  6040.,  4360.,  4416.,  4472.,  4528.,  2430.,  2460.,  2490.,  2520.,  1758.,  1780.,  1802.,  1824.,  4000.,  4048.,  4096.,  4144.,  6742.,  6820.,  6898.,  6976.,  7054.,  7132.,  7210.,  7288.,  7366.,  7444.,  7522.,  7600.,  7678.,  7756.,  7834.,  7912.,  7990.,  8068.,  8146.,  8224.,  5928.,  5984.,  6040.,  6096.,  3270.,  3300.,  3330.,  3360.,  2374.,  2396.,  2418.,  2440.,  5344.,  5392.,  5440.,  5488.,  8926.,  9004.,  9082.,  9160.,  9238.,  9316.,  9394.,  9472.,  9550.,  9628.,  9706.,  9784.,  9862.,  9940., 10018., 10096., 10174., 10252., 10330., 10408.,  7496.,  7552.,  7608.,  7664.,  4110.,  4140.,  4170.,  4200.,  2793.,  2814.,  2835.,  2856.,  6093.,  6138.,  6183.,  6228.,  9912.,  9984., 10056., 10128., 10200., 10272., 10344., 10416., 10488., 10560., 10632., 10704., 10776., 10848., 10920., 10992., 11064., 11136., 11208., 11280.,  7971.,  8022.,  8073.,  8124.,  4287.,  4314.,  4341.,  4368.,  2593.,  2610.,  2627.,  2644.,  5564.,  5600.,  5636.,  5672.,  8921.,  8978.,  9035.,  9092.,  9149.,  9206.,  9263.,  9320.,  9377.,  9434.,  9491.,  9548.,  9605.,  9662.,  9719.,  9776.,  9833.,  9890.,  9947., 10004.,  6992.,  7032.,  7072.,  7112.,  3717.,  3738.,  3759.,  3780.,  1690.,  1700.,  1710.,  1720.,  3589.,  3610.,  3631.,  3652.,  5701.,  5734.,  5767.,  5800.,  5833.,  5866.,  5899.,  5932.,  5965.,  5998.,  6031.,  6064.,  6097.,  6130.,  6163.,  6196.,  6229.,  6262.,  6295.,  6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2839., 4009., 5179., 6349., 4152., 5532., 6912., 8292., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4252., 5680., 7108., 8536., 2991., 4193., 5395., 6597., 2880., 3864., 4848., 5832., 1912., 2696., 3480., 4264., 2904., 3844., 4784., 5724., 2908., 4052., 5196., 6340., 4164., 5560., 6956., 8352., 3568., 4980., 6392., 7804., 4252., 5680., 7108., 8536., 3172., 4412., 5652., 6892., 3128., 4196., 5264., 6332., 2392., 3304., 4216., 5128., 1840., 2424., 3008., 3592., 1747., 2481., 3215., 3949., 2764., 3688., 4612., 5536., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2991., 4193., 5395., 6597., 3128., 4196., 5264., 6332., 2427., 3385., 4343., 5301., 2392., 3200., 4008., 4816., 1024., 1440., 1856., 2272., 1688., 2240., 2792., 3344., 1864., 2584., 3304., 4024., 2704., 3624., 4544., 5464., 2408., 3360., 4312., 5264., 2880., 3864., 4848., 5832., 2392., 3304., 4216., 5128., 2392., 3200., 4008., 4816., 1728., 2400., 3072., 3744.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,   935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,   196.,   232.,   268.,   304.,   772.,   860.,   948.,  1036.,  1792.,  1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,  3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,  4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,  1245.,  1335.,  1425.,  1515.,  3540.,  3744.,  3948.,  4152.,  6597.,  6939.,  7281.,  7623.,  7069.,  7411.,  7753.,  8095.,  7029.,  7371.,  7713.,  8055.,  8397.,  8739.,  9081.,  9423.,  9765., 10107., 10449., 10791.,  7752.,  8004.,  8256.,  8508.,  4529.,  4667.,  4805.,  4943.,  3440.,  3608.,  3776.,  3944.,  8408.,  8776.,  9144.,  9512., 13112., 13712., 14312., 14912., 13080., 13680., 14280., 14880., 12536., 13136., 13736., 14336., 14936., 15536., 16136., 16736., 17336., 17936., 18536., 19136., 13512., 13944., 14376., 14808.,  7776.,  8008.,  8240.,  8472.,  6224.,  6392.,  6560.,  6728., 14360., 14728., 15096., 15464., 21080., 21680., 22280., 22880., 19512., 20112., 20712., 21312., 17048., 17648., 18248., 18848., 18552., 19152., 19752., 20352., 19544., 20144., 20744., 21344., 14856., 15288., 15720., 16152.,  8384.,  8616.,  8848.,  9080.,  7088.,  7256.,  7424.,  7592., 15960., 16328., 16696., 17064., 21752., 22352., 22952., 23552., 18648., 19248., 19848., 20448., 13112., 13712., 14312., 14912., 13080., 13680., 14280., 14880., 12536., 13136., 13736., 14336., 10056., 10488., 10920., 11352.,  5920.,  6152.,  6384.,  6616.,  4880.,  5048.,  5216.,  5384., 11416., 11784., 12152., 12520., 19736., 20336., 20936., 21536., 22136., 22736., 23336., 23936., 21080., 21680., 22280., 22880., 19512., 20112., 20712., 21312., 17048., 17648., 18248., 18848., 12808., 13240., 13672., 14104.,  6528.,  6760.,  6992.,  7224.,  5715.,  5877.,  6039.,  6201., 12896., 13244., 13592., 13940., 21639., 22197., 22755., 23313., 23871., 24429., 24987., 25545., 21111., 21669., 22227., 22785., 17839., 18397., 18955., 19513., 12135., 12693., 13251., 13809.,  8596.,  8992.,  9388.,  9784.,  3431.,  3641.,  3851.,  4061.,  3196.,  3328.,  3460.,  3592.,  7348.,  7628.,  7908.,  8188., 12520., 12964., 13408., 13852., 14296., 14740., 15184., 15628., 16072., 16516., 16960., 17404., 17848., 18292., 18736., 19180., 16168., 16612., 17056., 17500., 10540., 10852., 11164., 11476.,  3508.,  3672.,  3836.,  4000.,  3179.,  3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488., 11483., 11741., 11999., 12257., 12515., 12773., 13031., 13289., 13547., 13805., 14063., 14321., 14579., 14837., 15095., 15353., 10619., 10877., 11135., 11393.,  5776.,  5956.,  6136.,  6316.,    71.,   165.,   259.,   353.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2700.,  6780., 10860., 14940.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  2620.,  6572., 10524., 14476.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7246.,  8762., 10433., 12266., 12083., 11836., 11877., 10052.,  8670.,  7052.,  8002.,  9066., 10291., 11652., 10957., 10166.,  9855.,  7834.,  6474.,  4872.,  7770.,  8379.,  9145.,  9818.,  9159.,  9460.,  9697.,  8523.,  7220.,  5686.,  6328.,  8033.,  9874., 11376., 11216., 10992., 10704.,  8843.,  7104.,  5162.,  6628.,  7774.,  9018.,  9660.,  8926.,  8128.,  7266.,  5302.,  3728.,  1996.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,   13.,   41.,   86.,  150.,  186.,  222.,  258.,  239.,  191.,  112.,   64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,  182.,  438.,  772., 1188., 1324., 1460., 1596., 1354., 1010.,  560.,  378.,  858., 1444., 2140., 2276., 2412., 2548., 2110., 1542.,  840.,  574., 1278., 2116., 3092., 3228., 3364., 3500., 2866., 2074., 1120.,  770., 1698., 2788., 4044., 4180., 4316., 4452., 3622., 2606., 1400.,  916., 1967., 3156., 4486., 4612., 4738., 4864., 3885., 2750., 1456.,  855., 1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,  559., 1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503.,  784.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404., 24008., 26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644., 14129., 17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340., 10688., 13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728.,  7648.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   437.,  1174.,  2235.,  3644.,  4244.,  4844.,  5444.,  4809.,  3706.,  2111.,  1312.,  3200.,  5696.,  8832.,  9888., 10944., 12000., 10232.,  7664.,  4264.,  2824.,  6448., 10904., 16224., 17088., 17696., 18048., 14000., 10144.,  5488.,  4144.,  9056., 14768., 21312., 21152., 20736., 20064., 14696., 10576.,  5688.,  4440.,  9616., 15560., 22304., 21120., 19680., 17984., 12320.,  8960.,  4864.,  3605.,  7766., 12507., 17852., 15572., 13036., 10244.,  5385.,  4090.,  2303.,  1136.,  2560.,  4288.,  6336.,  7120.,  7904.,  8688.,  7132.,  5176.,  2804.,  1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  6916.,  5561.,  3962.,  2111.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2696.,  7056., 10776., 15648., 13792., 12768., 15136., 14968., 12560.,  7656.,  4392.,  8656., 14584., 19872., 15648., 13792., 12768., 11416.,  9936.,  6216.,  3720.,  9424., 15000., 22240., 19872., 15648., 13792.,  9720.,  7312.,  4776.,  3048.,  7824., 14584., 21216., 22240., 19872., 15648., 11416.,  6544.,  3336.,  2306.,  5940., 11094., 17960., 19272., 19752., 16840., 10718.,  6340.,  1978.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  8126.,  8636.,  9205.,  9812., 10523., 11234., 12446., 13268., 12575., 13382., 12576., 13368., 13121., 13930., 11609., 12296.,  9998., 10588.,  8210.,  8696.,  8462.,  8996., 10039., 10676., 11867., 12614., 12936., 13768., 12073., 12858., 12042., 12780., 11915., 12638.,  9633., 10228.,  7688.,  8180.,  5874.,  6256.,  8960.,  9428., 10014., 10582., 11312., 11986., 12098., 12852., 11282., 12014., 11362., 12072., 11314., 12002.,  9316.,  9878.,  7098.,  7560.,  5352.,  5708.,  7014.,  7440.,  8609.,  9122., 10407., 11012., 10882., 11552., 10047., 10688., 10108., 10720., 10041., 10624.,  8321.,  8790.,  6882.,  7264.,  5266.,  5556.,  6896.,  7240.,  8004.,  8412.,  9272.,  9748.,  9428.,  9944.,  8636.,  9116.,  7716.,  8160.,  6668.,  7076.,  5520.,  5836.,  4164.,  4416.,  2560.,  2744.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   30.,   40.,   50.,   60.,   70.,   80.,   90.,  100.,   95.,  104.,   83.,   90.,   52.,   56.,   20.,   26.,   68.,   82.,  148.,  172.,  264.,  300.,  336.,  372.,  408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,  113.,  128.,  301.,  334.,  570.,  624.,  926., 1004., 1082., 1160., 1238., 1316., 1394., 1472., 1227., 1290.,  943.,  988.,  536.,  560.,  336.,  364.,  816.,  876., 1448., 1544., 2240., 2376., 2512., 2648., 2784., 2920., 3056., 3192., 2600., 2708., 1944., 2020., 1080., 1120.,  728.,  756., 1656., 1716., 2792., 2888., 4144., 4280., 4416., 4552., 4688., 4824., 4960., 5096., 4112., 4220., 3008., 3084., 1640., 1680., 1120., 1148., 2496., 2556., 4136., 4232., 6048., 6184., 6320., 6456., 6592., 6728., 6864., 7000., 5624., 5732., 4072., 4148., 2200., 2240., 1512., 1540., 3336., 3396., 5480., 5576., 7952., 8088., 8224., 8360., 8496., 8632., 8768., 8904., 7136., 7244., 5136., 5212., 2760., 2800., 1805., 1832., 3877., 3934., 6222., 6312., 8846., 8972., 9098., 9224., 9350., 9476., 9602., 9728., 7671., 7770., 5431., 5500., 2876., 2912., 1688., 1710., 3576., 3622., 5668., 5740., 7968., 8068., 8168., 8268., 8368., 8468., 8568., 8668., 6772., 6850., 4748., 4802., 2492., 2520., 1105., 1118., 2321., 2348., 3650., 3692., 5094., 5152., 5210., 5268., 5326., 5384., 5442., 5500., 4271., 4316., 2975., 3006., 1552., 1568.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 15824., 17736., 19015., 21353., 21900., 24720., 23599., 26829., 24245., 27483., 25307., 28425., 25697., 28823., 20356., 22984., 15257., 17459., 10320., 12040., 14784., 16432., 17398., 19450., 20424., 22928., 21174., 24050., 21794., 24750., 23342., 26250., 24122., 26982., 19768., 22144., 14778., 16750.,  9344., 10864., 12400., 13720., 15285., 16907., 17108., 19072., 17469., 19687., 16159., 18401., 16385., 18651., 18147., 20437., 15964., 17864., 12699., 14297.,  8528.,  9784., 10656., 11840., 13636., 15068., 16240., 17952., 16260., 18156., 15052., 16916., 13332., 15164., 13148., 14948., 12176., 13632., 10172., 11380.,  6976.,  7904.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   448.,   552.,  1022.,  1202.,  1872.,  2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,  2688.,  2856.,  1594.,  1686.,   787.,   901.,  2156.,  2408.,  3963.,  4377.,  6192.,  6792.,  6688.,  7288.,  6928.,  7528.,  8128.,  8728.,  7137.,  7623.,  5484.,  5832.,  3121.,  3307.,  2268.,  2484.,  5408.,  5872.,  8268.,  9012., 11872., 12928., 12256., 13312., 12384., 13440., 14496., 15552., 12532., 13372.,  9504., 10096.,  5348.,  5660.,  4076.,  4292.,  9216.,  9680., 13244., 13988., 18208., 19264., 17376., 18432., 16032., 17088., 17440., 18496., 13924., 14764., 10368., 10960.,  5748.,  6060.,  4668.,  4884., 10336., 10800., 13804., 14548., 18144., 19200., 15264., 16320., 11872., 12928., 12256., 13312.,  9172., 10012.,  7136.,  7728.,  4100.,  4412.,  3212.,  3428.,  7360.,  7824., 12508., 13252., 18720., 19776., 18592., 19648., 18208., 19264., 17376., 18432., 12228., 13068.,  8960.,  9552.,  4500.,  4812.,  3787.,  3997.,  8412.,  8856., 13923., 14625., 20368., 21352., 19072., 20056., 17520., 18504., 14496., 15480.,  8713.,  9487.,  6044.,  6584.,  2409.,  2691.,  2142.,  2314.,  4848.,  5208.,  8150.,  8714., 12080., 12864., 13648., 14432., 15216., 16000., 14544., 15328., 11306., 11918.,  7280.,  7704.,  2434.,  2654.,  2117.,  2219.,  4604.,  4816.,  7477.,  7807., 10752., 11208., 11664., 12120., 12576., 13032., 10224., 10680.,  7335.,  7689.,  3964.,  4208.,    95.,   221.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  8126.,  8636.,  9146.,  9656.,  9259.,  9866., 10473., 11080.,  9775., 10486., 11197., 11908., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 11816., 12608., 13400., 14192., 12121., 12930., 13739., 14548., 10275., 10962., 11649., 12336.,  8846.,  9436., 10026., 10616.,  6974.,  7460.,  7946.,  8432.,  8390.,  8924.,  9458.,  9992.,  9553., 10190., 10827., 11464., 10827., 11574., 12321., 13068., 11472., 12304., 13136., 13968., 11073., 11858., 12643., 13428., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500.,  8911.,  9506., 10101., 10696.,  7076.,  7568.,  8060.,  8552.,  5094.,  5476.,  5858.,  6240.,  8044.,  8512.,  8980.,  9448.,  9252.,  9820., 10388., 10956., 10238., 10912., 11586., 12260., 10386., 11140., 11894., 12648., 10056., 10788., 11520., 12252., 10494., 11204., 11914., 12624., 10676., 11364., 12052., 12740.,  8758.,  9320.,  9882., 10444.,  6630.,  7092.,  7554.,  8016.,  4716.,  5072.,  5428.,  5784.,  7458.,  7884.,  8310.,  8736.,  9057.,  9570., 10083., 10596., 10065., 10670., 11275., 11880.,  9990., 10660., 11330., 12000.,  8797.,  9438., 10079., 10720.,  8372.,  8984.,  9596., 10208.,  8715.,  9298.,  9881., 10464.,  7469.,  7938.,  8407.,  8876.,  5830.,  6212.,  6594.,  6976.,  3778.,  4068.,  4358.,  4648.,  6312.,  6656.,  7000.,  7344.,  7408.,  7816.,  8224.,  8632.,  8532.,  9008.,  9484.,  9960.,  8292.,  8808.,  9324.,  9840.,  7256.,  7736.,  8216.,  8696.,  5964.,  6408.,  6852.,  7296.,  5440.,  5848.,  6256.,  6664.,  4836.,  5152.,  5468.,  5784.,  3852.,  4104.,  4356.,  4608.,  2440.,  2624.,  2808.,  2992.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,   100.,   104.,   108.,   112.,    34.,    40.,    46.,    52.,   122.,   136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,   564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,   866.,   896.,   926.,   956.,   698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,   226.,   241.,   256.,   569.,   602.,   635.,   668.,  1086.,  1140.,  1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,  2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,  2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,  1072.,  1096.,  1120.,   644.,   672.,   700.,   728.,  1572.,  1632.,  1692.,  1752.,  2800.,  2896.,  2992.,  3088.,  4344.,  4480.,  4616.,  4752.,  4888.,  5024.,  5160.,  5296.,  5432.,  5568.,  5704.,  5840.,  5976.,  6112.,  6248.,  6384.,  5092.,  5200.,  5308.,  5416.,  3812.,  3888.,  3964.,  4040.,  2120.,  2160.,  2200.,  2240.,  1428.,  1456.,  1484.,  1512.,  3252.,  3312.,  3372.,  3432.,  5488.,  5584.,  5680.,  5776.,  8152.,  8288.,  8424.,  8560.,  8696.,  8832.,  8968.,  9104.,  9240.,  9376.,  9512.,  9648.,  9784.,  9920., 10056., 10192.,  8116.,  8224.,  8332.,  8440.,  5940.,  6016.,  6092.,  6168.,  3240.,  3280.,  3320.,  3360.,  2212.,  2240.,  2268.,  2296.,  4932.,  4992.,  5052.,  5112.,  8176.,  8272.,  8368.,  8464., 11960., 12096., 12232., 12368., 12504., 12640., 12776., 12912., 13048., 13184., 13320., 13456., 13592., 13728., 13864., 14000., 11140., 11248., 11356., 11464.,  8068.,  8144.,  8220.,  8296.,  4360.,  4400.,  4440.,  4480.,  2996.,  3024.,  3052.,  3080.,  6612.,  6672.,  6732.,  6792., 10864., 10960., 11056., 11152., 15768., 15904., 16040., 16176., 16312., 16448., 16584., 16720., 16856., 16992., 17128., 17264., 17400., 17536., 17672., 17808., 14164., 14272., 14380., 14488., 10196., 10272., 10348., 10424.,  5480.,  5520.,  5560.,  5600.,  3583.,  3610.,  3637.,  3664.,  7697.,  7754.,  7811.,  7868., 12354., 12444., 12534., 12624., 17566., 17692., 17818., 17944., 18070., 18196., 18322., 18448., 18574., 18700., 18826., 18952., 19078., 19204., 19330., 19456., 15243., 15342., 15441., 15540., 10793., 10862., 10931., 11000.,  5716.,  5752.,  5788.,  5824.,  3354.,  3376.,  3398.,  3420.,  7106.,  7152.,  7198.,  7244., 11264., 11336., 11408., 11480., 15836., 15936., 16036., 16136., 16236., 16336., 16436., 16536., 16636., 16736., 16836., 16936., 17036., 17136., 17236., 17336., 13466., 13544., 13622., 13700.,  9442.,  9496.,  9550.,  9604.,  4956.,  4984.,  5012.,  5040.,  2197.,  2210.,  2223.,  2236.,  4615.,  4642.,  4669.,  4696.,  7258.,  7300.,  7342.,  7384., 10130., 10188., 10246., 10304., 10362., 10420., 10478., 10536., 10594., 10652., 10710., 10768., 10826., 10884., 10942., 11000.,  8497.,  8542.,  8587.,  8632.,  5919.,  5950.,  5981.,  6012.,  3088.,  3104.,  3120.,  3136.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2080., 2832., 3584., 4336., 2762., 3726., 4690., 5654., 3384., 4608., 5832., 7056., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 4066., 5502., 6938., 8374., 3982., 5434., 6886., 8338., 3384., 4608., 5832., 7056., 2894., 3906., 4918., 5930., 2080., 2832., 3584., 4336., 1848., 2528., 3208., 3888., 2221., 3075., 3929., 4783., 2904., 3972., 5040., 6108., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 2824., 3828., 4832., 5836., 2075., 2905., 3735., 4565., 1736., 2352., 2968., 3584., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   904.,   976.,  1048.,  1120.,  1192.,  1264.,  1336.,  1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,   743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   624.,   728.,   832.,   936.,  1266.,  1446.,  1626.,  1806.,  2192.,  2464.,  2736.,  3008.,  2320.,  2592.,  2864.,  3136.,  3408.,  3680.,  3952.,  4224.,  4496.,  4768.,  5040.,  5312.,  4342.,  4570.,  4798.,  5026.,  3584.,  3752.,  3920.,  4088.,  2158.,  2250.,  2342.,  2434.,  1295.,  1409.,  1523.,  1637.,  2264.,  2516.,  2768.,  3020.,  3771.,  4185.,  4599.,  5013.,  5848.,  6448.,  7048.,  7648.,  5560.,  6160.,  6760.,  7360.,  7000.,  7600.,  8200.,  8800.,  9400., 10000., 10600., 11200.,  8721.,  9207.,  9693., 10179.,  6992.,  7340.,  7688.,  8036.,  4117.,  4303.,  4489.,  4675.,  3156.,  3372.,  3588.,  3804.,  5536.,  6000.,  6464.,  6928.,  8036.,  8780.,  9524., 10268., 11552., 12608., 13664., 14720., 10592., 11648., 12704., 13760., 12128., 13184., 14240., 15296., 15392., 16448., 17504., 18560., 14060., 14900., 15740., 16580., 11136., 11728., 12320., 12912.,  6492.,  6804.,  7116.,  7428.,  5556.,  5772.,  5988.,  6204.,  9440.,  9904., 10368., 10832., 12548., 13292., 14036., 14780., 15776., 16832., 17888., 18944., 11552., 12608., 13664., 14720., 10592., 11648., 12704., 13760., 12128., 13184., 14240., 15296., 10700., 11540., 12380., 13220.,  8768.,  9360.,  9952., 10544.,  5244.,  5556.,  5868.,  6180.,  4692.,  4908.,  5124.,  5340., 10848., 11312., 11776., 12240., 15332., 16076., 16820., 17564., 19040., 20096., 21152., 22208., 15776., 16832., 17888., 18944., 11552., 12608., 13664., 14720., 10592., 11648., 12704., 13760.,  8300.,  9140.,  9980., 10820.,  6400.,  6992.,  7584.,  8176.,  3996.,  4308.,  4620.,  4932.,  3828.,  4044.,  4260.,  4476.,  8992.,  9456.,  9920., 10384., 15620., 16364., 17108., 17852., 20576., 21632., 22688., 23744., 19040., 20096., 21152., 22208., 15776., 16832., 17888., 18944., 11552., 12608., 13664., 14720.,  7628.,  8468.,  9308., 10148.,  4992.,  5584.,  6176.,  6768.,  2748.,  3060.,  3372.,  3684.,  2935.,  3145.,  3355.,  3565.,  7016.,  7460.,  7904.,  8348., 12339., 13041., 13743., 14445., 19000., 19984., 20968., 21952., 19672., 20656., 21640., 22624., 17848., 18832., 19816., 20800., 14296., 15280., 16264., 17248.,  7881.,  8655.,  9429., 10203.,  3936.,  4476.,  5016.,  5556.,  1597.,  1879.,  2161.,  2443.,  1914.,  2086.,  2258.,  2430.,  4688.,  5048.,  5408.,  5768.,  8386.,  8950.,  9514., 10078., 13072., 13856., 14640., 15424., 16208., 16992., 17776., 18560., 16080., 16864., 17648., 18432., 13456., 14240., 15024., 15808.,  9094.,  9706., 10318., 10930.,  3424.,  3848.,  4272.,  4696.,   670.,   890.,  1110.,  1330.,   893.,   995.,  1097.,  1199.,  2264.,  2476.,  2688.,  2900.,  4145.,  4475.,  4805.,  5135.,  6568.,  7024.,  7480.,  7936.,  8392.,  8848.,  9304.,  9760., 10216., 10672., 11128., 11584.,  8776.,  9232.,  9688., 10144.,  6595.,  6949.,  7303.,  7657.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  4998.,  6703.,  8583., 10644., 11297., 10269.,  9010.,  7514.,  6124.,  7787.,  9596., 11556., 12132., 10771.,  9212.,  7450.,  5084.,  6126.,  7270.,  8520.,  8970.,  7802.,  6484.,  5012.,  1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  4998.,  6703.,  8583., 10644., 11297., 10269.,  9010.,  7514.,  6124.,  7787.,  9596., 11556., 12132., 10771.,  9212.,  7450.,  5084.,  6126.,  7270.,  8520.,  8970.,  7802.,  6484.,  5012.,  1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  4998.,  6703.,  8583., 10644., 11297., 10269.,  9010.,  7514.,  6124.,  7787.,  9596., 11556., 12132., 10771.,  9212.,  7450.,  5084.,  6126.,  7270.,  8520.,  8970.,  7802.,  6484.,  5012.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   16.,   19.,   14.,   11.,   35.,   45.,   55.,   65.,   75.,   85.,   56.,   39.,  105.,  115.,  125.,  135.,  145.,  155.,   98.,   67.,  175.,  185.,  195.,  205.,  215.,  225.,  140.,   95.,  245.,  255.,  265.,  275.,  285.,  295.,  182.,  123.,  315.,  325.,  335.,  345.,  355.,  365.,  224.,  151.,  385.,  395.,  405.,  415.,  425.,  435.,  266.,  129.,  304.,  311.,  318.,  325.,  332.,  339.,  196.,    5.,   16.,   27.,   38.,   49.,   60.,   71.,   42.,   47.,  115.,  141.,  167.,  193.,  219.,  245.,  140.,  131.,  297.,  323.,  349.,  375.,  401.,  427.,  238.,  215.,  479.,  505.,  531.,  557.,  583.,  609.,  336.,  299.,  661.,  687.,  713.,  739.,  765.,  791.,  434.,  383.,  843.,  869.,  895.,  921.,  947.,  973.,  532.,  467., 1025., 1051., 1077., 1103., 1129., 1155.,  630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,    9.,   28.,   47.,   66.,   85.,  104.,  123.,   70.,   83.,  195.,  237.,  279.,  321.,  363.,  405.,  224.,  223.,  489.,  531.,  573.,  615.,  657.,  699.,  378.,  363.,  783.,  825.,  867.,  909.,  951.,  993.,  532.,  503., 1077., 1119., 1161., 1203., 1245., 1287.,  686.,  643., 1371., 1413., 1455., 1497., 1539., 1581.,  840.,  783., 1665., 1707., 1749., 1791., 1833., 1875.,  994.,  473., 1000., 1023., 1046., 1069., 1092., 1115.,  588.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.,  4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.,  4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    42.,    62.,    82.,   102.,   122.,    95.,    64.,   224.,   296.,   368.,   440.,   512.,   584.,   396.,   260.,   728.,   800.,   872.,   944.,  1016.,  1088.,   704.,   456.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1012.,   652.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  1320.,   848.,  2240.,  2312.,  2384.,  2456.,  2528.,  2600.,  1628.,  1044.,  2744.,  2816.,  2888.,  2960.,  3032.,  3104.,  1936.,   941.,  2246.,  2298.,  2350.,  2402.,  2454.,  2506.,  1463.,    29.,   102.,   186.,   270.,   354.,   438.,   522.,   311.,   336.,   832.,  1032.,  1232.,  1432.,  1632.,  1832.,  1052.,   980.,  2232.,  2432.,  2632.,  2832.,  3032.,  3232.,  1808.,  1624.,  3632.,  3832.,  4032.,  4232.,  4432.,  4632.,  2564.,  2268.,  5032.,  5232.,  5432.,  5632.,  5832.,  6032.,  3320.,  2912.,  6432.,  6632.,  6832.,  7032.,  7232.,  7432.,  4076.,  3556.,  7832.,  8032.,  8232.,  8432.,  8632.,  8832.,  4832.,  2309.,  5014.,  5130.,  5246.,  5362.,  5478.,  5594.,  3023.,    53.,   182.,   330.,   478.,   626.,   774.,   922.,   527.,   608.,  1440.,  1768.,  2096.,  2424.,  2752.,  3080.,  1708.,  1700.,  3736.,  4064.,  4392.,  4720.,  5048.,  5376.,  2912.,  2792.,  6032.,  6360.,  6688.,  7016.,  7344.,  7672.,  4116.,  3884.,  8328.,  8656.,  8984.,  9312.,  9640.,  9968.,  5320.,  4976., 10624., 10952., 11280., 11608., 11936., 12264.,  6524.,  6068., 12920., 13248., 13576., 13904., 14232., 14560.,  7728.,  3677.,  7782.,  7962.,  8142.,  8322.,  8502.,  8682.,  4583.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  1876.,  5384.,  5288.,  4168.,  4712.,  5256.,  5800.,  3652.,  2692.,  6888.,  4744.,  1576.,  2120.,  2664.,  3208.,  2292.,  1460.,  4296.,  4840.,  5384.,  5288.,  4168.,  4712.,  2980.,  2276.,  5800.,  6344.,  6888.,  4744.,  1576.,  2120.,  1620.,  1044.,  3208.,  3752.,  4296.,  4840.,  5384.,  5288.,  2308.,  1790.,  4428.,  4828.,  5228.,  5628.,  6028.,  3740.,   150.,   190.,   716.,  1372.,  2028.,  2684.,  3340.,  3996.,  2390.,  2532.,  6312.,  7880.,  9448., 11016., 12584., 14152.,  8148.,  7572., 17288., 14120.,  9928., 11496., 13064., 14632.,  8324.,  7876., 17768., 12552.,  6312.,  7880.,  9448., 11016.,  6452.,  6132., 14152., 15720., 17288., 14120.,  9928., 11496.,  6628.,  6436., 14632., 16200., 17768., 12552.,  6312.,  7880.,  4756.,  4692., 11016., 12584., 14152., 15720., 17288., 14120.,  4932.,  4510., 10124., 11036., 11948., 12860., 13772.,  7900.,   310.,   350.,  1292.,  2460.,  3628.,  4796.,  5964.,  7132.,  4086.,  4644., 11048., 13640., 16232., 18824., 21416., 24008., 13332., 13268., 29192., 22952., 15688., 18280., 20872., 23464., 12996., 13060., 28648., 20360., 11048., 13640., 16232., 18824., 10612., 10804., 24008., 26600., 29192., 22952., 15688., 18280., 10276., 10596., 23464., 26056., 28648., 20360., 11048., 13640.,  7892.,  8340., 18824., 21416., 24008., 26600., 29192., 22952.,  7556.,  7230., 15820., 17244., 18668., 20092., 21516., 12060.,   470.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6800.,  7212.,  8940.,  9470., 11360., 12014., 13528., 14312., 14248., 15074., 12580., 13306., 10520., 11140.,  8856.,  9364.,  6566.,  6904.,  8131.,  8566.,  9919., 10456., 11140., 11784., 11713., 12392.,  9873., 10470.,  7706.,  8216.,  6258.,  6676.,  4176.,  4408.,  5136.,  5436.,  6264.,  6636.,  7536.,  7984.,  8024.,  8500.,  7216.,  7636.,  6176.,  6536.,  4896.,  5192.,  2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6800.,  7212.,  8940.,  9470., 11360., 12014., 13528., 14312., 14248., 15074., 12580., 13306., 10520., 11140.,  8856.,  9364.,  6566.,  6904.,  8131.,  8566.,  9919., 10456., 11140., 11784., 11713., 12392.,  9873., 10470.,  7706.,  8216.,  6258.,  6676.,  4176.,  4408.,  5136.,  5436.,  6264.,  6636.,  7536.,  7984.,  8024.,  8500.,  7216.,  7636.,  6176.,  6536.,  4896.,  5192.,  2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6800.,  7212.,  8940.,  9470., 11360., 12014., 13528., 14312., 14248., 15074., 12580., 13306., 10520., 11140.,  8856.,  9364.,  6566.,  6904.,  8131.,  8566.,  9919., 10456., 11140., 11784., 11713., 12392.,  9873., 10470.,  7706.,  8216.,  6258.,  6676.,  4176.,  4408.,  5136.,  5436.,  6264.,  6636.,  7536.,  7984.,  8024.,  8500.,  7216.,  7636.,  6176.,  6536.,  4896.,  5192.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  106.,  112.,   74.,   78.,  200.,  210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,  290.,  300.,  310.,  190.,  196.,  130.,  134.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,  410.,  420.,  430.,  440.,  450.,  274.,  280.,  186.,  190.,  480.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  358.,  364.,  242.,  246.,  620.,  630.,  640.,  650.,  660.,  670.,  680.,  690.,  700.,  710.,  720.,  730.,  442.,  448.,  298.,  302.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  526.,  532.,  255.,  258.,  601.,  608.,  615.,  622.,  629.,  636.,  643.,  650.,  657.,  664.,  671.,  678.,  388.,  392.,    5.,   10.,   21.,   32.,   43.,   54.,   65.,   76.,   87.,   98.,  109.,  120.,  131.,  142.,   78.,   84.,   82.,   94.,  204.,  230.,  256.,  282.,  308.,  334.,  360.,  386.,  412.,  438.,  464.,  490.,  266.,  280.,  250.,  262.,  568.,  594.,  620.,  646.,  672.,  698.,  724.,  750.,  776.,  802.,  828.,  854.,  462.,  476.,  418.,  430.,  932.,  958.,  984., 1010., 1036., 1062., 1088., 1114., 1140., 1166., 1192., 1218.,  658.,  672.,  586.,  598., 1296., 1322., 1348., 1374., 1400., 1426., 1452., 1478., 1504., 1530., 1556., 1582.,  854.,  868.,  754.,  766., 1660., 1686., 1712., 1738., 1764., 1790., 1816., 1842., 1868., 1894., 1920., 1946., 1050., 1064.,  922.,  934., 2024., 2050., 2076., 2102., 2128., 2154., 2180., 2206., 2232., 2258., 2284., 2310., 1246., 1260.,  595.,  602., 1289., 1304., 1319., 1334., 1349., 1364., 1379., 1394., 1409., 1424., 1439., 1454.,  776.,  784.,    9.,   18.,   37.,   56.,   75.,   94.,  113.,  132.,  151.,  170.,  189.,  208.,  227.,  246.,  130.,  140.,  146.,  166.,  348.,  390.,  432.,  474.,  516.,  558.,  600.,  642.,  684.,  726.,  768.,  810.,  426.,  448.,  426.,  446.,  936.,  978., 1020., 1062., 1104., 1146., 1188., 1230., 1272., 1314., 1356., 1398.,  734.,  756.,  706.,  726., 1524., 1566., 1608., 1650., 1692., 1734., 1776., 1818., 1860., 1902., 1944., 1986., 1042., 1064.,  986., 1006., 2112., 2154., 2196., 2238., 2280., 2322., 2364., 2406., 2448., 2490., 2532., 2574., 1350., 1372., 1266., 1286., 2700., 2742., 2784., 2826., 2868., 2910., 2952., 2994., 3036., 3078., 3120., 3162., 1658., 1680., 1546., 1566., 3288., 3330., 3372., 3414., 3456., 3498., 3540., 3582., 3624., 3666., 3708., 3750., 1966., 1988.,  935.,  946., 1977., 2000., 2023., 2046., 2069., 2092., 2115., 2138., 2161., 2184., 2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.,  5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.,  5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,   392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,  1040.,  1112.,  1184.,   758.,   802.,   498.,   526.,  1400.,  1472.,  1544.,  1616.,  1688.,  1760.,  1832.,  1904.,  1976.,  2048.,  2120.,  2192.,  1374.,  1418.,   890.,   918.,  2408.,  2480.,  2552.,  2624.,  2696.,  2768.,  2840.,  2912.,  2984.,  3056.,  3128.,  3200.,  1990.,  2034.,  1282.,  1310.,  3416.,  3488.,  3560.,  3632.,  3704.,  3776.,  3848.,  3920.,  3992.,  4064.,  4136.,  4208.,  2606.,  2650.,  1674.,  1702.,  4424.,  4496.,  4568.,  4640.,  4712.,  4784.,  4856.,  4928.,  5000.,  5072.,  5144.,  5216.,  3222.,  3266.,  2066.,  2094.,  5432.,  5504.,  5576.,  5648.,  5720.,  5792.,  5864.,  5936.,  6008.,  6080.,  6152.,  6224.,  3838.,  3882.,  1865.,  1887.,  4452.,  4504.,  4556.,  4608.,  4660.,  4712.,  4764.,  4816.,  4868.,  4920.,  4972.,  5024.,  2903.,  2933.,    29.,    67.,   140.,   224.,   308.,   392.,   476.,   560.,   644.,   728.,   812.,   896.,   980.,  1064.,   587.,   633.,   602.,   694.,  1512.,  1712.,  1912.,  2112.,  2312.,  2512.,  2712.,  2912.,  3112.,  3312.,  3512.,  3712.,  2022.,  2130.,  1890.,  1982.,  4312.,  4512.,  4712.,  4912.,  5112.,  5312.,  5512.,  5712.,  5912.,  6112.,  6312.,  6512.,  3534.,  3642.,  3178.,  3270.,  7112.,  7312.,  7512.,  7712.,  7912.,  8112.,  8312.,  8512.,  8712.,  8912.,  9112.,  9312.,  5046.,  5154.,  4466.,  4558.,  9912., 10112., 10312., 10512., 10712., 10912., 11112., 11312., 11512., 11712., 11912., 12112.,  6558.,  6666.,  5754.,  5846., 12712., 12912., 13112., 13312., 13512., 13712., 13912., 14112., 14312., 14512., 14712., 14912.,  8070.,  8178.,  7042.,  7134., 15512., 15712., 15912., 16112., 16312., 16512., 16712., 16912., 17112., 17312., 17512., 17712.,  9582.,  9690.,  4577.,  4631.,  9940., 10056., 10172., 10288., 10404., 10520., 10636., 10752., 10868., 10984., 11100., 11216.,  5999.,  6061.,    53.,   123.,   252.,   400.,   548.,   696.,   844.,   992.,  1140.,  1288.,  1436.,  1584.,  1732.,  1880.,   995.,  1073.,  1098.,  1254.,  2632.,  2960.,  3288.,  3616.,  3944.,  4272.,  4600.,  4928.,  5256.,  5584.,  5912.,  6240.,  3286.,  3458.,  3282.,  3438.,  7224.,  7552.,  7880.,  8208.,  8536.,  8864.,  9192.,  9520.,  9848., 10176., 10504., 10832.,  5694.,  5866.,  5466.,  5622., 11816., 12144., 12472., 12800., 13128., 13456., 13784., 14112., 14440., 14768., 15096., 15424.,  8102.,  8274.,  7650.,  7806., 16408., 16736., 17064., 17392., 17720., 18048., 18376., 18704., 19032., 19360., 19688., 20016., 10510., 10682.,  9834.,  9990., 21000., 21328., 21656., 21984., 22312., 22640., 22968., 23296., 23624., 23952., 24280., 24608., 12918., 13090., 12018., 12174., 25592., 25920., 26248., 26576., 26904., 27232., 27560., 27888., 28216., 28544., 28872., 29200., 15326., 15498.,  7289.,  7375., 15428., 15608., 15788., 15968., 16148., 16328., 16508., 16688., 16868., 17048., 17228., 17408.,  9095.,  9189.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,  180.,  324.,  468.,  612.,  486.,  590.,  380.,  588., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 1356., 1692., 1308., 1516., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864.,  684., 1020.,  892., 1100., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952.,  844., 1180.,  476.,  684., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2028., 2364.,  380.,  588., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 1356., 1692., 1308., 1516., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864.,  684., 1020.,  782.,  950., 2196., 2596., 1652., 2052.,  596.,  996., 1396., 1796., 2196., 2596., 1652., 2052.,  150.,  382.,  190.,  486., 1012., 1668., 2324., 2980., 3636., 4292., 2580., 3236., 1012., 1668., 2324., 2980., 1670., 2030., 2236., 2956., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 4264., 5832., 3212., 4060., 4188., 4908., 7144., 8712., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 1516., 2364., 2748., 3468., 7400., 8968., 7144., 8712., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 2700., 3548., 1308., 2028., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 4264., 5832., 7400., 8968., 4908., 5756., 2236., 2956., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 4264., 5832., 3212., 4060., 4188., 4908., 7144., 8712., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 1516., 2364., 1966., 2390., 5076., 5988., 3508., 4420., 1428., 2340., 3252., 4164., 5076., 5988., 3508., 4420.,  310.,  798.,   30.,   70.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,  180.,  324.,  468.,  612.,  486.,  590.,  380.,  588., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 1356., 1692., 1308., 1516., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864.,  684., 1020.,  892., 1100., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952.,  844., 1180.,  476.,  684., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2028., 2364.,  380.,  588., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 1356., 1692., 1308., 1516., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864.,  684., 1020.,  782.,  950., 2196., 2596., 1652., 2052.,  596.,  996., 1396., 1796., 2196., 2596., 1652., 2052.,  150.,  382.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6468.,  6880.,  7292.,  7704.,  8550.,  9080.,  9610., 10140., 10290., 10944., 11598., 12252., 11936., 12720., 13504., 14288., 12566., 13392., 14218., 15044., 10450., 11176., 11902., 12628.,  8708.,  9328.,  9948., 10568.,  7092.,  7600.,  8108.,  8616.,  5754.,  6092.,  6430.,  6768.,  7091.,  7526.,  7961.,  8396.,  8773.,  9310.,  9847., 10384., 10020., 10664., 11308., 11952., 10555., 11234., 11913., 12592.,  9037.,  9634., 10231., 10828.,  6966.,  7476.,  7986.,  8496.,  5378.,  5796.,  6214.,  6632.,  4632.,  4864.,  5096.,  5328.,  5364.,  5664.,  5964.,  6264.,  6076.,  6448.,  6820.,  7192.,  7008.,  7456.,  7904.,  8352.,  7444.,  7920.,  8396.,  8872.,  6460.,  6880.,  7300.,  7720.,  5080.,  5440.,  5800.,  6160.,  3288.,  3584.,  3880.,  4176.,  2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6468.,  6880.,  7292.,  7704.,  8550.,  9080.,  9610., 10140., 10290., 10944., 11598., 12252., 11936., 12720., 13504., 14288., 12566., 13392., 14218., 15044., 10450., 11176., 11902., 12628.,  8708.,  9328.,  9948., 10568.,  7092.,  7600.,  8108.,  8616.,  5754.,  6092.,  6430.,  6768.,  7091.,  7526.,  7961.,  8396.,  8773.,  9310.,  9847., 10384., 10020., 10664., 11308., 11952., 10555., 11234., 11913., 12592.,  9037.,  9634., 10231., 10828.,  6966.,  7476.,  7986.,  8496.,  5378.,  5796.,  6214.,  6632.,  4632.,  4864.,  5096.,  5328.,  5364.,  5664.,  5964.,  6264.,  6076.,  6448.,  6820.,  7192.,  7008.,  7456.,  7904.,  8352.,  7444.,  7920.,  8396.,  8872.,  6460.,  6880.,  7300.,  7720.,  5080.,  5440.,  5800.,  6160.,  3288.,  3584.,  3880.,  4176.,  2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6468.,  6880.,  7292.,  7704.,  8550.,  9080.,  9610., 10140., 10290., 10944., 11598., 12252., 11936., 12720., 13504., 14288., 12566., 13392., 14218., 15044., 10450., 11176., 11902., 12628.,  8708.,  9328.,  9948., 10568.,  7092.,  7600.,  8108.,  8616.,  5754.,  6092.,  6430.,  6768.,  7091.,  7526.,  7961.,  8396.,  8773.,  9310.,  9847., 10384., 10020., 10664., 11308., 11952., 10555., 11234., 11913., 12592.,  9037.,  9634., 10231., 10828.,  6966.,  7476.,  7986.,  8496.,  5378.,  5796.,  6214.,  6632.,  4632.,  4864.,  5096.,  5328.,  5364.,  5664.,  5964.,  6264.,  6076.,  6448.,  6820.,  7192.,  7008.,  7456.,  7904.,  8352.,  7444.,  7920.,  8396.,  8872.,  6460.,  6880.,  7300.,  7720.,  5080.,  5440.,  5800.,  6160.,  3288.,  3584.,  3880.,  4176.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    3.,    4.,    7.,   10.,   13.,   16.,   19.,   22.,   25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,   55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,   54.,   56.,   32.,   36.,   40.,   44.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,  206.,  212.,  218.,  224.,  144.,  148.,  152.,  156.,  390.,  400.,  410.,  420.,  430.,  440.,  450.,  460.,  470.,  480.,  490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,  610.,  620.,  374.,  380.,  386.,  392.,  256.,  260.,  264.,  268.,  670.,  680.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  890.,  900.,  542.,  548.,  554.,  560.,  368.,  372.,  376.,  380.,  950.,  960.,  970.,  980.,  990., 1000., 1010., 1020., 1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120., 1130., 1140., 1150., 1160., 1170., 1180.,  710.,  716.,  722.,  728.,  480.,  484.,  488.,  492., 1230., 1240., 1250., 1260., 1270., 1280., 1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380., 1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460.,  878.,  884.,  890.,  896.,  592.,  596.,  600.,  604., 1510., 1520., 1530., 1540., 1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640., 1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740., 1046., 1052., 1058., 1064.,  507.,  510.,  513.,  516., 1195., 1202., 1209., 1216., 1223., 1230., 1237., 1244., 1251., 1258., 1265., 1272., 1279., 1286., 1293., 1300., 1307., 1314., 1321., 1328., 1335., 1342., 1349., 1356.,  772.,  776.,  780.,  784.,    5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,   86.,   97.,  108.,  119.,  130.,  141.,  152.,  163.,  174.,  185.,  196.,  207.,  218.,  229.,  240.,  251.,  262.,  273.,  284.,  150.,  156.,  162.,  168.,  152.,  164.,  176.,  188.,  382.,  408.,  434.,  460.,  486.,  512.,  538.,  564.,  590.,  616.,  642.,  668.,  694.,  720.,  746.,  772.,  798.,  824.,  850.,  876.,  902.,  928.,  954.,  980.,  518.,  532.,  546.,  560.,  488.,  500.,  512.,  524., 1110., 1136., 1162., 1188., 1214., 1240., 1266., 1292., 1318., 1344., 1370., 1396., 1422., 1448., 1474., 1500., 1526., 1552., 1578., 1604., 1630., 1656., 1682., 1708.,  910.,  924.,  938.,  952.,  824.,  836.,  848.,  860., 1838., 1864., 1890., 1916., 1942., 1968., 1994., 2020., 2046., 2072., 2098., 2124., 2150., 2176., 2202., 2228., 2254., 2280., 2306., 2332., 2358., 2384., 2410., 2436., 1302., 1316., 1330., 1344., 1160., 1172., 1184., 1196., 2566., 2592., 2618., 2644., 2670., 2696., 2722., 2748., 2774., 2800., 2826., 2852., 2878., 2904., 2930., 2956., 2982., 3008., 3034., 3060., 3086., 3112., 3138., 3164., 1694., 1708., 1722., 1736., 1496., 1508., 1520., 1532., 3294., 3320., 3346., 3372., 3398., 3424., 3450., 3476., 3502., 3528., 3554., 3580., 3606., 3632., 3658., 3684., 3710., 3736., 3762., 3788., 3814., 3840., 3866., 3892., 2086., 2100., 2114., 2128., 1832., 1844., 1856., 1868., 4022., 4048., 4074., 4100., 4126., 4152., 4178., 4204., 4230., 4256., 4282., 4308., 4334., 4360., 4386., 4412., 4438., 4464., 4490., 4516., 4542., 4568., 4594., 4620., 2478., 2492., 2506., 2520., 1183., 1190., 1197., 1204., 2563., 2578., 2593., 2608., 2623., 2638., 2653., 2668., 2683., 2698., 2713., 2728., 2743., 2758., 2773., 2788., 2803., 2818., 2833., 2848., 2863., 2878., 2893., 2908., 1544., 1552., 1560., 1568.,    9.,   18.,   27.,   36.,   55.,   74.,   93.,  112.,  131.,  150.,  169.,  188.,  207.,  226.,  245.,  264.,  283.,  302.,  321.,  340.,  359.,  378.,  397.,  416.,  435.,  454.,  473.,  492.,  250.,  260.,  270.,  280.,  272.,  292.,  312.,  332.,  654.,  696.,  738.,  780.,  822.,  864.,  906.,  948.,  990., 1032., 1074., 1116., 1158., 1200., 1242., 1284., 1326., 1368., 1410., 1452., 1494., 1536., 1578., 1620.,  830.,  852.,  874.,  896.,  832.,  852.,  872.,  892., 1830., 1872., 1914., 1956., 1998., 2040., 2082., 2124., 2166., 2208., 2250., 2292., 2334., 2376., 2418., 2460., 2502., 2544., 2586., 2628., 2670., 2712., 2754., 2796., 1446., 1468., 1490., 1512., 1392., 1412., 1432., 1452., 3006., 3048., 3090., 3132., 3174., 3216., 3258., 3300., 3342., 3384., 3426., 3468., 3510., 3552., 3594., 3636., 3678., 3720., 3762., 3804., 3846., 3888., 3930., 3972., 2062., 2084., 2106., 2128., 1952., 1972., 1992., 2012., 4182., 4224., 4266., 4308., 4350., 4392., 4434., 4476., 4518., 4560., 4602., 4644., 4686., 4728., 4770., 4812., 4854., 4896., 4938., 4980., 5022., 5064., 5106., 5148., 2678., 2700., 2722., 2744., 2512., 2532., 2552., 2572., 5358., 5400., 5442., 5484., 5526., 5568., 5610., 5652., 5694., 5736., 5778., 5820., 5862., 5904., 5946., 5988., 6030., 6072., 6114., 6156., 6198., 6240., 6282., 6324., 3294., 3316., 3338., 3360., 3072., 3092., 3112., 3132., 6534., 6576., 6618., 6660., 6702., 6744., 6786., 6828., 6870., 6912., 6954., 6996., 7038., 7080., 7122., 7164., 7206., 7248., 7290., 7332., 7374., 7416., 7458., 7500., 3910., 3932., 3954., 3976., 1859., 1870., 1881., 1892., 3931., 3954., 3977., 4000., 4023., 4046., 4069., 4092., 4115., 4138., 4161., 4184., 4207., 4230., 4253., 4276., 4299., 4322., 4345., 4368., 4391., 4414., 4437., 4460., 2316., 2328., 2340., 2352.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,  1614.,   974.,  1002.,  1030.,  1058.,  2744.,  2816.,  2888.,  2960.,  2648.,  2720.,  2792.,  2864.,  2040.,  2112.,  2184.,  2256.,  2328.,  2400.,  2472.,  2544.,  2616.,  2688.,  2760.,  2832.,  2904.,  2976.,  3048.,  3120.,  1818.,  1862.,  1906.,  1950.,  1374.,  1402.,  1430.,  1458.,  3480.,  3552.,  3624.,  3696.,  2360.,  2432.,  2504.,  2576.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,  1304.,  1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1130.,  1174.,  1218.,  1262.,   750.,   778.,   806.,   834.,  2168.,  2240.,  2312.,  2384.,  2456.,  2528.,  2600.,  2672.,  2744.,  2816.,  2888.,  2960.,  2648.,  2720.,  2792.,  2864.,  2040.,  2112.,  2184.,  2256.,  2328.,  2400.,  2472.,  2544.,  1466.,  1510.,  1554.,  1598.,  1150.,  1178.,  1206.,  1234.,  2904.,  2976.,  3048.,  3120.,  3192.,  3264.,  3336.,  3408.,  3480.,  3552.,  3624.,  3696.,  2360.,  2432.,  2504.,  2576.,   728.,   800.,   872.,   944.,  1016.,  1088.,  1160.,  1232.,   778.,   822.,   866.,   910.,   526.,   554.,   582.,   610.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,  2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  2456.,  2528.,  2600.,  2672.,  2744.,  2816.,  2888.,  2960.,  2648.,  2720.,  2792.,  2864.,  1114.,  1158.,  1202.,  1246.,   897.,   919.,   941.,   963.,  2208.,  2260.,  2312.,  2364.,  2416.,  2468.,  2520.,  2572.,  2624.,  2676.,  2728.,  2780.,  2832.,  2884.,  2936.,  2988.,  3040.,  3092.,  3144.,  3196.,  1840.,  1892.,  1944.,  1996.,    23.,    53.,    83.,   113.,    29.,    67.,   105.,   143.,   216.,   300.,   384.,   468.,   552.,   636.,   720.,   804.,   888.,   972.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,  1560.,  1644.,  1728.,  1812.,  1896.,  1980.,  2064.,  2148.,  1139.,  1185.,  1231.,  1277.,  1134.,  1226.,  1318.,  1410.,  2872.,  3072.,  3272.,  3472.,  3672.,  3872.,  4072.,  4272.,  4472.,  4672.,  4872.,  5072.,  5272.,  5472.,  5672.,  5872.,  6072.,  6272.,  6472.,  6672.,  6872.,  7072.,  7272.,  7472.,  3962.,  4070.,  4178.,  4286.,  3710.,  3802.,  3894.,  3986.,  8472.,  8672.,  8872.,  9072.,  6840.,  7040.,  7240.,  7440.,  4696.,  4896.,  5096.,  5296.,  5496.,  5696.,  5896.,  6096.,  6296.,  6496.,  6696.,  6896.,  7096.,  7296.,  7496.,  7696.,  4042.,  4150.,  4258.,  4366.,  3854.,  3946.,  4038.,  4130.,  8696.,  8896.,  9096.,  9296.,  6040.,  6240.,  6440.,  6640.,  2872.,  3072.,  3272.,  3472.,  3672.,  3872.,  4072.,  4272.,  4472.,  4672.,  4872.,  5072.,  5272.,  5472.,  5672.,  5872.,  3098.,  3206.,  3314.,  3422.,  2974.,  3066.,  3158.,  3250.,  6872.,  7072.,  7272.,  7472.,  7672.,  7872.,  8072.,  8272.,  8472.,  8672.,  8872.,  9072.,  6840.,  7040.,  7240.,  7440.,  4696.,  4896.,  5096.,  5296.,  5496.,  5696.,  5896.,  6096.,  3178.,  3286.,  3394.,  3502.,  3118.,  3210.,  3302.,  3394.,  7096.,  7296.,  7496.,  7696.,  7896.,  8096.,  8296.,  8496.,  8696.,  8896.,  9096.,  9296.,  6040.,  6240.,  6440.,  6640.,  2872.,  3072.,  3272.,  3472.,  3672.,  3872.,  4072.,  4272.,  2234.,  2342.,  2450.,  2558.,  2238.,  2330.,  2422.,  2514.,  5272.,  5472.,  5672.,  5872.,  6072.,  6272.,  6472.,  6672.,  6872.,  7072.,  7272.,  7472.,  7672.,  7872.,  8072.,  8272.,  8472.,  8672.,  8872.,  9072.,  6840.,  7040.,  7240.,  7440.,  2314.,  2422.,  2530.,  2638.,  2201.,  2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  5408.,  5524.,  5640.,  5756.,  5872.,  5988.,  6104.,  6220.,  6336.,  6452.,  6568.,  6684.,  6800.,  6916.,  7032.,  7148.,  3808.,  3924.,  4040.,  4156.,    47.,   109.,   171.,   233.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,  1280.,  1428.,  1576.,  1724.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  2760.,  2908.,  3056.,  3204.,  3352.,  3500.,  3648.,  3796.,  1931.,  2009.,  2087.,  2165.,  2078.,  2234.,  2390.,  2546.,  5016.,  5344.,  5672.,  6000.,  6328.,  6656.,  6984.,  7312.,  7640.,  7968.,  8296.,  8624.,  8952.,  9280.,  9608.,  9936., 10264., 10592., 10920., 11248., 11576., 11904., 12232., 12560.,  6442.,  6614.,  6786.,  6958.,  6446.,  6602.,  6758.,  6914., 14200., 14528., 14856., 15184., 11032., 11360., 11688., 12016.,  7352.,  7680.,  8008.,  8336.,  8664.,  8992.,  9320.,  9648.,  9976., 10304., 10632., 10960., 11288., 11616., 11944., 12272.,  6266.,  6438.,  6610.,  6782.,  6334.,  6490.,  6646.,  6802., 13912., 14240., 14568., 14896.,  9720., 10048., 10376., 10704.,  5016.,  5344.,  5672.,  6000.,  6328.,  6656.,  6984.,  7312.,  7640.,  7968.,  8296.,  8624.,  8952.,  9280.,  9608.,  9936.,  5066.,  5238.,  5410.,  5582.,  5198.,  5354.,  5510.,  5666., 11576., 11904., 12232., 12560., 12888., 13216., 13544., 13872., 14200., 14528., 14856., 15184., 11032., 11360., 11688., 12016.,  7352.,  7680.,  8008.,  8336.,  8664.,  8992.,  9320.,  9648.,  4890.,  5062.,  5234.,  5406.,  5086.,  5242.,  5398.,  5554., 11288., 11616., 11944., 12272., 12600., 12928., 13256., 13584., 13912., 14240., 14568., 14896.,  9720., 10048., 10376., 10704.,  5016.,  5344.,  5672.,  6000.,  6328.,  6656.,  6984.,  7312.,  3690.,  3862.,  4034.,  4206.,  3950.,  4106.,  4262.,  4418.,  8952.,  9280.,  9608.,  9936., 10264., 10592., 10920., 11248., 11576., 11904., 12232., 12560., 12888., 13216., 13544., 13872., 14200., 14528., 14856., 15184., 11032., 11360., 11688., 12016.,  3514.,  3686.,  3858.,  4030.,  3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,  8580.,  8760.,  8940.,  9120.,  9300.,  9480.,  9660.,  9840., 10020., 10200., 10380., 10560., 10740., 10920., 11100.,  5776.,  5956.,  6136.,  6316.,    71.,   165.,   259.,   353.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1348.,  1492.,  1636.,  1780.,   260.,   404.,   548.,   692.,   836.,   980.,  1124.,  1268.,   902.,  1006.,  1110.,  1214.,   620.,   828.,  1036.,  1244.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  2492.,  2828.,  3164.,  3500.,  2476.,  2684.,  2892.,  3100.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  1148.,  1484.,  1820.,  2156.,  1644.,  1852.,  2060.,  2268.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  1468.,  1804.,  2140.,  2476.,   812.,  1020.,  1228.,  1436.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  3836.,  4172.,  4508.,  4844.,   620.,   828.,  1036.,  1244.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  2492.,  2828.,  3164.,  3500.,  2476.,  2684.,  2892.,  3100.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  4456.,  5000.,  5544.,  6088.,  2280.,  2824.,  3368.,  3912.,  1148.,  1484.,  1820.,  2156.,  1454.,  1622.,  1790.,  1958.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3844.,  4244.,   932.,  1332.,  1732.,  2132.,  2532.,  2932.,  3332.,  3732.,  4132.,  4532.,  4932.,  5332.,  3044.,  3444.,  3844.,  4244.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  5540.,  6196.,  6852.,  7508.,  8164.,  8820.,  4740.,  5396.,  6052.,  6708.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,  5540.,  6196.,  3110.,  3470.,  3830.,  4190.,  4012.,  4732.,  5452.,  6172.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232.,  5884.,  6732.,  7580.,  8428.,  7916.,  8636.,  9356., 10076., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  2492.,  3340.,  4188.,  5036.,  5036.,  5756.,  6476.,  7196., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  4860.,  5708.,  6556.,  7404.,  2156.,  2876.,  3596.,  4316.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504.,  9276., 10124., 10972., 11820.,  4012.,  4732.,  5452.,  6172.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232.,  5884.,  6732.,  7580.,  8428.,  7916.,  8636.,  9356., 10076., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  7528.,  9096., 10664., 12232., 13800., 15368., 16936., 18504., 13288., 14856., 16424., 17992.,  7016.,  8584., 10152., 11720.,  2492.,  3340.,  4188.,  5036.,  3662.,  4086.,  4510.,  4934.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,  2276.,  3188.,  4100.,  5012.,  5924.,  6836.,  7748.,  8660.,  9572., 10484., 11396., 12308.,  6436.,  7348.,  8260.,  9172.,   310.,   798.,  1286.,  1774.,   350.,   902.,  1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  9956., 11124., 12292., 13460., 14628., 15796.,  8132.,  9300., 10468., 11636.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  9956., 11124.,  5318.,  5934.,  6550.,  7166.,  7404.,  8636.,  9868., 11100., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040.,  9276., 10636., 11996., 13356., 13356., 14588., 15820., 17052., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528.,  3836.,  5196.,  6556.,  7916.,  8428.,  9660., 10892., 12124., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896.,  8252.,  9612., 10972., 12332.,  3500.,  4732.,  5964.,  7196., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 14716., 16076., 17436., 18796.,  7404.,  8636.,  9868., 11100., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040.,  9276., 10636., 11996., 13356., 13356., 14588., 15820., 17052., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528., 12264., 14856., 17448., 20040., 22632., 25224., 27816., 30408., 22120., 24712., 27304., 29896., 11752., 14344., 16936., 19528.,  3836.,  5196.,  6556.,  7916.,  5870.,  6550.,  7230.,  7910., 15012., 16436., 17860., 19284.,  9828., 11252., 12676., 14100.,  3620.,  5044.,  6468.,  7892.,  9316., 10740., 12164., 13588., 15012., 16436., 17860., 19284.,  9828., 11252., 12676., 14100.,   470.,  1214.,  1958.,  2702.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  5920.,  7659.,  9440., 11365., 11378., 11807., 10412.,  8785.,  6920.,  6462.,  7920.,  9165., 10522., 10010., 10138.,  8617.,  6900.,  4982.,  4576.,  5106.,  5728.,  6446.,  6000.,  6450.,  5528.,  4462.,  3248.,  3392.,  4520.,  5768.,  6884.,  7002.,  7088.,  6296.,  5364.,  4288.,  5324.,  6757.,  8324.,  9550.,  9572.,  9562.,  8218.,  6683.,  4952.,  6408.,  7894.,  9544., 10660., 10507., 10322.,  8760.,  6972.,  4952.,  6992.,  8374.,  9934., 10751., 10280.,  9745.,  8108.,  7250.,  6140.,  5938.,  7678.,  9595., 11568., 11673., 11714., 10451.,  8944.,  7186.,  7008.,  8563., 10272., 11789., 11418., 10983.,  9516.,  7833.,  5928.,  5678.,  6408.,  7253.,  8218.,  7930.,  7610.,  6625.,  5468.,  4134.,  4192.,  4098.,  4096.,  5214.,  5600.,  5954.,  5432.,  4766.,  3952.,  3840.,  5080.,  6440.,  7924.,  7850.,  7744.,  6872.,  5860.,  4704.,  5852.,  7181.,  8652., 10270., 10100.,  9898.,  8466.,  6835.,  5000.,  6184.,  7342.,  8648., 10108.,  9603.,  9034.,  7384.,  5748.,  4920.,  5824.,  7510.,  9366., 11399., 11568., 11673., 10084.,  8706.,  7084.,  7298.,  8894., 10659., 12600., 12321., 11978.,  9963.,  8384.,  6562.,  6720.,  7643.,  8704.,  9909.,  9730.,  9519.,  7596.,  6369.,  4936.,  6014.,  6272.,  6653.,  7162.,  7706.,  8218.,  7417.,  6532.,  5462.,  4352.,  5458.,  6656.,  7950.,  8144.,  8306.,  7064.,  5998.,  4784.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,   38.,   80.,  101.,  122.,  143.,  164.,  138.,   84.,   47.,  122.,  227.,  248.,  269.,  290.,  311.,  250.,  147.,   82.,  206.,  374.,  395.,  416.,  437.,  458.,  362.,  210.,  117.,  290.,  521.,  542.,  563.,  584.,  605.,  474.,  273.,  152.,  374.,  668.,  689.,  710.,  731.,  752.,  586.,  336.,  187.,  458.,  815.,  836.,  857.,  878.,  899.,  698.,  399.,  172.,  391.,  658.,  673.,  688.,  703.,  718.,  533.,  294.,    7.,   22.,   46.,   70.,   94.,  118.,  142.,  110.,   63.,   66.,  158.,  278.,  335.,  392.,  449.,  506.,  378.,  210.,  185.,  410.,  677.,  734.,  791.,  848.,  905.,  658.,  357.,  304.,  662., 1076., 1133., 1190., 1247., 1304.,  938.,  504.,  423.,  914., 1475., 1532., 1589., 1646., 1703., 1218.,  651.,  542., 1166., 1874., 1931., 1988., 2045., 2102., 1498.,  798.,  661., 1418., 2273., 2330., 2387., 2444., 2501., 1778.,  945.,  430.,  913., 1450., 1483., 1516., 1549., 1582., 1115.,  588.,   13.,   40.,   82.,  124.,  166.,  208.,  250.,  188.,  105.,  120.,  278.,  476.,  569.,  662.,  755.,  848.,  618.,  336.,  323.,  698., 1127., 1220., 1313., 1406., 1499., 1066.,  567.,  526., 1118., 1778., 1871., 1964., 2057., 2150., 1514.,  798.,  729., 1538., 2429., 2522., 2615., 2708., 2801., 1962., 1029.,  932., 1958., 3080., 3173., 3266., 3359., 3452., 2410., 1260., 1135., 2378., 3731., 3824., 3917., 4010., 4103., 2858., 1491.,  688., 1435., 2242., 2293., 2344., 2395., 2446., 1697.,  882.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192., 14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167.,  9684.,  9552., 11756., 14296., 16596., 16108., 16996., 14360., 12348.,  9680.,  7344., 10084., 13256., 15900., 16436., 16108., 13864., 10900.,  8560., 11308., 13797., 16698., 18163., 17821., 17639., 15130., 11625.,  8556., 12200., 15590., 19500., 23242., 23534., 23090., 18988., 13742., 10824., 18116., 20639., 23790., 26921., 27375., 26069., 22158., 19003., 15972., 14300., 17897., 22114., 26303., 26117., 25547., 21554., 16277., 13180., 17016., 20178., 23908., 25502., 24466., 25094., 22148., 18010., 14104., 12436., 15067., 18086., 21053., 21175., 21041., 17174., 12335., 10004., 12816., 13356., 14232., 15892., 15916., 15684., 13176., 11964., 10192.,  5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192., 14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167.,  9684.,  9552., 11756., 14296., 16596., 16108., 16996., 14360., 12348.,  9680.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   101.,   143.,   185.,   227.,   222.,   149.,    70.,   244.,   538.,   694.,   850.,  1006.,  1162.,   996.,   614.,   322.,   860.,  1630.,  1786.,  1942.,  2098.,  2254.,  1836.,  1090.,   574.,  1476.,  2722.,  2878.,  3034.,  3190.,  3346.,  2676.,  1566.,   826.,  2092.,  3814.,  3970.,  4126.,  4282.,  4438.,  3516.,  2042.,  1078.,  2708.,  4906.,  5062.,  5218.,  5374.,  5530.,  4356.,  2518.,  1330.,  3324.,  5998.,  6154.,  6310.,  6466.,  6622.,  5196.,  2994.,  1283.,  2938.,  4973.,  5087.,  5201.,  5315.,  5429.,  4050.,  2243.,    41.,   142.,   311.,   497.,   683.,   869.,  1055.,   822.,   473.,   478.,  1156.,  2050.,  2494.,  2938.,  3382.,  3826.,  2868.,  1598.,  1402.,  3116.,  5158.,  5602.,  6046.,  6490.,  6934.,  5052.,  2746.,  2326.,  5076.,  8266.,  8710.,  9154.,  9598., 10042.,  7236.,  3894.,  3250.,  7036., 11374., 11818., 12262., 12706., 13150.,  9420.,  5042.,  4174.,  8996., 14482., 14926., 15370., 15814., 16258., 11604.,  6190.,  5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788.,  7338.,  3335.,  7090., 11273., 11531., 11789., 12047., 12305.,  8682.,  4583.,    77.,   262.,   563.,   893.,  1223.,  1553.,  1883.,  1422.,   797.,   886.,  2068.,  3562.,  4294.,  5026.,  5758.,  6490.,  4740.,  2582.,  2482.,  5372.,  8686.,  9418., 10150., 10882., 11614.,  8268.,  4402.,  4078.,  8676., 13810., 14542., 15274., 16006., 16738., 11796.,  6222.,  5674., 11980., 18934., 19666., 20398., 21130., 21862., 15324.,  8042.,  7270., 15284., 24058., 24790., 25522., 26254., 26986., 18852.,  9862.,  8866., 18588., 29182., 29914., 30646., 31378., 32110., 22380., 11682.,  5387., 11242., 17573., 17975., 18377., 18779., 19181., 13314.,  6923.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  6672., 10228., 10424., 12764., 11340., 13404., 10008.,  8916.,  6672.,  6200.,  7542.,  9636.,  9218., 11034., 10450.,  9636.,  6566.,  6200.,  4448.,  5944.,  6672.,  8936.,  7784.,  8424.,  6672.,  6456.,  4448.,  4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  6672., 10228., 10424., 12764., 11340., 13404., 10008.,  8916.,  6672.,  6200.,  7542.,  9636.,  9218., 11034., 10450.,  9636.,  6566.,  6200.,  4448.,  5944.,  6672.,  8936.,  7784.,  8424.,  6672.,  6456.,  4448.,  4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  6672., 10228., 10424., 12764., 11340., 13404., 10008.,  8916.,  6672.,  6200.,  7542.,  9636.,  9218., 11034., 10450.,  9636.,  6566.,  6200.,  4448.,  5944.,  6672.,  8936.,  7784.,  8424.,  6672.,  6456.,  4448.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,  2044.,  3416.,  5268.,  2756.,  2612.,  3812.,  5012.,  4440.,  2812.,  1772.,  4600.,  6756.,  5268.,  2756.,  2612.,  3812.,  3512.,  2284.,  1500.,  3928.,  7412.,  6756.,  5268.,  2756.,  2612.,  2584.,  1756.,  1228.,  3256.,  6212.,  7412.,  6756.,  5268.,  2756.,  1656.,  1228.,   956.,  2584.,  5012.,  6212.,  7412.,  6756.,  5268.,  2072.,   700.,   614.,  1628.,  3106.,  3994.,  4882.,  5770.,  4802.,  2940.,   230.,   270.,  1004.,  1946.,  2898.,  3850.,  4802.,  5754.,  3468.,   270.,  3308.,  4280.,  2020.,  3156.,  4612.,  6068.,  7524.,  5368.,  1772.,  3612.,  7832.,  6324.,  2020.,  3156.,  4612.,  6068.,  4440.,  1500.,  3084.,  7480.,  9604.,  6324.,  2020.,  3156.,  4612.,  3512.,  1228.,  2556.,  6296.,  8980.,  9604.,  6324.,  2020.,  3156.,  2584.,   956.,  2028.,  5112.,  7524.,  8980.,  9604.,  6324.,  2020.,  1656.,   684.,  1500.,  3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,   412.,   278.,   828.,  1714.,  2218.,  2722.,  3226.,  2898.,  1884.,   150.,   190.,   716.,  1642.,  2722.,  3802.,  4882.,  5962.,  4780.,  2814.,  2572.,  3768.,  5380.,  3700.,  5412.,  7124.,  8836.,  4856.,  3084.,  5692.,  5272.,  7380.,  5380.,  3700.,  5412.,  7124.,  3928.,  2556.,  4908.,  7992.,  8356.,  7380.,  5380.,  3700.,  5412.,  3000.,  2028.,  4124.,  6808., 10548.,  8356.,  7380.,  5380.,  3700.,  2072.,  1500.,  3340.,  5624.,  8836., 10548.,  8356.,  7380.,  5380.,  1144.,   972.,  2556.,  4440.,  7124.,  8836., 10548.,  8356.,  7380.,  3608.,   444.,  1286.,  1884.,  2690.,  3322.,  3954.,  4586.,  1314.,   828.,    70.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7096.,  7520.,  8957.,  9494., 10864., 11488., 12381., 13098., 11885., 12580., 12189., 12894., 10140., 10744.,  7697.,  8194.,  5872.,  6256.,  6406.,  6748.,  8176.,  8608.,  9483.,  9978., 10049., 10612.,  9534., 10068.,  9243.,  9780.,  7497.,  7954.,  5428.,  5800.,  4338.,  4620.,  4576.,  4800.,  5322.,  5604.,  6216.,  6560.,  7106.,  7516.,  6858.,  7264.,  7346.,  7780.,  6480.,  6864.,  5394.,  5724.,  4080.,  4352.,  4000.,  4256.,  5126.,  5456.,  6424.,  6832.,  7422.,  7880.,  7278.,  7732.,  7070.,  7520.,  5744.,  6128.,  4174.,  4488.,  3216.,  3456.,  4734.,  5048.,  5749.,  6154.,  6963.,  7464.,  7458.,  8028.,  6987.,  7560.,  7476.,  8052.,  6821.,  7316.,  5853.,  6262.,  4690.,  5008.,  5976.,  6384.,  7519.,  8044.,  9320.,  9968., 11039., 11784., 11235., 11990., 11367., 12132.,  9852., 10512.,  7955.,  8504.,  6080.,  6512.,  8294.,  8768., 10074., 10668., 12139., 12860., 13415., 14238., 12968., 13776., 12393., 13186., 10249., 10936.,  8710.,  9284.,  7442.,  7896.,  7406.,  7876.,  9327.,  9916., 11531., 12246., 13232., 14048., 12913., 13714., 12466., 13252., 10621., 11302.,  8359.,  8928.,  6658.,  7108.,  6744.,  7136.,  8765.,  9254., 11024., 11616., 11997., 12666., 11757., 12404., 11389., 12014.,  9692., 10232.,  7633.,  8082.,  5456.,  5808.,  5414.,  5692.,  6264.,  6608.,  7275.,  7690.,  8329.,  8820.,  8230.,  8724.,  8067.,  8564.,  6857.,  7298.,  5372.,  5752.,  4146.,  4460.,  4800.,  5056.,  5066.,  5380.,  5480.,  5856.,  6658.,  7100.,  7050.,  7488.,  7378.,  7812.,  6800.,  7184.,  6002.,  6332.,  4976.,  5248.,  3360.,  3616.,  4198.,  4528.,  5208.,  5616.,  6398.,  6888.,  5870.,  6356.,  5278.,  5760.,  5072.,  5488.,  4622.,  4968.,  4016.,  4288.,  5246.,  5592.,  6557.,  7002.,  8083.,  8632.,  9834., 10492., 10003., 10664., 10108., 10772.,  8773.,  9348.,  7109.,  7590.,  5490.,  5872.,  7032.,  7472.,  8447.,  8988., 10088., 10736., 11967., 12728., 11491., 12230., 10887., 11604.,  8700.,  9296.,  6579.,  7080.,  5792.,  6192.,  7494.,  7968.,  9378.,  9964., 11531., 12236., 13423., 14254., 13232., 14048., 12913., 13714., 10377., 11048.,  8302.,  8868.,  6770.,  7224.,  7566.,  8036.,  8695.,  9276., 11115., 11814., 12984., 13808., 12921., 13730., 12730., 13524., 10941., 11606.,  9039.,  9600.,  6946.,  7396.,  6712.,  7072.,  7997.,  8438.,  9488., 10016., 11101., 11722., 11213., 11844., 11261., 11902.,  9180.,  9720.,  7505.,  7970.,  6000.,  6384.,  6534.,  6876.,  6944.,  7360.,  7531.,  8026.,  7921.,  8500.,  8462.,  9044.,  8939.,  9524.,  7625.,  8114.,  6180.,  6600.,  5234.,  5580.,  5088.,  5376.,  6474.,  6820.,  8008.,  8416.,  9026.,  9500.,  9034.,  9504.,  8978.,  9444.,  7504.,  7888.,  6418.,  6748.,  5104.,  5376.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   14.,   20.,   26.,   32.,   38.,   44.,   50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,   64.,   76.,  139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,  307.,  328.,  260.,  276.,  159.,  168.,   89.,   94.,  232.,  244.,  433.,  454.,  475.,  496.,  517.,  538.,  559.,  580.,  601.,  622.,  484.,  500.,  285.,  294.,  159.,  164.,  400.,  412.,  727.,  748.,  769.,  790.,  811.,  832.,  853.,  874.,  895.,  916.,  708.,  724.,  411.,  420.,  229.,  234.,  568.,  580., 1021., 1042., 1063., 1084., 1105., 1126., 1147., 1168., 1189., 1210.,  932.,  948.,  537.,  546.,  299.,  304.,  736.,  748., 1315., 1336., 1357., 1378., 1399., 1420., 1441., 1462., 1483., 1504., 1156., 1172.,  663.,  672.,  369.,  374.,  904.,  916., 1609., 1630., 1651., 1672., 1693., 1714., 1735., 1756., 1777., 1798., 1380., 1396.,  789.,  798.,  340.,  344.,  773.,  782., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436., 1055., 1066.,  582.,  588.,    7.,   14.,   29.,   44.,   68.,   92.,  116.,  140.,  164.,  188.,  212.,  236.,  260.,  284.,  203.,  220.,  117.,  126.,  115.,  132.,  280.,  316.,  499.,  556.,  613.,  670.,  727.,  784.,  841.,  898.,  955., 1012.,  716.,  756.,  399.,  420.,  353.,  370.,  784.,  820., 1297., 1354., 1411., 1468., 1525., 1582., 1639., 1696., 1753., 1810., 1276., 1316.,  693.,  714.,  591.,  608., 1288., 1324., 2095., 2152., 2209., 2266., 2323., 2380., 2437., 2494., 2551., 2608., 1836., 1876.,  987., 1008.,  829.,  846., 1792., 1828., 2893., 2950., 3007., 3064., 3121., 3178., 3235., 3292., 3349., 3406., 2396., 2436., 1281., 1302., 1067., 1084., 2296., 2332., 3691., 3748., 3805., 3862., 3919., 3976., 4033., 4090., 4147., 4204., 2956., 2996., 1575., 1596., 1305., 1322., 2800., 2836., 4489., 4546., 4603., 4660., 4717., 4774., 4831., 4888., 4945., 5002., 3516., 3556., 1869., 1890.,  850.,  860., 1805., 1826., 2867., 2900., 2933., 2966., 2999., 3032., 3065., 3098., 3131., 3164., 2207., 2230., 1164., 1176.,   13.,   26.,   53.,   80.,  122.,  164.,  206.,  248.,  290.,  332.,  374.,  416.,  458.,  500.,  347.,  376.,  195.,  210.,  211.,  240.,  496.,  556.,  859.,  952., 1045., 1138., 1231., 1324., 1417., 1510., 1603., 1696., 1172., 1236.,  639.,  672.,  617.,  646., 1336., 1396., 2161., 2254., 2347., 2440., 2533., 2626., 2719., 2812., 2905., 2998., 2068., 2132., 1101., 1134., 1023., 1052., 2176., 2236., 3463., 3556., 3649., 3742., 3835., 3928., 4021., 4114., 4207., 4300., 2964., 3028., 1563., 1596., 1429., 1458., 3016., 3076., 4765., 4858., 4951., 5044., 5137., 5230., 5323., 5416., 5509., 5602., 3860., 3924., 2025., 2058., 1835., 1864., 3856., 3916., 6067., 6160., 6253., 6346., 6439., 6532., 6625., 6718., 6811., 6904., 4756., 4820., 2487., 2520., 2241., 2270., 4696., 4756., 7369., 7462., 7555., 7648., 7741., 7834., 7927., 8020., 8113., 8206., 5652., 5716., 2949., 2982., 1360., 1376., 2837., 2870., 4433., 4484., 4535., 4586., 4637., 4688., 4739., 4790., 4841., 4892., 3359., 3394., 1746., 1764.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 13976., 15528., 16524., 18456., 17420., 19652., 20440., 23020., 19940., 22472., 20304., 22916., 15268., 17468., 12556., 14424., 10184., 11672., 13144., 14560., 15503., 17245., 17264., 19244., 17835., 20093., 17709., 19863., 18191., 20369., 14516., 16320., 10047., 11565.,  7264.,  8456.,  8912.,  9904., 11440., 12632., 12600., 14024., 13480., 15168., 12528., 14184., 14232., 15984., 12936., 14424., 11024., 12344.,  8080.,  9200.,  7216.,  8208.,  9184., 10504., 11736., 13416., 13048., 14992., 14560., 16600., 14440., 16448., 12040., 13784.,  8832., 10280.,  7824.,  8944., 10832., 12280., 13573., 15355., 16852., 19008., 19117., 21559., 18415., 20881., 18129., 20491., 14104., 16084., 10005., 11563.,  6616.,  7840., 13208., 14888., 15388., 17480., 19244., 21796., 22440., 25372., 22708., 25720., 21600., 24564., 18532., 21052., 14204., 16232., 11176., 12792., 16264., 18208., 18901., 21279., 22144., 25012., 26009., 29295., 25887., 29181., 24389., 27563., 19372., 22096., 16133., 18351., 12864., 14648., 15056., 16968., 18439., 20777., 21260., 24080., 23791., 27021., 24437., 27675., 24315., 27561., 20536., 23340., 15607., 17913., 13608., 15488., 14680., 16488., 17868., 20056., 21292., 23908., 23416., 26380., 22404., 25320., 22672., 25540., 18276., 20732., 14060., 16056.,  9768., 11384., 12888., 14304., 14175., 15853., 16368., 18348., 18523., 20845., 18493., 20839., 17951., 20321., 15860., 17920., 12239., 13949.,  9760., 11208., 12176., 13424., 13424., 14872., 14328., 16008., 15976., 17920., 16048., 17960., 15608., 17488., 12520., 14136., 10256., 11576.,  7056.,  8176.,  6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 13976., 15528., 16524., 18456., 17420., 19652., 20440., 23020., 19940., 22472., 20304., 22916., 15268., 17468., 12556., 14424., 10184., 11672., 13144., 14560., 15503., 17245., 17264., 19244., 17835., 20093., 17709., 19863., 18191., 20369., 14516., 16320., 10047., 11565.,  7264.,  8456.,  8912.,  9904., 11440., 12632., 12600., 14024., 13480., 15168., 12528., 14184., 14232., 15984., 12936., 14424., 11024., 12344.,  8080.,  9200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,   112.,   148.,   420.,   508.,   956.,  1112.,  1268.,  1424.,  1580.,  1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,   616.,   652.,  1652.,  1740.,  2948.,  3104.,  2812.,  2968.,  2420.,  2576.,  2732.,  2888.,  3044.,  3200.,  2428.,  2548.,  1424.,  1492.,   928.,   964.,  2244.,  2332.,  3020.,  3176.,  2116.,  2272.,   956.,  1112.,  1268.,  1424.,  1580.,  1736.,  1420.,  1540.,   904.,   972.,   472.,   508.,  1300.,  1388.,  2516.,  2672.,  2828.,  2984.,  2948.,  3104.,  2812.,  2968.,  2420.,  2576.,  1948.,  2068.,  1152.,  1220.,   784.,   820.,  1892.,  1980.,  3356.,  3512.,  3668.,  3824.,  3020.,  3176.,  2116.,  2272.,   956.,  1112.,   940.,  1060.,   632.,   700.,   328.,   364.,   948.,  1036.,  1892.,  2048.,  2204.,  2360.,  2516.,  2672.,  2828.,  2984.,  2948.,  3104.,  2172.,  2292.,   880.,   948.,   623.,   653.,  1472.,  1540.,  2563.,  2677.,  2791.,  2905.,  3019.,  3133.,  3247.,  3361.,  2515.,  2629.,  1444.,  1528.,    35.,    81.,    41.,    95.,   196.,   312.,   481.,   667.,   853.,  1039.,  1225.,  1411.,  1597.,  1783.,  1969.,  2155.,  1544.,  1676.,   893.,   963.,   856.,   988.,  2100.,  2380.,  3764.,  4208.,  4652.,  5096.,  5540.,  5984.,  6428.,  6872.,  7316.,  7760.,  5500.,  5812.,  3072.,  3236.,  2704.,  2836.,  6020.,  6300.,  8252.,  8696.,  7156.,  7600.,  5804.,  6248.,  6692.,  7136.,  7580.,  8024.,  5644.,  5956.,  3128.,  3292.,  2824.,  2956.,  6228.,  6508.,  7748.,  8192.,  5884.,  6328.,  3764.,  4208.,  4652.,  5096.,  5540.,  5984.,  4252.,  4564.,  2416.,  2580.,  2176.,  2308.,  4900.,  5180.,  8204.,  8648.,  9092.,  9536.,  8252.,  8696.,  7156.,  7600.,  5804.,  6248.,  4396.,  4708.,  2472.,  2636.,  2296.,  2428.,  5108.,  5388.,  8468.,  8912.,  9356.,  9800.,  7748.,  8192.,  5884.,  6328.,  3764.,  4208.,  3004.,  3316.,  1760.,  1924.,  1648.,  1780.,  3780.,  4060.,  6428.,  6872.,  7316.,  7760.,  8204.,  8648.,  9092.,  9536.,  8252.,  8696.,  5388.,  5700.,  1816.,  1980.,  1619.,  1697.,  3560.,  3724.,  5839.,  6097.,  6355.,  6613.,  6871.,  7129.,  7387.,  7645.,  5407.,  5665.,  2956.,  3136.,    71.,   165.,    77.,   179.,   364.,   576.,   877.,  1207.,  1537.,  1867.,  2197.,  2527.,  2857.,  3187.,  3517.,  3847.,  2672.,  2900.,  1505.,  1623.,  1600.,  1828.,  3780.,  4252.,  6572.,  7304.,  8036.,  8768.,  9500., 10232., 10964., 11696., 12428., 13160.,  9100.,  9604.,  4968.,  5228.,  4792.,  5020., 10388., 10860., 13556., 14288., 11500., 12232.,  9188.,  9920., 10652., 11384., 12116., 12848.,  8860.,  9364.,  4832.,  5092.,  4720.,  4948., 10212., 10684., 12476., 13208.,  9652., 10384.,  6572.,  7304.,  8036.,  8768.,  9500., 10232.,  7084.,  7588.,  3928.,  4188.,  3880.,  4108.,  8500.,  8972., 13892., 14624., 15356., 16088., 13556., 14288., 11500., 12232.,  9188.,  9920.,  6844.,  7348.,  3792.,  4052.,  3808.,  4036.,  8324.,  8796., 13580., 14312., 15044., 15776., 12476., 13208.,  9652., 10384.,  6572.,  7304.,  5068.,  5572.,  2888.,  3148.,  2968.,  3196.,  6612.,  7084., 10964., 11696., 12428., 13160., 13892., 14624., 15356., 16088., 13556., 14288.,  8604.,  9108.,  2752.,  3012.,  2615.,  2741.,  5648.,  5908.,  9115.,  9517.,  9919., 10321., 10723., 11125., 11527., 11929.,  8299.,  8701.,  4468.,  4744.,   107.,   249.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  4656.,  7920.,  7948., 12156.,  7064., 12088., 10964., 16676.,  7940., 13524., 10708., 16420.,  7320., 12344.,  7948., 12156.,  4656.,  7920.,  5160.,  7880.,  4806.,  8302.,  7868., 11948.,  6538., 11266.,  8674., 13338.,  6874., 11730.,  7948., 12156.,  4806.,  8302.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  4656.,  7920.,  7948., 12156.,  7064., 12088., 10964., 16676.,  7940., 13524., 10708., 16420.,  7320., 12344.,  7948., 12156.,  4656.,  7920.,  5160.,  7880.,  4806.,  8302.,  7868., 11948.,  6538., 11266.,  8674., 13338.,  6874., 11730.,  7948., 12156.,  4806.,  8302.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  4656.,  7920.,  7948., 12156.,  7064., 12088., 10964., 16676.,  7940., 13524., 10708., 16420.,  7320., 12344.,  7948., 12156.,  4656.,  7920.,  5160.,  7880.,  4806.,  8302.,  7868., 11948.,  6538., 11266.,  8674., 13338.,  6874., 11730.,  7948., 12156.,  4806.,  8302.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  578.,  890., 1202., 1514., 1506., 1818., 1298., 1610.,  578.,  890.,  932., 1204.,  782.,  950.,  420.,  692., 1528., 2200., 3388., 4588., 4444., 5644., 4988., 6188., 4700., 5900., 3388., 4588., 2712., 3640., 2116., 2644., 1732., 2004., 2872., 3544., 4700., 5900., 3388., 4588., 4444., 5644., 4988., 6188., 4700., 5900., 2200., 3128., 1060., 1588., 1188., 1460., 3384., 4056., 4988., 6188., 4700., 5900., 3388., 4588., 4444., 5644., 4988., 6188., 4056., 4984., 1348., 1876.,  644.,  916., 2040., 2712., 4444., 5644., 4988., 6188., 4700., 5900., 3388., 4588., 4444., 5644., 4568., 5496., 3172., 3700.,  420.,  692., 1528., 2200., 3388., 4588., 4444., 5644., 4988., 6188., 4700., 5900., 3388., 4588., 2712., 3640., 2116., 2644., 1732., 2004., 2872., 3544., 4700., 5900., 3388., 4588., 4444., 5644., 4988., 6188., 4700., 5900., 2200., 3128., 1060., 1588., 1078., 1310., 2916., 3444., 3786., 4674., 3194., 4082., 2090., 2978., 3866., 4754., 3786., 4674., 2580., 3236.,  230.,  590.,  270.,  694., 1428., 2340., 3282., 4234., 5186., 6138., 3698., 4650., 1698., 2650., 3282., 4234., 2372., 2900.,  190.,  230., 2884., 3412., 3896., 5080., 2780., 4236., 5372., 6828., 7452., 8908., 5628., 7084., 2780., 4236., 2712., 3640., 1188., 1460., 2660., 3188., 6264., 7448., 5628., 7084., 2780., 4236., 5372., 6828., 7452., 8908., 5628., 7084., 1176., 2104.,  644.,  916., 1604., 2132., 4728., 5912., 7452., 8908., 5628., 7084., 2780., 4236., 5372., 6828., 7452., 8908., 5080., 6008.,  420.,  692.,  548., 1076., 2360., 3544., 5372., 6828., 7452., 8908., 5628., 7084., 2780., 4236., 5372., 6828., 4568., 5496., 1732., 2004., 2884., 3412., 3896., 5080., 2780., 4236., 5372., 6828., 7452., 8908., 5628., 7084., 2780., 4236., 2712., 3640., 1188., 1460., 2660., 3188., 6264., 7448., 5628., 7084., 2780., 4236., 5372., 6828., 7452., 8908., 5628., 7084., 1176., 2104.,  644.,  916.,  486.,  590., 1476., 1748., 2266., 2770., 1930., 2434., 1082., 1586., 2090., 2594., 2266., 2770., 1652., 2052.,  150.,  382.,  190.,  486., 1012., 1668., 2594., 3674., 4754., 5834., 4546., 5626., 3826., 4906., 2594., 3674., 2788., 3572., 1966., 2390., 2276., 3060., 3896., 5080., 6268., 7980., 6300., 8012., 5820., 7532., 6556., 8268., 6268., 7980., 1688., 2616., 1604., 2132., 4612., 5396., 4216., 5400., 6556., 8268., 6268., 7980., 6300., 8012., 5820., 7532., 6556., 8268., 3224., 4152.,  548., 1076., 3044., 3828., 5752., 6936., 5820., 7532., 6556., 8268., 6268., 7980., 6300., 8012., 5820., 7532., 5080., 6008., 2884., 3412., 1476., 2260., 3384., 4568., 6300., 8012., 5820., 7532., 6556., 8268., 6268., 7980., 6300., 8012., 3544., 4472., 2660., 3188., 2276., 3060., 3896., 5080., 6268., 7980., 6300., 8012., 5820., 7532., 6556., 8268., 6268., 7980., 1688., 2616., 1604., 2132., 4612., 5396., 4216., 5400., 6556., 8268., 6268., 7980., 6300., 8012., 5820., 7532., 6556., 8268., 3224., 4152.,  548., 1076., 2262., 2750., 3428., 3956., 1066., 1698., 2010., 2642., 2442., 3074., 3706., 4338., 1066., 1698.,  724.,  868.,   70.,  174.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7112.,  7536.,  7960.,  8384.,  9217.,  9754., 10291., 10828., 10448., 11072., 11696., 12320., 11373., 12090., 12807., 13524., 10659., 11354., 12049., 12744., 10489., 11194., 11899., 12604.,  8092.,  8696.,  9300.,  9904.,  6321.,  6818.,  7315.,  7812.,  4896.,  5280.,  5664.,  6048.,  5814.,  6156.,  6498.,  6840.,  7280.,  7712.,  8144.,  8576.,  8647.,  9142.,  9637., 10132.,  9327.,  9890., 10453., 11016.,  8774.,  9308.,  9842., 10376.,  8637.,  9174.,  9711., 10248.,  6857.,  7314.,  7771.,  8228.,  4532.,  4904.,  5276.,  5648.,  2954.,  3236.,  3518.,  3800.,  3936.,  4160.,  4384.,  4608.,  4922.,  5204.,  5486.,  5768.,  5688.,  6032.,  6376.,  6720.,  6506.,  6916.,  7326.,  7736.,  6526.,  6932.,  7338.,  7744.,  6962.,  7396.,  7830.,  8264.,  6240.,  6624.,  7008.,  7392.,  5146.,  5476.,  5806.,  6136.,  3664.,  3936.,  4208.,  4480.,  3456.,  3712.,  3968.,  4224.,  4290.,  4620.,  4950.,  5280.,  5400.,  5808.,  6216.,  6624.,  5874.,  6332.,  6790.,  7248.,  6230.,  6684.,  7138.,  7592.,  6458.,  6908.,  7358.,  7808.,  5376.,  5760.,  6144.,  6528.,  3970.,  4284.,  4598.,  4912.,  2992.,  3232.,  3472.,  3712.,  4866.,  5180.,  5494.,  5808.,  5781.,  6186.,  6591.,  6996.,  7025.,  7526.,  8027.,  8528.,  7818.,  8388.,  8958.,  9528.,  7385.,  7958.,  8531.,  9104.,  7848.,  8424.,  9000.,  9576.,  6811.,  7306.,  7801.,  8296.,  5633.,  6042.,  6451.,  6860.,  4038.,  4356.,  4674.,  4992.,  6424.,  6832.,  7240.,  7648.,  7793.,  8318.,  8843.,  9368.,  9320.,  9968., 10616., 11264., 10613., 11358., 12103., 12848., 10419., 11174., 11929., 12684., 10097., 10862., 11627., 12392.,  8900.,  9560., 10220., 10880.,  7713.,  8262.,  8811.,  9360.,  6256.,  6688.,  7120.,  7552.,  7794.,  8268.,  8742.,  9216.,  9666., 10260., 10854., 11448., 11429., 12150., 12871., 13592., 12823., 13646., 14469., 15292., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700.,  8803.,  9490., 10177., 10864.,  7566.,  8140.,  8714.,  9288.,  6302.,  6756.,  7210.,  7664.,  7110.,  7580.,  8050.,  8520.,  9425., 10014., 10603., 11192., 11339., 12054., 12769., 13484., 12720., 13536., 14352., 15168., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088.,  9649., 10330., 11011., 11692.,  7093.,  7662.,  8231.,  8800.,  5826.,  6276.,  6726.,  7176.,  5928.,  6320.,  6712.,  7104.,  7601.,  8090.,  8579.,  9068.,  9520., 10112., 10704., 11296., 10653., 11322., 11991., 12660., 10451., 11098., 11745., 12392.,  9993., 10618., 11243., 11868.,  8028.,  8568.,  9108.,  9648.,  5985.,  6434.,  6883.,  7332.,  3584.,  3936.,  4288.,  4640.,  5174.,  5452.,  5730.,  6008.,  5336.,  5680.,  6024.,  6368.,  6359.,  6774.,  7189.,  7604.,  7495.,  7986.,  8477.,  8968.,  7742.,  8236.,  8730.,  9224.,  7861.,  8358.,  8855.,  9352.,  6873.,  7314.,  7755.,  8196.,  5436.,  5816.,  6196.,  6576.,  4074.,  4388.,  4702.,  5016.,  5120.,  5376.,  5632.,  5888.,  5658.,  5972.,  6286.,  6600.,  5720.,  6096.,  6472.,  6848.,  6602.,  7044.,  7486.,  7928.,  6878.,  7316.,  7754.,  8192.,  7026.,  7460.,  7894.,  8328.,  6368.,  6752.,  7136.,  7520.,  5338.,  5668.,  5998.,  6328.,  3920.,  4192.,  4464.,  4736.,  3712.,  3968.,  4224.,  4480.,  4482.,  4812.,  5142.,  5472.,  5528.,  5936.,  6344.,  6752.,  6866.,  7356.,  7846.,  8336.,  6454.,  6940.,  7426.,  7912.,  5914.,  6396.,  6878.,  7360.,  5280.,  5696.,  6112.,  6528.,  4578.,  4924.,  5270.,  5616.,  3536.,  3808.,  4080.,  4352.,  5346.,  5692.,  6038.,  6384.,  6333.,  6778.,  7223.,  7668.,  7681.,  8230.,  8779.,  9328.,  9410., 10068., 10726., 11384.,  9233.,  9894., 10555., 11216.,  8928.,  9592., 10256., 10920.,  7051.,  7626.,  8201.,  8776.,  6281.,  6762.,  7243.,  7724.,  5318.,  5700.,  6082.,  6464.,  6968.,  7408.,  7848.,  8288.,  8609.,  9150.,  9691., 10232., 10088., 10736., 11384., 12032., 11941., 12702., 13463., 14224., 11459., 12198., 12937., 13676., 10721., 11438., 12155., 12872.,  7684.,  8280.,  8876.,  9472.,  5777.,  6278.,  6779.,  7280.,  4944.,  5344.,  5744.,  6144.,  6706.,  7180.,  7654.,  8128.,  9050.,  9636., 10222., 10808., 10997., 11702., 12407., 13112., 12831., 13662., 14493., 15324., 12720., 13536., 14352., 15168., 12353., 13154., 13955., 14756.,  9843., 10514., 11185., 11856.,  7526.,  8092.,  8658.,  9224.,  5470.,  5924.,  6378.,  6832.,  6918.,  7388.,  7858.,  8328.,  7913.,  8494.,  9075.,  9656., 10267., 10966., 11665., 12364., 12216., 13040., 13864., 14688., 12361., 13170., 13979., 14788., 12250., 13044., 13838., 14632., 10049., 10714., 11379., 12044.,  8205.,  8766.,  9327.,  9888.,  5890.,  6340.,  6790.,  7240.,  6408.,  6768.,  7128.,  7488.,  6881.,  7322.,  7763.,  8204.,  7280.,  7808.,  8336.,  8864.,  8909.,  9530., 10151., 10772.,  9379., 10010., 10641., 11272.,  9721., 10362., 11003., 11644.,  7772.,  8312.,  8852.,  9392.,  6481.,  6946.,  7411.,  7876.,  5152.,  5536.,  5920.,  6304.,  6582.,  6924.,  7266.,  7608.,  7392.,  7808.,  8224.,  8640.,  7815.,  8310.,  8805.,  9300.,  8127.,  8706.,  9285.,  9864.,  8630.,  9212.,  9794., 10376.,  9005.,  9590., 10175., 10760.,  7593.,  8082.,  8571.,  9060.,  5988.,  6408.,  6828.,  7248.,  4682.,  5028.,  5374.,  5720.,  5408.,  5696.,  5984.,  6272.,  6650.,  6996.,  7342.,  7688.,  7160.,  7568.,  7976.,  8384.,  7210.,  7684.,  8158.,  8632.,  6718.,  7188.,  7658.,  8128.,  7122.,  7588.,  8054.,  8520.,  6240.,  6624.,  7008.,  7392.,  5146.,  5476.,  5806.,  6136.,  3664.,  3936.,  4208.,  4480.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    94.,   100.,   106.,   112.,   118.,   124.,   130.,   136.,   113.,   118.,   123.,   128.,    75.,    78.,    81.,    84.,    33.,    38.,    43.,    48.,   116.,   128.,   140.,   152.,   257.,   278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,   467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,   656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,   173.,   178.,   183.,   188.,   452.,   464.,   476.,   488.,   845.,   866.,   887.,   908.,   929.,   950.,   971.,   992.,  1013.,  1034.,  1055.,  1076.,  1097.,  1118.,  1139.,  1160.,  1181.,  1202.,  1223.,  1244.,   952.,   968.,   984.,  1000.,   561.,   570.,   579.,   588.,   313.,   318.,   323.,   328.,   788.,   800.,   812.,   824.,  1433.,  1454.,  1475.,  1496.,  1517.,  1538.,  1559.,  1580.,  1601.,  1622.,  1643.,  1664.,  1685.,  1706.,  1727.,  1748.,  1769.,  1790.,  1811.,  1832.,  1400.,  1416.,  1432.,  1448.,   813.,   822.,   831.,   840.,   453.,   458.,   463.,   468.,  1124.,  1136.,  1148.,  1160.,  2021.,  2042.,  2063.,  2084.,  2105.,  2126.,  2147.,  2168.,  2189.,  2210.,  2231.,  2252.,  2273.,  2294.,  2315.,  2336.,  2357.,  2378.,  2399.,  2420.,  1848.,  1864.,  1880.,  1896.,  1065.,  1074.,  1083.,  1092.,   593.,   598.,   603.,   608.,  1460.,  1472.,  1484.,  1496.,  2609.,  2630.,  2651.,  2672.,  2693.,  2714.,  2735.,  2756.,  2777.,  2798.,  2819.,  2840.,  2861.,  2882.,  2903.,  2924.,  2945.,  2966.,  2987.,  3008.,  2296.,  2312.,  2328.,  2344.,  1317.,  1326.,  1335.,  1344.,   733.,   738.,   743.,   748.,  1796.,  1808.,  1820.,  1832.,  3197.,  3218.,  3239.,  3260.,  3281.,  3302.,  3323.,  3344.,  3365.,  3386.,  3407.,  3428.,  3449.,  3470.,  3491.,  3512.,  3533.,  3554.,  3575.,  3596.,  2744.,  2760.,  2776.,  2792.,  1569.,  1578.,  1587.,  1596.,   676.,   680.,   684.,   688.,  1537.,  1546.,  1555.,  1564.,  2587.,  2602.,  2617.,  2632.,  2647.,  2662.,  2677.,  2692.,  2707.,  2722.,  2737.,  2752.,  2767.,  2782.,  2797.,  2812.,  2827.,  2842.,  2857.,  2872.,  2099.,  2110.,  2121.,  2132.,  1158.,  1164.,  1170.,  1176.,     7.,    14.,    21.,    28.,    43.,    58.,    73.,    88.,   112.,   136.,   160.,   184.,   208.,   232.,   256.,   280.,   304.,   328.,   352.,   376.,   400.,   424.,   448.,   472.,   496.,   520.,   544.,   568.,   389.,   406.,   423.,   440.,   225.,   234.,   243.,   252.,   213.,   230.,   247.,   264.,   524.,   560.,   596.,   632.,   941.,   998.,  1055.,  1112.,  1169.,  1226.,  1283.,  1340.,  1397.,  1454.,  1511.,  1568.,  1625.,  1682.,  1739.,  1796.,  1853.,  1910.,  1967.,  2024.,  1392.,  1432.,  1472.,  1512.,   777.,   798.,   819.,   840.,   689.,   706.,   723.,   740.,  1532.,  1568.,  1604.,  1640.,  2537.,  2594.,  2651.,  2708.,  2765.,  2822.,  2879.,  2936.,  2993.,  3050.,  3107.,  3164.,  3221.,  3278.,  3335.,  3392.,  3449.,  3506.,  3563.,  3620.,  2512.,  2552.,  2592.,  2632.,  1365.,  1386.,  1407.,  1428.,  1165.,  1182.,  1199.,  1216.,  2540.,  2576.,  2612.,  2648.,  4133.,  4190.,  4247.,  4304.,  4361.,  4418.,  4475.,  4532.,  4589.,  4646.,  4703.,  4760.,  4817.,  4874.,  4931.,  4988.,  5045.,  5102.,  5159.,  5216.,  3632.,  3672.,  3712.,  3752.,  1953.,  1974.,  1995.,  2016.,  1641.,  1658.,  1675.,  1692.,  3548.,  3584.,  3620.,  3656.,  5729.,  5786.,  5843.,  5900.,  5957.,  6014.,  6071.,  6128.,  6185.,  6242.,  6299.,  6356.,  6413.,  6470.,  6527.,  6584.,  6641.,  6698.,  6755.,  6812.,  4752.,  4792.,  4832.,  4872.,  2541.,  2562.,  2583.,  2604.,  2117.,  2134.,  2151.,  2168.,  4556.,  4592.,  4628.,  4664.,  7325.,  7382.,  7439.,  7496.,  7553.,  7610.,  7667.,  7724.,  7781.,  7838.,  7895.,  7952.,  8009.,  8066.,  8123.,  8180.,  8237.,  8294.,  8351.,  8408.,  5872.,  5912.,  5952.,  5992.,  3129.,  3150.,  3171.,  3192.,  2593.,  2610.,  2627.,  2644.,  5564.,  5600.,  5636.,  5672.,  8921.,  8978.,  9035.,  9092.,  9149.,  9206.,  9263.,  9320.,  9377.,  9434.,  9491.,  9548.,  9605.,  9662.,  9719.,  9776.,  9833.,  9890.,  9947., 10004.,  6992.,  7032.,  7072.,  7112.,  3717.,  3738.,  3759.,  3780.,  1690.,  1700.,  1710.,  1720.,  3589.,  3610.,  3631.,  3652.,  5701.,  5734.,  5767.,  5800.,  5833.,  5866.,  5899.,  5932.,  5965.,  5998.,  6031.,  6064.,  6097.,  6130.,  6163.,  6196.,  6229.,  6262.,  6295.,  6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   202.,   244.,   286.,   328.,   370.,   412.,   454.,   496.,   538.,   580.,   622.,   664.,   706.,   748.,   790.,   832.,   874.,   916.,   958.,  1000.,   665.,   694.,   723.,   752.,   375.,   390.,   405.,   420.,   393.,   422.,   451.,   480.,   932.,   992.,  1052.,  1112.,  1625.,  1718.,  1811.,  1904.,  1997.,  2090.,  2183.,  2276.,  2369.,  2462.,  2555.,  2648.,  2741.,  2834.,  2927.,  3020.,  3113.,  3206.,  3299.,  3392.,  2280.,  2344.,  2408.,  2472.,  1245.,  1278.,  1311.,  1344.,  1205.,  1234.,  1263.,  1292.,  2612.,  2672.,  2732.,  2792.,  4229.,  4322.,  4415.,  4508.,  4601.,  4694.,  4787.,  4880.,  4973.,  5066.,  5159.,  5252.,  5345.,  5438.,  5531.,  5624.,  5717.,  5810.,  5903.,  5996.,  4072.,  4136.,  4200.,  4264.,  2169.,  2202.,  2235.,  2268.,  2017.,  2046.,  2075.,  2104.,  4292.,  4352.,  4412.,  4472.,  6833.,  6926.,  7019.,  7112.,  7205.,  7298.,  7391.,  7484.,  7577.,  7670.,  7763.,  7856.,  7949.,  8042.,  8135.,  8228.,  8321.,  8414.,  8507.,  8600.,  5864.,  5928.,  5992.,  6056.,  3093.,  3126.,  3159.,  3192.,  2829.,  2858.,  2887.,  2916.,  5972.,  6032.,  6092.,  6152.,  9437.,  9530.,  9623.,  9716.,  9809.,  9902.,  9995., 10088., 10181., 10274., 10367., 10460., 10553., 10646., 10739., 10832., 10925., 11018., 11111., 11204.,  7656.,  7720.,  7784.,  7848.,  4017.,  4050.,  4083.,  4116.,  3641.,  3670.,  3699.,  3728.,  7652.,  7712.,  7772.,  7832., 12041., 12134., 12227., 12320., 12413., 12506., 12599., 12692., 12785., 12878., 12971., 13064., 13157., 13250., 13343., 13436., 13529., 13622., 13715., 13808.,  9448.,  9512.,  9576.,  9640.,  4941.,  4974.,  5007.,  5040.,  4453.,  4482.,  4511.,  4540.,  9332.,  9392.,  9452.,  9512., 14645., 14738., 14831., 14924., 15017., 15110., 15203., 15296., 15389., 15482., 15575., 15668., 15761., 15854., 15947., 16040., 16133., 16226., 16319., 16412., 11240., 11304., 11368., 11432.,  5865.,  5898.,  5931.,  5964.,  2704.,  2720.,  2736.,  2752.,  5641.,  5674.,  5707.,  5740.,  8815.,  8866.,  8917.,  8968.,  9019.,  9070.,  9121.,  9172.,  9223.,  9274.,  9325.,  9376.,  9427.,  9478.,  9529.,  9580.,  9631.,  9682.,  9733.,  9784.,  6683.,  6718.,  6753.,  6788.,  3474.,  3492.,  3510.,  3528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2264., 3176., 4088., 5000., 3344., 4444., 5544., 6644., 3132., 4404., 5676., 6948., 4380., 5808., 7236., 8664., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 2996., 4172., 5348., 6524., 2864., 3836., 4808., 5780., 2040., 2824., 3608., 4392., 2368., 3144., 3920., 4696., 2135., 3045., 3955., 4865., 3156., 4176., 5196., 6216., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 2864., 3836., 4808., 5780., 2063., 2877., 3691., 4505., 1912., 2592., 3272., 3952., 1424., 2032., 2640., 3248., 2168., 2848., 3528., 4208., 1912., 2696., 3480., 4264., 2832., 3752., 4672., 5592., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2040., 2824., 3608., 4392., 1912., 2592., 3272., 3952., 1680., 2288., 2896., 3504., 1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2264., 3176., 4088., 5000., 3344., 4444., 5544., 6644., 3132., 4404., 5676., 6948., 4380., 5808., 7236., 8664., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 2996., 4172., 5348., 6524., 2864., 3836., 4808., 5780., 2040., 2824., 3608., 4392., 2368., 3144., 3920., 4696., 2135., 3045., 3955., 4865., 3156., 4176., 5196., 6216., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 2864., 3836., 4808., 5780., 2063., 2877., 3691., 4505., 1912., 2592., 3272., 3952., 1424., 2032., 2640., 3248., 2168., 2848., 3528., 4208., 1912., 2696., 3480., 4264., 2832., 3752., 4672., 5592., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2040., 2824., 3608., 4392., 1912., 2592., 3272., 3952., 1680., 2288., 2896., 3504., 1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2264., 3176., 4088., 5000., 3344., 4444., 5544., 6644., 3132., 4404., 5676., 6948., 4380., 5808., 7236., 8664., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 2996., 4172., 5348., 6524., 2864., 3836., 4808., 5780., 2040., 2824., 3608., 4392., 2368., 3144., 3920., 4696., 2135., 3045., 3955., 4865., 3156., 4176., 5196., 6216., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 2864., 3836., 4808., 5780., 2063., 2877., 3691., 4505., 1912., 2592., 3272., 3952., 1424., 2032., 2640., 3248., 2168., 2848., 3528., 4208., 1912., 2696., 3480., 4264., 2832., 3752., 4672., 5592., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2040., 2824., 3608., 4392., 1912., 2592., 3272., 3952., 1680., 2288., 2896., 3504.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,   557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,   935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,   196.,   232.,   268.,   304.,   772.,   860.,   948.,  1036.,  1792.,  1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,  3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,  4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,  1204.,  1240.,  1276.,  1312.,  3236.,  3324.,  3412.,  3500.,  5776.,  5932.,  6088.,  6244.,  5504.,  5660.,  5816.,  5972.,  4720.,  4876.,  5032.,  5188.,  5344.,  5500.,  5656.,  5812.,  5968.,  6124.,  6280.,  6436.,  4764.,  4884.,  5004.,  5124.,  2796.,  2864.,  2932.,  3000.,  1828.,  1864.,  1900.,  1936.,  4420.,  4508.,  4596.,  4684.,  5920.,  6076.,  6232.,  6388.,  4112.,  4268.,  4424.,  4580.,  1792.,  1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,  3352.,  3508.,  2748.,  2868.,  2988.,  3108.,  1756.,  1824.,  1892.,  1960.,   916.,   952.,   988.,  1024.,  2532.,  2620.,  2708.,  2796.,  4912.,  5068.,  5224.,  5380.,  5536.,  5692.,  5848.,  6004.,  5776.,  5932.,  6088.,  6244.,  5504.,  5660.,  5816.,  5972.,  4720.,  4876.,  5032.,  5188.,  3804.,  3924.,  4044.,  4164.,  2252.,  2320.,  2388.,  2456.,  1540.,  1576.,  1612.,  1648.,  3716.,  3804.,  3892.,  3980.,  6592.,  6748.,  6904.,  7060.,  7216.,  7372.,  7528.,  7684.,  5920.,  6076.,  6232.,  6388.,  4112.,  4268.,  4424.,  4580.,  1792.,  1948.,  2104.,  2260.,  1788.,  1908.,  2028.,  2148.,  1212.,  1280.,  1348.,  1416.,   628.,   664.,   700.,   736.,  1828.,  1916.,  2004.,  2092.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,  4756.,  4912.,  5068.,  5224.,  5380.,  5536.,  5692.,  5848.,  6004.,  5776.,  5932.,  6088.,  6244.,  4252.,  4372.,  4492.,  4612.,  1708.,  1776.,  1844.,  1912.,  1223.,  1253.,  1283.,  1313.,  2892.,  2960.,  3028.,  3096.,  5039.,  5153.,  5267.,  5381.,  5495.,  5609.,  5723.,  5837.,  5951.,  6065.,  6179.,  6293.,  6407.,  6521.,  6635.,  6749.,  4943.,  5057.,  5171.,  5285.,  2824.,  2908.,  2992.,  3076.,    35.,    81.,   127.,   173.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   821.,  1007.,  1193.,  1379.,  1565.,  1751.,  1937.,  2123.,  2309.,  2495.,  2681.,  2867.,  3053.,  3239.,  3425.,  3611.,  3797.,  3983.,  4169.,  4355.,  2988.,  3120.,  3252.,  3384.,  1733.,  1803.,  1873.,  1943.,  1612.,  1744.,  1876.,  2008.,  3988.,  4268.,  4548.,  4828.,  7192.,  7636.,  8080.,  8524.,  8968.,  9412.,  9856., 10300., 10744., 11188., 11632., 12076., 12520., 12964., 13408., 13852., 14296., 14740., 15184., 15628., 10764., 11076., 11388., 11700.,  6020.,  6184.,  6348.,  6512.,  5308.,  5440.,  5572.,  5704., 11828., 12108., 12388., 12668., 16168., 16612., 17056., 17500., 13976., 14420., 14864., 15308., 11272., 11716., 12160., 12604., 13048., 13492., 13936., 14380., 14824., 15268., 15712., 16156., 11052., 11364., 11676., 11988.,  6132.,  6296.,  6460.,  6624.,  5548.,  5680.,  5812.,  5944., 12244., 12524., 12804., 13084., 15160., 15604., 16048., 16492., 11432., 11876., 12320., 12764.,  7192.,  7636.,  8080.,  8524.,  8968.,  9412.,  9856., 10300., 10744., 11188., 11632., 12076.,  8268.,  8580.,  8892.,  9204.,  4708.,  4872.,  5036.,  5200.,  4252.,  4384.,  4516.,  4648.,  9588.,  9868., 10148., 10428., 16072., 16516., 16960., 17404., 17848., 18292., 18736., 19180., 16168., 16612., 17056., 17500., 13976., 14420., 14864., 15308., 11272., 11716., 12160., 12604.,  8556.,  8868.,  9180.,  9492.,  4820.,  4984.,  5148.,  5312.,  4492.,  4624.,  4756.,  4888., 10004., 10284., 10564., 10844., 16600., 17044., 17488., 17932., 18376., 18820., 19264., 19708., 15160., 15604., 16048., 16492., 11432., 11876., 12320., 12764.,  7192.,  7636.,  8080.,  8524.,  5772.,  6084.,  6396.,  6708.,  3396.,  3560.,  3724.,  3888.,  3196.,  3328.,  3460.,  3592.,  7348.,  7628.,  7908.,  8188., 12520., 12964., 13408., 13852., 14296., 14740., 15184., 15628., 16072., 16516., 16960., 17404., 17848., 18292., 18736., 19180., 16168., 16612., 17056., 17500., 10540., 10852., 11164., 11476.,  3508.,  3672.,  3836.,  4000.,  3179.,  3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488., 11483., 11741., 11999., 12257., 12515., 12773., 13031., 13289., 13547., 13805., 14063., 14321., 14579., 14837., 15095., 15353., 10619., 10877., 11135., 11393.,  5776.,  5956.,  6136.,  6316.,    71.,   165.,   259.,   353.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1505.,  1835.,  2165.,  2495.,  2825.,  3155.,  3485.,  3815.,  4145.,  4475.,  4805.,  5135.,  5465.,  5795.,  6125.,  6455.,  6785.,  7115.,  7445.,  7775.,  5172.,  5400.,  5628.,  5856.,  2921.,  3039.,  3157.,  3275.,  3028.,  3256.,  3484.,  3712.,  7204.,  7676.,  8148.,  8620., 12592., 13324., 14056., 14788., 15520., 16252., 16984., 17716., 18448., 19180., 19912., 20644., 21376., 22108., 22840., 23572., 24304., 25036., 25768., 26500., 17820., 18324., 18828., 19332.,  9740., 10000., 10260., 10520.,  9412.,  9640.,  9868., 10096., 20420., 20892., 21364., 21836., 26560., 27292., 28024., 28756., 22448., 23180., 23912., 24644., 17824., 18556., 19288., 20020., 20752., 21484., 22216., 22948., 23680., 24412., 25144., 25876., 17340., 17844., 18348., 18852.,  9468.,  9728.,  9988., 10248.,  9268.,  9496.,  9724.,  9952., 20068., 20540., 21012., 21484., 24400., 25132., 25864., 26596., 18752., 19484., 20216., 20948., 12592., 13324., 14056., 14788., 15520., 16252., 16984., 17716., 18448., 19180., 19912., 20644., 13788., 14292., 14796., 15300.,  7660.,  7920.,  8180.,  8440.,  7588.,  7816.,  8044.,  8272., 16644., 17116., 17588., 18060., 27232., 27964., 28696., 29428., 30160., 30892., 31624., 32356., 26560., 27292., 28024., 28756., 22448., 23180., 23912., 24644., 17824., 18556., 19288., 20020., 13308., 13812., 14316., 14820.,  7388.,  7648.,  7908.,  8168.,  7444.,  7672.,  7900.,  8128., 16292., 16764., 17236., 17708., 26608., 27340., 28072., 28804., 29536., 30268., 31000., 31732., 24400., 25132., 25864., 26596., 18752., 19484., 20216., 20948., 12592., 13324., 14056., 14788.,  9756., 10260., 10764., 11268.,  5580.,  5840.,  6100.,  6360.,  5764.,  5992.,  6220.,  6448., 12868., 13340., 13812., 14284., 21376., 22108., 22840., 23572., 24304., 25036., 25768., 26500., 27232., 27964., 28696., 29428., 30160., 30892., 31624., 32356., 26560., 27292., 28024., 28756., 16828., 17332., 17836., 18340.,  5308.,  5568.,  5828.,  6088.,  5135.,  5261.,  5387.,  5513., 11100., 11360., 11620., 11880., 17927., 18329., 18731., 19133., 19535., 19937., 20339., 20741., 21143., 21545., 21947., 22349., 22751., 23153., 23555., 23957., 16295., 16697., 17099., 17501.,  8728.,  9004.,  9280.,  9556.,   107.,   249.,   391.,   533.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2700.,  6780., 10860., 14940.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2780.,  6988., 11196., 15404.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2700.,  6780., 10860., 14940.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2780.,  6988., 11196., 15404.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2700.,  6780., 10860., 14940.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2780.,  6988., 11196., 15404.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1108.,  1380.,  1652.,  1924.,  1784.,  2456.,  3128.,  3800.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  1780.,  2308.,  2836.,  3364.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1108.,  1380.,  1652.,  1924.,  1784.,  2456.,  3128.,  3800.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  1780.,  2308.,  2836.,  3364.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1108.,  1380.,  1652.,  1924.,  1784.,  2456.,  3128.,  3800.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2456.,  3384.,  4312.,  5240.,  1780.,  2308.,  2836.,  3364.,   150.,   382.,   614.,   846.,  1268.,  1796.,  2324.,  2852.,  1754.,  2642.,  3530.,  4418.,  2938.,  3826.,  4714.,  5602.,  1754.,  2642.,  3530.,  4418.,  2938.,  3826.,  4714.,  5602.,  1754.,  2642.,  3530.,  4418.,  1860.,  2516.,  3172.,  3828.,   230.,   590.,   950.,  1310.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,   500.,  1028.,  1556.,  2084.,    30.,    70.,   110.,   150.,  2036.,  2564.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  3480.,  4408.,  5336.,  6264.,   340.,   612.,   884.,  1156.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,  2036.,  2564.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  3480.,  4408.,  5336.,  6264.,   340.,   612.,   884.,  1156.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,  2036.,  2564.,  3092.,  3620.,  3128.,  4312.,  5496.,  6680.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  3480.,  4408.,  5336.,  6264.,   340.,   612.,   884.,  1156.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  2196.,  2980.,  3764.,  4548.,   270.,   694.,  1118.,  1542.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,   310.,   798.,  1286.,  1774.,  2292.,  2820.,  3348.,  3876.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7066.,  8487., 10041., 11734., 11523., 11248., 11261.,  9435.,  8080.,  6518.,  7024.,  7701.,  8478.,  9360.,  8624.,  7824.,  7536.,  5791.,  4780.,  3602.,  5476.,  5334.,  5274.,  5300.,  4726.,  5144.,  5530.,  4982.,  4392.,  3660.,  4012.,  5310.,  6734.,  7808.,  7702.,  7564.,  7394.,  6378.,  5212.,  3892.,  6232.,  7681.,  9282., 10336., 10134.,  9868.,  9538.,  7823.,  5894.,  3746.,  6606.,  7851.,  9259.,  9908.,  9531.,  8866.,  8137.,  7373.,  6378.,  5146.,  5926.,  7770.,  9805., 11910., 12431., 12440., 12385., 10792.,  8934.,  6804.,  7130.,  8970., 11007., 12896., 13193., 12754., 12251., 10366.,  8210.,  5776.,  6202.,  7415.,  8793., 10342., 10995., 10720., 10413.,  8827.,  7008.,  5974.,  4912.,  6469.,  8174., 10032., 10608., 11056., 11472., 10191.,  8700.,  6994.,  5476.,  6774.,  8186.,  9716., 10166., 10264., 10330.,  8886.,  7272.,  5484.,  2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7066.,  8487., 10041., 11734., 11523., 11248., 11261.,  9435.,  8080.,  6518.,  7024.,  7701.,  8478.,  9360.,  8624.,  7824.,  7536.,  5791.,  4780.,  3602.,  5476.,  5334.,  5274.,  5300.,  4726.,  5144.,  5530.,  4982.,  4392.,  3660.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,   13.,   41.,   86.,  150.,  186.,  222.,  258.,  239.,  191.,  112.,   55.,  139.,  254.,  402.,  438.,  474.,  510.,  449.,  345.,  196.,   97.,  237.,  422.,  654.,  690.,  726.,  762.,  659.,  499.,  280.,  139.,  335.,  590.,  906.,  942.,  978., 1014.,  869.,  653.,  364.,  181.,  433.,  758., 1158., 1194., 1230., 1266., 1079.,  807.,  448.,  223.,  531.,  926., 1410., 1446., 1482., 1518., 1289.,  961.,  532.,  215.,  478.,  790., 1152., 1178., 1204., 1230., 1006.,  727.,  392.,    9.,   28.,   58.,  100.,  142.,  184.,  226.,  196.,  149.,   84.,   85.,  201.,  350.,  534.,  634.,  734.,  834.,  695.,  511.,  280.,  239.,  523.,  854., 1234., 1334., 1434., 1534., 1241.,  889.,  476.,  393.,  845., 1358., 1934., 2034., 2134., 2234., 1787., 1267.,  672.,  547., 1167., 1862., 2634., 2734., 2834., 2934., 2333., 1645.,  868.,  701., 1489., 2366., 3334., 3434., 3534., 3634., 2879., 2023., 1064.,  855., 1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,  559., 1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503.,  784.,   17.,   52.,  106.,  180.,  254.,  328.,  402.,  340.,  253.,  140.,  157.,  361.,  614.,  918., 1082., 1246., 1410., 1151.,  831.,  448.,  423.,  907., 1454., 2066., 2230., 2394., 2558., 2033., 1433.,  756.,  689., 1453., 2294., 3214., 3378., 3542., 3706., 2915., 2035., 1064.,  955., 1999., 3134., 4362., 4526., 4690., 4854., 3797., 2637., 1372., 1221., 2545., 3974., 5510., 5674., 5838., 6002., 4679., 3239., 1680., 1487., 3091., 4814., 6658., 6822., 6986., 7150., 5561., 3841., 1988.,  903., 1870., 2902., 4000., 4090., 4180., 4270., 3310., 2279., 1176.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807., 19033., 19571., 19949., 15646., 11955.,  9476., 12992., 14416., 16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528.,  6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807., 19033., 19571., 19949., 15646., 11955.,  9476., 12992., 14416., 16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528.,  6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807., 19033., 19571., 19949., 15646., 11955.,  9476., 12992., 14416., 16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  124.,  196.,  268.,  340.,  365.,  322.,  203.,   76.,  264.,  580., 1040., 1312., 1584., 1856., 1744., 1408.,  832.,  384.,  992., 1744., 2624., 2544., 2336., 2608., 2284., 1752.,  996.,  596., 1400., 1820., 2352., 1760., 1040., 1312., 1288., 1072.,  648.,  296.,  784., 1480., 2400., 2576., 2624., 2544., 1828., 1416.,  812.,  508., 1192., 2068., 3152., 2816., 2352., 1760.,  832.,  736.,  464.,  208.,  576., 1120., 1856., 2128., 2400., 2576., 2204., 1560.,  628.,  409.,  942., 1607., 2412., 2612., 2812., 2404., 1801., 1018.,   47.,   53.,  182.,  395.,  700., 1028., 1356., 1684., 1469., 1122.,  635.,  620., 1480., 2596., 3984., 4768., 5552., 6336., 5296., 3904., 2144., 1824., 4000., 5424., 7104., 6512., 5792., 6576., 5452., 3992., 2180., 1908., 4152., 5116., 6320., 5216., 3984., 4768., 4072., 3056., 1704., 1480., 3280., 5416., 7904., 7568., 7104., 6512., 4228., 3144., 1740., 1564., 3432., 5620., 8144., 7296., 6320., 5216., 2848., 2208., 1264., 1136., 2560., 4288., 6336., 7120., 7904., 7568., 5884., 3800., 1300., 1097., 2382., 3863., 5548., 6004., 6460., 5284., 3801., 2074.,   95.,    5.,   22.,   59.,  124.,  196.,  268.,  340.,  365.,  322.,  203.,   76.,  264.,  580., 1040., 1312., 1584., 1856., 1744., 1408.,  832.,  384.,  992., 1744., 2624., 2544., 2336., 2608., 2284., 1752.,  996.,  596., 1400., 1820., 2352., 1760., 1040., 1312., 1288., 1072.,  648.,  296.,  784., 1480., 2400., 2576., 2624., 2544., 1828., 1416.,  812.,  508., 1192., 2068., 3152., 2816., 2352., 1760.,  832.,  736.,  464.,  208.,  576., 1120., 1856., 2128., 2400., 2576., 2204., 1560.,  628.,  409.,  942., 1607., 2412., 2612., 2812., 2404., 1801., 1018.,   47.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2532.,  3944.,  5900.,  8336.,  5200.,  5456.,  7568.,  7484.,  6280.,  3828.,  2196.,  5512.,  7708., 10448.,  8336.,  5200.,  5456.,  5708.,  4968.,  3108.,  1860.,  4712.,  8684., 11536., 10448.,  8336.,  5200.,  3932.,  3656.,  2388.,  1524.,  3912.,  7292., 11792., 11536., 10448.,  8336.,  4012.,  2344.,  1668.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2532.,  3944.,  5900.,  8336.,  5200.,  5456.,  7568.,  7484.,  6280.,  3828.,  2196.,  5512.,  7708., 10448.,  8336.,  5200.,  5456.,  5708.,  4968.,  3108.,  1860.,  4712.,  8684., 11536., 10448.,  8336.,  5200.,  3932.,  3656.,  2388.,  1524.,  3912.,  7292., 11792., 11536., 10448.,  8336.,  4012.,  2344.,  1668.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2532.,  3944.,  5900.,  8336.,  5200.,  5456.,  7568.,  7484.,  6280.,  3828.,  2196.,  5512.,  7708., 10448.,  8336.,  5200.,  5456.,  5708.,  4968.,  3108.,  1860.,  4712.,  8684., 11536., 10448.,  8336.,  5200.,  3932.,  3656.,  2388.,  1524.,  3912.,  7292., 11792., 11536., 10448.,  8336.,  4012.,  2344.,  1668.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  7840.,  8276.,  8750.,  9262.,  9856., 10450., 11522., 12204., 11602., 12262., 11554., 12192., 12050., 12698., 10516., 11062.,  8938.,  9408.,  7240.,  7628.,  6694.,  7040.,  7549.,  7946.,  8535.,  8988.,  8670.,  9184.,  7707.,  8192.,  7640.,  8096.,  7541.,  8000.,  5761.,  6142.,  4462.,  4792.,  3442.,  3716.,  5680.,  5960.,  5892.,  6220.,  6232.,  6612.,  6420.,  6856.,  5916.,  6348.,  6372.,  6800.,  6764.,  7188.,  6128.,  6476.,  5444.,  5744.,  4544.,  4792.,  3616.,  3896.,  4532.,  4892.,  5632.,  6076.,  5996.,  6496.,  5404.,  5900.,  5772.,  6264.,  6076.,  6564.,  5624.,  6036.,  4908.,  5240.,  4080.,  4328.,  5710.,  6096.,  7155.,  7650.,  8835.,  9444., 10408., 11104., 10513., 11212., 10522., 11192., 10403., 11044.,  8613.,  9150.,  6464.,  6892.,  4426.,  4740.,  7336.,  7740.,  8750.,  9270., 10420., 11062., 11558., 12296., 11306., 12054., 10510., 11236.,  9586., 10290.,  8296.,  8890.,  6614.,  7092.,  5328.,  5684.,  6814.,  7276.,  8769.,  9364., 11035., 11770., 12858., 13708., 13339., 14206., 12828., 13680., 12189., 13026., 10889., 11600.,  9130.,  9708.,  6994.,  7432.,  8046.,  8532., 10371., 10996., 13019., 13790., 14468., 15360., 14501., 15410., 14118., 15012., 13607., 14486., 11345., 12092.,  8612.,  9220.,  6834.,  7296.,  7200.,  7572.,  8686.,  9166., 10432., 11026., 12290., 13004., 13010., 13766., 12930., 13696., 12786., 13562., 10708., 11382.,  8234.,  8800.,  7112.,  7564.,  5542.,  5888.,  7085.,  7530.,  8855.,  9404., 10382., 11040., 10955., 11648., 11304., 12000., 11589., 12288.,  9729., 10334.,  7518.,  8024.,  6002.,  6404.,  5680.,  5960.,  7204.,  7564.,  8920.,  9364., 10036., 10568., 10524., 11084., 10340., 10896., 10092., 10644.,  8688.,  9164.,  7012.,  7408.,  5056.,  5368.,  2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  7840.,  8276.,  8750.,  9262.,  9856., 10450., 11522., 12204., 11602., 12262., 11554., 12192., 12050., 12698., 10516., 11062.,  8938.,  9408.,  7240.,  7628.,  6694.,  7040.,  7549.,  7946.,  8535.,  8988.,  8670.,  9184.,  7707.,  8192.,  7640.,  8096.,  7541.,  8000.,  5761.,  6142.,  4462.,  4792.,  3442.,  3716.,  5680.,  5960.,  5892.,  6220.,  6232.,  6612.,  6420.,  6856.,  5916.,  6348.,  6372.,  6800.,  6764.,  7188.,  6128.,  6476.,  5444.,  5744.,  4544.,  4792.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    30.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,    95.,   104.,    83.,    90.,    52.,    56.,    20.,    26.,    68.,    82.,   148.,   172.,   264.,   300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,   360.,   382.,   212.,   224.,   104.,   110.,   264.,   278.,   484.,   508.,   768.,   804.,   840.,   876.,   912.,   948.,   984.,  1020.,   868.,   898.,   668.,   690.,   380.,   392.,   188.,   194.,   460.,   474.,   820.,   844.,  1272.,  1308.,  1344.,  1380.,  1416.,  1452.,  1488.,  1524.,  1288.,  1318.,   976.,   998.,   548.,   560.,   272.,   278.,   656.,   670.,  1156.,  1180.,  1776.,  1812.,  1848.,  1884.,  1920.,  1956.,  1992.,  2028.,  1708.,  1738.,  1284.,  1306.,   716.,   728.,   356.,   362.,   852.,   866.,  1492.,  1516.,  2280.,  2316.,  2352.,  2388.,  2424.,  2460.,  2496.,  2532.,  2128.,  2158.,  1592.,  1614.,   884.,   896.,   440.,   446.,  1048.,  1062.,  1828.,  1852.,  2784.,  2820.,  2856.,  2892.,  2928.,  2964.,  3000.,  3036.,  2548.,  2578.,  1900.,  1922.,  1052.,  1064.,   425.,   430.,   945.,   956.,  1562.,  1580.,  2278.,  2304.,  2330.,  2356.,  2382.,  2408.,  2434.,  2460.,  1991.,  2012.,  1439.,  1454.,   776.,   784.,     9.,    18.,    37.,    56.,    86.,   116.,   158.,   200.,   242.,   284.,   326.,   368.,   410.,   452.,   359.,   392.,   275.,   298.,   156.,   168.,   148.,   170.,   356.,   402.,   628.,   700.,   968.,  1068.,  1168.,  1268.,  1368.,  1468.,  1568.,  1668.,  1312.,  1390.,   968.,  1022.,   532.,   560.,   456.,   478.,  1000.,  1046.,  1636.,  1708.,  2368.,  2468.,  2568.,  2668.,  2768.,  2868.,  2968.,  3068.,  2404.,  2482.,  1724.,  1778.,   924.,   952.,   764.,   786.,  1644.,  1690.,  2644.,  2716.,  3768.,  3868.,  3968.,  4068.,  4168.,  4268.,  4368.,  4468.,  3496.,  3574.,  2480.,  2534.,  1316.,  1344.,  1072.,  1094.,  2288.,  2334.,  3652.,  3724.,  5168.,  5268.,  5368.,  5468.,  5568.,  5668.,  5768.,  5868.,  4588.,  4666.,  3236.,  3290.,  1708.,  1736.,  1380.,  1402.,  2932.,  2978.,  4660.,  4732.,  6568.,  6668.,  6768.,  6868.,  6968.,  7068.,  7168.,  7268.,  5680.,  5758.,  3992.,  4046.,  2100.,  2128.,  1688.,  1710.,  3576.,  3622.,  5668.,  5740.,  7968.,  8068.,  8168.,  8268.,  8368.,  8468.,  8568.,  8668.,  6772.,  6850.,  4748.,  4802.,  2492.,  2520.,  1105.,  1118.,  2321.,  2348.,  3650.,  3692.,  5094.,  5152.,  5210.,  5268.,  5326.,  5384.,  5442.,  5500.,  4271.,  4316.,  2975.,  3006.,  1552.,  1568.,    17.,    34.,    69.,   104.,   158.,   212.,   286.,   360.,   434.,   508.,   582.,   656.,   730.,   804.,   623.,   680.,   467.,   506.,   260.,   280.,   276.,   314.,   644.,   722.,  1108.,  1228.,  1672.,  1836.,  2000.,  2164.,  2328.,  2492.,  2656.,  2820.,  2176.,  2302.,  1576.,  1662.,   852.,   896.,   808.,   846.,  1736.,  1814.,  2788.,  2908.,  3968.,  4132.,  4296.,  4460.,  4624.,  4788.,  4952.,  5116.,  3940.,  4066.,  2780.,  2866.,  1468.,  1512.,  1340.,  1378.,  2828.,  2906.,  4468.,  4588.,  6264.,  6428.,  6592.,  6756.,  6920.,  7084.,  7248.,  7412.,  5704.,  5830.,  3984.,  4070.,  2084.,  2128.,  1872.,  1910.,  3920.,  3998.,  6148.,  6268.,  8560.,  8724.,  8888.,  9052.,  9216.,  9380.,  9544.,  9708.,  7468.,  7594.,  5188.,  5274.,  2700.,  2744.,  2404.,  2442.,  5012.,  5090.,  7828.,  7948., 10856., 11020., 11184., 11348., 11512., 11676., 11840., 12004.,  9232.,  9358.,  6392.,  6478.,  3316.,  3360.,  2936.,  2974.,  6104.,  6182.,  9508.,  9628., 13152., 13316., 13480., 13644., 13808., 13972., 14136., 14300., 10996., 11122.,  7596.,  7682.,  3932.,  3976.,  1785.,  1806.,  3697.,  3740.,  5738.,  5804.,  7910.,  8000.,  8090.,  8180.,  8270.,  8360.,  8450.,  8540.,  6551.,  6620.,  4511.,  4558.,  2328.,  2352.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15040., 16688., 16902., 18890., 17512., 19888., 20166., 22978., 22322., 25214., 22846., 25690., 23210., 26134., 18072., 20576., 14474., 16638., 12096., 13872., 13904., 15352., 15997., 17715., 17476., 19504., 17525., 19903., 17751., 20153., 18649., 20947., 19131., 21453., 15436., 17400., 11235., 12929.,  7728.,  9112., 11680., 12864., 13252., 14684., 14960., 16672., 15972., 17996., 15884., 18004., 16980., 19068., 17564., 19620., 14928., 16640., 11772., 13236.,  7424.,  8608.,  6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15040., 16688., 16902., 18890., 17512., 19888., 20166., 22978., 22322., 25214., 22846., 25690., 23210., 26134., 18072., 20576., 14474., 16638., 12096., 13872., 13904., 15352., 15997., 17715., 17476., 19504., 17525., 19903., 17751., 20153., 18649., 20947., 19131., 21453., 15436., 17400., 11235., 12929.,  7728.,  9112., 11680., 12864., 13252., 14684., 14960., 16672., 15972., 17996., 15884., 18004., 16980., 19068., 17564., 19620., 14928., 16640., 11772., 13236.,  7424.,  8608.,  6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15040., 16688., 16902., 18890., 17512., 19888., 20166., 22978., 22322., 25214., 22846., 25690., 23210., 26134., 18072., 20576., 14474., 16638., 12096., 13872., 13904., 15352., 15997., 17715., 17476., 19504., 17525., 19903., 17751., 20153., 18649., 20947., 19131., 21453., 15436., 17400., 11235., 12929.,  7728.,  9112., 11680., 12864., 13252., 14684., 14960., 16672., 15972., 17996., 15884., 18004., 16980., 19068., 17564., 19620., 14928., 16640., 11772., 13236.,  7424.,  8608.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   448.,   552.,  1022.,  1202.,  1872.,  2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,  2688.,  2856.,  1594.,  1686.,   734.,   778.,  1904.,  2008.,  3350.,  3530.,  5040.,  5312.,  4880.,  5152.,  4464.,  4736.,  5008.,  5280.,  4394.,  4622.,  3376.,  3544.,  1922.,  2014.,  1158.,  1202.,  2720.,  2824.,  3502.,  3682.,  4496.,  4768.,  3312.,  3584.,  1872.,  2144.,  2416.,  2688.,  2402.,  2630.,  2016.,  2184.,  1226.,  1318.,   558.,   602.,  1488.,  1592.,  2822.,  3002.,  4592.,  4864.,  4944.,  5216.,  5040.,  5312.,  4880.,  5152.,  3482.,  3710.,  2704.,  2872.,  1554.,  1646.,   982.,  1026.,  2304.,  2408.,  3998.,  4178.,  6096.,  6368.,  5424.,  5696.,  4496.,  4768.,  3312.,  3584.,  1490.,  1718.,  1344.,  1512.,   858.,   950.,   382.,   426.,  1072.,  1176.,  2102.,  2282.,  3504.,  3776.,  4048.,  4320.,  4592.,  4864.,  4944.,  5216.,  4234.,  4462.,  2992.,  3160.,  1186.,  1278.,   789.,   827.,  1820.,  1904.,  3109.,  3247.,  4672.,  4872.,  5072.,  5272.,  5472.,  5672.,  4656.,  4856.,  3479.,  3641.,  1948.,  2064.,    47.,   109.,    53.,   123.,   252.,   400.,   613.,   847.,  1152.,  1480.,  1808.,  2136.,  2464.,  2792.,  3120.,  3448.,  2743.,  3001.,  2108.,  2288.,  1199.,  1293.,  1110.,  1282.,  2688.,  3048.,  4766.,  5330.,  7376.,  8160.,  8944.,  9728., 10512., 11296., 12080., 12864., 10130., 10742.,  7488.,  7912.,  4122.,  4342.,  3518.,  3690.,  7728.,  8088., 10422., 10986., 13616., 14400., 12432., 13216., 10992., 11776., 12560., 13344., 10442., 11054.,  7664.,  8088.,  4194.,  4414.,  3686.,  3858.,  8032.,  8392.,  9806., 10370., 12048., 12832.,  9840., 10624.,  7376.,  8160.,  8944.,  9728.,  7682.,  8294.,  5792.,  6216.,  3242.,  3462.,  2830.,  3002.,  6288.,  6648., 10406., 10970., 15216., 16000., 14544., 15328., 13616., 14400., 12432., 13216.,  7994.,  8606.,  5968.,  6392.,  3314.,  3534.,  2998.,  3170.,  6592.,  6952., 10814., 11378., 15696., 16480., 14000., 14784., 12048., 12832.,  9840., 10624.,  5234.,  5846.,  4096.,  4520.,  2362.,  2582.,  2142.,  2314.,  4848.,  5208.,  8150.,  8714., 12080., 12864., 13648., 14432., 15216., 16000., 14544., 15328., 11306., 11918.,  7280.,  7704.,  2434.,  2654.,  2117.,  2219.,  4604.,  4816.,  7477.,  7807., 10752., 11208., 11664., 12120., 12576., 13032., 10224., 10680.,  7335.,  7689.,  3964.,  4208.,    95.,   221.,   101.,   235.,   476.,   752.,  1141.,  1567.,  2112.,  2696.,  3280.,  3864.,  4448.,  5032.,  5616.,  6200.,  4807.,  5257.,  3612.,  3920.,  2015.,  2173.,  2102.,  2402.,  4928.,  5544.,  8510.,  9458., 12880., 14176., 15472., 16768., 18064., 19360., 20656., 21952., 16946., 17942., 12288., 12968.,  6650.,  6998.,  6302.,  6602., 13552., 14168., 17494., 18442., 22192., 23488., 19984., 21280., 17520., 18816., 20112., 21408., 16490., 17486., 11952., 12632.,  6466.,  6814.,  6214.,  6514., 13344., 13960., 16110., 17058., 19600., 20896., 16368., 17664., 12880., 14176., 15472., 16768., 12962., 13958.,  9568., 10248.,  5258.,  5606.,  5102.,  5402., 11088., 11704., 17990., 18938., 25840., 27136., 24144., 25440., 22192., 23488., 19984., 21280., 12506., 13502.,  9232.,  9912.,  5074.,  5422.,  5014.,  5314., 10880., 11496., 17630., 18578., 25296., 26592., 22576., 23872., 19600., 20896., 16368., 17664.,  8978.,  9974.,  6848.,  7528.,  3866.,  4214.,  3902.,  4202.,  8624.,  9240., 14198., 15146., 20656., 21952., 23248., 24544., 25840., 27136., 24144., 25440., 18378., 19374., 11568., 12248.,  3682.,  4030.,  3445.,  3611.,  7388.,  7728., 11845., 12367., 16832., 17544., 18256., 18968., 19680., 20392., 15792., 16504., 11191., 11737.,  5980.,  6352.,   143.,   333.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1484.,  1820.,  4104.,  4904.,  5748.,  7140.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,   812.,  1148.,  2504.,  3304.,  5332.,  6724.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  6724.,  8500.,  6472.,  7784.,  4316.,  5036.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1484.,  1820.,  4104.,  4904.,  5748.,  7140.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,   812.,  1148.,  2504.,  3304.,  5332.,  6724.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  6724.,  8500.,  6472.,  7784.,  4316.,  5036.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1484.,  1820.,  4104.,  4904.,  5748.,  7140.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  7396.,  9172.,  5704.,  7016.,  1852.,  2572.,   812.,  1148.,  2504.,  3304.,  5332.,  6724.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  7184.,  9296.,  6724.,  8500.,  6472.,  7784.,  4316.,  5036.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  7628.,  8064.,  8500.,  8936.,  8444.,  8956.,  9468.,  9980.,  8558.,  9152.,  9746., 10340.,  9306.,  9988., 10670., 11352.,  9744., 10404., 11064., 11724.,  9926., 10564., 11202., 11840., 10140., 10788., 11436., 12084.,  8230.,  8776.,  9322.,  9868.,  6846.,  7316.,  7786.,  8256.,  5132.,  5520.,  5908.,  6296.,  6770.,  7116.,  7462.,  7808.,  7181.,  7578.,  7975.,  8372.,  7497.,  7950.,  8403.,  8856.,  7002.,  7516.,  8030.,  8544.,  6577.,  7062.,  7547.,  8032.,  6920.,  7376.,  7832.,  8288.,  7167.,  7626.,  8085.,  8544.,  5893.,  6274.,  6655.,  7036.,  4626.,  4956.,  5286.,  5616.,  3474.,  3748.,  4022.,  4296.,  5608.,  5888.,  6168.,  6448.,  6208.,  6536.,  6864.,  7192.,  6388.,  6768.,  7148.,  7528.,  6452.,  6888.,  7324.,  7760.,  5960.,  6392.,  6824.,  7256.,  6364.,  6792.,  7220.,  7648.,  6640.,  7064.,  7488.,  7912.,  5764.,  6112.,  6460.,  6808.,  4828.,  5128.,  5428.,  5728.,  3528.,  3776.,  4024.,  4272.,  3944.,  4224.,  4504.,  4784.,  4800.,  5160.,  5520.,  5880.,  5956.,  6400.,  6844.,  7288.,  6628.,  7128.,  7628.,  8128.,  6088.,  6584.,  7080.,  7576.,  6444.,  6936.,  7428.,  7920.,  6672.,  7160.,  7648.,  8136.,  5620.,  6032.,  6444.,  6856.,  4556.,  4888.,  5220.,  5552.,  3176.,  3424.,  3672.,  3920.,  5786.,  6172.,  6558.,  6944.,  6903.,  7398.,  7893.,  8388.,  8421.,  9030.,  9639., 10248.,  9688., 10384., 11080., 11776.,  9383., 10082., 10781., 11480.,  8918.,  9588., 10258., 10928.,  9221.,  9862., 10503., 11144.,  7601.,  8138.,  8675.,  9212.,  6132.,  6560.,  6988.,  7416.,  4506.,  4820.,  5134.,  5448.,  6844.,  7248.,  7652.,  8056.,  8276.,  8796.,  9316.,  9836.,  9606., 10248., 10890., 11532., 10826., 11564., 12302., 13040., 10760., 11508., 12256., 13004.,  9638., 10364., 11090., 11816.,  9284.,  9988., 10692., 11396.,  8222.,  8816.,  9410., 10004.,  6542.,  7020.,  7498.,  7976.,  4956.,  5312.,  5668.,  6024.,  7342.,  7804.,  8266.,  8728.,  9551., 10146., 10741., 11336., 11415., 12150., 12885., 13620., 12834., 13684., 14534., 15384., 13011., 13878., 14745., 15612., 12260., 13112., 13964., 14816., 11253., 12090., 12927., 13764.,  9451., 10162., 10873., 11584.,  8274.,  8852.,  9430., 10008.,  6382.,  6820.,  7258.,  7696.,  7350.,  7836.,  8322.,  8808.,  9333.,  9958., 10583., 11208., 11699., 12470., 13241., 14012., 13452., 14344., 15236., 16128., 13757., 14666., 15575., 16484., 13262., 14156., 15050., 15944., 12511., 13390., 14269., 15148.,  9751., 10498., 11245., 11992.,  7912.,  8520.,  9128.,  9736.,  6678.,  7140.,  7602.,  8064.,  6412.,  6784.,  7156.,  7528.,  7836.,  8316.,  8796.,  9276.,  9198.,  9792., 10386., 10980., 10810., 11524., 12238., 12952., 11440., 12196., 12952., 13708., 11526., 12292., 13058., 13824., 11484., 12260., 13036., 13812.,  8998.,  9672., 10346., 11020.,  6878.,  7444.,  8010.,  8576.,  5836.,  6288.,  6740.,  7192.,  6002.,  6348.,  6694.,  7040.,  7741.,  8186.,  8631.,  9076.,  9065.,  9614., 10163., 10712., 10282., 10940., 11598., 12256., 10817., 11510., 12203., 12896., 10936., 11632., 12328., 13024., 10927., 11626., 12325., 13024.,  8997.,  9602., 10207., 10812.,  6466.,  6972.,  7478.,  7984.,  4370.,  4772.,  5174.,  5576.,  5096.,  5376.,  5656.,  5936.,  6240.,  6600.,  6960.,  7320.,  7604.,  8048.,  8492.,  8936.,  8468.,  9000.,  9532., 10064.,  8904.,  9464., 10024., 10584.,  9052.,  9608., 10164., 10720.,  9072.,  9624., 10176., 10728.,  7684.,  8160.,  8636.,  9112.,  5820.,  6216.,  6612.,  7008.,  3464.,  3776.,  4088.,  4400.,  2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  7628.,  8064.,  8500.,  8936.,  8444.,  8956.,  9468.,  9980.,  8558.,  9152.,  9746., 10340.,  9306.,  9988., 10670., 11352.,  9744., 10404., 11064., 11724.,  9926., 10564., 11202., 11840., 10140., 10788., 11436., 12084.,  8230.,  8776.,  9322.,  9868.,  6846.,  7316.,  7786.,  8256.,  5132.,  5520.,  5908.,  6296.,  6770.,  7116.,  7462.,  7808.,  7181.,  7578.,  7975.,  8372.,  7497.,  7950.,  8403.,  8856.,  7002.,  7516.,  8030.,  8544.,  6577.,  7062.,  7547.,  8032.,  6920.,  7376.,  7832.,  8288.,  7167.,  7626.,  8085.,  8544.,  5893.,  6274.,  6655.,  7036.,  4626.,  4956.,  5286.,  5616.,  3474.,  3748.,  4022.,  4296.,  5608.,  5888.,  6168.,  6448.,  6208.,  6536.,  6864.,  7192.,  6388.,  6768.,  7148.,  7528.,  6452.,  6888.,  7324.,  7760.,  5960.,  6392.,  6824.,  7256.,  6364.,  6792.,  7220.,  7648.,  6640.,  7064.,  7488.,  7912.,  5764.,  6112.,  6460.,  6808.,  4828.,  5128.,  5428.,  5728.,  3528.,  3776.,  4024.,  4272.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,   100.,   104.,   108.,   112.,    34.,    40.,    46.,    52.,   122.,   136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,   564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,   866.,   896.,   926.,   956.,   698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   202.,   208.,   214.,   220.,   514.,   528.,   542.,   556.,   944.,   968.,   992.,  1016.,  1500.,  1536.,  1572.,  1608.,  1644.,  1680.,  1716.,  1752.,  1788.,  1824.,  1860.,  1896.,  1932.,  1968.,  2004.,  2040.,  1706.,  1736.,  1766.,  1796.,  1314.,  1336.,  1358.,  1380.,   748.,   760.,   772.,   784.,   370.,   376.,   382.,   388.,   906.,   920.,   934.,   948.,  1616.,  1640.,  1664.,  1688.,  2508.,  2544.,  2580.,  2616.,  2652.,  2688.,  2724.,  2760.,  2796.,  2832.,  2868.,  2904.,  2940.,  2976.,  3012.,  3048.,  2546.,  2576.,  2606.,  2636.,  1930.,  1952.,  1974.,  1996.,  1084.,  1096.,  1108.,  1120.,   538.,   544.,   550.,   556.,  1298.,  1312.,  1326.,  1340.,  2288.,  2312.,  2336.,  2360.,  3516.,  3552.,  3588.,  3624.,  3660.,  3696.,  3732.,  3768.,  3804.,  3840.,  3876.,  3912.,  3948.,  3984.,  4020.,  4056.,  3386.,  3416.,  3446.,  3476.,  2546.,  2568.,  2590.,  2612.,  1420.,  1432.,  1444.,  1456.,   706.,   712.,   718.,   724.,  1690.,  1704.,  1718.,  1732.,  2960.,  2984.,  3008.,  3032.,  4524.,  4560.,  4596.,  4632.,  4668.,  4704.,  4740.,  4776.,  4812.,  4848.,  4884.,  4920.,  4956.,  4992.,  5028.,  5064.,  4226.,  4256.,  4286.,  4316.,  3162.,  3184.,  3206.,  3228.,  1756.,  1768.,  1780.,  1792.,   874.,   880.,   886.,   892.,  2082.,  2096.,  2110.,  2124.,  3632.,  3656.,  3680.,  3704.,  5532.,  5568.,  5604.,  5640.,  5676.,  5712.,  5748.,  5784.,  5820.,  5856.,  5892.,  5928.,  5964.,  6000.,  6036.,  6072.,  5066.,  5096.,  5126.,  5156.,  3778.,  3800.,  3822.,  3844.,  2092.,  2104.,  2116.,  2128.,   845.,   850.,   855.,   860.,  1879.,  1890.,  1901.,  1912.,  3106.,  3124.,  3142.,  3160.,  4530.,  4556.,  4582.,  4608.,  4634.,  4660.,  4686.,  4712.,  4738.,  4764.,  4790.,  4816.,  4842.,  4868.,  4894.,  4920.,  3961.,  3982.,  4003.,  4024.,  2863.,  2878.,  2893.,  2908.,  1544.,  1552.,  1560.,  1568.,     9.,    18.,    27.,    36.,    55.,    74.,    93.,   112.,   142.,   172.,   202.,   232.,   274.,   316.,   358.,   400.,   442.,   484.,   526.,   568.,   610.,   652.,   694.,   736.,   778.,   820.,   862.,   904.,   685.,   718.,   751.,   784.,   527.,   550.,   573.,   596.,   300.,   312.,   324.,   336.,   274.,   296.,   318.,   340.,   666.,   712.,   758.,   804.,  1184.,  1256.,  1328.,  1400.,  1836.,  1936.,  2036.,  2136.,  2236.,  2336.,  2436.,  2536.,  2636.,  2736.,  2836.,  2936.,  3036.,  3136.,  3236.,  3336.,  2546.,  2624.,  2702.,  2780.,  1882.,  1936.,  1990.,  2044.,  1036.,  1064.,  1092.,  1120.,   890.,   912.,   934.,   956.,  1954.,  2000.,  2046.,  2092.,  3200.,  3272.,  3344.,  3416.,  4636.,  4736.,  4836.,  4936.,  5036.,  5136.,  5236.,  5336.,  5436.,  5536.,  5636.,  5736.,  5836.,  5936.,  6036.,  6136.,  4730.,  4808.,  4886.,  4964.,  3394.,  3448.,  3502.,  3556.,  1820.,  1848.,  1876.,  1904.,  1506.,  1528.,  1550.,  1572.,  3242.,  3288.,  3334.,  3380.,  5216.,  5288.,  5360.,  5432.,  7436.,  7536.,  7636.,  7736.,  7836.,  7936.,  8036.,  8136.,  8236.,  8336.,  8436.,  8536.,  8636.,  8736.,  8836.,  8936.,  6914.,  6992.,  7070.,  7148.,  4906.,  4960.,  5014.,  5068.,  2604.,  2632.,  2660.,  2688.,  2122.,  2144.,  2166.,  2188.,  4530.,  4576.,  4622.,  4668.,  7232.,  7304.,  7376.,  7448., 10236., 10336., 10436., 10536., 10636., 10736., 10836., 10936., 11036., 11136., 11236., 11336., 11436., 11536., 11636., 11736.,  9098.,  9176.,  9254.,  9332.,  6418.,  6472.,  6526.,  6580.,  3388.,  3416.,  3444.,  3472.,  2738.,  2760.,  2782.,  2804.,  5818.,  5864.,  5910.,  5956.,  9248.,  9320.,  9392.,  9464., 13036., 13136., 13236., 13336., 13436., 13536., 13636., 13736., 13836., 13936., 14036., 14136., 14236., 14336., 14436., 14536., 11282., 11360., 11438., 11516.,  7930.,  7984.,  8038.,  8092.,  4172.,  4200.,  4228.,  4256.,  3354.,  3376.,  3398.,  3420.,  7106.,  7152.,  7198.,  7244., 11264., 11336., 11408., 11480., 15836., 15936., 16036., 16136., 16236., 16336., 16436., 16536., 16636., 16736., 16836., 16936., 17036., 17136., 17236., 17336., 13466., 13544., 13622., 13700.,  9442.,  9496.,  9550.,  9604.,  4956.,  4984.,  5012.,  5040.,  2197.,  2210.,  2223.,  2236.,  4615.,  4642.,  4669.,  4696.,  7258.,  7300.,  7342.,  7384., 10130., 10188., 10246., 10304., 10362., 10420., 10478., 10536., 10594., 10652., 10710., 10768., 10826., 10884., 10942., 11000.,  8497.,  8542.,  8587.,  8632.,  5919.,  5950.,  5981.,  6012.,  3088.,  3104.,  3120.,  3136.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   262.,   316.,   370.,   424.,   498.,   572.,   646.,   720.,   794.,   868.,   942.,  1016.,  1090.,  1164.,  1238.,  1312.,  1386.,  1460.,  1534.,  1608.,  1189.,  1246.,  1303.,  1360.,   895.,   934.,   973.,  1012.,   500.,   520.,   540.,   560.,   514.,   552.,   590.,   628.,  1210.,  1288.,  1366.,  1444.,  2096.,  2216.,  2336.,  2456.,  3180.,  3344.,  3508.,  3672.,  3836.,  4000.,  4164.,  4328.,  4492.,  4656.,  4820.,  4984.,  5148.,  5312.,  5476.,  5640.,  4226.,  4352.,  4478.,  4604.,  3066.,  3152.,  3238.,  3324.,  1660.,  1704.,  1748.,  1792.,  1578.,  1616.,  1654.,  1692.,  3394.,  3472.,  3550.,  3628.,  5456.,  5576.,  5696.,  5816.,  7772.,  7936.,  8100.,  8264.,  8428.,  8592.,  8756.,  8920.,  9084.,  9248.,  9412.,  9576.,  9740.,  9904., 10068., 10232.,  7754.,  7880.,  8006.,  8132.,  5474.,  5560.,  5646.,  5732.,  2892.,  2936.,  2980.,  3024.,  2642.,  2680.,  2718.,  2756.,  5578.,  5656.,  5734.,  5812.,  8816.,  8936.,  9056.,  9176., 12364., 12528., 12692., 12856., 13020., 13184., 13348., 13512., 13676., 13840., 14004., 14168., 14332., 14496., 14660., 14824., 11282., 11408., 11534., 11660.,  7882.,  7968.,  8054.,  8140.,  4124.,  4168.,  4212.,  4256.,  3706.,  3744.,  3782.,  3820.,  7762.,  7840.,  7918.,  7996., 12176., 12296., 12416., 12536., 16956., 17120., 17284., 17448., 17612., 17776., 17940., 18104., 18268., 18432., 18596., 18760., 18924., 19088., 19252., 19416., 14810., 14936., 15062., 15188., 10290., 10376., 10462., 10548.,  5356.,  5400.,  5444.,  5488.,  4770.,  4808.,  4846.,  4884.,  9946., 10024., 10102., 10180., 15536., 15656., 15776., 15896., 21548., 21712., 21876., 22040., 22204., 22368., 22532., 22696., 22860., 23024., 23188., 23352., 23516., 23680., 23844., 24008., 18338., 18464., 18590., 18716., 12698., 12784., 12870., 12956.,  6588.,  6632.,  6676.,  6720.,  5834.,  5872.,  5910.,  5948., 12130., 12208., 12286., 12364., 18896., 19016., 19136., 19256., 26140., 26304., 26468., 26632., 26796., 26960., 27124., 27288., 27452., 27616., 27780., 27944., 28108., 28272., 28436., 28600., 21866., 21992., 22118., 22244., 15106., 15192., 15278., 15364.,  7820.,  7864.,  7908.,  7952.,  3549.,  3570.,  3591.,  3612.,  7351.,  7394.,  7437.,  7480., 11410., 11476., 11542., 11608., 15730., 15820., 15910., 16000., 16090., 16180., 16270., 16360., 16450., 16540., 16630., 16720., 16810., 16900., 16990., 17080., 13033., 13102., 13171., 13240.,  8975.,  9022.,  9069.,  9116.,  4632.,  4656.,  4680.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2432., 3312., 4192., 5072., 2938., 3966., 4994., 6022., 3384., 4608., 5832., 7056., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3384., 4608., 5832., 7056., 3070., 4146., 5222., 6298., 2432., 3312., 4192., 5072., 1848., 2528., 3208., 3888., 2197., 3019., 3841., 4663., 2728., 3732., 4736., 5740., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3000., 4068., 5136., 6204., 2403., 3329., 4255., 5181., 2088., 2832., 3576., 4320., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2432., 3312., 4192., 5072., 2938., 3966., 4994., 6022., 3384., 4608., 5832., 7056., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3384., 4608., 5832., 7056., 3070., 4146., 5222., 6298., 2432., 3312., 4192., 5072., 1848., 2528., 3208., 3888., 2197., 3019., 3841., 4663., 2728., 3732., 4736., 5740., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3000., 4068., 5136., 6204., 2403., 3329., 4255., 5181., 2088., 2832., 3576., 4320., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2432., 3312., 4192., 5072., 2938., 3966., 4994., 6022., 3384., 4608., 5832., 7056., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3384., 4608., 5832., 7056., 3070., 4146., 5222., 6298., 2432., 3312., 4192., 5072., 1848., 2528., 3208., 3888., 2197., 3019., 3841., 4663., 2728., 3732., 4736., 5740., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3000., 4068., 5136., 6204., 2403., 3329., 4255., 5181., 2088., 2832., 3576., 4320., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,   760.,   832.,   904.,   976.,  1048.,  1120.,  1192.,  1264.,  1336.,  1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,   743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   624.,   728.,   832.,   936.,  1266.,  1446.,  1626.,  1806.,  2192.,  2464.,  2736.,  3008.,  2320.,  2592.,  2864.,  3136.,  3408.,  3680.,  3952.,  4224.,  4496.,  4768.,  5040.,  5312.,  4342.,  4570.,  4798.,  5026.,  3584.,  3752.,  3920.,  4088.,  2158.,  2250.,  2342.,  2434.,  1242.,  1286.,  1330.,  1374.,  1872.,  1976.,  2080.,  2184.,  2722.,  2902.,  3082.,  3262.,  3792.,  4064.,  4336.,  4608.,  2192.,  2464.,  2736.,  3008.,  2320.,  2592.,  2864.,  3136.,  3408.,  3680.,  3952.,  4224.,  3430.,  3658.,  3886.,  4114.,  2912.,  3080.,  3248.,  3416.,  1790.,  1882.,  1974.,  2066.,  1066.,  1110.,  1154.,  1198.,  2672.,  2776.,  2880.,  2984.,  3666.,  3846.,  4026.,  4206.,  4880.,  5152.,  5424.,  5696.,  3792.,  4064.,  4336.,  4608.,  2192.,  2464.,  2736.,  3008.,  2320.,  2592.,  2864.,  3136.,  2518.,  2746.,  2974.,  3202.,  2240.,  2408.,  2576.,  2744.,  1422.,  1514.,  1606.,  1698.,   890.,   934.,   978.,  1022.,  2256.,  2360.,  2464.,  2568.,  4162.,  4342.,  4522.,  4702.,  5456.,  5728.,  6000.,  6272.,  4880.,  5152.,  5424.,  5696.,  3792.,  4064.,  4336.,  4608.,  2192.,  2464.,  2736.,  3008.,  1606.,  1834.,  2062.,  2290.,  1568.,  1736.,  1904.,  2072.,  1054.,  1146.,  1238.,  1330.,   714.,   758.,   802.,   846.,  1840.,  1944.,  2048.,  2152.,  3442.,  3622.,  3802.,  3982.,  5584.,  5856.,  6128.,  6400.,  5456.,  5728.,  6000.,  6272.,  4880.,  5152.,  5424.,  5696.,  3792.,  4064.,  4336.,  4608.,  1654.,  1882.,  2110.,  2338.,   896.,  1064.,  1232.,  1400.,   686.,   778.,   870.,   962.,   538.,   582.,   626.,   670.,  1424.,  1528.,  1632.,  1736.,  2722.,  2902.,  3082.,  3262.,  4496.,  4768.,  5040.,  5312.,  5584.,  5856.,  6128.,  6400.,  5456.,  5728.,  6000.,  6272.,  4880.,  5152.,  5424.,  5696.,  3430.,  3658.,  3886.,  4114.,  1184.,  1352.,  1520.,  1688.,   318.,   410.,   502.,   594.,   333.,   371.,   409.,   447.,   888.,   972.,  1056.,  1140.,  1697.,  1835.,  1973.,  2111.,  2792.,  2992.,  3192.,  3392.,  3592.,  3792.,  3992.,  4192.,  4392.,  4592.,  4792.,  4992.,  3976.,  4176.,  4376.,  4576.,  3123.,  3285.,  3447.,  3609.,  1824.,  1940.,  2056.,  2172.,    47.,   109.,   171.,   233.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,  1049.,  1283.,  1517.,  1751.,  2056.,  2384.,  2712.,  3040.,  3368.,  3696.,  4024.,  4352.,  4680.,  5008.,  5336.,  5664.,  5992.,  6320.,  6648.,  6976.,  5291.,  5549.,  5807.,  6065.,  4080.,  4260.,  4440.,  4620.,  2327.,  2421.,  2515.,  2609.,  2090.,  2262.,  2434.,  2606.,  2864.,  3224.,  3584.,  3944.,  4370.,  4934.,  5498.,  6062.,  6672.,  7456.,  8240.,  9024.,  6800.,  7584.,  8368.,  9152.,  9936., 10720., 11504., 12288., 13072., 13856., 14640., 15424., 11542., 12154., 12766., 13378.,  8896.,  9320.,  9744., 10168.,  5070.,  5290.,  5510.,  5730.,  4666.,  4838.,  5010.,  5182.,  7184.,  7544.,  7904.,  8264.,  8386.,  8950.,  9514., 10078., 10320., 11104., 11888., 12672.,  6672.,  7456.,  8240.,  9024.,  6800.,  7584.,  8368.,  9152.,  9936., 10720., 11504., 12288.,  9094.,  9706., 10318., 10930.,  7200.,  7624.,  8048.,  8472.,  4190.,  4410.,  4630.,  4850.,  3978.,  4150.,  4322.,  4494.,  9008.,  9368.,  9728., 10088., 11890., 12454., 13018., 13582., 13456., 14240., 15024., 15808., 10320., 11104., 11888., 12672.,  6672.,  7456.,  8240.,  9024.,  6800.,  7584.,  8368.,  9152.,  6646.,  7258.,  7870.,  8482.,  5504.,  5928.,  6352.,  6776.,  3310.,  3530.,  3750.,  3970.,  3290.,  3462.,  3634.,  3806.,  7568.,  7928.,  8288.,  8648., 12898., 13462., 14026., 14590., 16080., 16864., 17648., 18432., 13456., 14240., 15024., 15808., 10320., 11104., 11888., 12672.,  6672.,  7456.,  8240.,  9024.,  4198.,  4810.,  5422.,  6034.,  3808.,  4232.,  4656.,  5080.,  2430.,  2650.,  2870.,  3090.,  2602.,  2774.,  2946.,  3118.,  6128.,  6488.,  6848.,  7208., 10642., 11206., 11770., 12334., 16208., 16992., 17776., 18560., 16080., 16864., 17648., 18432., 13456., 14240., 15024., 15808., 10320., 11104., 11888., 12672.,  4758.,  5370.,  5982.,  6594.,  2112.,  2536.,  2960.,  3384.,  1550.,  1770.,  1990.,  2210.,  1914.,  2086.,  2258.,  2430.,  4688.,  5048.,  5408.,  5768.,  8386.,  8950.,  9514., 10078., 13072., 13856., 14640., 15424., 16208., 16992., 17776., 18560., 16080., 16864., 17648., 18432., 13456., 14240., 15024., 15808.,  9094.,  9706., 10318., 10930.,  3424.,  3848.,  4272.,  4696.,   670.,   890.,  1110.,  1330.,   893.,   995.,  1097.,  1199.,  2264.,  2476.,  2688.,  2900.,  4145.,  4475.,  4805.,  5135.,  6568.,  7024.,  7480.,  7936.,  8392.,  8848.,  9304.,  9760., 10216., 10672., 11128., 11584.,  8776.,  9232.,  9688., 10144.,  6595.,  6949.,  7303.,  7657.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.,   101.,   235.,   369.,   503.,   744.,  1020.,  1296.,  1572.,  1961.,  2387.,  2813.,  3239.,  3784.,  4368.,  4952.,  5536.,  6120.,  6704.,  7288.,  7872.,  8456.,  9040.,  9624., 10208., 10792., 11376., 11960., 12544.,  9275.,  9725., 10175., 10625.,  6992.,  7300.,  7608.,  7916.,  3911.,  4069.,  4227.,  4385.,  3978.,  4278.,  4578.,  4878.,  5104.,  5720.,  6336.,  6952.,  7474.,  8422.,  9370., 10318., 11152., 12448., 13744., 15040., 11280., 12576., 13872., 15168., 16464., 17760., 19056., 20352., 21648., 22944., 24240., 25536., 18742., 19738., 20734., 21730., 14208., 14888., 15568., 16248.,  7982.,  8330.,  8678.,  9026.,  8090.,  8390.,  8690.,  8990., 12496., 13112., 13728., 14344., 14050., 14998., 15946., 16894., 16848., 18144., 19440., 20736., 11152., 12448., 13744., 15040., 11280., 12576., 13872., 15168., 16464., 17760., 19056., 20352., 14758., 15754., 16750., 17746., 11488., 12168., 12848., 13528.,  6590.,  6938.,  7286.,  7634.,  6890.,  7190.,  7490.,  7790., 15344., 15960., 16576., 17192., 20114., 21062., 22010., 22958., 22032., 23328., 24624., 25920., 16848., 18144., 19440., 20736., 11152., 12448., 13744., 15040., 11280., 12576., 13872., 15168., 10774., 11770., 12766., 13762.,  8768.,  9448., 10128., 10808.,  5198.,  5546.,  5894.,  6242.,  5690.,  5990.,  6290.,  6590., 12880., 13496., 14112., 14728., 21634., 22582., 23530., 24478., 26704., 28000., 29296., 30592., 22032., 23328., 24624., 25920., 16848., 18144., 19440., 20736., 11152., 12448., 13744., 15040.,  6790.,  7786.,  8782.,  9778.,  6048.,  6728.,  7408.,  8088.,  3806.,  4154.,  4502.,  4850.,  4490.,  4790.,  5090.,  5390., 10416., 11032., 11648., 12264., 17842., 18790., 19738., 20686., 26832., 28128., 29424., 30720., 26704., 28000., 29296., 30592., 22032., 23328., 24624., 25920., 16848., 18144., 19440., 20736.,  7862.,  8858.,  9854., 10850.,  3328.,  4008.,  4688.,  5368.,  2414.,  2762.,  3110.,  3458.,  3290.,  3590.,  3890.,  4190.,  7952.,  8568.,  9184.,  9800., 14050., 14998., 15946., 16894., 21648., 22944., 24240., 25536., 26832., 28128., 29424., 30720., 26704., 28000., 29296., 30592., 22032., 23328., 24624., 25920., 14758., 15754., 16750., 17746.,  5664.,  6344.,  7024.,  7704.,  1022.,  1370.,  1718.,  2066.,  1453.,  1619.,  1785.,  1951.,  3640.,  3980.,  4320.,  4660.,  6593.,  7115.,  7637.,  8159., 10344., 11056., 11768., 12480., 13192., 13904., 14616., 15328., 16040., 16752., 17464., 18176., 13576., 14288., 15000., 15712., 10067., 10613., 11159., 11705.,  5600.,  5972.,  6344.,  6716.,   143.,   333.,   523.,   713.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6214.,  7927.,  9799., 11836., 12489., 11133.,  9562.,  7770.,  5244.,  6371.,  7620.,  8996.,  9572.,  8395.,  7044.,  5514.,  4380.,  4990.,  5702.,  6520.,  6970.,  5978.,  4836.,  3540.,  3220.,  4290.,  5474.,  6776.,  7182.,  6566.,  5820.,  4940.,  4944.,  6257.,  7694.,  9260.,  9794.,  8701.,  7432.,  5982.,  5698.,  7001.,  8453., 10060., 10643.,  9411.,  7974.,  6326.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5638.,  6911.,  8327.,  9892., 10545.,  9309.,  7874.,  6234.,  5068.,  5915.,  6892.,  8004.,  8580.,  7459.,  6156.,  4666.,  2780.,  3758.,  4838.,  6024.,  6474.,  5882.,  5140.,  4244.,  3668.,  4850.,  6146.,  7560.,  7966.,  7238.,  6380.,  5388.,  5472.,  6681.,  8022.,  9500., 10034.,  8821.,  7424.,  5838.,  5506.,  6545.,  7749.,  9124.,  9707.,  8547.,  7166.,  5558.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  5766.,  6855.,  8103.,  9516., 10169.,  8925.,  7466.,  5786.,  3996.,  5363.,  6868.,  8516.,  9092.,  8251.,  7220.,  5994.,  4380.,  5502.,  6726.,  8056.,  8506.,  7514.,  6372.,  5076.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   16.,   19.,   14.,   11.,   35.,   45.,   55.,   65.,   75.,   85.,   56.,   44.,  121.,  142.,  163.,  184.,  205.,  226.,  140.,  107.,  268.,  289.,  310.,  331.,  352.,  373.,  224.,  170.,  415.,  436.,  457.,  478.,  499.,  520.,  308.,  233.,  562.,  583.,  604.,  625.,  646.,  667.,  392.,  296.,  709.,  730.,  751.,  772.,  793.,  814.,  476.,  309.,  705.,  723.,  741.,  759.,  777.,  795.,  448.,  215.,  478.,  489.,  500.,  511.,  522.,  533.,  294.,    7.,   22.,   37.,   52.,   67.,   82.,   97.,   56.,   65.,  155.,  189.,  223.,  257.,  291.,  325.,  182.,  188.,  427.,  484.,  541.,  598.,  655.,  712.,  392.,  377.,  826.,  883.,  940.,  997., 1054., 1111.,  602.,  566., 1225., 1282., 1339., 1396., 1453., 1510.,  812.,  755., 1624., 1681., 1738., 1795., 1852., 1909., 1022.,  944., 2023., 2080., 2137., 2194., 2251., 2308., 1232.,  783., 1665., 1707., 1749., 1791., 1833., 1875.,  994.,  473., 1000., 1023., 1046., 1069., 1092., 1115.,  588.,   13.,   40.,   67.,   94.,  121.,  148.,  175.,   98.,  119.,  275.,  333.,  391.,  449.,  507.,  565.,  308.,  332.,  733.,  826.,  919., 1012., 1105., 1198.,  644.,  647., 1384., 1477., 1570., 1663., 1756., 1849.,  980.,  962., 2035., 2128., 2221., 2314., 2407., 2500., 1316., 1277., 2686., 2779., 2872., 2965., 3058., 3151., 1652., 1592., 3337., 3430., 3523., 3616., 3709., 3802., 1988., 1257., 2625., 2691., 2757., 2823., 2889., 2955., 1540.,  731., 1522., 1557., 1592., 1627., 1662., 1697.,  882.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128., 18700., 15312.,  6668.,  9517., 12810., 16491., 18853., 17262., 14811., 12580.,  9440., 11880., 14736., 16920., 18928., 17120., 14640., 11456.,  6272.,  8688., 11488., 14704., 16360., 15120., 13240., 11808.,  9372., 11401., 13890., 16879., 19033., 16454., 12999., 10772.,  8944., 12532., 16648., 21340., 23872., 22112., 19376., 16736., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.,  4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128., 18700., 15312.,  6668.,  9517., 12810., 16491., 18853., 17262., 14811., 12580.,  9440., 11880., 14736., 16920., 18928., 17120., 14640., 11456.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    42.,    62.,    82.,   102.,   122.,    95.,    64.,   224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,   986.,  1142.,  1298.,  1454.,  1610.,  1015.,   751.,  1922.,  2078.,  2234.,  2390.,  2546.,  2702.,  1645.,  1213.,  3014.,  3170.,  3326.,  3482.,  3638.,  3794.,  2275.,  1675.,  4106.,  4262.,  4418.,  4574.,  4730.,  4886.,  2905.,  2137.,  5198.,  5354.,  5510.,  5666.,  5822.,  5978.,  3535.,  2300.,  5288.,  5424.,  5560.,  5696.,  5832.,  5968.,  3384.,  1625.,  3630.,  3714.,  3798.,  3882.,  3966.,  4050.,  2243.,    41.,   142.,   258.,   374.,   490.,   606.,   722.,   419.,   472.,  1136.,  1400.,  1664.,  1928.,  2192.,  2456.,  1380.,  1405.,  3206.,  3650.,  4094.,  4538.,  4982.,  5426.,  2995.,  2875.,  6314.,  6758.,  7202.,  7646.,  8090.,  8534.,  4633.,  4345.,  9422.,  9866., 10310., 10754., 11198., 11642.,  6271.,  5815., 12530., 12974., 13418., 13862., 14306., 14750.,  7909.,  7285., 15638., 16082., 16526., 16970., 17414., 17858.,  9547.,  6068., 12920., 13248., 13576., 13904., 14232., 14560.,  7728.,  3677.,  7782.,  7962.,  8142.,  8322.,  8502.,  8682.,  4583.,    77.,   262.,   474.,   686.,   898.,  1110.,  1322.,   743.,   880.,  2048.,  2504.,  2960.,  3416.,  3872.,  4328.,  2364.,  2521.,  5582.,  6314.,  7046.,  7778.,  8510.,  9242.,  4975.,  4999., 10706., 11438., 12170., 12902., 13634., 14366.,  7621.,  7477., 15830., 16562., 17294., 18026., 18758., 19490., 10267.,  9955., 20954., 21686., 22418., 23150., 23882., 24614., 12913., 12433., 26078., 26810., 27542., 28274., 29006., 29738., 15559.,  9836., 20552., 21072., 21592., 22112., 22632., 23152., 12072.,  5729., 11934., 12210., 12486., 12762., 13038., 13314.,  6923.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1256.,   968.,  1512.,  2056.,  2600.,  3144.,  2132.,  1746.,  3604.,  2628.,  2996.,  4196.,  5396.,  6596.,  4186.,  3610.,  6628.,  3604.,  2628.,  2996.,  4196.,  5396.,  3490.,  3106.,  7796.,  6628.,  3604.,  2628.,  2996.,  4196.,  2794.,  2602.,  6596.,  7796.,  6628.,  3604.,  2628.,  2996.,  2098.,  2098.,  5396.,  6596.,  7796.,  6628.,  3604.,  2628.,  1402.,  1524.,  3912.,  4968.,  6024.,  7080.,  5768.,  2600.,   740.,   782.,  2028.,  2684.,  3340.,  3996.,  4652.,  2940.,   230.,   270.,  1004.,  1916.,  2828.,  3740.,  4652.,  5564.,  3238.,  3268.,  4136.,  1288.,  2344.,  3400.,  4456.,  5512.,  3444.,  3234.,  7732.,  4964.,  2516.,  3972.,  5428.,  6884.,  4394.,  3946.,  8452.,  7732.,  4964.,  2516.,  3972.,  5428.,  3570.,  3314.,  8340.,  8452.,  7732.,  4964.,  2516.,  3972.,  2746.,  2682.,  6884.,  8340.,  8452.,  7732.,  4964.,  2516.,  1922.,  2050.,  5428.,  6884.,  8340.,  8452.,  7732.,  4964.,  1098.,   724.,  2056.,  2600.,  3144.,  3688.,  2888.,  1256.,   452.,   446.,  1228.,  1628.,  2028.,  2428.,  2828.,  1884.,   150.,   190.,   716.,  1372.,  2028.,  2684.,  3340.,  3996.,  2390.,  2532.,  3944.,  2632.,  4200.,  5768.,  7336.,  8904.,  5268.,  5234.,  8788.,  4228.,  3060.,  4772.,  6484.,  8196.,  5114.,  4794., 11300.,  8788.,  4228.,  3060.,  4772.,  6484.,  4162.,  4034.,  9908., 11300.,  8788.,  4228.,  3060.,  4772.,  3210.,  3274.,  8196.,  9908., 11300.,  8788.,  4228.,  3060.,  2258.,  2514.,  6484.,  8196.,  9908., 11300.,  8788.,  4228.,  1306.,  1268.,  3400.,  4456.,  5512.,  6568.,  7304.,  4136.,   484.,   110.,   428.,   572.,   716.,   860.,  1004.,   828.,    70.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6736.,  7084.,  8396.,  8846., 10304., 10862., 11672., 12344., 12392., 13106., 10564., 11194.,  8376.,  8916.,  6872.,  7316.,  4390.,  4632.,  5419.,  5734.,  6623.,  7016.,  7980.,  8456.,  8553.,  9064.,  7569.,  8022.,  6306.,  6696.,  5042.,  5364.,  4816.,  5048.,  5680.,  5980.,  6712.,  7084.,  7632.,  8080.,  8120.,  8596.,  7152.,  7572.,  5952.,  6312.,  4512.,  4808.,  3744.,  3976.,  4792.,  5092.,  6000.,  6372.,  7376.,  7824.,  7776.,  8252.,  6760.,  7180.,  5520.,  5880.,  4848.,  5144.,  4270.,  4544.,  5151.,  5506.,  6211.,  6652.,  7460.,  7992.,  7981.,  8548.,  6693.,  7194.,  5122.,  5552.,  4314.,  4668.,  5192.,  5540.,  6544.,  6994.,  8124.,  8682.,  9944., 10616., 10556., 11270.,  9520., 10150.,  8144.,  8684.,  6704.,  7148.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5136.,  5420.,  6444.,  6814.,  7968.,  8430.,  9688., 10248., 10408., 11010.,  9316.,  9850.,  7896.,  8356.,  6424.,  6804.,  5542.,  5816.,  6515.,  6870.,  7679.,  8120.,  8756.,  9288.,  9329.,  9896.,  7953.,  8454.,  6282.,  6712.,  4850.,  5204.,  3664.,  3896.,  5008.,  5308.,  6520.,  6892.,  7664.,  8112.,  8152.,  8628.,  7472.,  7892.,  6560.,  6920.,  5408.,  5704.,  3104.,  3336.,  3864.,  4164.,  4784.,  5156.,  5872.,  6320.,  6272.,  6748.,  5288.,  5708.,  4080.,  4440.,  3696.,  3992.,  4782.,  5088.,  5959.,  6354.,  7331.,  7820.,  8908.,  9496.,  9429., 10052.,  8421.,  8970.,  7114.,  7584.,  5786.,  6172.,  6280.,  6692.,  7600.,  8130.,  9180.,  9834., 11032., 11816., 11644., 12470., 10256., 10982.,  8496.,  9116.,  6896.,  7404.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  6864.,  7212.,  8300.,  8750.,  9984., 10542., 11640., 12312., 12360., 13074., 10756., 11386.,  8792.,  9332.,  7000.,  7444.,  4902.,  5208.,  6395.,  6790.,  8095.,  8584.,  9468., 10056., 10041., 10664.,  8721.,  9270.,  7090.,  7560.,  5938.,  6324.,  4816.,  5048.,  6192.,  6492.,  7736.,  8108.,  8656.,  9104.,  9144.,  9620.,  8176.,  8596.,  6976.,  7336.,  5536.,  5832.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    2.,    5.,    8.,   11.,   14.,   17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,   80.,   90.,  100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,  106.,  112.,   79.,   88.,  221.,  242.,  263.,  284.,  305.,  326.,  347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  205.,  214.,  515.,  536.,  557.,  578.,  599.,  620.,  641.,  662.,  683.,  704.,  725.,  746.,  436.,  448.,  331.,  340.,  809.,  830.,  851.,  872.,  893.,  914.,  935.,  956.,  977.,  998., 1019., 1040.,  604.,  616.,  457.,  466., 1103., 1124., 1145., 1166., 1187., 1208., 1229., 1250., 1271., 1292., 1313., 1334.,  772.,  784.,  583.,  592., 1397., 1418., 1439., 1460., 1481., 1502., 1523., 1544., 1565., 1586., 1607., 1628.,  940.,  952.,  610.,  618., 1392., 1410., 1428., 1446., 1464., 1482., 1500., 1518., 1536., 1554., 1572., 1590.,  886.,  896.,  425.,  430.,  945.,  956.,  967.,  978.,  989., 1000., 1011., 1022., 1033., 1044., 1055., 1066.,  582.,  588.,    7.,   14.,   29.,   44.,   59.,   74.,   89.,  104.,  119.,  134.,  149.,  164.,  179.,  194.,  104.,  112.,  114.,  130.,  276.,  310.,  344.,  378.,  412.,  446.,  480.,  514.,  548.,  582.,  616.,  650.,  346.,  364.,  349.,  376.,  797.,  854.,  911.,  968., 1025., 1082., 1139., 1196., 1253., 1310., 1367., 1424.,  754.,  784.,  727.,  754., 1595., 1652., 1709., 1766., 1823., 1880., 1937., 1994., 2051., 2108., 2165., 2222., 1174., 1204., 1105., 1132., 2393., 2450., 2507., 2564., 2621., 2678., 2735., 2792., 2849., 2906., 2963., 3020., 1594., 1624., 1483., 1510., 3191., 3248., 3305., 3362., 3419., 3476., 3533., 3590., 3647., 3704., 3761., 3818., 2014., 2044., 1861., 1888., 3989., 4046., 4103., 4160., 4217., 4274., 4331., 4388., 4445., 4502., 4559., 4616., 2434., 2464., 1546., 1566., 3288., 3330., 3372., 3414., 3456., 3498., 3540., 3582., 3624., 3666., 3708., 3750., 1966., 1988.,  935.,  946., 1977., 2000., 2023., 2046., 2069., 2092., 2115., 2138., 2161., 2184., 2207., 2230., 1164., 1176.,   13.,   26.,   53.,   80.,  107.,  134.,  161.,  188.,  215.,  242.,  269.,  296.,  323.,  350.,  182.,  196.,  210.,  238.,  492.,  550.,  608.,  666.,  724.,  782.,  840.,  898.,  956., 1014., 1072., 1130.,  586.,  616.,  619.,  664., 1373., 1466., 1559., 1652., 1745., 1838., 1931., 2024., 2117., 2210., 2303., 2396., 1240., 1288., 1249., 1294., 2675., 2768., 2861., 2954., 3047., 3140., 3233., 3326., 3419., 3512., 3605., 3698., 1912., 1960., 1879., 1924., 3977., 4070., 4163., 4256., 4349., 4442., 4535., 4628., 4721., 4814., 4907., 5000., 2584., 2632., 2509., 2554., 5279., 5372., 5465., 5558., 5651., 5744., 5837., 5930., 6023., 6116., 6209., 6302., 3256., 3304., 3139., 3184., 6581., 6674., 6767., 6860., 6953., 7046., 7139., 7232., 7325., 7418., 7511., 7604., 3928., 3976., 2482., 2514., 5184., 5250., 5316., 5382., 5448., 5514., 5580., 5646., 5712., 5778., 5844., 5910., 3046., 3080., 1445., 1462., 3009., 3044., 3079., 3114., 3149., 3184., 3219., 3254., 3289., 3324., 3359., 3394., 1746., 1764.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 10928., 12128., 14034., 15654., 17840., 19928., 21290., 23894., 23894., 26834., 20720., 23384., 16974., 19314., 13712., 15680.,  8416.,  9288., 11249., 12439., 13564., 15112., 16337., 18283., 18547., 20773., 16572., 18600., 13291., 15081.,  9744., 11256.,  7680.,  8480.,  9980., 11060., 12736., 14128., 14860., 16596., 16660., 18620., 15424., 17200., 13124., 14684.,  9696., 11008.,  6240.,  7040.,  7852.,  8932.,  9952., 11344., 12604., 14340., 14212., 16172., 11456., 13232.,  9716., 11276.,  8032.,  9344.,  8992., 10120., 11289., 12799., 14220., 16152., 17865., 20259., 19915., 22589., 17196., 19608., 14131., 16241., 11792., 13560., 10128., 11328., 13466., 15086., 16448., 18536., 20162., 22766., 22670., 25610., 19296., 21960., 16406., 18746., 13008., 14976., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.,  5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 10928., 12128., 14034., 15654., 17840., 19928., 21290., 23894., 23894., 26834., 20720., 23384., 16974., 19314., 13712., 15680.,  8416.,  9288., 11249., 12439., 13564., 15112., 16337., 18283., 18547., 20773., 16572., 18600., 13291., 15081.,  9744., 11256.,  7680.,  8480.,  9980., 11060., 12736., 14128., 14860., 16596., 16660., 18620., 15424., 17200., 13124., 14684.,  9696., 11008.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,   392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,  1040.,  1112.,  1184.,   758.,   802.,   527.,   593.,  1540.,  1696.,  1660.,  1816.,  1524.,  1680.,  1836.,  1992.,  2148.,  2304.,  2460.,  2616.,  1513.,  1603.,  1259.,  1325.,  3084.,  3240.,  2692.,  2848.,  2044.,  2200.,  2356.,  2512.,  2668.,  2824.,  2980.,  3136.,  1813.,  1903.,  1479.,  1545.,  3604.,  3760.,  2700.,  2856.,  1540.,  1696.,  1660.,  1816.,  1524.,  1680.,  1836.,  1992.,  1153.,  1243.,   995.,  1061.,  2460.,  2616.,  2772.,  2928.,  3084.,  3240.,  2692.,  2848.,  2044.,  2200.,  2356.,  2512.,  1453.,  1543.,  1215.,  1281.,  2980.,  3136.,  3292.,  3448.,  3604.,  3760.,  2700.,  2856.,  1540.,  1696.,  1660.,  1816.,   793.,   883.,   714.,   774.,  1768.,  1904.,  2040.,  2176.,  2312.,  2448.,  2584.,  2720.,  2856.,  2992.,  2424.,  2560.,   886.,   962.,   789.,   827.,  1820.,  1904.,  1988.,  2072.,  2156.,  2240.,  2324.,  2408.,  2492.,  2576.,  1444.,  1528.,    35.,    81.,    41.,    95.,   196.,   312.,   428.,   544.,   660.,   776.,   892.,  1008.,  1124.,  1240.,  1356.,  1472.,   791.,   853.,   850.,   974.,  2072.,  2336.,  2600.,  2864.,  3128.,  3392.,  3656.,  3920.,  4184.,  4448.,  4712.,  4976.,  2654.,  2794.,  2651.,  2861.,  6076.,  6520.,  5236.,  5680.,  4140.,  4584.,  5028.,  5472.,  5916.,  6360.,  6804.,  7248.,  3829.,  4063.,  3863.,  4073.,  8580.,  9024.,  7228.,  7672.,  5620.,  6064.,  6508.,  6952.,  7396.,  7840.,  8284.,  8728.,  4609.,  4843.,  4563.,  4773., 10060., 10504.,  8196.,  8640.,  6076.,  6520.,  5236.,  5680.,  4140.,  4584.,  5028.,  5472.,  2893.,  3127.,  3023.,  3233.,  6804.,  7248.,  7692.,  8136.,  8580.,  9024.,  7228.,  7672.,  5620.,  6064.,  6508.,  6952.,  3673.,  3907.,  3723.,  3933.,  8284.,  8728.,  9172.,  9616., 10060., 10504.,  8196.,  8640.,  6076.,  6520.,  5236.,  5680.,  1957.,  2191.,  2034.,  2190.,  4600.,  4928.,  5256.,  5584.,  5912.,  6240.,  6568.,  6896.,  7224.,  7552.,  5640.,  5968.,  1822.,  1994.,  1785.,  1871.,  3908.,  4088.,  4268.,  4448.,  4628.,  4808.,  4988.,  5168.,  5348.,  5528.,  2956.,  3136.,    71.,   165.,    77.,   179.,   364.,   576.,   788.,  1000.,  1212.,  1424.,  1636.,  1848.,  2060.,  2272.,  2484.,  2696.,  1403.,  1513.,  1594.,  1814.,  3752.,  4208.,  4664.,  5120.,  5576.,  6032.,  6488.,  6944.,  7400.,  7856.,  8312.,  8768.,  4550.,  4786.,  4775.,  5129., 10612., 11344.,  8812.,  9544.,  6756.,  7488.,  8220.,  8952.,  9684., 10416., 11148., 11880.,  6145.,  6523.,  6467.,  6821., 14076., 14808., 11764., 12496.,  9196.,  9928., 10660., 11392., 12124., 12856., 13588., 14320.,  7405.,  7783.,  7647.,  8001., 16516., 17248., 13692., 14424., 10612., 11344.,  8812.,  9544.,  6756.,  7488.,  8220.,  8952.,  4633.,  5011.,  5051.,  5405., 11148., 11880., 12612., 13344., 14076., 14808., 11764., 12496.,  9196.,  9928., 10660., 11392.,  5893.,  6271.,  6231.,  6585., 13588., 14320., 15052., 15784., 16516., 17248., 13692., 14424., 10612., 11344.,  8812.,  9544.,  3121.,  3499.,  3354.,  3606.,  7432.,  7952.,  8472.,  8992.,  9512., 10032., 10552., 11072., 11592., 12112.,  8856.,  9376.,  2758.,  3026.,  2781.,  2915.,  5996.,  6272.,  6548.,  6824.,  7100.,  7376.,  7652.,  7928.,  8204.,  8480.,  4468.,  4744.,   107.,   249.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,  180.,  324.,  468.,  612.,  486.,  590.,  380.,  588., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864., 1576., 2120., 1356., 1692., 1498., 2002., 3420., 4620., 3644., 4844., 5212., 6412., 5244., 6444., 3420., 4620., 3644., 4844., 2354., 3050., 2858., 3362., 5244., 6444., 3420., 4620., 3644., 4844., 5212., 6412., 5244., 6444., 3420., 4620., 1794., 2490., 1850., 2354., 5212., 6412., 5244., 6444., 3420., 4620., 3644., 4844., 5212., 6412., 5244., 6444., 2258., 2954., 1162., 1666., 3644., 4844., 5212., 6412., 5244., 6444., 3420., 4620., 3644., 4844., 5212., 6412., 3746., 4442., 1498., 2002., 3420., 4620., 3644., 4844., 5212., 6412., 5244., 6444., 3420., 4620., 3644., 4844., 2354., 3050., 2748., 3212., 4776., 5832., 2664., 3720., 2920., 3976., 5032., 6088., 4776., 5832., 2664., 3720., 1100., 1692., 1374., 1670., 3636., 4292., 2580., 3236., 1012., 1668., 2324., 2980., 3636., 4292., 2580., 3236.,  230.,  590.,  270.,  694., 1428., 2340., 3252., 4164., 5076., 5988., 3508., 4420., 1428., 2340., 3252., 4164., 2262., 2750., 2844., 3308., 3688., 4744., 1896., 2952., 4008., 5064., 5800., 6856., 3688., 4744., 1896., 2952., 1772., 2364., 2346., 2978., 6396., 7852., 5084., 6540., 4092., 5548., 5660., 7116., 6396., 7852., 5084., 6540., 1666., 2490., 2426., 3058., 5660., 7116., 6396., 7852., 5084., 6540., 4092., 5548., 5660., 7116., 6396., 7852., 3922., 4746., 1162., 1794., 4092., 5548., 5660., 7116., 6396., 7852., 5084., 6540., 4092., 5548., 5660., 7116., 3106., 3930., 3290., 3922., 5084., 6540., 4092., 5548., 5660., 7116., 6396., 7852., 5084., 6540., 4092., 5548., 3314., 4138., 2346., 2978., 6396., 7852., 5084., 6540., 4092., 5548., 5660., 7116., 6396., 7852., 5084., 6540., 1666., 2490., 1308., 1516., 2408., 2952., 1320., 1864., 1576., 2120., 2664., 3208., 2408., 2952., 1320., 1864.,  684., 1020.,  782.,  950., 2196., 2596., 1652., 2052.,  596.,  996., 1396., 1796., 2196., 2596., 1652., 2052.,  150.,  382.,  190.,  486., 1012., 1668., 2324., 2980., 3636., 4292., 2580., 3236., 1012., 1668., 2324., 2980., 1670., 2030., 2236., 2956., 4008., 5576., 4264., 5832., 7400., 8968., 7144., 8712., 4008., 5576., 4264., 5832., 3212., 4060., 4218., 4978., 7324., 9036., 4476., 6188., 5020., 6732., 8124., 9836., 7324., 9036., 4476., 6188., 2002., 2954., 3018., 3778., 8124., 9836., 7324., 9036., 4476., 6188., 5020., 6732., 8124., 9836., 7324., 9036., 2978., 3930., 1498., 2258., 5020., 6732., 8124., 9836., 7324., 9036., 4476., 6188., 5020., 6732., 8124., 9836., 4978., 5930., 2346., 3106., 4476., 6188., 5020., 6732., 8124., 9836., 7324., 9036., 4476., 6188., 5020., 6732., 3906., 4858., 4218., 4978., 7324., 9036., 4476., 6188., 5020., 6732., 8124., 9836., 7324., 9036., 4476., 6188., 2002., 2954., 2236., 2700., 5800., 6856., 3688., 4744., 1896., 2952., 4008., 5064., 5800., 6856., 3688., 4744.,  588., 1180.,  190.,  230.,  756.,  900.,  724.,  868.,  180.,  324.,  468.,  612.,  756.,  900.,  724.,  868.,   70.,  174.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  5892.,  6240.,  6588.,  6936.,  7286.,  7736.,  8186.,  8636.,  9042.,  9600., 10158., 10716., 10384., 11056., 11728., 12400., 11014., 11728., 12442., 13156.,  9330.,  9960., 10590., 11220.,  7316.,  7856.,  8396.,  8936.,  5748.,  6192.,  6636.,  7080.,  4826.,  5068.,  5310.,  5552.,  5627.,  5942.,  6257.,  6572.,  6421.,  6814.,  7207.,  7600.,  7452.,  7928.,  8404.,  8880.,  7987.,  8498.,  9009.,  9520.,  6877.,  7330.,  7783.,  8236.,  5310.,  5700.,  6090.,  6480.,  3554.,  3876.,  4198.,  4520.,  4632.,  4864.,  5096.,  5328.,  5684.,  5984.,  6284.,  6584.,  6460.,  6832.,  7204.,  7576.,  7200.,  7648.,  8096.,  8544.,  7636.,  8112.,  8588.,  9064.,  6844.,  7264.,  7684.,  8104.,  5656.,  6016.,  6376.,  6736.,  4056.,  4352.,  4648.,  4944.,  3224.,  3456.,  3688.,  3920.,  3972.,  4272.,  4572.,  4872.,  4972.,  5344.,  5716.,  6088.,  6240.,  6688.,  7136.,  7584.,  6628.,  7104.,  7580.,  8056.,  5068.,  5488.,  5908.,  6328.,  4152.,  4512.,  4872.,  5232.,  3640.,  3936.,  4232.,  4528.,  4426.,  4700.,  4974.,  5248.,  5211.,  5566.,  5921.,  6276.,  6285.,  6726.,  7167.,  7608.,  7668.,  8200.,  8732.,  9264.,  8163.,  8730.,  9297.,  9864.,  6741.,  7242.,  7743.,  8244.,  5110.,  5540.,  5970.,  6400.,  4050.,  4404.,  4758.,  5112.,  5684.,  6032.,  6380.,  6728.,  6878.,  7328.,  7778.,  8228.,  8170.,  8728.,  9286.,  9844.,  9840., 10512., 11184., 11856., 10446., 11160., 11874., 12588.,  8970.,  9600., 10230., 10860.,  7428.,  7968.,  8508.,  9048.,  5572.,  6016.,  6460.,  6904.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5316.,  5600.,  5884.,  6168.,  6278.,  6648.,  7018.,  7388.,  7282.,  7744.,  8206.,  8668.,  8576.,  9136.,  9696., 10256.,  9206.,  9808., 10410., 11012.,  7698.,  8232.,  8766.,  9300.,  6180.,  6640.,  7100.,  7560.,  4404.,  4784.,  5164.,  5544.,  5306.,  5580.,  5854.,  6128.,  6499.,  6854.,  7209.,  7564.,  7461.,  7902.,  8343.,  8784.,  8436.,  8968.,  9500., 10032.,  8971.,  9538., 10105., 10672.,  7853.,  8354.,  8855.,  9356.,  6246.,  6676.,  7106.,  7536.,  4674.,  5028.,  5382.,  5736.,  4120.,  4352.,  4584.,  4816.,  5620.,  5920.,  6220.,  6520.,  6588.,  6960.,  7332.,  7704.,  7264.,  7712.,  8160.,  8608.,  7700.,  8176.,  8652.,  9128.,  6972.,  7392.,  7812.,  8232.,  5848.,  6208.,  6568.,  6928.,  4312.,  4608.,  4904.,  5200.,  3480.,  3712.,  3944.,  4176.,  4164.,  4464.,  4764.,  5064.,  5100.,  5472.,  5844.,  6216.,  6304.,  6752.,  7200.,  7648.,  6692.,  7168.,  7644.,  8120.,  5452.,  5872.,  6292.,  6712.,  4088.,  4448.,  4808.,  5168.,  3384.,  3680.,  3976.,  4272.,  4906.,  5212.,  5518.,  5824.,  5763.,  6158.,  6553.,  6948.,  6941.,  7430.,  7919.,  8408.,  8460.,  9048.,  9636., 10224.,  8955.,  9578., 10201., 10824.,  7589.,  8138.,  8687.,  9236.,  6238.,  6708.,  7178.,  7648.,  4658.,  5044.,  5430.,  5816.,  6260.,  6672.,  7084.,  7496.,  7886.,  8416.,  8946.,  9476.,  9418., 10072., 10726., 11380., 11392., 12176., 12960., 13744., 11998., 12824., 13650., 14476., 10346., 11072., 11798., 12524.,  8820.,  9440., 10060., 10680.,  7172.,  7680.,  8188.,  8696.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6148.,  6496.,  6844.,  7192.,  7606.,  8056.,  8506.,  8956.,  8914.,  9472., 10030., 10588., 10320., 10992., 11664., 12336., 10950., 11664., 12378., 13092.,  9202.,  9832., 10462., 11092.,  7636.,  8176.,  8716.,  9256.,  6004.,  6448.,  6892.,  7336.,  5274.,  5580.,  5886.,  6192.,  6987.,  7382.,  7777.,  8172.,  8245.,  8734.,  9223.,  9712.,  9292.,  9880., 10468., 11056.,  9827., 10450., 11073., 11696.,  8573.,  9122.,  9671., 10220.,  6798.,  7268.,  7738.,  8208.,  5282.,  5668.,  6054.,  6440.,  4120.,  4352.,  4584.,  4816.,  5172.,  5472.,  5772.,  6072.,  6460.,  6832.,  7204.,  7576.,  7200.,  7648.,  8096.,  8544.,  7636.,  8112.,  8588.,  9064.,  6844.,  7264.,  7684.,  8104.,  5656.,  6016.,  6376.,  6736.,  4056.,  4352.,  4648.,  4944.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    19.,    22.,    25.,    28.,    31.,    34.,    37.,    40.,    43.,    46.,    49.,    52.,    55.,    58.,    61.,    64.,    67.,    70.,    73.,    76.,    50.,    52.,    54.,    56.,    32.,    36.,    40.,    44.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   210.,   220.,   230.,   240.,   250.,   260.,   270.,   280.,   290.,   300.,   310.,   320.,   330.,   340.,   206.,   212.,   218.,   224.,   149.,   158.,   167.,   176.,   421.,   442.,   463.,   484.,   505.,   526.,   547.,   568.,   589.,   610.,   631.,   652.,   673.,   694.,   715.,   736.,   757.,   778.,   799.,   820.,   841.,   862.,   883.,   904.,   524.,   536.,   548.,   560.,   401.,   410.,   419.,   428.,  1009.,  1030.,  1051.,  1072.,  1093.,  1114.,  1135.,  1156.,  1177.,  1198.,  1219.,  1240.,  1261.,  1282.,  1303.,  1324.,  1345.,  1366.,  1387.,  1408.,  1429.,  1450.,  1471.,  1492.,   860.,   872.,   884.,   896.,   653.,   662.,   671.,   680.,  1597.,  1618.,  1639.,  1660.,  1681.,  1702.,  1723.,  1744.,  1765.,  1786.,  1807.,  1828.,  1849.,  1870.,  1891.,  1912.,  1933.,  1954.,  1975.,  1996.,  2017.,  2038.,  2059.,  2080.,  1196.,  1208.,  1220.,  1232.,   905.,   914.,   923.,   932.,  2185.,  2206.,  2227.,  2248.,  2269.,  2290.,  2311.,  2332.,  2353.,  2374.,  2395.,  2416.,  2437.,  2458.,  2479.,  2500.,  2521.,  2542.,  2563.,  2584.,  2605.,  2626.,  2647.,  2668.,  1532.,  1544.,  1556.,  1568.,  1157.,  1166.,  1175.,  1184.,  2773.,  2794.,  2815.,  2836.,  2857.,  2878.,  2899.,  2920.,  2941.,  2962.,  2983.,  3004.,  3025.,  3046.,  3067.,  3088.,  3109.,  3130.,  3151.,  3172.,  3193.,  3214.,  3235.,  3256.,  1868.,  1880.,  1892.,  1904.,  1212.,  1220.,  1228.,  1236.,  2766.,  2784.,  2802.,  2820.,  2838.,  2856.,  2874.,  2892.,  2910.,  2928.,  2946.,  2964.,  2982.,  3000.,  3018.,  3036.,  3054.,  3072.,  3090.,  3108.,  3126.,  3144.,  3162.,  3180.,  1762.,  1772.,  1782.,  1792.,   845.,   850.,   855.,   860.,  1879.,  1890.,  1901.,  1912.,  1923.,  1934.,  1945.,  1956.,  1967.,  1978.,  1989.,  2000.,  2011.,  2022.,  2033.,  2044.,  2055.,  2066.,  2077.,  2088.,  2099.,  2110.,  2121.,  2132.,  1158.,  1164.,  1170.,  1176.,     7.,    14.,    21.,    28.,    43.,    58.,    73.,    88.,   103.,   118.,   133.,   148.,   163.,   178.,   193.,   208.,   223.,   238.,   253.,   268.,   283.,   298.,   313.,   328.,   343.,   358.,   373.,   388.,   200.,   208.,   216.,   224.,   212.,   228.,   244.,   260.,   518.,   552.,   586.,   620.,   654.,   688.,   722.,   756.,   790.,   824.,   858.,   892.,   926.,   960.,   994.,  1028.,  1062.,  1096.,  1130.,  1164.,  1198.,  1232.,  1266.,  1300.,   674.,   692.,   710.,   728.,   671.,   698.,   725.,   752.,  1537.,  1594.,  1651.,  1708.,  1765.,  1822.,  1879.,  1936.,  1993.,  2050.,  2107.,  2164.,  2221.,  2278.,  2335.,  2392.,  2449.,  2506.,  2563.,  2620.,  2677.,  2734.,  2791.,  2848.,  1478.,  1508.,  1538.,  1568.,  1427.,  1454.,  1481.,  1508.,  3133.,  3190.,  3247.,  3304.,  3361.,  3418.,  3475.,  3532.,  3589.,  3646.,  3703.,  3760.,  3817.,  3874.,  3931.,  3988.,  4045.,  4102.,  4159.,  4216.,  4273.,  4330.,  4387.,  4444.,  2318.,  2348.,  2378.,  2408.,  2183.,  2210.,  2237.,  2264.,  4729.,  4786.,  4843.,  4900.,  4957.,  5014.,  5071.,  5128.,  5185.,  5242.,  5299.,  5356.,  5413.,  5470.,  5527.,  5584.,  5641.,  5698.,  5755.,  5812.,  5869.,  5926.,  5983.,  6040.,  3158.,  3188.,  3218.,  3248.,  2939.,  2966.,  2993.,  3020.,  6325.,  6382.,  6439.,  6496.,  6553.,  6610.,  6667.,  6724.,  6781.,  6838.,  6895.,  6952.,  7009.,  7066.,  7123.,  7180.,  7237.,  7294.,  7351.,  7408.,  7465.,  7522.,  7579.,  7636.,  3998.,  4028.,  4058.,  4088.,  3695.,  3722.,  3749.,  3776.,  7921.,  7978.,  8035.,  8092.,  8149.,  8206.,  8263.,  8320.,  8377.,  8434.,  8491.,  8548.,  8605.,  8662.,  8719.,  8776.,  8833.,  8890.,  8947.,  9004.,  9061.,  9118.,  9175.,  9232.,  4838.,  4868.,  4898.,  4928.,  3072.,  3092.,  3112.,  3132.,  6534.,  6576.,  6618.,  6660.,  6702.,  6744.,  6786.,  6828.,  6870.,  6912.,  6954.,  6996.,  7038.,  7080.,  7122.,  7164.,  7206.,  7248.,  7290.,  7332.,  7374.,  7416.,  7458.,  7500.,  3910.,  3932.,  3954.,  3976.,  1859.,  1870.,  1881.,  1892.,  3931.,  3954.,  3977.,  4000.,  4023.,  4046.,  4069.,  4092.,  4115.,  4138.,  4161.,  4184.,  4207.,  4230.,  4253.,  4276.,  4299.,  4322.,  4345.,  4368.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   187.,   214.,   241.,   268.,   295.,   322.,   349.,   376.,   403.,   430.,   457.,   484.,   511.,   538.,   565.,   592.,   619.,   646.,   673.,   700.,   350.,   364.,   378.,   392.,   392.,   420.,   448.,   476.,   926.,   984.,  1042.,  1100.,  1158.,  1216.,  1274.,  1332.,  1390.,  1448.,  1506.,  1564.,  1622.,  1680.,  1738.,  1796.,  1854.,  1912.,  1970.,  2028.,  2086.,  2144.,  2202.,  2260.,  1142.,  1172.,  1202.,  1232.,  1193.,  1238.,  1283.,  1328.,  2653.,  2746.,  2839.,  2932.,  3025.,  3118.,  3211.,  3304.,  3397.,  3490.,  3583.,  3676.,  3769.,  3862.,  3955.,  4048.,  4141.,  4234.,  4327.,  4420.,  4513.,  4606.,  4699.,  4792.,  2432.,  2480.,  2528.,  2576.,  2453.,  2498.,  2543.,  2588.,  5257.,  5350.,  5443.,  5536.,  5629.,  5722.,  5815.,  5908.,  6001.,  6094.,  6187.,  6280.,  6373.,  6466.,  6559.,  6652.,  6745.,  6838.,  6931.,  7024.,  7117.,  7210.,  7303.,  7396.,  3776.,  3824.,  3872.,  3920.,  3713.,  3758.,  3803.,  3848.,  7861.,  7954.,  8047.,  8140.,  8233.,  8326.,  8419.,  8512.,  8605.,  8698.,  8791.,  8884.,  8977.,  9070.,  9163.,  9256.,  9349.,  9442.,  9535.,  9628.,  9721.,  9814.,  9907., 10000.,  5120.,  5168.,  5216.,  5264.,  4973.,  5018.,  5063.,  5108., 10465., 10558., 10651., 10744., 10837., 10930., 11023., 11116., 11209., 11302., 11395., 11488., 11581., 11674., 11767., 11860., 11953., 12046., 12139., 12232., 12325., 12418., 12511., 12604.,  6464.,  6512.,  6560.,  6608.,  6233.,  6278.,  6323.,  6368., 13069., 13162., 13255., 13348., 13441., 13534., 13627., 13720., 13813., 13906., 13999., 14092., 14185., 14278., 14371., 14464., 14557., 14650., 14743., 14836., 14929., 15022., 15115., 15208.,  7808.,  7856.,  7904.,  7952.,  4932.,  4964.,  4996.,  5028., 10302., 10368., 10434., 10500., 10566., 10632., 10698., 10764., 10830., 10896., 10962., 11028., 11094., 11160., 11226., 11292., 11358., 11424., 11490., 11556., 11622., 11688., 11754., 11820.,  6058.,  6092.,  6126.,  6160.,  2873.,  2890.,  2907.,  2924.,  5983.,  6018.,  6053.,  6088.,  6123.,  6158.,  6193.,  6228.,  6263.,  6298.,  6333.,  6368.,  6403.,  6438.,  6473.,  6508.,  6543.,  6578.,  6613.,  6648.,  6683.,  6718.,  6753.,  6788.,  3474.,  3492.,  3510.,  3528.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   536.,   608.,   680.,   752.,   376.,   448.,   520.,   592.,   664.,   736.,   808.,   880.,   952.,  1024.,  1096.,  1168.,  1240.,  1312.,  1384.,  1456.,  1528.,  1600.,  1672.,  1744.,  1034.,  1078.,  1122.,  1166.,   811.,   877.,   943.,  1009.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,  1264.,  1420.,  1576.,  1732.,  1888.,  2044.,  2200.,  2356.,  2512.,  2668.,  2824.,  2980.,  3136.,  3292.,  3448.,  3604.,  1997.,  2087.,  2177.,  2267.,  1763.,  1829.,  1895.,  1961.,  3168.,  3324.,  3480.,  3636.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,  1264.,  1420.,  1576.,  1732.,  1888.,  2044.,  2200.,  2356.,  2512.,  2668.,  2824.,  2980.,  1637.,  1727.,  1817.,  1907.,  1499.,  1565.,  1631.,  1697.,  3760.,  3916.,  4072.,  4228.,  3168.,  3324.,  3480.,  3636.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,  1264.,  1420.,  1576.,  1732.,  1888.,  2044.,  2200.,  2356.,  1277.,  1367.,  1457.,  1547.,  1235.,  1301.,  1367.,  1433.,  3136.,  3292.,  3448.,  3604.,  3760.,  3916.,  4072.,  4228.,  3168.,  3324.,  3480.,  3636.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,  1264.,  1420.,  1576.,  1732.,   917.,  1007.,  1097.,  1187.,   971.,  1037.,  1103.,  1169.,  2512.,  2668.,  2824.,  2980.,  3136.,  3292.,  3448.,  3604.,  3760.,  3916.,  4072.,  4228.,  3168.,  3324.,  3480.,  3636.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,   557.,   647.,   737.,   827.,   678.,   738.,   798.,   858.,  1768.,  1904.,  2040.,  2176.,  2312.,  2448.,  2584.,  2720.,  2856.,  2992.,  3128.,  3264.,  3400.,  3536.,  3672.,  3808.,  2728.,  2864.,  3000.,  3136.,  1096.,  1232.,  1368.,  1504.,   242.,   318.,   394.,   470.,   333.,   371.,   409.,   447.,   888.,   972.,  1056.,  1140.,  1224.,  1308.,  1392.,  1476.,  1560.,  1644.,  1728.,  1812.,  1896.,  1980.,  2064.,  2148.,  2232.,  2316.,  2400.,  2484.,  1352.,  1436.,  1520.,  1604.,    35.,    81.,   127.,   173.,    41.,    95.,   149.,   203.,   304.,   420.,   536.,   652.,   768.,   884.,  1000.,  1116.,  1232.,  1348.,  1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  2160.,  2276.,  2392.,  2508.,  2624.,  2740.,  2856.,  2972.,  1535.,  1597.,  1659.,  1721.,  1606.,  1730.,  1854.,  1978.,  2216.,  2480.,  2744.,  3008.,  1288.,  1552.,  1816.,  2080.,  2344.,  2608.,  2872.,  3136.,  3400.,  3664.,  3928.,  4192.,  4456.,  4720.,  4984.,  5248.,  5512.,  5776.,  6040.,  6304.,  3218.,  3358.,  3498.,  3638.,  3415.,  3625.,  3835.,  4045.,  5864.,  6308.,  6752.,  7196.,  3416.,  3860.,  4304.,  4748.,  3208.,  3652.,  4096.,  4540.,  4984.,  5428.,  5872.,  6316.,  6760.,  7204.,  7648.,  8092.,  8536.,  8980.,  9424.,  9868.,  4985.,  5219.,  5453.,  5687.,  5327.,  5537.,  5747.,  5957.,  9336.,  9780., 10224., 10668.,  5864.,  6308.,  6752.,  7196.,  3416.,  3860.,  4304.,  4748.,  3208.,  3652.,  4096.,  4540.,  4984.,  5428.,  5872.,  6316.,  6760.,  7204.,  7648.,  8092.,  4049.,  4283.,  4517.,  4751.,  4487.,  4697.,  4907.,  5117., 10312., 10756., 11200., 11644.,  9336.,  9780., 10224., 10668.,  5864.,  6308.,  6752.,  7196.,  3416.,  3860.,  4304.,  4748.,  3208.,  3652.,  4096.,  4540.,  4984.,  5428.,  5872.,  6316.,  3113.,  3347.,  3581.,  3815.,  3647.,  3857.,  4067.,  4277.,  8536.,  8980.,  9424.,  9868., 10312., 10756., 11200., 11644.,  9336.,  9780., 10224., 10668.,  5864.,  6308.,  6752.,  7196.,  3416.,  3860.,  4304.,  4748.,  3208.,  3652.,  4096.,  4540.,  2177.,  2411.,  2645.,  2879.,  2807.,  3017.,  3227.,  3437.,  6760.,  7204.,  7648.,  8092.,  8536.,  8980.,  9424.,  9868., 10312., 10756., 11200., 11644.,  9336.,  9780., 10224., 10668.,  5864.,  6308.,  6752.,  7196.,  3416.,  3860.,  4304.,  4748.,  1241.,  1475.,  1709.,  1943.,  1710.,  1866.,  2022.,  2178.,  4216.,  4544.,  4872.,  5200.,  5528.,  5856.,  6184.,  6512.,  6840.,  7168.,  7496.,  7824.,  8152.,  8480.,  8808.,  9136.,  6712.,  7040.,  7368.,  7696.,  2776.,  3104.,  3432.,  3760.,   506.,   678.,   850.,  1022.,   753.,   839.,   925.,  1011.,  1920.,  2100.,  2280.,  2460.,  2640.,  2820.,  3000.,  3180.,  3360.,  3540.,  3720.,  3900.,  4080.,  4260.,  4440.,  4620.,  4800.,  4980.,  5160.,  5340.,  2768.,  2948.,  3128.,  3308.,    71.,   165.,   259.,   353.,    77.,   179.,   281.,   383.,   568.,   780.,   992.,  1204.,  1416.,  1628.,  1840.,  2052.,  2264.,  2476.,  2688.,  2900.,  3112.,  3324.,  3536.,  3748.,  3960.,  4172.,  4384.,  4596.,  4808.,  5020.,  5232.,  5444.,  2723.,  2833.,  2943.,  3053.,  3022.,  3242.,  3462.,  3682.,  3896.,  4352.,  4808.,  5264.,  2200.,  2656.,  3112.,  3568.,  4024.,  4480.,  4936.,  5392.,  5848.,  6304.,  6760.,  7216.,  7672.,  8128.,  8584.,  9040.,  9496.,  9952., 10408., 10864.,  5402.,  5638.,  5874.,  6110.,  6019.,  6373.,  6727.,  7081., 10112., 10844., 11576., 12308.,  5744.,  6476.,  7208.,  7940.,  5152.,  5884.,  6616.,  7348.,  8080.,  8812.,  9544., 10276., 11008., 11740., 12472., 13204., 13936., 14668., 15400., 16132.,  7973.,  8351.,  8729.,  9107.,  8891.,  9245.,  9599.,  9953., 15504., 16236., 16968., 17700., 10112., 10844., 11576., 12308.,  5744.,  6476.,  7208.,  7940.,  5152.,  5884.,  6616.,  7348.,  8080.,  8812.,  9544., 10276., 11008., 11740., 12472., 13204.,  6461.,  6839.,  7217.,  7595.,  7475.,  7829.,  8183.,  8537., 16864., 17596., 18328., 19060., 15504., 16236., 16968., 17700., 10112., 10844., 11576., 12308.,  5744.,  6476.,  7208.,  7940.,  5152.,  5884.,  6616.,  7348.,  8080.,  8812.,  9544., 10276.,  4949.,  5327.,  5705.,  6083.,  6059.,  6413.,  6767.,  7121., 13936., 14668., 15400., 16132., 16864., 17596., 18328., 19060., 15504., 16236., 16968., 17700., 10112., 10844., 11576., 12308.,  5744.,  6476.,  7208.,  7940.,  5152.,  5884.,  6616.,  7348.,  3437.,  3815.,  4193.,  4571.,  4643.,  4997.,  5351.,  5705., 11008., 11740., 12472., 13204., 13936., 14668., 15400., 16132., 16864., 17596., 18328., 19060., 15504., 16236., 16968., 17700., 10112., 10844., 11576., 12308.,  5744.,  6476.,  7208.,  7940.,  1925.,  2303.,  2681.,  3059.,  2742.,  2994.,  3246.,  3498.,  6664.,  7184.,  7704.,  8224.,  8744.,  9264.,  9784., 10304., 10824., 11344., 11864., 12384., 12904., 13424., 13944., 14464., 10696., 11216., 11736., 12256.,  4456.,  4976.,  5496.,  6016.,   770.,  1038.,  1306.,  1574.,  1173.,  1307.,  1441.,  1575.,  2952.,  3228.,  3504.,  3780.,  4056.,  4332.,  4608.,  4884.,  5160.,  5436.,  5712.,  5988.,  6264.,  6540.,  6816.,  7092.,  7368.,  7644.,  7920.,  8196.,  4184.,  4460.,  4736.,  5012.,   107.,   249.,   391.,   533.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.,  300.,  508.,  716.,  924., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080.,  636.,  972., 1308., 1644., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 1378., 2074., 2770., 3466., 1674., 2178., 2682., 3186., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 2306., 3002., 3698., 4394., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 1378., 2074., 2770., 3466., 1674., 2178., 2682., 3186., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 2306., 3002., 3698., 4394., 1002., 1506., 2010., 2514., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 3052., 4252., 5452., 6652., 3308., 4508., 5708., 6908., 1378., 2074., 2770., 3466., 1484., 1948., 2412., 2876., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 1820., 2412., 3004., 3596.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310.,  270.,  694., 1118., 1542., 2276., 3188., 4100., 5012., 2532., 3444., 4356., 5268., 2276., 3188., 4100., 5012., 2532., 3444., 4356., 5268., 2276., 3188., 4100., 5012., 2532., 3444., 4356., 5268.,  310.,  798., 1286., 1774., 1996., 2460., 2924., 3388., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2332., 2924., 3516., 4108.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348.,  946., 1770., 2594., 3418., 2778., 3410., 4042., 4674., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3410., 4234., 5058., 5882.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348.,  946., 1770., 2594., 3418., 2778., 3410., 4042., 4674., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3410., 4234., 5058., 5882.,  570., 1202., 1834., 2466., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348., 3724., 5180., 6636., 8092., 3980., 5436., 6892., 8348.,  946., 1770., 2594., 3418.,  812., 1020., 1228., 1436., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1448., 1992., 2536., 3080., 1148., 1484., 1820., 2156.,  110.,  278.,  446.,  614.,  932., 1332., 1732., 2132., 1188., 1588., 1988., 2388.,  932., 1332., 1732., 2132., 1188., 1588., 1988., 2388.,  932., 1332., 1732., 2132., 1188., 1588., 1988., 2388.,  150.,  382.,  614.,  846.,  190.,  486.,  782., 1078., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828., 1604., 2260., 2916., 3572., 1860., 2516., 3172., 3828.,  230.,  590.,  950., 1310., 1644., 2364., 3084., 3804., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 4136., 5704., 7272., 8840., 1980., 2828., 3676., 4524., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 2562., 3514., 4466., 5418., 1834., 2594., 3354., 4114., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 2466., 3418., 4370., 5322., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 2562., 3514., 4466., 5418., 1834., 2594., 3354., 4114., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 2466., 3418., 4370., 5322., 2186., 2946., 3706., 4466., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 4396., 6108., 7820., 9532., 4652., 6364., 8076., 9788., 2562., 3514., 4466., 5418.,  460.,  924., 1388., 1852., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960., 2792., 3848., 4904., 5960.,  796., 1388., 1980., 2572.,   30.,   70.,  110.,  150.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,  260.,  404.,  548.,  692.,  516.,  660.,  804.,  948.,   70.,  174.,  278.,  382.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  6020.,  7814.,  9664., 11673., 11714., 12171., 10786.,  9150.,  7256.,  6856.,  8460.,  9872., 11418., 10983., 11188.,  9600.,  7790.,  5752.,  5264.,  6031.,  6918.,  7930.,  7610.,  8186.,  7120.,  5877.,  4452.,  3488.,  3412.,  4456.,  5600.,  5954.,  6404.,  5816.,  5080.,  4192.,  4048.,  5350.,  6776.,  7850.,  7744.,  7606.,  6656.,  5562.,  4320.,  6182.,  7574.,  9113., 10100.,  9898.,  9664.,  8125.,  6382.,  4430.,  6472.,  7669.,  9020.,  9603.,  9034.,  8401.,  6864.,  6135.,  5184.,  5938.,  7678.,  9595., 11568., 11673., 11714., 10451.,  8944.,  7186.,  7188.,  8838., 10664., 12321., 11978., 11571., 10106.,  8398.,  6440.,  6646.,  7758.,  9045., 10514., 10299., 10020.,  8833.,  7404.,  5726.,  6448.,  7093.,  7904.,  9911., 10244., 10513.,  9460.,  8179.,  6664.,  6290.,  7974.,  9799., 11770., 11578., 11322.,  9871.,  8222.,  6370.,  5920.,  7014.,  8208.,  9506.,  8740.,  7910.,  6616.,  5170.,  3568.,  2432.,  3284.,  4232.,  5280.,  5526.,  5740.,  5096.,  4560.,  3904.,  4304.,  5455.,  6710.,  8074.,  8224.,  8342.,  7096.,  6137.,  5012.,  5928.,  7084.,  8368.,  9786.,  9761.,  9704.,  8040.,  6858.,  5480.,  6980.,  8038.,  9264., 10665., 10514., 10299.,  8338.,  7038.,  5496.,  7046.,  7662.,  8445.,  9402., 10051., 10412.,  9401.,  8252.,  6862.,  6344.,  8118., 10058., 12171., 12596., 12509., 10848.,  9274.,  7460.,  6712.,  8062.,  9552., 11188., 11361., 10798.,  8936.,  7416.,  5688.,  5172.,  6045.,  7048.,  8186.,  8762.,  8410.,  7150.,  5703.,  4064.,  3040.,  4056.,  5176.,  6404.,  6854.,  7176.,  6424.,  5516.,  4448.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,   38.,   80.,  101.,  122.,  143.,  164.,  138.,   84.,   54.,  144.,  273.,  318.,  363.,  408.,  453.,  360.,  210.,  138.,  333.,  588.,  633.,  678.,  723.,  768.,  591.,  336.,  222.,  522.,  903.,  948.,  993., 1038., 1083.,  822.,  462.,  306.,  711., 1218., 1263., 1308., 1353., 1398., 1053.,  588.,  390.,  900., 1533., 1578., 1623., 1668., 1713., 1284.,  714.,  424.,  938., 1544., 1583., 1622., 1661., 1700., 1238.,  672.,  301.,  652., 1054., 1078., 1102., 1126., 1150.,  824.,  441.,   10.,   31.,   64.,   97.,  130.,  163.,  196.,  149.,   84.,   93.,  218.,  377.,  452.,  527.,  602.,  677.,  498.,  273.,  270.,  603., 1002., 1128., 1254., 1380., 1506., 1089.,  588.,  543., 1170., 1884., 2010., 2136., 2262., 2388., 1698.,  903.,  816., 1737., 2766., 2892., 3018., 3144., 3270., 2307., 1218., 1089., 2304., 3648., 3774., 3900., 4026., 4152., 2916., 1533., 1362., 2871., 4530., 4656., 4782., 4908., 5034., 3525., 1848., 1135., 2378., 3731., 3824., 3917., 4010., 4103., 2858., 1491.,  688., 1435., 2242., 2293., 2344., 2395., 2446., 1697.,  882.,   19.,   58.,  118.,  178.,  238.,  298.,  358.,  266.,  147.,  174.,  398.,  674.,  803.,  932., 1061., 1190.,  858.,  462.,  486., 1062., 1731., 1938., 2145., 2352., 2559., 1818.,  966.,  948., 2007., 3180., 3387., 3594., 3801., 4008., 2805., 1470., 1410., 2952., 4629., 4836., 5043., 5250., 5457., 3792., 1974., 1872., 3897., 6078., 6285., 6492., 6699., 6906., 4779., 2478., 2334., 4842., 7527., 7734., 7941., 8148., 8355., 5766., 2982., 1846., 3818., 5918., 6065., 6212., 6359., 6506., 4478., 2310., 1075., 2218., 3430., 3508., 3586., 3664., 3742., 2570., 1323.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236., 17096., 20382., 22908., 24466., 25094., 25082., 21308., 16774., 14248., 12476., 15137., 18226., 21175., 21041., 20395., 15890., 13797., 11004., 10800., 11348., 14312., 15916., 15684., 14940., 13960., 12420., 10192.,  6672.,  8652., 10968., 11764., 10924., 11876., 10808.,  8988.,  7856., 10516., 13195., 16262., 19021., 18935., 18593., 14774.,  9983.,  7700., 14136., 15234., 16772., 19214., 19026., 18454., 15556., 13642., 12088., 14300., 17897., 22114., 26303., 26117., 25547., 21554., 16277., 13180., 17140., 20403., 24278., 26069., 25243., 26081., 23286., 19215., 15284., 13836., 17277., 21322., 25547., 26385., 26839., 22810., 17513., 14412., 16920., 18954., 21524., 25094., 25082., 24686., 20564., 17330., 14360., 12260., 14951., 18110., 21041., 20395., 19493., 17774., 15131., 11876.,  8528., 11132., 14136., 15684., 14940., 15988., 14712., 12748., 10064.,  7440.,  9524., 10088., 10924., 11876., 12572., 11016.,  9668.,  8240., 10844., 13633., 16114., 18935., 18593., 17995., 13586., 10053.,  7356., 13384., 14526., 16572., 19026., 18454., 18490., 17020., 15174., 13160., 14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236., 17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596., 14244., 17847., 22110., 26385., 26839., 26653., 21790., 19027., 15236., 15464., 17622., 22412., 25082., 24686., 23650., 20748., 16862., 13224., 13036., 15885., 19242., 20395., 19493., 20127., 17770., 14449., 10604.,  8144., 10884., 14056., 14940., 15988., 16524., 14728., 12212.,  8944.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  185.,  227.,  222.,  149.,   70.,  244.,  538.,  694.,  850., 1006., 1162.,  996.,  614.,  363., 1002., 1845., 1963., 1953., 2295., 2637., 2082., 1211.,  897., 2110., 3183., 2917., 2523., 2865., 3207., 2502., 1441., 1047., 2450., 3369., 2719., 1845., 1963., 1953., 1578.,  935.,  717., 1702., 2979., 3321., 3183., 2917., 2523., 1998., 1165.,  867., 2042., 3549., 3891., 3369., 2719., 1845., 1426.,  659.,  526., 1252., 2194., 2494., 2794., 3094., 2914., 1972.,  718.,  581., 1302., 2171., 2357., 2543., 2729., 2051., 1150.,   53.,   59.,  202.,  437.,  695.,  953., 1211., 1469., 1122.,  635.,  682., 1612., 2806., 3394., 3982., 4570., 5158., 3804., 2090., 2037., 4470., 6043., 5401., 4631., 5365., 6099., 3902., 2165., 2931., 5402., 6669., 5643., 4489., 5223., 5957., 3250., 1859., 3441., 5566., 6143., 6781., 6043., 5401., 4631., 3046., 1713., 2319., 4386., 6833., 7567., 6669., 5643., 4489., 2394., 1407., 2829., 4550., 6691., 7425., 6143., 6781., 6043., 3694., 1261., 1570., 3004., 4670., 5146., 5622., 6098., 4942., 2124.,  226., 1355., 1546., 1829., 1975., 2121., 2267.,  397.,  226.,   11.,   17.,   62.,  143.,  233.,  323.,  413.,  503.,  422.,  257.,  206.,  548., 1042., 1294., 1546., 1798., 2050., 1620.,  942.,  735., 1794., 2849., 2855., 2733., 3219., 3705., 2842., 1615., 1349., 3062., 4427., 4049., 3543., 4029., 4515., 3422., 1925., 1579., 3562., 4853., 4091., 2849., 2855., 2733., 2146., 1243., 1073., 2462., 4191., 4677., 4427., 4049., 3543., 2726., 1553., 1303., 2962., 5001., 5487., 4853., 4091., 2849., 2058.,  871.,  758., 1748., 2986., 3382., 3778., 4174., 3834., 2532.,  886.,  753., 1662., 2735., 2969., 3203., 3437., 2551., 1414.,   65.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  7440.,  8548., 11288., 11340., 13404., 11884., 11288.,  8004.,  7440.,  5816.,  7294.,  7956., 11034., 10450., 10730.,  7828.,  7726.,  5816.,  4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  4448.,  6456.,  6672.,  8424.,  7784.,  8936.,  6672.,  5944.,  4448.,  6200.,  6998.,  8964.,  9346., 11034.,  9906.,  8964.,  6694.,  6200.,  6672.,  8916., 10008., 13404., 11340., 12092.,  9592.,  9556.,  6672.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  6672.,  8916., 10008., 13404., 11884., 12764.,  9336.,  9140.,  6672.,  6200.,  6694.,  9508., 10450., 10730.,  9218.,  9092.,  6998.,  6200.,  4448.,  6456.,  6672.,  8424.,  7784.,  8936.,  6672.,  5944.,  4448.,  4960.,  5560.,  7440.,  7784.,  8936.,  7784.,  7440.,  5560.,  4960.,  5816.,  7294.,  7956., 11034.,  9906., 10058.,  8084.,  8142.,  5816.,  7440.,  8548., 11288., 11340., 12092., 11468., 11032.,  8676.,  7440.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  7440.,  8676., 11704., 11884., 12764., 11340., 10616.,  8132.,  7440.,  5304.,  8142.,  9268., 10730.,  9218., 11034.,  8724.,  7294.,  5304.,  4960.,  5560.,  7440.,  7784.,  8936.,  7784.,  7440.,  5560.,  4960.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,  2314.,  4420.,  7214.,  5654.,  6462.,  8614., 10766.,  7908.,  3082.,  5010.,  8596.,  8070.,  7214.,  5654.,  6462.,  8614.,  6452.,  2514.,  4314., 10404., 11678.,  8070.,  7214.,  5654.,  6462.,  4996.,  1946.,  3618.,  8820., 12918., 11678.,  8070.,  7214.,  5654.,  3540.,  1378.,  2922.,  7236., 10766., 12918., 11678.,  8070.,  7214.,  3428.,   810.,  2156.,  5368.,  7908.,  9748., 11588., 10036.,  6116.,  3768.,   300.,  1118.,  2828.,  3850.,  4802.,  5754.,  6706.,  4266.,   620.,    30.,    70.,   284.,   706.,  1210.,  1714.,  2218.,  2722.,  2428.,  1542.,   988.,  2072.,  3700.,  3428.,  5012.,  6596.,  8180.,  6808.,  4124.,  3266.,  5684.,  8278.,  5758.,  6118.,  8334., 10550.,  6484.,  4162.,  6282.,  6916., 10606.,  8278.,  5758.,  6118.,  8334.,  5156.,  3402.,  5394.,  9364., 11078., 10606.,  8278.,  5758.,  6118.,  3828.,  2642.,  4506.,  7908., 12766., 11078., 10606.,  8278.,  5758.,  2500.,  1882.,  3618.,  6452., 10550., 12766., 11078., 10606.,  8278.,  3028.,  1122.,  2556.,  4440.,  7124.,  8836., 10548.,  8356.,  7380.,  3608.,   444.,  1286.,  1884.,  2690.,  3322.,  3954.,  4586.,  1314.,   828.,    70.,   110.,   428.,  1018.,  1714.,  2410.,  3106.,  3802.,  3212.,  1966.,  1516.,  2744.,  4644.,  4244.,  6212.,  8180., 10148.,  8248.,  4908.,  3898.,  6436.,  8830.,  5350.,  5262.,  7542.,  9822.,  8452.,  5242.,  3650.,  8820., 12630.,  8830.,  5350.,  5262.,  7542.,  6740.,  4290.,  3082.,  7812., 14062., 12630.,  8830.,  5350.,  5262.,  5028.,  3338.,  2514.,  6484., 12102., 14062., 12630.,  8830.,  5350.,  3316.,  2386.,  1946.,  5156.,  9822., 12102., 14062., 12630.,  8830.,  3972.,  1434.,  1100.,  3000.,  5828.,  7412.,  8996., 10260.,  8132.,  4280.,   588.,   110.,   428.,  1018.,  1330.,  1642.,  1954.,  1946.,  1356.,   110.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7254.,  7720.,  9212.,  9804., 11243., 11936., 12913., 13714., 12466., 13252., 12819., 13622., 10801., 11492.,  8352.,  8924.,  6482.,  6928.,  7152.,  7536.,  9201.,  9688., 10828., 11392., 11757., 12404., 11389., 12014., 11245., 11880.,  9376.,  9920.,  7133.,  7580.,  5816.,  6160.,  5302.,  5568.,  6157.,  6494.,  7183.,  7596.,  8230.,  8724.,  8067.,  8564.,  8640.,  9172.,  7337.,  7808.,  5749.,  6154.,  4442.,  4776.,  4176.,  4416.,  4442.,  4744.,  5888.,  6256.,  7050.,  7488.,  7378.,  7812.,  7866.,  8328.,  7224.,  7632.,  6354.,  6704.,  5248.,  5536.,  3568.,  3840.,  4462.,  4812.,  5536.,  5968.,  5870.,  6356.,  5278.,  5760.,  5646.,  6124.,  5320.,  5728.,  4742.,  5076.,  4032.,  4288.,  5566.,  5932.,  6934.,  7404.,  8527.,  9106., 10003., 10664., 10108., 10772., 10149., 10816.,  8669.,  9242.,  6850.,  7324.,  5098.,  5468.,  7296.,  7728.,  8719.,  9258., 10380., 11032., 11491., 12230., 10887., 11604., 10155., 10850.,  8232.,  8832.,  6971.,  7470.,  6040.,  6432.,  7406.,  7876.,  9327.,  9916., 11531., 12246., 13232., 14048., 12913., 13714., 12466., 13252., 10621., 11302.,  8359.,  8928.,  6658.,  7108.,  7030.,  7496.,  9220.,  9804., 11691., 12400., 12921., 13730., 12730., 13524., 12411., 13190., 10737., 11412.,  8648.,  9212.,  6386.,  6832.,  7166.,  7628.,  8729.,  9308., 10571., 11274., 12578., 13412., 12643., 13462., 12580., 13384., 11013., 11714.,  9033.,  9624.,  7170.,  7644.,  8008.,  8448.,  9093.,  9642., 10440., 11104., 12669., 13454., 12813., 13576., 12829., 13570., 11076., 11720.,  8937.,  9478.,  7232.,  7664.,  6918.,  7300.,  8498.,  8972., 10291., 10862., 11603., 12276., 10704., 11348.,  9677., 10292.,  8713.,  9246.,  7422.,  7868.,  5890.,  6244.,  5664.,  5952.,  6698.,  7052.,  7896.,  8320.,  8274.,  8772.,  7418.,  7880.,  7458.,  7884.,  6496.,  6864.,  5298.,  5604.,  3856.,  4096.,  3232.,  3488.,  4214.,  4520.,  5320.,  5680.,  6558.,  6976.,  6670.,  7084.,  6718.,  7128.,  5504.,  5840.,  4510.,  4800.,  3984.,  4224.,  4638.,  4928.,  5503.,  5854.,  6507.,  6924.,  7660.,  8148.,  7445.,  7936.,  7166.,  7660.,  5301.,  5712.,  4047.,  4402.,  3490.,  3784.,  4936.,  5296.,  5215.,  5656.,  6704.,  7232.,  8391.,  9012.,  8843.,  9474.,  9231.,  9872.,  8148.,  8688.,  7043.,  7508.,  5840.,  6224.,  7126.,  7592.,  8652.,  9228., 10443., 11136., 12417., 13234., 12578., 13412., 12643., 13462., 10513., 11204.,  8720.,  9308.,  7026.,  7504.,  8478.,  8940.,  9569., 10140., 10923., 11610., 12170., 12980., 12907., 13734., 13100., 13912., 11397., 12082.,  9457., 10040.,  7906.,  8380.,  7270.,  7728.,  9078.,  9644., 11147., 11828., 12819., 13622., 13108., 13928., 12405., 13210.,  9977., 10656.,  8786.,  9364.,  7250.,  7720.,  7264.,  7632.,  8697.,  9148., 10340., 10880., 11245., 11880., 11037., 11682., 10413., 11036.,  9160.,  9680.,  7605.,  8048.,  6056.,  6416.,  5494.,  5768.,  6423.,  6778.,  7543.,  7984.,  8640.,  9172.,  9213.,  9780.,  8986.,  9556.,  7433.,  7932.,  5575.,  5998.,  4042.,  4384.,  3792.,  4032.,  5146.,  5456.,  6672.,  7056.,  7866.,  8328.,  8354.,  8844.,  8618.,  9104.,  7784.,  8208.,  6706.,  7064.,  5376.,  5664.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    26.,    32.,    38.,    44.,    50.,    56.,    62.,    68.,    59.,    64.,    39.,    42.,    19.,    24.,    64.,    76.,   139.,   160.,   181.,   202.,   223.,   244.,   265.,   286.,   307.,   328.,   260.,   276.,   159.,   168.,    96.,   108.,   261.,   288.,   501.,   546.,   591.,   636.,   681.,   726.,   771.,   816.,   861.,   906.,   687.,   720.,   402.,   420.,   264.,   276.,   639.,   666.,  1131.,  1176.,  1221.,  1266.,  1311.,  1356.,  1401.,  1446.,  1491.,  1536.,  1149.,  1182.,   654.,   672.,   432.,   444.,  1017.,  1044.,  1761.,  1806.,  1851.,  1896.,  1941.,  1986.,  2031.,  2076.,  2121.,  2166.,  1611.,  1644.,   906.,   924.,   600.,   612.,  1395.,  1422.,  2391.,  2436.,  2481.,  2526.,  2571.,  2616.,  2661.,  2706.,  2751.,  2796.,  2073.,  2106.,  1158.,  1176.,   768.,   780.,  1773.,  1800.,  3021.,  3066.,  3111.,  3156.,  3201.,  3246.,  3291.,  3336.,  3381.,  3426.,  2535.,  2568.,  1410.,  1428.,   837.,   848.,  1852.,  1876.,  3049.,  3088.,  3127.,  3166.,  3205.,  3244.,  3283.,  3322.,  3361.,  3400.,  2448.,  2476.,  1329.,  1344.,   595.,   602.,  1289.,  1304.,  2084.,  2108.,  2132.,  2156.,  2180.,  2204.,  2228.,  2252.,  2276.,  2300.,  1631.,  1648.,   873.,   882.,    10.,    20.,    41.,    62.,    95.,   128.,   161.,   194.,   227.,   260.,   293.,   326.,   359.,   392.,   275.,   298.,   156.,   168.,   163.,   186.,   388.,   436.,   679.,   754.,   829.,   904.,   979.,  1054.,  1129.,  1204.,  1279.,  1354.,   944.,   996.,   519.,   546.,   501.,   540.,  1125.,  1206.,  1878.,  2004.,  2130.,  2256.,  2382.,  2508.,  2634.,  2760.,  2886.,  3012.,  2091.,  2178.,  1131.,  1176.,  1047.,  1086.,  2259.,  2340.,  3642.,  3768.,  3894.,  4020.,  4146.,  4272.,  4398.,  4524.,  4650.,  4776.,  3309.,  3396.,  1761.,  1806.,  1593.,  1632.,  3393.,  3474.,  5406.,  5532.,  5658.,  5784.,  5910.,  6036.,  6162.,  6288.,  6414.,  6540.,  4527.,  4614.,  2391.,  2436.,  2139.,  2178.,  4527.,  4608.,  7170.,  7296.,  7422.,  7548.,  7674.,  7800.,  7926.,  8052.,  8178.,  8304.,  5745.,  5832.,  3021.,  3066.,  2685.,  2724.,  5661.,  5742.,  8934.,  9060.,  9186.,  9312.,  9438.,  9564.,  9690.,  9816.,  9942., 10068.,  6963.,  7050.,  3651.,  3696.,  2241.,  2270.,  4696.,  4756.,  7369.,  7462.,  7555.,  7648.,  7741.,  7834.,  7927.,  8020.,  8113.,  8206.,  5652.,  5716.,  2949.,  2982.,  1360.,  1376.,  2837.,  2870.,  4433.,  4484.,  4535.,  4586.,  4637.,  4688.,  4739.,  4790.,  4841.,  4892.,  3359.,  3394.,  1746.,  1764.,    19.,    38.,    77.,   116.,   176.,   236.,   296.,   356.,   416.,   476.,   536.,   596.,   656.,   716.,   491.,   532.,   273.,   294.,   307.,   348.,   712.,   796.,  1219.,  1348.,  1477.,  1606.,  1735.,  1864.,  1993.,  2122.,  2251.,  2380.,  1628.,  1716.,   879.,   924.,   906.,   972.,  1989.,  2124.,  3255.,  3462.,  3669.,  3876.,  4083.,  4290.,  4497.,  4704.,  4911.,  5118.,  3495.,  3636.,  1860.,  1932.,  1830.,  1896.,  3879.,  4014.,  6153.,  6360.,  6567.,  6774.,  6981.,  7188.,  7395.,  7602.,  7809.,  8016.,  5469.,  5610.,  2868.,  2940.,  2754.,  2820.,  5769.,  5904.,  9051.,  9258.,  9465.,  9672.,  9879., 10086., 10293., 10500., 10707., 10914.,  7443.,  7584.,  3876.,  3948.,  3678.,  3744.,  7659.,  7794., 11949., 12156., 12363., 12570., 12777., 12984., 13191., 13398., 13605., 13812.,  9417.,  9558.,  4884.,  4956.,  4602.,  4668.,  9549.,  9684., 14847., 15054., 15261., 15468., 15675., 15882., 16089., 16296., 16503., 16710., 11391., 11532.,  5892.,  5964.,  3645.,  3692.,  7540.,  7636., 11689., 11836., 11983., 12130., 12277., 12424., 12571., 12718., 12865., 13012.,  8856.,  8956.,  4569.,  4620.,  2125.,  2150.,  4385.,  4436.,  6782.,  6860.,  6938.,  7016.,  7094.,  7172.,  7250.,  7328.,  7406.,  7484.,  5087.,  5140.,  2619.,  2646.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 15128., 17008., 18409., 20771., 20248., 23020., 24437., 27675., 24315., 27561., 24961., 28215., 19940., 22696., 16953., 19283., 14000., 15848., 15144., 16888., 18160., 20332., 20772., 23292., 22404., 25320., 22672., 25540., 21660., 24480., 18076., 20436., 13520., 15500., 10360., 11912., 11632., 12952., 14741., 16363., 16660., 18624., 18493., 20839., 17951., 20321., 18433., 20827., 15480., 17524., 13573., 15355., 10456., 11936., 11184., 12304., 12168., 13520., 14792., 16408., 16048., 17960., 15608., 17488., 14144., 15992., 12344., 13896.,  9608., 10960.,  7824.,  8944.,  7056.,  8176.,  9368., 10720., 12072., 13688., 13600., 15384., 12456., 14208., 12848., 14568.,  9880., 11304.,  7192.,  8288.,  5584.,  6448., 10088., 11440., 10923., 12585., 14296., 16308., 16863., 19137., 16673., 18971., 15971., 18293., 13660., 15624., 10427., 11993.,  8848., 10104., 13800., 15416., 15296., 17244., 17156., 19484., 20500., 23128., 19904., 22484., 18540., 21072., 13980., 16148., 11520., 13276.,  9368., 10792., 15056., 16968., 18439., 20777., 21260., 24080., 23791., 27021., 24437., 27675., 24315., 27561., 20536., 23340., 15607., 17913., 13608., 15488., 14872., 16752., 18233., 20531., 21912., 24684., 24389., 27563., 23755., 26937., 24401., 27591., 20324., 23080., 16265., 18531., 11952., 13800., 14688., 16536., 17003., 19261., 20516., 23240., 24315., 27561., 24961., 28215., 24839., 28101., 21744., 24580., 17787., 20141., 14488., 16432., 15096., 16776., 17332., 19360., 19484., 21908., 22672., 25540., 21660., 24480., 21928., 24700., 17972., 20364., 14516., 16480., 10792., 12408., 11912., 13136., 14795., 16361., 16440., 18388., 17951., 20321., 18433., 20827., 18403., 20821., 17244., 19400., 14651., 16505., 10896., 12408.,  9680., 10672., 12448., 13704., 14744., 16296., 15608., 17488., 14144., 15992., 14216., 16032., 12008., 13624., 10752., 12136.,  8336.,  9456.,  7824.,  8944., 10064., 11448., 11128., 12680., 12456., 14208., 12848., 14568., 12728., 14416.,  8936., 10296.,  7376.,  8504.,  5328.,  6192.,  9440., 10824., 12257., 13991., 14268., 16264., 16673., 18971., 15971., 18293., 16805., 19151., 13600., 15548., 11153., 12791.,  9032., 10320., 13112., 14664., 14404., 16336., 16956., 19188., 19904., 22484., 18540., 21072., 18296., 20908., 14836., 17036., 12836., 14704., 10056., 11544., 15128., 17008., 18409., 20771., 20248., 23020., 24437., 27675., 24315., 27561., 24961., 28215., 19940., 22696., 16953., 19283., 14000., 15848., 15456., 17304., 18715., 21037., 21668., 24392., 23755., 26937., 24401., 27591., 23767., 26965., 20496., 23204., 16075., 18365., 12856., 14672., 13736., 15552., 17997., 20279., 21392., 24196., 24961., 28215., 24839., 28101., 25485., 28755., 21148., 23936., 18621., 20999., 14368., 16280., 14536., 16152., 16600., 18612., 20596., 23052., 21660., 24480., 21928., 24700., 20916., 23640., 17772., 20068., 13464., 15412., 10872., 12424., 12032., 13288., 14945., 16583., 16572., 18632., 18433., 20827., 18403., 20821., 19397., 21839., 17376., 19516., 13841., 15639.,  9192., 10608.,  9808., 10800., 12568., 13856., 14792., 16408., 14144., 15992., 14216., 16032., 13264., 15048., 12344., 13896., 10264., 11552.,  6960.,  7952.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   28.,   48.,   85.,  127.,  169.,  211.,  253.,  295.,  337.,  379.,  421.,  463.,  416.,  452.,  281.,  303.,  112.,  148.,  324.,  412.,  636.,  792.,  596.,  752.,  908., 1064., 1220., 1376., 1532., 1688., 1324., 1444.,  824.,  892.,  561.,  651., 1048., 1252., 1765., 2107., 1489., 1831., 1821., 2163., 2505., 2847., 3189., 3531., 2628., 2880., 1581., 1719., 1245., 1335., 2112., 2316., 2905., 3247., 1765., 2107., 1489., 1831., 1821., 2163., 2505., 2847., 2124., 2376., 1305., 1443., 1065., 1155., 2568., 2772., 3693., 4035., 2905., 3247., 1765., 2107., 1489., 1831., 1821., 2163., 1620., 1872., 1029., 1167.,  885.,  975., 2160., 2364., 3873., 4215., 3693., 4035., 2905., 3247., 1765., 2107., 1489., 1831., 1116., 1368.,  753.,  891.,  705.,  795., 1752., 1956., 3189., 3531., 3873., 4215., 3693., 4035., 2905., 3247., 1765., 2107.,  964., 1216.,  477.,  615.,  508.,  592., 1276., 1460., 2336., 2636., 2936., 3236., 3536., 3836., 3272., 3572., 2400., 2700.,  932., 1148.,  228.,  344.,  257.,  311.,  660.,  776., 1225., 1411., 1597., 1783., 1969., 2155., 2341., 2527., 1849., 2035., 1080., 1212.,   53.,  123.,   59.,  137.,  280.,  444.,  679.,  937., 1195., 1453., 1711., 1969., 2227., 2485., 2743., 3001., 2108., 2288., 1199., 1293., 1228., 1408., 1692., 2068., 2544., 3132., 2216., 2804., 3392., 3980., 4568., 5156., 5744., 6332., 4420., 4828., 2516., 2728., 2595., 2901., 4300., 4808., 5259., 5993., 3463., 4197., 3427., 4161., 4895., 5629., 6363., 7097., 3832., 4260., 2271., 2497., 3999., 4305., 5012., 5520., 7023., 7757., 5259., 5993., 3463., 4197., 3427., 4161., 4895., 5629., 2976., 3404., 1819., 2045., 3387., 3693., 6012., 6520., 7283., 8017., 7023., 7757., 5259., 5993., 3463., 4197., 3427., 4161., 2120., 2548., 1367., 1593., 2775., 3081., 4996., 5504., 7831., 8565., 7283., 8017., 7023., 7757., 5259., 5993., 3463., 4197., 1264., 1692.,  915., 1141., 2163., 2469., 3980., 4488., 6363., 7097., 7831., 8565., 7283., 8017., 7023., 7757., 5259., 5993., 1912., 2340.,  463.,  689., 1336., 1564., 2356., 2700., 3700., 4176., 4652., 5128., 5604., 6080., 4540., 5016., 3764., 4240., 1852., 2100.,  128.,  260.,  599.,  725.,  880., 1012., 1211., 1357., 1503., 1649., 1795., 1941., 2087., 2233.,  363.,  509.,  212.,  232.,   11.,   25.,   17.,   39.,   84.,  136.,  217.,  307.,  397.,  487.,  577.,  667.,  757.,  847.,  937., 1027.,  792.,  860.,  485.,  523.,  360.,  428.,  628.,  780., 1060., 1312.,  956., 1208., 1460., 1712., 1964., 2216., 2468., 2720., 2012., 2196., 1200., 1300., 1013., 1151., 1792., 2092., 2641., 3127., 2141., 2627., 2505., 2991., 3477., 3963., 4449., 4935., 3564., 3912., 2097., 2283., 1857., 1995., 3176., 3476., 4261., 4747., 2641., 3127., 2141., 2627., 2505., 2991., 3477., 3963., 2868., 3216., 1725., 1911., 1581., 1719., 3696., 3996., 5273., 5759., 4261., 4747., 2641., 3127., 2141., 2627., 2505., 2991., 2172., 2520., 1353., 1539., 1305., 1443., 3096., 3396., 5421., 5907., 5273., 5759., 4261., 4747., 2641., 3127., 2141., 2627., 1476., 1824.,  981., 1167., 1029., 1167., 2496., 2796., 4449., 4935., 5421., 5907., 5273., 5759., 4261., 4747., 2641., 3127., 1388., 1736.,  609.,  795.,  692.,  808., 1708., 1956., 3080., 3476., 3872., 4268., 4664., 5060., 4336., 4732., 3144., 3540., 1236., 1516.,  284.,  432.,  333.,  403.,  844.,  992., 1549., 1783., 2017., 2251., 2485., 2719., 2953., 3187., 2301., 2535., 1328., 1492.,   65.,  151.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  6192.,  9456.,  5692.,  9772.,  9208., 13976.,  7940., 13524., 10708., 16420.,  8356., 14196.,  9624., 14648.,  5692.,  9772.,  6192.,  9456.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4726.,  8094.,  7612., 11692.,  6874., 11730.,  9010., 13802.,  6538., 11266.,  7532., 11484.,  4726.,  8094.,  5160.,  7880.,  4656.,  7920.,  7612., 11692.,  7320., 12344., 11044., 16884.,  8020., 13732., 10628., 16212.,  6904., 11672.,  7612., 11692.,  4656.,  7920.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  4656.,  7920.,  7532., 11484.,  6904., 11672., 10708., 16420.,  8356., 14196., 10964., 16676.,  6648., 11416.,  7532., 11484.,  4656.,  7920.,  5160.,  7880.,  4726.,  8094.,  7612., 11692.,  6874., 11730.,  9010., 13802.,  6538., 11266.,  7532., 11484.,  4726.,  8094.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6302.,  9734.,  6028., 10236.,  9010., 13802.,  6538., 11266.,  8674., 13338.,  5948., 10028.,  6302.,  9734.,  3880.,  6600.,  6192.,  9456.,  6028., 10236.,  9624., 14648.,  8020., 13732., 10628., 16212.,  8276., 13988.,  9368., 14392.,  6028., 10236.,  6192.,  9456.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  6192.,  9456.,  5948., 10028.,  9368., 14392.,  8356., 14196., 10964., 16676.,  7940., 13524.,  8952., 13720.,  5948., 10028.,  6192.,  9456.,  3880.,  6600.,  6302.,  9734.,  6028., 10236.,  9010., 13802.,  6538., 11266.,  8674., 13338.,  5948., 10028.,  6302.,  9734.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1298.,  1610.,   578.,   890.,   932.,  1204.,   782.,   950.,   420.,   692.,  1528.,  2200.,  3388.,  4588.,  4444.,  5644.,  4988.,  6188.,  4700.,  5900.,  3388.,  4588.,  2712.,  3640.,  2116.,  2644.,  2002.,  2698.,  4300.,  5884.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  4572.,  6028.,  1250.,  1818.,  4002.,  4698.,  6892.,  8476.,  6686.,  8838.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  5372.,  6828.,  1458.,  2026.,  2610.,  3306.,  7116.,  8700.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  5148.,  6604.,  3202.,  3770.,  1538.,  2234.,  4780.,  6364.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  8574., 10726.,  6140.,  7596.,  2386.,  2954.,  2002.,  2698.,  4300.,  5884.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  4572.,  6028.,  1250.,  1818.,  3892.,  4548.,  6424.,  7864.,  5484.,  7324.,  6476.,  8316.,  7276.,  9116.,  7564.,  9404.,  5484.,  7324.,  3896.,  5080.,   340.,   740.,  1966.,  2390.,  5076.,  5988.,  3698.,  4650.,  1698.,  2650.,  3282.,  4234.,  5186.,  6138.,  3698.,  4650.,   580.,  1108.,    30.,    70.,    70.,   174.,   388.,   660.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1930.,  2434.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   884.,  1284.,  2200.,  3128.,  4524.,  6108.,  5836.,  7420.,  6636.,  8220.,  6092.,  7676.,  4524.,  6108.,  3384.,  4568.,  2580.,  3236.,  2762.,  3650.,  5372.,  6828.,  8534., 10750.,  8230., 10446.,  6902.,  9118.,  8646., 10862.,  8534., 10750.,  3340.,  4668.,  1754.,  2514.,  4890.,  5778.,  5148.,  6604.,  8646., 10862.,  8534., 10750.,  8230., 10446.,  6902.,  9118.,  8646., 10862.,  5420.,  6748.,  2090.,  2850.,  3114.,  4002.,  6140.,  7596.,  6902.,  9118.,  8646., 10862.,  8534., 10750.,  8230., 10446.,  6902.,  9118.,  6476.,  7804.,  3962.,  4722.,  2170.,  3058.,  4572.,  6028.,  8230., 10446.,  6902.,  9118.,  8646., 10862.,  8534., 10750.,  8230., 10446.,  4140.,  5468.,  3274.,  4034.,  2762.,  3650.,  5372.,  6828.,  8534., 10750.,  8230., 10446.,  6902.,  9118.,  8646., 10862.,  8534., 10750.,  3340.,  4668.,  1754.,  2514.,  4612.,  5396.,  4216.,  5400.,  6556.,  8268.,  6268.,  7980.,  6300.,  8012.,  5820.,  7532.,  6556.,  8268.,  3224.,  4152.,   548.,  1076.,  2262.,  2750.,  3428.,  3956.,  1066.,  1698.,  2010.,  2642.,  2442.,  3074.,  3706.,  4338.,  1066.,  1698.,   724.,   868.,    70.,   174.,   110.,   278.,   596.,   996.,  1586.,  2282.,  2978.,  3674.,  3026.,  3722.,  2562.,  3258.,  1586.,  2282.,  1860.,  2388.,  1374.,  1670.,  1348.,  1876.,  2872.,  4056.,  5660.,  7628.,  7228.,  9196.,  8284., 10252.,  7484.,  9452.,  5660.,  7628.,  4056.,  5496.,  3044.,  3828.,  3202.,  3770.,  5420.,  6748.,  8062., 10342.,  6862.,  9142.,  8734., 11014.,  9582., 11862.,  8062., 10342.,  4476.,  6188.,  2258.,  3210.,  2386.,  2954.,  6476.,  7804.,  9582., 11862.,  8062., 10342.,  6862.,  9142.,  8734., 11014.,  9582., 11862.,  6812.,  8524.,  2722.,  3674.,  1250.,  1818.,  4140.,  5468.,  8734., 11014.,  9582., 11862.,  8062., 10342.,  6862.,  9142.,  8734., 11014.,  8124.,  9836.,  4722.,  5674.,  1458.,  2026.,  3340.,  4668.,  6862.,  9142.,  8734., 11014.,  9582., 11862.,  8062., 10342.,  6862.,  9142.,  5532.,  7244.,  4162.,  5114.,  3202.,  3770.,  5420.,  6748.,  8062., 10342.,  6862.,  9142.,  8734., 11014.,  9582., 11862.,  8062., 10342.,  4476.,  6188.,  2258.,  3210.,  1940.,  2340.,  5080.,  6008.,  6604.,  8188.,  5036.,  6620.,  4300.,  5884.,  7148.,  8732.,  6604.,  8188.,  3896.,  5080.,   756.,  1412.,   190.,   230.,   756.,   900.,  1506.,  1818.,  1298.,  1610.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1188.,  1460.,   110.,   278.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7386.,  7852.,  8318.,  8784.,  9672., 10264., 10856., 11448., 11137., 11830., 12523., 13216., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088., 11651., 12454., 13257., 14060.,  9327., 10018., 10709., 11400.,  7556.,  8128.,  8700.,  9272.,  6054.,  6500.,  6946.,  7392.,  6304.,  6688.,  7072.,  7456.,  7931.,  8418.,  8905.,  9392.,  9508., 10072., 10636., 11200., 10451., 11098., 11745., 12392.,  9993., 10618., 11243., 11868.,  9951., 10586., 11221., 11856.,  7744.,  8288.,  8832.,  9376.,  5467.,  5914.,  6361.,  6808.,  3864.,  4208.,  4552.,  4896.,  4610.,  4876.,  5142.,  5408.,  5737.,  6074.,  6411.,  6748.,  6689.,  7102.,  7515.,  7928.,  7742.,  8236.,  8730.,  9224.,  7861.,  8358.,  8855.,  9352.,  8396.,  8928.,  9460.,  9992.,  7323.,  7794.,  8265.,  8736.,  5781.,  6186.,  6591.,  6996.,  4326.,  4660.,  4994.,  5328.,  4624.,  4864.,  5104.,  5344.,  5094.,  5396.,  5698.,  6000.,  6096.,  6464.,  6832.,  7200.,  6878.,  7316.,  7754.,  8192.,  7026.,  7460.,  7894.,  8328.,  7462.,  7924.,  8386.,  8848.,  6744.,  7152.,  7560.,  7968.,  5638.,  5988.,  6338.,  6688.,  4128.,  4416.,  4704.,  4992.,  3920.,  4192.,  4464.,  4736.,  4734.,  5084.,  5434.,  5784.,  5840.,  6272.,  6704.,  7136.,  6454.,  6940.,  7426.,  7912.,  5914.,  6396.,  6878.,  7360.,  6270.,  6748.,  7226.,  7704.,  5432.,  5840.,  6248.,  6656.,  4542.,  4876.,  5210.,  5544.,  3328.,  3584.,  3840.,  4096.,  5646.,  6012.,  6378.,  6744.,  6678.,  7148.,  7618.,  8088.,  8091.,  8670.,  9249.,  9828.,  9233.,  9894., 10555., 11216.,  8928.,  9592., 10256., 10920.,  8495.,  9162.,  9829., 10496.,  7421.,  7994.,  8567.,  9140.,  6442.,  6916.,  7390.,  7864.,  5282.,  5652.,  6022.,  6392.,  7184.,  7616.,  8048.,  8480.,  8771.,  9310.,  9849., 10388., 10188., 10840., 11492., 12144., 11459., 12198., 12937., 13676., 10721., 11438., 12155., 12872.,  9727., 10422., 11117., 11812.,  7256.,  7856.,  8456.,  9056.,  6147.,  6646.,  7145.,  7644.,  5096.,  5488.,  5880.,  6272.,  7110.,  7580.,  8050.,  8520.,  9425., 10014., 10603., 11192., 11339., 12054., 12769., 13484., 12720., 13536., 14352., 15168., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088.,  9649., 10330., 11011., 11692.,  7093.,  7662.,  8231.,  8800.,  5826.,  6276.,  6726.,  7176.,  6426.,  6892.,  7358.,  7824.,  8416.,  9000.,  9584., 10168., 10737., 11446., 12155., 12864., 12361., 13170., 13979., 14788., 12250., 13044., 13838., 14632., 11883., 12662., 13441., 14220.,  9983., 10658., 11333., 12008.,  7900.,  8464.,  9028.,  9592.,  5350.,  5796.,  6242.,  6688.,  6766.,  7228.,  7690.,  8152.,  7663.,  8242.,  8821.,  9400.,  9623., 10326., 11029., 11732., 11906., 12740., 13574., 14408., 12307., 13126., 13945., 14764., 12452., 13256., 14060., 14864., 10605., 11306., 12007., 12708.,  8867.,  9458., 10049., 10640.,  6954.,  7428.,  7902.,  8376.,  7512.,  7952.,  8392.,  8832.,  8645.,  9194.,  9743., 10292.,  9496., 10160., 10824., 11488., 11369., 12154., 12939., 13724., 10911., 11674., 12437., 13200., 11221., 11962., 12703., 13444.,  9860., 10504., 11148., 11792.,  7925.,  8466.,  9007.,  9548.,  6160.,  6592.,  7024.,  7456.,  6862.,  7244.,  7626.,  8008.,  8330.,  8804.,  9278.,  9752.,  9163.,  9734., 10305., 10876.,  9637., 10310., 10983., 11656.,  9340.,  9984., 10628., 11272.,  8787.,  9402., 10017., 10632.,  7997.,  8530.,  9063.,  9596.,  6654.,  7100.,  7546.,  7992.,  4834.,  5188.,  5542.,  5896.,  5728.,  6016.,  6304.,  6592.,  6642.,  6996.,  7350.,  7704.,  7560.,  7984.,  8408.,  8832.,  7730.,  8228.,  8726.,  9224.,  6566.,  7028.,  7490.,  7952.,  6170.,  6596.,  7022.,  7448.,  4880.,  5248.,  5616.,  5984.,  4210.,  4516.,  4822.,  5128.,  3120.,  3360.,  3600.,  3840.,  3072.,  3328.,  3584.,  3840.,  4026.,  4332.,  4638.,  4944.,  5160.,  5520.,  5880.,  6240.,  6490.,  6908.,  7326.,  7744.,  6334.,  6748.,  7162.,  7576.,  6050.,  6460.,  6870.,  7280.,  3984.,  4320.,  4656.,  4992.,  3322.,  3612.,  3902.,  4192.,  2992.,  3232.,  3472.,  3712.,  3546.,  3836.,  4126.,  4416.,  4575.,  4926.,  5277.,  5628.,  5813.,  6230.,  6647.,  7064.,  7280.,  7768.,  8256.,  8744.,  7359.,  7850.,  8341.,  8832.,  7310.,  7804.,  8298.,  8792.,  5519.,  5930.,  6341.,  6752.,  4187.,  4542.,  4897.,  5252.,  3390.,  3684.,  3978.,  4272.,  5288.,  5648.,  6008.,  6368.,  5573.,  6014.,  6455.,  6896.,  7088.,  7616.,  8144.,  8672.,  8897.,  9518., 10139., 10760.,  9215.,  9846., 10477., 11108.,  9405., 10046., 10687., 11328.,  7660.,  8200.,  8740.,  9280.,  6421.,  6886.,  7351.,  7816.,  4864.,  5248.,  5632.,  6016.,  7130.,  7596.,  8062.,  8528.,  8056.,  8632.,  9208.,  9784.,  9025.,  9718., 10411., 11104., 11345., 12162., 12979., 13796., 11906., 12740., 13574., 14408., 12307., 13126., 13945., 14764., 10287., 10978., 11669., 12360.,  8788.,  9376.,  9964., 10552.,  7110.,  7588.,  8066.,  8544.,  7854.,  8316.,  8778.,  9240.,  9095.,  9666., 10237., 10808., 10087., 10774., 11461., 12148., 11114., 11924., 12734., 13544., 11803., 12630., 13457., 14284., 11436., 12248., 13060., 13872., 10109., 10794., 11479., 12164.,  8443.,  9026.,  9609., 10192.,  6890.,  7364.,  7838.,  8312.,  7554.,  8012.,  8470.,  8928.,  9366.,  9932., 10498., 11064., 10637., 11318., 11999., 12680., 11651., 12454., 13257., 14060., 11444., 12264., 13084., 13904., 11333., 12138., 12943., 13748.,  9419., 10098., 10777., 11456.,  8354.,  8932.,  9510., 10088.,  6670.,  7140.,  7610.,  8080.,  6672.,  7040.,  7408.,  7776.,  7919.,  8370.,  8821.,  9272.,  9260.,  9800., 10340., 10880.,  9951., 10586., 11221., 11856.,  9781., 10426., 11071., 11716.,  8811.,  9434., 10057., 10680.,  7016.,  7536.,  8056.,  8576.,  5327.,  5770.,  6213.,  6656.,  4456.,  4816.,  5176.,  5536.,  5306.,  5580.,  5854.,  6128.,  6443.,  6798.,  7153.,  7508.,  7381.,  7822.,  8263.,  8704.,  8396.,  8928.,  9460.,  9992.,  8931.,  9498., 10065., 10632.,  8922.,  9492., 10062., 10632.,  7551.,  8050.,  8549.,  9048.,  5671.,  6094.,  6517.,  6940.,  3902.,  4244.,  4586.,  4928.,  4304.,  4544.,  4784.,  5024.,  5790.,  6100.,  6410.,  6720.,  6752.,  7136.,  7520.,  7904.,  7462.,  7924.,  8386.,  8848.,  7898.,  8388.,  8878.,  9368.,  7918.,  8404.,  8890.,  9376.,  6952.,  7376.,  7800.,  8224.,  5566.,  5924.,  6282.,  6640.,  3744.,  4032.,  4320.,  4608.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    94.,   100.,   106.,   112.,   118.,   124.,   130.,   136.,   113.,   118.,   123.,   128.,    75.,    78.,    81.,    84.,    33.,    38.,    43.,    48.,   116.,   128.,   140.,   152.,   257.,   278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,   467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,   656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,   180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,  1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,  1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,  1812.,  1341.,  1374.,  1407.,  1440.,   786.,   804.,   822.,   840.,   516.,   528.,   540.,   552.,  1251.,  1278.,  1305.,  1332.,  2217.,  2262.,  2307.,  2352.,  2397.,  2442.,  2487.,  2532.,  2577.,  2622.,  2667.,  2712.,  2757.,  2802.,  2847.,  2892.,  2937.,  2982.,  3027.,  3072.,  2265.,  2298.,  2331.,  2364.,  1290.,  1308.,  1326.,  1344.,   852.,   864.,   876.,   888.,  2007.,  2034.,  2061.,  2088.,  3477.,  3522.,  3567.,  3612.,  3657.,  3702.,  3747.,  3792.,  3709.,  3754.,  3799.,  3844.,  3633.,  3678.,  3723.,  3768.,  3429.,  3474.,  3519.,  3564.,  2549.,  2582.,  2615.,  2648.,  1410.,  1428.,  1446.,  1464.,  1060.,  1072.,  1084.,  1096.,  2379.,  2406.,  2433.,  2460.,  3969.,  4014.,  4059.,  4104.,  4149.,  4194.,  4239.,  4284.,  3817.,  3862.,  3907.,  3952.,  3357.,  3402.,  3447.,  3492.,  2769.,  2814.,  2859.,  2904.,  2065.,  2098.,  2131.,  2164.,  1146.,  1164.,  1182.,  1200.,   884.,   896.,   908.,   920.,  1983.,  2010.,  2037.,  2064.,  3309.,  3354.,  3399.,  3444.,  3489.,  3534.,  3579.,  3624.,  2773.,  2818.,  2863.,  2908.,  1929.,  1974.,  2019.,  2064.,   957.,  1002.,  1047.,  1092.,   813.,   846.,   879.,   912.,   498.,   516.,   534.,   552.,   255.,   266.,   277.,   288.,   608.,   632.,   656.,   680.,  1067.,  1106.,  1145.,  1184.,  1223.,  1262.,  1301.,  1340.,  1379.,  1418.,  1457.,  1496.,  1535.,  1574.,  1613.,  1652.,  1691.,  1730.,  1769.,  1808.,  1284.,  1312.,  1340.,  1368.,   723.,   738.,   753.,   768.,   287.,   294.,   301.,   308.,   643.,   658.,   673.,   688.,  1072.,  1096.,  1120.,  1144.,  1168.,  1192.,  1216.,  1240.,  1264.,  1288.,  1312.,  1336.,  1360.,  1384.,  1408.,  1432.,  1456.,  1480.,  1504.,  1528.,  1069.,  1086.,  1103.,  1120.,   585.,   594.,   603.,   612.,    10.,    20.,    30.,    40.,    61.,    82.,   103.,   124.,   157.,   190.,   223.,   256.,   289.,   322.,   355.,   388.,   421.,   454.,   487.,   520.,   553.,   586.,   619.,   652.,   685.,   718.,   751.,   784.,   527.,   550.,   573.,   596.,   300.,   312.,   324.,   336.,   303.,   326.,   349.,   372.,   728.,   776.,   824.,   872.,  1283.,  1358.,  1433.,  1508.,  1583.,  1658.,  1733.,  1808.,  1883.,  1958.,  2033.,  2108.,  2183.,  2258.,  2333.,  2408.,  2483.,  2558.,  2633.,  2708.,  1836.,  1888.,  1940.,  1992.,  1011.,  1038.,  1065.,  1092.,   963.,  1002.,  1041.,  1080.,  2169.,  2250.,  2331.,  2412.,  3630.,  3756.,  3882.,  4008.,  4134.,  4260.,  4386.,  4512.,  4638.,  4764.,  4890.,  5016.,  5142.,  5268.,  5394.,  5520.,  5646.,  5772.,  5898.,  6024.,  4095.,  4182.,  4269.,  4356.,  2217.,  2262.,  2307.,  2352.,  2055.,  2094.,  2133.,  2172.,  4437.,  4518.,  4599.,  4680.,  7158.,  7284.,  7410.,  7536.,  7662.,  7788.,  7914.,  8040.,  8166.,  8292.,  8418.,  8544.,  8670.,  8796.,  8922.,  9048.,  9174.,  9300.,  9426.,  9552.,  6531.,  6618.,  6705.,  6792.,  3477.,  3522.,  3567.,  3612.,  3147.,  3186.,  3225.,  3264.,  6705.,  6786.,  6867.,  6948., 10686., 10812., 10938., 11064., 11190., 11316., 11442., 11568., 10414., 10540., 10666., 10792.,  9510.,  9636.,  9762.,  9888.,  8478.,  8604.,  8730.,  8856.,  6023.,  6110.,  6197.,  6284.,  3201.,  3246.,  3291.,  3336.,  2959.,  2998.,  3037.,  3076.,  6285.,  6366.,  6447.,  6528.,  9990., 10116., 10242., 10368., 10494., 10620., 10746., 10872.,  9334.,  9460.,  9586.,  9712.,  8046.,  8172.,  8298.,  8424.,  6630.,  6756.,  6882.,  7008.,  4747.,  4834.,  4921.,  5008.,  2541.,  2586.,  2631.,  2676.,  2387.,  2426.,  2465.,  2504.,  5097.,  5178.,  5259.,  5340.,  8142.,  8268.,  8394.,  8520.,  8646.,  8772.,  8898.,  9024.,  7102.,  7228.,  7354.,  7480.,  5430.,  5556.,  5682.,  5808.,  3630.,  3756.,  3882.,  4008.,  2703.,  2790.,  2877.,  2964.,  1497.,  1542.,  1587.,  1632.,   741.,   770.,   799.,   828.,  1652.,  1712.,  1772.,  1832.,  2741.,  2834.,  2927.,  3020.,  3113.,  3206.,  3299.,  3392.,  3485.,  3578.,  3671.,  3764.,  3857.,  3950.,  4043.,  4136.,  4229.,  4322.,  4415.,  4508.,  3048.,  3112.,  3176.,  3240.,  1641.,  1674.,  1707.,  1740.,   656.,   672.,   688.,   704.,  1417.,  1450.,  1483.,  1516.,  2287.,  2338.,  2389.,  2440.,  2491.,  2542.,  2593.,  2644.,  2695.,  2746.,  2797.,  2848.,  2899.,  2950.,  3001.,  3052.,  3103.,  3154.,  3205.,  3256.,  2203.,  2238.,  2273.,  2308.,  1170.,  1188.,  1206.,  1224.,    19.,    38.,    57.,    76.,   115.,   154.,   193.,   232.,   292.,   352.,   412.,   472.,   532.,   592.,   652.,   712.,   772.,   832.,   892.,   952.,  1012.,  1072.,  1132.,  1192.,  1252.,  1312.,  1372.,  1432.,   941.,   982.,  1023.,  1064.,   525.,   546.,   567.,   588.,   573.,   614.,   655.,   696.,  1340.,  1424.,  1508.,  1592.,  2309.,  2438.,  2567.,  2696.,  2825.,  2954.,  3083.,  3212.,  3341.,  3470.,  3599.,  3728.,  3857.,  3986.,  4115.,  4244.,  4373.,  4502.,  4631.,  4760.,  3168.,  3256.,  3344.,  3432.,  1713.,  1758.,  1803.,  1848.,  1746.,  1812.,  1878.,  1944.,  3843.,  3978.,  4113.,  4248.,  6303.,  6510.,  6717.,  6924.,  7131.,  7338.,  7545.,  7752.,  7959.,  8166.,  8373.,  8580.,  8787.,  8994.,  9201.,  9408.,  9615.,  9822., 10029., 10236.,  6849.,  6990.,  7131.,  7272.,  3648.,  3720.,  3792.,  3864.,  3594.,  3660.,  3726.,  3792.,  7623.,  7758.,  7893.,  8028., 12099., 12306., 12513., 12720., 12927., 13134., 13341., 13548., 13755., 13962., 14169., 14376., 14583., 14790., 14997., 15204., 15411., 15618., 15825., 16032., 10797., 10938., 11079., 11220.,  5664.,  5736.,  5808.,  5880.,  5442.,  5508.,  5574.,  5640., 11403., 11538., 11673., 11808., 17895., 18102., 18309., 18516., 18723., 18930., 19137., 19344., 17119., 17326., 17533., 17740., 15387., 15594., 15801., 16008., 13527., 13734., 13941., 14148.,  9497.,  9638.,  9779.,  9920.,  4992.,  5064.,  5136.,  5208.,  4858.,  4924.,  4990.,  5056., 10191., 10326., 10461., 10596., 16011., 16218., 16425., 16632., 16839., 17046., 17253., 17460., 14851., 15058., 15265., 15472., 12735., 12942., 13149., 13356., 10491., 10698., 10905., 11112.,  7429.,  7570.,  7711.,  7852.,  3936.,  4008.,  4080.,  4152.,  3890.,  3956.,  4022.,  4088.,  8211.,  8346.,  8481.,  8616., 12975., 13182., 13389., 13596., 13803., 14010., 14217., 14424., 11431., 11638., 11845., 12052.,  8931.,  9138.,  9345.,  9552.,  6303.,  6510.,  6717.,  6924.,  4593.,  4734.,  4875.,  5016.,  2496.,  2568.,  2640.,  2712.,  1227.,  1274.,  1321.,  1368.,  2696.,  2792.,  2888.,  2984.,  4415.,  4562.,  4709.,  4856.,  5003.,  5150.,  5297.,  5444.,  5591.,  5738.,  5885.,  6032.,  6179.,  6326.,  6473.,  6620.,  6767.,  6914.,  7061.,  7208.,  4812.,  4912.,  5012.,  5112.,  2559.,  2610.,  2661.,  2712.,  1025.,  1050.,  1075.,  1100.,  2191.,  2242.,  2293.,  2344.,  3502.,  3580.,  3658.,  3736.,  3814.,  3892.,  3970.,  4048.,  4126.,  4204.,  4282.,  4360.,  4438.,  4516.,  4594.,  4672.,  4750.,  4828.,  4906.,  4984.,  3337.,  3390.,  3443.,  3496.,  1755.,  1782.,  1809.,  1836.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2600., 3448., 4296., 5144., 2484., 3504., 4524., 5544., 3636., 4812., 5988., 7164., 3480., 4860., 6240., 7620., 4164., 5560., 6956., 8352., 3568., 4980., 6392., 7804., 3596., 4804., 6012., 7220., 2612., 3632., 4652., 5672., 2472., 3320., 4168., 5016., 1592., 2272., 2952., 3632., 2429., 3219., 4009., 4799., 2296., 3236., 4176., 5116., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2612., 3632., 4652., 5672., 2501., 3387., 4273., 5159., 2048., 2824., 3600., 4376., 1584., 2064., 2544., 3024., 1392., 1976., 2560., 3144., 2248., 2968., 3688., 4408., 2232., 3120., 4008., 4896., 2704., 3624., 4544., 5464., 2408., 3360., 4312., 5264., 2472., 3320., 4168., 5016., 2048., 2824., 3600., 4376., 1984., 2656., 3328., 4000., 1680., 2288., 2896., 3504., 2240., 3016., 3792., 4568., 2392., 3304., 4216., 5128., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2856., 3808., 4760., 5712., 1912., 2696., 3480., 4264., 1840., 2424., 3008., 3592., 1024., 1440., 1856., 2272., 2240., 3016., 3792., 4568., 2427., 3385., 4343., 5301., 3292., 4408., 5524., 6640., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2839., 4009., 5179., 6349., 2904., 3844., 4784., 5724., 1747., 2481., 3215., 3949., 1688., 2240., 2792., 3344., 2392., 3304., 4216., 5128., 3292., 4408., 5524., 6640., 3348., 4652., 5956., 7260., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 4152., 5532., 6912., 8292., 2908., 4052., 5196., 6340., 2764., 3688., 4612., 5536., 1864., 2584., 3304., 4024., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2839., 4009., 5179., 6349., 4152., 5532., 6912., 8292., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4252., 5680., 7108., 8536., 2991., 4193., 5395., 6597., 2880., 3864., 4848., 5832., 1912., 2696., 3480., 4264., 2904., 3844., 4784., 5724., 2908., 4052., 5196., 6340., 4164., 5560., 6956., 8352., 3568., 4980., 6392., 7804., 4252., 5680., 7108., 8536., 3172., 4412., 5652., 6892., 3128., 4196., 5264., 6332., 2392., 3304., 4216., 5128., 1840., 2424., 3008., 3592., 1747., 2481., 3215., 3949., 2764., 3688., 4612., 5536., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2991., 4193., 5395., 6597., 3128., 4196., 5264., 6332., 2427., 3385., 4343., 5301., 2392., 3200., 4008., 4816., 1024., 1440., 1856., 2272., 1688., 2240., 2792., 3344., 1864., 2584., 3304., 4024., 2704., 3624., 4544., 5464., 2408., 3360., 4312., 5264., 2880., 3864., 4848., 5832., 2392., 3304., 4216., 5128., 2392., 3200., 4008., 4816., 1728., 2400., 3072., 3744., 1984., 2656., 3328., 4000., 2072., 2880., 3688., 4496., 2776., 3688., 4600., 5512., 2432., 3416., 4400., 5384., 2856., 3808., 4760., 5712., 2256., 3176., 4096., 5016., 2248., 2968., 3688., 4408., 1368., 1920., 2472., 3024., 1280., 1696., 2112., 2528., 2072., 2880., 3688., 4496., 2817., 3783., 4749., 5715., 2736., 3836., 4936., 6036., 3605., 4815., 6025., 7235., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2348., 3272., 4196., 5120., 2137., 2879., 3621., 4363., 1520., 2104., 2688., 3272., 2776., 3688., 4600., 5512., 2736., 3836., 4936., 6036., 3900., 5172., 6444., 7716., 3516., 4944., 6372., 7800., 4152., 5532., 6912., 8292., 3556., 4952., 6348., 7744., 3508., 4684., 5860., 7036., 2512., 3484., 4456., 5428., 2296., 3080., 3864., 4648., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2839., 4009., 5179., 6349., 4152., 5532., 6912., 8292., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4252., 5680., 7108., 8536., 2991., 4193., 5395., 6597., 2880., 3864., 4848., 5832., 2256., 3176., 4096., 5016., 3353., 4483., 5613., 6743., 3556., 4952., 6348., 7744., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4925., 6595., 8265., 9935., 3656., 5100., 6544., 7988., 3553., 4779., 6005., 7231., 2584., 3600., 4616., 5632., 2248., 2968., 3688., 4408., 2348., 3272., 4196., 5120., 3508., 4684., 5860., 7036., 3568., 4980., 6392., 7804., 4252., 5680., 7108., 8536., 3656., 5100., 6544., 7988., 3772., 5044., 6316., 7588., 2876., 3992., 5108., 6224., 2776., 3688., 4600., 5512., 1368., 1920., 2472., 3024., 2137., 2879., 3621., 4363., 2512., 3484., 4456., 5428., 3453., 4631., 5809., 6987., 2991., 4193., 5395., 6597., 3553., 4779., 6005., 7231., 2876., 3992., 5108., 6224., 2817., 3783., 4749., 5715., 1920., 2696., 3472., 4248., 1280., 1696., 2112., 2528., 1520., 2104., 2688., 3272., 2296., 3080., 3864., 4648., 2408., 3360., 4312., 5264., 2880., 3864., 4848., 5832., 2584., 3600., 4616., 5632., 2776., 3688., 4600., 5512., 1920., 2696., 3472., 4248., 1936., 2544., 3152., 3760.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  305.,  347.,  389.,  431.,  377.,  419.,  461.,  503.,  321.,  363.,  405.,  447.,  137.,  179.,  221.,  263.,  228.,  264.,  300.,  336.,  193.,  215.,  237.,  259.,  100.,  136.,  172.,  208.,  356.,  444.,  532.,  620.,  800.,  956., 1112., 1268., 1072., 1228., 1384., 1540., 1216., 1372., 1528., 1684., 1136., 1292., 1448., 1604.,  800.,  956., 1112., 1268.,  636.,  756.,  876.,  996.,  508.,  576.,  644.,  712.,  477.,  567.,  657.,  747., 1012., 1216., 1420., 1624., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 1384., 1636., 1888., 2140.,  849.,  987., 1125., 1263.,  981., 1071., 1161., 1251., 1668., 1872., 2076., 2280., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1336., 1588., 1840., 2092.,  649.,  787.,  925., 1063.,  621.,  711.,  801.,  891., 1716., 1920., 2124., 2328., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2056., 2308., 2560., 2812.,  833.,  971., 1109., 1247.,  357.,  447.,  537.,  627., 1124., 1328., 1532., 1736., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2040., 2292., 2544., 2796., 1401., 1539., 1677., 1815.,  477.,  567.,  657.,  747., 1012., 1216., 1420., 1624., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 1384., 1636., 1888., 2140.,  849.,  987., 1125., 1263.,  952., 1036., 1120., 1204., 1548., 1732., 1916., 2100., 2108., 2408., 2708., 3008., 1580., 1880., 2180., 2480., 2044., 2344., 2644., 2944., 2380., 2680., 2980., 3280., 2108., 2408., 2708., 3008.,  964., 1180., 1396., 1612.,  368.,  484.,  600.,  716.,  473.,  527.,  581.,  635., 1232., 1348., 1464., 1580., 1445., 1631., 1817., 2003., 1197., 1383., 1569., 1755.,  821., 1007., 1193., 1379., 1565., 1751., 1937., 2123., 1445., 1631., 1817., 2003.,  940., 1072., 1204., 1336.,   53.,  123.,  193.,  263.,   59.,  137.,  215.,  293.,  436.,  600.,  764.,  928., 1163., 1421., 1679., 1937., 2195., 2453., 2711., 2969., 1979., 2237., 2495., 2753., 1635., 1893., 2151., 2409., 1163., 1421., 1679., 1937., 1200., 1380., 1560., 1740.,  823.,  917., 1011., 1105., 1072., 1252., 1432., 1612., 1724., 2100., 2476., 2852., 3140., 3728., 4316., 4904., 3988., 4576., 5164., 5752., 4708., 5296., 5884., 6472., 4052., 4640., 5228., 5816., 3140., 3728., 4316., 4904., 2004., 2412., 2820., 3228., 1480., 1692., 1904., 2116., 2079., 2385., 2691., 2997., 3832., 4340., 4848., 5356., 5195., 5929., 6663., 7397., 4867., 5601., 6335., 7069., 4283., 5017., 5751., 6485., 5491., 6225., 6959., 7693., 5195., 5929., 6663., 7397., 1996., 2424., 2852., 3280.,  755.,  981., 1207., 1433., 2871., 3177., 3483., 3789., 3528., 4036., 4544., 5052., 5491., 6225., 6959., 7693., 5195., 5929., 6663., 7397., 4867., 5601., 6335., 7069., 4283., 5017., 5751., 6485., 5491., 6225., 6959., 7693., 3548., 3976., 4404., 4832., 1355., 1581., 1807., 2033., 1647., 1953., 2259., 2565., 3512., 4020., 4528., 5036., 4283., 5017., 5751., 6485., 5491., 6225., 6959., 7693., 5195., 5929., 6663., 7397., 4867., 5601., 6335., 7069., 4283., 5017., 5751., 6485., 3820., 4248., 4676., 5104., 2339., 2565., 2791., 3017., 1671., 1977., 2283., 2589., 2856., 3364., 3872., 4380., 4867., 5601., 6335., 7069., 4283., 5017., 5751., 6485., 5491., 6225., 6959., 7693., 5195., 5929., 6663., 7397., 4867., 5601., 6335., 7069., 2204., 2632., 3060., 3488., 1659., 1885., 2111., 2337., 2079., 2385., 2691., 2997., 3832., 4340., 4848., 5356., 5195., 5929., 6663., 7397., 4867., 5601., 6335., 7069., 4283., 5017., 5751., 6485., 5491., 6225., 6959., 7693., 5195., 5929., 6663., 7397., 1996., 2424., 2852., 3280.,  755.,  981., 1207., 1433., 2500., 2728., 2956., 3184., 2436., 2780., 3124., 3468., 3296., 3772., 4248., 4724., 3216., 3692., 4168., 4644., 3232., 3708., 4184., 4660., 3120., 3596., 4072., 4548., 3296., 3772., 4248., 4724., 1628., 1876., 2124., 2372.,  156.,  288.,  420.,  552., 1103., 1229., 1355., 1481., 1660., 1792., 1924., 2056.,  295.,  441.,  587.,  733.,  783.,  929., 1075., 1221., 1143., 1289., 1435., 1581., 1727., 1873., 2019., 2165.,  295.,  441.,  587.,  733.,  184.,  204.,  224.,  244.,   11.,   25.,   39.,   53.,   17.,   39.,   61.,   83.,  128.,  180.,  232.,  284.,  365.,  455.,  545.,  635.,  725.,  815.,  905.,  995.,  733.,  823.,  913., 1003.,  613.,  703.,  793.,  883.,  365.,  455.,  545.,  635.,  444.,  512.,  580.,  648.,  333.,  371.,  409.,  447.,  316.,  384.,  452.,  520.,  660.,  812.,  964., 1116., 1320., 1572., 1824., 2076., 1720., 1972., 2224., 2476., 1992., 2244., 2496., 2748., 1784., 2036., 2288., 2540., 1320., 1572., 1824., 2076.,  940., 1124., 1308., 1492.,  724.,  824.,  924., 1024.,  833.,  971., 1109., 1247., 1660., 1960., 2260., 2560., 2833., 3319., 3805., 4291., 3305., 3791., 4277., 4763., 3521., 4007., 4493., 4979., 3481., 3967., 4453., 4939., 2833., 3319., 3805., 4291., 1904., 2252., 2600., 2948., 1077., 1263., 1449., 1635., 1401., 1539., 1677., 1815., 2444., 2744., 3044., 3344., 3481., 3967., 4453., 4939., 2833., 3319., 3805., 4291., 3305., 3791., 4277., 4763., 3521., 4007., 4493., 4979., 3481., 3967., 4453., 4939., 1984., 2332., 2680., 3028.,  941., 1127., 1313., 1499.,  849.,  987., 1125., 1263., 2364., 2664., 2964., 3264., 3521., 4007., 4493., 4979., 3481., 3967., 4453., 4939., 2833., 3319., 3805., 4291., 3305., 3791., 4277., 4763., 3521., 4007., 4493., 4979., 2832., 3180., 3528., 3876., 1189., 1375., 1561., 1747.,  649.,  787.,  925., 1063., 1644., 1944., 2244., 2544., 3305., 3791., 4277., 4763., 3521., 4007., 4493., 4979., 3481., 3967., 4453., 4939., 2833., 3319., 3805., 4291., 3305., 3791., 4277., 4763., 2688., 3036., 3384., 3732., 1821., 2007., 2193., 2379.,  833.,  971., 1109., 1247., 1660., 1960., 2260., 2560., 2833., 3319., 3805., 4291., 3305., 3791., 4277., 4763., 3521., 4007., 4493., 4979., 3481., 3967., 4453., 4939., 2833., 3319., 3805., 4291., 1904., 2252., 2600., 2948., 1077., 1263., 1449., 1635., 1296., 1412., 1528., 1644., 2108., 2356., 2604., 2852., 2756., 3152., 3548., 3944., 2100., 2496., 2892., 3288., 2692., 3088., 3484., 3880., 3156., 3552., 3948., 4344., 2756., 3152., 3548., 3944., 1268., 1548., 1828., 2108.,  456.,  604.,  752.,  900.,  613.,  683.,  753.,  823., 1576., 1724., 1872., 2020., 1801., 2035., 2269., 2503., 1489., 1723., 1957., 2191., 1049., 1283., 1517., 1751., 1985., 2219., 2453., 2687., 1801., 2035., 2269., 2503., 1156., 1320., 1484., 1648.,   65.,  151.,  237.,  323.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2700.,  6780., 10860., 14940.,  3160.,  7928., 12696., 17464.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3320.,  8344., 13368., 18392.,  2700.,  6780., 10860., 14940.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2700.,  6780., 10860., 14940.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  2620.,  6572., 10524., 14476.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2700.,  6780., 10860., 14940.,  3320.,  8344., 13368., 18392.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3160.,  7928., 12696., 17464.,  2700.,  6780., 10860., 14940.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2700.,  6780., 10860., 14940.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  2620.,  6572., 10524., 14476.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2780.,  6988., 11196., 15404.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  2700.,  6780., 10860., 14940.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2700.,  6780., 10860., 14940.,  3320.,  8344., 13368., 18392.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3160.,  7928., 12696., 17464.,  2700.,  6780., 10860., 14940.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2780.,  6988., 11196., 15404.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  2700.,  6780., 10860., 14940.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2306.,  3002.,  3698.,  4394.,  4316.,  5900.,  7484.,  9068.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  4748.,  6204.,  7660.,  9116.,  1202.,  1770.,  2338.,  2906.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2306.,  3002.,  3698.,  4394.,  4316.,  5900.,  7484.,  9068.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  4748.,  6204.,  7660.,  9116.,  1202.,  1770.,  2338.,  2906.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2116.,  2772.,  3428.,  4084.,  3800.,  5240.,  6680.,  8120.,  4220.,  6060.,  7900.,  9740.,  5500.,  7340.,  9180., 11020.,  4220.,  6060.,  7900.,  9740.,  5500.,  7340.,  9180., 11020.,  4220.,  6060.,  7900.,  9740.,  4152.,  5336.,  6520.,  7704.,   420.,   820.,  1220.,  1620.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,  2466.,  3418.,  4370.,  5322.,  2562.,  3514.,  4466.,  5418.,   500.,  1028.,  1556.,  2084.,    30.,    70.,   110.,   150.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   676.,  1076.,  1476.,  1876.,  2456.,  3384.,  4312.,  5240.,  3804.,  5388.,  6972.,  8556.,  4572.,  6156.,  7740.,  9324.,  3804.,  5388.,  6972.,  8556.,  4572.,  6156.,  7740.,  9324.,  3804.,  5388.,  6972.,  8556.,  3128.,  4312.,  5496.,  6680.,  1348.,  2004.,  2660.,  3316.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  3644.,  4972.,  6300.,  7628.,  2186.,  2946.,  3706.,  4466.,  2938.,  3826.,  4714.,  5602.,  2956.,  4412.,  5868.,  7324.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  3388.,  4716.,  6044.,  7372.,  1834.,  2594.,  3354.,  4114.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  3644.,  4972.,  6300.,  7628.,  2186.,  2946.,  3706.,  4466.,  2938.,  3826.,  4714.,  5602.,  2956.,  4412.,  5868.,  7324.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  3388.,  4716.,  6044.,  7372.,  1834.,  2594.,  3354.,  4114.,  1754.,  2642.,  3530.,  4418.,  4748.,  6204.,  7660.,  9116.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  6582.,  8798., 11014., 13230.,  5142.,  7358.,  9574., 11790.,  3644.,  4972.,  6300.,  7628.,  2186.,  2946.,  3706.,  4466.,  2452.,  3236.,  4020.,  4804.,  2104.,  3288.,  4472.,  5656.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  2456.,  3384.,  4312.,  5240.,   756.,  1284.,  1812.,  2340.,   310.,   798.,  1286.,  1774.,  2292.,  2820.,  3348.,  3876.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,  2778.,  3410.,  4042.,  4674.,   570.,  1202.,  1834.,  2466.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   110.,   278.,   446.,   614.,   932.,  1332.,  1732.,  2132.,  1378.,  2074.,  2770.,  3466.,  2306.,  3002.,  3698.,  4394.,  1378.,  2074.,  2770.,  3466.,  2306.,  3002.,  3698.,  4394.,  1378.,  2074.,  2770.,  3466.,  1524.,  2052.,  2580.,  3108.,   190.,   486.,   782.,  1078.,  1012.,  1540.,  2068.,  2596.,  3128.,  4312.,  5496.,  6680.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  3800.,  5240.,  6680.,  8120.,  1684.,  2468.,  3252.,  4036.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,  1202.,  1770.,  2338.,  2906.,  3644.,  4972.,  6300.,  7628.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,  1202.,  1770.,  2338.,  2906.,  3644.,  4972.,  6300.,  7628.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1810.,  2378.,  2946.,  3514.,  3388.,  4716.,  6044.,  7372.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  5854.,  8134., 10414., 12694.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   420.,   820.,  1220.,  1620.,  2456.,  3384.,  4312.,  5240.,  3548.,  5132.,  6716.,  8300.,  4828.,  6412.,  7996.,  9580.,  3548.,  5132.,  6716.,  8300.,  4828.,  6412.,  7996.,  9580.,  3548.,  5132.,  6716.,  8300.,  3128.,  4312.,  5496.,  6680.,  1092.,  1748.,  2404.,  3060.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7246.,  8762., 10433., 12266., 12083., 11836., 11877., 10052.,  8670.,  7052.,  7722.,  8641.,  9689., 10872., 10213.,  9490.,  9279.,  7395.,  6210.,  4822.,  6692.,  6939.,  7304.,  7792.,  7344.,  7888.,  8400.,  7573.,  6662.,  5566.,  4452.,  5578.,  6794.,  8104.,  8330.,  8524.,  8686.,  7382.,  6252.,  4972.,  3980.,  5290.,  6734.,  7612.,  7282.,  6888.,  6430.,  5370.,  4152.,  2772.,  6204.,  7291.,  8516.,  8956.,  8530.,  7816.,  7038.,  6333.,  5428.,  4318.,  5006.,  6545.,  8243.,  9978., 10401., 10312., 10159.,  8765.,  7144.,  5290.,  7130.,  8970., 11007., 12896., 13193., 12754., 12251., 10366.,  8210.,  5776.,  6222.,  7450.,  8849., 10426., 11107., 10860., 10581.,  9012.,  7198.,  6156.,  5122.,  6794.,  8643., 10676., 11357., 11910., 12431., 11146.,  9610.,  7816.,  6106.,  7659.,  9369., 11242., 11895., 12196., 12465., 10891.,  9092.,  7062.,  4568.,  5329.,  6210.,  7216.,  7792.,  8368.,  8944.,  7771.,  6416.,  4874.,  2724.,  3678.,  4730.,  5884.,  6334.,  6784.,  7234.,  6518.,  5648.,  4620.,  3852.,  4854.,  5966.,  7192.,  6958.,  6692.,  7098.,  6506.,  5780.,  4916.,  6112.,  7013.,  8022.,  9144.,  8686.,  8164.,  8506.,  7195.,  5938.,  4506.,  6126.,  6407.,  6811.,  8368.,  8535.,  8638.,  8805.,  7629.,  6710.,  5594.,  7246.,  8762., 10433., 12266., 12083., 11836., 11877., 10052.,  8670.,  7052.,  8002.,  9066., 10291., 11652., 10957., 10166.,  9855.,  7834.,  6474.,  4872.,  7830.,  8474.,  9285., 10014.,  9383.,  9712.,  9977.,  8816.,  7510.,  5956.,  6570.,  8373., 10329., 11964., 11881., 11734., 11523.,  9619.,  7814.,  5782.,  7052.,  8359.,  9788., 10640., 10032.,  9360.,  8624.,  6561.,  4858.,  2966.,  4900.,  5586.,  6378.,  6352.,  5842.,  5300.,  4726.,  4374.,  3860.,  3180.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     4.,    10.,    20.,    30.,    40.,    50.,    52.,    45.,    28.,    13.,    41.,    86.,   150.,   186.,   222.,   258.,   239.,   191.,   112.,    64.,   167.,   312.,   502.,   580.,   658.,   736.,   645.,   494.,   280.,   169.,   398.,   690.,  1048.,  1126.,  1204.,  1282.,  1086.,   809.,   448.,   274.,   629.,  1068.,  1594.,  1672.,  1750.,  1828.,  1527.,  1124.,   616.,   379.,   860.,  1446.,  2140.,  2218.,  2296.,  2374.,  1968.,  1439.,   784.,   484.,  1091.,  1824.,  2686.,  2764.,  2842.,  2920.,  2409.,  1754.,   952.,   539.,  1171.,  1898.,  2722.,  2790.,  2858.,  2926.,  2357.,  1681.,   896.,   387.,   826.,  1318.,  1864.,  1906.,  1948.,  1990.,  1582.,  1115.,   588.,    13.,    40.,    82.,   140.,   198.,   256.,   314.,   268.,   201.,   112.,   121.,   281.,   482.,   726.,   858.,   990.,  1122.,   923.,   671.,   364.,   352.,   779.,  1284.,  1870.,  2092.,  2314.,  2536.,  2049.,  1466.,   784.,   709.,  1514.,  2418.,  3424.,  3646.,  3868.,  4090.,  3246.,  2285.,  1204.,  1066.,  2249.,  3552.,  4978.,  5200.,  5422.,  5644.,  4443.,  3104.,  1624.,  1423.,  2984.,  4686.,  6532.,  6754.,  6976.,  7198.,  5640.,  3923.,  2044.,  1780.,  3719.,  5820.,  8086.,  8308.,  8530.,  8752.,  6837.,  4742.,  2464.,  1487.,  3091.,  4814.,  6658.,  6822.,  6986.,  7150.,  5561.,  3841.,  1988.,   903.,  1870.,  2902.,  4000.,  4090.,  4180.,  4270.,  3310.,  2279.,  1176.,    25.,    76.,   154.,   260.,   366.,   472.,   578.,   484.,   357.,   196.,   229.,   521.,   878.,  1302.,  1530.,  1758.,  1986.,  1607.,  1151.,   616.,   640.,  1391.,  2256.,  3238.,  3604.,  3970.,  4336.,  3453.,  2438.,  1288.,  1249.,  2630.,  4146.,  5800.,  6166.,  6532.,  6898.,  5406.,  3761.,  1960.,  1858.,  3869.,  6036.,  8362.,  8728.,  9094.,  9460.,  7359.,  5084.,  2632.,  2467.,  5108.,  7926., 10924., 11290., 11656., 12022.,  9312.,  6407.,  3304.,  3076.,  6347.,  9816., 13486., 13852., 14218., 14584., 11265.,  7730.,  3976.,  2435.,  5011.,  7730., 10594., 10854., 11114., 11374.,  8765.,  6001.,  3080.,  1419.,  2914.,  4486.,  6136.,  6274.,  6412.,  6550.,  5038.,  3443.,  1764.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 13328., 16284., 19736., 21844., 21672., 22812., 23792., 19424., 15520., 12672., 13804., 15509., 17626., 19075., 19421., 20311., 20945., 17974., 14447., 11348.,  8192., 10176., 12480., 14784., 15928., 16944., 17832., 15088., 12952., 10144.,  8032., 10312., 13008., 15416., 14576., 13384., 13696., 11232.,  8032.,  5952., 10828., 13741., 17098., 19307., 19221., 17887., 16905., 15270., 12695., 10260., 12096., 15280., 18944., 22656., 22724., 20520., 19436., 16808., 14020., 10512., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404., 24008., 26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644., 14129., 17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340., 10688., 13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728.,  7648.,  5280.,  7672., 10416., 13544., 14720., 14776., 15312., 13760., 11536.,  9728., 10076., 12425., 15106., 18159., 18457., 16611., 16013., 14142., 12307.,  9956., 13408., 14600., 16240., 20424., 21356., 21296., 21332., 17624., 14684., 12336., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229., 25227., 25937., 21142., 16639., 13012., 17804., 21069., 25002., 27547., 27585., 28039., 28109., 24062., 19107., 14212., 13456., 16684., 20472., 22628., 22712., 24588., 26208., 22592., 19120., 15104., 12556., 15565., 19018., 20587., 20325., 19807., 19033., 15910., 11943.,  8884., 10496., 13024., 16000., 16960., 17208., 17328., 17320., 16304., 14520., 11936.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  124.,  196.,  268.,  340.,  365.,  322.,  203.,   76.,  264.,  580., 1040., 1312., 1584., 1856., 1744., 1408.,  832.,  437., 1174., 2139., 3324., 3572., 3692., 4292., 3753., 2874., 1631., 1139., 2618., 3853., 5348., 5084., 4692., 5292., 4563., 3454., 1941., 1329., 3038., 4031., 5324., 4452., 3324., 3572., 2781., 2178., 1259.,  911., 2114., 3633., 5492., 5484., 5348., 5084., 3591., 2758., 1569., 1101., 2534., 4323., 6492., 5972., 5324., 4452., 2641., 1962.,  887.,  672., 1568., 2704., 4096., 4624., 5152., 5072., 4044., 2680.,  964.,  753., 1662., 2735., 3980., 4308., 4636., 3844., 2801., 1546.,   71.,   77.,  262.,  563.,  988., 1444., 1900., 2356., 2021., 1522.,  851.,  796., 1768., 2932., 4304., 4832., 5360., 5888., 4864., 3552., 1936., 1581., 3494., 4131., 5020., 3860., 2572., 3300., 3057., 2442., 1431.,  971., 2314., 3957., 5892., 6268., 6516., 7244., 6075., 4494., 2477., 1897., 4206., 6343., 8812., 7044., 5020., 3860., 1893., 1618.,  995.,  679., 1682., 3033., 4756., 5388., 5892., 6268., 4911., 3670., 2041., 1605., 3574., 5931., 8700., 8820., 8812., 7044., 4633., 2810.,  559.,  208.,  576., 1120., 1856., 2128., 2400., 2576., 2204., 1560.,  628.,  409.,  942., 1607., 2412., 2612., 2812., 2404., 1801., 1018.,   47.,   53.,  182.,  395.,  700., 1028., 1356., 1684., 1469., 1122.,  635.,  620., 1480., 2596., 3984., 4768., 5552., 6336., 5296., 3904., 2144., 1829., 4022., 5483., 7228., 6708., 6060., 6916., 5817., 4314., 2383., 1955., 4314., 5469., 6948., 5916., 4756., 5612., 4899., 3742., 2117., 1569., 3582., 5967., 8716., 8100., 7228., 6708., 4461., 3362., 1883., 1599., 3554., 5889., 8628., 7852., 6948., 5916., 3543., 2790., 1617., 1213., 2822., 4851., 7324., 8084., 8716., 8100., 5985., 3914., 1383., 1120., 2464., 4048., 5888., 6416., 6944., 5840., 4364., 2552.,  388.,   65.,  222.,  479.,  844.,  916.,  988.,  964.,  801.,  490.,   23.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  6800.,  8172., 11304., 12516., 12180., 11364., 13332., 10760.,  8444.,  6800.,  6072.,  7086.,  8340.,  9930., 11298., 10394.,  9810.,  8708.,  7718.,  5944.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  6072.,  6830.,  8340., 10186., 10498.,  9466., 10194.,  9124.,  8006.,  5944.,  6800.,  8988., 10760., 10900., 12228., 12308., 12868.,  9864.,  9036.,  7312.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  6800.,  8172., 11304., 12516., 12180., 11364., 13332., 10760.,  8444.,  6800.,  6072.,  7086.,  8340.,  9930., 11298., 10394.,  9810.,  8708.,  7718.,  5944.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2506.,  6340.,  9134., 12616.,  9192.,  6600.,  7400.,  7926.,  6996.,  4418.,  2130.,  5716., 10630., 14504., 12616.,  9192.,  6600.,  5646.,  5284.,  3466.,  1754.,  4772.,  9246., 15048., 14504., 12616.,  9192.,  5222.,  3572.,  2514.,  1378.,  3828.,  7542., 12712., 15048., 14504., 12616.,  8190.,  3716.,  1562.,   932.,  2600.,  5132.,  8656., 10768., 12560., 11472.,  8764.,  4424.,   692.,   110.,   428.,  1018.,  1944.,  2488.,  3032.,  3256.,  2898.,  1884.,   150.,   190.,   716.,  1642.,  3032.,  4600.,  6168.,  7736.,  7042.,  5564.,  3238.,  2292.,  3080.,  4348.,  6224.,  4432.,  6544.,  8656.,  8492.,  7080.,  4292.,  2466.,  6196.,  8822., 12392., 10824., 10600., 14280., 13758., 11332.,  6810.,  4202.,  7940., 12942., 16840., 12392., 10824., 10600., 10710.,  9108.,  5602.,  3570.,  8852., 13670., 19752., 16840., 12392., 10824.,  7662.,  6884.,  4394.,  2938.,  7396., 13566., 19272., 19752., 16840., 12392.,  8518.,  4660.,  3186.,  2306.,  5940., 11094., 17960., 19272., 19752., 16840., 10718.,  6340.,  1978.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2506.,  6340.,  9134., 12616.,  9192.,  6600.,  7400.,  7926.,  6996.,  4418.,  2130.,  5716., 10630., 14504., 12616.,  9192.,  6600.,  5646.,  5284.,  3466.,  1754.,  4772.,  9246., 15048., 14504., 12616.,  9192.,  5222.,  3572.,  2514.,  1378.,  3828.,  7542., 12712., 15048., 14504., 12616.,  8190.,  3716.,  1562.,   932.,  2600.,  5132.,  8656., 10768., 12560., 11472.,  8764.,  4424.,   692.,   110.,   428.,  1018.,  1944.,  2488.,  3032.,  3256.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  8126.,  8636.,  9205.,  9812., 10523., 11234., 12446., 13268., 12575., 13382., 12576., 13368., 13121., 13930., 11609., 12296.,  9998., 10588.,  8210.,  8696.,  8016.,  8436.,  9334.,  9826., 10840., 11410., 11554., 12208., 10738., 11370., 10818., 11428., 10866., 11486.,  8828.,  9350.,  7202.,  7652.,  5784.,  6156.,  6918.,  7272.,  7279.,  7702.,  7807.,  8304.,  8224.,  8800.,  7805.,  8384.,  8346.,  8928.,  8823.,  9408.,  7489.,  7978.,  6024.,  6444.,  5122.,  5468.,  5136.,  5448.,  6532.,  6900.,  8072.,  8500.,  9156.,  9648.,  9228.,  9716.,  9236.,  9720.,  9180.,  9660.,  7680.,  8076.,  6564.,  6904.,  5216.,  5496.,  3648.,  3960.,  4964.,  5364.,  6480.,  6972.,  7852.,  8408.,  7836.,  8388.,  7724.,  8240.,  7484.,  7964.,  6248.,  6644.,  4732.,  5040.,  3408.,  3624.,  6606.,  6936.,  7725.,  8150.,  9051.,  9576.,  9794., 10392.,  9451., 10052.,  8564.,  9136.,  7549.,  8092.,  6357.,  6810.,  4834.,  5192.,  3770.,  4028.,  5048.,  5436.,  6414.,  6914.,  8028.,  8646.,  9678., 10388., 10002., 10722.,  9334., 10032.,  8538.,  9214.,  7648.,  8218.,  6374.,  6832.,  4800.,  5140.,  8046.,  8532., 10371., 10996., 13019., 13790., 14468., 15360., 14501., 15410., 14118., 15012., 13607., 14486., 11345., 12092.,  8612.,  9220.,  6834.,  7296.,  7230.,  7612.,  8741.,  9236., 10523., 11138., 12430., 13172., 13199., 13990., 13168., 13976., 13073., 13898., 11033., 11752.,  8574.,  9180.,  7442.,  7928.,  5902.,  6308.,  7655.,  8180.,  9691., 10342., 11544., 12328., 12313., 13146., 12858., 13708., 13339., 14206., 11489., 12244.,  9208.,  9844.,  7538.,  8048.,  6784.,  7124.,  8702.,  9142., 10864., 11410., 12482., 13140., 13202., 13902., 13250., 13960., 13234., 13954., 11428., 12054.,  9242.,  9768.,  7016.,  7436.,  4710.,  4944.,  5457.,  5762.,  6375.,  6756.,  7378.,  7840.,  7951.,  8448.,  8524.,  9056.,  9097.,  9664.,  7681.,  8182.,  5970.,  6400.,  4626.,  4980.,  3312.,  3528.,  4548.,  4828.,  5944.,  6292.,  7092.,  7512.,  7580.,  8028.,  8068.,  8544.,  8556.,  9060.,  7824.,  8268.,  6852.,  7232.,  5632.,  5944.,  2528.,  2808.,  3636.,  3980.,  4896.,  5308.,  6316.,  6800.,  6492.,  6972.,  6604.,  7080.,  7004.,  7508.,  6488.,  6932.,  5740.,  6120.,  5040.,  5352.,  6222.,  6624.,  7383.,  7850.,  8691.,  9228., 10156., 10768.,  9781., 10364.,  9278.,  9832.,  9447., 10004.,  7685.,  8150.,  6068.,  6468.,  4778.,  5108.,  7112.,  7548.,  7406.,  7918.,  7876.,  8470.,  9558., 10240.,  9402., 10062.,  9118.,  9756.,  8930.,  9578.,  7064.,  7610.,  5750.,  6220.,  5040.,  5428.,  8126.,  8636.,  9205.,  9812., 10523., 11234., 12446., 13268., 12575., 13382., 12576., 13368., 13121., 13930., 11609., 12296.,  9998., 10588.,  8210.,  8696.,  8462.,  8996., 10039., 10676., 11867., 12614., 12936., 13768., 12073., 12858., 12042., 12780., 11915., 12638.,  9633., 10228.,  7688.,  8180.,  5874.,  6256.,  9054.,  9548., 10169., 10772., 11547., 12266., 12434., 13244., 11667., 12462., 11796., 12576., 11797., 12562.,  9833., 10464.,  7618.,  8140.,  5842.,  6248.,  7472.,  7924.,  9254.,  9802., 11272., 11922., 12002., 12728., 11314., 12018., 11522., 12204., 11602., 12262.,  9804., 10342.,  8242.,  8684.,  6456.,  6796.,  7366.,  7736.,  8563.,  9006.,  9935., 10456., 10212., 10784.,  9505., 10048.,  8670.,  9184.,  7707.,  8192.,  6209.,  6594.,  4444.,  4756.,  2850.,  3084.,  5072.,  5320.,  5956.,  6276.,  7016.,  7412.,  7236.,  7680.,  6860.,  7300.,  6420.,  6856.,  5916.,  6348.,  5536.,  5900.,  4900.,  5192.,  4000.,  4216.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    30.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,    95.,   104.,    83.,    90.,    52.,    56.,    20.,    26.,    68.,    82.,   148.,   172.,   264.,   300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,   360.,   382.,   212.,   224.,   113.,   128.,   301.,   334.,   570.,   624.,   926.,  1004.,  1082.,  1160.,  1238.,  1316.,  1394.,  1472.,  1227.,  1290.,   943.,   988.,   536.,   560.,   323.,   338.,   763.,   796.,  1326.,  1380.,  2018.,  2096.,  2174.,  2252.,  2330.,  2408.,  2486.,  2564.,  2109.,  2172.,  1573.,  1618.,   872.,   896.,   533.,   548.,  1225.,  1258.,  2082.,  2136.,  3110.,  3188.,  3266.,  3344.,  3422.,  3500.,  3578.,  3656.,  2991.,  3054.,  2203.,  2248.,  1208.,  1232.,   743.,   758.,  1687.,  1720.,  2838.,  2892.,  4202.,  4280.,  4358.,  4436.,  4514.,  4592.,  4670.,  4748.,  3873.,  3936.,  2833.,  2878.,  1544.,  1568.,   953.,   968.,  2149.,  2182.,  3594.,  3648.,  5294.,  5372.,  5450.,  5528.,  5606.,  5684.,  5762.,  5840.,  4755.,  4818.,  3463.,  3508.,  1880.,  1904.,  1064.,  1078.,  2312.,  2342.,  3748.,  3796.,  5376.,  5444.,  5512.,  5580.,  5648.,  5716.,  5784.,  5852.,  4660.,  4714.,  3324.,  3362.,  1772.,  1792.,   765.,   774.,  1633.,  1652.,  2606.,  2636.,  3686.,  3728.,  3770.,  3812.,  3854.,  3896.,  3938.,  3980.,  3131.,  3164.,  2207.,  2230.,  1164.,  1176.,    13.,    26.,    53.,    80.,   122.,   164.,   222.,   280.,   338.,   396.,   454.,   512.,   570.,   628.,   491.,   536.,   371.,   402.,   208.,   224.,   212.,   242.,   500.,   562.,   868.,   964.,  1320.,  1452.,  1584.,  1716.,  1848.,  1980.,  2112.,  2244.,  1744.,  1846.,  1272.,  1342.,   692.,   728.,   653.,   704.,  1453.,  1558.,  2406.,  2568.,  3518.,  3740.,  3962.,  4184.,  4406.,  4628.,  4850.,  5072.,  3927.,  4098.,  2815.,  2932.,  1508.,  1568.,  1367.,  1418.,  2923.,  3028.,  4674.,  4836.,  6626.,  6848.,  7070.,  7292.,  7514.,  7736.,  7958.,  8180.,  6321.,  6492.,  4453.,  4570.,  2348.,  2408.,  2081.,  2132.,  4393.,  4498.,  6942.,  7104.,  9734.,  9956., 10178., 10400., 10622., 10844., 11066., 11288.,  8715.,  8886.,  6091.,  6208.,  3188.,  3248.,  2795.,  2846.,  5863.,  5968.,  9210.,  9372., 12842., 13064., 13286., 13508., 13730., 13952., 14174., 14396., 11109., 11280.,  7729.,  7846.,  4028.,  4088.,  3509.,  3560.,  7333.,  7438., 11478., 11640., 15950., 16172., 16394., 16616., 16838., 17060., 17282., 17504., 13503., 13674.,  9367.,  9484.,  4868.,  4928.,  2936.,  2974.,  6104.,  6182.,  9508.,  9628., 13152., 13316., 13480., 13644., 13808., 13972., 14136., 14300., 10996., 11122.,  7596.,  7682.,  3932.,  3976.,  1785.,  1806.,  3697.,  3740.,  5738.,  5804.,  7910.,  8000.,  8090.,  8180.,  8270.,  8360.,  8450.,  8540.,  6551.,  6620.,  4511.,  4558.,  2328.,  2352.,    25.,    50.,   101.,   152.,   230.,   308.,   414.,   520.,   626.,   732.,   838.,   944.,  1050.,  1156.,   887.,   968.,   659.,   714.,   364.,   392.,   404.,   458.,   932.,  1042.,  1588.,  1756.,  2376.,  2604.,  2832.,  3060.,  3288.,  3516.,  3744.,  3972.,  3040.,  3214.,  2184.,  2302.,  1172.,  1232.,  1193.,  1280.,  2605.,  2782.,  4242.,  4512.,  6110.,  6476.,  6842.,  7208.,  7574.,  7940.,  8306.,  8672.,  6627.,  6906.,  4687.,  4876.,  2480.,  2576.,  2411.,  2498.,  5083.,  5260.,  8022.,  8292., 11234., 11600., 11966., 12332., 12698., 13064., 13430., 13796., 10533., 10812.,  7333.,  7522.,  3824.,  3920.,  3629.,  3716.,  7561.,  7738., 11802., 12072., 16358., 16724., 17090., 17456., 17822., 18188., 18554., 18920., 14439., 14718.,  9979., 10168.,  5168.,  5264.,  4847.,  4934., 10039., 10216., 15582., 15852., 21482., 21848., 22214., 22580., 22946., 23312., 23678., 24044., 18345., 18624., 12625., 12814.,  6512.,  6608.,  6065.,  6152., 12517., 12694., 19362., 19632., 26606., 26972., 27338., 27704., 28070., 28436., 28802., 29168., 22251., 22530., 15271., 15460.,  7856.,  7952.,  4808.,  4870.,  9896., 10022., 15268., 15460., 20928., 21188., 21448., 21708., 21968., 22228., 22488., 22748., 17332., 17530., 11868., 12002.,  6092.,  6160.,  2805.,  2838.,  5761.,  5828.,  8870.,  8972., 12134., 12272., 12410., 12548., 12686., 12824., 12962., 13100.,  9971., 10076.,  6815.,  6886.,  3492.,  3528.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 14432., 15952., 16750., 18578., 18520., 20704., 18942., 21530., 19562., 22230., 20854., 23474., 21730., 24430., 17160., 19472., 13170., 15174.,  9696., 11344., 12416., 13672., 14265., 15807., 16300., 18168., 17705., 19939., 18027., 20413., 19533., 21943., 20527., 22961., 17204., 19264., 13087., 14861.,  8864., 10312.,  9184., 10112., 11412., 12524., 12368., 13696., 13268., 14844., 13436., 15108., 13348., 15116., 15052., 16916., 13552., 15136., 11404., 12804.,  8192.,  9376.,  7936.,  9120., 10276., 11772., 13168., 15008., 15300., 17388., 14156., 16212., 12404., 14300., 13564., 15428., 11248., 12832.,  8732., 10004.,  6848.,  7776.,  9712., 11032., 12253., 13939., 15396., 17488., 18101., 20511., 17911., 20345., 15321., 17651., 15387., 17741., 14092., 16120., 11555., 13217.,  8592.,  9848., 13440., 15216., 16006., 18154., 19912., 22480., 23590., 26498., 23506., 26366., 21022., 23706., 18634., 21270., 13656., 15840., 12234., 14046.,  9440., 10832., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 15824., 17736., 19015., 21353., 21900., 24720., 23599., 26829., 24245., 27483., 25307., 28425., 25697., 28823., 20356., 22984., 15257., 17459., 10320., 12040., 14784., 16432., 17398., 19450., 20424., 22928., 21174., 24050., 21794., 24750., 23342., 26250., 24122., 26982., 19768., 22144., 14778., 16750.,  9344., 10864., 12400., 13720., 15285., 16907., 17108., 19072., 17469., 19687., 16159., 18401., 16385., 18651., 18147., 20437., 15964., 17864., 12699., 14297.,  8528.,  9784., 10656., 11840., 13636., 15068., 16240., 17952., 16260., 18156., 15052., 16916., 13332., 15164., 13148., 14948., 12176., 13632., 10172., 11380.,  6976.,  7904.,  5184.,  6112.,  7284.,  8460.,  9808., 11264., 12820., 14588., 13564., 15428., 12164., 13996., 13676., 15604., 12368., 14080., 10220., 11684.,  8064.,  9248.,  9696., 11080., 10681., 12319., 14092., 16024., 17961., 20227., 18539., 20829., 16973., 19159., 15759., 17969., 12468., 14336., 11071., 12685.,  8704., 10024., 13600., 15248., 13742., 15730., 15928., 18304., 20734., 23546., 22282., 25174., 21942., 24786., 21698., 24622., 17096., 19600., 15090., 17254., 13056., 14832., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 15824., 17736., 19015., 21353., 21900., 24720., 23599., 26829., 24245., 27483., 25307., 28425., 25697., 28823., 20356., 22984., 15257., 17459., 10320., 12040., 15456., 17304., 18523., 20845., 22148., 25000., 23659., 26969., 24657., 28103., 26583., 30037., 27741., 31203., 23676., 26592., 18733., 21175., 13088., 15000., 13664., 15184., 16990., 18882., 19384., 21696., 20462., 23114., 19546., 22278., 20166., 22978., 22322., 25214., 18792., 21232., 15714., 17782., 11488., 13136., 12384., 13768., 15793., 17495., 18940., 21000., 19633., 21963., 18835., 21189., 17525., 19903., 17751., 20153., 15684., 17680., 12247., 13925.,  9152., 10472.,  9184., 10112., 11380., 12620., 14096., 15680., 15380., 17212., 15804., 17732., 15972., 17996., 15884., 18004., 14768., 16608., 12396., 13924.,  8704.,  9888.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   352.,   456.,   702.,   882.,  1200.,  1472.,  1264.,  1536.,  1808.,  2080.,  2352.,  2624.,  2258.,  2486.,  1856.,  2024.,  1114.,  1206.,   691.,   805.,  1228.,  1480.,  2043.,  2457.,  3152.,  3752.,  3008.,  3608.,  3728.,  4328.,  4928.,  5528.,  4545.,  5031.,  3628.,  3976.,  2129.,  2315.,  1583.,  1697.,  2580.,  2832.,  3423.,  3837.,  4544.,  5144.,  3152.,  3752.,  3008.,  3608.,  3728.,  4328.,  3573.,  4059.,  2932.,  3280.,  1757.,  1943.,  1355.,  1469.,  3196.,  3448.,  4451.,  4865.,  5552.,  6152.,  4544.,  5144.,  3152.,  3752.,  3008.,  3608.,  2601.,  3087.,  2236.,  2584.,  1385.,  1571.,  1127.,  1241.,  2692.,  2944.,  4743.,  5157.,  6208.,  6808.,  5552.,  6152.,  4544.,  5144.,  3152.,  3752.,  2109.,  2595.,  1540.,  1888.,  1013.,  1199.,   899.,  1013.,  2188.,  2440.,  3915.,  4329.,  6128.,  6728.,  6208.,  6808.,  5552.,  6152.,  4544.,  5144.,  2481.,  2967.,  1324.,  1672.,   641.,   827.,   654.,   762.,  1616.,  1848.,  2918.,  3290.,  4592.,  5120.,  5648.,  6176.,  5584.,  6112.,  4784.,  5312.,  3290.,  3710.,  1264.,  1560.,   306.,   462.,   333.,   403.,   844.,   992.,  1549.,  1783.,  2464.,  2792.,  3120.,  3448.,  3776.,  4104.,  3312.,  3640.,  2527.,  2785.,  1452.,  1632.,    71.,   165.,    77.,   179.,   364.,   576.,   877.,  1207.,  1632.,  2088.,  2544.,  3000.,  3456.,  3912.,  4368.,  4824.,  3775.,  4129.,  2860.,  3104.,  1607.,  1733.,  1510.,  1618.,  1728.,  1960.,  2190.,  2562.,  2928.,  3456.,  1968.,  2496.,  3024.,  3552.,  4080.,  4608.,  3746.,  4166.,  2976.,  3272.,  1738.,  1894.,  1419.,  1565.,  3260.,  3576.,  3907.,  4417.,  4912.,  5640.,  4000.,  4728.,  3440.,  4168.,  4896.,  5624.,  4617.,  5199.,  3740.,  4152.,  2217.,  2435.,  1735.,  1881.,  3460.,  3776.,  5607.,  6117.,  6560.,  7288.,  4912.,  5640.,  4000.,  4728.,  3440.,  4168.,  3453.,  4035.,  2916.,  3328.,  1781.,  1999.,  1443.,  1589.,  3436.,  3752.,  5419.,  5929.,  7824.,  8552.,  6560.,  7288.,  4912.,  5640.,  4000.,  4728.,  2289.,  2871.,  2092.,  2504.,  1345.,  1563.,  1151.,  1297.,  2804.,  3120.,  5007.,  5517.,  7200.,  7928.,  7824.,  8552.,  6560.,  7288.,  4912.,  5640.,  3141.,  3723.,  1268.,  1680.,   909.,  1127.,   859.,  1005.,  2172.,  2488.,  3987.,  4497.,  6352.,  7080.,  7200.,  7928.,  7824.,  8552.,  6560.,  7288.,  4345.,  4927.,  2460.,  2872.,   473.,   691.,   286.,   330.,   752.,   856.,  1430.,  1610.,  2352.,  2624.,  2896.,  3168.,  2832.,  3104.,  2544.,  2816.,  1802.,  2030.,   656.,   824.,   194.,   286.,   181.,   219.,   476.,   560.,   901.,  1039.,  1472.,  1672.,  1872.,  2072.,  2272.,  2472.,  2064.,  2264.,  1623.,  1785.,   956.,  1072.,    47.,   109.,    53.,   123.,   252.,   400.,   613.,   847.,  1152.,  1480.,  1808.,  2136.,  2464.,  2792.,  3120.,  3448.,  2743.,  3001.,  2108.,  2288.,  1199.,  1293.,  1110.,  1282.,  1568.,  1928.,  2398.,  2962.,  3632.,  4416.,  3696.,  4480.,  5264.,  6048.,  6832.,  7616.,  6002.,  6614.,  4608.,  5032.,  2618.,  2838.,  2403.,  2581.,  3756.,  4136.,  4491.,  5097.,  5648.,  6504.,  3968.,  4824.,  4176.,  5032.,  5888.,  6744.,  5457.,  6135.,  4364.,  4840.,  2561.,  2811.,  2143.,  2321.,  4852.,  5232.,  6511.,  7117.,  7552.,  8408.,  5648.,  6504.,  3968.,  4824.,  4176.,  5032.,  4101.,  4779.,  3412.,  3888.,  2061.,  2311.,  1787.,  1965.,  4188.,  4568.,  7155.,  7761.,  9072.,  9928.,  7552.,  8408.,  5648.,  6504.,  3968.,  4824.,  2745.,  3423.,  2460.,  2936.,  1561.,  1811.,  1431.,  1609.,  3428.,  3808.,  6039.,  6645.,  9216., 10072.,  9072.,  9928.,  7552.,  8408.,  5648.,  6504.,  2893.,  3571.,  1508.,  1984.,  1061.,  1311.,  1075.,  1253.,  2668.,  3048.,  4827.,  5433.,  7600.,  8456.,  9216., 10072.,  9072.,  9928.,  7552.,  8408.,  4929.,  5607.,  2060.,  2536.,   561.,   811.,   526.,   634.,  1360.,  1592.,  2534.,  2906.,  4080.,  4608.,  5136.,  5664.,  6096.,  6624.,  5296.,  5824.,  3930.,  4350.,  2032.,  2328.,   178.,   334.,    29.,    35.,   108.,   128.,   253.,   295.,   480.,   552.,   624.,   696.,   768.,   840.,   816.,   888.,   719.,   785.,   460.,   512.,    23.,    53.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  9304., 11960.,  9560., 12216.,  9326., 11606.,  6300.,  8012.,  2466.,  3418.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   570.,   946.,  2204.,  3148.,  5094.,  6798.,  9304., 11960.,  9560., 12216., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   190.,   230.,   756.,   900.,  1506.,  1818.,  2376.,  2920.,  2120.,  2664.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  5064.,  6632.,  5832.,  7400.,  6088.,  7656.,  5832.,  7400.,  3098.,  4370.,  3252.,  4164.,  2262.,  2750.,  1996.,  2332.,  2760.,  3560.,  4404.,  5796.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5540.,  7316.,  2824.,  4136.,  2364.,  3084.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2938.,  3570.,  5660.,  7116., 10086., 12558., 14040., 17720., 13272., 16952., 13016., 16696., 13272., 16952., 12366., 15414.,  8156., 10380.,  4674.,  5882.,  1674.,  2306.,  5116.,  6572.,  8342., 10814., 13272., 16952., 14040., 17720., 13272., 16952., 13016., 16696., 10494., 13542.,  8956., 11180.,  4114.,  5322.,  2778.,  3410.,  5084.,  6540.,  9158., 11630., 13016., 16696., 13272., 16952., 14040., 17720., 13272., 16952., 11182., 14230.,  7900., 10124.,  5602.,  6810.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1754.,  2130.,  4828.,  5772.,  7046.,  8750., 10328., 12984.,  9560., 12216.,  9304., 11960.,  9560., 12216.,  9326., 11606.,  6300.,  8012.,  2466.,  3418.,  1002.,  1378.,  3260.,  4204.,  6838.,  8542.,  9560., 12216., 10328., 12984.,  9560., 12216.,  9304., 11960.,  8990., 11270.,  8124.,  9836.,  4466.,  5418.,   570.,   946.,  2204.,  3148.,  5094.,  6798.,  9304., 11960.,  9560., 12216., 10328., 12984.,  9560., 12216.,  7118.,  9398.,  6044.,  7756.,  4418.,  5370.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1644.,  1980.,  4360.,  5160.,  5844.,  7236.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  7236.,  9012.,  4104.,  5416.,   924.,  1644.,   190.,   230.,   756.,   900.,  1506.,  1818.,  2376.,  2920.,  2120.,  2664.,  1352.,  1896.,  2120.,  2664.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  8126.,  8636.,  9146.,  9656.,  9259.,  9866., 10473., 11080.,  9775., 10486., 11197., 11908., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 11816., 12608., 13400., 14192., 12121., 12930., 13739., 14548., 10275., 10962., 11649., 12336.,  8846.,  9436., 10026., 10616.,  6974.,  7460.,  7946.,  8432.,  7612.,  8032.,  8452.,  8872.,  8288.,  8780.,  9272.,  9764.,  8950.,  9520., 10090., 10660.,  8886.,  9540., 10194., 10848.,  8556.,  9188.,  9820., 10452.,  8994.,  9604., 10214., 10824.,  9336.,  9956., 10576., 11196.,  7374.,  7896.,  8418.,  8940.,  6146.,  6596.,  7046.,  7496.,  4924.,  5296.,  5668.,  6040.,  6762.,  7116.,  7470.,  7824.,  7575.,  7998.,  8421.,  8844.,  8045.,  8542.,  9039.,  9536.,  8480.,  9056.,  9632., 10208.,  8087.,  8666.,  9245.,  9824.,  8590.,  9172.,  9754., 10336.,  8965.,  9550., 10135., 10720.,  7513.,  8002.,  8491.,  8980.,  5868.,  6288.,  6708.,  7128.,  4586.,  4932.,  5278.,  5624.,  5704.,  6016.,  6328.,  6640.,  7000.,  7368.,  7736.,  8104.,  7588.,  8016.,  8444.,  8872.,  7772.,  8264.,  8756.,  9248.,  7408.,  7896.,  8384.,  8872.,  6916.,  7400.,  7884.,  8368.,  7320.,  7800.,  8280.,  8760.,  6388.,  6784.,  7180.,  7576.,  5236.,  5576.,  5916.,  6256.,  3688.,  3968.,  4248.,  4528.,  4104.,  4416.,  4728.,  5040.,  5112.,  5512.,  5912.,  6312.,  6452.,  6944.,  7436.,  7928.,  7468.,  8024.,  8580.,  9136.,  7056.,  7608.,  8160.,  8712.,  6484.,  7000.,  7516.,  8032.,  6680.,  7160.,  7640.,  8120.,  5412.,  5808.,  6204.,  6600.,  4420.,  4728.,  5036.,  5344.,  3400.,  3616.,  3832.,  4048.,  5458.,  5788.,  6118.,  6448.,  6321.,  6746.,  7171.,  7596.,  7529.,  8054.,  8579.,  9104.,  8558.,  9156.,  9754., 10352.,  8381.,  8982.,  9583., 10184.,  7148.,  7720.,  8292.,  8864.,  6683.,  7226.,  7769.,  8312.,  5861.,  6314.,  6767.,  7220.,  4542.,  4900.,  5258.,  5616.,  3442.,  3700.,  3958.,  4216.,  6252.,  6640.,  7028.,  7416.,  7976.,  8476.,  8976.,  9476.,  9262.,  9880., 10498., 11116., 10550., 11260., 11970., 12680., 10612., 11332., 12052., 12772.,  9746., 10444., 11142., 11840.,  8624.,  9300.,  9976., 10652.,  6950.,  7520.,  8090.,  8660.,  6018.,  6476.,  6934.,  7392.,  4492.,  4832.,  5172.,  5512.,  7350.,  7836.,  8322.,  8808.,  9333.,  9958., 10583., 11208., 11699., 12470., 13241., 14012., 13452., 14344., 15236., 16128., 13757., 14666., 15575., 16484., 13262., 14156., 15050., 15944., 12511., 13390., 14269., 15148.,  9751., 10498., 11245., 11992.,  7912.,  8520.,  9128.,  9736.,  6678.,  7140.,  7602.,  8064.,  6462.,  6844.,  7226.,  7608.,  7931.,  8426.,  8921.,  9416.,  9359.,  9974., 10589., 11204., 11062., 11804., 12546., 13288., 11783., 12574., 13365., 14156., 11960., 12768., 13576., 14384., 12009., 12834., 13659., 14484.,  9603., 10322., 11041., 11760.,  7518.,  8124.,  8730.,  9336.,  6462.,  6948.,  7434.,  7920.,  6470.,  6876.,  7282.,  7688.,  8481.,  9006.,  9531., 10056., 10155., 10806., 11457., 12108., 11808., 12592., 13376., 14160., 12529., 13362., 14195., 15028., 12834., 13684., 14534., 15384., 13011., 13878., 14745., 15612., 10927., 11682., 12437., 13192.,  8436.,  9072.,  9708., 10344.,  6246.,  6756.,  7266.,  7776.,  5868.,  6208.,  6548.,  6888.,  7268.,  7708.,  8148.,  8588.,  8958.,  9504., 10050., 10596., 10226., 10884., 11542., 12200., 10856., 11556., 12256., 12956., 11198., 11908., 12618., 13328., 11412., 12132., 12852., 13572.,  9334.,  9960., 10586., 11212.,  7270.,  7796.,  8322.,  8848.,  4908.,  5328.,  5748.,  6168.,  4578.,  4812.,  5046.,  5280.,  5521.,  5826.,  6131.,  6436.,  6321.,  6702.,  7083.,  7464.,  7286.,  7748.,  8210.,  8672.,  7821.,  8318.,  8815.,  9312.,  8356.,  8888.,  9420.,  9952.,  8891.,  9458., 10025., 10592.,  7693.,  8194.,  8695.,  9196.,  6006.,  6436.,  6866.,  7296.,  4482.,  4836.,  5190.,  5544.,  3880.,  4096.,  4312.,  4528.,  5232.,  5512.,  5792.,  6072.,  6100.,  6448.,  6796.,  7144.,  6788.,  7208.,  7628.,  8048.,  7224.,  7672.,  8120.,  8568.,  7660.,  8136.,  8612.,  9088.,  8096.,  8600.,  9104.,  9608.,  7268.,  7712.,  8156.,  8600.,  6028.,  6408.,  6788.,  7168.,  4360.,  4672.,  4984.,  5296.,  3048.,  3328.,  3608.,  3888.,  4048.,  4392.,  4736.,  5080.,  5284.,  5696.,  6108.,  6520.,  6772.,  7256.,  7740.,  8224.,  6744.,  7224.,  7704.,  8184.,  6588.,  7064.,  7540.,  8016.,  6976.,  7480.,  7984.,  8488.,  5908.,  6352.,  6796.,  7240.,  5020.,  5400.,  5780.,  6160.,  4008.,  4320.,  4632.,  4944.,  5514.,  5916.,  6318.,  6720.,  5851.,  6318.,  6785.,  7252.,  7437.,  7974.,  8511.,  9048.,  9268.,  9880., 10492., 11104.,  9059.,  9642., 10225., 10808.,  8594.,  9148.,  9702., 10256.,  8417.,  8974.,  9531., 10088.,  6073.,  6538.,  7003.,  7468.,  4984.,  5384.,  5784.,  6184.,  4042.,  4372.,  4702.,  5032.,  7132.,  7568.,  8004.,  8440.,  7132.,  7644.,  8156.,  8668.,  7766.,  8360.,  8954.,  9548.,  9698., 10380., 11062., 11744.,  9856., 10516., 11176., 11836.,  9758., 10396., 11034., 11672.,  9820., 10468., 11116., 11764.,  7854.,  8400.,  8946.,  9492.,  6230.,  6700.,  7170.,  7640.,  4988.,  5376.,  5764.,  6152.,  8126.,  8636.,  9146.,  9656.,  9259.,  9866., 10473., 11080.,  9775., 10486., 11197., 11908., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 11816., 12608., 13400., 14192., 12121., 12930., 13739., 14548., 10275., 10962., 11649., 12336.,  8846.,  9436., 10026., 10616.,  6974.,  7460.,  7946.,  8432.,  8390.,  8924.,  9458.,  9992.,  9553., 10190., 10827., 11464., 10827., 11574., 12321., 13068., 11472., 12304., 13136., 13968., 11073., 11858., 12643., 13428., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500.,  8911.,  9506., 10101., 10696.,  7076.,  7568.,  8060.,  8552.,  5094.,  5476.,  5858.,  6240.,  8206.,  8700.,  9194.,  9688.,  9527., 10130., 10733., 11336., 10663., 11382., 12101., 12820., 11002., 11812., 12622., 13432., 10763., 11558., 12353., 13148., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860.,  9723., 10354., 10985., 11616.,  7610.,  8132.,  8654.,  9176.,  5646.,  6052.,  6458.,  6864.,  7772.,  8224.,  8676.,  9128.,  9480., 10028., 10576., 11124., 10630., 11280., 11930., 12580., 10734., 11460., 12186., 12912.,  9636., 10340., 11044., 11748.,  9306.,  9988., 10670., 11352.,  9744., 10404., 11064., 11724.,  8158.,  8696.,  9234.,  9772.,  6570.,  7012.,  7454.,  7896.,  4508.,  4848.,  5188.,  5528.,  6746.,  7116.,  7486.,  7856.,  7947.,  8390.,  8833.,  9276.,  9205.,  9726., 10247., 10768.,  9132.,  9704., 10276., 10848.,  8195.,  8738.,  9281.,  9824.,  7002.,  7516.,  8030.,  8544.,  6577.,  7062.,  7547.,  8032.,  5697.,  6082.,  6467.,  6852.,  4352.,  4664.,  4976.,  5288.,  2970.,  3204.,  3438.,  3672.,  5000.,  5248.,  5496.,  5744.,  6024.,  6344.,  6664.,  6984.,  6788.,  7184.,  7580.,  7976.,  7052.,  7496.,  7940.,  8384.,  6816.,  7256.,  7696.,  8136.,  6452.,  6888.,  7324.,  7760.,  5960.,  6392.,  6824.,  7256.,  5460.,  5824.,  6188.,  6552.,  4516.,  4808.,  5100.,  5392.,  3112.,  3328.,  3544.,  3760.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,   100.,   104.,   108.,   112.,    34.,    40.,    46.,    52.,   122.,   136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,   564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,   866.,   896.,   926.,   956.,   698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,   226.,   241.,   256.,   569.,   602.,   635.,   668.,  1022.,  1076.,  1130.,  1184.,  1582.,  1660.,  1738.,  1816.,  1702.,  1780.,  1858.,  1936.,  1758.,  1836.,  1914.,  1992.,  2070.,  2148.,  2226.,  2304.,  1815.,  1878.,  1941.,  2004.,  1393.,  1438.,  1483.,  1528.,   792.,   816.,   840.,   864.,   567.,   582.,   597.,   612.,  1301.,  1334.,  1367.,  1400.,  1894.,  1948.,  2002.,  2056.,  2614.,  2692.,  2770.,  2848.,  2478.,  2556.,  2634.,  2712.,  2278.,  2356.,  2434.,  2512.,  2590.,  2668.,  2746.,  2824.,  2235.,  2298.,  2361.,  2424.,  1693.,  1738.,  1783.,  1828.,   952.,   976.,  1000.,  1024.,   667.,   682.,   697.,   712.,  1521.,  1554.,  1587.,  1620.,  1998.,  2052.,  2106.,  2160.,  2622.,  2700.,  2778.,  2856.,  2166.,  2244.,  2322.,  2400.,  1582.,  1660.,  1738.,  1816.,  1702.,  1780.,  1858.,  1936.,  1311.,  1374.,  1437.,  1500.,  1033.,  1078.,  1123.,  1168.,   600.,   624.,   648.,   672.,   447.,   462.,   477.,   492.,  1037.,  1070.,  1103.,  1136.,  1782.,  1836.,  1890.,  1944.,  2694.,  2772.,  2850.,  2928.,  2686.,  2764.,  2842.,  2920.,  2614.,  2692.,  2770.,  2848.,  2478.,  2556.,  2634.,  2712.,  1731.,  1794.,  1857.,  1920.,  1333.,  1378.,  1423.,  1468.,   760.,   784.,   808.,   832.,   547.,   562.,   577.,   592.,  1257.,  1290.,  1323.,  1356.,  2142.,  2196.,  2250.,  2304.,  3214.,  3292.,  3370.,  3448.,  2950.,  3028.,  3106.,  3184.,  2622.,  2700.,  2778.,  2856.,  2166.,  2244.,  2322.,  2400.,  1255.,  1318.,  1381.,  1444.,   929.,   974.,  1019.,  1064.,   408.,   432.,   456.,   480.,   322.,   336.,   350.,   364.,   754.,   784.,   814.,   844.,  1304.,  1352.,  1400.,  1448.,  1980.,  2048.,  2116.,  2184.,  2252.,  2320.,  2388.,  2456.,  2524.,  2592.,  2660.,  2728.,  2476.,  2544.,  2612.,  2680.,  1970.,  2024.,  2078.,  2132.,  1298.,  1336.,  1374.,  1412.,   452.,   472.,   492.,   512.,   369.,   378.,   387.,   396.,   815.,   834.,   853.,   872.,  1342.,  1372.,  1402.,  1432.,  1954.,  1996.,  2038.,  2080.,  2122.,  2164.,  2206.,  2248.,  2290.,  2332.,  2374.,  2416.,  1882.,  1924.,  1966.,  2008.,  1365.,  1398.,  1431.,  1464.,   743.,   766.,   789.,   812.,    12.,    24.,    36.,    48.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   202.,   244.,   286.,   328.,   386.,   444.,   502.,   560.,   618.,   676.,   734.,   792.,   850.,   908.,   966.,  1024.,  1082.,  1140.,  1198.,  1256.,   937.,   982.,  1027.,  1072.,   711.,   742.,   773.,   804.,   400.,   416.,   432.,   448.,   394.,   424.,   454.,   484.,   938.,  1000.,  1062.,  1124.,  1640.,  1736.,  1832.,  1928.,  2508.,  2640.,  2772.,  2904.,  3036.,  3168.,  3300.,  3432.,  3564.,  3696.,  3828.,  3960.,  4092.,  4224.,  4356.,  4488.,  3386.,  3488.,  3590.,  3692.,  2474.,  2544.,  2614.,  2684.,  1348.,  1384.,  1420.,  1456.,  1255.,  1306.,  1357.,  1408.,  2801.,  2906.,  3011.,  3116.,  3818.,  3980.,  4142.,  4304.,  5086.,  5308.,  5530.,  5752.,  5014.,  5236.,  5458.,  5680.,  4878.,  5100.,  5322.,  5544.,  5766.,  5988.,  6210.,  6432.,  4803.,  4974.,  5145.,  5316.,  3529.,  3646.,  3763.,  3880.,  1932.,  1992.,  2052.,  2112.,  1851.,  1902.,  1953.,  2004.,  4013.,  4118.,  4223.,  4328.,  5410.,  5572.,  5734.,  5896.,  7078.,  7300.,  7522.,  7744.,  6750.,  6972.,  7194.,  7416.,  6358.,  6580.,  6802.,  7024.,  7246.,  7468.,  7690.,  7912.,  5943.,  6114.,  6285.,  6456.,  4309.,  4426.,  4543.,  4660.,  2332.,  2392.,  2452.,  2512.,  2191.,  2242.,  2293.,  2344.,  4713.,  4818.,  4923.,  5028.,  6234.,  6396.,  6558.,  6720.,  8046.,  8268.,  8490.,  8712.,  6630.,  6852.,  7074.,  7296.,  5086.,  5308.,  5530.,  5752.,  5014.,  5236.,  5458.,  5680.,  3435.,  3606.,  3777.,  3948.,  2593.,  2710.,  2827.,  2944.,  1452.,  1512.,  1572.,  1632.,  1443.,  1494.,  1545.,  1596.,  3173.,  3278.,  3383.,  3488.,  5202.,  5364.,  5526.,  5688.,  7542.,  7764.,  7986.,  8208.,  7342.,  7564.,  7786.,  8008.,  7078.,  7300.,  7522.,  7744.,  6750.,  6972.,  7194.,  7416.,  4575.,  4746.,  4917.,  5088.,  3373.,  3490.,  3607.,  3724.,  1852.,  1912.,  1972.,  2032.,  1783.,  1834.,  1885.,  1936.,  3873.,  3978.,  4083.,  4188.,  6282.,  6444.,  6606.,  6768.,  9022.,  9244.,  9466.,  9688.,  8566.,  8788.,  9010.,  9232.,  8046.,  8268.,  8490.,  8712.,  6630.,  6852.,  7074.,  7296.,  4051.,  4222.,  4393.,  4564.,  2681.,  2798.,  2915.,  3032.,   972.,  1032.,  1092.,  1152.,   970.,  1008.,  1046.,  1084.,  2146.,  2224.,  2302.,  2380.,  3536.,  3656.,  3776.,  3896.,  5148.,  5312.,  5476.,  5640.,  5804.,  5968.,  6132.,  6296.,  6460.,  6624.,  6788.,  6952.,  6028.,  6192.,  6356.,  6520.,  4586.,  4712.,  4838.,  4964.,  2882.,  2968.,  3054.,  3140.,   908.,   952.,   996.,  1040.,   861.,   882.,   903.,   924.,  1847.,  1890.,  1933.,  1976.,  2962.,  3028.,  3094.,  3160.,  4210.,  4300.,  4390.,  4480.,  4570.,  4660.,  4750.,  4840.,  4930.,  5020.,  5110.,  5200.,  3946.,  4036.,  4126.,  4216.,  2793.,  2862.,  2931.,  3000.,  1487.,  1534.,  1581.,  1628.,    24.,    48.,    72.,    96.,    25.,    50.,    75.,   100.,   151.,   202.,   253.,   304.,   382.,   460.,   538.,   616.,   722.,   828.,   934.,  1040.,  1146.,  1252.,  1358.,  1464.,  1570.,  1676.,  1782.,  1888.,  1994.,  2100.,  2206.,  2312.,  1693.,  1774.,  1855.,  1936.,  1263.,  1318.,  1373.,  1428.,   700.,   728.,   756.,   784.,   754.,   808.,   862.,   916.,  1754.,  1864.,  1974.,  2084.,  3008.,  3176.,  3344.,  3512.,  4524.,  4752.,  4980.,  5208.,  5436.,  5664.,  5892.,  6120.,  6348.,  6576.,  6804.,  7032.,  7260.,  7488.,  7716.,  7944.,  5906.,  6080.,  6254.,  6428.,  4250.,  4368.,  4486.,  4604.,  2284.,  2344.,  2404.,  2464.,  2299.,  2386.,  2473.,  2560.,  5033.,  5210.,  5387.,  5564.,  6614.,  6884.,  7154.,  7424.,  8590.,  8956.,  9322.,  9688.,  8326.,  8692.,  9058.,  9424.,  7998.,  8364.,  8730.,  9096.,  9462.,  9828., 10194., 10560.,  7791.,  8070.,  8349.,  8628.,  5665.,  5854.,  6043.,  6232.,  3072.,  3168.,  3264.,  3360.,  3135.,  3222.,  3309.,  3396.,  6725.,  6902.,  7079.,  7256.,  8926.,  9196.,  9466.,  9736., 11542., 11908., 12274., 12640., 11022., 11388., 11754., 12120., 10438., 10804., 11170., 11536., 11902., 12268., 12634., 13000.,  9651.,  9930., 10209., 10488.,  6925.,  7114.,  7303.,  7492.,  3712.,  3808.,  3904.,  4000.,  3715.,  3802.,  3889.,  3976.,  7905.,  8082.,  8259.,  8436., 10470., 10740., 11010., 11280., 13470., 13836., 14202., 14568., 11094., 11460., 11826., 12192.,  8590.,  8956.,  9322.,  9688.,  8326.,  8692.,  9058.,  9424.,  5559.,  5838.,  6117.,  6396.,  4153.,  4342.,  4531.,  4720.,  2304.,  2400.,  2496.,  2592.,  2439.,  2526.,  2613.,  2700.,  5309.,  5486.,  5663.,  5840.,  8622.,  8892.,  9162.,  9432., 12390., 12756., 13122., 13488., 11998., 12364., 12730., 13096., 11542., 11908., 12274., 12640., 11022., 11388., 11754., 12120.,  7419.,  7698.,  7977.,  8256.,  5413.,  5602.,  5791.,  5980.,  2944.,  3040.,  3136.,  3232.,  3019.,  3106.,  3193.,  3280.,  6489.,  6666.,  6843.,  7020., 10422., 10692., 10962., 11232., 14830., 15196., 15562., 15928., 14182., 14548., 14914., 15280., 13470., 13836., 14202., 14568., 11094., 11460., 11826., 12192.,  6847.,  7126.,  7405.,  7684.,  4433.,  4622.,  4811.,  5000.,  1536.,  1632.,  1728.,  1824.,  1618.,  1680.,  1742.,  1804.,  3538.,  3664.,  3790.,  3916.,  5768.,  5960.,  6152.,  6344.,  8316.,  8576.,  8836.,  9096.,  9356.,  9616.,  9876., 10136., 10396., 10656., 10916., 11176.,  9580.,  9840., 10100., 10360.,  7202.,  7400.,  7598.,  7796.,  4466.,  4600.,  4734.,  4868.,  1364.,  1432.,  1500.,  1568.,  1353.,  1386.,  1419.,  1452.,  2879.,  2946.,  3013.,  3080.,  4582.,  4684.,  4786.,  4888.,  6466.,  6604.,  6742.,  6880.,  7018.,  7156.,  7294.,  7432.,  7570.,  7708.,  7846.,  7984.,  6010.,  6148.,  6286.,  6424.,  4221.,  4326.,  4431.,  4536.,  2231.,  2302.,  2373.,  2444.,    36.,    72.,   108.,   144.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2080., 2832., 3584., 4336., 2546., 3478., 4410., 5342., 3208., 4368., 5528., 6688., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 3560., 4848., 6136., 7424., 3030., 4138., 5246., 6354., 2432., 3312., 4192., 5072., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1848., 2528., 3208., 3888., 2221., 3075., 3929., 4783., 2904., 3972., 5040., 6108., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 2824., 3828., 4832., 5836., 2075., 2905., 3735., 4565., 1736., 2352., 2968., 3584., 2432., 3312., 4192., 5072., 3090., 4150., 5210., 6270., 3560., 4848., 6136., 7424., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3914., 5318., 6722., 8126., 3830., 5250., 6670., 8090., 3208., 4368., 5528., 6688., 2870., 3850., 4830., 5810., 2080., 2832., 3584., 4336., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2080., 2832., 3584., 4336., 2762., 3726., 4690., 5654., 3384., 4608., 5832., 7056., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 4066., 5502., 6938., 8374., 3982., 5434., 6886., 8338., 3384., 4608., 5832., 7056., 2894., 3906., 4918., 5930., 2080., 2832., 3584., 4336., 1848., 2528., 3208., 3888., 2221., 3075., 3929., 4783., 2904., 3972., 5040., 6108., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 2824., 3828., 4832., 5836., 2075., 2905., 3735., 4565., 1736., 2352., 2968., 3584., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 2024., 2768., 3512., 4256., 2489., 3359., 4229., 5099., 2816., 3852., 4888., 5924., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 2736., 3708., 4680., 5652., 2343., 3189., 4035., 4881., 1912., 2592., 3272., 3952., 2432., 3312., 4192., 5072., 2746., 3774., 4802., 5830., 3384., 4608., 5832., 7056., 3914., 5318., 6722., 8126., 3830., 5250., 6670., 8090., 3698., 5070., 6442., 7814., 4174., 5626., 7078., 8530., 3384., 4608., 5832., 7056., 2878., 3954., 5030., 6106., 2432., 3312., 4192., 5072., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2432., 3312., 4192., 5072., 2770., 3830., 4890., 5950., 3560., 4848., 6136., 7424., 4066., 5502., 6938., 8374., 3982., 5434., 6886., 8338., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3208., 4368., 5528., 6688., 2550., 3530., 4510., 5490., 2080., 2832., 3584., 4336., 2024., 2768., 3512., 4256., 2489., 3359., 4229., 5099., 2816., 3852., 4888., 5924., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 2736., 3708., 4680., 5652., 2343., 3189., 4035., 4881., 1912., 2592., 3272., 3952., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  328.,  400.,  472.,  544.,  520.,  592.,  664.,  736.,  584.,  656.,  728.,  800.,  520.,  592.,  664.,  736.,  251.,  317.,  383.,  449.,  336.,  388.,  440.,  492.,  263.,  293.,  323.,  353.,  106.,  150.,  194.,  238.,  400.,  504.,  608.,  712.,  914., 1094., 1274., 1454., 1712., 1984., 2256., 2528., 1712., 1984., 2256., 2528., 1968., 2240., 2512., 2784., 1968., 2240., 2512., 2784., 1174., 1402., 1630., 1858.,  896., 1064., 1232., 1400.,  686.,  778.,  870.,  962.,  591.,  705.,  819.,  933., 1208., 1460., 1712., 1964., 2331., 2745., 3159., 3573., 4024., 4624., 5224., 5824., 3960., 4560., 5160., 5760., 4024., 4624., 5224., 5824., 4216., 4816., 5416., 6016., 2769., 3255., 3741., 4227., 1904., 2252., 2600., 2948., 1141., 1327., 1513., 1699., 1255., 1369., 1483., 1597., 2056., 2308., 2560., 2812., 2883., 3297., 3711., 4125., 4216., 4816., 5416., 6016., 4024., 4624., 5224., 5824., 3960., 4560., 5160., 5760., 4024., 4624., 5224., 5824., 3417., 3903., 4389., 4875., 1856., 2204., 2552., 2900.,  877., 1063., 1249., 1435.,  799.,  913., 1027., 1141., 2168., 2420., 2672., 2924., 3083., 3497., 3911., 4325., 4024., 4624., 5224., 5824., 4216., 4816., 5416., 6016., 4024., 4624., 5224., 5824., 3960., 4560., 5160., 5760., 3585., 4071., 4557., 5043., 2832., 3180., 3528., 3876., 1125., 1311., 1497., 1683.,  439.,  553.,  667.,  781., 1384., 1636., 1888., 2140., 2899., 3313., 3727., 4141., 3960., 4560., 5160., 5760., 4024., 4624., 5224., 5824., 4216., 4816., 5416., 6016., 4024., 4624., 5224., 5824., 3369., 3855., 4341., 4827., 2816., 3164., 3512., 3860., 1885., 2071., 2257., 2443.,  591.,  705.,  819.,  933., 1208., 1460., 1712., 1964., 2331., 2745., 3159., 3573., 4024., 4624., 5224., 5824., 3960., 4560., 5160., 5760., 4024., 4624., 5224., 5824., 4216., 4816., 5416., 6016., 2769., 3255., 3741., 4227., 1904., 2252., 2600., 2948., 1141., 1327., 1513., 1699., 1226., 1334., 1442., 1550., 1936., 2168., 2400., 2632., 2578., 2950., 3322., 3694., 3696., 4224., 4752., 5280., 3440., 3968., 4496., 5024., 3440., 3968., 4496., 5024., 3696., 4224., 4752., 5280., 2902., 3322., 3742., 4162., 1312., 1608., 1904., 2200.,  494.,  650.,  806.,  962.,  613.,  683.,  753.,  823., 1576., 1724., 1872., 2020., 1801., 2035., 2269., 2503., 2312., 2640., 2968., 3296., 2248., 2576., 2904., 3232., 2056., 2384., 2712., 3040., 2248., 2576., 2904., 3232., 1979., 2237., 2495., 2753., 1264., 1444., 1624., 1804.,   71.,  165.,  259.,  353.,   77.,  179.,  281.,  383.,  568.,  780.,  992., 1204., 1505., 1835., 2165., 2495., 2920., 3376., 3832., 4288., 3112., 3568., 4024., 4480., 3176., 3632., 4088., 4544., 3112., 3568., 4024., 4480., 1619., 1973., 2327., 2681., 1632., 1876., 2120., 2364., 1103., 1229., 1355., 1481., 1306., 1414., 1522., 1630., 1520., 1752., 1984., 2216., 2210., 2582., 2954., 3326., 3440., 3968., 4496., 5024., 3440., 3968., 4496., 5024., 3696., 4224., 4752., 5280., 3696., 4224., 4752., 5280., 2470., 2890., 3310., 3730.,  992., 1288., 1584., 1880.,  862., 1018., 1174., 1330.,  999., 1145., 1291., 1437., 2664., 2980., 3296., 3612., 3427., 3937., 4447., 4957., 4888., 5616., 6344., 7072., 4824., 5552., 6280., 7008., 4888., 5616., 6344., 7072., 5080., 5808., 6536., 7264., 3865., 4447., 5029., 5611., 2592., 3004., 3416., 3828.,  781.,  999., 1217., 1435., 1023., 1169., 1315., 1461., 2232., 2548., 2864., 3180., 4107., 4617., 5127., 5637., 5080., 5808., 6536., 7264., 4888., 5616., 6344., 7072., 4824., 5552., 6280., 7008., 4888., 5616., 6344., 7072., 4641., 5223., 5805., 6387., 3312., 3724., 4136., 4548., 1925., 2143., 2361., 2579.,  439.,  585.,  731.,  877., 1576., 1892., 2208., 2524., 2899., 3409., 3919., 4429., 4888., 5616., 6344., 7072., 5080., 5808., 6536., 7264., 4888., 5616., 6344., 7072., 4824., 5552., 6280., 7008., 3401., 3983., 4565., 5147., 3008., 3420., 3832., 4244., 1533., 1751., 1969., 2187., 1487., 1633., 1779., 1925., 2072., 2388., 2704., 3020., 3355., 3865., 4375., 4885., 4824., 5552., 6280., 7008., 4888., 5616., 6344., 7072., 5080., 5808., 6536., 7264., 4888., 5616., 6344., 7072., 3825., 4407., 4989., 5571., 2224., 2636., 3048., 3460., 1653., 1871., 2089., 2307.,  999., 1145., 1291., 1437., 2664., 2980., 3296., 3612., 3427., 3937., 4447., 4957., 4888., 5616., 6344., 7072., 4824., 5552., 6280., 7008., 4888., 5616., 6344., 7072., 5080., 5808., 6536., 7264., 3865., 4447., 5029., 5611., 2592., 3004., 3416., 3828.,  781.,  999., 1217., 1435.,  538.,  582.,  626.,  670.,  816.,  920., 1024., 1128., 1282., 1462., 1642., 1822., 1968., 2240., 2512., 2784., 1712., 1984., 2256., 2528., 1712., 1984., 2256., 2528., 1968., 2240., 2512., 2784., 1606., 1834., 2062., 2290.,  704.,  872., 1040., 1208.,  318.,  410.,  502.,  594.,  333.,  371.,  409.,  447.,  888.,  972., 1056., 1140., 1089., 1227., 1365., 1503., 1448., 1648., 1848., 2048., 1384., 1584., 1784., 1984., 1192., 1392., 1592., 1792., 1384., 1584., 1784., 1984., 1267., 1429., 1591., 1753.,  832.,  948., 1064., 1180.,   47.,  109.,  171.,  233.,   53.,  123.,  193.,  263.,  392.,  540.,  688.,  836., 1049., 1283., 1517., 1751., 2056., 2384., 2712., 3040., 2248., 2576., 2904., 3232., 2312., 2640., 2968., 3296., 2248., 2576., 2904., 3232., 1163., 1421., 1679., 1937., 1200., 1380., 1560., 1740.,  823.,  917., 1011., 1105.,  970., 1142., 1314., 1486., 1616., 1976., 2336., 2696., 2994., 3558., 4122., 4686., 5168., 5952., 6736., 7520., 5168., 5952., 6736., 7520., 5424., 6208., 6992., 7776., 5424., 6208., 6992., 7776., 3254., 3866., 4478., 5090., 2112., 2536., 2960., 3384., 1550., 1770., 1990., 2210., 1919., 2097., 2275., 2453., 3096., 3476., 3856., 4236., 4011., 4617., 5223., 5829., 5752., 6608., 7464., 8320., 5688., 6544., 7400., 8256., 5752., 6608., 7464., 8320., 5944., 6800., 7656., 8512., 4449., 5127., 5805., 6483., 2256., 2732., 3208., 3684.,  933., 1183., 1433., 1683., 1303., 1481., 1659., 1837., 3432., 3812., 4192., 4572., 4819., 5425., 6031., 6637., 5944., 6800., 7656., 8512., 5752., 6608., 7464., 8320., 5688., 6544., 7400., 8256., 5752., 6608., 7464., 8320., 5353., 6031., 6709., 7387., 3744., 4220., 4696., 5172., 1437., 1687., 1937., 2187.,  591.,  769.,  947., 1125., 2008., 2388., 2768., 3148., 4251., 4857., 5463., 6069., 5752., 6608., 7464., 8320., 5944., 6800., 7656., 8512., 5752., 6608., 7464., 8320., 5688., 6544., 7400., 8256., 4753., 5431., 6109., 6787., 4208., 4684., 5160., 5636., 2453., 2703., 2953., 3203.,  999., 1177., 1355., 1533., 1736., 2116., 2496., 2876., 3299., 3905., 4511., 5117., 5688., 6544., 7400., 8256., 5752., 6608., 7464., 8320., 5944., 6800., 7656., 8512., 5752., 6608., 7464., 8320., 3769., 4447., 5125., 5803., 2656., 3132., 3608., 4084., 1933., 2183., 2433., 2683., 1919., 2097., 2275., 2453., 3096., 3476., 3856., 4236., 4011., 4617., 5223., 5829., 5752., 6608., 7464., 8320., 5688., 6544., 7400., 8256., 5752., 6608., 7464., 8320., 5944., 6800., 7656., 8512., 4449., 5127., 5805., 6483., 2256., 2732., 3208., 3684.,  933., 1183., 1433., 1683.,  970., 1078., 1186., 1294., 2448., 2680., 2912., 3144., 2834., 3206., 3578., 3950., 3696., 4224., 4752., 5280., 3440., 3968., 4496., 5024., 3440., 3968., 4496., 5024., 3696., 4224., 4752., 5280., 3158., 3578., 3998., 4418., 1824., 2120., 2416., 2712.,  238.,  394.,  550.,  706.,   53.,   59.,   65.,   71.,  200.,  220.,  240.,  260.,  377.,  419.,  461.,  503.,  584.,  656.,  728.,  800.,  520.,  592.,  664.,  736.,  328.,  400.,  472.,  544.,  520.,  592.,  664.,  736.,  555.,  621.,  687.,  753.,  400.,  452.,  504.,  556.,   23.,   53.,   83.,  113.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  2778.,  3410.,  4042.,  4674.,  3980.,  5436.,  6892.,  8348.,  7766., 10238., 12710., 15182.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9406., 12454., 15502., 18550.,  5740.,  7964., 10188., 12412.,  4674.,  5882.,  7090.,  8298.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  2778.,  3410.,  4042.,  4674.,  3980.,  5436.,  6892.,  8348.,  7766., 10238., 12710., 15182.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9406., 12454., 15502., 18550.,  5740.,  7964., 10188., 12412.,  4674.,  5882.,  7090.,  8298.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   570.,   946.,  1322.,  1698.,  2636.,  3580.,  4524.,  5468.,  4214.,  5918.,  7622.,  9326.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  5854.,  8134., 10414., 12694.,  4396.,  6108.,  7820.,  9532.,  2466.,  3418.,  4370.,  5322.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5638.,  6911.,  8327.,  9892., 10545.,  9309.,  7874.,  6234.,  5068.,  5915.,  6892.,  8004.,  8580.,  7459.,  6156.,  4666.,  2780.,  3758.,  4838.,  6024.,  6474.,  5882.,  5140.,  4244.,  3668.,  4850.,  6146.,  7560.,  7966.,  7238.,  6380.,  5388.,  5472.,  6681.,  8022.,  9500., 10034.,  8821.,  7424.,  5838.,  5506.,  6545.,  7749.,  9124.,  9707.,  8547.,  7166.,  5558.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  4998.,  6703.,  8583., 10644., 11297., 10269.,  9010.,  7514.,  6124.,  7787.,  9596., 11556., 12132., 10771.,  9212.,  7450.,  5084.,  6126.,  7270.,  8520.,  8970.,  7802.,  6484.,  5012.,  1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3520.,  4713.,  6022.,  7452.,  7986.,  7237.,  6320.,  5230.,  4994.,  6337.,  7813.,  9428., 10011.,  8931.,  7662.,  6198.,  5818.,  7186.,  8719., 10424., 11105.,  9872.,  8414.,  6724.,  6026.,  7250.,  8663., 10272., 10953.,  9704.,  8206.,  6452.,  5018.,  6738.,  8639., 10728., 11409., 10400.,  9150.,  7652.,  6314.,  8082., 10023., 12144., 12825., 11480.,  9902.,  8084.,  5638.,  6911.,  8327.,  9892., 10545.,  9309.,  7874.,  6234.,  5068.,  5915.,  6892.,  8004.,  8580.,  7459.,  6156.,  4666.,  2780.,  3758.,  4838.,  6024.,  6474.,  5882.,  5140.,  4244.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   1.,    4.,    7.,   10.,   13.,   16.,   19.,   14.,   11.,   35.,   45.,   55.,   65.,   75.,   85.,   56.,   44.,  121.,  142.,  163.,  184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,  470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,  338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450., 1046., 1082., 1118., 1154., 1190., 1226.,  700.,  512., 1147., 1180., 1213., 1246., 1279., 1312.,  728.,  467., 1025., 1051., 1077., 1103., 1129., 1155.,  630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,    9.,   28.,   47.,   66.,   85.,  104.,  123.,   70.,   83.,  195.,  237.,  279.,  321.,  363.,  405.,  224.,  236.,  529.,  598.,  667.,  736.,  805.,  874.,  476.,  482., 1058., 1158., 1258., 1358., 1458., 1558.,  840.,  818., 1758., 1858., 1958., 2058., 2158., 2258., 1204., 1154., 2458., 2558., 2658., 2758., 2858., 2958., 1568., 1490., 3158., 3258., 3358., 3458., 3558., 3658., 1932., 1376., 2899., 2980., 3061., 3142., 3223., 3304., 1736., 1099., 2305., 2363., 2421., 2479., 2537., 2595., 1358.,  645., 1348., 1379., 1410., 1441., 1472., 1503.,  784.,   17.,   52.,   87.,  122.,  157.,  192.,  227.,  126.,  155.,  355.,  429.,  503.,  577.,  651.,  725.,  392.,  428.,  937., 1054., 1171., 1288., 1405., 1522.,  812.,  850., 1826., 1990., 2154., 2318., 2482., 2646., 1400., 1410., 2974., 3138., 3302., 3466., 3630., 3794., 1988., 1970., 4122., 4286., 4450., 4614., 4778., 4942., 2576., 2530., 5270., 5434., 5598., 5762., 5926., 6090., 3164., 2240., 4651., 4780., 4909., 5038., 5167., 5296., 2744., 1731., 3585., 3675., 3765., 3855., 3945., 4035., 2086.,  989., 2044., 2091., 2138., 2185., 2232., 2279., 1176.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.,  4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.,  4736.,  6256.,  8160., 10480., 12136., 10768.,  8760.,  8224.,  7260., 10137., 13410., 17119., 19273., 17638., 15191., 13012.,  9712., 11956., 14728., 18076., 20608., 18144., 14704., 12384.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9788., 13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,  9664., 13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,  5856.,  8424., 11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    42.,    62.,    82.,   102.,   122.,    95.,    64.,   224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,   986.,  1142.,  1298.,  1454.,  1610.,  1015.,   792.,  2064.,  2336.,  2608.,  2880.,  3152.,  3424.,  2064.,  1632.,  3968.,  4240.,  4512.,  4592.,  4416.,  4688.,  2680.,  2280.,  5232.,  5504.,  5776.,  5344.,  4656.,  4928.,  2784.,  2416.,  5472.,  5744.,  6016.,  5072.,  3872.,  4144.,  2376.,  1933.,  4326.,  4578.,  4830.,  3354.,  1622.,  1874.,  1123.,   612.,  1432.,  1632.,  1832.,  2032.,  2232.,  2432.,  1376.,   581.,  1302.,  1418.,  1534.,  1650.,  1766.,  1882.,  1039.,    53.,   182.,   330.,   478.,   626.,   774.,   922.,   527.,   608.,  1440.,  1768.,  2096.,  2424.,  2752.,  3080.,  1708.,  1777.,  3998.,  4538.,  5078.,  5618.,  6158.,  6698.,  3655.,  3672.,  8080.,  8864.,  9648., 10432., 11216., 12000.,  6480.,  6304., 13568., 14352., 15136., 13680., 11968., 12752.,  6840.,  6696., 14320., 15104., 15888., 13920., 11696., 12480.,  6688.,  6576., 14048., 14832., 15616., 13136., 10400., 11184.,  6024.,  4701., 10054., 10690., 11326.,  8186.,  4790.,  5426.,  2995.,  1540.,  3416.,  3872.,  4328.,  4784.,  5240.,  5696.,  3072.,  1269.,  2742.,  2986.,  3230.,  3474.,  3718.,  3962.,  2111.,   101.,   342.,   618.,   894.,  1170.,  1446.,  1722.,   959.,  1152.,  2656.,  3240.,  3824.,  4408.,  4992.,  5576.,  3020.,  3265.,  7166.,  8090.,  9014.,  9938., 10862., 11786.,  6295.,  6552., 14096., 15392., 16688., 17984., 19280., 20576., 10896., 10976., 23168., 24464., 25760., 22768., 19520., 20816., 11000., 11112., 23408., 24704., 26000., 22496., 18736., 20032., 10592., 10736., 22624., 23920., 25216., 21200., 16928., 18224.,  9672.,  7469., 15782., 16802., 17822., 13018.,  7958.,  8978.,  4867.,  2468.,  5400.,  6112.,  6824.,  7536.,  8248.,  8960.,  4768.,  1957.,  4182.,  4554.,  4926.,  5298.,  5670.,  6042.,  3183.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5560.,  6334.,  7476.,  9050., 10610., 10212.,  8678.,  5944.,  6800.,  7340.,  9128., 11172., 12980., 11496., 10300.,  7312.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  8168.,  8690., 10412., 13270., 15646., 13692., 11306.,  8552.,  7312.,  7420.,  8904., 11636., 14084., 11624.,  9324.,  7312.,  6072.,  6414.,  7252.,  9514., 11714., 10340.,  7702.,  5944.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1256.,   968.,  1512.,  2056.,  2600.,  3144.,  2132.,  1746.,  3604.,  2628.,  2996.,  4196.,  5396.,  6596.,  4186.,  3880.,  7632.,  5520.,  5456.,  6736.,  8848., 10960.,  6728.,  6344., 11792.,  7632.,  5520.,  5456.,  6736.,  8848.,  5544.,  5416., 13072., 11792.,  7632.,  5520.,  5456.,  6736.,  4360.,  4488., 10960., 13072., 11792.,  7632.,  5520.,  5456.,  3176.,  3490.,  8564., 10532., 12500., 11076.,  6772.,  4516.,  2026.,  2324.,  5768.,  7336.,  8904., 10472.,  8648.,  3944.,  1028.,  1118.,  2828.,  3740.,  4652.,  5564.,  6476.,  3996.,   310.,    30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1256.,   968.,  1512.,  2056.,  2600.,  3144.,  2132.,  1746.,  3604.,  2628.,  2996.,  4196.,  5396.,  6596.,  4186.,  3880.,  7632.,  5520.,  5456.,  6736.,  8848., 10960.,  6728.,  6344., 11792.,  7632.,  5520.,  5456.,  6736.,  8848.,  5544.,  5416., 13072., 11792.,  7632.,  5520.,  5456.,  6736.,  4360.,  4488., 10960., 13072., 11792.,  7632.,  5520.,  5456.,  3176.,  3490.,  8564., 10532., 12500., 11076.,  6772.,  4516.,  2026.,  2324.,  5768.,  7336.,  8904., 10472.,  8648.,  3944.,  1028.,  1118.,  2828.,  3740.,  4652.,  5564.,  6476.,  3996.,   310.,    30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,  1256.,   968.,  1512.,  2056.,  2600.,  3144.,  2132.,  1746.,  3604.,  2628.,  2996.,  4196.,  5396.,  6596.,  4186.,  3880.,  7632.,  5520.,  5456.,  6736.,  8848., 10960.,  6728.,  6344., 11792.,  7632.,  5520.,  5456.,  6736.,  8848.,  5544.,  5416., 13072., 11792.,  7632.,  5520.,  5456.,  6736.,  4360.,  4488., 10960., 13072., 11792.,  7632.,  5520.,  5456.,  3176.,  3490.,  8564., 10532., 12500., 11076.,  6772.,  4516.,  2026.,  2324.,  5768.,  7336.,  8904., 10472.,  8648.,  3944.,  1028.,  1118.,  2828.,  3740.,  4652.,  5564.,  6476.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5136.,  5420.,  6444.,  6814.,  7968.,  8430.,  9688., 10248., 10408., 11010.,  9316.,  9850.,  7896.,  8356.,  6424.,  6804.,  5542.,  5816.,  6515.,  6870.,  7679.,  8120.,  8756.,  9288.,  9329.,  9896.,  7953.,  8454.,  6282.,  6712.,  4850.,  5204.,  3664.,  3896.,  5008.,  5308.,  6520.,  6892.,  7664.,  8112.,  8152.,  8628.,  7472.,  7892.,  6560.,  6920.,  5408.,  5704.,  3104.,  3336.,  3864.,  4164.,  4784.,  5156.,  5872.,  6320.,  6272.,  6748.,  5288.,  5708.,  4080.,  4440.,  3696.,  3992.,  4782.,  5088.,  5959.,  6354.,  7331.,  7820.,  8908.,  9496.,  9429., 10052.,  8421.,  8970.,  7114.,  7584.,  5786.,  6172.,  6280.,  6692.,  7600.,  8130.,  9180.,  9834., 11032., 11816., 11644., 12470., 10256., 10982.,  8496.,  9116.,  6896.,  7404.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6800.,  7212.,  8940.,  9470., 11360., 12014., 13528., 14312., 14248., 15074., 12580., 13306., 10520., 11140.,  8856.,  9364.,  6566.,  6904.,  8131.,  8566.,  9919., 10456., 11140., 11784., 11713., 12392.,  9873., 10470.,  7706.,  8216.,  6258.,  6676.,  4176.,  4408.,  5136.,  5436.,  6264.,  6636.,  7536.,  7984.,  8024.,  8500.,  7216.,  7636.,  6176.,  6536.,  4896.,  5192.,  2592.,  2824.,  3480.,  3780.,  4528.,  4900.,  5744.,  6192.,  6144.,  6620.,  5544.,  5964.,  4720.,  5080.,  4208.,  4504.,  4014.,  4256.,  5175.,  5490.,  6499.,  6892.,  7996.,  8472.,  8517.,  9028.,  7397.,  7850.,  6010.,  6400.,  5146.,  5468.,  4360.,  4644.,  5296.,  5666.,  6428.,  6890.,  7768.,  8328.,  8380.,  8982.,  7120.,  7654.,  5552.,  6012.,  4720.,  5100.,  5422.,  5780.,  6899.,  7364.,  8635.,  9214., 10612., 11312., 11381., 12130., 10313., 10976.,  8866.,  9436.,  7314.,  7784.,  7278.,  7732.,  8955.,  9540., 10939., 11662., 12956., 13824., 13725., 14642., 12137., 12944., 10122., 10812.,  8210.,  8776.,  6830.,  7252.,  8995.,  9540., 11451., 12126., 13668., 14480., 14437., 15298., 12809., 13568., 10770., 11420.,  9106.,  9640.,  6894.,  7284.,  8651.,  9156., 10683., 11310., 12204., 12960., 12973., 13778., 11177., 11888.,  8986.,  9596.,  7442.,  7944.,  5136.,  5420.,  6444.,  6814.,  7968.,  8430.,  9688., 10248., 10408., 11010.,  9316.,  9850.,  7896.,  8356.,  6424.,  6804.,  5542.,  5816.,  6515.,  6870.,  7679.,  8120.,  8756.,  9288.,  9329.,  9896.,  7953.,  8454.,  6282.,  6712.,  4850.,  5204.,  3664.,  3896.,  5008.,  5308.,  6520.,  6892.,  7664.,  8112.,  8152.,  8628.,  7472.,  7892.,  6560.,  6920.,  5408.,  5704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    11.,    14.,    17.,    20.,    23.,    26.,    29.,    32.,    35.,    38.,    26.,    28.,    18.,    22.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   106.,   112.,    79.,    88.,   221.,   242.,   263.,   284.,   305.,   326.,   347.,   368.,   389.,   410.,   431.,   452.,   268.,   280.,   212.,   228.,   544.,   580.,   616.,   652.,   688.,   724.,   760.,   796.,   832.,   868.,   904.,   940.,   540.,   560.,   436.,   452.,  1048.,  1084.,  1120.,  1156.,  1192.,  1228.,  1264.,  1300.,  1336.,  1372.,  1408.,  1444.,   820.,   840.,   660.,   676.,  1552.,  1588.,  1624.,  1660.,  1696.,  1732.,  1768.,  1804.,  1840.,  1876.,  1912.,  1948.,  1100.,  1120.,   884.,   900.,  2056.,  2092.,  2128.,  2164.,  2200.,  2236.,  2272.,  2308.,  2344.,  2380.,  2416.,  2452.,  1380.,  1400.,  1009.,  1024.,  2261.,  2294.,  2327.,  2360.,  2393.,  2426.,  2459.,  2492.,  2525.,  2558.,  2591.,  2624.,  1438.,  1456.,   922.,   934.,  2024.,  2050.,  2076.,  2102.,  2128.,  2154.,  2180.,  2206.,  2232.,  2258.,  2284.,  2310.,  1246.,  1260.,   595.,   602.,  1289.,  1304.,  1319.,  1334.,  1349.,  1364.,  1379.,  1394.,  1409.,  1424.,  1439.,  1454.,   776.,   784.,     9.,    18.,    37.,    56.,    75.,    94.,   113.,   132.,   151.,   170.,   189.,   208.,   227.,   246.,   130.,   140.,   146.,   166.,   348.,   390.,   432.,   474.,   516.,   558.,   600.,   642.,   684.,   726.,   768.,   810.,   426.,   448.,   439.,   472.,   989.,  1058.,  1127.,  1196.,  1265.,  1334.,  1403.,  1472.,  1541.,  1610.,  1679.,  1748.,   916.,   952.,   916.,   964.,  2016.,  2116.,  2216.,  2316.,  2416.,  2516.,  2616.,  2716.,  2816.,  2916.,  3016.,  3116.,  1628.,  1680.,  1588.,  1636.,  3416.,  3516.,  3616.,  3716.,  3816.,  3916.,  4016.,  4116.,  4216.,  4316.,  4416.,  4516.,  2356.,  2408.,  2260.,  2308.,  4816.,  4916.,  5016.,  5116.,  5216.,  5316.,  5416.,  5516.,  5616.,  5716.,  5816.,  5916.,  3084.,  3136.,  2932.,  2980.,  6216.,  6316.,  6416.,  6516.,  6616.,  6716.,  6816.,  6916.,  7016.,  7116.,  7216.,  7316.,  3812.,  3864.,  2713.,  2752.,  5717.,  5798.,  5879.,  5960.,  6041.,  6122.,  6203.,  6284.,  6365.,  6446.,  6527.,  6608.,  3430.,  3472.,  2170.,  2198.,  4552.,  4610.,  4668.,  4726.,  4784.,  4842.,  4900.,  4958.,  5016.,  5074.,  5132.,  5190.,  2686.,  2716.,  1275.,  1290.,  2665.,  2696.,  2727.,  2758.,  2789.,  2820.,  2851.,  2882.,  2913.,  2944.,  2975.,  3006.,  1552.,  1568.,    17.,    34.,    69.,   104.,   139.,   174.,   209.,   244.,   279.,   314.,   349.,   384.,   419.,   454.,   234.,   252.,   274.,   310.,   636.,   710.,   784.,   858.,   932.,  1006.,  1080.,  1154.,  1228.,  1302.,  1376.,  1450.,   746.,   784.,   799.,   856.,  1757.,  1874.,  1991.,  2108.,  2225.,  2342.,  2459.,  2576.,  2693.,  2810.,  2927.,  3044.,  1564.,  1624.,  1620.,  1700.,  3488.,  3652.,  3816.,  3980.,  4144.,  4308.,  4472.,  4636.,  4800.,  4964.,  5128.,  5292.,  2716.,  2800.,  2740.,  2820.,  5784.,  5948.,  6112.,  6276.,  6440.,  6604.,  6768.,  6932.,  7096.,  7260.,  7424.,  7588.,  3892.,  3976.,  3860.,  3940.,  8080.,  8244.,  8408.,  8572.,  8736.,  8900.,  9064.,  9228.,  9392.,  9556.,  9720.,  9884.,  5068.,  5152.,  4980.,  5060., 10376., 10540., 10704., 10868., 11032., 11196., 11360., 11524., 11688., 11852., 12016., 12180.,  6244.,  6328.,  4417.,  4480.,  9173.,  9302.,  9431.,  9560.,  9689.,  9818.,  9947., 10076., 10205., 10334., 10463., 10592.,  5422.,  5488.,  3418.,  3462.,  7080.,  7170.,  7260.,  7350.,  7440.,  7530.,  7620.,  7710.,  7800.,  7890.,  7980.,  8070.,  4126.,  4172.,  1955.,  1978.,  4041.,  4088.,  4135.,  4182.,  4229.,  4276.,  4323.,  4370.,  4417.,  4464.,  4511.,  4558.,  2328.,  2352.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.,  5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.,  5216.,  6016.,  7084.,  8164.,  9440., 10832., 12348., 14084., 13956., 15916., 11968., 13744.,  9972., 11532.,  9056., 10368.,  7008.,  7880.,  9001., 10191., 11500., 13048., 14585., 16531., 16635., 18861., 13708., 15736., 11587., 13377.,  9296., 10808.,  9616., 10816., 12314., 13934., 15680., 17768., 19778., 22382., 22286., 25226., 19552., 22216., 16278., 18618., 13520., 15488., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10608., 11880., 14271., 16001., 17692., 19936., 21879., 24693., 24861., 28067., 21628., 24544., 18701., 21271., 15072., 17240., 12080., 13608., 15919., 17969., 20668., 23296., 25287., 28549., 28269., 31923., 25372., 28672., 21629., 24519., 18080., 20504., 10416., 11616., 13906., 15526., 17072., 19160., 20906., 23510., 23510., 26450., 19952., 22616., 16846., 19186., 13200., 15168., 10400., 11528., 13281., 14791., 16796., 18728., 19873., 22267., 22083., 24757., 19548., 21960., 15579., 17689., 12240., 14008.,  7680.,  8480., 10236., 11316., 12224., 13616., 14604., 16340., 16404., 18364., 14912., 16688., 12356., 13916.,  8672.,  9984.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    68.,    88.,   108.,   128.,   148.,   168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,   392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,  1040.,  1112.,  1184.,   758.,   802.,   527.,   593.,  1540.,  1696.,  1660.,  1816.,  1524.,  1680.,  1836.,  1992.,  2148.,  2304.,  2460.,  2616.,  1513.,  1603.,  1300.,  1420.,  3280.,  3552.,  3120.,  3392.,  2704.,  2976.,  3248.,  3520.,  3792.,  4064.,  4336.,  4608.,  2604.,  2756.,  2276.,  2396.,  5424.,  5696.,  4752.,  5024.,  3824.,  4096.,  4176.,  4448.,  4272.,  4544.,  4816.,  5088.,  2812.,  2964.,  2548.,  2668.,  5904.,  6176.,  4720.,  4992.,  3280.,  3552.,  3120.,  3392.,  2704.,  2976.,  3248.,  3520.,  1996.,  2148.,  1796.,  1916.,  4336.,  4608.,  4880.,  5152.,  5424.,  5696.,  4752.,  5024.,  3824.,  4096.,  4176.,  4448.,  2204.,  2356.,  2051.,  2165.,  4748.,  5000.,  5252.,  5504.,  5756.,  6008.,  4532.,  4784.,  3052.,  3304.,  2852.,  3104.,  1181.,  1319.,  1154.,  1246.,  2712.,  2912.,  3112.,  3312.,  3512.,  3712.,  3912.,  4112.,  4312.,  4512.,  3496.,  3696.,  1198.,  1306.,  1121.,  1175.,  2516.,  2632.,  2748.,  2864.,  2980.,  3096.,  3212.,  3328.,  3444.,  3560.,  1948.,  2064.,    47.,   109.,    53.,   123.,   252.,   400.,   548.,   696.,   844.,   992.,  1140.,  1288.,  1436.,  1584.,  1732.,  1880.,   995.,  1073.,  1098.,  1254.,  2632.,  2960.,  3288.,  3616.,  3944.,  4272.,  4600.,  4928.,  5256.,  5584.,  5912.,  6240.,  3286.,  3458.,  3359.,  3617.,  7588.,  8128.,  6428.,  6968.,  5012.,  5552.,  6092.,  6632.,  7172.,  7712.,  8252.,  8792.,  4601.,  4883.,  4820.,  5196., 10832., 11616.,  9648., 10432.,  8208.,  8992.,  9776., 10560., 11344., 12128., 12912., 13696.,  7148.,  7556.,  7332.,  7708., 16048., 16832., 14352., 15136., 12400., 13184., 11728., 12512., 10800., 11584., 12368., 13152.,  6844.,  7252.,  7092.,  7468., 15504., 16288., 13296., 14080., 10832., 11616.,  9648., 10432.,  8208.,  8992.,  9776., 10560.,  5516.,  5924.,  5828.,  6204., 12912., 13696., 14480., 15264., 16048., 16832., 14352., 15136., 12400., 13184., 11728., 12512.,  5212.,  5620.,  5395.,  5701., 11820., 12456., 13092., 13728., 14364., 15000., 11860., 12496.,  9100.,  9736.,  7620.,  8256.,  2733.,  3063.,  2914.,  3134.,  6488.,  6944.,  7400.,  7856.,  8312.,  8768.,  9224.,  9680., 10136., 10592.,  7784.,  8240.,  2446.,  2682.,  2449.,  2567.,  5300.,  5544.,  5788.,  6032.,  6276.,  6520.,  6764.,  7008.,  7252.,  7496.,  3964.,  4208.,    95.,   221.,   101.,   235.,   476.,   752.,  1028.,  1304.,  1580.,  1856.,  2132.,  2408.,  2684.,  2960.,  3236.,  3512.,  1811.,  1953.,  2090.,  2374.,  4872.,  5456.,  6040.,  6624.,  7208.,  7792.,  8376.,  8960.,  9544., 10128., 10712., 11296.,  5814.,  6114.,  6191.,  6641., 13636., 14560., 11196., 12120.,  8500.,  9424., 10348., 11272., 12196., 13120., 14044., 14968.,  7689.,  8163.,  8340.,  8972., 18384., 19680., 16176., 17472., 13712., 15008., 16304., 17600., 18896., 20192., 21488., 22784., 11692., 12356., 12388., 13020., 26672., 27968., 23952., 25248., 20976., 22272., 19280., 20576., 17328., 18624., 19920., 21216., 10876., 11540., 11636., 12268., 25104., 26400., 21872., 23168., 18384., 19680., 16176., 17472., 13712., 15008., 16304., 17600.,  9036.,  9700.,  9860., 10492., 21488., 22784., 24080., 25376., 26672., 27968., 23952., 25248., 20976., 22272., 19280., 20576.,  8220.,  8884.,  8739.,  9237., 18892., 19912., 20932., 21952., 22972., 23992., 19188., 20208., 15148., 16168., 12388., 13408.,  4285.,  4807.,  4674.,  5022., 10264., 10976., 11688., 12400., 13112., 13824., 14536., 15248., 15960., 16672., 12072., 12784.,  3694.,  4058.,  3777.,  3959.,  8084.,  8456.,  8828.,  9200.,  9572.,  9944., 10316., 10688., 11060., 11432.,  5980.,  6352.,   143.,   333.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  6200., 10008.,  6906., 10994.,  7844., 12660., 10006., 15998., 11870., 19206., 11140., 17748.,  8642., 14074.,  6456., 10264.,  5424.,  8688.,  5844.,  9348.,  6888., 11016.,  8556., 13692., 10428., 16716.,  9384., 15048.,  7716., 12372.,  5424.,  8688.,  4392.,  7112.,  4958.,  7878.,  5548.,  8988.,  7154., 11434.,  8394., 13634.,  8012., 12732.,  6070.,  9950.,  4648.,  7368.,  3616.,  5792.,  3896.,  6232.,  4592.,  7344.,  5704.,  9128.,  6952., 11144.,  6256., 10032.,  5144.,  8248.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,   180.,   324.,   468.,   612.,   486.,   590.,   380.,   588.,  1320.,  1864.,  1576.,  2120.,  2664.,  3208.,  2408.,  2952.,  1320.,  1864.,  1576.,  2120.,  1356.,  1692.,  1498.,  2002.,  3420.,  4620.,  3644.,  4844.,  5212.,  6412.,  5244.,  6444.,  3420.,  4620.,  3644.,  4844.,  2354.,  3050.,  3128.,  4056.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4056.,  5240.,  4664.,  5592.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3544.,  4728.,  3128.,  4056.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  4056.,  5240.,  2616.,  3544.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  5592.,  6776.,  3018.,  3906.,  6204.,  8172.,  5916.,  7884.,  7996.,  9964.,  8540., 10508.,  6204.,  8172.,  5916.,  7884.,  3362.,  4442.,  4188.,  4908.,  7144.,  8712.,  4008.,  5576.,  4264.,  5832.,  7400.,  8968.,  7144.,  8712.,  4008.,  5576.,  1516.,  2364.,  1966.,  2390.,  5076.,  5988.,  3508.,  4420.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,   180.,   324.,   468.,   612.,   486.,   590.,   380.,   588.,  1320.,  1864.,  1576.,  2120.,  2664.,  3208.,  2408.,  2952.,  1320.,  1864.,  1576.,  2120.,  1356.,  1692.,  1498.,  2002.,  3420.,  4620.,  3644.,  4844.,  5212.,  6412.,  5244.,  6444.,  3420.,  4620.,  3644.,  4844.,  2354.,  3050.,  3128.,  4056.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4056.,  5240.,  4664.,  5592.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3544.,  4728.,  3128.,  4056.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  4056.,  5240.,  2616.,  3544.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  5592.,  6776.,  3018.,  3906.,  6204.,  8172.,  5916.,  7884.,  7996.,  9964.,  8540., 10508.,  6204.,  8172.,  5916.,  7884.,  3362.,  4442.,  4188.,  4908.,  7144.,  8712.,  4008.,  5576.,  4264.,  5832.,  7400.,  8968.,  7144.,  8712.,  4008.,  5576.,  1516.,  2364.,  1966.,  2390.,  5076.,  5988.,  3508.,  4420.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   468.,   612.,   756.,   900.,   724.,   868.,   180.,   324.,   468.,   612.,   486.,   590.,   380.,   588.,  1320.,  1864.,  1576.,  2120.,  2664.,  3208.,  2408.,  2952.,  1320.,  1864.,  1576.,  2120.,  1356.,  1692.,  1498.,  2002.,  3420.,  4620.,  3644.,  4844.,  5212.,  6412.,  5244.,  6444.,  3420.,  4620.,  3644.,  4844.,  2354.,  3050.,  3128.,  4056.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  4056.,  5240.,  4664.,  5592.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  3544.,  4728.,  3128.,  4056.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  4056.,  5240.,  2616.,  3544.,  6672.,  8784.,  8720., 10832.,  8720., 10832.,  6672.,  8784.,  6672.,  8784.,  8720., 10832.,  5592.,  6776.,  3018.,  3906.,  6204.,  8172.,  5916.,  7884.,  7996.,  9964.,  8540., 10508.,  6204.,  8172.,  5916.,  7884.,  3362.,  4442.,  4188.,  4908.,  7144.,  8712.,  4008.,  5576.,  4264.,  5832.,  7400.,  8968.,  7144.,  8712.,  4008.,  5576.,  1516.,  2364.,  1966.,  2390.,  5076.,  5988.,  3508.,  4420.,  1428.,  2340.,  3252.,  4164.,  5076.,  5988.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5316.,  5600.,  5884.,  6168.,  6278.,  6648.,  7018.,  7388.,  7282.,  7744.,  8206.,  8668.,  8576.,  9136.,  9696., 10256.,  9206.,  9808., 10410., 11012.,  7698.,  8232.,  8766.,  9300.,  6180.,  6640.,  7100.,  7560.,  4404.,  4784.,  5164.,  5544.,  5306.,  5580.,  5854.,  6128.,  6499.,  6854.,  7209.,  7564.,  7461.,  7902.,  8343.,  8784.,  8436.,  8968.,  9500., 10032.,  8971.,  9538., 10105., 10672.,  7853.,  8354.,  8855.,  9356.,  6246.,  6676.,  7106.,  7536.,  4674.,  5028.,  5382.,  5736.,  4120.,  4352.,  4584.,  4816.,  5620.,  5920.,  6220.,  6520.,  6588.,  6960.,  7332.,  7704.,  7264.,  7712.,  8160.,  8608.,  7700.,  8176.,  8652.,  9128.,  6972.,  7392.,  7812.,  8232.,  5848.,  6208.,  6568.,  6928.,  4312.,  4608.,  4904.,  5200.,  3480.,  3712.,  3944.,  4176.,  4164.,  4464.,  4764.,  5064.,  5100.,  5472.,  5844.,  6216.,  6304.,  6752.,  7200.,  7648.,  6692.,  7168.,  7644.,  8120.,  5452.,  5872.,  6292.,  6712.,  4088.,  4448.,  4808.,  5168.,  3384.,  3680.,  3976.,  4272.,  4906.,  5212.,  5518.,  5824.,  5763.,  6158.,  6553.,  6948.,  6941.,  7430.,  7919.,  8408.,  8460.,  9048.,  9636., 10224.,  8955.,  9578., 10201., 10824.,  7589.,  8138.,  8687.,  9236.,  6238.,  6708.,  7178.,  7648.,  4658.,  5044.,  5430.,  5816.,  6260.,  6672.,  7084.,  7496.,  7886.,  8416.,  8946.,  9476.,  9418., 10072., 10726., 11380., 11392., 12176., 12960., 13744., 11998., 12824., 13650., 14476., 10346., 11072., 11798., 12524.,  8820.,  9440., 10060., 10680.,  7172.,  7680.,  8188.,  8696.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6468.,  6880.,  7292.,  7704.,  8550.,  9080.,  9610., 10140., 10290., 10944., 11598., 12252., 11936., 12720., 13504., 14288., 12566., 13392., 14218., 15044., 10450., 11176., 11902., 12628.,  8708.,  9328.,  9948., 10568.,  7092.,  7600.,  8108.,  8616.,  5754.,  6092.,  6430.,  6768.,  7091.,  7526.,  7961.,  8396.,  8773.,  9310.,  9847., 10384., 10020., 10664., 11308., 11952., 10555., 11234., 11913., 12592.,  9037.,  9634., 10231., 10828.,  6966.,  7476.,  7986.,  8496.,  5378.,  5796.,  6214.,  6632.,  4632.,  4864.,  5096.,  5328.,  5364.,  5664.,  5964.,  6264.,  6076.,  6448.,  6820.,  7192.,  7008.,  7456.,  7904.,  8352.,  7444.,  7920.,  8396.,  8872.,  6460.,  6880.,  7300.,  7720.,  5080.,  5440.,  5800.,  6160.,  3288.,  3584.,  3880.,  4176.,  2456.,  2688.,  2920.,  3152.,  3396.,  3696.,  3996.,  4296.,  4588.,  4960.,  5332.,  5704.,  6048.,  6496.,  6944.,  7392.,  6436.,  6912.,  7388.,  7864.,  5452.,  5872.,  6292.,  6712.,  4856.,  5216.,  5576.,  5936.,  4408.,  4704.,  5000.,  5296.,  3434.,  3676.,  3918.,  4160.,  4275.,  4590.,  4905.,  5220.,  5373.,  5766.,  6159.,  6552.,  6748.,  7224.,  7700.,  8176.,  7243.,  7754.,  8265.,  8776.,  5637.,  6090.,  6543.,  6996.,  4622.,  5012.,  5402.,  5792.,  3954.,  4276.,  4598.,  4920.,  4596.,  4880.,  5164.,  5448.,  5486.,  5856.,  6226.,  6596.,  6666.,  7128.,  7590.,  8052.,  8160.,  8720.,  9280.,  9840.,  8766.,  9368.,  9970., 10572.,  7338.,  7872.,  8406.,  8940.,  5652.,  6112.,  6572.,  7032.,  4484.,  4864.,  5244.,  5624.,  5814.,  6172.,  6530.,  6888.,  7093.,  7558.,  8023.,  8488.,  8499.,  9078.,  9657., 10236., 10284., 10984., 11684., 12384., 11005., 11754., 12503., 13252.,  9563., 10226., 10889., 11552.,  8010.,  8580.,  9150.,  9720.,  6094.,  6564.,  7034.,  7504.,  6870.,  7324.,  7778.,  8232.,  8781.,  9366.,  9951., 10536., 10659., 11382., 12105., 12828., 12756., 13624., 14492., 15360., 13477., 14394., 15311., 16228., 11787., 12594., 13401., 14208., 10146., 10836., 11526., 12216.,  8302.,  8868.,  9434., 10000.,  6518.,  6940.,  7362.,  7784.,  8645.,  9190.,  9735., 10280., 10451., 11126., 11801., 12476., 12188., 13000., 13812., 14624., 12909., 13770., 14631., 15492., 10875., 11634., 12393., 13152.,  9178.,  9828., 10478., 11128.,  7566.,  8100.,  8634.,  9168.,  6166.,  6556.,  6946.,  7336.,  7741.,  8246.,  8751.,  9256.,  9731., 10358., 10985., 11612., 11364., 12120., 12876., 13632., 12085., 12890., 13695., 14500., 10475., 11186., 11897., 12608.,  8466.,  9076.,  9686., 10296.,  6830.,  7332.,  7834.,  8336.,  5316.,  5600.,  5884.,  6168.,  6278.,  6648.,  7018.,  7388.,  7282.,  7744.,  8206.,  8668.,  8576.,  9136.,  9696., 10256.,  9206.,  9808., 10410., 11012.,  7698.,  8232.,  8766.,  9300.,  6180.,  6640.,  7100.,  7560.,  4404.,  4784.,  5164.,  5544.,  5306.,  5580.,  5854.,  6128.,  6499.,  6854.,  7209.,  7564.,  7461.,  7902.,  8343.,  8784.,  8436.,  8968.,  9500., 10032.,  8971.,  9538., 10105., 10672.,  7853.,  8354.,  8855.,  9356.,  6246.,  6676.,  7106.,  7536.,  4674.,  5028.,  5382.,  5736.,  4120.,  4352.,  4584.,  4816.,  5620.,  5920.,  6220.,  6520.,  6588.,  6960.,  7332.,  7704.,  7264.,  7712.,  8160.,  8608.,  7700.,  8176.,  8652.,  9128.,  6972.,  7392.,  7812.,  8232.,  5848.,  6208.,  6568.,  6928.,  4312.,  4608.,  4904.,  5200.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    19.,    22.,    25.,    28.,    31.,    34.,    37.,    40.,    43.,    46.,    49.,    52.,    55.,    58.,    61.,    64.,    67.,    70.,    73.,    76.,    50.,    52.,    54.,    56.,    32.,    36.,    40.,    44.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   210.,   220.,   230.,   240.,   250.,   260.,   270.,   280.,   290.,   300.,   310.,   320.,   330.,   340.,   206.,   212.,   218.,   224.,   149.,   158.,   167.,   176.,   421.,   442.,   463.,   484.,   505.,   526.,   547.,   568.,   589.,   610.,   631.,   652.,   673.,   694.,   715.,   736.,   757.,   778.,   799.,   820.,   841.,   862.,   883.,   904.,   524.,   536.,   548.,   560.,   408.,   424.,   440.,   456.,  1052.,  1088.,  1124.,  1160.,  1196.,  1232.,  1268.,  1304.,  1340.,  1376.,  1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,  1664.,  1700.,  1736.,  1772.,  1808.,  1844.,  1880.,  1060.,  1080.,  1100.,  1120.,   856.,   872.,   888.,   904.,  2060.,  2096.,  2132.,  2168.,  2204.,  2240.,  2276.,  2312.,  2348.,  2384.,  2420.,  2456.,  2492.,  2528.,  2564.,  2600.,  2636.,  2672.,  2708.,  2744.,  2780.,  2816.,  2852.,  2888.,  1620.,  1640.,  1660.,  1680.,  1304.,  1320.,  1336.,  1352.,  3068.,  3104.,  3140.,  3176.,  3212.,  3248.,  3284.,  3320.,  3356.,  3392.,  3428.,  3464.,  3500.,  3536.,  3572.,  3608.,  3644.,  3680.,  3716.,  3752.,  3788.,  3824.,  3860.,  3896.,  2180.,  2200.,  2220.,  2240.,  1752.,  1768.,  1784.,  1800.,  4076.,  4112.,  4148.,  4184.,  4220.,  4256.,  4292.,  4328.,  4364.,  4400.,  4436.,  4472.,  4508.,  4544.,  4580.,  4616.,  4652.,  4688.,  4724.,  4760.,  4796.,  4832.,  4868.,  4904.,  2740.,  2760.,  2780.,  2800.,  2003.,  2018.,  2033.,  2048.,  4489.,  4522.,  4555.,  4588.,  4621.,  4654.,  4687.,  4720.,  4753.,  4786.,  4819.,  4852.,  4885.,  4918.,  4951.,  4984.,  5017.,  5050.,  5083.,  5116.,  5149.,  5182.,  5215.,  5248.,  2858.,  2876.,  2894.,  2912.,  1832.,  1844.,  1856.,  1868.,  4022.,  4048.,  4074.,  4100.,  4126.,  4152.,  4178.,  4204.,  4230.,  4256.,  4282.,  4308.,  4334.,  4360.,  4386.,  4412.,  4438.,  4464.,  4490.,  4516.,  4542.,  4568.,  4594.,  4620.,  2478.,  2492.,  2506.,  2520.,  1183.,  1190.,  1197.,  1204.,  2563.,  2578.,  2593.,  2608.,  2623.,  2638.,  2653.,  2668.,  2683.,  2698.,  2713.,  2728.,  2743.,  2758.,  2773.,  2788.,  2803.,  2818.,  2833.,  2848.,  2863.,  2878.,  2893.,  2908.,  1544.,  1552.,  1560.,  1568.,     9.,    18.,    27.,    36.,    55.,    74.,    93.,   112.,   131.,   150.,   169.,   188.,   207.,   226.,   245.,   264.,   283.,   302.,   321.,   340.,   359.,   378.,   397.,   416.,   435.,   454.,   473.,   492.,   250.,   260.,   270.,   280.,   272.,   292.,   312.,   332.,   654.,   696.,   738.,   780.,   822.,   864.,   906.,   948.,   990.,  1032.,  1074.,  1116.,  1158.,  1200.,  1242.,  1284.,  1326.,  1368.,  1410.,  1452.,  1494.,  1536.,  1578.,  1620.,   830.,   852.,   874.,   896.,   845.,   878.,   911.,   944.,  1909.,  1978.,  2047.,  2116.,  2185.,  2254.,  2323.,  2392.,  2461.,  2530.,  2599.,  2668.,  2737.,  2806.,  2875.,  2944.,  3013.,  3082.,  3151.,  3220.,  3289.,  3358.,  3427.,  3496.,  1796.,  1832.,  1868.,  1904.,  1784.,  1832.,  1880.,  1928.,  3932.,  4032.,  4132.,  4232.,  4332.,  4432.,  4532.,  4632.,  4732.,  4832.,  4932.,  5032.,  5132.,  5232.,  5332.,  5432.,  5532.,  5632.,  5732.,  5832.,  5932.,  6032.,  6132.,  6232.,  3204.,  3256.,  3308.,  3360.,  3128.,  3176.,  3224.,  3272.,  6732.,  6832.,  6932.,  7032.,  7132.,  7232.,  7332.,  7432.,  7532.,  7632.,  7732.,  7832.,  7932.,  8032.,  8132.,  8232.,  8332.,  8432.,  8532.,  8632.,  8732.,  8832.,  8932.,  9032.,  4660.,  4712.,  4764.,  4816.,  4472.,  4520.,  4568.,  4616.,  9532.,  9632.,  9732.,  9832.,  9932., 10032., 10132., 10232., 10332., 10432., 10532., 10632., 10732., 10832., 10932., 11032., 11132., 11232., 11332., 11432., 11532., 11632., 11732., 11832.,  6116.,  6168.,  6220.,  6272.,  5816.,  5864.,  5912.,  5960., 12332., 12432., 12532., 12632., 12732., 12832., 12932., 13032., 13132., 13232., 13332., 13432., 13532., 13632., 13732., 13832., 13932., 14032., 14132., 14232., 14332., 14432., 14532., 14632.,  7572.,  7624.,  7676.,  7728.,  5387.,  5426.,  5465.,  5504., 11353., 11434., 11515., 11596., 11677., 11758., 11839., 11920., 12001., 12082., 12163., 12244., 12325., 12406., 12487., 12568., 12649., 12730., 12811., 12892., 12973., 13054., 13135., 13216.,  6818.,  6860.,  6902.,  6944.,  4312.,  4340.,  4368.,  4396.,  9046.,  9104.,  9162.,  9220.,  9278.,  9336.,  9394.,  9452.,  9510.,  9568.,  9626.,  9684.,  9742.,  9800.,  9858.,  9916.,  9974., 10032., 10090., 10148., 10206., 10264., 10322., 10380.,  5342.,  5372.,  5402.,  5432.,  2535.,  2550.,  2565.,  2580.,  5299.,  5330.,  5361.,  5392.,  5423.,  5454.,  5485.,  5516.,  5547.,  5578.,  5609.,  5640.,  5671.,  5702.,  5733.,  5764.,  5795.,  5826.,  5857.,  5888.,  5919.,  5950.,  5981.,  6012.,  3088.,  3104.,  3120.,  3136.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   243.,   278.,   313.,   348.,   383.,   418.,   453.,   488.,   523.,   558.,   593.,   628.,   663.,   698.,   733.,   768.,   803.,   838.,   873.,   908.,   450.,   468.,   486.,   504.,   512.,   548.,   584.,   620.,  1198.,  1272.,  1346.,  1420.,  1494.,  1568.,  1642.,  1716.,  1790.,  1864.,  1938.,  2012.,  2086.,  2160.,  2234.,  2308.,  2382.,  2456.,  2530.,  2604.,  2678.,  2752.,  2826.,  2900.,  1454.,  1492.,  1530.,  1568.,  1541.,  1598.,  1655.,  1712.,  3397.,  3514.,  3631.,  3748.,  3865.,  3982.,  4099.,  4216.,  4333.,  4450.,  4567.,  4684.,  4801.,  4918.,  5035.,  5152.,  5269.,  5386.,  5503.,  5620.,  5737.,  5854.,  5971.,  6088.,  3068.,  3128.,  3188.,  3248.,  3160.,  3240.,  3320.,  3400.,  6812.,  6976.,  7140.,  7304.,  7468.,  7632.,  7796.,  7960.,  8124.,  8288.,  8452.,  8616.,  8780.,  8944.,  9108.,  9272.,  9436.,  9600.,  9764.,  9928., 10092., 10256., 10420., 10584.,  5348.,  5432.,  5516.,  5600.,  5400.,  5480.,  5560.,  5640., 11404., 11568., 11732., 11896., 12060., 12224., 12388., 12552., 12716., 12880., 13044., 13208., 13372., 13536., 13700., 13864., 14028., 14192., 14356., 14520., 14684., 14848., 15012., 15176.,  7700.,  7784.,  7868.,  7952.,  7640.,  7720.,  7800.,  7880., 15996., 16160., 16324., 16488., 16652., 16816., 16980., 17144., 17308., 17472., 17636., 17800., 17964., 18128., 18292., 18456., 18620., 18784., 18948., 19112., 19276., 19440., 19604., 19768., 10052., 10136., 10220., 10304.,  9880.,  9960., 10040., 10120., 20588., 20752., 20916., 21080., 21244., 21408., 21572., 21736., 21900., 22064., 22228., 22392., 22556., 22720., 22884., 23048., 23212., 23376., 23540., 23704., 23868., 24032., 24196., 24360., 12404., 12488., 12572., 12656.,  8771.,  8834.,  8897.,  8960., 18217., 18346., 18475., 18604., 18733., 18862., 18991., 19120., 19249., 19378., 19507., 19636., 19765., 19894., 20023., 20152., 20281., 20410., 20539., 20668., 20797., 20926., 21055., 21184., 10778., 10844., 10910., 10976.,  6792.,  6836.,  6880.,  6924., 14070., 14160., 14250., 14340., 14430., 14520., 14610., 14700., 14790., 14880., 14970., 15060., 15150., 15240., 15330., 15420., 15510., 15600., 15690., 15780., 15870., 15960., 16050., 16140.,  8206.,  8252.,  8298.,  8344.,  3887.,  3910.,  3933.,  3956.,  8035.,  8082.,  8129.,  8176.,  8223.,  8270.,  8317.,  8364.,  8411.,  8458.,  8505.,  8552.,  8599.,  8646.,  8693.,  8740.,  8787.,  8834.,  8881.,  8928.,  8975.,  9022.,  9069.,  9116.,  4632.,  4656.,  4680.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1368.,  1872.,  2376.,  2880.,  2091.,  2861.,  3631.,  4401.,  2976.,  4068.,  5160.,  6252.,  4007.,  5477.,  6947.,  8417.,  5069.,  6931.,  8793., 10655.,  4920.,  6684.,  8448., 10212.,  4353.,  5963.,  7573.,  9183.,  3896.,  5296.,  6696.,  8096.,  1200.,  1632.,  2064.,  2496.,  1830.,  2490.,  3150.,  3810.,  2592.,  3528.,  4464.,  5400.,  3486.,  4746.,  6006.,  7266.,  4410.,  6006.,  7602.,  9198.,  4176.,  5688.,  7200.,  8712.,  3810.,  5190.,  6570.,  7950.,  3312.,  4512.,  5712.,  6912.,   968.,  1328.,  1688.,  2048.,  1481.,  2031.,  2581.,  3131.,  2112.,  2892.,  3672.,  4452.,  2845.,  3895.,  4945.,  5995.,  3599.,  4929.,  6259.,  7589.,  3528.,  4788.,  6048.,  7308.,  3083.,  4233.,  5383.,  6533.,  2792.,  3792.,  4792.,  5792.,   800.,  1088.,  1376.,  1664.,  1220.,  1660.,  2100.,  2540.,  1728.,  2352.,  2976.,  3600.,  2324.,  3164.,  4004.,  4844.,  2940.,  4004.,  5068.,  6132.,  2784.,  3792.,  4800.,  5808.,  2540.,  3460.,  4380.,  5300.,  2208.,  3008.,  3808.,  4608.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   120.,   140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,   320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,   500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,   536.,   608.,   680.,   752.,   376.,   448.,   520.,   592.,   664.,   736.,   808.,   880.,   952.,  1024.,  1096.,  1168.,  1240.,  1312.,  1384.,  1456.,  1528.,  1600.,  1672.,  1744.,  1034.,  1078.,  1122.,  1166.,   811.,   877.,   943.,  1009.,  1616.,  1772.,  1928.,  2084.,  1088.,  1244.,  1400.,  1556.,  1264.,  1420.,  1576.,  1732.,  1888.,  2044.,  2200.,  2356.,  2512.,  2668.,  2824.,  2980.,  3136.,  3292.,  3448.,  3604.,  1997.,  2087.,  2177.,  2267.,  1804.,  1924.,  2044.,  2164.,  3472.,  3744.,  4016.,  4288.,  2384.,  2656.,  2928.,  3200.,  2320.,  2592.,  2864.,  3136.,  2960.,  3232.,  3504.,  3776.,  4048.,  4320.,  4592.,  4864.,  5136.,  5408.,  5680.,  5952.,  3172.,  3324.,  3476.,  3628.,  3052.,  3172.,  3292.,  3412.,  5584.,  5856.,  6128.,  6400.,  3472.,  3744.,  4016.,  4288.,  2384.,  2656.,  2928.,  3200.,  2320.,  2592.,  2864.,  3136.,  2960.,  3232.,  3504.,  3776.,  4048.,  4320.,  4592.,  4864.,  2564.,  2716.,  2868.,  3020.,  2572.,  2692.,  2812.,  2932.,  6224.,  6496.,  6768.,  7040.,  5584.,  5856.,  6128.,  6400.,  3472.,  3744.,  4016.,  4288.,  2384.,  2656.,  2928.,  3200.,  2320.,  2592.,  2864.,  3136.,  2960.,  3232.,  3504.,  3776.,  1956.,  2108.,  2260.,  2412.,  2092.,  2212.,  2332.,  2452.,  5136.,  5408.,  5680.,  5952.,  6224.,  6496.,  6768.,  7040.,  5584.,  5856.,  6128.,  6400.,  3472.,  3744.,  4016.,  4288.,  2384.,  2656.,  2928.,  3200.,  2320.,  2592.,  2864.,  3136.,  1348.,  1500.,  1652.,  1804.,  1583.,  1697.,  1811.,  1925.,  3928.,  4180.,  4432.,  4684.,  4936.,  5188.,  5440.,  5692.,  5944.,  6196.,  6448.,  6700.,  5224.,  5476.,  5728.,  5980.,  3032.,  3284.,  3536.,  3788.,  1864.,  2116.,  2368.,  2620.,   785.,   923.,  1061.,  1199.,  1022.,  1114.,  1206.,  1298.,  2584.,  2784.,  2984.,  3184.,  3384.,  3584.,  3784.,  3984.,  4184.,  4384.,  4584.,  4784.,  4984.,  5184.,  5384.,  5584.,  4056.,  4256.,  4456.,  4656.,  1656.,  1856.,  2056.,  2256.,   330.,   438.,   546.,   654.,   473.,   527.,   581.,   635.,  1232.,  1348.,  1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  2160.,  2276.,  2392.,  2508.,  2624.,  2740.,  2856.,  2972.,  3088.,  3204.,  3320.,  3436.,  1824.,  1940.,  2056.,  2172.,    47.,   109.,   171.,   233.,    53.,   123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,  1132.,  1280.,  1428.,  1576.,  1724.,  1872.,  2020.,  2168.,  2316.,  2464.,  2612.,  2760.,  2908.,  3056.,  3204.,  3352.,  3500.,  3648.,  3796.,  1931.,  2009.,  2087.,  2165.,  2078.,  2234.,  2390.,  2546.,  2776.,  3104.,  3432.,  3760.,  1592.,  1920.,  2248.,  2576.,  2904.,  3232.,  3560.,  3888.,  4216.,  4544.,  4872.,  5200.,  5528.,  5856.,  6184.,  6512.,  6840.,  7168.,  7496.,  7824.,  3946.,  4118.,  4290.,  4462.,  4283.,  4541.,  4799.,  5057.,  7280.,  7820.,  8360.,  8900.,  4192.,  4732.,  5272.,  5812.,  3856.,  4396.,  4936.,  5476.,  6016.,  6556.,  7096.,  7636.,  8176.,  8716.,  9256.,  9796., 10336., 10876., 11416., 11956.,  5981.,  6263.,  6545.,  6827.,  6604.,  6980.,  7356.,  7732., 12048., 12832., 13616., 14400.,  8912.,  9696., 10480., 11264.,  6800.,  7584.,  8368.,  9152.,  7440.,  8224.,  9008.,  9792., 10576., 11360., 12144., 12928., 13712., 14496., 15280., 16064.,  7972.,  8380.,  8788.,  9196.,  8876.,  9252.,  9628., 10004., 16208., 16992., 17776., 18560., 12048., 12832., 13616., 14400.,  8912.,  9696., 10480., 11264.,  6800.,  7584.,  8368.,  9152.,  7440.,  8224.,  9008.,  9792., 10576., 11360., 12144., 12928.,  6340.,  6748.,  7156.,  7564.,  7372.,  7748.,  8124.,  8500., 16848., 17632., 18416., 19200., 16208., 16992., 17776., 18560., 12048., 12832., 13616., 14400.,  8912.,  9696., 10480., 11264.,  6800.,  7584.,  8368.,  9152.,  7440.,  8224.,  9008.,  9792.,  4708.,  5116.,  5524.,  5932.,  5868.,  6244.,  6620.,  6996., 13712., 14496., 15280., 16064., 16848., 17632., 18416., 19200., 16208., 16992., 17776., 18560., 12048., 12832., 13616., 14400.,  8912.,  9696., 10480., 11264.,  6800.,  7584.,  8368.,  9152.,  3076.,  3484.,  3892.,  4300.,  4031.,  4337.,  4643.,  4949.,  9592., 10228., 10864., 11500., 12136., 12772., 13408., 14044., 14680., 15316., 15952., 16588., 13448., 14084., 14720., 15356.,  8696.,  9332.,  9968., 10604.,  4968.,  5604.,  6240.,  6876.,  1697.,  2027.,  2357.,  2687.,  2398.,  2618.,  2838.,  3058.,  5848.,  6304.,  6760.,  7216.,  7672.,  8128.,  8584.,  9040.,  9496.,  9952., 10408., 10864., 11320., 11776., 12232., 12688.,  9368.,  9824., 10280., 10736.,  3896.,  4352.,  4808.,  5264.,   682.,   918.,  1154.,  1390.,  1033.,  1151.,  1269.,  1387.,  2608.,  2852.,  3096.,  3340.,  3584.,  3828.,  4072.,  4316.,  4560.,  4804.,  5048.,  5292.,  5536.,  5780.,  6024.,  6268.,  6512.,  6756.,  7000.,  7244.,  3712.,  3956.,  4200.,  4444.,    95.,   221.,   347.,   473.,   101.,   235.,   369.,   503.,   744.,  1020.,  1296.,  1572.,  1848.,  2124.,  2400.,  2676.,  2952.,  3228.,  3504.,  3780.,  4056.,  4332.,  4608.,  4884.,  5160.,  5436.,  5712.,  5988.,  6264.,  6540.,  6816.,  7092.,  3515.,  3657.,  3799.,  3941.,  3966.,  4250.,  4534.,  4818.,  5016.,  5600.,  6184.,  6768.,  2808.,  3392.,  3976.,  4560.,  5144.,  5728.,  6312.,  6896.,  7480.,  8064.,  8648.,  9232.,  9816., 10400., 10984., 11568., 12152., 12736., 13320., 13904.,  6858.,  7158.,  7458.,  7758.,  7755.,  8205.,  8655.,  9105., 12944., 13868., 14792., 15716.,  7296.,  8220.,  9144., 10068.,  6448.,  7372.,  8296.,  9220., 10144., 11068., 11992., 12916., 13840., 14764., 15688., 16612., 17536., 18460., 19384., 20308.,  9965., 10439., 10913., 11387., 11404., 12036., 12668., 13300., 20624., 21920., 23216., 24512., 15440., 16736., 18032., 19328., 11280., 12576., 13872., 15168., 11920., 13216., 14512., 15808., 17104., 18400., 19696., 20992., 22288., 23584., 24880., 26176., 12772., 13436., 14100., 14764., 14700., 15332., 15964., 16596., 26832., 28128., 29424., 30720., 20624., 21920., 23216., 24512., 15440., 16736., 18032., 19328., 11280., 12576., 13872., 15168., 11920., 13216., 14512., 15808., 17104., 18400., 19696., 20992., 10116., 10780., 11444., 12108., 12172., 12804., 13436., 14068., 27472., 28768., 30064., 31360., 26832., 28128., 29424., 30720., 20624., 21920., 23216., 24512., 15440., 16736., 18032., 19328., 11280., 12576., 13872., 15168., 11920., 13216., 14512., 15808.,  7460.,  8124.,  8788.,  9452.,  9644., 10276., 10908., 11540., 22288., 23584., 24880., 26176., 27472., 28768., 30064., 31360., 26832., 28128., 29424., 30720., 20624., 21920., 23216., 24512., 15440., 16736., 18032., 19328., 11280., 12576., 13872., 15168.,  4804.,  5468.,  6132.,  6796.,  6479.,  6977.,  7475.,  7973., 15256., 16276., 17296., 18316., 19336., 20356., 21376., 22396., 23416., 24436., 25456., 26476., 21672., 22692., 23712., 24732., 14360., 15380., 16400., 17420.,  8072.,  9092., 10112., 11132.,  2609.,  3131.,  3653.,  4175.,  3774.,  4122.,  4470.,  4818.,  9112.,  9824., 10536., 11248., 11960., 12672., 13384., 14096., 14808., 15520., 16232., 16944., 17656., 18368., 19080., 19792., 14680., 15392., 16104., 16816.,  6136.,  6848.,  7560.,  8272.,  1034.,  1398.,  1762.,  2126.,  1593.,  1775.,  1957.,  2139.,  3984.,  4356.,  4728.,  5100.,  5472.,  5844.,  6216.,  6588.,  6960.,  7332.,  7704.,  8076.,  8448.,  8820.,  9192.,  9564.,  9936., 10308., 10680., 11052.,  5600.,  5972.,  6344.,  6716.,   143.,   333.,   523.,   713.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2730.,  6818., 10906., 14994.,  3220.,  8036., 12852., 17668.,  3990.,  9982., 15974., 21966.,  4830., 12166., 19502., 26838.,  4340., 10948., 17556., 24164.,  3570.,  9002., 14434., 19866.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2340.,  5844.,  9348., 12852.,  2760.,  6888., 11016., 15144.,  3420.,  8556., 13692., 18828.,  4140., 10428., 16716., 23004.,  3720.,  9384., 15048., 20712.,  3060.,  7716., 12372., 17028.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1950.,  4870.,  7790., 10710.,  2300.,  5740.,  9180., 12620.,  2850.,  7130., 11410., 15690.,  3450.,  8690., 13930., 19170.,  3100.,  7820., 12540., 17260.,  2550.,  6430., 10310., 14190.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1560.,  3896.,  6232.,  8568.,  1840.,  4592.,  7344., 10096.,  2280.,  5704.,  9128., 12552.,  2760.,  6952., 11144., 15336.,  2480.,  6256., 10032., 13808.,  2040.,  5144.,  8248., 11352.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,   260.,   404.,   548.,   692.,   516.,   660.,   804.,   948.,    70.,   174.,   278.,   382.,   300.,   508.,   716.,   924.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,  1448.,  1992.,  2536.,  3080.,   636.,   972.,  1308.,  1644.,  1002.,  1506.,  2010.,  2514.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  3052.,  4252.,  5452.,  6652.,  3308.,  4508.,  5708.,  6908.,  1378.,  2074.,  2770.,  3466.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1944.,  2872.,  3800.,  4728.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  2616.,  3800.,  4984.,  6168.,  2968.,  3896.,  4824.,  5752.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  3640.,  4824.,  6008.,  7192.,  1754.,  2642.,  3530.,  4418.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  5068.,  7036.,  9004., 10972.,  5324.,  7292.,  9260., 11228.,  2130.,  3210.,  4290.,  5370.,  2156.,  2876.,  3596.,  4316.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  4136.,  5704.,  7272.,  8840.,  2492.,  3340.,  4188.,  5036.,   270.,   694.,  1118.,  1542.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,  2276.,  3188.,  4100.,  5012.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2048.,  2840.,  3720.,  4692.,  5002.,  5280.,  4792.,  4164.,  3392.,  3900.,  5213.,  6396.,  7678.,  7892.,  8074.,  7042.,  5827.,  4424.,  5704.,  7230.,  8424.,  9740.,  9779.,  9786.,  8344.,  6692.,  4824.,  6880.,  8502.,  9606., 10871., 10784., 10665.,  8980.,  7042.,  4844.,  7298.,  8734.,  9427., 10280.,  9745.,  9402.,  8667.,  7680.,  6434.,  6020.,  7814.,  9664., 11673., 11714., 12171., 10786.,  9150.,  7256.,  7046.,  8750., 10285., 11978., 11571., 11804., 10217.,  8380.,  6286.,  6000.,  7021.,  8192.,  9519.,  9276.,  9929.,  8724.,  7307.,  5672.,  4770.,  5102.,  6591.,  8218.,  8698.,  9274.,  8407.,  7350.,  6098.,  4576.,  5718.,  6960.,  8306.,  8436.,  8886.,  7832.,  6626.,  5264.,  3808.,  5060.,  6440.,  7248.,  6918.,  6556.,  5672.,  4640.,  3456.,  6048.,  7079.,  8238.,  8602.,  7984.,  7302.,  5824.,  5185.,  4356.,  4968.,  6388.,  7952.,  9538.,  9545.,  9488.,  8424.,  7154.,  5672.,  7188.,  8838., 10664., 12321., 11978., 11571., 10106.,  8398.,  6440.,  6646.,  7758.,  9045., 10514., 10299., 10020.,  8833.,  7404.,  5726.,  6488.,  7158.,  8002., 10051., 10412., 10709.,  9672.,  8394.,  6868.,  6586.,  8414., 10415., 12596., 12509., 12358., 10895.,  9192.,  7242.,  6720.,  8119.,  9664., 11361., 10798., 10171.,  8732.,  7085.,  5224.,  5526.,  6468.,  7545.,  8762.,  8410.,  8026.,  6653.,  5088.,  4350.,  3328.,  4394.,  5568.,  6854.,  7176.,  7466.,  6616.,  5606.,  4432.,  4192.,  5168.,  6248.,  7436.,  7234.,  7000.,  5816.,  5180.,  4416.,  6468.,  7313.,  8288.,  9398.,  9100.,  8738.,  6846.,  5663.,  4288.,  6376.,  6762.,  7288.,  7960.,  8511.,  8774.,  7896.,  6912.,  5720.,  6344.,  8118., 10058., 12171., 12596., 12509., 10848.,  9274.,  7460.,  6922.,  8382., 10007., 11804., 12005., 11470.,  9607.,  8056.,  6266.,  6284.,  7558.,  8996., 10605., 11158., 10751.,  9166.,  7318.,  5456.,  5678.,  7310.,  9105., 11070., 11399., 11568., 10133.,  8436.,  6950.,  7216.,  8673., 10272., 12019., 12096., 11789.,  9924.,  7823.,  6184.,  6410.,  7066.,  7827.,  8698.,  8474.,  8218.,  6531.,  4650.,  3498.,  5504.,  5374.,  5328.,  5370.,  4796.,  5214.,  4760.,  4138.,  3472.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     4.,    10.,    16.,    22.,    28.,    34.,    32.,    21.,    12.,    38.,    80.,   101.,   122.,   143.,   164.,   138.,    84.,    54.,   144.,   273.,   318.,   363.,   408.,   453.,   360.,   210.,   148.,   364.,   652.,   730.,   808.,   886.,   964.,   740.,   420.,   302.,   700.,  1198.,  1276.,  1354.,  1432.,  1510.,  1132.,   630.,   456.,  1036.,  1744.,  1822.,  1900.,  1978.,  2056.,  1524.,   840.,   610.,  1372.,  2290.,  2368.,  2446.,  2524.,  2602.,  1916.,  1050.,   714.,  1557.,  2532.,  2604.,  2676.,  2748.,  2820.,  2031.,  1092.,   661.,  1418.,  2273.,  2330.,  2387.,  2444.,  2501.,  1778.,   945.,   430.,   913.,  1450.,  1483.,  1516.,  1549.,  1582.,  1115.,   588.,    13.,    40.,    82.,   124.,   166.,   208.,   250.,   188.,   105.,   120.,   278.,   476.,   569.,   662.,   755.,   848.,   618.,   336.,   342.,   756.,  1245.,  1398.,  1551.,  1704.,  1857.,  1332.,   714.,   700.,  1516.,  2452.,  2674.,  2896.,  3118.,  3340.,  2372.,  1260.,  1190.,  2524.,  4006.,  4228.,  4450.,  4672.,  4894.,  3436.,  1806.,  1680.,  3532.,  5560.,  5782.,  6004.,  6226.,  6448.,  4500.,  2352.,  2170.,  4540.,  7114.,  7336.,  7558.,  7780.,  8002.,  5564.,  2898.,  2010.,  4185.,  6528.,  6708.,  6888.,  7068.,  7248.,  5019.,  2604.,  1609.,  3338.,  5189.,  5318.,  5447.,  5576.,  5705.,  3938.,  2037.,   946.,  1957.,  3034.,  3103.,  3172.,  3241.,  3310.,  2279.,  1176.,    25.,    76.,   154.,   232.,   310.,   388.,   466.,   344.,   189.,   228.,   518.,   872.,  1037.,  1202.,  1367.,  1532.,  1098.,   588.,   630.,  1368.,  2217.,  2478.,  2739.,  3000.,  3261.,  2304.,  1218.,  1252.,  2668.,  4252.,  4618.,  4984.,  5350.,  5716.,  4004.,  2100.,  2078.,  4348.,  6814.,  7180.,  7546.,  7912.,  8278.,  5740.,  2982.,  2904.,  6028.,  9376.,  9742., 10108., 10474., 10840.,  7476.,  3864.,  3730.,  7708., 11938., 12304., 12670., 13036., 13402.,  9212.,  4746.,  3306.,  6813., 10524., 10812., 11100., 11388., 11676.,  8007.,  4116.,  2557.,  5258.,  8105.,  8306.,  8507.,  8708.,  8909.,  6098.,  3129.,  1462.,  3001.,  4618.,  4723.,  4828.,  4933.,  5038.,  3443.,  1764.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5808.,  7652.,  9832., 12348., 11764., 10924., 10344.,  9044.,  7344.,  9196., 12629., 15546., 18851., 19021., 18935., 15706., 11545.,  7916., 12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888., 13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516., 17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516., 14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236., 17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596., 13400., 16522., 20180., 23814., 24282., 24238., 19668., 17362., 14200., 11876., 12727., 16030., 18017., 18139., 17749., 15854., 13195., 11012.,  9584., 11932., 14680., 16996., 17756., 18132., 16088., 13356.,  9904.,  9072., 11284., 13864., 16108., 15524., 14684., 11464.,  7460.,  6160., 13628., 14449., 15634., 17639., 17073., 16123., 13170., 11317.,  9948., 13064., 16062., 19548., 23090., 22262., 21050., 17340., 12518., 10056., 17140., 20403., 24278., 26069., 25243., 26081., 23286., 19215., 15284., 13836., 17277., 21322., 25547., 26385., 26839., 22810., 17513., 14412., 17188., 19399., 22206., 26081., 26279., 26093., 22110., 18915., 15876., 14396., 18161., 22546., 26839., 26653., 26083., 23810., 20285., 15804., 13752., 18082., 22052., 24686., 23650., 24278., 20772., 16138., 11832., 13684., 16691., 18358., 19493., 20127., 20505., 17510., 13511., 11124.,  7632., 10508., 13112., 15988., 16524., 16804., 14488., 11420.,  7568.,  6704.,  6980.,  9608., 12572., 13012., 14188., 12776., 11380., 10224., 10380., 12525., 15050., 17995., 17141., 17823., 14122., 11089.,  9196., 12136., 13782., 15884., 18490., 20318., 21634., 19660., 17086., 14632., 14244., 17847., 22110., 26385., 26839., 26653., 21790., 19027., 15236., 15804., 18177., 23250., 26279., 26093., 25267., 22498., 18637., 14908., 15540., 19499., 24102., 26653., 26083., 26921., 23814., 19399., 15092., 14412., 18293., 22810., 25267., 26105., 26303., 22090., 16577., 13228., 17304., 19546., 22388., 25174., 26154., 25502., 21428., 18178., 15128., 11012., 13807., 17038., 20041., 20675., 21053., 16830., 11587.,  8804., 13712., 15356., 17400., 17124., 15612., 15892., 13944., 11180.,  8048.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   22.,   59.,  101.,  143.,  185.,  227.,  222.,  149.,   70.,  244.,  538.,  694.,  850., 1006., 1162.,  996.,  614.,  363., 1002., 1845., 1963., 1953., 2295., 2637., 2082., 1211.,  956., 2312., 3620., 3612., 3476., 4076., 4676., 3624., 2076., 1652., 3800., 5612., 5220., 4604., 4980., 5228., 3960., 2228., 1868., 4200., 5780., 5004., 3620., 3612., 3476., 2760., 1612., 1316., 3064., 5276., 5876., 5612., 5220., 4604., 3448., 1764., 1521., 3422., 5727., 6285., 5595., 4777., 3351., 2374.,  977.,  874., 1996., 3382., 3826., 4270., 4714., 4294., 2812.,  970.,  839., 1842., 3017., 3275., 3533., 3791., 2801., 1546.,   71.,   77.,  262.,  563.,  893., 1223., 1553., 1883., 1422.,  797.,  886., 1972., 3242., 3718., 4194., 4670., 5146., 3140., 1718., 2499., 4442., 5085., 3891., 2569., 3135., 3701., 1650., 1011., 2652., 3944., 3652., 4284., 4788., 5516., 6244., 4264., 2396., 2708., 5304., 8076., 8324., 6812., 5780., 4620., 2552., 1524., 2796., 4552., 6068., 5932., 3652., 4284., 4788., 3400., 1932., 2116., 4312., 6972., 7700., 8076., 8324., 6812., 3576., 1060., 2025., 3086., 4455., 4853., 4515., 4049., 1439., 1110.,  553.,  410., 1004., 1798., 2050., 2302., 2554., 2454., 1692.,  634.,  495., 1122., 1889., 2051., 2213., 2375., 1801., 1018.,   47.,   53.,  182.,  395.,  629.,  863., 1097., 1331., 1022.,  581.,  614., 1460., 2554., 3094., 3634., 4174., 4714., 3492., 1926., 1851., 4170., 5765., 5307., 4721., 5511., 6301., 4386., 1963., 2716., 5960., 7268., 6492., 5588., 6444., 7300., 4872., 1820., 3284., 7192., 7980., 6820., 6460., 6068., 5548., 4056., 1972., 2348., 5288., 7892., 8396., 7268., 6492., 5588., 3752., 1356., 2692., 5944., 8156., 9012., 7980., 6820., 6460., 4312., 1508., 1633., 3710., 5775., 6397., 6795., 7065., 5703., 3206.,  225., 1322., 2892., 3350., 3666., 3982., 4298., 2726.,  668.,  298.,  151.,  402.,  761.,  827.,  893.,  959.,  801.,  490.,   23.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  6672.,  8916., 10008., 13404., 11884., 12764.,  9336.,  9140.,  6672.,  6200.,  6694.,  9508., 10450., 10730.,  9218.,  9092.,  6998.,  6200.,  4448.,  6456.,  6672.,  8424.,  7784.,  8936.,  6672.,  5944.,  4448.,  4960.,  5560.,  7440.,  7784.,  8936.,  7784.,  7440.,  5560.,  4960.,  5816.,  7294.,  7956., 11034.,  9906., 10058.,  8084.,  8142.,  5816.,  7440.,  8548., 11288., 11340., 12092., 11468., 11032.,  8676.,  7440.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  6672., 10228., 10424., 12764., 11340., 13404., 10008.,  8916.,  6672.,  6200.,  7542.,  9636.,  9218., 11034., 10450.,  9636.,  6566.,  6200.,  4448.,  5944.,  6672.,  8936.,  7784.,  8424.,  6672.,  6456.,  4448.,  4960.,  5560.,  7440.,  7784.,  8424.,  7784.,  7440.,  5560.,  4960.,  5304.,  7726.,  8180., 10058.,  9346., 11034.,  8724.,  7294.,  5304.,  7440.,  8004., 10616., 11468., 13404., 11340., 10616.,  8132.,  7440.,  8040., 10266., 11292., 15502., 14006., 14398., 10748., 10826.,  8040.,  8680.,  9682., 13356., 14006., 14398., 12902., 12684., 10114.,  8680.,  7528., 11498., 11932., 14398., 12902., 15502., 12060., 10266.,  7528.,  8680.,  9986., 12812., 12902., 15502., 14006., 12812.,  9138.,  8680.,  6672.,  8916., 10008., 13404., 11884., 12764.,  9336.,  9140.,  6672.,  6200.,  6694.,  9508., 10450., 10730.,  9218.,  9092.,  6998.,  6200.,  4448.,  6456.,  6672.,  8424.,  7784.,  8936.,  6672.,  5944.,  4448.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,  2314.,  4420.,  7214.,  5654.,  6462.,  8614., 10766.,  7908.,  3082.,  5080.,  8880.,  8776.,  8424.,  7368.,  8680., 11336.,  8880.,  4056.,  5112., 11760., 13736.,  8776.,  8424.,  7368.,  8680.,  7024.,  3256.,  4312., 10736., 15816., 13736.,  8776.,  8424.,  7368.,  5168.,  2456.,  3512.,  8880., 13992., 15816., 13736.,  8776.,  8424.,  4656.,  1656.,  2642.,  6740., 10630., 12974., 14486., 12094.,  6822.,  4596.,   914.,  1500.,  3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,   412.,   278.,   828.,  1714.,  2218.,  2722.,  3226.,  2898.,  1884.,   150.,   190.,   716.,  1642.,  2722.,  3802.,  4882.,  5962.,  4780.,  2814.,  2572.,  3768.,  5380.,  3700.,  5412.,  7124.,  8836.,  4856.,  3084.,  5802.,  5700.,  8398.,  7094.,  6110.,  8518., 10926.,  7140.,  4522.,  6424., 10736., 13000., 11624., 11592., 11880., 15560., 11248.,  6936.,  7992., 13104., 18984., 13000., 11624., 11592., 11880.,  8880.,  5624.,  6680., 13616., 20040., 18984., 13000., 11624., 11592.,  6512.,  4312.,  5368., 11248., 19240., 20040., 18984., 13000., 11624.,  7536.,  3000.,  3570.,  7508., 12838., 15438., 15158., 13022.,  5958.,  3316.,  1842.,  1756.,  4440.,  8180., 10148., 12116., 11204.,  8436.,  3416.,   988.,   950.,  2428.,  4498.,  5770.,  7042.,  8314.,  6706.,  3996.,   310.,    30.,   140.,   394.,   706.,  1018.,  1330.,  1642.,  1644.,  1118.,   460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,  2314.,  4420.,  7214.,  5654.,  6462.,  8614., 10766.,  7908.,  3082.,  5080.,  8880.,  8776.,  8424.,  7368.,  8680., 11336.,  8880.,  4056.,  5112., 11760., 13736.,  8776.,  8424.,  7368.,  8680.,  7024.,  3256.,  4312., 10736., 15816., 13736.,  8776.,  8424.,  7368.,  5168.,  2456.,  3512.,  8880., 13992., 15816., 13736.,  8776.,  8424.,  4656.,  1656.,  2642.,  6740., 10630., 12974., 14486., 12094.,  6822.,  4596.,   914.,  1500.,  3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,   412.,   278.,   828.,  1714.,  2218.,  2722.,  3226.,  2898.,  1884.,   150.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2848.,  3104.,  3814.,  4144.,  4920.,  5296.,  6142.,  6568.,  6382.,  6804.,  6558.,  6976.,  5584.,  5936.,  4366.,  4648.,  3504.,  3712.,  4478.,  4760.,  5773.,  6138.,  6771.,  7192.,  7898.,  8380.,  7811.,  8296.,  7660.,  8148.,  6085.,  6500.,  4213.,  4550.,  2930.,  3184.,  5144.,  5488.,  6271.,  6716.,  6696.,  7216.,  7295.,  7896.,  7875.,  8486.,  8391.,  9012.,  7612.,  8144.,  6483.,  6920.,  5152.,  5488.,  6566.,  7008.,  8306.,  8876.,  9995., 10668., 11903., 12686., 12192., 12992., 12417., 13234., 10697., 11400.,  8542.,  9124.,  6386.,  6840.,  8590.,  9060., 10407., 11004., 11723., 12422., 12968., 13776., 12393., 13186., 12170., 12980., 10877., 11574.,  9151.,  9728.,  7714.,  8164.,  7254.,  7720.,  9212.,  9804., 11243., 11936., 12913., 13714., 12466., 13252., 12819., 13622., 10801., 11492.,  8352.,  8924.,  6482.,  6928.,  7454.,  7916.,  9681., 10268., 11531., 12218., 12730., 13524., 12411., 13190., 12316., 13112., 10469., 11154.,  8193.,  8760.,  6786.,  7228.,  6696.,  7040.,  8037.,  8474.,  9608., 10144., 11261., 11902., 11245., 11896., 11965., 12658., 10404., 11016.,  8489.,  9014.,  6784.,  7216.,  5478.,  5796.,  5898.,  6300.,  7539.,  8030.,  8939.,  9524.,  9352.,  9940.,  9925., 10548.,  8585.,  9134.,  6934.,  7404.,  5826.,  6212.,  5056.,  5312.,  6442.,  6764.,  7992.,  8384.,  8978.,  9444.,  8858.,  9320.,  9346.,  9836.,  8352.,  8784.,  7122.,  7492.,  5648.,  5952.,  3392.,  3680.,  4630.,  5000.,  6056.,  6512.,  7326.,  7840.,  7310.,  7820.,  7230.,  7736.,  6304.,  6736.,  5118.,  5472.,  4080.,  4352.,  6526.,  6880.,  7639.,  8078.,  8939.,  9468.,  9636., 10228.,  8941.,  9504.,  8118.,  8652.,  6293.,  6752.,  5191.,  5570.,  4482.,  4776.,  5544.,  5936.,  6847.,  7336.,  8368.,  8960.,  9895., 10564.,  9419., 10066.,  8815.,  9440.,  7380.,  7920.,  5603.,  6052.,  4464.,  4816.,  7030.,  7496.,  9220.,  9804., 11691., 12400., 12921., 13730., 12730., 13524., 12411., 13190., 10737., 11412.,  8648.,  9212.,  6386.,  6832.,  7166.,  7628.,  8729.,  9308., 10571., 11274., 12578., 13412., 12643., 13462., 12580., 13384., 11013., 11714.,  9033.,  9624.,  7170.,  7644.,  8070.,  8528.,  9198.,  9772., 10603., 11300., 12907., 13734., 13100., 13912., 13165., 13962., 11449., 12144.,  9322.,  9908.,  7602.,  8072.,  7438.,  7892.,  9283.,  9852., 11403., 12094., 13108., 13928., 12405., 13210., 11574., 12364., 10605., 11294.,  9227.,  9808.,  7522.,  7988.,  6968.,  7328.,  8429.,  8878., 10112., 10656., 11037., 11682., 10413., 11036., 10685., 11286.,  9292.,  9816.,  7553.,  7994.,  5840.,  6192.,  5862.,  6156.,  6860.,  7240.,  8059.,  8530.,  9213.,  9780.,  8986.,  9556.,  8695.,  9268.,  6985.,  7482.,  4960.,  5376.,  4306.,  4636.,  4096.,  4352.,  5514.,  5844.,  7112.,  7520.,  8354.,  8844.,  8618.,  9104.,  8818.,  9300.,  7856.,  8272.,  6642.,  6988.,  5168.,  5440.,  3264.,  3552.,  3334.,  3680.,  4568.,  4976.,  5950.,  6424.,  6190.,  6660.,  6366.,  6832.,  5680.,  6064.,  5070.,  5400.,  4464.,  4736.,  6174.,  6568.,  7297.,  7778.,  8611.,  9184., 10126., 10796., 10039., 10712.,  9856., 10500.,  7877.,  8412.,  6329.,  6782.,  4978.,  5344.,  7192.,  7600.,  7839.,  8340.,  8696.,  9296.,  9775., 10480., 10355., 11070., 10391., 11084.,  8972.,  9552.,  7379.,  7872.,  6240.,  6640.,  7270.,  7728.,  9078.,  9644., 11147., 11828., 12819., 13622., 13108., 13928., 12405., 13210.,  9977., 10656.,  8786.,  9364.,  7250.,  7720.,  7598.,  8052.,  9227.,  9788., 11115., 11790., 12316., 13112., 12157., 12970., 11582., 12380., 10349., 11022.,  8755.,  9328.,  7106.,  7572.,  7510.,  7992.,  9216.,  9804., 11179., 11880., 13189., 14010., 13734., 14572., 13415., 14238., 11265., 11964.,  8660.,  9228.,  6706.,  7168.,  7518.,  7996.,  9365.,  9948., 11467., 12162., 13326., 14140., 13423., 14254., 13232., 14048., 10933., 11626.,  8181.,  8744.,  6818.,  7276.,  7784.,  8192.,  8725.,  9218.,  9880., 10464., 11485., 12166., 12109., 12800., 11997., 12666., 10420., 10984.,  8441.,  8894.,  6592.,  6960.,  5446.,  5748.,  6286.,  6644.,  7267.,  7686.,  8335.,  8820.,  8364.,  8852.,  8329.,  8820.,  6633.,  7046.,  4618.,  4948.,  3554.,  3828.,  5856.,  6144.,  6122.,  6460.,  6520.,  6912.,  6706.,  7156.,  6202.,  6648.,  6658.,  7100.,  6112.,  6480.,  5298.,  5588.,  4432.,  4672.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    26.,    32.,    38.,    44.,    50.,    56.,    62.,    68.,    59.,    64.,    39.,    42.,    19.,    24.,    64.,    76.,   139.,   160.,   181.,   202.,   223.,   244.,   265.,   286.,   307.,   328.,   260.,   276.,   159.,   168.,    96.,   108.,   261.,   288.,   501.,   546.,   591.,   636.,   681.,   726.,   771.,   816.,   861.,   906.,   687.,   720.,   402.,   420.,   274.,   296.,   680.,   728.,  1226.,  1304.,  1382.,  1460.,  1538.,  1616.,  1694.,  1772.,  1850.,  1928.,  1424.,  1480.,   810.,   840.,   582.,   604.,  1352.,  1400.,  2318.,  2396.,  2474.,  2552.,  2630.,  2708.,  2786.,  2864.,  2942.,  3020.,  2208.,  2264.,  1230.,  1260.,   890.,   912.,  2024.,  2072.,  3410.,  3488.,  3566.,  3644.,  3722.,  3800.,  3878.,  3956.,  4034.,  4112.,  2992.,  3048.,  1650.,  1680.,  1198.,  1220.,  2696.,  2744.,  4502.,  4580.,  4658.,  4736.,  4814.,  4892.,  4970.,  5048.,  5126.,  5204.,  3776.,  3832.,  2070.,  2100.,  1407.,  1428.,  3069.,  3114.,  4992.,  5064.,  5136.,  5208.,  5280.,  5352.,  5424.,  5496.,  5568.,  5640.,  4011.,  4062.,  2157.,  2184.,  1305.,  1322.,  2800.,  2836.,  4489.,  4546.,  4603.,  4660.,  4717.,  4774.,  4831.,  4888.,  4945.,  5002.,  3516.,  3556.,  1869.,  1890.,   850.,   860.,  1805.,  1826.,  2867.,  2900.,  2933.,  2966.,  2999.,  3032.,  3065.,  3098.,  3131.,  3164.,  2207.,  2230.,  1164.,  1176.,    13.,    26.,    53.,    80.,   122.,   164.,   206.,   248.,   290.,   332.,   374.,   416.,   458.,   500.,   347.,   376.,   195.,   210.,   211.,   240.,   496.,   556.,   859.,   952.,  1045.,  1138.,  1231.,  1324.,  1417.,  1510.,  1603.,  1696.,  1172.,  1236.,   639.,   672.,   636.,   684.,  1413.,  1512.,  2337.,  2490.,  2643.,  2796.,  2949.,  3102.,  3255.,  3408.,  3561.,  3714.,  2559.,  2664.,  1374.,  1428.,  1330.,  1400.,  2888.,  3032.,  4682.,  4904.,  5126.,  5348.,  5570.,  5792.,  6014.,  6236.,  6458.,  6680.,  4592.,  4744.,  2442.,  2520.,  2310.,  2380.,  4904.,  5048.,  7790.,  8012.,  8234.,  8456.,  8678.,  8900.,  9122.,  9344.,  9566.,  9788.,  6720.,  6872.,  3534.,  3612.,  3290.,  3360.,  6920.,  7064., 10898., 11120., 11342., 11564., 11786., 12008., 12230., 12452., 12674., 12896.,  8848.,  9000.,  4626.,  4704.,  4270.,  4340.,  8936.,  9080., 14006., 14228., 14450., 14672., 14894., 15116., 15338., 15560., 15782., 16004., 10976., 11128.,  5718.,  5796.,  3963.,  4020.,  8253.,  8370., 12876., 13056., 13236., 13416., 13596., 13776., 13956., 14136., 14316., 14496.,  9915., 10038.,  5145.,  5208.,  3177.,  3218.,  6592.,  6676., 10249., 10378., 10507., 10636., 10765., 10894., 11023., 11152., 11281., 11410.,  7788.,  7876.,  4029.,  4074.,  1870.,  1892.,  3869.,  3914.,  5999.,  6068.,  6137.,  6206.,  6275.,  6344.,  6413.,  6482.,  6551.,  6620.,  4511.,  4558.,  2328.,  2352.,    25.,    50.,   101.,   152.,   230.,   308.,   386.,   464.,   542.,   620.,   698.,   776.,   854.,   932.,   635.,   688.,   351.,   378.,   403.,   456.,   928.,  1036.,  1579.,  1744.,  1909.,  2074.,  2239.,  2404.,  2569.,  2734.,  2899.,  3064.,  2084.,  2196.,  1119.,  1176.,  1176.,  1260.,  2565.,  2736.,  4173.,  4434.,  4695.,  4956.,  5217.,  5478.,  5739.,  6000.,  6261.,  6522.,  4431.,  4608.,  2346.,  2436.,  2386.,  2504.,  5096.,  5336.,  8138.,  8504.,  8870.,  9236.,  9602.,  9968., 10334., 10700., 11066., 11432.,  7760.,  8008.,  4074.,  4200.,  4038.,  4156.,  8456.,  8696., 13262., 13628., 13994., 14360., 14726., 15092., 15458., 15824., 16190., 16556., 11232., 11480.,  5838.,  5964.,  5690.,  5808., 11816., 12056., 18386., 18752., 19118., 19484., 19850., 20216., 20582., 20948., 21314., 21680., 14704., 14952.,  7602.,  7728.,  7342.,  7460., 15176., 15416., 23510., 23876., 24242., 24608., 24974., 25340., 25706., 26072., 26438., 26804., 18176., 18424.,  9366.,  9492.,  6519.,  6612., 13437., 13626., 20760., 21048., 21336., 21624., 21912., 22200., 22488., 22776., 23064., 23352., 15819., 16014.,  8133.,  8232.,  5049.,  5114., 10384., 10516., 16009., 16210., 16411., 16612., 16813., 17014., 17215., 17416., 17617., 17818., 12060., 12196.,  6189.,  6258.,  2890.,  2924.,  5933.,  6002.,  9131.,  9236.,  9341.,  9446.,  9551.,  9656.,  9761.,  9866.,  9971., 10076.,  6815.,  6886.,  3492.,  3528.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6192.,  7184.,  8416.,  9736., 11128., 12680., 14232., 16048., 13600., 15384., 12456., 14208., 10312., 11800.,  8384.,  9576.,  5584.,  6448.,  8848., 10040., 11381., 12971., 12692., 14592., 16541., 18791., 16863., 19137., 16673., 18971., 13208., 15188., 10821., 12443.,  8408.,  9632., 12600., 14152., 15676., 17640., 17772., 20068., 20328., 23004., 20500., 23128., 19904., 22484., 14660., 16796., 11068., 12840.,  8424.,  9784., 13352., 15168., 17957., 20271., 20896., 23636., 24425., 27647., 23791., 27021., 24437., 27675., 20268., 22992., 16309., 18591., 12096., 13880., 15824., 17736., 18359., 20761., 22412., 25232., 25887., 29181., 24389., 27563., 23755., 26937., 19544., 22220., 16455., 18697., 12232., 13984., 15128., 17008., 18409., 20771., 20248., 23020., 24437., 27675., 24315., 27561., 24961., 28215., 19940., 22696., 16953., 19283., 14000., 15848., 15456., 17304., 18715., 21037., 21668., 24392., 23755., 26937., 24401., 27591., 23767., 26965., 20496., 23204., 16075., 18365., 12856., 14672., 12344., 13768., 15732., 17504., 18012., 20180., 20304., 22916., 20156., 22848., 21032., 23804., 17204., 19596., 15508., 17600., 12424., 14168., 12168., 13392., 13467., 14969., 16472., 18292., 18191., 20369., 18161., 20363., 17107., 19333., 14620., 16520., 10923., 12585.,  9264., 10648.,  8816.,  9680., 11072., 12200., 11832., 13256., 14232., 15984., 15680., 17528., 16360., 18304., 14664., 16408., 11872., 13384.,  7920.,  9168.,  8944., 10192.,  9392., 10904., 12344., 14152., 14440., 16448., 13808., 15784., 12664., 14608., 10664., 12280.,  7984.,  9240.,  7216.,  8208., 12864., 14376., 13841., 15639., 15260., 17384., 18129., 20491., 17075., 19333., 15253., 17407., 10816., 12636.,  8705., 10151.,  7144.,  8304., 14328., 16136., 17284., 19472., 19548., 22164., 21600., 24564., 21772., 24688., 21176., 24044., 17332., 19788., 12548., 14544., 10920., 12536., 14872., 16752., 18233., 20531., 21912., 24684., 24389., 27563., 23755., 26937., 24401., 27591., 20324., 23080., 16265., 18531., 11952., 13800., 14688., 16536., 17003., 19261., 20516., 23240., 24315., 27561., 24961., 28215., 24839., 28101., 21744., 24580., 17787., 20141., 14488., 16432., 15528., 17344., 18077., 20295., 20656., 23332., 24401., 27591., 23767., 26965., 24413., 27619., 20764., 23552., 17421., 19735., 13600., 15512., 14320., 16104., 18479., 20785., 21660., 24416., 24839., 28101., 25485., 28755., 25363., 28641., 22440., 25308., 18943., 21345., 13736., 15616., 13464., 15016., 17404., 19400., 19308., 21668., 21928., 24700., 20916., 23640., 21184., 23860., 17156., 19484., 13948., 15880., 10440., 11928., 11896., 13184., 14839., 16549., 16864., 18908., 18403., 20821., 19397., 21839., 19879., 22345., 16996., 19120., 12519., 14261.,  9024., 10344.,  9680., 10672., 12432., 13752., 13208., 14760., 14216., 16032., 13264., 15048., 13848., 15600., 12168., 13656.,  9264., 10456.,  5072.,  5936.,  6960.,  7952.,  7168.,  8360.,  9752., 11176., 12728., 14416., 12096., 13752., 12840., 14592.,  9544., 11032.,  8352.,  9672.,  7056.,  8176., 10096., 11416., 11149., 12771., 12676., 14640., 16805., 19151., 17127., 19497., 18473., 20867., 15112., 17156., 12349., 14131., 10264., 11744., 12248., 13672., 14060., 15832., 15884., 18052., 18296., 20908., 19588., 22280., 19856., 22628., 17924., 20316., 15212., 17304., 12040., 13784., 13736., 15552., 17997., 20279., 21392., 24196., 24961., 28215., 24839., 28101., 25485., 28755., 21148., 23936., 18621., 20999., 14368., 16280., 15088., 16872., 17535., 19777., 22044., 24800., 23767., 26965., 24413., 27619., 23779., 26993., 20936., 23676., 16719., 19057., 13992., 15872., 14744., 16624., 18961., 21291., 22024., 24860., 25485., 28755., 25363., 28641., 26009., 29295., 21844., 24664., 17121., 19419., 12592., 14440., 14816., 16664., 17475., 19765., 21908., 24696., 23779., 26993., 24425., 27647., 23791., 27021., 20864., 23636., 16499., 18757., 13240., 15056., 14840., 16520., 16932., 19024., 19580., 22132., 22784., 25716., 23660., 26672., 23416., 26380., 18068., 20588., 14628., 16656., 11304., 12920., 12904., 14256., 14995., 16657., 16296., 18308., 17047., 19321., 18041., 20339., 18523., 20845., 14988., 16952.,  9827., 11393.,  8016.,  9272., 12176., 13424., 14048., 15560., 15960., 17768., 16344., 18352., 15392., 17368., 15976., 17920., 13544., 15160.,  9760., 11016.,  5424.,  6416.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   169.,   211.,   253.,   295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,   112.,   148.,   324.,   412.,   636.,   792.,   596.,   752.,   908.,  1064.,  1220.,  1376.,  1532.,  1688.,  1324.,  1444.,   824.,   892.,   561.,   651.,  1048.,  1252.,  1765.,  2107.,  1489.,  1831.,  1821.,  2163.,  2505.,  2847.,  3189.,  3531.,  2628.,  2880.,  1581.,  1719.,  1304.,  1472.,  2392.,  2760.,  3584.,  4184.,  2960.,  3560.,  3200.,  3800.,  4048.,  4648.,  5248.,  5848.,  4232.,  4664.,  2504.,  2736.,  2216.,  2384.,  3896.,  4264.,  5360.,  5960.,  3584.,  4184.,  2960.,  3560.,  3200.,  3800.,  4048.,  4648.,  3368.,  3800.,  2040.,  2272.,  1880.,  2048.,  4408.,  4776.,  6400.,  7000.,  5360.,  5960.,  3584.,  4184.,  2960.,  3560.,  3200.,  3800.,  2504.,  2936.,  1576.,  1808.,  1544.,  1712.,  3672.,  4040.,  6448.,  7048.,  6400.,  7000.,  5360.,  5960.,  3584.,  4184.,  2960.,  3560.,  1992.,  2424.,  1112.,  1344.,  1191.,  1353.,  2868.,  3216.,  5079.,  5637.,  6195.,  6753.,  6063.,  6621.,  4939.,  5497.,  3079.,  3637.,  1600.,  1996.,   675.,   885.,   784.,   916.,  1924.,  2204.,  3452.,  3896.,  4340.,  4784.,  5228.,  5672.,  4868.,  5312.,  3516.,  3960.,  1388.,  1700.,   312.,   476.,   371.,   449.,   936.,  1100.,  1711.,  1969.,  2227.,  2485.,  2743.,  3001.,  3259.,  3517.,  2527.,  2785.,  1452.,  1632.,    71.,   165.,    77.,   179.,   364.,   576.,   877.,  1207.,  1537.,  1867.,  2197.,  2527.,  2857.,  3187.,  3517.,  3847.,  2672.,  2900.,  1505.,  1623.,  1600.,  1828.,  2052.,  2396.,  2732.,  3208.,  1796.,  2272.,  2748.,  3224.,  3700.,  4176.,  4652.,  5128.,  2444.,  2692.,  1448.,  1580.,  3177.,  3427.,  3176.,  3572.,  3981.,  4547.,  3129.,  3695.,  2373.,  2939.,  3505.,  4071.,  4637.,  5203.,  2740.,  3056.,  1669.,  1839.,  3064.,  3360.,  5048.,  5544.,  5600.,  6328.,  4720.,  5448.,  4192.,  4920.,  3760.,  4488.,  5216.,  5944.,  3464.,  3896.,  2120.,  2352.,  3208.,  3504.,  5272.,  5768.,  7632.,  8360.,  5600.,  6328.,  4720.,  5448.,  4192.,  4920.,  3760.,  4488.,  2600.,  3032.,  1656.,  1888.,  2616.,  2912.,  5016.,  5512.,  7392.,  8120.,  7632.,  8360.,  5600.,  6328.,  4720.,  5448.,  4192.,  4920.,  1736.,  2168.,  1192.,  1424.,  2024.,  2320.,  4024.,  4520.,  6672.,  7400.,  7392.,  8120.,  7632.,  8360.,  5600.,  6328.,  4720.,  5448.,  2760.,  3192.,   728.,   960.,  1151.,  1345.,  2244.,  2528.,  3679.,  4077.,  4475.,  4873.,  4535.,  4933.,  4115.,  4513.,  1423.,  1821.,   752.,   956.,   411.,   525.,   416.,   484.,  1060.,  1212.,  1964.,  2216.,  2468.,  2720.,  2972.,  3224.,  2740.,  2992.,  2028.,  2280.,   780.,   964.,   200.,   300.,   219.,   265.,   568.,   668.,  1063.,  1225.,  1387.,  1549.,  1711.,  1873.,  2035.,  2197.,  1623.,  1785.,   956.,  1072.,    47.,   109.,    53.,   123.,   252.,   400.,   613.,   847.,  1081.,  1315.,  1549.,  1783.,  2017.,  2251.,  2485.,  2719.,  1920.,  2084.,  1097.,  1183.,  1104.,  1268.,  1540.,  1884.,  2332.,  2872.,  2036.,  2576.,  3116.,  3656.,  4196.,  4736.,  5276.,  5816.,  4076.,  4452.,  2328.,  2524.,  2369.,  2651.,  4024.,  4612.,  5173.,  5963.,  3745.,  4535.,  3949.,  4739.,  5529.,  6319.,  7109.,  7899.,  4996.,  5504.,  2013.,  2215.,  3704.,  4000.,  6424.,  7048.,  6592.,  7448.,  5456.,  6312.,  4160.,  5016.,  4496.,  5352.,  6208.,  7064.,  4584.,  5144.,  1992.,  2224.,  3336.,  3632.,  7416.,  8040.,  8880.,  9736.,  6592.,  7448.,  5456.,  6312.,  4160.,  5016.,  4496.,  5352.,  3464.,  4024.,  1528.,  1760.,  2744.,  3040.,  6392.,  7016.,  9408., 10264.,  8880.,  9736.,  6592.,  7448.,  5456.,  6312.,  4160.,  5016.,  2344.,  2904.,  1064.,  1296.,  2152.,  2448.,  5144.,  5768.,  7920.,  8776.,  9408., 10264.,  8880.,  9736.,  6592.,  7448.,  5456.,  6312.,  2600.,  3160.,   600.,   832.,  1367.,  1593.,  3348.,  3824.,  5127.,  5749.,  6371.,  6993.,  7391.,  8013.,  6395.,  7017.,  3639.,  4261.,  2240.,  2636.,   243.,   389.,   656.,   788.,  1668.,  1948.,  2460.,  2776.,  3092.,  3408.,  3724.,  4040.,  4132.,  4448.,  2524.,  2840.,   268.,   452.,    88.,   124.,    67.,    81.,   200.,   236.,   415.,   481.,   547.,   613.,   679.,   745.,   811.,   877.,   719.,   785.,   460.,   512.,    23.,    53.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  4656.,  7920.,  7532., 11484.,  6904., 11672., 10708., 16420.,  8356., 14196., 10964., 16676.,  6648., 11416.,  7532., 11484.,  4656.,  7920.,  5160.,  7880.,  4726.,  8094.,  7612., 11692.,  6874., 11730.,  9010., 13802.,  6538., 11266.,  7532., 11484.,  4726.,  8094.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6302.,  9734.,  6028., 10236.,  9010., 13802.,  6538., 11266.,  8674., 13338.,  5948., 10028.,  6302.,  9734.,  3880.,  6600.,  6192.,  9456.,  6028., 10236.,  9624., 14648.,  8020., 13732., 10628., 16212.,  8276., 13988.,  9368., 14392.,  6028., 10236.,  6192.,  9456.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  4656.,  7920.,  7948., 12156.,  7064., 12088., 10964., 16676.,  7940., 13524., 10708., 16420.,  7320., 12344.,  7948., 12156.,  4656.,  7920.,  5160.,  7880.,  4806.,  8302.,  7868., 11948.,  6538., 11266.,  8674., 13338.,  6874., 11730.,  7948., 12156.,  4806.,  8302.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.,  4128.,  6304.,  3880.,  6600.,  6192.,  9456.,  5432.,  9240.,  7224., 11032.,  5432.,  9240.,  6192.,  9456.,  3880.,  6600.,  4128.,  6304.,  3880.,  6600.,  6222.,  9526.,  5612.,  9564.,  8674., 13338.,  6874., 11730.,  9010., 13802.,  5692.,  9772.,  6222.,  9526.,  3880.,  6600.,  6192.,  9456.,  5612.,  9564.,  8952., 13720.,  8276., 13988., 11044., 16884.,  8020., 13732.,  9208., 13976.,  5612.,  9564.,  6192.,  9456.,  5432.,  9240.,  8674., 13338.,  8276., 13988., 12494., 19190.,  9462., 16222., 12414., 18982.,  7940., 13524.,  8674., 13338.,  5432.,  9240.,  7224., 11032.,  6874., 11730., 11044., 16884.,  9462., 16222., 12414., 18982.,  9382., 16014., 10708., 16420.,  6874., 11730.,  7224., 11032.,  5432.,  9240.,  9010., 13802.,  8020., 13732., 12414., 18982.,  9382., 16014., 12494., 19190.,  8356., 14196.,  9010., 13802.,  5432.,  9240.,  7224., 11032.,  6538., 11266., 10628., 16212.,  9382., 16014., 12494., 19190.,  9462., 16222., 10964., 16676.,  6538., 11266.,  7224., 11032.,  4656.,  7920.,  7532., 11484.,  6904., 11672., 10708., 16420.,  8356., 14196., 10964., 16676.,  6648., 11416.,  7532., 11484.,  4656.,  7920.,  5160.,  7880.,  4726.,  8094.,  7612., 11692.,  6874., 11730.,  9010., 13802.,  6538., 11266.,  7532., 11484.,  4726.,  8094.,  5160.,  7880.,  3104.,  5280.,  5160.,  7880.,  4656.,  7920.,  7224., 11032.,  5432.,  9240.,  7224., 11032.,  4656.,  7920.,  5160.,  7880.,  3104.,  5280.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1298.,  1610.,   578.,   890.,   932.,  1204.,   782.,   950.,   420.,   692.,  1528.,  2200.,  3388.,  4588.,  4444.,  5644.,  4988.,  6188.,  4700.,  5900.,  3388.,  4588.,  2712.,  3640.,  2116.,  2644.,  2002.,  2698.,  4300.,  5884.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  4572.,  6028.,  1250.,  1818.,  4072.,  4872.,  7280.,  9136.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424.,  6768.,  8624.,  2536.,  3336.,  3304.,  4104.,  8304., 10160., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  5744.,  7600.,  3816.,  4616.,  2024.,  2824.,  6256.,  8112., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496.,  7792.,  9648.,  2536.,  3336.,  2280.,  3080.,  5232.,  7088., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728.,  6768.,  8624.,  2792.,  3592.,  3962.,  4722.,  6812.,  8524.,  6566.,  8910.,  8566., 10910.,  9542., 11886.,  9494., 11838.,  6566.,  8910.,  5292.,  6876.,  1418.,  2050.,  2660.,  3188.,  6264.,  7448.,  5628.,  7084.,  2780.,  4236.,  5372.,  6828.,  7452.,  8908.,  5628.,  7084.,  1176.,  2104.,   644.,   916.,   486.,   590.,  1476.,  1748.,  2266.,  2770.,  1930.,  2434.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.,   190.,   486.,  1012.,  1668.,  2594.,  3674.,  4754.,  5834.,  4546.,  5626.,  3826.,  4906.,  2594.,  3674.,  2788.,  3572.,  1966.,  2390.,  2276.,  3060.,  3896.,  5080.,  6268.,  7980.,  6300.,  8012.,  5820.,  7532.,  6556.,  8268.,  6268.,  7980.,  1688.,  2616.,  1604.,  2132.,  4722.,  5674.,  4812.,  6396.,  8142., 10550.,  9246., 11654.,  9326., 11734.,  8382., 10790.,  8142., 10550.,  5084.,  6540.,  1922.,  2746.,  4392.,  5704.,  8624., 10992., 11480., 15160., 13784., 17464., 14552., 18232., 13784., 17464., 11480., 15160.,  9136., 11504.,  5928.,  7240.,  4648.,  5960.,  8624., 10992., 13784., 17464., 11480., 15160., 13784., 17464., 14552., 18232., 13784., 17464.,  7088.,  9456.,  4136.,  5448.,  4392.,  5704.,  9648., 12016., 14552., 18232., 13784., 17464., 11480., 15160., 13784., 17464., 14552., 18232.,  8112., 10480.,  3880.,  5192.,  5672.,  6984.,  7600.,  9968., 13784., 17464., 14552., 18232., 13784., 17464., 11480., 15160., 13784., 17464., 10160., 12528.,  5160.,  6472.,  3610.,  4626.,  6300.,  8012.,  6726.,  9326.,  9238., 11838., 10726., 13326., 11190., 13790.,  6726.,  9326.,  4780.,  6364.,  3114.,  4002.,  3172.,  3700.,  5240.,  6424.,  7484.,  9452.,  5660.,  7628.,  7228.,  9196.,  8284., 10252.,  7484.,  9452.,  3544.,  4984.,  1476.,  2260.,  1670.,  2030.,  4356.,  5140.,  5306.,  6578.,  4458.,  5730.,  3098.,  4370.,  5642.,  6914.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1202.,  1514.,  1506.,  1818.,  1298.,  1610.,   578.,   890.,   932.,  1204.,   782.,   950.,   420.,   692.,  1528.,  2200.,  3388.,  4588.,  4444.,  5644.,  4988.,  6188.,  4700.,  5900.,  3388.,  4588.,  2712.,  3640.,  2116.,  2644.,  2002.,  2698.,  4300.,  5884.,  7982., 10134.,  8574., 10726.,  8142., 10294.,  6686.,  8838.,  7982., 10134.,  4572.,  6028.,  1250.,  1818.,  4072.,  4872.,  7280.,  9136.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424.,  6768.,  8624.,  2536.,  3336.,  3304.,  4104.,  8304., 10160., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496., 10072., 12728.,  5744.,  7600.,  3816.,  4616.,  2024.,  2824.,  6256.,  8112., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728., 10840., 13496.,  7792.,  9648.,  2536.,  3336.,  2280.,  3080.,  5232.,  7088., 10072., 12728., 10840., 13496., 10072., 12728.,  7768., 10424., 10072., 12728.,  6768.,  8624.,  2792.,  3592.,  3962.,  4722.,  6812.,  8524.,  6566.,  8910.,  8566., 10910.,  9542., 11886.,  9494., 11838.,  6566.,  8910.,  5292.,  6876.,  1418.,  2050.,  2660.,  3188.,  6264.,  7448.,  5628.,  7084.,  2780.,  4236.,  5372.,  6828.,  7452.,  8908.,  5628.,  7084.,  1176.,  2104.,   644.,   916.,   486.,   590.,  1476.,  1748.,  2266.,  2770.,  1930.,  2434.,  1082.,  1586.,  2090.,  2594.,  2266.,  2770.,  1652.,  2052.,   150.,   382.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2688.,  2944.,  3200.,  3456.,  3714.,  4044.,  4374.,  4704.,  4984.,  5360.,  5736.,  6112.,  6418.,  6844.,  7270.,  7696.,  6518.,  6940.,  7362.,  7784.,  6490.,  6908.,  7326.,  7744.,  4832.,  5184.,  5536.,  5888.,  3618.,  3900.,  4182.,  4464.,  2576.,  2784.,  2992.,  3200.,  3874.,  4156.,  4438.,  4720.,  4845.,  5210.,  5575.,  5940.,  5185.,  5606.,  6027.,  6448.,  6738.,  7220.,  7702.,  8184.,  7073.,  7558.,  8043.,  8528.,  7280.,  7768.,  8256.,  8744.,  5931.,  6346.,  6761.,  7176.,  4217.,  4554.,  4891.,  5228.,  2886.,  3140.,  3394.,  3648.,  5336.,  5680.,  6024.,  6368.,  6401.,  6846.,  7291.,  7736.,  7016.,  7536.,  8056.,  8576.,  7877.,  8478.,  9079.,  9680.,  8451.,  9062.,  9673., 10284.,  8897.,  9518., 10139., 10760.,  7620.,  8152.,  8684.,  9216.,  6161.,  6598.,  7035.,  7472.,  4240.,  4576.,  4912.,  5248.,  6930.,  7372.,  7814.,  8256.,  8458.,  9028.,  9598., 10168.,  9493., 10166., 10839., 11512., 10863., 11646., 12429., 13212., 10656., 11456., 12256., 13056., 11345., 12162., 12979., 13796.,  9939., 10642., 11345., 12048.,  8502.,  9084.,  9666., 10248.,  6750.,  7204.,  7658.,  8112.,  7942.,  8412.,  8882.,  9352.,  9785., 10382., 10979., 11576., 10971., 11670., 12369., 13068., 12200., 13008., 13816., 14624., 11321., 12114., 12907., 13700., 11114., 11924., 12734., 13544.,  9377., 10074., 10771., 11468.,  7901.,  8478.,  9055.,  9632.,  6402.,  6852.,  7302.,  7752.,  7386.,  7852.,  8318.,  8784.,  9672., 10264., 10856., 11448., 11137., 11830., 12523., 13216., 12353., 13154., 13955., 14756., 11730., 12516., 13302., 14088., 11651., 12454., 13257., 14060.,  9327., 10018., 10709., 11400.,  7556.,  8128.,  8700.,  9272.,  6054.,  6500.,  6946.,  7392.,  6830.,  7292.,  7754.,  8216.,  8791.,  9378.,  9965., 10552., 10791., 11478., 12165., 12852., 12250., 13044., 13838., 14632., 11883., 12662., 13441., 14220., 11932., 12728., 13524., 14320.,  9789., 10474., 11159., 11844.,  7467.,  8034.,  8601.,  9168.,  5706.,  6148.,  6590.,  7032.,  5496.,  5840.,  6184.,  6528.,  6901.,  7338.,  7775.,  8212.,  8216.,  8752.,  9288.,  9824.,  9721., 10362., 11003., 11644.,  9935., 10586., 11237., 11888., 10565., 11258., 11951., 12644.,  8804.,  9416., 10028., 10640.,  7301.,  7826.,  8351.,  8876.,  5776.,  6208.,  6640.,  7072.,  5838.,  6156.,  6474.,  6792.,  6530.,  6932.,  7334.,  7736.,  7835.,  8326.,  8817.,  9308.,  9005.,  9590., 10175., 10760.,  9252.,  9840., 10428., 11016.,  9787., 10410., 11033., 11656.,  8493.,  9042.,  9591., 10140.,  6678.,  7148.,  7618.,  8088.,  5186.,  5572.,  5958.,  6344.,  4800.,  5056.,  5312.,  5568.,  5906.,  6228.,  6550.,  6872.,  6248.,  6640.,  7032.,  7424.,  7122.,  7588.,  8054.,  8520.,  7398.,  7860.,  8322.,  8784.,  7834.,  8324.,  8814.,  9304.,  6992.,  7424.,  7856.,  8288.,  5746.,  6116.,  6486.,  6856.,  4080.,  4384.,  4688.,  4992.,  3872.,  4160.,  4448.,  4736.,  4794.,  5164.,  5534.,  5904.,  6024.,  6480.,  6936.,  7392.,  6906.,  7420.,  7934.,  8448.,  6494.,  7004.,  7514.,  8024.,  5954.,  6460.,  6966.,  7472.,  5232.,  5664.,  6096.,  6528.,  4730.,  5084.,  5438.,  5792.,  4176.,  4448.,  4720.,  4992.,  5722.,  6076.,  6430.,  6784.,  6711.,  7150.,  7589.,  8028.,  8005.,  8534.,  9063.,  9592.,  9080.,  9672., 10264., 10856.,  8231.,  8794.,  9357.,  9920.,  7126.,  7660.,  8194.,  8728.,  4895.,  5354.,  5813.,  6272.,  4147.,  4526.,  4905.,  5284.,  3582.,  3876.,  4170.,  4464.,  5960.,  6352.,  6744.,  7136.,  7765.,  8254.,  8743.,  9232.,  9072.,  9664., 10256., 10848., 10321., 10990., 11659., 12328.,  9839., 10486., 11133., 11780.,  9101.,  9726., 10351., 10976.,  7148.,  7688.,  8228.,  8768.,  4837.,  5286.,  5735.,  6184.,  3936.,  4288.,  4640.,  4992.,  6426.,  6892.,  7358.,  7824.,  8416.,  9000.,  9584., 10168., 10737., 11446., 12155., 12864., 12361., 13170., 13979., 14788., 12250., 13044., 13838., 14632., 11883., 12662., 13441., 14220.,  9983., 10658., 11333., 12008.,  7900.,  8464.,  9028.,  9592.,  5350.,  5796.,  6242.,  6688.,  6766.,  7228.,  7690.,  8152.,  7663.,  8242.,  8821.,  9400.,  9623., 10326., 11029., 11732., 11906., 12740., 13574., 14408., 12307., 13126., 13945., 14764., 12452., 13256., 14060., 14864., 10605., 11306., 12007., 12708.,  8867.,  9458., 10049., 10640.,  6954.,  7428.,  7902.,  8376.,  7618.,  8076.,  8534.,  8992.,  8830.,  9404.,  9978., 10552.,  9789., 10486., 11183., 11880., 11803., 12630., 13457., 14284., 11436., 12248., 13060., 13872., 11837., 12634., 13431., 14228., 10555., 11250., 11945., 12640.,  8650.,  9236.,  9822., 10408.,  6862.,  7332.,  7802.,  8272.,  7446.,  7900.,  8354.,  8808.,  9229.,  9798., 10367., 10936., 10467., 11158., 11849., 12540., 11444., 12264., 13084., 13904., 11333., 12138., 12943., 13748., 10966., 11756., 12546., 13336.,  9993., 10682., 11371., 12060.,  8689.,  9270.,  9851., 10432.,  6770.,  7236.,  7702.,  8168.,  6664.,  7024.,  7384.,  7744.,  7865.,  8314.,  8763.,  9212.,  9152.,  9696., 10240., 10784.,  9781., 10426., 11071., 11716.,  8811.,  9434., 10057., 10680.,  8609.,  9210.,  9811., 10412.,  6604.,  7128.,  7652.,  8176.,  5705.,  6146.,  6587.,  7028.,  4608.,  4960.,  5312.,  5664.,  5670.,  5964.,  6258.,  6552.,  6876.,  7256.,  7636.,  8016.,  7871.,  8342.,  8813.,  9284.,  8931.,  9498., 10065., 10632.,  8922.,  9492., 10062., 10632.,  8785.,  9358.,  9931., 10504.,  7201.,  7698.,  8195.,  8692.,  5088.,  5504.,  5920.,  6336.,  4122.,  4452.,  4782.,  5112.,  4608.,  4864.,  5120.,  5376.,  6154.,  6484.,  6814.,  7144.,  7160.,  7568.,  7976.,  8384.,  7898.,  8388.,  8878.,  9368.,  7918.,  8404.,  8890.,  9376.,  7810.,  8292.,  8774.,  9256.,  6656.,  7072.,  7488.,  7904.,  5066.,  5412.,  5758.,  6104.,  3024.,  3296.,  3568.,  3840.,  3744.,  4032.,  4320.,  4608.,  3762.,  4108.,  4454.,  4800.,  5016.,  5424.,  5832.,  6240.,  6498.,  6972.,  7446.,  7920.,  6598.,  7068.,  7538.,  8008.,  6570.,  7036.,  7502.,  7968.,  5120.,  5504.,  5888.,  6272.,  4338.,  4668.,  4998.,  5328.,  3408.,  3680.,  3952.,  4224.,  5874.,  6268.,  6662.,  7056.,  6241.,  6722.,  7203.,  7684.,  6921.,  7494.,  8067.,  8640.,  8958.,  9628., 10298., 10968.,  9293.,  9966., 10639., 11312.,  9468., 10112., 10756., 11400.,  7603.,  8138.,  8673.,  9208.,  6413.,  6866.,  7319.,  7772.,  5206.,  5572.,  5938.,  6304.,  7064.,  7472.,  7880.,  8288.,  7945.,  8446.,  8947.,  9448.,  8504.,  9104.,  9704., 10304.,  9405., 10110., 10815., 11520.,  9979., 10694., 11409., 12124.,  9497., 10190., 10883., 11576.,  8244.,  8824.,  9404.,  9984.,  6745.,  7238.,  7731.,  8224.,  5456.,  5856.,  6256.,  6656.,  7554.,  8012.,  8470.,  8928.,  9366.,  9932., 10498., 11064., 10637., 11318., 11999., 12680., 11651., 12454., 13257., 14060., 11444., 12264., 13084., 13904., 11333., 12138., 12943., 13748.,  9419., 10098., 10777., 11456.,  8354.,  8932.,  9510., 10088.,  6670.,  7140.,  7610.,  8080.,  7254.,  7708.,  8162.,  8616.,  8869.,  9430.,  9991., 10552., 10675., 11350., 12025., 12700., 11932., 12728., 13524., 14320., 11853., 12666., 13479., 14292., 10974., 11772., 12570., 13368.,  9241.,  9914., 10587., 11260.,  7497.,  8070.,  8643.,  9216.,  6450.,  6916.,  7382.,  7848.,  7114.,  7596.,  8078.,  8560.,  9044.,  9632., 10220., 10808., 10873., 11574., 12275., 12976., 12885., 13706., 14527., 15348., 13190., 14028., 14866., 15704., 12823., 13646., 14469., 15292., 10119., 10818., 11517., 12216.,  7536.,  8104.,  8672.,  9240.,  5718.,  6180.,  6642.,  7104.,  7198.,  7676.,  8154.,  8632.,  8547.,  9130.,  9713., 10296., 10527., 11222., 11917., 12612., 12398., 13212., 14026., 14840., 12831., 13662., 14493., 15324., 12720., 13536., 14352., 15168., 10581., 11274., 11967., 12660.,  7831.,  8394.,  8957.,  9520.,  6010.,  6468.,  6926.,  7384.,  6840.,  7248.,  7656.,  8064.,  7581.,  8074.,  8567.,  9060.,  8584.,  9168.,  9752., 10336., 10129., 10810., 11491., 12172., 10599., 11290., 11981., 12672., 10653., 11322., 11991., 12660.,  8756.,  9320.,  9884., 10448.,  6637.,  7090.,  7543.,  7996.,  4688.,  5056.,  5424.,  5792.,  5918.,  6220.,  6522.,  6824.,  6198.,  6556.,  6914.,  7272.,  6339.,  6758.,  7177.,  7596.,  6617.,  7102.,  7587.,  8072.,  7120.,  7608.,  8096.,  8584.,  7495.,  7986.,  8477.,  8968.,  6389.,  6802.,  7215.,  7628.,  4746.,  5076.,  5406.,  5736.,  3570.,  3844.,  4118.,  4392.,  5728.,  6016.,  6304.,  6592.,  6402.,  6740.,  7078.,  7416.,  6632.,  7024.,  7416.,  7808.,  6690.,  7140.,  7590.,  8040.,  6198.,  6644.,  7090.,  7536.,  6602.,  7044.,  7486.,  7928.,  5904.,  6272.,  6640.,  7008.,  4738.,  5028.,  5318.,  5608.,  3504.,  3744.,  3984.,  4224.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,    82.,    88.,    94.,   100.,   106.,   112.,   118.,   124.,   130.,   136.,   113.,   118.,   123.,   128.,    75.,    78.,    81.,    84.,    33.,    38.,    43.,    48.,   116.,   128.,   140.,   152.,   257.,   278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,   467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,   656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,   180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,  1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,  1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,  1812.,  1341.,  1374.,  1407.,  1440.,   786.,   804.,   822.,   840.,   526.,   548.,   570.,   592.,  1312.,  1360.,  1408.,  1456.,  2374.,  2452.,  2530.,  2608.,  2686.,  2764.,  2842.,  2920.,  2998.,  3076.,  3154.,  3232.,  3310.,  3388.,  3466.,  3544.,  3622.,  3700.,  3778.,  3856.,  2792.,  2848.,  2904.,  2960.,  1590.,  1620.,  1650.,  1680.,  1142.,  1164.,  1186.,  1208.,  2656.,  2704.,  2752.,  2800.,  4558.,  4636.,  4714.,  4792.,  4870.,  4948.,  5026.,  5104.,  5054.,  5132.,  5210.,  5288.,  5110.,  5188.,  5266.,  5344.,  5038.,  5116.,  5194.,  5272.,  3720.,  3776.,  3832.,  3888.,  2046.,  2076.,  2106.,  2136.,  1630.,  1652.,  1674.,  1696.,  3616.,  3664.,  3712.,  3760.,  5974.,  6052.,  6130.,  6208.,  6286.,  6364.,  6442.,  6520.,  6086.,  6164.,  6242.,  6320.,  5758.,  5836.,  5914.,  5992.,  5302.,  5380.,  5458.,  5536.,  3880.,  3936.,  3992.,  4048.,  2118.,  2148.,  2178.,  2208.,  1734.,  1756.,  1778.,  1800.,  3808.,  3856.,  3904.,  3952.,  6238.,  6316.,  6394.,  6472.,  6550.,  6628.,  6706.,  6784.,  5966.,  6044.,  6122.,  6200.,  5254.,  5332.,  5410.,  5488.,  4414.,  4492.,  4570.,  4648.,  3272.,  3328.,  3384.,  3440.,  1806.,  1836.,  1866.,  1896.,  1385.,  1406.,  1427.,  1448.,  3021.,  3066.,  3111.,  3156.,  4920.,  4992.,  5064.,  5136.,  5208.,  5280.,  5352.,  5424.,  4216.,  4288.,  4360.,  4432.,  3096.,  3168.,  3240.,  3312.,  1848.,  1920.,  1992.,  2064.,  1443.,  1494.,  1545.,  1596.,   831.,   858.,   885.,   912.,   417.,   434.,   451.,   468.,   956.,   992.,  1028.,  1064.,  1625.,  1682.,  1739.,  1796.,  1853.,  1910.,  1967.,  2024.,  2081.,  2138.,  2195.,  2252.,  2309.,  2366.,  2423.,  2480.,  2537.,  2594.,  2651.,  2708.,  1872.,  1912.,  1952.,  1992.,  1029.,  1050.,  1071.,  1092.,   410.,   420.,   430.,   440.,   901.,   922.,   943.,   964.,  1477.,  1510.,  1543.,  1576.,  1609.,  1642.,  1675.,  1708.,  1741.,  1774.,  1807.,  1840.,  1873.,  1906.,  1939.,  1972.,  2005.,  2038.,  2071.,  2104.,  1447.,  1470.,  1493.,  1516.,   780.,   792.,   804.,   816.,    13.,    26.,    39.,    52.,    79.,   106.,   133.,   160.,   202.,   244.,   286.,   328.,   370.,   412.,   454.,   496.,   538.,   580.,   622.,   664.,   706.,   748.,   790.,   832.,   874.,   916.,   958.,  1000.,   665.,   694.,   723.,   752.,   375.,   390.,   405.,   420.,   393.,   422.,   451.,   480.,   932.,   992.,  1052.,  1112.,  1625.,  1718.,  1811.,  1904.,  1997.,  2090.,  2183.,  2276.,  2369.,  2462.,  2555.,  2648.,  2741.,  2834.,  2927.,  3020.,  3113.,  3206.,  3299.,  3392.,  2280.,  2344.,  2408.,  2472.,  1245.,  1278.,  1311.,  1344.,  1224.,  1272.,  1320.,  1368.,  2727.,  2826.,  2925.,  3024.,  4521.,  4674.,  4827.,  4980.,  5133.,  5286.,  5439.,  5592.,  5745.,  5898.,  6051.,  6204.,  6357.,  6510.,  6663.,  6816.,  6969.,  7122.,  7275.,  7428.,  5013.,  5118.,  5223.,  5328.,  2694.,  2748.,  2802.,  2856.,  2590.,  2660.,  2730.,  2800.,  5632.,  5776.,  5920.,  6064.,  9142.,  9364.,  9586.,  9808., 10030., 10252., 10474., 10696., 10918., 11140., 11362., 11584., 11806., 12028., 12250., 12472., 12694., 12916., 13138., 13360.,  9032.,  9184.,  9336.,  9488.,  4806.,  4884.,  4962.,  5040.,  4550.,  4620.,  4690.,  4760.,  9664.,  9808.,  9952., 10096., 15358., 15580., 15802., 16024., 16246., 16468., 16690., 16912., 15470., 15692., 15914., 16136., 14566., 14788., 15010., 15232., 13534., 13756., 13978., 14200.,  9576.,  9728.,  9880., 10032.,  5070.,  5148.,  5226.,  5304.,  4846.,  4916.,  4986.,  5056., 10240., 10384., 10528., 10672., 16198., 16420., 16642., 16864., 17086., 17308., 17530., 17752., 15926., 16148., 16370., 16592., 14638., 14860., 15082., 15304., 13222., 13444., 13666., 13888.,  9352.,  9504.,  9656.,  9808.,  4950.,  5028.,  5106.,  5184.,  4758.,  4828.,  4898.,  4968., 10048., 10192., 10336., 10480., 15886., 16108., 16330., 16552., 16774., 16996., 17218., 17440., 15230., 15452., 15674., 15896., 13558., 13780., 14002., 14224., 11758., 11980., 12202., 12424.,  8360.,  8512.,  8664.,  8816.,  4446.,  4524.,  4602.,  4680.,  3389.,  3446.,  3503.,  3560.,  7173.,  7290.,  7407.,  7524., 11364., 11544., 11724., 11904., 12084., 12264., 12444., 12624.,  9988., 10168., 10348., 10528.,  7764.,  7944.,  8124.,  8304.,  5412.,  5592.,  5772.,  5952.,  3963.,  4086.,  4209.,  4332.,  2163.,  2226.,  2289.,  2352.,  1065.,  1106.,  1147.,  1188.,  2348.,  2432.,  2516.,  2600.,  3857.,  3986.,  4115.,  4244.,  4373.,  4502.,  4631.,  4760.,  4889.,  5018.,  5147.,  5276.,  5405.,  5534.,  5663.,  5792.,  5921.,  6050.,  6179.,  6308.,  4224.,  4312.,  4400.,  4488.,  2253.,  2298.,  2343.,  2388.,   902.,   924.,   946.,   968.,  1933.,  1978.,  2023.,  2068.,  3097.,  3166.,  3235.,  3304.,  3373.,  3442.,  3511.,  3580.,  3649.,  3718.,  3787.,  3856.,  3925.,  3994.,  4063.,  4132.,  4201.,  4270.,  4339.,  4408.,  2959.,  3006.,  3053.,  3100.,  1560.,  1584.,  1608.,  1632.,    25.,    50.,    75.,   100.,   151.,   202.,   253.,   304.,   382.,   460.,   538.,   616.,   694.,   772.,   850.,   928.,  1006.,  1084.,  1162.,  1240.,  1318.,  1396.,  1474.,  1552.,  1630.,  1708.,  1786.,  1864.,  1217.,  1270.,  1323.,  1376.,   675.,   702.,   729.,   756.,   753.,   806.,   859.,   912.,  1748.,  1856.,  1964.,  2072.,  2993.,  3158.,  3323.,  3488.,  3653.,  3818.,  3983.,  4148.,  4313.,  4478.,  4643.,  4808.,  4973.,  5138.,  5303.,  5468.,  5633.,  5798.,  5963.,  6128.,  4056.,  4168.,  4280.,  4392.,  2181.,  2238.,  2295.,  2352.,  2268.,  2352.,  2436.,  2520.,  4959.,  5130.,  5301.,  5472.,  8085.,  8346.,  8607.,  8868.,  9129.,  9390.,  9651.,  9912., 10173., 10434., 10695., 10956., 11217., 11478., 11739., 12000., 12261., 12522., 12783., 13044.,  8685.,  8862.,  9039.,  9216.,  4602.,  4692.,  4782.,  4872.,  4654.,  4772.,  4890.,  5008.,  9952., 10192., 10432., 10672., 15910., 16276., 16642., 17008., 17374., 17740., 18106., 18472., 18838., 19204., 19570., 19936., 20302., 20668., 21034., 21400., 21766., 22132., 22498., 22864., 15272., 15520., 15768., 16016.,  8022.,  8148.,  8274.,  8400.,  7958.,  8076.,  8194.,  8312., 16672., 16912., 17152., 17392., 26158., 26524., 26890., 27256., 27622., 27988., 28354., 28720., 25886., 26252., 26618., 26984., 24022., 24388., 24754., 25120., 22030., 22396., 22762., 23128., 15432., 15680., 15928., 16176.,  8094.,  8220.,  8346.,  8472.,  8062.,  8180.,  8298.,  8416., 16864., 17104., 17344., 17584., 26422., 26788., 27154., 27520., 27886., 28252., 28618., 28984., 25766., 26132., 26498., 26864., 23518., 23884., 24250., 24616., 21142., 21508., 21874., 22240., 14824., 15072., 15320., 15568.,  7782.,  7908.,  8034.,  8160.,  7782.,  7900.,  8018.,  8136., 16288., 16528., 16768., 17008., 25534., 25900., 26266., 26632., 26998., 27364., 27730., 28096., 24494., 24860., 25226., 25592., 21862., 22228., 22594., 22960., 19102., 19468., 19834., 20200., 13448., 13696., 13944., 14192.,  7086.,  7212.,  7338.,  7464.,  5393.,  5486.,  5579.,  5672., 11325., 11514., 11703., 11892., 17808., 18096., 18384., 18672., 18960., 19248., 19536., 19824., 15760., 16048., 16336., 16624., 12432., 12720., 13008., 13296.,  8976.,  9264.,  9552.,  9840.,  6483.,  6678.,  6873.,  7068.,  3495.,  3594.,  3693.,  3792.,  1713.,  1778.,  1843.,  1908.,  3740.,  3872.,  4004.,  4136.,  6089.,  6290.,  6491.,  6692.,  6893.,  7094.,  7295.,  7496.,  7697.,  7898.,  8099.,  8300.,  8501.,  8702.,  8903.,  9104.,  9305.,  9506.,  9707.,  9908.,  6576.,  6712.,  6848.,  6984.,  3477.,  3546.,  3615.,  3684.,  1394.,  1428.,  1462.,  1496.,  2965.,  3034.,  3103.,  3172.,  4717.,  4822.,  4927.,  5032.,  5137.,  5242.,  5347.,  5452.,  5557.,  5662.,  5767.,  5872.,  5977.,  6082.,  6187.,  6292.,  6397.,  6502.,  6607.,  6712.,  4471.,  4542.,  4613.,  4684.,  2340.,  2376.,  2412.,  2448.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1328., 1808., 2288., 2768., 1848., 2528., 3208., 3888., 2472., 3320., 4168., 5016., 2560., 3544., 4528., 5512., 3032., 4048., 5064., 6080., 2432., 3416., 4400., 5384., 2600., 3448., 4296., 5144., 1592., 2272., 2952., 3632., 1584., 2064., 2544., 3024., 1848., 2528., 3208., 3888., 2501., 3387., 4273., 5159., 2776., 3844., 4912., 5980., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2484., 3504., 4524., 5544., 2429., 3219., 4009., 4799., 1392., 1976., 2560., 3144., 2472., 3320., 4168., 5016., 2776., 3844., 4912., 5980., 3772., 5044., 6316., 7588., 3732., 5192., 6652., 8112., 4416., 5892., 7368., 8844., 3516., 4944., 6372., 7800., 3636., 4812., 5988., 7164., 2296., 3236., 4176., 5116., 2248., 2968., 3688., 4408., 2560., 3544., 4528., 5512., 3553., 4779., 6005., 7231., 3732., 5192., 6652., 8112., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 3480., 4860., 6240., 7620., 3353., 4483., 5613., 6743., 2232., 3120., 4008., 4896., 3032., 4048., 5064., 6080., 3091., 4341., 5591., 6841., 4416., 5892., 7368., 8844., 4175., 5869., 7563., 9257., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4164., 5560., 6956., 8352., 2891., 4045., 5199., 6353., 2704., 3624., 4544., 5464., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2839., 4009., 5179., 6349., 4152., 5532., 6912., 8292., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4252., 5680., 7108., 8536., 2991., 4193., 5395., 6597., 2880., 3864., 4848., 5832., 1912., 2696., 3480., 4264., 2904., 3844., 4784., 5724., 2908., 4052., 5196., 6340., 4164., 5560., 6956., 8352., 3568., 4980., 6392., 7804., 4252., 5680., 7108., 8536., 3172., 4412., 5652., 6892., 3128., 4196., 5264., 6332., 2392., 3304., 4216., 5128., 1840., 2424., 3008., 3592., 1747., 2481., 3215., 3949., 2764., 3688., 4612., 5536., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2991., 4193., 5395., 6597., 3128., 4196., 5264., 6332., 2427., 3385., 4343., 5301., 2392., 3200., 4008., 4816., 1024., 1440., 1856., 2272., 1688., 2240., 2792., 3344., 1864., 2584., 3304., 4024., 2704., 3624., 4544., 5464., 2408., 3360., 4312., 5264., 2880., 3864., 4848., 5832., 2392., 3304., 4216., 5128., 2392., 3200., 4008., 4816., 1728., 2400., 3072., 3744., 1984., 2656., 3328., 4000., 2072., 2880., 3688., 4496., 2776., 3688., 4600., 5512., 2432., 3416., 4400., 5384., 2856., 3808., 4760., 5712., 2256., 3176., 4096., 5016., 2248., 2968., 3688., 4408., 1368., 1920., 2472., 3024., 1280., 1696., 2112., 2528., 2072., 2880., 3688., 4496., 2817., 3783., 4749., 5715., 2736., 3836., 4936., 6036., 3605., 4815., 6025., 7235., 2839., 4009., 5179., 6349., 3353., 4483., 5613., 6743., 2348., 3272., 4196., 5120., 2137., 2879., 3621., 4363., 1520., 2104., 2688., 3272., 2776., 3688., 4600., 5512., 2736., 3836., 4936., 6036., 3900., 5172., 6444., 7716., 3516., 4944., 6372., 7800., 4152., 5532., 6912., 8292., 3556., 4952., 6348., 7744., 3508., 4684., 5860., 7036., 2512., 3484., 4456., 5428., 2296., 3080., 3864., 4648., 2432., 3416., 4400., 5384., 3605., 4815., 6025., 7235., 3516., 4944., 6372., 7800., 4901., 6539., 8177., 9815., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 3568., 4980., 6392., 7804., 3453., 4631., 5809., 6987., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2839., 4009., 5179., 6349., 4152., 5532., 6912., 8292., 4139., 5785., 7431., 9077., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4252., 5680., 7108., 8536., 2991., 4193., 5395., 6597., 2880., 3864., 4848., 5832., 2256., 3176., 4096., 5016., 3353., 4483., 5613., 6743., 3556., 4952., 6348., 7744., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4925., 6595., 8265., 9935., 3656., 5100., 6544., 7988., 3553., 4779., 6005., 7231., 2584., 3600., 4616., 5632., 2680., 3568., 4456., 5344., 2891., 4045., 5199., 6353., 4240., 5652., 7064., 8476., 4151., 5813., 7475., 9137., 4925., 6595., 8265., 9935., 4163., 5841., 7519., 9197., 4340., 5800., 7260., 8720., 3091., 4341., 5591., 6841., 3008., 3992., 4976., 5960., 1864., 2584., 3304., 4024., 2864., 3836., 4808., 5780., 3084., 4292., 5500., 6708., 4252., 5680., 7108., 8536., 3656., 5100., 6544., 7988., 4340., 5800., 7260., 8720., 3348., 4652., 5956., 7260., 3344., 4444., 5544., 6644., 2088., 2936., 3784., 4632., 1712., 2296., 2880., 3464., 2063., 2877., 3691., 4505., 3028., 4048., 5068., 6088., 2991., 4193., 5395., 6597., 3553., 4779., 6005., 7231., 3091., 4341., 5591., 6841., 3344., 4444., 5544., 6644., 2135., 3045., 3955., 4865., 2168., 2848., 3528., 4208., 1328., 1808., 2288., 2768., 1912., 2592., 3272., 3952., 2216., 3064., 3912., 4760., 2880., 3864., 4848., 5832., 2584., 3600., 4616., 5632., 3008., 3992., 4976., 5960., 2088., 2936., 3784., 4632., 2168., 2848., 3528., 4208., 1072., 1552., 2032., 2512., 1936., 2544., 3152., 3760., 1592., 2272., 2952., 3632., 2424., 3208., 3992., 4776., 2256., 3176., 4096., 5016., 2680., 3568., 4456., 5344., 2384., 3304., 4224., 5144., 2296., 3080., 3864., 4648., 1848., 2528., 3208., 3888., 1680., 2288., 2896., 3504., 1592., 2272., 2952., 3632., 2429., 3219., 4009., 4799., 2296., 3236., 4176., 5116., 3353., 4483., 5613., 6743., 2891., 4045., 5199., 6353., 3453., 4631., 5809., 6987., 2612., 3632., 4652., 5672., 2501., 3387., 4273., 5159., 2048., 2824., 3600., 4376., 2424., 3208., 3992., 4776., 2296., 3236., 4176., 5116., 3420., 4564., 5708., 6852., 3556., 4952., 6348., 7744., 4240., 5652., 7064., 8476., 3644., 5072., 6500., 7928., 3684., 4924., 6164., 7404., 2776., 3844., 4912., 5980., 2648., 3560., 4472., 5384., 2256., 3176., 4096., 5016., 3353., 4483., 5613., 6743., 3556., 4952., 6348., 7744., 4913., 6567., 8221., 9875., 4151., 5813., 7475., 9137., 4925., 6595., 8265., 9935., 3656., 5100., 6544., 7988., 3553., 4779., 6005., 7231., 2584., 3600., 4616., 5632., 2680., 3568., 4456., 5344., 2891., 4045., 5199., 6353., 4240., 5652., 7064., 8476., 4151., 5813., 7475., 9137., 4925., 6595., 8265., 9935., 4163., 5841., 7519., 9197., 4340., 5800., 7260., 8720., 3091., 4341., 5591., 6841., 3008., 3992., 4976., 5960., 2384., 3304., 4224., 5144., 3453., 4631., 5809., 6987., 3644., 5072., 6500., 7928., 4925., 6595., 8265., 9935., 4163., 5841., 7519., 9197., 4937., 6623., 8309., 9995., 3744., 5220., 6696., 8172., 3605., 4815., 6025., 7235., 2408., 3360., 4312., 5264., 2856., 3808., 4760., 5712., 2991., 4193., 5395., 6597., 4328., 5772., 7216., 8660., 4163., 5841., 7519., 9197., 4937., 6623., 8309., 9995., 4175., 5869., 7563., 9257., 4380., 5808., 7236., 8664., 2839., 4009., 5179., 6349., 2832., 3752., 4672., 5592., 2216., 3064., 3912., 4760., 3128., 4196., 5264., 6332., 3260., 4532., 5804., 7076., 4340., 5800., 7260., 8720., 3744., 5220., 6696., 8172., 4380., 5808., 7236., 8664., 2868., 4044., 5220., 6396., 2904., 3844., 4784., 5724., 1736., 2456., 3176., 3896., 2240., 3016., 3792., 4568., 2427., 3385., 4343., 5301., 3292., 4408., 5524., 6640., 3091., 4341., 5591., 6841., 3605., 4815., 6025., 7235., 2839., 4009., 5179., 6349., 2904., 3844., 4784., 5724., 1747., 2481., 3215., 3949., 1688., 2240., 2792., 3344., 1728., 2400., 3072., 3744., 2392., 3200., 4008., 4816., 2264., 3176., 4088., 5000., 3008., 3992., 4976., 5960., 2408., 3360., 4312., 5264., 2832., 3752., 4672., 5592., 1736., 2456., 3176., 3896., 1688., 2240., 2792., 3344., 1024., 1440., 1856., 2272.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   5.,   11.,   17.,   23.,   40.,   60.,   80.,  100.,  137.,  179.,  221.,  263.,  305.,  347.,  389.,  431.,  377.,  419.,  461.,  503.,  321.,  363.,  405.,  447.,  137.,  179.,  221.,  263.,  228.,  264.,  300.,  336.,  193.,  215.,  237.,  259.,  100.,  136.,  172.,  208.,  356.,  444.,  532.,  620.,  800.,  956., 1112., 1268., 1072., 1228., 1384., 1540., 1216., 1372., 1528., 1684., 1136., 1292., 1448., 1604.,  800.,  956., 1112., 1268.,  636.,  756.,  876.,  996.,  508.,  576.,  644.,  712.,  477.,  567.,  657.,  747., 1012., 1216., 1420., 1624., 1957., 2299., 2641., 2983., 2365., 2707., 3049., 3391., 2517., 2859., 3201., 3543., 2413., 2755., 3097., 3439., 1957., 2299., 2641., 2983., 1384., 1636., 1888., 2140.,  849.,  987., 1125., 1263., 1040., 1208., 1376., 1544., 2104., 2472., 2840., 3208., 3576., 4176., 4776., 5376., 4152., 4752., 5352., 5952., 4344., 4944., 5544., 6144., 4152., 4752., 5352., 5952., 3576., 4176., 4776., 5376., 2536., 2968., 3400., 3832., 1472., 1704., 1936., 2168., 1616., 1784., 1952., 2120., 2872., 3240., 3608., 3976., 4152., 4752., 5352., 5952., 3576., 4176., 4776., 5376., 4152., 4752., 5352., 5952., 4344., 4944., 5544., 6144., 4152., 4752., 5352., 5952., 2536., 2968., 3400., 3832., 1280., 1512., 1744., 1976., 1040., 1208., 1376., 1544., 2872., 3240., 3608., 3976., 4344., 4944., 5544., 6144., 4152., 4752., 5352., 5952., 3576., 4176., 4776., 5376., 4152., 4752., 5352., 5952., 4344., 4944., 5544., 6144., 3304., 3736., 4168., 4600., 1472., 1704., 1936., 2168.,  848., 1016., 1184., 1352., 2104., 2472., 2840., 3208., 4152., 4752., 5352., 5952., 4344., 4944., 5544., 6144., 4152., 4752., 5352., 5952., 3576., 4176., 4776., 5376., 4152., 4752., 5352., 5952., 3304., 3736., 4168., 4600., 2048., 2280., 2512., 2744., 1011., 1173., 1335., 1497., 1984., 2332., 2680., 3028., 3271., 3829., 4387., 4945., 3775., 4333., 4891., 5449., 4023., 4581., 5139., 5697., 4015., 4573., 5131., 5689., 3271., 3829., 4387., 4945., 2164., 2560., 2956., 3352., 1191., 1401., 1611., 1821., 1468., 1600., 1732., 1864., 2388., 2668., 2948., 3228., 3080., 3524., 3968., 4412., 2360., 2804., 3248., 3692., 3016., 3460., 3904., 4348., 3544., 3988., 4432., 4876., 3080., 3524., 3968., 4412., 1420., 1732., 2044., 2356.,  500.,  664.,  828.,  992.,  683.,  761.,  839.,  917., 1748., 1912., 2076., 2240., 1979., 2237., 2495., 2753., 1635., 1893., 2151., 2409., 1163., 1421., 1679., 1937., 2195., 2453., 2711., 2969., 1979., 2237., 2495., 2753., 1264., 1444., 1624., 1804.,   71.,  165.,  259.,  353.,   77.,  179.,  281.,  383.,  568.,  780.,  992., 1204., 1505., 1835., 2165., 2495., 2825., 3155., 3485., 3815., 2513., 2843., 3173., 3503., 2073., 2403., 2733., 3063., 1505., 1835., 2165., 2495., 1524., 1752., 1980., 2208., 1033., 1151., 1269., 1387., 1396., 1624., 1852., 2080., 2084., 2428., 2772., 3116., 3216., 3692., 4168., 4644., 3232., 3708., 4184., 4660., 3120., 3596., 4072., 4548., 3296., 3772., 4248., 4724., 3216., 3692., 4168., 4644.,  732.,  980., 1228., 1476.,  684.,  816.,  948., 1080., 2517., 2767., 3017., 3267., 2564., 2960., 3356., 3752., 3661., 4227., 4793., 5359., 3941., 4507., 5073., 5639., 3965., 4531., 5097., 5663., 3733., 4299., 4865., 5431., 3661., 4227., 4793., 5359., 2072., 2388., 2704., 3020.,  489.,  659.,  829.,  999., 1904., 2200., 2496., 2792., 3736., 4232., 4728., 5224., 4440., 5168., 5896., 6624., 5016., 5744., 6472., 7200., 5208., 5936., 6664., 7392., 5016., 5744., 6472., 7200., 4440., 5168., 5896., 6624., 3560., 3992., 4424., 4856., 2240., 2472., 2704., 2936., 1456., 1752., 2048., 2344., 2968., 3464., 3960., 4456., 5016., 5744., 6472., 7200., 4440., 5168., 5896., 6624., 5016., 5744., 6472., 7200., 5208., 5936., 6664., 7392., 5016., 5744., 6472., 7200., 2536., 2968., 3400., 3832., 1536., 1768., 2000., 2232., 1904., 2200., 2496., 2792., 3480., 3976., 4472., 4968., 5208., 5936., 6664., 7392., 5016., 5744., 6472., 7200., 4440., 5168., 5896., 6624., 5016., 5744., 6472., 7200., 5208., 5936., 6664., 7392., 2280., 2712., 3144., 3576., 1216., 1448., 1680., 1912., 2736., 3032., 3328., 3624., 3224., 3720., 4216., 4712., 5016., 5744., 6472., 7200., 5208., 5936., 6664., 7392., 5016., 5744., 6472., 7200., 4440., 5168., 5896., 6624., 5016., 5744., 6472., 7200., 3304., 3736., 4168., 4600., 1280., 1512., 1744., 1976., 1419., 1613., 1807., 2001., 2320., 2604., 2888., 3172., 1615., 2013., 2411., 2809., 2503., 2901., 3299., 3697., 3135., 3533., 3931., 4329., 3511., 3909., 4307., 4705., 1615., 2013., 2411., 2809., 1124., 1328., 1532., 1736.,  735.,  849.,  963., 1077.,  780.,  848.,  916.,  984., 1268., 1420., 1572., 1724., 1784., 2036., 2288., 2540., 1320., 1572., 1824., 2076., 1720., 1972., 2224., 2476., 1992., 2244., 2496., 2748., 1784., 2036., 2288., 2540.,  812.,  996., 1180., 1364.,  324.,  424.,  524.,  624.,  403.,  449.,  495.,  541., 1060., 1160., 1260., 1360., 1267., 1429., 1591., 1753., 1051., 1213., 1375., 1537.,  707.,  869., 1031., 1193., 1355., 1517., 1679., 1841., 1267., 1429., 1591., 1753.,  832.,  948., 1064., 1180.,   47.,  109.,  171.,  233.,   53.,  123.,  193.,  263.,  392.,  540.,  688.,  836., 1049., 1283., 1517., 1751., 1985., 2219., 2453., 2687., 1801., 2035., 2269., 2503., 1489., 1723., 1957., 2191., 1049., 1283., 1517., 1751., 1092., 1256., 1420., 1584.,  753.,  839.,  925., 1011.,  964., 1128., 1292., 1456., 1572., 1916., 2260., 2604., 2880., 3420., 3960., 4500., 3664., 4204., 4744., 5284., 4320., 4860., 5400., 5940., 3728., 4268., 4808., 5348., 2880., 3420., 3960., 4500., 1852., 2228., 2604., 2980., 1372., 1568., 1764., 1960., 1901., 2183., 2465., 2747., 3604., 4192., 4780., 5368., 5365., 6155., 6945., 7735., 5517., 6307., 7097., 7887., 5413., 6203., 6993., 7783., 5053., 5843., 6633., 7423., 5365., 6155., 6945., 7735., 2856., 3364., 3872., 4380.,  641.,  843., 1045., 1247., 2672., 2968., 3264., 3560., 4856., 5480., 6104., 6728., 5304., 6160., 7016., 7872., 5880., 6736., 7592., 8448., 6072., 6928., 7784., 8640., 5880., 6736., 7592., 8448., 5304., 6160., 7016., 7872., 4168., 4728., 5288., 5848., 1472., 1704., 1936., 2168., 1712., 2008., 2304., 2600., 4600., 5224., 5848., 6472., 5880., 6736., 7592., 8448., 5304., 6160., 7016., 7872., 5880., 6736., 7592., 8448., 6072., 6928., 7784., 8640., 5880., 6736., 7592., 8448., 3656., 4216., 4776., 5336., 2304., 2536., 2768., 3000., 1648., 1944., 2240., 2536., 3576., 4200., 4824., 5448., 6072., 6928., 7784., 8640., 5880., 6736., 7592., 8448., 5304., 6160., 7016., 7872., 5880., 6736., 7592., 8448., 6072., 6928., 7784., 8640., 3912., 4472., 5032., 5592., 1472., 1704., 1936., 2168., 1968., 2264., 2560., 2856., 3832., 4456., 5080., 5704., 5880., 6736., 7592., 8448., 6072., 6928., 7784., 8640., 5880., 6736., 7592., 8448., 5304., 6160., 7016., 7872., 5880., 6736., 7592., 8448., 3400., 3960., 4520., 5080., 1024., 1256., 1488., 1720., 2339., 2565., 2791., 3017., 3872., 4348., 4824., 5300., 3319., 3941., 4563., 5185., 4079., 4701., 5323., 5945., 4583., 5205., 5827., 6449., 4831., 5453., 6075., 6697., 3319., 3941., 4563., 5185., 2420., 2816., 3212., 3608.,  375.,  521.,  667.,  813., 1212., 1344., 1476., 1608., 2900., 3180., 3460., 3740., 2216., 2532., 2848., 3164.,  984., 1300., 1616., 1932., 2152., 2468., 2784., 3100., 3192., 3508., 3824., 4140., 2216., 2532., 2848., 3164.,  300.,  484.,  668.,  852.,  148.,  184.,  220.,  256.,  123.,  137.,  151.,  165.,  372.,  408.,  444.,  480.,  555.,  621.,  687.,  753.,  467.,  533.,  599.,  665.,  251.,  317.,  383.,  449.,  515.,  581.,  647.,  713.,  555.,  621.,  687.,  753.,  400.,  452.,  504.,  556.,   23.,   53.,   83.,  113.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2700.,  6780., 10860., 14940.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  2620.,  6572., 10524., 14476.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2270.,  5702.,  9134., 12566.,  2780.,  6988., 11196., 15404.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  2700.,  6780., 10860., 14940.,  2270.,  5702.,  9134., 12566.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2780.,  6988., 11196., 15404.,  3320.,  8344., 13368., 18392.,  3780.,  9492., 15204., 20916.,  3700.,  9284., 14868., 20452.,  3780.,  9492., 15204., 20916.,  3320.,  8344., 13368., 18392.,  2780.,  6988., 11196., 15404.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2310.,  5806.,  9302., 12798.,  2700.,  6780., 10860., 14940.,  3130.,  7858., 12586., 17314.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2780.,  6988., 11196., 15404.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2620.,  6572., 10524., 14476.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  2700.,  6780., 10860., 14940.,  2190.,  5494.,  8798., 12102.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  3090.,  7754., 12418., 17082.,  3780.,  9492., 15204., 20916.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  3700.,  9284., 14868., 20452.,  3090.,  7754., 12418., 17082.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3210.,  8066., 12922., 17778.,  3860.,  9700., 15540., 21380.,  4470., 11230., 17990., 24750.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  3780.,  9492., 15204., 20916.,  3210.,  8066., 12922., 17778.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3170.,  7962., 12754., 17546.,  3780.,  9492., 15204., 20916.,  4350., 10918., 17486., 24054.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  3860.,  9700., 15540., 21380.,  3170.,  7962., 12754., 17546.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3130.,  7858., 12586., 17314.,  3700.,  9284., 14868., 20452.,  4390., 11022., 17654., 24286.,  4430., 11126., 17822., 24518.,  4470., 11230., 17990., 24750.,  3780.,  9492., 15204., 20916.,  3130.,  7858., 12586., 17314.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2620.,  6572., 10524., 14476.,  3160.,  7928., 12696., 17464.,  3780.,  9492., 15204., 20916.,  3860.,  9700., 15540., 21380.,  3780.,  9492., 15204., 20916.,  3160.,  7928., 12696., 17464.,  2620.,  6572., 10524., 14476.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2230.,  5598.,  8966., 12334.,  2700.,  6780., 10860., 14940.,  3210.,  8066., 12922., 17778.,  3170.,  7962., 12754., 17546.,  3130.,  7858., 12586., 17314.,  2620.,  6572., 10524., 14476.,  2230.,  5598.,  8966., 12334.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  3570.,  4650.,  5730.,  6810.,  2130.,  3210.,  4290.,  5370.,  2196.,  2980.,  3764.,  4548.,   270.,   694.,  1118.,  1542.,  1684.,  2468.,  3252.,  4036.,  4152.,  5336.,  6520.,  7704.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  4908.,  6620.,  8332., 10044.,  4140.,  5852.,  7564.,  9276.,  2456.,  3384.,  4312.,  5240.,  2036.,  2564.,  3092.,  3620.,  2562.,  3514.,  4466.,  5418.,  3036.,  4620.,  6204.,  7788.,  6286.,  8694., 11102., 13510.,  6446.,  8854., 11262., 13670.,  6286.,  8694., 11102., 13510.,  6446.,  8854., 11262., 13670.,  6286.,  8694., 11102., 13510.,  3980.,  5436.,  6892.,  8348.,   946.,  1770.,  2594.,  3418.,  2696.,  4008.,  5320.,  6632.,  7280.,  9648., 12016., 14384.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992.,  6256.,  8624., 10992., 13360.,  3720.,  5032.,  6344.,  7656.,  4232.,  5544.,  6856.,  8168.,  5232.,  7600.,  9968., 12336., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  6256.,  8624., 10992., 13360.,  3208.,  4520.,  5832.,  7144.,  2696.,  4008.,  5320.,  6632.,  7280.,  9648., 12016., 14384.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992.,  6256.,  8624., 10992., 13360.,  3720.,  5032.,  6344.,  7656.,  4232.,  5544.,  6856.,  8168.,  5232.,  7600.,  9968., 12336., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  8952., 12632., 16312., 19992., 10488., 14168., 17848., 21528.,  6256.,  8624., 10992., 13360.,  3208.,  4520.,  5832.,  7144.,  1322.,  2338.,  3354.,  4370.,  5420.,  7132.,  8844., 10556.,  5382.,  7982., 10582., 13182.,  8358., 10958., 13558., 16158.,  5382.,  7982., 10582., 13182.,  8358., 10958., 13558., 16158.,  5382.,  7982., 10582., 13182.,  4316.,  5900.,  7484.,  9068.,  1754.,  2642.,  3530.,  4418.,  1780.,  2308.,  2836.,  3364.,  3128.,  4312.,  5496.,  6680.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  4812.,  6780.,  8748., 10716.,  5580.,  7548.,  9516., 11484.,  3800.,  5240.,  6680.,  8120.,  2452.,  3236.,  4020.,  4804.,   230.,   590.,   950.,  1310.,  1940.,  2724.,  3508.,  4292.,  2506.,  3778.,  5050.,  6322.,  4202.,  5474.,  6746.,  8018.,  2506.,  3778.,  5050.,  6322.,  4202.,  5474.,  6746.,  8018.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,  1042.,  1354.,  1666.,  1978.,   626.,   938.,  1250.,  1562.,   852.,  1124.,  1396.,  1668.,   110.,   278.,   446.,   614.,   340.,   612.,   884.,  1156.,  1784.,  2456.,  3128.,  3800.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  3564.,  4764.,  5964.,  7164.,  2796.,  3996.,  5196.,  6396.,  2456.,  3384.,  4312.,  5240.,  1012.,  1540.,  2068.,  2596.,  1378.,  2074.,  2770.,  3466.,  4060.,  5644.,  7228.,  8812.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  5262.,  7414.,  9566., 11718.,  6126.,  8278., 10430., 12582.,  2956.,  4412.,  5868.,  7324.,  1810.,  2378.,  2946.,  3514.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2376.,  3176.,  3976.,  4776.,  4912.,  6768.,  8624., 10480.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  5936.,  7792.,  9648., 11504.,  1352.,  2152.,  2952.,  3752.,  1864.,  2664.,  3464.,  4264.,  4912.,  6768.,  8624., 10480.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  6264.,  8920., 11576., 14232.,  7800., 10456., 13112., 15768.,  3888.,  5744.,  7600.,  9456.,  2888.,  3688.,  4488.,  5288.,  2186.,  2946.,  3706.,  4466.,  4396.,  6108.,  7820.,  9532.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  7174.,  9518., 11862., 14206.,  5222.,  7566.,  9910., 12254.,  5340.,  6924.,  8508., 10092.,   570.,  1202.,  1834.,  2466.,   756.,  1284.,  1812.,  2340.,  3128.,  4312.,  5496.,  6680.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  3468.,  4924.,  6380.,  7836.,  4236.,  5692.,  7148.,  8604.,  1432.,  2360.,  3288.,  4216.,  1108.,  1380.,  1652.,  1924.,    70.,   174.,   278.,   382.,   596.,   868.,  1140.,  1412.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1674.,  2178.,  2682.,  3186.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2124.,  2878.,  3726.,  4672.,  4886.,  5068.,  5474.,  5066.,  4540.,  3892.,  3736.,  4849.,  6066.,  7392.,  7510.,  7596.,  8130.,  7327.,  6358.,  5218.,  5422.,  6587.,  7883.,  9316.,  9259.,  9170.,  9753.,  8685.,  7418.,  5946.,  6502.,  7578.,  8797., 10166.,  9855.,  9480.,  9969.,  8600.,  7238.,  5652.,  6746.,  7242.,  7887.,  9712.,  9977., 10178., 10443.,  9134.,  8050.,  6736.,  7246.,  8762., 10433., 12266., 12083., 11836., 11877., 10052.,  8670.,  7052.,  8002.,  9066., 10291., 11652., 10957., 10166.,  9855.,  7834.,  6474.,  4872.,  7770.,  8379.,  9145.,  9818.,  9159.,  9460.,  9697.,  8523.,  7220.,  5686.,  6328.,  8033.,  9874., 11376., 11216., 10992., 10704.,  8843.,  7104.,  5162.,  6628.,  7774.,  9018.,  9660.,  8926.,  8128.,  7266.,  5302.,  3728.,  1996.,  2732.,  3670.,  4718.,  5880.,  6286.,  6436.,  6554.,  5898.,  5108.,  4180.,  4384.,  5685.,  7110.,  8664.,  9198.,  9252.,  9274.,  8107.,  6754.,  5210.,  5710.,  7095.,  8635., 10336., 10919., 10798., 10645.,  9197.,  7526.,  5626.,  6222.,  7450.,  8849., 10426., 11107., 10860., 10581.,  9012.,  7198.,  6156.,  5122.,  6794.,  8643., 10676., 11357., 11910., 12431., 11146.,  9610.,  7816.,  6326.,  7994.,  9845., 11886., 12567., 12896., 13193., 11616.,  9782.,  7684.,  5642.,  6762.,  8039.,  9480.,  9969., 10426., 11107.,  9782.,  8226.,  6432.,  4890.,  6399.,  8057.,  9870., 10107., 10312., 10965.,  9915.,  8648.,  7158.,  6048.,  7357.,  8790., 10352., 10288., 10192., 10768.,  9511.,  8068.,  6434.,  4740.,  5190.,  5722.,  6340.,  5926.,  5480.,  5930.,  5078.,  4088.,  2956.,  3564.,  4494.,  5518.,  6640.,  6694.,  6716.,  6706.,  5738.,  5100.,  4340.,  5704.,  6777.,  7962.,  9264.,  9222.,  9148.,  9042.,  7447.,  6350.,  5074.,  7118.,  8083.,  9195., 10428., 10147.,  9802.,  9393.,  7373.,  6034.,  4474.,  7830.,  8474.,  9285., 10014.,  9383.,  9712.,  9977.,  8816.,  7510.,  5956.,  6730.,  8618., 10679., 12440., 12385., 12266., 12083., 10182.,  8354.,  6272.,  7934.,  9594., 11433., 12754., 12251., 11652., 10957.,  8700.,  6734.,  4508.,  7026.,  8426., 10011., 10860., 10581., 10014.,  9383.,  8530.,  7418.,  6040.,  5786.,  7555.,  9497., 11490., 11983., 11964., 11881., 10283.,  8444.,  6358.,  6344.,  7865.,  9530., 10992., 11184., 10640., 10032.,  8259.,  6280.,  4090.,  4324.,  4910.,  5594.,  6380.,  6830.,  6352.,  5842.,  4662.,  3328.,  2860.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     4.,    10.,    20.,    30.,    40.,    50.,    52.,    45.,    28.,    13.,    41.,    86.,   150.,   186.,   222.,   258.,   239.,   191.,   112.,    64.,   167.,   312.,   502.,   580.,   658.,   736.,   645.,   494.,   280.,   182.,   438.,   772.,  1188.,  1324.,  1460.,  1596.,  1354.,  1010.,   560.,   378.,   858.,  1444.,  2140.,  2276.,  2412.,  2548.,  2110.,  1542.,   840.,   574.,  1278.,  2116.,  3092.,  3228.,  3364.,  3500.,  2866.,  2074.,  1120.,   770.,  1698.,  2788.,  4044.,  4180.,  4316.,  4452.,  3622.,  2606.,  1400.,   916.,  1967.,  3156.,  4486.,  4612.,  4738.,  4864.,  3885.,  2750.,  1456.,   855.,  1811.,  2870.,  4034.,  4134.,  4234.,  4334.,  3425.,  2401.,  1260.,   559.,  1174.,  1846.,  2576.,  2634.,  2692.,  2750.,  2158.,  1503.,   784.,    17.,    52.,   106.,   180.,   254.,   328.,   402.,   340.,   253.,   140.,   157.,   361.,   614.,   918.,  1082.,  1246.,  1410.,  1151.,   831.,   448.,   448.,   983.,  1608.,  2326.,  2596.,  2866.,  3136.,  2517.,  1790.,   952.,   918.,  1974.,  3172.,  4516.,  4908.,  5300.,  5692.,  4522.,  3186.,  1680.,  1562.,  3290.,  5188.,  7260.,  7652.,  8044.,  8436.,  6622.,  4614.,  2408.,  2206.,  4606.,  7204., 10004., 10396., 10788., 11180.,  8722.,  6042.,  3136.,  2850.,  5922.,  9220., 12748., 13140., 13532., 13924., 10822.,  7470.,  3864.,  2644.,  5471.,  8484., 11686., 12004., 12322., 12640.,  9789.,  6734.,  3472.,  2119.,  4371.,  6758.,  9282.,  9510.,  9738.,  9966.,  7697.,  5281.,  2716.,  1247.,  2566.,  3958.,  5424.,  5546.,  5668.,  5790.,  4462.,  3055.,  1568.,    33.,   100.,   202.,   340.,   478.,   616.,   754.,   628.,   461.,   252.,   301.,   681.,  1142.,  1686.,  1978.,  2270.,  2562.,  2063.,  1471.,   784.,   832.,  1799.,  2904.,  4150.,  4612.,  5074.,  5536.,  4389.,  3086.,  1624.,  1654.,  3510.,  5572.,  7844.,  8492.,  9140.,  9788.,  7690.,  5362.,  2800.,  2746.,  5722.,  8932., 12380., 13028., 13676., 14324., 11134.,  7686.,  3976.,  3838.,  7934., 12292., 16916., 17564., 18212., 18860., 14578., 10010.,  5152.,  4930., 10146., 15652., 21452., 22100., 22748., 23396., 18022., 12334.,  6328.,  4372.,  8975., 13812., 18886., 19396., 19906., 20416., 15693., 10718.,  5488.,  3383.,  6931., 10646., 14530., 14886., 15242., 15598., 11969.,  8161.,  4172.,  1935.,  3958.,  6070.,  8272.,  8458.,  8644.,  8830.,  6766.,  4607.,  2352.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6560.,  8376., 10544., 11208., 10112., 10808., 12240., 11520., 10128.,  8640.,  9020., 11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,  7492., 11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404., 24008., 26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644., 14129., 17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340., 10688., 13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728.,  7648.,  5280.,  7672., 10416., 13544., 14720., 14776., 15312., 13760., 11536.,  9728., 10076., 12425., 15106., 18159., 18457., 16611., 16013., 14142., 12307.,  9956., 13408., 14600., 16240., 20424., 21356., 21296., 21332., 17624., 14684., 12336., 16108., 18053., 20570., 25155., 26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229., 25227., 25937., 21142., 16639., 13012., 17804., 21069., 25002., 27547., 27585., 28039., 28109., 24062., 19107., 14212., 14268., 17777., 21874., 24375., 23933., 25155., 26985., 23526., 20135., 16116., 15216., 18660., 22632., 24812., 23520., 21844., 21672., 18608., 14568., 11296., 11100., 14121., 17602., 19087., 19209., 19075., 19421., 17726., 15075., 12548.,  7808., 10000., 12576., 14992., 15016., 14784., 15928., 13968., 11304.,  7904.,  8416., 10488., 12912., 15720., 16000., 15416., 14576., 11328.,  9168.,  7936., 12092., 12737., 13746., 17207., 19137., 19307., 19221., 16110., 12747., 11396., 10720., 13656., 17104., 21016., 22204., 22656., 22724., 18040., 13804., 10608., 17804., 21069., 25002., 27547., 27585., 28039., 28109., 24062., 19107., 14212., 14268., 17777., 21874., 24375., 23933., 25155., 26985., 23526., 20135., 16116., 15916., 19765., 24250., 27059., 25977., 24415., 24229., 21006., 16651., 12900., 14364., 18681., 23682., 26927., 27861., 27547., 27585., 25206., 21551., 17684., 11952., 15156., 18952., 22812., 23792., 22628., 22712., 20496., 17144., 12960., 13436., 15457., 17970., 20311., 20945., 20587., 20325., 16430., 11547.,  9316.,  9600., 11856., 14496., 16944., 17832., 16960., 17208., 14928., 11944., 10272.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   437.,  1174.,  2139.,  3324.,  3572.,  3692.,  4292.,  3753.,  2874.,  1631.,  1216.,  2880.,  4416.,  6336.,  6528.,  6592.,  7648.,  6584.,  4976.,  2792.,  2120.,  4784.,  6904.,  9504.,  9088.,  8416.,  9120.,  7280.,  5408.,  2992.,  2416.,  5344.,  7184.,  9472.,  8032.,  6336.,  6528.,  4904.,  3792.,  2168.,  1688.,  3856.,  6536.,  9760.,  9696.,  9504.,  9088.,  6432.,  4704.,  2368.,  1973.,  4374.,  7227., 10556.,  9908.,  9132.,  7620.,  4649.,  3226.,  1311.,  1136.,  2560.,  4288.,  6336.,  7120.,  7904.,  7568.,  5884.,  3800.,  1300.,  1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  5284.,  3801.,  2074.,    95.,     5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   437.,  1174.,  2139.,  3324.,  3572.,  3692.,  4292.,  3753.,  2874.,  1631.,  1216.,  2880.,  4416.,  6336.,  6528.,  6592.,  7648.,  6584.,  4976.,  2792.,  2120.,  4784.,  6904.,  9504.,  9088.,  8416.,  9120.,  7280.,  5408.,  2992.,  2416.,  5344.,  7184.,  9472.,  8032.,  6336.,  6528.,  4904.,  3792.,  2168.,  1688.,  3856.,  6536.,  9760.,  9696.,  9504.,  9088.,  6432.,  4704.,  2368.,  1973.,  4374.,  7227., 10556.,  9908.,  9132.,  7620.,  4649.,  3226.,  1311.,  1136.,  2560.,  4288.,  6336.,  7120.,  7904.,  7568.,  5884.,  3800.,  1300.,  1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  5284.,  3801.,  2074.,    95.,     5.,    22.,    59.,   124.,   196.,   268.,   340.,   365.,   322.,   203.,    76.,   264.,   580.,  1040.,  1312.,  1584.,  1856.,  1744.,  1408.,   832.,   437.,  1174.,  2139.,  3324.,  3572.,  3692.,  4292.,  3753.,  2874.,  1631.,  1216.,  2880.,  4416.,  6336.,  6528.,  6592.,  7648.,  6584.,  4976.,  2792.,  2120.,  4784.,  6904.,  9504.,  9088.,  8416.,  9120.,  7280.,  5408.,  2992.,  2416.,  5344.,  7184.,  9472.,  8032.,  6336.,  6528.,  4904.,  3792.,  2168.,  1688.,  3856.,  6536.,  9760.,  9696.,  9504.,  9088.,  6432.,  4704.,  2368.,  1973.,  4374.,  7227., 10556.,  9908.,  9132.,  7620.,  4649.,  3226.,  1311.,  1136.,  2560.,  4288.,  6336.,  7120.,  7904.,  7568.,  5884.,  3800.,  1300.,  1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  5284.,  3801.,  2074.,    95.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5560.,  7006.,  8564.,  9466., 10194., 10186., 10498.,  8580.,  7414.,  5944.,  7312.,  7836.,  9992., 12308., 12868., 10900., 12228., 10632.,  9420.,  6800.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  8168., 10338., 12044., 12998., 14894., 14614., 14302., 11516., 10474.,  8552.,  8168.,  9522., 12588., 14614., 14302., 12998., 14894., 12828., 10426.,  8040.,  7312.,  9068., 10536., 11364., 13332., 12516., 12180.,  9992.,  9340.,  7312.,  5560.,  7166.,  9652., 10394.,  9810.,  9930., 11298.,  9252.,  7030.,  5944.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2696.,  7056., 10776., 15648., 13792., 12768., 15136., 14968., 12560.,  7656.,  4392.,  8656., 14584., 19872., 15648., 13792., 12768., 11416.,  9936.,  6216.,  3720.,  9424., 15000., 22240., 19872., 15648., 13792.,  9720.,  7312.,  4776.,  3048.,  7824., 14584., 21216., 22240., 19872., 15648., 11416.,  6544.,  3336.,  2306.,  5940., 11094., 17960., 19272., 19752., 16840., 10718.,  6340.,  1978.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2696.,  7056., 10776., 15648., 13792., 12768., 15136., 14968., 12560.,  7656.,  4392.,  8656., 14584., 19872., 15648., 13792., 12768., 11416.,  9936.,  6216.,  3720.,  9424., 15000., 22240., 19872., 15648., 13792.,  9720.,  7312.,  4776.,  3048.,  7824., 14584., 21216., 22240., 19872., 15648., 11416.,  6544.,  3336.,  2306.,  5940., 11094., 17960., 19272., 19752., 16840., 10718.,  6340.,  1978.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.,    30.,   140.,   394.,   856.,  1400.,  1944.,  2488.,  2722.,  2428.,  1542.,   500.,  1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400., 10056., 10206.,  8708.,  5370.,  2696.,  7056., 10776., 15648., 13792., 12768., 15136., 14968., 12560.,  7656.,  4392.,  8656., 14584., 19872., 15648., 13792., 12768., 11416.,  9936.,  6216.,  3720.,  9424., 15000., 22240., 19872., 15648., 13792.,  9720.,  7312.,  4776.,  3048.,  7824., 14584., 21216., 22240., 19872., 15648., 11416.,  6544.,  3336.,  2306.,  5940., 11094., 17960., 19272., 19752., 16840., 10718.,  6340.,  1978.,  1188.,  3112.,  5900.,  9680., 11792., 11536., 10448.,  7484.,  2888.,   948.,   782.,  2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,   310.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2976.,  3192.,  3860.,  4124.,  4864.,  5180.,  5996.,  6368.,  6044.,  6412.,  6028.,  6392.,  6428.,  6820.,  5624.,  5972.,  4620.,  4920.,  4080.,  4328.,  3918.,  4176.,  4739.,  5058.,  5699.,  6084.,  6808.,  7264.,  6529.,  6988.,  6186.,  6648.,  6707.,  7204.,  5669.,  6110.,  4368.,  4748.,  3786.,  4100.,  4008.,  4348.,  5294.,  5718.,  6772.,  7286.,  8454.,  9064.,  8842.,  9462.,  9166.,  9796.,  9778., 10450.,  8872.,  9466.,  7638.,  8148.,  6352.,  6772.,  6942.,  7404.,  8433.,  8980., 10139., 10778., 12042., 12780., 11915., 12638., 11660., 12368., 12077., 12802., 10185., 10800.,  8346.,  8876.,  6738.,  7176.,  8302.,  8788.,  9011.,  9588.,  9947., 10622., 11796., 12576., 11797., 12562., 11670., 12420., 11639., 12406.,  9489., 10140.,  7828.,  8388.,  6706.,  7168.,  8126.,  8636.,  9205.,  9812., 10523., 11234., 12446., 13268., 12575., 13382., 12576., 13368., 13121., 13930., 11609., 12296.,  9998., 10588.,  8210.,  8696.,  8462.,  8996., 10039., 10676., 11867., 12614., 12936., 13768., 12073., 12858., 12042., 12780., 11915., 12638.,  9633., 10228.,  7688.,  8180.,  5874.,  6256.,  8960.,  9428., 10014., 10582., 11312., 11986., 12098., 12852., 11282., 12014., 11362., 12072., 11314., 12002.,  9316.,  9878.,  7098.,  7560.,  5352.,  5708.,  7014.,  7440.,  8609.,  9122., 10407., 11012., 10882., 11552., 10047., 10688., 10108., 10720., 10041., 10624.,  8321.,  8790.,  6882.,  7264.,  5266.,  5556.,  6896.,  7240.,  8004.,  8412.,  9272.,  9748.,  9428.,  9944.,  8636.,  9116.,  7716.,  8160.,  6668.,  7076.,  5520.,  5836.,  4164.,  4416.,  2560.,  2744.,  3424.,  3640.,  4404.,  4684.,  5536.,  5884.,  6828.,  7248.,  7228.,  7676.,  7148.,  7592.,  7004.,  7444.,  5848.,  6228.,  4460.,  4776.,  3632.,  3880.,  3918.,  4192.,  4839.,  5194.,  5939.,  6380.,  7228.,  7760.,  7749.,  8316.,  7342.,  7912.,  6871.,  7444.,  6405.,  6902.,  5636.,  6052.,  4650.,  4980.,  5320.,  5692.,  6766.,  7246.,  8452.,  9046., 10390., 11104., 11002., 11758., 11262., 12028., 11458., 12234., 10072., 10746.,  8310.,  8876.,  6576.,  7028.,  7230.,  7612.,  8741.,  9236., 10523., 11138., 12430., 13172., 13199., 13990., 13168., 13976., 13073., 13898., 11033., 11752.,  8574.,  9180.,  7442.,  7928.,  5902.,  6308.,  7655.,  8180.,  9691., 10342., 11544., 12328., 12313., 13146., 12858., 13708., 13339., 14206., 11489., 12244.,  9208.,  9844.,  7538.,  8048.,  7134.,  7564.,  9257.,  9812., 11675., 12362., 13602., 14428., 14371., 15246., 14468., 15360., 14501., 15410., 12713., 13504., 10482., 11148.,  8146.,  8680.,  6702.,  7092.,  8139.,  8628.,  9819., 10414., 11660., 12368., 12077., 12802., 12430., 13172., 13199., 13990., 11505., 12204.,  9420., 10020.,  7602.,  8096.,  6112.,  6484.,  7694.,  8158.,  9504., 10066., 11138., 11804., 11058., 11734., 10914., 11600., 11634., 12362., 10100., 10742.,  8202.,  8752.,  6920.,  7372.,  5286.,  5600.,  6869.,  7258.,  8631.,  9100.,  9846., 10400., 10195., 10752., 10480., 11040., 11053., 11648.,  9729., 10254.,  8102.,  8552.,  6450.,  6820.,  4272.,  4488.,  4900.,  5164.,  5656.,  5972.,  6516.,  6888.,  6332.,  6700.,  6084.,  6448.,  6572.,  6964.,  5808.,  6156.,  4836.,  5136.,  3648.,  3896.,  4256.,  4536.,  4980.,  5308.,  5824.,  6204.,  6796.,  7232.,  6524.,  6956.,  6188.,  6616.,  5788.,  6212.,  4152.,  4500.,  3180.,  3480.,  2928.,  3176.,  5198.,  5552.,  5419.,  5842.,  5795.,  6292.,  7360.,  7936.,  7785.,  8364.,  8146.,  8728.,  8443.,  9028.,  7397.,  7886.,  6360.,  6780.,  5258.,  5604.,  6760.,  7228.,  8142.,  8710.,  9748., 10422., 11558., 12312., 11530., 12262., 11374., 12084., 11090., 11778.,  8840.,  9402.,  6966.,  7428.,  5264.,  5620.,  9054.,  9548., 10169., 10772., 11547., 12266., 12434., 13244., 11667., 12462., 11796., 12576., 11797., 12562.,  9833., 10464.,  7618.,  8140.,  5842.,  6248.,  7726.,  8244.,  9659., 10292., 11867., 12622., 12828., 13680., 12189., 13026., 12446., 13268., 12575., 13382., 10801., 11468.,  9212.,  9764.,  7346.,  7776.,  8958.,  9500., 10813., 11476., 12955., 13746., 14118., 15012., 13607., 14486., 12936., 13768., 12073., 12858., 10233., 10872.,  7990.,  8508.,  5778.,  6168.,  8142.,  8580.,  9855., 10420., 11867., 12566., 13168., 13976., 13073., 13898., 12434., 13244., 11667., 12462., 10177., 10852.,  8240.,  8788.,  6642.,  7056.,  6592.,  6996.,  8414.,  8934., 10512., 11154., 12130., 12868., 12562., 13310., 12002., 12728., 11314., 12018.,  9988., 10582.,  8250.,  8728.,  6184.,  6540.,  6630.,  6960.,  8361.,  8786., 10311., 10836., 10954., 11552., 10791., 11392., 10212., 10784.,  9505., 10048.,  7425.,  7878.,  5002.,  5360.,  3666.,  3924.,  4464.,  4680.,  5220.,  5500.,  6136.,  6484.,  7060.,  7480.,  7548.,  7996.,  7236.,  7680.,  6860.,  7300.,  5712.,  6092.,  4324.,  4640.,  3712.,  3960.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     5.,     8.,    14.,    20.,    30.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,    95.,   104.,    83.,    90.,    52.,    56.,    20.,    26.,    68.,    82.,   148.,   172.,   264.,   300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,   360.,   382.,   212.,   224.,   113.,   128.,   301.,   334.,   570.,   624.,   926.,  1004.,  1082.,  1160.,  1238.,  1316.,  1394.,  1472.,  1227.,  1290.,   943.,   988.,   536.,   560.,   336.,   364.,   816.,   876.,  1448.,  1544.,  2240.,  2376.,  2512.,  2648.,  2784.,  2920.,  3056.,  3192.,  2600.,  2708.,  1944.,  2020.,  1080.,  1120.,   728.,   756.,  1656.,  1716.,  2792.,  2888.,  4144.,  4280.,  4352.,  4488.,  4496.,  4632.,  4576.,  4712.,  3536.,  3644.,  2560.,  2636.,  1384.,  1424.,  1056.,  1084.,  2304.,  2364.,  3752.,  3848.,  5408.,  5544.,  5360.,  5496.,  5248.,  5384.,  5072.,  5208.,  3704.,  3812.,  2664.,  2740.,  1432.,  1472.,  1128.,  1156.,  2440.,  2500.,  3944.,  4040.,  5648.,  5784.,  5344.,  5480.,  4976.,  5112.,  4544.,  4680.,  3104.,  3212.,  2256.,  2332.,  1224.,  1264.,   909.,   936.,  1957.,  2014.,  3150.,  3240.,  4494.,  4620.,  3914.,  4040.,  3270.,  3396.,  2562.,  2688.,  1335.,  1434.,  1015.,  1084.,   572.,   608.,   280.,   302.,   632.,   678.,  1060.,  1132.,  1568.,  1668.,  1768.,  1868.,  1968.,  2068.,  2168.,  2268.,  1780.,  1858.,  1292.,  1346.,   700.,   728.,   273.,   286.,   593.,   620.,   962.,  1004.,  1382.,  1440.,  1498.,  1556.,  1614.,  1672.,  1730.,  1788.,  1391.,  1436.,   991.,  1022.,   528.,   544.,    17.,    34.,    69.,   104.,   158.,   212.,   286.,   360.,   434.,   508.,   582.,   656.,   730.,   804.,   623.,   680.,   467.,   506.,   260.,   280.,   276.,   314.,   644.,   722.,  1108.,  1228.,  1672.,  1836.,  2000.,  2164.,  2328.,  2492.,  2656.,  2820.,  2176.,  2302.,  1576.,  1662.,   852.,   896.,   833.,   896.,  1837.,  1966.,  3018.,  3216.,  4382.,  4652.,  4922.,  5192.,  5462.,  5732.,  6002.,  6272.,  4827.,  5034.,  3439.,  3580.,  1832.,  1904.,  1744.,  1836.,  3760.,  3948.,  6056.,  6344.,  8640.,  9032.,  9424.,  9816., 10208., 10600., 10992., 11384.,  8744.,  9044.,  6168.,  6372.,  3256.,  3360.,  3032.,  3124.,  6392.,  6580., 10088., 10376., 14128., 14520., 13824., 14216., 13456., 13848., 13024., 13416.,  9296.,  9596.,  6528.,  6732.,  3432.,  3536.,  3232.,  3324.,  6784.,  6972., 10664., 10952., 14880., 15272., 14320., 14712., 13696., 14088., 13008., 13400.,  9080.,  9380.,  6376.,  6580.,  3352.,  3456.,  3176.,  3268.,  6664.,  6852., 10472., 10760., 14608., 15000., 13792., 14184., 12912., 13304., 11968., 12360.,  8096.,  8396.,  5712.,  5916.,  3016.,  3120.,  2269.,  2344.,  4773.,  4926.,  7518.,  7752., 10510., 10828.,  9290.,  9608.,  8006.,  8324.,  6658.,  6976.,  3783.,  4026.,  2743.,  2908.,  1484.,  1568.,   728.,   782.,  1592.,  1702.,  2596.,  2764.,  3744.,  3972.,  4200.,  4428.,  4656.,  4884.,  5112.,  5340.,  4084.,  4258.,  2892.,  3010.,  1532.,  1592.,   609.,   638.,  1297.,  1356.,  2066.,  2156.,  2918.,  3040.,  3162.,  3284.,  3406.,  3528.,  3650.,  3772.,  2879.,  2972.,  2015.,  2078.,  1056.,  1088.,    33.,    66.,   133.,   200.,   302.,   404.,   542.,   680.,   818.,   956.,  1094.,  1232.,  1370.,  1508.,  1151.,  1256.,   851.,   922.,   468.,   504.,   532.,   602.,  1220.,  1362.,  2068.,  2284.,  3080.,  3372.,  3664.,  3956.,  4248.,  4540.,  4832.,  5124.,  3904.,  4126.,  2792.,  2942.,  1492.,  1568.,  1553.,  1664.,  3373.,  3598.,  5466.,  5808.,  7838.,  8300.,  8762.,  9224.,  9686., 10148., 10610., 11072.,  8427.,  8778.,  5935.,  6172.,  3128.,  3248.,  3152.,  3308.,  6704.,  7020., 10664., 11144., 15040., 15688., 16336., 16984., 17632., 18280., 18928., 19576., 14888., 15380., 10392., 10724.,  5432.,  5600.,  5336.,  5492., 11128., 11444., 17384., 17864., 24112., 24760., 23296., 23944., 22416., 23064., 21472., 22120., 15056., 15548., 10496., 10828.,  5480.,  5648.,  5408.,  5564., 11264., 11580., 17576., 18056., 24352., 25000., 23280., 23928., 22144., 22792., 20944., 21592., 14456., 14948., 10088., 10420.,  5272.,  5440.,  5224.,  5380., 10888., 11204., 17000., 17480., 23568., 24216., 22240., 22888., 20848., 21496., 19392., 20040., 13088., 13580.,  9168.,  9500.,  4808.,  4976.,  3629.,  3752.,  7589.,  7838., 11886., 12264., 16526., 17036., 14666., 15176., 12742., 13252., 10754., 11264.,  6231.,  6618.,  4471.,  4732.,  2396.,  2528.,  1176.,  1262.,  2552.,  2726.,  4132.,  4396.,  5920.,  6276.,  6632.,  6988.,  7344.,  7700.,  8056.,  8412.,  6388.,  6658.,  4492.,  4674.,  2364.,  2456.,   945.,   990.,  2001.,  2092.,  3170.,  3308.,  4454.,  4640.,  4826.,  5012.,  5198.,  5384.,  5570.,  5756.,  4367.,  4508.,  3039.,  3134.,  1584.,  1632.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6720.,  7648.,  8692.,  9868., 11088., 12544., 12340., 13980., 10684., 12292., 10564., 12140., 11820., 13492.,  9616., 11072.,  8108.,  9316.,  6080.,  7008.,  8704.,  9960., 11425., 13031., 14716., 16712., 17281., 19579., 16579., 18901., 15269., 17487., 16871., 19113., 14244., 16176., 11175., 12757.,  8480.,  9672., 10336., 11728., 13278., 15074., 16856., 19104., 20014., 22634., 20282., 22982., 18150., 20802., 18674., 21406., 17256., 19632., 14370., 16342., 10816., 12336., 13920., 15768., 16811., 19069., 21156., 23880., 25307., 28425., 25697., 28823., 23687., 26693., 21773., 24787., 16860., 19392., 15293., 17415., 12128., 13784., 16560., 18600., 18047., 20545., 21852., 24864., 26583., 30037., 27741., 31203., 26755., 30097., 25609., 28959., 19668., 22488., 15953., 18315., 13872., 15720., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 15824., 17736., 19015., 21353., 21900., 24720., 23599., 26829., 24245., 27483., 25307., 28425., 25697., 28823., 20356., 22984., 15257., 17459., 10320., 12040., 14784., 16432., 17398., 19450., 20424., 22928., 21174., 24050., 21794., 24750., 23342., 26250., 24122., 26982., 19768., 22144., 14778., 16750.,  9344., 10864., 12400., 13720., 15285., 16907., 17108., 19072., 17469., 19687., 16159., 18401., 16385., 18651., 18147., 20437., 15964., 17864., 12699., 14297.,  8528.,  9784., 10656., 11840., 13636., 15068., 16240., 17952., 16260., 18156., 15052., 16916., 13332., 15164., 13148., 14948., 12176., 13632., 10172., 11380.,  6976.,  7904.,  5184.,  6112.,  7284.,  8460.,  9808., 11264., 12820., 14588., 13564., 15428., 12164., 13996., 13676., 15604., 12368., 14080., 10220., 11684.,  8064.,  9248.,  9696., 11080., 10681., 12319., 14092., 16024., 17961., 20227., 18539., 20829., 16973., 19159., 15759., 17969., 12468., 14336., 11071., 12685.,  8704., 10024., 13600., 15248., 13742., 15730., 15928., 18304., 20734., 23546., 22282., 25174., 21942., 24786., 21698., 24622., 17096., 19600., 15090., 17254., 13056., 14832., 15232., 16952., 17267., 19365., 18132., 20664., 21139., 24161., 23673., 26831., 24575., 27741., 25317., 28619., 20492., 23344., 17029., 19503., 14592., 16632., 15824., 17736., 19015., 21353., 21900., 24720., 23599., 26829., 24245., 27483., 25307., 28425., 25697., 28823., 20356., 22984., 15257., 17459., 10320., 12040., 15456., 17304., 18523., 20845., 22148., 25000., 23659., 26969., 24657., 28103., 26583., 30037., 27741., 31203., 23676., 26592., 18733., 21175., 13088., 15000., 15088., 16872., 18959., 21137., 21948., 24576., 23687., 26693., 21773., 24787., 21139., 24161., 23673., 26831., 20468., 23160., 17569., 19867., 13360., 15208., 13504., 15152., 17542., 19530., 21352., 23728., 22758., 25442., 21234., 23870., 18942., 21530., 19562., 22230., 16856., 19104., 13642., 15550., 10624., 12144.,  9872., 11064., 12781., 14307., 16228., 18128., 18277., 20463., 18247., 20457., 17705., 19939., 18027., 20413., 16428., 18520., 13331., 15089.,  9776., 11160.,  8672.,  9600.,  9732., 10908., 11952., 13408., 13636., 15276., 13708., 15316., 13268., 14844., 13436., 15108., 10896., 12352.,  9276., 10484.,  6464.,  7392.,  8192.,  9376.,  8628., 10060., 11536., 13248., 14932., 16956., 15932., 18052., 15300., 17388., 14156., 16212., 10064., 11776.,  9068., 10532.,  8576.,  9760., 10752., 12008., 11377., 12919., 12444., 14312., 16081., 18315., 17779., 20165., 18101., 20511., 17911., 20345., 13188., 15248., 10295., 12069.,  8928., 10376., 13344., 14992., 15902., 17954., 18072., 20576., 20846., 23722., 22906., 25862., 23590., 26498., 23506., 26366., 18024., 20400., 12962., 14934.,  8256.,  9776., 15456., 17304., 18523., 20845., 22148., 25000., 23659., 26969., 24657., 28103., 26583., 30037., 27741., 31203., 23676., 26592., 18733., 21175., 13088., 15000., 15088., 16872., 18959., 21137., 21948., 24576., 23687., 26693., 21773., 24787., 21139., 24161., 23673., 26831., 20468., 23160., 17569., 19867., 13360., 15208., 14656., 16632., 19427., 21845., 24180., 27096., 26755., 30097., 25609., 28959., 23599., 26829., 24245., 27483., 21292., 24016., 17525., 19807., 13632., 15416., 12304., 13960., 16183., 18329., 20908., 23600., 24575., 27741., 25317., 28619., 23659., 26969., 24657., 28103., 23076., 26088., 19721., 22243., 15376., 17352., 12288., 13680., 14262., 16058., 17672., 19920., 20854., 23474., 21730., 24430., 20462., 23114., 19546., 22278., 15928., 18304., 14138., 16110., 10880., 12400., 12912., 14232., 14821., 16507., 16820., 18912., 19533., 21943., 20527., 22961., 19633., 21963., 18835., 21189., 14396., 16424., 10443., 12105.,  8528.,  9784.,  9696., 10624., 11908., 13084., 12720., 14176., 13348., 15116., 15052., 16916., 15380., 17212., 15804., 17732., 13648., 15360., 10364., 11828.,  7936.,  9120.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   352.,   456.,   702.,   882.,  1200.,  1472.,  1264.,  1536.,  1808.,  2080.,  2352.,  2624.,  2258.,  2486.,  1856.,  2024.,  1114.,  1206.,   691.,   805.,  1228.,  1480.,  2043.,  2457.,  3152.,  3752.,  3008.,  3608.,  3728.,  4328.,  4928.,  5528.,  4545.,  5031.,  3628.,  3976.,  2129.,  2315.,  1660.,  1876.,  2944.,  3408.,  4300.,  5044.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  8096.,  9152.,  7348.,  8188.,  5792.,  6384.,  3364.,  3676.,  2860.,  3076.,  4896.,  5360.,  6556.,  7300.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  5668.,  6508.,  4608.,  5200.,  2740.,  3052.,  2428.,  2644.,  5600.,  6064.,  7948.,  8692.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  4468.,  5308.,  3424.,  4016.,  2116.,  2428.,  1996.,  2212.,  4672.,  5136.,  8092.,  8836., 10688., 11744.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  4132.,  4972.,  2720.,  3312.,  1492.,  1804.,  1547.,  1757.,  3676.,  4120.,  6435.,  7137.,  9872., 10856., 10208., 11192.,  9296., 10280.,  7520.,  8504.,  4233.,  5007.,  2172.,  2712.,   905.,  1187.,  1022.,  1194.,  2480.,  2840.,  4406.,  4970.,  6832.,  7616.,  8400.,  9184.,  8336.,  9120.,  7024.,  7808.,  4778.,  5390.,  1872.,  2296.,   418.,   638.,   485.,   587.,  1212.,  1424.,  2197.,  2527.,  3456.,  3912.,  4368.,  4824.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.,     5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   352.,   456.,   702.,   882.,  1200.,  1472.,  1264.,  1536.,  1808.,  2080.,  2352.,  2624.,  2258.,  2486.,  1856.,  2024.,  1114.,  1206.,   691.,   805.,  1228.,  1480.,  2043.,  2457.,  3152.,  3752.,  3008.,  3608.,  3728.,  4328.,  4928.,  5528.,  4545.,  5031.,  3628.,  3976.,  2129.,  2315.,  1660.,  1876.,  2944.,  3408.,  4300.,  5044.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  8096.,  9152.,  7348.,  8188.,  5792.,  6384.,  3364.,  3676.,  2860.,  3076.,  4896.,  5360.,  6556.,  7300.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  5668.,  6508.,  4608.,  5200.,  2740.,  3052.,  2428.,  2644.,  5600.,  6064.,  7948.,  8692.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  4468.,  5308.,  3424.,  4016.,  2116.,  2428.,  1996.,  2212.,  4672.,  5136.,  8092.,  8836., 10688., 11744.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  4132.,  4972.,  2720.,  3312.,  1492.,  1804.,  1547.,  1757.,  3676.,  4120.,  6435.,  7137.,  9872., 10856., 10208., 11192.,  9296., 10280.,  7520.,  8504.,  4233.,  5007.,  2172.,  2712.,   905.,  1187.,  1022.,  1194.,  2480.,  2840.,  4406.,  4970.,  6832.,  7616.,  8400.,  9184.,  8336.,  9120.,  7024.,  7808.,  4778.,  5390.,  1872.,  2296.,   418.,   638.,   485.,   587.,  1212.,  1424.,  2197.,  2527.,  3456.,  3912.,  4368.,  4824.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.,     5.,    11.,    28.,    48.,    85.,   127.,   192.,   264.,   336.,   408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,   383.,   413.,   118.,   162.,   352.,   456.,   702.,   882.,  1200.,  1472.,  1264.,  1536.,  1808.,  2080.,  2352.,  2624.,  2258.,  2486.,  1856.,  2024.,  1114.,  1206.,   691.,   805.,  1228.,  1480.,  2043.,  2457.,  3152.,  3752.,  3008.,  3608.,  3728.,  4328.,  4928.,  5528.,  4545.,  5031.,  3628.,  3976.,  2129.,  2315.,  1660.,  1876.,  2944.,  3408.,  4300.,  5044.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  8096.,  9152.,  7348.,  8188.,  5792.,  6384.,  3364.,  3676.,  2860.,  3076.,  4896.,  5360.,  6556.,  7300.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  6464.,  7520.,  5668.,  6508.,  4608.,  5200.,  2740.,  3052.,  2428.,  2644.,  5600.,  6064.,  7948.,  8692.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  5696.,  6752.,  4468.,  5308.,  3424.,  4016.,  2116.,  2428.,  1996.,  2212.,  4672.,  5136.,  8092.,  8836., 10688., 11744.,  9920., 10976.,  8288.,  9344.,  6176.,  7232.,  4132.,  4972.,  2720.,  3312.,  1492.,  1804.,  1547.,  1757.,  3676.,  4120.,  6435.,  7137.,  9872., 10856., 10208., 11192.,  9296., 10280.,  7520.,  8504.,  4233.,  5007.,  2172.,  2712.,   905.,  1187.,  1022.,  1194.,  2480.,  2840.,  4406.,  4970.,  6832.,  7616.,  8400.,  9184.,  8336.,  9120.,  7024.,  7808.,  4778.,  5390.,  1872.,  2296.,   418.,   638.,   485.,   587.,  1212.,  1424.,  2197.,  2527.,  3456.,  3912.,  4368.,  4824.,  5280.,  5736.,  4560.,  5016.,  3431.,  3785.,  1948.,  2192.,    95.,   221.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.,  3616.,  5792.,  4056.,  6648.,  5424.,  8688.,  6376., 10056.,  6280., 10216.,  5864.,  9544.,  6792., 10728.,  5424.,  8688.,  4472.,  7320.,  3616.,  5792.,  4392.,  7112.,  5630.,  8806.,  6380., 10332.,  7314., 11850.,  8234., 13218.,  8162., 12826.,  7386., 12242.,  6764., 10716.,  5830.,  9326.,  4648.,  7368.,  5424.,  8688.,  6084.,  9972.,  8136., 13032.,  9564., 15084.,  9420., 15324.,  8796., 14316., 10188., 16092.,  8136., 13032.,  6708., 10980.,  5424.,  8688.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  6200., 10008.,  7914., 12386.,  9092., 14676., 10246., 16622., 11630., 18582., 11350., 17854., 10526., 17350.,  9476., 15060.,  8322., 13242.,  6456., 10264.,  6200., 10008.,  7226., 11826.,  9508., 15348., 11350., 17854., 10526., 17350., 10246., 16622., 11630., 18582.,  9892., 15732.,  7634., 12682.,  6456., 10264.,  5424.,  8688.,  6852., 10740.,  8136., 13032.,  8796., 14316., 10188., 16092.,  9564., 15084.,  9420., 15324.,  8136., 13032.,  7476., 11748.,  5424.,  8688.,  4392.,  7112.,  5198.,  8502.,  6796., 11004.,  8162., 12826.,  7386., 12242.,  7314., 11850.,  8234., 13218.,  7180., 11388.,  5398.,  9022.,  4648.,  7368.,  3616.,  5792.,  4568.,  7160.,  5424.,  8688.,  5864.,  9544.,  6792., 10728.,  6376., 10056.,  6280., 10216.,  5424.,  8688.,  4984.,  7832.,  3616.,  5792.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.,    30.,    70.,   180.,   324.,   578.,   890.,  1352.,  1896.,  2120.,  2664.,  2376.,  2920.,  2120.,  2664.,  1082.,  1586.,  1396.,  1796.,  1078.,  1310.,   460.,   796.,  1736.,  2536.,  3892.,  5284.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  8208., 10320.,  5028.,  6804.,  3848.,  5160.,  2876.,  3596.,  2186.,  2562.,  3516.,  4460.,  5910.,  7614.,  9560., 12216.,  9304., 11960.,  9560., 12216., 10328., 12984.,  7806., 10086.,  4476.,  6188.,  2514.,  3466.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1944.,  2616.,  5840.,  7440.,  9640., 12424., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 12424., 15976.,  9552., 12176.,  4728.,  6168.,  2968.,  3640.,  5840.,  7440., 10664., 13448., 15392., 19616., 15392., 19616., 15392., 19616., 15392., 19616., 13448., 17000.,  9552., 12176.,  5752.,  7192.,  1834.,  2466.,  5372.,  6828.,  8438., 10910., 13272., 16952., 13016., 16696., 13272., 16952., 14040., 17720., 10334., 13382.,  7356.,  9580.,  3186.,  4394.,  2156.,  2492.,  3336.,  4136.,  5332.,  6724.,  8208., 10320.,  7184.,  9296.,  7184.,  9296.,  8208., 10320.,  6724.,  8500.,  3080.,  4392.,  1436.,  2156.,  1374.,  1670.,  3636.,  4292.,  4546.,  5626.,  6088.,  7656.,  5832.,  7400.,  5064.,  6632.,  5832.,  7400.,  5306.,  6578.,  3508.,  4420.,   310.,   798.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2728.,  2944.,  3160.,  3376.,  3552.,  3816.,  4080.,  4344.,  4548.,  4864.,  5180.,  5496.,  5732.,  6104.,  6476.,  6848.,  5448.,  5816.,  6184.,  6552.,  5036.,  5400.,  5764.,  6128.,  5424.,  5816.,  6208.,  6600.,  4148.,  4496.,  4844.,  5192.,  3500.,  3800.,  4100.,  4400.,  3176.,  3424.,  3672.,  3920.,  3354.,  3612.,  3870.,  4128.,  4295.,  4614.,  4933.,  5252.,  5445.,  5830.,  6215.,  6600.,  6824.,  7280.,  7736.,  8192.,  6775.,  7234.,  7693.,  8152.,  6598.,  7060.,  7522.,  7984.,  7093.,  7590.,  8087.,  8584.,  5905.,  6346.,  6787.,  7228.,  4548.,  4928.,  5308.,  5688.,  3738.,  4052.,  4366.,  4680.,  4348.,  4688.,  5028.,  5368.,  5556.,  5980.,  6404.,  6828.,  7046.,  7560.,  8074.,  8588.,  8842.,  9452., 10062., 10672.,  9032.,  9652., 10272., 10892.,  9094.,  9724., 10354., 10984.,  9700., 10372., 11044., 11716.,  8350.,  8944.,  9538., 10132.,  7022.,  7532.,  8042.,  8552.,  5404.,  5824.,  6244.,  6664.,  6574.,  7036.,  7498.,  7960.,  7391.,  7938.,  8485.,  9032.,  9207.,  9846., 10485., 11124., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316.,  8651.,  9266.,  9881., 10496.,  7266.,  7796.,  8326.,  8856.,  5870.,  6308.,  6746.,  7184.,  7862.,  8348.,  8834.,  9320.,  8197.,  8774.,  9351.,  9928.,  9235.,  9910., 10585., 11260., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860., 11582., 12332., 13082., 13832., 11759., 12526., 13293., 14060.,  9719., 10370., 11021., 11672.,  7928.,  8488.,  9048.,  9608.,  6422.,  6884.,  7346.,  7808.,  8126.,  8636.,  9146.,  9656.,  9259.,  9866., 10473., 11080.,  9775., 10486., 11197., 11908., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 11816., 12608., 13400., 14192., 12121., 12930., 13739., 14548., 10275., 10962., 11649., 12336.,  8846.,  9436., 10026., 10616.,  6974.,  7460.,  7946.,  8432.,  8390.,  8924.,  9458.,  9992.,  9553., 10190., 10827., 11464., 10827., 11574., 12321., 13068., 11472., 12304., 13136., 13968., 11073., 11858., 12643., 13428., 11314., 12052., 12790., 13528., 11331., 12054., 12777., 13500.,  8911.,  9506., 10101., 10696.,  7076.,  7568.,  8060.,  8552.,  5094.,  5476.,  5858.,  6240.,  8044.,  8512.,  8980.,  9448.,  9252.,  9820., 10388., 10956., 10238., 10912., 11586., 12260., 10386., 11140., 11894., 12648., 10056., 10788., 11520., 12252., 10494., 11204., 11914., 12624., 10676., 11364., 12052., 12740.,  8758.,  9320.,  9882., 10444.,  6630.,  7092.,  7554.,  8016.,  4716.,  5072.,  5428.,  5784.,  7458.,  7884.,  8310.,  8736.,  9057.,  9570., 10083., 10596., 10065., 10670., 11275., 11880.,  9990., 10660., 11330., 12000.,  8797.,  9438., 10079., 10720.,  8372.,  8984.,  9596., 10208.,  8715.,  9298.,  9881., 10464.,  7469.,  7938.,  8407.,  8876.,  5830.,  6212.,  6594.,  6976.,  3778.,  4068.,  4358.,  4648.,  6312.,  6656.,  7000.,  7344.,  7408.,  7816.,  8224.,  8632.,  8532.,  9008.,  9484.,  9960.,  8292.,  8808.,  9324.,  9840.,  7256.,  7736.,  8216.,  8696.,  5964.,  6408.,  6852.,  7296.,  5440.,  5848.,  6256.,  6664.,  4836.,  5152.,  5468.,  5784.,  3852.,  4104.,  4356.,  4608.,  2440.,  2624.,  2808.,  2992.,  2856.,  3072.,  3288.,  3504.,  3600.,  3880.,  4160.,  4440.,  4580.,  4928.,  5276.,  5624.,  5812.,  6232.,  6652.,  7072.,  6200.,  6648.,  7096.,  7544.,  5660.,  6104.,  6548.,  6992.,  6016.,  6456.,  6896.,  7336.,  5204.,  5584.,  5964.,  6344.,  4060.,  4376.,  4692.,  5008.,  3304.,  3552.,  3800.,  4048.,  4106.,  4380.,  4654.,  4928.,  4971.,  5326.,  5681.,  6036.,  6125.,  6566.,  7007.,  7448.,  7588.,  8120.,  8652.,  9184.,  8083.,  8650.,  9217.,  9784.,  7778.,  8348.,  8918.,  9488.,  7345.,  7918.,  8491.,  9064.,  6553.,  7050.,  7547.,  8044.,  5640.,  6056.,  6472.,  6888.,  4298.,  4628.,  4958.,  5288.,  5660.,  6032.,  6404.,  6776.,  6908.,  7388.,  7868.,  8348.,  8406.,  9000.,  9594., 10188., 10306., 11020., 11734., 12448., 10912., 11668., 12424., 13180., 10846., 11612., 12378., 13144., 10652., 11428., 12204., 12980.,  8622.,  9296.,  9970., 10644.,  7670.,  8236.,  8802.,  9368.,  6460.,  6912.,  7364.,  7816.,  6462.,  6844.,  7226.,  7608.,  7931.,  8426.,  8921.,  9416.,  9359.,  9974., 10589., 11204., 11062., 11804., 12546., 13288., 11783., 12574., 13365., 14156., 11960., 12768., 13576., 14384., 12009., 12834., 13659., 14484.,  9603., 10322., 11041., 11760.,  7518.,  8124.,  8730.,  9336.,  6462.,  6948.,  7434.,  7920.,  6470.,  6876.,  7282.,  7688.,  8481.,  9006.,  9531., 10056., 10155., 10806., 11457., 12108., 11808., 12592., 13376., 14160., 12529., 13362., 14195., 15028., 12834., 13684., 14534., 15384., 13011., 13878., 14745., 15612., 10927., 11682., 12437., 13192.,  8436.,  9072.,  9708., 10344.,  6246.,  6756.,  7266.,  7776.,  6478.,  6908.,  7338.,  7768.,  8263.,  8818.,  9373.,  9928., 10439., 11126., 11813., 12500., 12298., 13124., 13950., 14776., 13019., 13894., 14769., 15644., 13452., 14344., 15236., 16128., 13757., 14666., 15575., 16484., 11739., 12530., 13321., 14112.,  9610., 10276., 10942., 11608.,  7054.,  7588.,  8122.,  8656.,  6294.,  6684.,  7074.,  7464.,  7821.,  8310.,  8799.,  9288.,  9315.,  9910., 10505., 11100., 11092., 11800., 12508., 13216., 11141., 11866., 12591., 13316., 11062., 11804., 12546., 13288., 11783., 12574., 13365., 14156.,  9863., 10562., 11261., 11960.,  8256.,  8856.,  9456., 10056.,  6646.,  7140.,  7634.,  8128.,  5772.,  6144.,  6516.,  6888.,  7660.,  8124.,  8588.,  9052.,  9166.,  9728., 10290., 10852., 10602., 11268., 11934., 12600., 10688., 11364., 12040., 12716., 10646., 11332., 12018., 12704., 11276., 12004., 12732., 13460.,  9606., 10248., 10890., 11532.,  7598.,  8148.,  8698.,  9248.,  5964.,  6416.,  6868.,  7320.,  4754.,  5068.,  5382.,  5696.,  6085.,  6474.,  6863.,  7252.,  7673.,  8142.,  8611.,  9080.,  8802.,  9356.,  9910., 10464.,  8921.,  9478., 10035., 10592.,  8912.,  9472., 10032., 10592.,  9447., 10042., 10637., 11232.,  8309.,  8834.,  9359.,  9884.,  6666.,  7116.,  7566.,  8016.,  4786.,  5156.,  5526.,  5896.,  4136.,  4352.,  4568.,  4784.,  4032.,  4296.,  4560.,  4824.,  4788.,  5104.,  5420.,  5736.,  5684.,  6056.,  6428.,  6800.,  5832.,  6200.,  6568.,  6936.,  5852.,  6216.,  6580.,  6944.,  6288.,  6680.,  7072.,  7464.,  5636.,  5984.,  6332.,  6680.,  4636.,  4936.,  5236.,  5536.,  3272.,  3520.,  3768.,  4016.,  3688.,  3968.,  4248.,  4528.,  3680.,  4008.,  4336.,  4664.,  4868.,  5248.,  5628.,  6008.,  6244.,  6680.,  7116.,  7552.,  6344.,  6776.,  7208.,  7640.,  6316.,  6744.,  7172.,  7600.,  6160.,  6584.,  7008.,  7432.,  4532.,  4880.,  5228.,  5576.,  3436.,  3736.,  4036.,  4336.,  2920.,  3168.,  3416.,  3664.,  5306.,  5660.,  6014.,  6368.,  5551.,  5974.,  6397.,  6820.,  6037.,  6534.,  7031.,  7528.,  7808.,  8384.,  8960.,  9536.,  8143.,  8722.,  9301.,  9880.,  8350.,  8932.,  9514., 10096.,  8429.,  9014.,  9599., 10184.,  6753.,  7242.,  7731.,  8220.,  5676.,  6096.,  6516.,  6936.,  4346.,  4692.,  5038.,  5384.,  7164.,  7632.,  8100.,  8568.,  8036.,  8604.,  9172.,  9740.,  8998.,  9672., 10346., 11020., 10298., 11052., 11806., 12560., 10712., 11444., 12176., 12908., 10870., 11580., 12290., 13000., 10772., 11460., 12148., 12836.,  8318.,  8880.,  9442., 10004.,  6494.,  6956.,  7418.,  7880.,  4572.,  4928.,  5284.,  5640.,  8206.,  8700.,  9194.,  9688.,  9527., 10130., 10733., 11336., 10663., 11382., 12101., 12820., 11002., 11812., 12622., 13432., 10763., 11558., 12353., 13148., 11292., 12072., 12852., 13632., 11565., 12330., 13095., 13860.,  9723., 10354., 10985., 11616.,  7610.,  8132.,  8654.,  9176.,  5646.,  6052.,  6458.,  6864.,  8214.,  8732.,  9250.,  9768., 10205., 10838., 11471., 12104., 11715., 12470., 13225., 13980., 12260., 13112., 13964., 14816., 11253., 12090., 12927., 13764., 11014., 11836., 12658., 13480., 11543., 12350., 13157., 13964., 10023., 10690., 11357., 12024.,  8400.,  8952.,  9504., 10056.,  6198.,  6628.,  7058.,  7488.,  8222.,  8764.,  9306.,  9848., 10115., 10778., 11441., 12104., 12255., 13046., 13837., 14628., 13262., 14156., 15050., 15944., 12511., 13390., 14269., 15148., 11472., 12304., 13136., 13968., 11073., 11858., 12643., 13428.,  9363., 10002., 10641., 11280.,  7718.,  8236.,  8754.,  9272.,  5790.,  6180.,  6570.,  6960.,  7334.,  7772.,  8210.,  8648.,  9001.,  9566., 10131., 10696., 10619., 11318., 12017., 12716., 11960., 12768., 13576., 14384., 12009., 12834., 13659., 14484., 11002., 11812., 12622., 13432., 10763., 11558., 12353., 13148.,  9663., 10338., 11013., 11688.,  7868.,  8416.,  8964.,  9512.,  6086.,  6500.,  6914.,  7328.,  6956.,  7360.,  7764.,  8168.,  8916.,  9436.,  9956., 10476., 10462., 11104., 11746., 12388., 11490., 12228., 12966., 13704., 11576., 12324., 13072., 13820., 10734., 11460., 12186., 12912.,  9636., 10340., 11044., 11748.,  7766.,  8360.,  8954.,  9548.,  6614.,  7092.,  7570.,  8048.,  4844.,  5200.,  5556.,  5912.,  6018.,  6348.,  6678.,  7008.,  7369.,  7794.,  8219.,  8644.,  8929.,  9454.,  9979., 10504.,  9694., 10292., 10890., 11488.,  9813., 10414., 11015., 11616.,  9132.,  9704., 10276., 10848.,  8195.,  8738.,  9281.,  9824.,  5949.,  6402.,  6855.,  7308.,  4142.,  4500.,  4858.,  5216.,  3170.,  3428.,  3686.,  3944.,  4392.,  4608.,  4824.,  5040.,  5296.,  5576.,  5856.,  6136.,  5972.,  6320.,  6668.,  7016.,  6724.,  7144.,  7564.,  7984.,  7160.,  7608.,  8056.,  8504.,  7052.,  7496.,  7940.,  8384.,  6816.,  7256.,  7696.,  8136.,  5668.,  6048.,  6428.,  6808.,  4108.,  4424.,  4740.,  5056.,  3144.,  3392.,  3640.,  3888.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    1.,     2.,     3.,     4.,     7.,    10.,    13.,    16.,    22.,    28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,   100.,   110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,   200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,   100.,   104.,   108.,   112.,    34.,    40.,    46.,    52.,   122.,   136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,   564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,   888.,   924.,   960.,   996.,  1032.,   866.,   896.,   926.,   956.,   698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,   226.,   241.,   256.,   569.,   602.,   635.,   668.,  1022.,  1076.,  1130.,  1184.,  1582.,  1660.,  1738.,  1816.,  1702.,  1780.,  1858.,  1936.,  1758.,  1836.,  1914.,  1992.,  2070.,  2148.,  2226.,  2304.,  1815.,  1878.,  1941.,  2004.,  1393.,  1438.,  1483.,  1528.,   792.,   816.,   840.,   864.,   580.,   608.,   636.,   664.,  1380.,  1440.,  1500.,  1560.,  2096.,  2192.,  2288.,  2384.,  3000.,  3136.,  3272.,  3408.,  3096.,  3232.,  3368.,  3504.,  3128.,  3264.,  3400.,  3536.,  3672.,  3808.,  3944.,  4080.,  3172.,  3280.,  3388.,  3496.,  2404.,  2480.,  2556.,  2632.,  1352.,  1392.,  1432.,  1472.,  1044.,  1072.,  1100.,  1128.,  2356.,  2416.,  2476.,  2536.,  3376.,  3472.,  3568.,  3664.,  4632.,  4768.,  4904.,  5040.,  4408.,  4544.,  4680.,  4816.,  4056.,  4192.,  4328.,  4464.,  4408.,  4544.,  4680.,  4816.,  3508.,  3616.,  3724.,  3832.,  2612.,  2688.,  2764.,  2840.,  1448.,  1488.,  1528.,  1568.,  1188.,  1216.,  1244.,  1272.,  2628.,  2688.,  2748.,  2808.,  3504.,  3600.,  3696.,  3792.,  4600.,  4736.,  4872.,  5008.,  3864.,  4000.,  4136.,  4272.,  3000.,  3136.,  3272.,  3408.,  3096.,  3232.,  3368.,  3504.,  2308.,  2416.,  2524.,  2632.,  1796.,  1872.,  1948.,  2024.,  1032.,  1072.,  1112.,  1152.,   820.,   848.,   876.,   904.,  1876.,  1936.,  1996.,  2056.,  3184.,  3280.,  3376.,  3472.,  4760.,  4896.,  5032.,  5168.,  4728.,  4864.,  5000.,  5136.,  4632.,  4768.,  4904.,  5040.,  4408.,  4544.,  4680.,  4816.,  3092.,  3200.,  3308.,  3416.,  2260.,  2336.,  2412.,  2488.,  1128.,  1168.,  1208.,  1248.,   959.,   986.,  1013.,  1040.,  2129.,  2186.,  2243.,  2300.,  3522.,  3612.,  3702.,  3792.,  5150.,  5276.,  5402.,  5528.,  4822.,  4948.,  5074.,  5200.,  4430.,  4556.,  4682.,  4808.,  3654.,  3780.,  3906.,  4032.,  2187.,  2286.,  2385.,  2484.,  1513.,  1582.,  1651.,  1720.,   596.,   632.,   668.,   704.,   538.,   560.,   582.,   604.,  1218.,  1264.,  1310.,  1356.,  2048.,  2120.,  2192.,  2264.,  3036.,  3136.,  3236.,  3336.,  3436.,  3536.,  3636.,  3736.,  3836.,  3936.,  4036.,  4136.,  3660.,  3760.,  3860.,  3960.,  2842.,  2920.,  2998.,  3076.,  1826.,  1880.,  1934.,  1988.,   604.,   632.,   660.,   688.,   533.,   546.,   559.,   572.,  1159.,  1186.,  1213.,  1240.,  1882.,  1924.,  1966.,  2008.,  2706.,  2764.,  2822.,  2880.,  2938.,  2996.,  3054.,  3112.,  3170.,  3228.,  3286.,  3344.,  2570.,  2628.,  2686.,  2744.,  1841.,  1886.,  1931.,  1976.,   991.,  1022.,  1053.,  1084.,    16.,    32.,    48.,    64.,    17.,    34.,    51.,    68.,   103.,   138.,   173.,   208.,   262.,   316.,   370.,   424.,   498.,   572.,   646.,   720.,   794.,   868.,   942.,  1016.,  1090.,  1164.,  1238.,  1312.,  1386.,  1460.,  1534.,  1608.,  1189.,  1246.,  1303.,  1360.,   895.,   934.,   973.,  1012.,   500.,   520.,   540.,   560.,   514.,   552.,   590.,   628.,  1210.,  1288.,  1366.,  1444.,  2096.,  2216.,  2336.,  2456.,  3180.,  3344.,  3508.,  3672.,  3836.,  4000.,  4164.,  4328.,  4492.,  4656.,  4820.,  4984.,  5148.,  5312.,  5476.,  5640.,  4226.,  4352.,  4478.,  4604.,  3066.,  3152.,  3238.,  3324.,  1660.,  1704.,  1748.,  1792.,  1603.,  1666.,  1729.,  1792.,  3545.,  3674.,  3803.,  3932.,  4750.,  4948.,  5146.,  5344.,  6254.,  6524.,  6794.,  7064.,  6118.,  6388.,  6658.,  6928.,  5918.,  6188.,  6458.,  6728.,  6998.,  7268.,  7538.,  7808.,  5799.,  6006.,  6213.,  6420.,  4241.,  4382.,  4523.,  4664.,  2312.,  2384.,  2456.,  2528.,  2308.,  2400.,  2492.,  2584.,  5092.,  5280.,  5468.,  5656.,  7024.,  7312.,  7600.,  7888.,  9400.,  9792., 10184., 10576.,  9496.,  9888., 10280., 10672.,  9528.,  9920., 10312., 10704., 11096., 11488., 11880., 12272.,  9124.,  9424.,  9724., 10024.,  6628.,  6832.,  7036.,  7240.,  3592.,  3696.,  3800.,  3904.,  3540.,  3632.,  3724.,  3816.,  7604.,  7792.,  7980.,  8168., 10608., 10896., 11184., 11472., 14104., 14496., 14888., 15280., 12856., 13248., 13640., 14032., 11480., 11872., 12264., 12656., 11832., 12224., 12616., 13008.,  8692.,  8992.,  9292.,  9592.,  6324.,  6528.,  6732.,  6936.,  3432.,  3536.,  3640.,  3744.,  3428.,  3520.,  3612.,  3704.,  7364.,  7552.,  7740.,  7928.,  9968., 10256., 10544., 10832., 13048., 13440., 13832., 14224., 11288., 11680., 12072., 12464.,  9400.,  9792., 10184., 10576.,  9496.,  9888., 10280., 10672.,  6724.,  7024.,  7324.,  7624.,  4996.,  5200.,  5404.,  5608.,  2760.,  2864.,  2968.,  3072.,  2804.,  2896.,  2988.,  3080.,  6100.,  6288.,  6476.,  6664.,  9904., 10192., 10480., 10768., 14232., 14624., 15016., 15408., 14200., 14592., 14984., 15376., 14104., 14496., 14888., 15280., 12856., 13248., 13640., 14032.,  8788.,  9088.,  9388.,  9688.,  5972.,  6176.,  6380.,  6584.,  2600.,  2704.,  2808.,  2912.,  2607.,  2682.,  2757.,  2832.,  5617.,  5770.,  5923.,  6076.,  9042.,  9276.,  9510.,  9744., 12894., 13212., 13530., 13848., 12310., 12628., 12946., 13264., 11662., 11980., 12298., 12616.,  9606.,  9924., 10242., 10560.,  5915.,  6158.,  6401.,  6644.,  3849.,  4014.,  4179.,  4344.,  1348.,  1432.,  1516.,  1600.,  1402.,  1456.,  1510.,  1564.,  3074.,  3184.,  3294.,  3404.,  5024.,  5192.,  5360.,  5528.,  7260.,  7488.,  7716.,  7944.,  8172.,  8400.,  8628.,  8856.,  9084.,  9312.,  9540.,  9768.,  8396.,  8624.,  8852.,  9080.,  6330.,  6504.,  6678.,  6852.,  3938.,  4056.,  4174.,  4292.,  1212.,  1272.,  1332.,  1392.,  1189.,  1218.,  1247.,  1276.,  2535.,  2594.,  2653.,  2712.,  4042.,  4132.,  4222.,  4312.,  5714.,  5836.,  5958.,  6080.,  6202.,  6324.,  6446.,  6568.,  6690.,  6812.,  6934.,  7056.,  5322.,  5444.,  5566.,  5688.,  3745.,  3838.,  3931.,  4024.,  1983.,  2046.,  2109.,  2172.,    32.,    64.,    96.,   128.,    33.,    66.,    99.,   132.,   199.,   266.,   333.,   400.,   502.,   604.,   706.,   808.,   946.,  1084.,  1222.,  1360.,  1498.,  1636.,  1774.,  1912.,  2050.,  2188.,  2326.,  2464.,  2602.,  2740.,  2878.,  3016.,  2197.,  2302.,  2407.,  2512.,  1631.,  1702.,  1773.,  1844.,   900.,   936.,   972.,  1008.,   994.,  1064.,  1134.,  1204.,  2298.,  2440.,  2582.,  2724.,  3920.,  4136.,  4352.,  4568.,  5868.,  6160.,  6452.,  6744.,  7036.,  7328.,  7620.,  7912.,  8204.,  8496.,  8788.,  9080.,  9372.,  9664.,  9956., 10248.,  7586.,  7808.,  8030.,  8252.,  5434.,  5584.,  5734.,  5884.,  2908.,  2984.,  3060.,  3136.,  2995.,  3106.,  3217.,  3328.,  6521.,  6746.,  6971.,  7196.,  8478.,  8820.,  9162.,  9504., 10926., 11388., 11850., 12312., 10534., 10996., 11458., 11920., 10078., 10540., 11002., 11464., 11926., 12388., 12850., 13312.,  9783., 10134., 10485., 10836.,  7089.,  7326.,  7563.,  7800.,  3832.,  3952.,  4072.,  4192.,  4036.,  4192.,  4348.,  4504.,  8804.,  9120.,  9436.,  9752., 11952., 12432., 12912., 13392., 15800., 16448., 17096., 17744., 15896., 16544., 17192., 17840., 15928., 16576., 17224., 17872., 18520., 19168., 19816., 20464., 15076., 15568., 16060., 16552., 10852., 11184., 11516., 11848.,  5832.,  6000.,  6168.,  6336.,  6036.,  6192.,  6348.,  6504., 12852., 13168., 13484., 13800., 17840., 18320., 18800., 19280., 23576., 24224., 24872., 25520., 21304., 21952., 22600., 23248., 18904., 19552., 20200., 20848., 19256., 19904., 20552., 21200., 13876., 14368., 14860., 15352., 10036., 10368., 10700., 11032.,  5416.,  5584.,  5752.,  5920.,  5668.,  5824.,  5980.,  6136., 12100., 12416., 12732., 13048., 16432., 16912., 17392., 17872., 21496., 22144., 22792., 23440., 18712., 19360., 20008., 20656., 15800., 16448., 17096., 17744., 15896., 16544., 17192., 17840., 11140., 11632., 12124., 12616.,  8196.,  8528.,  8860.,  9192.,  4488.,  4656.,  4824.,  4992.,  4788.,  4944.,  5100.,  5256., 10324., 10640., 10956., 11272., 16624., 17104., 17584., 18064., 23704., 24352., 25000., 25648., 23672., 24320., 24968., 25616., 23576., 24224., 24872., 25520., 21304., 21952., 22600., 23248., 14484., 14976., 15468., 15960.,  9684., 10016., 10348., 10680.,  4072.,  4240.,  4408.,  4576.,  4255.,  4378.,  4501.,  4624.,  9105.,  9354.,  9603.,  9852., 14562., 14940., 15318., 15696., 20638., 21148., 21658., 22168., 19798., 20308., 20818., 21328., 18894., 19404., 19914., 20424., 15558., 16068., 16578., 17088.,  9643., 10030., 10417., 10804.,  6185.,  6446.,  6707.,  6968.,  2100.,  2232.,  2364.,  2496.,  2266.,  2352.,  2438.,  2524.,  4930.,  5104.,  5278.,  5452.,  8000.,  8264.,  8528.,  8792., 11484., 11840., 12196., 12552., 12908., 13264., 13620., 13976., 14332., 14688., 15044., 15400., 13132., 13488., 13844., 14200.,  9818., 10088., 10358., 10628.,  6050.,  6232.,  6414.,  6596.,  1820.,  1912.,  2004.,  2096.,  1845.,  1890.,  1935.,  1980.,  3911.,  4002.,  4093.,  4184.,  6202.,  6340.,  6478.,  6616.,  8722.,  8908.,  9094.,  9280.,  9466.,  9652.,  9838., 10024., 10210., 10396., 10582., 10768.,  8074.,  8260.,  8446.,  8632.,  5649.,  5790.,  5931.,  6072.,  2975.,  3070.,  3165.,  3260.,    48.,    96.,   144.,   192.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2080., 2832., 3584., 4336., 2762., 3726., 4690., 5654., 3384., 4608., 5832., 7056., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 4066., 5502., 6938., 8374., 3982., 5434., 6886., 8338., 3384., 4608., 5832., 7056., 2894., 3906., 4918., 5930., 2080., 2832., 3584., 4336., 1848., 2528., 3208., 3888., 2221., 3075., 3929., 4783., 2904., 3972., 5040., 6108., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 2824., 3828., 4832., 5836., 2075., 2905., 3735., 4565., 1736., 2352., 2968., 3584., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 2024., 2768., 3512., 4256., 2489., 3359., 4229., 5099., 2816., 3852., 4888., 5924., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 2736., 3708., 4680., 5652., 2343., 3189., 4035., 4881., 1912., 2592., 3272., 3952., 2432., 3312., 4192., 5072., 2746., 3774., 4802., 5830., 3384., 4608., 5832., 7056., 3914., 5318., 6722., 8126., 3830., 5250., 6670., 8090., 3698., 5070., 6442., 7814., 4174., 5626., 7078., 8530., 3384., 4608., 5832., 7056., 2878., 3954., 5030., 6106., 2432., 3312., 4192., 5072., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2432., 3312., 4192., 5072., 2938., 3966., 4994., 6022., 3384., 4608., 5832., 7056., 3850., 5254., 6658., 8062., 4022., 5442., 6862., 8282., 3890., 5262., 6634., 8006., 3854., 5306., 6758., 8210., 3384., 4608., 5832., 7056., 3070., 4146., 5222., 6298., 2432., 3312., 4192., 5072., 1848., 2528., 3208., 3888., 2197., 3019., 3841., 4663., 2728., 3732., 4736., 5740., 3249., 4411., 5573., 6735., 3043., 4229., 5415., 6601., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3000., 4068., 5136., 6204., 2403., 3329., 4255., 5181., 2088., 2832., 3576., 4320., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136., 1504., 2048., 2592., 3136., 1772., 2436., 3100., 3764., 2256., 3072., 3888., 4704., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2256., 3072., 3888., 4704., 1860., 2556., 3252., 3948., 1504., 2048., 2592., 3136., 1672., 2288., 2904., 3520., 2161., 2935., 3709., 4483., 2640., 3612., 4584., 5556., 3045., 4191., 5337., 6483., 3399., 4633., 5867., 7101., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 2912., 3948., 4984., 6020., 2367., 3245., 4123., 5001., 1912., 2592., 3272., 3952., 2080., 2832., 3584., 4336., 2570., 3534., 4498., 5462., 3384., 4608., 5832., 7056., 4042., 5446., 6850., 8254., 4006., 5490., 6974., 8458., 3874., 5310., 6746., 8182., 4046., 5498., 6950., 8402., 3384., 4608., 5832., 7056., 2702., 3714., 4726., 5738., 2080., 2832., 3584., 4336., 2600., 3552., 4504., 5456., 3351., 4521., 5691., 6861., 3944., 5388., 6832., 8276., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 3864., 5244., 6624., 8004., 3249., 4411., 5573., 6735., 2488., 3376., 4264., 5152., 2776., 3792., 4808., 5824., 3195., 4413., 5631., 6849., 4032., 5508., 6984., 8460., 4663., 6325., 7987., 9649., 4413., 6083., 7753., 9423., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 3952., 5364., 6776., 8188., 3093., 4303., 5513., 6723., 2664., 3616., 4568., 5520., 2600., 3552., 4504., 5456., 3199., 4337., 5475., 6613., 3768., 5148., 6528., 7908., 4371., 5985., 7599., 9213., 4681., 6367., 8053., 9739., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4040., 5484., 6928., 8372., 3449., 4707., 5965., 7223., 2840., 3856., 4872., 5888., 2424., 3312., 4200., 5088., 2995., 4117., 5239., 6361., 3856., 5268., 6680., 8092., 4639., 6269., 7899., 9529., 4437., 6139., 7841., 9543., 4395., 6041., 7687., 9333., 4705., 6423., 8141., 9859., 4128., 5604., 7080., 8556., 3245., 4487., 5729., 6971., 2664., 3616., 4568., 5520., 2080., 2832., 3584., 4336., 2762., 3726., 4690., 5654., 3384., 4608., 5832., 7056., 3722., 5126., 6530., 7934., 4198., 5682., 7166., 8650., 4066., 5502., 6938., 8374., 3982., 5434., 6886., 8338., 3384., 4608., 5832., 7056., 2894., 3906., 4918., 5930., 2080., 2832., 3584., 4336., 1848., 2528., 3208., 3888., 2221., 3075., 3929., 4783., 2904., 3972., 5040., 6108., 3401., 4595., 5789., 6983., 3195., 4413., 5631., 6849., 3197., 4375., 5553., 6731., 3247., 4449., 5651., 6853., 2824., 3828., 4832., 5836., 2075., 2905., 3735., 4565., 1736., 2352., 2968., 3584., 1504., 2048., 2592., 3136., 1900., 2564., 3228., 3892., 2256., 3072., 3888., 4704., 2524., 3460., 4396., 5332., 2740., 3708., 4676., 5644., 2652., 3588., 4524., 5460., 2612., 3580., 4548., 5516., 2256., 3072., 3888., 4704., 1988., 2684., 3380., 4076., 1504., 2048., 2592., 3136.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {    5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   584.,   656.,   728.,   800.,   520.,   592.,   664.,   736.,   251.,   317.,   383.,   449.,   336.,   388.,   440.,   492.,   263.,   293.,   323.,   353.,   106.,   150.,   194.,   238.,   400.,   504.,   608.,   712.,   914.,  1094.,  1274.,  1454.,  1712.,  1984.,  2256.,  2528.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1968.,  2240.,  2512.,  2784.,  1174.,  1402.,  1630.,  1858.,   896.,  1064.,  1232.,  1400.,   686.,   778.,   870.,   962.,   591.,   705.,   819.,   933.,  1208.,  1460.,  1712.,  1964.,  2331.,  2745.,  3159.,  3573.,  4024.,  4624.,  5224.,  5824.,  3960.,  4560.,  5160.,  5760.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  2769.,  3255.,  3741.,  4227.,  1904.,  2252.,  2600.,  2948.,  1141.,  1327.,  1513.,  1699.,  1332.,  1548.,  1764.,  1980.,  2624.,  3088.,  3552.,  4016.,  4388.,  5132.,  5876.,  6620.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5036.,  5876.,  6716.,  7556.,  3488.,  4080.,  4672.,  5264.,  1980.,  2292.,  2604.,  2916.,  2100.,  2316.,  2532.,  2748.,  3648.,  4112.,  4576.,  5040.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  3488.,  4080.,  4672.,  5264.,  1724.,  2036.,  2348.,  2660.,  1332.,  1548.,  1764.,  1980.,  3648.,  4112.,  4576.,  5040.,  5412.,  6156.,  6900.,  7644.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  6060.,  6900.,  7740.,  8580.,  4512.,  5104.,  5696.,  6288.,  1980.,  2292.,  2604.,  2916.,  1076.,  1292.,  1508.,  1724.,  2624.,  3088.,  3552.,  4016.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  4512.,  5104.,  5696.,  6288.,  2748.,  3060.,  3372.,  3684.,  1303.,  1513.,  1723.,  1933.,  2504.,  2948.,  3392.,  3836.,  4083.,  4785.,  5487.,  6189.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  6616.,  7600.,  8584.,  9568.,  6808.,  7792.,  8776.,  9760.,  4521.,  5295.,  6069.,  6843.,  2944.,  3484.,  4024.,  4564.,  1597.,  1879.,  2161.,  2443.,  1914.,  2086.,  2258.,  2430.,  3056.,  3416.,  3776.,  4136.,  3874.,  4438.,  5002.,  5566.,  5424.,  6208.,  6992.,  7776.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5424.,  6208.,  6992.,  7776.,  4198.,  4810.,  5422.,  6034.,  1920.,  2344.,  2768.,  3192.,   670.,   890.,  1110.,  1330.,   893.,   995.,  1097.,  1199.,  2264.,  2476.,  2688.,  2900.,  2513.,  2843.,  3173.,  3503.,  3176.,  3632.,  4088.,  4544.,  3112.,  3568.,  4024.,  4480.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.,     5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   584.,   656.,   728.,   800.,   520.,   592.,   664.,   736.,   251.,   317.,   383.,   449.,   336.,   388.,   440.,   492.,   263.,   293.,   323.,   353.,   106.,   150.,   194.,   238.,   400.,   504.,   608.,   712.,   914.,  1094.,  1274.,  1454.,  1712.,  1984.,  2256.,  2528.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1968.,  2240.,  2512.,  2784.,  1174.,  1402.,  1630.,  1858.,   896.,  1064.,  1232.,  1400.,   686.,   778.,   870.,   962.,   591.,   705.,   819.,   933.,  1208.,  1460.,  1712.,  1964.,  2331.,  2745.,  3159.,  3573.,  4024.,  4624.,  5224.,  5824.,  3960.,  4560.,  5160.,  5760.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  2769.,  3255.,  3741.,  4227.,  1904.,  2252.,  2600.,  2948.,  1141.,  1327.,  1513.,  1699.,  1332.,  1548.,  1764.,  1980.,  2624.,  3088.,  3552.,  4016.,  4388.,  5132.,  5876.,  6620.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5036.,  5876.,  6716.,  7556.,  3488.,  4080.,  4672.,  5264.,  1980.,  2292.,  2604.,  2916.,  2100.,  2316.,  2532.,  2748.,  3648.,  4112.,  4576.,  5040.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  3488.,  4080.,  4672.,  5264.,  1724.,  2036.,  2348.,  2660.,  1332.,  1548.,  1764.,  1980.,  3648.,  4112.,  4576.,  5040.,  5412.,  6156.,  6900.,  7644.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  6060.,  6900.,  7740.,  8580.,  4512.,  5104.,  5696.,  6288.,  1980.,  2292.,  2604.,  2916.,  1076.,  1292.,  1508.,  1724.,  2624.,  3088.,  3552.,  4016.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  4512.,  5104.,  5696.,  6288.,  2748.,  3060.,  3372.,  3684.,  1303.,  1513.,  1723.,  1933.,  2504.,  2948.,  3392.,  3836.,  4083.,  4785.,  5487.,  6189.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  6616.,  7600.,  8584.,  9568.,  6808.,  7792.,  8776.,  9760.,  4521.,  5295.,  6069.,  6843.,  2944.,  3484.,  4024.,  4564.,  1597.,  1879.,  2161.,  2443.,  1914.,  2086.,  2258.,  2430.,  3056.,  3416.,  3776.,  4136.,  3874.,  4438.,  5002.,  5566.,  5424.,  6208.,  6992.,  7776.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5424.,  6208.,  6992.,  7776.,  4198.,  4810.,  5422.,  6034.,  1920.,  2344.,  2768.,  3192.,   670.,   890.,  1110.,  1330.,   893.,   995.,  1097.,  1199.,  2264.,  2476.,  2688.,  2900.,  2513.,  2843.,  3173.,  3503.,  3176.,  3632.,  4088.,  4544.,  3112.,  3568.,  4024.,  4480.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.,     5.,    11.,    17.,    23.,    40.,    60.,    80.,   100.,   137.,   179.,   221.,   263.,   328.,   400.,   472.,   544.,   520.,   592.,   664.,   736.,   584.,   656.,   728.,   800.,   520.,   592.,   664.,   736.,   251.,   317.,   383.,   449.,   336.,   388.,   440.,   492.,   263.,   293.,   323.,   353.,   106.,   150.,   194.,   238.,   400.,   504.,   608.,   712.,   914.,  1094.,  1274.,  1454.,  1712.,  1984.,  2256.,  2528.,  1712.,  1984.,  2256.,  2528.,  1968.,  2240.,  2512.,  2784.,  1968.,  2240.,  2512.,  2784.,  1174.,  1402.,  1630.,  1858.,   896.,  1064.,  1232.,  1400.,   686.,   778.,   870.,   962.,   591.,   705.,   819.,   933.,  1208.,  1460.,  1712.,  1964.,  2331.,  2745.,  3159.,  3573.,  4024.,  4624.,  5224.,  5824.,  3960.,  4560.,  5160.,  5760.,  4024.,  4624.,  5224.,  5824.,  4216.,  4816.,  5416.,  6016.,  2769.,  3255.,  3741.,  4227.,  1904.,  2252.,  2600.,  2948.,  1141.,  1327.,  1513.,  1699.,  1332.,  1548.,  1764.,  1980.,  2624.,  3088.,  3552.,  4016.,  4388.,  5132.,  5876.,  6620.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5036.,  5876.,  6716.,  7556.,  3488.,  4080.,  4672.,  5264.,  1980.,  2292.,  2604.,  2916.,  2100.,  2316.,  2532.,  2748.,  3648.,  4112.,  4576.,  5040.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  3488.,  4080.,  4672.,  5264.,  1724.,  2036.,  2348.,  2660.,  1332.,  1548.,  1764.,  1980.,  3648.,  4112.,  4576.,  5040.,  5412.,  6156.,  6900.,  7644.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  6060.,  6900.,  7740.,  8580.,  4512.,  5104.,  5696.,  6288.,  1980.,  2292.,  2604.,  2916.,  1076.,  1292.,  1508.,  1724.,  2624.,  3088.,  3552.,  4016.,  5156.,  5900.,  6644.,  7388.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  7136.,  8192.,  9248., 10304.,  5804.,  6644.,  7484.,  8324.,  4512.,  5104.,  5696.,  6288.,  2748.,  3060.,  3372.,  3684.,  1303.,  1513.,  1723.,  1933.,  2504.,  2948.,  3392.,  3836.,  4083.,  4785.,  5487.,  6189.,  6616.,  7600.,  8584.,  9568.,  6552.,  7536.,  8520.,  9504.,  6616.,  7600.,  8584.,  9568.,  6808.,  7792.,  8776.,  9760.,  4521.,  5295.,  6069.,  6843.,  2944.,  3484.,  4024.,  4564.,  1597.,  1879.,  2161.,  2443.,  1914.,  2086.,  2258.,  2430.,  3056.,  3416.,  3776.,  4136.,  3874.,  4438.,  5002.,  5566.,  5424.,  6208.,  6992.,  7776.,  5168.,  5952.,  6736.,  7520.,  5168.,  5952.,  6736.,  7520.,  5424.,  6208.,  6992.,  7776.,  4198.,  4810.,  5422.,  6034.,  1920.,  2344.,  2768.,  3192.,   670.,   890.,  1110.,  1330.,   893.,   995.,  1097.,  1199.,  2264.,  2476.,  2688.,  2900.,  2513.,  2843.,  3173.,  3503.,  3176.,  3632.,  4088.,  4544.,  3112.,  3568.,  4024.,  4480.,  2920.,  3376.,  3832.,  4288.,  3112.,  3568.,  4024.,  4480.,  2691.,  3045.,  3399.,  3753.,  1696.,  1940.,  2184.,  2428.,    95.,   221.,   347.,   473.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.,  1800.,  4520.,  7240.,  9960.,  2110.,  5286.,  8462., 11638.,  2620.,  6572., 10524., 14476.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  2620.,  6572., 10524., 14476.,  2310.,  5806.,  9302., 12798.,  1800.,  4520.,  7240.,  9960.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  2970.,  7442., 11914., 16386.,  3700.,  9284., 14868., 20452.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  3700.,  9284., 14868., 20452.,  3250.,  8170., 13090., 18010.,  2520.,  6328., 10136., 13944.,  2520.,  6328., 10136., 13944.,  3050.,  7650., 12250., 16850.,  3860.,  9700., 15540., 21380.,  4310., 10814., 17318., 23822.,  4510., 11334., 18158., 24982.,  4230., 10606., 16982., 23358.,  4590., 11542., 18494., 25446.,  3860.,  9700., 15540., 21380.,  3330.,  8378., 13426., 18474.,  2520.,  6328., 10136., 13944.,  2160.,  5424.,  8688., 11952.,  2580.,  6468., 10356., 14244.,  3240.,  8136., 13032., 17928.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3660.,  9180., 14700., 20220.,  3900.,  9804., 15708., 21612.,  3240.,  8136., 13032., 17928.,  2820.,  7092., 11364., 15636.,  2160.,  5424.,  8688., 11952.,  1800.,  4520.,  7240.,  9960.,  2190.,  5494.,  8798., 12102.,  2780.,  6988., 11196., 15404.,  3090.,  7754., 12418., 17082.,  3210.,  8066., 12922., 17778.,  3010.,  7546., 12082., 16618.,  3290.,  8274., 13258., 18242.,  2780.,  6988., 11196., 15404.,  2390.,  6014.,  9638., 13262.,  1800.,  4520.,  7240.,  9960.,  1440.,  3616.,  5792.,  7968.,  1720.,  4312.,  6904.,  9496.,  2160.,  5424.,  8688., 11952.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2440.,  6120.,  9800., 13480.,  2600.,  6536., 10472., 14408.,  2160.,  5424.,  8688., 11952.,  1880.,  4728.,  7576., 10424.,  1440.,  3616.,  5792.,  7968.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {   30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.,    30.,    70.,   110.,   150.,   260.,   404.,   548.,   692.,   626.,   938.,  1250.,  1562.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1192.,  1736.,  2280.,  2824.,  1704.,  2248.,  2792.,  3336.,  1002.,  1506.,  2010.,  2514.,  1188.,  1588.,  1988.,  2388.,   150.,   382.,   614.,   846.,   380.,   716.,  1052.,  1388.,  2120.,  2920.,  3720.,  4520.,  3172.,  4564.,  5956.,  7348.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  4180.,  5956.,  7732.,  9508.,  3464.,  4776.,  6088.,  7400.,  1388.,  2108.,  2828.,  3548.,  1434.,  1810.,  2186.,  2562.,  2380.,  3324.,  4268.,  5212.,  4822.,  6526.,  8230.,  9934.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6776.,  9432., 12088., 14744.,  7288.,  9944., 12600., 15256.,  6206.,  8486., 10766., 13046.,  4652.,  6364.,  8076.,  9788.,  2562.,  3514.,  4466.,  5418.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   760.,  1432.,  2104.,  2776.,  4240.,  5840.,  7440.,  9040.,  6344.,  9128., 11912., 14696., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840.,  8360., 11912., 15464., 19016.,  6928.,  9552., 12176., 14800.,  2776.,  4216.,  5656.,  7096.,  2808.,  3480.,  4152.,  4824.,  4240.,  5840.,  7440.,  9040.,  8392., 11176., 13960., 16744., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 11168., 15392., 19616., 23840., 10408., 13960., 17512., 21064.,  6928.,  9552., 12176., 14800.,  4824.,  6264.,  7704.,  9144.,   570.,  1202.,  1834.,  2466.,  3724.,  5180.,  6636.,  8092.,  5302.,  7774., 10246., 12718.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  9464., 13144., 16824., 20504.,  9976., 13656., 17336., 21016.,  6686.,  9734., 12782., 15830.,  5996.,  8220., 10444., 12668.,  1698.,  2906.,  4114.,  5322.,  1404.,  1740.,  2076.,  2412.,  2120.,  2920.,  3720.,  4520.,  4196.,  5588.,  6980.,  8372.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5584.,  7696.,  9808., 11920.,  5204.,  6980.,  8756., 10532.,  3464.,  4776.,  6088.,  7400.,  2412.,  3132.,  3852.,  4572.,   190.,   486.,   782.,  1078.,  1604.,  2260.,  2916.,  3572.,  2130.,  3210.,  4290.,  5370.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  3880.,  5448.,  7016.,  8584.,  4392.,  5960.,  7528.,  9096.,  2506.,  3778.,  5050.,  6322.,  2532.,  3444.,  4356.,  5268.,   310.,   798.,  1286.,  1774.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding, max_input_val);
}