/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Pair>
using ForwardWindow7Stride1 = WindowStrideTest<Pair, 7, 1>;
TYPED_TEST_SUITE(ForwardWindow7Stride1, GTestTypeTriples);
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908., 3878., 4870., 5880.,  6330.,  5666.,  5028., 4420.,
      3044., 4285., 5564., 6876.,  7452.,  6805.,  6172., 5558.,
      4630., 6467., 8343., 10252., 10905., 9897.,  8906., 7938.,
      6418., 8096., 9799., 11520., 12201., 10510., 8854., 7240.,
      6146., 7888., 9631., 11368., 12049., 10454., 8918., 7448.,
      4626., 6165., 7701., 9228.,  9811.,  8687.,  7622., 6622.,
      4472., 6187., 7910., 9636.,  10170., 9191.,  8256., 7370.,
      4852., 6090., 7330., 8568.,  8974.,  7630.,  6300., 4988.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11520., 12201., 11368., 12049.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6632.,
      7044.,  8440.,  8970.,  10172., 10826., 11816., 12600., 12428., 13254.,
      10600., 11326., 8960.,  9580.,  7520.,  8028.,  4094.,  4432.,  5507.,
      5942.,  7123.,  7660.,  8676.,  9320.,  9197.,  9876.,  8153.,  8750.,
      7266.,  7776.,  6546.,  6964.,  3712.,  3944.,  4520.,  4820.,  5808.,
      6180.,  7056.,  7504.,  7456.,  7932.,  6296.,  6716.,  5232.,  5592.,
      4272.,  4568.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11652., 12352., 12421., 13170.,
                                         13996., 14864., 14765., 15682.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5812.,  6224.,
      6636.,  7048.,  7614.,  8144.,  8674.,  9204.,  9162.,  9816.,  10470.,
      11124., 11232., 12016., 12800., 13584., 11838., 12664., 13490., 14316.,
      10362., 11088., 11814., 12540., 9364.,  9984.,  10604., 11224., 7812.,
      8320.,  8828.,  9336.,  4362.,  4700.,  5038.,  5376.,  5971.,  6406.,
      6841.,  7276.,  7629.,  8166.,  8703.,  9240.,  9092.,  9736.,  10380.,
      11024., 9587.,  10266., 10945., 11624., 8157.,  8754.,  9351.,  9948.,
      7110.,  7620.,  8130.,  8640.,  6466.,  6884.,  7302.,  7720.,  2456.,
      2688.,  2920.,  3152.,  3460.,  3760.,  4060.,  4360.,  4844.,  5216.,
      5588.,  5960.,  6368.,  6816.,  7264.,  7712.,  6756.,  7232.,  7708.,
      8184.,  5708.,  6128.,  6548.,  6968.,  4920.,  5280.,  5640.,  6000.,
      4408.,  4704.,  5000.,  5296.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752.,
      7316.,  9657.,  12270., 15147., 17509., 16410., 14431., 12604.,
      8560.,  12296., 17336., 22640., 25604., 24992., 22500., 20192.,
      11796., 15397., 19294., 23463., 26637., 24034., 20591., 17356.,
      10324., 14421., 19774., 25335., 28509., 27202., 24095., 21260.,
      11136., 14300., 17664., 21212., 23744., 20552., 17576., 14864.,
      6148.,  8693.,  12422., 16303., 18457., 16914., 15595., 14540.,
      8160.,  10400., 12752., 15216., 16872., 14304., 11848., 9536.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23463., 26637., 25335., 28509.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8200.,
      8800.,  11694., 12504., 15212., 16256., 19810., 21112., 22402., 23872.,
      20284., 21616., 19006., 20176., 16520., 17504., 8308.,  8872.,  10839.,
      11594., 14342., 15308., 17841., 19038., 19961., 21298., 17198., 18404.,
      15159., 16214., 13924., 14808., 5424.,  5824.,  7620.,  8160.,  9800.,
      10496., 13052., 13920., 14716., 15696., 12424., 13312., 10628., 11408.,
      9392.,  10048.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21711., 23118., 24791., 26394.,
                                         25231., 26862., 28311., 30138.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 8920.,  9520.,
      10120., 10720., 12210., 13020., 13830., 14640., 15044., 16088., 17132.,
      18176., 19502., 20804., 22106., 23408., 21958., 23428., 24898., 26368.,
      19684., 21016., 22348., 23680., 18378., 19548., 20718., 21888., 14936.,
      15920., 16904., 17888., 8468.,  9032.,  9596.,  10160., 11227., 11982.,
      12737., 13492., 14534., 15500., 16466., 17432., 17333., 18530., 19727.,
      20924., 19385., 20722., 22059., 23396., 17350., 18556., 19762., 20968.,
      15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112., 6032.,
      6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488., 11184.,
      11880., 12576., 13332., 14200., 15068., 15936., 15012., 15992., 16972.,
      17952., 13368., 14256., 15144., 16032., 11996., 12776., 13556., 14336.,
      9872.,  10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704., 5064., 5968.,  7416.,  9048.,  8144.,  6696.,  4704.,
      5816., 6590., 7300.,  9002.,  11202., 10932., 8422.,  5688.,
      6800., 7772., 9000.,  10612., 13060., 12808., 10764., 6800.,
      7912., 8866., 10460., 12758., 15134., 14284., 12026., 8296.,
      7912., 8866., 10460., 12758., 15134., 14284., 12026., 8296.,
      6800., 7340., 9128.,  11172., 12980., 11496., 10300., 7312.,
      5816., 6158., 7428.,  9562.,  11122., 9620.,  7958.,  6200.,
      4704., 5064., 5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12758., 15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,
      7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976., 12996., 14568.,
      11688., 13104., 9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,
      6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,  11112.,
      7650.,  8620.,  5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,
      6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,
      4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12498., 13996., 14866., 16700.,
                                         12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,
      7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,  10008.,
      11040., 9828.,  11112., 12396., 13680., 11844., 13416., 14988., 16560.,
      10632., 12048., 13464., 14880., 8748.,  9912.,  11076., 12240., 6192.,
      7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  5610.,  6340.,
      7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,  10330.,
      11400., 9870.,  11180., 12490., 13800., 8860.,  10040., 11220., 12400.,
      7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,  4128.,
      4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,  5984.,
      6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,  9992.,
      11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,  8160.,
      4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648., 4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180., 6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680., 7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722., 7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551., 7186., 5890.,
      5264., 7031., 8352.,  9701.,  9772.,  10003., 8876., 7809., 6808.,
      5838., 7024., 8001.,  9020.,  8466.,  8872.,  7673., 6516., 5406.,
      3808., 4578., 5360.,  6150.,  5852.,  6258.,  5320., 4390., 3472.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11959., 11808., 11689.,
                                         10152., 9873.,  9978.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      6552.,  6976.,  8341.,  8878.,  9328.,  9952.,  10301., 11018., 9953.,
      10648., 9893.,  10598., 8412.,  9016.,  7121.,  7618.,  6032.,  6416.,
      5190.,  5532.,  6000.,  6432.,  6771.,  7266.,  7557.,  8120.,  6990.,
      7524.,  7287.,  7824.,  6217.,  6674.,  5300.,  5672.,  4546.,  4828.,
      3040.,  3264.,  3530.,  3812.,  4712.,  5056.,  5874.,  6284.,  5922.,
      6328.,  6322.,  6756.,  5424.,  5808.,  4610.,  4940.,  3888.,  4160.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12799., 13582., 12960., 13760.,
                                         13185., 14002., 12456., 13264.,
                                         12393., 13186., 13066., 13876.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6024.,  6448.,  6872.,  7296.,  7505.,  8042.,  8579.,  9116.,  8208.,
      8832.,  9456.,  10080., 9677.,  10394., 11111., 11828., 9451.,  10146.,
      10841., 11536., 9769.,  10474., 11179., 11884., 8540.,  9144.,  9748.,
      10352., 7793.,  8290.,  8787.,  9284.,  6240.,  6624.,  7008.,  7392.,
      5046.,  5388.,  5730.,  6072.,  6128.,  6560.,  6992.,  7424.,  6647.,
      7142.,  7637.,  8132.,  7255.,  7818.,  8381.,  8944.,  6662.,  7196.,
      7730.,  8264.,  6741.,  7278.,  7815.,  8352.,  5641.,  6098.,  6555.,
      7012.,  4916.,  5288.,  5660.,  6032.,  4586.,  4868.,  5150.,  5432.,
      2656.,  2880.,  3104.,  3328.,  3898.,  4180.,  4462.,  4744.,  4728.,
      5072.,  5416.,  5760.,  5898.,  6308.,  6718.,  7128.,  5614.,  6020.,
      6426.,  6832.,  6002.,  6436.,  6870.,  7304.,  4896.,  5280.,  5664.,
      6048.,  4026.,  4356.,  4686.,  5016.,  3408.,  3680.,  3952.,  4224.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848.,
      13137., 13954., 14771., 15588., 11432., 12240., 13048., 13856.,
      11577., 12370., 13163., 13956., 12138., 12948., 13758., 14568.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      12696., 15262., 16820., 18730., 18286., 18578., 15780., 13942., 12376.,
      10604., 12259., 14930., 17937., 17755., 17413., 13626., 11935., 10492.,
      7824.,  8260.,  9656.,  11244., 10916., 11452., 9208.,  8020.,  6928.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26873., 26303., 26117.,
                                         26351., 25045., 25499.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      10632., 11408., 13846., 14812., 16268., 17384., 20490., 21780., 19370.,
      20636., 19658., 20964., 16604., 17704., 15814., 16748., 12808., 13552.,
      11060., 11768., 12479., 13350., 13958., 14948., 16313., 17442., 16001.,
      17078., 15305., 16394., 11694., 12596., 10439., 11198., 9956.,  10552.,
      6704.,  7200.,  8788.,  9384.,  9736.,  10448., 12556., 13400., 12428.,
      13256., 13964., 14840., 10056., 10800., 8468.,  9128.,  7344.,  7904.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25767., 27378., 25647., 27262.,
                                         26295., 27914., 25711., 27358.,
                                         24183., 25770., 24063., 25654.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      11048., 11824., 12600., 13376., 13542., 14508., 15474., 16440., 15548.,
      16664., 17780., 18896., 21130., 22420., 23710., 25000., 18402., 19668.,
      20934., 22200., 18426., 19732., 21038., 22344., 15884., 16984., 18084.,
      19184., 14406., 15340., 16274., 17208., 11336., 12080., 12824., 13568.,
      12164., 12872., 13580., 14288., 13111., 13982., 14853., 15724., 14254.,
      15244., 16234., 17224., 16137., 17266., 18395., 19524., 17613., 18690.,
      19767., 20844., 16209., 17298., 18387., 19476., 12406., 13308., 14210.,
      15112., 10743., 11502., 12261., 13020., 9140.,  9736.,  10332., 10928.,
      6960.,  7456.,  7952.,  8448.,  10292., 10888., 11484., 12080., 10344.,
      11056., 11768., 12480., 12108., 12952., 13796., 14640., 12380., 13208.,
      14036., 14864., 13868., 14744., 15620., 16496., 11336., 12080., 12824.,
      13568., 9716.,  10376., 11036., 11696., 8432.,  8992.,  9552.,  10112.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668.,
      26139., 27758., 29377., 30996., 23919., 25566., 27213., 28860.,
      21947., 23534., 25121., 26708., 22727., 24318., 25909., 27500.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      6672., 9508.,  10008., 12812., 10748., 12684., 10008., 9636.,  6672.,
      6456., 7542.,  8916.,  9138.,  10826., 10114., 8916.,  6566.,  6456.,
      4448., 6200.,  6672.,  8680.,  8040.,  8680.,  6672.,  6200.,  4448.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15502., 14006., 14398.,
                                         14006., 14398., 12902.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      6000.,  6816.,  9676.,  10728., 9128.,  10384., 13316., 14744., 10244.,
      11640., 13060., 14488., 9384.,  10640., 9676.,  10728., 6000.,  6816.,
      6280.,  6960.,  6242.,  7116.,  9548.,  10568., 8486.,  9668.,  10598.,
      11764., 8870.,  10084., 9676.,  10728., 6242.,  7116.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15250., 16924., 12242., 13932.,
                                         15122., 16764., 12242., 13932.,
                                         15122., 16764., 12114., 13772.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6618.,  7492.,  8366.,  9240.,  7740.,
      8760.,  9780.,  10800., 8974.,  10156., 11338., 12520., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7964.,  9016.,  10068.,
      11120., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.,
      12474., 14116., 15758., 17400., 12810., 14500., 16190., 17880.,
      12474., 14116., 15758., 17400., 12586., 14244., 15902., 17560.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436., 3090., 3786., 4520.,  4586.,  4684.,  5134.,  4750., 4380., 4028.,
      3500., 4797., 6144., 7536.,  7952.,  8400.,  8976.,  8227., 7490., 6770.,
      6170., 8469., 9785., 11136., 10829., 10554., 11207., 9687., 8194., 6734.,
      7094., 8092., 9137., 10222., 9719.,  9280.,  9577.,  8166., 7134., 6136.,
      6066., 7368., 8711., 10088., 10033., 10042., 10563., 9368., 8334., 7340.,
      5678., 7449., 9259., 11102., 10373., 9708.,  9331.,  7241., 6108., 5010.,
      5956., 6613., 7324., 8084.,  7754.,  7488.,  7286.,  5931., 5288., 4658.,
      4556., 5018., 5502., 6004.,  5834.,  5696.,  5590.,  4354., 3600., 2852.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10222., 9719.,  9280.,  9577.,
                                         10088., 10033., 10042., 10563.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  6024.,  6460.,  7378.,  7890.,  8996.,  9590.,  10610., 11292.,
      9686.,  10346., 8890.,  9528.,  8638.,  9286.,  6608.,  7154.,  5506.,
      5976.,  4544.,  4932.,  4814.,  5160.,  5053.,  5450.,  5907.,  6360.,
      6790.,  7304.,  6671.,  7156.,  6680.,  7136.,  6785.,  7244.,  5817.,
      6198.,  5286.,  5616.,  4850.,  5124.,  3840.,  4120.,  4332.,  4660.,
      5728.,  6108.,  7124.,  7560.,  7428.,  7860.,  7796.,  8224.,  7204.,
      7628.,  5192.,  5540.,  4180.,  4480.,  3248.,  3496.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634.,
      13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  5340.,  5776.,  6212.,  6648.,  6724.,  7236.,  7748.,
      8260.,  8278.,  8872.,  9466.,  10060., 10714., 11396., 12078., 12760.,
      10360., 11020., 11680., 12340., 9238.,  9876.,  10514., 11152., 9172.,
      9820.,  10468., 11116., 7422.,  7968.,  8514.,  9060.,  6574.,  7044.,
      7514.,  7984.,  5564.,  5952.,  6340.,  6728.,  3810.,  4156.,  4502.,
      4848.,  4461.,  4858.,  5255.,  5652.,  5665.,  6118.,  6571.,  7024.,
      7114.,  7628.,  8142.,  8656.,  7417.,  7902.,  8387.,  8872.,  6952.,
      7408.,  7864.,  8320.,  6647.,  7106.,  7565.,  8024.,  5109.,  5490.,
      5871.,  6252.,  4482.,  4812.,  5142.,  5472.,  4114.,  4388.,  4662.,
      4936.,  3688.,  3968.,  4248.,  4528.,  3760.,  4088.,  4416.,  4744.,
      4676.,  5056.,  5436.,  5816.,  6132.,  6568.,  7004.,  7440.,  6360.,
      6792.,  7224.,  7656.,  6716.,  7144.,  7572.,  8000.,  6176.,  6600.,
      7024.,  7448.,  4340.,  4688.,  5036.,  5384.,  3516.,  3816.,  4116.,
      4416.,  2920.,  3168.,  3416.,  3664.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700.,
      10036., 10744., 11452., 12160., 10341., 11066., 11791., 12516.,
      12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11120., 13984., 18152., 22584.,
      21980., 21024., 21316., 17344., 15236., 13408., 11668., 13329., 15518.,
      17971., 18781., 18087., 17745., 15394., 13971., 12780., 7744.,  9032.,
      12000., 15112., 16544., 17240., 16144., 11920., 9728.,  7712.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26443., 25361., 24311., 24381.,
                                         28487., 28045., 26483., 27193.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11016., 11840., 13694., 14688., 17580., 18768., 23474., 24880.,
      24018., 25464., 21874., 23296., 22162., 23624., 19068., 20320., 17998.,
      19080., 15752., 16640., 9204.,  9928.,  11303., 12162., 13830., 14844.,
      17601., 18790., 19209., 20410., 17873., 19022., 17177., 18338., 13870.,
      14852., 12631., 13478., 12132., 12824., 8496.,  9088.,  9572.,  10288.,
      12232., 13088., 15260., 16272., 16540., 17600., 16412., 17456., 14748.,
      15776., 10760., 11616., 8996.,  9728.,  7856.,  8448.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13304., 14128., 14952., 15776., 14490., 15484., 16478.,
      17472., 16564., 17752., 18940., 20128., 21094., 22500., 23906., 25312.,
      21630., 23076., 24522., 25968., 20950., 22372., 23794., 25216., 20974.,
      22436., 23898., 25360., 17844., 19096., 20348., 21600., 16706., 17788.,
      18870., 19952., 14520., 15408., 16296., 17184., 10868., 11592., 12316.,
      13040., 13587., 14446., 15305., 16164., 14486., 15500., 16514., 17528.,
      16349., 17538., 18727., 19916., 17505., 18706., 19907., 21108., 16933.,
      18082., 19231., 20380., 17577., 18738., 19899., 21060., 14246., 15228.,
      16210., 17192., 11711., 12558., 13405., 14252., 10580., 11272., 11964.,
      12656., 8912.,  9504.,  10096., 10688., 11356., 12072., 12788., 13504.,
      13144., 14000., 14856., 15712., 15044., 16056., 17068., 18080., 16020.,
      17080., 18140., 19200., 16292., 17336., 18380., 19424., 15540., 16568.,
      17596., 18624., 13144., 14000., 14856., 15712., 10572., 11304., 12036.,
      12768., 7888.,  8480.,  9072.,  9664.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356.,
      26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  7312.,  8220.,  9992.,  11924.,
      13252., 11284., 11844., 10632., 9804.,  6800.,  5816.,  7422.,  9060.,
      9674.,  9986.,  9978.,  10706., 8532.,  7286.,  6200.,  4704.,  5736.,
      7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13510., 15406., 14102., 13790.,
                                         14102., 13790., 13510., 15406.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  6768.,  7584.,  8460.,  9432.,  10152., 11376., 11076., 12456.,
      12612., 14088., 11844., 13224., 11844., 13320., 10152., 11376., 9228.,
      10296., 6768.,  7584.,  5512.,  6192.,  6562.,  7388.,  8524.,  9576.,
      10086., 11252., 9382.,  10596., 9190.,  10324., 10278., 11524., 8908.,
      9960.,  6882.,  7788.,  5768.,  6448.,  4512.,  5056.,  5640.,  6288.,
      6768.,  7584.,  7384.,  8304.,  8408.,  9392.,  7896.,  8816.,  7896.,
      8880.,  6768.,  7584.,  6152.,  6864.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,
      10320., 9288.,  10512., 11736., 12960., 10500., 11880., 13260., 14640.,
      11172., 12648., 14124., 15600., 10500., 11880., 13260., 14640., 11172.,
      12648., 14124., 15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,
      10212., 11280., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,
      7200.,  6282.,  7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120.,
      8862.,  10028., 11194., 12360., 9198.,  10412., 11626., 12840., 8638.,
      9772.,  10906., 12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,
      10068., 11120., 6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,
      7200.,  4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,
      6192.,  7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,
      8432.,  9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,
      7520.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908.,  3878.,  4870.,  5880., 6330., 5666., 5028., 4420.,  3044.,
      4285.,  5564.,  6876.,  7452., 6805., 6172., 5558., 4630.,  6467.,
      8343.,  10252., 10905., 9897., 8906., 7938., 6418., 8096.,  9799.,
      11520., 12201., 10510., 8854., 7240., 6146., 7888., 9631.,  11368.,
      12049., 10454., 8918.,  7448., 4786., 6400., 8023., 9648.,  10329.,
      9150.,  8022.,  6952.,  4562., 6317., 8085., 9860., 10443., 9423.,
      8446.,  7518.,  4904.,  6211., 7550., 8916., 9450., 8207.,  6984.,
      5786.,  3508.,  4410.,  5314., 6216., 6622., 5614., 4620.,  3644.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11520., 12201., 11368.,
                                         12049., 9648.,  10329.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6814.,
      7236.,  8735.,  9280.,  10603., 11278., 12404., 13216., 13173., 14034.,
      11493., 12252., 9730.,  10380., 8154.,  8688.,  4264.,  4612.,  5752.,
      6202.,  7452.,  8010.,  9096.,  9768.,  9708.,  10422., 8584.,  9214.,
      7616.,  8156.,  6816.,  7260.,  3774.,  4016.,  4651.,  4966.,  6035.,
      6428.,  7404.,  7880.,  7925.,  8436.,  6841.,  7294.,  5866.,  6256.,
      5010.,  5332.,  3072.,  3304.,  3720.,  4020.,  5104.,  5476.,  6448.,
      6896.,  6848.,  7324.,  5848.,  6268.,  4944.,  5304.,  4144.,  4440.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11652., 12352., 12421., 13170.,
                                         13996., 14864., 14765., 15682.,
                                         12404., 13216., 13173., 14034.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5974.,  6396.,
      6818.,  7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198., 10873.,
      11548., 11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.,
      11059., 11818., 12577., 13336., 9914.,  10564., 11214., 11864., 8222.,
      8756.,  9290.,  9824.,  4468.,  4816.,  5164.,  5512.,  6158.,  6608.,
      7058.,  7508.,  7914.,  8472.,  9030.,  9588.,  9488.,  10160., 10832.,
      11504., 10094., 10808., 11522., 12236., 8730.,  9360.,  9990.,  10620.,
      7780.,  8320.,  8860.,  9400.,  6980.,  7424.,  7868.,  8312.,  2538.,
      2780.,  3022.,  3264.,  3611.,  3926.,  4241.,  4556.,  5085.,  5478.,
      5871.,  6264.,  6716.,  7192.,  7668.,  8144.,  7211.,  7722.,  8233.,
      8744.,  6189.,  6642.,  7095.,  7548.,  5454.,  5844.,  6234.,  6624.,
      5026.,  5348.,  5670.,  5992.,  3224.,  3456.,  3688.,  3920.,  3652.,
      3952.,  4252.,  4552.,  4716.,  5088.,  5460.,  5832.,  6176.,  6624.,
      7072.,  7520.,  6564.,  7040.,  7516.,  7992.,  5324.,  5744.,  6164.,
      6584.,  4344.,  4704.,  5064.,  5424.,  3640.,  3936.,  4232.,  4528.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.,
      11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 6784.,  9628.,  13696., 17948., 20480., 18632.,
      17000., 15632., 8388.,  10885., 13606., 16543., 18697., 16434., 14331.,
      12428., 4576.,  5920.,  8400.,  10992., 12648., 10976., 9416.,  8000.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23463., 26637., 25335.,
                                         28509., 23463., 26637.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 8712.,  9312.,  11566.,
      12376., 15468., 16512., 19426., 20728., 22018., 23488., 19516., 20848.,
      17854., 19024., 16008., 16992., 5748.,  6184.,  8215.,  8810.,  10758.,
      11532., 14449., 15422., 16569., 17682., 14382., 15396., 12791., 13686.,
      11876., 12632., 6448.,  6848.,  7876.,  8416.,  10312., 11008., 12796.,
      13664., 14460., 15440., 11912., 12800., 9860.,  10640., 8368.,  9024.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21711., 23118., 24791., 26394.,
                                         25231., 26862., 28311., 30138.,
                                         21711., 23118., 24791., 26394.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 8920.,  9520.,  10120., 10720., 11954., 12764.,
      13574., 14384., 15556., 16600., 17644., 18688., 18734., 20036., 21338.,
      22640., 21190., 22660., 24130., 25600., 19172., 20504., 21836., 23168.,
      17098., 18268., 19438., 20608., 14936., 15920., 16904., 17888., 6548.,
      6984.,  7420.,  7856.,  9211.,  9806.,  10401., 10996., 11654., 12428.,
      13202., 13976., 14869., 15842., 16815., 17788., 16921., 18034., 19147.,
      20260., 14982., 15996., 17010., 18024., 13519., 14414., 15309., 16204.,
      11540., 12296., 13052., 13808., 6032.,  6432.,  6832.,  7232.,  7884.,
      8424.,  8964.,  9504.,  10488., 11184., 11880., 12576., 12820., 13688.,
      14556., 15424., 14500., 15480., 16460., 17440., 13368., 14256., 15144.,
      16032., 11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5064.,  5968.,  7416.,  9048.,  8144., 6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422., 5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800., 7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912., 8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866., 10460., 12758., 15134.,
      14284., 12026., 8296.,  6800.,  7340.,  9128., 11172., 12980., 11496.,
      10300., 7312.,  5816.,  6158.,  7428.,  9562., 11122., 9620.,  7958.,
      6200.,  4704.,  5064.,  5968.,  7416.,  9048., 8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12758., 15134., 12758.,
                                         15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,
      8184.,  8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104.,
      9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,
      7848.,  8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,
      5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,
      7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12498., 13996., 14866., 16700.,
                                         12498., 13996., 14866., 16700.,
                                         12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,  7608.,
      8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396.,
      13680., 11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880.,
      8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  5160.,
      5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,
      8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180., 12490.,
      13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,  10200.,
      5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4488.,
      5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,
      8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,
      9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648.,  4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180.,  6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680.,  7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722.,  7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551.,  7186., 5890.,
      5920., 7866., 9370.,  10905., 11074., 11403., 10068., 8794., 7588.,
      6200., 7474., 8536.,  9636.,  9131.,  9586.,  8256.,  6976., 5752.,
      4164., 5251., 6372.,  7522.,  7352.,  7886.,  7022.,  6181., 5368.,
      3392., 4104., 4824.,  5548.,  5474.,  5880.,  4984.,  4100., 3232.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11959., 11808., 11689., 10152., 9873.,
                                         9978.,  10905., 11074., 11403.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      7438.,  7904.,  9540.,  10132., 10847., 11540., 12145., 12946., 11954.,
      12740., 12051., 12854., 10709., 11400., 9016.,  9588.,  7530.,  7976.,
      5872.,  6256.,  6845.,  7332.,  7772.,  8336.,  8705.,  9352.,  8229.,
      8854.,  8617.,  9252.,  7296.,  7840.,  6145.,  6592.,  5176.,  5520.,
      3422.,  3688.,  4213.,  4550.,  5707.,  6120.,  7190.,  7684.,  7359.,
      7856.,  7880.,  8412.,  7013.,  7484.,  6261.,  6666.,  5634.,  5968.,
      3984.,  4224.,  4802.,  5104.,  6592.,  6960.,  7330.,  7768.,  6802.,
      7236.,  7202.,  7664.,  5944.,  6352.,  4778.,  5128.,  3712.,  4000.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12799., 13582., 12960., 13760., 13185., 14002., 12456., 13264., 12393.,
      13186., 13066., 13876., 12145., 12946., 11954., 12740., 12051., 12854.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6794.,  7260.,  7726.,  8192.,  8504.,  9096.,  9688.,  10280., 9417.,
      10110., 10803., 11496., 11073., 11874., 12675., 13476., 10962., 11748.,
      12534., 13320., 11395., 12198., 13001., 13804., 10263., 10954., 11645.,
      12336., 9108.,  9680.,  10252., 10824., 7190.,  7636.,  8082.,  8528.,
      5632.,  6016.,  6400.,  6784.,  6963.,  7450.,  7937.,  8424.,  7716.,
      8280.,  8844.,  9408.,  8539.,  9186.,  9833.,  10480., 8057.,  8682.,
      9307.,  9932.,  8247.,  8882.,  9517.,  10152., 7168.,  7712.,  8256.,
      8800.,  6531.,  6978.,  7425.,  7872.,  5784.,  6128.,  6472.,  6816.,
      3090.,  3356.,  3622.,  3888.,  4601.,  4938.,  5275.,  5612.,  5689.,
      6102.,  6515.,  6928.,  7102.,  7596.,  8090.,  8584.,  6925.,  7422.,
      7919.,  8416.,  7420.,  7952.,  8484.,  9016.,  6259.,  6730.,  7201.,
      7672.,  5397.,  5802.,  6207.,  6612.,  4854.,  5188.,  5522.,  5856.,
      3248.,  3488.,  3728.,  3968.,  3830.,  4132.,  4434.,  4736.,  5296.,
      5664.,  6032.,  6400.,  6350.,  6788.,  7226.,  7664.,  5938.,  6372.,
      6806.,  7240.,  6326.,  6788.,  7250.,  7712.,  5080.,  5488.,  5896.,
      6304.,  4086.,  4436.,  4786.,  5136.,  3360.,  3648.,  3936.,  4224.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848., 13137.,
      13954., 14771., 15588., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11073., 11874., 12675.,
      13476., 10962., 11748., 12534., 13320., 11395., 12198., 13001., 13804.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      16236., 20055., 22898., 26117., 26315., 27153., 22970., 19659., 16636.,
      13352., 15674., 18988., 22606., 22802., 21590., 16924., 14418., 12232.,
      9396.,  11033., 13678., 16555., 16725., 17407., 15398., 14565., 11908.,
      8816.,  10316., 13896., 15588., 15004., 14932., 12520., 10300., 8208.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26873., 26303., 26117., 26351., 25045.,
                                         25499., 26117., 26315., 27153.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      13804., 14744., 17969., 19150., 21274., 22660., 26295., 27914., 25663.,
      27286., 26311., 27938., 21810., 23188., 19625., 20790., 15388., 16312.,
      13512., 14384., 15958., 17044., 18412., 19672., 21674., 23132., 21834.,
      23268., 21226., 22636., 17916., 19096., 15174., 16164., 13256., 14032.,
      8564.,  9224.,  11751., 12562., 13766., 14748., 17601., 18774., 17929.,
      19114., 19281., 20478., 15374., 16396., 14031., 14922., 11364., 12104.,
      7600.,  8160.,  8596.,  9272.,  11592., 12400., 13452., 14408., 12812.,
      13752., 13196., 14120., 11272., 12048., 9940.,  10616., 9136.,  9696.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25767., 27378., 25647., 27262., 26295., 27914., 25711., 27358., 24183.,
      25770., 24063., 25654., 26295., 27914., 25663., 27286., 26311., 27938.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      13484., 14424., 15364., 16304., 16325., 17506., 18687., 19868., 19530.,
      20916., 22302., 23688., 26139., 27758., 29377., 30996., 23847., 25470.,
      27093., 28716., 24115., 25742., 27369., 28996., 20258., 21636., 23014.,
      24392., 17797., 18962., 20127., 21292., 14204., 15128., 16052., 16976.,
      14536., 15408., 16280., 17152., 16110., 17196., 18282., 19368., 17644.,
      18904., 20164., 21424., 20770., 22228., 23686., 25144., 22650., 24084.,
      25518., 26952., 20946., 22356., 23766., 25176., 17276., 18456., 19636.,
      20816., 14222., 15212., 16202., 17192., 11560., 12336., 13112., 13888.,
      9396.,  10056., 10716., 11376., 13635., 14446., 15257., 16068., 14390.,
      15372., 16354., 17336., 16621., 17794., 18967., 20140., 17265., 18450.,
      19635., 20820., 17909., 19106., 20303., 21500., 14910., 15932., 16954.,
      17976., 13315., 14206., 15097., 15988., 10532., 11272., 12012., 12752.,
      7920.,  8480.,  9040.,  9600.,  9956.,  10632., 11308., 11984., 13832.,
      14640., 15448., 16256., 14300., 15256., 16212., 17168., 13548., 14488.,
      15428., 16368., 12796., 13720., 14644., 15568., 11560., 12336., 13112.,
      13888., 10724., 11400., 12076., 12752., 9200.,  9760.,  10320., 10880.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668., 26139.,
      27758., 29377., 30996., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 26139., 27758., 29377.,
      30996., 23847., 25470., 27093., 28716., 24115., 25742., 27369., 28996.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      7440., 8724.,  10616., 10748., 12684., 12060., 11288., 7828.,  7440.,
      5560., 7294.,  8132.,  10826., 10114., 10266., 8004.,  7726.,  5560.,
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15502., 14006., 14398., 14006., 14398.,
                                         12902., 14398., 12902., 15502.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      7536.,  8352.,  7372.,  8392.,  11176., 12368., 10244., 11640., 13060.,
      14488., 10756., 12216., 11688., 12944., 7372.,  8392.,  7536.,  8352.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932., 15122.,
      16764., 12114., 13772., 15122., 16764., 12114., 13772., 15250., 16924.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7740.,  8760.,  9780.,  10800., 9064.,
      10256., 11448., 12640., 10612., 12008., 13404., 14800., 10836., 12264.,
      13692., 15120., 11060., 12520., 13980., 15440., 9512.,  10768., 12024.,
      13280., 7740.,  8760.,  9780.,  10800., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880., 12474.,
      14116., 15758., 17400., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 12474., 14116., 15758.,
      17400., 12586., 14244., 15902., 17560., 12698., 14372., 16046., 17720.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436.,  3090.,  3786.,  4520., 4586., 4684.,  5134.,  4750.,  4380.,
      4028.,  3500.,  4797.,  6144., 7536., 7952.,  8400.,  8976.,  8227.,
      7490.,  6770.,  6170.,  8469., 9785., 11136., 10829., 10554., 11207.,
      9687.,  8194.,  6734.,  7094., 8092., 9137.,  10222., 9719.,  9280.,
      9577.,  8166.,  7134.,  6136., 6066., 7368.,  8711.,  10088., 10033.,
      10042., 10563., 9368.,  8334., 7340., 6830.,  8884.,  10973., 13090.,
      12459., 11892., 11613., 9162., 7678., 6240.,  6590.,  7383.,  8219.,
      9092.,  8811.,  8594.,  8441., 6865., 6018.,  5202.,  5216.,  6243.,
      7306.,  8400.,  8358.,  8348., 8370., 7181.,  6498.,  5846.,  4620.,
      5302.,  5998.,  6704.,  6758., 6844., 6962.,  5698.,  4700.,  3716.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10222., 9719.,  9280.,  9577.,
                                         10088., 10033., 10042., 10563.,
                                         13090., 12459., 11892., 11613.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  7614.,  8124.,  9481.,  10088., 11603., 12314., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 10309., 10996., 8526.,
      9116.,  6906.,  7392.,  6008.,  6428.,  6498.,  6990.,  7580.,  8150.,
      8666.,  9320.,  8638.,  9270.,  8738.,  9348.,  8934.,  9554.,  7544.,
      8066.,  6626.,  7076.,  5840.,  6212.,  4542.,  4896.,  5567.,  5990.,
      7491.,  7988.,  9408.,  9984.,  9833.,  10412., 10322., 10904., 9851.,
      10436., 7825.,  8314.,  6848.,  7268.,  6002.,  6348.,  5472.,  5784.,
      5756.,  6124.,  6224.,  6652.,  6676.,  7168.,  6404.,  6892.,  6196.,
      6680.,  6052.,  6532.,  4632.,  5028.,  3780.,  4120.,  3024.,  3304.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634.,
      13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.,
      13710., 14532., 12943., 13750., 12304., 13096., 12209., 13018.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  6718.,  7228.,  7738.,  8248.,  8467.,  9074.,  9681.,
      10288., 10335., 11046., 11757., 12468., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 10171., 10858., 11545., 12232., 8654.,  9244.,
      9834.,  10424., 7054.,  7540.,  8026.,  8512.,  4876.,  5296.,  5716.,
      6136.,  5944.,  6436.,  6928.,  7420.,  7518.,  8088.,  8658.,  9228.,
      9286.,  9940.,  10594., 11248., 9700.,  10332., 10964., 11596., 9346.,
      9956.,  10566., 11176., 9152.,  9772.,  10392., 11012., 7590.,  8112.,
      8634.,  9156.,  7042.,  7492.,  7942.,  8392.,  5996.,  6368.,  6740.,
      7112.,  4474.,  4828.,  5182.,  5536.,  5015.,  5438.,  5861.,  6284.,
      6357.,  6854.,  7351.,  7848.,  8192.,  8768.,  9344.,  9920.,  8527.,
      9106.,  9685.,  10264., 8990.,  9572.,  10154., 10736., 8557.,  9142.,
      9727.,  10312., 6585.,  7074.,  7563.,  8052.,  5724.,  6144.,  6564.,
      6984.,  5194.,  5540.,  5886.,  6232.,  4360.,  4672.,  4984.,  5296.,
      4712.,  5080.,  5448.,  5816.,  5172.,  5600.,  6028.,  6456.,  6460.,
      6952.,  7444.,  7936.,  6560.,  7048.,  7536.,  8024.,  6788.,  7272.,
      7756.,  8240.,  7144.,  7624.,  8104.,  8584.,  5092.,  5488.,  5884.,
      6280.,  4212.,  4552.,  4892.,  5232.,  3592.,  3872.,  4152.,  4432.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700.,
      10036., 10744., 11452., 12160., 10341., 11066., 11791., 12516.,
      12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260.,
      13030., 13852., 14674., 15496., 12791., 13598., 14405., 15212.,
      11784., 12576., 13368., 14160., 11833., 12642., 13451., 14260.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11780., 15081., 19782., 24835.,
      24873., 24559., 25493., 22098., 19271., 16684., 12304., 14264., 16792.,
      19616., 20804., 20488., 20524., 17712., 15836., 14208., 7972.,  9517.,
      12854., 16439., 18369., 19563., 18965., 15002., 13135., 11516., 8064.,
      8440.,  9792.,  11352., 11632., 12040., 12576., 10160., 8816.,  7584.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26443., 25361., 24311., 24381.,
                                         28487., 28045., 26483., 27193.,
                                         24835., 24873., 24559., 25493.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11628., 12488., 14681., 15730., 19002., 20268., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 22834., 24260., 20953.,
      22190., 17948., 18968., 9608.,  10368., 12030., 12944., 14956., 16048.,
      19186., 20480., 21266., 22600., 20402., 21712., 20178., 21528., 17084.,
      18240., 16206., 17208., 14856., 15680., 8820.,  9448.,  10167., 10938.,
      13190., 14124., 16657., 17774., 18393., 19586., 18721., 19926., 17513.,
      18730., 13550., 14580., 11943., 12830., 11108., 11832., 7216.,  7680.,
      7268.,  7824.,  8264.,  8928.,  11036., 11824., 12060., 12896., 13340.,
      14224., 14876., 15808., 10888., 11680., 9252.,  9952.,  8112.,  8704.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.,
      25375., 26886., 26407., 27986., 24751., 26334., 25527., 27178.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13820., 14680., 15540., 16400., 15257., 16306., 17355.,
      18404., 17666., 18932., 20198., 21464., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 20978., 22404., 23830., 25256., 19101., 20338.,
      21575., 22812., 16412., 17432., 18452., 19472., 11320., 12080., 12840.,
      13600., 14314., 15228., 16142., 17056., 15508., 16600., 17692., 18784.,
      17750., 19044., 20338., 21632., 19310., 20644., 21978., 23312., 19142.,
      20452., 21762., 23072., 20190., 21540., 22890., 24240., 16788., 17944.,
      19100., 20256., 14482., 15484., 16486., 17488., 12536., 13360., 14184.,
      15008., 9428.,  10056., 10684., 11312., 12171., 12942., 13713., 14484.,
      14310., 15244., 16178., 17112., 16581., 17698., 18815., 19932., 17929.,
      19122., 20315., 21508., 18573., 19778., 20983., 22188., 18193., 19410.,
      20627., 21844., 15350., 16380., 17410., 18440., 12599., 13486., 14373.,
      15260., 10036., 10760., 11484., 12208., 6992.,  7456.,  7920.,  8384.,
      8188.,  8744.,  9300.,  9856.,  10264., 10928., 11592., 12256., 11940.,
      12728., 13516., 14304., 12404., 13240., 14076., 14912., 13380., 14264.,
      15148., 16032., 14868., 15800., 16732., 17664., 12184., 12976., 13768.,
      14560., 10348., 11048., 11748., 12448., 8912.,  9504.,  10096., 10688.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356.,
      26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412.,
      22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  6800.,  8604.,  10760.,
      11284., 11844., 11924., 13252., 9864.,  8652.,  7312.,  5816.,  6830.,
      8516.,  9978.,  10706., 9674.,  9986.,  8756.,  7462.,  5688.,  4704.,
      5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13510., 15406., 14102., 13790.,
                                         14102., 13790., 13510., 15406.,
                                         13510., 15406., 14102., 13790.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  6768.,  7584.,  7692.,  8664.,  10152., 11376.,
      11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088., 10152.,
      11376., 8460.,  9528.,  6768.,  7584.,  5512.,  6192.,  6946.,  7740.,
      8012.,  9000.,  9190.,  10324., 10278., 11524., 10086., 11252., 9382.,
      10596., 8396.,  9384.,  7266.,  8140.,  5768.,  6448.,  4512.,  5056.,
      5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,  8880.,  7384.,
      8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.,
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736., 12960.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 10500.,
      11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,  10512.,
      11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  6058.,  6852.,  7646.,  8440.,
      7516.,  8504.,  9492.,  10480., 8638.,  9772.,  10906., 12040., 9422.,
      10668., 11914., 13160., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 7516.,  8504.,  9492.,  10480., 6618.,  7492.,  8366.,
      9240.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,
      8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908.,  3878.,  4870.,  5880., 6330., 5666., 5028.,  4420.,  3044.,
      4285.,  5564.,  6876.,  7452., 6805., 6172., 5558.,  4630.,  6467.,
      8343.,  10252., 10905., 9897., 8906., 7938., 6418.,  8096.,  9799.,
      11520., 12201., 10510., 8854., 7240., 6146., 7888.,  9631.,  11368.,
      12049., 10454., 8918.,  7448., 4786., 6400., 8023.,  9648.,  10329.,
      9150.,  8022.,  6952.,  5218., 7152., 9103., 11064., 11745., 10534.,
      9366.,  8248.,  5266.,  6661., 8085., 9532., 10115., 8751.,  7414.,
      6110.,  3864.,  5083.,  6326., 7588., 8122., 7191.,  6288.,  5418.,
      3060.,  3850.,  4642.,  5432., 5838., 4942., 4060.,  3196.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11520., 12201., 11368., 12049.,
                                         9648.,  10329., 11064., 11745.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6814.,
      7236.,  8735.,  9280.,  10603., 11278., 12404., 13216., 13173., 14034.,
      11493., 12252., 9730.,  10380., 8154.,  8688.,  5150.,  5540.,  6951.,
      7456.,  8971.,  9598.,  10940., 11696., 11709., 12514., 10725., 11436.,
      9386.,  9996.,  8218.,  8720.,  4456.,  4740.,  5496.,  5866.,  7036.,
      7498.,  8552.,  9112.,  9164.,  9766.,  7848.,  8382.,  6656.,  7116.,
      5600.,  5980.,  3454.,  3728.,  4403.,  4758.,  6099.,  6540.,  7764.,
      8296.,  8285.,  8852.,  7321.,  7822.,  6482.,  6912.,  5778.,  6132.,
      4224.,  4456.,  5160.,  5460.,  6064.,  6436.,  6928.,  7376.,  7328.,
      7804.,  6040.,  6460.,  4848.,  5208.,  3760.,  4056.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      12404., 13216., 13173., 14034., 10940., 11696., 11709., 12514.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5974.,  6396.,
      6818.,  7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198., 10873.,
      11548., 11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.,
      11059., 11818., 12577., 13336., 9914.,  10564., 11214., 11864., 8222.,
      8756.,  9290.,  9824.,  5238.,  5628.,  6018.,  6408.,  7157.,  7662.,
      8167.,  8672.,  9123.,  9750.,  10377., 11004., 10884., 11640., 12396.,
      13152., 11605., 12410., 13215., 14020., 10339., 11050., 11761., 12472.,
      9010.,  9620.,  10230., 10840., 7870.,  8372.,  8874.,  9376.,  3124.,
      3408.,  3692.,  3976.,  4446.,  4816.,  5186.,  5556.,  6154.,  6616.,
      7078.,  7540.,  8000.,  8560.,  9120.,  9680.,  8606.,  9208.,  9810.,
      10412., 7610.,  8144.,  8678.,  9212.,  6964.,  7424.,  7884.,  8344.,
      6148.,  6528.,  6908.,  7288.,  3658.,  3932.,  4206.,  4480.,  4355.,
      4710.,  5065.,  5420.,  5677.,  6118.,  6559.,  7000.,  7380.,  7912.,
      8444.,  8976.,  7875.,  8442.,  9009.,  9576.,  6589.,  7090.,  7591.,
      8092.,  5622.,  6052.,  6482.,  6912.,  4994.,  5348.,  5702.,  6056.,
      3480.,  3712.,  3944.,  4176.,  4228.,  4528.,  4828.,  5128.,  4844.,
      5216.,  5588.,  5960.,  6112.,  6560.,  7008.,  7456.,  6500.,  6976.,
      7452.,  7928.,  5196.,  5616.,  6036.,  6456.,  4152.,  4512.,  4872.,
      5232.,  3384.,  3680.,  3976.,  4272.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.,
      11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.,
      10884., 11640., 12396., 13152., 11605., 12410., 13215., 14020.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 10324., 14421., 19774., 25335., 28509., 27202.,
      24095., 21260., 11136., 14300., 17664., 21212., 23744., 20552., 17576.,
      14864., 6148.,  8693.,  12422., 16303., 18457., 16914., 15595., 14540.,
      8160.,  10400., 12752., 15216., 16872., 14304., 11848., 9536.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23463., 26637., 25335., 28509.,
                                         23463., 26637., 25335., 28509.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 11884., 12648., 15689.,
      16714., 20474., 21788., 25231., 26862., 28311., 30138., 26162., 27812.,
      22969., 24414., 19740., 20952., 8200.,  8800.,  11694., 12504., 15212.,
      16256., 19810., 21112., 22402., 23872., 20284., 21616., 19006., 20176.,
      16520., 17504., 8308.,  8872.,  10839., 11594., 14342., 15308., 17841.,
      19038., 19961., 21298., 17198., 18404., 15159., 16214., 13924., 14808.,
      5424.,  5824.,  7620.,  8160.,  9800.,  10496., 13052., 13920., 14716.,
      15696., 12424., 13312., 10628., 11408., 9392.,  10048.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762.,
      16787., 17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005.,
      28636., 26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800.,
      21389., 22834., 24279., 25724., 18268., 19480., 20692., 21904., 8920.,
      9520.,  10120., 10720., 12210., 13020., 13830., 14640., 15044., 16088.,
      17132., 18176., 19502., 20804., 22106., 23408., 21958., 23428., 24898.,
      26368., 19684., 21016., 22348., 23680., 18378., 19548., 20718., 21888.,
      14936., 15920., 16904., 17888., 8468.,  9032.,  9596.,  10160., 11227.,
      11982., 12737., 13492., 14534., 15500., 16466., 17432., 17333., 18530.,
      19727., 20924., 19385., 20722., 22059., 23396., 17350., 18556., 19762.,
      20968., 15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112.,
      6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488.,
      11184., 11880., 12576., 13332., 14200., 15068., 15936., 15012., 15992.,
      16972., 17952., 13368., 14256., 15144., 16032., 11996., 12776., 13556.,
      14336., 9872.,  10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422.,  5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800.,  7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134.,
      14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284.,
      12026., 8296.,  6800.,  7340.,  9128.,  11172., 12980., 11496., 10300.,
      7312.,  5816.,  6158.,  7428.,  9562.,  11122., 9620.,  7958.,  6200.,
      4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12758., 15134., 12758., 15134.,
                                         12758., 15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,
      9636.,  9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480.,
      10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,  8184.,  8616.,
      9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,  10776.,
      6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,
      10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,
      9898.,  10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360.,
      10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 6192.,
      7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,
      10008., 11040., 9828.,  11112., 12396., 13680., 11844., 13416., 14988.,
      16560., 10632., 12048., 13464., 14880., 8748.,  9912.,  11076., 12240.,
      6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  5610.,
      6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,
      10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040., 11220.,
      12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648.,  4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180.,  6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680.,  7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722.,  7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551.,  7186., 5890.,
      5920., 7866., 9370.,  10905., 11074., 11403., 10068., 8794., 7588.,
      7414., 8984., 10337., 11722., 11315., 11868., 10177., 8546., 6982.,
      4832., 6061., 7312.,  8579.,  8458.,  9041.,  7956.,  6911., 5912.,
      4090., 5398., 6727.,  8072.,  8126.,  8660.,  7811.,  6998., 6226.,
      3872., 4750., 5632.,  6514.,  6664.,  7070.,  5992.,  4930., 3888.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11959., 11808., 11689., 10152.,
                                         9873.,  9978.,  10905., 11074.,
                                         11403., 11722., 11315., 11868.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      7438.,  7904.,  9540.,  10132., 10847., 11540., 12145., 12946., 11954.,
      12740., 12051., 12854., 10709., 11400., 9016.,  9588.,  7530.,  7976.,
      7550.,  8012.,  9061.,  9648.,  10515., 11202., 11962., 12756., 11643.,
      12422., 12188., 12984., 10997., 11682., 9165.,  9732.,  7538.,  7980.,
      4680.,  5024.,  5733.,  6170.,  7464.,  8000.,  9157.,  9798.,  9417.,
      10068., 10029., 10722., 8740.,  9352.,  7601.,  8126.,  6624.,  7056.,
      4726.,  5044.,  6106.,  6508.,  8451.,  8942.,  9735.,  10320., 9328.,
      9916.,  9849.,  10472., 8577.,  9126.,  7446.,  7916.,  6466.,  6852.,
      3648.,  3904.,  4218.,  4540.,  5016.,  5408.,  5778.,  6244.,  5698.,
      6160.,  6098.,  6588.,  5056.,  5488.,  4114.,  4484.,  3280.,  3584.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12799., 13582., 12960., 13760., 13185., 14002., 12456., 13264.,
      12393., 13186., 13066., 13876., 12145., 12946., 11954., 12740.,
      12051., 12854., 11962., 12756., 11643., 12422., 12188., 12984.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6794.,  7260.,  7726.,  8192.,  8504.,  9096.,  9688.,  10280., 9417.,
      10110., 10803., 11496., 11073., 11874., 12675., 13476., 10962., 11748.,
      12534., 13320., 11395., 12198., 13001., 13804., 10263., 10954., 11645.,
      12336., 9108.,  9680.,  10252., 10824., 7190.,  7636.,  8082.,  8528.,
      7086.,  7548.,  8010.,  8472.,  8799.,  9386.,  9973.,  10560., 9879.,
      10566., 11253., 11940., 10970., 11764., 12558., 13352., 10603., 11382.,
      12161., 12940., 10908., 11704., 12500., 13296., 9917.,  10602., 11287.,
      11972., 8611.,  9178.,  9745.,  10312., 7274.,  7716.,  8158.,  8600.,
      4216.,  4560.,  4904.,  5248.,  6165.,  6602.,  7039.,  7476.,  7640.,
      8176.,  8712.,  9248.,  9385.,  10026., 10667., 11308., 9319.,  9970.,
      10621., 11272., 9925.,  10618., 11311., 12004., 8740.,  9352.,  9964.,
      10576., 7957.,  8482.,  9007.,  9532.,  6736.,  7168.,  7600.,  8032.,
      4078.,  4396.,  4714.,  5032.,  5154.,  5556.,  5958.,  6360.,  7067.,
      7558.,  8049.,  8540.,  8517.,  9102.,  9687.,  10272., 8212.,  8800.,
      9388.,  9976.,  8707.,  9330.,  9953.,  10576., 7325.,  7874.,  8423.,
      8972.,  6294.,  6764.,  7234.,  7704.,  5634.,  6020.,  6406.,  6792.,
      3328.,  3584.,  3840.,  4096.,  4146.,  4468.,  4790.,  5112.,  5096.,
      5488.,  5880.,  6272.,  6930.,  7396.,  7862.,  8328.,  6390.,  6852.,
      7314.,  7776.,  6778.,  7268.,  7758.,  8248.,  5520.,  5952.,  6384.,
      6816.,  4530.,  4900.,  5270.,  5640.,  3824.,  4128.,  4432.,  4736.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848.,
      13137., 13954., 14771., 15588., 11432., 12240., 13048., 13856.,
      11577., 12370., 13163., 13956., 12138., 12948., 13758., 14568.,
      11073., 11874., 12675., 13476., 10962., 11748., 12534., 13320.,
      11395., 12198., 13001., 13804., 10970., 11764., 12558., 13352.,
      10603., 11382., 12161., 12940., 10908., 11704., 12500., 13296.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      16236., 20055., 22898., 26117., 26315., 27153., 22970., 19659., 16636.,
      14372., 17233., 21174., 25499., 26337., 25767., 21678., 18453., 15508.,
      10296., 12278., 15300., 18578., 19126., 20186., 17716., 16430., 13336.,
      9212.,  11087., 15146., 17413., 17327., 17753., 15602., 13707., 12012.,
      5552.,  6708.,  9016.,  11452., 12116., 13164., 11448., 9860.,  8432.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26873., 26303., 26117., 26351.,
                                         25045., 25499., 26117., 26315.,
                                         27153., 25499., 26337., 25767.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      13804., 14744., 17969., 19150., 21274., 22660., 26295., 27914., 25663.,
      27286., 26311., 27938., 21810., 23188., 19625., 20790., 15388., 16312.,
      14444., 15368., 17337., 18498., 20282., 21644., 24063., 25654., 24711.,
      26306., 24591., 26190., 21682., 23036., 18129., 19274., 15452., 16360.,
      9224.,  9936.,  12822., 13708., 15308., 16392., 19658., 20964., 20458.,
      21804., 22282., 23668., 18588., 19784., 17606., 18652., 14088., 14960.,
      8116.,  8728.,  9487.,  10238., 12934., 13844., 15305., 16394., 15121.,
      16222., 15961., 17074., 14062., 15012., 12887., 13718., 12388., 13080.,
      6320.,  6752.,  7508.,  8072.,  9736.,  10448., 13964., 14840., 13708.,
      14632., 14220., 15192., 11848., 12720., 10004., 10760., 8752.,  9376.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25767., 27378., 25647., 27262., 26295., 27914., 25711., 27358.,
      24183., 25770., 24063., 25654., 26295., 27914., 25663., 27286.,
      26311., 27938., 24063., 25654., 24711., 26306., 24591., 26190.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      13484., 14424., 15364., 16304., 16325., 17506., 18687., 19868., 19530.,
      20916., 22302., 23688., 26139., 27758., 29377., 30996., 23847., 25470.,
      27093., 28716., 24115., 25742., 27369., 28996., 20258., 21636., 23014.,
      24392., 17797., 18962., 20127., 21292., 14204., 15128., 16052., 16976.,
      15292., 16216., 17140., 18064., 17129., 18290., 19451., 20612., 19106.,
      20468., 21830., 23192., 22727., 24318., 25909., 27500., 25043., 26638.,
      28233., 29828., 23775., 25374., 26973., 28572., 20410., 21764., 23118.,
      24472., 16617., 17762., 18907., 20052., 13452., 14360., 15268., 16176.,
      10088., 10800., 11512., 12224., 14646., 15532., 16418., 17304., 15708.,
      16792., 17876., 18960., 18426., 19732., 21038., 22344., 19474., 20820.,
      22166., 23512., 20522., 21908., 23294., 24680., 17452., 18648., 19844.,
      21040., 16086., 17132., 18178., 19224., 12488., 13360., 14232., 15104.,
      8676.,  9288.,  9900.,  10512., 11087., 11838., 12589., 13340., 15358.,
      16268., 17178., 18088., 16209., 17298., 18387., 19476., 15829., 16930.,
      18031., 19132., 15449., 16562., 17675., 18788., 13766., 14716., 15666.,
      16616., 12751., 13582., 14413., 15244., 11348., 12040., 12732., 13424.,
      6768.,  7200.,  7632.,  8064.,  8020.,  8584.,  9148.,  9712.,  10088.,
      10800., 11512., 12224., 13868., 14744., 15620., 16496., 13820., 14744.,
      15668., 16592., 15308., 16280., 17252., 18224., 12488., 13360., 14232.,
      15104., 10900., 11656., 12412., 13168., 9648.,  10272., 10896., 11520.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668.,
      26139., 27758., 29377., 30996., 23919., 25566., 27213., 28860.,
      21947., 23534., 25121., 26708., 22727., 24318., 25909., 27500.,
      26139., 27758., 29377., 30996., 23847., 25470., 27093., 28716.,
      24115., 25742., 27369., 28996., 22727., 24318., 25909., 27500.,
      25043., 26638., 28233., 29828., 23775., 25374., 26973., 28572.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      6672., 8964.,  9592.,  12684., 12060., 12812., 9336.,  9092.,  6672.,
      5944., 6694.,  9556.,  10114., 10266., 9138.,  9140.,  6998.,  5944.,
      4448., 6200.,  6672.,  8680.,  7528.,  8680.,  6672.,  6200.,  4448.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15502., 14006., 14398., 14006.,
                                         14398., 12902., 14398., 12902.,
                                         15502., 12902., 15502., 14006.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      6000.,  6816.,  9164.,  10152., 8872.,  10064., 13060., 14488., 10756.,
      12216., 13316., 14744., 8616.,  9808.,  9164.,  10152., 6000.,  6816.,
      6280.,  6960.,  6114.,  6956.,  9292.,  10312., 8870.,  10084., 10982.,
      12180., 8486.,  9668.,  9164.,  10152., 6114.,  6956.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932.,
      15122., 16764., 12114., 13772., 15122., 16764., 12114., 13772.,
      15250., 16924., 12114., 13772., 15250., 16924., 12242., 13932.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6394.,  7236.,  8078.,  8920.,  7740.,
      8760.,  9780.,  10800., 9198.,  10412., 11626., 12840., 9086.,  10284.,
      11482., 12680., 8974.,  10156., 11338., 12520., 7516.,  8504.,  9492.,
      10480., 6394.,  7236.,  8078.,  8920.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.,
      12474., 14116., 15758., 17400., 12810., 14500., 16190., 17880.,
      12474., 14116., 15758., 17400., 12586., 14244., 15902., 17560.,
      12474., 14116., 15758., 17400., 12586., 14244., 15902., 17560.,
      12698., 14372., 16046., 17720., 12586., 14244., 15902., 17560.,
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436.,  3090.,  3786.,  4520.,  4586.,  4684.,  5134.,  4750.,  4380.,
      4028.,  3500.,  4797.,  6144.,  7536.,  7952.,  8400.,  8976.,  8227.,
      7490.,  6770.,  6170.,  8469.,  9785.,  11136., 10829., 10554., 11207.,
      9687.,  8194.,  6734.,  7094.,  8092.,  9137.,  10222., 9719.,  9280.,
      9577.,  8166.,  7134.,  6136.,  6066.,  7368.,  8711.,  10088., 10033.,
      10042., 10563., 9368.,  8334.,  7340.,  6830.,  8884.,  10973., 13090.,
      12459., 11892., 11613., 9162.,  7678.,  6240.,  8362.,  9568.,  10803.,
      11516., 10821., 10222., 9719.,  7740.,  6510.,  5332.,  6190.,  7413.,
      8651.,  9578.,  9297.,  9080.,  8927.,  7545.,  6696.,  5906.,  5660.,
      7217.,  8792.,  10284., 10402., 10584., 9806.,  7663.,  5820.,  4026.,
      5580.,  6706.,  7838.,  8076.,  7490.,  6968.,  6510.,  5122.,  3784.,
      2468.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10222., 9719.,  9280.,  9577.,  10088., 10033., 10042., 10563.,
      13090., 12459., 11892., 11613., 11516., 10821., 10222., 9719.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  7614.,  8124.,  9481.,  10088., 11603., 12314., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 10309., 10996., 8526.,
      9116.,  6906.,  7392.,  8478.,  9012.,  9731.,  10368., 11547., 12294.,
      13304., 14136., 12441., 13226., 11770., 12508., 11259., 11982., 9221.,
      9816.,  7568.,  8060.,  6090.,  6472.,  6376.,  6844.,  7762.,  8330.,
      10004., 10678., 11586., 12340., 11558., 12290., 11658., 12368., 10862.,
      11550., 8480.,  9042.,  7202.,  7664.,  6112.,  6468.,  6574.,  7000.,
      7681.,  8194.,  8947.,  9552.,  10010., 10680., 9763.,  10404., 9644.,
      10256., 8629.,  9212.,  6377.,  6846.,  4762.,  5144.,  3314.,  3604.,
      4800.,  5144.,  5324.,  5732.,  6336.,  6812.,  6580.,  7096.,  6084.,
      6564.,  5716.,  6160.,  5476.,  5884.,  4456.,  4772.,  3572.,  3824.,
      2800.,  2984.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634.,
      13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.,
      13710., 14532., 12943., 13750., 12304., 13096., 12209., 13018.,
      13304., 14136., 12441., 13226., 11770., 12508., 11259., 11982.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  6718.,  7228.,  7738.,  8248.,  8467.,  9074.,  9681.,
      10288., 10335., 11046., 11757., 12468., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 10171., 10858., 11545., 12232., 8654.,  9244.,
      9834.,  10424., 7054.,  7540.,  8026.,  8512.,  7014.,  7548.,  8082.,
      8616.,  8617.,  9254.,  9891.,  10528., 10635., 11382., 12129., 12876.,
      12720., 13552., 14384., 15216., 12321., 13106., 13891., 14676., 11282.,
      12020., 12758., 13496., 10531., 11254., 11977., 12700., 8535.,  9130.,
      9725.,  10320., 7540.,  8032.,  8524.,  9016.,  6166.,  6548.,  6930.,
      7312.,  6140.,  6608.,  7076.,  7544.,  7308.,  7876.,  8444.,  9012.,
      9190.,  9864.,  10538., 11212., 11314., 12068., 12822., 13576., 11728.,
      12460., 13192., 13924., 11374., 12084., 12794., 13504., 10252., 10940.,
      11628., 12316., 7694.,  8256.,  8818.,  9380.,  6390.,  6852.,  7314.,
      7776.,  5404.,  5760.,  6116.,  6472.,  5586.,  6012.,  6438.,  6864.,
      6657.,  7170.,  7683.,  8196.,  7753.,  8358.,  8963.,  9568.,  9302.,
      9972.,  10642., 11312., 9349.,  9990.,  10631., 11272., 9652.,  10264.,
      10876., 11488., 9187.,  9770.,  10353., 10936., 6397.,  6866.,  7335.,
      7804.,  4918.,  5300.,  5682.,  6064.,  3842.,  4132.,  4422.,  4712.,
      4520.,  4864.,  5208.,  5552.,  5024.,  5432.,  5840.,  6248.,  5924.,
      6400.,  6876.,  7352.,  6500.,  7016.,  7532.,  8048.,  6184.,  6664.,
      7144.,  7624.,  6124.,  6568.,  7012.,  7456.,  6320.,  6728.,  7136.,
      7544.,  4692.,  5008.,  5324.,  5640.,  3372.,  3624.,  3876.,  4128.,
      2344.,  2528.,  2712.,  2896.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700.,
      10036., 10744., 11452., 12160., 10341., 11066., 11791., 12516.,
      12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260.,
      13030., 13852., 14674., 15496., 12791., 13598., 14405., 15212.,
      11784., 12576., 13368., 14160., 11833., 12642., 13451., 14260.,
      12720., 13552., 14384., 15216., 12321., 13106., 13891., 14676.,
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11780., 15081., 19782., 24835.,
      24873., 24559., 25493., 22098., 19271., 16684., 16564., 19981., 23982.,
      28191., 28005., 26443., 25361., 21530., 18187., 15132., 11248., 13552.,
      17608., 20616., 21804., 22384., 21300., 16608., 14100., 11936., 9972.,
      11785., 14606., 17307., 17861., 18671., 17689., 13778., 11083., 8652.,
      10048., 11656., 13408., 13800., 13600., 13656., 13968., 11472., 9216.,
      7136.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193.,
      24835., 24873., 24559., 25493., 28191., 28005., 26443., 25361.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11628., 12488., 14681., 15730., 19002., 20268., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 22834., 24260., 20953.,
      22190., 17948., 18968., 13420., 14376., 16937., 18106., 20858., 22268.,
      25839., 27454., 26487., 28106., 24447., 26006., 23303., 24866., 19506.,
      20820., 17641., 18742., 15516., 16376., 11784., 12608., 14334., 15360.,
      18476., 19728., 22578., 24016., 24658., 26136., 23538., 24992., 21138.,
      22568., 16124., 17312., 13774., 14760., 11912., 12672., 9460.,  10120.,
      10823., 11634., 13062., 14044., 16353., 17462., 17449., 18570., 19057.,
      20190., 19129., 20274., 13742., 14692., 10999., 11798., 9060.,  9688.,
      9008.,  9600.,  10212., 10928., 11464., 12320., 12700., 13648., 12828.,
      13760., 13468., 14384., 14620., 15520., 11016., 11744., 8100.,  8704.,
      5808.,  6272.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.,
      25375., 26886., 26407., 27986., 24751., 26334., 25527., 27178.,
      25839., 27454., 26487., 28106., 24447., 26006., 23303., 24866.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13820., 14680., 15540., 16400., 15257., 16306., 17355.,
      18404., 17666., 18932., 20198., 21464., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 20978., 22404., 23830., 25256., 19101., 20338.,
      21575., 22812., 16412., 17432., 18452., 19472., 14236., 15192., 16148.,
      17104., 17601., 18770., 19939., 21108., 20210., 21620., 23030., 24440.,
      23439., 25054., 26669., 28284., 23707., 25326., 26945., 28564., 22759.,
      24318., 25877., 27436., 23539., 25102., 26665., 28228., 20322., 21636.,
      22950., 24264., 16197., 17298., 18399., 19500., 12988., 13848., 14708.,
      15568., 12280., 13104., 13928., 14752., 15738., 16764., 17790., 18816.,
      18292., 19544., 20796., 22048., 21318., 22756., 24194., 25632., 22878.,
      24356., 25834., 27312., 22198., 23652., 25106., 26560., 21006., 22436.,
      23866., 25296., 17652., 18840., 20028., 21216., 15010., 15996., 16982.,
      17968., 10552., 11312., 12072., 12832., 9908.,  10568., 11228., 11888.,
      12163., 12974., 13785., 14596., 15030., 16012., 16994., 17976., 15981.,
      17090., 18199., 19308., 16113., 17234., 18355., 19476., 17269., 18402.,
      19535., 20668., 17401., 18546., 19691., 20836., 13510., 14460., 15410.,
      16360., 11055., 11854., 12653., 13452., 9620.,  10248., 10876., 11504.,
      8912.,  9504.,  10096., 10688., 11100., 11816., 12532., 13248., 13144.,
      14000., 14856., 15712., 14084., 15032., 15980., 16928., 12820., 13752.,
      14684., 15616., 12580., 13496., 14412., 15328., 13364., 14264., 15164.,
      16064., 11224., 11952., 12680., 13408., 9420.,  10024., 10628., 11232.,
      6992.,  7456.,  7920.,  8384.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356.,
      26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412.,
      22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756.,
      23439., 25054., 26669., 28284., 23707., 25326., 26945., 28564.,
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,  12636.,
      14102., 13790., 13510., 15406., 12652., 10378., 8296.,  7312.,  8220.,
      9992.,  11924., 13252., 11284., 11844., 10632., 9804.,  6800.,  5816.,
      7422.,  9060.,  9674.,  9986.,  9978.,  10706., 8532.,  7286.,  6200.,
      4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,
      4704.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  7768.,  8720.,  9126.,  10276., 11908., 13368.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220., 12292.,
      13752., 9702.,  10964., 8024.,  8976.,  6768.,  7584.,  8460.,  9432.,
      10152., 11376., 11076., 12456., 12612., 14088., 11844., 13224., 11844.,
      13320., 10152., 11376., 9228.,  10296., 6768.,  7584.,  5512.,  6192.,
      6562.,  7388.,  8524.,  9576.,  10086., 11252., 9382.,  10596., 9190.,
      10324., 10278., 11524., 8908.,  9960.,  6882.,  7788.,  5768.,  6448.,
      4512.,  5056.,  5640.,  6288.,  6768.,  7584.,  7384.,  8304.,  8408.,
      9392.,  7896.,  8816.,  7896.,  8880.,  6768.,  7584.,  6152.,  6864.,
      4512.,  5056.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.,
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,
      10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980., 15440.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138.,
      13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060., 12520.,
      13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,  9128.,
      10080., 6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320.,
      9288.,  10512., 11736., 12960., 10500., 11880., 13260., 14640., 11172.,
      12648., 14124., 15600., 10500., 11880., 13260., 14640., 11172., 12648.,
      14124., 15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,  10212.,
      11280., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,
      6282.,  7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120., 8862.,
      10028., 11194., 12360., 9198.,  10412., 11626., 12840., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,  10068.,
      11120., 6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908.,  3878.,  4870.,  5880.,  6330.,  5666., 5028., 4420.,  3044.,
      4285.,  5564.,  6876.,  7452.,  6805.,  6172., 5558., 4630.,  6467.,
      8343.,  10252., 10905., 9897.,  8906.,  7938., 6418., 8096.,  9799.,
      11520., 12201., 10510., 8854.,  7240.,  6146., 7888., 9631.,  11368.,
      12049., 10454., 8918.,  7448.,  4626.,  6165., 7701., 9228.,  9811.,
      8687.,  7622.,  6622.,  4472.,  6187.,  7910., 9636., 10170., 9191.,
      8256.,  7370.,  4852.,  6090.,  7330.,  8568., 8974., 7630.,  6300.,
      4988.,  2908.,  3878.,  4870.,  5880.,  6330., 5666., 5028.,  4420.,
      3044.,  4285.,  5564.,  6876.,  7452.,  6805., 6172., 5558.,  4630.,
      6467.,  8343.,  10252., 10905., 9897.,  8906., 7938., 6418.,  8096.,
      9799.,  11520., 12201., 10510., 8854.,  7240., 6146., 7888.,  9631.,
      11368., 12049., 10454., 8918.,  7448.,  4626., 6165., 7701.,  9228.,
      9811.,  8687.,  7622.,  6622.,  4472.,  6187., 7910., 9636.,  10170.,
      9191.,  8256.,  7370.,  4852.,  6090.,  7330., 8568., 8974.,  7630.,
      6300.,  4988.,  2908.,  3878.,  4870.,  5880., 6330., 5666.,  5028.,
      4420.,  3044.,  4285.,  5564.,  6876.,  7452., 6805., 6172.,  5558.,
      4630.,  6467.,  8343.,  10252., 10905., 9897., 8906., 7938.,  6418.,
      8096.,  9799.,  11520., 12201., 10510., 8854., 7240., 6146.,  7888.,
      9631.,  11368., 12049., 10454., 8918.,  7448., 4626., 6165.,  7701.,
      9228.,  9811.,  8687.,  7622.,  6622.,  4472., 6187., 7910.,  9636.,
      10170., 9191.,  8256.,  7370.,  4852.,  6090., 7330., 8568.,  8974.,
      7630.,  6300.,  4988.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11520., 12201., 11368., 12049.,
                                         11520., 12201., 11368., 12049.,
                                         11520., 12201., 11368., 12049.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6632.,
      7044.,  8440.,  8970.,  10172., 10826., 11816., 12600., 12428., 13254.,
      10600., 11326., 8960.,  9580.,  7520.,  8028.,  4094.,  4432.,  5507.,
      5942.,  7123.,  7660.,  8676.,  9320.,  9197.,  9876.,  8153.,  8750.,
      7266.,  7776.,  6546.,  6964.,  3712.,  3944.,  4520.,  4820.,  5808.,
      6180.,  7056.,  7504.,  7456.,  7932.,  6296.,  6716.,  5232.,  5592.,
      4272.,  4568.,  4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,
      8528.,  8568.,  9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,
      3510.,  3752.,  4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,
      8280.,  7109.,  7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,
      5716.,  6086.,  7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,
      10162., 8616.,  9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,
      9643.,  10222., 11652., 12352., 12421., 13170., 11237., 11900., 9426.,
      9996.,  7770.,  8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190.,
      13996., 14864., 14765., 15682., 13541., 14348., 11482., 12172., 9626.,
      10192., 6632.,  7044.,  8440.,  8970.,  10172., 10826., 11816., 12600.,
      12428., 13254., 10600., 11326., 8960.,  9580.,  7520.,  8028.,  4094.,
      4432.,  5507.,  5942.,  7123.,  7660.,  8676.,  9320.,  9197.,  9876.,
      8153.,  8750.,  7266.,  7776.,  6546.,  6964.,  3712.,  3944.,  4520.,
      4820.,  5808.,  6180.,  7056.,  7504.,  7456.,  7932.,  6296.,  6716.,
      5232.,  5592.,  4272.,  4568.,  4080.,  4312.,  5440.,  5740.,  6776.,
      7148.,  8080.,  8528.,  8568.,  9044.,  8256.,  8676.,  7008.,  7368.,
      5856.,  6152.,  3510.,  3752.,  4735.,  5050.,  5967.,  6360.,  7196.,
      7672.,  7769.,  8280.,  7109.,  7562.,  6290.,  6680.,  5578.,  5900.,
      4080.,  4364.,  5716.,  6086.,  7616.,  8078.,  9512.,  10072., 10232.,
      10834., 9628.,  10162., 8616.,  9076.,  7720.,  8100.,  6046.,  6404.,
      7599.,  8064.,  9643.,  10222., 11652., 12352., 12421., 13170., 11237.,
      11900., 9426.,  9996.,  7770.,  8240.,  6942.,  7396.,  8855.,  9440.,
      11467., 12190., 13996., 14864., 14765., 15682., 13541., 14348., 11482.,
      12172., 9626.,  10192., 6632.,  7044.,  8440.,  8970.,  10172., 10826.,
      11816., 12600., 12428., 13254., 10600., 11326., 8960.,  9580.,  7520.,
      8028.,  4094.,  4432.,  5507.,  5942.,  7123.,  7660.,  8676.,  9320.,
      9197.,  9876.,  8153.,  8750.,  7266.,  7776.,  6546.,  6964.,  3712.,
      3944.,  4520.,  4820.,  5808.,  6180.,  7056.,  7504.,  7456.,  7932.,
      6296.,  6716.,  5232.,  5592.,  4272.,  4568.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5812.,  6224.,
      6636.,  7048.,  7614.,  8144.,  8674.,  9204.,  9162.,  9816.,  10470.,
      11124., 11232., 12016., 12800., 13584., 11838., 12664., 13490., 14316.,
      10362., 11088., 11814., 12540., 9364.,  9984.,  10604., 11224., 7812.,
      8320.,  8828.,  9336.,  4362.,  4700.,  5038.,  5376.,  5971.,  6406.,
      6841.,  7276.,  7629.,  8166.,  8703.,  9240.,  9092.,  9736.,  10380.,
      11024., 9587.,  10266., 10945., 11624., 8157.,  8754.,  9351.,  9948.,
      7110.,  7620.,  8130.,  8640.,  6466.,  6884.,  7302.,  7720.,  2456.,
      2688.,  2920.,  3152.,  3460.,  3760.,  4060.,  4360.,  4844.,  5216.,
      5588.,  5960.,  6368.,  6816.,  7264.,  7712.,  6756.,  7232.,  7708.,
      8184.,  5708.,  6128.,  6548.,  6968.,  4920.,  5280.,  5640.,  6000.,
      4408.,  4704.,  5000.,  5296.,  3576.,  3808.,  4040.,  4272.,  4820.,
      5120.,  5420.,  5720.,  5948.,  6320.,  6692.,  7064.,  6944.,  7392.,
      7840.,  8288.,  7380.,  7856.,  8332.,  8808.,  7388.,  7808.,  8228.,
      8648.,  6648.,  7008.,  7368.,  7728.,  5400.,  5696.,  5992.,  6288.,
      2938.,  3180.,  3422.,  3664.,  4419.,  4734.,  5049.,  5364.,  5813.,
      6206.,  6599.,  6992.,  7100.,  7576.,  8052.,  8528.,  7635.,  8146.,
      8657.,  9168.,  7397.,  7850.,  8303.,  8756.,  7198.,  7588.,  7978.,
      8368.,  6258.,  6580.,  6902.,  7224.,  3204.,  3488.,  3772.,  4056.,
      4822.,  5192.,  5562.,  5932.,  6578.,  7040.,  7502.,  7964.,  8224.,
      8784.,  9344.,  9904.,  8854.,  9456.,  10058., 10660., 8322.,  8856.,
      9390.,  9924.,  7620.,  8080.,  8540.,  9000.,  6996.,  7376.,  7756.,
      8136.,  4502.,  4860.,  5218.,  5576.,  6189.,  6654.,  7119.,  7584.,
      8211.,  8790.,  9369.,  9948.,  10316., 11016., 11716., 12416., 11037.,
      11786., 12535., 13284., 10131., 10794., 11457., 12120., 8874.,  9444.,
      10014., 10584., 7518.,  7988.,  8458.,  8928.,  6710.,  7164.,  7618.,
      8072.,  8325.,  8910.,  9495.,  10080., 10435., 11158., 11881., 12604.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260., 12291.,
      13098., 13905., 14712., 10562., 11252., 11942., 12632., 8574.,  9140.,
      9706.,  10272., 5812.,  6224.,  6636.,  7048.,  7614.,  8144.,  8674.,
      9204.,  9162.,  9816.,  10470., 11124., 11232., 12016., 12800., 13584.,
      11838., 12664., 13490., 14316., 10362., 11088., 11814., 12540., 9364.,
      9984.,  10604., 11224., 7812.,  8320.,  8828.,  9336.,  4362.,  4700.,
      5038.,  5376.,  5971.,  6406.,  6841.,  7276.,  7629.,  8166.,  8703.,
      9240.,  9092.,  9736.,  10380., 11024., 9587.,  10266., 10945., 11624.,
      8157.,  8754.,  9351.,  9948.,  7110.,  7620.,  8130.,  8640.,  6466.,
      6884.,  7302.,  7720.,  2456.,  2688.,  2920.,  3152.,  3460.,  3760.,
      4060.,  4360.,  4844.,  5216.,  5588.,  5960.,  6368.,  6816.,  7264.,
      7712.,  6756.,  7232.,  7708.,  8184.,  5708.,  6128.,  6548.,  6968.,
      4920.,  5280.,  5640.,  6000.,  4408.,  4704.,  5000.,  5296.,  3576.,
      3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,  6320.,
      6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,  8332.,
      8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,  7728.,
      5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,  4419.,
      4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,  7576.,
      8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,  8303.,
      8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,  7224.,
      3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,  6578.,
      7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,  9456.,
      10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,  8540.,
      9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,  5576.,
      6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,  10316.,
      11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131., 10794.,
      11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,  8458.,
      8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,  10080.,
      10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392., 13509.,
      14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562., 11252.,
      11942., 12632., 8574.,  9140.,  9706.,  10272., 5812.,  6224.,  6636.,
      7048.,  7614.,  8144.,  8674.,  9204.,  9162.,  9816.,  10470., 11124.,
      11232., 12016., 12800., 13584., 11838., 12664., 13490., 14316., 10362.,
      11088., 11814., 12540., 9364.,  9984.,  10604., 11224., 7812.,  8320.,
      8828.,  9336.,  4362.,  4700.,  5038.,  5376.,  5971.,  6406.,  6841.,
      7276.,  7629.,  8166.,  8703.,  9240.,  9092.,  9736.,  10380., 11024.,
      9587.,  10266., 10945., 11624., 8157.,  8754.,  9351.,  9948.,  7110.,
      7620.,  8130.,  8640.,  6466.,  6884.,  7302.,  7720.,  2456.,  2688.,
      2920.,  3152.,  3460.,  3760.,  4060.,  4360.,  4844.,  5216.,  5588.,
      5960.,  6368.,  6816.,  7264.,  7712.,  6756.,  7232.,  7708.,  8184.,
      5708.,  6128.,  6548.,  6968.,  4920.,  5280.,  5640.,  6000.,  4408.,
      4704.,  5000.,  5296.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11136., 14300., 17664., 21212., 23744.,
      20552., 17576., 14864., 6148.,  8693.,  12422., 16303., 18457., 16914.,
      15595., 14540., 8160.,  10400., 12752., 15216., 16872., 14304., 11848.,
      9536.,  6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752.,
      7316.,  9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,
      12296., 17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397.,
      19294., 23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774.,
      25335., 28509., 27202., 24095., 21260., 11136., 14300., 17664., 21212.,
      23744., 20552., 17576., 14864., 6148.,  8693.,  12422., 16303., 18457.,
      16914., 15595., 14540., 8160.,  10400., 12752., 15216., 16872., 14304.,
      11848., 9536.,  6528.,  9656.,  12960., 16408., 18416., 18448., 16544.,
      14752., 7316.,  9657.,  12270., 15147., 17509., 16410., 14431., 12604.,
      8560.,  12296., 17336., 22640., 25604., 24992., 22500., 20192., 11796.,
      15397., 19294., 23463., 26637., 24034., 20591., 17356., 10324., 14421.,
      19774., 25335., 28509., 27202., 24095., 21260., 11136., 14300., 17664.,
      21212., 23744., 20552., 17576., 14864., 6148.,  8693.,  12422., 16303.,
      18457., 16914., 15595., 14540., 8160.,  10400., 12752., 15216., 16872.,
      14304., 11848., 9536.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23463., 26637., 25335., 28509.,
                                         23463., 26637., 25335., 28509.,
                                         23463., 26637., 25335., 28509.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8200.,
      8800.,  11694., 12504., 15212., 16256., 19810., 21112., 22402., 23872.,
      20284., 21616., 19006., 20176., 16520., 17504., 8308.,  8872.,  10839.,
      11594., 14342., 15308., 17841., 19038., 19961., 21298., 17198., 18404.,
      15159., 16214., 13924., 14808., 5424.,  5824.,  7620.,  8160.,  9800.,
      10496., 13052., 13920., 14716., 15696., 12424., 13312., 10628., 11408.,
      9392.,  10048., 5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772.,
      14640., 15628., 16608., 15976., 16864., 14868., 15648., 13264., 13920.,
      5300.,  5736.,  8351.,  8946.,  11574., 12348., 14921., 15894., 17201.,
      18314., 17086., 18100., 16607., 17502., 14692., 15448., 8520.,  9120.,
      11654., 12464., 15868., 16912., 20170., 21472., 22858., 24328., 22060.,
      23392., 20054., 21224., 17832., 18816., 8812.,  9448.,  12681., 13546.,
      16634., 17756., 21711., 23118., 24791., 26394., 23090., 24548., 21241.,
      22526., 18204., 19288., 11884., 12648., 15689., 16714., 20474., 21788.,
      25231., 26862., 28311., 30138., 26162., 27812., 22969., 24414., 19740.,
      20952., 8200.,  8800.,  11694., 12504., 15212., 16256., 19810., 21112.,
      22402., 23872., 20284., 21616., 19006., 20176., 16520., 17504., 8308.,
      8872.,  10839., 11594., 14342., 15308., 17841., 19038., 19961., 21298.,
      17198., 18404., 15159., 16214., 13924., 14808., 5424.,  5824.,  7620.,
      8160.,  9800.,  10496., 13052., 13920., 14716., 15696., 12424., 13312.,
      10628., 11408., 9392.,  10048., 5808.,  6208.,  8404.,  8944.,  11080.,
      11776., 13772., 14640., 15628., 16608., 15976., 16864., 14868., 15648.,
      13264., 13920., 5300.,  5736.,  8351.,  8946.,  11574., 12348., 14921.,
      15894., 17201., 18314., 17086., 18100., 16607., 17502., 14692., 15448.,
      8520.,  9120.,  11654., 12464., 15868., 16912., 20170., 21472., 22858.,
      24328., 22060., 23392., 20054., 21224., 17832., 18816., 8812.,  9448.,
      12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394., 23090.,
      24548., 21241., 22526., 18204., 19288., 11884., 12648., 15689., 16714.,
      20474., 21788., 25231., 26862., 28311., 30138., 26162., 27812., 22969.,
      24414., 19740., 20952., 8200.,  8800.,  11694., 12504., 15212., 16256.,
      19810., 21112., 22402., 23872., 20284., 21616., 19006., 20176., 16520.,
      17504., 8308.,  8872.,  10839., 11594., 14342., 15308., 17841., 19038.,
      19961., 21298., 17198., 18404., 15159., 16214., 13924., 14808., 5424.,
      5824.,  7620.,  8160.,  9800.,  10496., 13052., 13920., 14716., 15696.,
      12424., 13312., 10628., 11408., 9392.,  10048.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 8920.,  9520.,
      10120., 10720., 12210., 13020., 13830., 14640., 15044., 16088., 17132.,
      18176., 19502., 20804., 22106., 23408., 21958., 23428., 24898., 26368.,
      19684., 21016., 22348., 23680., 18378., 19548., 20718., 21888., 14936.,
      15920., 16904., 17888., 8468.,  9032.,  9596.,  10160., 11227., 11982.,
      12737., 13492., 14534., 15500., 16466., 17432., 17333., 18530., 19727.,
      20924., 19385., 20722., 22059., 23396., 17350., 18556., 19762., 20968.,
      15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112., 6032.,
      6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488., 11184.,
      11880., 12576., 13332., 14200., 15068., 15936., 15012., 15992., 16972.,
      17952., 13368., 14256., 15144., 16032., 11996., 12776., 13556., 14336.,
      9872.,  10528., 11184., 11840., 6032.,  6432.,  6832.,  7232.,  7884.,
      8424.,  8964.,  9504.,  10488., 11184., 11880., 12576., 12820., 13688.,
      14556., 15424., 14500., 15480., 16460., 17440., 13368., 14256., 15144.,
      16032., 11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840.,
      6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948., 11590.,
      12364., 13138., 13912., 14853., 15826., 16799., 17772., 16969., 18082.,
      19195., 20308., 15654., 16668., 17682., 18696., 13759., 14654., 15549.,
      16444., 11284., 12040., 12796., 13552., 8920.,  9520.,  10120., 10720.,
      11394., 12204., 13014., 13824., 15492., 16536., 17580., 18624., 19230.,
      20532., 21834., 23136., 21750., 23220., 24690., 26160., 20868., 22200.,
      23532., 24864., 17850., 19020., 20190., 21360., 14680., 15664., 16648.,
      17632., 9436.,  10072., 10708., 11344., 12977., 13842., 14707., 15572.,
      16146., 17268., 18390., 19512., 21023., 22430., 23837., 25244., 23915.,
      25518., 27121., 28724., 21970., 23428., 24886., 26344., 20141., 21426.,
      22711., 23996., 16348., 17432., 18516., 19600., 11356., 12120., 12884.,
      13648., 14737., 15762., 16787., 17812., 19538., 20852., 22166., 23480.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116., 24850.,
      26500., 28150., 29800., 21389., 22834., 24279., 25724., 18268., 19480.,
      20692., 21904., 8920.,  9520.,  10120., 10720., 12210., 13020., 13830.,
      14640., 15044., 16088., 17132., 18176., 19502., 20804., 22106., 23408.,
      21958., 23428., 24898., 26368., 19684., 21016., 22348., 23680., 18378.,
      19548., 20718., 21888., 14936., 15920., 16904., 17888., 8468.,  9032.,
      9596.,  10160., 11227., 11982., 12737., 13492., 14534., 15500., 16466.,
      17432., 17333., 18530., 19727., 20924., 19385., 20722., 22059., 23396.,
      17350., 18556., 19762., 20968., 15023., 16078., 17133., 18188., 13460.,
      14344., 15228., 16112., 6032.,  6432.,  6832.,  7232.,  8396.,  8936.,
      9476.,  10016., 10488., 11184., 11880., 12576., 13332., 14200., 15068.,
      15936., 15012., 15992., 16972., 17952., 13368., 14256., 15144., 16032.,
      11996., 12776., 13556., 14336., 9872.,  10528., 11184., 11840., 6032.,
      6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488., 11184.,
      11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480., 16460.,
      17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044., 13824.,
      9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,  9163.,
      9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853., 15826.,
      16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668., 17682.,
      18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796., 13552.,
      8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824., 15492.,
      16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750., 23220.,
      24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020., 20190.,
      21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708., 11344.,
      12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512., 21023.,
      22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970., 23428.,
      24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432., 18516.,
      19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787., 17812.,
      19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636., 26635.,
      28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389., 22834.,
      24279., 25724., 18268., 19480., 20692., 21904., 8920.,  9520.,  10120.,
      10720., 12210., 13020., 13830., 14640., 15044., 16088., 17132., 18176.,
      19502., 20804., 22106., 23408., 21958., 23428., 24898., 26368., 19684.,
      21016., 22348., 23680., 18378., 19548., 20718., 21888., 14936., 15920.,
      16904., 17888., 8468.,  9032.,  9596.,  10160., 11227., 11982., 12737.,
      13492., 14534., 15500., 16466., 17432., 17333., 18530., 19727., 20924.,
      19385., 20722., 22059., 23396., 17350., 18556., 19762., 20968., 15023.,
      16078., 17133., 18188., 13460., 14344., 15228., 16112., 6032.,  6432.,
      6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488., 11184., 11880.,
      12576., 13332., 14200., 15068., 15936., 15012., 15992., 16972., 17952.,
      13368., 14256., 15144., 16032., 11996., 12776., 13556., 14336., 9872.,
      10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422.,  5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800.,  7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  6800.,  7340.,  9128.,  11172., 12980.,
      11496., 10300., 7312.,  5816.,  6158.,  7428.,  9562.,  11122., 9620.,
      7958.,  6200.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,
      4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,
      5816.,  6590.,  7300.,  9002.,  11202., 10932., 8422.,  5688.,  6800.,
      7772.,  9000.,  10612., 13060., 12808., 10764., 6800.,  7912.,  8866.,
      10460., 12758., 15134., 14284., 12026., 8296.,  7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  6800.,  7340.,  9128.,  11172.,
      12980., 11496., 10300., 7312.,  5816.,  6158.,  7428.,  9562.,  11122.,
      9620.,  7958.,  6200.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,
      6696.,  4704.,  4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,
      4704.,  5816.,  6590.,  7300.,  9002.,  11202., 10932., 8422.,  5688.,
      6800.,  7772.,  9000.,  10612., 13060., 12808., 10764., 6800.,  7912.,
      8866.,  10460., 12758., 15134., 14284., 12026., 8296.,  7912.,  8866.,
      10460., 12758., 15134., 14284., 12026., 8296.,  6800.,  7340.,  9128.,
      11172., 12980., 11496., 10300., 7312.,  5816.,  6158.,  7428.,  9562.,
      11122., 9620.,  7958.,  6200.,  4704.,  5064.,  5968.,  7416.,  9048.,
      8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12758., 15134., 12758., 15134.,
                                         12758., 15134., 12758., 15134.,
                                         12758., 15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,
      7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976., 12996., 14568.,
      11688., 13104., 9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,
      6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,  11112.,
      7650.,  8620.,  5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,
      6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,
      4512.,  5056.,  4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,
      7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,
      5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534.,
      11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,
      7308.,  8184.,  8616.,  9648.,  10692., 11976., 12996., 14568., 11688.,
      13104., 9612.,  10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,
      9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480., 10854.,
      12212., 8024.,  8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  6768.,  7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976.,
      12996., 14568., 11688., 13104., 9612.,  10776., 6768.,  7584.,  5512.,
      6192.,  6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844.,
      9932.,  11112., 7650.,  8620.,  5768.,  6448.,  4512.,  5056.,  4872.,
      5456.,  5744.,  6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,
      6408.,  7184.,  4512.,  5056.,  4512.,  5056.,  4872.,  5456.,  5744.,
      6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,
      4512.,  5056.,  5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,
      10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,
      6768.,  7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976., 12996.,
      14568., 11688., 13104., 9612.,  10776., 6768.,  7584.,  7768.,  8720.,
      8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700., 13828.,
      15480., 10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,  9636.,
      9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480., 10854.,
      12212., 8024.,  8976.,  6768.,  7584.,  7308.,  8184.,  8616.,  9648.,
      10692., 11976., 12996., 14568., 11688., 13104., 9612.,  10776., 6768.,
      7584.,  5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,  10004.,
      10534., 11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,  4512.,
      5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,  9712.,
      7792.,  8736.,  6408.,  7184.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,
      7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,  10008.,
      11040., 9828.,  11112., 12396., 13680., 11844., 13416., 14988., 16560.,
      10632., 12048., 13464., 14880., 8748.,  9912.,  11076., 12240., 6192.,
      7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  5610.,  6340.,
      7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,  10330.,
      11400., 9870.,  11180., 12490., 13800., 8860.,  10040., 11220., 12400.,
      7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,  4128.,
      4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,  5984.,
      6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,  9992.,
      11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,  8160.,
      4128.,  4672.,  5216.,  5760.,  4128.,  4672.,  5216.,  5760.,  4488.,
      5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,
      8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,
      9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,
      7480.,  8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180.,
      12490., 13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,
      10200., 5160.,  5840.,  6520.,  7200.,  6192.,  7008.,  7824.,  8640.,
      6732.,  7608.,  8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,
      11112., 12396., 13680., 11844., 13416., 14988., 16560., 10632., 12048.,
      13464., 14880., 8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,
      8640.,  7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,  10920.,
      9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960., 13818.,
      15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206., 11564.,
      12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,
      9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680.,
      11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,
      9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,
      6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,
      9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180., 12490., 13800.,
      8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,
      5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4488.,  5072.,
      5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,  8264.,
      9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,  9920.,
      5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.,  4128.,
      4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,  5984.,
      6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,  9992.,
      11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,  8160.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  5610.,
      6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,
      10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040., 11220.,
      12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,
      8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844., 13416.,
      14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,  11076.,
      12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080.,
      7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880., 11466.,
      12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404., 14056.,
      15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,
      10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,  10920.,
      9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960., 13818.,
      15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206., 11564.,
      12922., 14280., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,  10008., 11040.,
      9828.,  11112., 12396., 13680., 11844., 13416., 14988., 16560., 10632.,
      12048., 13464., 14880., 8748.,  9912.,  11076., 12240., 6192.,  7008.,
      7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  5610.,  6340.,  7070.,
      7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,  10330., 11400.,
      9870.,  11180., 12490., 13800., 8860.,  10040., 11220., 12400., 7290.,
      8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,  4128.,  4672.,
      5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,  5984.,  6672.,
      7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,  9992.,  11040.,
      7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,  8160.,  4128.,
      4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648., 4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180., 6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680., 7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722., 7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551., 7186., 5890.,
      5264., 7031., 8352.,  9701.,  9772.,  10003., 8876., 7809., 6808.,
      5838., 7024., 8001.,  9020.,  8466.,  8872.,  7673., 6516., 5406.,
      3808., 4578., 5360.,  6150.,  5852.,  6258.,  5320., 4390., 3472.,
      3136., 4364., 5608.,  6544.,  6706.,  6900.,  6280., 5696., 5152.,
      5032., 6965., 8918.,  10790., 11302., 11846., 9748., 7687., 5668.,
      7208., 9108., 11016., 12030., 11819., 11640., 9776., 7966., 6216.,
      6308., 7918., 9540.,  10495., 10152., 9873.,  8514., 7210., 5968.,
      5786., 7596., 9419.,  10800., 10905., 11074., 9807., 8594., 7442.,
      5904., 8079., 9248.,  10205., 9636.,  9131.,  7852., 6617., 5432.,
      4702., 5672., 6681.,  7724.,  7522.,  7352.,  6561., 5788., 5038.,
      3744., 4370., 5008.,  5654.,  5548.,  5474.,  4648., 3830., 3024.,
      3968., 5596., 7240.,  8896.,  9250.,  9636.,  8840., 7056., 5312.,
      6360., 8029., 9710.,  11398., 11078., 10790., 9148., 7551., 6004.,
      6216., 7644., 9096.,  10566., 10131., 9760.,  8208., 7046., 5928.,
      5684., 7358., 9052.,  10759., 10800., 10905., 9578., 8426., 7328.,
      6730., 9052., 11395., 12728., 12193., 11722., 9239., 7730., 6274.,
      5872., 6855., 7872.,  8917.,  8732.,  8579.,  6956., 6065., 5208.,
      4750., 5824., 6929.,  8060.,  8050.,  8072.,  6889., 6212., 5566.,
      4160., 4866., 5584.,  6310.,  6396.,  6514.,  5320., 4390., 3472.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11959., 11808., 11689., 10152., 9873.,  9978.,  10495., 10152., 9873.,
      10800., 10905., 11074., 10759., 10800., 10905., 12728., 12193., 11722.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      6552.,  6976.,  8341.,  8878.,  9328.,  9952.,  10301., 11018., 9953.,
      10648., 9893.,  10598., 8412.,  9016.,  7121.,  7618.,  6032.,  6416.,
      5190.,  5532.,  6000.,  6432.,  6771.,  7266.,  7557.,  8120.,  6990.,
      7524.,  7287.,  7824.,  6217.,  6674.,  5300.,  5672.,  4546.,  4828.,
      3040.,  3264.,  3530.,  3812.,  4712.,  5056.,  5874.,  6284.,  5922.,
      6328.,  6322.,  6756.,  5424.,  5808.,  4610.,  4940.,  3888.,  4160.,
      3872.,  4128.,  5198.,  5528.,  6488.,  6896.,  7126.,  7584.,  7070.,
      7524.,  7078.,  7528.,  6512.,  6896.,  5670.,  5984.,  4944.,  5184.,
      4534.,  4848.,  6261.,  6666.,  8215.,  8716.,  9970.,  10540., 10447.,
      11020., 10988., 11564., 9497.,  9992.,  7477.,  7886.,  5610.,  5928.,
      6936.,  7344.,  8731.,  9256.,  11016., 11664., 12499., 13244., 12547.,
      13302., 12659., 13424., 11500., 12160., 9559.,  10108., 7808.,  8240.,
      7310.,  7784.,  8682.,  9276.,  10839., 11560., 12647., 13470., 12456.,
      13264., 12393., 13186., 11061., 11748., 9686.,  10260., 7482.,  7936.,
      7486.,  7956.,  9419.,  10008., 11403., 12118., 12464., 13280., 12145.,
      12946., 11954., 12740., 10645., 11326., 9003.,  9572.,  7554.,  8004.,
      5560.,  5952.,  7413.,  7902.,  8592.,  9184.,  9309.,  9978.,  8705.,
      9352.,  8229.,  8854.,  6940.,  7480.,  5809.,  6258.,  4848.,  5200.,
      3750.,  4028.,  4408.,  4752.,  5747.,  6162.,  7085.,  7576.,  7190.,
      7684.,  7359.,  7856.,  6569.,  7010.,  5884.,  6264.,  5314.,  5628.,
      3904.,  4160.,  4618.,  4932.,  6280.,  6656.,  7922.,  8364.,  7330.,
      7768.,  6802.,  7236.,  5616.,  6000.,  4514.,  4844.,  3504.,  3776.,
      4000.,  4256.,  5614.,  5944.,  7192.,  7600.,  8726.,  9216.,  9054.,
      9540.,  9446.,  9928.,  9040.,  9456.,  7078.,  7424.,  5232.,  5504.,
      5622.,  5968.,  7069.,  7514.,  8983.,  9532.,  10842., 11500., 10679.,
      11340., 10580., 11244., 9753.,  10328., 8157.,  8638.,  6730.,  7112.,
      7480.,  7920.,  8603.,  9144.,  10504., 11152., 12371., 13132., 12003.,
      12742., 11763., 12480., 9964.,  10560., 8791.,  9292.,  7776.,  8176.,
      7598.,  8072.,  9362.,  9948.,  11159., 11864., 12911., 13742., 12464.,
      13280., 12145., 12946., 10645., 11316., 9054.,  9620.,  7642.,  8096.,
      6814.,  7284.,  9011.,  9592.,  11531., 12230., 12984., 13808., 12409.,
      13218., 11962., 12756., 10037., 10702., 8307.,  8868.,  6754.,  7204.,
      5272.,  5632.,  6037.,  6478.,  7440.,  7968.,  8829.,  9450.,  8961.,
      9592.,  9157.,  9798.,  7708.,  8248.,  6737.,  7202.,  5904.,  6288.,
      4550.,  4892.,  5664.,  6080.,  7699.,  8194.,  9717.,  10296., 10206.,
      10788., 9735.,  10320., 7689.,  8178.,  6692.,  7112.,  5826.,  6172.,
      4704.,  4992.,  5066.,  5412.,  5608.,  6016.,  6130.,  6604.,  5922.,
      6392.,  5778.,  6244.,  4400.,  4784.,  3586.,  3916.,  2864.,  3136.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12799., 13582., 12960., 13760., 13185., 14002., 12456., 13264., 12393.,
      13186., 13066., 13876., 12647., 13470., 12456., 13264., 12393., 13186.,
      12464., 13280., 12145., 12946., 11954., 12740., 12911., 13742., 12464.,
      13280., 12145., 12946., 12984., 13808., 12409., 13218., 11962., 12756.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6024.,  6448.,  6872.,  7296.,  7505.,  8042.,  8579.,  9116.,  8208.,
      8832.,  9456.,  10080., 9677.,  10394., 11111., 11828., 9451.,  10146.,
      10841., 11536., 9769.,  10474., 11179., 11884., 8540.,  9144.,  9748.,
      10352., 7793.,  8290.,  8787.,  9284.,  6240.,  6624.,  7008.,  7392.,
      5046.,  5388.,  5730.,  6072.,  6128.,  6560.,  6992.,  7424.,  6647.,
      7142.,  7637.,  8132.,  7255.,  7818.,  8381.,  8944.,  6662.,  7196.,
      7730.,  8264.,  6741.,  7278.,  7815.,  8352.,  5641.,  6098.,  6555.,
      7012.,  4916.,  5288.,  5660.,  6032.,  4586.,  4868.,  5150.,  5432.,
      2656.,  2880.,  3104.,  3328.,  3898.,  4180.,  4462.,  4744.,  4728.,
      5072.,  5416.,  5760.,  5898.,  6308.,  6718.,  7128.,  5614.,  6020.,
      6426.,  6832.,  6002.,  6436.,  6870.,  7304.,  4896.,  5280.,  5664.,
      6048.,  4026.,  4356.,  4686.,  5016.,  3408.,  3680.,  3952.,  4224.,
      3200.,  3456.,  3712.,  3968.,  4754.,  5084.,  5414.,  5744.,  6168.,
      6576.,  6984.,  7392.,  7266.,  7724.,  8182.,  8640.,  7670.,  8124.,
      8578.,  9032.,  7178.,  7628.,  8078.,  8528.,  6304.,  6688.,  7072.,
      7456.,  5362.,  5676.,  5990.,  6304.,  4624.,  4864.,  5104.,  5344.,
      3634.,  3948.,  4262.,  4576.,  5397.,  5802.,  6207.,  6612.,  7257.,
      7758.,  8259.,  8760.,  8650.,  9220.,  9790.,  10360., 9025.,  9598.,
      10171., 10744., 9528.,  10104., 10680., 11256., 8355.,  8850.,  9345.,
      9840.,  6897.,  7306.,  7715.,  8124.,  5430.,  5748.,  6066.,  6384.,
      5144.,  5552.,  5960.,  6368.,  7049.,  7574.,  8099.,  8624.,  9256.,
      9904.,  10552., 11200., 11069., 11814., 12559., 13304., 11411., 12166.,
      12921., 13676., 11881., 12646., 13411., 14176., 11332., 11992., 12652.,
      13312., 9289.,  9838.,  10387., 10936., 7056.,  7488.,  7920.,  8352.,
      6914.,  7388.,  7862.,  8336.,  8130.,  8724.,  9318.,  9912.,  9949.,
      10670., 11391., 12112., 11543., 12366., 13189., 14012., 11432., 12240.,
      13048., 13856., 11577., 12370., 13163., 13956., 10523., 11210., 11897.,
      12584., 9742.,  10316., 10890., 11464., 7470.,  7924.,  8378.,  8832.,
      7334.,  7804.,  8274.,  8744.,  8809.,  9398.,  9987.,  10576., 10155.,
      10870., 11585., 12300., 11440., 12256., 13072., 13888., 11073., 11874.,
      12675., 13476., 10962., 11748., 12534., 13320., 9793.,  10474., 11155.,
      11836., 8605.,  9174.,  9743.,  10312., 7682.,  8132.,  8582.,  9032.,
      5352.,  5744.,  6136.,  6528.,  7489.,  7978.,  8467.,  8956.,  8816.,
      9408.,  10000., 10592., 9277.,  9946.,  10615., 11284., 8539.,  9186.,
      9833.,  10480., 8057.,  8682.,  9307.,  9932.,  6940.,  7480.,  8020.,
      8560.,  6241.,  6690.,  7139.,  7588.,  5440.,  5792.,  6144.,  6496.,
      2998.,  3276.,  3554.,  3832.,  4312.,  4656.,  5000.,  5344.,  6215.,
      6630.,  7045.,  7460.,  7407.,  7898.,  8389.,  8880.,  7102.,  7596.,
      8090.,  8584.,  6925.,  7422.,  7919.,  8416.,  5849.,  6290.,  6731.,
      7172.,  5052.,  5432.,  5812.,  6192.,  4554.,  4868.,  5182.,  5496.,
      3328.,  3584.,  3840.,  4096.,  3738.,  4052.,  4366.,  4680.,  5016.,
      5392.,  5768.,  6144.,  6890.,  7332.,  7774.,  8216.,  6350.,  6788.,
      7226.,  7664.,  5938.,  6372.,  6806.,  7240.,  4768.,  5152.,  5536.,
      5920.,  3834.,  4164.,  4494.,  4824.,  3152.,  3424.,  3696.,  3968.,
      2944.,  3200.,  3456.,  3712.,  4562.,  4892.,  5222.,  5552.,  6040.,
      6448.,  6856.,  7264.,  7362.,  7852.,  8342.,  8832.,  7510.,  7996.,
      8482.,  8968.,  7786.,  8268.,  8750.,  9232.,  7744.,  8160.,  8576.,
      8992.,  6354.,  6700.,  7046.,  7392.,  4912.,  5184.,  5456.,  5728.,
      4242.,  4588.,  4934.,  5280.,  5949.,  6394.,  6839.,  7284.,  7977.,
      8526.,  9075.,  9624.,  9794.,  10452., 11110., 11768., 9913.,  10574.,
      11235., 11896., 10160., 10824., 11488., 12152., 9811.,  10386., 10961.,
      11536., 8953.,  9434.,  9915.,  10396., 6838.,  7220.,  7602.,  7984.,
      6712.,  7152.,  7592.,  8032.,  7545.,  8086.,  8627.,  9168.,  9000.,
      9648.,  10296., 10944., 10797., 11558., 12319., 13080., 10339., 11078.,
      11817., 12556., 10137., 10854., 11571., 12288., 9092.,  9688.,  10284.,
      10880., 8569.,  9070.,  9571.,  10072., 7536.,  7936.,  8336.,  8736.,
      6978.,  7452.,  7926.,  8400.,  9242.,  9828.,  10414., 11000., 10349.,
      11054., 11759., 12464., 12063., 12894., 13725., 14556., 11440., 12256.,
      13072., 13888., 11073., 11874., 12675., 13476., 9451.,  10122., 10793.,
      11464., 8230.,  8796.,  9362.,  9928.,  7278.,  7732.,  8186.,  8640.,
      6502.,  6972.,  7442.,  7912.,  8769.,  9350.,  9931.,  10512., 11195.,
      11894., 12593., 13292., 12472., 13296., 14120., 14944., 11593., 12402.,
      13211., 14020., 10970., 11764., 12558., 13352., 9361.,  10026., 10691.,
      11356., 7989.,  8550.,  9111.,  9672.,  6594.,  7044.,  7494.,  7944.,
      4040.,  4400.,  4760.,  5120.,  5553.,  5994.,  6435.,  6876.,  7600.,
      8128.,  8656.,  9184.,  9901.,  10522., 11143., 11764., 9579.,  10210.,
      10841., 11472., 9385.,  10026., 10667., 11308., 7708.,  8248.,  8788.,
      9328.,  7057.,  7522.,  7987.,  8452.,  5984.,  6368.,  6752.,  7136.,
      4278.,  4620.,  4962.,  5304.,  4960.,  5376.,  5792.,  6208.,  6455.,
      6950.,  7445.,  7940.,  8487.,  9066.,  9645.,  10224., 8950.,  9532.,
      10114., 10696., 8517.,  9102.,  9687.,  10272., 6505.,  6994.,  7483.,
      7972.,  5604.,  6024.,  6444.,  6864.,  5034.,  5380.,  5726.,  6072.,
      3872.,  4160.,  4448.,  4736.,  4346.,  4692.,  5038.,  5384.,  4920.,
      5328.,  5736.,  6144.,  6346.,  6820.,  7294.,  7768.,  6574.,  7044.,
      7514.,  7984.,  6930.,  7396.,  7862.,  8328.,  4896.,  5280.,  5664.,
      6048.,  4026.,  4356.,  4686.,  5016.,  3408.,  3680.,  3952.,  4224.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848., 13137.,
      13954., 14771., 15588., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11543., 12366., 13189.,
      14012., 11432., 12240., 13048., 13856., 11577., 12370., 13163., 13956.,
      11440., 12256., 13072., 13888., 11073., 11874., 12675., 13476., 10962.,
      11748., 12534., 13320., 12063., 12894., 13725., 14556., 11440., 12256.,
      13072., 13888., 11073., 11874., 12675., 13476., 12472., 13296., 14120.,
      14944., 11593., 12402., 13211., 14020., 10970., 11764., 12558., 13352.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      12696., 15262., 16820., 18730., 18286., 18578., 15780., 13942., 12376.,
      10604., 12259., 14930., 17937., 17755., 17413., 13626., 11935., 10492.,
      7824.,  8260.,  9656.,  11244., 10916., 11452., 9208.,  8020.,  6928.,
      8816.,  11564., 14440., 16164., 17052., 16564., 15560., 13212., 11056.,
      10532., 14565., 17830., 20991., 21369., 21395., 17566., 13425., 10868.,
      15496., 18842., 22604., 25134., 25858., 25078., 22908., 19282., 16360.,
      13948., 17395., 22442., 27177., 26351., 25045., 21554., 17511., 13292.,
      16948., 20077., 23918., 26303., 26117., 26315., 24198., 20369., 17508.,
      12632., 16414., 19924., 22794., 22606., 22802., 18148., 13846., 11704.,
      11244., 12339., 14354., 16641., 16555., 16725., 14778., 13103., 12604.,
      9040.,  10116., 13176., 16428., 15588., 15004., 12632., 10452., 8464.,
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      12696., 15262., 16820., 18730., 18286., 18578., 15780., 13942., 12376.,
      10604., 12259., 14930., 17937., 17755., 17413., 13626., 11935., 10492.,
      7824.,  8260.,  9656.,  11244., 10916., 11452., 9208.,  8020.,  6928.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26873., 26303., 26117., 26351., 25045., 25499., 27177., 26351., 25045.,
      26303., 26117., 26315., 26873., 26303., 26117., 26351., 25045., 25499.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      10632., 11408., 13846., 14812., 16268., 17384., 20490., 21780., 19370.,
      20636., 19658., 20964., 16604., 17704., 15814., 16748., 12808., 13552.,
      11060., 11768., 12479., 13350., 13958., 14948., 16313., 17442., 16001.,
      17078., 15305., 16394., 11694., 12596., 10439., 11198., 9956.,  10552.,
      6704.,  7200.,  8788.,  9384.,  9736.,  10448., 12556., 13400., 12428.,
      13256., 13964., 14840., 10056., 10800., 8468.,  9128.,  7344.,  7904.,
      6448.,  6944.,  9796.,  10456., 13128., 13968., 15996., 16968., 17724.,
      18744., 16764., 17768., 15592., 16464., 13636., 14360., 11984., 12544.,
      10420., 11144., 14031., 14922., 16758., 17836., 18937., 20158., 19425.,
      20658., 19273., 20454., 16606., 17596., 14327., 15106., 11876., 12488.,
      11656., 12496., 16062., 17108., 20668., 21944., 23458., 24924., 23842.,
      25348., 23330., 24812., 21676., 22936., 17358., 18372., 14184., 14992.,
      14828., 15800., 18017., 19206., 22618., 24052., 26343., 27986., 25711.,
      27358., 24183., 25770., 21298., 22660., 18713., 19822., 14364., 15256.,
      14956., 15912., 18153., 19322., 21882., 23292., 25647., 27262., 26295.,
      27914., 25663., 27286., 22834., 24236., 19137., 20290., 16860., 17800.,
      13448., 14352., 17046., 18140., 20236., 21544., 22282., 23764., 21674.,
      23132., 21834., 23268., 18140., 19368., 15558., 16556., 13448., 14256.,
      9268.,  9976.,  11647., 12486., 14854., 15844., 17785., 18946., 17601.,
      18774., 17929., 19114., 15918., 16948., 12679., 13534., 12004., 12728.,
      9008.,  9632.,  9300.,  10024., 11528., 12368., 14604., 15576., 13452.,
      14408., 12812., 13752., 10696., 11504., 9236.,  9896.,  8368.,  8928.,
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      10632., 11408., 13846., 14812., 16268., 17384., 20490., 21780., 19370.,
      20636., 19658., 20964., 16604., 17704., 15814., 16748., 12808., 13552.,
      11060., 11768., 12479., 13350., 13958., 14948., 16313., 17442., 16001.,
      17078., 15305., 16394., 11694., 12596., 10439., 11198., 9956.,  10552.,
      6704.,  7200.,  8788.,  9384.,  9736.,  10448., 12556., 13400., 12428.,
      13256., 13964., 14840., 10056., 10800., 8468.,  9128.,  7344.,  7904.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25767., 27378., 25647., 27262., 26295., 27914., 25711., 27358., 24183.,
      25770., 24063., 25654., 26343., 27986., 25711., 27358., 24183., 25770.,
      25647., 27262., 26295., 27914., 25663., 27286., 25767., 27378., 25647.,
      27262., 26295., 27914., 25711., 27358., 24183., 25770., 24063., 25654.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      11048., 11824., 12600., 13376., 13542., 14508., 15474., 16440., 15548.,
      16664., 17780., 18896., 21130., 22420., 23710., 25000., 18402., 19668.,
      20934., 22200., 18426., 19732., 21038., 22344., 15884., 16984., 18084.,
      19184., 14406., 15340., 16274., 17208., 11336., 12080., 12824., 13568.,
      12164., 12872., 13580., 14288., 13111., 13982., 14853., 15724., 14254.,
      15244., 16234., 17224., 16137., 17266., 18395., 19524., 17613., 18690.,
      19767., 20844., 16209., 17298., 18387., 19476., 12406., 13308., 14210.,
      15112., 10743., 11502., 12261., 13020., 9140.,  9736.,  10332., 10928.,
      6960.,  7456.,  7952.,  8448.,  10292., 10888., 11484., 12080., 10344.,
      11056., 11768., 12480., 12108., 12952., 13796., 14640., 12380., 13208.,
      14036., 14864., 13868., 14744., 15620., 16496., 11336., 12080., 12824.,
      13568., 9716.,  10376., 11036., 11696., 8432.,  8992.,  9552.,  10112.,
      7472.,  7968.,  8464.,  8960.,  10036., 10696., 11356., 12016., 12520.,
      13360., 14200., 15040., 15116., 16088., 17060., 18032., 16604., 17624.,
      18644., 19664., 14828., 15832., 16836., 17840., 12744., 13616., 14488.,
      15360., 10740., 11464., 12188., 12912., 9968.,  10528., 11088., 11648.,
      10868., 11592., 12316., 13040., 13315., 14206., 15097., 15988., 16022.,
      17100., 18178., 19256., 17645., 18866., 20087., 21308., 18353., 19586.,
      20819., 22052., 19893., 21074., 22255., 23436., 14718., 15708., 16698.,
      17688., 10979., 11758., 12537., 13316., 8612.,  9224.,  9836.,  10448.,
      12520., 13360., 14200., 15040., 15750., 16796., 17842., 18888., 19356.,
      20632., 21908., 23184., 21418., 22884., 24350., 25816., 21506., 23012.,
      24518., 26024., 21914., 23396., 24878., 26360., 21836., 23096., 24356.,
      25616., 15174., 16188., 17202., 18216., 11528., 12336., 13144., 13952.,
      14476., 15448., 16420., 17392., 16413., 17602., 18791., 19980., 21146.,
      22580., 24014., 25448., 26211., 27854., 29497., 31140., 23919., 25566.,
      27213., 28860., 21947., 23534., 25121., 26708., 19506., 20868., 22230.,
      23592., 18589., 19698., 20807., 21916., 12956., 13848., 14740., 15632.,
      15260., 16216., 17172., 18128., 16705., 17874., 19043., 20212., 19186.,
      20596., 22006., 23416., 23823., 25438., 27053., 28668., 26139., 27758.,
      29377., 30996., 23847., 25470., 27093., 28716., 20874., 22276., 23678.,
      25080., 17089., 18242., 19395., 20548., 14956., 15896., 16836., 17776.,
      13480., 14384., 15288., 16192., 17766., 18860., 19954., 21048., 19196.,
      20504., 21812., 23120., 20426., 21908., 23390., 24872., 20770., 22228.,
      23686., 25144., 22650., 24084., 25518., 26952., 17804., 19032., 20260.,
      21488., 14854., 15852., 16850., 17848., 11528., 12336., 13144., 13952.,
      9604.,  10312., 11020., 11728., 12503., 13342., 14181., 15020., 16046.,
      17036., 18026., 19016., 17001., 18162., 19323., 20484., 16621., 17794.,
      18967., 20140., 17265., 18450., 19635., 20820., 15606., 16636., 17666.,
      18696., 12055., 12910., 13765., 14620., 11060., 11784., 12508., 13232.,
      9392.,  10016., 10640., 11264., 10164., 10888., 11612., 12336., 12776.,
      13616., 14456., 15296., 16076., 17048., 18020., 18992., 14300., 15256.,
      16212., 17168., 13548., 14488., 15428., 16368., 11528., 12336., 13144.,
      13952., 10228., 10888., 11548., 12208., 8432.,  8992.,  9552.,  10112.,
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      11048., 11824., 12600., 13376., 13542., 14508., 15474., 16440., 15548.,
      16664., 17780., 18896., 21130., 22420., 23710., 25000., 18402., 19668.,
      20934., 22200., 18426., 19732., 21038., 22344., 15884., 16984., 18084.,
      19184., 14406., 15340., 16274., 17208., 11336., 12080., 12824., 13568.,
      12164., 12872., 13580., 14288., 13111., 13982., 14853., 15724., 14254.,
      15244., 16234., 17224., 16137., 17266., 18395., 19524., 17613., 18690.,
      19767., 20844., 16209., 17298., 18387., 19476., 12406., 13308., 14210.,
      15112., 10743., 11502., 12261., 13020., 9140.,  9736.,  10332., 10928.,
      6960.,  7456.,  7952.,  8448.,  10292., 10888., 11484., 12080., 10344.,
      11056., 11768., 12480., 12108., 12952., 13796., 14640., 12380., 13208.,
      14036., 14864., 13868., 14744., 15620., 16496., 11336., 12080., 12824.,
      13568., 9716.,  10376., 11036., 11696., 8432.,  8992.,  9552.,  10112.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668., 26139.,
      27758., 29377., 30996., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 26211., 27854., 29497.,
      31140., 23919., 25566., 27213., 28860., 21947., 23534., 25121., 26708.,
      23823., 25438., 27053., 28668., 26139., 27758., 29377., 30996., 23847.,
      25470., 27093., 28716., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 23919., 25566., 27213.,
      28860., 21947., 23534., 25121., 26708., 22727., 24318., 25909., 27500.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      6672., 9508.,  10008., 12812., 10748., 12684., 10008., 9636.,  6672.,
      6456., 7542.,  8916.,  9138.,  10826., 10114., 8916.,  6566.,  6456.,
      4448., 6200.,  6672.,  8680.,  8040.,  8680.,  6672.,  6200.,  4448.,
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      6672., 9508.,  10008., 12812., 10748., 12684., 10008., 9636.,  6672.,
      6456., 7542.,  8916.,  9138.,  10826., 10114., 8916.,  6566.,  6456.,
      4448., 6200.,  6672.,  8680.,  8040.,  8680.,  6672.,  6200.,  4448.,
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      6672., 9508.,  10008., 12812., 10748., 12684., 10008., 9636.,  6672.,
      6456., 7542.,  8916.,  9138.,  10826., 10114., 8916.,  6566.,  6456.,
      4448., 6200.,  6672.,  8680.,  8040.,  8680.,  6672.,  6200.,  4448.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15502., 14006., 14398., 14006., 14398., 12902., 15502., 14006., 14398.,
      14006., 14398., 12902., 15502., 14006., 14398., 14006., 14398., 12902.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      6000.,  6816.,  9676.,  10728., 9128.,  10384., 13316., 14744., 10244.,
      11640., 13060., 14488., 9384.,  10640., 9676.,  10728., 6000.,  6816.,
      6280.,  6960.,  6242.,  7116.,  9548.,  10568., 8486.,  9668.,  10598.,
      11764., 8870.,  10084., 9676.,  10728., 6242.,  7116.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      6000.,  6816.,  9676.,  10728., 9128.,  10384., 13316., 14744., 10244.,
      11640., 13060., 14488., 9384.,  10640., 9676.,  10728., 6000.,  6816.,
      6280.,  6960.,  6242.,  7116.,  9548.,  10568., 8486.,  9668.,  10598.,
      11764., 8870.,  10084., 9676.,  10728., 6242.,  7116.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      6000.,  6816.,  9676.,  10728., 9128.,  10384., 13316., 14744., 10244.,
      11640., 13060., 14488., 9384.,  10640., 9676.,  10728., 6000.,  6816.,
      6280.,  6960.,  6242.,  7116.,  9548.,  10568., 8486.,  9668.,  10598.,
      11764., 8870.,  10084., 9676.,  10728., 6242.,  7116.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932., 15122.,
      16764., 12114., 13772., 15250., 16924., 12242., 13932., 15122., 16764.,
      12242., 13932., 15122., 16764., 12114., 13772., 15250., 16924., 12242.,
      13932., 15122., 16764., 12242., 13932., 15122., 16764., 12114., 13772.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6618.,  7492.,  8366.,  9240.,  7740.,
      8760.,  9780.,  10800., 8974.,  10156., 11338., 12520., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7964.,  9016.,  10068.,
      11120., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6618.,  7492.,  8366.,  9240.,  7740.,
      8760.,  9780.,  10800., 8974.,  10156., 11338., 12520., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7964.,  9016.,  10068.,
      11120., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6618.,  7492.,  8366.,  9240.,  7740.,
      8760.,  9780.,  10800., 8974.,  10156., 11338., 12520., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7964.,  9016.,  10068.,
      11120., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880., 12474.,
      14116., 15758., 17400., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 12698., 14372., 16046.,
      17720., 12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400.,
      12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400., 12586.,
      14244., 15902., 17560., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 12810., 14500., 16190.,
      17880., 12474., 14116., 15758., 17400., 12586., 14244., 15902., 17560.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436.,  3090.,  3786.,  4520.,  4586.,  4684.,  5134.,  4750.,  4380.,
      4028.,  3500.,  4797.,  6144.,  7536.,  7952.,  8400.,  8976.,  8227.,
      7490.,  6770.,  6170.,  8469.,  9785.,  11136., 10829., 10554., 11207.,
      9687.,  8194.,  6734.,  7094.,  8092.,  9137.,  10222., 9719.,  9280.,
      9577.,  8166.,  7134.,  6136.,  6066.,  7368.,  8711.,  10088., 10033.,
      10042., 10563., 9368.,  8334.,  7340.,  5678.,  7449.,  9259.,  11102.,
      10373., 9708.,  9331.,  7241.,  6108.,  5010.,  5956.,  6613.,  7324.,
      8084.,  7754.,  7488.,  7286.,  5931.,  5288.,  4658.,  4556.,  5018.,
      5502.,  6004.,  5834.,  5696.,  5590.,  4354.,  3600.,  2852.,  4260.,
      5970.,  7690.,  9320.,  9706.,  10124., 9550.,  7662.,  5820.,  4028.,
      6892.,  8717.,  10544., 11472., 11184., 10384., 9648.,  7923.,  6258.,
      4658.,  5626.,  7397.,  9177.,  10288., 10301., 10026., 9815.,  8439.,
      7122.,  5870.,  6134.,  8252.,  10369., 12030., 12295., 12496., 12761.,
      11286., 8862.,  6520.,  7218.,  9064.,  10903., 12504., 12993., 12618.,
      12307., 10376., 8526.,  6764.,  4878.,  6409.,  7947.,  9486.,  10069.,
      9980.,  9923.,  8617.,  7372.,  6194.,  4484.,  6149.,  7820.,  9492.,
      10026., 10112., 10230., 9147.,  8120.,  7154.,  4556.,  5690.,  6814.,
      7924.,  8330.,  8512.,  8726.,  7362.,  6032.,  4740.,  2436.,  3090.,
      3786.,  4520.,  4586.,  4684.,  5134.,  4750.,  4380.,  4028.,  3500.,
      4797.,  6144.,  7536.,  7952.,  8400.,  8976.,  8227.,  7490.,  6770.,
      6170.,  8469.,  9785.,  11136., 10829., 10554., 11207., 9687.,  8194.,
      6734.,  7094.,  8092.,  9137.,  10222., 9719.,  9280.,  9577.,  8166.,
      7134.,  6136.,  6066.,  7368.,  8711.,  10088., 10033., 10042., 10563.,
      9368.,  8334.,  7340.,  5678.,  7449.,  9259.,  11102., 10373., 9708.,
      9331.,  7241.,  6108.,  5010.,  5956.,  6613.,  7324.,  8084.,  7754.,
      7488.,  7286.,  5931.,  5288.,  4658.,  4556.,  5018.,  5502.,  6004.,
      5834.,  5696.,  5590.,  4354.,  3600.,  2852.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10222., 9719.,  9280.,  9577.,  10088., 10033., 10042., 10563.,
      12030., 12295., 12496., 12761., 12504., 12993., 12618., 12307.,
      10222., 9719.,  9280.,  9577.,  10088., 10033., 10042., 10563.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  6024.,  6460.,  7378.,  7890.,  8996.,  9590.,  10610., 11292.,
      9686.,  10346., 8890.,  9528.,  8638.,  9286.,  6608.,  7154.,  5506.,
      5976.,  4544.,  4932.,  4814.,  5160.,  5053.,  5450.,  5907.,  6360.,
      6790.,  7304.,  6671.,  7156.,  6680.,  7136.,  6785.,  7244.,  5817.,
      6198.,  5286.,  5616.,  4850.,  5124.,  3840.,  4120.,  4332.,  4660.,
      5728.,  6108.,  7124.,  7560.,  7428.,  7860.,  7796.,  8224.,  7204.,
      7628.,  5192.,  5540.,  4180.,  4480.,  3248.,  3496.,  4432.,  4712.,
      6172.,  6532.,  7864.,  8308.,  9340.,  9840.,  9732.,  10228., 10188.,
      10680., 9684.,  10172., 8288.,  8700.,  6252.,  6584.,  4352.,  4600.,
      6326.,  6712.,  7979.,  8474.,  10079., 10688., 11368., 12064., 11269.,
      11968., 11202., 11872., 10239., 10880., 8493.,  9030.,  6872.,  7300.,
      5450.,  5764.,  5696.,  6100.,  7298.,  7818.,  9680.,  10322., 11710.,
      12448., 12206., 12954., 12158., 12884., 12238., 12942., 11132., 11726.,
      8806.,  9284.,  6680.,  7036.,  7550.,  8012.,  9893.,  10488., 12291.,
      13026., 13738., 14588., 13707., 14574., 13580., 14432., 13581., 14418.,
      12229., 12940., 9370.,  9948.,  6746.,  7184.,  7518.,  8004.,  9375.,
      10000., 11595., 12366., 13300., 14192., 13717., 14626., 13462., 14356.,
      13335., 14214., 12037., 12784., 9948.,  10556., 8106.,  8568.,  5000.,
      5372.,  6354.,  6834.,  8420.,  9014.,  10418., 11132., 11030., 11786.,
      11354., 12120., 11742., 12518., 10256., 10930., 8962.,  9528.,  7872.,
      8324.,  5454.,  5800.,  7149.,  7594.,  8851.,  9400.,  10486., 11144.,
      11007., 11700., 10664., 11360., 10385., 11084., 8953.,  9558.,  7702.,
      8208.,  6642.,  7044.,  3840.,  4120.,  4620.,  4980.,  5728.,  6172.,
      6772.,  7304.,  7172.,  7732.,  7156.,  7712.,  7204.,  7756.,  5960.,
      6436.,  4852.,  5248.,  3888.,  4200.,  3920.,  4136.,  4604.,  4868.,
      5304.,  5620.,  6012.,  6384.,  5764.,  6132.,  5580.,  5944.,  6068.,
      6460.,  5600.,  5948.,  4940.,  5240.,  4352.,  4600.,  3766.,  4024.,
      4923.,  5242.,  6111.,  6496.,  7320.,  7776.,  7605.,  8064.,  7954.,
      8416.,  8527.,  9024.,  8173.,  8614.,  7336.,  7716.,  6602.,  6916.,
      5824.,  6164.,  8002.,  8426.,  9488.,  10002., 10974., 11584., 10830.,
      11450., 10750., 11380., 11470., 12142., 10556., 11150., 8870.,  9380.,
      7320.,  7740.,  7422.,  7884.,  9109.,  9656.,  10435., 11074., 11770.,
      12508., 11259., 11982., 10876., 11584., 10909., 11634., 9157.,  9772.,
      8010.,  8540.,  7002.,  7440.,  7262.,  7748.,  8591.,  9168.,  10891.,
      11566., 13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.,
      11141., 11792., 9612.,  10172., 8234.,  8696.,  6024.,  6460.,  7378.,
      7890.,  8996.,  9590.,  10610., 11292., 9686.,  10346., 8890.,  9528.,
      8638.,  9286.,  6608.,  7154.,  5506.,  5976.,  4544.,  4932.,  4814.,
      5160.,  5053.,  5450.,  5907.,  6360.,  6790.,  7304.,  6671.,  7156.,
      6680.,  7136.,  6785.,  7244.,  5817.,  6198.,  5286.,  5616.,  4850.,
      5124.,  3840.,  4120.,  4332.,  4660.,  5728.,  6108.,  7124.,  7560.,
      7428.,  7860.,  7796.,  8224.,  7204.,  7628.,  5192.,  5540.,  4180.,
      4480.,  3248.,  3496.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634.,
      13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.,
      13738., 14588., 13707., 14574., 13580., 14432., 13581., 14418.,
      13300., 14192., 13717., 14626., 13462., 14356., 13335., 14214.,
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634.,
      13188., 13968., 12549., 13314., 12038., 12788., 12519., 13286.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  5340.,  5776.,  6212.,  6648.,  6724.,  7236.,  7748.,
      8260.,  8278.,  8872.,  9466.,  10060., 10714., 11396., 12078., 12760.,
      10360., 11020., 11680., 12340., 9238.,  9876.,  10514., 11152., 9172.,
      9820.,  10468., 11116., 7422.,  7968.,  8514.,  9060.,  6574.,  7044.,
      7514.,  7984.,  5564.,  5952.,  6340.,  6728.,  3810.,  4156.,  4502.,
      4848.,  4461.,  4858.,  5255.,  5652.,  5665.,  6118.,  6571.,  7024.,
      7114.,  7628.,  8142.,  8656.,  7417.,  7902.,  8387.,  8872.,  6952.,
      7408.,  7864.,  8320.,  6647.,  7106.,  7565.,  8024.,  5109.,  5490.,
      5871.,  6252.,  4482.,  4812.,  5142.,  5472.,  4114.,  4388.,  4662.,
      4936.,  3688.,  3968.,  4248.,  4528.,  3760.,  4088.,  4416.,  4744.,
      4676.,  5056.,  5436.,  5816.,  6132.,  6568.,  7004.,  7440.,  6360.,
      6792.,  7224.,  7656.,  6716.,  7144.,  7572.,  8000.,  6176.,  6600.,
      7024.,  7448.,  4340.,  4688.,  5036.,  5384.,  3516.,  3816.,  4116.,
      4416.,  2920.,  3168.,  3416.,  3664.,  3336.,  3616.,  3896.,  4176.,
      5072.,  5432.,  5792.,  6152.,  6644.,  7088.,  7532.,  7976.,  7748.,
      8248.,  8748.,  9248.,  8024.,  8520.,  9016.,  9512.,  8428.,  8920.,
      9412.,  9904.,  7936.,  8424.,  8912.,  9400.,  7076.,  7488.,  7900.,
      8312.,  5804.,  6136.,  6468.,  6800.,  4424.,  4672.,  4920.,  5168.,
      4842.,  5228.,  5614.,  6000.,  6759.,  7254.,  7749.,  8244.,  8957.,
      9566.,  10175., 10784., 10488., 11184., 11880., 12576., 10735., 11434.,
      12133., 12832., 11078., 11748., 12418., 13088., 10653., 11294., 11935.,
      12576., 8673.,  9210.,  9747.,  10284., 7108.,  7536.,  7964.,  8392.,
      5242.,  5556.,  5870.,  6184.,  5164.,  5568.,  5972.,  6376.,  6684.,
      7204.,  7724.,  8244.,  8798.,  9440.,  10082., 10724., 10650., 11388.,
      12126., 12864., 10864., 11612., 12360., 13108., 11046., 11772., 12498.,
      13224., 11484., 12188., 12892., 13596., 10054., 10648., 11242., 11836.,
      7726.,  8204.,  8682.,  9160.,  5836.,  6192.,  6548.,  6904.,  6382.,
      6844.,  7306.,  7768.,  8407.,  9002.,  9597.,  10192., 10279., 11014.,
      11749., 12484., 12034., 12884., 13734., 14584., 12211., 13078., 13945.,
      14812., 12228., 13080., 13932., 14784., 12501., 13338., 14175., 15012.,
      11555., 12266., 12977., 13688., 9458.,  10036., 10614., 11192., 6526.,
      6964.,  7402.,  7840.,  6934.,  7420.,  7906.,  8392.,  9069.,  9694.,
      10319., 10944., 11347., 12118., 12889., 13660., 12652., 13544., 14436.,
      15328., 12701., 13610., 14519., 15428., 12462., 13356., 14250., 15144.,
      12479., 13358., 14237., 15116., 11583., 12330., 13077., 13824., 10264.,
      10872., 11480., 12088., 7814.,  8276.,  8738.,  9200.,  4892.,  5264.,
      5636.,  6008.,  6244.,  6724.,  7204.,  7684.,  8150.,  8744.,  9338.,
      9932.,  10298., 11012., 11726., 12440., 10904., 11660., 12416., 13172.,
      10966., 11732., 12498., 13264., 11156., 11932., 12708., 13484., 9982.,
      10656., 11330., 12004., 9294.,  9860.,  10426., 10992., 8060.,  8512.,
      8964.,  9416.,  4578.,  4924.,  5270.,  5616.,  6045.,  6490.,  6935.,
      7380.,  7361.,  7910.,  8459.,  9008.,  9242.,  9900.,  10558., 11216.,
      9737.,  10430., 11123., 11816., 9560.,  10256., 10952., 11648., 9511.,
      10210., 10909., 11608., 8085.,  8690.,  9295.,  9900.,  7090.,  7596.,
      8102.,  8608.,  6546.,  6948.,  7350.,  7752.,  3688.,  3968.,  4248.,
      4528.,  4816.,  5176.,  5536.,  5896.,  6148.,  6592.,  7036.,  7480.,
      7380.,  7912.,  8444.,  8976.,  7768.,  8328.,  8888.,  9448.,  7356.,
      7912.,  8468.,  9024.,  7072.,  7624.,  8176.,  8728.,  5748.,  6224.,
      6700.,  7176.,  4764.,  5160.,  5556.,  5952.,  4136.,  4448.,  4760.,
      5072.,  3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,
      4724.,  5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,
      5704.,  6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,
      6704.,  7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,
      6672.,  4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,
      4919.,  5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,
      7184.,  7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,
      7762.,  8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,
      8428.,  6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,
      4460.,  4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,
      8544.,  9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,
      10504., 11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324.,
      11996., 9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,
      7052.,  7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,
      8970.,  9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020.,
      12758., 13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452.,
      12160., 10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936.,
      8322.,  8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,
      6908.,  7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222.,
      11897., 12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063.,
      13828., 10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260.,
      9375.,  10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,
      7508.,  7970.,  8432.,  5340.,  5776.,  6212.,  6648.,  6724.,  7236.,
      7748.,  8260.,  8278.,  8872.,  9466.,  10060., 10714., 11396., 12078.,
      12760., 10360., 11020., 11680., 12340., 9238.,  9876.,  10514., 11152.,
      9172.,  9820.,  10468., 11116., 7422.,  7968.,  8514.,  9060.,  6574.,
      7044.,  7514.,  7984.,  5564.,  5952.,  6340.,  6728.,  3810.,  4156.,
      4502.,  4848.,  4461.,  4858.,  5255.,  5652.,  5665.,  6118.,  6571.,
      7024.,  7114.,  7628.,  8142.,  8656.,  7417.,  7902.,  8387.,  8872.,
      6952.,  7408.,  7864.,  8320.,  6647.,  7106.,  7565.,  8024.,  5109.,
      5490.,  5871.,  6252.,  4482.,  4812.,  5142.,  5472.,  4114.,  4388.,
      4662.,  4936.,  3688.,  3968.,  4248.,  4528.,  3760.,  4088.,  4416.,
      4744.,  4676.,  5056.,  5436.,  5816.,  6132.,  6568.,  7004.,  7440.,
      6360.,  6792.,  7224.,  7656.,  6716.,  7144.,  7572.,  8000.,  6176.,
      6600.,  7024.,  7448.,  4340.,  4688.,  5036.,  5384.,  3516.,  3816.,
      4116.,  4416.,  2920.,  3168.,  3416.,  3664.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700., 10036.,
      10744., 11452., 12160., 10341., 11066., 11791., 12516., 12540., 13320.,
      14100., 14880., 11533., 12298., 13063., 13828., 10782., 11532., 12282.,
      13032., 10959., 11726., 12493., 13260., 12034., 12884., 13734., 14584.,
      12211., 13078., 13945., 14812., 12228., 13080., 13932., 14784., 12501.,
      13338., 14175., 15012., 12652., 13544., 14436., 15328., 12701., 13610.,
      14519., 15428., 12462., 13356., 14250., 15144., 12479., 13358., 14237.,
      15116., 11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700.,
      10036., 10744., 11452., 12160., 10341., 11066., 11791., 12516., 12540.,
      13320., 14100., 14880., 11533., 12298., 13063., 13828., 10782., 11532.,
      12282., 13032., 10959., 11726., 12493., 13260.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11120., 13984., 18152., 22584.,
      21980., 21024., 21316., 17344., 15236., 13408., 11668., 13329., 15518.,
      17971., 18781., 18087., 17745., 15394., 13971., 12780., 7744.,  9032.,
      12000., 15112., 16544., 17240., 16144., 11920., 9728.,  7712.,  7968.,
      10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552., 7616.,
      10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802., 14403.,
      12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360., 23000.,
      18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311., 24381.,
      21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045., 26483.,
      27193., 24906., 21347., 18108., 11120., 13984., 18152., 22584., 21980.,
      21024., 21316., 17344., 15236., 13408., 11668., 13329., 15518., 17971.,
      18781., 18087., 17745., 15394., 13971., 12780., 7744.,  9032.,  12000.,
      15112., 16544., 17240., 16144., 11920., 9728.,  7712.,  7968.,  10240.,
      12720., 15024., 15304., 15840., 15832., 13632., 10552., 7616.,  10740.,
      13777., 17054., 19059., 19437., 19975., 19201., 16802., 14403., 12268.,
      10464., 14828., 18720., 22284., 23008., 22740., 24360., 23000., 18304.,
      13872., 16164., 20865., 24374., 26443., 25361., 24311., 24381., 21250.,
      16927., 12876., 15828., 18853., 23966., 28487., 28045., 26483., 27193.,
      24906., 21347., 18108., 11120., 13984., 18152., 22584., 21980., 21024.,
      21316., 17344., 15236., 13408., 11668., 13329., 15518., 17971., 18781.,
      18087., 17745., 15394., 13971., 12780., 7744.,  9032.,  12000., 15112.,
      16544., 17240., 16144., 11920., 9728.,  7712.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193.,
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193.,
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11016., 11840., 13694., 14688., 17580., 18768., 23474., 24880.,
      24018., 25464., 21874., 23296., 22162., 23624., 19068., 20320., 17998.,
      19080., 15752., 16640., 9204.,  9928.,  11303., 12162., 13830., 14844.,
      17601., 18790., 19209., 20410., 17873., 19022., 17177., 18338., 13870.,
      14852., 12631., 13478., 12132., 12824., 8496.,  9088.,  9572.,  10288.,
      12232., 13088., 15260., 16272., 16540., 17600., 16412., 17456., 14748.,
      15776., 10760., 11616., 8996.,  9728.,  7856.,  8448.,  7088.,  7552.,
      9012.,  9600.,  11080., 11808., 12588., 13408., 13164., 13968., 14252.,
      15040., 14188., 15024., 13160., 13888., 11764., 12368., 9168.,  9632.,
      9908.,  10536., 12799., 13602., 15798., 16796., 17961., 19110., 18449.,
      19610., 19321., 20430., 19553., 20674., 16382., 17348., 13839., 14630.,
      11108., 11704., 9672.,  10368., 14070., 14968., 17788., 18912., 20474.,
      21784., 20858., 22208., 21370., 22696., 23546., 24912., 21548., 22736.,
      16966., 17952., 13096., 13856., 13164., 14088., 18489., 19618., 22458.,
      23820., 24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      21810., 23076., 19001., 20062., 13596., 14424., 14956., 15976., 19209.,
      20458., 25338., 26844., 28367., 30094., 26455., 28186., 24415., 26086.,
      24807., 26482., 22578., 23988., 20297., 21478., 16284., 17208., 11016.,
      11840., 13694., 14688., 17580., 18768., 23474., 24880., 24018., 25464.,
      21874., 23296., 22162., 23624., 19068., 20320., 17998., 19080., 15752.,
      16640., 9204.,  9928.,  11303., 12162., 13830., 14844., 17601., 18790.,
      19209., 20410., 17873., 19022., 17177., 18338., 13870., 14852., 12631.,
      13478., 12132., 12824., 8496.,  9088.,  9572.,  10288., 12232., 13088.,
      15260., 16272., 16540., 17600., 16412., 17456., 14748., 15776., 10760.,
      11616., 8996.,  9728.,  7856.,  8448.,  7088.,  7552.,  9012.,  9600.,
      11080., 11808., 12588., 13408., 13164., 13968., 14252., 15040., 14188.,
      15024., 13160., 13888., 11764., 12368., 9168.,  9632.,  9908.,  10536.,
      12799., 13602., 15798., 16796., 17961., 19110., 18449., 19610., 19321.,
      20430., 19553., 20674., 16382., 17348., 13839., 14630., 11108., 11704.,
      9672.,  10368., 14070., 14968., 17788., 18912., 20474., 21784., 20858.,
      22208., 21370., 22696., 23546., 24912., 21548., 22736., 16966., 17952.,
      13096., 13856., 13164., 14088., 18489., 19618., 22458., 23820., 24447.,
      26006., 23303., 24866., 22287., 23790., 23447., 24954., 21810., 23076.,
      19001., 20062., 13596., 14424., 14956., 15976., 19209., 20458., 25338.,
      26844., 28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.,
      22578., 23988., 20297., 21478., 16284., 17208., 11016., 11840., 13694.,
      14688., 17580., 18768., 23474., 24880., 24018., 25464., 21874., 23296.,
      22162., 23624., 19068., 20320., 17998., 19080., 15752., 16640., 9204.,
      9928.,  11303., 12162., 13830., 14844., 17601., 18790., 19209., 20410.,
      17873., 19022., 17177., 18338., 13870., 14852., 12631., 13478., 12132.,
      12824., 8496.,  9088.,  9572.,  10288., 12232., 13088., 15260., 16272.,
      16540., 17600., 16412., 17456., 14748., 15776., 10760., 11616., 8996.,
      9728.,  7856.,  8448.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.,
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.,
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954.,
      28367., 30094., 26455., 28186., 24415., 26086., 24807., 26482.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13304., 14128., 14952., 15776., 14490., 15484., 16478.,
      17472., 16564., 17752., 18940., 20128., 21094., 22500., 23906., 25312.,
      21630., 23076., 24522., 25968., 20950., 22372., 23794., 25216., 20974.,
      22436., 23898., 25360., 17844., 19096., 20348., 21600., 16706., 17788.,
      18870., 19952., 14520., 15408., 16296., 17184., 10868., 11592., 12316.,
      13040., 13587., 14446., 15305., 16164., 14486., 15500., 16514., 17528.,
      16349., 17538., 18727., 19916., 17505., 18706., 19907., 21108., 16933.,
      18082., 19231., 20380., 17577., 18738., 19899., 21060., 14246., 15228.,
      16210., 17192., 11711., 12558., 13405., 14252., 10580., 11272., 11964.,
      12656., 8912.,  9504.,  10096., 10688., 11356., 12072., 12788., 13504.,
      13144., 14000., 14856., 15712., 15044., 16056., 17068., 18080., 16020.,
      17080., 18140., 19200., 16292., 17336., 18380., 19424., 15540., 16568.,
      17596., 18624., 13144., 14000., 14856., 15712., 10572., 11304., 12036.,
      12768., 7888.,  8480.,  9072.,  9664.,  6992.,  7456.,  7920.,  8384.,
      8028.,  8616.,  9204.,  9792.,  10712., 11440., 12168., 12896., 12548.,
      13368., 14188., 15008., 11796., 12600., 13404., 14208., 12068., 12856.,
      13644., 14432., 12020., 12856., 13692., 14528., 10200., 10928., 11656.,
      12384., 8780.,  9384.,  9988.,  10592., 6992.,  7456.,  7920.,  8384.,
      10452., 11080., 11708., 12336., 12219., 13022., 13825., 14628., 14694.,
      15692., 16690., 17688., 16917., 18066., 19215., 20364., 17625., 18786.,
      19947., 21108., 17117., 18226., 19335., 20444., 17313., 18434., 19555.,
      20676., 14294., 15260., 16226., 17192., 11655., 12446., 13237., 14028.,
      9908.,  10504., 11100., 11696., 10360., 11056., 11752., 12448., 13834.,
      14732., 15630., 16528., 16436., 17560., 18684., 19808., 19574., 20884.,
      22194., 23504., 19662., 21012., 22362., 23712., 20070., 21396., 22722.,
      24048., 21694., 23060., 24426., 25792., 19220., 20408., 21596., 22784.,
      14930., 15916., 16902., 17888., 11320., 12080., 12840., 13600., 12732.,
      13656., 14580., 15504., 16649., 17778., 18907., 20036., 20386., 21748.,
      23110., 24472., 22759., 24318., 25877., 27436., 23539., 25102., 26665.,
      28228., 22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356.,
      19602., 20868., 22134., 23400., 16397., 17458., 18519., 19580., 11484.,
      12312., 13140., 13968., 15196., 16216., 17236., 18256., 17969., 19218.,
      20467., 21716., 22930., 24436., 25942., 27448., 26335., 28062., 29789.,
      31516., 25579., 27310., 29041., 30772., 24631., 26302., 27973., 29644.,
      24387., 26062., 27737., 29412., 20738., 22148., 23558., 24968., 18357.,
      19538., 20719., 21900., 13948., 14872., 15796., 16720., 13304., 14128.,
      14952., 15776., 14490., 15484., 16478., 17472., 16564., 17752., 18940.,
      20128., 21094., 22500., 23906., 25312., 21630., 23076., 24522., 25968.,
      20950., 22372., 23794., 25216., 20974., 22436., 23898., 25360., 17844.,
      19096., 20348., 21600., 16706., 17788., 18870., 19952., 14520., 15408.,
      16296., 17184., 10868., 11592., 12316., 13040., 13587., 14446., 15305.,
      16164., 14486., 15500., 16514., 17528., 16349., 17538., 18727., 19916.,
      17505., 18706., 19907., 21108., 16933., 18082., 19231., 20380., 17577.,
      18738., 19899., 21060., 14246., 15228., 16210., 17192., 11711., 12558.,
      13405., 14252., 10580., 11272., 11964., 12656., 8912.,  9504.,  10096.,
      10688., 11356., 12072., 12788., 13504., 13144., 14000., 14856., 15712.,
      15044., 16056., 17068., 18080., 16020., 17080., 18140., 19200., 16292.,
      17336., 18380., 19424., 15540., 16568., 17596., 18624., 13144., 14000.,
      14856., 15712., 10572., 11304., 12036., 12768., 7888.,  8480.,  9072.,
      9664.,  6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,
      10712., 11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796.,
      12600., 13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856.,
      13692., 14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,
      10592., 6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336.,
      12219., 13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917.,
      18066., 19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226.,
      19335., 20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226.,
      17192., 11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696.,
      10360., 11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436.,
      17560., 18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012.,
      22362., 23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426.,
      25792., 19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888.,
      11320., 12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649.,
      17778., 18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318.,
      25877., 27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597.,
      27100., 21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400.,
      16397., 17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196.,
      16216., 17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436.,
      25942., 27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041.,
      30772., 24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412.,
      20738., 22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948.,
      14872., 15796., 16720., 13304., 14128., 14952., 15776., 14490., 15484.,
      16478., 17472., 16564., 17752., 18940., 20128., 21094., 22500., 23906.,
      25312., 21630., 23076., 24522., 25968., 20950., 22372., 23794., 25216.,
      20974., 22436., 23898., 25360., 17844., 19096., 20348., 21600., 16706.,
      17788., 18870., 19952., 14520., 15408., 16296., 17184., 10868., 11592.,
      12316., 13040., 13587., 14446., 15305., 16164., 14486., 15500., 16514.,
      17528., 16349., 17538., 18727., 19916., 17505., 18706., 19907., 21108.,
      16933., 18082., 19231., 20380., 17577., 18738., 19899., 21060., 14246.,
      15228., 16210., 17192., 11711., 12558., 13405., 14252., 10580., 11272.,
      11964., 12656., 8912.,  9504.,  10096., 10688., 11356., 12072., 12788.,
      13504., 13144., 14000., 14856., 15712., 15044., 16056., 17068., 18080.,
      16020., 17080., 18140., 19200., 16292., 17336., 18380., 19424., 15540.,
      16568., 17596., 18624., 13144., 14000., 14856., 15712., 10572., 11304.,
      12036., 12768., 7888.,  8480.,  9072.,  9664.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228., 22591.,
      24094., 25597., 27100., 21835., 23342., 24849., 26356., 26335., 28062.,
      29789., 31516., 25579., 27310., 29041., 30772., 24631., 26302., 27973.,
      29644., 24387., 26062., 27737., 29412., 22759., 24318., 25877., 27436.,
      23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100., 21835.,
      23342., 24849., 26356., 26335., 28062., 29789., 31516., 25579., 27310.,
      29041., 30772., 24631., 26302., 27973., 29644., 24387., 26062., 27737.,
      29412., 22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356., 26335.,
      28062., 29789., 31516., 25579., 27310., 29041., 30772., 24631., 26302.,
      27973., 29644., 24387., 26062., 27737., 29412.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  7312.,  8220.,  9992.,  11924.,
      13252., 11284., 11844., 10632., 9804.,  6800.,  5816.,  7422.,  9060.,
      9674.,  9986.,  9978.,  10706., 8532.,  7286.,  6200.,  4704.,  5736.,
      7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,
      5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,
      5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,  7670.,
      6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332., 11176.,
      9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102., 13790.,
      12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790., 13510.,
      15406., 12652., 10378., 8296.,  7312.,  8220.,  9992.,  11924., 13252.,
      11284., 11844., 10632., 9804.,  6800.,  5816.,  7422.,  9060.,  9674.,
      9986.,  9978.,  10706., 8532.,  7286.,  6200.,  4704.,  5736.,  7056.,
      7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,  4704.,  5480.,
      7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,  5816.,
      7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,  7670.,  6200.,
      6800.,  7756.,  10632., 12516., 12180., 11364., 13332., 11176., 9116.,
      6800.,  8424.,  9746.,  11324., 13510., 15406., 14102., 13790., 12108.,
      11194., 8296.,  7912.,  9698.,  12636., 14102., 13790., 13510., 15406.,
      12652., 10378., 8296.,  7312.,  8220.,  9992.,  11924., 13252., 11284.,
      11844., 10632., 9804.,  6800.,  5816.,  7422.,  9060.,  9674.,  9986.,
      9978.,  10706., 8532.,  7286.,  6200.,  4704.,  5736.,  7056.,  7832.,
      8632.,  8088.,  8376.,  7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  6768.,  7584.,  8460.,  9432.,  10152., 11376., 11076., 12456.,
      12612., 14088., 11844., 13224., 11844., 13320., 10152., 11376., 9228.,
      10296., 6768.,  7584.,  5512.,  6192.,  6562.,  7388.,  8524.,  9576.,
      10086., 11252., 9382.,  10596., 9190.,  10324., 10278., 11524., 8908.,
      9960.,  6882.,  7788.,  5768.,  6448.,  4512.,  5056.,  5640.,  6288.,
      6768.,  7584.,  7384.,  8304.,  8408.,  9392.,  7896.,  8816.,  7896.,
      8880.,  6768.,  7584.,  6152.,  6864.,  4512.,  5056.,  4512.,  5056.,
      5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,  8880.,  7384.,
      8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,  4512.,  5056.,
      5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,  10324., 10278.,
      11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,  7266.,  8140.,
      5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152., 11376., 11844.,
      13224., 11844., 13320., 11076., 12456., 12612., 14088., 10152., 11376.,
      8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,  10884., 11396.,
      12792., 12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,  8720.,  9126.,
      10276., 11908., 13368., 14034., 15660., 13330., 15036., 12882., 14476.,
      14482., 16220., 12292., 13752., 9702.,  10964., 8024.,  8976.,  6768.,
      7584.,  8460.,  9432.,  10152., 11376., 11076., 12456., 12612., 14088.,
      11844., 13224., 11844., 13320., 10152., 11376., 9228.,  10296., 6768.,
      7584.,  5512.,  6192.,  6562.,  7388.,  8524.,  9576.,  10086., 11252.,
      9382.,  10596., 9190.,  10324., 10278., 11524., 8908.,  9960.,  6882.,
      7788.,  5768.,  6448.,  4512.,  5056.,  5640.,  6288.,  6768.,  7584.,
      7384.,  8304.,  8408.,  9392.,  7896.,  8816.,  7896.,  8880.,  6768.,
      7584.,  6152.,  6864.,  4512.,  5056.,  4512.,  5056.,  5128.,  5776.,
      6768.,  7584.,  7896.,  8816.,  7896.,  8880.,  7384.,  8304.,  8408.,
      9392.,  6768.,  7584.,  5640.,  6352.,  4512.,  5056.,  5512.,  6192.,
      6946.,  7740.,  8012.,  9000.,  9190.,  10324., 10278., 11524., 10086.,
      11252., 9382.,  10596., 8396.,  9384.,  7266.,  8140.,  5768.,  6448.,
      6768.,  7584.,  7692.,  8664.,  10152., 11376., 11844., 13224., 11844.,
      13320., 11076., 12456., 12612., 14088., 10152., 11376., 8460.,  9528.,
      6768.,  7584.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882.,
      14476., 14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176.,
      10342., 11572., 8024.,  8976.,  7768.,  8720.,  9126.,  10276., 11908.,
      13368., 14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.,
      12292., 13752., 9702.,  10964., 8024.,  8976.,  6768.,  7584.,  8460.,
      9432.,  10152., 11376., 11076., 12456., 12612., 14088., 11844., 13224.,
      11844., 13320., 10152., 11376., 9228.,  10296., 6768.,  7584.,  5512.,
      6192.,  6562.,  7388.,  8524.,  9576.,  10086., 11252., 9382.,  10596.,
      9190.,  10324., 10278., 11524., 8908.,  9960.,  6882.,  7788.,  5768.,
      6448.,  4512.,  5056.,  5640.,  6288.,  6768.,  7584.,  7384.,  8304.,
      8408.,  9392.,  7896.,  8816.,  7896.,  8880.,  6768.,  7584.,  6152.,
      6864.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.,
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.,
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,
      10320., 9288.,  10512., 11736., 12960., 10500., 11880., 13260., 14640.,
      11172., 12648., 14124., 15600., 10500., 11880., 13260., 14640., 11172.,
      12648., 14124., 15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,
      10212., 11280., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,
      7200.,  6282.,  7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120.,
      8862.,  10028., 11194., 12360., 9198.,  10412., 11626., 12840., 8638.,
      9772.,  10906., 12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,
      10068., 11120., 6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,
      7200.,  4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,
      6192.,  7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,
      8432.,  9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,
      7520.,  4128.,  4672.,  5216.,  5760.,  4128.,  4672.,  5216.,  5760.,
      4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,
      8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6058.,  6852.,  7646.,  8440.,  7516.,
      8504.,  9492.,  10480., 8638.,  9772.,  10906., 12040., 9422.,  10668.,
      11914., 13160., 8862.,  10028., 11194., 12360., 9198.,  10412., 11626.,
      12840., 7516.,  8504.,  9492.,  10480., 6618.,  7492.,  8366.,  9240.,
      5160.,  5840.,  6520.,  7200.,  6192.,  7008.,  7824.,  8640.,  7404.,
      8376.,  9348.,  10320., 9288.,  10512., 11736., 12960., 10500., 11880.,
      13260., 14640., 11172., 12648., 14124., 15600., 10500., 11880., 13260.,
      14640., 11172., 12648., 14124., 15600., 9288.,  10512., 11736., 12960.,
      8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,  8640.,  7224.,
      8176.,  9128.,  10080., 8526.,  9644.,  10762., 11880., 10612., 12008.,
      13404., 14800., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      10612., 12008., 13404., 14800., 9310.,  10540., 11770., 13000., 7224.,
      8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 8750.,  9900.,
      11050., 12200., 11060., 12520., 13980., 15440., 12362., 13988., 15614.,
      17240., 12922., 14628., 16334., 18040., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 11060., 12520., 13980., 15440., 9534.,
      10796., 12058., 13320., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,
      7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736.,
      12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,
      10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,
      7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,
      8760.,  7964.,  9016.,  10068., 11120., 8862.,  10028., 11194., 12360.,
      9198.,  10412., 11626., 12840., 8638.,  9772.,  10906., 12040., 9422.,
      10668., 11914., 13160., 7964.,  9016.,  10068., 11120., 6842.,  7748.,
      8654.,  9560.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,
      5760.,  4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,
      7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,
      7824.,  8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,
      5760.,  4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,
      6192.,  7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,
      8432.,  9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,
      7520.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      6058.,  6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,
      9772.,  10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,
      10480., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,
      10512., 11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648.,
      14124., 15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280.,
      6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,
      9644.,  10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614.,
      17240., 12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800.,
      9310.,  10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,
      8176.,  9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520.,
      13980., 15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334.,
      18040., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      11060., 12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,
      8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  7404.,  8376.,
      9348.,  10320., 9288.,  10512., 11736., 12960., 10500., 11880., 13260.,
      14640., 11172., 12648., 14124., 15600., 10500., 11880., 13260., 14640.,
      11172., 12648., 14124., 15600., 9288.,  10512., 11736., 12960., 8076.,
      9144.,  10212., 11280., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,
      6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7964.,  9016.,  10068.,
      11120., 8862.,  10028., 11194., 12360., 9198.,  10412., 11626., 12840.,
      8638.,  9772.,  10906., 12040., 9422.,  10668., 11914., 13160., 7964.,
      9016.,  10068., 11120., 6842.,  7748.,  8654.,  9560.,  5160.,  5840.,
      6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,
      6880.,  6192.,  7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,
      7448.,  8432.,  9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,
      8432.,  9416.,  10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,
      6808.,  7520.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362., 13988.,
      15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12362., 13988., 15614., 17240., 12922., 14628.,
      16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908.,  3878.,  4870.,  5880.,  6330., 5666., 5028., 4420.,  3044.,
      4285.,  5564.,  6876.,  7452.,  6805., 6172., 5558., 4630.,  6467.,
      8343.,  10252., 10905., 9897.,  8906., 7938., 6418., 8096.,  9799.,
      11520., 12201., 10510., 8854.,  7240., 6146., 7888., 9631.,  11368.,
      12049., 10454., 8918.,  7448.,  4786., 6400., 8023., 9648.,  10329.,
      9150.,  8022.,  6952.,  4562.,  6317., 8085., 9860., 10443., 9423.,
      8446.,  7518.,  4904.,  6211.,  7550., 8916., 9450., 8207.,  6984.,
      5786.,  3508.,  4410.,  5314.,  6216., 6622., 5614., 4620.,  3644.,
      2844.,  3990.,  5158.,  6344.,  6794., 6210., 5652., 5124.,  4500.,
      6277.,  8084.,  9916.,  10492., 9533., 8596., 7686., 6358.,  8011.,
      9687.,  11380., 12033., 10377., 8754., 7170., 6146., 7888.,  9631.,
      11368., 12049., 10454., 8918.,  7448., 4786., 6400., 8023.,  9648.,
      10329., 9150.,  8022.,  6952.,  5218., 7152., 9103., 11064., 11745.,
      10534., 9366.,  8248.,  5266.,  6661., 8085., 9532., 10115., 8751.,
      7414.,  6110.,  3864.,  5083.,  6326., 7588., 8122., 7191.,  6288.,
      5418.,  3060.,  3850.,  4642.,  5432., 5838., 4942., 4060.,  3196.,
      3676.,  5222.,  6790.,  8376.,  8826., 8098., 7396., 6724.,  5828.,
      7341.,  8876.,  10428., 11004., 9509., 8044., 6614., 5910.,  7603.,
      9303.,  11004., 11657., 10153., 8698., 7298., 4786., 6400.,  8023.,
      9648.,  10329., 9150.,  8022.,  6952., 5218., 7152., 9103.,  11064.,
      11745., 10534., 9366.,  8248.,  6418., 8096., 9799., 11520., 12201.,
      10510., 8854.,  7240.,  4498.,  5853., 7221., 8596., 9179.,  8047.,
      6958.,  5918.,  3720.,  5075.,  6446., 7828., 8362., 7519.,  6712.,
      5946.,  3508.,  4410.,  5314.,  6216., 6622., 5614., 4620.,  3644.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11520., 12201., 11368., 12049., 9648.,  10329., 11368., 12049., 9648.,
      10329., 11064., 11745., 9648.,  10329., 11064., 11745., 11520., 12201.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6814.,
      7236.,  8735.,  9280.,  10603., 11278., 12404., 13216., 13173., 14034.,
      11493., 12252., 9730.,  10380., 8154.,  8688.,  4264.,  4612.,  5752.,
      6202.,  7452.,  8010.,  9096.,  9768.,  9708.,  10422., 8584.,  9214.,
      7616.,  8156.,  6816.,  7260.,  3774.,  4016.,  4651.,  4966.,  6035.,
      6428.,  7404.,  7880.,  7925.,  8436.,  6841.,  7294.,  5866.,  6256.,
      5010.,  5332.,  3072.,  3304.,  3720.,  4020.,  5104.,  5476.,  6448.,
      6896.,  6848.,  7324.,  5848.,  6268.,  4944.,  5304.,  4144.,  4440.,
      3440.,  3672.,  4640.,  4940.,  5816.,  6188.,  6960.,  7408.,  7448.,
      7924.,  6784.,  7204.,  5952.,  6312.,  5216.,  5512.,  3830.,  4104.,
      5351.,  5706.,  7119.,  7560.,  8868.,  9400.,  9441.,  10008., 8933.,
      9434.,  8026.,  8456.,  7242.,  7596.,  5936.,  6284.,  7444.,  7894.,
      9440.,  9998.,  11400., 12072., 12120., 12834., 11004., 11634., 9256.,
      9796.,  7656.,  8100.,  6942.,  7396.,  8855.,  9440.,  11467., 12190.,
      13996., 14864., 14765., 15682., 13541., 14348., 11482., 12172., 9626.,
      10192., 6814.,  7236.,  8735.,  9280.,  10603., 11278., 12404., 13216.,
      13173., 14034., 11493., 12252., 9730.,  10380., 8154.,  8688.,  5150.,
      5540.,  6951.,  7456.,  8971.,  9598.,  10940., 11696., 11709., 12514.,
      10725., 11436., 9386.,  9996.,  8218.,  8720.,  4456.,  4740.,  5496.,
      5866.,  7036.,  7498.,  8552.,  9112.,  9164.,  9766.,  7848.,  8382.,
      6656.,  7116.,  5600.,  5980.,  3454.,  3728.,  4403.,  4758.,  6099.,
      6540.,  7764.,  8296.,  8285.,  8852.,  7321.,  7822.,  6482.,  6912.,
      5778.,  6132.,  4224.,  4456.,  5160.,  5460.,  6064.,  6436.,  6928.,
      7376.,  7328.,  7804.,  6040.,  6460.,  4848.,  5208.,  3760.,  4056.,
      3568.,  3800.,  5056.,  5356.,  6520.,  6892.,  7952.,  8400.,  8440.,
      8916.,  8000.,  8420.,  7136.,  7496.,  6368.,  6664.,  4918.,  5224.,
      6159.,  6554.,  7887.,  8376.,  9580.,  10168., 10153., 10776., 9349.,
      9898.,  7906.,  8376.,  6602.,  6988.,  6512.,  6924.,  8340.,  8870.,
      10880., 11534., 13352., 14136., 14072., 14898., 13020., 13746., 11112.,
      11732., 9384.,  9892.,  6814.,  7236.,  8735.,  9280.,  10603., 11278.,
      12404., 13216., 13173., 14034., 11493., 12252., 9730.,  10380., 8154.,
      8688.,  5150.,  5540.,  6951.,  7456.,  8971.,  9598.,  10940., 11696.,
      11709., 12514., 10725., 11436., 9386.,  9996.,  8218.,  8720.,  6046.,
      6404.,  7599.,  8064.,  9643.,  10222., 11652., 12352., 12421., 13170.,
      11237., 11900., 9426.,  9996.,  7770.,  8240.,  4648.,  4996.,  5848.,
      6298.,  7772.,  8330.,  9640.,  10312., 10252., 10966., 8904.,  9534.,
      7712.,  8252.,  6688.,  7132.,  4926.,  5232.,  6395.,  6790.,  7827.,
      8316.,  9212.,  9800.,  9733.,  10356., 8441.,  8990.,  7290.,  7760.,
      6290.,  6676.,  3072.,  3304.,  3720.,  4020.,  4592.,  4964.,  5424.,
      5872.,  5824.,  6300.,  4824.,  5244.,  3920.,  4280.,  3120.,  3416.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682., 12404.,
      13216., 13173., 14034., 13996., 14864., 14765., 15682., 12404., 13216.,
      13173., 14034., 10940., 11696., 11709., 12514., 12404., 13216., 13173.,
      14034., 10940., 11696., 11709., 12514., 11652., 12352., 12421., 13170.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5974.,  6396.,
      6818.,  7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198., 10873.,
      11548., 11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.,
      11059., 11818., 12577., 13336., 9914.,  10564., 11214., 11864., 8222.,
      8756.,  9290.,  9824.,  4468.,  4816.,  5164.,  5512.,  6158.,  6608.,
      7058.,  7508.,  7914.,  8472.,  9030.,  9588.,  9488.,  10160., 10832.,
      11504., 10094., 10808., 11522., 12236., 8730.,  9360.,  9990.,  10620.,
      7780.,  8320.,  8860.,  9400.,  6980.,  7424.,  7868.,  8312.,  2538.,
      2780.,  3022.,  3264.,  3611.,  3926.,  4241.,  4556.,  5085.,  5478.,
      5871.,  6264.,  6716.,  7192.,  7668.,  8144.,  7211.,  7722.,  8233.,
      8744.,  6189.,  6642.,  7095.,  7548.,  5454.,  5844.,  6234.,  6624.,
      5026.,  5348.,  5670.,  5992.,  3224.,  3456.,  3688.,  3920.,  3652.,
      3952.,  4252.,  4552.,  4716.,  5088.,  5460.,  5832.,  6176.,  6624.,
      7072.,  7520.,  6564.,  7040.,  7516.,  7992.,  5324.,  5744.,  6164.,
      6584.,  4344.,  4704.,  5064.,  5424.,  3640.,  3936.,  4232.,  4528.,
      2808.,  3040.,  3272.,  3504.,  4244.,  4544.,  4844.,  5144.,  5564.,
      5936.,  6308.,  6680.,  6752.,  7200.,  7648.,  8096.,  7188.,  7664.,
      8140.,  8616.,  7004.,  7424.,  7844.,  8264.,  6840.,  7200.,  7560.,
      7920.,  5912.,  6208.,  6504.,  6800.,  3034.,  3308.,  3582.,  3856.,
      4587.,  4942.,  5297.,  5652.,  6277.,  6718.,  7159.,  7600.,  7828.,
      8360.,  8892.,  9424.,  8363.,  8930.,  9497.,  10064., 7925.,  8426.,
      8927.,  9428.,  7302.,  7732.,  8162.,  8592.,  6738.,  7092.,  7446.,
      7800.,  4292.,  4640.,  4988.,  5336.,  5894.,  6344.,  6794.,  7244.,
      7826.,  8384.,  8942.,  9500.,  9840.,  10512., 11184., 11856., 10470.,
      11184., 11898., 12612., 9698.,  10328., 10958., 11588., 8564.,  9104.,
      9644.,  10184., 7316.,  7760.,  8204.,  8648.,  6710.,  7164.,  7618.,
      8072.,  8325.,  8910.,  9495.,  10080., 10435., 11158., 11881., 12604.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260., 12291.,
      13098., 13905., 14712., 10562., 11252., 11942., 12632., 8574.,  9140.,
      9706.,  10272., 5974.,  6396.,  6818.,  7240.,  7869.,  8414.,  8959.,
      9504.,  9523.,  10198., 10873., 11548., 11708., 12520., 13332., 14144.,
      12429., 13290., 14151., 15012., 11059., 11818., 12577., 13336., 9914.,
      10564., 11214., 11864., 8222.,  8756.,  9290.,  9824.,  5238.,  5628.,
      6018.,  6408.,  7157.,  7662.,  8167.,  8672.,  9123.,  9750.,  10377.,
      11004., 10884., 11640., 12396., 13152., 11605., 12410., 13215., 14020.,
      10339., 11050., 11761., 12472., 9010.,  9620.,  10230., 10840., 7870.,
      8372.,  8874.,  9376.,  3124.,  3408.,  3692.,  3976.,  4446.,  4816.,
      5186.,  5556.,  6154.,  6616.,  7078.,  7540.,  8000.,  8560.,  9120.,
      9680.,  8606.,  9208.,  9810.,  10412., 7610.,  8144.,  8678.,  9212.,
      6964.,  7424.,  7884.,  8344.,  6148.,  6528.,  6908.,  7288.,  3658.,
      3932.,  4206.,  4480.,  4355.,  4710.,  5065.,  5420.,  5677.,  6118.,
      6559.,  7000.,  7380.,  7912.,  8444.,  8976.,  7875.,  8442.,  9009.,
      9576.,  6589.,  7090.,  7591.,  8092.,  5622.,  6052.,  6482.,  6912.,
      4994.,  5348.,  5702.,  6056.,  3480.,  3712.,  3944.,  4176.,  4228.,
      4528.,  4828.,  5128.,  4844.,  5216.,  5588.,  5960.,  6112.,  6560.,
      7008.,  7456.,  6500.,  6976.,  7452.,  7928.,  5196.,  5616.,  6036.,
      6456.,  4152.,  4512.,  4872.,  5232.,  3384.,  3680.,  3976.,  4272.,
      2552.,  2784.,  3016.,  3248.,  4052.,  4352.,  4652.,  4952.,  5436.,
      5808.,  6180.,  6552.,  6688.,  7136.,  7584.,  8032.,  7124.,  7600.,
      8076.,  8552.,  6876.,  7296.,  7716.,  8136.,  6392.,  6752.,  7112.,
      7472.,  5912.,  6208.,  6504.,  6800.,  3642.,  3948.,  4254.,  4560.,
      5139.,  5534.,  5929.,  6324.,  6997.,  7486.,  7975.,  8464.,  8684.,
      9272.,  9860.,  10448., 9219.,  9842.,  10465., 11088., 8709.,  9258.,
      9807.,  10356., 7790.,  8260.,  8730.,  9200.,  6706.,  7092.,  7478.,
      7864.,  5892.,  6304.,  6716.,  7128.,  7350.,  7880.,  8410.,  8940.,
      9330.,  9984.,  10638., 11292., 11584., 12368., 13152., 13936., 12214.,
      13040., 13866., 14692., 11330., 12056., 12782., 13508., 9892.,  10512.,
      11132., 11752., 8148.,  8656.,  9164.,  9672.,  5974.,  6396.,  6818.,
      7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198., 10873., 11548.,
      11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012., 11059.,
      11818., 12577., 13336., 9914.,  10564., 11214., 11864., 8222.,  8756.,
      9290.,  9824.,  5238.,  5628.,  6018.,  6408.,  7157.,  7662.,  8167.,
      8672.,  9123.,  9750.,  10377., 11004., 10884., 11640., 12396., 13152.,
      11605., 12410., 13215., 14020., 10339., 11050., 11761., 12472., 9010.,
      9620.,  10230., 10840., 7870.,  8372.,  8874.,  9376.,  4502.,  4860.,
      5218.,  5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,
      9948.,  10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      10131., 10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,
      7988.,  8458.,  8928.,  4724.,  5072.,  5420.,  5768.,  5838.,  6288.,
      6738.,  7188.,  7530.,  8088.,  8646.,  9204.,  9552.,  10224., 10896.,
      11568., 10158., 10872., 11586., 12300., 8858.,  9488.,  10118., 10748.,
      7972.,  8512.,  9052.,  9592.,  6724.,  7168.,  7612.,  8056.,  4266.,
      4572.,  4878.,  5184.,  5483.,  5878.,  6273.,  6668.,  6525.,  7014.,
      7503.,  7992.,  8172.,  8760.,  9348.,  9936.,  8667.,  9290.,  9913.,
      10536., 7245.,  7794.,  8343.,  8892.,  6174.,  6644.,  7114.,  7584.,
      5474.,  5860.,  6246.,  6632.,  3224.,  3456.,  3688.,  3920.,  4164.,
      4464.,  4764.,  5064.,  5228.,  5600.,  5972.,  6344.,  6176.,  6624.,
      7072.,  7520.,  6564.,  7040.,  7516.,  7992.,  5324.,  5744.,  6164.,
      6584.,  4344.,  4704.,  5064.,  5424.,  3640.,  3936.,  4232.,  4528.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 12788.,
      13656., 14524., 15392., 13509., 14426., 15343., 16260., 11708., 12520.,
      13332., 14144., 12429., 13290., 14151., 15012., 12788., 13656., 14524.,
      15392., 13509., 14426., 15343., 16260., 11708., 12520., 13332., 14144.,
      12429., 13290., 14151., 15012., 10884., 11640., 12396., 13152., 11605.,
      12410., 13215., 14020., 11708., 12520., 13332., 14144., 12429., 13290.,
      14151., 15012., 10884., 11640., 12396., 13152., 11605., 12410., 13215.,
      14020., 10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 6784.,  9628.,  13696., 17948., 20480., 18632.,
      17000., 15632., 8388.,  10885., 13606., 16543., 18697., 16434., 14331.,
      12428., 4576.,  5920.,  8400.,  10992., 12648., 10976., 9416.,  8000.,
      7040.,  9272.,  11680., 14232., 16240., 15120., 13088., 11168., 7636.,
      10921., 15438., 20155., 22517., 22266., 20175., 18300., 11376., 14792.,
      18488., 22448., 25412., 23072., 19876., 16864., 10324., 14421., 19774.,
      25335., 28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463.,
      26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335., 28509.,
      27202., 24095., 21260., 11136., 14300., 17664., 21212., 23744., 20552.,
      17576., 14864., 6148.,  8693.,  12422., 16303., 18457., 16914., 15595.,
      14540., 8160.,  10400., 12752., 15216., 16872., 14304., 11848., 9536.,
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 6784.,  9628.,  13696., 17948., 20480., 18632.,
      17000., 15632., 8388.,  10885., 13606., 16543., 18697., 16434., 14331.,
      12428., 4576.,  5920.,  8400.,  10992., 12648., 10976., 9416.,  8000.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23463., 26637., 25335., 28509., 23463., 26637., 25335., 28509., 23463.,
      26637., 25335., 28509., 23463., 26637., 25335., 28509., 23463., 26637.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 8712.,  9312.,  11566.,
      12376., 15468., 16512., 19426., 20728., 22018., 23488., 19516., 20848.,
      17854., 19024., 16008., 16992., 5748.,  6184.,  8215.,  8810.,  10758.,
      11532., 14449., 15422., 16569., 17682., 14382., 15396., 12791., 13686.,
      11876., 12632., 6448.,  6848.,  7876.,  8416.,  10312., 11008., 12796.,
      13664., 14460., 15440., 11912., 12800., 9860.,  10640., 8368.,  9024.,
      4784.,  5184.,  7636.,  8176.,  10568., 11264., 13516., 14384., 15372.,
      16352., 15464., 16352., 15124., 15904., 13264., 13920., 7860.,  8424.,
      10719., 11474., 14646., 15612., 18569., 19766., 20849., 22186., 20414.,
      21620., 18719., 19774., 16740., 17624., 8008.,  8608.,  11526., 12336.,
      15100., 16144., 19786., 21088., 22474., 23944., 21292., 22624., 19926.,
      21096., 17320., 18304., 11884., 12648., 15689., 16714., 20474., 21788.,
      25231., 26862., 28311., 30138., 26162., 27812., 22969., 24414., 19740.,
      20952., 8812.,  9448.,  12681., 13546., 16634., 17756., 21711., 23118.,
      24791., 26394., 23090., 24548., 21241., 22526., 18204., 19288., 11884.,
      12648., 15689., 16714., 20474., 21788., 25231., 26862., 28311., 30138.,
      26162., 27812., 22969., 24414., 19740., 20952., 8200.,  8800.,  11694.,
      12504., 15212., 16256., 19810., 21112., 22402., 23872., 20284., 21616.,
      19006., 20176., 16520., 17504., 8308.,  8872.,  10839., 11594., 14342.,
      15308., 17841., 19038., 19961., 21298., 17198., 18404., 15159., 16214.,
      13924., 14808., 5424.,  5824.,  7620.,  8160.,  9800.,  10496., 13052.,
      13920., 14716., 15696., 12424., 13312., 10628., 11408., 9392.,  10048.,
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 8712.,  9312.,  11566.,
      12376., 15468., 16512., 19426., 20728., 22018., 23488., 19516., 20848.,
      17854., 19024., 16008., 16992., 5748.,  6184.,  8215.,  8810.,  10758.,
      11532., 14449., 15422., 16569., 17682., 14382., 15396., 12791., 13686.,
      11876., 12632., 6448.,  6848.,  7876.,  8416.,  10312., 11008., 12796.,
      13664., 14460., 15440., 11912., 12800., 9860.,  10640., 8368.,  9024.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138., 21711.,
      23118., 24791., 26394., 25231., 26862., 28311., 30138., 21711., 23118.,
      24791., 26394., 25231., 26862., 28311., 30138., 21711., 23118., 24791.,
      26394., 25231., 26862., 28311., 30138., 21711., 23118., 24791., 26394.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 8920.,  9520.,  10120., 10720., 11954., 12764.,
      13574., 14384., 15556., 16600., 17644., 18688., 18734., 20036., 21338.,
      22640., 21190., 22660., 24130., 25600., 19172., 20504., 21836., 23168.,
      17098., 18268., 19438., 20608., 14936., 15920., 16904., 17888., 6548.,
      6984.,  7420.,  7856.,  9211.,  9806.,  10401., 10996., 11654., 12428.,
      13202., 13976., 14869., 15842., 16815., 17788., 16921., 18034., 19147.,
      20260., 14982., 15996., 17010., 18024., 13519., 14414., 15309., 16204.,
      11540., 12296., 13052., 13808., 6032.,  6432.,  6832.,  7232.,  7884.,
      8424.,  8964.,  9504.,  10488., 11184., 11880., 12576., 12820., 13688.,
      14556., 15424., 14500., 15480., 16460., 17440., 13368., 14256., 15144.,
      16032., 11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840.,
      6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488.,
      11184., 11880., 12576., 13332., 14200., 15068., 15936., 15012., 15992.,
      16972., 17952., 13368., 14256., 15144., 16032., 11996., 12776., 13556.,
      14336., 9872.,  10528., 11184., 11840., 8468.,  9032.,  9596.,  10160.,
      10667., 11422., 12177., 12932., 14470., 15436., 16402., 17368., 17829.,
      19026., 20223., 21420., 19945., 21282., 22619., 23956., 19046., 20252.,
      21458., 22664., 15775., 16830., 17885., 18940., 13204., 14088., 14972.,
      15856., 8920.,  9520.,  10120., 10720., 12162., 12972., 13782., 14592.,
      14980., 16024., 17068., 18112., 19486., 20788., 22090., 23392., 22006.,
      23476., 24946., 26416., 20356., 21688., 23020., 24352., 18618., 19788.,
      20958., 22128., 14680., 15664., 16648., 17632., 11356., 12120., 12884.,
      13648., 14737., 15762., 16787., 17812., 19538., 20852., 22166., 23480.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116., 24850.,
      26500., 28150., 29800., 21389., 22834., 24279., 25724., 18268., 19480.,
      20692., 21904., 9436.,  10072., 10708., 11344., 12977., 13842., 14707.,
      15572., 16146., 17268., 18390., 19512., 21023., 22430., 23837., 25244.,
      23915., 25518., 27121., 28724., 21970., 23428., 24886., 26344., 20141.,
      21426., 22711., 23996., 16348., 17432., 18516., 19600., 11356., 12120.,
      12884., 13648., 14737., 15762., 16787., 17812., 19538., 20852., 22166.,
      23480., 23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      24850., 26500., 28150., 29800., 21389., 22834., 24279., 25724., 18268.,
      19480., 20692., 21904., 8920.,  9520.,  10120., 10720., 12210., 13020.,
      13830., 14640., 15044., 16088., 17132., 18176., 19502., 20804., 22106.,
      23408., 21958., 23428., 24898., 26368., 19684., 21016., 22348., 23680.,
      18378., 19548., 20718., 21888., 14936., 15920., 16904., 17888., 8468.,
      9032.,  9596.,  10160., 11227., 11982., 12737., 13492., 14534., 15500.,
      16466., 17432., 17333., 18530., 19727., 20924., 19385., 20722., 22059.,
      23396., 17350., 18556., 19762., 20968., 15023., 16078., 17133., 18188.,
      13460., 14344., 15228., 16112., 6032.,  6432.,  6832.,  7232.,  8396.,
      8936.,  9476.,  10016., 10488., 11184., 11880., 12576., 13332., 14200.,
      15068., 15936., 15012., 15992., 16972., 17952., 13368., 14256., 15144.,
      16032., 11996., 12776., 13556., 14336., 9872.,  10528., 11184., 11840.,
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 8920.,  9520.,  10120., 10720., 11954., 12764.,
      13574., 14384., 15556., 16600., 17644., 18688., 18734., 20036., 21338.,
      22640., 21190., 22660., 24130., 25600., 19172., 20504., 21836., 23168.,
      17098., 18268., 19438., 20608., 14936., 15920., 16904., 17888., 6548.,
      6984.,  7420.,  7856.,  9211.,  9806.,  10401., 10996., 11654., 12428.,
      13202., 13976., 14869., 15842., 16815., 17788., 16921., 18034., 19147.,
      20260., 14982., 15996., 17010., 18024., 13519., 14414., 15309., 16204.,
      11540., 12296., 13052., 13808., 6032.,  6432.,  6832.,  7232.,  7884.,
      8424.,  8964.,  9504.,  10488., 11184., 11880., 12576., 12820., 13688.,
      14556., 15424., 14500., 15480., 16460., 17440., 13368., 14256., 15144.,
      16032., 11484., 12264., 13044., 13824., 9872.,  10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 23743.,
      25374., 27005., 28636., 26635., 28462., 30289., 32116., 21023., 22430.,
      23837., 25244., 23915., 25518., 27121., 28724., 23743., 25374., 27005.,
      28636., 26635., 28462., 30289., 32116., 21023., 22430., 23837., 25244.,
      23915., 25518., 27121., 28724., 23743., 25374., 27005., 28636., 26635.,
      28462., 30289., 32116., 21023., 22430., 23837., 25244., 23915., 25518.,
      27121., 28724., 23743., 25374., 27005., 28636., 26635., 28462., 30289.,
      32116., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5064.,  5968.,  7416.,  9048.,  8144., 6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422., 5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800., 7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912., 8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866., 10460., 12758., 15134.,
      14284., 12026., 8296.,  6800.,  7340.,  9128., 11172., 12980., 11496.,
      10300., 7312.,  5816.,  6158.,  7428.,  9562., 11122., 9620.,  7958.,
      6200.,  4704.,  5064.,  5968.,  7416.,  9048., 8144.,  6696.,  4704.,
      4704.,  5064.,  5968.,  7416.,  9048.,  8144., 6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422., 5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800., 7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912., 8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866., 10460., 12758., 15134.,
      14284., 12026., 8296.,  6800.,  7340.,  9128., 11172., 12980., 11496.,
      10300., 7312.,  5816.,  6158.,  7428.,  9562., 11122., 9620.,  7958.,
      6200.,  4704.,  5064.,  5968.,  7416.,  9048., 8144.,  6696.,  4704.,
      4704.,  5064.,  5968.,  7416.,  9048.,  8144., 6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422., 5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800., 7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912., 8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866., 10460., 12758., 15134.,
      14284., 12026., 8296.,  6800.,  7340.,  9128., 11172., 12980., 11496.,
      10300., 7312.,  5816.,  6158.,  7428.,  9562., 11122., 9620.,  7958.,
      6200.,  4704.,  5064.,  5968.,  7416.,  9048., 8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12758., 15134., 12758., 15134., 12758., 15134., 12758., 15134., 12758.,
      15134., 12758., 15134., 12758., 15134., 12758., 15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,
      8184.,  8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104.,
      9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,
      7848.,  8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,
      5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,
      7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,
      8184.,  8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104.,
      9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,
      7848.,  8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,
      5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,
      7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,
      8184.,  8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104.,
      9612.,  10776., 6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,
      7848.,  8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,
      5768.,  6448.,  4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,
      7984.,  8664.,  9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700., 12498.,
      13996., 14866., 16700., 12498., 13996., 14866., 16700., 12498., 13996.,
      14866., 16700., 12498., 13996., 14866., 16700., 12498., 13996., 14866.,
      16700., 12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,  7608.,
      8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396.,
      13680., 11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880.,
      8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  5160.,
      5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,
      8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180., 12490.,
      13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,  10200.,
      5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4488.,
      5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,
      8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,
      9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,  7608.,
      8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396.,
      13680., 11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880.,
      8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  5160.,
      5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,
      8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180., 12490.,
      13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,  10200.,
      5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4488.,
      5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,
      8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,
      9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,  7608.,
      8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396.,
      13680., 11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880.,
      8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  5160.,
      5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,
      8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180., 12490.,
      13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,  10200.,
      5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4488.,
      5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,  7408.,
      8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,  8976.,
      9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466.,
      12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466., 12964.,
      14462., 15960., 13818., 15652., 17486., 19320., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 11466., 12964., 14462., 15960., 13818.,
      15652., 17486., 19320., 11466., 12964., 14462., 15960., 13818., 15652.,
      17486., 19320., 11466., 12964., 14462., 15960., 13818., 15652., 17486.,
      19320., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648.,  4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180.,  6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680.,  7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722.,  7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551.,  7186., 5890.,
      5920., 7866., 9370.,  10905., 11074., 11403., 10068., 8794., 7588.,
      6200., 7474., 8536.,  9636.,  9131.,  9586.,  8256.,  6976., 5752.,
      4164., 5251., 6372.,  7522.,  7352.,  7886.,  7022.,  6181., 5368.,
      3392., 4104., 4824.,  5548.,  5474.,  5880.,  4984.,  4100., 3232.,
      4208., 5910., 7624.,  9250.,  9636.,  10054., 8208.,  6402., 4640.,
      6678., 8438., 10205., 11078., 10790., 10534., 8845.,  7206., 5622.,
      6072., 7633., 9212.,  10131., 9760.,  9453.,  8192.,  6975., 5808.,
      5786., 7596., 9419.,  10800., 10905., 11074., 9807.,  8594., 7442.,
      7056., 9514., 10962., 12193., 11722., 11315., 9692.,  8122., 6612.,
      7046., 8552., 10073., 11602., 11003., 10468., 9033.,  7650., 6326.,
      5344., 6725., 8112.,  9499.,  9250.,  9065.,  8052.,  7095., 6200.,
      5002., 6638., 8287.,  9944.,  10094., 10308., 9387.,  7486., 5634.,
      5152., 6334., 7520.,  8706.,  8152.,  7662.,  6312.,  4978., 3664.,
      3136., 3824., 4552.,  5316.,  5350.,  5416.,  4696.,  4340., 4000.,
      3892., 5183., 6524.,  7910.,  8294.,  8710.,  7886.,  7197., 6520.,
      6120., 8342., 10608., 11888., 11549., 11242., 8912.,  7528., 6168.,
      7520., 8890., 10282., 11689., 11602., 11003., 8932.,  7610., 6340.,
      5878., 7224., 8593.,  9978.,  10115., 9964.,  8433.,  7426., 6470.,
      6028., 7798., 9592.,  11403., 11764., 12061., 10622., 9482., 7368.,
      5608., 6904., 8232.,  9586.,  10073., 9696.,  8296.,  6958., 5656.,
      3952., 5241., 6554.,  7886.,  8420.,  8282.,  7304.,  6359., 5452.,
      3328., 4180., 5032.,  5880.,  6286.,  6244.,  5240.,  4256., 3296.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11959., 11808., 11689., 10152., 9873.,  9978.,  10905., 11074., 11403.,
      10800., 10905., 11074., 12193., 11722., 11315., 11602., 11003., 10468.,
      11689., 11602., 11003., 9978.,  10115., 9964.,  11403., 11764., 12061.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      7438.,  7904.,  9540.,  10132., 10847., 11540., 12145., 12946., 11954.,
      12740., 12051., 12854., 10709., 11400., 9016.,  9588.,  7530.,  7976.,
      5872.,  6256.,  6845.,  7332.,  7772.,  8336.,  8705.,  9352.,  8229.,
      8854.,  8617.,  9252.,  7296.,  7840.,  6145.,  6592.,  5176.,  5520.,
      3422.,  3688.,  4213.,  4550.,  5707.,  6120.,  7190.,  7684.,  7359.,
      7856.,  7880.,  8412.,  7013.,  7484.,  6261.,  6666.,  5634.,  5968.,
      3984.,  4224.,  4802.,  5104.,  6592.,  6960.,  7330.,  7768.,  6802.,
      7236.,  7202.,  7664.,  5944.,  6352.,  4778.,  5128.,  3712.,  4000.,
      4272.,  4544.,  5966.,  6316.,  7616.,  8048.,  9054.,  9540.,  9446.,
      9928.,  9902.,  10380., 8488.,  8896.,  6518.,  6852.,  4672.,  4928.,
      5918.,  6284.,  7446.,  7916.,  9463.,  10042., 10679., 11340., 10580.,
      11244., 10545., 11212., 9725.,  10298., 8114.,  8588.,  6682.,  7052.,
      6880.,  7312.,  8167.,  8706.,  10252., 10904., 12003., 12742., 11763.,
      12480., 11651., 12346., 10504., 11104., 9291.,  9790.,  7224.,  7616.,
      7486.,  7956.,  9419.,  10008., 11403., 12118., 12464., 13280., 12145.,
      12946., 11954., 12740., 10645., 11326., 9003.,  9572.,  7554.,  8004.,
      7150.,  7616.,  9516.,  10100., 11199., 11908., 12409., 13218., 11962.,
      12756., 11643., 12422., 10485., 11160., 8704.,  9268.,  7114.,  7560.,
      7326.,  7788.,  8973.,  9552.,  11251., 11954., 13474., 14308., 13795.,
      14614., 13220., 14024., 11253., 11954., 9397.,  9988.,  7730.,  8204.,
      6376.,  6816.,  7973.,  8522.,  10472., 11136., 12901., 13686., 11913.,
      12676., 11053., 11794., 9412.,  10056., 7953.,  8494.,  6688.,  7120.,
      5206.,  5588.,  6466.,  6940.,  7907.,  8478.,  9295.,  9968.,  9112.,
      9756.,  9057.,  9672.,  8161.,  8694.,  6398.,  6844.,  4802.,  5156.,
      4128.,  4416.,  4794.,  5148.,  5944.,  6368.,  7058.,  7556.,  6626.,
      7088.,  6322.,  6748.,  5248.,  5616.,  4274.,  4580.,  3408.,  3648.,
      5024.,  5280.,  5678.,  5984.,  6344.,  6704.,  7014.,  7432.,  6702.,
      7116.,  6454.,  6864.,  5312.,  5648.,  4710.,  5000.,  4176.,  4416.,
      4198.,  4488.,  5247.,  5598.,  6391.,  6808.,  7556.,  8044.,  7777.,
      8268.,  8062.,  8556.,  7521.,  7932.,  6807.,  7162.,  6186.,  6480.,
      5704.,  6064.,  7731.,  8172.,  10128., 10656., 11507., 12128., 11299.,
      11930., 11155., 11796., 9508.,  10048., 7999.,  8464.,  6608.,  6992.,
      7566.,  8032.,  9044.,  9620.,  11135., 11828., 13185., 14002., 13474.,
      14308., 13795., 14614., 11509., 12200., 9704.,  10292., 8074.,  8552.,
      6526.,  6988.,  8117.,  8688.,  10611., 11298., 13066., 13876., 13803.,
      14630., 12972., 13784., 10581., 11266., 8957.,  9540.,  7506.,  7980.,
      7022.,  7480.,  8598.,  9164.,  10343., 11024., 12051., 12854., 12212.,
      13032., 12277., 13082., 10933., 11612., 9618.,  10196., 7450.,  7920.,
      5152.,  5520.,  5997.,  6448.,  7316.,  7856.,  8617.,  9252.,  9069.,
      9714.,  8849.,  9472.,  7528.,  8048.,  6369.,  6812.,  5352.,  5712.,
      3438.,  3712.,  4431.,  4786.,  6171.,  6612.,  7880.,  8412.,  8401.,
      8968.,  8634.,  9204.,  7677.,  8176.,  6855.,  7278.,  6178.,  6520.,
      4368.,  4608.,  5330.,  5640.,  6288.,  6672.,  7202.,  7664.,  7602.,
      8092.,  7138.,  7624.,  5800.,  6224.,  4570.,  4928.,  3456.,  3744.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12799., 13582., 12960., 13760., 13185., 14002., 12456., 13264., 12393.,
      13186., 13066., 13876., 12145., 12946., 11954., 12740., 12051., 12854.,
      12464., 13280., 12145., 12946., 11954., 12740., 12409., 13218., 11962.,
      12756., 11643., 12422., 13474., 14308., 13795., 14614., 13220., 14024.,
      13185., 14002., 13474., 14308., 13795., 14614., 13066., 13876., 13803.,
      14630., 12972., 13784., 12051., 12854., 12212., 13032., 12277., 13082.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6794.,  7260.,  7726.,  8192.,  8504.,  9096.,  9688.,  10280., 9417.,
      10110., 10803., 11496., 11073., 11874., 12675., 13476., 10962., 11748.,
      12534., 13320., 11395., 12198., 13001., 13804., 10263., 10954., 11645.,
      12336., 9108.,  9680.,  10252., 10824., 7190.,  7636.,  8082.,  8528.,
      5632.,  6016.,  6400.,  6784.,  6963.,  7450.,  7937.,  8424.,  7716.,
      8280.,  8844.,  9408.,  8539.,  9186.,  9833.,  10480., 8057.,  8682.,
      9307.,  9932.,  8247.,  8882.,  9517.,  10152., 7168.,  7712.,  8256.,
      8800.,  6531.,  6978.,  7425.,  7872.,  5784.,  6128.,  6472.,  6816.,
      3090.,  3356.,  3622.,  3888.,  4601.,  4938.,  5275.,  5612.,  5689.,
      6102.,  6515.,  6928.,  7102.,  7596.,  8090.,  8584.,  6925.,  7422.,
      7919.,  8416.,  7420.,  7952.,  8484.,  9016.,  6259.,  6730.,  7201.,
      7672.,  5397.,  5802.,  6207.,  6612.,  4854.,  5188.,  5522.,  5856.,
      3248.,  3488.,  3728.,  3968.,  3830.,  4132.,  4434.,  4736.,  5296.,
      5664.,  6032.,  6400.,  6350.,  6788.,  7226.,  7664.,  5938.,  6372.,
      6806.,  7240.,  6326.,  6788.,  7250.,  7712.,  5080.,  5488.,  5896.,
      6304.,  4086.,  4436.,  4786.,  5136.,  3360.,  3648.,  3936.,  4224.,
      3152.,  3424.,  3696.,  3968.,  4862.,  5212.,  5562.,  5912.,  6416.,
      6848.,  7280.,  7712.,  7510.,  7996.,  8482.,  8968.,  7786.,  8268.,
      8750.,  9232.,  8190.,  8668.,  9146.,  9624.,  7224.,  7632.,  8040.,
      8448.,  5918.,  6252.,  6586.,  6920.,  4544.,  4800.,  5056.,  5312.,
      4494.,  4860.,  5226.,  5592.,  6294.,  6764.,  7234.,  7704.,  8427.,
      9006.,  9585.,  10164., 9913.,  10574., 11235., 11896., 10160., 10824.,
      11488., 12152., 10535., 11202., 11869., 12536., 10269., 10842., 11415.,
      11988., 8458.,  8932.,  9406.,  9880.,  6402.,  6772.,  7142.,  7512.,
      6096.,  6528.,  6960.,  7392.,  7155.,  7694.,  8233.,  8772.,  8844.,
      9496.,  10148., 10800., 10339., 11078., 11817., 12556., 10137., 10854.,
      11571., 12288., 10191., 10886., 11581., 12276., 9496.,  10096., 10696.,
      11296., 9027.,  9526.,  10025., 10524., 7016.,  7408.,  7800.,  8192.,
      7334.,  7804.,  8274.,  8744.,  8809.,  9398.,  9987.,  10576., 10155.,
      10870., 11585., 12300., 11440., 12256., 13072., 13888., 11073., 11874.,
      12675., 13476., 10962., 11748., 12534., 13320., 9793.,  10474., 11155.,
      11836., 8605.,  9174.,  9743.,  10312., 7682.,  8132.,  8582.,  9032.,
      6730.,  7196.,  7662.,  8128.,  9232.,  9816.,  10400., 10984., 10873.,
      11582., 12291., 13000., 11593., 12402., 13211., 14020., 10970., 11764.,
      12558., 13352., 10603., 11382., 12161., 12940., 9575.,  10250., 10925.,
      11600., 8236.,  8800.,  9364.,  9928.,  6870.,  7316.,  7762.,  8208.,
      6126.,  6588.,  7050.,  7512.,  8375.,  8954.,  9533.,  10112., 11079.,
      11782., 12485., 13188., 12930., 13764., 14598., 15432., 12819., 13638.,
      14457., 15276., 11940., 12744., 13548., 14352., 10157., 10858., 11559.,
      12260., 8795.,  9386.,  9977.,  10568., 7114.,  7588.,  8062.,  8536.,
      5720.,  6160.,  6600.,  7040.,  7205.,  7754.,  8303.,  8852.,  9432.,
      10096., 10760., 11424., 12121., 12906., 13691., 14476., 11639., 12402.,
      13165., 13928., 11413., 12154., 12895., 13636., 9284.,  9928.,  10572.,
      11216., 7621.,  8162.,  8703.,  9244.,  6352.,  6784.,  7216.,  7648.,
      4718.,  5100.,  5482.,  5864.,  6058.,  6532.,  7006.,  7480.,  7435.,
      8006.,  8577.,  9148.,  9597.,  10270., 10943., 11616., 9772.,  10416.,
      11060., 11704., 9179.,  9794.,  10409., 11024., 8045.,  8578.,  9111.,
      9644.,  6270.,  6716.,  7162.,  7608.,  4898.,  5252.,  5606.,  5960.,
      3232.,  3520.,  3808.,  4096.,  3986.,  4340.,  4694.,  5048.,  5128.,
      5552.,  5976.,  6400.,  6386.,  6884.,  7382.,  7880.,  6198.,  6660.,
      7122.,  7584.,  6266.,  6692.,  7118.,  7544.,  5456.,  5824.,  6192.,
      6560.,  4914.,  5220.,  5526.,  5832.,  3632.,  3872.,  4112.,  4352.,
      4352.,  4608.,  4864.,  5120.,  4970.,  5276.,  5582.,  5888.,  5544.,
      5904.,  6264.,  6624.,  6058.,  6476.,  6894.,  7312.,  5950.,  6364.,
      6778.,  7192.,  5970.,  6380.,  6790.,  7200.,  5616.,  5952.,  6288.,
      6624.,  5578.,  5868.,  6158.,  6448.,  4816.,  5056.,  5296.,  5536.,
      3882.,  4172.,  4462.,  4752.,  5727.,  6078.,  6429.,  6780.,  6573.,
      6990.,  7407.,  7824.,  7360.,  7848.,  8336.,  8824.,  7223.,  7714.,
      8205.,  8696.,  7214.,  7708.,  8202.,  8696.,  6535.,  6946.,  7357.,
      7768.,  6059.,  6414.,  6769.,  7124.,  5646.,  5940.,  6234.,  6528.,
      4392.,  4752.,  5112.,  5472.,  6349.,  6790.,  7231.,  7672.,  8560.,
      9088.,  9616.,  10144., 9721.,  10342., 10963., 11584., 9551.,  10182.,
      10813., 11444., 9509.,  10150., 10791., 11432., 8428.,  8968.,  9508.,
      10048., 7469.,  7934.,  8399.,  8864.,  6368.,  6752.,  7136.,  7520.,
      6026.,  6492.,  6958.,  7424.,  8040.,  8616.,  9192.,  9768.,  10505.,
      11198., 11891., 12584., 13137., 13954., 14771., 15588., 12930., 13764.,
      14598., 15432., 12819., 13638., 14457., 15276., 10327., 11018., 11709.,
      12400., 8932.,  9520.,  10108., 10696., 7222.,  7700.,  8178.,  8656.,
      6062.,  6524.,  6986.,  7448.,  7439.,  8010.,  8581.,  9152.,  9559.,
      10246., 10933., 11620., 12138., 12948., 13758., 14568., 12827., 13654.,
      14481., 15308., 12460., 13272., 14084., 14896., 10621., 11306., 11991.,
      12676., 8691.,  9274.,  9857.,  10440., 7178.,  7652.,  8126.,  8600.,
      6098.,  6556.,  7014.,  7472.,  7606.,  8172.,  8738.,  9304.,  9125.,
      9806.,  10487., 11168., 11395., 12198., 13001., 13804., 11956., 12776.,
      13596., 14416., 12357., 13162., 13967., 14772., 10403., 11082., 11761.,
      12440., 9218.,  9796.,  10374., 10952., 7134.,  7604.,  8074.,  8544.,
      4528.,  4896.,  5264.,  5632.,  5495.,  5946.,  6397.,  6848.,  6828.,
      7368.,  7908.,  8448.,  8247.,  8882.,  9517.,  10152., 8565.,  9210.,
      9855.,  10500., 8595.,  9218.,  9841.,  10464., 7720.,  8240.,  8760.,
      9280.,  7239.,  7682.,  8125.,  8568.,  6504.,  6864.,  7224.,  7584.,
      3562.,  3836.,  4110.,  4384.,  4315.,  4670.,  5025.,  5380.,  5693.,
      6134.,  6575.,  7016.,  7420.,  7952.,  8484.,  9016.,  7915.,  8482.,
      9049.,  9616.,  7866.,  8436.,  9006.,  9576.,  6663.,  7162.,  7661.,
      8160.,  5799.,  6222.,  6645.,  7068.,  5294.,  5636.,  5978.,  6320.,
      3504.,  3744.,  3984.,  4224.,  4302.,  4612.,  4922.,  5232.,  4992.,
      5376.,  5760.,  6144.,  6326.,  6788.,  7250.,  7712.,  6714.,  7204.,
      7694.,  8184.,  6430.,  6916.,  7402.,  7888.,  5160.,  5584.,  6008.,
      6432.,  4174.,  4532.,  4890.,  5248.,  3488.,  3776.,  4064.,  4352.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848., 13137.,
      13954., 14771., 15588., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11073., 11874., 12675.,
      13476., 10962., 11748., 12534., 13320., 11395., 12198., 13001., 13804.,
      11440., 12256., 13072., 13888., 11073., 11874., 12675., 13476., 10962.,
      11748., 12534., 13320., 11593., 12402., 13211., 14020., 10970., 11764.,
      12558., 13352., 10603., 11382., 12161., 12940., 12930., 13764., 14598.,
      15432., 12819., 13638., 14457., 15276., 11940., 12744., 13548., 14352.,
      13137., 13954., 14771., 15588., 12930., 13764., 14598., 15432., 12819.,
      13638., 14457., 15276., 12138., 12948., 13758., 14568., 12827., 13654.,
      14481., 15308., 12460., 13272., 14084., 14896., 11395., 12198., 13001.,
      13804., 11956., 12776., 13596., 14416., 12357., 13162., 13967., 14772.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      16236., 20055., 22898., 26117., 26315., 27153., 22970., 19659., 16636.,
      13352., 15674., 18988., 22606., 22802., 21590., 16924., 14418., 12232.,
      9396.,  11033., 13678., 16555., 16725., 17407., 15398., 14565., 11908.,
      8816.,  10316., 13896., 15588., 15004., 14932., 12520., 10300., 8208.,
      9424.,  13300., 15352., 17244., 17268., 17548., 13912., 9860.,  7280.,
      11436., 13707., 16386., 17833., 17955., 18333., 17386., 14951., 13180.,
      12184., 15270., 20004., 24482., 23446., 22794., 19924., 16414., 12632.,
      16948., 20077., 23918., 26303., 26117., 26315., 24198., 20369., 17508.,
      13292., 17511., 21554., 25045., 25499., 26337., 22266., 17371., 14588.,
      15780., 18529., 22262., 26315., 27153., 26327., 22734., 19205., 16884.,
      12280., 14326., 18436., 22802., 21590., 20762., 17844., 15246., 12984.,
      7804.,  9983.,  13258., 16725., 17407., 18345., 17138., 14107., 11340.,
      8848.,  10772., 12824., 15004., 14932., 15116., 12632., 10276., 8080.,
      10448., 12732., 14856., 17268., 17548., 16036., 12456., 9612.,  6896.,
      11412., 14145., 15870., 17955., 18333., 18967., 18038., 15885., 13956.,
      11560., 15314., 20188., 23446., 22794., 23774., 20812., 16586., 12552.,
      16236., 20055., 22898., 26117., 26315., 27153., 22970., 19659., 16636.,
      14372., 17233., 21174., 25499., 26337., 25767., 21678., 18453., 15508.,
      14556., 17995., 22490., 27153., 26327., 26141., 22530., 19775., 15244.,
      12488., 15122., 19900., 21590., 20762., 20574., 17644., 15050., 12744.,
      7460.,  10053., 13830., 17407., 18345., 19795., 16478., 13425., 10676.,
      9232.,  11452., 13896., 14932., 15116., 13764., 11240., 8876.,  6704.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26873., 26303., 26117., 26351., 25045., 25499., 26117., 26315., 27153.,
      26303., 26117., 26315., 25045., 25499., 26337., 26315., 27153., 26327.,
      26117., 26315., 27153., 25499., 26337., 25767., 27153., 26327., 26141.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      13804., 14744., 17969., 19150., 21274., 22660., 26295., 27914., 25663.,
      27286., 26311., 27938., 21810., 23188., 19625., 20790., 15388., 16312.,
      13512., 14384., 15958., 17044., 18412., 19672., 21674., 23132., 21834.,
      23268., 21226., 22636., 17916., 19096., 15174., 16164., 13256., 14032.,
      8564.,  9224.,  11751., 12562., 13766., 14748., 17601., 18774., 17929.,
      19114., 19281., 20478., 15374., 16396., 14031., 14922., 11364., 12104.,
      7600.,  8160.,  8596.,  9272.,  11592., 12400., 13452., 14408., 12812.,
      13752., 13196., 14120., 11272., 12048., 9940.,  10616., 9136.,  9696.,
      8368.,  8928.,  11716., 12392., 13192., 14000., 14140., 15032., 14204.,
      15080., 14780., 15640., 12712., 13424., 10820., 11368., 8528.,  8960.,
      8948.,  9624.,  12887., 13718., 17142., 18148., 18593., 19730., 18569.,
      19718., 19057., 20218., 18302., 19284., 14687., 15470., 12004., 12632.,
      11464., 12272., 13982., 14956., 18012., 19176., 21282., 22596., 20258.,
      21548., 20002., 21268., 18316., 19400., 16750., 17628., 13224., 13936.,
      14956., 15912., 18153., 19322., 21882., 23292., 25647., 27262., 26295.,
      27914., 25663., 27286., 22834., 24236., 19137., 20290., 16860., 17800.,
      14060., 15000., 18033., 19182., 21658., 23044., 24183., 25770., 24063.,
      25654., 24711., 26306., 21426., 22804., 18153., 19286., 15388., 16312.,
      13164., 14088., 16889., 18018., 21434., 22796., 25663., 27286., 26311.,
      27938., 25679., 27310., 22706., 24124., 18577., 19754., 16092., 17064.,
      12040., 12880., 13718., 14732., 17356., 18568., 21834., 23268., 21226.,
      22636., 21386., 22772., 17820., 19016., 15302., 16284., 13448., 14256.,
      8372.,  8984.,  10319., 11102., 13190., 14164., 17929., 19114., 19281.,
      20478., 19097., 20306., 17006., 18084., 13591., 14518., 10980., 11736.,
      6704.,  7200.,  8404.,  9032.,  10120., 10896., 12812., 13752., 13196.,
      14120., 14092., 15000., 12232., 13040., 10900., 11592., 8112.,  8672.,
      9136.,  9696.,  11076., 11768., 12488., 13264., 14204., 15080., 14780.,
      15640., 13820., 14664., 12136., 12816., 10948., 11512., 8656.,  9088.,
      9652.,  10344., 14239., 15106., 16246., 17244., 18569., 19718., 19057.,
      20218., 20057., 21230., 17566., 18540., 14855., 15674., 12132., 12776.,
      10504., 11280., 13950., 14916., 17788., 18904., 20258., 21548., 20002.,
      21268., 20898., 22204., 19436., 20536., 16910., 17844., 13288., 14032.,
      13804., 14744., 17969., 19150., 21274., 22660., 26295., 27914., 25663.,
      27286., 26311., 27938., 21810., 23188., 19625., 20790., 15388., 16312.,
      14444., 15368., 17337., 18498., 20282., 21644., 24063., 25654., 24711.,
      26306., 24591., 26190., 21682., 23036., 18129., 19274., 15452., 16360.,
      13036., 13944., 17729., 18870., 21210., 22612., 26311., 27938., 25679.,
      27310., 26327., 27962., 21682., 23076., 19577., 20766., 15132., 16088.,
      11080., 11888., 13654., 14660., 18220., 19448., 21226., 22636., 21386.,
      22772., 20778., 22140., 17596., 18744., 15430., 16404., 13768., 14544.,
      8564.,  9192.,  11063., 11882., 14534., 15564., 19281., 20478., 19097.,
      20306., 19937., 21158., 15950., 17020., 12767., 13666., 10468., 11176.,
      6448.,  6944.,  8596.,  9240.,  10824., 11632., 13196., 14120., 14092.,
      15000., 13964., 14856., 12296., 13072., 9172.,  9816.,  6704.,  7200.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25767., 27378., 25647., 27262., 26295., 27914., 25711., 27358., 24183.,
      25770., 24063., 25654., 26295., 27914., 25663., 27286., 26311., 27938.,
      25647., 27262., 26295., 27914., 25663., 27286., 24183., 25770., 24063.,
      25654., 24711., 26306., 25663., 27286., 26311., 27938., 25679., 27310.,
      26295., 27914., 25663., 27286., 26311., 27938., 24063., 25654., 24711.,
      26306., 24591., 26190., 26311., 27938., 25679., 27310., 26327., 27962.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      13484., 14424., 15364., 16304., 16325., 17506., 18687., 19868., 19530.,
      20916., 22302., 23688., 26139., 27758., 29377., 30996., 23847., 25470.,
      27093., 28716., 24115., 25742., 27369., 28996., 20258., 21636., 23014.,
      24392., 17797., 18962., 20127., 21292., 14204., 15128., 16052., 16976.,
      14536., 15408., 16280., 17152., 16110., 17196., 18282., 19368., 17644.,
      18904., 20164., 21424., 20770., 22228., 23686., 25144., 22650., 24084.,
      25518., 26952., 20946., 22356., 23766., 25176., 17276., 18456., 19636.,
      20816., 14222., 15212., 16202., 17192., 11560., 12336., 13112., 13888.,
      9396.,  10056., 10716., 11376., 13635., 14446., 15257., 16068., 14390.,
      15372., 16354., 17336., 16621., 17794., 18967., 20140., 17265., 18450.,
      19635., 20820., 17909., 19106., 20303., 21500., 14910., 15932., 16954.,
      17976., 13315., 14206., 15097., 15988., 10532., 11272., 12012., 12752.,
      7920.,  8480.,  9040.,  9600.,  9956.,  10632., 11308., 11984., 13832.,
      14640., 15448., 16256., 14300., 15256., 16212., 17168., 13548., 14488.,
      15428., 16368., 12796., 13720., 14644., 15568., 11560., 12336., 13112.,
      13888., 10724., 11400., 12076., 12752., 9200.,  9760.,  10320., 10880.,
      8432.,  8992.,  9552.,  10112., 10532., 11208., 11884., 12560., 12040.,
      12848., 13656., 14464., 12636., 13528., 14420., 15312., 12908., 13784.,
      14660., 15536., 14204., 15064., 15924., 16784., 10344., 11056., 11768.,
      12480., 7588.,  8136.,  8684.,  9232.,  5744.,  6176.,  6608.,  7040.,
      10148., 10824., 11500., 12176., 12751., 13582., 14413., 15244., 15966.,
      16972., 17978., 18984., 16785., 17922., 19059., 20196., 16469., 17618.,
      18767., 19916., 17177., 18338., 19499., 20660., 16966., 17948., 18930.,
      19912., 11695., 12478., 13261., 14044., 9108.,  9736.,  10364., 10992.,
      12040., 12848., 13656., 14464., 13070., 14044., 15018., 15992., 17100.,
      18264., 19428., 20592., 21698., 23012., 24326., 25640., 19034., 20324.,
      21614., 22904., 17906., 19172., 20438., 21704., 15932., 17016., 18100.,
      19184., 14990., 15868., 16746., 17624., 10856., 11568., 12280., 12992.,
      15260., 16216., 17172., 18128., 16705., 17874., 19043., 20212., 19186.,
      20596., 22006., 23416., 23823., 25438., 27053., 28668., 26139., 27758.,
      29377., 30996., 23847., 25470., 27093., 28716., 20874., 22276., 23678.,
      25080., 17089., 18242., 19395., 20548., 14956., 15896., 16836., 17776.,
      13996., 14936., 15876., 16816., 18533., 19682., 20831., 21980., 20298.,
      21684., 23070., 24456., 21947., 23534., 25121., 26708., 22727., 24318.,
      25909., 27500., 25043., 26638., 28233., 29828., 20514., 21892., 23270.,
      24648., 16933., 18066., 19199., 20332., 13180., 14104., 15028., 15952.,
      12732., 13656., 14580., 15504., 16265., 17394., 18523., 19652., 21410.,
      22772., 24134., 25496., 23847., 25470., 27093., 28716., 24115., 25742.,
      27369., 28996., 23871., 25502., 27133., 28764., 21370., 22788., 24206.,
      25624., 17481., 18658., 19835., 21012., 15692., 16664., 17636., 18608.,
      12520., 13360., 14200., 15040., 14262., 15276., 16290., 17304., 17628.,
      18840., 20052., 21264., 22650., 24084., 25518., 26952., 20946., 22356.,
      23766., 25176., 20778., 22164., 23550., 24936., 16940., 18136., 19332.,
      20528., 14614., 15596., 16578., 17560., 12296., 13104., 13912., 14720.,
      10212., 10824., 11436., 12048., 11695., 12478., 13261., 14044., 13758.,
      14732., 15706., 16680., 17265., 18450., 19635., 20820., 17909., 19106.,
      20303., 21500., 17529., 18738., 19947., 21156., 16454., 17532., 18610.,
      19688., 13039., 13966., 14893., 15820., 10516., 11272., 12028., 12784.,
      7472.,  7968.,  8464.,  8960.,  10772., 11400., 12028., 12656., 11816.,
      12592., 13368., 14144., 13548., 14488., 15428., 16368., 12796., 13720.,
      14644., 15568., 13068., 13976., 14884., 15792., 12296., 13104., 13912.,
      14720., 11732., 12424., 13116., 13808., 8432.,  8992.,  9552.,  10112.,
      9200.,  9760.,  10320., 10880., 10004., 10696., 11388., 12080., 11048.,
      11824., 12600., 13376., 12908., 13784., 14660., 15536., 14204., 15064.,
      15924., 16784., 12428., 13272., 14116., 14960., 9352.,  10032., 10712.,
      11392., 8084.,  8648.,  9212.,  9776.,  6512.,  6944.,  7376.,  7808.,
      10644., 11336., 12028., 12720., 14011., 14878., 15745., 16612., 14310.,
      15308., 16306., 17304., 16469., 17618., 18767., 19916., 17177., 18338.,
      19499., 20660., 18909., 20082., 21255., 22428., 15374., 16348., 17322.,
      18296., 11995., 12814., 13633., 14452., 9604.,  10248., 10892., 11536.,
      11048., 11824., 12600., 13376., 13398., 14364., 15330., 16296., 18620.,
      19736., 20852., 21968., 19034., 20324., 21614., 22904., 17906., 19172.,
      20438., 21704., 19018., 20324., 21630., 22936., 17772., 18872., 19972.,
      21072., 15126., 16060., 16994., 17928., 11080., 11824., 12568., 13312.,
      13484., 14424., 15364., 16304., 16325., 17506., 18687., 19868., 19530.,
      20916., 22302., 23688., 26139., 27758., 29377., 30996., 23847., 25470.,
      27093., 28716., 24115., 25742., 27369., 28996., 20258., 21636., 23014.,
      24392., 17797., 18962., 20127., 21292., 14204., 15128., 16052., 16976.,
      15292., 16216., 17140., 18064., 17129., 18290., 19451., 20612., 19106.,
      20468., 21830., 23192., 22727., 24318., 25909., 27500., 25043., 26638.,
      28233., 29828., 23775., 25374., 26973., 28572., 20410., 21764., 23118.,
      24472., 16617., 17762., 18907., 20052., 13452., 14360., 15268., 16176.,
      13004., 13912., 14820., 15728., 17933., 19074., 20215., 21356., 20410.,
      21812., 23214., 24616., 24115., 25742., 27369., 28996., 23871., 25502.,
      27133., 28764., 24139., 25774., 27409., 29044., 20754., 22148., 23542.,
      24936., 19213., 20402., 21591., 22780., 13916., 14872., 15828., 16784.,
      11528., 12336., 13144., 13952., 14654., 15660., 16666., 17672., 19340.,
      20568., 21796., 23024., 20946., 22356., 23766., 25176., 20778., 22164.,
      23550., 24936., 19074., 20436., 21798., 23160., 16412., 17560., 18708.,
      19856., 15006., 15980., 16954., 17928., 13352., 14128., 14904., 15680.,
      9684.,  10312., 10940., 11568., 11995., 12814., 13633., 14452., 14854.,
      15884., 16914., 17944., 17909., 19106., 20303., 21500., 17529., 18738.,
      19947., 21156., 19197., 20418., 21639., 22860., 14734., 15804., 16874.,
      17944., 12059., 12958., 13857., 14756., 10308., 11016., 11724., 12432.,
      8240.,  8736.,  9232.,  9728.,  10244., 10888., 11532., 12176., 12040.,
      12848., 13656., 14464., 12796., 13720., 14644., 15568., 13068., 13976.,
      14884., 15792., 13340., 14232., 15124., 16016., 13352., 14128., 14904.,
      15680., 9476.,  10120., 10764., 11408., 6960.,  7456.,  7952.,  8448.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668., 26139.,
      27758., 29377., 30996., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 26139., 27758., 29377.,
      30996., 23847., 25470., 27093., 28716., 24115., 25742., 27369., 28996.,
      23823., 25438., 27053., 28668., 26139., 27758., 29377., 30996., 23847.,
      25470., 27093., 28716., 21947., 23534., 25121., 26708., 22727., 24318.,
      25909., 27500., 25043., 26638., 28233., 29828., 23847., 25470., 27093.,
      28716., 24115., 25742., 27369., 28996., 23871., 25502., 27133., 28764.,
      26139., 27758., 29377., 30996., 23847., 25470., 27093., 28716., 24115.,
      25742., 27369., 28996., 22727., 24318., 25909., 27500., 25043., 26638.,
      28233., 29828., 23775., 25374., 26973., 28572., 24115., 25742., 27369.,
      28996., 23871., 25502., 27133., 28764., 24139., 25774., 27409., 29044.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      7440., 8724.,  10616., 10748., 12684., 12060., 11288., 7828.,  7440.,
      5560., 7294.,  8132.,  10826., 10114., 10266., 8004.,  7726.,  5560.,
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      4448., 6200.,  6672.,  8680.,  7528.,  8680.,  6672.,  6200.,  4448.,
      6456., 6998.,  8916.,  9682.,  11498., 9986.,  8916.,  6694.,  6456.,
      6672., 8964.,  10008., 13356., 11932., 12812., 10008., 9508.,  6672.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      6672., 8964.,  9592.,  12684., 12060., 12812., 9336.,  9092.,  6672.,
      5944., 6694.,  9556.,  10114., 10266., 9138.,  9140.,  6998.,  5944.,
      4448., 6200.,  6672.,  8680.,  7528.,  8680.,  6672.,  6200.,  4448.,
      4960., 5816.,  7440.,  7528.,  8680.,  8040.,  7440.,  5304.,  4960.,
      5560., 7294.,  8548.,  11498., 9986.,  10266., 8676.,  8142.,  5560.,
      7440., 7956.,  11288., 11932., 12812., 11292., 11704., 9268.,  7440.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      7440., 8084.,  11032., 12060., 12812., 10748., 10616., 8724.,  7440.,
      5560., 8142.,  8676.,  10266., 9138.,  10826., 8132.,  7294.,  5560.,
      4960., 5816.,  7440.,  7528.,  8680.,  8040.,  7440.,  5304.,  4960.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15502., 14006., 14398., 14006., 14398., 12902., 14398., 12902., 15502.,
      14006., 14398., 12902., 14398., 12902., 15502., 12902., 15502., 14006.,
      14398., 12902., 15502., 12902., 15502., 14006., 15502., 14006., 14398.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      7536.,  8352.,  7372.,  8392.,  11176., 12368., 10244., 11640., 13060.,
      14488., 10756., 12216., 11688., 12944., 7372.,  8392.,  7536.,  8352.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      6280.,  6960.,  6114.,  6956.,  9292.,  10312., 8870.,  10084., 10982.,
      12180., 8486.,  9668.,  9164.,  10152., 6114.,  6956.,  6280.,  6960.,
      6000.,  6816.,  9292.,  10312., 9384.,  10640., 13444., 14904., 10372.,
      11800., 12932., 14328., 8872.,  10064., 9292.,  10312., 6000.,  6816.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      6000.,  6816.,  9164.,  10152., 8872.,  10064., 13060., 14488., 10756.,
      12216., 13316., 14744., 8616.,  9808.,  9164.,  10152., 6000.,  6816.,
      6280.,  6960.,  6114.,  6956.,  9292.,  10312., 8870.,  10084., 10982.,
      12180., 8486.,  9668.,  9164.,  10152., 6114.,  6956.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7714.,  8572.,  7756.,  8808.,  10982., 12180., 8486.,
      9668.,  10598., 11764., 7628.,  8648.,  7714.,  8572.,  5000.,  5680.,
      7536.,  8352.,  7756.,  8808.,  11688., 12944., 10372., 11800., 12932.,
      14328., 10628., 12056., 11432., 12688., 7756.,  8808.,  7536.,  8352.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      7536.,  8352.,  7628.,  8648.,  11432., 12688., 10756., 12216., 13316.,
      14744., 10244., 11640., 10920., 12112., 7628.,  8648.,  7536.,  8352.,
      5000.,  5680.,  7714.,  8572.,  7756.,  8808.,  10982., 12180., 8486.,
      9668.,  10598., 11764., 7628.,  8648.,  7714.,  8572.,  5000.,  5680.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932., 15122.,
      16764., 12114., 13772., 15122., 16764., 12114., 13772., 15250., 16924.,
      12242., 13932., 15122., 16764., 12114., 13772., 15122., 16764., 12114.,
      13772., 15250., 16924., 12114., 13772., 15250., 16924., 12242., 13932.,
      15122., 16764., 12114., 13772., 15250., 16924., 12114., 13772., 15250.,
      16924., 12242., 13932., 15250., 16924., 12242., 13932., 15122., 16764.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7740.,  8760.,  9780.,  10800., 9064.,
      10256., 11448., 12640., 10612., 12008., 13404., 14800., 10836., 12264.,
      13692., 15120., 11060., 12520., 13980., 15440., 9512.,  10768., 12024.,
      13280., 7740.,  8760.,  9780.,  10800., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6394.,  7236.,  8078.,  8920.,  7740.,
      8760.,  9780.,  10800., 9198.,  10412., 11626., 12840., 9086.,  10284.,
      11482., 12680., 8974.,  10156., 11338., 12520., 7516.,  8504.,  9492.,
      10480., 6394.,  7236.,  8078.,  8920.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7740.,  8760.,  9780.,  10800., 9512.,
      10768., 12024., 13280., 11060., 12520., 13980., 15440., 10836., 12264.,
      13692., 15120., 10612., 12008., 13404., 14800., 9064.,  10256., 11448.,
      12640., 7740.,  8760.,  9780.,  10800., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6394.,  7236.,  8078.,  8920.,  7740.,
      8760.,  9780.,  10800., 9198.,  10412., 11626., 12840., 9086.,  10284.,
      11482., 12680., 8974.,  10156., 11338., 12520., 7516.,  8504.,  9492.,
      10480., 6394.,  7236.,  8078.,  8920.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6506.,  7364.,  8222.,  9080.,  7964.,
      9016.,  10068., 11120., 9086.,  10284., 11482., 12680., 8974.,  10156.,
      11338., 12520., 8862.,  10028., 11194., 12360., 7740.,  8760.,  9780.,
      10800., 6506.,  7364.,  8222.,  9080.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7740.,  8760.,  9780.,  10800., 9512.,
      10768., 12024., 13280., 11060., 12520., 13980., 15440., 10836., 12264.,
      13692., 15120., 10612., 12008., 13404., 14800., 9064.,  10256., 11448.,
      12640., 7740.,  8760.,  9780.,  10800., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6506.,  7364.,  8222.,  9080.,  7964.,
      9016.,  10068., 11120., 9086.,  10284., 11482., 12680., 8974.,  10156.,
      11338., 12520., 8862.,  10028., 11194., 12360., 7740.,  8760.,  9780.,
      10800., 6506.,  7364.,  8222.,  9080.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880., 12474.,
      14116., 15758., 17400., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 12474., 14116., 15758.,
      17400., 12586., 14244., 15902., 17560., 12698., 14372., 16046., 17720.,
      12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400., 12586.,
      14244., 15902., 17560., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 12586., 14244., 15902.,
      17560., 12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.,
      12474., 14116., 15758., 17400., 12586., 14244., 15902., 17560., 12698.,
      14372., 16046., 17720., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 12698., 14372., 16046.,
      17720., 12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436.,  3090.,  3786.,  4520.,  4586., 4684.,  5134.,  4750.,  4380.,
      4028.,  3500.,  4797.,  6144.,  7536., 7952.,  8400.,  8976.,  8227.,
      7490.,  6770.,  6170.,  8469.,  9785., 11136., 10829., 10554., 11207.,
      9687.,  8194.,  6734.,  7094.,  8092., 9137.,  10222., 9719.,  9280.,
      9577.,  8166.,  7134.,  6136.,  6066., 7368.,  8711.,  10088., 10033.,
      10042., 10563., 9368.,  8334.,  7340., 6830.,  8884.,  10973., 13090.,
      12459., 11892., 11613., 9162.,  7678., 6240.,  6590.,  7383.,  8219.,
      9092.,  8811.,  8594.,  8441.,  6865., 6018.,  5202.,  5216.,  6243.,
      7306.,  8400.,  8358.,  8348.,  8370., 7181.,  6498.,  5846.,  4620.,
      5302.,  5998.,  6704.,  6758.,  6844., 6962.,  5698.,  4700.,  3716.,
      5444.,  6902.,  8362.,  8924.,  8510., 7584.,  6722.,  5438.,  4208.,
      3036.,  4696.,  6247.,  7814.,  8720., 8656.,  8304.,  8016.,  6941.,
      5912.,  4934.,  5722.,  7767.,  9825., 11442., 11679., 11852., 12089.,
      10775., 8492.,  6270.,  7218.,  9064., 10903., 12504., 12993., 12618.,
      12307., 10376., 8526.,  6764.,  5038., 6644.,  8269.,  9906.,  10587.,
      10596., 10637., 9242.,  7902.,  6624., 5354.,  7264.,  9187.,  11116.,
      11797., 12030., 12295., 10892., 9550., 8276.,  5038.,  6341.,  7659.,
      8986.,  9569.,  9928.,  10319., 8889., 7512.,  6194.,  3452.,  4641.,
      5864.,  7116.,  7650.,  8184.,  8718., 7775.,  6860.,  5978.,  3084.,
      3890.,  4702.,  5516.,  5922.,  6328., 6734.,  5698.,  4680.,  3684.,
      5060.,  7034.,  8010.,  9008.,  8498., 8020.,  8470.,  7342.,  6244.,
      5180.,  6404.,  7217.,  8076.,  8976., 8368.,  7824.,  8016.,  6871.,
      6094.,  5338.,  5786.,  7033.,  8329., 9668.,  9585.,  9566.,  10059.,
      8983.,  8054.,  7150.,  6830.,  8884., 10973., 13090., 12459., 11892.,
      11613., 9162.,  7678.,  6240.,  8362., 9568.,  10803., 11516., 10821.,
      10222., 9719.,  7740.,  6510.,  5332., 6598.,  7948.,  9321.,  10390.,
      10207., 10088., 10033., 8494.,  7486., 6536.,  5886.,  7507.,  9147.,
      10704., 10871., 11102., 10373., 8129., 6190.,  4306.,  5784.,  7103.,
      8454.,  8936.,  8478.,  8084.,  7754., 6449.,  5206.,  3998.,  4044.,
      5070.,  6094.,  6440.,  6206.,  6004., 5834.,  4674.,  3540.,  2436.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10222., 9719.,  9280.,  9577.,  10088., 10033., 10042., 10563., 13090.,
      12459., 11892., 11613., 12504., 12993., 12618., 12307., 9906.,  10587.,
      10596., 10637., 11116., 11797., 12030., 12295., 13090., 12459., 11892.,
      11613., 11516., 10821., 10222., 9719.,  10390., 10207., 10088., 10033.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  7614.,  8124.,  9481.,  10088., 11603., 12314., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 10309., 10996., 8526.,
      9116.,  6906.,  7392.,  6008.,  6428.,  6498.,  6990.,  7580.,  8150.,
      8666.,  9320.,  8638.,  9270.,  8738.,  9348.,  8934.,  9554.,  7544.,
      8066.,  6626.,  7076.,  5840.,  6212.,  4542.,  4896.,  5567.,  5990.,
      7491.,  7988.,  9408.,  9984.,  9833.,  10412., 10322., 10904., 9851.,
      10436., 7825.,  8314.,  6848.,  7268.,  6002.,  6348.,  5472.,  5784.,
      5756.,  6124.,  6224.,  6652.,  6676.,  7168.,  6404.,  6892.,  6196.,
      6680.,  6052.,  6532.,  4632.,  5028.,  3780.,  4120.,  3024.,  3304.,
      5872.,  6184.,  7484.,  7884.,  9032.,  9524.,  9772.,  10328., 9588.,
      10140., 9436.,  9952.,  8388.,  8868.,  6800.,  7196.,  5292.,  5600.,
      3936.,  4152.,  3910.,  4240.,  5093.,  5518.,  7071.,  7596.,  8714.,
      9312.,  9063.,  9664.,  8868.,  9440.,  8801.,  9344.,  8277.,  8730.,
      6506.,  6864.,  4906.,  5164.,  6800.,  7188.,  9018.,  9518.,  11320.,
      11938., 12702., 13412., 12622., 13342., 12446., 13144., 12398., 13074.,
      11348., 11918., 8750.,  9208.,  6344.,  6684.,  7518.,  8004.,  9375.,
      10000., 11595., 12366., 13300., 14192., 13717., 14626., 13462., 14356.,
      13335., 14214., 12037., 12784., 9948.,  10556., 8106.,  8568.,  5182.,
      5564.,  6649.,  7144.,  8851.,  9466.,  11006., 11748., 11775., 12566.,
      12256., 13064., 12801., 13626., 11461., 12180., 9982.,  10588., 8698.,
      9184.,  6686.,  7092.,  8819.,  9344.,  10971., 11622., 13064., 13848.,
      13833., 14666., 13738., 14588., 13707., 14574., 12293., 13048., 10432.,
      11068., 8778.,  9288.,  4712.,  5052.,  5746.,  6186.,  7124.,  7670.,
      8450.,  9108.,  9062.,  9762.,  9258.,  9968.,  9518.,  10238., 8032.,
      8658.,  6722.,  7248.,  5600.,  6020.,  2862.,  3096.,  3761.,  4066.,
      5363.,  5744.,  6954.,  7416.,  7475.,  7972.,  7996.,  8528.,  8517.,
      9084.,  7593.,  8094.,  6794.,  7224.,  6130.,  6484.,  4032.,  4248.,
      4940.,  5220.,  5824.,  6172.,  6676.,  7096.,  7076.,  7524.,  7476.,
      7952.,  7876.,  8380.,  6504.,  6948.,  5236.,  5616.,  4080.,  4392.,
      5264.,  5544.,  7292.,  7636.,  8280.,  8692.,  9244.,  9728.,  8868.,
      9348.,  8556.,  9032.,  9044.,  9548.,  8384.,  8828.,  6924.,  7304.,
      5568.,  5880.,  6102.,  6504.,  7439.,  7906.,  8415.,  8952.,  9404.,
      10016., 8697.,  9280.,  8118.,  8672.,  7955.,  8512.,  6717.,  7182.,
      6060.,  6460.,  5514.,  5844.,  6752.,  7188.,  7986.,  8498.,  10208.,
      10802., 12446., 13128., 11758., 12418., 11198., 11836., 11630., 12278.,
      10476., 11022., 9142.,  9612.,  7928.,  8316.,  7614.,  8124.,  9481.,
      10088., 11603., 12314., 13710., 14532., 12943., 13750., 12304., 13096.,
      12209., 13018., 10309., 10996., 8526.,  9116.,  6906.,  7392.,  8478.,
      9012.,  9731.,  10368., 11547., 12294., 13304., 14136., 12441., 13226.,
      11770., 12508., 11259., 11982., 9221.,  9816.,  7568.,  8060.,  6090.,
      6472.,  6910.,  7404.,  8509.,  9112.,  10979., 11698., 12802., 13612.,
      12931., 13726., 13188., 13968., 12549., 13314., 10309., 10940., 8722.,
      9244.,  7322.,  7728.,  7000.,  7452.,  8226.,  8774.,  9612.,  10262.,
      10794., 11520., 10638., 11342., 10610., 11292., 9686.,  10346., 7240.,
      7778.,  5442.,  5884.,  3824.,  4164.,  5022.,  5392.,  5731.,  6174.,
      6947.,  7468.,  7412.,  7984.,  7037.,  7580.,  6790.,  7304.,  6671.,
      7156.,  5697.,  6082.,  4884.,  5196.,  4210.,  4444.,  3360.,  3608.,
      4060.,  4380.,  5552.,  5948.,  6708.,  7152.,  6884.,  7324.,  7124.,
      7560.,  7428.,  7860.,  6456.,  6820.,  4580.,  4872.,  2832.,  3048.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634., 13188.,
      13968., 12549., 13314., 12038., 12788., 12519., 13286., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 13300., 14192., 13717.,
      14626., 13462., 14356., 13335., 14214., 11006., 11748., 11775., 12566.,
      12256., 13064., 12801., 13626., 13064., 13848., 13833., 14666., 13738.,
      14588., 13707., 14574., 13710., 14532., 12943., 13750., 12304., 13096.,
      12209., 13018., 13304., 14136., 12441., 13226., 11770., 12508., 11259.,
      11982., 12802., 13612., 12931., 13726., 13188., 13968., 12549., 13314.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  6718.,  7228.,  7738.,  8248.,  8467.,  9074.,  9681.,
      10288., 10335., 11046., 11757., 12468., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 10171., 10858., 11545., 12232., 8654.,  9244.,
      9834.,  10424., 7054.,  7540.,  8026.,  8512.,  4876.,  5296.,  5716.,
      6136.,  5944.,  6436.,  6928.,  7420.,  7518.,  8088.,  8658.,  9228.,
      9286.,  9940.,  10594., 11248., 9700.,  10332., 10964., 11596., 9346.,
      9956.,  10566., 11176., 9152.,  9772.,  10392., 11012., 7590.,  8112.,
      8634.,  9156.,  7042.,  7492.,  7942.,  8392.,  5996.,  6368.,  6740.,
      7112.,  4474.,  4828.,  5182.,  5536.,  5015.,  5438.,  5861.,  6284.,
      6357.,  6854.,  7351.,  7848.,  8192.,  8768.,  9344.,  9920.,  8527.,
      9106.,  9685.,  10264., 8990.,  9572.,  10154., 10736., 8557.,  9142.,
      9727.,  10312., 6585.,  7074.,  7563.,  8052.,  5724.,  6144.,  6564.,
      6984.,  5194.,  5540.,  5886.,  6232.,  4360.,  4672.,  4984.,  5296.,
      4712.,  5080.,  5448.,  5816.,  5172.,  5600.,  6028.,  6456.,  6460.,
      6952.,  7444.,  7936.,  6560.,  7048.,  7536.,  8024.,  6788.,  7272.,
      7756.,  8240.,  7144.,  7624.,  8104.,  8584.,  5092.,  5488.,  5884.,
      6280.,  4212.,  4552.,  4892.,  5232.,  3592.,  3872.,  4152.,  4432.,
      4008.,  4320.,  4632.,  4944.,  5864.,  6264.,  6664.,  7064.,  7524.,
      8016.,  8508.,  9000.,  8556.,  9112.,  9668.,  10224., 8704.,  9256.,
      9808.,  10360., 8948.,  9464.,  9980.,  10496., 8424.,  8904.,  9384.,
      9864.,  6804.,  7200.,  7596.,  7992.,  5508.,  5816.,  6124.,  6432.,
      3816.,  4032.,  4248.,  4464.,  4034.,  4364.,  4694.,  5024.,  5409.,
      5834.,  6259.,  6684.,  7441.,  7966.,  8491.,  9016.,  8734.,  9332.,
      9930.,  10528., 8853.,  9454.,  10055., 10656., 8940.,  9512.,  10084.,
      10656., 9283.,  9826.,  10369., 10912., 8325.,  8778.,  9231.,  9684.,
      6382.,  6740.,  7098.,  7456.,  4786.,  5044.,  5302.,  5560.,  4956.,
      5344.,  5732.,  6120.,  6752.,  7252.,  7752.,  8252.,  8454.,  9072.,
      9690.,  10308., 10102., 10812., 11522., 12232., 10188., 10908., 11628.,
      12348., 10114., 10812., 11510., 12208., 10296., 10972., 11648., 12324.,
      9934.,  10504., 11074., 11644., 8338.,  8796.,  9254.,  9712.,  5820.,
      6160.,  6500.,  6840.,  6934.,  7420.,  7906.,  8392.,  9069.,  9694.,
      10319., 10944., 11347., 12118., 12889., 13660., 12652., 13544., 14436.,
      15328., 12701., 13610., 14519., 15428., 12462., 13356., 14250., 15144.,
      12479., 13358., 14237., 15116., 11583., 12330., 13077., 13824., 10264.,
      10872., 11480., 12088., 7814.,  8276.,  8738.,  9200.,  5054.,  5436.,
      5818.,  6200.,  6499.,  6994.,  7489.,  7984.,  8511.,  9126.,  9741.,
      10356., 10774., 11516., 12258., 13000., 11495., 12286., 13077., 13868.,
      11672., 12480., 13288., 14096., 11977., 12802., 13627., 14452., 10907.,
      11626., 12345., 13064., 10014., 10620., 11226., 11832., 8590.,  9076.,
      9562.,  10048., 5606.,  6012.,  6418.,  6824.,  7417.,  7942.,  8467.,
      8992.,  9067.,  9718.,  10369., 11020., 11264., 12048., 12832., 13616.,
      11985., 12818., 13651., 14484., 12034., 12884., 13734., 14584., 12211.,
      13078., 13945., 14812., 10935., 11690., 12445., 13200., 9540.,  10176.,
      10812., 11448., 8342.,  8852.,  9362.,  9872.,  4476.,  4816.,  5156.,
      5496.,  5964.,  6404.,  6844.,  7284.,  7654.,  8200.,  8746.,  9292.,
      9234.,  9892.,  10550., 11208., 9840.,  10540., 11240., 11940., 9646.,
      10356., 11066., 11776., 9580.,  10300., 11020., 11740., 8270.,  8896.,
      9522.,  10148., 7414.,  7940.,  8466.,  8992.,  6364.,  6784.,  7204.,
      7624.,  2962.,  3196.,  3430.,  3664.,  3633.,  3938.,  4243.,  4548.,
      4905.,  5286.,  5667.,  6048.,  6470.,  6932.,  7394.,  7856.,  6965.,
      7462.,  7959.,  8456.,  7460.,  7992.,  8524.,  9056.,  7955.,  8522.,
      9089.,  9656.,  6749.,  7250.,  7751.,  8252.,  5862.,  6292.,  6722.,
      7152.,  5314.,  5668.,  6022.,  6376.,  3112.,  3328.,  3544.,  3760.,
      3872.,  4152.,  4432.,  4712.,  4516.,  4864.,  5212.,  5560.,  5764.,
      6184.,  6604.,  7024.,  6152.,  6600.,  7048.,  7496.,  6540.,  7016.,
      7492.,  7968.,  6928.,  7432.,  7936.,  8440.,  5588.,  6032.,  6476.,
      6920.,  4524.,  4904.,  5284.,  5664.,  3752.,  4064.,  4376.,  4688.,
      3720.,  4000.,  4280.,  4560.,  5792.,  6136.,  6480.,  6824.,  6740.,
      7152.,  7564.,  7976.,  7572.,  8056.,  8540.,  9024.,  7336.,  7816.,
      8296.,  8776.,  7228.,  7704.,  8180.,  8656.,  7664.,  8168.,  8672.,
      9176.,  7492.,  7936.,  8380.,  8824.,  6716.,  7096.,  7476.,  7856.,
      5640.,  5952.,  6264.,  6576.,  5146.,  5548.,  5950.,  6352.,  7243.,
      7710.,  8177.,  8644.,  8901.,  9438.,  9975.,  10512., 9460.,  10072.,
      10684., 11296., 8523.,  9106.,  9689.,  10272., 7842.,  8396.,  8950.,
      9504.,  7961.,  8518.,  9075.,  9632.,  7241.,  7706.,  8171.,  8636.,
      6920.,  7320.,  7720.,  8120.,  5994.,  6324.,  6654.,  6984.,  5452.,
      5888.,  6324.,  6760.,  6916.,  7428.,  7940.,  8452.,  9262.,  9856.,
      10450., 11044., 11154., 11836., 12518., 13200., 10056., 10716., 11376.,
      12036., 9214.,  9852.,  10490., 11128., 9300.,  9948.,  10596., 11244.,
      8150.,  8696.,  9242.,  9788.,  7254.,  7724.,  8194.,  8664.,  6508.,
      6896.,  7284.,  7672.,  6718.,  7228.,  7738.,  8248.,  8467.,  9074.,
      9681.,  10288., 10335., 11046., 11757., 12468., 13030., 13852., 14674.,
      15496., 12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160.,
      11833., 12642., 13451., 14260., 10171., 10858., 11545., 12232., 8654.,
      9244.,  9834.,  10424., 7054.,  7540.,  8026.,  8512.,  7014.,  7548.,
      8082.,  8616.,  8617.,  9254.,  9891.,  10528., 10635., 11382., 12129.,
      12876., 12720., 13552., 14384., 15216., 12321., 13106., 13891., 14676.,
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700., 8535.,
      9130.,  9725.,  10320., 7540.,  8032.,  8524.,  9016.,  6166.,  6548.,
      6930.,  7312.,  6606.,  7100.,  7594.,  8088.,  7935.,  8538.,  9141.,
      9744.,  9975.,  10694., 11413., 12132., 12250., 13060., 13870., 14680.,
      12779., 13574., 14369., 15164., 12540., 13320., 14100., 14880., 11533.,
      12298., 13063., 13828., 9075.,  9706.,  10337., 10968., 7450.,  7972.,
      8494.,  9016.,  6174.,  6580.,  6986.,  7392.,  5932.,  6384.,  6836.,
      7288.,  7168.,  7716.,  8264.,  8812.,  8430.,  9080.,  9730.,  10380.,
      10142., 10868., 11594., 12320., 10300., 11004., 11708., 12412., 10714.,
      11396., 12078., 12760., 10360., 11020., 11680., 12340., 7606.,  8144.,
      8682.,  9220.,  6218.,  6660.,  7102.,  7544.,  4812.,  5152.,  5492.,
      5832.,  4778.,  5148.,  5518.,  5888.,  5451.,  5894.,  6337.,  6780.,
      6525.,  7046.,  7567.,  8088.,  7276.,  7848.,  8420.,  8992.,  7067.,
      7610.,  8153.,  8696.,  7114.,  7628.,  8142.,  8656.,  7417.,  7902.,
      8387.,  8872.,  5761.,  6146.,  6531.,  6916.,  4464.,  4776.,  5088.,
      5400.,  3514.,  3748.,  3982.,  4216.,  3272.,  3520.,  3768.,  4016.,
      3800.,  4120.,  4440.,  4760.,  5012.,  5408.,  5804.,  6200.,  6060.,
      6504.,  6948.,  7392.,  6032.,  6472.,  6912.,  7352.,  6132.,  6568.,
      7004.,  7440.,  6360.,  6792.,  7224.,  7656.,  5444.,  5808.,  6172.,
      6536.,  3812.,  4104.,  4396.,  4688.,  2504.,  2720.,  2936.,  3152.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700., 10036.,
      10744., 11452., 12160., 10341., 11066., 11791., 12516., 12540., 13320.,
      14100., 14880., 11533., 12298., 13063., 13828., 10782., 11532., 12282.,
      13032., 10959., 11726., 12493., 13260., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 12652., 13544., 14436., 15328., 12701., 13610.,
      14519., 15428., 12462., 13356., 14250., 15144., 12479., 13358., 14237.,
      15116., 10774., 11516., 12258., 13000., 11495., 12286., 13077., 13868.,
      11672., 12480., 13288., 14096., 11977., 12802., 13627., 14452., 11264.,
      12048., 12832., 13616., 11985., 12818., 13651., 14484., 12034., 12884.,
      13734., 14584., 12211., 13078., 13945., 14812., 13030., 13852., 14674.,
      15496., 12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160.,
      11833., 12642., 13451., 14260., 12720., 13552., 14384., 15216., 12321.,
      13106., 13891., 14676., 11282., 12020., 12758., 13496., 10531., 11254.,
      11977., 12700., 12250., 13060., 13870., 14680., 12779., 13574., 14369.,
      15164., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11780., 15081., 19782., 24835.,
      24873., 24559., 25493., 22098., 19271., 16684., 12304., 14264., 16792.,
      19616., 20804., 20488., 20524., 17712., 15836., 14208., 7972.,  9517.,
      12854., 16439., 18369., 19563., 18965., 15002., 13135., 11516., 8064.,
      8440.,  9792.,  11352., 11632., 12040., 12576., 10160., 8816.,  7584.,
      10464., 13392., 16464., 18144., 18168., 18352., 17224., 14880., 12488.,
      10304., 9540.,  13453., 16822., 19799., 19921., 19051., 20069., 19290.,
      15199., 11388., 15744., 20260., 23568., 25428., 24136., 22876., 22736.,
      19976., 15992., 12240., 15828., 18853., 23966., 28487., 28045., 26483.,
      27193., 24906., 21347., 18108., 11780., 15081., 19782., 24835., 24873.,
      24559., 25493., 22098., 19271., 16684., 16564., 19981., 23982., 28191.,
      28005., 26443., 25361., 21530., 18187., 15132., 11248., 13552., 17608.,
      20616., 21804., 22384., 21300., 16608., 14100., 11936., 9972.,  11785.,
      14606., 17307., 17861., 18671., 17689., 13778., 11083., 8652.,  10048.,
      11656., 13408., 13800., 13600., 13656., 13968., 11472., 9216.,  7136.,
      8224.,  11968., 13872., 15952., 16200., 15328., 16216., 15360., 13112.,
      11008., 10900., 14185., 16270., 18683., 18421., 18063., 18697., 17106.,
      14235., 11532., 13728., 16348., 21120., 26236., 26320., 25156., 26136.,
      24248., 20976., 17904., 11780., 15081., 19782., 24835., 24873., 24559.,
      25493., 22098., 19271., 16684., 16564., 19981., 23982., 28191., 28005.,
      26443., 25361., 21530., 18187., 15132., 13348., 16497., 21462., 25435.,
      27265., 28487., 28045., 23906., 20175., 16780., 11664., 13960., 17272.,
      20464., 21396., 22584., 21980., 17296., 13868., 10752., 10948., 13285.,
      15846., 17119., 17417., 17971., 18781., 16458., 14471., 12764., 5760.,
      7320.,  10240., 12632., 13808., 15112., 16544., 14448., 10512., 6816.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193., 24835.,
      24873., 24559., 25493., 28487., 28045., 26483., 27193., 24835., 24873.,
      24559., 25493., 28191., 28005., 26443., 25361., 24835., 24873., 24559.,
      25493., 28191., 28005., 26443., 25361., 25435., 27265., 28487., 28045.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11628., 12488., 14681., 15730., 19002., 20268., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 22834., 24260., 20953.,
      22190., 17948., 18968., 9608.,  10368., 12030., 12944., 14956., 16048.,
      19186., 20480., 21266., 22600., 20402., 21712., 20178., 21528., 17084.,
      18240., 16206., 17208., 14856., 15680., 8820.,  9448.,  10167., 10938.,
      13190., 14124., 16657., 17774., 18393., 19586., 18721., 19926., 17513.,
      18730., 13550., 14580., 11943., 12830., 11108., 11832., 7216.,  7680.,
      7268.,  7824.,  8264.,  8928.,  11036., 11824., 12060., 12896., 13340.,
      14224., 14876., 15808., 10888., 11680., 9252.,  9952.,  8112.,  8704.,
      9392.,  9984.,  12084., 12832., 14792., 15712., 16556., 17600., 16620.,
      17648., 17068., 18016., 16876., 17808., 14056., 14848., 11764., 12400.,
      9168.,  9632.,  9012.,  9672.,  13135., 13978., 16566., 17612., 18873.,
      20078., 18849., 20066., 18953., 20118., 20721., 21898., 19262., 20276.,
      15135., 15966., 11620., 12248., 12360., 13248., 17334., 18408., 20924.,
      22208., 22522., 23976., 20986., 22416., 19578., 20920., 20346., 21664.,
      19436., 20528., 17286., 18192., 12456., 13152., 14956., 15976., 19209.,
      20458., 25338., 26844., 28367., 30094., 26455., 28186., 24415., 26086.,
      24807., 26482., 22578., 23988., 20297., 21478., 16284., 17208., 11628.,
      12488., 14681., 15730., 19002., 20268., 25375., 26886., 26407., 27986.,
      24751., 26334., 25527., 27178., 22834., 24260., 20953., 22190., 17948.,
      18968., 13420., 14376., 16937., 18106., 20858., 22268., 25839., 27454.,
      26487., 28106., 24447., 26006., 23303., 24866., 19506., 20820., 17641.,
      18742., 15516., 16376., 11784., 12608., 14334., 15360., 18476., 19728.,
      22578., 24016., 24658., 26136., 23538., 24992., 21138., 22568., 16124.,
      17312., 13774., 14760., 11912., 12672., 9460.,  10120., 10823., 11634.,
      13062., 14044., 16353., 17462., 17449., 18570., 19057., 20190., 19129.,
      20274., 13742., 14692., 10999., 11798., 9060.,  9688.,  9008.,  9600.,
      10212., 10928., 11464., 12320., 12700., 13648., 12828., 13760., 13468.,
      14384., 14620., 15520., 11016., 11744., 8100.,  8704.,  5808.,  6272.,
      6576.,  7040.,  10420., 11008., 12360., 13088., 14380., 15264., 14828.,
      15760., 15148., 16064., 16876., 17840., 15464., 16320., 13172., 13904.,
      11216., 11808., 9140.,  9832.,  13599., 14418., 16822., 17788., 18249.,
      19382., 17457., 18602., 16537., 17630., 17537., 18642., 17022., 17956.,
      15023., 15830., 12132., 12792., 10952., 11776., 14454., 15448., 19964.,
      21152., 24186., 25592., 23290., 24736., 22010., 23432., 22906., 24368.,
      21420., 22672., 19654., 20736., 15912., 16800., 11628., 12488., 14681.,
      15730., 19002., 20268., 25375., 26886., 26407., 27986., 24751., 26334.,
      25527., 27178., 22834., 24260., 20953., 22190., 17948., 18968., 13420.,
      14376., 16937., 18106., 20858., 22268., 25839., 27454., 26487., 28106.,
      24447., 26006., 23303., 24866., 19506., 20820., 17641., 18742., 15516.,
      16376., 13676., 14600., 16889., 18050., 21690., 23116., 26431., 28086.,
      28999., 30722., 28367., 30094., 26455., 28186., 21810., 23268., 18169.,
      19390., 15132., 16088., 10888., 11648., 12926., 13872., 15852., 17008.,
      19826., 21152., 21394., 22760., 23474., 24880., 24018., 25464., 18748.,
      19968., 16334., 17368., 13064., 13888., 10100., 10792., 11991., 12842.,
      13958., 14988., 15921., 17086., 16505., 17682., 17601., 18790., 19209.,
      20410., 15470., 16468., 12615., 13454., 10596., 11256., 6704.,  7168.,
      8548.,  9168.,  11592., 12384., 13468., 14384., 14236., 15200., 15260.,
      16272., 16540., 17600., 14216., 15136., 10532., 11296., 7600.,  8192.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954., 28367.,
      30094., 26455., 28186., 24415., 26086., 24807., 26482., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 28367., 30094., 26455.,
      28186., 24415., 26086., 24807., 26482., 25375., 26886., 26407., 27986.,
      24751., 26334., 25527., 27178., 25839., 27454., 26487., 28106., 24447.,
      26006., 23303., 24866., 25375., 26886., 26407., 27986., 24751., 26334.,
      25527., 27178., 25839., 27454., 26487., 28106., 24447., 26006., 23303.,
      24866., 26431., 28086., 28999., 30722., 28367., 30094., 26455., 28186.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13820., 14680., 15540., 16400., 15257., 16306., 17355.,
      18404., 17666., 18932., 20198., 21464., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 20978., 22404., 23830., 25256., 19101., 20338.,
      21575., 22812., 16412., 17432., 18452., 19472., 11320., 12080., 12840.,
      13600., 14314., 15228., 16142., 17056., 15508., 16600., 17692., 18784.,
      17750., 19044., 20338., 21632., 19310., 20644., 21978., 23312., 19142.,
      20452., 21762., 23072., 20190., 21540., 22890., 24240., 16788., 17944.,
      19100., 20256., 14482., 15484., 16486., 17488., 12536., 13360., 14184.,
      15008., 9428.,  10056., 10684., 11312., 12171., 12942., 13713., 14484.,
      14310., 15244., 16178., 17112., 16581., 17698., 18815., 19932., 17929.,
      19122., 20315., 21508., 18573., 19778., 20983., 22188., 18193., 19410.,
      20627., 21844., 15350., 16380., 17410., 18440., 12599., 13486., 14373.,
      15260., 10036., 10760., 11484., 12208., 6992.,  7456.,  7920.,  8384.,
      8188.,  8744.,  9300.,  9856.,  10264., 10928., 11592., 12256., 11940.,
      12728., 13516., 14304., 12404., 13240., 14076., 14912., 13380., 14264.,
      15148., 16032., 14868., 15800., 16732., 17664., 12184., 12976., 13768.,
      14560., 10348., 11048., 11748., 12448., 8912.,  9504.,  10096., 10688.,
      9936.,  10528., 11120., 11712., 11452., 12200., 12948., 13696., 13592.,
      14512., 15432., 16352., 15396., 16440., 17484., 18528., 15668., 16696.,
      17724., 18752., 14724., 15672., 16620., 17568., 14484., 15416., 16348.,
      17280., 11160., 11952., 12744., 13536., 9260.,  9896.,  10532., 11168.,
      8016.,  8480.,  8944.,  9408.,  9908.,  10568., 11228., 11888., 13107.,
      13950., 14793., 15636., 15414., 16460., 17506., 18552., 18173., 19378.,
      20583., 21788., 17857., 19074., 20291., 21508., 17861., 19026., 20191.,
      21356., 19081., 20258., 21435., 22612., 16678., 17692., 18706., 19720.,
      12159., 12990., 13821., 14652., 9364.,  9992.,  10620., 11248., 12216.,
      13104., 13992., 14880., 15834., 16908., 17982., 19056., 19220., 20504.,
      21788., 23072., 21222., 22676., 24130., 25584., 21630., 23060., 24490.,
      25920., 20310., 21652., 22994., 24336., 19182., 20500., 21818., 23136.,
      17396., 18488., 19580., 20672., 14370., 15276., 16182., 17088., 9336.,
      10032., 10728., 11424., 15196., 16216., 17236., 18256., 17969., 19218.,
      20467., 21716., 22930., 24436., 25942., 27448., 26335., 28062., 29789.,
      31516., 25579., 27310., 29041., 30772., 24631., 26302., 27973., 29644.,
      24387., 26062., 27737., 29412., 20738., 22148., 23558., 24968., 18357.,
      19538., 20719., 21900., 13948., 14872., 15796., 16720., 13820., 14680.,
      15540., 16400., 15257., 16306., 17355., 18404., 17666., 18932., 20198.,
      21464., 22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756., 20978.,
      22404., 23830., 25256., 19101., 20338., 21575., 22812., 16412., 17432.,
      18452., 19472., 14236., 15192., 16148., 17104., 17601., 18770., 19939.,
      21108., 20210., 21620., 23030., 24440., 23439., 25054., 26669., 28284.,
      23707., 25326., 26945., 28564., 22759., 24318., 25877., 27436., 23539.,
      25102., 26665., 28228., 20322., 21636., 22950., 24264., 16197., 17298.,
      18399., 19500., 12988., 13848., 14708., 15568., 12280., 13104., 13928.,
      14752., 15738., 16764., 17790., 18816., 18292., 19544., 20796., 22048.,
      21318., 22756., 24194., 25632., 22878., 24356., 25834., 27312., 22198.,
      23652., 25106., 26560., 21006., 22436., 23866., 25296., 17652., 18840.,
      20028., 21216., 15010., 15996., 16982., 17968., 10552., 11312., 12072.,
      12832., 9908.,  10568., 11228., 11888., 12163., 12974., 13785., 14596.,
      15030., 16012., 16994., 17976., 15981., 17090., 18199., 19308., 16113.,
      17234., 18355., 19476., 17269., 18402., 19535., 20668., 17401., 18546.,
      19691., 20836., 13510., 14460., 15410., 16360., 11055., 11854., 12653.,
      13452., 9620.,  10248., 10876., 11504., 8912.,  9504.,  10096., 10688.,
      11100., 11816., 12532., 13248., 13144., 14000., 14856., 15712., 14084.,
      15032., 15980., 16928., 12820., 13752., 14684., 15616., 12580., 13496.,
      14412., 15328., 13364., 14264., 15164., 16064., 11224., 11952., 12680.,
      13408., 9420.,  10024., 10628., 11232., 6992.,  7456.,  7920.,  8384.,
      6992.,  7456.,  7920.,  8384.,  9820.,  10408., 10996., 11584., 10712.,
      11440., 12168., 12896., 12484., 13368., 14252., 15136., 13460., 14392.,
      15324., 16256., 14244., 15160., 16076., 16992., 15732., 16696., 17660.,
      18624., 13144., 14000., 14856., 15712., 10444., 11176., 11908., 12640.,
      8912.,  9504.,  10096., 10688., 9364.,  10056., 10748., 11440., 12267.,
      13086., 13905., 14724., 15238., 16204., 17170., 18136., 16485., 17618.,
      18751., 19884., 16681., 17826., 18971., 20116., 16685., 17778., 18871.,
      19964., 16369., 17474., 18579., 19684., 15094., 16028., 16962., 17896.,
      11959., 12766., 13573., 14380., 8820.,  9480.,  10140., 10800., 12280.,
      13104., 13928., 14752., 13994., 14988., 15982., 16976., 18164., 19352.,
      20540., 21728., 22294., 23700., 25106., 26512., 21870., 23316., 24762.,
      26208., 20742., 22164., 23586., 25008., 21854., 23316., 24778., 26240.,
      19412., 20664., 21916., 23168., 17650., 18732., 19814., 20896., 13240.,
      14128., 15016., 15904., 13820., 14680., 15540., 16400., 15257., 16306.,
      17355., 18404., 17666., 18932., 20198., 21464., 22615., 24126., 25637.,
      27148., 23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092.,
      23803., 25454., 27105., 28756., 20978., 22404., 23830., 25256., 19101.,
      20338., 21575., 22812., 16412., 17432., 18452., 19472., 14236., 15192.,
      16148., 17104., 17601., 18770., 19939., 21108., 20210., 21620., 23030.,
      24440., 23439., 25054., 26669., 28284., 23707., 25326., 26945., 28564.,
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228., 20322.,
      21636., 22950., 24264., 16197., 17298., 18399., 19500., 12988., 13848.,
      14708., 15568., 13756., 14680., 15604., 16528., 17513., 18674., 19835.,
      20996., 20834., 22260., 23686., 25112., 24583., 26238., 27893., 29548.,
      26579., 28302., 30025., 31748., 26335., 28062., 29789., 31516., 25579.,
      27310., 29041., 30772., 22482., 23940., 25398., 26856., 18669., 19890.,
      21111., 22332., 13404., 14360., 15316., 16272., 11320., 12080., 12840.,
      13600., 14026., 14972., 15918., 16864., 17236., 18392., 19548., 20704.,
      18998., 20324., 21650., 22976., 19534., 20900., 22266., 23632., 21094.,
      22500., 23906., 25312., 21630., 23076., 24522., 25968., 17492., 18712.,
      19932., 21152., 15218., 16252., 17286., 18320., 12536., 13360., 14184.,
      15008., 10388., 11080., 11772., 12464., 13179., 14030., 14881., 15732.,
      15750., 16780., 17810., 18840., 17109., 18274., 19439., 20604., 16217.,
      17394., 18571., 19748., 16349., 17538., 18727., 19916., 17505., 18706.,
      19907., 21108., 14614., 15612., 16610., 17608., 12455., 13294., 14133.,
      14972., 10100., 10760., 11420., 12080., 6992.,  7456.,  7920.,  8384.,
      9148.,  9768.,  10388., 11008., 12184., 12976., 13768., 14560., 14628.,
      15544., 16460., 17376., 14580., 15544., 16508., 17472., 15044., 16056.,
      17068., 18080., 16020., 17080., 18140., 19200., 14104., 15024., 15944.,
      16864., 11308., 12072., 12836., 13600., 8912.,  9504.,  10096., 10688.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228., 22591.,
      24094., 25597., 27100., 21835., 23342., 24849., 26356., 26335., 28062.,
      29789., 31516., 25579., 27310., 29041., 30772., 24631., 26302., 27973.,
      29644., 24387., 26062., 27737., 29412., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 26335., 28062., 29789., 31516., 25579., 27310.,
      29041., 30772., 24631., 26302., 27973., 29644., 24387., 26062., 27737.,
      29412., 22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756., 23439.,
      25054., 26669., 28284., 23707., 25326., 26945., 28564., 22759., 24318.,
      25877., 27436., 23539., 25102., 26665., 28228., 22615., 24126., 25637.,
      27148., 23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092.,
      23803., 25454., 27105., 28756., 23439., 25054., 26669., 28284., 23707.,
      25326., 26945., 28564., 22759., 24318., 25877., 27436., 23539., 25102.,
      26665., 28228., 24583., 26238., 27893., 29548., 26579., 28302., 30025.,
      31748., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  6800.,  8604.,  10760.,
      11284., 11844., 11924., 13252., 9864.,  8652.,  7312.,  5816.,  6830.,
      8516.,  9978.,  10706., 9674.,  9986.,  8756.,  7462.,  5688.,  4704.,
      5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.,
      4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,
      4704.,  5816.,  6574.,  8932.,  10906., 10322., 9418.,  10786., 9844.,
      7750.,  5688.,  7312.,  8652.,  9864.,  11364., 13332., 12516., 12180.,
      10408., 10012., 7312.,  7912.,  9698.,  12636., 14102., 13790., 13510.,
      15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510., 15406.,
      14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102.,
      13790., 13510., 15406., 12652., 10378., 8296.,  7312.,  8220.,  9992.,
      11924., 13252., 11284., 11844., 10632., 9804.,  6800.,  5816.,  7422.,
      9060.,  9674.,  9986.,  9978.,  10706., 8532.,  7286.,  6200.,  4704.,
      5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,  4704.,
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  6800.,  8604.,  10760.,
      11284., 11844., 11924., 13252., 9864.,  8652.,  7312.,  5816.,  6830.,
      8516.,  9978.,  10706., 9674.,  9986.,  8756.,  7462.,  5688.,  4704.,
      5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,  4704.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406., 13510.,
      15406., 14102., 13790., 14102., 13790., 13510., 15406., 13510., 15406.,
      14102., 13790., 14102., 13790., 13510., 15406., 13510., 15406., 14102.,
      13790., 14102., 13790., 13510., 15406., 13510., 15406., 14102., 13790.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  6768.,  7584.,  7692.,  8664.,  10152., 11376.,
      11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088., 10152.,
      11376., 8460.,  9528.,  6768.,  7584.,  5512.,  6192.,  6946.,  7740.,
      8012.,  9000.,  9190.,  10324., 10278., 11524., 10086., 11252., 9382.,
      10596., 8396.,  9384.,  7266.,  8140.,  5768.,  6448.,  4512.,  5056.,
      5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,  8880.,  7384.,
      8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,  4512.,  5056.,
      4512.,  5056.,  5640.,  6288.,  6768.,  7584.,  7384.,  8304.,  8408.,
      9392.,  7896.,  8816.,  7896.,  8880.,  6768.,  7584.,  6152.,  6864.,
      4512.,  5056.,  5512.,  6192.,  6562.,  7388.,  8524.,  9576.,  10086.,
      11252., 9382.,  10596., 9190.,  10324., 10278., 11524., 8908.,  9960.,
      6882.,  7788.,  5768.,  6448.,  6768.,  7584.,  8460.,  9432.,  10152.,
      11376., 11076., 12456., 12612., 14088., 11844., 13224., 11844., 13320.,
      10152., 11376., 9228.,  10296., 6768.,  7584.,  7768.,  8720.,  9126.,
      10276., 11908., 13368., 14034., 15660., 13330., 15036., 12882., 14476.,
      14482., 16220., 12292., 13752., 9702.,  10964., 8024.,  8976.,  7768.,
      8720.,  9766.,  10884., 11396., 12792., 12882., 14476., 14482., 16220.,
      14034., 15660., 13330., 15036., 11780., 13176., 10342., 11572., 8024.,
      8976.,  7768.,  8720.,  9126.,  10276., 11908., 13368., 14034., 15660.,
      13330., 15036., 12882., 14476., 14482., 16220., 12292., 13752., 9702.,
      10964., 8024.,  8976.,  6768.,  7584.,  8460.,  9432.,  10152., 11376.,
      11076., 12456., 12612., 14088., 11844., 13224., 11844., 13320., 10152.,
      11376., 9228.,  10296., 6768.,  7584.,  5512.,  6192.,  6562.,  7388.,
      8524.,  9576.,  10086., 11252., 9382.,  10596., 9190.,  10324., 10278.,
      11524., 8908.,  9960.,  6882.,  7788.,  5768.,  6448.,  4512.,  5056.,
      5640.,  6288.,  6768.,  7584.,  7384.,  8304.,  8408.,  9392.,  7896.,
      8816.,  7896.,  8880.,  6768.,  7584.,  6152.,  6864.,  4512.,  5056.,
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  6768.,  7584.,  7692.,  8664.,  10152., 11376.,
      11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088., 10152.,
      11376., 8460.,  9528.,  6768.,  7584.,  5512.,  6192.,  6946.,  7740.,
      8012.,  9000.,  9190.,  10324., 10278., 11524., 10086., 11252., 9382.,
      10596., 8396.,  9384.,  7266.,  8140.,  5768.,  6448.,  4512.,  5056.,
      5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,  8880.,  7384.,
      8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036., 14034.,
      15660., 13330., 15036., 12882., 14476., 14482., 16220., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 14034., 15660., 13330.,
      15036., 12882., 14476., 14482., 16220., 12882., 14476., 14482., 16220.,
      14034., 15660., 13330., 15036., 14034., 15660., 13330., 15036., 12882.,
      14476., 14482., 16220., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 14034., 15660., 13330., 15036., 12882., 14476., 14482.,
      16220., 12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736., 12960.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 10500.,
      11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,  10512.,
      11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  6058.,  6852.,  7646.,  8440.,
      7516.,  8504.,  9492.,  10480., 8638.,  9772.,  10906., 12040., 9422.,
      10668., 11914., 13160., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 7516.,  8504.,  9492.,  10480., 6618.,  7492.,  8366.,
      9240.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,
      8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6282.,
      7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 8638.,  9772.,  10906.,
      12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,  10068., 11120.,
      6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8750.,  9900.,
      11050., 12200., 11060., 12520., 13980., 15440., 12362., 13988., 15614.,
      17240., 12922., 14628., 16334., 18040., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 11060., 12520., 13980., 15440., 9534.,
      10796., 12058., 13320., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8526.,  9644.,  10762., 11880., 10612., 12008., 13404.,
      14800., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 10612.,
      12008., 13404., 14800., 9310.,  10540., 11770., 13000., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8750.,  9900.,  11050.,
      12200., 11060., 12520., 13980., 15440., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146.,
      14884., 16622., 18360., 11060., 12520., 13980., 15440., 9534.,  10796.,
      12058., 13320., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736., 12960.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 10500.,
      11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,  10512.,
      11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,
      7964.,  9016.,  10068., 11120., 8862.,  10028., 11194., 12360., 9198.,
      10412., 11626., 12840., 8638.,  9772.,  10906., 12040., 9422.,  10668.,
      11914., 13160., 7964.,  9016.,  10068., 11120., 6842.,  7748.,  8654.,
      9560.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,
      8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736., 12960.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 10500.,
      11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,  10512.,
      11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  6058.,  6852.,  7646.,  8440.,
      7516.,  8504.,  9492.,  10480., 8638.,  9772.,  10906., 12040., 9422.,
      10668., 11914., 13160., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 7516.,  8504.,  9492.,  10480., 6618.,  7492.,  8366.,
      9240.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4936.,  5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,
      7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,
      8640.,  5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362., 13988.,
      15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12362., 13988., 15614., 17240., 12922., 14628.,
      16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884.,
      16622., 18360., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2908.,  3878.,  4870.,  5880., 6330.,  5666.,  5028.,  4420.,  3044.,
      4285.,  5564.,  6876.,  7452., 6805.,  6172.,  5558.,  4630.,  6467.,
      8343.,  10252., 10905., 9897., 8906.,  7938.,  6418.,  8096.,  9799.,
      11520., 12201., 10510., 8854., 7240.,  6146.,  7888.,  9631.,  11368.,
      12049., 10454., 8918.,  7448., 4786.,  6400.,  8023.,  9648.,  10329.,
      9150.,  8022.,  6952.,  5218., 7152.,  9103.,  11064., 11745., 10534.,
      9366.,  8248.,  5266.,  6661., 8085.,  9532.,  10115., 8751.,  7414.,
      6110.,  3864.,  5083.,  6326., 7588.,  8122.,  7191.,  6288.,  5418.,
      3060.,  3850.,  4642.,  5432., 5838.,  4942.,  4060.,  3196.,  3676.,
      5222.,  6790.,  8376.,  8826., 8098.,  7396.,  6724.,  5828.,  7341.,
      8876.,  10428., 11004., 9509., 8044.,  6614.,  5910.,  7603.,  9303.,
      11004., 11657., 10153., 8698., 7298.,  4786.,  6400.,  8023.,  9648.,
      10329., 9150.,  8022.,  6952., 5218.,  7152.,  9103.,  11064., 11745.,
      10534., 9366.,  8248.,  6418., 8096.,  9799.,  11520., 12201., 10510.,
      8854.,  7240.,  6146.,  7888., 9631.,  11368., 12049., 10454., 8918.,
      7448.,  4626.,  6165.,  7701., 9228.,  9811.,  8687.,  7622.,  6622.,
      4472.,  6187.,  7910.,  9636., 10170., 9191.,  8256.,  7370.,  4852.,
      6090.,  7330.,  8568.,  8974., 7630.,  6300.,  4988.,  2908.,  3878.,
      4870.,  5880.,  6330.,  5666., 5028.,  4420.,  3044.,  4285.,  5564.,
      6876.,  7452.,  6805.,  6172., 5558.,  4630.,  6467.,  8343.,  10252.,
      10905., 9897.,  8906.,  7938., 6418.,  8096.,  9799.,  11520., 12201.,
      10510., 8854.,  7240.,  6146., 7888.,  9631.,  11368., 12049., 10454.,
      8918.,  7448.,  4786.,  6400., 8023.,  9648.,  10329., 9150.,  8022.,
      6952.,  5218.,  7152.,  9103., 11064., 11745., 10534., 9366.,  8248.,
      5266.,  6661.,  8085.,  9532., 10115., 8751.,  7414.,  6110.,  3864.,
      5083.,  6326.,  7588.,  8122., 7191.,  6288.,  5418.,  3060.,  3850.,
      4642.,  5432.,  5838.,  4942., 4060.,  3196.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11520., 12201., 11368., 12049., 9648.,  10329., 11064., 11745.,
      9648.,  10329., 11064., 11745., 11520., 12201., 11368., 12049.,
      11520., 12201., 11368., 12049., 9648.,  10329., 11064., 11745.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4080.,  4312.,  5440.,  5740.,  6776.,  7148.,  8080.,  8528.,  8568.,
      9044.,  8256.,  8676.,  7008.,  7368.,  5856.,  6152.,  3510.,  3752.,
      4735.,  5050.,  5967.,  6360.,  7196.,  7672.,  7769.,  8280.,  7109.,
      7562.,  6290.,  6680.,  5578.,  5900.,  4080.,  4364.,  5716.,  6086.,
      7616.,  8078.,  9512.,  10072., 10232., 10834., 9628.,  10162., 8616.,
      9076.,  7720.,  8100.,  6046.,  6404.,  7599.,  8064.,  9643.,  10222.,
      11652., 12352., 12421., 13170., 11237., 11900., 9426.,  9996.,  7770.,
      8240.,  6942.,  7396.,  8855.,  9440.,  11467., 12190., 13996., 14864.,
      14765., 15682., 13541., 14348., 11482., 12172., 9626.,  10192., 6814.,
      7236.,  8735.,  9280.,  10603., 11278., 12404., 13216., 13173., 14034.,
      11493., 12252., 9730.,  10380., 8154.,  8688.,  5150.,  5540.,  6951.,
      7456.,  8971.,  9598.,  10940., 11696., 11709., 12514., 10725., 11436.,
      9386.,  9996.,  8218.,  8720.,  4456.,  4740.,  5496.,  5866.,  7036.,
      7498.,  8552.,  9112.,  9164.,  9766.,  7848.,  8382.,  6656.,  7116.,
      5600.,  5980.,  3454.,  3728.,  4403.,  4758.,  6099.,  6540.,  7764.,
      8296.,  8285.,  8852.,  7321.,  7822.,  6482.,  6912.,  5778.,  6132.,
      4224.,  4456.,  5160.,  5460.,  6064.,  6436.,  6928.,  7376.,  7328.,
      7804.,  6040.,  6460.,  4848.,  5208.,  3760.,  4056.,  3568.,  3800.,
      5056.,  5356.,  6520.,  6892.,  7952.,  8400.,  8440.,  8916.,  8000.,
      8420.,  7136.,  7496.,  6368.,  6664.,  4918.,  5224.,  6159.,  6554.,
      7887.,  8376.,  9580.,  10168., 10153., 10776., 9349.,  9898.,  7906.,
      8376.,  6602.,  6988.,  6512.,  6924.,  8340.,  8870.,  10880., 11534.,
      13352., 14136., 14072., 14898., 13020., 13746., 11112., 11732., 9384.,
      9892.,  6814.,  7236.,  8735.,  9280.,  10603., 11278., 12404., 13216.,
      13173., 14034., 11493., 12252., 9730.,  10380., 8154.,  8688.,  5150.,
      5540.,  6951.,  7456.,  8971.,  9598.,  10940., 11696., 11709., 12514.,
      10725., 11436., 9386.,  9996.,  8218.,  8720.,  6046.,  6404.,  7599.,
      8064.,  9643.,  10222., 11652., 12352., 12421., 13170., 11237., 11900.,
      9426.,  9996.,  7770.,  8240.,  6942.,  7396.,  8855.,  9440.,  11467.,
      12190., 13996., 14864., 14765., 15682., 13541., 14348., 11482., 12172.,
      9626.,  10192., 6632.,  7044.,  8440.,  8970.,  10172., 10826., 11816.,
      12600., 12428., 13254., 10600., 11326., 8960.,  9580.,  7520.,  8028.,
      4094.,  4432.,  5507.,  5942.,  7123.,  7660.,  8676.,  9320.,  9197.,
      9876.,  8153.,  8750.,  7266.,  7776.,  6546.,  6964.,  3712.,  3944.,
      4520.,  4820.,  5808.,  6180.,  7056.,  7504.,  7456.,  7932.,  6296.,
      6716.,  5232.,  5592.,  4272.,  4568.,  4080.,  4312.,  5440.,  5740.,
      6776.,  7148.,  8080.,  8528.,  8568.,  9044.,  8256.,  8676.,  7008.,
      7368.,  5856.,  6152.,  3510.,  3752.,  4735.,  5050.,  5967.,  6360.,
      7196.,  7672.,  7769.,  8280.,  7109.,  7562.,  6290.,  6680.,  5578.,
      5900.,  4080.,  4364.,  5716.,  6086.,  7616.,  8078.,  9512.,  10072.,
      10232., 10834., 9628.,  10162., 8616.,  9076.,  7720.,  8100.,  6046.,
      6404.,  7599.,  8064.,  9643.,  10222., 11652., 12352., 12421., 13170.,
      11237., 11900., 9426.,  9996.,  7770.,  8240.,  6942.,  7396.,  8855.,
      9440.,  11467., 12190., 13996., 14864., 14765., 15682., 13541., 14348.,
      11482., 12172., 9626.,  10192., 6814.,  7236.,  8735.,  9280.,  10603.,
      11278., 12404., 13216., 13173., 14034., 11493., 12252., 9730.,  10380.,
      8154.,  8688.,  5150.,  5540.,  6951.,  7456.,  8971.,  9598.,  10940.,
      11696., 11709., 12514., 10725., 11436., 9386.,  9996.,  8218.,  8720.,
      4456.,  4740.,  5496.,  5866.,  7036.,  7498.,  8552.,  9112.,  9164.,
      9766.,  7848.,  8382.,  6656.,  7116.,  5600.,  5980.,  3454.,  3728.,
      4403.,  4758.,  6099.,  6540.,  7764.,  8296.,  8285.,  8852.,  7321.,
      7822.,  6482.,  6912.,  5778.,  6132.,  4224.,  4456.,  5160.,  5460.,
      6064.,  6436.,  6928.,  7376.,  7328.,  7804.,  6040.,  6460.,  4848.,
      5208.,  3760.,  4056.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      12404., 13216., 13173., 14034., 10940., 11696., 11709., 12514.,
      12404., 13216., 13173., 14034., 10940., 11696., 11709., 12514.,
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      11652., 12352., 12421., 13170., 13996., 14864., 14765., 15682.,
      12404., 13216., 13173., 14034., 10940., 11696., 11709., 12514.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,  5948.,
      6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,  7856.,
      8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,  7368.,
      7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,  3664.,
      4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,  7100.,
      7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,  7850.,
      8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,  6902.,
      7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,  5932.,
      6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,  8854.,
      9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,  8080.,
      8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,  5218.,
      5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,  9948.,
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 10131.,
      10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,  7988.,
      8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,  9495.,
      10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524., 15392.,
      13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712., 10562.,
      11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5974.,  6396.,
      6818.,  7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198., 10873.,
      11548., 11708., 12520., 13332., 14144., 12429., 13290., 14151., 15012.,
      11059., 11818., 12577., 13336., 9914.,  10564., 11214., 11864., 8222.,
      8756.,  9290.,  9824.,  5238.,  5628.,  6018.,  6408.,  7157.,  7662.,
      8167.,  8672.,  9123.,  9750.,  10377., 11004., 10884., 11640., 12396.,
      13152., 11605., 12410., 13215., 14020., 10339., 11050., 11761., 12472.,
      9010.,  9620.,  10230., 10840., 7870.,  8372.,  8874.,  9376.,  3124.,
      3408.,  3692.,  3976.,  4446.,  4816.,  5186.,  5556.,  6154.,  6616.,
      7078.,  7540.,  8000.,  8560.,  9120.,  9680.,  8606.,  9208.,  9810.,
      10412., 7610.,  8144.,  8678.,  9212.,  6964.,  7424.,  7884.,  8344.,
      6148.,  6528.,  6908.,  7288.,  3658.,  3932.,  4206.,  4480.,  4355.,
      4710.,  5065.,  5420.,  5677.,  6118.,  6559.,  7000.,  7380.,  7912.,
      8444.,  8976.,  7875.,  8442.,  9009.,  9576.,  6589.,  7090.,  7591.,
      8092.,  5622.,  6052.,  6482.,  6912.,  4994.,  5348.,  5702.,  6056.,
      3480.,  3712.,  3944.,  4176.,  4228.,  4528.,  4828.,  5128.,  4844.,
      5216.,  5588.,  5960.,  6112.,  6560.,  7008.,  7456.,  6500.,  6976.,
      7452.,  7928.,  5196.,  5616.,  6036.,  6456.,  4152.,  4512.,  4872.,
      5232.,  3384.,  3680.,  3976.,  4272.,  2552.,  2784.,  3016.,  3248.,
      4052.,  4352.,  4652.,  4952.,  5436.,  5808.,  6180.,  6552.,  6688.,
      7136.,  7584.,  8032.,  7124.,  7600.,  8076.,  8552.,  6876.,  7296.,
      7716.,  8136.,  6392.,  6752.,  7112.,  7472.,  5912.,  6208.,  6504.,
      6800.,  3642.,  3948.,  4254.,  4560.,  5139.,  5534.,  5929.,  6324.,
      6997.,  7486.,  7975.,  8464.,  8684.,  9272.,  9860.,  10448., 9219.,
      9842.,  10465., 11088., 8709.,  9258.,  9807.,  10356., 7790.,  8260.,
      8730.,  9200.,  6706.,  7092.,  7478.,  7864.,  5892.,  6304.,  6716.,
      7128.,  7350.,  7880.,  8410.,  8940.,  9330.,  9984.,  10638., 11292.,
      11584., 12368., 13152., 13936., 12214., 13040., 13866., 14692., 11330.,
      12056., 12782., 13508., 9892.,  10512., 11132., 11752., 8148.,  8656.,
      9164.,  9672.,  5974.,  6396.,  6818.,  7240.,  7869.,  8414.,  8959.,
      9504.,  9523.,  10198., 10873., 11548., 11708., 12520., 13332., 14144.,
      12429., 13290., 14151., 15012., 11059., 11818., 12577., 13336., 9914.,
      10564., 11214., 11864., 8222.,  8756.,  9290.,  9824.,  5238.,  5628.,
      6018.,  6408.,  7157.,  7662.,  8167.,  8672.,  9123.,  9750.,  10377.,
      11004., 10884., 11640., 12396., 13152., 11605., 12410., 13215., 14020.,
      10339., 11050., 11761., 12472., 9010.,  9620.,  10230., 10840., 7870.,
      8372.,  8874.,  9376.,  4502.,  4860.,  5218.,  5576.,  6189.,  6654.,
      7119.,  7584.,  8211.,  8790.,  9369.,  9948.,  10316., 11016., 11716.,
      12416., 11037., 11786., 12535., 13284., 10131., 10794., 11457., 12120.,
      8874.,  9444.,  10014., 10584., 7518.,  7988.,  8458.,  8928.,  6710.,
      7164.,  7618.,  8072.,  8325.,  8910.,  9495.,  10080., 10435., 11158.,
      11881., 12604., 12788., 13656., 14524., 15392., 13509., 14426., 15343.,
      16260., 12291., 13098., 13905., 14712., 10562., 11252., 11942., 12632.,
      8574.,  9140.,  9706.,  10272., 5812.,  6224.,  6636.,  7048.,  7614.,
      8144.,  8674.,  9204.,  9162.,  9816.,  10470., 11124., 11232., 12016.,
      12800., 13584., 11838., 12664., 13490., 14316., 10362., 11088., 11814.,
      12540., 9364.,  9984.,  10604., 11224., 7812.,  8320.,  8828.,  9336.,
      4362.,  4700.,  5038.,  5376.,  5971.,  6406.,  6841.,  7276.,  7629.,
      8166.,  8703.,  9240.,  9092.,  9736.,  10380., 11024., 9587.,  10266.,
      10945., 11624., 8157.,  8754.,  9351.,  9948.,  7110.,  7620.,  8130.,
      8640.,  6466.,  6884.,  7302.,  7720.,  2456.,  2688.,  2920.,  3152.,
      3460.,  3760.,  4060.,  4360.,  4844.,  5216.,  5588.,  5960.,  6368.,
      6816.,  7264.,  7712.,  6756.,  7232.,  7708.,  8184.,  5708.,  6128.,
      6548.,  6968.,  4920.,  5280.,  5640.,  6000.,  4408.,  4704.,  5000.,
      5296.,  3576.,  3808.,  4040.,  4272.,  4820.,  5120.,  5420.,  5720.,
      5948.,  6320.,  6692.,  7064.,  6944.,  7392.,  7840.,  8288.,  7380.,
      7856.,  8332.,  8808.,  7388.,  7808.,  8228.,  8648.,  6648.,  7008.,
      7368.,  7728.,  5400.,  5696.,  5992.,  6288.,  2938.,  3180.,  3422.,
      3664.,  4419.,  4734.,  5049.,  5364.,  5813.,  6206.,  6599.,  6992.,
      7100.,  7576.,  8052.,  8528.,  7635.,  8146.,  8657.,  9168.,  7397.,
      7850.,  8303.,  8756.,  7198.,  7588.,  7978.,  8368.,  6258.,  6580.,
      6902.,  7224.,  3204.,  3488.,  3772.,  4056.,  4822.,  5192.,  5562.,
      5932.,  6578.,  7040.,  7502.,  7964.,  8224.,  8784.,  9344.,  9904.,
      8854.,  9456.,  10058., 10660., 8322.,  8856.,  9390.,  9924.,  7620.,
      8080.,  8540.,  9000.,  6996.,  7376.,  7756.,  8136.,  4502.,  4860.,
      5218.,  5576.,  6189.,  6654.,  7119.,  7584.,  8211.,  8790.,  9369.,
      9948.,  10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      10131., 10794., 11457., 12120., 8874.,  9444.,  10014., 10584., 7518.,
      7988.,  8458.,  8928.,  6710.,  7164.,  7618.,  8072.,  8325.,  8910.,
      9495.,  10080., 10435., 11158., 11881., 12604., 12788., 13656., 14524.,
      15392., 13509., 14426., 15343., 16260., 12291., 13098., 13905., 14712.,
      10562., 11252., 11942., 12632., 8574.,  9140.,  9706.,  10272., 5974.,
      6396.,  6818.,  7240.,  7869.,  8414.,  8959.,  9504.,  9523.,  10198.,
      10873., 11548., 11708., 12520., 13332., 14144., 12429., 13290., 14151.,
      15012., 11059., 11818., 12577., 13336., 9914.,  10564., 11214., 11864.,
      8222.,  8756.,  9290.,  9824.,  5238.,  5628.,  6018.,  6408.,  7157.,
      7662.,  8167.,  8672.,  9123.,  9750.,  10377., 11004., 10884., 11640.,
      12396., 13152., 11605., 12410., 13215., 14020., 10339., 11050., 11761.,
      12472., 9010.,  9620.,  10230., 10840., 7870.,  8372.,  8874.,  9376.,
      3124.,  3408.,  3692.,  3976.,  4446.,  4816.,  5186.,  5556.,  6154.,
      6616.,  7078.,  7540.,  8000.,  8560.,  9120.,  9680.,  8606.,  9208.,
      9810.,  10412., 7610.,  8144.,  8678.,  9212.,  6964.,  7424.,  7884.,
      8344.,  6148.,  6528.,  6908.,  7288.,  3658.,  3932.,  4206.,  4480.,
      4355.,  4710.,  5065.,  5420.,  5677.,  6118.,  6559.,  7000.,  7380.,
      7912.,  8444.,  8976.,  7875.,  8442.,  9009.,  9576.,  6589.,  7090.,
      7591.,  8092.,  5622.,  6052.,  6482.,  6912.,  4994.,  5348.,  5702.,
      6056.,  3480.,  3712.,  3944.,  4176.,  4228.,  4528.,  4828.,  5128.,
      4844.,  5216.,  5588.,  5960.,  6112.,  6560.,  7008.,  7456.,  6500.,
      6976.,  7452.,  7928.,  5196.,  5616.,  6036.,  6456.,  4152.,  4512.,
      4872.,  5232.,  3384.,  3680.,  3976.,  4272.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284., 12788.,
      13656., 14524., 15392., 13509., 14426., 15343., 16260., 11708., 12520.,
      13332., 14144., 12429., 13290., 14151., 15012., 10884., 11640., 12396.,
      13152., 11605., 12410., 13215., 14020., 11708., 12520., 13332., 14144.,
      12429., 13290., 14151., 15012., 10884., 11640., 12396., 13152., 11605.,
      12410., 13215., 14020., 10316., 11016., 11716., 12416., 11037., 11786.,
      12535., 13284., 12788., 13656., 14524., 15392., 13509., 14426., 15343.,
      16260., 10316., 11016., 11716., 12416., 11037., 11786., 12535., 13284.,
      12788., 13656., 14524., 15392., 13509., 14426., 15343., 16260., 11708.,
      12520., 13332., 14144., 12429., 13290., 14151., 15012., 10884., 11640.,
      12396., 13152., 11605., 12410., 13215., 14020.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,
      9657.,  12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296.,
      17336., 22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294.,
      23463., 26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335.,
      28509., 27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 10324., 14421., 19774., 25335., 28509., 27202.,
      24095., 21260., 11136., 14300., 17664., 21212., 23744., 20552., 17576.,
      14864., 6148.,  8693.,  12422., 16303., 18457., 16914., 15595., 14540.,
      8160.,  10400., 12752., 15216., 16872., 14304., 11848., 9536.,  6528.,
      9656.,  12960., 16408., 18416., 18448., 16544., 14752., 7316.,  9657.,
      12270., 15147., 17509., 16410., 14431., 12604., 8560.,  12296., 17336.,
      22640., 25604., 24992., 22500., 20192., 11796., 15397., 19294., 23463.,
      26637., 24034., 20591., 17356., 10324., 14421., 19774., 25335., 28509.,
      27202., 24095., 21260., 11796., 15397., 19294., 23463., 26637., 24034.,
      20591., 17356., 10324., 14421., 19774., 25335., 28509., 27202., 24095.,
      21260., 11136., 14300., 17664., 21212., 23744., 20552., 17576., 14864.,
      6148.,  8693.,  12422., 16303., 18457., 16914., 15595., 14540., 8160.,
      10400., 12752., 15216., 16872., 14304., 11848., 9536.,  6528.,  9656.,
      12960., 16408., 18416., 18448., 16544., 14752., 7316.,  9657.,  12270.,
      15147., 17509., 16410., 14431., 12604., 8560.,  12296., 17336., 22640.,
      25604., 24992., 22500., 20192., 11796., 15397., 19294., 23463., 26637.,
      24034., 20591., 17356., 10324., 14421., 19774., 25335., 28509., 27202.,
      24095., 21260., 11796., 15397., 19294., 23463., 26637., 24034., 20591.,
      17356., 10324., 14421., 19774., 25335., 28509., 27202., 24095., 21260.,
      11136., 14300., 17664., 21212., 23744., 20552., 17576., 14864., 6148.,
      8693.,  12422., 16303., 18457., 16914., 15595., 14540., 8160.,  10400.,
      12752., 15216., 16872., 14304., 11848., 9536.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23463., 26637., 25335., 28509., 23463., 26637., 25335., 28509.,
      23463., 26637., 25335., 28509., 23463., 26637., 25335., 28509.,
      23463., 26637., 25335., 28509., 23463., 26637., 25335., 28509.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  6208.,  8404.,  8944.,  11080., 11776., 13772., 14640., 15628.,
      16608., 15976., 16864., 14868., 15648., 13264., 13920., 5300.,  5736.,
      8351.,  8946.,  11574., 12348., 14921., 15894., 17201., 18314., 17086.,
      18100., 16607., 17502., 14692., 15448., 8520.,  9120.,  11654., 12464.,
      15868., 16912., 20170., 21472., 22858., 24328., 22060., 23392., 20054.,
      21224., 17832., 18816., 8812.,  9448.,  12681., 13546., 16634., 17756.,
      21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526., 18204.,
      19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231., 26862.,
      28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 11884., 12648., 15689.,
      16714., 20474., 21788., 25231., 26862., 28311., 30138., 26162., 27812.,
      22969., 24414., 19740., 20952., 8200.,  8800.,  11694., 12504., 15212.,
      16256., 19810., 21112., 22402., 23872., 20284., 21616., 19006., 20176.,
      16520., 17504., 8308.,  8872.,  10839., 11594., 14342., 15308., 17841.,
      19038., 19961., 21298., 17198., 18404., 15159., 16214., 13924., 14808.,
      5424.,  5824.,  7620.,  8160.,  9800.,  10496., 13052., 13920., 14716.,
      15696., 12424., 13312., 10628., 11408., 9392.,  10048., 5808.,  6208.,
      8404.,  8944.,  11080., 11776., 13772., 14640., 15628., 16608., 15976.,
      16864., 14868., 15648., 13264., 13920., 5300.,  5736.,  8351.,  8946.,
      11574., 12348., 14921., 15894., 17201., 18314., 17086., 18100., 16607.,
      17502., 14692., 15448., 8520.,  9120.,  11654., 12464., 15868., 16912.,
      20170., 21472., 22858., 24328., 22060., 23392., 20054., 21224., 17832.,
      18816., 8812.,  9448.,  12681., 13546., 16634., 17756., 21711., 23118.,
      24791., 26394., 23090., 24548., 21241., 22526., 18204., 19288., 11884.,
      12648., 15689., 16714., 20474., 21788., 25231., 26862., 28311., 30138.,
      26162., 27812., 22969., 24414., 19740., 20952., 8812.,  9448.,  12681.,
      13546., 16634., 17756., 21711., 23118., 24791., 26394., 23090., 24548.,
      21241., 22526., 18204., 19288., 11884., 12648., 15689., 16714., 20474.,
      21788., 25231., 26862., 28311., 30138., 26162., 27812., 22969., 24414.,
      19740., 20952., 8200.,  8800.,  11694., 12504., 15212., 16256., 19810.,
      21112., 22402., 23872., 20284., 21616., 19006., 20176., 16520., 17504.,
      8308.,  8872.,  10839., 11594., 14342., 15308., 17841., 19038., 19961.,
      21298., 17198., 18404., 15159., 16214., 13924., 14808., 5424.,  5824.,
      7620.,  8160.,  9800.,  10496., 13052., 13920., 14716., 15696., 12424.,
      13312., 10628., 11408., 9392.,  10048., 5808.,  6208.,  8404.,  8944.,
      11080., 11776., 13772., 14640., 15628., 16608., 15976., 16864., 14868.,
      15648., 13264., 13920., 5300.,  5736.,  8351.,  8946.,  11574., 12348.,
      14921., 15894., 17201., 18314., 17086., 18100., 16607., 17502., 14692.,
      15448., 8520.,  9120.,  11654., 12464., 15868., 16912., 20170., 21472.,
      22858., 24328., 22060., 23392., 20054., 21224., 17832., 18816., 8812.,
      9448.,  12681., 13546., 16634., 17756., 21711., 23118., 24791., 26394.,
      23090., 24548., 21241., 22526., 18204., 19288., 11884., 12648., 15689.,
      16714., 20474., 21788., 25231., 26862., 28311., 30138., 26162., 27812.,
      22969., 24414., 19740., 20952., 8812.,  9448.,  12681., 13546., 16634.,
      17756., 21711., 23118., 24791., 26394., 23090., 24548., 21241., 22526.,
      18204., 19288., 11884., 12648., 15689., 16714., 20474., 21788., 25231.,
      26862., 28311., 30138., 26162., 27812., 22969., 24414., 19740., 20952.,
      8200.,  8800.,  11694., 12504., 15212., 16256., 19810., 21112., 22402.,
      23872., 20284., 21616., 19006., 20176., 16520., 17504., 8308.,  8872.,
      10839., 11594., 14342., 15308., 17841., 19038., 19961., 21298., 17198.,
      18404., 15159., 16214., 13924., 14808., 5424.,  5824.,  7620.,  8160.,
      9800.,  10496., 13052., 13920., 14716., 15696., 12424., 13312., 10628.,
      11408., 9392.,  10048.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.,
      21711., 23118., 24791., 26394., 25231., 26862., 28311., 30138.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,  10488.,
      11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500., 15480.,
      16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264., 13044.,
      13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,  7856.,
      9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912., 14853.,
      15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654., 16668.,
      17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040., 12796.,
      13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014., 13824.,
      15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136., 21750.,
      23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850., 19020.,
      20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072., 10708.,
      11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390., 19512.,
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 21970.,
      23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348., 17432.,
      18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762., 16787.,
      17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005., 28636.,
      26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800., 21389.,
      22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762.,
      16787., 17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005.,
      28636., 26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800.,
      21389., 22834., 24279., 25724., 18268., 19480., 20692., 21904., 8920.,
      9520.,  10120., 10720., 12210., 13020., 13830., 14640., 15044., 16088.,
      17132., 18176., 19502., 20804., 22106., 23408., 21958., 23428., 24898.,
      26368., 19684., 21016., 22348., 23680., 18378., 19548., 20718., 21888.,
      14936., 15920., 16904., 17888., 8468.,  9032.,  9596.,  10160., 11227.,
      11982., 12737., 13492., 14534., 15500., 16466., 17432., 17333., 18530.,
      19727., 20924., 19385., 20722., 22059., 23396., 17350., 18556., 19762.,
      20968., 15023., 16078., 17133., 18188., 13460., 14344., 15228., 16112.,
      6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016., 10488.,
      11184., 11880., 12576., 13332., 14200., 15068., 15936., 15012., 15992.,
      16972., 17952., 13368., 14256., 15144., 16032., 11996., 12776., 13556.,
      14336., 9872.,  10528., 11184., 11840., 6032.,  6432.,  6832.,  7232.,
      7884.,  8424.,  8964.,  9504.,  10488., 11184., 11880., 12576., 12820.,
      13688., 14556., 15424., 14500., 15480., 16460., 17440., 13368., 14256.,
      15144., 16032., 11484., 12264., 13044., 13824., 9872.,  10528., 11184.,
      11840., 6548.,  6984.,  7420.,  7856.,  9163.,  9758.,  10353., 10948.,
      11590., 12364., 13138., 13912., 14853., 15826., 16799., 17772., 16969.,
      18082., 19195., 20308., 15654., 16668., 17682., 18696., 13759., 14654.,
      15549., 16444., 11284., 12040., 12796., 13552., 8920.,  9520.,  10120.,
      10720., 11394., 12204., 13014., 13824., 15492., 16536., 17580., 18624.,
      19230., 20532., 21834., 23136., 21750., 23220., 24690., 26160., 20868.,
      22200., 23532., 24864., 17850., 19020., 20190., 21360., 14680., 15664.,
      16648., 17632., 9436.,  10072., 10708., 11344., 12977., 13842., 14707.,
      15572., 16146., 17268., 18390., 19512., 21023., 22430., 23837., 25244.,
      23915., 25518., 27121., 28724., 21970., 23428., 24886., 26344., 20141.,
      21426., 22711., 23996., 16348., 17432., 18516., 19600., 11356., 12120.,
      12884., 13648., 14737., 15762., 16787., 17812., 19538., 20852., 22166.,
      23480., 23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116.,
      24850., 26500., 28150., 29800., 21389., 22834., 24279., 25724., 18268.,
      19480., 20692., 21904., 9436.,  10072., 10708., 11344., 12977., 13842.,
      14707., 15572., 16146., 17268., 18390., 19512., 21023., 22430., 23837.,
      25244., 23915., 25518., 27121., 28724., 21970., 23428., 24886., 26344.,
      20141., 21426., 22711., 23996., 16348., 17432., 18516., 19600., 11356.,
      12120., 12884., 13648., 14737., 15762., 16787., 17812., 19538., 20852.,
      22166., 23480., 23743., 25374., 27005., 28636., 26635., 28462., 30289.,
      32116., 24850., 26500., 28150., 29800., 21389., 22834., 24279., 25724.,
      18268., 19480., 20692., 21904., 8920.,  9520.,  10120., 10720., 12210.,
      13020., 13830., 14640., 15044., 16088., 17132., 18176., 19502., 20804.,
      22106., 23408., 21958., 23428., 24898., 26368., 19684., 21016., 22348.,
      23680., 18378., 19548., 20718., 21888., 14936., 15920., 16904., 17888.,
      8468.,  9032.,  9596.,  10160., 11227., 11982., 12737., 13492., 14534.,
      15500., 16466., 17432., 17333., 18530., 19727., 20924., 19385., 20722.,
      22059., 23396., 17350., 18556., 19762., 20968., 15023., 16078., 17133.,
      18188., 13460., 14344., 15228., 16112., 6032.,  6432.,  6832.,  7232.,
      8396.,  8936.,  9476.,  10016., 10488., 11184., 11880., 12576., 13332.,
      14200., 15068., 15936., 15012., 15992., 16972., 17952., 13368., 14256.,
      15144., 16032., 11996., 12776., 13556., 14336., 9872.,  10528., 11184.,
      11840., 6032.,  6432.,  6832.,  7232.,  7884.,  8424.,  8964.,  9504.,
      10488., 11184., 11880., 12576., 12820., 13688., 14556., 15424., 14500.,
      15480., 16460., 17440., 13368., 14256., 15144., 16032., 11484., 12264.,
      13044., 13824., 9872.,  10528., 11184., 11840., 6548.,  6984.,  7420.,
      7856.,  9163.,  9758.,  10353., 10948., 11590., 12364., 13138., 13912.,
      14853., 15826., 16799., 17772., 16969., 18082., 19195., 20308., 15654.,
      16668., 17682., 18696., 13759., 14654., 15549., 16444., 11284., 12040.,
      12796., 13552., 8920.,  9520.,  10120., 10720., 11394., 12204., 13014.,
      13824., 15492., 16536., 17580., 18624., 19230., 20532., 21834., 23136.,
      21750., 23220., 24690., 26160., 20868., 22200., 23532., 24864., 17850.,
      19020., 20190., 21360., 14680., 15664., 16648., 17632., 9436.,  10072.,
      10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268., 18390.,
      19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996., 16348.,
      17432., 18516., 19600., 11356., 12120., 12884., 13648., 14737., 15762.,
      16787., 17812., 19538., 20852., 22166., 23480., 23743., 25374., 27005.,
      28636., 26635., 28462., 30289., 32116., 24850., 26500., 28150., 29800.,
      21389., 22834., 24279., 25724., 18268., 19480., 20692., 21904., 9436.,
      10072., 10708., 11344., 12977., 13842., 14707., 15572., 16146., 17268.,
      18390., 19512., 21023., 22430., 23837., 25244., 23915., 25518., 27121.,
      28724., 21970., 23428., 24886., 26344., 20141., 21426., 22711., 23996.,
      16348., 17432., 18516., 19600., 11356., 12120., 12884., 13648., 14737.,
      15762., 16787., 17812., 19538., 20852., 22166., 23480., 23743., 25374.,
      27005., 28636., 26635., 28462., 30289., 32116., 24850., 26500., 28150.,
      29800., 21389., 22834., 24279., 25724., 18268., 19480., 20692., 21904.,
      8920.,  9520.,  10120., 10720., 12210., 13020., 13830., 14640., 15044.,
      16088., 17132., 18176., 19502., 20804., 22106., 23408., 21958., 23428.,
      24898., 26368., 19684., 21016., 22348., 23680., 18378., 19548., 20718.,
      21888., 14936., 15920., 16904., 17888., 8468.,  9032.,  9596.,  10160.,
      11227., 11982., 12737., 13492., 14534., 15500., 16466., 17432., 17333.,
      18530., 19727., 20924., 19385., 20722., 22059., 23396., 17350., 18556.,
      19762., 20968., 15023., 16078., 17133., 18188., 13460., 14344., 15228.,
      16112., 6032.,  6432.,  6832.,  7232.,  8396.,  8936.,  9476.,  10016.,
      10488., 11184., 11880., 12576., 13332., 14200., 15068., 15936., 15012.,
      15992., 16972., 17952., 13368., 14256., 15144., 16032., 11996., 12776.,
      13556., 14336., 9872.,  10528., 11184., 11840.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724., 23743.,
      25374., 27005., 28636., 26635., 28462., 30289., 32116., 21023., 22430.,
      23837., 25244., 23915., 25518., 27121., 28724., 23743., 25374., 27005.,
      28636., 26635., 28462., 30289., 32116., 21023., 22430., 23837., 25244.,
      23915., 25518., 27121., 28724., 23743., 25374., 27005., 28636., 26635.,
      28462., 30289., 32116., 21023., 22430., 23837., 25244., 23915., 25518.,
      27121., 28724., 23743., 25374., 27005., 28636., 26635., 28462., 30289.,
      32116., 21023., 22430., 23837., 25244., 23915., 25518., 27121., 28724.,
      23743., 25374., 27005., 28636., 26635., 28462., 30289., 32116., 21023.,
      22430., 23837., 25244., 23915., 25518., 27121., 28724., 23743., 25374.,
      27005., 28636., 26635., 28462., 30289., 32116.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5816.,
      6590.,  7300.,  9002.,  11202., 10932., 8422.,  5688.,  6800.,  7772.,
      9000.,  10612., 13060., 12808., 10764., 6800.,  7912.,  8866.,  10460.,
      12758., 15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134.,
      14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284.,
      12026., 8296.,  6800.,  7340.,  9128.,  11172., 12980., 11496., 10300.,
      7312.,  5816.,  6158.,  7428.,  9562.,  11122., 9620.,  7958.,  6200.,
      4704.,  5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,
      5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5816.,  6590.,
      7300.,  9002.,  11202., 10932., 8422.,  5688.,  6800.,  7772.,  9000.,
      10612., 13060., 12808., 10764., 6800.,  7912.,  8866.,  10460., 12758.,
      15134., 14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134.,
      14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284.,
      12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284., 12026.,
      8296.,  6800.,  7340.,  9128.,  11172., 12980., 11496., 10300., 7312.,
      5816.,  6158.,  7428.,  9562.,  11122., 9620.,  7958.,  6200.,  4704.,
      5064.,  5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  4704.,  5064.,
      5968.,  7416.,  9048.,  8144.,  6696.,  4704.,  5816.,  6590.,  7300.,
      9002.,  11202., 10932., 8422.,  5688.,  6800.,  7772.,  9000.,  10612.,
      13060., 12808., 10764., 6800.,  7912.,  8866.,  10460., 12758., 15134.,
      14284., 12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284.,
      12026., 8296.,  7912.,  8866.,  10460., 12758., 15134., 14284., 12026.,
      8296.,  7912.,  8866.,  10460., 12758., 15134., 14284., 12026., 8296.,
      6800.,  7340.,  9128.,  11172., 12980., 11496., 10300., 7312.,  5816.,
      6158.,  7428.,  9562.,  11122., 9620.,  7958.,  6200.,  4704.,  5064.,
      5968.,  7416.,  9048.,  8144.,  6696.,  4704.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12758., 15134., 12758., 15134., 12758., 15134., 12758., 15134.,
      12758., 15134., 12758., 15134., 12758., 15134., 12758., 15134.,
      12758., 15134., 12758., 15134., 12758., 15134., 12758., 15134.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,
      8616.,  9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,
      10776., 6768.,  7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064.,
      12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,
      8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,
      9636.,  9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480.,
      10854., 12212., 8024.,  8976.,  6768.,  7584.,  7308.,  8184.,  8616.,
      9648.,  10692., 11976., 12996., 14568., 11688., 13104., 9612.,  10776.,
      6768.,  7584.,  5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,
      10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,
      4512.,  5056.,  4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,
      9712.,  7792.,  8736.,  6408.,  7184.,  4512.,  5056.,  4512.,  5056.,
      4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,  9712.,  7792.,
      8736.,  6408.,  7184.,  4512.,  5056.,  5512.,  6192.,  6178.,  6908.,
      6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,
      8620.,  5768.,  6448.,  6768.,  7584.,  7308.,  8184.,  8616.,  9648.,
      10692., 11976., 12996., 14568., 11688., 13104., 9612.,  10776., 6768.,
      7584.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996.,
      14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,
      9636.,  9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480.,
      10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,  9636.,  9860.,
      11064., 12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212.,
      8024.,  8976.,  6768.,  7584.,  7308.,  8184.,  8616.,  9648.,  10692.,
      11976., 12996., 14568., 11688., 13104., 9612.,  10776., 6768.,  7584.,
      5512.,  6192.,  6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534.,
      11844., 9932.,  11112., 7650.,  8620.,  5768.,  6448.,  4512.,  5056.,
      4872.,  5456.,  5744.,  6432.,  7128.,  7984.,  8664.,  9712.,  7792.,
      8736.,  6408.,  7184.,  4512.,  5056.,  4512.,  5056.,  4872.,  5456.,
      5744.,  6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,  6408.,
      7184.,  4512.,  5056.,  5512.,  6192.,  6178.,  6908.,  6988.,  7848.,
      8934.,  10004., 10534., 11844., 9932.,  11112., 7650.,  8620.,  5768.,
      6448.,  6768.,  7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976.,
      12996., 14568., 11688., 13104., 9612.,  10776., 6768.,  7584.,  7768.,
      8720.,  8614.,  9636.,  9860.,  11064., 12498., 13996., 14866., 16700.,
      13828., 15480., 10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,
      9636.,  9860.,  11064., 12498., 13996., 14866., 16700., 13828., 15480.,
      10854., 12212., 8024.,  8976.,  7768.,  8720.,  8614.,  9636.,  9860.,
      11064., 12498., 13996., 14866., 16700., 13828., 15480., 10854., 12212.,
      8024.,  8976.,  7768.,  8720.,  8614.,  9636.,  9860.,  11064., 12498.,
      13996., 14866., 16700., 13828., 15480., 10854., 12212., 8024.,  8976.,
      6768.,  7584.,  7308.,  8184.,  8616.,  9648.,  10692., 11976., 12996.,
      14568., 11688., 13104., 9612.,  10776., 6768.,  7584.,  5512.,  6192.,
      6178.,  6908.,  6988.,  7848.,  8934.,  10004., 10534., 11844., 9932.,
      11112., 7650.,  8620.,  5768.,  6448.,  4512.,  5056.,  4872.,  5456.,
      5744.,  6432.,  7128.,  7984.,  8664.,  9712.,  7792.,  8736.,  6408.,
      7184.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.,
      12498., 13996., 14866., 16700., 12498., 13996., 14866., 16700.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,
      7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844.,
      13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,
      11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,  9128.,
      10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676., 12880.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 12404.,
      14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,
      9898.,  10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360.,
      10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 6192.,
      7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,
      10008., 11040., 9828.,  11112., 12396., 13680., 11844., 13416., 14988.,
      16560., 10632., 12048., 13464., 14880., 8748.,  9912.,  11076., 12240.,
      6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  5610.,
      6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,  9260.,
      10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040., 11220.,
      12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,  5296.,
      5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,  8944.,
      9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,  7384.,
      8160.,  4128.,  4672.,  5216.,  5760.,  4128.,  4672.,  5216.,  5760.,
      4488.,  5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,
      7408.,  8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,
      8976.,  9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,
      5760.,  5160.,  5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,
      6620.,  7480.,  8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,
      11180., 12490., 13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,
      9230.,  10200., 5160.,  5840.,  6520.,  7200.,  6192.,  7008.,  7824.,
      8640.,  6732.,  7608.,  8484.,  9360.,  7944.,  8976.,  10008., 11040.,
      9828.,  11112., 12396., 13680., 11844., 13416., 14988., 16560., 10632.,
      12048., 13464., 14880., 8748.,  9912.,  11076., 12240., 6192.,  7008.,
      7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7854.,  8876.,  9898.,
      10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360., 10206.,
      11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,
      9898.,  10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360.,
      10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,
      8176.,  9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472.,
      11676., 12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486.,
      19320., 12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280.,
      7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,  6732.,
      7608.,  8484.,  9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112.,
      12396., 13680., 11844., 13416., 14988., 16560., 10632., 12048., 13464.,
      14880., 8748.,  9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  5610.,  6340.,  7070.,  7800.,  6620.,
      7480.,  8340.,  9200.,  8190.,  9260.,  10330., 11400., 9870.,  11180.,
      12490., 13800., 8860.,  10040., 11220., 12400., 7290.,  8260.,  9230.,
      10200., 5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4488.,  5072.,  5656.,  6240.,  5296.,  5984.,  6672.,  7360.,  6552.,
      7408.,  8264.,  9120.,  7896.,  8944.,  9992.,  11040., 7088.,  8032.,
      8976.,  9920.,  5832.,  6608.,  7384.,  8160.,  4128.,  4672.,  5216.,
      5760.,  4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,
      5296.,  5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,
      8944.,  9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,
      7384.,  8160.,  4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,
      7200.,  5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,
      8190.,  9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,
      10040., 11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,
      6520.,  7200.,  6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,
      9360.,  7944.,  8976.,  10008., 11040., 9828.,  11112., 12396., 13680.,
      11844., 13416., 14988., 16560., 10632., 12048., 13464., 14880., 8748.,
      9912.,  11076., 12240., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,
      9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472., 11676.,
      12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280., 7224.,
      8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,  8876.,
      9898.,  10920., 9268.,  10472., 11676., 12880., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 12404., 14056., 15708., 17360.,
      10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,  10080., 7224.,
      8176.,  9128.,  10080., 7854.,  8876.,  9898.,  10920., 9268.,  10472.,
      11676., 12880., 11466., 12964., 14462., 15960., 13818., 15652., 17486.,
      19320., 12404., 14056., 15708., 17360., 10206., 11564., 12922., 14280.,
      7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080., 7854.,
      8876.,  9898.,  10920., 9268.,  10472., 11676., 12880., 11466., 12964.,
      14462., 15960., 13818., 15652., 17486., 19320., 12404., 14056., 15708.,
      17360., 10206., 11564., 12922., 14280., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  6732.,  7608.,  8484.,  9360.,  7944.,
      8976.,  10008., 11040., 9828.,  11112., 12396., 13680., 11844., 13416.,
      14988., 16560., 10632., 12048., 13464., 14880., 8748.,  9912.,  11076.,
      12240., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,
      5610.,  6340.,  7070.,  7800.,  6620.,  7480.,  8340.,  9200.,  8190.,
      9260.,  10330., 11400., 9870.,  11180., 12490., 13800., 8860.,  10040.,
      11220., 12400., 7290.,  8260.,  9230.,  10200., 5160.,  5840.,  6520.,
      7200.,  4128.,  4672.,  5216.,  5760.,  4488.,  5072.,  5656.,  6240.,
      5296.,  5984.,  6672.,  7360.,  6552.,  7408.,  8264.,  9120.,  7896.,
      8944.,  9992.,  11040., 7088.,  8032.,  8976.,  9920.,  5832.,  6608.,
      7384.,  8160.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466.,
      12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466., 12964.,
      14462., 15960., 13818., 15652., 17486., 19320., 11466., 12964., 14462.,
      15960., 13818., 15652., 17486., 19320., 11466., 12964., 14462., 15960.,
      13818., 15652., 17486., 19320., 11466., 12964., 14462., 15960., 13818.,
      15652., 17486., 19320., 11466., 12964., 14462., 15960., 13818., 15652.,
      17486., 19320., 11466., 12964., 14462., 15960., 13818., 15652., 17486.,
      19320., 11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320.,
      11466., 12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466.,
      12964., 14462., 15960., 13818., 15652., 17486., 19320., 11466., 12964.,
      14462., 15960., 13818., 15652., 17486., 19320.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200., 4252., 4776.,  5344.,  5314.,  5316.,  4648.,  4016., 3424.,
      3576., 4973., 6078.,  7238.,  7558.,  7910.,  7180.,  6479., 5812.,
      5480., 7564., 9576.,  11638., 12259., 11888., 9680.,  7510., 5384.,
      7636., 9662., 10796., 11959., 11808., 11689., 9722.,  7818., 5984.,
      6218., 7964., 9043.,  10152., 9873.,  9978.,  8551.,  7186., 5890.,
      5920., 7866., 9370.,  10905., 11074., 11403., 10068., 8794., 7588.,
      7414., 8984., 10337., 11722., 11315., 11868., 10177., 8546., 6982.,
      4832., 6061., 7312.,  8579.,  8458.,  9041.,  7956.,  6911., 5912.,
      4090., 5398., 6727.,  8072.,  8126.,  8660.,  7811.,  6998., 6226.,
      3872., 4750., 5632.,  6514.,  6664.,  7070.,  5992.,  4930., 3888.,
      5152., 6528., 7912.,  8404.,  7990.,  7608.,  6360.,  5156., 4000.,
      5092., 6423., 7780.,  8486.,  8038.,  7654.,  6694.,  5765., 4872.,
      5352., 7086., 8848.,  10184., 10261., 10402., 9296.,  8224., 7192.,
      7056., 9514., 10962., 12193., 11722., 11315., 9692.,  8122., 6612.,
      7046., 8552., 10073., 11602., 11003., 10468., 9033.,  7650., 6326.,
      5628., 7110., 8608.,  10115., 9964.,  9877.,  8758.,  7690., 6680.,
      6002., 7908., 9831.,  11764., 12061., 12422., 11171., 8946., 6778.,
      5744., 7163., 8608.,  10073., 9696.,  9383.,  7964.,  6581., 5240.,
      4246., 5620., 7013.,  8420.,  8282.,  8176.,  7157.,  6176., 5238.,
      3584., 4490., 5392.,  6286.,  6244.,  6234.,  5192.,  4174., 3184.,
      4832., 6692., 8584.,  9480.,  8938.,  8428.,  6504.,  5528., 4576.,
      6736., 7905., 9098.,  10310., 10118., 9414.,  7616.,  6555., 5532.,
      5576., 6864., 8184.,  9530.,  9639.,  9460.,  8048.,  7146., 6280.,
      6028., 7798., 9592.,  11403., 11764., 12061., 10622., 9482., 7368.,
      6946., 8564., 10207., 11868., 12453., 12174., 10379., 8658., 6986.,
      6584., 7922., 9286.,  10669., 10902., 10495., 8888.,  7354., 6220.,
      5614., 7152., 8717.,  10302., 10759., 10800., 9509.,  8290., 7246.,
      5408., 7337., 9296.,  11279., 10838., 10205., 8068.,  5995., 4888.,
      5874., 6610., 7395.,  8224.,  7958.,  7724.,  6343.,  5002., 4378.,
      4544., 4998., 5472.,  5962.,  5792.,  5654.,  4456.,  3290., 2608.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11959., 11808., 11689., 10152., 9873.,  9978.,  10905., 11074., 11403.,
      11722., 11315., 11868., 12193., 11722., 11315., 11602., 11003., 10468.,
      10115., 9964.,  9877.,  11764., 12061., 12422., 11403., 11764., 12061.,
      11868., 12453., 12174., 10669., 10902., 10495., 10302., 10759., 10800.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  4768.,  5998.,  6328.,  7416.,  7792.,  7830.,  8256.,  7390.,
      7812.,  7014.,  7432.,  5840.,  6192.,  4646.,  4928.,  3568.,  3776.,
      4214.,  4496.,  5645.,  6010.,  6455.,  6876.,  7306.,  7788.,  7399.,
      7884.,  7556.,  8044.,  7001.,  7416.,  6157.,  6494.,  5450.,  5704.,
      5080.,  5424.,  7003.,  7448.,  9032.,  9552.,  11091., 11692., 11779.,
      12390., 11507., 12128., 9900.,  10432., 7735.,  8172.,  5728.,  6064.,
      7438.,  7880.,  9378.,  9948.,  11095., 11768., 12799., 13582., 12960.,
      13760., 13185., 14002., 11925., 12628., 9870.,  10452., 8026.,  8480.,
      6814.,  7284.,  8355.,  8952.,  10411., 11110., 12456., 13264., 12393.,
      13186., 13066., 13876., 11701., 12398., 9251.,  9828.,  7010.,  7460.,
      7438.,  7904.,  9540.,  10132., 10847., 11540., 12145., 12946., 11954.,
      12740., 12051., 12854., 10709., 11400., 9016.,  9588.,  7530.,  7976.,
      7550.,  8012.,  9061.,  9648.,  10515., 11202., 11962., 12756., 11643.,
      12422., 12188., 12984., 10997., 11682., 9165.,  9732.,  7538.,  7980.,
      4680.,  5024.,  5733.,  6170.,  7464.,  8000.,  9157.,  9798.,  9417.,
      10068., 10029., 10722., 8740.,  9352.,  7601.,  8126.,  6624.,  7056.,
      4726.,  5044.,  6106.,  6508.,  8451.,  8942.,  9735.,  10320., 9328.,
      9916.,  9849.,  10472., 8577.,  9126.,  7446.,  7916.,  6466.,  6852.,
      3648.,  3904.,  4218.,  4540.,  5016.,  5408.,  5778.,  6244.,  5698.,
      6160.,  6098.,  6588.,  5056.,  5488.,  4114.,  4484.,  3280.,  3584.,
      5440.,  5728.,  6926.,  7296.,  8360.,  8816.,  8998.,  9512.,  8814.,
      9324.,  8694.,  9200.,  8032.,  8464.,  6534.,  6888.,  5168.,  5440.,
      4998.,  5352.,  5847.,  6286.,  7511.,  8040.,  8860.,  9452.,  8473.,
      9036.,  8214.,  8748.,  7649.,  8108.,  6991.,  7370.,  5450.,  5744.,
      6696.,  7088.,  8499.,  8988.,  10384., 10976., 11379., 12048., 11011.,
      11658., 10771., 11396., 9764.,  10304., 8383.,  8832.,  7152.,  7504.,
      7150.,  7616.,  9516.,  10100., 11199., 11908., 12409., 13218., 11962.,
      12756., 11643., 12422., 10485., 11160., 8704.,  9268.,  7114.,  7560.,
      7326.,  7788.,  8973.,  9552.,  11251., 11954., 13474., 14308., 13795.,
      14614., 13220., 14024., 11253., 11954., 9397.,  9988.,  7730.,  8204.,
      6734.,  7192.,  8494.,  9068.,  11175., 11872., 13803., 14630., 12972.,
      13784., 12269., 13066., 10773., 11468., 9098.,  9684.,  7610.,  8080.,
      6654.,  7108.,  8399.,  8968.,  10331., 11022., 12212., 13032., 12277.,
      13082., 12470., 13260., 11573., 12262., 9183.,  9764.,  6978.,  7444.,
      5144.,  5504.,  6133.,  6582.,  7616.,  8160.,  9069.,  9714.,  8849.,
      9472.,  8757.,  9358.,  7436.,  7960.,  6257.,  6698.,  5232.,  5584.,
      3718.,  4012.,  4780.,  5160.,  6611.,  7082.,  8401.,  8968.,  8634.,
      9204.,  8931.,  9504.,  7961.,  8458.,  7136.,  7552.,  6466.,  6796.,
      4608.,  4864.,  5610.,  5940.,  6632.,  7040.,  7602.,  8092.,  7138.,
      7624.,  6738.,  7220.,  5392.,  5808.,  4162.,  4508.,  3056.,  3328.,
      4928.,  5216.,  6766.,  7112.,  8600.,  9008.,  9398.,  9872.,  8958.,
      9428.,  8582.,  9048.,  7216.,  7600.,  5958.,  6288.,  4784.,  5056.,
      6070.,  6464.,  7169.,  7650.,  8887.,  9460.,  10574., 11244., 10667.,
      11340., 10792., 11436., 9033.,  9568.,  7729.,  8182.,  6570.,  6936.,
      5976.,  6384.,  7467.,  7968.,  9880.,  10480., 12275., 12980., 12963.,
      13678., 12083., 12776., 9916.,  10496., 8487.,  8980.,  7200.,  7600.,
      7022.,  7480.,  8598.,  9164.,  10343., 11024., 12051., 12854., 12212.,
      13032., 12277., 13082., 10933., 11612., 9618.,  10196., 7450.,  7920.,
      7006.,  7460.,  8439.,  9000.,  10331., 11006., 12188., 12984., 12797.,
      13610., 12734., 13532., 11541., 12214., 9639.,  10212., 7906.,  8372.,
      7470.,  7952.,  9528.,  10116., 11311., 12012., 13061., 13882., 12966.,
      13804., 12647., 13470., 10645., 11344., 8700.,  9268.,  7594.,  8056.,
      7774.,  8252.,  9369.,  9952.,  10979., 11674., 12558., 13372., 12911.,
      13742., 12464., 13280., 10933., 11626., 9169.,  9732.,  7794.,  8252.,
      5128.,  5536.,  6693.,  7186.,  8568.,  9152.,  10421., 11102., 10041.,
      10732., 9309.,  9978.,  7220.,  7784.,  5329.,  5782.,  4384.,  4752.,
      4598.,  4900.,  4990.,  5348.,  6019.,  6438.,  7067.,  7552.,  7044.,
      7532.,  7085.,  7576.,  6033.,  6446.,  5130.,  5460.,  4674.,  4948.,
      3936.,  4224.,  4442.,  4780.,  5848.,  6240.,  7250.,  7700.,  7554.,
      8000.,  7922.,  8364.,  5888.,  6256.,  3986.,  4276.,  3088.,  3328.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12799., 13582., 12960., 13760., 13185., 14002., 12456., 13264., 12393.,
      13186., 13066., 13876., 12145., 12946., 11954., 12740., 12051., 12854.,
      11962., 12756., 11643., 12422., 12188., 12984., 12409., 13218., 11962.,
      12756., 11643., 12422., 13474., 14308., 13795., 14614., 13220., 14024.,
      13803., 14630., 12972., 13784., 12269., 13066., 12212., 13032., 12277.,
      13082., 12470., 13260., 12051., 12854., 12212., 13032., 12277., 13082.,
      12188., 12984., 12797., 13610., 12734., 13532., 13061., 13882., 12966.,
      13804., 12647., 13470., 12558., 13372., 12911., 13742., 12464., 13280.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4224.,  4480.,  4736.,  5330.,  5660.,  5990.,  6320.,  6520.,
      6896.,  7272.,  7648.,  6658.,  7084.,  7510.,  7936.,  6294.,  6716.,
      7138.,  7560.,  6058.,  6476.,  6894.,  7312.,  5504.,  5856.,  6208.,
      6560.,  5138.,  5420.,  5702.,  5984.,  4208.,  4416.,  4624.,  4832.,
      3538.,  3820.,  4102.,  4384.,  5229.,  5594.,  5959.,  6324.,  6633.,
      7054.,  7475.,  7896.,  8018.,  8500.,  8982.,  9464.,  7625.,  8110.,
      8595.,  9080.,  7360.,  7848.,  8336.,  8824.,  6515.,  6930.,  7345.,
      7760.,  5609.,  5946.,  6283.,  6620.,  4918.,  5172.,  5426.,  5680.,
      4056.,  4400.,  4744.,  5088.,  5977.,  6422.,  6867.,  7312.,  7720.,
      8240.,  8760.,  9280.,  9421.,  10022., 10623., 11224., 10019., 10630.,
      11241., 11852., 9721.,  10342., 10963., 11584., 8516.,  9048.,  9580.,
      10112., 7033.,  7470.,  7907.,  8344.,  5552.,  5888.,  6224.,  6560.,
      5666.,  6108.,  6550.,  6992.,  7754.,  8324.,  8894.,  9464.,  9741.,
      10414., 11087., 11760., 11887., 12670., 13453., 14236., 12448., 13248.,
      14048., 14848., 13137., 13954., 14771., 15588., 11467., 12170., 12873.,
      13576., 9334.,  9916.,  10498., 11080., 7022.,  7476.,  7930.,  8384.,
      6502.,  6972.,  7442.,  7912.,  7953.,  8550.,  9147.,  9744.,  9467.,
      10166., 10865., 11564., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11121., 11818., 12515.,
      13212., 9349.,  9926.,  10503., 11080., 7106.,  7556.,  8006.,  8456.,
      6794.,  7260.,  7726.,  8192.,  8504.,  9096.,  9688.,  10280., 9417.,
      10110., 10803., 11496., 11073., 11874., 12675., 13476., 10962., 11748.,
      12534., 13320., 11395., 12198., 13001., 13804., 10263., 10954., 11645.,
      12336., 9108.,  9680.,  10252., 10824., 7190.,  7636.,  8082.,  8528.,
      7086.,  7548.,  8010.,  8472.,  8799.,  9386.,  9973.,  10560., 9879.,
      10566., 11253., 11940., 10970., 11764., 12558., 13352., 10603., 11382.,
      12161., 12940., 10908., 11704., 12500., 13296., 9917.,  10602., 11287.,
      11972., 8611.,  9178.,  9745.,  10312., 7274.,  7716.,  8158.,  8600.,
      4216.,  4560.,  4904.,  5248.,  6165.,  6602.,  7039.,  7476.,  7640.,
      8176.,  8712.,  9248.,  9385.,  10026., 10667., 11308., 9319.,  9970.,
      10621., 11272., 9925.,  10618., 11311., 12004., 8740.,  9352.,  9964.,
      10576., 7957.,  8482.,  9007.,  9532.,  6736.,  7168.,  7600.,  8032.,
      4078.,  4396.,  4714.,  5032.,  5154.,  5556.,  5958.,  6360.,  7067.,
      7558.,  8049.,  8540.,  8517.,  9102.,  9687.,  10272., 8212.,  8800.,
      9388.,  9976.,  8707.,  9330.,  9953.,  10576., 7325.,  7874.,  8423.,
      8972.,  6294.,  6764.,  7234.,  7704.,  5634.,  6020.,  6406.,  6792.,
      3328.,  3584.,  3840.,  4096.,  4146.,  4468.,  4790.,  5112.,  5096.,
      5488.,  5880.,  6272.,  6930.,  7396.,  7862.,  8328.,  6390.,  6852.,
      7314.,  7776.,  6778.,  7268.,  7758.,  8248.,  5520.,  5952.,  6384.,
      6816.,  4530.,  4900.,  5270.,  5640.,  3824.,  4128.,  4432.,  4736.,
      3616.,  3904.,  4192.,  4480.,  5354.,  5724.,  6094.,  6464.,  6920.,
      7376.,  7832.,  8288.,  7882.,  8396.,  8910.,  9424.,  8030.,  8540.,
      9050.,  9560.,  8306.,  8812.,  9318.,  9824.,  8400.,  8832.,  9264.,
      9696.,  6858.,  7212.,  7566.,  7920.,  4976.,  5248.,  5520.,  5792.,
      4906.,  5260.,  5614.,  5968.,  5815.,  6254.,  6693.,  7132.,  7421.,
      7950.,  8479.,  9008.,  8328.,  8920.,  9512.,  10104., 8031.,  8594.,
      9157.,  9720.,  7990.,  8524.,  9058.,  9592.,  7767.,  8226.,  8685.,
      9144.,  7683.,  8062.,  8441.,  8820.,  5966.,  6260.,  6554.,  6848.,
      5832.,  6224.,  6616.,  7008.,  7069.,  7558.,  8047.,  8536.,  8240.,
      8832.,  9424.,  10016., 9417.,  10086., 10755., 11424., 8959.,  9606.,
      10253., 10900., 8757.,  9382.,  10007., 10632., 8172.,  8712.,  9252.,
      9792.,  7485.,  7934.,  8383.,  8832.,  6976.,  7328.,  7680.,  8032.,
      6730.,  7196.,  7662.,  8128.,  9232.,  9816.,  10400., 10984., 10873.,
      11582., 12291., 13000., 11593., 12402., 13211., 14020., 10970., 11764.,
      12558., 13352., 10603., 11382., 12161., 12940., 9575.,  10250., 10925.,
      11600., 8236.,  8800.,  9364.,  9928.,  6870.,  7316.,  7762.,  8208.,
      6126.,  6588.,  7050.,  7512.,  8375.,  8954.,  9533.,  10112., 11079.,
      11782., 12485., 13188., 12930., 13764., 14598., 15432., 12819., 13638.,
      14457., 15276., 11940., 12744., 13548., 14352., 10157., 10858., 11559.,
      12260., 8795.,  9386.,  9977.,  10568., 7114.,  7588.,  8062.,  8536.,
      6034.,  6492.,  6950.,  7408.,  7646.,  8220.,  8794.,  9368.,  10005.,
      10702., 11399., 12096., 12827., 13654., 14481., 15308., 12460., 13272.,
      14084., 14896., 12349., 13146., 13943., 14740., 10323., 11018., 11713.,
      12408., 8426.,  9012.,  9598.,  10184., 6942.,  7412.,  7882.,  8352.,
      5942.,  6396.,  6850.,  7304.,  7685.,  8254.,  8823.,  9392.,  9443.,
      10134., 10825., 11516., 11956., 12776., 13596., 14416., 12357., 13162.,
      13967., 14772., 11990., 12780., 13570., 14360., 11001., 11690., 12379.,
      13068., 8825.,  9406.,  9987.,  10568., 6770.,  7236.,  7702.,  8168.,
      4168.,  4528.,  4888.,  5248.,  5353.,  5802.,  6251.,  6700.,  6912.,
      7456.,  8000.,  8544.,  8565.,  9210.,  9855.,  10500., 8595.,  9218.,
      9841.,  10464., 8881.,  9482.,  10083., 10684., 8076.,  8600.,  9124.,
      9648.,  7657.,  8098.,  8539.,  8980.,  5952.,  6304.,  6656.,  7008.,
      3814.,  4108.,  4402.,  4696.,  4636.,  5016.,  5396.,  5776.,  6095.,
      6566.,  7037.,  7508.,  7915.,  8482.,  9049.,  9616.,  7866.,  8436.,
      9006.,  9576.,  7945.,  8518.,  9091.,  9664.,  6785.,  7282.,  7779.,
      8276.,  5984.,  6400.,  6816.,  7232.,  5562.,  5892.,  6222.,  6552.,
      3712.,  3968.,  4224.,  4480.,  4554.,  4884.,  5214.,  5544.,  5304.,
      5712.,  6120.,  6528.,  6714.,  7204.,  7694.,  8184.,  6430.,  6916.,
      7402.,  7888.,  6274.,  6756.,  7238.,  7720.,  5056.,  5472.,  5888.,
      6304.,  4138.,  4484.,  4830.,  5176.,  3536.,  3808.,  4080.,  4352.,
      3488.,  3776.,  4064.,  4352.,  5314.,  5660.,  6006.,  6352.,  7064.,
      7472.,  7880.,  8288.,  7698.,  8172.,  8646.,  9120.,  7334.,  7804.,
      8274.,  8744.,  7098.,  7564.,  8030.,  8496.,  6432.,  6816.,  7200.,
      7584.,  5794.,  6124.,  6454.,  6784.,  4912.,  5184.,  5456.,  5728.,
      4834.,  5228.,  5622.,  6016.,  6625.,  7106.,  7587.,  8068.,  8913.,
      9486.,  10059., 10632., 11038., 11708., 12378., 13048., 10645., 11318.,
      11991., 12664., 10348., 10992., 11636., 12280., 8411.,  8946.,  9481.,
      10016., 7485.,  7938.,  8391.,  8844.,  6150.,  6516.,  6882.,  7248.,
      5016.,  5424.,  5832.,  6240.,  6209.,  6710.,  7211.,  7712.,  8184.,
      8784.,  9384.,  9984.,  10661., 11366., 12071., 12776., 11259., 11974.,
      12689., 13404., 10801., 11494., 12187., 12880., 9396.,  9976.,  10556.,
      11136., 7841.,  8334.,  8827.,  9320.,  6640.,  7040.,  7440.,  7840.,
      6098.,  6556.,  7014.,  7472.,  7606.,  8172.,  8738.,  9304.,  9125.,
      9806.,  10487., 11168., 11395., 12198., 13001., 13804., 11956., 12776.,
      13596., 14416., 12357., 13162., 13967., 14772., 10403., 11082., 11761.,
      12440., 9218.,  9796.,  10374., 10952., 7134.,  7604.,  8074.,  8544.,
      6134.,  6588.,  7042.,  7496.,  7517.,  8078.,  8639.,  9200.,  9203.,
      9878.,  10553., 11228., 10908., 11704., 12500., 13296., 11341., 12154.,
      12967., 13780., 11486., 12284., 13082., 13880., 10697., 11370., 12043.,
      12716., 9489.,  10062., 10635., 11208., 8114.,  8580.,  9046.,  9512.,
      7098.,  7580.,  8062.,  8544.,  8868.,  9456.,  10044., 10632., 10209.,
      10910., 11611., 12312., 11861., 12682., 13503., 14324., 11910., 12748.,
      13586., 14424., 11543., 12366., 13189., 14012., 9999.,  10698., 11397.,
      12096., 8864.,  9432.,  10000., 10568., 7558.,  8020.,  8482.,  8944.,
      6750.,  7228.,  7706.,  8184.,  8779.,  9362.,  9945.,  10528., 10671.,
      11366., 12061., 12756., 12142., 12956., 13770., 14584., 12063., 12894.,
      13725., 14556., 11440., 12256., 13072., 13888., 9653.,  10346., 11039.,
      11732., 7983.,  8546.,  9109.,  9672.,  7002.,  7460.,  7918.,  8376.,
      5176.,  5584.,  5992.,  6400.,  6877.,  7370.,  7863.,  8356.,  8776.,
      9360.,  9944.,  10528., 10593., 11274., 11955., 12636., 10271., 10962.,
      11653., 12344., 9277.,  9946.,  10615., 11284., 7412.,  7976.,  8540.,
      9104.,  6045.,  6498.,  6951.,  7404.,  5136.,  5504.,  5872.,  6240.,
      3198.,  3500.,  3802.,  4104.,  4118.,  4476.,  4834.,  5192.,  5603.,
      6022.,  6441.,  6860.,  7377.,  7862.,  8347.,  8832.,  7840.,  8328.,
      8816.,  9304.,  7407.,  7898.,  8389.,  8880.,  5701.,  6114.,  6527.,
      6940.,  4362.,  4692.,  5022.,  5352.,  3954.,  4228.,  4502.,  4776.,
      3872.,  4160.,  4448.,  4736.,  3938.,  4276.,  4614.,  4952.,  4840.,
      5232.,  5624.,  6016.,  6306.,  6756.,  7206.,  7656.,  6534.,  6980.,
      7426.,  7872.,  6890.,  7332.,  7774.,  8216.,  4944.,  5312.,  5680.,
      6048.,  3330.,  3620.,  3910.,  4200.,  2736.,  2976.,  3216.,  3456.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11887., 12670., 13453., 14236., 12448., 13248., 14048., 14848., 13137.,
      13954., 14771., 15588., 11432., 12240., 13048., 13856., 11577., 12370.,
      13163., 13956., 12138., 12948., 13758., 14568., 11073., 11874., 12675.,
      13476., 10962., 11748., 12534., 13320., 11395., 12198., 13001., 13804.,
      10970., 11764., 12558., 13352., 10603., 11382., 12161., 12940., 10908.,
      11704., 12500., 13296., 11593., 12402., 13211., 14020., 10970., 11764.,
      12558., 13352., 10603., 11382., 12161., 12940., 12930., 13764., 14598.,
      15432., 12819., 13638., 14457., 15276., 11940., 12744., 13548., 14352.,
      12827., 13654., 14481., 15308., 12460., 13272., 14084., 14896., 12349.,
      13146., 13943., 14740., 11956., 12776., 13596., 14416., 12357., 13162.,
      13967., 14772., 11990., 12780., 13570., 14360., 11395., 12198., 13001.,
      13804., 11956., 12776., 13596., 14416., 12357., 13162., 13967., 14772.,
      10908., 11704., 12500., 13296., 11341., 12154., 12967., 13780., 11486.,
      12284., 13082., 13880., 11861., 12682., 13503., 14324., 11910., 12748.,
      13586., 14424., 11543., 12366., 13189., 14012., 12142., 12956., 13770.,
      14584., 12063., 12894., 13725., 14556., 11440., 12256., 13072., 13888.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8304.,  11948., 15624., 17476., 17244., 17268., 15624., 11612., 7792.,
      10212., 13397., 15526., 17967., 17833., 17955., 16990., 14625., 12532.,
      12584., 15482., 19468., 23854., 24482., 23446., 19292., 15954., 12840.,
      16284., 20355., 23434., 26873., 26303., 26117., 23666., 20055., 16748.,
      13492., 17629., 22830., 26351., 25045., 25499., 21990., 17313., 12932.,
      16236., 20055., 22898., 26117., 26315., 27153., 22970., 19659., 16636.,
      14372., 17233., 21174., 25499., 26337., 25767., 21678., 18453., 15508.,
      10296., 12278., 15300., 18578., 19126., 20186., 17716., 16430., 13336.,
      9212.,  11087., 15146., 17413., 17327., 17753., 15602., 13707., 12012.,
      5552.,  6708.,  9016.,  11452., 12116., 13164., 11448., 9860.,  8432.,
      11056., 13212., 15560., 16564., 16332., 16356., 15464., 13036., 11216.,
      10868., 13425., 17566., 21395., 19757., 18503., 16214., 13309., 10148.,
      16360., 19282., 22908., 25078., 24682., 24670., 22924., 19434., 16872.,
      13292., 17511., 21554., 25045., 25499., 26337., 22266., 17371., 14588.,
      15780., 18529., 22262., 26315., 27153., 26327., 22734., 19205., 16884.,
      13660., 16347., 21178., 26337., 25767., 25581., 23234., 19791., 16652.,
      13588., 17717., 22878., 26327., 26141., 26339., 23574., 18553., 13860.,
      12952., 16174., 18324., 20762., 20574., 20770., 17796., 15110., 12760.,
      7244.,  10251., 14178., 18345., 19795., 19453., 16074., 12999., 10268.,
      9744.,  12260., 13592., 15116., 13764., 12668., 10104., 7732.,  5584.,
      8432.,  11404., 14632., 16036., 14780., 15028., 12680., 11004., 9392.,
      10244., 12525., 15606., 18967., 19857., 21259., 18670., 16857., 15220.,
      12104., 14538., 18988., 23774., 25010., 24710., 21020., 18082., 15304.,
      14556., 17995., 22490., 27153., 26327., 26141., 22530., 19775., 15244.,
      14228., 17605., 23198., 25767., 25581., 26035., 23670., 20105., 16804.,
      13868., 18463., 22338., 26141., 26339., 27177., 22346., 17235., 13756.,
      16228., 19609., 23430., 26035., 26873., 26303., 23870., 19997., 16852.,
      10360., 13830., 18788., 23330., 23366., 22794., 18708., 15006., 11192.,
      11804., 13831., 16474., 17581., 16983., 16641., 14210., 12099., 10956.,
      8144.,  9492.,  12504., 14780., 15476., 16428., 12376., 8580.,  6832.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26873., 26303., 26117., 26351., 25045., 25499., 26117., 26315., 27153.,
      25499., 26337., 25767., 25045., 25499., 26337., 26315., 27153., 26327.,
      26337., 25767., 25581., 26327., 26141., 26339., 27153., 26327., 26141.,
      25767., 25581., 26035., 26141., 26339., 27177., 26035., 26873., 26303.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  10564., 11224., 13512., 14288., 14588., 15496., 14140.,
      15032., 14204., 15080., 13800., 14544., 11588., 12184., 8656.,  9088.,
      7860.,  8456.,  11791., 12586., 15350., 16300., 19129., 20254., 18593.,
      19730., 18569., 19718., 17502., 18492., 15671., 16482., 12132., 12744.,
      12040., 12816., 14526., 15508., 17596., 18744., 21026., 22364., 21282.,
      22596., 20258., 21548., 17708., 18776., 15950., 16836., 13416., 14096.,
      13420., 14328., 18849., 20006., 21594., 22964., 25767., 27378., 25647.,
      27262., 26295., 27914., 22450., 23812., 18649., 19790., 15132., 16024.,
      14188., 15144., 18345., 19546., 22778., 24188., 25711., 27358., 24183.,
      25770., 24063., 25654., 21554., 22892., 18177., 19298., 13916., 14792.,
      13804., 14744., 17969., 19150., 21274., 22660., 26295., 27914., 25663.,
      27286., 26311., 27938., 21810., 23188., 19625., 20790., 15388., 16312.,
      14444., 15368., 17337., 18498., 20282., 21644., 24063., 25654., 24711.,
      26306., 24591., 26190., 21682., 23036., 18129., 19274., 15452., 16360.,
      9224.,  9936.,  12822., 13708., 15308., 16392., 19658., 20964., 20458.,
      21804., 22282., 23668., 18588., 19784., 17606., 18652., 14088., 14960.,
      8116.,  8728.,  9487.,  10238., 12934., 13844., 15305., 16394., 15121.,
      16222., 15961., 17074., 14062., 15012., 12887., 13718., 12388., 13080.,
      6320.,  6752.,  7508.,  8072.,  9736.,  10448., 13964., 14840., 13708.,
      14632., 14220., 15192., 11848., 12720., 10004., 10760., 8752.,  9376.,
      8240.,  8864.,  11972., 12728., 15816., 16720., 16764., 17768., 16316.,
      17304., 16380., 17352., 15976., 16784., 12612., 13240., 10064., 10560.,
      10548., 11304., 12767., 13666., 16502., 17564., 19273., 20454., 17841.,
      18970., 17177., 18254., 16030., 16940., 14919., 15642., 11748., 12328.,
      13832., 14736., 16638., 17732., 19964., 21272., 23330., 24812., 23586.,
      25044., 22562., 23996., 20460., 21688., 17422., 18420., 15720., 16528.,
      14060., 15000., 18033., 19182., 21658., 23044., 24183., 25770., 24063.,
      25654., 24711., 26306., 21426., 22804., 18153., 19286., 15388., 16312.,
      13164., 14088., 16889., 18018., 21434., 22796., 25663., 27286., 26311.,
      27938., 25679., 27310., 22706., 24124., 18577., 19754., 16092., 17064.,
      13292., 14200., 15489., 16598., 19674., 21012., 24711., 26306., 24591.,
      26190., 25239., 26842., 22066., 23460., 18617., 19774., 15900., 16856.,
      13420., 14312., 17033., 18186., 21370., 22748., 25679., 27310., 26327.,
      27962., 25695., 27334., 23090., 24524., 19041., 20242., 14684., 15624.,
      10632., 11408., 14102., 15100., 17164., 18344., 21386., 22772., 20778.,
      22140., 20938., 22276., 18012., 19176., 16070., 17036., 12552., 13296.,
      9012.,  9656.,  12063., 12918., 15494., 16516., 19097., 20306., 19937.,
      21158., 19241., 20474., 15406., 16468., 12455., 13326., 10468., 11128.,
      6448.,  6944.,  9044.,  9704.,  10888., 11664., 14092., 15000., 13964.,
      14856., 14348., 15224., 10824., 11568., 7956.,  8552.,  5808.,  6240.,
      6704.,  7200.,  9540.,  10136., 12616., 13328., 13820., 14664., 13372.,
      14200., 13820., 14696., 13032., 13776., 12868., 13528., 11216., 11776.,
      8884.,  9544.,  12079., 12890., 15990., 16972., 20057., 21230., 19521.,
      20706., 20009., 21206., 16734., 17756., 15447., 16338., 13796., 14536.,
      10120., 10832., 12222., 13108., 16188., 17272., 20898., 22204., 22306.,
      23652., 22690., 24076., 20524., 21720., 17486., 18532., 15080., 15952.,
      13036., 13944., 17729., 18870., 21210., 22612., 26311., 27938., 25679.,
      27310., 26327., 27962., 21682., 23076., 19577., 20766., 15132., 16088.,
      12652., 13544., 15817., 16938., 20986., 22364., 24591., 26190., 25239.,
      26842., 25119., 26726., 22322., 23692., 19105., 20274., 16476., 17416.,
      14188., 15128., 18385., 19550., 21658., 23076., 26327., 27962., 25695.,
      27334., 26343., 27986., 22066., 23476., 18377., 19526., 14748., 15672.,
      13036., 13960., 17497., 18642., 22202., 23596., 25119., 26726., 25767.,
      27378., 25647., 27262., 23474., 24860., 18673., 19802., 15068., 15976.,
      11784., 12624., 15254., 16300., 20044., 21320., 23882., 25348., 23658.,
      25164., 22282., 23764., 18972., 20232., 16838., 17852., 12936., 13744.,
      8628.,  9304.,  11311., 12142., 14470., 15476., 17641., 18778., 18481.,
      19630., 17785., 18946., 14318., 15300., 11767., 12550., 11364., 11992.,
      9264.,  9888.,  10324., 11080., 12936., 13840., 14348., 15352., 14220.,
      15208., 14604., 15576., 10696., 11504., 7572.,  8200.,  6704.,  7200.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25767., 27378., 25647., 27262., 26295., 27914., 25711., 27358., 24183.,
      25770., 24063., 25654., 26295., 27914., 25663., 27286., 26311., 27938.,
      24063., 25654., 24711., 26306., 24591., 26190., 24183., 25770., 24063.,
      25654., 24711., 26306., 25663., 27286., 26311., 27938., 25679., 27310.,
      24711., 26306., 24591., 26190., 25239., 26842., 25679., 27310., 26327.,
      27962., 25695., 27334., 26311., 27938., 25679., 27310., 26327., 27962.,
      24591., 26190., 25239., 26842., 25119., 26726., 26327., 27962., 25695.,
      27334., 26343., 27986., 25119., 26726., 25767., 27378., 25647., 27262.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7472.,  7968.,  8464.,  8960.,  9524.,  10184., 10844., 11504., 12328.,
      13104., 13880., 14656., 13388., 14296., 15204., 16112., 12636., 13528.,
      14420., 15312., 12908., 13784., 14660., 15536., 12360., 13104., 13848.,
      14592., 8820.,  9416.,  10012., 10608., 5488.,  5920.,  6352.,  6784.,
      8948.,  9544.,  10140., 10736., 12003., 12798., 13593., 14388., 14358.,
      15308., 16258., 17208., 18125., 19250., 20375., 21500., 16785., 17922.,
      19059., 20196., 16469., 17618., 18767., 19916., 15486., 16476., 17466.,
      18456., 13635., 14446., 15257., 16068., 9124.,  9736.,  10348., 10960.,
      12328., 13104., 13880., 14656., 13766., 14748., 15730., 16712., 16412.,
      17560., 18708., 19856., 19754., 21092., 22430., 23768., 21698., 23012.,
      24326., 25640., 19034., 20324., 21614., 22904., 15116., 16184., 17252.,
      18320., 13510., 14396., 15282., 16168., 11144., 11824., 12504., 13184.,
      13772., 14680., 15588., 16496., 18109., 19266., 20423., 21580., 19162.,
      20532., 21902., 23272., 23043., 24654., 26265., 27876., 23823., 25438.,
      27053., 28668., 26139., 27758., 29377., 30996., 20786., 22148., 23510.,
      24872., 16381., 17522., 18663., 19804., 13468., 14360., 15252., 16144.,
      13724., 14680., 15636., 16592., 17057., 18258., 19459., 20660., 23026.,
      24436., 25846., 27256., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 21450., 22788., 24126.,
      25464., 17249., 18370., 19491., 20612., 12204., 13080., 13956., 14832.,
      13484., 14424., 15364., 16304., 16325., 17506., 18687., 19868., 19530.,
      20916., 22302., 23688., 26139., 27758., 29377., 30996., 23847., 25470.,
      27093., 28716., 24115., 25742., 27369., 28996., 20258., 21636., 23014.,
      24392., 17797., 18962., 20127., 21292., 14204., 15128., 16052., 16976.,
      15292., 16216., 17140., 18064., 17129., 18290., 19451., 20612., 19106.,
      20468., 21830., 23192., 22727., 24318., 25909., 27500., 25043., 26638.,
      28233., 29828., 23775., 25374., 26973., 28572., 20410., 21764., 23118.,
      24472., 16617., 17762., 18907., 20052., 13452., 14360., 15268., 16176.,
      10088., 10800., 11512., 12224., 14646., 15532., 16418., 17304., 15708.,
      16792., 17876., 18960., 18426., 19732., 21038., 22344., 19474., 20820.,
      22166., 23512., 20522., 21908., 23294., 24680., 17452., 18648., 19844.,
      21040., 16086., 17132., 18178., 19224., 12488., 13360., 14232., 15104.,
      8676.,  9288.,  9900.,  10512., 11087., 11838., 12589., 13340., 15358.,
      16268., 17178., 18088., 16209., 17298., 18387., 19476., 15829., 16930.,
      18031., 19132., 15449., 16562., 17675., 18788., 13766., 14716., 15666.,
      16616., 12751., 13582., 14413., 15244., 11348., 12040., 12732., 13424.,
      6768.,  7200.,  7632.,  8064.,  8020.,  8584.,  9148.,  9712.,  10088.,
      10800., 11512., 12224., 13868., 14744., 15620., 16496., 13820., 14744.,
      15668., 16592., 15308., 16280., 17252., 18224., 12488., 13360., 14232.,
      15104., 10900., 11656., 12412., 13168., 9648.,  10272., 10896., 11520.,
      9392.,  10016., 10640., 11264., 11732., 12488., 13244., 14000., 14504.,
      15408., 16312., 17216., 14828., 15832., 16836., 17840., 14076., 15064.,
      16052., 17040., 14348., 15320., 16292., 17264., 13832., 14640., 15448.,
      16256., 9300.,  9928.,  10556., 11184., 7216.,  7712.,  8208.,  8704.,
      11348., 12104., 12860., 13616., 12059., 12958., 13857., 14756., 15782.,
      16844., 17906., 18968., 19893., 21074., 22255., 23436., 16825., 17954.,
      19083., 20212., 15293., 16370., 17447., 18524., 13390., 14300., 15210.,
      16120., 12219., 12942., 13665., 14388., 8900.,  9480.,  10060., 10640.,
      14504., 15408., 16312., 17216., 15574., 16668., 17762., 18856., 17660.,
      18968., 20276., 21584., 21914., 23396., 24878., 26360., 23858., 25316.,
      26774., 28232., 21194., 22628., 24062., 25496., 18668., 19896., 21124.,
      22352., 15062., 16060., 17058., 18056., 12808., 13616., 14424., 15232.,
      13996., 14936., 15876., 16816., 18533., 19682., 20831., 21980., 20298.,
      21684., 23070., 24456., 21947., 23534., 25121., 26708., 22727., 24318.,
      25909., 27500., 25043., 26638., 28233., 29828., 20514., 21892., 23270.,
      24648., 16933., 18066., 19199., 20332., 13180., 14104., 15028., 15952.,
      12732., 13656., 14580., 15504., 16265., 17394., 18523., 19652., 21410.,
      22772., 24134., 25496., 23847., 25470., 27093., 28716., 24115., 25742.,
      27369., 28996., 23871., 25502., 27133., 28764., 21370., 22788., 24206.,
      25624., 17481., 18658., 19835., 21012., 15692., 16664., 17636., 18608.,
      13516., 14424., 15332., 16240., 15533., 16642., 17751., 18860., 19450.,
      20788., 22126., 23464., 25043., 26638., 28233., 29828., 23775., 25374.,
      26973., 28572., 24043., 25646., 27249., 28852., 20498., 21892., 23286.,
      24680., 17325., 18482., 19639., 20796., 14428., 15384., 16340., 17296.,
      14300., 15192., 16084., 16976., 16529., 17682., 18835., 19988., 20242.,
      21620., 22998., 24376., 23871., 25502., 27133., 28764., 24139., 25774.,
      27409., 29044., 23895., 25534., 27173., 28812., 22890., 24324., 25758.,
      27192., 17873., 19074., 20275., 21476., 13164., 14104., 15044., 15984.,
      11560., 12336., 13112., 13888., 16070., 17068., 18066., 19064., 17276.,
      18456., 19636., 20816., 20778., 22164., 23550., 24936., 19074., 20436.,
      21798., 23160., 18906., 20244., 21582., 22920., 17100., 18264., 19428.,
      20592., 16422., 17388., 18354., 19320., 11336., 12080., 12824., 13568.,
      9668.,  10312., 10956., 11600., 12807., 13662., 14517., 15372., 15246.,
      16268., 17290., 18312., 17529., 18738., 19947., 21156., 19197., 20418.,
      21639., 22860., 17793., 19026., 20259., 21492., 14038., 15100., 16162.,
      17224., 12103., 12974., 13845., 14716., 11124., 11784., 12444., 13104.,
      7472.,  7968.,  8464.,  8960.,  10228., 10888., 11548., 12208., 11048.,
      11824., 12600., 13376., 13068., 13976., 14884., 15792., 13340., 14232.,
      15124., 16016., 14636., 15512., 16388., 17264., 11336., 12080., 12824.,
      13568., 8244.,  8840.,  9436.,  10032., 6512.,  6944.,  7376.,  7808.,
      6960.,  7456.,  7952.,  8448.,  8564.,  9160.,  9756.,  10352., 12136.,
      12848., 13560., 14272., 12428., 13272., 14116., 14960., 11676., 12504.,
      13332., 14160., 12652., 13528., 14404., 15280., 11336., 12080., 12824.,
      13568., 10292., 10952., 11612., 12272., 8432.,  8992.,  9552.,  10112.,
      9396.,  10056., 10716., 11376., 11027., 11838., 12649., 13460., 14070.,
      15052., 16034., 17016., 18909., 20082., 21255., 22428., 17569., 18754.,
      19939., 21124., 18277., 19474., 20671., 21868., 15454., 16476., 17498.,
      18520., 13107., 13998., 14889., 15780., 11300., 12040., 12780., 13520.,
      12136., 12848., 13560., 14272., 12838., 13724., 14610., 15496., 15196.,
      16280., 17364., 18448., 19018., 20324., 21630., 22936., 21154., 22500.,
      23846., 25192., 21242., 22628., 24014., 25400., 19084., 20280., 21476.,
      22672., 15910., 16956., 18002., 19048., 12744., 13616., 14488., 15360.,
      13004., 13912., 14820., 15728., 17933., 19074., 20215., 21356., 20410.,
      21812., 23214., 24616., 24115., 25742., 27369., 28996., 23871., 25502.,
      27133., 28764., 24139., 25774., 27409., 29044., 20754., 22148., 23542.,
      24936., 19213., 20402., 21591., 22780., 13916., 14872., 15828., 16784.,
      12764., 13656., 14548., 15440., 16177., 17298., 18419., 19540., 21522.,
      22900., 24278., 25656., 23775., 25374., 26973., 28572., 24043., 25646.,
      27249., 28852., 22775., 24382., 25989., 27596., 20394., 21764., 23134.,
      24504., 18033., 19202., 20371., 21540., 15724., 16664., 17604., 18544.,
      14252., 15192., 16132., 17072., 17173., 18338., 19503., 20668., 20266.,
      21684., 23102., 24520., 24139., 25774., 27409., 29044., 23895., 25534.,
      27173., 28812., 26211., 27854., 29497., 31140., 20226., 21636., 23046.,
      24456., 16341., 17490., 18639., 19788., 13436., 14360., 15284., 16208.,
      14524., 15448., 16372., 17296., 17465., 18610., 19755., 20900., 20866.,
      22260., 23654., 25048., 22775., 24382., 25989., 27596., 23043., 24654.,
      26265., 27876., 23823., 25438., 27053., 28668., 23450., 24836., 26222.,
      27608., 16697., 17826., 18955., 20084., 13196., 14104., 15012., 15920.,
      12520., 13360., 14200., 15040., 15254., 16300., 17346., 18392., 18844.,
      20120., 21396., 22672., 22618., 24084., 25550., 27016., 21618., 23124.,
      24630., 26136., 20426., 21908., 23390., 24872., 17644., 18904., 20164.,
      21424., 17142., 18156., 19170., 20184., 11784., 12592., 13400., 14208.,
      10148., 10824., 11500., 12176., 12095., 12926., 13757., 14588., 14238.,
      15244., 16250., 17256., 16737., 17874., 19011., 20148., 18405., 19554.,
      20703., 21852., 17001., 18162., 19323., 20484., 13734., 14716., 15698.,
      16680., 11071., 11854., 12637., 13420., 10388., 11016., 11644., 12272.,
      9392.,  10016., 10640., 11264., 11924., 12680., 13436., 14192., 13736.,
      14640., 15544., 16448., 14508., 15512., 16516., 17520., 14780., 15768.,
      16756., 17744., 16076., 17048., 18020., 18992., 11784., 12592., 13400.,
      14208., 8724.,  9352.,  9980.,  10608., 6704.,  7200.,  7696.,  8192.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668., 26139.,
      27758., 29377., 30996., 23919., 25566., 27213., 28860., 21947., 23534.,
      25121., 26708., 22727., 24318., 25909., 27500., 26139., 27758., 29377.,
      30996., 23847., 25470., 27093., 28716., 24115., 25742., 27369., 28996.,
      22727., 24318., 25909., 27500., 25043., 26638., 28233., 29828., 23775.,
      25374., 26973., 28572., 21947., 23534., 25121., 26708., 22727., 24318.,
      25909., 27500., 25043., 26638., 28233., 29828., 23847., 25470., 27093.,
      28716., 24115., 25742., 27369., 28996., 23871., 25502., 27133., 28764.,
      25043., 26638., 28233., 29828., 23775., 25374., 26973., 28572., 24043.,
      25646., 27249., 28852., 23871., 25502., 27133., 28764., 24139., 25774.,
      27409., 29044., 23895., 25534., 27173., 28812., 24115., 25742., 27369.,
      28996., 23871., 25502., 27133., 28764., 24139., 25774., 27409., 29044.,
      23775., 25374., 26973., 28572., 24043., 25646., 27249., 28852., 22775.,
      24382., 25989., 27596., 24139., 25774., 27409., 29044., 23895., 25534.,
      27173., 28812., 26211., 27854., 29497., 31140., 22775., 24382., 25989.,
      27596., 23043., 24654., 26265., 27876., 23823., 25438., 27053., 28668.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      6672., 8964.,  9592.,  12684., 12060., 12812., 9336.,  9092.,  6672.,
      5944., 6694.,  9556.,  10114., 10266., 9138.,  9140.,  6998.,  5944.,
      4448., 6200.,  6672.,  8680.,  7528.,  8680.,  6672.,  6200.,  4448.,
      4960., 5816.,  7440.,  7528.,  8680.,  8040.,  7440.,  5304.,  4960.,
      5560., 7294.,  8548.,  11498., 9986.,  10266., 8676.,  8142.,  5560.,
      7440., 7956.,  11288., 11932., 12812., 11292., 11704., 9268.,  7440.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      6672., 9508.,  10008., 12812., 10748., 12684., 10008., 9636.,  6672.,
      6456., 7542.,  8916.,  9138.,  10826., 10114., 8916.,  6566.,  6456.,
      4448., 6200.,  6672.,  8680.,  8040.,  8680.,  6672.,  6200.,  4448.,
      4960., 5304.,  7440.,  8040.,  8680.,  7528.,  7440.,  5816.,  4960.,
      5560., 7726.,  8004.,  10266., 9682.,  11498., 8548.,  7294.,  5560.,
      7440., 8180.,  10616., 11292., 13356., 11932., 11288., 7956.,  7440.,
      7784., 10058., 11468., 15502., 14006., 14398., 11340., 11034., 7784.,
      8424., 9346.,  13404., 14006., 14398., 12902., 13404., 10450., 8424.,
      7784., 11034., 11340., 14398., 12902., 15502., 11884., 10730., 7784.,
      8936., 9906.,  12092., 12902., 15502., 14006., 12764., 9218.,  8936.,
      6672., 8964.,  9592.,  12684., 12060., 12812., 9336.,  9092.,  6672.,
      5944., 6694.,  9556.,  10114., 10266., 9138.,  9140.,  6998.,  5944.,
      4448., 6200.,  6672.,  8680.,  7528.,  8680.,  6672.,  6200.,  4448.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15502., 14006., 14398., 14006., 14398., 12902., 14398., 12902., 15502.,
      12902., 15502., 14006., 14398., 12902., 15502., 12902., 15502., 14006.,
      15502., 14006., 14398., 14006., 14398., 12902., 15502., 14006., 14398.,
      14006., 14398., 12902., 14398., 12902., 15502., 12902., 15502., 14006.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      6000.,  6816.,  9164.,  10152., 8872.,  10064., 13060., 14488., 10756.,
      12216., 13316., 14744., 8616.,  9808.,  9164.,  10152., 6000.,  6816.,
      6280.,  6960.,  6114.,  6956.,  9292.,  10312., 8870.,  10084., 10982.,
      12180., 8486.,  9668.,  9164.,  10152., 6114.,  6956.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7714.,  8572.,  7756.,  8808.,  10982., 12180., 8486.,
      9668.,  10598., 11764., 7628.,  8648.,  7714.,  8572.,  5000.,  5680.,
      7536.,  8352.,  7756.,  8808.,  11688., 12944., 10372., 11800., 12932.,
      14328., 10628., 12056., 11432., 12688., 7756.,  8808.,  7536.,  8352.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      6000.,  6816.,  9676.,  10728., 9128.,  10384., 13316., 14744., 10244.,
      11640., 13060., 14488., 9384.,  10640., 9676.,  10728., 6000.,  6816.,
      6280.,  6960.,  6242.,  7116.,  9548.,  10568., 8486.,  9668.,  10598.,
      11764., 8870.,  10084., 9676.,  10728., 6242.,  7116.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.,
      5024.,  5568.,  5000.,  5680.,  7536.,  8352.,  7000.,  7952.,  8792.,
      9744.,  7000.,  7952.,  7536.,  8352.,  5000.,  5680.,  5024.,  5568.,
      5000.,  5680.,  7586.,  8412.,  7244.,  8232.,  10598., 11764., 8870.,
      10084., 10982., 12180., 7372.,  8392.,  7586.,  8412.,  5000.,  5680.,
      7536.,  8352.,  7244.,  8232.,  10920., 12112., 10628., 12056., 13444.,
      14904., 10372., 11800., 11176., 12368., 7244.,  8232.,  7536.,  8352.,
      7000.,  7952.,  10598., 11764., 10628., 12056., 15250., 16924., 12242.,
      13932., 15122., 16764., 10244., 11640., 10598., 11764., 7000.,  7952.,
      8792.,  9744.,  8870.,  10084., 13444., 14904., 12242., 13932., 15122.,
      16764., 12114., 13772., 13060., 14488., 8870.,  10084., 8792.,  9744.,
      7000.,  7952.,  10982., 12180., 10372., 11800., 15122., 16764., 12114.,
      13772., 15250., 16924., 10756., 12216., 10982., 12180., 7000.,  7952.,
      8792.,  9744.,  8486.,  9668.,  12932., 14328., 12114., 13772., 15250.,
      16924., 12242., 13932., 13316., 14744., 8486.,  9668.,  8792.,  9744.,
      6000.,  6816.,  9164.,  10152., 8872.,  10064., 13060., 14488., 10756.,
      12216., 13316., 14744., 8616.,  9808.,  9164.,  10152., 6000.,  6816.,
      6280.,  6960.,  6114.,  6956.,  9292.,  10312., 8870.,  10084., 10982.,
      12180., 8486.,  9668.,  9164.,  10152., 6114.,  6956.,  6280.,  6960.,
      4000.,  4544.,  6280.,  6960.,  6000.,  6816.,  8792.,  9744.,  7000.,
      7952.,  8792.,  9744.,  6000.,  6816.,  6280.,  6960.,  4000.,  4544.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932., 15122.,
      16764., 12114., 13772., 15122., 16764., 12114., 13772., 15250., 16924.,
      12114., 13772., 15250., 16924., 12242., 13932., 15122., 16764., 12114.,
      13772., 15250., 16924., 12114., 13772., 15250., 16924., 12242., 13932.,
      15250., 16924., 12242., 13932., 15122., 16764., 12242., 13932., 15122.,
      16764., 12114., 13772., 15250., 16924., 12242., 13932., 15122., 16764.,
      12242., 13932., 15122., 16764., 12114., 13772., 15122., 16764., 12114.,
      13772., 15250., 16924., 12114., 13772., 15250., 16924., 12242., 13932.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6394.,  7236.,  8078.,  8920.,  7740.,
      8760.,  9780.,  10800., 9198.,  10412., 11626., 12840., 9086.,  10284.,
      11482., 12680., 8974.,  10156., 11338., 12520., 7516.,  8504.,  9492.,
      10480., 6394.,  7236.,  8078.,  8920.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6506.,  7364.,  8222.,  9080.,  7964.,
      9016.,  10068., 11120., 9086.,  10284., 11482., 12680., 8974.,  10156.,
      11338., 12520., 8862.,  10028., 11194., 12360., 7740.,  8760.,  9780.,
      10800., 6506.,  7364.,  8222.,  9080.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7964.,  9016.,  10068., 11120., 9512.,
      10768., 12024., 13280., 10836., 12264., 13692., 15120., 10612., 12008.,
      13404., 14800., 10836., 12264., 13692., 15120., 9512.,  10768., 12024.,
      13280., 7964.,  9016.,  10068., 11120., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6618.,  7492.,  8366.,  9240.,  7740.,
      8760.,  9780.,  10800., 8974.,  10156., 11338., 12520., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 7964.,  9016.,  10068.,
      11120., 6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7516.,
      8504.,  9492.,  10480., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 9086.,  10284., 11482., 12680., 7740.,  8760.,  9780.,
      10800., 6282.,  7108.,  7934.,  8760.,  5160.,  5840.,  6520.,  7200.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      7224.,  8176.,  9128.,  10080., 8862.,  10028., 11194., 12360., 10836.,
      12264., 13692., 15120., 12698., 14372., 16046., 17720., 12810., 14500.,
      16190., 17880., 12474., 14116., 15758., 17400., 10612., 12008., 13404.,
      14800., 8862.,  10028., 11194., 12360., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9198.,  10412., 11626., 12840., 11060.,
      12520., 13980., 15440., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 10836., 12264., 13692.,
      15120., 9198.,  10412., 11626., 12840., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 9086.,  10284., 11482., 12680., 10836.,
      12264., 13692., 15120., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 11060., 12520., 13980.,
      15440., 9086.,  10284., 11482., 12680., 7224.,  8176.,  9128.,  10080.,
      7224.,  8176.,  9128.,  10080., 8974.,  10156., 11338., 12520., 10612.,
      12008., 13404., 14800., 12586., 14244., 15902., 17560., 12698., 14372.,
      16046., 17720., 12810., 14500., 16190., 17880., 10836., 12264., 13692.,
      15120., 8974.,  10156., 11338., 12520., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7516.,  8504.,  9492.,  10480., 9064.,
      10256., 11448., 12640., 10836., 12264., 13692., 15120., 11060., 12520.,
      13980., 15440., 10836., 12264., 13692., 15120., 9064.,  10256., 11448.,
      12640., 7516.,  8504.,  9492.,  10480., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6394.,  7236.,  8078.,  8920.,  7740.,
      8760.,  9780.,  10800., 9198.,  10412., 11626., 12840., 9086.,  10284.,
      11482., 12680., 8974.,  10156., 11338., 12520., 7516.,  8504.,  9492.,
      10480., 6394.,  7236.,  8078.,  8920.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,
      8640.,  5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880., 12474.,
      14116., 15758., 17400., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 12474., 14116., 15758.,
      17400., 12586., 14244., 15902., 17560., 12698., 14372., 16046., 17720.,
      12586., 14244., 15902., 17560., 12698., 14372., 16046., 17720., 12810.,
      14500., 16190., 17880., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 12586., 14244., 15902.,
      17560., 12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.,
      12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880., 12474.,
      14116., 15758., 17400., 12810., 14500., 16190., 17880., 12474., 14116.,
      15758., 17400., 12586., 14244., 15902., 17560., 12698., 14372., 16046.,
      17720., 12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400.,
      12810., 14500., 16190., 17880., 12474., 14116., 15758., 17400., 12586.,
      14244., 15902., 17560., 12474., 14116., 15758., 17400., 12586., 14244.,
      15902., 17560., 12698., 14372., 16046., 17720., 12586., 14244., 15902.,
      17560., 12698., 14372., 16046., 17720., 12810., 14500., 16190., 17880.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2436.,  3090.,  3786.,  4520.,  4586.,  4684.,  5134.,  4750.,  4380.,
      4028.,  3500.,  4797.,  6144.,  7536.,  7952.,  8400.,  8976.,  8227.,
      7490.,  6770.,  6170.,  8469.,  9785.,  11136., 10829., 10554., 11207.,
      9687.,  8194.,  6734.,  7094.,  8092.,  9137.,  10222., 9719.,  9280.,
      9577.,  8166.,  7134.,  6136.,  6066.,  7368.,  8711.,  10088., 10033.,
      10042., 10563., 9368.,  8334.,  7340.,  6830.,  8884.,  10973., 13090.,
      12459., 11892., 11613., 9162.,  7678.,  6240.,  8362.,  9568.,  10803.,
      11516., 10821., 10222., 9719.,  7740.,  6510.,  5332.,  6190.,  7413.,
      8651.,  9578.,  9297.,  9080.,  8927.,  7545.,  6696.,  5906.,  5660.,
      7217.,  8792.,  10284., 10402., 10584., 9806.,  7663.,  5820.,  4026.,
      5580.,  6706.,  7838.,  8076.,  7490.,  6968.,  6510.,  5122.,  3784.,
      2468.,  2468.,  3482.,  4522.,  5584.,  6034.,  6164.,  6326.,  5774.,
      5252.,  4764.,  4292.,  6017.,  7772.,  9552.,  10128., 10608., 11120.,
      10119., 8126.,  6170.,  6586.,  8329.,  10089., 11860., 12513., 12270.,
      12059., 10231., 8454.,  6734.,  5038.,  6644.,  8269.,  9906.,  10587.,
      10596., 10637., 9242.,  7902.,  6624.,  5354.,  7264.,  9187.,  11116.,
      11797., 12030., 12295., 10892., 9550.,  8276.,  6438.,  8076.,  9721.,
      11366., 12047., 12504., 12993., 11134., 9342.,  7624.,  5186.,  6520.,
      7887.,  9280.,  9577.,  9906.,  10587., 9328.,  8110.,  6940.,  4398.,
      5857.,  7339.,  8838.,  9261.,  9716.,  10299., 9257.,  8260.,  7314.,
      5076.,  7069.,  8068.,  9092.,  8666.,  8272.,  8806.,  7619.,  6464.,
      5346.,  4140.,  4778.,  5438.,  6116.,  5786.,  5488.,  5894.,  5026.,
      4160.,  3300.,  3428.,  4418.,  5450.,  6520.,  6746.,  7004.,  7294.,
      6638.,  6124.,  5628.,  5564.,  7557.,  9592.,  11664., 11216., 10800.,
      10416., 8203.,  6938.,  5698.,  8058.,  9309.,  10585., 11336., 10677.,
      10082., 9551.,  7607.,  6410.,  5262.,  6598.,  7948.,  9321.,  10390.,
      10207., 10088., 10033., 8494.,  7486.,  6536.,  6914.,  8792.,  10687.,
      12496., 12761., 13090., 12459., 9888.,  7630.,  5436.,  7998.,  9828.,
      11669., 12618., 12307., 11516., 10821., 8882.,  7038.,  5264.,  5818.,
      7632.,  9451.,  10596., 10637., 10390., 10207., 8740.,  7342.,  6020.,
      5230.,  7117.,  9003.,  10434., 10601., 10704., 10871., 9689.,  7552.,
      5490.,  5196.,  6569.,  7952.,  9116.,  9458.,  8936.,  8478.,  7191.,
      5956.,  4778.,  3532.,  4450.,  5374.,  6300.,  6706.,  6440.,  6206.,
      5122.,  4056.,  3012.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10222., 9719.,  9280.,  9577.,  10088., 10033., 10042., 10563.,
      13090., 12459., 11892., 11613., 11516., 10821., 10222., 9719.,
      9906.,  10587., 10596., 10637., 11116., 11797., 12030., 12295.,
      11366., 12047., 12504., 12993., 9280.,  9577.,  9906.,  10587.,
      10390., 10207., 10088., 10033., 12496., 12761., 13090., 12459.,
      12618., 12307., 11516., 10821., 10596., 10637., 10390., 10207.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3920.,  4136.,  4604.,  4868.,  5304.,  5620.,  6012.,  6384.,  5764.,
      6132.,  5580.,  5944.,  6068.,  6460.,  5600.,  5948.,  4940.,  5240.,
      4352.,  4600.,  3766.,  4024.,  4923.,  5242.,  6111.,  6496.,  7320.,
      7776.,  7605.,  8064.,  7954.,  8416.,  8527.,  9024.,  8173.,  8614.,
      7336.,  7716.,  6602.,  6916.,  5824.,  6164.,  8002.,  8426.,  9488.,
      10002., 10974., 11584., 10830., 11450., 10750., 11380., 11470., 12142.,
      10556., 11150., 8870.,  9380.,  7320.,  7740.,  7422.,  7884.,  9109.,
      9656.,  10435., 11074., 11770., 12508., 11259., 11982., 10876., 11584.,
      10909., 11634., 9157.,  9772.,  8010.,  8540.,  7002.,  7440.,  7262.,
      7748.,  8591.,  9168.,  10891., 11566., 13188., 13968., 12549., 13314.,
      12038., 12788., 12519., 13286., 11141., 11792., 9612.,  10172., 8234.,
      8696.,  7614.,  8124.,  9481.,  10088., 11603., 12314., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 10309., 10996., 8526.,
      9116.,  6906.,  7392.,  8478.,  9012.,  9731.,  10368., 11547., 12294.,
      13304., 14136., 12441., 13226., 11770., 12508., 11259., 11982., 9221.,
      9816.,  7568.,  8060.,  6090.,  6472.,  6376.,  6844.,  7762.,  8330.,
      10004., 10678., 11586., 12340., 11558., 12290., 11658., 12368., 10862.,
      11550., 8480.,  9042.,  7202.,  7664.,  6112.,  6468.,  6574.,  7000.,
      7681.,  8194.,  8947.,  9552.,  10010., 10680., 9763.,  10404., 9644.,
      10256., 8629.,  9212.,  6377.,  6846.,  4762.,  5144.,  3314.,  3604.,
      4800.,  5144.,  5324.,  5732.,  6336.,  6812.,  6580.,  7096.,  6084.,
      6564.,  5716.,  6160.,  5476.,  5884.,  4456.,  4772.,  3572.,  3824.,
      2800.,  2984.,  3216.,  3432.,  4348.,  4628.,  5464.,  5812.,  6556.,
      6976.,  7044.,  7492.,  6924.,  7368.,  6868.,  7308.,  6336.,  6716.,
      5516.,  5832.,  4800.,  5048.,  4054.,  4328.,  5663.,  6018.,  7391.,
      7832.,  9100.,  9632.,  9673.,  10240., 10086., 10656., 10563., 11136.,
      10109., 10606., 8060.,  8476.,  6154.,  6484.,  6368.,  6740.,  8050.,
      8530.,  10144., 10738., 12190., 12904., 12910., 13666., 12894., 13660.,
      12942., 13718., 11820., 12494., 9846.,  10412., 8056.,  8508.,  5182.,
      5564.,  6649.,  7144.,  8851.,  9466.,  11006., 11748., 11775., 12566.,
      12256., 13064., 12801., 13626., 11461., 12180., 9982.,  10588., 8698.,
      9184.,  6686.,  7092.,  8819.,  9344.,  10971., 11622., 13064., 13848.,
      13833., 14666., 13738., 14588., 13707., 14574., 12293., 13048., 10432.,
      11068., 8778.,  9288.,  6654.,  7084.,  8301.,  8856.,  10275., 10962.,
      12178., 13004., 12947., 13822., 13300., 14192., 13717., 14626., 12357.,
      13148., 10242., 10908., 8346.,  8880.,  6110.,  6500.,  7239.,  7728.,
      9067.,  9662.,  10876., 11584., 10909., 11634., 11006., 11748., 11775.,
      12566., 10501., 11200., 9124.,  9724.,  7914.,  8408.,  5832.,  6204.,
      7314.,  7778.,  8772.,  9334.,  10194., 10860., 10518., 11194., 10906.,
      11592., 11518., 12246., 10032., 10674., 8706.,  9256.,  7552.,  8004.,
      4366.,  4680.,  5973.,  6362.,  6867.,  7336.,  7742.,  8296.,  7399.,
      7956.,  7120.,  7680.,  7641.,  8236.,  6489.,  7014.,  5470.,  5920.,
      4594.,  4964.,  3072.,  3288.,  3404.,  3668.,  4384.,  4700.,  5364.,
      5736.,  5348.,  5716.,  5396.,  5760.,  5796.,  6188.,  5000.,  5348.,
      4276.,  4576.,  3632.,  3880.,  4304.,  4584.,  5148.,  5476.,  6008.,
      6388.,  6876.,  7312.,  6948.,  7380.,  7084.,  7512.,  7284.,  7708.,
      6816.,  7164.,  6124.,  6424.,  5504.,  5752.,  5238.,  5592.,  7011.,
      7434.,  9055.,  9552.,  11104., 11680., 10685., 11264., 10330., 10912.,
      10039., 10624., 8589.,  9078.,  7216.,  7636.,  5962.,  6308.,  7936.,
      8404.,  9282.,  9850.,  11184., 11858., 13022., 13776., 12206., 12938.,
      11518., 12228., 10958., 11646., 8988.,  9550.,  7398.,  7860.,  5976.,
      6332.,  6910.,  7404.,  8509.,  9112.,  10979., 11698., 12802., 13612.,
      12931., 13726., 13188., 13968., 12549., 13314., 10309., 10940., 8722.,
      9244.,  7322.,  7728.,  8414.,  8932.,  10103., 10736., 11947., 12702.,
      13580., 14432., 13581., 14418., 13710., 14532., 12943., 13750., 10629.,
      11296., 8212.,  8764.,  5994.,  6424.,  8382.,  8924.,  10033., 10696.,
      12147., 12938., 13462., 14356., 13335., 14214., 13304., 14136., 12441.,
      13226., 10309., 10948., 8342.,  8860.,  6586.,  6976.,  6046.,  6484.,
      7723.,  8288.,  10171., 10870., 12256., 13064., 12801., 13626., 12802.,
      13612., 12931., 13726., 11653., 12328., 9176.,  9724.,  6922.,  7336.,
      6312.,  6716.,  8242.,  8762.,  10228., 10870., 11266., 12004., 11078.,
      11826., 10794., 11520., 10638., 11342., 9152.,  9746.,  6850.,  7328.,
      4768.,  5124.,  4462.,  4792.,  5449.,  5874.,  6835.,  7360.,  7746.,
      8344.,  7915.,  8516.,  7412.,  7984.,  7037.,  7580.,  5961.,  6414.,
      5058.,  5416.,  4338.,  4596.,  2880.,  3096.,  3500.,  3780.,  4864.,
      5212.,  6196.,  6616.,  6596.,  7044.,  6708.,  7152.,  6884.,  7324.,
      5928.,  6308.,  5076.,  5392.,  4336.,  4584.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11770., 12508., 11259., 11982., 10876., 11584., 10909., 11634., 13188.,
      13968., 12549., 13314., 12038., 12788., 12519., 13286., 13710., 14532.,
      12943., 13750., 12304., 13096., 12209., 13018., 13304., 14136., 12441.,
      13226., 11770., 12508., 11259., 11982., 11006., 11748., 11775., 12566.,
      12256., 13064., 12801., 13626., 13064., 13848., 13833., 14666., 13738.,
      14588., 13707., 14574., 12178., 13004., 12947., 13822., 13300., 14192.,
      13717., 14626., 10876., 11584., 10909., 11634., 11006., 11748., 11775.,
      12566., 12802., 13612., 12931., 13726., 13188., 13968., 12549., 13314.,
      13580., 14432., 13581., 14418., 13710., 14532., 12943., 13750., 13462.,
      14356., 13335., 14214., 13304., 14136., 12441., 13226., 12256., 13064.,
      12801., 13626., 12802., 13612., 12931., 13726.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3400.,  3616.,  3832.,  4048.,  4080.,  4344.,  4608.,  4872.,  4724.,
      5040.,  5356.,  5672.,  5316.,  5688.,  6060.,  6432.,  5336.,  5704.,
      6072.,  6440.,  5484.,  5848.,  6212.,  6576.,  5920.,  6312.,  6704.,
      7096.,  5860.,  6208.,  6556.,  6904.,  5772.,  6072.,  6372.,  6672.,
      4936.,  5184.,  5432.,  5680.,  3946.,  4204.,  4462.,  4720.,  4919.,
      5238.,  5557.,  5876.,  5853.,  6238.,  6623.,  7008.,  6728.,  7184.,
      7640.,  8096.,  6719.,  7178.,  7637.,  8096.,  6838.,  7300.,  7762.,
      8224.,  7373.,  7870.,  8367.,  8864.,  7105.,  7546.,  7987.,  8428.,
      6548.,  6928.,  7308.,  7688.,  6010.,  6324.,  6638.,  6952.,  4460.,
      4800.,  5140.,  5480.,  6652.,  7076.,  7500.,  7924.,  8030.,  8544.,
      9058.,  9572.,  9306.,  9916.,  10526., 11136., 9264.,  9884.,  10504.,
      11124., 9350.,  9980.,  10610., 11240., 9980.,  10652., 11324., 11996.,
      9414.,  10008., 10602., 11196., 8334.,  8844.,  9354.,  9864.,  7052.,
      7472.,  7892.,  8312.,  6126.,  6588.,  7050.,  7512.,  8423.,  8970.,
      9517.,  10064., 10247., 10886., 11525., 12164., 11282., 12020., 12758.,
      13496., 10531., 11254., 11977., 12700., 10036., 10744., 11452., 12160.,
      10341., 11066., 11791., 12516., 9091.,  9706.,  10321., 10936., 8322.,
      8852.,  9382.,  9912.,  7038.,  7476.,  7914.,  8352.,  6422.,  6908.,
      7394.,  7880.,  8061.,  8638.,  9215.,  9792.,  10547., 11222., 11897.,
      12572., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      10782., 11532., 12282., 13032., 10959., 11726., 12493., 13260., 9375.,
      10026., 10677., 11328., 8104.,  8664.,  9224.,  9784.,  7046.,  7508.,
      7970.,  8432.,  6718.,  7228.,  7738.,  8248.,  8467.,  9074.,  9681.,
      10288., 10335., 11046., 11757., 12468., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 10171., 10858., 11545., 12232., 8654.,  9244.,
      9834.,  10424., 7054.,  7540.,  8026.,  8512.,  7014.,  7548.,  8082.,
      8616.,  8617.,  9254.,  9891.,  10528., 10635., 11382., 12129., 12876.,
      12720., 13552., 14384., 15216., 12321., 13106., 13891., 14676., 11282.,
      12020., 12758., 13496., 10531., 11254., 11977., 12700., 8535.,  9130.,
      9725.,  10320., 7540.,  8032.,  8524.,  9016.,  6166.,  6548.,  6930.,
      7312.,  6140.,  6608.,  7076.,  7544.,  7308.,  7876.,  8444.,  9012.,
      9190.,  9864.,  10538., 11212., 11314., 12068., 12822., 13576., 11728.,
      12460., 13192., 13924., 11374., 12084., 12794., 13504., 10252., 10940.,
      11628., 12316., 7694.,  8256.,  8818.,  9380.,  6390.,  6852.,  7314.,
      7776.,  5404.,  5760.,  6116.,  6472.,  5586.,  6012.,  6438.,  6864.,
      6657.,  7170.,  7683.,  8196.,  7753.,  8358.,  8963.,  9568.,  9302.,
      9972.,  10642., 11312., 9349.,  9990.,  10631., 11272., 9652.,  10264.,
      10876., 11488., 9187.,  9770.,  10353., 10936., 6397.,  6866.,  7335.,
      7804.,  4918.,  5300.,  5682.,  6064.,  3842.,  4132.,  4422.,  4712.,
      4520.,  4864.,  5208.,  5552.,  5024.,  5432.,  5840.,  6248.,  5924.,
      6400.,  6876.,  7352.,  6500.,  7016.,  7532.,  8048.,  6184.,  6664.,
      7144.,  7624.,  6124.,  6568.,  7012.,  7456.,  6320.,  6728.,  7136.,
      7544.,  4692.,  5008.,  5324.,  5640.,  3372.,  3624.,  3876.,  4128.,
      2344.,  2528.,  2712.,  2896.,  2760.,  2976.,  3192.,  3408.,  4064.,
      4344.,  4624.,  4904.,  5268.,  5616.,  5964.,  6312.,  6356.,  6776.,
      7196.,  7616.,  6792.,  7240.,  7688.,  8136.,  7068.,  7512.,  7956.,
      8400.,  7472.,  7912.,  8352.,  8792.,  6532.,  6912.,  7292.,  7672.,
      5500.,  5816.,  6132.,  6448.,  4680.,  4928.,  5176.,  5424.,  3226.,
      3500.,  3774.,  4048.,  4827.,  5182.,  5537.,  5892.,  6437.,  6878.,
      7319.,  7760.,  7908.,  8440.,  8972.,  9504.,  8443.,  9010.,  9577.,
      10144., 8690.,  9260.,  9830.,  10400., 9065.,  9638.,  10211., 10784.,
      8873.,  9370.,  9867.,  10364., 7320.,  7736.,  8152.,  8568.,  5738.,
      6068.,  6398.,  6728.,  4748.,  5120.,  5492.,  5864.,  6564.,  7044.,
      7524.,  8004.,  8622.,  9216.,  9810.,  10404., 10610., 11324., 12038.,
      12752., 11240., 11996., 12752., 13508., 11454., 12220., 12986., 13752.,
      11796., 12572., 13348., 14124., 11222., 11896., 12570., 13244., 10102.,
      10668., 11234., 11800., 7724.,  8176.,  8628.,  9080.,  5054.,  5436.,
      5818.,  6200.,  6499.,  6994.,  7489.,  7984.,  8511.,  9126.,  9741.,
      10356., 10774., 11516., 12258., 13000., 11495., 12286., 13077., 13868.,
      11672., 12480., 13288., 14096., 11977., 12802., 13627., 14452., 10907.,
      11626., 12345., 13064., 10014., 10620., 11226., 11832., 8590.,  9076.,
      9562.,  10048., 5606.,  6012.,  6418.,  6824.,  7417.,  7942.,  8467.,
      8992.,  9067.,  9718.,  10369., 11020., 11264., 12048., 12832., 13616.,
      11985., 12818., 13651., 14484., 12034., 12884., 13734., 14584., 12211.,
      13078., 13945., 14812., 10935., 11690., 12445., 13200., 9540.,  10176.,
      10812., 11448., 8342.,  8852.,  9362.,  9872.,  6158.,  6588.,  7018.,
      7448.,  8079.,  8634.,  9189.,  9744.,  10135., 10822., 11509., 12196.,
      12010., 12836., 13662., 14488., 12731., 13606., 14481., 15356., 12652.,
      13544., 14436., 15328., 12701., 13610., 14519., 15428., 11475., 12266.,
      13057., 13848., 9834.,  10500., 11166., 11832., 8094.,  8628.,  9162.,
      9696.,  5750.,  6140.,  6530.,  6920.,  6725.,  7214.,  7703.,  8192.,
      8259.,  8854.,  9449.,  10044., 10036., 10744., 11452., 12160., 10341.,
      11066., 11791., 12516., 10774., 11516., 12258., 13000., 11495., 12286.,
      13077., 13868., 10351., 11050., 11749., 12448., 9392.,  9992.,  10592.,
      11192., 7910.,  8404.,  8898.,  9392.,  5788.,  6160.,  6532.,  6904.,
      6900.,  7364.,  7828.,  8292.,  7862.,  8424.,  8986.,  9548.,  9386.,
      10052., 10718., 11384., 9448.,  10124., 10800., 11476., 9638.,  10324.,
      11010., 11696., 10244., 10972., 11700., 12428., 8798.,  9440.,  10082.,
      10724., 7774.,  8324.,  8874.,  9424.,  6908.,  7360.,  7812.,  8264.,
      4226.,  4540.,  4854.,  5168.,  6053.,  6442.,  6831.,  7220.,  7057.,
      7526.,  7995.,  8464.,  7954.,  8508.,  9062.,  9616.,  7777.,  8334.,
      8891.,  9448.,  7728.,  8288.,  8848.,  9408.,  8223.,  8818.,  9413.,
      10008., 6821.,  7346.,  7871.,  8396.,  5754.,  6204.,  6654.,  7104.,
      5042.,  5412.,  5782.,  6152.,  2216.,  2432.,  2648.,  2864.,  3248.,
      3512.,  3776.,  4040.,  4868.,  5184.,  5500.,  5816.,  5748.,  6120.,
      6492.,  6864.,  5336.,  5704.,  6072.,  6440.,  5052.,  5416.,  5780.,
      6144.,  5440.,  5832.,  6224.,  6616.,  4468.,  4816.,  5164.,  5512.,
      3708.,  4008.,  4308.,  4608.,  3176.,  3424.,  3672.,  3920.,  3592.,
      3872.,  4152.,  4432.,  5104.,  5432.,  5760.,  6088.,  6580.,  6960.,
      7340.,  7720.,  6980.,  7416.,  7852.,  8288.,  6616.,  7048.,  7480.,
      7912.,  6380.,  6808.,  7236.,  7664.,  6272.,  6696.,  7120.,  7544.,
      5732.,  6080.,  6428.,  6776.,  5324.,  5624.,  5924.,  6224.,  4936.,
      5184.,  5432.,  5680.,  4234.,  4588.,  4942.,  5296.,  5919.,  6342.,
      6765.,  7188.,  7789.,  8286.,  8783.,  9280.,  9568.,  10144., 10720.,
      11296., 9175.,  9754.,  10333., 10912., 8910.,  9492.,  10074., 10656.,
      8773.,  9358.,  9943.,  10528., 7889.,  8378.,  8867.,  9356.,  7036.,
      7456.,  7876.,  8296.,  5978.,  6324.,  6670.,  7016.,  5996.,  6464.,
      6932.,  7400.,  7788.,  8356.,  8924.,  9492.,  9982.,  10656., 11330.,
      12004., 12234., 12988., 13742., 14496., 11904., 12636., 13368., 14100.,
      10806., 11516., 12226., 12936., 9964.,  10652., 11340., 12028., 8102.,
      8664.,  9226.,  9788.,  7230.,  7692.,  8154.,  8616.,  5964.,  6320.,
      6676.,  7032.,  6606.,  7100.,  7594.,  8088.,  7935.,  8538.,  9141.,
      9744.,  9975.,  10694., 11413., 12132., 12250., 13060., 13870., 14680.,
      12779., 13574., 14369., 15164., 12540., 13320., 14100., 14880., 11533.,
      12298., 13063., 13828., 9075.,  9706.,  10337., 10968., 7450.,  7972.,
      8494.,  9016.,  6174.,  6580.,  6986.,  7392.,  7158.,  7676.,  8194.,
      8712.,  8725.,  9358.,  9991.,  10624., 10275., 11030., 11785., 12540.,
      12228., 13080., 13932., 14784., 12501., 13338., 14175., 15012., 13030.,
      13852., 14674., 15496., 12791., 13598., 14405., 15212., 10127., 10794.,
      11461., 12128., 8128.,  8680.,  9232.,  9784.,  6182.,  6612.,  7042.,
      7472.,  7710.,  8252.,  8794.,  9336.,  9259.,  9922.,  10585., 11248.,
      11087., 11878., 12669., 13460., 12462., 13356., 14250., 15144., 12479.,
      13358., 14237., 15116., 12720., 13552., 14384., 15216., 12321., 13106.,
      13891., 14676., 9963.,  10602., 11241., 11880., 8102.,  8620.,  9138.,
      9656.,  5998.,  6388.,  6778.,  7168.,  5830.,  6268.,  6706.,  7144.,
      7489.,  8054.,  8619.,  9184.,  9723.,  10422., 11121., 11820., 11672.,
      12480., 13288., 14096., 11977., 12802., 13627., 14452., 12250., 13060.,
      13870., 14680., 12779., 13574., 14369., 15164., 11015., 11690., 12365.,
      13040., 8396.,  8944.,  9492.,  10040., 6262.,  6676.,  7090.,  7504.,
      5308.,  5712.,  6116.,  6520.,  7036.,  7556.,  8076.,  8596.,  8646.,
      9288.,  9930.,  10572., 10178., 10916., 11654., 12392., 10240., 10988.,
      11736., 12484., 10142., 10868., 11594., 12320., 10300., 11004., 11708.,
      12412., 9262.,  9856.,  10450., 11044., 7718.,  8196.,  8674.,  9152.,
      5276.,  5632.,  5988.,  6344.,  4274.,  4604.,  4934.,  5264.,  5609.,
      6034.,  6459.,  6884.,  7193.,  7718.,  8243.,  8768.,  7918.,  8516.,
      9114.,  9712.,  7741.,  8342.,  8943.,  9544.,  7276.,  7848.,  8420.,
      8992.,  7067.,  7610.,  8153.,  8696.,  6093.,  6546.,  6999.,  7452.,
      5534.,  5892.,  6250.,  6608.,  4386.,  4644.,  4902.,  5160.,  2856.,
      3072.,  3288.,  3504.,  3296.,  3576.,  3856.,  4136.,  4388.,  4736.,
      5084.,  5432.,  5828.,  6248.,  6668.,  7088.,  6216.,  6664.,  7112.,
      7560.,  6060.,  6504.,  6948.,  7392.,  6032.,  6472.,  6912.,  7352.,
      5012.,  5392.,  5772.,  6152.,  4268.,  4584.,  4900.,  5216.,  3816.,
      4064.,  4312.,  4560.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11282., 12020., 12758., 13496., 10531., 11254., 11977., 12700., 10036.,
      10744., 11452., 12160., 10341., 11066., 11791., 12516., 12540., 13320.,
      14100., 14880., 11533., 12298., 13063., 13828., 10782., 11532., 12282.,
      13032., 10959., 11726., 12493., 13260., 13030., 13852., 14674., 15496.,
      12791., 13598., 14405., 15212., 11784., 12576., 13368., 14160., 11833.,
      12642., 13451., 14260., 12720., 13552., 14384., 15216., 12321., 13106.,
      13891., 14676., 11282., 12020., 12758., 13496., 10531., 11254., 11977.,
      12700., 10774., 11516., 12258., 13000., 11495., 12286., 13077., 13868.,
      11672., 12480., 13288., 14096., 11977., 12802., 13627., 14452., 11264.,
      12048., 12832., 13616., 11985., 12818., 13651., 14484., 12034., 12884.,
      13734., 14584., 12211., 13078., 13945., 14812., 12010., 12836., 13662.,
      14488., 12731., 13606., 14481., 15356., 12652., 13544., 14436., 15328.,
      12701., 13610., 14519., 15428., 10036., 10744., 11452., 12160., 10341.,
      11066., 11791., 12516., 10774., 11516., 12258., 13000., 11495., 12286.,
      13077., 13868., 12250., 13060., 13870., 14680., 12779., 13574., 14369.,
      15164., 12540., 13320., 14100., 14880., 11533., 12298., 13063., 13828.,
      12228., 13080., 13932., 14784., 12501., 13338., 14175., 15012., 13030.,
      13852., 14674., 15496., 12791., 13598., 14405., 15212., 12462., 13356.,
      14250., 15144., 12479., 13358., 14237., 15116., 12720., 13552., 14384.,
      15216., 12321., 13106., 13891., 14676., 11672., 12480., 13288., 14096.,
      11977., 12802., 13627., 14452., 12250., 13060., 13870., 14680., 12779.,
      13574., 14369., 15164.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7968.,  10240., 12720., 15024., 15304., 15840., 15832., 13632., 10552.,
      7616.,  10740., 13777., 17054., 19059., 19437., 19975., 19201., 16802.,
      14403., 12268., 10464., 14828., 18720., 22284., 23008., 22740., 24360.,
      23000., 18304., 13872., 16164., 20865., 24374., 26443., 25361., 24311.,
      24381., 21250., 16927., 12876., 15828., 18853., 23966., 28487., 28045.,
      26483., 27193., 24906., 21347., 18108., 11780., 15081., 19782., 24835.,
      24873., 24559., 25493., 22098., 19271., 16684., 16564., 19981., 23982.,
      28191., 28005., 26443., 25361., 21530., 18187., 15132., 11248., 13552.,
      17608., 20616., 21804., 22384., 21300., 16608., 14100., 11936., 9972.,
      11785., 14606., 17307., 17861., 18671., 17689., 13778., 11083., 8652.,
      10048., 11656., 13408., 13800., 13600., 13656., 13968., 11472., 9216.,
      7136.,  8224.,  11968., 13872., 15952., 16200., 15328., 16216., 15360.,
      13112., 11008., 10900., 14185., 16270., 18683., 18421., 18063., 18697.,
      17106., 14235., 11532., 13728., 16348., 21120., 26236., 26320., 25156.,
      26136., 24248., 20976., 17904., 11780., 15081., 19782., 24835., 24873.,
      24559., 25493., 22098., 19271., 16684., 16564., 19981., 23982., 28191.,
      28005., 26443., 25361., 21530., 18187., 15132., 13348., 16497., 21462.,
      25435., 27265., 28487., 28045., 23906., 20175., 16780., 15252., 17525.,
      20926., 24311., 24381., 24835., 24873., 20778., 16883., 13244., 12912.,
      15200., 17768., 19096., 19164., 19616., 20804., 18176., 15876., 13856.,
      7764.,  11137., 13950., 16355., 16269., 16439., 18369., 16578., 12995.,
      9708.,  8448.,  9992.,  12192., 12776., 11936., 11352., 11632., 9552.,
      7616.,  5856.,  10592., 12608., 14832., 17232., 18376., 18144., 18168.,
      17280., 14968., 12800., 7668.,  10657., 14974., 19587., 19933., 19799.,
      19921., 17474., 15571., 13868., 15392., 18924., 23008., 27276., 27104.,
      25428., 24136., 20568., 17472., 14640., 13348., 16497., 21462., 25435.,
      27265., 28487., 28045., 23906., 20175., 16780., 15252., 17525., 20926.,
      24311., 24381., 24835., 24873., 20778., 16883., 13244., 16452., 19993.,
      23846., 26483., 27193., 28191., 28005., 24114., 20343., 16876., 11892.,
      16573., 20750., 24559., 25493., 25435., 27265., 25210., 19899., 14940.,
      11184., 14320., 18184., 20488., 20524., 20464., 21396., 19040., 14932.,
      11168., 9204.,  11577., 15918., 19563., 18965., 17119., 17417., 15218.,
      13307., 11724., 6656.,  7624.,  9760.,  12040., 12576., 12632., 13808.,
      12048., 10432., 8992.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26443., 25361., 24311., 24381., 28487., 28045., 26483., 27193.,
      24835., 24873., 24559., 25493., 28191., 28005., 26443., 25361.,
      24835., 24873., 24559., 25493., 28191., 28005., 26443., 25361.,
      25435., 27265., 28487., 28045., 24311., 24381., 24835., 24873.,
      25435., 27265., 28487., 28045., 24311., 24381., 24835., 24873.,
      26483., 27193., 28191., 28005., 24559., 25493., 25435., 27265.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7088.,  7552.,  9012.,  9600.,  11080., 11808., 12588., 13408., 13164.,
      13968., 14252., 15040., 14188., 15024., 13160., 13888., 11764., 12368.,
      9168.,  9632.,  9908.,  10536., 12799., 13602., 15798., 16796., 17961.,
      19110., 18449., 19610., 19321., 20430., 19553., 20674., 16382., 17348.,
      13839., 14630., 11108., 11704., 9672.,  10368., 14070., 14968., 17788.,
      18912., 20474., 21784., 20858., 22208., 21370., 22696., 23546., 24912.,
      21548., 22736., 16966., 17952., 13096., 13856., 13164., 14088., 18489.,
      19618., 22458., 23820., 24447., 26006., 23303., 24866., 22287., 23790.,
      23447., 24954., 21810., 23076., 19001., 20062., 13596., 14424., 14956.,
      15976., 19209., 20458., 25338., 26844., 28367., 30094., 26455., 28186.,
      24415., 26086., 24807., 26482., 22578., 23988., 20297., 21478., 16284.,
      17208., 11628., 12488., 14681., 15730., 19002., 20268., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 22834., 24260., 20953.,
      22190., 17948., 18968., 13420., 14376., 16937., 18106., 20858., 22268.,
      25839., 27454., 26487., 28106., 24447., 26006., 23303., 24866., 19506.,
      20820., 17641., 18742., 15516., 16376., 11784., 12608., 14334., 15360.,
      18476., 19728., 22578., 24016., 24658., 26136., 23538., 24992., 21138.,
      22568., 16124., 17312., 13774., 14760., 11912., 12672., 9460.,  10120.,
      10823., 11634., 13062., 14044., 16353., 17462., 17449., 18570., 19057.,
      20190., 19129., 20274., 13742., 14692., 10999., 11798., 9060.,  9688.,
      9008.,  9600.,  10212., 10928., 11464., 12320., 12700., 13648., 12828.,
      13760., 13468., 14384., 14620., 15520., 11016., 11744., 8100.,  8704.,
      5808.,  6272.,  6576.,  7040.,  10420., 11008., 12360., 13088., 14380.,
      15264., 14828., 15760., 15148., 16064., 16876., 17840., 15464., 16320.,
      13172., 13904., 11216., 11808., 9140.,  9832.,  13599., 14418., 16822.,
      17788., 18249., 19382., 17457., 18602., 16537., 17630., 17537., 18642.,
      17022., 17956., 15023., 15830., 12132., 12792., 10952., 11776., 14454.,
      15448., 19964., 21152., 24186., 25592., 23290., 24736., 22010., 23432.,
      22906., 24368., 21420., 22672., 19654., 20736., 15912., 16800., 11628.,
      12488., 14681., 15730., 19002., 20268., 25375., 26886., 26407., 27986.,
      24751., 26334., 25527., 27178., 22834., 24260., 20953., 22190., 17948.,
      18968., 13420., 14376., 16937., 18106., 20858., 22268., 25839., 27454.,
      26487., 28106., 24447., 26006., 23303., 24866., 19506., 20820., 17641.,
      18742., 15516., 16376., 13676., 14600., 16889., 18050., 21690., 23116.,
      26431., 28086., 28999., 30722., 28367., 30094., 26455., 28186., 21810.,
      23268., 18169., 19390., 15132., 16088., 13932., 14824., 15689., 16778.,
      18426., 19740., 22287., 23790., 23447., 24954., 25375., 26886., 26407.,
      27986., 21554., 22900., 18569., 19718., 14748., 15672., 13576., 14400.,
      15102., 16096., 16812., 18000., 18610., 19952., 18514., 19832., 19186.,
      20480., 21266., 22600., 17788., 18912., 15310., 16264., 12680., 13440.,
      8692.,  9288.,  12135., 12898., 14854., 15804., 16513., 17606., 16329.,
      17434., 16657., 17774., 18393., 19586., 16174., 17220., 12695., 13574.,
      10084., 10776., 5936.,  6400.,  8548.,  9136.,  11720., 12448., 12828.,
      13648., 11676., 12480., 11036., 11824., 12060., 12896., 10248., 10976.,
      8996.,  9600.,  6320.,  6784.,  8112.,  8704.,  11572., 12288., 15176.,
      16032., 16812., 17824., 17004., 18064., 16556., 17600., 16620., 17648.,
      16232., 17088., 15348., 16080., 12240., 12832., 7860.,  8488.,  10687.,
      11458., 14774., 15708., 19049., 20166., 19409., 20602., 18873., 20078.,
      18849., 20066., 17662., 18692., 17103., 17990., 15204., 15928., 11208.,
      12032., 14966., 15992., 19068., 20320., 24186., 25624., 24826., 26304.,
      22522., 23976., 20986., 22416., 17708., 18896., 16326., 17312., 14632.,
      15392., 13676., 14600., 16889., 18050., 21690., 23116., 26431., 28086.,
      28999., 30722., 28367., 30094., 26455., 28186., 21810., 23268., 18169.,
      19390., 15132., 16088., 13932., 14824., 15689., 16778., 18426., 19740.,
      22287., 23790., 23447., 24954., 25375., 26886., 26407., 27986., 21554.,
      22900., 18569., 19718., 14748., 15672., 16748., 17736., 19225., 20434.,
      21818., 23276., 24415., 26086., 24807., 26482., 25839., 27454., 26487.,
      28106., 21810., 23172., 18073., 19214., 14364., 15256., 12396., 13224.,
      17385., 18458., 21626., 22972., 24751., 26334., 25527., 27178., 26431.,
      28086., 28999., 30722., 25650., 27156., 19881., 21142., 15004., 15992.,
      8712.,  9408.,  12926., 13824., 17708., 18832., 20402., 21712., 20178.,
      21528., 19826., 21152., 21394., 22760., 19964., 21152., 17486., 18472.,
      12424., 13184., 8948.,  9608.,  11399., 12242., 15622., 16668., 18721.,
      19926., 17513., 18730., 15921., 17086., 16505., 17682., 14510., 15524.,
      13367., 14198., 11108., 11736., 6448.,  6912.,  7396.,  7984.,  9416.,
      10144., 13340., 14224., 14876., 15808., 13468., 14384., 14236., 15200.,
      12040., 12896., 10404., 11136., 9392.,  9984.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24447., 26006., 23303., 24866., 22287., 23790., 23447., 24954., 28367.,
      30094., 26455., 28186., 24415., 26086., 24807., 26482., 25375., 26886.,
      26407., 27986., 24751., 26334., 25527., 27178., 25839., 27454., 26487.,
      28106., 24447., 26006., 23303., 24866., 25375., 26886., 26407., 27986.,
      24751., 26334., 25527., 27178., 25839., 27454., 26487., 28106., 24447.,
      26006., 23303., 24866., 26431., 28086., 28999., 30722., 28367., 30094.,
      26455., 28186., 22287., 23790., 23447., 24954., 25375., 26886., 26407.,
      27986., 26431., 28086., 28999., 30722., 28367., 30094., 26455., 28186.,
      22287., 23790., 23447., 24954., 25375., 26886., 26407., 27986., 24415.,
      26086., 24807., 26482., 25839., 27454., 26487., 28106., 24751., 26334.,
      25527., 27178., 26431., 28086., 28999., 30722.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6992.,  7456.,  7920.,  8384.,  8028.,  8616.,  9204.,  9792.,  10712.,
      11440., 12168., 12896., 12548., 13368., 14188., 15008., 11796., 12600.,
      13404., 14208., 12068., 12856., 13644., 14432., 12020., 12856., 13692.,
      14528., 10200., 10928., 11656., 12384., 8780.,  9384.,  9988.,  10592.,
      6992.,  7456.,  7920.,  8384.,  10452., 11080., 11708., 12336., 12219.,
      13022., 13825., 14628., 14694., 15692., 16690., 17688., 16917., 18066.,
      19215., 20364., 17625., 18786., 19947., 21108., 17117., 18226., 19335.,
      20444., 17313., 18434., 19555., 20676., 14294., 15260., 16226., 17192.,
      11655., 12446., 13237., 14028., 9908.,  10504., 11100., 11696., 10360.,
      11056., 11752., 12448., 13834., 14732., 15630., 16528., 16436., 17560.,
      18684., 19808., 19574., 20884., 22194., 23504., 19662., 21012., 22362.,
      23712., 20070., 21396., 22722., 24048., 21694., 23060., 24426., 25792.,
      19220., 20408., 21596., 22784., 14930., 15916., 16902., 17888., 11320.,
      12080., 12840., 13600., 12732., 13656., 14580., 15504., 16649., 17778.,
      18907., 20036., 20386., 21748., 23110., 24472., 22759., 24318., 25877.,
      27436., 23539., 25102., 26665., 28228., 22591., 24094., 25597., 27100.,
      21835., 23342., 24849., 26356., 19602., 20868., 22134., 23400., 16397.,
      17458., 18519., 19580., 11484., 12312., 13140., 13968., 15196., 16216.,
      17236., 18256., 17969., 19218., 20467., 21716., 22930., 24436., 25942.,
      27448., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      24631., 26302., 27973., 29644., 24387., 26062., 27737., 29412., 20738.,
      22148., 23558., 24968., 18357., 19538., 20719., 21900., 13948., 14872.,
      15796., 16720., 13820., 14680., 15540., 16400., 15257., 16306., 17355.,
      18404., 17666., 18932., 20198., 21464., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 20978., 22404., 23830., 25256., 19101., 20338.,
      21575., 22812., 16412., 17432., 18452., 19472., 14236., 15192., 16148.,
      17104., 17601., 18770., 19939., 21108., 20210., 21620., 23030., 24440.,
      23439., 25054., 26669., 28284., 23707., 25326., 26945., 28564., 22759.,
      24318., 25877., 27436., 23539., 25102., 26665., 28228., 20322., 21636.,
      22950., 24264., 16197., 17298., 18399., 19500., 12988., 13848., 14708.,
      15568., 12280., 13104., 13928., 14752., 15738., 16764., 17790., 18816.,
      18292., 19544., 20796., 22048., 21318., 22756., 24194., 25632., 22878.,
      24356., 25834., 27312., 22198., 23652., 25106., 26560., 21006., 22436.,
      23866., 25296., 17652., 18840., 20028., 21216., 15010., 15996., 16982.,
      17968., 10552., 11312., 12072., 12832., 9908.,  10568., 11228., 11888.,
      12163., 12974., 13785., 14596., 15030., 16012., 16994., 17976., 15981.,
      17090., 18199., 19308., 16113., 17234., 18355., 19476., 17269., 18402.,
      19535., 20668., 17401., 18546., 19691., 20836., 13510., 14460., 15410.,
      16360., 11055., 11854., 12653., 13452., 9620.,  10248., 10876., 11504.,
      8912.,  9504.,  10096., 10688., 11100., 11816., 12532., 13248., 13144.,
      14000., 14856., 15712., 14084., 15032., 15980., 16928., 12820., 13752.,
      14684., 15616., 12580., 13496., 14412., 15328., 13364., 14264., 15164.,
      16064., 11224., 11952., 12680., 13408., 9420.,  10024., 10628., 11232.,
      6992.,  7456.,  7920.,  8384.,  6992.,  7456.,  7920.,  8384.,  9820.,
      10408., 10996., 11584., 10712., 11440., 12168., 12896., 12484., 13368.,
      14252., 15136., 13460., 14392., 15324., 16256., 14244., 15160., 16076.,
      16992., 15732., 16696., 17660., 18624., 13144., 14000., 14856., 15712.,
      10444., 11176., 11908., 12640., 8912.,  9504.,  10096., 10688., 9364.,
      10056., 10748., 11440., 12267., 13086., 13905., 14724., 15238., 16204.,
      17170., 18136., 16485., 17618., 18751., 19884., 16681., 17826., 18971.,
      20116., 16685., 17778., 18871., 19964., 16369., 17474., 18579., 19684.,
      15094., 16028., 16962., 17896., 11959., 12766., 13573., 14380., 8820.,
      9480.,  10140., 10800., 12280., 13104., 13928., 14752., 13994., 14988.,
      15982., 16976., 18164., 19352., 20540., 21728., 22294., 23700., 25106.,
      26512., 21870., 23316., 24762., 26208., 20742., 22164., 23586., 25008.,
      21854., 23316., 24778., 26240., 19412., 20664., 21916., 23168., 17650.,
      18732., 19814., 20896., 13240., 14128., 15016., 15904., 13820., 14680.,
      15540., 16400., 15257., 16306., 17355., 18404., 17666., 18932., 20198.,
      21464., 22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756., 20978.,
      22404., 23830., 25256., 19101., 20338., 21575., 22812., 16412., 17432.,
      18452., 19472., 14236., 15192., 16148., 17104., 17601., 18770., 19939.,
      21108., 20210., 21620., 23030., 24440., 23439., 25054., 26669., 28284.,
      23707., 25326., 26945., 28564., 22759., 24318., 25877., 27436., 23539.,
      25102., 26665., 28228., 20322., 21636., 22950., 24264., 16197., 17298.,
      18399., 19500., 12988., 13848., 14708., 15568., 13756., 14680., 15604.,
      16528., 17513., 18674., 19835., 20996., 20834., 22260., 23686., 25112.,
      24583., 26238., 27893., 29548., 26579., 28302., 30025., 31748., 26335.,
      28062., 29789., 31516., 25579., 27310., 29041., 30772., 22482., 23940.,
      25398., 26856., 18669., 19890., 21111., 22332., 13404., 14360., 15316.,
      16272., 13276., 14168., 15060., 15952., 15185., 16274., 17363., 18452.,
      19538., 20852., 22166., 23480., 22591., 24094., 25597., 27100., 21835.,
      23342., 24849., 26356., 22615., 24126., 25637., 27148., 23587., 25166.,
      26745., 28324., 19778., 21124., 22470., 23816., 16981., 18130., 19279.,
      20428., 13948., 14872., 15796., 16720., 13304., 14128., 14952., 15776.,
      15258., 16252., 17246., 18240., 17076., 18264., 19452., 20640., 19622.,
      20964., 22306., 23648., 18942., 20260., 21578., 22896., 17750., 19044.,
      20338., 21632., 19310., 20644., 21978., 23312., 16436., 17560., 18684.,
      19808., 14530., 15484., 16438., 17392., 11576., 12336., 13096., 13856.,
      8948.,  9544.,  10140., 10736., 12275., 13038., 13801., 14564., 14550.,
      15500., 16450., 17400., 16317., 17410., 18503., 19596., 15937., 17042.,
      18147., 19252., 16581., 17698., 18815., 19932., 17929., 19122., 20315.,
      21508., 15718., 16764., 17810., 18856., 12831., 13710., 14589., 15468.,
      10580., 11272., 11964., 12656., 5968.,  6432.,  6896.,  7360.,  8412.,
      9000.,  9588.,  10176., 11224., 11952., 12680., 13408., 12420., 13240.,
      14060., 14880., 12692., 13496., 14300., 15104., 11940., 12728., 13516.,
      14304., 12404., 13240., 14076., 14912., 11224., 11952., 12680., 13408.,
      9676.,  10280., 10884., 11488., 6992.,  7456.,  7920.,  8384.,  8912.,
      9504.,  10096., 10688., 10972., 11688., 12404., 13120., 13656., 14512.,
      15368., 16224., 15684., 16696., 17708., 18720., 16148., 17208., 18268.,
      19328., 15396., 16440., 17484., 18528., 15668., 16696., 17724., 18752.,
      13144., 14000., 14856., 15712., 11724., 12456., 13188., 13920., 8912.,
      9504.,  10096., 10688., 9428.,  10056., 10684., 11312., 11099., 11870.,
      12641., 13412., 13734., 14668., 15602., 16536., 17077., 18194., 19311.,
      20428., 17465., 18658., 19851., 21044., 18173., 19378., 20583., 21788.,
      17857., 19074., 20291., 21508., 15766., 16796., 17826., 18856., 13991.,
      14878., 15765., 16652., 11828., 12552., 13276., 14000., 12280., 13104.,
      13928., 14752., 14474., 15500., 16526., 17552., 17844., 19096., 20348.,
      21600., 21750., 23188., 24626., 26064., 22350., 23828., 25306., 26784.,
      21222., 22676., 24130., 25584., 21630., 23060., 24490., 25920., 18708.,
      19896., 21084., 22272., 14674., 15660., 16646., 17632., 11320., 12080.,
      12840., 13600., 13756., 14680., 15604., 16528., 17513., 18674., 19835.,
      20996., 20834., 22260., 23686., 25112., 24583., 26238., 27893., 29548.,
      26579., 28302., 30025., 31748., 26335., 28062., 29789., 31516., 25579.,
      27310., 29041., 30772., 22482., 23940., 25398., 26856., 18669., 19890.,
      21111., 22332., 13404., 14360., 15316., 16272., 13276., 14168., 15060.,
      15952., 15185., 16274., 17363., 18452., 19538., 20852., 22166., 23480.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356., 22615.,
      24126., 25637., 27148., 23587., 25166., 26745., 28324., 19778., 21124.,
      22470., 23816., 16981., 18130., 19279., 20428., 13948., 14872., 15796.,
      16720., 15740., 16728., 17716., 18704., 18041., 19250., 20459., 21668.,
      21058., 22516., 23974., 25432., 24631., 26302., 27973., 29644., 24387.,
      26062., 27737., 29412., 23439., 25054., 26669., 28284., 23707., 25326.,
      26945., 28564., 20018., 21380., 22742., 24104., 17533., 18674., 19815.,
      20956., 14492., 15384., 16276., 17168., 12316., 13144., 13972., 14800.,
      16545., 17618., 18691., 19764., 19762., 21108., 22454., 23800., 23343.,
      24926., 26509., 28092., 23803., 25454., 27105., 28756., 24583., 26238.,
      27893., 29548., 26579., 28302., 30025., 31748., 23202., 24708., 26214.,
      27720., 18469., 19730., 20991., 22252., 14908., 15896., 16884., 17872.,
      9336.,  10032., 10728., 11424., 13050., 13948., 14846., 15744., 16884.,
      18008., 19132., 20256., 19142., 20452., 21762., 23072., 20190., 21540.,
      22890., 24240., 18998., 20324., 21650., 22976., 19534., 20900., 22266.,
      23632., 18164., 19352., 20540., 21728., 15266., 16252., 17238., 18224.,
      10552., 11312., 12072., 12832., 9908.,  10568., 11228., 11888., 12259.,
      13102., 13945., 14788., 15990., 17036., 18082., 19128., 18573., 19778.,
      20983., 22188., 18193., 19410., 20627., 21844., 17109., 18274., 19439.,
      20604., 16217., 17394., 18571., 19748., 13958., 14972., 15986., 17000.,
      12687., 13518., 14349., 15180., 9620.,  10248., 10876., 11504., 8016.,
      8480.,  8944.,  9408.,  8668.,  9256.,  9844.,  10432., 10200., 10928.,
      11656., 12384., 13380., 14264., 15148., 16032., 14868., 15800., 16732.,
      17664., 14628., 15544., 16460., 17376., 14580., 15544., 16508., 17472.,
      12120., 12976., 13832., 14688., 10828., 11560., 12292., 13024., 9936.,
      10528., 11120., 11712.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22759., 24318., 25877., 27436., 23539., 25102., 26665., 28228., 22591.,
      24094., 25597., 27100., 21835., 23342., 24849., 26356., 26335., 28062.,
      29789., 31516., 25579., 27310., 29041., 30772., 24631., 26302., 27973.,
      29644., 24387., 26062., 27737., 29412., 22615., 24126., 25637., 27148.,
      23587., 25166., 26745., 28324., 23343., 24926., 26509., 28092., 23803.,
      25454., 27105., 28756., 23439., 25054., 26669., 28284., 23707., 25326.,
      26945., 28564., 22759., 24318., 25877., 27436., 23539., 25102., 26665.,
      28228., 22615., 24126., 25637., 27148., 23587., 25166., 26745., 28324.,
      23343., 24926., 26509., 28092., 23803., 25454., 27105., 28756., 23439.,
      25054., 26669., 28284., 23707., 25326., 26945., 28564., 22759., 24318.,
      25877., 27436., 23539., 25102., 26665., 28228., 24583., 26238., 27893.,
      29548., 26579., 28302., 30025., 31748., 26335., 28062., 29789., 31516.,
      25579., 27310., 29041., 30772., 22591., 24094., 25597., 27100., 21835.,
      23342., 24849., 26356., 22615., 24126., 25637., 27148., 23587., 25166.,
      26745., 28324., 24583., 26238., 27893., 29548., 26579., 28302., 30025.,
      31748., 26335., 28062., 29789., 31516., 25579., 27310., 29041., 30772.,
      22591., 24094., 25597., 27100., 21835., 23342., 24849., 26356., 22615.,
      24126., 25637., 27148., 23587., 25166., 26745., 28324., 24631., 26302.,
      27973., 29644., 24387., 26062., 27737., 29412., 23439., 25054., 26669.,
      28284., 23707., 25326., 26945., 28564., 23343., 24926., 26509., 28092.,
      23803., 25454., 27105., 28756., 24583., 26238., 27893., 29548., 26579.,
      28302., 30025., 31748.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,  6024.,
      4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322., 8532.,
      7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364., 13332.,
      11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406., 14102.,
      13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102., 13790.,
      13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,  12636.,
      14102., 13790., 13510., 15406., 12652., 10378., 8296.,  7312.,  8220.,
      9992.,  11924., 13252., 11284., 11844., 10632., 9804.,  6800.,  5816.,
      7422.,  9060.,  9674.,  9986.,  9978.,  10706., 8532.,  7286.,  6200.,
      4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,  6280.,
      4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,  7056.,
      6024.,  4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906., 10322.,
      8532.,  7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180., 11364.,
      13332., 11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510., 15406.,
      14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,  12636., 14102.,
      13790., 13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,  11324.,
      13510., 15406., 14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,
      12636., 14102., 13790., 13510., 15406., 12652., 10378., 8296.,  7312.,
      8220.,  9992.,  11924., 13252., 11284., 11844., 10632., 9804.,  6800.,
      5816.,  7422.,  9060.,  9674.,  9986.,  9978.,  10706., 8532.,  7286.,
      6200.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,  7056.,
      6280.,  4704.,  4704.,  5480.,  7056.,  8088.,  8376.,  7832.,  8632.,
      7056.,  6024.,  4704.,  5816.,  7262.,  8388.,  9418.,  10786., 10906.,
      10322., 8532.,  7670.,  6200.,  6800.,  7756.,  10632., 12516., 12180.,
      11364., 13332., 11176., 9116.,  6800.,  8424.,  9746.,  11324., 13510.,
      15406., 14102., 13790., 12108., 11194., 8296.,  7912.,  9698.,  12636.,
      14102., 13790., 13510., 15406., 12652., 10378., 8296.,  8424.,  9746.,
      11324., 13510., 15406., 14102., 13790., 12108., 11194., 8296.,  7912.,
      9698.,  12636., 14102., 13790., 13510., 15406., 12652., 10378., 8296.,
      7312.,  8220.,  9992.,  11924., 13252., 11284., 11844., 10632., 9804.,
      6800.,  5816.,  7422.,  9060.,  9674.,  9986.,  9978.,  10706., 8532.,
      7286.,  6200.,  4704.,  5736.,  7056.,  7832.,  8632.,  8088.,  8376.,
      7056.,  6280.,  4704.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.,
      13510., 15406., 14102., 13790., 14102., 13790., 13510., 15406.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,  8816.,  7896.,
      8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,  5640.,  6352.,
      4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,  9000.,  9190.,
      10324., 10278., 11524., 10086., 11252., 9382.,  10596., 8396.,  9384.,
      7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,  8664.,  10152.,
      11376., 11844., 13224., 11844., 13320., 11076., 12456., 12612., 14088.,
      10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,  8720.,  9766.,
      10884., 11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,
      8720.,  9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036.,
      12882., 14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,
      8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  7768.,  8720.,  9126.,  10276., 11908., 13368.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220., 12292.,
      13752., 9702.,  10964., 8024.,  8976.,  6768.,  7584.,  8460.,  9432.,
      10152., 11376., 11076., 12456., 12612., 14088., 11844., 13224., 11844.,
      13320., 10152., 11376., 9228.,  10296., 6768.,  7584.,  5512.,  6192.,
      6562.,  7388.,  8524.,  9576.,  10086., 11252., 9382.,  10596., 9190.,
      10324., 10278., 11524., 8908.,  9960.,  6882.,  7788.,  5768.,  6448.,
      4512.,  5056.,  5640.,  6288.,  6768.,  7584.,  7384.,  8304.,  8408.,
      9392.,  7896.,  8816.,  7896.,  8880.,  6768.,  7584.,  6152.,  6864.,
      4512.,  5056.,  4512.,  5056.,  5128.,  5776.,  6768.,  7584.,  7896.,
      8816.,  7896.,  8880.,  7384.,  8304.,  8408.,  9392.,  6768.,  7584.,
      5640.,  6352.,  4512.,  5056.,  5512.,  6192.,  6946.,  7740.,  8012.,
      9000.,  9190.,  10324., 10278., 11524., 10086., 11252., 9382.,  10596.,
      8396.,  9384.,  7266.,  8140.,  5768.,  6448.,  6768.,  7584.,  7692.,
      8664.,  10152., 11376., 11844., 13224., 11844., 13320., 11076., 12456.,
      12612., 14088., 10152., 11376., 8460.,  9528.,  6768.,  7584.,  7768.,
      8720.,  9766.,  10884., 11396., 12792., 12882., 14476., 14482., 16220.,
      14034., 15660., 13330., 15036., 11780., 13176., 10342., 11572., 8024.,
      8976.,  7768.,  8720.,  9126.,  10276., 11908., 13368., 14034., 15660.,
      13330., 15036., 12882., 14476., 14482., 16220., 12292., 13752., 9702.,
      10964., 8024.,  8976.,  7768.,  8720.,  9766.,  10884., 11396., 12792.,
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036., 11780.,
      13176., 10342., 11572., 8024.,  8976.,  7768.,  8720.,  9126.,  10276.,
      11908., 13368., 14034., 15660., 13330., 15036., 12882., 14476., 14482.,
      16220., 12292., 13752., 9702.,  10964., 8024.,  8976.,  6768.,  7584.,
      8460.,  9432.,  10152., 11376., 11076., 12456., 12612., 14088., 11844.,
      13224., 11844., 13320., 10152., 11376., 9228.,  10296., 6768.,  7584.,
      5512.,  6192.,  6562.,  7388.,  8524.,  9576.,  10086., 11252., 9382.,
      10596., 9190.,  10324., 10278., 11524., 8908.,  9960.,  6882.,  7788.,
      5768.,  6448.,  4512.,  5056.,  5640.,  6288.,  6768.,  7584.,  7384.,
      8304.,  8408.,  9392.,  7896.,  8816.,  7896.,  8880.,  6768.,  7584.,
      6152.,  6864.,  4512.,  5056.,  4512.,  5056.,  5128.,  5776.,  6768.,
      7584.,  7896.,  8816.,  7896.,  8880.,  7384.,  8304.,  8408.,  9392.,
      6768.,  7584.,  5640.,  6352.,  4512.,  5056.,  5512.,  6192.,  6946.,
      7740.,  8012.,  9000.,  9190.,  10324., 10278., 11524., 10086., 11252.,
      9382.,  10596., 8396.,  9384.,  7266.,  8140.,  5768.,  6448.,  6768.,
      7584.,  7692.,  8664.,  10152., 11376., 11844., 13224., 11844., 13320.,
      11076., 12456., 12612., 14088., 10152., 11376., 8460.,  9528.,  6768.,
      7584.,  7768.,  8720.,  9766.,  10884., 11396., 12792., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 11780., 13176., 10342.,
      11572., 8024.,  8976.,  7768.,  8720.,  9126.,  10276., 11908., 13368.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220., 12292.,
      13752., 9702.,  10964., 8024.,  8976.,  7768.,  8720.,  9766.,  10884.,
      11396., 12792., 12882., 14476., 14482., 16220., 14034., 15660., 13330.,
      15036., 11780., 13176., 10342., 11572., 8024.,  8976.,  7768.,  8720.,
      9126.,  10276., 11908., 13368., 14034., 15660., 13330., 15036., 12882.,
      14476., 14482., 16220., 12292., 13752., 9702.,  10964., 8024.,  8976.,
      6768.,  7584.,  8460.,  9432.,  10152., 11376., 11076., 12456., 12612.,
      14088., 11844., 13224., 11844., 13320., 10152., 11376., 9228.,  10296.,
      6768.,  7584.,  5512.,  6192.,  6562.,  7388.,  8524.,  9576.,  10086.,
      11252., 9382.,  10596., 9190.,  10324., 10278., 11524., 8908.,  9960.,
      6882.,  7788.,  5768.,  6448.,  4512.,  5056.,  5640.,  6288.,  6768.,
      7584.,  7384.,  8304.,  8408.,  9392.,  7896.,  8816.,  7896.,  8880.,
      6768.,  7584.,  6152.,  6864.,  4512.,  5056.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036., 14034.,
      15660., 13330., 15036., 12882., 14476., 14482., 16220., 12882., 14476.,
      14482., 16220., 14034., 15660., 13330., 15036., 14034., 15660., 13330.,
      15036., 12882., 14476., 14482., 16220., 12882., 14476., 14482., 16220.,
      14034., 15660., 13330., 15036., 14034., 15660., 13330., 15036., 12882.,
      14476., 14482., 16220., 12882., 14476., 14482., 16220., 14034., 15660.,
      13330., 15036., 14034., 15660., 13330., 15036., 12882., 14476., 14482.,
      16220., 12882., 14476., 14482., 16220., 14034., 15660., 13330., 15036.,
      14034., 15660., 13330., 15036., 12882., 14476., 14482., 16220., 12882.,
      14476., 14482., 16220., 14034., 15660., 13330., 15036., 14034., 15660.,
      13330., 15036., 12882., 14476., 14482., 16220.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,
      6852.,  7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194.,
      12360., 9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480.,
      6618.,  7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,
      7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512.,
      11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,
      7008.,  7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,
      10762., 11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,
      10540., 11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,
      9128.,  10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980.,
      15440., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060.,
      12520., 13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,
      10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980., 15440.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138.,
      13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060., 12520.,
      13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,  9128.,
      10080., 6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320.,
      9288.,  10512., 11736., 12960., 10500., 11880., 13260., 14640., 11172.,
      12648., 14124., 15600., 10500., 11880., 13260., 14640., 11172., 12648.,
      14124., 15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,  10212.,
      11280., 6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,
      6282.,  7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120., 8862.,
      10028., 11194., 12360., 9198.,  10412., 11626., 12840., 8638.,  9772.,
      10906., 12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,  10068.,
      11120., 6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,  7200.,
      4128.,  4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,
      7008.,  7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,
      9416.,  10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,
      4128.,  4672.,  5216.,  5760.,  4128.,  4672.,  5216.,  5760.,  4936.,
      5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,  8840.,
      9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,  8640.,
      5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.,  5160.,
      5840.,  6520.,  7200.,  6058.,  6852.,  7646.,  8440.,  7516.,  8504.,
      9492.,  10480., 8638.,  9772.,  10906., 12040., 9422.,  10668., 11914.,
      13160., 8862.,  10028., 11194., 12360., 9198.,  10412., 11626., 12840.,
      7516.,  8504.,  9492.,  10480., 6618.,  7492.,  8366.,  9240.,  5160.,
      5840.,  6520.,  7200.,  6192.,  7008.,  7824.,  8640.,  7404.,  8376.,
      9348.,  10320., 9288.,  10512., 11736., 12960., 10500., 11880., 13260.,
      14640., 11172., 12648., 14124., 15600., 10500., 11880., 13260., 14640.,
      11172., 12648., 14124., 15600., 9288.,  10512., 11736., 12960., 8076.,
      9144.,  10212., 11280., 6192.,  7008.,  7824.,  8640.,  7224.,  8176.,
      9128.,  10080., 8526.,  9644.,  10762., 11880., 10612., 12008., 13404.,
      14800., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 10612.,
      12008., 13404., 14800., 9310.,  10540., 11770., 13000., 7224.,  8176.,
      9128.,  10080., 7224.,  8176.,  9128.,  10080., 8750.,  9900.,  11050.,
      12200., 11060., 12520., 13980., 15440., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146.,
      14884., 16622., 18360., 11060., 12520., 13980., 15440., 9534.,  10796.,
      12058., 13320., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,
      10080., 8526.,  9644.,  10762., 11880., 10612., 12008., 13404., 14800.,
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 10612., 12008.,
      13404., 14800., 9310.,  10540., 11770., 13000., 7224.,  8176.,  9128.,
      10080., 7224.,  8176.,  9128.,  10080., 8750.,  9900.,  11050., 12200.,
      11060., 12520., 13980., 15440., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884.,
      16622., 18360., 11060., 12520., 13980., 15440., 9534.,  10796., 12058.,
      13320., 7224.,  8176.,  9128.,  10080., 6192.,  7008.,  7824.,  8640.,
      7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736., 12960., 10500.,
      11880., 13260., 14640., 11172., 12648., 14124., 15600., 10500., 11880.,
      13260., 14640., 11172., 12648., 14124., 15600., 9288.,  10512., 11736.,
      12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,  7824.,  8640.,
      5160.,  5840.,  6520.,  7200.,  6282.,  7108.,  7934.,  8760.,  7964.,
      9016.,  10068., 11120., 8862.,  10028., 11194., 12360., 9198.,  10412.,
      11626., 12840., 8638.,  9772.,  10906., 12040., 9422.,  10668., 11914.,
      13160., 7964.,  9016.,  10068., 11120., 6842.,  7748.,  8654.,  9560.,
      5160.,  5840.,  6520.,  7200.,  4128.,  4672.,  5216.,  5760.,  4936.,
      5584.,  6232.,  6880.,  6192.,  7008.,  7824.,  8640.,  7000.,  7920.,
      8840.,  9760.,  7448.,  8432.,  9416.,  10400., 7000.,  7920.,  8840.,
      9760.,  7448.,  8432.,  9416.,  10400., 6192.,  7008.,  7824.,  8640.,
      5384.,  6096.,  6808.,  7520.,  4128.,  4672.,  5216.,  5760.,  4128.,
      4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,  7008.,
      7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400.,
      6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,  4128.,
      4672.,  5216.,  5760.,  5160.,  5840.,  6520.,  7200.,  6058.,  6852.,
      7646.,  8440.,  7516.,  8504.,  9492.,  10480., 8638.,  9772.,  10906.,
      12040., 9422.,  10668., 11914., 13160., 8862.,  10028., 11194., 12360.,
      9198.,  10412., 11626., 12840., 7516.,  8504.,  9492.,  10480., 6618.,
      7492.,  8366.,  9240.,  5160.,  5840.,  6520.,  7200.,  6192.,  7008.,
      7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,  10512., 11736.,
      12960., 10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600.,
      10500., 11880., 13260., 14640., 11172., 12648., 14124., 15600., 9288.,
      10512., 11736., 12960., 8076.,  9144.,  10212., 11280., 6192.,  7008.,
      7824.,  8640.,  7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762.,
      11880., 10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540.,
      11770., 13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,
      10080., 8750.,  9900.,  11050., 12200., 11060., 12520., 13980., 15440.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138.,
      13732., 15326., 16920., 13146., 14884., 16622., 18360., 11060., 12520.,
      13980., 15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,  9128.,
      10080., 7224.,  8176.,  9128.,  10080., 8526.,  9644.,  10762., 11880.,
      10612., 12008., 13404., 14800., 12138., 13732., 15326., 16920., 13146.,
      14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922., 14628.,
      16334., 18040., 10612., 12008., 13404., 14800., 9310.,  10540., 11770.,
      13000., 7224.,  8176.,  9128.,  10080., 7224.,  8176.,  9128.,  10080.,
      8750.,  9900.,  11050., 12200., 11060., 12520., 13980., 15440., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360., 11060., 12520., 13980.,
      15440., 9534.,  10796., 12058., 13320., 7224.,  8176.,  9128.,  10080.,
      6192.,  7008.,  7824.,  8640.,  7404.,  8376.,  9348.,  10320., 9288.,
      10512., 11736., 12960., 10500., 11880., 13260., 14640., 11172., 12648.,
      14124., 15600., 10500., 11880., 13260., 14640., 11172., 12648., 14124.,
      15600., 9288.,  10512., 11736., 12960., 8076.,  9144.,  10212., 11280.,
      6192.,  7008.,  7824.,  8640.,  5160.,  5840.,  6520.,  7200.,  6282.,
      7108.,  7934.,  8760.,  7964.,  9016.,  10068., 11120., 8862.,  10028.,
      11194., 12360., 9198.,  10412., 11626., 12840., 8638.,  9772.,  10906.,
      12040., 9422.,  10668., 11914., 13160., 7964.,  9016.,  10068., 11120.,
      6842.,  7748.,  8654.,  9560.,  5160.,  5840.,  6520.,  7200.,  4128.,
      4672.,  5216.,  5760.,  4936.,  5584.,  6232.,  6880.,  6192.,  7008.,
      7824.,  8640.,  7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,
      10400., 7000.,  7920.,  8840.,  9760.,  7448.,  8432.,  9416.,  10400.,
      6192.,  7008.,  7824.,  8640.,  5384.,  6096.,  6808.,  7520.,  4128.,
      4672.,  5216.,  5760.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362., 13988.,
      15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12138., 13732., 15326., 16920.,
      13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12362., 13988., 15614., 17240., 12922., 14628.,
      16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12138., 13732., 15326., 16920., 13146., 14884., 16622., 18360.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12362.,
      13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360., 12138., 13732., 15326.,
      16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 12362., 13988., 15614., 17240., 12922.,
      14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146., 14884.,
      16622., 18360., 12138., 13732., 15326., 16920., 13146., 14884., 16622.,
      18360., 12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040.,
      12362., 13988., 15614., 17240., 12922., 14628., 16334., 18040., 12138.,
      13732., 15326., 16920., 13146., 14884., 16622., 18360., 12138., 13732.,
      15326., 16920., 13146., 14884., 16622., 18360., 12362., 13988., 15614.,
      17240., 12922., 14628., 16334., 18040., 12362., 13988., 15614., 17240.,
      12922., 14628., 16334., 18040., 12138., 13732., 15326., 16920., 13146.,
      14884., 16622., 18360.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 16.0;
  this->run_forward_test(exp_out, in_shape, features, padding, max_input_val);
}