/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "sycldnn/pooling/operators.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/pooling/pooling_fixture.h"

#include <array>
#include <vector>

using namespace sycldnn; // NOLINT(google-build-using-namespace)
using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using MaxwithnanWindow11Stride4Forward =
    PoolingFixture<typename Pair::FirstType, typename Pair::SecondType,
                   pooling::MaxWithNan, pooling::Forward>;
TYPED_TEST_SUITE(MaxwithnanWindow11Stride4Forward, GTestTypePairs);
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 97., 101., 105., 105., 157., 161., 165., 165., 217., 221., 225., 225., 217., 221., 225., 225.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {193., 194., 201., 202., 209., 210., 209., 210., 313., 314., 321., 322., 329., 330., 329., 330., 433., 434., 441., 442., 449., 450., 449., 450., 433., 434., 441., 442., 449., 450., 449., 450.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {385., 386., 387., 388., 401., 402., 403., 404., 417., 418., 419., 420., 417., 418., 419., 420., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 385., 386., 387., 388.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 15, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {104., 108., 112., 112., 168., 172., 176., 176., 232., 236., 240., 240., 232., 236., 240., 240.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {207., 208., 215., 216., 223., 224., 223., 224., 335., 336., 343., 344., 351., 352., 351., 352., 463., 464., 471., 472., 479., 480., 479., 480., 463., 464., 471., 472., 479., 480., 479., 480.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 1, 15, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {115., 119., 123., 126., 126., 187., 191., 195., 198., 198., 259., 263., 267., 270., 270., 259., 263., 267., 270., 270.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {229., 230., 237., 238., 245., 246., 251., 252., 251., 252., 373., 374., 381., 382., 389., 390., 395., 396., 395., 396., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x15x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {457., 458., 459., 460., 473., 474., 475., 476., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x15x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492.};
  const std::array<int, 4> in_shape = {{ 1, 15, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {112., 116., 120., 120., 172., 176., 180., 180., 232., 236., 240., 240., 232., 236., 240., 240.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {223., 224., 231., 232., 239., 240., 239., 240., 343., 344., 351., 352., 359., 360., 359., 360., 463., 464., 471., 472., 479., 480., 479., 480., 463., 464., 471., 472., 479., 480., 479., 480.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {445., 446., 447., 448., 461., 462., 463., 464., 477., 478., 479., 480., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 16, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 124., 128., 128., 184., 188., 192., 192., 248., 252., 256., 256., 248., 252., 256., 256.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {239., 240., 247., 248., 255., 256., 255., 256., 367., 368., 375., 376., 383., 384., 383., 384., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 1, 16, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 137., 141., 144., 144., 205., 209., 213., 216., 216., 277., 281., 285., 288., 288., 277., 281., 285., 288., 288.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {265., 266., 273., 274., 281., 282., 287., 288., 287., 288., 409., 410., 417., 418., 425., 426., 431., 432., 431., 432., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x16x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x16x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492.};
  const std::array<int, 4> in_shape = {{ 1, 16, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 97., 101., 105., 105., 157., 161., 165., 165., 217., 221., 225., 225., 262., 266., 270., 270., 262., 266., 270., 270.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {193., 194., 201., 202., 209., 210., 209., 210., 313., 314., 321., 322., 329., 330., 329., 330., 433., 434., 441., 442., 449., 450., 449., 450., 511., 512., 511., 512., 509., 510., 509., 510., 511., 512., 511., 512., 509., 510., 509., 510.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {385., 386., 387., 388., 401., 402., 403., 404., 417., 418., 419., 420., 417., 418., 419., 420., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 18, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {104., 108., 112., 112., 168., 172., 176., 176., 232., 236., 240., 240., 280., 284., 288., 288., 280., 284., 288., 288.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {207., 208., 215., 216., 223., 224., 223., 224., 335., 336., 343., 344., 351., 352., 351., 352., 463., 464., 471., 472., 479., 480., 479., 480., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 1, 18, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {115., 119., 123., 126., 126., 187., 191., 195., 198., 198., 259., 263., 267., 270., 270., 313., 317., 321., 324., 324., 313., 317., 321., 324., 324.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {229., 230., 237., 238., 245., 246., 251., 252., 251., 252., 373., 374., 381., 382., 389., 390., 395., 396., 395., 396., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME1x18x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {457., 458., 459., 460., 473., 474., 475., 476., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID1x18x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492.};
  const std::array<int, 4> in_shape = {{ 1, 18, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 97., 101., 105., 105., 157., 161., 165., 165., 217., 221., 225., 225., 217., 221., 225., 225., 322., 326., 330., 330., 382., 386., 390., 390., 442., 446., 450., 450., 442., 446., 450., 450., 512., 512., 510., 510., 512., 512., 510., 510., 512., 512., 163., 163., 155., 159., 163., 163.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225., 386., 390., 446., 450., 512., 510., 512., 163.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {193., 194., 201., 202., 209., 210., 209., 210., 313., 314., 321., 322., 329., 330., 329., 330., 433., 434., 441., 442., 449., 450., 449., 450., 433., 434., 441., 442., 449., 450., 449., 450., 511., 512., 511., 512., 509., 510., 509., 510., 511., 512., 511., 512., 509., 510., 509., 510., 371., 372., 379., 380., 387., 388., 387., 388., 371., 372., 379., 380., 387., 388., 387., 388., 511., 512., 511., 512., 507., 508., 507., 508., 511., 512., 511., 512., 507., 508., 507., 508., 511., 512., 511., 512., 325., 326., 325., 326., 309., 310., 317., 318., 325., 326., 325., 326.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450., 511., 512., 509., 510., 379., 380., 387., 388., 511., 512., 507., 508., 511., 512., 325., 326.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {385., 386., 387., 388., 401., 402., 403., 404., 417., 418., 419., 420., 417., 418., 419., 420., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 385., 386., 387., 388., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 15, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {104., 108., 112., 112., 168., 172., 176., 176., 232., 236., 240., 240., 232., 236., 240., 240., 344., 348., 352., 352., 408., 412., 416., 416., 472., 476., 480., 480., 472., 476., 480., 480., 504., 508., 512., 512., 504., 508., 512., 512., 200., 204., 208., 208., 200., 204., 208., 208.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239., 411., 415., 475., 479., 507., 511., 203., 207.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {207., 208., 215., 216., 223., 224., 223., 224., 335., 336., 343., 344., 351., 352., 351., 352., 463., 464., 471., 472., 479., 480., 479., 480., 463., 464., 471., 472., 479., 480., 479., 480., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 431., 432., 439., 440., 447., 448., 447., 448., 431., 432., 439., 440., 447., 448., 447., 448., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 399., 400., 407., 408., 415., 416., 415., 416., 399., 400., 407., 408., 415., 416., 415., 416.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478., 501., 502., 509., 510., 437., 438., 445., 446., 501., 502., 509., 510., 405., 406., 413., 414.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 3, 15, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {115., 119., 123., 126., 126., 187., 191., 195., 198., 198., 259., 263., 267., 270., 270., 259., 263., 267., 270., 270., 385., 389., 393., 396., 396., 457., 461., 465., 468., 468., 511., 512., 512., 504., 504., 511., 512., 512., 504., 504., 143., 147., 151., 154., 154., 215., 219., 223., 226., 226., 287., 291., 295., 298., 298., 287., 291., 295., 298., 298.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267., 461., 465., 512., 512., 219., 223., 291., 295.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {229., 230., 237., 238., 245., 246., 251., 252., 251., 252., 373., 374., 381., 382., 389., 390., 395., 396., 395., 396., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 257., 258., 265., 266., 273., 274., 279., 280., 279., 280., 401., 402., 409., 410., 417., 418., 423., 424., 423., 424., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 285., 286., 293., 294., 301., 302., 307., 308., 307., 308., 429., 430., 437., 438., 445., 446., 451., 452., 451., 452., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498., 409., 410., 417., 418., 511., 512., 511., 512., 437., 438., 445., 446., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x15x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {457., 458., 459., 460., 473., 474., 475., 476., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 477., 478., 479., 480., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 461., 462., 463., 464.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x15x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 15, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {112., 116., 120., 120., 172., 176., 180., 180., 232., 236., 240., 240., 232., 236., 240., 240., 352., 356., 360., 360., 412., 416., 420., 420., 472., 476., 480., 480., 472., 476., 480., 480., 512., 512., 510., 510., 512., 512., 510., 510., 200., 204., 208., 208., 200., 204., 208., 208.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225., 401., 405., 461., 465., 512., 510., 189., 193.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {223., 224., 231., 232., 239., 240., 239., 240., 343., 344., 351., 352., 359., 360., 359., 360., 463., 464., 471., 472., 479., 480., 479., 480., 463., 464., 471., 472., 479., 480., 479., 480., 511., 512., 511., 512., 509., 510., 509., 510., 511., 512., 511., 512., 327., 328., 327., 328., 431., 432., 439., 440., 447., 448., 447., 448., 431., 432., 439., 440., 447., 448., 447., 448., 511., 512., 511., 512., 507., 508., 507., 508., 511., 512., 511., 512., 507., 508., 507., 508., 399., 400., 407., 408., 415., 416., 415., 416., 399., 400., 407., 408., 415., 416., 415., 416.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450., 511., 512., 509., 510., 409., 410., 417., 418., 511., 512., 507., 508., 377., 378., 385., 386.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {445., 446., 447., 448., 461., 462., 463., 464., 477., 478., 479., 480., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 124., 128., 128., 184., 188., 192., 192., 248., 252., 256., 256., 248., 252., 256., 256., 376., 380., 384., 384., 440., 444., 448., 448., 504., 508., 512., 512., 504., 508., 512., 512., 120., 124., 128., 128., 184., 188., 192., 192., 248., 252., 256., 256., 248., 252., 256., 256.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239., 427., 431., 491., 495., 171., 175., 235., 239.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {239., 240., 247., 248., 255., 256., 255., 256., 367., 368., 375., 376., 383., 384., 383., 384., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 239., 240., 247., 248., 255., 256., 255., 256., 367., 368., 375., 376., 383., 384., 383., 384., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 239., 240., 247., 248., 255., 256., 255., 256., 367., 368., 375., 376., 383., 384., 383., 384., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478., 341., 342., 349., 350., 469., 470., 477., 478., 341., 342., 349., 350., 469., 470., 477., 478.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 3, 16, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 137., 141., 144., 144., 205., 209., 213., 216., 216., 277., 281., 285., 288., 288., 277., 281., 285., 288., 288., 421., 425., 429., 432., 432., 493., 497., 501., 504., 504., 511., 512., 512., 504., 504., 511., 512., 512., 504., 504., 197., 201., 205., 208., 208., 269., 273., 277., 280., 280., 341., 345., 349., 352., 352., 341., 345., 349., 352., 352.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267., 479., 483., 512., 512., 255., 259., 327., 331.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {265., 266., 273., 274., 281., 282., 287., 288., 287., 288., 409., 410., 417., 418., 425., 426., 431., 432., 431., 432., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 329., 330., 337., 338., 345., 346., 351., 352., 351., 352., 473., 474., 481., 482., 489., 490., 495., 496., 495., 496., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 393., 394., 401., 402., 409., 410., 415., 416., 415., 416., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498., 445., 446., 453., 454., 511., 512., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x16x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 477., 478., 479., 480., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 461., 462., 463., 464., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 461., 462., 463., 464.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x16x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 16, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 97., 101., 105., 105., 157., 161., 165., 165., 217., 221., 225., 225., 262., 266., 270., 270., 262., 266., 270., 270., 367., 371., 375., 375., 427., 431., 435., 435., 487., 491., 495., 495., 512., 512., 510., 510., 512., 512., 510., 510., 125., 129., 133., 133., 185., 189., 193., 193., 245., 249., 253., 253., 290., 294., 298., 298., 290., 294., 298., 298.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x15x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {161., 165., 221., 225., 431., 435., 491., 495., 189., 193., 249., 253.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {193., 194., 201., 202., 209., 210., 209., 210., 313., 314., 321., 322., 329., 330., 329., 330., 433., 434., 441., 442., 449., 450., 449., 450., 511., 512., 511., 512., 509., 510., 509., 510., 511., 512., 511., 512., 509., 510., 509., 510., 221., 222., 229., 230., 237., 238., 237., 238., 341., 342., 349., 350., 357., 358., 357., 358., 461., 462., 469., 470., 477., 478., 477., 478., 511., 512., 511., 512., 507., 508., 507., 508., 511., 512., 511., 512., 507., 508., 507., 508., 249., 250., 257., 258., 265., 266., 265., 266., 369., 370., 377., 378., 385., 386., 385., 386., 489., 490., 497., 498., 505., 506., 505., 506., 511., 512., 511., 512., 505., 506., 505., 506., 511., 512., 511., 512., 505., 506., 505., 506.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x15x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {321., 322., 329., 330., 441., 442., 449., 450., 349., 350., 357., 358., 469., 470., 477., 478., 377., 378., 385., 386., 497., 498., 505., 506.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {385., 386., 387., 388., 401., 402., 403., 404., 417., 418., 419., 420., 417., 418., 419., 420., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 505., 506., 507., 508., 441., 442., 443., 444., 457., 458., 459., 460., 473., 474., 475., 476., 473., 474., 475., 476., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 501., 502., 503., 504., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 497., 498., 499., 500.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x15x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 18, 15, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {104., 108., 112., 112., 168., 172., 176., 176., 232., 236., 240., 240., 280., 284., 288., 288., 280., 284., 288., 288., 392., 396., 400., 400., 456., 460., 464., 464., 504., 508., 512., 512., 504., 508., 512., 512., 504., 508., 512., 512., 168., 172., 176., 176., 232., 236., 240., 240., 296., 300., 304., 304., 344., 348., 352., 352., 344., 348., 352., 352.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x16x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {171., 175., 235., 239., 459., 463., 507., 511., 235., 239., 299., 303.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {207., 208., 215., 216., 223., 224., 223., 224., 335., 336., 343., 344., 351., 352., 351., 352., 463., 464., 471., 472., 479., 480., 479., 480., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 271., 272., 279., 280., 287., 288., 287., 288., 399., 400., 407., 408., 415., 416., 415., 416., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 335., 336., 343., 344., 351., 352., 351., 352., 463., 464., 471., 472., 479., 480., 479., 480., 495., 496., 503., 504., 511., 512., 511., 512., 495., 496., 503., 504., 511., 512., 511., 512., 175., 176., 183., 184., 191., 192., 191., 192.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x16x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {341., 342., 349., 350., 469., 470., 477., 478., 405., 406., 413., 414., 501., 502., 509., 510., 469., 470., 477., 478., 501., 502., 509., 510.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {413., 414., 415., 416., 429., 430., 431., 432., 445., 446., 447., 448., 445., 446., 447., 448., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 349., 350., 351., 352., 365., 366., 367., 368., 381., 382., 383., 384., 381., 382., 383., 384.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x16x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508., 489., 490., 491., 492., 505., 506., 507., 508.};
  const std::array<int, 4> in_shape = {{ 3, 18, 16, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {115., 119., 123., 126., 126., 187., 191., 195., 198., 198., 259., 263., 267., 270., 270., 313., 317., 321., 324., 324., 313., 317., 321., 324., 324., 439., 443., 447., 450., 450., 511., 512., 512., 504., 504., 511., 512., 512., 504., 504., 511., 512., 512., 504., 504., 125., 129., 133., 136., 136., 251., 255., 259., 262., 262., 323., 327., 331., 334., 334., 395., 399., 403., 406., 406., 449., 453., 457., 460., 460., 449., 453., 457., 460., 460.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x18x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {191., 195., 263., 267., 512., 512., 512., 512., 327., 331., 399., 403.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {229., 230., 237., 238., 245., 246., 251., 252., 251., 252., 373., 374., 381., 382., 389., 390., 395., 396., 395., 396., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 511., 512., 511., 512., 497., 498., 503., 504., 503., 504., 365., 366., 373., 374., 381., 382., 387., 388., 387., 388., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 509., 510., 511., 512., 511., 512., 495., 496., 495., 496., 249., 250., 257., 258., 265., 266., 271., 272., 271., 272., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 501., 502., 509., 510., 511., 512., 511., 512., 487., 488., 385., 386., 393., 394., 401., 402., 407., 408., 407., 408., 385., 386., 393., 394., 401., 402., 407., 408., 407., 408.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x18x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {381., 382., 389., 390., 511., 512., 497., 498., 511., 512., 511., 512., 511., 512., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, SAME3x18x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {457., 458., 459., 460., 473., 474., 475., 476., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 477., 478., 479., 480., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 469., 470., 471., 472., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 461., 462., 463., 464., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 461., 462., 463., 464., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 497., 498., 499., 500., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxwithnanWindow11Stride4Forward, VALID3x18x18x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 18, 18, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 4>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}

