/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "sycldnn/pooling/operators.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/pooling/pooling_fixture.h"

#include <array>
#include <vector>

using namespace sycldnn;  // NOLINT(google-build-using-namespace)
using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using MaxWindow7Stride1Forward =
    PoolingFixture<typename Pair::FirstType, typename Pair::SecondType,
                   pooling::Max, pooling::Forward>;
TYPED_TEST_SUITE(MaxWindow7Stride1Forward, GTestTypePairs);
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28., 29., 30., 31., 32., 32., 32., 32., 36., 37., 38., 39., 40.,
      40., 40., 40., 44., 45., 46., 47., 48., 48., 48., 48., 52., 53.,
      54., 55., 56., 56., 56., 56., 60., 61., 62., 63., 64., 64., 64.,
      64., 60., 61., 62., 63., 64., 64., 64., 64., 60., 61., 62., 63.,
      64., 64., 64., 64., 60., 61., 62., 63., 64., 64., 64., 64.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55., 56., 63., 64.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 119., 120., 121., 122.,
      123., 124., 125., 126., 127., 128., 127., 128., 127., 128., 127., 128.,
      119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 127., 128.,
      127., 128., 127., 128., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112.,
                                         125., 126., 127., 128.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248.,
      249., 250., 251., 252., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {217., 218., 219., 220., 221., 222.,
                                         223., 224., 249., 250., 251., 252.,
                                         253., 254., 255., 256.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31., 32., 33., 34., 35., 36., 36., 36., 36., 40., 41., 42., 43., 44., 45.,
      45., 45., 45., 49., 50., 51., 52., 53., 54., 54., 54., 54., 58., 59., 60.,
      61., 62., 63., 63., 63., 63., 67., 68., 69., 70., 71., 72., 72., 72., 72.,
      67., 68., 69., 70., 71., 72., 72., 72., 72., 67., 68., 69., 70., 71., 72.,
      72., 72., 72., 67., 68., 69., 70., 71., 72., 72., 72., 72.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {61., 62., 63., 70., 71., 72.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 133., 134., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 133., 134., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121., 122., 123., 124., 125., 126.,
                                         139., 140., 141., 142., 143., 144.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34., 35., 36., 37., 38., 39., 40., 40., 40., 40., 44., 45., 46., 47.,
      48., 49., 50., 50., 50., 50., 54., 55., 56., 57., 58., 59., 60., 60.,
      60., 60., 64., 65., 66., 67., 68., 69., 70., 70., 70., 70., 74., 75.,
      76., 77., 78., 79., 80., 80., 80., 80., 74., 75., 76., 77., 78., 79.,
      80., 80., 80., 80., 74., 75., 76., 77., 78., 79., 80., 80., 80., 80.,
      74., 75., 76., 77., 78., 79., 80., 80., 80., 80.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {67., 68., 69., 70.,
                                         77., 78., 79., 80.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 147., 148., 149., 150., 151., 152., 153., 154.,
      155., 156., 157., 158., 159., 160., 159., 160., 159., 160., 159., 160.,
      147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158.,
      159., 160., 159., 160., 159., 160., 159., 160., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 134., 135., 136., 137., 138.,
                                         139., 140., 153., 154., 155., 156.,
                                         157., 158., 159., 160.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 293., 294., 295., 296.,
      297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308.,
      309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275.,
      276., 277., 278., 279., 280., 305., 306., 307., 308., 309., 310.,
      311., 312., 313., 314., 315., 316., 317., 318., 319., 320.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28., 29., 30., 31., 32., 32., 32., 32., 36., 37., 38., 39., 40., 40., 40.,
      40., 44., 45., 46., 47., 48., 48., 48., 48., 52., 53., 54., 55., 56., 56.,
      56., 56., 60., 61., 62., 63., 64., 64., 64., 64., 68., 69., 70., 71., 72.,
      72., 72., 72., 68., 69., 70., 71., 72., 72., 72., 72., 68., 69., 70., 71.,
      72., 72., 72., 72., 68., 69., 70., 71., 72., 72., 72., 72.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55., 56., 63., 64., 71., 72.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144.,
      143., 144., 143., 144., 135., 136., 137., 138., 139., 140., 141., 142.,
      143., 144., 143., 144., 143., 144., 143., 144., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 125., 126.,
                                         127., 128., 141., 142., 143., 144.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 269., 270., 271., 272.,
      273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      217., 218., 219., 220., 221., 222., 223., 224., 249., 250., 251., 252.,
      253., 254., 255., 256., 281., 282., 283., 284., 285., 286., 287., 288.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31., 32., 33., 34., 35., 36., 36., 36., 36., 40., 41., 42., 43., 44.,
      45., 45., 45., 45., 49., 50., 51., 52., 53., 54., 54., 54., 54., 58.,
      59., 60., 61., 62., 63., 63., 63., 63., 67., 68., 69., 70., 71., 72.,
      72., 72., 72., 76., 77., 78., 79., 80., 81., 81., 81., 81., 76., 77.,
      78., 79., 80., 81., 81., 81., 81., 76., 77., 78., 79., 80., 81., 81.,
      81., 81., 76., 77., 78., 79., 80., 81., 81., 81., 81.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {61., 62., 63., 70., 71.,
                                         72., 79., 80., 81.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162.,
      161., 162., 161., 162., 161., 162., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162.,
      161., 162., 161., 162., 161., 162.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121., 122., 123., 124., 125., 126.,
                                         139., 140., 141., 142., 143., 144.,
                                         157., 158., 159., 160., 161., 162.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34., 35., 36., 37., 38., 39., 40., 40., 40., 40., 44., 45., 46.,
      47., 48., 49., 50., 50., 50., 50., 54., 55., 56., 57., 58., 59.,
      60., 60., 60., 60., 64., 65., 66., 67., 68., 69., 70., 70., 70.,
      70., 74., 75., 76., 77., 78., 79., 80., 80., 80., 80., 84., 85.,
      86., 87., 88., 89., 90., 90., 90., 90., 84., 85., 86., 87., 88.,
      89., 90., 90., 90., 90., 84., 85., 86., 87., 88., 89., 90., 90.,
      90., 90., 84., 85., 86., 87., 88., 89., 90., 90., 90., 90.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {67., 68., 69., 70., 77., 78.,
                                         79., 80., 87., 88., 89., 90.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178.,
      179., 180., 179., 180., 179., 180., 179., 180., 167., 168., 169., 170.,
      171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180.,
      179., 180., 179., 180., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 153., 154., 155., 156.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344.,
      345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      357., 358., 359., 360., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      353., 354., 355., 356., 357., 358., 359., 360., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28., 29., 30., 31., 32., 32., 32., 32., 36., 37., 38., 39., 40., 40.,
      40., 40., 44., 45., 46., 47., 48., 48., 48., 48., 52., 53., 54., 55.,
      56., 56., 56., 56., 60., 61., 62., 63., 64., 64., 64., 64., 68., 69.,
      70., 71., 72., 72., 72., 72., 76., 77., 78., 79., 80., 80., 80., 80.,
      76., 77., 78., 79., 80., 80., 80., 80., 76., 77., 78., 79., 80., 80.,
      80., 80., 76., 77., 78., 79., 80., 80., 80., 80.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55., 56., 63., 64.,
                                         71., 72., 79., 80.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 151., 152., 153., 154., 155., 156., 157., 158.,
      159., 160., 159., 160., 159., 160., 159., 160., 151., 152., 153., 154.,
      155., 156., 157., 158., 159., 160., 159., 160., 159., 160., 159., 160.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 125., 126.,
                                         127., 128., 141., 142., 143., 144.,
                                         157., 158., 159., 160.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 301., 302., 303., 304., 305., 306., 307., 308.,
      309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      217., 218., 219., 220., 221., 222., 223., 224., 249., 250., 251.,
      252., 253., 254., 255., 256., 281., 282., 283., 284., 285., 286.,
      287., 288., 313., 314., 315., 316., 317., 318., 319., 320.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31., 32., 33., 34., 35., 36., 36., 36., 36., 40., 41., 42., 43.,
      44., 45., 45., 45., 45., 49., 50., 51., 52., 53., 54., 54., 54.,
      54., 58., 59., 60., 61., 62., 63., 63., 63., 63., 67., 68., 69.,
      70., 71., 72., 72., 72., 72., 76., 77., 78., 79., 80., 81., 81.,
      81., 81., 85., 86., 87., 88., 89., 90., 90., 90., 90., 85., 86.,
      87., 88., 89., 90., 90., 90., 90., 85., 86., 87., 88., 89., 90.,
      90., 90., 90., 85., 86., 87., 88., 89., 90., 90., 90., 90.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {61., 62., 63., 70., 71., 72.,
                                         79., 80., 81., 88., 89., 90.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      179., 180., 179., 180., 179., 180., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      179., 180., 179., 180., 179., 180., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 139., 140., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 175., 176., 177., 178., 179., 180.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34.,  35.,  36.,  37.,  38.,  39.,  40.,  40.,  40.,  40.,  44., 45.,
      46.,  47.,  48.,  49.,  50.,  50.,  50.,  50.,  54.,  55.,  56., 57.,
      58.,  59.,  60.,  60.,  60.,  60.,  64.,  65.,  66.,  67.,  68., 69.,
      70.,  70.,  70.,  70.,  74.,  75.,  76.,  77.,  78.,  79.,  80., 80.,
      80.,  80.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  90.,  90., 90.,
      94.,  95.,  96.,  97.,  98.,  99.,  100., 100., 100., 100., 94., 95.,
      96.,  97.,  98.,  99.,  100., 100., 100., 100., 94.,  95.,  96., 97.,
      98.,  99.,  100., 100., 100., 100., 94.,  95.,  96.,  97.,  98., 99.,
      100., 100., 100., 100.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {67., 68., 69., 70., 77., 78.,
                                         79., 80., 87., 88., 89., 90.,
                                         97., 98., 99., 100.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198.,
      199., 200., 199., 200., 199., 200., 199., 200., 187., 188., 189., 190.,
      191., 192., 193., 194., 195., 196., 197., 198., 199., 200., 199., 200.,
      199., 200., 199., 200., 187., 188., 189., 190., 191., 192., 193., 194.,
      195., 196., 197., 198., 199., 200., 199., 200., 199., 200., 199., 200.,
      187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198.,
      199., 200., 199., 200., 199., 200., 199., 200.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 153., 154., 155.,
      156., 157., 158., 159., 160., 173., 174., 175., 176., 177., 178.,
      179., 180., 193., 194., 195., 196., 197., 198., 199., 200.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME1x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400., 373., 374., 375., 376., 377., 378., 379., 380.,
      381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392.,
      393., 394., 395., 396., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400., 397., 398., 399., 400., 373., 374., 375., 376.,
      377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388.,
      389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID1x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275.,
      276., 277., 278., 279., 280., 305., 306., 307., 308., 309., 310.,
      311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 345.,
      346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356.,
      357., 358., 359., 360., 385., 386., 387., 388., 389., 390., 391.,
      392., 393., 394., 395., 396., 397., 398., 399., 400.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28.,  29.,  30.,  31.,  32.,  32.,  32.,  32.,  36.,  37.,  38.,  39.,
      40.,  40.,  40.,  40.,  44.,  45.,  46.,  47.,  48.,  48.,  48.,  48.,
      52.,  53.,  54.,  55.,  56.,  56.,  56.,  56.,  60.,  61.,  62.,  63.,
      64.,  64.,  64.,  64.,  60.,  61.,  62.,  63.,  64.,  64.,  64.,  64.,
      60.,  61.,  62.,  63.,  64.,  64.,  64.,  64.,  60.,  61.,  62.,  63.,
      64.,  64.,  64.,  64.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,
      100., 101., 102., 103., 104., 104., 104., 104., 108., 109., 110., 111.,
      112., 112., 112., 112., 116., 117., 118., 119., 120., 120., 120., 120.,
      124., 125., 126., 127., 128., 128., 128., 128., 124., 125., 126., 127.,
      128., 128., 128., 128., 124., 125., 126., 127., 128., 128., 128., 128.,
      124., 125., 126., 127., 128., 128., 128., 128., 156., 157., 158., 159.,
      160., 160., 160., 160., 164., 165., 166., 167., 168., 168., 168., 168.,
      172., 173., 174., 175., 176., 176., 176., 176., 180., 181., 182., 183.,
      184., 184., 184., 184., 188., 189., 190., 191., 192., 192., 192., 192.,
      188., 189., 190., 191., 192., 192., 192., 192., 188., 189., 190., 191.,
      192., 192., 192., 192., 188., 189., 190., 191., 192., 192., 192., 192.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55.,  56.,  63.,  64.,  119., 120.,
                                         127., 128., 183., 184., 191., 192.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 119., 120., 121., 122.,
      123., 124., 125., 126., 127., 128., 127., 128., 127., 128., 127., 128.,
      119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 127., 128.,
      127., 128., 127., 128., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 183., 184., 185., 186.,
      187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192.,
      199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208.,
      207., 208., 207., 208., 215., 216., 217., 218., 219., 220., 221., 222.,
      223., 224., 223., 224., 223., 224., 223., 224., 231., 232., 233., 234.,
      235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256.,
      255., 256., 255., 256., 247., 248., 249., 250., 251., 252., 253., 254.,
      255., 256., 255., 256., 255., 256., 255., 256., 247., 248., 249., 250.,
      251., 252., 253., 254., 255., 256., 255., 256., 255., 256., 255., 256.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256.,
      255., 256., 255., 256., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 327., 328., 329., 330.,
      331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336.,
      343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352.,
      351., 352., 351., 352., 359., 360., 361., 362., 363., 364., 365., 366.,
      367., 368., 367., 368., 367., 368., 367., 368., 375., 376., 377., 378.,
      379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384.,
      375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 383., 384.,
      383., 384., 383., 384., 375., 376., 377., 378., 379., 380., 381., 382.,
      383., 384., 383., 384., 383., 384., 383., 384., 375., 376., 377., 378.,
      379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 125., 126., 127., 128., 237., 238., 239., 240.,
      253., 254., 255., 256., 365., 366., 367., 368., 381., 382., 383., 384.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248.,
      249., 250., 251., 252., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 365., 366., 367., 368., 369., 370., 371., 372.,
      373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
      381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384.,
      397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408.,
      409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416.,
      413., 414., 415., 416., 413., 414., 415., 416., 429., 430., 431., 432.,
      433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 461., 462., 463., 464., 465., 466., 467., 468.,
      469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480.,
      477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 109., 110., 111., 112.,
      113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124.,
      125., 126., 127., 128., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 141., 142., 143., 144., 145., 146., 147., 148.,
      149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159., 160.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184.,
      185., 186., 187., 188., 189., 190., 191., 192., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 205., 206., 207., 208.,
      209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220.,
      221., 222., 223., 224., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248.,
      249., 250., 251., 252., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      217., 218., 219., 220., 221., 222., 223., 224., 249., 250., 251., 252.,
      253., 254., 255., 256., 473., 474., 475., 476., 477., 478., 479., 480.,
      505., 506., 507., 508., 509., 510., 511., 512., 217., 218., 219., 220.,
      221., 222., 223., 224., 249., 250., 251., 252., 253., 254., 255., 256.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31.,  32.,  33.,  34.,  35.,  36.,  36.,  36.,  36.,  40.,  41.,  42.,
      43.,  44.,  45.,  45.,  45.,  45.,  49.,  50.,  51.,  52.,  53.,  54.,
      54.,  54.,  54.,  58.,  59.,  60.,  61.,  62.,  63.,  63.,  63.,  63.,
      67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  67.,  68.,  69.,
      70.,  71.,  72.,  72.,  72.,  72.,  67.,  68.,  69.,  70.,  71.,  72.,
      72.,  72.,  72.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,
      103., 104., 105., 106., 107., 108., 108., 108., 108., 112., 113., 114.,
      115., 116., 117., 117., 117., 117., 121., 122., 123., 124., 125., 126.,
      126., 126., 126., 130., 131., 132., 133., 134., 135., 135., 135., 135.,
      139., 140., 141., 142., 143., 144., 144., 144., 144., 139., 140., 141.,
      142., 143., 144., 144., 144., 144., 139., 140., 141., 142., 143., 144.,
      144., 144., 144., 139., 140., 141., 142., 143., 144., 144., 144., 144.,
      175., 176., 177., 178., 179., 180., 180., 180., 180., 184., 185., 186.,
      187., 188., 189., 189., 189., 189., 193., 194., 195., 196., 197., 198.,
      198., 198., 198., 202., 203., 204., 205., 206., 207., 207., 207., 207.,
      211., 212., 213., 214., 215., 216., 216., 216., 216., 211., 212., 213.,
      214., 215., 216., 216., 216., 216., 211., 212., 213., 214., 215., 216.,
      216., 216., 216., 211., 212., 213., 214., 215., 216., 216., 216., 216.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {61.,  62.,  63.,  70.,  71.,  72.,
                                         133., 134., 135., 142., 143., 144.,
                                         205., 206., 207., 214., 215., 216.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 133., 134., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 133., 134., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      215., 216., 215., 216., 215., 216., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      251., 252., 251., 252., 251., 252., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 269., 270., 269., 270., 269., 270.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      287., 288., 287., 288., 287., 288., 277., 278., 279., 280., 281., 282.,
      283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      287., 288., 287., 288., 287., 288., 277., 278., 279., 280., 281., 282.,
      283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      359., 360., 359., 360., 359., 360., 367., 368., 369., 370., 371., 372.,
      373., 374., 375., 376., 377., 378., 377., 378., 377., 378., 377., 378.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      395., 396., 395., 396., 395., 396., 403., 404., 405., 406., 407., 408.,
      409., 410., 411., 412., 413., 414., 413., 414., 413., 414., 413., 414.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      431., 432., 431., 432., 431., 432., 421., 422., 423., 424., 425., 426.,
      427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      431., 432., 431., 432., 431., 432., 421., 422., 423., 424., 425., 426.,
      427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 139., 140., 141., 142., 143., 144.,
      265., 266., 267., 268., 269., 270., 283., 284., 285., 286., 287., 288.,
      409., 410., 411., 412., 413., 414., 427., 428., 429., 430., 431., 432.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432.,
      445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456.,
      457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468.,
      465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468.,
      481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196.,
      197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 205., 206., 207., 208.,
      221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232.,
      233., 234., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244.,
      241., 242., 243., 244., 241., 242., 243., 244., 241., 242., 243., 244.,
      257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      313., 314., 315., 316., 313., 314., 315., 316., 313., 314., 315., 316.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34.,  35.,  36.,  37.,  38.,  39.,  40.,  40.,  40.,  40.,  44.,  45.,
      46.,  47.,  48.,  49.,  50.,  50.,  50.,  50.,  54.,  55.,  56.,  57.,
      58.,  59.,  60.,  60.,  60.,  60.,  64.,  65.,  66.,  67.,  68.,  69.,
      70.,  70.,  70.,  70.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  80.,
      80.,  80.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,
      74.,  75.,  76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,  74.,  75.,
      76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,  114., 115., 116., 117.,
      118., 119., 120., 120., 120., 120., 124., 125., 126., 127., 128., 129.,
      130., 130., 130., 130., 134., 135., 136., 137., 138., 139., 140., 140.,
      140., 140., 144., 145., 146., 147., 148., 149., 150., 150., 150., 150.,
      154., 155., 156., 157., 158., 159., 160., 160., 160., 160., 154., 155.,
      156., 157., 158., 159., 160., 160., 160., 160., 154., 155., 156., 157.,
      158., 159., 160., 160., 160., 160., 154., 155., 156., 157., 158., 159.,
      160., 160., 160., 160., 194., 195., 196., 197., 198., 199., 200., 200.,
      200., 200., 204., 205., 206., 207., 208., 209., 210., 210., 210., 210.,
      214., 215., 216., 217., 218., 219., 220., 220., 220., 220., 224., 225.,
      226., 227., 228., 229., 230., 230., 230., 230., 234., 235., 236., 237.,
      238., 239., 240., 240., 240., 240., 234., 235., 236., 237., 238., 239.,
      240., 240., 240., 240., 234., 235., 236., 237., 238., 239., 240., 240.,
      240., 240., 234., 235., 236., 237., 238., 239., 240., 240., 240., 240.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  77.,  78.,  79.,  80.,  147., 148., 149., 150.,
      157., 158., 159., 160., 227., 228., 229., 230., 237., 238., 239., 240.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 147., 148., 149., 150., 151., 152., 153., 154.,
      155., 156., 157., 158., 159., 160., 159., 160., 159., 160., 159., 160.,
      147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158.,
      159., 160., 159., 160., 159., 160., 159., 160., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 227., 228., 229., 230., 231., 232., 233., 234.,
      235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258.,
      259., 260., 259., 260., 259., 260., 259., 260., 267., 268., 269., 270.,
      271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280.,
      279., 280., 279., 280., 287., 288., 289., 290., 291., 292., 293., 294.,
      295., 296., 297., 298., 299., 300., 299., 300., 299., 300., 299., 300.,
      307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 307., 308., 309., 310.,
      311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 319., 320.,
      319., 320., 319., 320., 307., 308., 309., 310., 311., 312., 313., 314.,
      315., 316., 317., 318., 319., 320., 319., 320., 319., 320., 319., 320.,
      307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 387., 388., 389., 390.,
      391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400.,
      399., 400., 399., 400., 407., 408., 409., 410., 411., 412., 413., 414.,
      415., 416., 417., 418., 419., 420., 419., 420., 419., 420., 419., 420.,
      427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438.,
      439., 440., 439., 440., 439., 440., 439., 440., 447., 448., 449., 450.,
      451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 459., 460.,
      459., 460., 459., 460., 467., 468., 469., 470., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.,
      467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478.,
      479., 480., 479., 480., 479., 480., 479., 480., 467., 468., 469., 470.,
      471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 479., 480.,
      479., 480., 479., 480., 467., 468., 469., 470., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 153., 154., 155., 156.,
      157., 158., 159., 160., 293., 294., 295., 296., 297., 298., 299., 300.,
      313., 314., 315., 316., 317., 318., 319., 320., 453., 454., 455., 456.,
      457., 458., 459., 460., 473., 474., 475., 476., 477., 478., 479., 480.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 293., 294., 295., 296.,
      297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308.,
      309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 453., 454., 455., 456.,
      457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468.,
      469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480.,
      477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 261., 262., 263., 264., 265., 266., 267., 268.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328.,
      325., 326., 327., 328., 325., 326., 327., 328., 325., 326., 327., 328.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364.,
      365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368.,
      365., 366., 367., 368., 381., 382., 383., 384., 385., 386., 387., 388.,
      389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400.,
      401., 402., 403., 404., 405., 406., 407., 408., 405., 406., 407., 408.,
      405., 406., 407., 408., 405., 406., 407., 408., 421., 422., 423., 424.,
      425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 421., 422., 423., 424., 425., 426., 427., 428.,
      429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440.,
      441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 421., 422., 423., 424.,
      425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 393., 394., 395., 396., 397., 398., 399., 400.,
      401., 402., 403., 404., 405., 406., 407., 408., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28.,  29.,  30.,  31.,  32.,  32.,  32.,  32.,  36.,  37.,  38.,  39.,
      40.,  40.,  40.,  40.,  44.,  45.,  46.,  47.,  48.,  48.,  48.,  48.,
      52.,  53.,  54.,  55.,  56.,  56.,  56.,  56.,  60.,  61.,  62.,  63.,
      64.,  64.,  64.,  64.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,
      68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  68.,  69.,  70.,  71.,
      72.,  72.,  72.,  72.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,
      100., 101., 102., 103., 104., 104., 104., 104., 108., 109., 110., 111.,
      112., 112., 112., 112., 116., 117., 118., 119., 120., 120., 120., 120.,
      124., 125., 126., 127., 128., 128., 128., 128., 132., 133., 134., 135.,
      136., 136., 136., 136., 140., 141., 142., 143., 144., 144., 144., 144.,
      140., 141., 142., 143., 144., 144., 144., 144., 140., 141., 142., 143.,
      144., 144., 144., 144., 140., 141., 142., 143., 144., 144., 144., 144.,
      172., 173., 174., 175., 176., 176., 176., 176., 180., 181., 182., 183.,
      184., 184., 184., 184., 188., 189., 190., 191., 192., 192., 192., 192.,
      196., 197., 198., 199., 200., 200., 200., 200., 204., 205., 206., 207.,
      208., 208., 208., 208., 212., 213., 214., 215., 216., 216., 216., 216.,
      212., 213., 214., 215., 216., 216., 216., 216., 212., 213., 214., 215.,
      216., 216., 216., 216., 212., 213., 214., 215., 216., 216., 216., 216.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55.,  56.,  63.,  64.,  71.,  72.,
                                         127., 128., 135., 136., 143., 144.,
                                         199., 200., 207., 208., 215., 216.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144.,
      143., 144., 143., 144., 135., 136., 137., 138., 139., 140., 141., 142.,
      143., 144., 143., 144., 143., 144., 143., 144., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208.,
      207., 208., 207., 208., 215., 216., 217., 218., 219., 220., 221., 222.,
      223., 224., 223., 224., 223., 224., 223., 224., 231., 232., 233., 234.,
      235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256.,
      255., 256., 255., 256., 263., 264., 265., 266., 267., 268., 269., 270.,
      271., 272., 271., 272., 271., 272., 271., 272., 279., 280., 281., 282.,
      283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288.,
      279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288.,
      287., 288., 287., 288., 279., 280., 281., 282., 283., 284., 285., 286.,
      287., 288., 287., 288., 287., 288., 287., 288., 279., 280., 281., 282.,
      283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288.,
      343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352.,
      351., 352., 351., 352., 359., 360., 361., 362., 363., 364., 365., 366.,
      367., 368., 367., 368., 367., 368., 367., 368., 375., 376., 377., 378.,
      379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384.,
      391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400.,
      399., 400., 399., 400., 407., 408., 409., 410., 411., 412., 413., 414.,
      415., 416., 415., 416., 415., 416., 415., 416., 423., 424., 425., 426.,
      427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432.,
      423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 431., 432.,
      431., 432., 431., 432., 423., 424., 425., 426., 427., 428., 429., 430.,
      431., 432., 431., 432., 431., 432., 431., 432., 423., 424., 425., 426.,
      427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 125., 126., 127., 128., 141., 142., 143., 144.,
      253., 254., 255., 256., 269., 270., 271., 272., 285., 286., 287., 288.,
      397., 398., 399., 400., 413., 414., 415., 416., 429., 430., 431., 432.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 269., 270., 271., 272.,
      273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408.,
      409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416.,
      413., 414., 415., 416., 413., 414., 415., 416., 429., 430., 431., 432.,
      433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 461., 462., 463., 464., 465., 466., 467., 468.,
      469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480.,
      477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184.,
      185., 186., 187., 188., 189., 190., 191., 192., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 205., 206., 207., 208.,
      209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220.,
      221., 222., 223., 224., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344.,
      345., 346., 347., 348., 349., 350., 351., 352., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      349., 350., 351., 352., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      217., 218., 219., 220., 221., 222., 223., 224., 249., 250., 251., 252.,
      253., 254., 255., 256., 281., 282., 283., 284., 285., 286., 287., 288.,
      505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508.,
      509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.,
      281., 282., 283., 284., 285., 286., 287., 288., 313., 314., 315., 316.,
      317., 318., 319., 320., 345., 346., 347., 348., 349., 350., 351., 352.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31.,  32.,  33.,  34.,  35.,  36.,  36.,  36.,  36.,  40.,  41.,  42.,
      43.,  44.,  45.,  45.,  45.,  45.,  49.,  50.,  51.,  52.,  53.,  54.,
      54.,  54.,  54.,  58.,  59.,  60.,  61.,  62.,  63.,  63.,  63.,  63.,
      67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  76.,  77.,  78.,
      79.,  80.,  81.,  81.,  81.,  81.,  76.,  77.,  78.,  79.,  80.,  81.,
      81.,  81.,  81.,  76.,  77.,  78.,  79.,  80.,  81.,  81.,  81.,  81.,
      76.,  77.,  78.,  79.,  80.,  81.,  81.,  81.,  81.,  112., 113., 114.,
      115., 116., 117., 117., 117., 117., 121., 122., 123., 124., 125., 126.,
      126., 126., 126., 130., 131., 132., 133., 134., 135., 135., 135., 135.,
      139., 140., 141., 142., 143., 144., 144., 144., 144., 148., 149., 150.,
      151., 152., 153., 153., 153., 153., 157., 158., 159., 160., 161., 162.,
      162., 162., 162., 157., 158., 159., 160., 161., 162., 162., 162., 162.,
      157., 158., 159., 160., 161., 162., 162., 162., 162., 157., 158., 159.,
      160., 161., 162., 162., 162., 162., 193., 194., 195., 196., 197., 198.,
      198., 198., 198., 202., 203., 204., 205., 206., 207., 207., 207., 207.,
      211., 212., 213., 214., 215., 216., 216., 216., 216., 220., 221., 222.,
      223., 224., 225., 225., 225., 225., 229., 230., 231., 232., 233., 234.,
      234., 234., 234., 238., 239., 240., 241., 242., 243., 243., 243., 243.,
      238., 239., 240., 241., 242., 243., 243., 243., 243., 238., 239., 240.,
      241., 242., 243., 243., 243., 243., 238., 239., 240., 241., 242., 243.,
      243., 243., 243.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  70.,  71.,  72.,  79.,  80.,  81.,
      142., 143., 144., 151., 152., 153., 160., 161., 162.,
      223., 224., 225., 232., 233., 234., 241., 242., 243.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162.,
      161., 162., 161., 162., 161., 162., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162.,
      161., 162., 161., 162., 161., 162., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      251., 252., 251., 252., 251., 252., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 269., 270., 269., 270., 269., 270.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      287., 288., 287., 288., 287., 288., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 305., 306., 305., 306., 305., 306.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      323., 324., 323., 324., 323., 324., 313., 314., 315., 316., 317., 318.,
      319., 320., 321., 322., 323., 324., 323., 324., 323., 324., 323., 324.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      323., 324., 323., 324., 323., 324., 313., 314., 315., 316., 317., 318.,
      319., 320., 321., 322., 323., 324., 323., 324., 323., 324., 323., 324.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      395., 396., 395., 396., 395., 396., 403., 404., 405., 406., 407., 408.,
      409., 410., 411., 412., 413., 414., 413., 414., 413., 414., 413., 414.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      431., 432., 431., 432., 431., 432., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 449., 450., 449., 450., 449., 450., 449., 450.,
      457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468.,
      467., 468., 467., 468., 467., 468., 475., 476., 477., 478., 479., 480.,
      481., 482., 483., 484., 485., 486., 485., 486., 485., 486., 485., 486.,
      475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486.,
      485., 486., 485., 486., 485., 486., 475., 476., 477., 478., 479., 480.,
      481., 482., 483., 484., 485., 486., 485., 486., 485., 486., 485., 486.,
      475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486.,
      485., 486., 485., 486., 485., 486.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 139., 140., 141., 142., 143.,
      144., 157., 158., 159., 160., 161., 162., 283., 284., 285., 286.,
      287., 288., 301., 302., 303., 304., 305., 306., 319., 320., 321.,
      322., 323., 324., 445., 446., 447., 448., 449., 450., 463., 464.,
      465., 466., 467., 468., 481., 482., 483., 484., 485., 486.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456.,
      457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468.,
      465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468.,
      481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 133., 134., 135., 136.,
      133., 134., 135., 136., 133., 134., 135., 136., 133., 134., 135., 136.,
      257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      313., 314., 315., 316., 313., 314., 315., 316., 313., 314., 315., 316.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376.,
      377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388.,
      385., 386., 387., 388., 385., 386., 387., 388., 385., 386., 387., 388.,
      401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412.,
      413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424.,
      421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      457., 458., 459., 460., 457., 458., 459., 460., 457., 458., 459., 460.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      457., 458., 459., 460., 457., 458., 459., 460., 457., 458., 459., 460.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      457., 458., 459., 460., 457., 458., 459., 460., 457., 458., 459., 460.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      457., 458., 459., 460., 457., 458., 459., 460., 457., 458., 459., 460.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388.,
      413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34.,  35.,  36.,  37.,  38.,  39.,  40.,  40.,  40.,  40.,  44.,  45.,
      46.,  47.,  48.,  49.,  50.,  50.,  50.,  50.,  54.,  55.,  56.,  57.,
      58.,  59.,  60.,  60.,  60.,  60.,  64.,  65.,  66.,  67.,  68.,  69.,
      70.,  70.,  70.,  70.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  80.,
      80.,  80.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,
      84.,  85.,  86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,  84.,  85.,
      86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,  84.,  85.,  86.,  87.,
      88.,  89.,  90.,  90.,  90.,  90.,  124., 125., 126., 127., 128., 129.,
      130., 130., 130., 130., 134., 135., 136., 137., 138., 139., 140., 140.,
      140., 140., 144., 145., 146., 147., 148., 149., 150., 150., 150., 150.,
      154., 155., 156., 157., 158., 159., 160., 160., 160., 160., 164., 165.,
      166., 167., 168., 169., 170., 170., 170., 170., 174., 175., 176., 177.,
      178., 179., 180., 180., 180., 180., 174., 175., 176., 177., 178., 179.,
      180., 180., 180., 180., 174., 175., 176., 177., 178., 179., 180., 180.,
      180., 180., 174., 175., 176., 177., 178., 179., 180., 180., 180., 180.,
      214., 215., 216., 217., 218., 219., 220., 220., 220., 220., 224., 225.,
      226., 227., 228., 229., 230., 230., 230., 230., 234., 235., 236., 237.,
      238., 239., 240., 240., 240., 240., 244., 245., 246., 247., 248., 249.,
      250., 250., 250., 250., 254., 255., 256., 257., 258., 259., 260., 260.,
      260., 260., 264., 265., 266., 267., 268., 269., 270., 270., 270., 270.,
      264., 265., 266., 267., 268., 269., 270., 270., 270., 270., 264., 265.,
      266., 267., 268., 269., 270., 270., 270., 270., 264., 265., 266., 267.,
      268., 269., 270., 270., 270., 270.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  77.,  78.,  79.,  80.,  87.,  88.,  89.,  90.,
      157., 158., 159., 160., 167., 168., 169., 170., 177., 178., 179., 180.,
      247., 248., 249., 250., 257., 258., 259., 260., 267., 268., 269., 270.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178.,
      179., 180., 179., 180., 179., 180., 179., 180., 167., 168., 169., 170.,
      171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180.,
      179., 180., 179., 180., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258.,
      259., 260., 259., 260., 259., 260., 259., 260., 267., 268., 269., 270.,
      271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280.,
      279., 280., 279., 280., 287., 288., 289., 290., 291., 292., 293., 294.,
      295., 296., 297., 298., 299., 300., 299., 300., 299., 300., 299., 300.,
      307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 327., 328., 329., 330.,
      331., 332., 333., 334., 335., 336., 337., 338., 339., 340., 339., 340.,
      339., 340., 339., 340., 347., 348., 349., 350., 351., 352., 353., 354.,
      355., 356., 357., 358., 359., 360., 359., 360., 359., 360., 359., 360.,
      347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358.,
      359., 360., 359., 360., 359., 360., 359., 360., 347., 348., 349., 350.,
      351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 359., 360.,
      359., 360., 359., 360., 347., 348., 349., 350., 351., 352., 353., 354.,
      355., 356., 357., 358., 359., 360., 359., 360., 359., 360., 359., 360.,
      427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438.,
      439., 440., 439., 440., 439., 440., 439., 440., 447., 448., 449., 450.,
      451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 459., 460.,
      459., 460., 459., 460., 467., 468., 469., 470., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.,
      487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498.,
      499., 500., 499., 500., 499., 500., 499., 500., 507., 508., 509., 510.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 499., 500., 507., 508., 509., 510., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 499., 500.,
      507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 499., 500., 507., 508., 509., 510.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 499., 500., 507., 508., 509., 510., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 499., 500.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 153., 154., 155., 156.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      313., 314., 315., 316., 317., 318., 319., 320., 333., 334., 335., 336.,
      337., 338., 339., 340., 353., 354., 355., 356., 357., 358., 359., 360.,
      493., 494., 495., 496., 497., 498., 499., 500., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344.,
      345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      357., 358., 359., 360., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      353., 354., 355., 356., 357., 358., 359., 360., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 181., 182., 183., 184., 185., 186., 187., 188.,
      189., 190., 191., 192., 193., 194., 195., 196., 197., 198., 199., 200.,
      201., 202., 203., 204., 205., 206., 207., 208., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 181., 182., 183., 184.,
      185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196.,
      197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 205., 206., 207., 208.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364.,
      365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368.,
      365., 366., 367., 368., 381., 382., 383., 384., 385., 386., 387., 388.,
      389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400.,
      401., 402., 403., 404., 405., 406., 407., 408., 405., 406., 407., 408.,
      405., 406., 407., 408., 405., 406., 407., 408., 421., 422., 423., 424.,
      425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472.,
      473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484.,
      485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488.,
      485., 486., 487., 488., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 485., 486., 487., 488., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      485., 486., 487., 488., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 485., 486., 487., 488., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484.,
      485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28.,  29.,  30.,  31.,  32.,  32.,  32.,  32.,  36.,  37.,  38.,  39.,
      40.,  40.,  40.,  40.,  44.,  45.,  46.,  47.,  48.,  48.,  48.,  48.,
      52.,  53.,  54.,  55.,  56.,  56.,  56.,  56.,  60.,  61.,  62.,  63.,
      64.,  64.,  64.,  64.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,
      76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,  76.,  77.,  78.,  79.,
      80.,  80.,  80.,  80.,  76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,
      76.,  77.,  78.,  79.,  80.,  80.,  80.,  80.,  108., 109., 110., 111.,
      112., 112., 112., 112., 116., 117., 118., 119., 120., 120., 120., 120.,
      124., 125., 126., 127., 128., 128., 128., 128., 132., 133., 134., 135.,
      136., 136., 136., 136., 140., 141., 142., 143., 144., 144., 144., 144.,
      148., 149., 150., 151., 152., 152., 152., 152., 156., 157., 158., 159.,
      160., 160., 160., 160., 156., 157., 158., 159., 160., 160., 160., 160.,
      156., 157., 158., 159., 160., 160., 160., 160., 156., 157., 158., 159.,
      160., 160., 160., 160., 188., 189., 190., 191., 192., 192., 192., 192.,
      196., 197., 198., 199., 200., 200., 200., 200., 204., 205., 206., 207.,
      208., 208., 208., 208., 212., 213., 214., 215., 216., 216., 216., 216.,
      220., 221., 222., 223., 224., 224., 224., 224., 228., 229., 230., 231.,
      232., 232., 232., 232., 236., 237., 238., 239., 240., 240., 240., 240.,
      236., 237., 238., 239., 240., 240., 240., 240., 236., 237., 238., 239.,
      240., 240., 240., 240., 236., 237., 238., 239., 240., 240., 240., 240.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  63.,  64.,  71.,  72.,  79.,  80.,  135., 136., 143., 144.,
      151., 152., 159., 160., 215., 216., 223., 224., 231., 232., 239., 240.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  63.,  64.,
      63.,  64.,  63.,  64.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  95.,  96.,  95.,  96.,
      103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 111., 112.,
      111., 112., 111., 112., 119., 120., 121., 122., 123., 124., 125., 126.,
      127., 128., 127., 128., 127., 128., 127., 128., 135., 136., 137., 138.,
      139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 151., 152., 153., 154., 155., 156., 157., 158.,
      159., 160., 159., 160., 159., 160., 159., 160., 151., 152., 153., 154.,
      155., 156., 157., 158., 159., 160., 159., 160., 159., 160., 159., 160.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 215., 216., 217., 218., 219., 220., 221., 222.,
      223., 224., 223., 224., 223., 224., 223., 224., 231., 232., 233., 234.,
      235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240.,
      247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256.,
      255., 256., 255., 256., 263., 264., 265., 266., 267., 268., 269., 270.,
      271., 272., 271., 272., 271., 272., 271., 272., 279., 280., 281., 282.,
      283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288.,
      295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 303., 304.,
      303., 304., 303., 304., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 311., 312., 313., 314.,
      315., 316., 317., 318., 319., 320., 319., 320., 319., 320., 319., 320.,
      311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 319., 320.,
      319., 320., 319., 320., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 375., 376., 377., 378.,
      379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384.,
      391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400.,
      399., 400., 399., 400., 407., 408., 409., 410., 411., 412., 413., 414.,
      415., 416., 415., 416., 415., 416., 415., 416., 423., 424., 425., 426.,
      427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432.,
      439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 447., 448.,
      447., 448., 447., 448., 455., 456., 457., 458., 459., 460., 461., 462.,
      463., 464., 463., 464., 463., 464., 463., 464., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.,
      471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 479., 480.,
      479., 480., 479., 480., 471., 472., 473., 474., 475., 476., 477., 478.,
      479., 480., 479., 480., 479., 480., 479., 480., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 125., 126., 127., 128., 141., 142., 143., 144.,
      157., 158., 159., 160., 269., 270., 271., 272., 285., 286., 287., 288.,
      301., 302., 303., 304., 317., 318., 319., 320., 429., 430., 431., 432.,
      445., 446., 447., 448., 461., 462., 463., 464., 477., 478., 479., 480.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 125., 126., 127., 128., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      189., 190., 191., 192., 189., 190., 191., 192., 189., 190., 191., 192.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 221., 222., 223., 224.,
      221., 222., 223., 224., 221., 222., 223., 224., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      253., 254., 255., 256., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 301., 302., 303., 304., 305., 306., 307., 308.,
      309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 429., 430., 431., 432.,
      433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 461., 462., 463., 464., 465., 466., 467., 468.,
      469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480.,
      477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 109., 110., 111., 112.,
      113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124.,
      125., 126., 127., 128., 125., 126., 127., 128., 125., 126., 127., 128.,
      125., 126., 127., 128., 237., 238., 239., 240., 241., 242., 243., 244.,
      245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256.,
      253., 254., 255., 256., 253., 254., 255., 256., 253., 254., 255., 256.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 301., 302., 303., 304.,
      305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316.,
      317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376.,
      377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384.,
      381., 382., 383., 384., 381., 382., 383., 384., 397., 398., 399., 400.,
      401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412.,
      413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416.,
      413., 414., 415., 416., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440.,
      441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 429., 430., 431., 432.,
      433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      445., 446., 447., 448., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      217., 218., 219., 220., 221., 222., 223., 224., 249., 250., 251., 252.,
      253., 254., 255., 256., 281., 282., 283., 284., 285., 286., 287., 288.,
      313., 314., 315., 316., 317., 318., 319., 320., 505., 506., 507., 508.,
      509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.,
      505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508.,
      509., 510., 511., 512., 345., 346., 347., 348., 349., 350., 351., 352.,
      377., 378., 379., 380., 381., 382., 383., 384., 409., 410., 411., 412.,
      413., 414., 415., 416., 441., 442., 443., 444., 445., 446., 447., 448.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31.,  32.,  33.,  34.,  35.,  36.,  36.,  36.,  36.,  40.,  41.,  42.,
      43.,  44.,  45.,  45.,  45.,  45.,  49.,  50.,  51.,  52.,  53.,  54.,
      54.,  54.,  54.,  58.,  59.,  60.,  61.,  62.,  63.,  63.,  63.,  63.,
      67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  76.,  77.,  78.,
      79.,  80.,  81.,  81.,  81.,  81.,  85.,  86.,  87.,  88.,  89.,  90.,
      90.,  90.,  90.,  85.,  86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,
      85.,  86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,  85.,  86.,  87.,
      88.,  89.,  90.,  90.,  90.,  90.,  121., 122., 123., 124., 125., 126.,
      126., 126., 126., 130., 131., 132., 133., 134., 135., 135., 135., 135.,
      139., 140., 141., 142., 143., 144., 144., 144., 144., 148., 149., 150.,
      151., 152., 153., 153., 153., 153., 157., 158., 159., 160., 161., 162.,
      162., 162., 162., 166., 167., 168., 169., 170., 171., 171., 171., 171.,
      175., 176., 177., 178., 179., 180., 180., 180., 180., 175., 176., 177.,
      178., 179., 180., 180., 180., 180., 175., 176., 177., 178., 179., 180.,
      180., 180., 180., 175., 176., 177., 178., 179., 180., 180., 180., 180.,
      211., 212., 213., 214., 215., 216., 216., 216., 216., 220., 221., 222.,
      223., 224., 225., 225., 225., 225., 229., 230., 231., 232., 233., 234.,
      234., 234., 234., 238., 239., 240., 241., 242., 243., 243., 243., 243.,
      247., 248., 249., 250., 251., 252., 252., 252., 252., 256., 257., 258.,
      259., 260., 261., 261., 261., 261., 265., 266., 267., 268., 269., 270.,
      270., 270., 270., 265., 266., 267., 268., 269., 270., 270., 270., 270.,
      265., 266., 267., 268., 269., 270., 270., 270., 270., 265., 266., 267.,
      268., 269., 270., 270., 270., 270.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  70.,  71.,  72.,  79.,  80.,  81.,  88.,  89.,  90.,
      151., 152., 153., 160., 161., 162., 169., 170., 171., 178., 179., 180.,
      241., 242., 243., 250., 251., 252., 259., 260., 261., 268., 269., 270.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,
      71.,  72.,  71.,  72.,  71.,  72.,  79.,  80.,  81.,  82.,  83.,  84.,
      85.,  86.,  87.,  88.,  89.,  90.,  89.,  90.,  89.,  90.,  89.,  90.,
      97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107., 108.,
      107., 108., 107., 108., 107., 108., 115., 116., 117., 118., 119., 120.,
      121., 122., 123., 124., 125., 126., 125., 126., 125., 126., 125., 126.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      143., 144., 143., 144., 143., 144., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 161., 162., 161., 162., 161., 162., 161., 162.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      179., 180., 179., 180., 179., 180., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      179., 180., 179., 180., 179., 180., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      251., 252., 251., 252., 251., 252., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 269., 270., 269., 270., 269., 270.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      287., 288., 287., 288., 287., 288., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 305., 306., 305., 306., 305., 306.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      323., 324., 323., 324., 323., 324., 331., 332., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 341., 342., 341., 342., 341., 342.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      359., 360., 359., 360., 359., 360., 349., 350., 351., 352., 353., 354.,
      355., 356., 357., 358., 359., 360., 359., 360., 359., 360., 359., 360.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      359., 360., 359., 360., 359., 360., 349., 350., 351., 352., 353., 354.,
      355., 356., 357., 358., 359., 360., 359., 360., 359., 360., 359., 360.,
      421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432.,
      431., 432., 431., 432., 431., 432., 439., 440., 441., 442., 443., 444.,
      445., 446., 447., 448., 449., 450., 449., 450., 449., 450., 449., 450.,
      457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468.,
      467., 468., 467., 468., 467., 468., 475., 476., 477., 478., 479., 480.,
      481., 482., 483., 484., 485., 486., 485., 486., 485., 486., 485., 486.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 139., 140., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 175., 176., 177., 178., 179., 180.,
      301., 302., 303., 304., 305., 306., 319., 320., 321., 322., 323., 324.,
      337., 338., 339., 340., 341., 342., 355., 356., 357., 358., 359., 360.,
      481., 482., 483., 484., 485., 486., 499., 500., 501., 502., 503., 504.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.,
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      141., 142., 143., 144., 141., 142., 143., 144., 141., 142., 143., 144.,
      157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.,
      169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180.,
      177., 178., 179., 180., 177., 178., 179., 180., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.,
      205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216.,
      213., 214., 215., 216., 213., 214., 215., 216., 213., 214., 215., 216.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      249., 250., 251., 252., 249., 250., 251., 252., 249., 250., 251., 252.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      321., 322., 323., 324., 321., 322., 323., 324., 321., 322., 323., 324.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 205., 206., 207., 208.,
      185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196.,
      197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 205., 206., 207., 208.,
      185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196.,
      197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208.,
      205., 206., 207., 208., 205., 206., 207., 208., 205., 206., 207., 208.,
      329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340.,
      341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352.,
      349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352.,
      365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376.,
      377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388.,
      385., 386., 387., 388., 385., 386., 387., 388., 385., 386., 387., 388.,
      401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412.,
      413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424.,
      421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      457., 458., 459., 460., 457., 458., 459., 460., 457., 458., 459., 460.,
      473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484.,
      485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496.,
      493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504.,
      449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460.,
      485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34.,  35.,  36.,  37.,  38.,  39.,  40.,  40.,  40.,  40.,  44.,  45.,
      46.,  47.,  48.,  49.,  50.,  50.,  50.,  50.,  54.,  55.,  56.,  57.,
      58.,  59.,  60.,  60.,  60.,  60.,  64.,  65.,  66.,  67.,  68.,  69.,
      70.,  70.,  70.,  70.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  80.,
      80.,  80.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  90.,  90.,  90.,
      94.,  95.,  96.,  97.,  98.,  99.,  100., 100., 100., 100., 94.,  95.,
      96.,  97.,  98.,  99.,  100., 100., 100., 100., 94.,  95.,  96.,  97.,
      98.,  99.,  100., 100., 100., 100., 94.,  95.,  96.,  97.,  98.,  99.,
      100., 100., 100., 100., 134., 135., 136., 137., 138., 139., 140., 140.,
      140., 140., 144., 145., 146., 147., 148., 149., 150., 150., 150., 150.,
      154., 155., 156., 157., 158., 159., 160., 160., 160., 160., 164., 165.,
      166., 167., 168., 169., 170., 170., 170., 170., 174., 175., 176., 177.,
      178., 179., 180., 180., 180., 180., 184., 185., 186., 187., 188., 189.,
      190., 190., 190., 190., 194., 195., 196., 197., 198., 199., 200., 200.,
      200., 200., 194., 195., 196., 197., 198., 199., 200., 200., 200., 200.,
      194., 195., 196., 197., 198., 199., 200., 200., 200., 200., 194., 195.,
      196., 197., 198., 199., 200., 200., 200., 200., 234., 235., 236., 237.,
      238., 239., 240., 240., 240., 240., 244., 245., 246., 247., 248., 249.,
      250., 250., 250., 250., 254., 255., 256., 257., 258., 259., 260., 260.,
      260., 260., 264., 265., 266., 267., 268., 269., 270., 270., 270., 270.,
      274., 275., 276., 277., 278., 279., 280., 280., 280., 280., 284., 285.,
      286., 287., 288., 289., 290., 290., 290., 290., 294., 295., 296., 297.,
      298., 299., 300., 300., 300., 300., 294., 295., 296., 297., 298., 299.,
      300., 300., 300., 300., 294., 295., 296., 297., 298., 299., 300., 300.,
      300., 300., 294., 295., 296., 297., 298., 299., 300., 300., 300., 300.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  77.,  78.,  79.,  80.,  87.,  88.,  89.,  90.,
      97.,  98.,  99.,  100., 167., 168., 169., 170., 177., 178., 179., 180.,
      187., 188., 189., 190., 197., 198., 199., 200., 267., 268., 269., 270.,
      277., 278., 279., 280., 287., 288., 289., 290., 297., 298., 299., 300.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,
      79.,  80.,  79.,  80.,  79.,  80.,  79.,  80.,  87.,  88.,  89.,  90.,
      91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.,  100., 99.,  100.,
      99.,  100., 99.,  100., 107., 108., 109., 110., 111., 112., 113., 114.,
      115., 116., 117., 118., 119., 120., 119., 120., 119., 120., 119., 120.,
      127., 128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138.,
      139., 140., 139., 140., 139., 140., 139., 140., 147., 148., 149., 150.,
      151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160.,
      159., 160., 159., 160., 167., 168., 169., 170., 171., 172., 173., 174.,
      175., 176., 177., 178., 179., 180., 179., 180., 179., 180., 179., 180.,
      187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198.,
      199., 200., 199., 200., 199., 200., 199., 200., 187., 188., 189., 190.,
      191., 192., 193., 194., 195., 196., 197., 198., 199., 200., 199., 200.,
      199., 200., 199., 200., 187., 188., 189., 190., 191., 192., 193., 194.,
      195., 196., 197., 198., 199., 200., 199., 200., 199., 200., 199., 200.,
      187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 197., 198.,
      199., 200., 199., 200., 199., 200., 199., 200., 267., 268., 269., 270.,
      271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280.,
      279., 280., 279., 280., 287., 288., 289., 290., 291., 292., 293., 294.,
      295., 296., 297., 298., 299., 300., 299., 300., 299., 300., 299., 300.,
      307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318.,
      319., 320., 319., 320., 319., 320., 319., 320., 327., 328., 329., 330.,
      331., 332., 333., 334., 335., 336., 337., 338., 339., 340., 339., 340.,
      339., 340., 339., 340., 347., 348., 349., 350., 351., 352., 353., 354.,
      355., 356., 357., 358., 359., 360., 359., 360., 359., 360., 359., 360.,
      367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378.,
      379., 380., 379., 380., 379., 380., 379., 380., 387., 388., 389., 390.,
      391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400.,
      399., 400., 399., 400., 387., 388., 389., 390., 391., 392., 393., 394.,
      395., 396., 397., 398., 399., 400., 399., 400., 399., 400., 399., 400.,
      387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398.,
      399., 400., 399., 400., 399., 400., 399., 400., 387., 388., 389., 390.,
      391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400.,
      399., 400., 399., 400., 467., 468., 469., 470., 471., 472., 473., 474.,
      475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480.,
      487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498.,
      499., 500., 499., 500., 499., 500., 499., 500., 507., 508., 509., 510.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 499., 500., 507., 508., 509., 510., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 499., 500.,
      507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 499., 500., 507., 508., 509., 510.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 499., 500., 507., 508., 509., 510., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 499., 500.,
      507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 499., 500., 507., 508., 509., 510.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 87.,  88.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,
      83.,  84.,  85.,  86.,  87.,  88.,  87.,  88.,  87.,  88.,  87.,  88.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 153., 154., 155., 156.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      193., 194., 195., 196., 197., 198., 199., 200., 333., 334., 335., 336.,
      337., 338., 339., 340., 353., 354., 355., 356., 357., 358., 359., 360.,
      373., 374., 375., 376., 377., 378., 379., 380., 393., 394., 395., 396.,
      397., 398., 399., 400., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.,
      511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, SAME3x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144.,
      145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156.,
      157., 158., 159., 160., 157., 158., 159., 160., 157., 158., 159., 160.,
      157., 158., 159., 160., 173., 174., 175., 176., 177., 178., 179., 180.,
      181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192.,
      193., 194., 195., 196., 197., 198., 199., 200., 197., 198., 199., 200.,
      197., 198., 199., 200., 197., 198., 199., 200., 213., 214., 215., 216.,
      217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.,
      229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.,
      237., 238., 239., 240., 237., 238., 239., 240., 237., 238., 239., 240.,
      253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 277., 278., 279., 280., 277., 278., 279., 280.,
      277., 278., 279., 280., 293., 294., 295., 296., 297., 298., 299., 300.,
      301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320.,
      317., 318., 319., 320., 317., 318., 319., 320., 333., 334., 335., 336.,
      337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      357., 358., 359., 360., 357., 358., 359., 360., 357., 358., 359., 360.,
      373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400., 373., 374., 375., 376., 377., 378., 379., 380.,
      381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392.,
      393., 394., 395., 396., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400., 397., 398., 399., 400., 373., 374., 375., 376.,
      377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388.,
      389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400.,
      397., 398., 399., 400., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 493., 494., 495., 496., 497., 498., 499., 500.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496.,
      497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 261., 262., 263., 264., 265., 266., 267., 268.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 261., 262., 263., 264.,
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272.,
      273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284.,
      285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 261., 262., 263., 264., 265., 266., 267., 268.,
      269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288.,
      285., 286., 287., 288., 285., 286., 287., 288., 421., 422., 423., 424.,
      425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436.,
      437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448.,
      445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448.,
      461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472.,
      473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484.,
      485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488.,
      485., 486., 487., 488., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 485., 486., 487., 488., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      485., 486., 487., 488., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 485., 486., 487., 488., 501., 502., 503., 504.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488.,
      501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      485., 486., 487., 488., 501., 502., 503., 504., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 173., 174., 175., 176., 149., 150., 151., 152.,
      153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164.,
      165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176.,
      173., 174., 175., 176., 173., 174., 175., 176., 173., 174., 175., 176.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow7Stride1Forward, VALID3x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276.,
      277., 278., 279., 280., 305., 306., 307., 308., 309., 310., 311., 312.,
      313., 314., 315., 316., 317., 318., 319., 320., 345., 346., 347., 348.,
      349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360.,
      385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396.,
      397., 398., 399., 400., 505., 506., 507., 508., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 273., 274., 275., 276., 277., 278., 279., 280.,
      281., 282., 283., 284., 285., 286., 287., 288., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.,
      509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
