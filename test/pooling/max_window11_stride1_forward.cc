/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "sycldnn/pooling/operators.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/pooling/pooling_fixture.h"

#include <array>
#include <vector>

using namespace sycldnn; // NOLINT(google-build-using-namespace)
using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using MaxWindow11Stride1Forward =
    PoolingFixture<typename Pair::FirstType, typename Pair::SecondType,
                   pooling::Max, pooling::Forward>;
TYPED_TEST_SUITE(MaxWindow11Stride1Forward, GTestTypePairs);
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 12, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 12, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x12x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x12x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 12, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144., 155., 156.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288., 309., 310., 311., 312.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 13, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156., 167., 168., 169.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 13, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168., 179., 180., 181., 182.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x13x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x13x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 13, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144., 155., 156., 167., 168.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288., 309., 310., 311., 312., 333., 334., 335., 336.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 14, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156., 167., 168., 169., 180., 181., 182.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 359., 360., 361., 362., 363., 364.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 1, 14, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168., 179., 180., 181., 182., 193., 194., 195., 196.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME1x14x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID1x14x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 1, 14, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 210., 211., 212., 213., 214., 215., 216., 216., 216., 216., 216., 216., 222., 223., 224., 225., 226., 227., 228., 228., 228., 228., 228., 228., 234., 235., 236., 237., 238., 239., 240., 240., 240., 240., 240., 240., 246., 247., 248., 249., 250., 251., 252., 252., 252., 252., 252., 252., 258., 259., 260., 261., 262., 263., 264., 264., 264., 264., 264., 264., 270., 271., 272., 273., 274., 275., 276., 276., 276., 276., 276., 276., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 354., 355., 356., 357., 358., 359., 360., 360., 360., 360., 360., 360., 366., 367., 368., 369., 370., 371., 372., 372., 372., 372., 372., 372., 378., 379., 380., 381., 382., 383., 384., 384., 384., 384., 384., 384., 390., 391., 392., 393., 394., 395., 396., 396., 396., 396., 396., 396., 402., 403., 404., 405., 406., 407., 408., 408., 408., 408., 408., 408., 414., 415., 416., 417., 418., 419., 420., 420., 420., 420., 420., 420., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144., 275., 276., 287., 288., 419., 420., 431., 432.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 431., 432., 431., 432., 431., 432., 431., 432., 431., 432., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 455., 456., 455., 456., 455., 456., 455., 456., 455., 456., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 231., 232., 231., 232., 231., 232., 231., 232., 231., 232., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256., 255., 256., 255., 256., 255., 256., 255., 256., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288., 511., 512., 511., 512., 511., 512., 511., 512., 325., 326., 327., 328., 349., 350., 351., 352.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352., 349., 350., 351., 352., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 461., 462., 463., 464., 461., 462., 463., 464., 461., 462., 463., 464., 461., 462., 463., 464., 461., 462., 463., 464., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 12, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 227., 228., 229., 230., 231., 232., 233., 234., 234., 234., 234., 234., 234., 240., 241., 242., 243., 244., 245., 246., 247., 247., 247., 247., 247., 247., 253., 254., 255., 256., 257., 258., 259., 260., 260., 260., 260., 260., 260., 266., 267., 268., 269., 270., 271., 272., 273., 273., 273., 273., 273., 273., 279., 280., 281., 282., 283., 284., 285., 286., 286., 286., 286., 286., 286., 292., 293., 294., 295., 296., 297., 298., 299., 299., 299., 299., 299., 299., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 383., 384., 385., 386., 387., 388., 389., 390., 390., 390., 390., 390., 390., 396., 397., 398., 399., 400., 401., 402., 403., 403., 403., 403., 403., 403., 409., 410., 411., 412., 413., 414., 415., 416., 416., 416., 416., 416., 416., 422., 423., 424., 425., 426., 427., 428., 429., 429., 429., 429., 429., 429., 435., 436., 437., 438., 439., 440., 441., 442., 442., 442., 442., 442., 442., 448., 449., 450., 451., 452., 453., 454., 455., 455., 455., 455., 455., 455., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156., 297., 298., 299., 310., 311., 312., 453., 454., 455., 466., 467., 468.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 493., 494., 493., 494., 493., 494., 493., 494., 493., 494., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 267., 268., 267., 268., 267., 268., 267., 268., 267., 268., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 293., 294., 293., 294., 293., 294., 293., 294., 293., 294., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 319., 320., 319., 320., 319., 320., 319., 320., 319., 320., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 345., 346., 345., 346., 345., 346., 345., 346., 345., 346., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 393., 394., 395., 396., 397., 398., 419., 420., 421., 422., 423., 424.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 333., 334., 335., 336., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 12, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 244., 245., 246., 247., 248., 249., 250., 251., 252., 252., 252., 252., 252., 252., 258., 259., 260., 261., 262., 263., 264., 265., 266., 266., 266., 266., 266., 266., 272., 273., 274., 275., 276., 277., 278., 279., 280., 280., 280., 280., 280., 280., 286., 287., 288., 289., 290., 291., 292., 293., 294., 294., 294., 294., 294., 294., 300., 301., 302., 303., 304., 305., 306., 307., 308., 308., 308., 308., 308., 308., 314., 315., 316., 317., 318., 319., 320., 321., 322., 322., 322., 322., 322., 322., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 412., 413., 414., 415., 416., 417., 418., 419., 420., 420., 420., 420., 420., 420., 426., 427., 428., 429., 430., 431., 432., 433., 434., 434., 434., 434., 434., 434., 440., 441., 442., 443., 444., 445., 446., 447., 448., 448., 448., 448., 448., 448., 454., 455., 456., 457., 458., 459., 460., 461., 462., 462., 462., 462., 462., 462., 468., 469., 470., 471., 472., 473., 474., 475., 476., 476., 476., 476., 476., 476., 482., 483., 484., 485., 486., 487., 488., 489., 490., 490., 490., 490., 490., 490., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168., 319., 320., 321., 322., 333., 334., 335., 336., 487., 488., 489., 490., 501., 502., 503., 504.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 159., 160., 159., 160., 159., 160., 159., 160., 159., 160., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 355., 356., 355., 356., 355., 356., 355., 356., 355., 356., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384., 383., 384., 383., 384., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 411., 412., 411., 412., 411., 412., 411., 412., 411., 412., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 461., 462., 463., 464., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x12x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x12x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 12, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 222., 223., 224., 225., 226., 227., 228., 228., 228., 228., 228., 228., 234., 235., 236., 237., 238., 239., 240., 240., 240., 240., 240., 240., 246., 247., 248., 249., 250., 251., 252., 252., 252., 252., 252., 252., 258., 259., 260., 261., 262., 263., 264., 264., 264., 264., 264., 264., 270., 271., 272., 273., 274., 275., 276., 276., 276., 276., 276., 276., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 294., 295., 296., 297., 298., 299., 300., 300., 300., 300., 300., 300., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 378., 379., 380., 381., 382., 383., 384., 384., 384., 384., 384., 384., 390., 391., 392., 393., 394., 395., 396., 396., 396., 396., 396., 396., 402., 403., 404., 405., 406., 407., 408., 408., 408., 408., 408., 408., 414., 415., 416., 417., 418., 419., 420., 420., 420., 420., 420., 420., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 438., 439., 440., 441., 442., 443., 444., 444., 444., 444., 444., 444., 450., 451., 452., 453., 454., 455., 456., 456., 456., 456., 456., 456., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144., 155., 156., 287., 288., 299., 300., 311., 312., 443., 444., 455., 456., 467., 468.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 455., 456., 455., 456., 455., 456., 455., 456., 455., 456., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 255., 256., 255., 256., 255., 256., 255., 256., 255., 256., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 375., 376., 375., 376., 375., 376., 375., 376., 375., 376., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400., 399., 400., 399., 400., 399., 400., 399., 400., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288., 309., 310., 311., 312., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 373., 374., 375., 376., 397., 398., 399., 400., 421., 422., 423., 424.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 397., 398., 399., 400., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 13, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 240., 241., 242., 243., 244., 245., 246., 247., 247., 247., 247., 247., 247., 253., 254., 255., 256., 257., 258., 259., 260., 260., 260., 260., 260., 260., 266., 267., 268., 269., 270., 271., 272., 273., 273., 273., 273., 273., 273., 279., 280., 281., 282., 283., 284., 285., 286., 286., 286., 286., 286., 286., 292., 293., 294., 295., 296., 297., 298., 299., 299., 299., 299., 299., 299., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 318., 319., 320., 321., 322., 323., 324., 325., 325., 325., 325., 325., 325., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 409., 410., 411., 412., 413., 414., 415., 416., 416., 416., 416., 416., 416., 422., 423., 424., 425., 426., 427., 428., 429., 429., 429., 429., 429., 429., 435., 436., 437., 438., 439., 440., 441., 442., 442., 442., 442., 442., 442., 448., 449., 450., 451., 452., 453., 454., 455., 455., 455., 455., 455., 455., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 474., 475., 476., 477., 478., 479., 480., 481., 481., 481., 481., 481., 481., 487., 488., 489., 490., 491., 492., 493., 494., 494., 494., 494., 494., 494., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507.};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156., 167., 168., 169., 310., 311., 312., 323., 324., 325., 336., 337., 338., 479., 480., 481., 492., 493., 494., 505., 506., 507.};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 493., 494., 493., 494., 493., 494., 493., 494., 493., 494., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 163., 164., 163., 164., 163., 164., 163., 164., 163., 164., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 319., 320., 319., 320., 319., 320., 319., 320., 319., 320., 331., 332., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 345., 346., 345., 346., 345., 346., 345., 346., 345., 346., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 449., 450., 449., 450., 449., 450., 449., 450., 449., 450., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 475., 476., 475., 476., 475., 476., 475., 476., 475., 476., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502.};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 445., 446., 447., 448., 449., 450., 471., 472., 473., 474., 475., 476., 497., 498., 499., 500., 501., 502.};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 473., 474., 475., 476., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 325., 326., 327., 328., 325., 326., 327., 328., 325., 326., 327., 328., 325., 326., 327., 328., 325., 326., 327., 328., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492.};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {};
  const std::array<int, 4> in_shape = {{ 3, 13, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 258., 259., 260., 261., 262., 263., 264., 265., 266., 266., 266., 266., 266., 266., 272., 273., 274., 275., 276., 277., 278., 279., 280., 280., 280., 280., 280., 280., 286., 287., 288., 289., 290., 291., 292., 293., 294., 294., 294., 294., 294., 294., 300., 301., 302., 303., 304., 305., 306., 307., 308., 308., 308., 308., 308., 308., 314., 315., 316., 317., 318., 319., 320., 321., 322., 322., 322., 322., 322., 322., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 342., 343., 344., 345., 346., 347., 348., 349., 350., 350., 350., 350., 350., 350., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 440., 441., 442., 443., 444., 445., 446., 447., 448., 448., 448., 448., 448., 448., 454., 455., 456., 457., 458., 459., 460., 461., 462., 462., 462., 462., 462., 462., 468., 469., 470., 471., 472., 473., 474., 475., 476., 476., 476., 476., 476., 476., 482., 483., 484., 485., 486., 487., 488., 489., 490., 490., 490., 490., 490., 490., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168., 179., 180., 181., 182., 333., 334., 335., 336., 347., 348., 349., 350., 361., 362., 363., 364., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 383., 384., 383., 384., 383., 384., 383., 384., 383., 384., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 411., 412., 411., 412., 411., 412., 411., 412., 411., 412., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x13x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x13x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 13, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 66.,  67.,  68.,  69.,  70.,  71.,  72.,  72.,  72.,  72.,  72.,  72.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  96.,  96.,  96.,  96.,  96., 102., 103., 104., 105., 106., 107., 108., 108., 108., 108., 108., 108., 114., 115., 116., 117., 118., 119., 120., 120., 120., 120., 120., 120., 126., 127., 128., 129., 130., 131., 132., 132., 132., 132., 132., 132., 138., 139., 140., 141., 142., 143., 144., 144., 144., 144., 144., 144., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 234., 235., 236., 237., 238., 239., 240., 240., 240., 240., 240., 240., 246., 247., 248., 249., 250., 251., 252., 252., 252., 252., 252., 252., 258., 259., 260., 261., 262., 263., 264., 264., 264., 264., 264., 264., 270., 271., 272., 273., 274., 275., 276., 276., 276., 276., 276., 276., 282., 283., 284., 285., 286., 287., 288., 288., 288., 288., 288., 288., 294., 295., 296., 297., 298., 299., 300., 300., 300., 300., 300., 300., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 318., 319., 320., 321., 322., 323., 324., 324., 324., 324., 324., 324., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 402., 403., 404., 405., 406., 407., 408., 408., 408., 408., 408., 408., 414., 415., 416., 417., 418., 419., 420., 420., 420., 420., 420., 420., 426., 427., 428., 429., 430., 431., 432., 432., 432., 432., 432., 432., 438., 439., 440., 441., 442., 443., 444., 444., 444., 444., 444., 444., 450., 451., 452., 453., 454., 455., 456., 456., 456., 456., 456., 456., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 474., 475., 476., 477., 478., 479., 480., 480., 480., 480., 480., 480., 486., 487., 488., 489., 490., 491., 492., 492., 492., 492., 492., 492., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x12x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 143., 144., 155., 156., 167., 168., 299., 300., 311., 312., 323., 324., 335., 336., 467., 468., 479., 480., 491., 492., 503., 504.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 143., 144., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 191., 192., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 239., 240., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 263., 264., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 287., 288., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 479., 480., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 159., 160., 159., 160., 159., 160., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 159., 160., 159., 160., 159., 160., 159., 160., 159., 160., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 303., 304., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 327., 328., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 351., 352., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 375., 376., 375., 376., 375., 376., 375., 376., 375., 376., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 399., 400., 399., 400., 399., 400., 399., 400., 399., 400., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 447., 448., 447., 448., 447., 448., 447., 448., 447., 448., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 471., 472., 471., 472., 471., 472., 471., 472., 471., 472., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x12x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 285., 286., 287., 288., 309., 310., 311., 312., 333., 334., 335., 336., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 421., 422., 423., 424., 445., 446., 447., 448., 469., 470., 471., 472., 493., 494., 495., 496.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 285., 286., 287., 288., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 381., 382., 383., 384., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 317., 318., 319., 320., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x12x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 12, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  78.,  78.,  78.,  78.,  78.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  91.,  91.,  91.,  91.,  91.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 104., 104., 104., 104., 110., 111., 112., 113., 114., 115., 116., 117., 117., 117., 117., 117., 117., 123., 124., 125., 126., 127., 128., 129., 130., 130., 130., 130., 130., 130., 136., 137., 138., 139., 140., 141., 142., 143., 143., 143., 143., 143., 143., 149., 150., 151., 152., 153., 154., 155., 156., 156., 156., 156., 156., 156., 162., 163., 164., 165., 166., 167., 168., 169., 169., 169., 169., 169., 169., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 253., 254., 255., 256., 257., 258., 259., 260., 260., 260., 260., 260., 260., 266., 267., 268., 269., 270., 271., 272., 273., 273., 273., 273., 273., 273., 279., 280., 281., 282., 283., 284., 285., 286., 286., 286., 286., 286., 286., 292., 293., 294., 295., 296., 297., 298., 299., 299., 299., 299., 299., 299., 305., 306., 307., 308., 309., 310., 311., 312., 312., 312., 312., 312., 312., 318., 319., 320., 321., 322., 323., 324., 325., 325., 325., 325., 325., 325., 331., 332., 333., 334., 335., 336., 337., 338., 338., 338., 338., 338., 338., 344., 345., 346., 347., 348., 349., 350., 351., 351., 351., 351., 351., 351., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 435., 436., 437., 438., 439., 440., 441., 442., 442., 442., 442., 442., 442., 448., 449., 450., 451., 452., 453., 454., 455., 455., 455., 455., 455., 455., 461., 462., 463., 464., 465., 466., 467., 468., 468., 468., 468., 468., 468., 474., 475., 476., 477., 478., 479., 480., 481., 481., 481., 481., 481., 481., 487., 488., 489., 490., 491., 492., 493., 494., 494., 494., 494., 494., 494., 500., 501., 502., 503., 504., 505., 506., 507., 507., 507., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 507., 507., 507.};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x13x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 154., 155., 156., 167., 168., 169., 180., 181., 182., 323., 324., 325., 336., 337., 338., 349., 350., 351., 362., 363., 364., 505., 506., 507., 512., 512., 512., 512., 512., 512., 512., 512., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {141., 142., 143., 144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 155., 156., 167., 168., 169., 170., 171., 172., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 181., 182., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 207., 208., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 233., 234., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 259., 260., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 285., 286., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 311., 312., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 337., 338., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 505., 506., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 201., 202., 203., 204., 205., 206., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 215., 216., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 371., 372., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 397., 398., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 423., 424., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 449., 450., 449., 450., 449., 450., 449., 450., 449., 450., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 475., 476., 475., 476., 475., 476., 475., 476., 475., 476., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 501., 502., 501., 502., 501., 502.};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x13x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 307., 308., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 359., 360., 361., 362., 363., 364., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 497., 498., 499., 500., 501., 502., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {281., 282., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 309., 310., 311., 312., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 413., 414., 415., 416., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 465., 466., 467., 468., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 429., 430., 431., 432., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 481., 482., 483., 484., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 489., 490., 491., 492., 489., 490., 491., 492., 489., 490., 491., 492.};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x13x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {};
  const std::array<int, 4> in_shape = {{ 3, 14, 13, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  84.,  84.,  84.,  84.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  98.,  98.,  98.,  98.,  98., 104., 105., 106., 107., 108., 109., 110., 111., 112., 112., 112., 112., 112., 112., 118., 119., 120., 121., 122., 123., 124., 125., 126., 126., 126., 126., 126., 126., 132., 133., 134., 135., 136., 137., 138., 139., 140., 140., 140., 140., 140., 140., 146., 147., 148., 149., 150., 151., 152., 153., 154., 154., 154., 154., 154., 154., 160., 161., 162., 163., 164., 165., 166., 167., 168., 168., 168., 168., 168., 168., 174., 175., 176., 177., 178., 179., 180., 181., 182., 182., 182., 182., 182., 182., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 188., 189., 190., 191., 192., 193., 194., 195., 196., 196., 196., 196., 196., 196., 272., 273., 274., 275., 276., 277., 278., 279., 280., 280., 280., 280., 280., 280., 286., 287., 288., 289., 290., 291., 292., 293., 294., 294., 294., 294., 294., 294., 300., 301., 302., 303., 304., 305., 306., 307., 308., 308., 308., 308., 308., 308., 314., 315., 316., 317., 318., 319., 320., 321., 322., 322., 322., 322., 322., 322., 328., 329., 330., 331., 332., 333., 334., 335., 336., 336., 336., 336., 336., 336., 342., 343., 344., 345., 346., 347., 348., 349., 350., 350., 350., 350., 350., 350., 356., 357., 358., 359., 360., 361., 362., 363., 364., 364., 364., 364., 364., 364., 370., 371., 372., 373., 374., 375., 376., 377., 378., 378., 378., 378., 378., 378., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 384., 385., 386., 387., 388., 389., 390., 391., 392., 392., 392., 392., 392., 392., 468., 469., 470., 471., 472., 473., 474., 475., 476., 476., 476., 476., 476., 476., 482., 483., 484., 485., 486., 487., 488., 489., 490., 490., 490., 490., 490., 490., 496., 497., 498., 499., 500., 501., 502., 503., 504., 504., 504., 504., 504., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 504., 510., 511., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512.,  76.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x14x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 165., 166., 167., 168., 179., 180., 181., 182., 193., 194., 195., 196., 347., 348., 349., 350., 361., 362., 363., 364., 375., 376., 377., 378., 389., 390., 391., 392., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {151., 152., 153., 154., 155., 156., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 167., 168., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 195., 196., 207., 208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 223., 224., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 251., 252., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 277., 278., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 279., 280., 291., 292., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 307., 308., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 335., 336., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 363., 364., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 391., 392., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 503., 504., 503., 504., 503., 504., 503., 504., 503., 504., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 269., 270., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 271., 272., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 439., 440., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 467., 468., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 495., 496., 507., 508., 509., 510., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 151., 152.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x14x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 329., 330., 331., 332., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 385., 386., 387., 388., 389., 390., 391., 392., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, SAME3x14x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {301., 302., 303., 304., 305., 306., 307., 308., 309., 310., 311., 312., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 329., 330., 331., 332., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 333., 334., 335., 336., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 369., 370., 371., 372., 373., 374., 375., 376., 377., 378., 379., 380., 381., 382., 383., 384., 385., 386., 387., 388., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 389., 390., 391., 392., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 425., 426., 427., 428., 429., 430., 431., 432., 433., 434., 435., 436., 437., 438., 439., 440., 441., 442., 443., 444., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 445., 446., 447., 448., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 481., 482., 483., 484., 485., 486., 487., 488., 489., 490., 491., 492., 493., 494., 495., 496., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 493., 494., 495., 496., 493., 494., 495., 496., 493., 494., 495., 496., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 485., 486., 487., 488., 485., 486., 487., 488., 485., 486., 487., 488., 333., 334., 335., 336., 337., 338., 339., 340., 341., 342., 343., 344., 345., 346., 347., 348., 349., 350., 351., 352., 353., 354., 355., 356., 357., 358., 359., 360., 361., 362., 363., 364., 365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368., 365., 366., 367., 368., 389., 390., 391., 392., 393., 394., 395., 396., 397., 398., 399., 400., 401., 402., 403., 404., 405., 406., 407., 408., 409., 410., 411., 412., 413., 414., 415., 416., 417., 418., 419., 420., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 421., 422., 423., 424., 445., 446., 447., 448., 449., 450., 451., 452., 453., 454., 455., 456., 457., 458., 459., 460., 461., 462., 463., 464., 465., 466., 467., 468., 469., 470., 471., 472., 473., 474., 475., 476., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 477., 478., 479., 480., 501., 502., 503., 504., 505., 506., 507., 508., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 301., 302., 303., 304.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(MaxWindow11Stride1Forward, VALID3x14x14x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 497., 498., 499., 500., 501., 502., 503., 504., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512., 509., 510., 511., 512.};
  const std::array<int, 4> in_shape = {{ 3, 14, 14, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<11, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}

