/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "sycldnn/pooling/operators.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/pooling/pooling_fixture.h"

#include <array>
#include <vector>

using namespace sycldnn; // NOLINT(google-build-using-namespace)
using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using AvgWindow7Stride1Forward =
    PoolingFixture<typename Pair::FirstType, typename Pair::SecondType,
                   pooling::Average, pooling::Forward>;
TYPED_TEST_SUITE(AvgWindow7Stride1Forward, GTestTypePairs);
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14.5, 15. , 15.5, 16. , 17. , 17.5, 18. , 18.5, 18.5, 19. , 19.5, 20. , 21. , 21.5, 22. , 22.5, 22.5, 23. , 23.5, 24. , 25. , 25.5, 26. , 26.5, 26.5, 27. , 27.5, 28. , 29. , 29.5, 30. , 30.5, 34.5, 35. , 35.5, 36. , 37. , 37.5, 38. , 38.5, 38.5, 39. , 39.5, 40. , 41. , 41.5, 42. , 42.5, 42.5, 43. , 43.5, 44. , 45. , 45.5, 46. , 46.5, 46.5, 47. , 47.5, 48. , 49. , 49.5, 50. , 50.5};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28., 29., 36., 37.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  82.,  83.,  83.,  84.,  84.,  85.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  97.,  98.,  98.,  99.,  99., 100., 100., 101.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55., 56., 57., 58., 71., 72., 73., 74.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  57.,  58.,  59.,  60.,  59.,  60.,  61.,  62.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 103., 104., 105., 106., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 135., 136., 137., 138., 137., 138., 139., 140., 139., 140., 141., 142., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 163., 164., 165., 166., 165., 166., 167., 168., 167., 168., 169., 170., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180., 181., 182., 181., 182., 183., 184., 183., 184., 185., 186., 183., 184., 185., 186., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 197., 198., 197., 198., 199., 200., 199., 200., 201., 202.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 113., 114., 115., 116., 141., 142., 143., 144., 145., 146., 147., 148.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16. , 16.5, 17. , 17.5, 18.5, 19.5, 20. , 20.5, 21. , 20.5, 21. , 21.5, 22. , 23. , 24. , 24.5, 25. , 25.5, 25. , 25.5, 26. , 26.5, 27.5, 28.5, 29. , 29.5, 30. , 29.5, 30. , 30.5, 31. , 32. , 33. , 33.5, 34. , 34.5, 38.5, 39. , 39.5, 40. , 41. , 42. , 42.5, 43. , 43.5, 43. , 43.5, 44. , 44.5, 45.5, 46.5, 47. , 47.5, 48. , 47.5, 48. , 48.5, 49. , 50. , 51. , 51.5, 52. , 52.5, 52. , 52.5, 53. , 53.5, 54.5, 55.5, 56. , 56.5, 57. };
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31., 32., 33., 40., 41., 42.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  32.,  33.,  33.,  34.,  34.,  35.,  36.,  37.,  38.,  39.,  39.,  40.,  40.,  41.,  41.,  42.,  40.,  41.,  41.,  42.,  42.,  43.,  43.,  44.,  45.,  46.,  47.,  48.,  48.,  49.,  49.,  50.,  50.,  51.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  54.,  55.,  56.,  57.,  57.,  58.,  58.,  59.,  59.,  60.,  58.,  59.,  59.,  60.,  60.,  61.,  61.,  62.,  63.,  64.,  65.,  66.,  66.,  67.,  67.,  68.,  68.,  69.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  85.,  85.,  86.,  86.,  87.,  85.,  86.,  86.,  87.,  87.,  88.,  88.,  89.,  90.,  91.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 102., 103., 103., 104., 104., 105., 103., 104., 104., 105., 105., 106., 106., 107., 108., 109., 110., 111., 111., 112., 112., 113., 113., 114.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {61., 62., 63., 64., 65., 66., 79., 80., 81., 82., 83., 84.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  63.,  64.,  65.,  66.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  97.,  98.,  97.,  98.,  99., 100.,  99., 100., 101., 102.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 135., 136., 137., 138., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 203., 204., 205., 206., 205., 206., 207., 208., 207., 208., 209., 210., 205., 206., 207., 208., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 221., 222., 223., 224., 223., 224., 225., 226., 225., 226., 227., 228.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168.};
  const std::array<int, 4> in_shape = {{ 1, 8, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17.5, 18. , 18.5, 19. , 20. , 21. , 22. , 22.5, 23. , 23.5, 22.5, 23. , 23.5, 24. , 25. , 26. , 27. , 27.5, 28. , 28.5, 27.5, 28. , 28.5, 29. , 30. , 31. , 32. , 32.5, 33. , 33.5, 32.5, 33. , 33.5, 34. , 35. , 36. , 37. , 37.5, 38. , 38.5, 42.5, 43. , 43.5, 44. , 45. , 46. , 47. , 47.5, 48. , 48.5, 47.5, 48. , 48.5, 49. , 50. , 51. , 52. , 52.5, 53. , 53.5, 52.5, 53. , 53.5, 54. , 55. , 56. , 57. , 57.5, 58. , 58.5, 57.5, 58. , 58.5, 59. , 60. , 61. , 62. , 62.5, 63. , 63.5};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {34., 35., 36., 37., 44., 45., 46., 47.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  35.,  36.,  36.,  37.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  44.,  45.,  45.,  46.,  46.,  47.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,  54.,  55.,  55.,  56.,  56.,  57.,  54.,  55.,  55.,  56.,  56.,  57.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  64.,  65.,  65.,  66.,  66.,  67.,  64.,  65.,  65.,  66.,  66.,  67.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  94.,  95.,  95.,  96.,  96.,  97.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 105., 105., 106., 106., 107., 104., 105., 105., 106., 106., 107., 107., 108., 109., 110., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 114., 115., 115., 116., 116., 117., 117., 118., 119., 120., 121., 122., 123., 124., 124., 125., 125., 126., 126., 127.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {67., 68., 69., 70., 71., 72., 73., 74., 87., 88., 89., 90., 91., 92., 93., 94.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207., 208., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 233., 234., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 247., 248., 249., 250., 249., 250., 251., 252., 251., 252., 253., 254.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14.5, 15. , 15.5, 16. , 17. , 17.5, 18. , 18.5, 18.5, 19. , 19.5, 20. , 21. , 21.5, 22. , 22.5, 22.5, 23. , 23.5, 24. , 25. , 25.5, 26. , 26.5, 26.5, 27. , 27.5, 28. , 29. , 29.5, 30. , 30.5, 34.5, 35. , 35.5, 36. , 37. , 37.5, 38. , 38.5, 42.5, 43. , 43.5, 44. , 45. , 45.5, 46. , 46.5, 46.5, 47. , 47.5, 48. , 49. , 49.5, 50. , 50.5, 50.5, 51. , 51.5, 52. , 53. , 53.5, 54. , 54.5, 54.5, 55. , 55.5, 56. , 57. , 57.5, 58. , 58.5};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28., 29., 36., 37., 44., 45.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  97.,  98.,  98.,  99.,  99., 100., 100., 101., 100., 101., 101., 102., 102., 103., 103., 104., 105., 106., 106., 107., 107., 108., 108., 109., 108., 109., 109., 110., 110., 111., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {55., 56., 57., 58., 71., 72., 73., 74., 87., 88., 89., 90.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  57.,  58.,  59.,  60.,  59.,  60.,  61.,  62.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 103., 104., 105., 106., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 135., 136., 137., 138., 137., 138., 139., 140., 139., 140., 141., 142., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180., 181., 182., 181., 182., 183., 184., 183., 184., 185., 186., 183., 184., 185., 186., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 197., 198., 197., 198., 199., 200., 199., 200., 201., 202., 199., 200., 201., 202., 201., 202., 203., 204., 203., 204., 205., 206., 205., 206., 207., 208., 209., 210., 211., 212., 211., 212., 213., 214., 213., 214., 215., 216., 215., 216., 217., 218., 215., 216., 217., 218., 217., 218., 219., 220., 219., 220., 221., 222., 221., 222., 223., 224., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 113., 114., 115., 116., 141., 142., 143., 144., 145., 146., 147., 148., 173., 174., 175., 176., 177., 178., 179., 180.};
  const std::array<int, 4> in_shape = {{ 1, 9, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16. , 16.5, 17. , 17.5, 18.5, 19.5, 20. , 20.5, 21. , 20.5, 21. , 21.5, 22. , 23. , 24. , 24.5, 25. , 25.5, 25. , 25.5, 26. , 26.5, 27.5, 28.5, 29. , 29.5, 30. , 29.5, 30. , 30.5, 31. , 32. , 33. , 33.5, 34. , 34.5, 38.5, 39. , 39.5, 40. , 41. , 42. , 42.5, 43. , 43.5, 47.5, 48. , 48.5, 49. , 50. , 51. , 51.5, 52. , 52.5, 52. , 52.5, 53. , 53.5, 54.5, 55.5, 56. , 56.5, 57. , 56.5, 57. , 57.5, 58. , 59. , 60. , 60.5, 61. , 61.5, 61. , 61.5, 62. , 62.5, 63.5, 64.5, 65. , 65.5, 66. };
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31., 32., 33., 40., 41., 42., 49., 50., 51.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  32.,  33.,  33.,  34.,  34.,  35.,  36.,  37.,  38.,  39.,  39.,  40.,  40.,  41.,  41.,  42.,  40.,  41.,  41.,  42.,  42.,  43.,  43.,  44.,  45.,  46.,  47.,  48.,  48.,  49.,  49.,  50.,  50.,  51.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  54.,  55.,  56.,  57.,  57.,  58.,  58.,  59.,  59.,  60.,  58.,  59.,  59.,  60.,  60.,  61.,  61.,  62.,  63.,  64.,  65.,  66.,  66.,  67.,  67.,  68.,  68.,  69.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  85.,  85.,  86.,  86.,  87.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 102., 103., 103., 104., 104., 105., 103., 104., 104., 105., 105., 106., 106., 107., 108., 109., 110., 111., 111., 112., 112., 113., 113., 114., 112., 113., 113., 114., 114., 115., 115., 116., 117., 118., 119., 120., 120., 121., 121., 122., 122., 123., 121., 122., 122., 123., 123., 124., 124., 125., 126., 127., 128., 129., 129., 130., 130., 131., 131., 132.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  65.,  66.,  79.,  80.,  81.,  82.,  83.,  84.,  97.,  98.,  99., 100., 101., 102.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  63.,  64.,  65.,  66.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  97.,  98.,  97.,  98.,  99., 100.,  99., 100., 101., 102.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 135., 136., 137., 138., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 203., 204., 205., 206., 205., 206., 207., 208., 207., 208., 209., 210., 205., 206., 207., 208., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 221., 222., 223., 224., 223., 224., 225., 226., 225., 226., 227., 228., 223., 224., 225., 226., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 241., 242., 241., 242., 243., 244., 243., 244., 245., 246., 241., 242., 243., 244., 243., 244., 245., 246., 245., 246., 247., 248., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 257., 258., 259., 260., 259., 260., 261., 262., 261., 262., 263., 264.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204.};
  const std::array<int, 4> in_shape = {{ 1, 9, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17.5, 18. , 18.5, 19. , 20. , 21. , 22. , 22.5, 23. , 23.5, 22.5, 23. , 23.5, 24. , 25. , 26. , 27. , 27.5, 28. , 28.5, 27.5, 28. , 28.5, 29. , 30. , 31. , 32. , 32.5, 33. , 33.5, 32.5, 33. , 33.5, 34. , 35. , 36. , 37. , 37.5, 38. , 38.5, 42.5, 43. , 43.5, 44. , 45. , 46. , 47. , 47.5, 48. , 48.5, 52.5, 53. , 53.5, 54. , 55. , 56. , 57. , 57.5, 58. , 58.5, 57.5, 58. , 58.5, 59. , 60. , 61. , 62. , 62.5, 63. , 63.5, 62.5, 63. , 63.5, 64. , 65. , 66. , 67. , 67.5, 68. , 68.5, 67.5, 68. , 68.5, 69. , 70. , 71. , 72. , 72.5, 73. , 73.5};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {34., 35., 36., 37., 44., 45., 46., 47., 54., 55., 56., 57.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  35.,  36.,  36.,  37.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  44.,  45.,  45.,  46.,  46.,  47.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,  54.,  55.,  55.,  56.,  56.,  57.,  54.,  55.,  55.,  56.,  56.,  57.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  64.,  65.,  65.,  66.,  66.,  67.,  64.,  65.,  65.,  66.,  66.,  67.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  94.,  95.,  95.,  96.,  96.,  97., 104., 105., 105., 106., 106., 107., 107., 108., 109., 110., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 114., 115., 115., 116., 116., 117., 117., 118., 119., 120., 121., 122., 123., 124., 124., 125., 125., 126., 126., 127., 124., 125., 125., 126., 126., 127., 127., 128., 129., 130., 131., 132., 133., 134., 134., 135., 135., 136., 136., 137., 134., 135., 135., 136., 136., 137., 137., 138., 139., 140., 141., 142., 143., 144., 144., 145., 145., 146., 146., 147.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94., 107., 108., 109., 110., 111., 112., 113., 114.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 233., 234., 235., 236., 237., 238., 239., 240., 241., 242., 243., 244., 245., 246., 247., 248., 247., 248., 249., 250., 249., 250., 251., 252., 251., 252., 253., 254., 247., 248., 249., 250., 249., 250., 251., 252., 251., 252., 253., 254., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 267., 268., 269., 270., 269., 270., 271., 272., 271., 272., 273., 274., 267., 268., 269., 270., 269., 270., 271., 272., 271., 272., 273., 274., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 289., 290., 289., 290., 291., 292., 291., 292., 293., 294.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228.};
  const std::array<int, 4> in_shape = {{ 1, 9, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14.5, 15. , 15.5, 16. , 17. , 17.5, 18. , 18.5, 18.5, 19. , 19.5, 20. , 21. , 21.5, 22. , 22.5, 22.5, 23. , 23.5, 24. , 25. , 25.5, 26. , 26.5, 26.5, 27. , 27.5, 28. , 29. , 29.5, 30. , 30.5, 34.5, 35. , 35.5, 36. , 37. , 37.5, 38. , 38.5, 42.5, 43. , 43.5, 44. , 45. , 45.5, 46. , 46.5, 50.5, 51. , 51.5, 52. , 53. , 53.5, 54. , 54.5, 54.5, 55. , 55.5, 56. , 57. , 57.5, 58. , 58.5, 58.5, 59. , 59.5, 60. , 61. , 61.5, 62. , 62.5, 62.5, 63. , 63.5, 64. , 65. , 65.5, 66. , 66.5};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28., 29., 36., 37., 44., 45., 52., 53.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93., 100., 101., 101., 102., 102., 103., 103., 104., 105., 106., 106., 107., 107., 108., 108., 109., 108., 109., 109., 110., 110., 111., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 116., 117., 117., 118., 118., 119., 119., 120., 121., 122., 122., 123., 123., 124., 124., 125., 124., 125., 125., 126., 126., 127., 127., 128., 129., 130., 130., 131., 131., 132., 132., 133.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90., 103., 104., 105., 106.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  57.,  58.,  59.,  60.,  59.,  60.,  61.,  62.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 103., 104., 105., 106., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 135., 136., 137., 138., 137., 138., 139., 140., 139., 140., 141., 142., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180., 181., 182., 181., 182., 183., 184., 183., 184., 185., 186., 199., 200., 201., 202., 201., 202., 203., 204., 203., 204., 205., 206., 205., 206., 207., 208., 209., 210., 211., 212., 211., 212., 213., 214., 213., 214., 215., 216., 215., 216., 217., 218., 215., 216., 217., 218., 217., 218., 219., 220., 219., 220., 221., 222., 221., 222., 223., 224., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 231., 232., 233., 234., 233., 234., 235., 236., 235., 236., 237., 238., 237., 238., 239., 240., 241., 242., 243., 244., 243., 244., 245., 246., 245., 246., 247., 248., 247., 248., 249., 250., 247., 248., 249., 250., 249., 250., 251., 252., 251., 252., 253., 254., 253., 254., 255., 256., 257., 258., 259., 260., 259., 260., 261., 262., 261., 262., 263., 264., 263., 264., 265., 266.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 113., 114., 115., 116., 141., 142., 143., 144., 145., 146., 147., 148., 173., 174., 175., 176., 177., 178., 179., 180., 205., 206., 207., 208., 209., 210., 211., 212.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16. , 16.5, 17. , 17.5, 18.5, 19.5, 20. , 20.5, 21. , 20.5, 21. , 21.5, 22. , 23. , 24. , 24.5, 25. , 25.5, 25. , 25.5, 26. , 26.5, 27.5, 28.5, 29. , 29.5, 30. , 29.5, 30. , 30.5, 31. , 32. , 33. , 33.5, 34. , 34.5, 38.5, 39. , 39.5, 40. , 41. , 42. , 42.5, 43. , 43.5, 47.5, 48. , 48.5, 49. , 50. , 51. , 51.5, 52. , 52.5, 56.5, 57. , 57.5, 58. , 59. , 60. , 60.5, 61. , 61.5, 61. , 61.5, 62. , 62.5, 63.5, 64.5, 65. , 65.5, 66. , 65.5, 66. , 66.5, 67. , 68. , 69. , 69.5, 70. , 70.5, 70. , 70.5, 71. , 71.5, 72.5, 73.5, 74. , 74.5, 75. };
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31., 32., 33., 40., 41., 42., 49., 50., 51., 58., 59., 60.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  32.,  33.,  33.,  34.,  34.,  35.,  36.,  37.,  38.,  39.,  39.,  40.,  40.,  41.,  41.,  42.,  40.,  41.,  41.,  42.,  42.,  43.,  43.,  44.,  45.,  46.,  47.,  48.,  48.,  49.,  49.,  50.,  50.,  51.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  54.,  55.,  56.,  57.,  57.,  58.,  58.,  59.,  59.,  60.,  58.,  59.,  59.,  60.,  60.,  61.,  61.,  62.,  63.,  64.,  65.,  66.,  66.,  67.,  67.,  68.,  68.,  69.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  85.,  85.,  86.,  86.,  87.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 102., 103., 103., 104., 104., 105., 112., 113., 113., 114., 114., 115., 115., 116., 117., 118., 119., 120., 120., 121., 121., 122., 122., 123., 121., 122., 122., 123., 123., 124., 124., 125., 126., 127., 128., 129., 129., 130., 130., 131., 131., 132., 130., 131., 131., 132., 132., 133., 133., 134., 135., 136., 137., 138., 138., 139., 139., 140., 140., 141., 139., 140., 140., 141., 141., 142., 142., 143., 144., 145., 146., 147., 147., 148., 148., 149., 149., 150.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  65.,  66.,  79.,  80.,  81.,  82.,  83.,  84.,  97.,  98.,  99., 100., 101., 102., 115., 116., 117., 118., 119., 120.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  63.,  64.,  65.,  66.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  79.,  80.,  81.,  82.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,  96.,  95.,  96.,  97.,  98.,  97.,  98.,  99., 100.,  99., 100., 101., 102.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 114., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 135., 136., 137., 138., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 203., 204., 205., 206., 205., 206., 207., 208., 207., 208., 209., 210., 223., 224., 225., 226., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240., 239., 240., 241., 242., 241., 242., 243., 244., 243., 244., 245., 246., 241., 242., 243., 244., 243., 244., 245., 246., 245., 246., 247., 248., 247., 248., 249., 250., 251., 252., 253., 254., 255., 256., 257., 258., 257., 258., 259., 260., 259., 260., 261., 262., 261., 262., 263., 264., 259., 260., 261., 262., 261., 262., 263., 264., 263., 264., 265., 266., 265., 266., 267., 268., 269., 270., 271., 272., 273., 274., 275., 276., 275., 276., 277., 278., 277., 278., 279., 280., 279., 280., 281., 282., 277., 278., 279., 280., 279., 280., 281., 282., 281., 282., 283., 284., 283., 284., 285., 286., 287., 288., 289., 290., 291., 292., 293., 294., 293., 294., 295., 296., 295., 296., 297., 298., 297., 298., 299., 300.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121., 122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132., 157., 158., 159., 160., 161., 162., 163., 164., 165., 166., 167., 168., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239., 240.};
  const std::array<int, 4> in_shape = {{ 1, 10, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17.5, 18. , 18.5, 19. , 20. , 21. , 22. , 22.5, 23. , 23.5, 22.5, 23. , 23.5, 24. , 25. , 26. , 27. , 27.5, 28. , 28.5, 27.5, 28. , 28.5, 29. , 30. , 31. , 32. , 32.5, 33. , 33.5, 32.5, 33. , 33.5, 34. , 35. , 36. , 37. , 37.5, 38. , 38.5, 42.5, 43. , 43.5, 44. , 45. , 46. , 47. , 47.5, 48. , 48.5, 52.5, 53. , 53.5, 54. , 55. , 56. , 57. , 57.5, 58. , 58.5, 62.5, 63. , 63.5, 64. , 65. , 66. , 67. , 67.5, 68. , 68.5, 67.5, 68. , 68.5, 69. , 70. , 71. , 72. , 72.5, 73. , 73.5, 72.5, 73. , 73.5, 74. , 75. , 76. , 77. , 77.5, 78. , 78.5, 77.5, 78. , 78.5, 79. , 80. , 81. , 82. , 82.5, 83. , 83.5};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {34., 35., 36., 37., 44., 45., 46., 47., 54., 55., 56., 57., 64., 65., 66., 67.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  35.,  36.,  36.,  37.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  44.,  45.,  45.,  46.,  46.,  47.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,  54.,  55.,  55.,  56.,  56.,  57.,  54.,  55.,  55.,  56.,  56.,  57.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  64.,  65.,  65.,  66.,  66.,  67.,  64.,  65.,  65.,  66.,  66.,  67.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  94.,  95.,  95.,  96.,  96.,  97., 104., 105., 105., 106., 106., 107., 107., 108., 109., 110., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 124., 125., 125., 126., 126., 127., 127., 128., 129., 130., 131., 132., 133., 134., 134., 135., 135., 136., 136., 137., 134., 135., 135., 136., 136., 137., 137., 138., 139., 140., 141., 142., 143., 144., 144., 145., 145., 146., 146., 147., 144., 145., 145., 146., 146., 147., 147., 148., 149., 150., 151., 152., 153., 154., 154., 155., 155., 156., 156., 157., 154., 155., 155., 156., 156., 157., 157., 158., 159., 160., 161., 162., 163., 164., 164., 165., 165., 166., 166., 167.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94., 107., 108., 109., 110., 111., 112., 113., 114., 127., 128., 129., 130., 131., 132., 133., 134.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME1x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 107., 108., 109., 110., 109., 110., 111., 112., 111., 112., 113., 114., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127., 128., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 127., 128., 129., 130., 129., 130., 131., 132., 131., 132., 133., 134., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 191., 192., 193., 194., 207., 208., 209., 210., 209., 210., 211., 212., 211., 212., 213., 214., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 227., 228., 229., 230., 229., 230., 231., 232., 231., 232., 233., 234., 247., 248., 249., 250., 249., 250., 251., 252., 251., 252., 253., 254., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268., 267., 268., 269., 270., 269., 270., 271., 272., 271., 272., 273., 274., 267., 268., 269., 270., 269., 270., 271., 272., 271., 272., 273., 274., 273., 274., 275., 276., 277., 278., 279., 280., 281., 282., 283., 284., 285., 286., 287., 288., 287., 288., 289., 290., 289., 290., 291., 292., 291., 292., 293., 294., 287., 288., 289., 290., 289., 290., 291., 292., 291., 292., 293., 294., 293., 294., 295., 296., 297., 298., 299., 300., 301., 302., 303., 304., 305., 306., 307., 308., 307., 308., 309., 310., 309., 310., 311., 312., 311., 312., 313., 314., 307., 308., 309., 310., 309., 310., 311., 312., 311., 312., 313., 314., 313., 314., 315., 316., 317., 318., 319., 320., 321., 322., 323., 324., 325., 326., 327., 328., 327., 328., 329., 330., 329., 330., 331., 332., 331., 332., 333., 334.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID1x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143., 144., 145., 146., 147., 148., 173., 174., 175., 176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223., 224., 225., 226., 227., 228., 253., 254., 255., 256., 257., 258., 259., 260., 261., 262., 263., 264., 265., 266., 267., 268.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 14.5,  15. ,  15.5,  16. ,  17. ,  17.5,  18. ,  18.5,  18.5,  19. ,  19.5,  20. ,  21. ,  21.5,  22. ,  22.5,  22.5,  23. ,  23.5,  24. ,  25. ,  25.5,  26. ,  26.5,  26.5,  27. ,  27.5,  28. ,  29. ,  29.5,  30. ,  30.5,  34.5,  35. ,  35.5,  36. ,  37. ,  37.5,  38. ,  38.5,  38.5,  39. ,  39.5,  40. ,  41. ,  41.5,  42. ,  42.5,  42.5,  43. ,  43.5,  44. ,  45. ,  45.5,  46. ,  46.5,  46.5,  47. ,  47.5,  48. ,  49. ,  49.5,  50. ,  50.5,  78.5,  79. ,  79.5,  80. ,  81. ,  81.5,  82. ,  82.5,  82.5,  83. ,  83.5,  84. ,  85. ,  85.5,  86. ,  86.5,  86.5,  87. ,  87.5,  88. ,  89. ,  89.5,  90. ,  90.5,  90.5,  91. ,  91.5,  92. ,  93. ,  93.5,  94. ,  94.5,  98.5,  99. ,  99.5, 100. , 101. , 101.5, 102. , 102.5, 102.5, 103. , 103.5, 104. , 105. , 105.5, 106. , 106.5, 106.5, 107. , 107.5, 108. , 109. , 109.5, 110. , 110.5, 110.5, 111. , 111.5, 112. , 113. , 113.5, 114. , 114.5, 142.5, 143. , 143.5, 144. , 145. , 145.5, 146. , 146.5, 146.5, 147. , 147.5, 148. , 149. , 149.5, 150. , 150.5, 150.5, 151. , 151.5, 152. , 153. , 153.5, 154. , 154.5, 154.5, 155. , 155.5, 156. , 157. , 157.5, 158. , 158.5, 162.5, 163. , 163.5, 164. , 165. , 165.5, 166. , 166.5, 166.5, 167. , 167.5, 168. , 169. , 169.5, 170. , 170.5, 170.5, 171. , 171.5, 172. , 173. , 173.5, 174. , 174.5, 174.5, 175. , 175.5, 176. , 177. , 177.5, 178. , 178.5};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  36.,  37.,  92.,  93., 100., 101., 156., 157., 164., 165.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  82.,  83.,  83.,  84.,  84.,  85.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  97.,  98.,  98.,  99.,  99., 100., 100., 101., 156., 157., 157., 158., 158., 159., 159., 160., 161., 162., 162., 163., 163., 164., 164., 165., 164., 165., 165., 166., 166., 167., 167., 168., 169., 170., 170., 171., 171., 172., 172., 173., 172., 173., 173., 174., 174., 175., 175., 176., 177., 178., 178., 179., 179., 180., 180., 181., 180., 181., 181., 182., 182., 183., 183., 184., 185., 186., 186., 187., 187., 188., 188., 189., 196., 197., 197., 198., 198., 199., 199., 200., 201., 202., 202., 203., 203., 204., 204., 205., 204., 205., 205., 206., 206., 207., 207., 208., 209., 210., 210., 211., 211., 212., 212., 213., 212., 213., 213., 214., 214., 215., 215., 216., 217., 218., 218., 219., 219., 220., 220., 221., 220., 221., 221., 222., 222., 223., 223., 224., 225., 226., 226., 227., 227., 228., 228., 229., 284., 285., 285., 286., 286., 287., 287., 288., 289., 290., 290., 291., 291., 292., 292., 293., 292., 293., 293., 294., 294., 295., 295., 296., 297., 298., 298., 299., 299., 300., 300., 301., 300., 301., 301., 302., 302., 303., 303., 304., 305., 306., 306., 307., 307., 308., 308., 309., 308., 309., 309., 310., 310., 311., 311., 312., 313., 314., 314., 315., 315., 316., 316., 317., 324., 325., 325., 326., 326., 327., 327., 328., 329., 330., 330., 331., 331., 332., 332., 333., 332., 333., 333., 334., 334., 335., 335., 336., 337., 338., 338., 339., 339., 340., 340., 341., 340., 341., 341., 342., 342., 343., 343., 344., 345., 346., 346., 347., 347., 348., 348., 349., 348., 349., 349., 350., 350., 351., 351., 352., 353., 354., 354., 355., 355., 356., 356., 357.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  71.,  72.,  73.,  74., 183., 184., 185., 186., 199., 200., 201., 202., 311., 312., 313., 314., 327., 328., 329., 330.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  57.,  58.,  59.,  60.,  59.,  60.,  61.,  62.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 103., 104., 105., 106., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 135., 136., 137., 138., 137., 138., 139., 140., 139., 140., 141., 142., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 163., 164., 165., 166., 165., 166., 167., 168., 167., 168., 169., 170., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180., 181., 182., 181., 182., 183., 184., 183., 184., 185., 186., 183., 184., 185., 186., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 197., 198., 197., 198., 199., 200., 199., 200., 201., 202., 311., 312., 313., 314., 313., 314., 315., 316., 315., 316., 317., 318., 317., 318., 319., 320., 321., 322., 323., 324., 323., 324., 325., 326., 325., 326., 327., 328., 327., 328., 329., 330., 327., 328., 329., 330., 329., 330., 331., 332., 331., 332., 333., 334., 333., 334., 335., 336., 337., 338., 339., 340., 339., 340., 341., 342., 341., 342., 343., 344., 343., 344., 345., 346., 343., 344., 345., 346., 345., 346., 347., 348., 347., 348., 349., 350., 349., 350., 351., 352., 353., 354., 355., 356., 355., 356., 357., 358., 357., 358., 359., 360., 359., 360., 361., 362., 359., 360., 361., 362., 361., 362., 363., 364., 363., 364., 365., 366., 365., 366., 367., 368., 369., 370., 371., 372., 371., 372., 373., 374., 373., 374., 375., 376., 375., 376., 377., 378., 391., 392., 393., 394., 393., 394., 395., 396., 395., 396., 397., 398., 397., 398., 399., 400., 401., 402., 403., 404., 403., 404., 405., 406., 405., 406., 407., 408., 407., 408., 409., 410., 407., 408., 409., 410., 409., 410., 411., 412., 411., 412., 413., 414., 413., 414., 415., 416., 417., 418., 419., 420., 419., 420., 421., 422., 421., 422., 423., 424., 423., 424., 425., 426., 423., 424., 425., 426., 425., 426., 427., 428., 427., 428., 429., 430., 429., 430., 431., 432., 433., 434., 435., 436., 435., 436., 437., 438., 437., 438., 439., 440., 439., 440., 441., 442., 439., 440., 441., 442., 441., 442., 443., 444., 443., 444., 445., 446., 445., 446., 447., 448., 449., 450., 451., 452., 451., 452., 453., 454., 453., 454., 455., 456., 455., 456., 457., 458.,  55.,  56.,  57.,  58.,  57.,  58.,  59.,  60.,  59.,  60.,  61.,  62.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  67.,  68.,  69.,  70.,  69.,  70.,  71.,  72.,  71.,  72.,  73.,  74.,  71.,  72.,  73.,  74.,  73.,  74.,  75.,  76.,  75.,  76.,  77.,  78.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,  84.,  83.,  84.,  85.,  86.,  85.,  86.,  87.,  88.,  87.,  88.,  89.,  90.,  87.,  88.,  89.,  90.,  89.,  90.,  91.,  92.,  91.,  92.,  93.,  94.,  93.,  94.,  95.,  96.,  97.,  98.,  99., 100.,  99., 100., 101., 102., 101., 102., 103., 104., 103., 104., 105., 106., 103., 104., 105., 106., 105., 106., 107., 108., 107., 108., 109., 110., 109., 110., 111., 112., 113., 114., 115., 116., 115., 116., 117., 118., 117., 118., 119., 120., 119., 120., 121., 122., 135., 136., 137., 138., 137., 138., 139., 140., 139., 140., 141., 142., 141., 142., 143., 144., 145., 146., 147., 148., 147., 148., 149., 150., 149., 150., 151., 152., 151., 152., 153., 154., 151., 152., 153., 154., 153., 154., 155., 156., 155., 156., 157., 158., 157., 158., 159., 160., 161., 162., 163., 164., 163., 164., 165., 166., 165., 166., 167., 168., 167., 168., 169., 170., 167., 168., 169., 170., 169., 170., 171., 172., 171., 172., 173., 174., 173., 174., 175., 176., 177., 178., 179., 180., 179., 180., 181., 182., 181., 182., 183., 184., 183., 184., 185., 186., 183., 184., 185., 186., 185., 186., 187., 188., 187., 188., 189., 190., 189., 190., 191., 192., 193., 194., 195., 196., 195., 196., 197., 198., 197., 198., 199., 200., 199., 200., 201., 202.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109., 110., 111., 112., 113., 114., 115., 116., 141., 142., 143., 144., 145., 146., 147., 148., 365., 366., 367., 368., 369., 370., 371., 372., 397., 398., 399., 400., 401., 402., 403., 404., 109., 110., 111., 112., 113., 114., 115., 116., 141., 142., 143., 144., 145., 146., 147., 148.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 16. ,  16.5,  17. ,  17.5,  18.5,  19.5,  20. ,  20.5,  21. ,  20.5,  21. ,  21.5,  22. ,  23. ,  24. ,  24.5,  25. ,  25.5,  25. ,  25.5,  26. ,  26.5,  27.5,  28.5,  29. ,  29.5,  30. ,  29.5,  30. ,  30.5,  31. ,  32. ,  33. ,  33.5,  34. ,  34.5,  38.5,  39. ,  39.5,  40. ,  41. ,  42. ,  42.5,  43. ,  43.5,  43. ,  43.5,  44. ,  44.5,  45.5,  46.5,  47. ,  47.5,  48. ,  47.5,  48. ,  48.5,  49. ,  50. ,  51. ,  51.5,  52. ,  52.5,  52. ,  52.5,  53. ,  53.5,  54.5,  55.5,  56. ,  56.5,  57. ,  88. ,  88.5,  89. ,  89.5,  90.5,  91.5,  92. ,  92.5,  93. ,  92.5,  93. ,  93.5,  94. ,  95. ,  96. ,  96.5,  97. ,  97.5,  97. ,  97.5,  98. ,  98.5,  99.5, 100.5, 101. , 101.5, 102. , 101.5, 102. , 102.5, 103. , 104. , 105. , 105.5, 106. , 106.5, 110.5, 111. , 111.5, 112. , 113. , 114. , 114.5, 115. , 115.5, 115. , 115.5, 116. , 116.5, 117.5, 118.5, 119. , 119.5, 120. , 119.5, 120. , 120.5, 121. , 122. , 123. , 123.5, 124. , 124.5, 124. , 124.5, 125. , 125.5, 126.5, 127.5, 128. , 128.5, 129. , 160. , 160.5, 161. , 161.5, 162.5, 163.5, 164. , 164.5, 165. , 164.5, 165. , 165.5, 166. , 167. , 168. , 168.5, 169. , 169.5, 169. , 169.5, 170. , 170.5, 171.5, 172.5, 173. , 173.5, 174. , 173.5, 174. , 174.5, 175. , 176. , 177. , 177.5, 178. , 178.5, 182.5, 183. , 183.5, 184. , 185. , 186. , 186.5, 187. , 187.5, 187. , 187.5, 188. , 188.5, 189.5, 190.5, 191. , 191.5, 192. , 191.5, 192. , 192.5, 193. , 194. , 195. , 195.5, 196. , 196.5, 196. , 196.5, 197. , 197.5, 198.5, 199.5, 200. , 200.5, 201. };
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  33.,  40.,  41.,  42., 103., 104., 105., 112., 113., 114., 175., 176., 177., 184., 185., 186.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  32.,  33.,  33.,  34.,  34.,  35.,  36.,  37.,  38.,  39.,  39.,  40.,  40.,  41.,  41.,  42.,  40.,  41.,  41.,  42.,  42.,  43.,  43.,  44.,  45.,  46.,  47.,  48.,  48.,  49.,  49.,  50.,  50.,  51.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  54.,  55.,  56.,  57.,  57.,  58.,  58.,  59.,  59.,  60.,  58.,  59.,  59.,  60.,  60.,  61.,  61.,  62.,  63.,  64.,  65.,  66.,  66.,  67.,  67.,  68.,  68.,  69.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  85.,  85.,  86.,  86.,  87.,  85.,  86.,  86.,  87.,  87.,  88.,  88.,  89.,  90.,  91.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 102., 103., 103., 104., 104., 105., 103., 104., 104., 105., 105., 106., 106., 107., 108., 109., 110., 111., 111., 112., 112., 113., 113., 114., 175., 176., 176., 177., 177., 178., 178., 179., 180., 181., 182., 183., 183., 184., 184., 185., 185., 186., 184., 185., 185., 186., 186., 187., 187., 188., 189., 190., 191., 192., 192., 193., 193., 194., 194., 195., 193., 194., 194., 195., 195., 196., 196., 197., 198., 199., 200., 201., 201., 202., 202., 203., 203., 204., 202., 203., 203., 204., 204., 205., 205., 206., 207., 208., 209., 210., 210., 211., 211., 212., 212., 213., 220., 221., 221., 222., 222., 223., 223., 224., 225., 226., 227., 228., 228., 229., 229., 230., 230., 231., 229., 230., 230., 231., 231., 232., 232., 233., 234., 235., 236., 237., 237., 238., 238., 239., 239., 240., 238., 239., 239., 240., 240., 241., 241., 242., 243., 244., 245., 246., 246., 247., 247., 248., 248., 249., 247., 248., 248., 249., 249., 250., 250., 251., 252., 253., 254., 255., 255., 256., 256., 257., 257., 258., 319., 320., 320., 321., 321., 322., 322., 323., 324., 325., 326., 327., 327., 328., 328., 329., 329., 330., 328., 329., 329., 330., 330., 331., 331., 332., 333., 334., 335., 336., 336., 337., 337., 338., 338., 339., 337., 338., 338., 339., 339., 340., 340., 341., 342., 343., 344., 345., 345., 346., 346., 347., 347., 348., 346., 347., 347., 348., 348., 349., 349., 350., 351., 352., 353., 354., 354., 355., 355., 356., 356., 357., 364., 365., 365., 366., 366., 367., 367., 368., 369., 370., 371., 372., 372., 373., 373., 374., 374., 375., 373., 374., 374., 375., 375., 376., 376., 377., 378., 379., 380., 381., 381., 382., 382., 383., 383., 384., 382., 383., 383., 384., 384., 385., 385., 386., 387., 388., 389., 390., 390., 391., 391., 392., 392., 393., 391., 392., 392., 393., 393., 394., 394., 395., 396., 397., 398., 399., 399., 400., 400., 401., 401., 402.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  65.,  66.,  79.,  80.,  81.,  82.,  83.,  84., 205., 206., 207., 208., 209., 210., 223., 224., 225., 226., 227., 228., 349., 350., 351., 352., 353., 354., 367., 368., 369., 370., 371., 372.};
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.              ,  62.              ,  63.              ,  64.              ,  63.              ,  64.              ,  65.              ,  66.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  77.              ,  78.              ,  79.              ,  80.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  95.              ,  96.              ,  95.              ,  96.              ,  97.              ,  98.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 135.              , 136.              , 137.              , 138.              , 151.              , 152.              , 153.              , 154.              , 153.              , 154.              , 155.              , 156.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 223.              , 224.              , 225.              , 226.              , 225.              , 226.              , 227.              , 228.              , 349.              , 350.              , 351.              , 352.              , 351.              , 352.              , 353.              , 354.              , 353.              , 354.              , 355.              , 356.              , 355.              , 356.              , 357.              , 358.              , 359.              , 360.              , 361.              , 362.              , 363.              , 364.              , 365.              , 366.              , 365.              , 366.              , 367.              , 368.              , 367.              , 368.              , 369.              , 370.              , 369.              , 370.              , 371.              , 372.              , 367.              , 368.              , 369.              , 370.              , 369.              , 370.              , 371.              , 372.              , 371.              , 372.              , 373.              , 374.              , 373.              , 374.              , 375.              , 376.              , 377.              , 378.              , 379.              , 380.              , 381.              , 382.              , 383.              , 384.              , 383.              , 384.              , 385.              , 386.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              , 395.              , 396.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 401.              , 402.              , 403.              , 404.              , 403.              , 404.              , 405.              , 406.              , 405.              , 406.              , 407.              , 408.              , 366.42857142857144, 367.42857142857144, 368.42857142857144, 369.42857142857144, 361.1142857142857 , 362.1142857142857 , 363.1142857142857 , 364.1142857142857 , 358.23809523809524, 359.23809523809524, 360.23809523809524, 361.23809523809524, 356.7551020408163 , 357.7551020408163 , 358.7551020408163 , 359.7551020408163 , 350.3061224489796 , 351.3061224489796 , 352.3061224489796 , 353.3061224489796 , 343.85714285714283, 344.85714285714283, 345.85714285714283, 346.85714285714283, 345.85714285714283, 346.85714285714283, 347.85714285714283, 348.85714285714283, 347.85714285714283, 348.85714285714283, 349.85714285714283, 350.85714285714283, 349.85714285714283, 350.85714285714283, 351.85714285714283, 352.85714285714283, 329.2857142857143 , 330.2857142857143 , 331.2857142857143 , 332.2857142857143 , 323.9714285714286 , 324.9714285714286 , 325.9714285714286 , 326.9714285714286 , 321.0952380952381 , 322.0952380952381 , 323.0952380952381 , 324.0952380952381 , 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916, 313.16326530612247, 314.16326530612247, 315.16326530612247, 316.16326530612247, 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 312.7142857142857 , 313.7142857142857 , 314.7142857142857 , 315.7142857142857 , 329.              , 330.              , 331.              , 332.              , 322.46666666666664, 323.46666666666664, 324.46666666666664, 325.46666666666664, 318.77777777777777, 319.77777777777777, 320.77777777777777, 321.77777777777777, 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 308.5238095238095 , 309.5238095238095 , 310.5238095238095 , 311.5238095238095 , 300.3333333333333 , 301.3333333333333 , 302.3333333333333 , 303.3333333333333 , 302.3333333333333 , 303.3333333333333 , 304.3333333333333 , 305.3333333333333 , 304.3333333333333 , 305.3333333333333 , 306.3333333333333 , 307.3333333333333 , 306.3333333333333 , 307.3333333333333 , 308.3333333333333 , 309.3333333333333 , 321.4             , 322.4             , 323.4             , 324.4             , 313.16            , 314.16            , 315.16            , 316.16            , 308.3333333333333 , 309.3333333333333 , 310.3333333333333 , 311.3333333333333 , 305.45714285714286, 306.45714285714286, 307.45714285714286, 308.45714285714286, 294.8285714285714 , 295.8285714285714 , 296.8285714285714 , 297.8285714285714 , 284.2             , 285.2             , 286.2             , 287.2             , 286.2             , 287.2             , 288.2             , 289.2             , 288.2             , 289.2             , 290.2             , 291.2             , 290.2             , 291.2             , 292.2             , 293.2             , 301.              , 302.              , 303.              , 304.              , 290.2             , 291.2             , 292.2             , 293.2             , 283.6666666666667 , 284.6666666666667 , 285.6666666666667 , 286.6666666666667 , 279.57142857142856, 280.57142857142856, 281.57142857142856, 282.57142857142856, 265.2857142857143 , 266.2857142857143 , 267.2857142857143 , 268.2857142857143 , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 143.              , 144.              , 145.              , 146.              , 145.              , 146.              , 147.              , 148.              , 143.              , 144.              , 145.              , 146.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 153.              , 154.              , 155.              , 156.              , 157.              , 158.              , 159.              , 160.              , 159.              , 160.              , 161.              , 162.              , 161.              , 162.              , 163.              , 164.              , 163.              , 164.              , 165.              , 166.              , 161.              , 162.              , 163.              , 164.              , 163.              , 164.              , 165.              , 166.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 171.              , 172.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 183.              , 184.              , 185.              , 186.              , 185.              , 186.              , 187.              , 188.              , 189.              , 190.              , 191.              , 192.              , 193.              , 194.              , 195.              , 196.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 283.              , 284.              , 285.              , 286.              , 285.              , 286.              , 287.              , 288.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              };
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 356.7551020408163 , 357.7551020408163 , 358.7551020408163 , 359.7551020408163 , 350.3061224489796 , 351.3061224489796 , 352.3061224489796 , 353.3061224489796 , 343.85714285714283, 344.85714285714283, 345.85714285714283, 346.85714285714283, 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916, 313.16326530612247, 314.16326530612247, 315.16326530612247, 316.16326530612247, 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 185.              , 186.              , 187.              , 188.              , 189.              , 190.              , 191.              , 192.              , 193.              , 194.              , 195.              , 196.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 229.              , 230.              , 231.              , 232.              };
  const std::array<int, 4> in_shape = {{ 3, 8, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 17.5,  18. ,  18.5,  19. ,  20. ,  21. ,  22. ,  22.5,  23. ,  23.5,  22.5,  23. ,  23.5,  24. ,  25. ,  26. ,  27. ,  27.5,  28. ,  28.5,  27.5,  28. ,  28.5,  29. ,  30. ,  31. ,  32. ,  32.5,  33. ,  33.5,  32.5,  33. ,  33.5,  34. ,  35. ,  36. ,  37. ,  37.5,  38. ,  38.5,  42.5,  43. ,  43.5,  44. ,  45. ,  46. ,  47. ,  47.5,  48. ,  48.5,  47.5,  48. ,  48.5,  49. ,  50. ,  51. ,  52. ,  52.5,  53. ,  53.5,  52.5,  53. ,  53.5,  54. ,  55. ,  56. ,  57. ,  57.5,  58. ,  58.5,  57.5,  58. ,  58.5,  59. ,  60. ,  61. ,  62. ,  62.5,  63. ,  63.5,  97.5,  98. ,  98.5,  99. , 100. , 101. , 102. , 102.5, 103. , 103.5, 102.5, 103. , 103.5, 104. , 105. , 106. , 107. , 107.5, 108. , 108.5, 107.5, 108. , 108.5, 109. , 110. , 111. , 112. , 112.5, 113. , 113.5, 112.5, 113. , 113.5, 114. , 115. , 116. , 117. , 117.5, 118. , 118.5, 122.5, 123. , 123.5, 124. , 125. , 126. , 127. , 127.5, 128. , 128.5, 127.5, 128. , 128.5, 129. , 130. , 131. , 132. , 132.5, 133. , 133.5, 132.5, 133. , 133.5, 134. , 135. , 136. , 137. , 137.5, 138. , 138.5, 137.5, 138. , 138.5, 139. , 140. , 141. , 142. , 142.5, 143. , 143.5, 177.5, 178. , 178.5, 179. , 180. , 181. , 182. , 182.5, 183. , 183.5, 182.5, 183. , 183.5, 184. , 185. , 186. , 187. , 187.5, 188. , 188.5, 187.5, 188. , 188.5, 189. , 190. , 191. , 192. , 192.5, 193. , 193.5, 192.5, 193. , 193.5, 194. , 195. , 196. , 197. , 197.5, 198. , 198.5, 202.5, 203. , 203.5, 204. , 205. , 206. , 207. , 207.5, 208. , 208.5, 207.5, 208. , 208.5, 209. , 210. , 211. , 212. , 212.5, 213. , 213.5, 212.5, 213. , 213.5, 214. , 215. , 216. , 217. , 217.5, 218. , 218.5, 217.5, 218. , 218.5, 219. , 220. , 221. , 222. , 222.5, 223. , 223.5};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  36.,  37.,  44.,  45.,  46.,  47., 114., 115., 116., 117., 124., 125., 126., 127., 194., 195., 196., 197., 204., 205., 206., 207.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  35.,  36.,  36.,  37.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  44.,  45.,  45.,  46.,  46.,  47.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  51.,  52.,  53.,  54.,  54.,  55.,  55.,  56.,  56.,  57.,  54.,  55.,  55.,  56.,  56.,  57.,  57.,  58.,  59.,  60.,  61.,  62.,  63.,  64.,  64.,  65.,  65.,  66.,  66.,  67.,  64.,  65.,  65.,  66.,  66.,  67.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  94.,  95.,  95.,  96.,  96.,  97.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 103., 104., 104., 105., 105., 106., 106., 107., 104., 105., 105., 106., 106., 107., 107., 108., 109., 110., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 114., 115., 115., 116., 116., 117., 117., 118., 119., 120., 121., 122., 123., 124., 124., 125., 125., 126., 126., 127., 194., 195., 195., 196., 196., 197., 197., 198., 199., 200., 201., 202., 203., 204., 204., 205., 205., 206., 206., 207., 204., 205., 205., 206., 206., 207., 207., 208., 209., 210., 211., 212., 213., 214., 214., 215., 215., 216., 216., 217., 214., 215., 215., 216., 216., 217., 217., 218., 219., 220., 221., 222., 223., 224., 224., 225., 225., 226., 226., 227., 224., 225., 225., 226., 226., 227., 227., 228., 229., 230., 231., 232., 233., 234., 234., 235., 235., 236., 236., 237., 244., 245., 245., 246., 246., 247., 247., 248., 249., 250., 251., 252., 253., 254., 254., 255., 255., 256., 256., 257., 254., 255., 255., 256., 256., 257., 257., 258., 259., 260., 261., 262., 263., 264., 264., 265., 265., 266., 266., 267., 264., 265., 265., 266., 266., 267., 267., 268., 269., 270., 271., 272., 273., 274., 274., 275., 275., 276., 276., 277., 274., 275., 275., 276., 276., 277., 277., 278., 279., 280., 281., 282., 283., 284., 284., 285., 285., 286., 286., 287., 354., 355., 355., 356., 356., 357., 357., 358., 359., 360., 361., 362., 363., 364., 364., 365., 365., 366., 366., 367., 364., 365., 365., 366., 366., 367., 367., 368., 369., 370., 371., 372., 373., 374., 374., 375., 375., 376., 376., 377., 374., 375., 375., 376., 376., 377., 377., 378., 379., 380., 381., 382., 383., 384., 384., 385., 385., 386., 386., 387., 384., 385., 385., 386., 386., 387., 387., 388., 389., 390., 391., 392., 393., 394., 394., 395., 395., 396., 396., 397., 404., 405., 405., 406., 406., 407., 407., 408., 409., 410., 411., 412., 413., 414., 414., 415., 415., 416., 416., 417., 414., 415., 415., 416., 416., 417., 417., 418., 419., 420., 421., 422., 423., 424., 424., 425., 425., 426., 426., 427., 424., 425., 425., 426., 426., 427., 427., 428., 429., 430., 431., 432., 433., 434., 434., 435., 435., 436., 436., 437., 434., 435., 435., 436., 436., 437., 437., 438., 439., 440., 441., 442., 443., 444., 444., 445., 445., 446., 446., 447.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94., 227., 228., 229., 230., 231., 232., 233., 234., 247., 248., 249., 250., 251., 252., 253., 254., 387., 388., 389., 390., 391., 392., 393., 394., 407., 408., 409., 410., 411., 412., 413., 414.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              , 393.              , 394.              , 395.              , 396.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 403.              , 404.              , 405.              , 406.              , 407.              , 408.              , 407.              , 408.              , 409.              , 410.              , 409.              , 410.              , 411.              , 412.              , 411.              , 412.              , 413.              , 414.              , 407.              , 408.              , 409.              , 410.              , 409.              , 410.              , 411.              , 412.              , 411.              , 412.              , 413.              , 414.              , 413.              , 414.              , 415.              , 416.              , 417.              , 418.              , 419.              , 420.              , 406.37142857142857, 407.37142857142857, 408.37142857142857, 409.37142857142857, 395.74285714285713, 396.74285714285713, 397.74285714285713, 398.74285714285713, 392.8666666666667 , 393.8666666666667 , 394.8666666666667 , 395.8666666666667 , 388.04            , 389.04            , 390.04            , 391.04            , 379.8             , 380.8             , 381.8             , 382.8             , 341.6666666666667 , 342.6666666666667 , 343.6666666666667 , 344.6666666666667 , 343.6666666666667 , 344.6666666666667 , 345.6666666666667 , 346.6666666666667 , 345.6666666666667 , 346.6666666666667 , 347.6666666666667 , 348.6666666666667 , 347.6666666666667 , 348.6666666666667 , 349.6666666666667 , 350.6666666666667 , 351.6666666666667 , 352.6666666666667 , 353.6666666666667 , 354.6666666666667 , 343.4761904761905 , 344.4761904761905 , 345.4761904761905 , 346.4761904761905 , 335.2857142857143 , 336.2857142857143 , 337.2857142857143 , 338.2857142857143 , 333.22222222222223, 334.22222222222223, 335.22222222222223, 336.22222222222223, 329.53333333333336, 330.53333333333336, 331.53333333333336, 332.53333333333336, 323.              , 324.              , 325.              , 326.              , 300.7142857142857 , 301.7142857142857 , 302.7142857142857 , 303.7142857142857 , 302.7142857142857 , 303.7142857142857 , 304.7142857142857 , 305.7142857142857 , 304.7142857142857 , 305.7142857142857 , 306.7142857142857 , 307.7142857142857 , 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 304.265306122449  , 305.265306122449  , 306.265306122449  , 307.265306122449  , 297.81632653061223, 298.81632653061223, 299.81632653061223, 300.81632653061223, 296.3333333333333 , 297.3333333333333 , 298.3333333333333 , 299.3333333333333 , 293.45714285714286, 294.45714285714286, 295.45714285714286, 296.45714285714286, 288.14285714285717, 289.14285714285717, 290.14285714285717, 291.14285714285717, 267.57142857142856, 268.57142857142856, 269.57142857142856, 270.57142857142856, 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 271.57142857142856, 272.57142857142856, 273.57142857142856, 274.57142857142856, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 263.1904761904762 , 264.1904761904762 , 265.1904761904762 , 266.1904761904762 , 260.3142857142857 , 261.3142857142857 , 262.3142857142857 , 263.3142857142857 , 255.              , 256.              , 257.              , 258.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 252.8095238095238 , 253.8095238095238 , 254.8095238095238 , 255.8095238095238 , 244.61904761904762, 245.61904761904762, 246.61904761904762, 247.61904761904762, 242.55555555555554, 243.55555555555554, 244.55555555555554, 245.55555555555554, 238.86666666666667, 239.86666666666667, 240.86666666666667, 241.86666666666667, 232.33333333333334, 233.33333333333334, 234.33333333333334, 235.33333333333334, 219.8             , 220.8             , 221.8             , 222.8             , 221.8             , 222.8             , 223.8             , 224.8             , 223.8             , 224.8             , 225.8             , 226.8             , 225.8             , 226.8             , 227.8             , 228.8             , 229.8             , 230.8             , 231.8             , 232.8             , 219.17142857142858, 220.17142857142858, 221.17142857142858, 222.17142857142858, 208.54285714285714, 209.54285714285714, 210.54285714285714, 211.54285714285714, 205.66666666666666, 206.66666666666666, 207.66666666666666, 208.66666666666666, 200.84            , 201.84            , 202.84            , 203.84            , 192.6             , 193.6             , 194.6             , 195.6             , 163.              , 164.              , 165.              , 166.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 173.              , 174.              , 175.              , 176.              , 158.71428571428572, 159.71428571428572, 160.71428571428572, 161.71428571428572, 144.42857142857142, 145.42857142857142, 146.42857142857142, 147.42857142857142, 140.33333333333334, 141.33333333333334, 142.33333333333334, 143.33333333333334, 133.8             , 134.8             , 135.8             , 136.8             , 123.              , 124.              , 125.              , 126.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 229.              , 230.              , 231.              , 232.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 295.              , 296.              , 297.              , 298.              , 297.              , 298.              , 299.              , 300.              , 299.              , 300.              , 301.              , 302.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 315.              , 316.              , 315.              , 316.              , 317.              , 318.              , 317.              , 318.              , 319.              , 320.              , 319.              , 320.              , 321.              , 322.              , 315.              , 316.              , 317.              , 318.              , 317.              , 318.              , 319.              , 320.              , 319.              , 320.              , 321.              , 322.              , 321.              , 322.              , 323.              , 324.              , 325.              , 326.              , 327.              , 328.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 335.              , 336.              , 337.              , 338.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 335.              , 336.              , 337.              , 338.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 345.              , 346.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              };
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x8x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 304.265306122449  , 305.265306122449  , 306.265306122449  , 307.265306122449  , 297.81632653061223, 298.81632653061223, 299.81632653061223, 300.81632653061223, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 315.              , 316.              };
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 14.5,  15. ,  15.5,  16. ,  17. ,  17.5,  18. ,  18.5,  18.5,  19. ,  19.5,  20. ,  21. ,  21.5,  22. ,  22.5,  22.5,  23. ,  23.5,  24. ,  25. ,  25.5,  26. ,  26.5,  26.5,  27. ,  27.5,  28. ,  29. ,  29.5,  30. ,  30.5,  34.5,  35. ,  35.5,  36. ,  37. ,  37.5,  38. ,  38.5,  42.5,  43. ,  43.5,  44. ,  45. ,  45.5,  46. ,  46.5,  46.5,  47. ,  47.5,  48. ,  49. ,  49.5,  50. ,  50.5,  50.5,  51. ,  51.5,  52. ,  53. ,  53.5,  54. ,  54.5,  54.5,  55. ,  55.5,  56. ,  57. ,  57.5,  58. ,  58.5,  86.5,  87. ,  87.5,  88. ,  89. ,  89.5,  90. ,  90.5,  90.5,  91. ,  91.5,  92. ,  93. ,  93.5,  94. ,  94.5,  94.5,  95. ,  95.5,  96. ,  97. ,  97.5,  98. ,  98.5,  98.5,  99. ,  99.5, 100. , 101. , 101.5, 102. , 102.5, 106.5, 107. , 107.5, 108. , 109. , 109.5, 110. , 110.5, 114.5, 115. , 115.5, 116. , 117. , 117.5, 118. , 118.5, 118.5, 119. , 119.5, 120. , 121. , 121.5, 122. , 122.5, 122.5, 123. , 123.5, 124. , 125. , 125.5, 126. , 126.5, 126.5, 127. , 127.5, 128. , 129. , 129.5, 130. , 130.5, 158.5, 159. , 159.5, 160. , 161. , 161.5, 162. , 162.5, 162.5, 163. , 163.5, 164. , 165. , 165.5, 166. , 166.5, 166.5, 167. , 167.5, 168. , 169. , 169.5, 170. , 170.5, 170.5, 171. , 171.5, 172. , 173. , 173.5, 174. , 174.5, 178.5, 179. , 179.5, 180. , 181. , 181.5, 182. , 182.5, 186.5, 187. , 187.5, 188. , 189. , 189.5, 190. , 190.5, 190.5, 191. , 191.5, 192. , 193. , 193.5, 194. , 194.5, 194.5, 195. , 195.5, 196. , 197. , 197.5, 198. , 198.5, 198.5, 199. , 199.5, 200. , 201. , 201.5, 202. , 202.5};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  36.,  37.,  44.,  45., 100., 101., 108., 109., 116., 117., 172., 173., 180., 181., 188., 189.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93.,  92.,  93.,  93.,  94.,  94.,  95.,  95.,  96.,  97.,  98.,  98.,  99.,  99., 100., 100., 101., 100., 101., 101., 102., 102., 103., 103., 104., 105., 106., 106., 107., 107., 108., 108., 109., 108., 109., 109., 110., 110., 111., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 172., 173., 173., 174., 174., 175., 175., 176., 177., 178., 178., 179., 179., 180., 180., 181., 180., 181., 181., 182., 182., 183., 183., 184., 185., 186., 186., 187., 187., 188., 188., 189., 188., 189., 189., 190., 190., 191., 191., 192., 193., 194., 194., 195., 195., 196., 196., 197., 196., 197., 197., 198., 198., 199., 199., 200., 201., 202., 202., 203., 203., 204., 204., 205., 212., 213., 213., 214., 214., 215., 215., 216., 217., 218., 218., 219., 219., 220., 220., 221., 228., 229., 229., 230., 230., 231., 231., 232., 233., 234., 234., 235., 235., 236., 236., 237., 236., 237., 237., 238., 238., 239., 239., 240., 241., 242., 242., 243., 243., 244., 244., 245., 244., 245., 245., 246., 246., 247., 247., 248., 249., 250., 250., 251., 251., 252., 252., 253., 252., 253., 253., 254., 254., 255., 255., 256., 257., 258., 258., 259., 259., 260., 260., 261., 316., 317., 317., 318., 318., 319., 319., 320., 321., 322., 322., 323., 323., 324., 324., 325., 324., 325., 325., 326., 326., 327., 327., 328., 329., 330., 330., 331., 331., 332., 332., 333., 332., 333., 333., 334., 334., 335., 335., 336., 337., 338., 338., 339., 339., 340., 340., 341., 340., 341., 341., 342., 342., 343., 343., 344., 345., 346., 346., 347., 347., 348., 348., 349., 356., 357., 357., 358., 358., 359., 359., 360., 361., 362., 362., 363., 363., 364., 364., 365., 372., 373., 373., 374., 374., 375., 375., 376., 377., 378., 378., 379., 379., 380., 380., 381., 380., 381., 381., 382., 382., 383., 383., 384., 385., 386., 386., 387., 387., 388., 388., 389., 388., 389., 389., 390., 390., 391., 391., 392., 393., 394., 394., 395., 395., 396., 396., 397., 396., 397., 397., 398., 398., 399., 399., 400., 401., 402., 402., 403., 403., 404., 404., 405.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90., 199., 200., 201., 202., 215., 216., 217., 218., 231., 232., 233., 234., 343., 344., 345., 346., 359., 360., 361., 362., 375., 376., 377., 378.};
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.              ,  56.              ,  57.              ,  58.              ,  57.              ,  58.              ,  59.              ,  60.              ,  59.              ,  60.              ,  61.              ,  62.              ,  61.              ,  62.              ,  63.              ,  64.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              ,  75.              ,  76.              ,  77.              ,  78.              ,  77.              ,  78.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 103.              , 104.              , 105.              , 106.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 135.              , 136.              , 137.              , 138.              , 137.              , 138.              , 139.              , 140.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 183.              , 184.              , 185.              , 186.              , 183.              , 184.              , 185.              , 186.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 193.              , 194.              , 195.              , 196.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 343.              , 344.              , 345.              , 346.              , 345.              , 346.              , 347.              , 348.              , 347.              , 348.              , 349.              , 350.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 363.              , 364.              , 365.              , 366.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 371.              , 372.              , 373.              , 374.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 381.              , 382.              , 383.              , 384.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              , 391.              , 392.              , 393.              , 394.              , 393.              , 394.              , 395.              , 396.              , 395.              , 396.              , 397.              , 398.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 403.              , 404.              , 403.              , 404.              , 405.              , 406.              , 405.              , 406.              , 407.              , 408.              , 407.              , 408.              , 409.              , 410.              , 349.85714285714283, 350.85714285714283, 351.85714285714283, 352.85714285714283, 351.85714285714283, 352.85714285714283, 353.85714285714283, 354.85714285714283, 353.85714285714283, 354.85714285714283, 355.85714285714283, 356.85714285714283, 355.85714285714283, 356.85714285714283, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 361.85714285714283, 362.85714285714283, 361.85714285714283, 362.85714285714283, 363.85714285714283, 364.85714285714283, 363.85714285714283, 364.85714285714283, 365.85714285714283, 366.85714285714283, 365.85714285714283, 366.85714285714283, 367.85714285714283, 368.85714285714283, 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 312.7142857142857 , 313.7142857142857 , 314.7142857142857 , 315.7142857142857 , 314.7142857142857 , 315.7142857142857 , 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 320.7142857142857 , 321.7142857142857 , 320.7142857142857 , 321.7142857142857 , 322.7142857142857 , 323.7142857142857 , 322.7142857142857 , 323.7142857142857 , 324.7142857142857 , 325.7142857142857 , 324.7142857142857 , 325.7142857142857 , 326.7142857142857 , 327.7142857142857 , 300.3333333333333 , 301.3333333333333 , 302.3333333333333 , 303.3333333333333 , 302.3333333333333 , 303.3333333333333 , 304.3333333333333 , 305.3333333333333 , 304.3333333333333 , 305.3333333333333 , 306.3333333333333 , 307.3333333333333 , 306.3333333333333 , 307.3333333333333 , 308.3333333333333 , 309.3333333333333 , 310.3333333333333 , 311.3333333333333 , 312.3333333333333 , 313.3333333333333 , 312.3333333333333 , 313.3333333333333 , 314.3333333333333 , 315.3333333333333 , 314.3333333333333 , 315.3333333333333 , 316.3333333333333 , 317.3333333333333 , 316.3333333333333 , 317.3333333333333 , 318.3333333333333 , 319.3333333333333 , 282.2             , 283.2             , 284.2             , 285.2             , 284.2             , 285.2             , 286.2             , 287.2             , 286.2             , 287.2             , 288.2             , 289.2             , 288.2             , 289.2             , 290.2             , 291.2             , 292.2             , 293.2             , 294.2             , 295.2             , 294.2             , 295.2             , 296.2             , 297.2             , 296.2             , 297.2             , 298.2             , 299.2             , 298.2             , 299.2             , 300.2             , 301.2             , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 263.              , 264.              , 265.              , 266.              , 119.              , 120.              , 121.              , 122.              , 121.              , 122.              , 123.              , 124.              , 123.              , 124.              , 125.              , 126.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 135.              , 136.              , 137.              , 138.              , 135.              , 136.              , 137.              , 138.              , 137.              , 138.              , 139.              , 140.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 151.              , 152.              , 153.              , 154.              , 153.              , 154.              , 155.              , 156.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 163.              , 164.              , 165.              , 166.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 183.              , 184.              , 185.              , 186.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 263.              , 264.              , 265.              , 266.              , 263.              , 264.              , 265.              , 266.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 279.              , 280.              , 281.              , 282.              , 281.              , 282.              , 283.              , 284.              , 283.              , 284.              , 285.              , 286.              , 285.              , 286.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 293.              , 294.              , 295.              , 296.              , 295.              , 296.              , 297.              , 298.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 115.              , 116.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 403.              , 404.              , 355.85714285714283, 356.85714285714283, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 361.85714285714283, 362.85714285714283, 314.7142857142857 , 315.7142857142857 , 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 320.7142857142857 , 321.7142857142857 , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 16. ,  16.5,  17. ,  17.5,  18.5,  19.5,  20. ,  20.5,  21. ,  20.5,  21. ,  21.5,  22. ,  23. ,  24. ,  24.5,  25. ,  25.5,  25. ,  25.5,  26. ,  26.5,  27.5,  28.5,  29. ,  29.5,  30. ,  29.5,  30. ,  30.5,  31. ,  32. ,  33. ,  33.5,  34. ,  34.5,  38.5,  39. ,  39.5,  40. ,  41. ,  42. ,  42.5,  43. ,  43.5,  47.5,  48. ,  48.5,  49. ,  50. ,  51. ,  51.5,  52. ,  52.5,  52. ,  52.5,  53. ,  53.5,  54.5,  55.5,  56. ,  56.5,  57. ,  56.5,  57. ,  57.5,  58. ,  59. ,  60. ,  60.5,  61. ,  61.5,  61. ,  61.5,  62. ,  62.5,  63.5,  64.5,  65. ,  65.5,  66. ,  97. ,  97.5,  98. ,  98.5,  99.5, 100.5, 101. , 101.5, 102. , 101.5, 102. , 102.5, 103. , 104. , 105. , 105.5, 106. , 106.5, 106. , 106.5, 107. , 107.5, 108.5, 109.5, 110. , 110.5, 111. , 110.5, 111. , 111.5, 112. , 113. , 114. , 114.5, 115. , 115.5, 119.5, 120. , 120.5, 121. , 122. , 123. , 123.5, 124. , 124.5, 128.5, 129. , 129.5, 130. , 131. , 132. , 132.5, 133. , 133.5, 133. , 133.5, 134. , 134.5, 135.5, 136.5, 137. , 137.5, 138. , 137.5, 138. , 138.5, 139. , 140. , 141. , 141.5, 142. , 142.5, 142. , 142.5, 143. , 143.5, 144.5, 145.5, 146. , 146.5, 147. , 178. , 178.5, 179. , 179.5, 180.5, 181.5, 182. , 182.5, 183. , 182.5, 183. , 183.5, 184. , 185. , 186. , 186.5, 187. , 187.5, 187. , 187.5, 188. , 188.5, 189.5, 190.5, 191. , 191.5, 192. , 191.5, 192. , 192.5, 193. , 194. , 195. , 195.5, 196. , 196.5, 200.5, 201. , 201.5, 202. , 203. , 204. , 204.5, 205. , 205.5, 209.5, 210. , 210.5, 211. , 212. , 213. , 213.5, 214. , 214.5, 214. , 214.5, 215. , 215.5, 216.5, 217.5, 218. , 218.5, 219. , 218.5, 219. , 219.5, 220. , 221. , 222. , 222.5, 223. , 223.5, 223. , 223.5, 224. , 224.5, 225.5, 226.5, 227. , 227.5, 228. };
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  33.,  40.,  41.,  42.,  49.,  50.,  51., 112., 113., 114., 121., 122., 123., 130., 131., 132., 193., 194., 195., 202., 203., 204., 211., 212., 213.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  32.,  33.,  33.,  34.,  34.,  35.,  36.,  37.,  38.,  39.,  39.,  40.,  40.,  41.,  41.,  42.,  40.,  41.,  41.,  42.,  42.,  43.,  43.,  44.,  45.,  46.,  47.,  48.,  48.,  49.,  49.,  50.,  50.,  51.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  54.,  55.,  56.,  57.,  57.,  58.,  58.,  59.,  59.,  60.,  58.,  59.,  59.,  60.,  60.,  61.,  61.,  62.,  63.,  64.,  65.,  66.,  66.,  67.,  67.,  68.,  68.,  69.,  76.,  77.,  77.,  78.,  78.,  79.,  79.,  80.,  81.,  82.,  83.,  84.,  84.,  85.,  85.,  86.,  86.,  87.,  94.,  95.,  95.,  96.,  96.,  97.,  97.,  98.,  99., 100., 101., 102., 102., 103., 103., 104., 104., 105., 103., 104., 104., 105., 105., 106., 106., 107., 108., 109., 110., 111., 111., 112., 112., 113., 113., 114., 112., 113., 113., 114., 114., 115., 115., 116., 117., 118., 119., 120., 120., 121., 121., 122., 122., 123., 121., 122., 122., 123., 123., 124., 124., 125., 126., 127., 128., 129., 129., 130., 130., 131., 131., 132., 193., 194., 194., 195., 195., 196., 196., 197., 198., 199., 200., 201., 201., 202., 202., 203., 203., 204., 202., 203., 203., 204., 204., 205., 205., 206., 207., 208., 209., 210., 210., 211., 211., 212., 212., 213., 211., 212., 212., 213., 213., 214., 214., 215., 216., 217., 218., 219., 219., 220., 220., 221., 221., 222., 220., 221., 221., 222., 222., 223., 223., 224., 225., 226., 227., 228., 228., 229., 229., 230., 230., 231., 238., 239., 239., 240., 240., 241., 241., 242., 243., 244., 245., 246., 246., 247., 247., 248., 248., 249., 256., 257., 257., 258., 258., 259., 259., 260., 261., 262., 263., 264., 264., 265., 265., 266., 266., 267., 265., 266., 266., 267., 267., 268., 268., 269., 270., 271., 272., 273., 273., 274., 274., 275., 275., 276., 274., 275., 275., 276., 276., 277., 277., 278., 279., 280., 281., 282., 282., 283., 283., 284., 284., 285., 283., 284., 284., 285., 285., 286., 286., 287., 288., 289., 290., 291., 291., 292., 292., 293., 293., 294., 355., 356., 356., 357., 357., 358., 358., 359., 360., 361., 362., 363., 363., 364., 364., 365., 365., 366., 364., 365., 365., 366., 366., 367., 367., 368., 369., 370., 371., 372., 372., 373., 373., 374., 374., 375., 373., 374., 374., 375., 375., 376., 376., 377., 378., 379., 380., 381., 381., 382., 382., 383., 383., 384., 382., 383., 383., 384., 384., 385., 385., 386., 387., 388., 389., 390., 390., 391., 391., 392., 392., 393., 400., 401., 401., 402., 402., 403., 403., 404., 405., 406., 407., 408., 408., 409., 409., 410., 410., 411., 418., 419., 419., 420., 420., 421., 421., 422., 423., 424., 425., 426., 426., 427., 427., 428., 428., 429., 427., 428., 428., 429., 429., 430., 430., 431., 432., 433., 434., 435., 435., 436., 436., 437., 437., 438., 436., 437., 437., 438., 438., 439., 439., 440., 441., 442., 443., 444., 444., 445., 445., 446., 446., 447., 445., 446., 446., 447., 447., 448., 448., 449., 450., 451., 452., 453., 453., 454., 454., 455., 455., 456.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.,  62.,  63.,  64.,  65.,  66.,  79.,  80.,  81.,  82.,  83.,  84.,  97.,  98.,  99., 100., 101., 102., 223., 224., 225., 226., 227., 228., 241., 242., 243., 244., 245., 246., 259., 260., 261., 262., 263., 264., 385., 386., 387., 388., 389., 390., 403., 404., 405., 406., 407., 408., 421., 422., 423., 424., 425., 426.};
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.              ,  62.              ,  63.              ,  64.              ,  63.              ,  64.              ,  65.              ,  66.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  77.              ,  78.              ,  79.              ,  80.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  95.              ,  96.              ,  95.              ,  96.              ,  97.              ,  98.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 135.              , 136.              , 137.              , 138.              , 151.              , 152.              , 153.              , 154.              , 153.              , 154.              , 155.              , 156.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 223.              , 224.              , 225.              , 226.              , 225.              , 226.              , 227.              , 228.              , 223.              , 224.              , 225.              , 226.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 233.              , 234.              , 235.              , 236.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              , 395.              , 396.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 401.              , 402.              , 403.              , 404.              , 403.              , 404.              , 405.              , 406.              , 405.              , 406.              , 407.              , 408.              , 403.              , 404.              , 405.              , 406.              , 405.              , 406.              , 407.              , 408.              , 407.              , 408.              , 409.              , 410.              , 409.              , 410.              , 411.              , 412.              , 413.              , 414.              , 415.              , 416.              , 417.              , 418.              , 419.              , 420.              , 419.              , 420.              , 421.              , 422.              , 421.              , 422.              , 423.              , 424.              , 423.              , 424.              , 425.              , 426.              , 378.3333333333333 , 379.3333333333333 , 380.3333333333333 , 381.3333333333333 , 371.8             , 372.8             , 373.8             , 374.8             , 368.1111111111111 , 369.1111111111111 , 370.1111111111111 , 371.1111111111111 , 366.04761904761904, 367.04761904761904, 368.04761904761904, 369.04761904761904, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 349.6666666666667 , 350.6666666666667 , 351.6666666666667 , 352.6666666666667 , 351.6666666666667 , 352.6666666666667 , 353.6666666666667 , 354.6666666666667 , 353.6666666666667 , 354.6666666666667 , 355.6666666666667 , 356.6666666666667 , 355.6666666666667 , 356.6666666666667 , 357.6666666666667 , 358.6666666666667 , 329.2857142857143 , 330.2857142857143 , 331.2857142857143 , 332.2857142857143 , 323.9714285714286 , 324.9714285714286 , 325.9714285714286 , 326.9714285714286 , 321.0952380952381 , 322.0952380952381 , 323.0952380952381 , 324.0952380952381 , 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916, 313.16326530612247, 314.16326530612247, 315.16326530612247, 316.16326530612247, 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 312.7142857142857 , 313.7142857142857 , 314.7142857142857 , 315.7142857142857 , 292.14285714285717, 293.14285714285717, 294.14285714285717, 295.14285714285717, 286.8285714285714 , 287.8285714285714 , 288.8285714285714 , 289.8285714285714 , 283.95238095238096, 284.95238095238096, 285.95238095238096, 286.95238095238096, 282.46938775510205, 283.46938775510205, 284.46938775510205, 285.46938775510205, 276.0204081632653 , 277.0204081632653 , 278.0204081632653 , 279.0204081632653 , 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 271.57142857142856, 272.57142857142856, 273.57142857142856, 274.57142857142856, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 255.              , 256.              , 257.              , 258.              , 249.68571428571428, 250.68571428571428, 251.68571428571428, 252.68571428571428, 246.8095238095238 , 247.8095238095238 , 248.8095238095238 , 249.8095238095238 , 245.3265306122449 , 246.3265306122449 , 247.3265306122449 , 248.3265306122449 , 238.87755102040816, 239.87755102040816, 240.87755102040816, 241.87755102040816, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 238.42857142857142, 239.42857142857142, 240.42857142857142, 241.42857142857142, 230.33333333333334, 231.33333333333334, 232.33333333333334, 233.33333333333334, 223.8             , 224.8             , 225.8             , 226.8             , 220.11111111111111, 221.11111111111111, 222.11111111111111, 223.11111111111111, 218.04761904761904, 219.04761904761904, 220.04761904761904, 221.04761904761904, 209.85714285714286, 210.85714285714286, 211.85714285714286, 212.85714285714286, 201.66666666666666, 202.66666666666666, 203.66666666666666, 204.66666666666666, 203.66666666666666, 204.66666666666666, 205.66666666666666, 206.66666666666666, 205.66666666666666, 206.66666666666666, 207.66666666666666, 208.66666666666666, 207.66666666666666, 208.66666666666666, 209.66666666666666, 210.66666666666666, 188.6             , 189.6             , 190.6             , 191.6             , 180.36            , 181.36            , 182.36            , 183.36            , 175.53333333333333, 176.53333333333333, 177.53333333333333, 178.53333333333333, 172.65714285714284, 173.65714285714284, 174.65714285714284, 175.65714285714284, 162.02857142857144, 163.02857142857144, 164.02857142857144, 165.02857142857144, 151.4             , 152.4             , 153.4             , 154.4             , 153.4             , 154.4             , 155.4             , 156.4             , 155.4             , 156.4             , 157.4             , 158.4             , 157.4             , 158.4             , 159.4             , 160.4             , 117.              , 118.              , 119.              , 120.              , 106.2             , 107.2             , 108.2             , 109.2             ,  99.66666666666667, 100.66666666666667, 101.66666666666667, 102.66666666666667,  95.57142857142857,  96.57142857142857,  97.57142857142857,  98.57142857142857,  81.28571428571429,  82.28571428571429,  83.28571428571429,  84.28571428571429,  67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 293.              , 294.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 301.              , 302.              , 303.              , 304.              , 303.              , 304.              , 305.              , 306.              , 305.              , 306.              , 307.              , 308.              , 307.              , 308.              , 309.              , 310.              , 323.              , 324.              , 325.              , 326.              , 325.              , 326.              , 327.              , 328.              , 327.              , 328.              , 329.              , 330.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 343.              , 344.              , 345.              , 346.              , 341.              , 342.              , 343.              , 344.              , 343.              , 344.              , 345.              , 346.              , 345.              , 346.              , 347.              , 348.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 363.              , 364.              , 365.              , 366.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 381.              , 382.              , 383.              , 384.              , 383.              , 384.              , 385.              , 386.              , 387.              , 388.              , 389.              , 390.              , 391.              , 392.              , 393.              , 394.              , 393.              , 394.              , 395.              , 396.              , 395.              , 396.              , 397.              , 398.              , 397.              , 398.              , 399.              , 400.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916, 313.16326530612247, 314.16326530612247, 315.16326530612247, 316.16326530612247, 306.7142857142857 , 307.7142857142857 , 308.7142857142857 , 309.7142857142857 , 282.46938775510205, 283.46938775510205, 284.46938775510205, 285.46938775510205, 276.0204081632653 , 277.0204081632653 , 278.0204081632653 , 279.0204081632653 , 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 245.3265306122449 , 246.3265306122449 , 247.3265306122449 , 248.3265306122449 , 238.87755102040816, 239.87755102040816, 240.87755102040816, 241.87755102040816, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 293.              , 294.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 301.              , 302.              , 303.              , 304.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 17.5,  18. ,  18.5,  19. ,  20. ,  21. ,  22. ,  22.5,  23. ,  23.5,  22.5,  23. ,  23.5,  24. ,  25. ,  26. ,  27. ,  27.5,  28. ,  28.5,  27.5,  28. ,  28.5,  29. ,  30. ,  31. ,  32. ,  32.5,  33. ,  33.5,  32.5,  33. ,  33.5,  34. ,  35. ,  36. ,  37. ,  37.5,  38. ,  38.5,  42.5,  43. ,  43.5,  44. ,  45. ,  46. ,  47. ,  47.5,  48. ,  48.5,  52.5,  53. ,  53.5,  54. ,  55. ,  56. ,  57. ,  57.5,  58. ,  58.5,  57.5,  58. ,  58.5,  59. ,  60. ,  61. ,  62. ,  62.5,  63. ,  63.5,  62.5,  63. ,  63.5,  64. ,  65. ,  66. ,  67. ,  67.5,  68. ,  68.5,  67.5,  68. ,  68.5,  69. ,  70. ,  71. ,  72. ,  72.5,  73. ,  73.5, 107.5, 108. , 108.5, 109. , 110. , 111. , 112. , 112.5, 113. , 113.5, 112.5, 113. , 113.5, 114. , 115. , 116. , 117. , 117.5, 118. , 118.5, 117.5, 118. , 118.5, 119. , 120. , 121. , 122. , 122.5, 123. , 123.5, 122.5, 123. , 123.5, 124. , 125. , 126. , 127. , 127.5, 128. , 128.5, 132.5, 133. , 133.5, 134. , 135. , 136. , 137. , 137.5, 138. , 138.5, 142.5, 143. , 143.5, 144. , 145. , 146. , 147. , 147.5, 148. , 148.5, 147.5, 148. , 148.5, 149. , 150. , 151. , 152. , 152.5, 153. , 153.5, 152.5, 153. , 153.5, 154. , 155. , 156. , 157. , 157.5, 158. , 158.5, 157.5, 158. , 158.5, 159. , 160. , 161. , 162. , 162.5, 163. , 163.5, 197.5, 198. , 198.5, 199. , 200. , 201. , 202. , 202.5, 203. , 203.5, 202.5, 203. , 203.5, 204. , 205. , 206. , 207. , 207.5, 208. , 208.5, 207.5, 208. , 208.5, 209. , 210. , 211. , 212. , 212.5, 213. , 213.5, 212.5, 213. , 213.5, 214. , 215. , 216. , 217. , 217.5, 218. , 218.5, 222.5, 223. , 223.5, 224. , 225. , 226. , 227. , 227.5, 228. , 228.5, 232.5, 233. , 233.5, 234. , 235. , 236. , 237. , 237.5, 238. , 238.5, 237.5, 238. , 238.5, 239. , 240. , 241. , 242. , 242.5, 243. , 243.5, 242.5, 243. , 243.5, 244. , 245. , 246. , 247. , 247.5, 248. , 248.5, 247.5, 248. , 248.5, 249. , 250. , 251. , 252. , 252.5, 253. , 253.5};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  36.,  37.,  44.,  45.,  46.,  47.,  54.,  55.,  56.,  57., 124., 125., 126., 127., 134., 135., 136., 137., 144., 145., 146., 147., 214., 215., 216., 217., 224., 225., 226., 227., 234., 235., 236., 237.};
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.              ,  35.              ,  35.              ,  36.              ,  36.              ,  37.              ,  37.              ,  38.              ,  39.              ,  40.              ,  41.              ,  42.              ,  43.              ,  44.              ,  44.              ,  45.              ,  45.              ,  46.              ,  46.              ,  47.              ,  44.              ,  45.              ,  45.              ,  46.              ,  46.              ,  47.              ,  47.              ,  48.              ,  49.              ,  50.              ,  51.              ,  52.              ,  53.              ,  54.              ,  54.              ,  55.              ,  55.              ,  56.              ,  56.              ,  57.              ,  54.              ,  55.              ,  55.              ,  56.              ,  56.              ,  57.              ,  57.              ,  58.              ,  59.              ,  60.              ,  61.              ,  62.              ,  63.              ,  64.              ,  64.              ,  65.              ,  65.              ,  66.              ,  66.              ,  67.              ,  64.              ,  65.              ,  65.              ,  66.              ,  66.              ,  67.              ,  67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  74.              ,  75.              ,  75.              ,  76.              ,  76.              ,  77.              ,  84.              ,  85.              ,  85.              ,  86.              ,  86.              ,  87.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  94.              ,  95.              ,  95.              ,  96.              ,  96.              ,  97.              , 104.              , 105.              , 105.              , 106.              , 106.              , 107.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 114.              , 115.              , 115.              , 116.              , 116.              , 117.              , 114.              , 115.              , 115.              , 116.              , 116.              , 117.              , 117.              , 118.              , 119.              , 120.              , 121.              , 122.              , 123.              , 124.              , 124.              , 125.              , 125.              , 126.              , 126.              , 127.              , 124.              , 125.              , 125.              , 126.              , 126.              , 127.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 133.              , 134.              , 134.              , 135.              , 135.              , 136.              , 136.              , 137.              , 134.              , 135.              , 135.              , 136.              , 136.              , 137.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 144.              , 145.              , 145.              , 146.              , 146.              , 147.              , 214.              , 215.              , 215.              , 216.              , 216.              , 217.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 224.              , 225.              , 225.              , 226.              , 226.              , 227.              , 224.              , 225.              , 225.              , 226.              , 226.              , 227.              , 227.              , 228.              , 229.              , 230.              , 231.              , 232.              , 233.              , 234.              , 234.              , 235.              , 235.              , 236.              , 236.              , 237.              , 234.              , 235.              , 235.              , 236.              , 236.              , 237.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 244.              , 245.              , 245.              , 246.              , 246.              , 247.              , 244.              , 245.              , 245.              , 246.              , 246.              , 247.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 254.              , 255.              , 255.              , 256.              , 256.              , 257.              , 264.              , 265.              , 265.              , 266.              , 266.              , 267.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 274.              , 275.              , 275.              , 276.              , 276.              , 277.              , 284.              , 285.              , 285.              , 286.              , 286.              , 287.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 294.              , 295.              , 295.              , 296.              , 296.              , 297.              , 294.              , 295.              , 295.              , 296.              , 296.              , 297.              , 297.              , 298.              , 299.              , 300.              , 301.              , 302.              , 303.              , 304.              , 304.              , 305.              , 305.              , 306.              , 306.              , 307.              , 304.              , 305.              , 305.              , 306.              , 306.              , 307.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 314.              , 315.              , 315.              , 316.              , 316.              , 317.              , 314.              , 315.              , 315.              , 316.              , 316.              , 317.              , 317.              , 318.              , 319.              , 320.              , 321.              , 322.              , 323.              , 324.              , 324.              , 325.              , 325.              , 326.              , 326.              , 327.              , 394.              , 395.              , 395.              , 396.              , 396.              , 397.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 403.              , 404.              , 404.              , 405.              , 405.              , 406.              , 406.              , 407.              , 404.              , 405.              , 405.              , 406.              , 406.              , 407.              , 407.              , 408.              , 409.              , 410.              , 411.              , 412.              , 413.              , 414.              , 414.              , 415.              , 415.              , 416.              , 416.              , 417.              , 414.              , 415.              , 415.              , 416.              , 416.              , 417.              , 417.              , 418.              , 419.              , 420.              , 421.              , 422.              , 423.              , 424.              , 424.              , 425.              , 425.              , 426.              , 426.              , 427.              , 424.              , 425.              , 425.              , 426.              , 426.              , 427.              , 427.              , 428.              , 429.              , 430.              , 431.              , 432.              , 433.              , 434.              , 434.              , 435.              , 435.              , 436.              , 436.              , 437.              , 444.              , 445.              , 445.              , 446.              , 446.              , 447.              , 436.55102040816325, 437.55102040816325, 428.1020408163265 , 429.1020408163265 , 419.6530612244898 , 420.6530612244898 , 411.2040816326531 , 412.2040816326531 , 405.23809523809524, 406.23809523809524, 396.48571428571427, 397.48571428571427, 382.85714285714283, 383.85714285714283, 390.85714285714283, 391.85714285714283, 391.85714285714283, 392.85714285714283, 392.85714285714283, 393.85714285714283, 383.40816326530614, 384.40816326530614, 374.9591836734694 , 375.9591836734694 , 366.51020408163265, 367.51020408163265, 358.0612244897959 , 359.0612244897959 , 352.0952380952381 , 353.0952380952381 , 343.34285714285716, 344.34285714285716, 329.7142857142857 , 330.7142857142857 , 388.6666666666667 , 389.6666666666667 , 389.6666666666667 , 390.6666666666667 , 390.6666666666667 , 391.6666666666667 , 379.4761904761905 , 380.4761904761905 , 369.2857142857143 , 370.2857142857143 , 359.0952380952381 , 360.0952380952381 , 348.9047619047619 , 349.9047619047619 , 341.77777777777777, 342.77777777777777, 331.4             , 332.4             , 315.3333333333333 , 316.3333333333333 , 381.6             , 382.6             , 382.6             , 383.6             , 383.6             , 384.6             , 369.9714285714286 , 370.9714285714286 , 357.34285714285716, 358.34285714285716, 344.7142857142857 , 345.7142857142857 , 332.0857142857143 , 333.0857142857143 , 323.3333333333333 , 324.3333333333333 , 310.68            , 311.68            , 291.2             , 292.2             , 366.              , 367.              , 367.              , 368.              , 368.              , 369.              , 350.7142857142857 , 351.7142857142857 , 334.42857142857144, 335.42857142857144, 318.14285714285717, 319.14285714285717, 301.85714285714283, 302.85714285714283, 290.6666666666667 , 291.6666666666667 , 274.6             , 275.6             , 250.              , 251.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 427.              , 428.              , 429.              , 430.              , 431.              , 432.              , 433.              , 434.              , 436.55102040816325, 437.55102040816325, 428.1020408163265 , 429.1020408163265 , 419.6530612244898 , 420.6530612244898 , 411.2040816326531 , 412.2040816326531 , 383.40816326530614, 384.40816326530614, 374.9591836734694 , 375.9591836734694 , 366.51020408163265, 367.51020408163265, 358.0612244897959 , 359.0612244897959 };
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 273.              , 274.              , 275.              , 276.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 283.              , 284.              , 285.              , 286.              , 287.              , 288.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 427.              , 428.              , 429.              , 430.              , 429.              , 430.              , 431.              , 432.              , 431.              , 432.              , 433.              , 434.              , 433.              , 434.              , 435.              , 436.              , 437.              , 438.              , 439.              , 440.              , 422.7142857142857 , 423.7142857142857 , 424.7142857142857 , 425.7142857142857 , 408.42857142857144, 409.42857142857144, 410.42857142857144, 411.42857142857144, 404.3333333333333 , 405.3333333333333 , 406.3333333333333 , 407.3333333333333 , 397.8             , 398.8             , 399.8             , 400.8             , 387.              , 388.              , 389.              , 390.              , 344.6             , 345.6             , 346.6             , 347.6             , 346.6             , 347.6             , 348.6             , 349.6             , 348.6             , 349.6             , 350.6             , 351.6             , 350.6             , 351.6             , 352.6             , 353.6             , 354.6             , 355.6             , 356.6             , 357.6             , 343.9714285714286 , 344.9714285714286 , 345.9714285714286 , 346.9714285714286 , 333.34285714285716, 334.34285714285716, 335.34285714285716, 336.34285714285716, 330.46666666666664, 331.46666666666664, 332.46666666666664, 333.46666666666664, 325.64            , 326.64            , 327.64            , 328.64            , 317.4             , 318.4             , 319.4             , 320.4             , 296.3333333333333 , 297.3333333333333 , 298.3333333333333 , 299.3333333333333 , 298.3333333333333 , 299.3333333333333 , 300.3333333333333 , 301.3333333333333 , 300.3333333333333 , 301.3333333333333 , 302.3333333333333 , 303.3333333333333 , 302.3333333333333 , 303.3333333333333 , 304.3333333333333 , 305.3333333333333 , 306.3333333333333 , 307.3333333333333 , 308.3333333333333 , 309.3333333333333 , 298.14285714285717, 299.14285714285717, 300.14285714285717, 301.14285714285717, 289.95238095238096, 290.95238095238096, 291.95238095238096, 292.95238095238096, 287.8888888888889 , 288.8888888888889 , 289.8888888888889 , 290.8888888888889 , 284.2             , 285.2             , 286.2             , 287.2             , 277.6666666666667 , 278.6666666666667 , 279.6666666666667 , 280.6666666666667 , 267.57142857142856, 268.57142857142856, 269.57142857142856, 270.57142857142856, 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 271.57142857142856, 272.57142857142856, 273.57142857142856, 274.57142857142856, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 263.1904761904762 , 264.1904761904762 , 265.1904761904762 , 266.1904761904762 , 260.3142857142857 , 261.3142857142857 , 262.3142857142857 , 263.3142857142857 , 255.              , 256.              , 257.              , 258.              , 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 238.42857142857142, 239.42857142857142, 240.42857142857142, 241.42857142857142, 240.42857142857142, 241.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 246.42857142857142, 247.42857142857142, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 230.04761904761904, 231.04761904761904, 232.04761904761904, 233.04761904761904, 227.17142857142858, 228.17142857142858, 229.17142857142858, 230.17142857142858, 221.85714285714286, 222.85714285714286, 223.85714285714286, 224.85714285714286, 201.28571428571428, 202.28571428571428, 203.28571428571428, 204.28571428571428, 203.28571428571428, 204.28571428571428, 205.28571428571428, 206.28571428571428, 205.28571428571428, 206.28571428571428, 207.28571428571428, 208.28571428571428, 207.28571428571428, 208.28571428571428, 209.28571428571428, 210.28571428571428, 211.28571428571428, 212.28571428571428, 213.28571428571428, 214.28571428571428, 204.83673469387756, 205.83673469387756, 206.83673469387756, 207.83673469387756, 198.3877551020408 , 199.3877551020408 , 200.3877551020408 , 201.3877551020408 , 196.9047619047619 , 197.9047619047619 , 198.9047619047619 , 199.9047619047619 , 194.02857142857144, 195.02857142857144, 196.02857142857144, 197.02857142857144, 188.71428571428572, 189.71428571428572, 190.71428571428572, 191.71428571428572, 160.33333333333334, 161.33333333333334, 162.33333333333334, 163.33333333333334, 162.33333333333334, 163.33333333333334, 164.33333333333334, 165.33333333333334, 164.33333333333334, 165.33333333333334, 166.33333333333334, 167.33333333333334, 166.33333333333334, 167.33333333333334, 168.33333333333334, 169.33333333333334, 170.33333333333334, 171.33333333333334, 172.33333333333334, 173.33333333333334, 162.14285714285714, 163.14285714285714, 164.14285714285714, 165.14285714285714, 153.95238095238096, 154.95238095238096, 155.95238095238096, 156.95238095238096, 151.88888888888889, 152.88888888888889, 153.88888888888889, 154.88888888888889, 148.2             , 149.2             , 150.2             , 151.2             , 141.66666666666666, 142.66666666666666, 143.66666666666666, 144.66666666666666,  95.              ,  96.              ,  97.              ,  98.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 133.              , 134.              , 135.              , 136.              , 135.              , 136.              , 137.              , 138.              , 137.              , 138.              , 139.              , 140.              , 139.              , 140.              , 141.              , 142.              , 275.              , 276.              , 277.              , 278.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 281.              , 282.              , 283.              , 284.              , 285.              , 286.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 295.              , 296.              , 295.              , 296.              , 297.              , 298.              , 297.              , 298.              , 299.              , 300.              , 299.              , 300.              , 301.              , 302.              , 295.              , 296.              , 297.              , 298.              , 297.              , 298.              , 299.              , 300.              , 299.              , 300.              , 301.              , 302.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 315.              , 316.              , 315.              , 316.              , 317.              , 318.              , 317.              , 318.              , 319.              , 320.              , 319.              , 320.              , 321.              , 322.              , 315.              , 316.              , 317.              , 318.              , 317.              , 318.              , 319.              , 320.              , 319.              , 320.              , 321.              , 322.              , 321.              , 322.              , 323.              , 324.              , 325.              , 326.              , 327.              , 328.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 335.              , 336.              , 337.              , 338.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 335.              , 336.              , 337.              , 338.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 345.              , 346.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 370.55102040816325, 371.55102040816325, 372.55102040816325, 373.55102040816325, 364.1020408163265 , 365.1020408163265 , 366.1020408163265 , 367.1020408163265 , 357.6530612244898 , 358.6530612244898 , 359.6530612244898 , 360.6530612244898 , 351.2040816326531 , 352.2040816326531 , 353.2040816326531 , 354.2040816326531 , 346.23809523809524, 347.23809523809524, 348.23809523809524, 349.23809523809524, 338.48571428571427, 339.48571428571427, 340.48571428571427, 341.48571428571427, 325.85714285714283, 326.85714285714283, 327.85714285714283, 328.85714285714283, 341.85714285714283, 342.85714285714283, 343.85714285714283, 344.85714285714283, 343.85714285714283, 344.85714285714283, 345.85714285714283, 346.85714285714283, 345.85714285714283, 346.85714285714283, 347.85714285714283, 348.85714285714283, 337.40816326530614, 338.40816326530614, 339.40816326530614, 340.40816326530614, 330.9591836734694 , 331.9591836734694 , 332.9591836734694 , 333.9591836734694 , 324.51020408163265, 325.51020408163265, 326.51020408163265, 327.51020408163265, 318.0612244897959 , 319.0612244897959 , 320.0612244897959 , 321.0612244897959 , 313.0952380952381 , 314.0952380952381 , 315.0952380952381 , 316.0952380952381 , 305.34285714285716, 306.34285714285716, 307.34285714285716, 308.34285714285716, 292.7142857142857 , 293.7142857142857 , 294.7142857142857 , 295.7142857142857 , 349.6666666666667 , 350.6666666666667 , 351.6666666666667 , 352.6666666666667 , 351.6666666666667 , 352.6666666666667 , 353.6666666666667 , 354.6666666666667 , 353.6666666666667 , 354.6666666666667 , 355.6666666666667 , 356.6666666666667 , 343.4761904761905 , 344.4761904761905 , 345.4761904761905 , 346.4761904761905 , 335.2857142857143 , 336.2857142857143 , 337.2857142857143 , 338.2857142857143 , 327.0952380952381 , 328.0952380952381 , 329.0952380952381 , 330.0952380952381 , 318.9047619047619 , 319.9047619047619 , 320.9047619047619 , 321.9047619047619 , 312.77777777777777, 313.77777777777777, 314.77777777777777, 315.77777777777777, 303.4             , 304.4             , 305.4             , 306.4             , 288.3333333333333 , 289.3333333333333 , 290.3333333333333 , 291.3333333333333 , 352.6             , 353.6             , 354.6             , 355.6             , 354.6             , 355.6             , 356.6             , 357.6             , 356.6             , 357.6             , 358.6             , 359.6             , 343.9714285714286 , 344.9714285714286 , 345.9714285714286 , 346.9714285714286 , 333.34285714285716, 334.34285714285716, 335.34285714285716, 336.34285714285716, 322.7142857142857 , 323.7142857142857 , 324.7142857142857 , 325.7142857142857 , 312.0857142857143 , 313.0857142857143 , 314.0857142857143 , 315.0857142857143 , 304.3333333333333 , 305.3333333333333 , 306.3333333333333 , 307.3333333333333 , 292.68            , 293.68            , 294.68            , 295.68            , 274.2             , 275.2             , 276.2             , 277.2             , 347.              , 348.              , 349.              , 350.              , 349.              , 350.              , 351.              , 352.              , 351.              , 352.              , 353.              , 354.              , 334.7142857142857 , 335.7142857142857 , 336.7142857142857 , 337.7142857142857 , 320.42857142857144, 321.42857142857144, 322.42857142857144, 323.42857142857144, 306.14285714285717, 307.14285714285717, 308.14285714285717, 309.14285714285717, 291.85714285714283, 292.85714285714283, 293.85714285714283, 294.85714285714283, 281.6666666666667 , 282.6666666666667 , 283.6666666666667 , 284.6666666666667 , 266.6             , 267.6             , 268.6             , 269.6             , 243.              , 244.              , 245.              , 246.              };
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x9x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 240.42857142857142, 241.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 246.42857142857142, 247.42857142857142, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 207.28571428571428, 208.28571428571428, 209.28571428571428, 210.28571428571428, 211.28571428571428, 212.28571428571428, 213.28571428571428, 214.28571428571428, 204.83673469387756, 205.83673469387756, 206.83673469387756, 207.83673469387756, 198.3877551020408 , 199.3877551020408 , 200.3877551020408 , 201.3877551020408 , 341.              , 342.              , 343.              , 344.              , 345.              , 346.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 370.55102040816325, 371.55102040816325, 372.55102040816325, 373.55102040816325, 364.1020408163265 , 365.1020408163265 , 366.1020408163265 , 367.1020408163265 , 357.6530612244898 , 358.6530612244898 , 359.6530612244898 , 360.6530612244898 , 351.2040816326531 , 352.2040816326531 , 353.2040816326531 , 354.2040816326531 , 337.40816326530614, 338.40816326530614, 339.40816326530614, 340.40816326530614, 330.9591836734694 , 331.9591836734694 , 332.9591836734694 , 333.9591836734694 , 324.51020408163265, 325.51020408163265, 326.51020408163265, 327.51020408163265, 318.0612244897959 , 319.0612244897959 , 320.0612244897959 , 321.0612244897959 };
  const std::array<int, 4> in_shape = {{ 3, 9, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 14.5,  15. ,  15.5,  16. ,  17. ,  17.5,  18. ,  18.5,  18.5,  19. ,  19.5,  20. ,  21. ,  21.5,  22. ,  22.5,  22.5,  23. ,  23.5,  24. ,  25. ,  25.5,  26. ,  26.5,  26.5,  27. ,  27.5,  28. ,  29. ,  29.5,  30. ,  30.5,  34.5,  35. ,  35.5,  36. ,  37. ,  37.5,  38. ,  38.5,  42.5,  43. ,  43.5,  44. ,  45. ,  45.5,  46. ,  46.5,  50.5,  51. ,  51.5,  52. ,  53. ,  53.5,  54. ,  54.5,  54.5,  55. ,  55.5,  56. ,  57. ,  57.5,  58. ,  58.5,  58.5,  59. ,  59.5,  60. ,  61. ,  61.5,  62. ,  62.5,  62.5,  63. ,  63.5,  64. ,  65. ,  65.5,  66. ,  66.5,  94.5,  95. ,  95.5,  96. ,  97. ,  97.5,  98. ,  98.5,  98.5,  99. ,  99.5, 100. , 101. , 101.5, 102. , 102.5, 102.5, 103. , 103.5, 104. , 105. , 105.5, 106. , 106.5, 106.5, 107. , 107.5, 108. , 109. , 109.5, 110. , 110.5, 114.5, 115. , 115.5, 116. , 117. , 117.5, 118. , 118.5, 122.5, 123. , 123.5, 124. , 125. , 125.5, 126. , 126.5, 130.5, 131. , 131.5, 132. , 133. , 133.5, 134. , 134.5, 134.5, 135. , 135.5, 136. , 137. , 137.5, 138. , 138.5, 138.5, 139. , 139.5, 140. , 141. , 141.5, 142. , 142.5, 142.5, 143. , 143.5, 144. , 145. , 145.5, 146. , 146.5, 174.5, 175. , 175.5, 176. , 177. , 177.5, 178. , 178.5, 178.5, 179. , 179.5, 180. , 181. , 181.5, 182. , 182.5, 182.5, 183. , 183.5, 184. , 185. , 185.5, 186. , 186.5, 186.5, 187. , 187.5, 188. , 189. , 189.5, 190. , 190.5, 194.5, 195. , 195.5, 196. , 197. , 197.5, 198. , 198.5, 202.5, 203. , 203.5, 204. , 205. , 205.5, 206. , 206.5, 210.5, 211. , 211.5, 212. , 213. , 213.5, 214. , 214.5, 214.5, 215. , 215.5, 216. , 217. , 217.5, 218. , 218.5, 218.5, 219. , 219.5, 220. , 221. , 221.5, 222. , 222.5, 222.5, 223. , 223.5, 224. , 225. , 225.5, 226. , 226.5};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  36.,  37.,  44.,  45.,  52.,  53., 108., 109., 116., 117., 124., 125., 132., 133., 188., 189., 196., 197., 204., 205., 212., 213.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 28.,  29.,  29.,  30.,  30.,  31.,  31.,  32.,  33.,  34.,  34.,  35.,  35.,  36.,  36.,  37.,  36.,  37.,  37.,  38.,  38.,  39.,  39.,  40.,  41.,  42.,  42.,  43.,  43.,  44.,  44.,  45.,  44.,  45.,  45.,  46.,  46.,  47.,  47.,  48.,  49.,  50.,  50.,  51.,  51.,  52.,  52.,  53.,  52.,  53.,  53.,  54.,  54.,  55.,  55.,  56.,  57.,  58.,  58.,  59.,  59.,  60.,  60.,  61.,  68.,  69.,  69.,  70.,  70.,  71.,  71.,  72.,  73.,  74.,  74.,  75.,  75.,  76.,  76.,  77.,  84.,  85.,  85.,  86.,  86.,  87.,  87.,  88.,  89.,  90.,  90.,  91.,  91.,  92.,  92.,  93., 100., 101., 101., 102., 102., 103., 103., 104., 105., 106., 106., 107., 107., 108., 108., 109., 108., 109., 109., 110., 110., 111., 111., 112., 113., 114., 114., 115., 115., 116., 116., 117., 116., 117., 117., 118., 118., 119., 119., 120., 121., 122., 122., 123., 123., 124., 124., 125., 124., 125., 125., 126., 126., 127., 127., 128., 129., 130., 130., 131., 131., 132., 132., 133., 188., 189., 189., 190., 190., 191., 191., 192., 193., 194., 194., 195., 195., 196., 196., 197., 196., 197., 197., 198., 198., 199., 199., 200., 201., 202., 202., 203., 203., 204., 204., 205., 204., 205., 205., 206., 206., 207., 207., 208., 209., 210., 210., 211., 211., 212., 212., 213., 212., 213., 213., 214., 214., 215., 215., 216., 217., 218., 218., 219., 219., 220., 220., 221., 228., 229., 229., 230., 230., 231., 231., 232., 233., 234., 234., 235., 235., 236., 236., 237., 244., 245., 245., 246., 246., 247., 247., 248., 249., 250., 250., 251., 251., 252., 252., 253., 260., 261., 261., 262., 262., 263., 263., 264., 265., 266., 266., 267., 267., 268., 268., 269., 268., 269., 269., 270., 270., 271., 271., 272., 273., 274., 274., 275., 275., 276., 276., 277., 276., 277., 277., 278., 278., 279., 279., 280., 281., 282., 282., 283., 283., 284., 284., 285., 284., 285., 285., 286., 286., 287., 287., 288., 289., 290., 290., 291., 291., 292., 292., 293., 348., 349., 349., 350., 350., 351., 351., 352., 353., 354., 354., 355., 355., 356., 356., 357., 356., 357., 357., 358., 358., 359., 359., 360., 361., 362., 362., 363., 363., 364., 364., 365., 364., 365., 365., 366., 366., 367., 367., 368., 369., 370., 370., 371., 371., 372., 372., 373., 372., 373., 373., 374., 374., 375., 375., 376., 377., 378., 378., 379., 379., 380., 380., 381., 388., 389., 389., 390., 390., 391., 391., 392., 393., 394., 394., 395., 395., 396., 396., 397., 404., 405., 405., 406., 406., 407., 407., 408., 409., 410., 410., 411., 411., 412., 412., 413., 420., 421., 421., 422., 422., 423., 423., 424., 425., 426., 426., 427., 427., 428., 428., 429., 428., 429., 429., 430., 430., 431., 431., 432., 433., 434., 434., 435., 435., 436., 436., 437., 436., 437., 437., 438., 438., 439., 439., 440., 441., 442., 442., 443., 443., 444., 444., 445., 444., 445., 445., 446., 446., 447., 447., 448., 449., 450., 450., 451., 451., 452., 452., 453.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.,  56.,  57.,  58.,  71.,  72.,  73.,  74.,  87.,  88.,  89.,  90., 103., 104., 105., 106., 215., 216., 217., 218., 231., 232., 233., 234., 247., 248., 249., 250., 263., 264., 265., 266., 375., 376., 377., 378., 391., 392., 393., 394., 407., 408., 409., 410., 423., 424., 425., 426.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 55.              ,  56.              ,  57.              ,  58.              ,  57.              ,  58.              ,  59.              ,  60.              ,  59.              ,  60.              ,  61.              ,  62.              ,  61.              ,  62.              ,  63.              ,  64.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              ,  75.              ,  76.              ,  77.              ,  78.              ,  77.              ,  78.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 103.              , 104.              , 105.              , 106.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 135.              , 136.              , 137.              , 138.              , 137.              , 138.              , 139.              , 140.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 183.              , 184.              , 185.              , 186.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 263.              , 264.              , 265.              , 266.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 381.              , 382.              , 383.              , 384.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              , 391.              , 392.              , 393.              , 394.              , 393.              , 394.              , 395.              , 396.              , 395.              , 396.              , 397.              , 398.              , 397.              , 398.              , 399.              , 400.              , 401.              , 402.              , 403.              , 404.              , 403.              , 404.              , 405.              , 406.              , 405.              , 406.              , 407.              , 408.              , 407.              , 408.              , 409.              , 410.              , 407.              , 408.              , 409.              , 410.              , 409.              , 410.              , 411.              , 412.              , 411.              , 412.              , 413.              , 414.              , 413.              , 414.              , 415.              , 416.              , 417.              , 418.              , 419.              , 420.              , 419.              , 420.              , 421.              , 422.              , 421.              , 422.              , 423.              , 424.              , 423.              , 424.              , 425.              , 426.              , 349.85714285714283, 350.85714285714283, 351.85714285714283, 352.85714285714283, 351.85714285714283, 352.85714285714283, 353.85714285714283, 354.85714285714283, 353.85714285714283, 354.85714285714283, 355.85714285714283, 356.85714285714283, 355.85714285714283, 356.85714285714283, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 361.85714285714283, 362.85714285714283, 361.85714285714283, 362.85714285714283, 363.85714285714283, 364.85714285714283, 363.85714285714283, 364.85714285714283, 365.85714285714283, 366.85714285714283, 365.85714285714283, 366.85714285714283, 367.85714285714283, 368.85714285714283, 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 312.7142857142857 , 313.7142857142857 , 314.7142857142857 , 315.7142857142857 , 314.7142857142857 , 315.7142857142857 , 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 320.7142857142857 , 321.7142857142857 , 320.7142857142857 , 321.7142857142857 , 322.7142857142857 , 323.7142857142857 , 322.7142857142857 , 323.7142857142857 , 324.7142857142857 , 325.7142857142857 , 324.7142857142857 , 325.7142857142857 , 326.7142857142857 , 327.7142857142857 , 267.57142857142856, 268.57142857142856, 269.57142857142856, 270.57142857142856, 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 271.57142857142856, 272.57142857142856, 273.57142857142856, 274.57142857142856, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 279.57142857142856, 280.57142857142856, 281.57142857142856, 282.57142857142856, 281.57142857142856, 282.57142857142856, 283.57142857142856, 284.57142857142856, 283.57142857142856, 284.57142857142856, 285.57142857142856, 286.57142857142856, 226.42857142857142, 227.42857142857142, 228.42857142857142, 229.42857142857142, 228.42857142857142, 229.42857142857142, 230.42857142857142, 231.42857142857142, 230.42857142857142, 231.42857142857142, 232.42857142857142, 233.42857142857142, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 238.42857142857142, 239.42857142857142, 240.42857142857142, 241.42857142857142, 240.42857142857142, 241.42857142857142, 242.42857142857142, 243.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 193.66666666666666, 194.66666666666666, 195.66666666666666, 196.66666666666666, 195.66666666666666, 196.66666666666666, 197.66666666666666, 198.66666666666666, 197.66666666666666, 198.66666666666666, 199.66666666666666, 200.66666666666666, 199.66666666666666, 200.66666666666666, 201.66666666666666, 202.66666666666666, 203.66666666666666, 204.66666666666666, 205.66666666666666, 206.66666666666666, 205.66666666666666, 206.66666666666666, 207.66666666666666, 208.66666666666666, 207.66666666666666, 208.66666666666666, 209.66666666666666, 210.66666666666666, 209.66666666666666, 210.66666666666666, 211.66666666666666, 212.66666666666666, 141.4             , 142.4             , 143.4             , 144.4             , 143.4             , 144.4             , 145.4             , 146.4             , 145.4             , 146.4             , 147.4             , 148.4             , 147.4             , 148.4             , 149.4             , 150.4             , 151.4             , 152.4             , 153.4             , 154.4             , 153.4             , 154.4             , 155.4             , 156.4             , 155.4             , 156.4             , 157.4             , 158.4             , 157.4             , 158.4             , 159.4             , 160.4             ,  55.              ,  56.              ,  57.              ,  58.              ,  57.              ,  58.              ,  59.              ,  60.              ,  59.              ,  60.              ,  61.              ,  62.              ,  61.              ,  62.              ,  63.              ,  64.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              , 183.              , 184.              , 185.              , 186.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 193.              , 194.              , 195.              , 196.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 231.              , 232.              , 233.              , 234.              , 233.              , 234.              , 235.              , 236.              , 235.              , 236.              , 237.              , 238.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 263.              , 264.              , 265.              , 266.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 295.              , 296.              , 297.              , 298.              , 297.              , 298.              , 299.              , 300.              , 299.              , 300.              , 301.              , 302.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 307.              , 308.              , 309.              , 310.              , 309.              , 310.              , 311.              , 312.              , 311.              , 312.              , 313.              , 314.              , 327.              , 328.              , 329.              , 330.              , 329.              , 330.              , 331.              , 332.              , 331.              , 332.              , 333.              , 334.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 343.              , 344.              , 345.              , 346.              , 343.              , 344.              , 345.              , 346.              , 345.              , 346.              , 347.              , 348.              , 347.              , 348.              , 349.              , 350.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 355.              , 356.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 363.              , 364.              , 365.              , 366.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 371.              , 372.              , 373.              , 374.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 381.              , 382.              , 383.              , 384.              , 385.              , 386.              , 387.              , 388.              , 387.              , 388.              , 389.              , 390.              , 389.              , 390.              , 391.              , 392.              , 391.              , 392.              , 393.              , 394.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 115.              , 116.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 355.85714285714283, 356.85714285714283, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 361.85714285714283, 362.85714285714283, 314.7142857142857 , 315.7142857142857 , 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 320.7142857142857 , 321.7142857142857 , 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 16. ,  16.5,  17. ,  17.5,  18.5,  19.5,  20. ,  20.5,  21. ,  20.5,  21. ,  21.5,  22. ,  23. ,  24. ,  24.5,  25. ,  25.5,  25. ,  25.5,  26. ,  26.5,  27.5,  28.5,  29. ,  29.5,  30. ,  29.5,  30. ,  30.5,  31. ,  32. ,  33. ,  33.5,  34. ,  34.5,  38.5,  39. ,  39.5,  40. ,  41. ,  42. ,  42.5,  43. ,  43.5,  47.5,  48. ,  48.5,  49. ,  50. ,  51. ,  51.5,  52. ,  52.5,  56.5,  57. ,  57.5,  58. ,  59. ,  60. ,  60.5,  61. ,  61.5,  61. ,  61.5,  62. ,  62.5,  63.5,  64.5,  65. ,  65.5,  66. ,  65.5,  66. ,  66.5,  67. ,  68. ,  69. ,  69.5,  70. ,  70.5,  70. ,  70.5,  71. ,  71.5,  72.5,  73.5,  74. ,  74.5,  75. , 106. , 106.5, 107. , 107.5, 108.5, 109.5, 110. , 110.5, 111. , 110.5, 111. , 111.5, 112. , 113. , 114. , 114.5, 115. , 115.5, 115. , 115.5, 116. , 116.5, 117.5, 118.5, 119. , 119.5, 120. , 119.5, 120. , 120.5, 121. , 122. , 123. , 123.5, 124. , 124.5, 128.5, 129. , 129.5, 130. , 131. , 132. , 132.5, 133. , 133.5, 137.5, 138. , 138.5, 139. , 140. , 141. , 141.5, 142. , 142.5, 146.5, 147. , 147.5, 148. , 149. , 150. , 150.5, 151. , 151.5, 151. , 151.5, 152. , 152.5, 153.5, 154.5, 155. , 155.5, 156. , 155.5, 156. , 156.5, 157. , 158. , 159. , 159.5, 160. , 160.5, 160. , 160.5, 161. , 161.5, 162.5, 163.5, 164. , 164.5, 165. , 196. , 196.5, 197. , 197.5, 198.5, 199.5, 200. , 200.5, 201. , 200.5, 201. , 201.5, 202. , 203. , 204. , 204.5, 205. , 205.5, 205. , 205.5, 206. , 206.5, 207.5, 208.5, 209. , 209.5, 210. , 209.5, 210. , 210.5, 211. , 212. , 213. , 213.5, 214. , 214.5, 218.5, 219. , 219.5, 220. , 221. , 222. , 222.5, 223. , 223.5, 227.5, 228. , 228.5, 229. , 230. , 231. , 231.5, 232. , 232.5, 236.5, 237. , 237.5, 238. , 239. , 240. , 240.5, 241. , 241.5, 241. , 241.5, 242. , 242.5, 243.5, 244.5, 245. , 245.5, 246. , 245.5, 246. , 246.5, 247. , 248. , 249. , 249.5, 250. , 250.5, 250. , 250.5, 251. , 251.5, 252.5, 253.5, 254. , 254.5, 255. };
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.,  32.,  33.,  40.,  41.,  42.,  49.,  50.,  51.,  58.,  59.,  60., 121., 122., 123., 130., 131., 132., 139., 140., 141., 148., 149., 150., 211., 212., 213., 220., 221., 222., 229., 230., 231., 238., 239., 240.};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 31.              ,  32.              ,  32.              ,  33.              ,  33.              ,  34.              ,  34.              ,  35.              ,  36.              ,  37.              ,  38.              ,  39.              ,  39.              ,  40.              ,  40.              ,  41.              ,  41.              ,  42.              ,  40.              ,  41.              ,  41.              ,  42.              ,  42.              ,  43.              ,  43.              ,  44.              ,  45.              ,  46.              ,  47.              ,  48.              ,  48.              ,  49.              ,  49.              ,  50.              ,  50.              ,  51.              ,  49.              ,  50.              ,  50.              ,  51.              ,  51.              ,  52.              ,  52.              ,  53.              ,  54.              ,  55.              ,  56.              ,  57.              ,  57.              ,  58.              ,  58.              ,  59.              ,  59.              ,  60.              ,  58.              ,  59.              ,  59.              ,  60.              ,  60.              ,  61.              ,  61.              ,  62.              ,  63.              ,  64.              ,  65.              ,  66.              ,  66.              ,  67.              ,  67.              ,  68.              ,  68.              ,  69.              ,  76.              ,  77.              ,  77.              ,  78.              ,  78.              ,  79.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  84.              ,  85.              ,  85.              ,  86.              ,  86.              ,  87.              ,  94.              ,  95.              ,  95.              ,  96.              ,  96.              ,  97.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 102.              , 103.              , 103.              , 104.              , 104.              , 105.              , 112.              , 113.              , 113.              , 114.              , 114.              , 115.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 120.              , 121.              , 121.              , 122.              , 122.              , 123.              , 121.              , 122.              , 122.              , 123.              , 123.              , 124.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 129.              , 130.              , 130.              , 131.              , 131.              , 132.              , 130.              , 131.              , 131.              , 132.              , 132.              , 133.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 138.              , 139.              , 139.              , 140.              , 140.              , 141.              , 139.              , 140.              , 140.              , 141.              , 141.              , 142.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 147.              , 148.              , 148.              , 149.              , 149.              , 150.              , 211.              , 212.              , 212.              , 213.              , 213.              , 214.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 219.              , 220.              , 220.              , 221.              , 221.              , 222.              , 220.              , 221.              , 221.              , 222.              , 222.              , 223.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 228.              , 229.              , 229.              , 230.              , 230.              , 231.              , 229.              , 230.              , 230.              , 231.              , 231.              , 232.              , 232.              , 233.              , 234.              , 235.              , 236.              , 237.              , 237.              , 238.              , 238.              , 239.              , 239.              , 240.              , 238.              , 239.              , 239.              , 240.              , 240.              , 241.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 246.              , 247.              , 247.              , 248.              , 248.              , 249.              , 256.              , 257.              , 257.              , 258.              , 258.              , 259.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 264.              , 265.              , 265.              , 266.              , 266.              , 267.              , 274.              , 275.              , 275.              , 276.              , 276.              , 277.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 282.              , 283.              , 283.              , 284.              , 284.              , 285.              , 292.              , 293.              , 293.              , 294.              , 294.              , 295.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 300.              , 301.              , 301.              , 302.              , 302.              , 303.              , 301.              , 302.              , 302.              , 303.              , 303.              , 304.              , 304.              , 305.              , 306.              , 307.              , 308.              , 309.              , 309.              , 310.              , 310.              , 311.              , 311.              , 312.              , 310.              , 311.              , 311.              , 312.              , 312.              , 313.              , 313.              , 314.              , 315.              , 316.              , 317.              , 318.              , 318.              , 319.              , 319.              , 320.              , 320.              , 321.              , 319.              , 320.              , 320.              , 321.              , 321.              , 322.              , 322.              , 323.              , 324.              , 325.              , 326.              , 327.              , 327.              , 328.              , 328.              , 329.              , 329.              , 330.              , 391.              , 392.              , 392.              , 393.              , 393.              , 394.              , 394.              , 395.              , 396.              , 397.              , 398.              , 399.              , 399.              , 400.              , 400.              , 401.              , 401.              , 402.              , 400.              , 401.              , 401.              , 402.              , 402.              , 403.              , 403.              , 404.              , 405.              , 406.              , 407.              , 408.              , 408.              , 409.              , 409.              , 410.              , 410.              , 411.              , 409.              , 410.              , 410.              , 411.              , 411.              , 412.              , 412.              , 413.              , 414.              , 415.              , 416.              , 417.              , 417.              , 418.              , 418.              , 419.              , 419.              , 420.              , 418.              , 419.              , 419.              , 420.              , 420.              , 421.              , 421.              , 422.              , 423.              , 424.              , 425.              , 426.              , 426.              , 427.              , 427.              , 428.              , 428.              , 429.              , 436.              , 437.              , 437.              , 438.              , 438.              , 439.              , 439.              , 440.              , 441.              , 442.              , 443.              , 444.              , 444.              , 445.              , 445.              , 446.              , 446.              , 447.              , 454.              , 455.              , 440.37142857142857, 441.37142857142857, 431.6190476190476 , 432.6190476190476 , 425.6530612244898 , 426.6530612244898 , 417.2040816326531 , 418.2040816326531 , 408.7551020408163 , 409.7551020408163 , 401.04761904761904, 402.04761904761904, 389.85714285714283, 390.85714285714283, 390.85714285714283, 391.85714285714283, 398.85714285714283, 399.85714285714283, 385.22857142857146, 386.22857142857146, 376.4761904761905 , 377.4761904761905 , 370.51020408163265, 371.51020408163265, 362.0612244897959 , 363.0612244897959 , 353.61224489795916, 354.61224489795916, 345.9047619047619 , 346.9047619047619 , 334.7142857142857 , 335.7142857142857 , 335.7142857142857 , 336.7142857142857 , 395.6666666666667 , 396.6666666666667 , 379.6             , 380.6             , 369.22222222222223, 370.22222222222223, 362.0952380952381 , 363.0952380952381 , 351.9047619047619 , 352.9047619047619 , 341.7142857142857 , 342.7142857142857 , 332.55555555555554, 333.55555555555554, 319.3333333333333 , 320.3333333333333 , 320.3333333333333 , 321.3333333333333 , 387.6             , 388.6             , 368.12            , 369.12            , 355.46666666666664, 356.46666666666664, 346.7142857142857 , 347.7142857142857 , 334.0857142857143 , 335.0857142857143 , 321.45714285714286, 322.45714285714286, 310.26666666666665, 311.26666666666665, 294.2             , 295.2             , 295.2             , 296.2             , 371.              , 372.              , 346.4             , 347.4             , 330.3333333333333 , 331.3333333333333 , 319.14285714285717, 320.14285714285717, 302.85714285714283, 303.85714285714283, 286.57142857142856, 287.57142857142856, 272.3333333333333 , 273.3333333333333 , 252.              , 253.              , 253.              , 254.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x9x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.              ,  62.              ,  63.              ,  64.              ,  65.              ,  66.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 241.              , 242.              , 243.              , 244.              , 245.              , 246.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 421.              , 422.              , 423.              , 424.              , 425.              , 426.              , 439.              , 440.              , 441.              , 442.              , 443.              , 444.              , 425.6530612244898 , 426.6530612244898 , 417.2040816326531 , 418.2040816326531 , 408.7551020408163 , 409.7551020408163 , 370.51020408163265, 371.51020408163265, 362.0612244897959 , 363.0612244897959 , 353.61224489795916, 354.61224489795916};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 61.              ,  62.              ,  63.              ,  64.              ,  63.              ,  64.              ,  65.              ,  66.              ,  65.              ,  66.              ,  67.              ,  68.              ,  67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  77.              ,  78.              ,  79.              ,  80.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  79.              ,  80.              ,  81.              ,  82.              ,  81.              ,  82.              ,  83.              ,  84.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  95.              ,  96.              ,  95.              ,  96.              ,  97.              ,  98.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              ,  97.              ,  98.              ,  99.              , 100.              ,  99.              , 100.              , 101.              , 102.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 115.              , 116.              , 117.              , 118.              , 117.              , 118.              , 119.              , 120.              , 119.              , 120.              , 121.              , 122.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 135.              , 136.              , 137.              , 138.              , 151.              , 152.              , 153.              , 154.              , 153.              , 154.              , 155.              , 156.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 203.              , 204.              , 205.              , 206.              , 205.              , 206.              , 207.              , 208.              , 207.              , 208.              , 209.              , 210.              , 223.              , 224.              , 225.              , 226.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 233.              , 234.              , 235.              , 236.              , 237.              , 238.              , 239.              , 240.              , 239.              , 240.              , 241.              , 242.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 241.              , 242.              , 243.              , 244.              , 243.              , 244.              , 245.              , 246.              , 245.              , 246.              , 247.              , 248.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 259.              , 260.              , 261.              , 262.              , 261.              , 262.              , 263.              , 264.              , 263.              , 264.              , 265.              , 266.              , 265.              , 266.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 277.              , 278.              , 279.              , 280.              , 279.              , 280.              , 281.              , 282.              , 281.              , 282.              , 283.              , 284.              , 283.              , 284.              , 285.              , 286.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 293.              , 294.              , 295.              , 296.              , 295.              , 296.              , 297.              , 298.              , 297.              , 298.              , 299.              , 300.              , 421.              , 422.              , 423.              , 424.              , 423.              , 424.              , 425.              , 426.              , 425.              , 426.              , 427.              , 428.              , 427.              , 428.              , 429.              , 430.              , 431.              , 432.              , 433.              , 434.              , 435.              , 436.              , 437.              , 438.              , 437.              , 438.              , 439.              , 440.              , 439.              , 440.              , 441.              , 442.              , 441.              , 442.              , 443.              , 444.              , 387.8             , 388.8             , 389.8             , 390.8             , 379.56            , 380.56            , 381.56            , 382.56            , 374.73333333333335, 375.73333333333335, 376.73333333333335, 377.73333333333335, 371.85714285714283, 372.85714285714283, 373.85714285714283, 374.85714285714283, 361.22857142857146, 362.22857142857146, 363.22857142857146, 364.22857142857146, 350.6             , 351.6             , 352.6             , 353.6             , 352.6             , 353.6             , 354.6             , 355.6             , 354.6             , 355.6             , 356.6             , 357.6             , 356.6             , 357.6             , 358.6             , 359.6             , 329.              , 330.              , 331.              , 332.              , 322.46666666666664, 323.46666666666664, 324.46666666666664, 325.46666666666664, 318.77777777777777, 319.77777777777777, 320.77777777777777, 321.77777777777777, 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 308.5238095238095 , 309.5238095238095 , 310.5238095238095 , 311.5238095238095 , 300.3333333333333 , 301.3333333333333 , 302.3333333333333 , 303.3333333333333 , 302.3333333333333 , 303.3333333333333 , 304.3333333333333 , 305.3333333333333 , 304.3333333333333 , 305.3333333333333 , 306.3333333333333 , 307.3333333333333 , 306.3333333333333 , 307.3333333333333 , 308.3333333333333 , 309.3333333333333 , 292.14285714285717, 293.14285714285717, 294.14285714285717, 295.14285714285717, 286.8285714285714 , 287.8285714285714 , 288.8285714285714 , 289.8285714285714 , 283.95238095238096, 284.95238095238096, 285.95238095238096, 286.95238095238096, 282.46938775510205, 283.46938775510205, 284.46938775510205, 285.46938775510205, 276.0204081632653 , 277.0204081632653 , 278.0204081632653 , 279.0204081632653 , 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 271.57142857142856, 272.57142857142856, 273.57142857142856, 274.57142857142856, 273.57142857142856, 274.57142857142856, 275.57142857142856, 276.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 255.              , 256.              , 257.              , 258.              , 249.68571428571428, 250.68571428571428, 251.68571428571428, 252.68571428571428, 246.8095238095238 , 247.8095238095238 , 248.8095238095238 , 249.8095238095238 , 245.3265306122449 , 246.3265306122449 , 247.3265306122449 , 248.3265306122449 , 238.87755102040816, 239.87755102040816, 240.87755102040816, 241.87755102040816, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 238.42857142857142, 239.42857142857142, 240.42857142857142, 241.42857142857142, 217.85714285714286, 218.85714285714286, 219.85714285714286, 220.85714285714286, 212.54285714285714, 213.54285714285714, 214.54285714285714, 215.54285714285714, 209.66666666666666, 210.66666666666666, 211.66666666666666, 212.66666666666666, 208.18367346938774, 209.18367346938774, 210.18367346938774, 211.18367346938774, 201.73469387755102, 202.73469387755102, 203.73469387755102, 204.73469387755102, 195.28571428571428, 196.28571428571428, 197.28571428571428, 198.28571428571428, 197.28571428571428, 198.28571428571428, 199.28571428571428, 200.28571428571428, 199.28571428571428, 200.28571428571428, 201.28571428571428, 202.28571428571428, 201.28571428571428, 202.28571428571428, 203.28571428571428, 204.28571428571428, 180.71428571428572, 181.71428571428572, 182.71428571428572, 183.71428571428572, 175.4             , 176.4             , 177.4             , 178.4             , 172.52380952380952, 173.52380952380952, 174.52380952380952, 175.52380952380952, 171.0408163265306 , 172.0408163265306 , 173.0408163265306 , 174.0408163265306 , 164.59183673469389, 165.59183673469389, 166.59183673469389, 167.59183673469389, 158.14285714285714, 159.14285714285714, 160.14285714285714, 161.14285714285714, 160.14285714285714, 161.14285714285714, 162.14285714285714, 163.14285714285714, 162.14285714285714, 163.14285714285714, 164.14285714285714, 165.14285714285714, 164.14285714285714, 165.14285714285714, 166.14285714285714, 167.14285714285714, 131.66666666666666, 132.66666666666666, 133.66666666666666, 134.66666666666666, 125.13333333333334, 126.13333333333334, 127.13333333333334, 128.13333333333333, 121.44444444444444, 122.44444444444444, 123.44444444444444, 124.44444444444444, 119.38095238095238, 120.38095238095238, 121.38095238095238, 122.38095238095238, 111.19047619047619, 112.19047619047619, 113.19047619047619, 114.19047619047619, 103.              , 104.              , 105.              , 106.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 121.              , 122.              , 123.              , 124.              , 123.              , 124.              , 125.              , 126.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 143.              , 144.              , 145.              , 146.              , 145.              , 146.              , 147.              , 148.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 273.              , 274.              , 275.              , 276.              , 275.              , 276.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 283.              , 284.              , 285.              , 286.              , 285.              , 286.              , 287.              , 288.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 293.              , 294.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 301.              , 302.              , 303.              , 304.              , 303.              , 304.              , 305.              , 306.              , 305.              , 306.              , 307.              , 308.              , 307.              , 308.              , 309.              , 310.              , 305.              , 306.              , 307.              , 308.              , 307.              , 308.              , 309.              , 310.              , 309.              , 310.              , 311.              , 312.              , 311.              , 312.              , 313.              , 314.              , 315.              , 316.              , 317.              , 318.              , 319.              , 320.              , 321.              , 322.              , 321.              , 322.              , 323.              , 324.              , 323.              , 324.              , 325.              , 326.              , 325.              , 326.              , 327.              , 328.              , 323.              , 324.              , 325.              , 326.              , 325.              , 326.              , 327.              , 328.              , 327.              , 328.              , 329.              , 330.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 343.              , 344.              , 345.              , 346.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 363.              , 364.              , 365.              , 366.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 395.              , 396.              , 397.              , 398.              , 382.37142857142857, 383.37142857142857, 384.37142857142857, 385.37142857142857, 374.6190476190476 , 375.6190476190476 , 376.6190476190476 , 377.6190476190476 , 369.6530612244898 , 370.6530612244898 , 371.6530612244898 , 372.6530612244898 , 363.2040816326531 , 364.2040816326531 , 365.2040816326531 , 366.2040816326531 , 356.7551020408163 , 357.7551020408163 , 358.7551020408163 , 359.7551020408163 , 350.04761904761904, 351.04761904761904, 352.04761904761904, 353.04761904761904, 339.85714285714283, 340.85714285714283, 341.85714285714283, 342.85714285714283, 341.85714285714283, 342.85714285714283, 343.85714285714283, 344.85714285714283, 357.85714285714283, 358.85714285714283, 359.85714285714283, 360.85714285714283, 345.22857142857146, 346.22857142857146, 347.22857142857146, 348.22857142857146, 337.4761904761905 , 338.4761904761905 , 339.4761904761905 , 340.4761904761905 , 332.51020408163265, 333.51020408163265, 334.51020408163265, 335.51020408163265, 326.0612244897959 , 327.0612244897959 , 328.0612244897959 , 329.0612244897959 , 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916, 312.9047619047619 , 313.9047619047619 , 314.9047619047619 , 315.9047619047619 , 302.7142857142857 , 303.7142857142857 , 304.7142857142857 , 305.7142857142857 , 304.7142857142857 , 305.7142857142857 , 306.7142857142857 , 307.7142857142857 , 363.6666666666667 , 364.6666666666667 , 365.6666666666667 , 366.6666666666667 , 348.6             , 349.6             , 350.6             , 351.6             , 339.22222222222223, 340.22222222222223, 341.22222222222223, 342.22222222222223, 333.0952380952381 , 334.0952380952381 , 335.0952380952381 , 336.0952380952381 , 324.9047619047619 , 325.9047619047619 , 326.9047619047619 , 327.9047619047619 , 316.7142857142857 , 317.7142857142857 , 318.7142857142857 , 319.7142857142857 , 308.55555555555554, 309.55555555555554, 310.55555555555554, 311.55555555555554, 296.3333333333333 , 297.3333333333333 , 298.3333333333333 , 299.3333333333333 , 298.3333333333333 , 299.3333333333333 , 300.3333333333333 , 301.3333333333333 , 364.6             , 365.6             , 366.6             , 367.6             , 346.12            , 347.12            , 348.12            , 349.12            , 334.46666666666664, 335.46666666666664, 336.46666666666664, 337.46666666666664, 326.7142857142857 , 327.7142857142857 , 328.7142857142857 , 329.7142857142857 , 316.0857142857143 , 317.0857142857143 , 318.0857142857143 , 319.0857142857143 , 305.45714285714286, 306.45714285714286, 307.45714285714286, 308.45714285714286, 295.26666666666665, 296.26666666666665, 297.26666666666665, 298.26666666666665, 280.2             , 281.2             , 282.2             , 283.2             , 282.2             , 283.2             , 284.2             , 285.2             , 357.              , 358.              , 359.              , 360.              , 333.4             , 334.4             , 335.4             , 336.4             , 318.3333333333333 , 319.3333333333333 , 320.3333333333333 , 321.3333333333333 , 308.14285714285717, 309.14285714285717, 310.14285714285717, 311.14285714285717, 293.85714285714283, 294.85714285714283, 295.85714285714283, 296.85714285714283, 279.57142857142856, 280.57142857142856, 281.57142857142856, 282.57142857142856, 266.3333333333333 , 267.3333333333333 , 268.3333333333333 , 269.3333333333333 , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x9x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 193.              , 194.              , 195.              , 196.              , 197.              , 198.              , 199.              , 200.              , 201.              , 202.              , 203.              , 204.              , 229.              , 230.              , 231.              , 232.              , 233.              , 234.              , 235.              , 236.              , 237.              , 238.              , 239.              , 240.              , 282.46938775510205, 283.46938775510205, 284.46938775510205, 285.46938775510205, 276.0204081632653 , 277.0204081632653 , 278.0204081632653 , 279.0204081632653 , 269.57142857142856, 270.57142857142856, 271.57142857142856, 272.57142857142856, 245.3265306122449 , 246.3265306122449 , 247.3265306122449 , 248.3265306122449 , 238.87755102040816, 239.87755102040816, 240.87755102040816, 241.87755102040816, 232.42857142857142, 233.42857142857142, 234.42857142857142, 235.42857142857142, 208.18367346938774, 209.18367346938774, 210.18367346938774, 211.18367346938774, 201.73469387755102, 202.73469387755102, 203.73469387755102, 204.73469387755102, 195.28571428571428, 196.28571428571428, 197.28571428571428, 198.28571428571428, 171.0408163265306 , 172.0408163265306 , 173.0408163265306 , 174.0408163265306 , 164.59183673469389, 165.59183673469389, 166.59183673469389, 167.59183673469389, 158.14285714285714, 159.14285714285714, 160.14285714285714, 161.14285714285714, 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 335.              , 336.              , 337.              , 338.              , 339.              , 340.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 373.              , 374.              , 375.              , 376.              , 369.6530612244898 , 370.6530612244898 , 371.6530612244898 , 372.6530612244898 , 363.2040816326531 , 364.2040816326531 , 365.2040816326531 , 366.2040816326531 , 356.7551020408163 , 357.7551020408163 , 358.7551020408163 , 359.7551020408163 , 332.51020408163265, 333.51020408163265, 334.51020408163265, 335.51020408163265, 326.0612244897959 , 327.0612244897959 , 328.0612244897959 , 329.0612244897959 , 319.61224489795916, 320.61224489795916, 321.61224489795916, 322.61224489795916};
  const std::array<int, 4> in_shape = {{ 3, 10, 9, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 17.5,  18. ,  18.5,  19. ,  20. ,  21. ,  22. ,  22.5,  23. ,  23.5,  22.5,  23. ,  23.5,  24. ,  25. ,  26. ,  27. ,  27.5,  28. ,  28.5,  27.5,  28. ,  28.5,  29. ,  30. ,  31. ,  32. ,  32.5,  33. ,  33.5,  32.5,  33. ,  33.5,  34. ,  35. ,  36. ,  37. ,  37.5,  38. ,  38.5,  42.5,  43. ,  43.5,  44. ,  45. ,  46. ,  47. ,  47.5,  48. ,  48.5,  52.5,  53. ,  53.5,  54. ,  55. ,  56. ,  57. ,  57.5,  58. ,  58.5,  62.5,  63. ,  63.5,  64. ,  65. ,  66. ,  67. ,  67.5,  68. ,  68.5,  67.5,  68. ,  68.5,  69. ,  70. ,  71. ,  72. ,  72.5,  73. ,  73.5,  72.5,  73. ,  73.5,  74. ,  75. ,  76. ,  77. ,  77.5,  78. ,  78.5,  77.5,  78. ,  78.5,  79. ,  80. ,  81. ,  82. ,  82.5,  83. ,  83.5, 117.5, 118. , 118.5, 119. , 120. , 121. , 122. , 122.5, 123. , 123.5, 122.5, 123. , 123.5, 124. , 125. , 126. , 127. , 127.5, 128. , 128.5, 127.5, 128. , 128.5, 129. , 130. , 131. , 132. , 132.5, 133. , 133.5, 132.5, 133. , 133.5, 134. , 135. , 136. , 137. , 137.5, 138. , 138.5, 142.5, 143. , 143.5, 144. , 145. , 146. , 147. , 147.5, 148. , 148.5, 152.5, 153. , 153.5, 154. , 155. , 156. , 157. , 157.5, 158. , 158.5, 162.5, 163. , 163.5, 164. , 165. , 166. , 167. , 167.5, 168. , 168.5, 167.5, 168. , 168.5, 169. , 170. , 171. , 172. , 172.5, 173. , 173.5, 172.5, 173. , 173.5, 174. , 175. , 176. , 177. , 177.5, 178. , 178.5, 177.5, 178. , 178.5, 179. , 180. , 181. , 182. , 182.5, 183. , 183.5, 217.5, 218. , 218.5, 219. , 220. , 221. , 222. , 222.5, 223. , 223.5, 222.5, 223. , 223.5, 224. , 225. , 226. , 227. , 227.5, 228. , 228.5, 227.5, 228. , 228.5, 229. , 230. , 231. , 232. , 232.5, 233. , 233.5, 232.5, 233. , 233.5, 234. , 235. , 236. , 237. , 237.5, 238. , 238.5, 242.5, 243. , 243.5, 244. , 245. , 246. , 247. , 247.5, 248. , 248.5, 252.5, 253. , 253.5, 254. , 255. , 256. , 257. , 257.5, 258. , 258.5, 262.5, 263. , 263.5, 264. , 265. , 266. , 267. , 267.5, 268. , 268.5, 267.5, 268. , 268.5, 269. , 270. , 271. , 272. , 272.5, 273. , 273.5, 272.5, 273. , 273.5, 274. , 275. , 276. , 277. , 277.5, 278. , 278.5, 277.5, 278. , 278.5, 279. , 280. , 281. , 282. , 282.5, 283. , 283.5};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.,  35.,  36.,  37.,  44.,  45.,  46.,  47.,  54.,  55.,  56.,  57.,  64.,  65.,  66.,  67., 134., 135., 136., 137., 144., 145., 146., 147., 154., 155., 156., 157., 164., 165., 166., 167., 234., 235., 236., 237., 244., 245., 246., 247., 254., 255., 256., 257., 264., 265., 266., 267.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 34.              ,  35.              ,  35.              ,  36.              ,  36.              ,  37.              ,  37.              ,  38.              ,  39.              ,  40.              ,  41.              ,  42.              ,  43.              ,  44.              ,  44.              ,  45.              ,  45.              ,  46.              ,  46.              ,  47.              ,  44.              ,  45.              ,  45.              ,  46.              ,  46.              ,  47.              ,  47.              ,  48.              ,  49.              ,  50.              ,  51.              ,  52.              ,  53.              ,  54.              ,  54.              ,  55.              ,  55.              ,  56.              ,  56.              ,  57.              ,  54.              ,  55.              ,  55.              ,  56.              ,  56.              ,  57.              ,  57.              ,  58.              ,  59.              ,  60.              ,  61.              ,  62.              ,  63.              ,  64.              ,  64.              ,  65.              ,  65.              ,  66.              ,  66.              ,  67.              ,  64.              ,  65.              ,  65.              ,  66.              ,  66.              ,  67.              ,  67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  74.              ,  75.              ,  75.              ,  76.              ,  76.              ,  77.              ,  84.              ,  85.              ,  85.              ,  86.              ,  86.              ,  87.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  94.              ,  95.              ,  95.              ,  96.              ,  96.              ,  97.              , 104.              , 105.              , 105.              , 106.              , 106.              , 107.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 114.              , 115.              , 115.              , 116.              , 116.              , 117.              , 124.              , 125.              , 125.              , 126.              , 126.              , 127.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 133.              , 134.              , 134.              , 135.              , 135.              , 136.              , 136.              , 137.              , 134.              , 135.              , 135.              , 136.              , 136.              , 137.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 144.              , 145.              , 145.              , 146.              , 146.              , 147.              , 144.              , 145.              , 145.              , 146.              , 146.              , 147.              , 147.              , 148.              , 149.              , 150.              , 151.              , 152.              , 153.              , 154.              , 154.              , 155.              , 155.              , 156.              , 156.              , 157.              , 154.              , 155.              , 155.              , 156.              , 156.              , 157.              , 157.              , 158.              , 159.              , 160.              , 161.              , 162.              , 163.              , 164.              , 164.              , 165.              , 165.              , 166.              , 166.              , 167.              , 234.              , 235.              , 235.              , 236.              , 236.              , 237.              , 237.              , 238.              , 239.              , 240.              , 241.              , 242.              , 243.              , 244.              , 244.              , 245.              , 245.              , 246.              , 246.              , 247.              , 244.              , 245.              , 245.              , 246.              , 246.              , 247.              , 247.              , 248.              , 249.              , 250.              , 251.              , 252.              , 253.              , 254.              , 254.              , 255.              , 255.              , 256.              , 256.              , 257.              , 254.              , 255.              , 255.              , 256.              , 256.              , 257.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 264.              , 265.              , 265.              , 266.              , 266.              , 267.              , 264.              , 265.              , 265.              , 266.              , 266.              , 267.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 274.              , 275.              , 275.              , 276.              , 276.              , 277.              , 284.              , 285.              , 285.              , 286.              , 286.              , 287.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 294.              , 295.              , 295.              , 296.              , 296.              , 297.              , 304.              , 305.              , 305.              , 306.              , 306.              , 307.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 314.              , 315.              , 315.              , 316.              , 316.              , 317.              , 324.              , 325.              , 325.              , 326.              , 326.              , 327.              , 327.              , 328.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 334.              , 335.              , 335.              , 336.              , 336.              , 337.              , 334.              , 335.              , 335.              , 336.              , 336.              , 337.              , 337.              , 338.              , 339.              , 340.              , 341.              , 342.              , 343.              , 344.              , 344.              , 345.              , 345.              , 346.              , 346.              , 347.              , 344.              , 345.              , 345.              , 346.              , 346.              , 347.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 353.              , 354.              , 354.              , 355.              , 355.              , 356.              , 356.              , 357.              , 354.              , 355.              , 355.              , 356.              , 356.              , 357.              , 357.              , 358.              , 359.              , 360.              , 361.              , 362.              , 363.              , 364.              , 364.              , 365.              , 365.              , 366.              , 366.              , 367.              , 434.              , 435.              , 435.              , 436.              , 436.              , 437.              , 437.              , 438.              , 439.              , 440.              , 441.              , 442.              , 443.              , 444.              , 444.              , 445.              , 445.              , 446.              , 446.              , 447.              , 444.              , 445.              , 445.              , 446.              , 446.              , 447.              , 447.              , 448.              , 449.              , 450.              , 451.              , 452.              , 453.              , 454.              , 454.              , 455.              , 455.              , 456.              , 456.              , 457.              , 454.              , 455.              , 455.              , 456.              , 456.              , 457.              , 444.8095238095238 , 445.8095238095238 , 434.6190476190476 , 435.6190476190476 , 424.42857142857144, 425.42857142857144, 414.23809523809524, 415.23809523809524, 407.1111111111111 , 408.1111111111111 , 396.73333333333335, 397.73333333333335, 380.6666666666667 , 381.6666666666667 , 390.85714285714283, 391.85714285714283, 391.85714285714283, 392.85714285714283, 392.85714285714283, 393.85714285714283, 383.40816326530614, 384.40816326530614, 374.9591836734694 , 375.9591836734694 , 366.51020408163265, 367.51020408163265, 358.0612244897959 , 359.0612244897959 , 352.0952380952381 , 353.0952380952381 , 343.34285714285716, 344.34285714285716, 329.7142857142857 , 330.7142857142857 , 337.7142857142857 , 338.7142857142857 , 338.7142857142857 , 339.7142857142857 , 339.7142857142857 , 340.7142857142857 , 330.265306122449  , 331.265306122449  , 321.81632653061223, 322.81632653061223, 313.3673469387755 , 314.3673469387755 , 304.9183673469388 , 305.9183673469388 , 298.95238095238096, 299.95238095238096, 290.2             , 291.2             , 276.57142857142856, 277.57142857142856, 284.57142857142856, 285.57142857142856, 285.57142857142856, 286.57142857142856, 286.57142857142856, 287.57142857142856, 277.1224489795918 , 278.1224489795918 , 268.6734693877551 , 269.6734693877551 , 260.2244897959184 , 261.2244897959184 , 251.77551020408163, 252.77551020408163, 245.8095238095238 , 246.8095238095238 , 237.05714285714285, 238.05714285714285, 223.42857142857142, 224.42857142857142, 231.42857142857142, 232.42857142857142, 232.42857142857142, 233.42857142857142, 233.42857142857142, 234.42857142857142, 223.9795918367347 , 224.9795918367347 , 215.53061224489795, 216.53061224489795, 207.08163265306123, 208.08163265306123, 198.6326530612245 , 199.6326530612245 , 192.66666666666666, 193.66666666666666, 183.9142857142857 , 184.9142857142857 , 170.28571428571428, 171.28571428571428, 192.66666666666666, 193.66666666666666, 193.66666666666666, 194.66666666666666, 194.66666666666666, 195.66666666666666, 183.47619047619048, 184.47619047619048, 173.28571428571428, 174.28571428571428, 163.0952380952381 , 164.0952380952381 , 152.9047619047619 , 153.9047619047619 , 145.77777777777777, 146.77777777777777, 135.4             , 136.4             , 119.33333333333333, 120.33333333333333, 134.4             , 135.4             , 135.4             , 136.4             , 136.4             , 137.4             , 122.77142857142857, 123.77142857142857, 110.14285714285714, 111.14285714285714,  97.51428571428572,  98.51428571428572,  84.88571428571429,  85.88571428571429,  76.13333333333334,  77.13333333333334,  63.48            ,  64.48            ,  44.              ,  45.              ,  42.              ,  43.              ,  43.              ,  44.              ,  44.              ,  45.              ,  45.              ,  46.              ,  47.              ,  48.              ,  49.              ,  50.              ,  51.              ,  52.              ,  52.              ,  53.              ,  53.              ,  54.              ,  54.              ,  55.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x10x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.              ,  68.              ,  69.              ,  70.              ,  71.              ,  72.              ,  73.              ,  74.              ,  87.              ,  88.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              , 107.              , 108.              , 109.              , 110.              , 111.              , 112.              , 113.              , 114.              , 127.              , 128.              , 129.              , 130.              , 131.              , 132.              , 133.              , 134.              , 267.              , 268.              , 269.              , 270.              , 271.              , 272.              , 273.              , 274.              , 287.              , 288.              , 289.              , 290.              , 291.              , 292.              , 293.              , 294.              , 307.              , 308.              , 309.              , 310.              , 311.              , 312.              , 313.              , 314.              , 327.              , 328.              , 329.              , 330.              , 331.              , 332.              , 333.              , 334.              , 383.40816326530614, 384.40816326530614, 374.9591836734694 , 375.9591836734694 , 366.51020408163265, 367.51020408163265, 358.0612244897959 , 359.0612244897959 , 330.265306122449  , 331.265306122449  , 321.81632653061223, 322.81632653061223, 313.3673469387755 , 314.3673469387755 , 304.9183673469388 , 305.9183673469388 , 277.1224489795918 , 278.1224489795918 , 268.6734693877551 , 269.6734693877551 , 260.2244897959184 , 261.2244897959184 , 251.77551020408163, 252.77551020408163, 223.9795918367347 , 224.9795918367347 , 215.53061224489795, 216.53061224489795, 207.08163265306123, 208.08163265306123, 198.6326530612245 , 199.6326530612245 };
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, SAME3x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 67.              ,  68.              ,  69.              ,  70.              ,  69.              ,  70.              ,  71.              ,  72.              ,  71.              ,  72.              ,  73.              ,  74.              ,  73.              ,  74.              ,  75.              ,  76.              ,  77.              ,  78.              ,  79.              ,  80.              ,  81.              ,  82.              ,  83.              ,  84.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  91.              ,  92.              ,  93.              ,  94.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 103.              , 104.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 107.              , 108.              , 109.              , 110.              , 109.              , 110.              , 111.              , 112.              , 111.              , 112.              , 113.              , 114.              , 113.              , 114.              , 115.              , 116.              , 117.              , 118.              , 119.              , 120.              , 121.              , 122.              , 123.              , 124.              , 125.              , 126.              , 127.              , 128.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 127.              , 128.              , 129.              , 130.              , 129.              , 130.              , 131.              , 132.              , 131.              , 132.              , 133.              , 134.              , 133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 147.              , 148.              , 149.              , 150.              , 149.              , 150.              , 151.              , 152.              , 151.              , 152.              , 153.              , 154.              , 167.              , 168.              , 169.              , 170.              , 169.              , 170.              , 171.              , 172.              , 171.              , 172.              , 173.              , 174.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 187.              , 188.              , 189.              , 190.              , 189.              , 190.              , 191.              , 192.              , 191.              , 192.              , 193.              , 194.              , 207.              , 208.              , 209.              , 210.              , 209.              , 210.              , 211.              , 212.              , 211.              , 212.              , 213.              , 214.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 227.              , 228.              , 229.              , 230.              , 229.              , 230.              , 231.              , 232.              , 231.              , 232.              , 233.              , 234.              , 247.              , 248.              , 249.              , 250.              , 249.              , 250.              , 251.              , 252.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 267.              , 268.              , 269.              , 270.              , 269.              , 270.              , 271.              , 272.              , 271.              , 272.              , 273.              , 274.              , 273.              , 274.              , 275.              , 276.              , 277.              , 278.              , 279.              , 280.              , 281.              , 282.              , 283.              , 284.              , 285.              , 286.              , 287.              , 288.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 287.              , 288.              , 289.              , 290.              , 289.              , 290.              , 291.              , 292.              , 291.              , 292.              , 293.              , 294.              , 293.              , 294.              , 295.              , 296.              , 297.              , 298.              , 299.              , 300.              , 301.              , 302.              , 303.              , 304.              , 305.              , 306.              , 307.              , 308.              , 307.              , 308.              , 309.              , 310.              , 309.              , 310.              , 311.              , 312.              , 311.              , 312.              , 313.              , 314.              , 307.              , 308.              , 309.              , 310.              , 309.              , 310.              , 311.              , 312.              , 311.              , 312.              , 313.              , 314.              , 313.              , 314.              , 315.              , 316.              , 317.              , 318.              , 319.              , 320.              , 321.              , 322.              , 323.              , 324.              , 325.              , 326.              , 327.              , 328.              , 327.              , 328.              , 329.              , 330.              , 329.              , 330.              , 331.              , 332.              , 331.              , 332.              , 333.              , 334.              , 339.              , 340.              , 341.              , 342.              , 341.              , 342.              , 343.              , 344.              , 343.              , 344.              , 345.              , 346.              , 345.              , 346.              , 347.              , 348.              , 349.              , 350.              , 351.              , 352.              , 334.7142857142857 , 335.7142857142857 , 336.7142857142857 , 337.7142857142857 , 320.42857142857144, 321.42857142857144, 322.42857142857144, 323.42857142857144, 316.3333333333333 , 317.3333333333333 , 318.3333333333333 , 319.3333333333333 , 309.8             , 310.8             , 311.8             , 312.8             , 299.              , 300.              , 301.              , 302.              , 282.2             , 283.2             , 284.2             , 285.2             , 284.2             , 285.2             , 286.2             , 287.2             , 286.2             , 287.2             , 288.2             , 289.2             , 288.2             , 289.2             , 290.2             , 291.2             , 292.2             , 293.2             , 294.2             , 295.2             , 281.57142857142856, 282.57142857142856, 283.57142857142856, 284.57142857142856, 270.9428571428571 , 271.9428571428571 , 272.9428571428571 , 273.9428571428571 , 268.06666666666666, 269.06666666666666, 270.06666666666666, 271.06666666666666, 263.24            , 264.24            , 265.24            , 266.24            , 255.              , 256.              , 257.              , 258.              , 251.              , 252.              , 253.              , 254.              , 253.              , 254.              , 255.              , 256.              , 255.              , 256.              , 257.              , 258.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 252.8095238095238 , 253.8095238095238 , 254.8095238095238 , 255.8095238095238 , 244.61904761904762, 245.61904761904762, 246.61904761904762, 247.61904761904762, 242.55555555555554, 243.55555555555554, 244.55555555555554, 245.55555555555554, 238.86666666666667, 239.86666666666667, 240.86666666666667, 241.86666666666667, 232.33333333333334, 233.33333333333334, 234.33333333333334, 235.33333333333334, 234.42857142857142, 235.42857142857142, 236.42857142857142, 237.42857142857142, 236.42857142857142, 237.42857142857142, 238.42857142857142, 239.42857142857142, 238.42857142857142, 239.42857142857142, 240.42857142857142, 241.42857142857142, 240.42857142857142, 241.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 246.42857142857142, 247.42857142857142, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 230.04761904761904, 231.04761904761904, 232.04761904761904, 233.04761904761904, 227.17142857142858, 228.17142857142858, 229.17142857142858, 230.17142857142858, 221.85714285714286, 222.85714285714286, 223.85714285714286, 224.85714285714286, 201.28571428571428, 202.28571428571428, 203.28571428571428, 204.28571428571428, 203.28571428571428, 204.28571428571428, 205.28571428571428, 206.28571428571428, 205.28571428571428, 206.28571428571428, 207.28571428571428, 208.28571428571428, 207.28571428571428, 208.28571428571428, 209.28571428571428, 210.28571428571428, 211.28571428571428, 212.28571428571428, 213.28571428571428, 214.28571428571428, 204.83673469387756, 205.83673469387756, 206.83673469387756, 207.83673469387756, 198.3877551020408 , 199.3877551020408 , 200.3877551020408 , 201.3877551020408 , 196.9047619047619 , 197.9047619047619 , 198.9047619047619 , 199.9047619047619 , 194.02857142857144, 195.02857142857144, 196.02857142857144, 197.02857142857144, 188.71428571428572, 189.71428571428572, 190.71428571428572, 191.71428571428572, 168.14285714285714, 169.14285714285714, 170.14285714285714, 171.14285714285714, 170.14285714285714, 171.14285714285714, 172.14285714285714, 173.14285714285714, 172.14285714285714, 173.14285714285714, 174.14285714285714, 175.14285714285714, 174.14285714285714, 175.14285714285714, 176.14285714285714, 177.14285714285714, 178.14285714285714, 179.14285714285714, 180.14285714285714, 181.14285714285714, 171.69387755102042, 172.69387755102042, 173.69387755102042, 174.69387755102042, 165.24489795918367, 166.24489795918367, 167.24489795918367, 168.24489795918367, 163.76190476190476, 164.76190476190476, 165.76190476190476, 166.76190476190476, 160.88571428571427, 161.88571428571427, 162.88571428571427, 163.88571428571427, 155.57142857142858, 156.57142857142858, 157.57142857142858, 158.57142857142858, 135.              , 136.              , 137.              , 138.              , 137.              , 138.              , 139.              , 140.              , 139.              , 140.              , 141.              , 142.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 149.              , 150.              , 151.              , 152.              , 153.              , 154.              , 155.              , 156.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 159.              , 160.              , 161.              , 162.              , 155.              , 156.              , 157.              , 158.              , 157.              , 158.              , 159.              , 160.              , 159.              , 160.              , 161.              , 162.              , 161.              , 162.              , 163.              , 164.              , 165.              , 166.              , 167.              , 168.              , 169.              , 170.              , 171.              , 172.              , 173.              , 174.              , 175.              , 176.              , 175.              , 176.              , 177.              , 178.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 175.              , 176.              , 177.              , 178.              , 177.              , 178.              , 179.              , 180.              , 179.              , 180.              , 181.              , 182.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 189.              , 190.              , 191.              , 192.              , 193.              , 194.              , 195.              , 196.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 195.              , 196.              , 197.              , 198.              , 197.              , 198.              , 199.              , 200.              , 199.              , 200.              , 201.              , 202.              , 201.              , 202.              , 203.              , 204.              , 205.              , 206.              , 207.              , 208.              , 209.              , 210.              , 211.              , 212.              , 213.              , 214.              , 215.              , 216.              , 215.              , 216.              , 217.              , 218.              , 217.              , 218.              , 219.              , 220.              , 219.              , 220.              , 221.              , 222.              , 355.              , 356.              , 357.              , 358.              , 357.              , 358.              , 359.              , 360.              , 359.              , 360.              , 361.              , 362.              , 361.              , 362.              , 363.              , 364.              , 365.              , 366.              , 367.              , 368.              , 369.              , 370.              , 371.              , 372.              , 373.              , 374.              , 375.              , 376.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 375.              , 376.              , 377.              , 378.              , 377.              , 378.              , 379.              , 380.              , 379.              , 380.              , 381.              , 382.              , 381.              , 382.              , 383.              , 384.              , 385.              , 386.              , 387.              , 388.              , 389.              , 390.              , 391.              , 392.              , 393.              , 394.              , 395.              , 396.              , 395.              , 396.              , 397.              , 398.              , 397.              , 398.              , 399.              , 400.              , 399.              , 400.              , 401.              , 402.              , 395.              , 396.              , 397.              , 398.              , 397.              , 398.              , 399.              , 400.              , 399.              , 400.              , 401.              , 402.              , 388.8095238095238 , 389.8095238095238 , 390.8095238095238 , 391.8095238095238 , 380.6190476190476 , 381.6190476190476 , 382.6190476190476 , 383.6190476190476 , 372.42857142857144, 373.42857142857144, 374.42857142857144, 375.42857142857144, 364.23809523809524, 365.23809523809524, 366.23809523809524, 367.23809523809524, 358.1111111111111 , 359.1111111111111 , 360.1111111111111 , 361.1111111111111 , 348.73333333333335, 349.73333333333335, 350.73333333333335, 351.73333333333335, 333.6666666666667 , 334.6666666666667 , 335.6666666666667 , 336.6666666666667 , 341.85714285714283, 342.85714285714283, 343.85714285714283, 344.85714285714283, 343.85714285714283, 344.85714285714283, 345.85714285714283, 346.85714285714283, 345.85714285714283, 346.85714285714283, 347.85714285714283, 348.85714285714283, 337.40816326530614, 338.40816326530614, 339.40816326530614, 340.40816326530614, 330.9591836734694 , 331.9591836734694 , 332.9591836734694 , 333.9591836734694 , 324.51020408163265, 325.51020408163265, 326.51020408163265, 327.51020408163265, 318.0612244897959 , 319.0612244897959 , 320.0612244897959 , 321.0612244897959 , 313.0952380952381 , 314.0952380952381 , 315.0952380952381 , 316.0952380952381 , 305.34285714285716, 306.34285714285716, 307.34285714285716, 308.34285714285716, 292.7142857142857 , 293.7142857142857 , 294.7142857142857 , 295.7142857142857 , 308.7142857142857 , 309.7142857142857 , 310.7142857142857 , 311.7142857142857 , 310.7142857142857 , 311.7142857142857 , 312.7142857142857 , 313.7142857142857 , 312.7142857142857 , 313.7142857142857 , 314.7142857142857 , 315.7142857142857 , 304.265306122449  , 305.265306122449  , 306.265306122449  , 307.265306122449  , 297.81632653061223, 298.81632653061223, 299.81632653061223, 300.81632653061223, 291.3673469387755 , 292.3673469387755 , 293.3673469387755 , 294.3673469387755 , 284.9183673469388 , 285.9183673469388 , 286.9183673469388 , 287.9183673469388 , 279.95238095238096, 280.95238095238096, 281.95238095238096, 282.95238095238096, 272.2             , 273.2             , 274.2             , 275.2             , 259.57142857142856, 260.57142857142856, 261.57142857142856, 262.57142857142856, 275.57142857142856, 276.57142857142856, 277.57142857142856, 278.57142857142856, 277.57142857142856, 278.57142857142856, 279.57142857142856, 280.57142857142856, 279.57142857142856, 280.57142857142856, 281.57142857142856, 282.57142857142856, 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 258.2244897959184 , 259.2244897959184 , 260.2244897959184 , 261.2244897959184 , 251.77551020408163, 252.77551020408163, 253.77551020408163, 254.77551020408163, 246.8095238095238 , 247.8095238095238 , 248.8095238095238 , 249.8095238095238 , 239.05714285714285, 240.05714285714285, 241.05714285714285, 242.05714285714285, 226.42857142857142, 227.42857142857142, 228.42857142857142, 229.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 244.42857142857142, 245.42857142857142, 246.42857142857142, 247.42857142857142, 246.42857142857142, 247.42857142857142, 248.42857142857142, 249.42857142857142, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 225.08163265306123, 226.08163265306123, 227.08163265306123, 228.08163265306123, 218.6326530612245 , 219.6326530612245 , 220.6326530612245 , 221.6326530612245 , 213.66666666666666, 214.66666666666666, 215.66666666666666, 216.66666666666666, 205.9142857142857 , 206.9142857142857 , 207.9142857142857 , 208.9142857142857 , 193.28571428571428, 194.28571428571428, 195.28571428571428, 196.28571428571428, 213.66666666666666, 214.66666666666666, 215.66666666666666, 216.66666666666666, 215.66666666666666, 216.66666666666666, 217.66666666666666, 218.66666666666666, 217.66666666666666, 218.66666666666666, 219.66666666666666, 220.66666666666666, 207.47619047619048, 208.47619047619048, 209.47619047619048, 210.47619047619048, 199.28571428571428, 200.28571428571428, 201.28571428571428, 202.28571428571428, 191.0952380952381 , 192.0952380952381 , 193.0952380952381 , 194.0952380952381 , 182.9047619047619 , 183.9047619047619 , 184.9047619047619 , 185.9047619047619 , 176.77777777777777, 177.77777777777777, 178.77777777777777, 179.77777777777777, 167.4             , 168.4             , 169.4             , 170.4             , 152.33333333333334, 153.33333333333334, 154.33333333333334, 155.33333333333334, 165.4             , 166.4             , 167.4             , 168.4             , 167.4             , 168.4             , 169.4             , 170.4             , 169.4             , 170.4             , 171.4             , 172.4             , 156.77142857142857, 157.77142857142857, 158.77142857142857, 159.77142857142857, 146.14285714285714, 147.14285714285714, 148.14285714285714, 149.14285714285714, 135.5142857142857 , 136.5142857142857 , 137.5142857142857 , 138.5142857142857 , 124.88571428571429, 125.88571428571429, 126.88571428571429, 127.88571428571429, 117.13333333333334, 118.13333333333334, 119.13333333333334, 120.13333333333334, 105.48            , 106.48            , 107.48            , 108.48            ,  87.              ,  88.              ,  89.              ,  90.              ,  83.              ,  84.              ,  85.              ,  86.              ,  85.              ,  86.              ,  87.              ,  88.              ,  87.              ,  88.              ,  89.              ,  90.              ,  89.              ,  90.              ,  91.              ,  92.              ,  93.              ,  94.              ,  95.              ,  96.              ,  97.              ,  98.              ,  99.              , 100.              , 101.              , 102.              , 103.              , 104.              , 103.              , 104.              , 105.              , 106.              , 105.              , 106.              , 107.              , 108.              , 107.              , 108.              , 109.              , 110.              };
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow7Stride1Forward, VALID3x10x10x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {133.              , 134.              , 135.              , 136.              , 137.              , 138.              , 139.              , 140.              , 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 173.              , 174.              , 175.              , 176.              , 177.              , 178.              , 179.              , 180.              , 181.              , 182.              , 183.              , 184.              , 185.              , 186.              , 187.              , 188.              , 213.              , 214.              , 215.              , 216.              , 217.              , 218.              , 219.              , 220.              , 221.              , 222.              , 223.              , 224.              , 225.              , 226.              , 227.              , 228.              , 253.              , 254.              , 255.              , 256.              , 257.              , 258.              , 259.              , 260.              , 261.              , 262.              , 263.              , 264.              , 265.              , 266.              , 267.              , 268.              , 240.42857142857142, 241.42857142857142, 242.42857142857142, 243.42857142857142, 244.42857142857142, 245.42857142857142, 246.42857142857142, 247.42857142857142, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 207.28571428571428, 208.28571428571428, 209.28571428571428, 210.28571428571428, 211.28571428571428, 212.28571428571428, 213.28571428571428, 214.28571428571428, 204.83673469387756, 205.83673469387756, 206.83673469387756, 207.83673469387756, 198.3877551020408 , 199.3877551020408 , 200.3877551020408 , 201.3877551020408 , 174.14285714285714, 175.14285714285714, 176.14285714285714, 177.14285714285714, 178.14285714285714, 179.14285714285714, 180.14285714285714, 181.14285714285714, 171.69387755102042, 172.69387755102042, 173.69387755102042, 174.69387755102042, 165.24489795918367, 166.24489795918367, 167.24489795918367, 168.24489795918367, 141.              , 142.              , 143.              , 144.              , 145.              , 146.              , 147.              , 148.              , 149.              , 150.              , 151.              , 152.              , 153.              , 154.              , 155.              , 156.              , 337.40816326530614, 338.40816326530614, 339.40816326530614, 340.40816326530614, 330.9591836734694 , 331.9591836734694 , 332.9591836734694 , 333.9591836734694 , 324.51020408163265, 325.51020408163265, 326.51020408163265, 327.51020408163265, 318.0612244897959 , 319.0612244897959 , 320.0612244897959 , 321.0612244897959 , 304.265306122449  , 305.265306122449  , 306.265306122449  , 307.265306122449  , 297.81632653061223, 298.81632653061223, 299.81632653061223, 300.81632653061223, 291.3673469387755 , 292.3673469387755 , 293.3673469387755 , 294.3673469387755 , 284.9183673469388 , 285.9183673469388 , 286.9183673469388 , 287.9183673469388 , 271.1224489795918 , 272.1224489795918 , 273.1224489795918 , 274.1224489795918 , 264.6734693877551 , 265.6734693877551 , 266.6734693877551 , 267.6734693877551 , 258.2244897959184 , 259.2244897959184 , 260.2244897959184 , 261.2244897959184 , 251.77551020408163, 252.77551020408163, 253.77551020408163, 254.77551020408163, 237.9795918367347 , 238.9795918367347 , 239.9795918367347 , 240.9795918367347 , 231.53061224489795, 232.53061224489795, 233.53061224489795, 234.53061224489795, 225.08163265306123, 226.08163265306123, 227.08163265306123, 228.08163265306123, 218.6326530612245 , 219.6326530612245 , 220.6326530612245 , 221.6326530612245 };
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<7, 1>(in_shape, padding);
  const DataType max_input_val = 512.0;
  this->test_pool(exp_out, params, max_input_val);
}

