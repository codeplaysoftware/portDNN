/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using InputBackpropWindow5Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride1, GTestTypePairs);
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,  510.,  750.,  870.,  816.,  705.,  796.,  1220., 1730.,
      1940., 1756., 1474., 1610., 2400., 3325., 3650., 3230., 2660.,
      2690., 3900., 5275., 5600., 4850., 3920., 3544., 5020., 6650.,
      6960., 5908., 4690., 3792., 5310., 6960., 7230., 6072., 4773.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,  4.,   7.,   10.,  13.,  10.,  9.,  29.,  39.,  49.,  59.,  40.,
      29., 79.,  89.,  99.,  109., 70.,  49., 129., 139., 149., 159., 100.,
      69., 179., 189., 199., 209., 130., 63., 150., 157., 164., 171., 100.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,  12960.,
      14600., 13280., 11192., 12115., 18140., 25225., 27775., 24660., 20365.,
      20575., 29900., 40525., 43075., 37380., 30265., 27464., 38944., 51640.,
      54080., 45952., 36512., 29571., 41436., 54345., 56475., 47460., 37329.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,  62.,   82.,   67.,   52.,   184.,  256.,
      328.,  400.,  280., 192.,  544.,  616.,  688.,  760.,  500.,
      332.,  904.,  976., 1048., 1120., 720.,  472.,  1264., 1336.,
      1408., 1480., 940., 457.,  1102., 1154., 1206., 1258., 743.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104.,
      22440., 15968., 11480., 9078.,  13416., 17546., 18786., 12936., 11646.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,  428.,  572.,  486.,  340.,  1288., 1832.,
      2376.,  2920.,  2084., 1380., 4008., 4552., 5096., 5640., 3764.,
      2420.,  6728.,  7272., 7816., 8360., 5444., 3460., 9448., 9992.,
      10536., 11080., 7124., 3470., 8428., 8828., 9228., 9628., 5718.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13288., 14176., 18864., 20080., 25040., 26600.,
      26240., 27840., 22320., 23632., 17752., 18760., 14403., 15168., 20196.,
      21240., 26505., 27840., 27555., 28920., 23172., 24288., 18237., 19092.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   6.,   16.,  14.,  28.,  22.,  40.,  30.,  52.,  27.,  40.,
      16.,  36.,  68.,  116., 100., 156., 132., 196., 164., 236., 120., 160.,
      76.,  116., 228., 316., 260., 356., 292., 396., 324., 436., 220., 280.,
      136., 196., 388., 516., 420., 556., 452., 596., 484., 636., 320., 400.,
      196., 276., 548., 716., 580., 756., 612., 796., 644., 836., 420., 520.,
      205., 252., 502., 600., 526., 628., 550., 656., 574., 684., 343., 400.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 25908., 29124., 35952., 40240., 45452., 50684.,
      43324., 48364., 30192., 33968., 23556., 26452., 18681., 20925., 22364.,
      25292., 27079., 30787., 23963., 27655., 10636., 13372., 10197., 12393.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   34.,   106.,  90.,   194.,  146.,  282.,  202.,
      370.,  193.,  293.,  94.,   246.,  460.,  828.,  700.,  1132.,
      940.,  1436., 1180., 1740., 886.,  1198., 534.,  846.,  1660.,
      2348., 1900., 2652., 2140., 2956., 2380., 3260., 1646., 2118.,
      974.,  1446., 2860., 3868., 3100., 4172., 3340., 4476., 3580.,
      4780., 2406., 3038., 1414., 2046., 4060., 5388., 4300., 5692.,
      4540., 5996., 4780., 6300., 3166., 3958., 1549., 1921., 3826.,
      4602., 4010., 4818., 4194., 5034., 4378., 5250., 2633., 3085.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 8712.,  14792., 13536., 21984., 16504., 26808.,
      18360., 29176., 13536., 21984., 10568., 17160., 7902.,  12398., 9896.,
      16232., 11218., 19138., 13250., 21554., 11432., 17768., 9326.,  14462.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      7064.,  10968., 8920.,  13336., 6796.,  9260.,  3980.,  6444.,  12632.,
      18072., 14488., 20440., 16344., 22808., 18200., 25176., 12716., 16460.,
      7340.,  11084., 21912., 29912., 23768., 32280., 25624., 34648., 27480.,
      37016., 18636., 23660., 10700., 15724., 31192., 41752., 33048., 44120.,
      34904., 46488., 36760., 48856., 24556., 30860., 12030., 14990., 29852.,
      36028., 31292., 37724., 32732., 39420., 34172., 41116., 20622., 24222.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12564., 13344., 14148.,
      14976., 17456., 18496., 19568., 20672., 22092., 23360., 24668., 26016.,
      21052., 22272., 23532., 24832., 14640., 15552., 16496., 17472., 11428.,
      12128., 12852., 13600., 9069.,  9612.,  10173., 10752., 10828., 11536.,
      12268., 13024., 13091., 13988., 14915., 15872., 11535., 12428., 13351.,
      14304., 4988.,  5648.,  6332.,  7040.,  4833.,  5364.,  5913.,  6480.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   10.,   24.,   42.,   64.,   34.,   56.,
      82.,   112.,  58.,   88.,   122.,  160.,  82.,   120.,  162.,  208.,
      85.,   108.,  133.,  160.,  30.,   64.,   102.,  144.,  188.,  272.,
      364.,  464.,  300.,  400.,  508.,  624.,  412.,  528.,  652.,  784.,
      524.,  656.,  796.,  944.,  406.,  480.,  558.,  640.,  230.,  304.,
      382.,  464.,  748.,  912.,  1084., 1264., 860.,  1040., 1228., 1424.,
      972.,  1168., 1372., 1584., 1084., 1296., 1516., 1744., 766.,  880.,
      998.,  1120., 430.,  544.,  662.,  784.,  1308., 1552., 1804., 2064.,
      1420., 1680., 1948., 2224., 1532., 1808., 2092., 2384., 1644., 1936.,
      2236., 2544., 1126., 1280., 1438., 1600., 630.,  784.,  942.,  1104.,
      1868., 2192., 2524., 2864., 1980., 2320., 2668., 3024., 2092., 2448.,
      2812., 3184., 2204., 2576., 2956., 3344., 1486., 1680., 1878., 2080.,
      729.,  820.,  913.,  1008., 1818., 2008., 2202., 2400., 1906., 2104.,
      2306., 2512., 1994., 2200., 2410., 2624., 2082., 2296., 2514., 2736.,
      1261., 1372., 1485., 1600.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3692.,  5020.,  6540.,
      8252.,  5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 4556.,
      6012.,  7660.,  9500.,  3461.,  4441.,  5565.,  6833.,  4252.,  5644.,
      7228.,  9004.,  4739.,  6479.,  8459.,  10679., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      3076.,  3988.,  4964.,  6004.,  3940.,  4980.,  6084.,  7252.,  3106.,
      3690.,  4306.,  4954.,  1698.,  2282.,  2898.,  3546.,  5668.,  6964.,
      8324.,  9748.,  6532.,  7956.,  9444.,  10996., 7396.,  8948.,  10564.,
      12244., 8260.,  9940.,  11684., 13492., 5906.,  6810.,  7746.,  8714.,
      3218.,  4122.,  5058.,  6026.,  9988.,  11924., 13924., 15988., 10852.,
      12916., 15044., 17236., 11716., 13908., 16164., 18484., 12580., 14900.,
      17284., 19732., 8706.,  9930.,  11186., 12474., 4738.,  5962.,  7218.,
      8506.,  14308., 16884., 19524., 22228., 15172., 17876., 20644., 23476.,
      16036., 18868., 21764., 24724., 16900., 19860., 22884., 25972., 11506.,
      13050., 14626., 16234., 5653.,  6377.,  7117.,  7873.,  14170., 15682.,
      17226., 18802., 14858., 16434., 18042., 19682., 15546., 17186., 18858.,
      20562., 16234., 17938., 19674., 21442., 9869.,  10753., 11653., 12569.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  4412.,  6748.,
      9340.,  12188., 4926.,  6350.,  7902.,  9582.,  1180.,  3260.,  5596.,
      8188.,  10168., 15352., 21048., 27256., 16952., 23160., 29880., 37112.,
      22456., 27640., 33336., 39544., 19768., 23928., 28600., 33784., 14812.,
      17404., 20252., 23356., 11740., 14332., 17180., 20284., 33336., 39544.,
      46264., 53496., 40120., 47352., 55096., 63352., 29240., 35448., 42168.,
      49400., 10168., 15352., 21048., 27256., 11036., 14140., 17500., 21116.,
      5916.,  9020.,  12380., 15996., 22456., 27640., 33336., 39544., 19768.,
      23928., 28600., 33784., 26552., 31736., 37432., 43640., 33336., 39544.,
      46264., 53496., 23644., 27260., 31132., 35260., 16476., 20092., 23964.,
      28092., 29240., 35448., 42168., 49400., 10168., 15352., 21048., 27256.,
      16952., 23160., 29880., 37112., 22456., 27640., 33336., 39544., 10396.,
      12476., 14812., 17404., 9182.,  10862., 12670., 14606., 24828., 28700.,
      32828., 37212., 30268., 34652., 39292., 44188., 35708., 40604., 45756.,
      51164., 23484., 26844., 30460., 34332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,  560.,  820.,  940.,  1060., 980.,  837.,  892.,  1360.,
      1920., 2130., 2340., 2096., 1744., 1820., 2700., 3725., 4050.,
      4375., 3840., 3140., 3080., 4450., 6000., 6325., 6650., 5730.,
      4610., 4078., 5760., 7610., 7920., 8230., 6960., 5506., 4374.,
      6110., 7990., 8260., 8530., 7142., 5598.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  16.,  22.,  22.,  15.,  10.,  32.,  68.,  89.,
      110., 96.,  60.,  35.,  92.,  173., 194., 215., 176., 105., 60.,
      152., 278., 299., 320., 256., 150., 85.,  212., 383., 404., 425.,
      336., 195., 84.,  193., 328., 343., 358., 269., 150.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,  10160.,
      14420., 16060., 17700., 15920., 13292., 13735., 20460., 28133., 30235.,
      32081., 27308., 21235., 22261., 31876., 41183., 42005., 42571., 34980.,
      26065., 26468., 37328., 46508., 45940., 45116., 35984., 25652., 25131.,
      35196., 42113., 39955., 37541., 28700., 18879.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   101.,  143.,  150.,  105.,  58.,   204.,
      454.,  610.,  766.,  684.,  434.,  238.,  644.,  1234., 1390.,
      1546., 1284., 774.,  418.,  1084., 2014., 2170., 2326., 1884.,
      1114., 598.,  1524., 2794., 2950., 3106., 2484., 1454., 623.,
      1442., 2465., 2579., 2693., 2034., 1139.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776., 14048.,
      15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134.,
      23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536.,
      13354., 19912., 22816., 26424., 22488., 20600., 12000., 8328.,  14102.,
      18984., 18474., 17538., 15066., 11560., 7558.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,   1432.,
      3284.,  4484.,  5684.,  5144.,  3292.,  1740.,  4792.,  9284.,  10484.,
      11684., 9784.,  5932.,  3100.,  8152.,  15284., 16484., 17684., 14424.,
      8572.,  4460.,  11512., 21284., 22484., 23684., 19064., 11212., 4790.,
      11132., 19090., 19978., 20866., 15804., 8870.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 15340., 16312., 21712., 23040., 28740., 30440., 29940.,
      31680., 31140., 32920., 26384., 27840., 20908., 22024., 16659., 17496.,
      23300., 24440., 30505., 31960., 31555., 33040., 32605., 34120., 27332.,
      28568., 21447., 22392.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      62.,   88.,   45.,   60.,   18.,   40.,   76.,   128.,  182.,  272.,
      254.,  356.,  326.,  440.,  300.,  384.,  194.,  240.,  98.,   140.,
      276.,  368.,  542.,  692.,  614.,  776.,  686.,  860.,  580.,  704.,
      354.,  420.,  178.,  240.,  476.,  608.,  902.,  1112., 974.,  1196.,
      1046., 1280., 860.,  1024., 514.,  600.,  258.,  340.,  676.,  848.,
      1262., 1532., 1334., 1616., 1406., 1700., 1140., 1344., 674.,  780.,
      287.,  336.,  670.,  772.,  1153., 1312., 1207., 1372., 1261., 1432.,
      958.,  1076., 539.,  600.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 26732., 29852., 36752., 40912., 43092., 48164., 38404.,
      43284., 32692., 37380., 21008., 24656., 13004., 15740., 15721., 18029.,
      21532., 24716., 20887., 24787., 24427., 28311., 27455., 31323., 23132.,
      26060., 18225., 20373.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,  455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,  516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244., 2900.,  1466.,
      1826.,  706.,   1034.,  2036.,  2756.,  4054.,  5230., 4606.,  5878.,
      5158.,  6526.,  4404.,  5380.,  2706.,  3226.,  1306., 1794.,  3556.,
      4596.,  6814.,  8470.,  7366.,  9118.,  7918.,  9766., 6564.,  7860.,
      3946.,  4626.,  1906.,  2554.,  5076.,  6436.,  9574., 11710., 10126.,
      12358., 10678., 13006., 8724.,  10340., 5186.,  6026., 2201.,  2589.,
      5162.,  5970.,  8915.,  10175., 9335.,  10643., 9755., 11111., 7434.,
      8370.,  4193.,  4677.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 11944., 18280., 12512., 20960., 17176., 27736., 15640.,
      26200., 19224., 29784., 12512., 20960., 9896.,  16232., 5342.,  9838.,
      10920., 17256., 12754., 20674., 12418., 20210., 11378., 19554., 10920.,
      17256., 8062.,  12814.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3420.,  4988.,  2558.,  3470.,  700.,   2012.,  3768.,  6904.,
      9716.,  15188., 14036., 20276., 18356., 25364., 17336., 22520., 11388.,
      14236., 5340.,  7932.,  15608., 21304., 31316., 40628., 35636., 45716.,
      39956., 50804., 34296., 42040., 21148., 25276., 9980.,  13852., 26168.,
      32376., 46260., 55316., 41108., 48884., 45428., 53972., 36408., 42616.,
      21436., 24796., 13340., 16444., 19064., 23736., 27156., 33908., 9716.,
      15188., 14036., 20276., 13944., 18616., 9436.,  12028., 3662.,  4702.,
      9276.,  11612., 17098., 20986., 20410., 24682., 23722., 28378., 19132.,
      22492., 11310., 13118.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 12988., 13744., 14524., 15328., 17872.,
      18880., 19920., 20992., 20932., 22160., 23428., 24736., 18612., 19792.,
      21012., 22272., 15780., 16912., 18084., 19296., 10064., 10944., 11856.,
      12800., 6172.,  6832.,  7516.,  8224.,  7581.,  8140.,  8717.,  9312.,
      10380., 11152., 11948., 12768., 9971.,  10916., 11891., 12896., 11743.,
      12684., 13655., 14656., 13259., 14196., 15163., 16160., 11212., 11920.,
      12652., 13408., 8853.,  9372.,  9909.,  10464.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   10.,   24.,   42.,   64.,   43.,   76.,
      115.,  160.,  103.,  148.,  199.,  256.,  163.,  220.,  283.,  352.,
      202.,  248.,  298.,  352.,  153.,  180.,  209.,  240.,  34.,   72.,
      114.,  160.,  212.,  304.,  404.,  512.,  566.,  728.,  902.,  1088.,
      830.,  1016., 1214., 1424., 1094., 1304., 1526., 1760., 1044., 1200.,
      1364., 1536., 690.,  776.,  866.,  960.,  314.,  392.,  474.,  560.,
      932.,  1104., 1284., 1472., 1886., 2168., 2462., 2768., 2150., 2456.,
      2774., 3104., 2414., 2744., 3086., 3440., 2084., 2320., 2564., 2816.,
      1290., 1416., 1546., 1680., 594.,  712.,  834.,  960.,  1652., 1904.,
      2164., 2432., 3206., 3608., 4022., 4448., 3470., 3896., 4334., 4784.,
      3734., 4184., 4646., 5120., 3124., 3440., 3764., 4096., 1890., 2056.,
      2226., 2400., 874.,  1032., 1194., 1360., 2372., 2704., 3044., 3392.,
      4526., 5048., 5582., 6128., 4790., 5336., 5894., 6464., 5054., 5624.,
      6206., 6800., 4164., 4560., 4964., 5376., 2490., 2696., 2906., 3120.,
      1053., 1148., 1245., 1344., 2482., 2680., 2882., 3088., 4303., 4612.,
      4927., 5248., 4507., 4828., 5155., 5488., 4711., 5044., 5383., 5728.,
      3602., 3832., 4066., 4304., 2037., 2156., 2277., 2400.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11581., 13489., 15541., 17737., 9884.,  12300., 14908., 17708., 17163.,
      20279., 23635., 27231., 19315., 22399., 25723., 29287., 21659., 24967.,
      28515., 32303., 22044., 24972., 28092., 31404., 19085., 21441., 23941.,
      26585., 20412., 23212., 26204., 29388., 21840., 25232., 28880., 32784.,
      23972., 28212., 32772., 37652., 23620., 27732., 32164., 36916., 27556.,
      31796., 36356., 41236., 19792., 23184., 26832., 30736., 18876., 21676.,
      24668., 27852., 27163., 30983., 35043., 39343., 32644., 37524., 42724.,
      48244., 39901., 45649., 51797., 58345., 34101., 39625., 45549., 51873.,
      36685., 42241., 48197., 54553., 29700., 34068., 38756., 43764., 23499.,
      26871., 30483., 34335., 28787., 32895., 37243., 41831., 40356., 45620.,
      51204., 57108., 41797., 48025., 54653., 61681., 39901., 45649., 51797.,
      58345., 34101., 39625., 45549., 51873., 25252., 29492., 34052., 38932.,
      20899., 24047., 27435., 31063., 33116., 36812., 40700., 44780., 37136.,
      41808., 46736., 51920., 43012., 48404., 54116., 60148., 35812., 40820.,
      46148., 51796., 32708., 37332., 42276., 47540., 17744., 21136., 24784.,
      28688., 12188., 14604., 17212., 20012., 23397., 26041., 28829., 31761.,
      31484., 35052., 38812., 42764., 29347., 33519., 37931., 42583., 27979.,
      31863., 35987., 40351., 23539., 27135., 30971., 35047., 18428., 20972.,
      23708., 26636., 11765., 13577., 15533., 17633.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6286.,  7750.,  9310.,  10966., 8350.,
      10006., 11758., 13606., 8052.,  9284.,  10580., 11940., 5354.,  6034.,
      6746.,  7490.,  2362.,  2978.,  3626.,  4306.,  7124.,  8484.,  9908.,
      11396., 14542., 16774., 19102., 21526., 16606., 19030., 21550., 24166.,
      18670., 21286., 23998., 26806., 16212., 18084., 20020., 22020., 10074.,
      11074., 12106., 13170., 4522.,  5458.,  6426.,  7426.,  12724., 14724.,
      16788., 18916., 24862., 28054., 31342., 34726., 26926., 30310., 33790.,
      37366., 28990., 32566., 36238., 40006., 24372., 26884., 29460., 32100.,
      14794., 16114., 17466., 18850., 6682.,  7938.,  9226.,  10546., 18324.,
      20964., 23668., 26436., 35182., 39334., 43582., 47926., 37246., 41590.,
      46030., 50566., 39310., 43846., 48478., 53206., 32532., 35684., 38900.,
      42180., 19514., 21154., 22826., 24530., 8237.,  8993.,  9765.,  10553.,
      19466., 21042., 22650., 24290., 33815., 36275., 38783., 41339., 35423.,
      37979., 40583., 43235., 37031., 39683., 42383., 45131., 28362., 30194.,
      32058., 33954., 16061., 17009., 17973., 18953.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 8424.,  13224., 19560., 27432., 3040.,
      9440.,  17888., 28384., 14040., 22040., 32600., 45720., 3800.,  11800.,
      22360., 35480., 14040., 22040., 32600., 45720., 3040.,  9440.,  17888.,
      28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966.,
      8424.,  13224., 19560., 27432., 2850.,  8850.,  16770., 26610., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 8424.,  13224.,
      19560., 27432., 1710.,  5310.,  10062., 15966.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,
      2702.,  700.,   2012.,  3580.,  5404.,  5496.,  8120.,  11256., 14904.,
      12980., 17940., 23668., 30164., 20468., 25940., 32180., 39188., 10932.,
      15892., 21620., 28116., 5496.,  8120.,  11256., 14904., 2748.,  4060.,
      5628.,  7452.,  4092.,  5916.,  7996.,  10332., 10232., 13880., 18040.,
      22712., 20468., 25940., 32180., 39188., 10932., 15892., 21620., 28116.,
      9588.,  14036., 19252., 25236., 5496.,  8120.,  11256., 14904., 6140.,
      7964.,  10044., 12380., 7484.,  9820.,  12412., 15260., 14328., 17976.,
      22136., 26808., 10932., 15892., 21620., 28116., 9588.,  14036., 19252.,
      25236., 12980., 17940., 23668., 30164., 10232., 13880., 18040., 22712.,
      9532.,  11868., 14460., 17308., 10236., 12060., 14140., 16476., 1400.,
      4024.,  7160.,  10808., 9588.,  14036., 19252., 25236., 12980., 17940.,
      23668., 30164., 20468., 25940., 32180., 39188., 10232., 13880., 18040.,
      22712., 4092.,  5916.,  7996.,  10332., 510.,   1422.,  2462.,  3630.,
      3772.,  5084.,  6652.,  8476.,  7354.,  9578.,  12186., 15178., 11930.,
      14922., 18298., 22058., 3578.,  6314.,  9434.,  12938., 3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,  610.,  890.,  1010., 1130., 1250., 1144., 969.,  988.,  1500.,
      2110., 2320., 2530., 2740., 2436., 2014., 2030., 3000., 4125., 4450.,
      4775., 5100., 4450., 3620., 3470., 5000., 6725., 7050., 7375., 7700.,
      6610., 5300., 4612., 6500., 8570., 8880., 9190., 9500., 8012., 6322.,
      4956., 6910., 9020., 9290., 9560., 9830., 8212., 6423.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  20.,  30.,  34.,  31.,  20.,  11.,  35.,  74.,  130.,
      166., 161., 133., 80.,  41.,  105., 194., 310., 346., 311., 243., 140.,
      71.,  175., 314., 490., 526., 461., 353., 200., 101., 245., 434., 670.,
      706., 611., 463., 260., 105., 236., 394., 580., 606., 502., 367., 200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,
      7352.,  11232., 15880., 17520., 19160., 20800., 18560., 15392.,
      14011., 20476., 27905., 30455., 33005., 35555., 30852., 24985.,
      20107., 28732., 38385., 40935., 43485., 46035., 39364., 31465.,
      21632., 30592., 40480., 42920., 45360., 47800., 40480., 32072.,
      16851., 23836., 31545., 33675., 35805., 37935., 32084., 25389.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   124.,  196.,  233.,  218.,  143.,  64.,   224.,
      496.,  896.,  1168., 1156., 968.,  588.,  284.,  744.,  1396., 2256.,
      2528., 2296., 1808., 1048., 504.,  1264., 2296., 3616., 3888., 3436.,
      2648., 1508., 724.,  1784., 3196., 4976., 5248., 4576., 3488., 1968.,
      789.,  1782., 2987., 4412., 4612., 3833., 2810., 1535.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366., 6056.,  9498.,  13234., 16970., 20706., 19528., 16126.,
      4792., 8224.,  12616., 17384., 22152., 26920., 22560., 19352.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6040., 10400., 15656., 21192., 26728., 32264., 26464., 21560.,
      4086., 7144.,  11018., 15138., 19258., 23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,
      420.,  1576.,  3596.,  6608.,  8720.,  8732.,  7368.,  4500.,
      2100., 5576.,  10556., 17168., 19280., 17612., 13928., 8100.,
      3780., 9576.,  17516., 27728., 29840., 26492., 20488., 11700.,
      5460., 13576., 24476., 38288., 40400., 35372., 27048., 15300.,
      6110., 13836., 23242., 34392., 35960., 29938., 21980., 12022.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 17392., 18448., 24560., 26000., 32440., 34280., 33640., 35520.,
      34840., 36760., 36040., 38000., 30448., 32048., 24064., 25288., 18915.,
      19824., 26404., 27640., 34505., 36080., 35555., 37160., 36605., 38240.,
      37655., 39320., 31492., 32848., 24657., 25692.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   44.,   80.,   76.,   120.,
      97.,   136.,  94.,   124.,  63.,   80.,   20.,   44.,   84.,   140.,
      200.,  296.,  376.,  520.,  504.,  664.,  512.,  644.,  436.,  532.,
      268.,  320.,  120.,  164.,  324.,  420.,  620.,  776.,  1016., 1240.,
      1144., 1384., 1052., 1244., 836.,  972.,  488.,  560.,  220.,  284.,
      564.,  700.,  1040., 1256., 1656., 1960., 1784., 2104., 1592., 1844.,
      1236., 1412., 708.,  800.,  320.,  404.,  804.,  980.,  1460., 1736.,
      2296., 2680., 2424., 2824., 2132., 2444., 1636., 1852., 928.,  1040.,
      369.,  420.,  838.,  944.,  1411., 1576., 2092., 2320., 2188., 2424.,
      1825., 2008., 1342., 1468., 735.,  800.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13348., 15860., 19248., 22768., 26716., 31372., 31628., 36604.,
      36540., 41836., 41452., 47068., 31536., 36080., 27284., 30884., 16153.,
      18269., 23900., 26828., 32935., 36771., 36667., 40743., 40399., 44715.,
      44131., 48687., 36012., 39644., 29901., 32769.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  878.,   1222.,  2412.,  3164.,
      4666.,  5890.,  7704.,  9464.,  8696.,  10584., 8050.,  9562.,  6428.,
      7500.,  3766.,  4334.,  1638.,  2142.,  4252.,  5324.,  7906.,  9610.,
      12664., 15064., 13656., 16184., 12250., 14242., 9548.,  10940., 5486.,
      6214.,  2398.,  3062.,  6092.,  7484.,  11146., 13330., 17624., 20664.,
      18616., 21784., 16450., 18922., 12668., 14380., 7206.,  8094.,  2853.,
      3257.,  6498.,  7338.,  10967., 12275., 16292., 18100., 17044., 18916.,
      14243., 15695., 10490., 11490., 5753.,  6269.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 7368.,  12936., 13536., 21984., 14136., 23928., 15992., 26296.,
      17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040., 5534.,
      9518.,  9896.,  16232., 9874.,  17282., 11906., 19698., 14962., 23138.,
      14946., 23506., 9384.,  15720., 9486.,  14878.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5386.,  7738.,  5372.,  7196.,  3662.,  4702.,  780.,   2220.,
      4184.,  7576.,  10724., 16580., 20272., 28080., 25392., 33200., 22404.,
      28516., 14232., 18136., 9196.,  11404., 6060.,  7756.,  15256., 19160.,
      28100., 34724., 36272., 45104., 33200., 42032., 24932., 31812., 10968.,
      15384., 7820.,  10284., 3148.,  5100.,  9304.,  12696., 17572., 22916.,
      28464., 36272., 29488., 37296., 28868., 35492., 24088., 29016., 14636.,
      17356., 8428.,  10636., 12184., 16088., 18564., 24676., 28080., 36912.,
      20272., 28080., 20516., 26884., 16088., 20504., 6476.,  8428.,  4766.,
      5934.,  11740., 14332., 21178., 25450., 33336., 39544., 30456., 36152.,
      24074., 28474., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6372.,  6976.,  7604.,  8256.,  9200.,  10048., 10928.,
      11840., 12796., 13920., 15084., 16288., 15212., 16416., 17660., 18944.,
      17628., 18912., 20236., 21600., 20044., 21408., 22812., 24256., 15216.,
      16320., 17456., 18624., 13204., 14080., 14980., 15904., 7821.,  8332.,
      8861.,  9408.,  11596., 12304., 13036., 13792., 16003., 16932., 17891.,
      18880., 17839., 18828., 19847., 20896., 19675., 20724., 21803., 22912.,
      21511., 22620., 23759., 24928., 17564., 18448., 19356., 20288., 14601.,
      15300., 16017., 16752.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,    10.,   24.,   42.,    64.,    43.,   76.,
      115.,  160.,  116.,  176.,   244.,  320.,  228.,   304.,   388.,  480.,
      319.,  388.,  463.,  544.,   322.,  376.,  434.,   496.,   221.,  252.,
      285.,  320.,  38.,   80.,    126.,  176.,  236.,   336.,   444.,  560.,
      626.,  800.,  986.,  1184.,  1240., 1504., 1784.,  2080.,  1720., 2016.,
      2328., 2656., 1802., 2048.,  2306., 2576., 1564.,  1744.,  1932., 2128.,
      974.,  1072., 1174., 1280.,  398.,  480.,  566.,   656.,   1116., 1296.,
      1484., 1680., 2186., 2480.,  2786., 3104., 3640.,  4064.,  4504., 4960.,
      4120., 4576., 5048., 5536.,  3842., 4208., 4586.,  4976.,  3084., 3344.,
      3612., 3888., 1814., 1952.,  2094., 2240., 758.,   880.,   1006., 1136.,
      1996., 2256., 2524., 2800.,  3746., 4160., 4586.,  5024.,  6040., 6624.,
      7224., 7840., 6520., 7136.,  7768., 8416., 5882.,  6368.,  6866., 7376.,
      4604., 4944., 5292., 5648.,  2654., 2832., 3014.,  3200.,  1118., 1280.,
      1446., 1616., 2876., 3216.,  3564., 3920., 5306.,  5840.,  6386., 6944.,
      8440., 9184., 9944., 10720., 8920., 9696., 10488., 11296., 7922., 8528.,
      9146., 9776., 6124., 6544.,  6972., 7408., 3494.,  3712.,  3934., 4160.,
      1377., 1476., 1577., 1680.,  3146., 3352., 3562.,  3776.,  5323., 5644.,
      5971., 6304., 7924., 8368.,  8820., 9280., 8292.,  8752.,  9220., 9696.,
      6943., 7300., 7663., 8032.,  5122., 5368., 5618.,  5872.,  2813., 2940.,
      3069., 3200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3084.,  4284.,  5676.,  7260.,  5840.,  7696.,  9808.,
      12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700., 14596.,
      7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092., 5840.,
      7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 2341.,  3193.,
      4189.,  5329.,  4252.,  5644.,  7228.,  9004.,  4131.,  5743.,  7595.,
      9687.,  5099.,  6807.,  8755.,  10943., 6579.,  8383.,  10427., 12711.,
      6523.,  8423.,  10563., 12943., 3996.,  5388.,  6972.,  8748.,  4141.,
      5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9416.,
      11496., 13704., 16040., 13192., 15528., 17992., 20584., 13942., 15886.,
      17926., 20062., 12164., 13588., 15076., 16628., 7602.,  8378.,  9186.,
      10026., 3026.,  3674.,  4354.,  5066.,  8580.,  10004., 11492., 13044.,
      16918., 19246., 21670., 24190., 28296., 31656., 35144., 38760., 32072.,
      35688., 39432., 43304., 30022., 32926., 35926., 39022., 24164., 26228.,
      28356., 30548., 14242., 15338., 16466., 17626., 5826.,  6794.,  7794.,
      8826.,  15076., 16628., 18244., 19924., 26342., 28606., 30966., 33422.,
      39880., 42984., 46216., 49576., 37128., 39976., 42952., 46056., 32662.,
      34990., 37414., 39934., 25156., 26836., 28580., 30388., 14354., 15258.,
      16194., 17162., 8242.,  9018.,  9826.,  10666., 10948., 12116., 13348.,
      14644., 14902., 16590., 18374., 20254., 20360., 22696., 25160., 27752.,
      9416.,  11496., 13704., 16040., 10726., 12478., 14326., 16270., 9764.,
      11060., 12420., 13844., 6274.,  6986.,  7730.,  8506.,  2245.,  2521.,
      2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  10079., 11099., 12167.,
      13283., 15924., 17412., 18964., 20580., 18836., 20452., 22132., 23876.,
      16823., 18131., 19487., 20891., 13098., 14034., 15002., 16002., 7533.,
      8033.,  8549.,  9081.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.,  220.,   764.,   1564.,  2620.,
      2104.,  4216.,  6840.,  9976.,  7700.,  12404., 17876., 24116., 18416.,
      25712., 34032., 43376., 26608., 33904., 42224., 51568., 26068., 32308.,
      39316., 47092., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,
      11260., 540.,   1596.,  2908.,  4476.,  4792.,  7928.,  11576., 15736.,
      14164., 19380., 25364., 32116., 26608., 33904., 42224., 51568., 26608.,
      33904., 42224., 51568., 17556., 23284., 29780., 37044., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 15892., 20596., 26068., 32308.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 17876.,
      24116., 31124., 38900., 22456., 27640., 33336., 39544., 17180., 20284.,
      23644., 27260., 540.,   1596.,  2908.,  4476.,  4152.,  6264.,  8888.,
      12024., 9428.,  13620., 18580., 24308., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26388., 33140., 40660., 48948., 24504.,
      29688., 35384., 41592., 10716., 13308., 16156., 19260., 30.,    174.,
      446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,  4042.,  6394.,
      9130.,  6136.,  9784.,  13944., 18616., 12280., 15928., 20088., 24760.,
      14138., 17386., 21018., 25034., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,  510.,  750.,  870.,  816.,  705.,  796.,  1220., 1730.,
      1940., 1756., 1474., 1610., 2400., 3325., 3650., 3230., 2660.,
      2690., 3900., 5275., 5600., 4850., 3920., 3770., 5400., 7225.,
      7550., 6470., 5180., 4588., 6460., 8510., 8820., 7444., 5878.,
      4710., 6570., 8580., 8850., 7404., 5799.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  10.,  9.,   29.,  39.,  49.,  59.,
      40.,  34.,  95.,  116., 137., 158., 100., 79.,  200., 221., 242.,
      263., 160., 124., 305., 326., 347., 368., 220., 143., 331., 349.,
      367., 385., 220., 105., 236., 247., 258., 269., 150.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,  12960.,
      14600., 13280., 11192., 12115., 18140., 25225., 27775., 24660., 20365.,
      20383., 29260., 39181., 40771., 34052., 27385., 26219., 36156., 47121.,
      47431., 38324., 30565., 27736., 37088., 47336., 46256., 36032., 28592.,
      23751., 30508., 37941., 35271., 25716., 20469.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   67.,   52.,   184.,  256.,
      328.,  400.,  280.,  221.,  646.,  802.,  958.,  1114., 719.,
      551.,  1426., 1582., 1738., 1894., 1169., 881.,  2206., 2362.,
      2518., 2674., 1619., 1056., 2464., 2600., 2736., 2872., 1652.,
      789.,  1782., 1866., 1950., 2034., 1139.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734.,
      27078., 19992., 14170., 16120., 21920., 24968., 24232., 14944., 13272.,
      6758.,  11944., 16730., 17650., 12872., 9966.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   486.,   340.,   1288.,  1832.,
      2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,  8324.,  5434.,
      4090.,  10724., 11924., 13124., 14324., 8914.,  6610.,  16724., 17924.,
      19124., 20324., 12394., 8100.,  18984., 20040., 21096., 22152., 12788.,
      6110.,  13836., 14492., 15148., 15804., 8870.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13955., 15080., 20060., 21600., 26925., 28900.,
      28175., 30200., 24220., 25880., 19445., 20720., 17320., 18352., 24432.,
      25840., 32240., 34040., 33440., 35280., 28272., 29776., 22360., 23512.,
      17967., 18840., 25092., 26280., 32805., 34320., 33855., 35400., 28356.,
      29616., 22233., 23196.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,  22.,  40.,   30.,   52.,   27.,
      40.,   16.,   36.,   68.,   116.,  100., 156., 132.,  196.,  164.,  236.,
      120.,  160.,  85.,   136.,  266.,  380., 338., 464.,  410.,  548.,  482.,
      632.,  319.,  400.,  235.,  316.,  626., 800., 698.,  884.,  770.,  968.,
      842.,  1052., 529.,  640.,  385.,  496., 986., 1220., 1058., 1304., 1130.,
      1388., 1202., 1472., 739.,  880.,  484., 572., 1140., 1324., 1204., 1396.,
      1268., 1468., 1332., 1540., 772.,  880., 369., 420.,  838.,  944.,  878.,
      988.,  918.,  1032., 958.,  1076., 539., 600.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 26555., 30119., 37204., 42020., 47557., 53529.,
      45809., 51669., 32932., 37428., 26207., 29691., 21908., 24740., 27376.,
      31152., 34284., 39132., 32348., 37260., 18416., 22192., 16868., 19892.,
      11585., 13925., 18492., 21548., 26495., 30363., 29011., 32863., 23404.,
      26268., 19869., 22161.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   34.,   106.,   90.,   194.,   146.,  282.,   202.,   370.,
      193.,  293.,  94.,   246.,   460.,  828.,   700.,  1132.,  940.,   1436.,
      1180., 1740., 886.,  1198.,  587.,  983.,   1918., 2806.,  2470.,  3454.,
      3022., 4102., 3574., 4750.,  2399., 3035.,  1727., 2363.,  4678.,  6046.,
      5230., 6694., 5782., 7342.,  6334., 7990.,  4019., 4895.,  2867.,  3743.,
      7438., 9286., 7990., 9934.,  8542., 10582., 9094., 11230., 5639.,  6755.,
      3702., 4398., 8764., 10220., 9260., 10780., 9756., 11340., 10252., 11900.,
      5966., 6822., 2853., 3257.,  6498., 7338.,  6810., 7682.,  7122.,  8026.,
      7434., 8370., 4193., 4677.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 9736.,  15816., 13536.,
      21984., 15480., 25784., 17336., 28152., 13536., 21984., 11592., 18184.,
      4670.,  8910.,  9896.,  16232., 13618., 21282., 13602., 21650., 9384.,
      15720., 7118.,  11998.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      7064.,  10968., 8920.,  13336., 6796.,  9260.,  4330.,  7450.,  14516.,
      21524., 18836., 26612., 23156., 31700., 27476., 36788., 18586., 23626.,
      13210., 18250., 34836., 43636., 33780., 41300., 38100., 46388., 42420.,
      51476., 25930., 30842., 20810., 25722., 41588., 50132., 32340., 39604.,
      36660., 44692., 40980., 49780., 25082., 29866., 19468., 22956., 27992.,
      33432., 10136., 14040., 14040., 18456., 17944., 22872., 11564., 14284.,
      4766.,  5934.,  11740., 14332., 14204., 17052., 16668., 19772., 19132.,
      22492., 11310., 13118.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12847., 13708., 14599.,
      15520., 18020., 19184., 20388., 21632., 23057., 24500., 25993., 27536.,
      22197., 23612., 25077., 26592., 15924., 17008., 18132., 19296., 12683.,
      13524., 14395., 15296., 10612., 11296., 12004., 12736., 13232., 14144.,
      15088., 16064., 16556., 17728., 18940., 20192., 15580., 16768., 17996.,
      19264., 8752.,  9664.,  10608., 11584., 8068.,  8800.,  9556.,  10336.,
      5509.,  6076.,  6661.,  7264.,  8876.,  9616.,  10380., 11168., 12779.,
      13716., 14683., 15680., 14039., 14972., 15935., 16928., 11356., 12048.,
      12764., 13504., 9657.,  10212., 10785., 11376.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   10.,   24.,   42.,   64.,   34.,   56.,
      82.,   112.,  58.,   88.,   122.,  160.,  82.,   120.,  162.,  208.,
      85.,   108.,  133.,  160.,  30.,   64.,   102.,  144.,  188.,  272.,
      364.,  464.,  300.,  400.,  508.,  624.,  412.,  528.,  652.,  784.,
      524.,  656.,  796.,  944.,  406.,  480.,  558.,  640.,  247.,  340.,
      439.,  544.,  854.,  1064., 1286., 1520., 1118., 1352., 1598., 1856.,
      1382., 1640., 1910., 2192., 1646., 1928., 2222., 2528., 1123., 1276.,
      1435., 1600., 787.,  940.,  1099., 1264., 2174., 2504., 2846., 3200.,
      2438., 2792., 3158., 3536., 2702., 3080., 3470., 3872., 2966., 3368.,
      3782., 4208., 1903., 2116., 2335., 2560., 1327., 1540., 1759., 1984.,
      3494., 3944., 4406., 4880., 3758., 4232., 4718., 5216., 4022., 4520.,
      5030., 5552., 4286., 4808., 5342., 5888., 2683., 2956., 3235., 3520.,
      1766., 1936., 2110., 2288., 4204., 4560., 4924., 5296., 4444., 4816.,
      5196., 5584., 4684., 5072., 5468., 5872., 4924., 5328., 5740., 6160.,
      2878., 3088., 3302., 3520., 1377., 1476., 1577., 1680., 3146., 3352.,
      3562., 3776., 3298., 3512., 3730., 3952., 3450., 3672., 3898., 4128.,
      3602., 3832., 4066., 4304., 2037., 2156., 2277., 2400.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 4204.,  5532.,  7052.,  8764.,  5840.,  7696.,
      9808.,  12176., 6612.,  8868.,  11444., 14340., 7476.,  9860.,  12564.,
      15588., 5840.,  7696.,  9808.,  12176., 5068.,  6524.,  8172.,  10012.,
      1877.,  2793.,  3853.,  5057.,  4252.,  5644.,  7228.,  9004.,  5971.,
      7647.,  9563.,  11719., 5915.,  7687.,  9699.,  11951., 3996.,  5388.,
      6972.,  8748.,  3021.,  4097.,  5317.,  6681.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      3076.,  3988.,  4964.,  6004.,  3940.,  4980.,  6084.,  7252.,  3106.,
      3690.,  4306.,  4954.,  1799.,  2531.,  3311.,  4139.,  6430.,  8086.,
      9838.,  11686., 8494.,  10342., 12286., 14326., 10558., 12598., 14734.,
      16966., 12622., 14854., 17182., 19606., 8687.,  9899.,  11159., 12467.,
      5999.,  7211.,  8471.,  9779.,  16750., 19366., 22078., 24886., 18814.,
      21622., 24526., 27526., 20878., 23878., 26974., 30166., 22942., 26134.,
      29422., 32806., 14807., 16499., 18239., 20027., 10199., 11891., 13631.,
      15419., 27070., 30646., 34318., 38086., 29134., 32902., 36766., 40726.,
      31198., 35158., 39214., 43366., 33262., 37414., 41662., 46006., 20927.,
      23099., 25319., 27587., 13794., 15146., 16530., 17946., 32932., 35764.,
      38660., 41620., 34820., 37780., 40804., 43892., 36708., 39796., 42948.,
      46164., 38596., 41812., 45092., 48436., 22610., 24282., 25986., 27722.,
      10821., 11609., 12413., 13233., 24762., 26402., 28074., 29778., 25962.,
      27666., 29402., 31170., 27162., 28930., 30730., 32562., 28362., 30194.,
      32058., 33954., 16061., 17009., 17973., 18953.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2938.,  4650.,  6746.,  9226.,  11956., 16916.,
      22644., 29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692.,
      31188., 8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082.,
      5466.,  7946.,  10810., 14058., 19444., 24916., 31156., 38164., 14004.,
      18964., 24692., 31188., 8564.,  13012., 18228., 24212., 11956., 16916.,
      22644., 29140., 12090., 15338., 18970., 22986., 7354.,  9578.,  12186.,
      15178., 14004., 18964., 24692., 31188., 8564.,  13012., 18228., 24212.,
      11956., 16916., 22644., 29140., 19444., 24916., 31156., 38164., 12954.,
      15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,  6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832., 24504.,
      29688., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,  11260.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,  560.,  820.,  940.,  1060., 980.,   837.,   892.,  1360.,  1920.,
      2130., 2340., 2096., 1744., 1820., 2700.,  3725.,  4050., 4375.,  3840.,
      3140., 3080., 4450., 6000., 6325., 6650.,  5730.,  4610., 4340.,  6200.,
      8275., 8600., 8925., 7620., 6080., 5296.,  7440.,  9780., 10090., 10400.,
      8752., 6892., 5445., 7580., 9880., 10150., 10420., 8696., 6795.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  16.,  22.,  22.,  15.,  10.,  32.,  68.,
      89.,  110., 96.,  60.,  42.,  114., 219., 264., 309., 252.,
      150., 102., 249., 444., 489., 534., 417., 240., 162., 384.,
      669., 714., 759., 582., 330., 196., 440., 734., 773., 812.,
      600., 330., 147., 322., 526., 550., 574., 416., 225.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,  10160.,
      14420., 16060., 17700., 15920., 13292., 13735., 20460., 28133., 30235.,
      32081., 27308., 21235., 22261., 31876., 41183., 42005., 42571., 34980.,
      26065., 26947., 38172., 47833., 47375., 46661., 37532., 27055., 27020.,
      38000., 45988., 44140., 42036., 32688., 22172., 20709., 29124., 33023.,
      29585., 25891., 18436., 10089.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   101.,  143.,  150.,  105.,  58.,   204.,  454.,
      610.,  766.,  684.,  434.,  279.,  786.,  1545., 1887., 2229., 1842.,
      1107., 729.,  1806., 3255., 3597., 3939., 3102., 1797., 1179., 2826.,
      4965., 5307., 5649., 4362., 2487., 1474., 3324., 5566., 5866., 6166.,
      4572., 2522., 1121., 2462., 4031., 4217., 4403., 3198., 1733.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776., 14048.,
      15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134.,
      23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536.,
      13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 18600.,
      24864., 25944., 26424., 22488., 16416., 8872.,  11694., 17928., 21138.,
      18474., 17538., 12424., 9758.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,   1432.,
      3284.,  4484.,  5684.,  5144.,  3292.,  2010.,  5796.,  11550., 14214.,
      16878., 14052., 8490.,  5490.,  13716., 24870., 27534., 30198., 23892.,
      13890., 8970.,  21636., 38190., 40854., 43518., 33732., 19290., 11420.,
      25816., 43316., 45668., 48020., 35672., 19708., 8750.,  19244., 31546.,
      33010., 34474., 25068., 13598.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 16115., 17360., 23100., 24800., 30925., 33100., 32175.,
      34400., 33425., 35700., 28620., 30480., 22895., 24320., 20044., 21184.,
      28208., 29760., 37140., 39120., 38340., 40360., 39540., 41600., 33328.,
      35008., 26284., 27568., 20817., 21780., 29012., 30320., 37855., 39520.,
      38905., 40600., 39955., 41680., 33380., 34784., 26109., 27180.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      62.,   88.,   45.,   60.,   18.,   40.,   76.,   128.,  182.,  272.,
      254.,  356.,  326.,  440.,  300.,  384.,  194.,  240.,  111.,  168.,
      330.,  456.,  669.,  876.,  831.,  1056., 993.,  1236., 834.,  1008.,
      507.,  600.,  321.,  408.,  810.,  996.,  1479., 1776., 1641., 1956.,
      1803., 2136., 1434., 1668., 837.,  960.,  531.,  648.,  1290., 1536.,
      2289., 2676., 2451., 2856., 2613., 3036., 2034., 2328., 1167., 1320.,
      690.,  784.,  1564., 1760., 2630., 2936., 2774., 3092., 2918., 3248.,
      2172., 2400., 1202., 1320., 533.,  588.,  1174., 1288., 1927., 2104.,
      2017., 2200., 2107., 2296., 1534., 1664., 833.,  900.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 28171., 31927., 39444., 44516., 47477., 53769., 43169.,
      49349., 37645., 43457., 25620., 30180., 16707., 20111., 22620., 25804.,
      31824., 36240., 35172., 40692., 39892., 45476., 41348., 46740., 34704.,
      38864., 26748., 29804., 22045., 24593., 31820., 35324., 40931., 45231.,
      41911., 46195., 37067., 41079., 25164., 28156., 16101., 18233.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,   516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244.,  2900.,  1466.,
      1826.,  783.,   1227.,  2406.,  3390.,  4965.,  6585.,  6225.,  7989.,
      7485.,  9393.,  6342.,  7710.,  3879.,  4611.,  2403.,  3087.,  6126.,
      7590.,  11265., 13605., 12525., 15009., 13785., 16413., 11022., 12870.,
      6459.,  7431.,  4023.,  4947.,  9846.,  11790., 17565., 20625., 18825.,
      22029., 20085., 23433., 15702., 18030., 9039.,  10251., 5338.,  6082.,
      12132., 13684., 20446., 22870., 21574., 24094., 22702., 25318., 16932.,
      18740., 9386.,  10322., 4157.,  4593.,  9170.,  10074., 15071., 16475.,
      15779., 17231., 16487., 17987., 12018., 13050., 6533.,  7065.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 14466., 22258., 16664., 27224., 21006., 34078., 18014.,
      31214., 22894., 35710., 16664., 27224., 13090., 21138., 9384.,  15720.,
      14560., 23008., 15640., 26200., 17176., 27736., 15640., 26200., 14560.,
      23008., 9384.,  15720., 6286.,  10654., 8360.,  14696., 15138., 23186.,
      12754., 20674., 12418., 20210., 8360.,  14696., 8494.,  13118.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3420.,  4988.,  2558.,  3470.,  700.,   2012.,  3768.,  6904.,
      9716.,  15188., 13396., 18612., 15028., 19988., 9912.,  13048., 6652.,
      8476.,  5210.,  7690.,  14996., 20724., 29486., 38206., 30590., 39438.,
      29646., 38622., 15508., 21236., 5882.,  8618.,  11146., 14522., 28020.,
      34516., 39102., 48462., 29326., 37790., 22238., 30830., 19188., 24660.,
      10666., 13274., 10298., 13546., 19924., 26164., 29646., 38622., 26654.,
      35758., 33902., 43134., 23508., 29748., 5210.,  7690.,  15484., 18332.,
      23480., 28664., 20404., 27412., 26644., 33396., 26740., 33236., 16696.,
      20856., 700.,   2012.,  6974.,  8398.,  16668., 19772., 20506., 24522.,
      24074., 28474., 14714., 18474., 1180.,  3260.,  30.,    174.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 13631., 14540., 15479., 16448., 19108.,
      20336., 21604., 22912., 22977., 24500., 26073., 27696., 20837., 22332.,
      23877., 25472., 18121., 19524., 20977., 22480., 12260., 13360., 14500.,
      15680., 7943.,  8764.,  9615.,  10496., 10924., 11696., 12492., 13312.,
      15376., 16448., 17552., 18688., 16916., 18256., 19636., 21056., 19268.,
      20624., 22020., 23456., 20020., 21328., 22676., 24064., 16848., 17856.,
      18896., 19968., 13004., 13744., 14508., 15296., 10713., 11332., 11969.,
      12624., 15484., 16336., 17212., 18112., 19943., 20988., 22063., 23168.,
      20435., 21476., 22547., 23648., 18047., 19020., 20023., 21056., 12220.,
      12944., 13692., 14464., 7793.,  8308.,  8841.,  9392.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   202.,   248.,   298.,   352.,   153.,   180.,   209.,
      240.,   34.,    72.,    114.,   160.,   212.,   304.,   404.,   512.,
      566.,   728.,   902.,   1088.,  830.,   1016.,  1214.,  1424.,  1094.,
      1304.,  1526.,  1760.,  1044.,  1200.,  1364.,  1536.,  690.,   776.,
      866.,   960.,   339.,   444.,   555.,   672.,   1086.,  1320.,  1566.,
      1824.,  2289.,  2676.,  3081.,  3504.,  2901.,  3324.,  3765.,  4224.,
      3513.,  3972.,  4449.,  4944.,  3006.,  3336.,  3678.,  4032.,  1851.,
      2028.,  2211.,  2400.,  1119.,  1284.,  1455.,  1632.,  2886.,  3240.,
      3606.,  3984.,  5349.,  5916.,  6501.,  7104.,  5961.,  6564.,  7185.,
      7824.,  6573.,  7212.,  7869.,  8544.,  5286.,  5736.,  6198.,  6672.,
      3111.,  3348.,  3591.,  3840.,  1899.,  2124.,  2355.,  2592.,  4686.,
      5160.,  5646.,  6144.,  8409.,  9156.,  9921.,  10704., 9021.,  9804.,
      10605., 11424., 9633.,  10452., 11289., 12144., 7566.,  8136.,  8718.,
      9312.,  4371.,  4668.,  4971.,  5280.,  2578.,  2760.,  2946.,  3136.,
      5876.,  6256.,  6644.,  7040.,  9926.,  10520., 11126., 11744., 10478.,
      11096., 11726., 12368., 11030., 11672., 12326., 12992., 8244.,  8688.,
      9140.,  9600.,  4578.,  4808.,  5042.,  5280.,  2025.,  2132.,  2241.,
      2352.,  4474.,  4696.,  4922.,  5152.,  7363.,  7708.,  8059.,  8416.,
      7711.,  8068.,  8431.,  8800.,  8059.,  8428.,  8803.,  9184.,  5882.,
      6136.,  6394.,  6656.,  3201.,  3332.,  3465.,  3600.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,
      7063.,  9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,
      9091.,  11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,
      5945.,  3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108.,
      14068., 10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241.,
      9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,
      8087.,  10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260.,
      12900., 15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      4483.,  6223.,  8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,
      9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132.,
      15092., 5659.,  7431.,  9443.,  11695., 3996.,  5388.,  6972.,  8748.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 7428.,
      9748.,  12388., 15348., 6660.,  8980.,  11620., 14580., 6352.,  8208.,
      10320., 12688., 3996.,  5388.,  6972.,  8748.,  2669.,  3617.,  4709.,
      5945.,  3484.,  4876.,  6460.,  8236.,  6683.,  8455.,  10467., 12719.,
      5507.,  7247.,  9227.,  11447., 5355.,  7063.,  9011.,  11199., 3484.,
      4876.,  6460.,  8236.,  3741.,  4753.,  5909.,  7209.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6286.,  7750.,  9310.,  10966., 8350.,
      10006., 11758., 13606., 8052.,  9284.,  10580., 11940., 5354.,  6034.,
      6746.,  7490.,  2511.,  3339.,  4215.,  5139.,  8238.,  10086., 12030.,
      14070., 17565., 20625., 23829., 27177., 22389., 25737., 29229., 32865.,
      27213., 30849., 34629., 38553., 23406., 26022., 28734., 31542., 14463.,
      15867., 17319., 18819., 8631.,  9939.,  11295., 12699., 22014., 24310.,
      26702., 29190., 38869., 42345., 45965., 49729., 39213., 42465., 45861.,
      49401., 44037., 47577., 51261., 55089., 34494., 37046., 39694., 42438.,
      19943., 21315., 22735., 24203., 14367., 15643., 16967., 18339., 27214.,
      29446., 31774., 34198., 43405., 46785., 50309., 53977., 37605., 40761.,
      44061., 47505., 42429., 45873., 49461., 53193., 33294., 35782., 38366.,
      41046., 19279., 20619., 22007., 23443., 13738., 14674., 15642., 16642.,
      18484., 19972., 21524., 23140., 25118., 27286., 29550., 31910., 12718.,
      14566., 16510., 18550., 17086., 19126., 21262., 23494., 14388., 15876.,
      17428., 19044., 8778.,  9586.,  10426., 11298., 3317.,  3657.,  4013.,
      4385.,  7962.,  8706.,  9482.,  10290., 14063., 15275., 16535., 17843.,
      16823., 18131., 19487., 20891., 19583., 20987., 22439., 23939., 15066.,
      16066., 17098., 18162., 8581.,  9113.,  9661.,  10225.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 3800.,
      11800., 22360., 35480., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 16878., 26622., 39566., 55710., 3800.,  11800., 22360.,
      35480., 9858.,  15602., 23266., 32850., 2280.,  7080.,  13416., 21288.,
      11232., 17632., 26080., 36576., 3800.,  11800., 22360., 35480., 14040.,
      22040., 32600., 45720., 3800.,  11800., 22360., 35480., 11232., 17632.,
      26080., 36576., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 9858.,  15602., 23266., 32850.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 2280.,
      7080.,  13416., 21288., 5646.,  8990.,  13486., 19134.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,
      2702.,  700.,   2012.,  3580.,  5404.,  5496.,  8120.,  11256., 14904.,
      12980., 17940., 23668., 30164., 20468., 25940., 32180., 39188., 10932.,
      15892., 21620., 28116., 5496.,  8120.,  11256., 14904., 2748.,  4060.,
      5628.,  7452.,  4442.,  6922.,  9786.,  13034., 13300., 18772., 25012.,
      32020., 29006., 36958., 46062., 56318., 25070., 33278., 42638., 53150.,
      20494., 27934., 36526., 46270., 6516.,  10964., 16180., 22164., 6170.,
      8138.,  10490., 13226., 10042., 13290., 16922., 20938., 22836., 28820.,
      35572., 43092., 25070., 33278., 42638., 53150., 20494., 27934., 36526.,
      46270., 16558., 24254., 33102., 43102., 14004., 18964., 24692., 31188.,
      9722.,  12458., 15578., 19082., 15002., 17994., 21370., 25130., 15348.,
      20820., 27060., 34068., 20494., 27934., 36526., 46270., 16558., 24254.,
      33102., 43102., 29006., 36958., 46062., 56318., 17396., 22868., 29108.,
      36116., 4442.,  6922.,  9786.,  13034., 7484.,  9820.,  12412., 15260.,
      14328., 17976., 22136., 26808., 10932., 15892., 21620., 28116., 20468.,
      25940., 32180., 39188., 17716., 23700., 30452., 37972., 14328., 17976.,
      22136., 26808., 700.,   2012.,  3580.,  5404.,  350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8538.,  11018., 13882., 17130.,
      14138., 17386., 21018., 25034., 10906., 13898., 17274., 21034., 1020.,
      2844.,  4924.,  7260.,  30.,    174.,   446.,   846.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,  610.,  890.,   1010.,  1130.,  1250.,  1144.,  969.,
      988.,  1500., 2110.,  2320.,  2530.,  2740.,  2436.,  2014.,
      2030., 3000., 4125.,  4450.,  4775.,  5100.,  4450.,  3620.,
      3470., 5000., 6725.,  7050.,  7375.,  7700.,  6610.,  5300.,
      4910., 7000., 9325.,  9650.,  9975.,  10300., 8770.,  6980.,
      6004., 8420., 11050., 11360., 11670., 11980., 10060., 7906.,
      6180., 8590., 11180., 11450., 11720., 11990., 9988.,  7791.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  20.,   30.,   34.,   31.,   20.,   11.,  35.,
      74.,  130., 166., 161.,  133.,  80.,   50.,   133.,  252., 410.,
      488., 441., 346., 200.,  125.,  298.,  522.,  800.,  878., 756.,
      571., 320., 200., 463.,  792.,  1190., 1268., 1071., 796., 440.,
      249., 549., 902., 1310., 1378., 1127., 815.,  440.,  189., 408.,
      658., 940., 982., 790.,  563.,  300.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,
      7352.,  11232., 15880., 17520., 19160., 20800., 18560., 15392.,
      14011., 20476., 27905., 30455., 33005., 35555., 30852., 24985.,
      20107., 28732., 38385., 40935., 43485., 46035., 39364., 31465.,
      22363., 31868., 42465., 45015., 47565., 50115., 42756., 34105.,
      19712., 28032., 37280., 39720., 42160., 44600., 37920., 30152.,
      9795.,  14300., 19465., 21595., 23725., 25855., 22292., 17949.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   124.,   196.,   233.,  218.,  143.,  64.,   224.,
      496.,  896.,  1168., 1156.,  968.,   588.,  337.,  926.,  1791., 2956.,
      3556., 3249., 2570., 1495.,  907.,   2186., 3861., 5956., 6556., 5679.,
      4310., 2425., 1477., 3446.,  5931.,  8956., 9556., 8109., 6050., 3355.,
      1892., 4184., 6892., 10032., 10560., 8656., 6272., 3392., 1453., 3142.,
      5075., 7260., 7588., 6113.,  4362.,  2327.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366., 6056.,  9498.,  13234., 16970., 20706., 19528., 16126.,
      4792., 8224.,  12616., 17384., 22152., 26920., 22560., 19352.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6040., 10400., 15656., 21192., 26728., 32264., 26464., 21560.,
      4086., 7144.,  11018., 15138., 19258., 23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,
      420.,   1576.,  3596.,  6608.,  8720.,  8732.,  7368.,  4500.,
      2450.,  6868.,  13446., 22376., 27080., 24894., 19780., 11546.,
      6890.,  16068., 27342., 40904., 41896., 35910., 27060., 15154.,
      10690., 19508., 30358., 43432., 40328., 34638., 26148., 14666.,
      10004., 13320., 17884., 23824., 16080., 14828., 11816., 6916.,
      2558.,  5964.,  10282., 15576., 18168., 15442., 11548., 6422.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 18275., 19640., 26140., 28000., 34925., 37300., 36175., 38600.,
      37425., 39900., 38675., 41200., 33020., 35080., 26345., 27920., 22768.,
      24016., 31984., 33680., 42040., 44200., 43240., 45440., 44440., 46680.,
      45640., 47920., 38384., 40240., 30208., 31624., 23667., 24720., 32932.,
      34360., 42905., 44720., 43955., 45800., 45005., 46880., 46055., 47960.,
      38404., 39952., 29985., 31164.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   44.,   80.,   76.,   120.,
      97.,   136.,  94.,   124.,  63.,   80.,   20.,   44.,   84.,   140.,
      200.,  296.,  376.,  520.,  504.,  664.,  512.,  644.,  436.,  532.,
      268.,  320.,  137.,  200.,  394.,  532.,  783.,  1008., 1316., 1640.,
      1604., 1952., 1485., 1764., 1186., 1384., 695.,  800.,  407.,  500.,
      994.,  1192., 1773., 2088., 2756., 3200., 3044., 3512., 2655., 3024.,
      2026., 2284., 1145., 1280., 677.,  800.,  1594., 1852., 2763., 3168.,
      4196., 4760., 4484., 5072., 3825., 4284., 2866., 3184., 1595., 1760.,
      896.,  996.,  1988., 2196., 3284., 3608., 4792., 5240., 5048., 5512.,
      4148., 4508., 3012., 3260., 1632., 1760., 697.,  756.,  1510., 1632.,
      2443., 2632., 3500., 3760., 3660., 3928., 2953., 3160., 2110., 2252.,
      1127., 1200.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069.,
      37885., 43761., 43177., 49453., 33540., 38676., 29287., 33379., 16932.,
      19444., 25392., 28912., 35420., 40076., 40332., 45308., 45244., 50540.,
      50156., 55772., 41776., 46320., 34964., 38564., 7673.,  9405.,  10716.,
      13132., 14791., 17987., 18523., 21959., 22255., 25931., 25987., 29903.,
      17708., 20828., 15789., 18273.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  979.,   1471.,  2894.,  3974.,
      5841.,  7605.,  9916.,  12460., 12172., 14908., 11349., 13545., 9110.,
      10670., 5359.,  6187.,  3079.,  3811.,  7574.,  9134.,  13581., 16065.,
      21196., 24700., 23452., 27148., 20529., 23445., 15710., 17750., 8899.,
      9967.,  5179.,  6151.,  12254., 14294., 21321., 24525., 32476., 36940.,
      34732., 39388., 29709., 33345., 22310., 24830., 12439., 13747., 6974.,
      7766.,  15500., 17148., 25642., 28210., 37464., 41016., 39480., 43160.,
      32482., 35338., 23612., 25580., 12806., 13822., 5461.,  5929.,  11842.,
      12810., 19175., 20675., 27492., 29556., 28756., 30884., 23219., 24863.,
      16602., 17730., 8873.,  9453.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942.,
      21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922., 7368.,
      12936., 13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664.,
      19704., 31032., 13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,
      16232., 9874.,  17282., 11906., 19698., 14962., 23138., 14946., 23506.,
      9384.,  15720., 9486.,  14878.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5386.,  7738.,  5372.,  7196.,  3662.,  4702.,  780.,   2220.,
      4184.,  7576.,  10724., 16580., 20272., 28080., 25392., 33200., 22404.,
      28516., 14232., 18136., 9196.,  11404., 6090.,  7930.,  15476., 19924.,
      28926., 36750., 38376., 49320., 37160., 48616., 30318., 39550., 16340.,
      22580., 11482., 14986., 3578.,  6314.,  11604., 16820., 23438., 31902.,
      39208., 50664., 39400., 50344., 35710., 44558., 25140., 31124., 15754.,
      19130., 8618.,  11226., 13236., 18196., 21406., 29486., 33896., 45864.,
      27944., 39400., 29454., 38942., 24340., 31092., 11834., 15082., 5356.,
      7564.,  14232., 18136., 25732., 31844., 40368., 49200., 32560., 40368.,
      27684., 34052., 18136., 22552., 3404.,  5356.,  350.,   1006.,  1884.,
      3452.,  4858.,  7594.,  9528.,  13688., 10744., 14392., 9802.,  12666.,
      6396.,  8220.,  270.,   798.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172.,
      12160., 13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744.,
      18233., 19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148.,
      17392., 18676., 20000., 14147., 15140., 16163., 17216., 8164.,  8768.,
      9396.,  10048., 12272., 13120., 14000., 14912., 17148., 18272., 19436.,
      20640., 19564., 20768., 22012., 23296., 21980., 23264., 24588., 25952.,
      24396., 25760., 27164., 28608., 20336., 21440., 22576., 23744., 17044.,
      17920., 18820., 19744., 3629.,  4044.,  4477.,  4928.,  5068.,  5648.,
      6252.,  6880.,  7011.,  7780.,  8579.,  9408.,  8847.,  9676.,  10535.,
      11424., 10683., 11572., 12491., 13440., 12519., 13468., 14447., 15456.,
      8476.,  9232.,  10012., 10816., 7593.,  8196.,  8817.,  9456.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,
      496.,   221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,
      1504.,  1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,
      2306.,  2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,
      1280.,  431.,   548.,   671.,   800.,   1318.,  1576.,  1846.,  2128.,
      2709.,  3132.,  3573.,  4032.,  4652.,  5264.,  5900.,  6560.,  5756.,
      6416.,  7100.,  7808.,  5409.,  5940.,  6489.,  7056.,  4366.,  4744.,
      5134.,  5536.,  2579.,  2780.,  2987.,  3200.,  1451.,  1628.,  1811.,
      2000.,  3598.,  3976.,  4366.,  4768.,  6489.,  7092.,  7713.,  8352.,
      10172., 11024., 11900., 12800., 11276., 12176., 13100., 14048., 9909.,
      10620., 11349., 12096., 7606.,  8104.,  8614.,  9136.,  4319.,  4580.,
      4847.,  5120.,  2471.,  2708.,  2951.,  3200.,  5878.,  6376.,  6886.,
      7408.,  10269., 11052., 11853., 12672., 15692., 16784., 17900., 19040.,
      16796., 17936., 19100., 20288., 14409., 15300., 16209., 17136., 10846.,
      11464., 12094., 12736., 6059.,  6380.,  6707.,  7040.,  3390.,  3584.,
      3782.,  3984.,  7548.,  7952.,  8364.,  8784.,  12506., 13136., 13778.,
      14432., 18296., 19168., 20056., 20960., 19288., 20192., 21112., 22048.,
      15890., 16592., 17306., 18032., 11564., 12048., 12540., 13040., 6278.,
      6528.,  6782.,  7040.,  2673.,  2788.,  2905.,  3024.,  5802.,  6040.,
      6282.,  6528.,  9403.,  9772.,  10147., 10528., 13492., 14000., 14516.,
      15040., 14116., 14640., 15172., 15712., 11407., 11812., 12223., 12640.,
      8162.,  8440.,  8722.,  9008.,  4365.,  4508.,  4653.,  4800.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257.,
      9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,
      5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580.,
      13348., 6868.,  9124.,  11700., 14596., 7732.,  10116., 12820., 15844.,
      8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,
      7260.,  9036.,  11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,
      7228.,  9004.,  4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,
      10943., 6579.,  8383.,  10427., 12711., 6523.,  8423.,  10563., 12943.,
      3996.,  5388.,  6972.,  8748.,  4141.,  5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,
      11048., 13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918.,
      13446., 15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,
      5994.,  2839.,  3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566.,
      13557., 15369., 17325., 19425., 17916., 20460., 23196., 26124., 17244.,
      19916., 22780., 25836., 14077., 16241., 18549., 21001., 7438.,  8902.,
      10462., 12118., 5327.,  6155.,  7031.,  7955.,  1471.,  2107.,  2791.,
      3523.,  5198.,  6406.,  7710.,  9110.,  10733., 12705., 14821., 17081.,
      18268., 20940., 23804., 26860., 18428., 20972., 23708., 26636., 16821.,
      18889., 21101., 23457., 11870., 13270., 14766., 16358., 7479.,  8275.,
      9119.,  10011., 4007.,  4611.,  5263.,  5963.,  6046.,  7190.,  8430.,
      9766.,  9765.,  11641., 13661., 15825., 15548., 18348., 21340., 24524.,
      12636., 15308., 18172., 21228., 13613., 15841., 18213., 20729., 11374.,
      12966., 14654., 16438., 5535.,  6299.,  7111.,  7971.,  2418.,  2938.,
      3490.,  4074.,  6660.,  7572.,  8548.,  9588.,  12150., 13582., 15110.,
      16734., 19144., 21224., 23432., 25768., 15368., 17192., 19144., 21224.,
      13094., 14590., 16182., 17870., 8548.,  9588.,  10692., 11860., 1474.,
      1930.,  2418.,  2938.,  101.,   249.,   413.,   593.,   762.,   1122.,
      1514.,  1938.,  2111.,  2747.,  3431.,  4163.,  4276.,  5252.,  6292.,
      7396.,  4948.,  5796.,  6708.,  7684.,  4567.,  5235.,  5951.,  6715.,
      2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456.,
      39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,
      17944., 28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,
      14120., 21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112.,
      37720., 10264., 18776., 29848., 43480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,
      9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,
      5500.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,
      8756.,  12692., 1754.,  3210.,  5050.,  7274.,  410.,   1354.,  2682.,
      4394.,  3188.,  5588.,  8756.,  12692., 2574.,  5918.,  10414., 16062.,
      6376.,  11176., 17512., 25384., 4328.,  9128.,  15464., 23336., 6126.,
      10238., 15502., 21918., 2164.,  4564.,  7732.,  11668., 2938.,  4650.,
      6746.,  9226.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,
      11668., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,
      5588.,  8756.,  12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,
      1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,
      10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240.,
      3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,
      2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,  4472.,
      7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,  510.,  750.,  870.,  816.,   705.,   796.,  1220., 1730.,  1940.,
      1756., 1474., 1610., 2400., 3325.,  3650.,  3230., 2660., 2690.,  3900.,
      5275., 5600., 4850., 3920., 3770.,  5400.,  7225., 7550., 6470.,  5180.,
      4850., 6900., 9175., 9500., 8090.,  6440.,  5632., 7900., 10370., 10680.,
      8980., 7066., 5628., 7830., 10200., 10470., 8736., 6825.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  10.,  9.,   29.,  39.,  49.,  59.,  40.,
      34.,  95.,  116., 137., 158., 100., 86.,  222., 258., 294., 330., 200.,
      166., 402., 438., 474., 510., 300., 220., 503., 536., 569., 602., 340.,
      217., 483., 509., 535., 561., 310., 147., 322., 337., 352., 367., 200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,
      12960., 14600., 13280., 11192., 12115., 18140., 25225., 27775.,
      24660., 20365., 20383., 29260., 39181., 40771., 34052., 27385.,
      26219., 36156., 47121., 47431., 38324., 30565., 28215., 37932.,
      48661., 47691., 37476., 29905., 25640., 33312., 41816., 39456.,
      29440., 23552., 16843., 20220., 24161., 20211., 12420., 10329.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   67.,   52.,   184.,  256.,  328.,
      400.,  280.,  221.,  646.,  802.,  958.,  1114., 719.,  592.,  1568.,
      1840., 2112., 2384., 1464., 1192., 2928., 3200., 3472., 3744., 2224.,
      1637., 3766., 4018., 4270., 4522., 2567., 1640., 3664., 3864., 4064.,
      4264., 2364., 1121., 2462., 2578., 2694., 2810., 1535.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696.,
      20392., 18888., 11040., 11064., 11650., 18680., 25790., 28966.,
      23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034.,
      18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864.,
      28238., 28342., 19544., 17770., 11256., 17824., 24200., 26536.,
      20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   486.,   340.,   1288.,
      1832.,  2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,
      8324.,  5434.,  4360.,  11728., 13840., 15952., 18064., 11176.,
      9000.,  22288., 24400., 26512., 28624., 17096., 12610., 29108.,
      31076., 33044., 35012., 19930., 12740., 28520., 30088., 31656.,
      33224., 18452., 8750.,  19244., 20156., 21068., 21980., 12022.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13955., 15080., 20060., 21600., 26925., 28900.,
      28175., 30200., 24220., 25880., 19445., 20720., 18095., 19400., 25820.,
      27600., 34425., 36700., 35675., 38000., 30460., 32360., 24305., 25760.,
      21352., 22528., 30000., 31600., 39440., 41480., 40640., 42720., 34224.,
      35920., 26968., 28264., 21531., 22512., 29988., 31320., 39105., 40800.,
      40155., 41880., 33540., 34944., 26229., 27300.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      27.,   40.,   16.,   36.,   68.,   116.,  100.,  156.,  132.,  196.,
      164.,  236.,  120.,  160.,  85.,   136.,  266.,  380.,  338.,  464.,
      410.,  548.,  482.,  632.,  319.,  400.,  248.,  344.,  680.,  888.,
      808.,  1032., 936.,  1176., 1064., 1320., 664.,  800.,  528.,  664.,
      1320., 1608., 1448., 1752., 1576., 1896., 1704., 2040., 1024., 1200.,
      757.,  880.,  1754., 2012., 1874., 2144., 1994., 2276., 2114., 2408.,
      1207., 1360., 772.,  868.,  1732., 1932., 1828., 2036., 1924., 2140.,
      2020., 2244., 1124., 1240., 533.,  588.,  1174., 1288., 1230., 1348.,
      1286., 1408., 1342., 1468., 735.,  800.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 26555., 30119., 37204., 42020., 47557., 53529.,
      45809., 51669., 32932., 37428., 26207., 29691., 23347., 26815., 30068.,
      34756., 38669., 44737., 37113., 43325., 23364., 28244., 21463., 25363.,
      18484., 21700., 28784., 33072., 40780., 46268., 44476., 50028., 37232.,
      41520., 31364., 34772., 21385., 23821., 28956., 32140., 37687., 41715.,
      37643., 41655., 25932., 28924., 21861., 24249.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   193.,   293.,   94.,    246.,   460.,   828.,   700.,   1132.,
      940.,   1436.,  1180.,  1740.,  886.,   1198.,  587.,   983.,   1918.,
      2806.,  2470.,  3454.,  3022.,  4102.,  3574.,  4750.,  2399.,  3035.,
      1804.,  2556.,  5048.,  6680.,  6040.,  7800.,  7032.,  8920.,  8024.,
      10040., 5052.,  6124.,  3964.,  5036.,  10008., 12280., 11000., 13400.,
      11992., 14520., 12984., 15640., 7852.,  9244.,  5819.,  6791.,  13534.,
      15574., 14470., 16606., 15406., 17638., 16342., 18670., 9359.,  10571.,
      5990.,  6750.,  13468., 15052., 14220., 15868., 14972., 16684., 15724.,
      17500., 8766.,  9686.,  4157.,  4593.,  9170.,  10074., 9610.,  10546.,
      10050., 11018., 10490., 11490., 5753.,  6269.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 12258., 19794., 17688.,
      28248., 19310., 32126., 19710., 33166., 17176., 27736., 15634., 24066.,
      8712.,  14792., 13536., 21984., 16504., 26808., 18360., 29176., 13536.,
      21984., 10568., 17160., 7902.,  12398., 9896.,  16232., 11218., 19138.,
      13250., 21554., 11432., 17768., 9326.,  14462.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      6424.,  9304.,  5592.,  7960.,  4108.,  5548.,  3690.,  5786.,  11188.,
      16148., 15508., 21236., 15092., 20564., 12628., 17844., 9114.,  12106.,
      8344.,  12248., 23344., 31152., 28464., 36272., 27440., 35248., 24368.,
      32176., 16344., 20760., 15832., 20248., 35248., 44080., 36272., 45104.,
      31152., 39984., 23344., 31152., 13976., 17880., 14378., 18010., 26804.,
      33812., 23316., 30068., 30708., 38228., 33364., 40628., 16602., 20106.,
      16588., 19564., 25944., 31384., 16920., 21848., 22872., 28312., 19992.,
      24920., 6636.,  8844.,  6974.,  8398.,  16668., 19772., 20156., 23516.,
      23644., 27260., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12847., 13708., 14599.,
      15520., 18020., 19184., 20388., 21632., 23057., 24500., 25993., 27536.,
      22197., 23612., 25077., 26592., 15924., 17008., 18132., 19296., 12683.,
      13524., 14395., 15296., 11255., 12092., 12959., 13856., 14468., 15600.,
      16772., 17984., 18601., 20068., 21585., 23152., 17805., 19308., 20861.,
      22464., 11092., 12272., 13492., 14752., 10259., 11204., 12179., 13184.,
      8852.,  9632.,  10436., 11264., 13872., 14912., 15984., 17088., 19724.,
      21056., 22428., 23840., 21564., 22912., 24300., 25728., 18096., 19136.,
      20208., 21312., 15268., 16096., 16948., 17824., 10397., 10988., 11597.,
      12224., 14092., 14864., 15660., 16480., 18355., 19332., 20339., 21376.,
      18335., 19308., 20311., 21344., 12604., 13328., 14076., 14848., 10641.,
      11220., 11817., 12432.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   10.,   24.,   42.,   64.,   34.,   56.,
      82.,   112.,  58.,   88.,   122.,  160.,  82.,   120.,  162.,  208.,
      85.,   108.,  133.,  160.,  30.,   64.,   102.,  144.,  188.,  272.,
      364.,  464.,  300.,  400.,  508.,  624.,  412.,  528.,  652.,  784.,
      524.,  656.,  796.,  944.,  406.,  480.,  558.,  640.,  247.,  340.,
      439.,  544.,  854.,  1064., 1286., 1520., 1118., 1352., 1598., 1856.,
      1382., 1640., 1910., 2192., 1646., 1928., 2222., 2528., 1123., 1276.,
      1435., 1600., 812.,  992.,  1180., 1376., 2328., 2720., 3128., 3552.,
      2808., 3232., 3672., 4128., 3288., 3744., 4216., 4704., 3768., 4256.,
      4760., 5280., 2396., 2656., 2924., 3200., 1852., 2112., 2380., 2656.,
      4728., 5280., 5848., 6432., 5208., 5792., 6392., 7008., 5688., 6304.,
      6936., 7584., 6168., 6816., 7480., 8160., 3756., 4096., 4444., 4800.,
      2791., 3028., 3271., 3520., 6518., 7016., 7526., 8048., 6974., 7496.,
      8030., 8576., 7430., 7976., 8534., 9104., 7886., 8456., 9038., 9632.,
      4531., 4828., 5131., 5440., 2902., 3088., 3278., 3472., 6540., 6928.,
      7324., 7728., 6908., 7312., 7724., 8144., 7276., 7696., 8124., 8560.,
      7644., 8080., 8524., 8976., 4270., 4496., 4726., 4960., 2025., 2132.,
      2241., 2352., 4474., 4696., 4922., 5152., 4690., 4920., 5154., 5392.,
      4906., 5144., 5386., 5632., 5122., 5368., 5618., 5872., 2813., 2940.,
      3069., 3200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 5307.,  6951.,  8835.,  10959., 7684.,  10004.,
      12644., 15604., 8253.,  11057., 14261., 17865., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 6883.,  8751.,  10859., 13207.,
      3692.,  5020.,  6540.,  8252.,  5840.,  7696.,  9808.,  12176., 7124.,
      9380.,  11956., 14852., 7988.,  10372., 13076., 16100., 5840.,  7696.,
      9808.,  12176., 4556.,  6012.,  7660.,  9500.,  3461.,  4441.,  5565.,
      6833.,  4252.,  5644.,  7228.,  9004.,  4739.,  6479.,  8459.,  10679.,
      5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,  4093.,
      5233.,  6517.,  7945.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      3076.,  3988.,  4964.,  6004.,  3940.,  4980.,  6084.,  7252.,  3106.,
      3690.,  4306.,  4954.,  1799.,  2531.,  3311.,  4139.,  6430.,  8086.,
      9838.,  11686., 8494.,  10342., 12286., 14326., 10558., 12598., 14734.,
      16966., 12622., 14854., 17182., 19606., 8687.,  9899.,  11159., 12467.,
      6148.,  7572.,  9060.,  10612., 17480., 20072., 22792., 25640., 18824.,
      21160., 23624., 26216., 22600., 25192., 27912., 30760., 26376., 29224.,
      32200., 35304., 16228., 17780., 19396., 21076., 13924., 15476., 17092.,
      18772., 29448., 32296., 35272., 38376., 26696., 29288., 32008., 34856.,
      30472., 33320., 36296., 39400., 34248., 37352., 40584., 43944., 20420.,
      22100., 23844., 25652., 17383., 18755., 20175., 21643., 31582., 34006.,
      36526., 39142., 24558., 26662., 28862., 31158., 28158., 30454., 32846.,
      35334., 31758., 34246., 36830., 39510., 18511., 19851., 21239., 22675.,
      14274., 15242., 16242., 17274., 19684., 21236., 22852., 24532., 7876.,
      9044.,  10276., 11572., 10788., 12084., 13444., 14868., 13700., 15124.,
      16612., 18164., 8370.,  9146.,  9954.,  10794., 3317.,  3657.,  4013.,
      4385.,  7962.,  8706.,  9482.,  10290., 9674.,  10482., 11322., 12194.,
      11386., 12258., 13162., 14098., 13098., 14034., 15002., 16002., 7533.,
      8033.,  8549.,  9081.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2938.,  4650.,  6746.,  9226.,  11956., 16916.,
      22644., 29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692.,
      31188., 8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082.,
      5816.,  8952.,  12600., 16760., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 12600., 16760., 21432., 26616., 9912.,  13048., 16696.,
      20856., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 16696.,
      20856., 25528., 30712., 5626.,  8362.,  11482., 14986., 20788., 26772.,
      33524., 41044., 19444., 24916., 31156., 38164., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 11226., 14730., 18618., 22890.,
      7004.,  8572.,  10396., 12476., 10936., 14072., 17720., 21880., 4792.,
      7928.,  11576., 15736., 11576., 15736., 20408., 25592., 17720., 21880.,
      26552., 31736., 10396., 12476., 14812., 17404., 350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,  560.,  820.,  940.,   1060.,  980.,   837.,   892.,
      1360., 1920., 2130., 2340.,  2096.,  1744.,  1820.,  2700.,
      3725., 4050., 4375., 3840.,  3140.,  3080.,  4450.,  6000.,
      6325., 6650., 5730., 4610.,  4340.,  6200.,  8275.,  8600.,
      8925., 7620., 6080., 5600.,  7950.,  10550., 10875., 11200.,
      9510., 7550., 6514., 9120.,  11950., 12260., 12570., 10544.,
      8278., 6516., 9050., 11770., 12040., 12310., 10250., 7992.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,   16.,  22.,   22.,   15.,   10.,   32.,   68.,
      89.,  110., 96.,   60.,  42.,   114.,  219.,  264.,  309.,  252.,
      150., 112., 280.,  508., 586.,  664.,  520.,  300.,  222.,  520.,
      898., 976., 1054., 800., 450.,  306.,  681.,  1128., 1200., 1272.,
      933., 510., 307.,  668., 1085., 1142., 1199., 864.,  465.,  210.,
      451., 724., 757.,  790., 563.,  300.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,
      10160., 14420., 16060., 17700., 15920., 13292., 13735., 20460.,
      28133., 30235., 32081., 27308., 21235., 22261., 31876., 41183.,
      42005., 42571., 34980., 26065., 26947., 38172., 47833., 47375.,
      46661., 37532., 27055., 27793., 39348., 48083., 46345., 44351.,
      34964., 24205., 23732., 33552., 39068., 35940., 32556., 24272.,
      14852., 12447., 17932., 24125., 26255., 28385., 24364., 19539.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   101.,  143.,  150.,  105.,  58.,   204.,  454.,
      610.,  766.,  684.,  434.,  279.,  786.,  1545., 1887., 2229., 1842.,
      1107., 788.,  2008., 3692., 4292., 4892., 3864., 2244., 1628., 3848.,
      6692., 7292., 7892., 6024., 3404., 2313., 5166., 8583., 9141., 9699.,
      7134., 3909., 2350., 5124., 8338., 8782., 9226., 6660., 3590., 1619.,
      3482., 5597., 5855., 6113., 4362., 2327.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776.,
      14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792.,
      25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598.,
      25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598.,
      25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598.,
      21016., 13370., 14920., 22496., 27192., 25944., 26424., 19616.,
      14344., 9286.,  14504., 19386., 21138., 18474., 15848., 11254.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,
      1432.,  3284.,  4484.,  5684.,  5144.,  3292.,  2010.,  5796.,
      11550., 14214., 16878., 14052., 8490.,  5880.,  14512., 25768.,
      27784., 32488., 25392., 14648., 11800., 23536., 38152., 37096.,
      41800., 31856., 18008., 14258., 24980., 38118., 33678., 38070.,
      28628., 16002., 11596., 15672., 21188., 12788., 16292., 12856.,
      7468.,  2854.,  6620.,  11362., 13402., 15442., 11548., 6422.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 16115., 17360., 23100., 24800., 30925., 33100., 32175.,
      34400., 33425., 35700., 28620., 30480., 22895., 24320., 20945., 22400.,
      29820., 31800., 39675., 42200., 40925., 43500., 42175., 44800., 35900.,
      38040., 28565., 30200., 24748., 26056., 34704., 36480., 45540., 47800.,
      46740., 49040., 47940., 50280., 40272., 42176., 31660., 33112., 24975.,
      26064., 34724., 36200., 45205., 47080., 46255., 48160., 47305., 49240.,
      39428., 41000., 30771., 31968.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      62.,   88.,   45.,   60.,   18.,   40.,   76.,   128.,  182.,  272.,
      254.,  356.,  326.,  440.,  300.,  384.,  194.,  240.,  111.,  168.,
      330.,  456.,  669.,  876.,  831.,  1056., 993.,  1236., 834.,  1008.,
      507.,  600.,  340.,  448.,  888.,  1120., 1660., 2032., 1948., 2344.,
      2236., 2656., 1784., 2080., 1044., 1200., 740.,  888.,  1768., 2080.,
      3100., 3592., 3388., 3904., 3676., 4216., 2824., 3200., 1604., 1800.,
      1089., 1224., 2442., 2724., 4071., 4512., 4341., 4800., 4611., 5088.,
      3402., 3732., 1869., 2040., 1122., 1228., 2452., 2672., 3998., 4340.,
      4214., 4568., 4430., 4796., 3204., 3456., 1730., 1860., 779.,  840.,
      1678., 1804., 2701., 2896., 2827., 3028., 2953., 3160., 2110., 2252.,
      1127., 1200.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 28171., 31927., 39444., 44516., 47477., 53769., 43169.,
      49349., 37645., 43457., 25620., 30180., 16707., 20111., 22871., 26259.,
      32356., 37108., 36137., 42157., 41237., 47401., 43073., 49125., 36708.,
      41460., 28751., 32299., 23436., 26428., 34192., 38352., 44596., 49796.,
      46756., 52020., 43092., 48164., 30928., 34832., 21164., 24028., 11409.,
      13429., 15740., 18540., 21295., 24971., 25027., 28943., 20887., 24787.,
      19516., 22572., 16729., 19101.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,   516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244.,  2900.,  1466.,
      1826.,  783.,   1227.,  2406.,  3390.,  4965.,  6585.,  6225.,  7989.,
      7485.,  9393.,  6342.,  7710.,  3879.,  4611.,  2516.,  3364.,  6664.,
      8488.,  12572., 15500., 14828., 17948., 17084., 20396., 13704., 16040.,
      8052.,  9284.,  5636.,  6804.,  13544., 16008., 23852., 27740., 26108.,
      30188., 28364., 32636., 21864., 24840., 12452., 14004., 8451.,  9519.,
      18990., 21222., 31713., 35205., 33837., 37473., 35961., 39741., 26574.,
      29190., 14619., 15975., 8770.,  9610.,  19188., 20932., 31318., 34030.,
      33022., 35830., 34726., 37630., 25140., 27140., 13586., 14618., 6113.,
      6597.,  13178., 14178., 21227., 22775., 22223., 23819., 23219., 24863.,
      16602., 17730., 8873.,  9453.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 14466., 22258., 16664., 27224., 21006., 34078., 18014.,
      31214., 22894., 35710., 16664., 27224., 13090., 21138., 11218., 19138.,
      18200., 28760., 19902., 32846., 21006., 34078., 18014., 31214., 18200.,
      28760., 13426., 21602., 9896.,  16232., 12512., 20960., 19224., 29784.,
      15640., 26200., 17176., 27736., 12512., 20960., 11944., 18280., 7550.,
      12302., 10920., 17256., 11378., 19554., 15138., 23186., 12754., 20674.,
      10920., 17256., 7198.,  12206.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3420.,  4988.,  2558.,  3470.,  700.,   2012.,  3768.,  6904.,
      9716.,  15188., 13396., 18612., 15028., 19988., 9912.,  13048., 6652.,
      8476.,  5210.,  7690.,  14996., 20724., 29486., 38206., 30590., 39438.,
      29646., 38622., 15508., 21236., 5882.,  8618.,  11256., 14904., 28656.,
      35952., 40936., 51880., 32936., 43368., 27624., 38568., 24560., 31856.,
      14328., 17976., 12088., 16248., 25200., 33520., 40360., 52840., 36456.,
      48424., 40744., 52200., 24560., 31856., 6328.,  9464.,  16266., 19642.,
      25972., 32468., 25790., 35150., 33806., 43294., 35678., 45294., 24948.,
      31444., 6058.,  8666.,  9436.,  12028., 21112., 25784., 27348., 33588.,
      25908., 31892., 18324., 24052., 5112.,  8760.,  2844.,  3900.,  1454.,
      2238.,  4348.,  6172.,  8938.,  12058., 10714., 14218., 9802.,  12666.,
      6396.,  8220.,  270.,   798.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 13631., 14540., 15479., 16448., 19108.,
      20336., 21604., 22912., 22977., 24500., 26073., 27696., 20837., 22332.,
      23877., 25472., 18121., 19524., 20977., 22480., 12260., 13360., 14500.,
      15680., 7943.,  8764.,  9615.,  10496., 11027., 11844., 12691., 13568.,
      15604., 16752., 17940., 19168., 17341., 18796., 20301., 21856., 19873.,
      21364., 22905., 24496., 20805., 22268., 23781., 25344., 17780., 18928.,
      20116., 21344., 13947., 14804., 15691., 16608., 11356., 12080., 12828.,
      13600., 16592., 17600., 18640., 19712., 21668., 22928., 24228., 25568.,
      22740., 24016., 25332., 26688., 20932., 22160., 23428., 24736., 14992.,
      15936., 16912., 17920., 10236., 10928., 11644., 12384., 5461.,  5948.,
      6453.,  6976.,  7532.,  8208.,  8908.,  9632.,  10203., 11092., 12011.,
      12960., 12039., 12988., 13967., 14976., 9971.,  10916., 11891., 12896.,
      9388.,  10128., 10892., 11680., 8077.,  8652.,  9245.,  9856.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   202.,   248.,   298.,   352.,   153.,   180.,   209.,
      240.,   34.,    72.,    114.,   160.,   212.,   304.,   404.,   512.,
      566.,   728.,   902.,   1088.,  830.,   1016.,  1214.,  1424.,  1094.,
      1304.,  1526.,  1760.,  1044.,  1200.,  1364.,  1536.,  690.,   776.,
      866.,   960.,   339.,   444.,   555.,   672.,   1086.,  1320.,  1566.,
      1824.,  2289.,  2676.,  3081.,  3504.,  2901.,  3324.,  3765.,  4224.,
      3513.,  3972.,  4449.,  4944.,  3006.,  3336.,  3678.,  4032.,  1851.,
      2028.,  2211.,  2400.,  1156.,  1360.,  1572.,  1792.,  3112.,  3552.,
      4008.,  4480.,  5932.,  6640.,  7372.,  8128.,  7036.,  7792.,  8572.,
      9376.,  8140.,  8944.,  9772.,  10624., 6568.,  7136.,  7720.,  8320.,
      3876.,  4176.,  4484.,  4800.,  2676.,  2960.,  3252.,  3552.,  6472.,
      7072.,  7688.,  8320.,  11452., 12400., 13372., 14368., 12556., 13552.,
      14572., 15616., 13660., 14704., 15772., 16864., 10568., 11296., 12040.,
      12800., 6036.,  6416.,  6804.,  7200.,  4095.,  4356.,  4623.,  4896.,
      9222.,  9768.,  10326., 10896., 15429., 16284., 17157., 18048., 16473.,
      17364., 18273., 19200., 17517., 18444., 19389., 20352., 12966., 13608.,
      14262., 14928., 7143.,  7476.,  7815.,  8160.,  4282.,  4488.,  4698.,
      4912.,  9380.,  9808.,  10244., 10688., 15326., 15992., 16670., 17360.,
      16166., 16856., 17558., 18272., 17006., 17720., 18446., 19184., 12324.,
      12816., 13316., 13824., 6666.,  6920.,  7178.,  7440.,  2997.,  3116.,
      3237.,  3360.,  6466.,  6712.,  6962.,  7216.,  10423., 10804., 11191.,
      11584., 10915., 11308., 11707., 12112., 11407., 11812., 12223., 12640.,
      8162.,  8440.,  8722.,  9008.,  4365.,  4508.,  4653.,  4800.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,
      7063.,  9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,
      9091.,  11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,
      5945.,  3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108.,
      14068., 10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241.,
      9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,
      8087.,  10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260.,
      12900., 15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      4483.,  6223.,  8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,
      9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132.,
      15092., 5659.,  7431.,  9443.,  11695., 4739.,  6479.,  8459.,  10679.,
      7940.,  10260., 12900., 15860., 8533.,  11369., 14605., 18241., 9069.,
      11937., 15205., 18873., 7557.,  10457., 13757., 17457., 7940.,  10260.,
      12900., 15860., 5811.,  7615.,  9659.,  11943., 4252.,  5644.,  7228.,
      9004.,  5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 5328.,
      7184.,  9296.,  11664., 5276.,  6668.,  8252.,  10028., 3253.,  4297.,
      5485.,  6817.,  4764.,  6156.,  7740.,  9516.,  4787.,  6591.,  8635.,
      10919., 6683.,  8455.,  10467., 12719., 5507.,  7247.,  9227.,  11447.,
      4764.,  6156.,  7740.,  9516.,  3045.,  4153.,  5405.,  6801.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6094.,  7302.,  8606.,  10006., 6942.,
      8086.,  9326.,  10662., 4596.,  5316.,  6100.,  6948.,  3114.,  3538.,
      3994.,  4482.,  2319.,  2891.,  3511.,  4179.,  6830.,  8166.,  9598.,
      11126., 13725., 15761., 17941., 20265., 14261., 16329., 18541., 20897.,
      13773., 15873., 18117., 20505., 7086.,  8422.,  9854.,  11382., 2623.,
      3259.,  3943.,  4675.,  5204.,  6052.,  6964.,  7940.,  13480., 15176.,
      17000., 18952., 19196., 21740., 24476., 27404., 15260., 17676., 20284.,
      23084., 12540., 15084., 17820., 20748., 11432., 13128., 14952., 16904.,
      6740.,  7588.,  8500.,  9476.,  5556.,  6532.,  7572.,  8676.,  11624.,
      13576., 15656., 17864., 18716., 21644., 24764., 28076., 16828., 19628.,
      22620., 25804., 19036., 21708., 24572., 27628., 11432., 13128., 14952.,
      16904., 2804.,  3524.,  4308.,  5156.,  7735.,  8531.,  9375.,  10267.,
      12222., 13750., 15374., 17094., 11797., 13993., 16333., 18817., 15789.,
      18017., 20389., 22905., 16709., 18969., 21373., 23921., 11710., 13238.,
      14862., 16582., 2727.,  3331.,  3983.,  4683.,  4410.,  5026.,  5674.,
      6354.,  10004., 11108., 12276., 13508., 12942., 14406., 15966., 17622.,
      12254., 13654., 15150., 16742., 8494.,  9830.,  11262., 12790., 2132.,
      2980.,  3892.,  4868.,  1306.,  1538.,  1802.,  2098.,  637.,   817.,
      1013.,  1225.,  1962.,  2386.,  2842.,  3330.,  4103.,  4835.,  5615.,
      6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,  6715.,
      2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 3800.,
      11800., 22360., 35480., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 16878., 26622., 39566., 55710., 3800.,  11800., 22360.,
      35480., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      14040., 22040., 32600., 45720., 4750.,  14750., 27950., 44350., 16878.,
      26622., 39566., 55710., 4750.,  14750., 27950., 44350., 14040., 22040.,
      32600., 45720., 2850.,  8850.,  16770., 26610., 8424.,  13224., 19560.,
      27432., 3040.,  9440.,  17888., 28384., 14040., 22040., 32600., 45720.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3040.,
      9440.,  17888., 28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,
      10062., 15966., 8424.,  13224., 19560., 27432., 2850.,  8850.,  16770.,
      26610., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,
      846.,   380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,
      1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,
      3540.,  6708.,  10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,
      2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,
      10644., 5646.,  8990.,  13486., 19134., 1710.,  5310.,  10062., 15966.,
      5646.,  8990.,  13486., 19134., 1140.,  3540.,  6708.,  10644., 1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  5616.,  8816.,
      13040., 18288., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 2280.,  7080.,  13416., 21288., 5616.,  8816.,  13040., 18288.,
      760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  1520.,
      4720.,  8944.,  14192., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 1520.,  4720.,  8944.,
      14192., 2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      4212.,  6612.,  9780.,  13716., 1710.,  5310.,  10062., 15966., 6990.,
      10846., 15854., 22014., 1710.,  5310.,  10062., 15966., 4212.,  6612.,
      9780.,  13716., 570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  760.,   2360.,  4472.,  7096.,  4212.,  6612.,  9780.,  13716.,
      1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 760.,
      2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,
      1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,   1770.,  3354.,
      5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,  610.,   890.,   1010.,  1130.,  1250.,  1144.,  969.,
      988.,  1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,
      2030., 3000.,  4125.,  4450.,  4775.,  5100.,  4450.,  3620.,
      3470., 5000.,  6725.,  7050.,  7375.,  7700.,  6610.,  5300.,
      4910., 7000.,  9325.,  9650.,  9975.,  10300., 8770.,  6980.,
      6350., 9000.,  11925., 12250., 12575., 12900., 10930., 8660.,
      7396., 10340., 13530., 13840., 14150., 14460., 12108., 9490.,
      7404., 10270., 13340., 13610., 13880., 14150., 11764., 9159.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,
      74.,   130.,  166.,  161.,  133.,  80.,   50.,   133.,  252.,  410.,
      488.,  441.,  346.,  200.,  138.,  338.,  604.,  940.,  1076., 934.,
      710.,  400.,  278.,  638.,  1084., 1620., 1756., 1474., 1090., 600.,
      392.,  859.,  1404., 2030., 2156., 1755., 1264., 680.,  397.,  853.,
      1370., 1950., 2050., 1643., 1167., 620.,  273.,  580.,  922.,  1300.,
      1358., 1078., 759.,  400.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,
      7352.,  11232., 15880., 17520., 19160., 20800., 18560., 15392.,
      14011., 20476., 27905., 30455., 33005., 35555., 30852., 24985.,
      20107., 28732., 38385., 40935., 43485., 46035., 39364., 31465.,
      22363., 31868., 42465., 45015., 47565., 50115., 42756., 34105.,
      20779., 29884., 40145., 42695., 45245., 47795., 41028., 32905.,
      13952., 20352., 27680., 30120., 32560., 35000., 30240., 24392.,
      19443., 27548., 36505., 38635., 40765., 42895., 36308., 28749.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,    124.,   196.,   233.,   218.,  143.,
      64.,   224.,  496.,   896.,   1168.,  1156.,  968.,  588.,
      337.,  926.,  1791.,  2956.,  3556.,  3249.,  2570., 1495.,
      984.,  2448., 4424.,  6944.,  8000.,  6992.,  5344., 3024.,
      2064., 4768., 8144.,  12224., 13280., 11192., 8304., 4584.,
      2989., 6566., 10755., 15580., 16564., 13509., 9746., 5251.,
      3060., 6584., 10588., 15088., 15872., 12736., 9056., 4816.,
      2117., 4502., 7163.,  10108., 10564., 8393.,  5914., 3119.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366., 6056.,  9498.,  13234., 16970., 20706., 19528., 16126.,
      4792., 8224.,  12616., 17384., 22152., 26920., 22560., 19352.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434., 11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6040., 10400., 15656., 21192., 26728., 32264., 26464., 21560.,
      4086., 7144.,  11018., 15138., 19258., 23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,  394.,   856.,   1400.,  1714.,  1628.,  1078.,
      420.,  1576., 3596.,  6288.,  7568.,  6556.,  4168.,  2644.,
      1810., 4564., 8454.,  11304., 11080., 9022.,  5060.,  3418.,
      1512., 4432., 8824.,  14624., 16160., 14808., 10960., 6728.,
      4232., 8080., 13656., 18848., 15968., 13432., 8144.,  4264.,
      2466., 6196., 11190., 17640., 17096., 14958., 10788., 4394.,
      2452., 3656., 5596.,  8400.,  6288.,  6124.,  4712.,  1924.,
      1374., 3340., 5962.,  9304.,  8504.,  6706.,  3996.,  310.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 18275., 19640., 26140., 28000., 34925., 37300., 36175., 38600.,
      37425., 39900., 38675., 41200., 33020., 35080., 26345., 27920., 23795.,
      25400., 33820., 36000., 44925., 47700., 46175., 49000., 47425., 50300.,
      48675., 51600., 41340., 43720., 32825., 34640., 28144., 29584., 39408.,
      41360., 51640., 54120., 52840., 55360., 54040., 56600., 55240., 57840.,
      46320., 48432., 36352., 37960., 28419., 29616., 39460., 41080., 51305.,
      53360., 52355., 54440., 53405., 55520., 54455., 56600., 45316., 47056.,
      35313., 36636.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   44.,   80.,   76.,   120.,
      97.,   136.,  94.,   124.,  63.,   80.,   20.,   44.,   84.,   140.,
      200.,  296.,  376.,  520.,  504.,  664.,  512.,  644.,  436.,  532.,
      268.,  320.,  137.,  200.,  394.,  532.,  783.,  1008., 1316., 1640.,
      1604., 1952., 1485., 1764., 1186., 1384., 695.,  800.,  432.,  552.,
      1096., 1352., 2008., 2416., 3184., 3760., 3696., 4304., 3256., 3736.,
      2504., 2840., 1424., 1600., 952.,  1112., 2216., 2552., 3808., 4336.,
      5744., 6480., 6256., 7024., 5296., 5896., 3944., 4360., 2184., 2400.,
      1421., 1568., 3130., 3436., 5139., 5616., 7460., 8120., 7940., 8624.,
      6489., 7020., 4690., 5056., 2531., 2720., 1472., 1588., 3172., 3412.,
      5108., 5480., 7288., 7800., 7672., 8200., 6164., 6572., 4388., 4668.,
      2336., 2480., 1025., 1092., 2182., 2320., 3475., 3688., 4908., 5200.,
      5132., 5432., 4081., 4312., 2878., 3036., 1519., 1600.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069.,
      37885., 43761., 43177., 49453., 33540., 38676., 29287., 33379., 18107.,
      21159., 27604., 31908., 39045., 44761., 44337., 50453., 49629., 56145.,
      54921., 61837., 46724., 52372., 39559., 44035., 13348., 15860., 19248.,
      22768., 26716., 31372., 31628., 36604., 36540., 41836., 41452., 47068.,
      31536., 36080., 27284., 30884., 16153., 18269., 23900., 26828., 32935.,
      36771., 36667., 40743., 40399., 44715., 44131., 48687., 36012., 39644.,
      29901., 32769.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  979.,   1471.,  2894.,  3974.,
      5841.,  7605.,  9916.,  12460., 12172., 14908., 11349., 13545., 9110.,
      10670., 5359.,  6187.,  3228.,  4172.,  8088.,  9848.,  14388., 17092.,
      22256., 26032., 24560., 28336., 21476., 24500., 16440., 18584., 9324.,
      10460., 7116.,  8124.,  13944., 15832., 22340., 25236., 32432., 36464.,
      32688., 36720., 27764., 30980., 20760., 23032., 11548., 12748., 8843.,
      9751.,  15166., 16822., 22841., 25341., 31964., 35404., 29932., 33308.,
      25149., 27825., 18630., 20510., 10279., 11267., 7262.,  7926.,  9484.,
      10620., 12554., 14226., 16536., 18808., 11704., 13848., 10498., 12202.,
      8188.,  9388.,  4710.,  5342.,  1733.,  2009.,  4002.,  4586.,  6839.,
      7763.,  10276., 11572., 12052., 13412., 10115., 11183., 7482.,  8226.,
      4121.,  4509.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942.,
      21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922., 8194.,
      14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006.,
      22078., 36046., 17176., 27736., 16978., 25922., 7368.,  12936., 13536.,
      21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704., 31032.,
      13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,  16232., 9874.,
      17282., 11906., 19698., 14962., 23138., 14946., 23506., 9384.,  15720.,
      9486.,  14878.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,   140.,   556.,
      856.,   2200.,  2660.,  5444.,  5744.,  9968.,  7792.,  12016., 7492.,
      11044., 4056.,  6424.,  1388.,  2572.,  330.,   1146.,  1908.,  4308.,
      5182.,  9422.,  9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,
      10228., 3354.,  5322.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  490.,
      1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,  15720.,
      9486.,  14878., 9428.,  13620., 5050.,  7274.,  300.,   972.,   1368.,
      2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,  7652.,  11460.,
      6936.,  9816.,  3084.,  4524.,  30.,    174.,   220.,   764.,   826.,
      2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172.,
      12160., 13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744.,
      18233., 19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148.,
      17392., 18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,
      10183., 10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641.,
      23120., 21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912.,
      26621., 28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235.,
      20324., 21443., 22592., 6372.,  6976.,  7604.,  8256.,  9200.,  10048.,
      10928., 11840., 12796., 13920., 15084., 16288., 15212., 16416., 17660.,
      18944., 17628., 18912., 20236., 21600., 20044., 21408., 22812., 24256.,
      15216., 16320., 17456., 18624., 13204., 14080., 14980., 15904., 7821.,
      8332.,  8861.,  9408.,  11596., 12304., 13036., 13792., 16003., 16932.,
      17891., 18880., 17839., 18828., 19847., 20896., 19675., 20724., 21803.,
      22912., 21511., 22620., 23759., 24928., 17564., 18448., 19356., 20288.,
      14601., 15300., 16017., 16752.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,
      496.,   221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,
      1504.,  1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,
      2306.,  2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,
      1280.,  431.,   548.,   671.,   800.,   1318.,  1576.,  1846.,  2128.,
      2709.,  3132.,  3573.,  4032.,  4652.,  5264.,  5900.,  6560.,  5756.,
      6416.,  7100.,  7808.,  5409.,  5940.,  6489.,  7056.,  4366.,  4744.,
      5134.,  5536.,  2579.,  2780.,  2987.,  3200.,  1500.,  1728.,  1964.,
      2208.,  3896.,  4384.,  4888.,  5408.,  7252.,  8032.,  8836.,  9664.,
      11632., 12736., 13872., 15040., 13616., 14784., 15984., 17216., 12100.,
      13024., 13972., 14944., 9368.,  10016., 10680., 11360., 5356.,  5696.,
      6044.,  6400.,  3500.,  3808.,  4124.,  4448.,  8216.,  8864.,  9528.,
      10208., 14212., 15232., 16276., 17344., 21552., 22976., 24432., 25920.,
      23536., 25024., 26544., 28096., 20020., 21184., 22372., 23584., 14968.,
      15776., 16600., 17440., 8316.,  8736.,  9164.,  9600.,  5399.,  5684.,
      5975.,  6272.,  11926., 12520., 13126., 13744., 19629., 20556., 21501.,
      22464., 28556., 29840., 31148., 32480., 30428., 31760., 33116., 34496.,
      24921., 25956., 27009., 28080., 18046., 18760., 19486., 20224., 9755.,
      10124., 10499., 10880., 5662.,  5888.,  6118.,  6352.,  12220., 12688.,
      13164., 13648., 19706., 20432., 21170., 21920., 28152., 29152., 30168.,
      31200., 29656., 30688., 31736., 32800., 23858., 24656., 25466., 26288.,
      17004., 17552., 18108., 18672., 9062.,  9344.,  9630.,  9920.,  3969.,
      4100.,  4233.,  4368.,  8458.,  8728.,  9002.,  9280.,  13483., 13900.,
      14323., 14752., 19060., 19632., 20212., 20800., 19940., 20528., 21124.,
      21728., 15871., 16324., 16783., 17248., 11202., 11512., 11826., 12144.,
      5917.,  6076.,  6237.,  6400.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257.,
      9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,
      6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221.,
      16633., 8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369.,
      9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,
      9487.,  11723., 14199., 3084.,  4284.,  5676.,  7260.,  5840.,  7696.,
      9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700.,
      14596., 7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 2341.,
      3193.,  4189.,  5329.,  4252.,  5644.,  7228.,  9004.,  4131.,  5743.,
      7595.,  9687.,  5099.,  6807.,  8755.,  10943., 6579.,  8383.,  10427.,
      12711., 6523.,  8423.,  10563., 12943., 3996.,  5388.,  6972.,  8748.,
      4141.,  5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,
      11048., 13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918.,
      13446., 15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,
      5994.,  2839.,  3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566.,
      13557., 15369., 17325., 19425., 17916., 20460., 23196., 26124., 17244.,
      19916., 22780., 25836., 14077., 16241., 18549., 21001., 7438.,  8902.,
      10462., 12118., 5327.,  6155.,  7031.,  7955.,  1572.,  2356.,  3204.,
      4116.,  5960.,  7528.,  9224.,  11048., 12844., 15452., 18252., 21244.,
      22544., 26192., 30096., 34256., 25616., 29264., 33168., 37328., 24140.,
      27132., 30316., 33692., 18120., 20200., 22408., 24744., 11332., 12500.,
      13732., 15028., 6788.,  7700.,  8676.,  9716.,  12808., 14632., 16584.,
      18664., 21836., 24828., 28012., 31388., 30096., 34256., 38672., 43344.,
      24784., 28688., 32848., 37264., 21164., 24284., 27596., 31100., 12488.,
      14568., 16776., 19112., 6628.,  7668.,  8772.,  9940.,  3591.,  4323.,
      5103.,  5931.,  9822.,  11222., 12718., 14310., 18245., 20505., 22909.,
      25457., 29244., 32556., 36060., 39756., 28380., 31564., 34940., 38508.,
      25165., 27777., 30533., 33433., 18222., 20070., 22014., 24054., 7167.,
      8059.,  8999.,  9987.,  3954.,  4474.,  5026.,  5610.,  5636.,  6548.,
      7524.,  8564.,  8566.,  9998.,  11526., 13150., 13000., 15080., 17288.,
      19624., 9224.,  11048., 13000., 15080., 9510.,  11006., 12598., 14286.,
      7524.,  8564.,  9668.,  10836., 3010.,  3466.,  3954.,  4474.,  2245.,
      2521.,  2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  10079., 11099.,
      12167., 13283., 15924., 17412., 18964., 20580., 14548., 15908., 17332.,
      18820., 11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,
      173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456.,
      39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,
      17944., 28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674.,
      17826., 26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078.,
      47710., 11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,
      9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,
      5500.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,
      8756.,  12692., 1754.,  3210.,  5050.,  7274.,  440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,
      6768.,  10992., 16240., 3128.,  5240.,  7864.,  11000., 250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,
      5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,   510.,   750.,   870.,   816.,   705.,   796.,   1220.,  1730.,
      1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,
      2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3544.,  5020.,  6650.,
      6960.,  5908.,  4690.,  3792.,  5310.,  6960.,  7230.,  6072.,  4773.,
      2586.,  3750.,  5070.,  5190.,  4488.,  3621.,  4900.,  6980.,  9290.,
      9500.,  8092.,  6442.,  8090.,  11400., 15025., 15350., 12950., 10220.,
      9170.,  12900., 16975., 17300., 14570., 11480., 9808.,  13660., 17810.,
      18120., 15124., 11818., 9300.,  12870., 16680., 16950., 14064., 10929.,
      4854.,  6990.,  9390.,  9510.,  8160.,  6537.,  9004.,  12740., 16850.,
      17060., 14428., 11410., 14570., 20400., 26725., 27050., 22670., 17780.,
      15650., 21900., 28675., 29000., 24290., 19040., 16072., 22300., 28970.,
      29280., 24340., 18946., 14808., 20430., 26400., 26670., 22056., 17085.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  10.,  9.,   29.,  39.,  49.,  59.,  40.,
      29.,  79.,  89.,  99.,  109., 70.,  49.,  129., 139., 149., 159., 100.,
      69.,  179., 189., 199., 209., 130., 63.,  150., 157., 164., 171., 100.,
      5.,   16.,  27.,  38.,  49.,  30.,  37.,  93.,  119., 145., 171., 100.,
      97.,  223., 249., 275., 301., 170., 157., 353., 379., 405., 431., 240.,
      217., 483., 509., 535., 561., 310., 147., 322., 337., 352., 367., 200.,
      9.,   28.,  47.,  66.,  85.,  50.,  65.,  157., 199., 241., 283., 160.,
      165., 367., 409., 451., 493., 270., 265., 577., 619., 661., 703., 380.,
      365., 787., 829., 871., 913., 490., 231., 494., 517., 540., 563., 300.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,  12960.,
      14600., 13280., 11192., 12115., 18140., 25225., 27775., 24660., 20365.,
      20383., 29260., 39181., 40771., 34052., 27385., 25992., 35744., 46456.,
      46656., 37504., 29792., 26819., 35676., 45321., 43931., 33892., 26769.,
      4227.,  6492.,  9225.,  10155., 9252.,  7809.,  9440.,  14080., 19520.,
      21160., 18784., 15512., 17755., 25980., 35233., 37335., 31988., 25301.,
      24871., 35436., 45733., 46555., 38820., 29761., 27752., 39072., 48728.,
      48160., 39296., 29248., 25371., 35516., 42513., 40355., 32068., 22825.,
      6171.,  9276.,  12945., 13875., 12420., 10329., 12992., 19072., 26080.,
      27720., 24288., 19832., 22051., 31516., 42105., 44655., 38292., 30685.,
      25327., 35852., 47485., 50035., 42564., 33865., 24200., 34080., 44920.,
      47360., 40064., 31712., 17331., 24476., 32345., 34475., 29220., 23169.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   67.,   52.,   184.,  256.,  328.,
      400.,  280.,  192.,  544.,  616.,  688.,  760.,  500.,  332.,  904.,
      976.,  1048., 1120., 720.,  472.,  1264., 1336., 1408., 1480., 940.,
      457.,  1102., 1154., 1206., 1258., 743.,  29.,   102.,  186.,  270.,
      354.,  219.,  260.,  664.,  864.,  1064., 1264., 744.,  720.,  1664.,
      1864., 2064., 2264., 1284., 1180., 2664., 2864., 3064., 3264., 1824.,
      1640., 3664., 3864., 4064., 4264., 2364., 1121., 2462., 2578., 2694.,
      2810., 1535., 53.,   182.,  330.,  478.,  626.,  371.,  468.,  1144.,
      1472., 1800., 2128., 1208., 1248., 2784., 3112., 3440., 3768., 2068.,
      2028., 4424., 4752., 5080., 5408., 2928., 2808., 6064., 6392., 6720.,
      7048., 3788., 1785., 3822., 4002., 4182., 4362., 2327.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104.,
      22440., 15968., 11480., 9078.,  13416., 17546., 18786., 12936., 11646.,
      8694.,  12904., 16906., 18786., 16328., 11646., 10264., 15648., 18344.,
      20936., 17184., 14136., 18018., 22904., 24734., 27078., 19992., 14170.,
      17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200.,
      26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.,
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 16376., 19872., 20104.,
      22440., 15968., 11480., 9078.,  13416., 17546., 18786., 12936., 11646.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   486.,   340.,   1288.,  1832.,
      2376.,  2920.,  2084.,  1380.,  4008.,  4552.,  5096.,  5640.,  3764.,
      2420.,  6728.,  7272.,  7816.,  8360.,  5444.,  3460.,  9448.,  9992.,
      10536., 11080., 7124.,  3470.,  8428.,  8828.,  9228.,  9628.,  5718.,
      190.,   716.,   1372.,  2028.,  2684.,  1670.,  1940.,  5000.,  6568.,
      8136.,  9704.,  5732.,  5540.,  12840., 14408., 15976., 17544., 9972.,
      9140.,  20680., 22248., 23816., 25384., 14212., 12740., 28520., 30088.,
      31656., 33224., 18452., 8750.,  19244., 20156., 21068., 21980., 12022.,
      350.,   1292.,  2460.,  3628.,  4796.,  2854.,  3540.,  8712.,  11304.,
      13896., 16488., 9380.,  9700.,  21672., 24264., 26856., 29448., 16180.,
      15860., 34632., 37224., 39816., 42408., 22980., 22020., 47592., 50184.,
      52776., 55368., 29780., 14030., 30060., 31484., 32908., 34332., 18326.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13288., 14176., 18864., 20080., 25040., 26600.,
      26240., 27840., 22320., 23632., 17752., 18760., 14403., 15168., 20196.,
      21240., 26505., 27840., 27555., 28920., 23172., 24288., 18237., 19092.,
      9435.,  10344., 13764., 15000., 18705., 20280., 19155., 20760., 16644.,
      17952., 13485., 14484., 18256., 19600., 26096., 27920., 34840., 37160.,
      35640., 38000., 30448., 32368., 24304., 25768., 30515., 32360., 43100.,
      45600., 56797., 59844., 57663., 60632., 48156., 50520., 37349., 39088.,
      33503., 35144., 46812., 49040., 59817., 62524., 59403., 62032., 48764.,
      50856., 36961., 38496., 32488., 33856., 45104., 46960., 55952., 58184.,
      54208., 56352., 43696., 45392., 32216., 33448., 26955., 27984., 37284.,
      38680., 44337., 45984., 41163., 42712., 32260., 33472., 22629., 23492.,
      2883.,  3288.,  4356.,  4920.,  6105.,  6840.,  6555.,  7320.,  5892.,
      6528.,  4917.,  5412.,  6160.,  6832.,  9072.,  10000., 12440., 13640.,
      13240., 14480., 11632., 12656., 9520.,  10312., 11195., 12200., 16220.,
      17600., 21925., 23700., 23175., 25000., 20060., 21560., 16205., 17360.,
      15335., 16520., 21980., 23600., 29425., 31500., 30675., 32800., 26300.,
      28040., 21065., 22400., 18664., 19744., 26288., 27760., 34640., 36520.,
      35840., 37760., 30256., 31824., 23896., 25096., 19155., 20064., 26724.,
      27960., 34905., 36480., 35955., 37560., 30084., 31392., 23565., 24564.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      27.,   40.,   16.,   36.,   68.,   116.,  100.,  156.,  132.,  196.,
      164.,  236.,  120.,  160.,  76.,   116.,  228.,  316.,  260.,  356.,
      292.,  396.,  324.,  436.,  220.,  280.,  136.,  196.,  388.,  516.,
      420.,  556.,  452.,  596.,  484.,  636.,  320.,  400.,  196.,  276.,
      548.,  716.,  580.,  756.,  612.,  796.,  644.,  836.,  420.,  520.,
      205.,  252.,  502.,  600.,  526.,  628.,  550.,  656.,  574.,  684.,
      343.,  400.,  9.,    20.,   38.,   64.,   78.,   108.,  118.,  152.,
      158.,  196.,  99.,   120.,  112.,  148.,  292.,  372.,  388.,  476.,
      484.,  580.,  580.,  684.,  344.,  400.,  332.,  388.,  772.,  892.,
      868.,  996.,  964.,  1100., 1060., 1204., 604.,  680.,  552.,  628.,
      1252., 1412., 1348., 1516., 1444., 1620., 1540., 1724., 864.,  960.,
      772.,  868.,  1732., 1932., 1828., 2036., 1924., 2140., 2020., 2244.,
      1124., 1240., 533.,  588.,  1174., 1288., 1230., 1348., 1286., 1408.,
      1342., 1468., 735.,  800.,  17.,   36.,   70.,   112.,  142.,  188.,
      214.,  264.,  286.,  340.,  171.,  200.,  208.,  260.,  516.,  628.,
      676.,  796.,  836.,  964.,  996.,  1132., 568.,  640.,  588.,  660.,
      1316., 1468., 1476., 1636., 1636., 1804., 1796., 1972., 988.,  1080.,
      968.,  1060., 2116., 2308., 2276., 2476., 2436., 2644., 2596., 2812.,
      1408., 1520., 1348., 1460., 2916., 3148., 3076., 3316., 3236., 3484.,
      3396., 3652., 1828., 1960., 861.,  924.,  1846., 1976., 1934., 2068.,
      2022., 2160., 2110., 2252., 1127., 1200.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 25908., 29124., 35952., 40240., 45452., 50684.,
      43324., 48364., 30192., 33968., 23556., 26452., 18681., 20925., 22364.,
      25292., 27079., 30787., 23963., 27655., 10636., 13372., 10197., 12393.,
      12825., 14685., 19356., 22028., 27175., 30755., 30715., 34535., 27916.,
      31164., 23541., 26121., 17444., 19956., 25392., 28912., 34908., 39564.,
      39180., 44156., 31664., 35696., 26996., 30212., 16987., 20423., 24916.,
      29732., 34853., 40953., 39441., 45685., 29732., 34740., 25215., 29083.,
      23507., 26847., 35188., 39876., 46253., 52193., 48281., 54365., 39748.,
      44628., 31351., 35123., 21684., 24388., 30960., 34736., 36620., 41340.,
      35708., 40492., 25072., 28848., 18180., 21076., 15145., 17453., 20764.,
      23948., 19927., 23827., 23467., 27351., 20812., 23804., 17157., 19417.,
      17417., 19597., 23900., 26828., 31543., 35315., 30795., 34551., 23884.,
      26876., 20325., 22713., 21668., 24692., 27312., 31344., 34524., 39692.,
      31948., 37180., 18352., 22384., 17012., 20228., 18603., 21975., 29076.,
      33636., 41365., 47273., 45441., 51493., 38500., 43252., 32719., 36523.,
      23075., 26351., 32180., 36612., 43037., 48785., 44553., 50445., 33156.,
      37780., 28615., 32323., 15284., 17988., 21744., 25520., 29900., 34876.,
      34812., 40108., 25968., 30256., 22916., 26324., 15001., 17117., 22364.,
      25292., 31015., 34851., 34747., 38823., 28940., 32188., 24309., 26889.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   193.,   293.,   94.,    246.,   460.,   828.,   700.,   1132.,
      940.,   1436.,  1180.,  1740.,  886.,   1198.,  534.,   846.,   1660.,
      2348.,  1900.,  2652.,  2140.,  2956.,  2380.,  3260.,  1646.,  2118.,
      974.,   1446.,  2860.,  3868.,  3100.,  4172.,  3340.,  4476.,  3580.,
      4780.,  2406.,  3038.,  1414.,  2046.,  4060.,  5388.,  4300.,  5692.,
      4540.,  5996.,  4780.,  6300.,  3166.,  3958.,  1549.,  1921.,  3826.,
      4602.,  4010.,  4818.,  4194.,  5034.,  4378.,  5250.,  2633.,  3085.,
      53.,    137.,   258.,   458.,   570.,   802.,   882.,   1146.,  1194.,
      1490.,  753.,   917.,   830.,   1110.,  2188.,  2812.,  2940.,  3628.,
      3692.,  4444.,  4444.,  5260.,  2646.,  3086.,  2550.,  2990.,  5948.,
      6892.,  6700.,  7708.,  7452.,  8524.,  8204.,  9340.,  4686.,  5286.,
      4270.,  4870.,  9708.,  10972., 10460., 11788., 11212., 12604., 11964.,
      13420., 6726.,  7486.,  5990.,  6750.,  13468., 15052., 14220., 15868.,
      14972., 16684., 15724., 17500., 8766.,  9686.,  4157.,  4593.,  9170.,
      10074., 9610.,  10546., 10050., 11018., 10490., 11490., 5753.,  6269.,
      101.,   249.,   482.,   810.,   1050.,  1410.,  1618.,  2010.,  2186.,
      2610.,  1313.,  1541.,  1566.,  1974.,  3916.,  4796.,  5180.,  6124.,
      6444.,  7452.,  7708.,  8780.,  4406.,  4974.,  4566.,  5134.,  10236.,
      11436., 11500., 12764., 12764., 14092., 14028., 15420., 7726.,  8454.,
      7566.,  8294.,  16556., 18076., 17820., 19404., 19084., 20732., 20348.,
      22060., 11046., 11934., 10566., 11454., 22876., 24716., 24140., 26044.,
      25404., 27372., 26668., 28700., 14366., 15414., 6765.,  7265.,  14514.,
      15546., 15210., 16274., 15906., 17002., 16602., 17730., 8873.,  9453.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 8712.,  14792., 13536., 21984., 16504., 26808.,
      18360., 29176., 13536., 21984., 10568., 17160., 7902.,  12398., 9896.,
      16232., 11218., 19138., 13250., 21554., 11432., 17768., 9326.,  14462.,
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 8712.,  14792., 13536., 21984., 16504., 26808.,
      18360., 29176., 13536., 21984., 10568., 17160., 7902.,  12398., 9896.,
      16232., 11218., 19138., 13250., 21554., 11432., 17768., 9326.,  14462.,
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 8712.,  14792., 13536., 21984., 16504., 26808.,
      18360., 29176., 13536., 21984., 10568., 17160., 7902.,  12398., 9896.,
      16232., 11218., 19138., 13250., 21554., 11432., 17768., 9326.,  14462.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      6424.,  9304.,  5592.,  7960.,  4108.,  5548.,  3340.,  4780.,  9304.,
      12696., 11160., 15064., 8280.,  11672., 3352.,  6232.,  3244.,  4940.,
      1964.,  3660.,  6424.,  9304.,  5592.,  7960.,  7448.,  10328., 9304.,
      12696., 6476.,  8428.,  4684.,  6636.,  8280.,  11672., 3352.,  6232.,
      5208.,  8600.,  6424.,  9304.,  2924.,  4108.,  2558.,  3470.,  6812.,
      8892.,  8252.,  10588., 9692.,  12284., 6396.,  8220.,  270.,   798.,
      350.,   1006.,  1884.,  3452.,  4348.,  6172.,  6812.,  8892.,  9276.,
      11612., 5870.,  7166.,  6380.,  8588.,  16920., 21848., 22872., 28312.,
      19992., 24920., 15064., 19480., 9868.,  12332., 11148., 13612., 26968.,
      32408., 32920., 38872., 25944., 31384., 16920., 21848., 11052., 13772.,
      11820., 14540., 19992., 24920., 15064., 19480., 21016., 25944., 26968.,
      32408., 16332., 19308., 16588., 19564., 25944., 31384., 16920., 21848.,
      22872., 28312., 19992., 24920., 6636.,  8844.,  6974.,  8398.,  16668.,
      19772., 20156., 23516., 23644., 27260., 14204., 17052., 590.,   1630.,
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      6424.,  9304.,  5592.,  7960.,  4108.,  5548.,  3340.,  4780.,  9304.,
      12696., 11160., 15064., 8280.,  11672., 3352.,  6232.,  3244.,  4940.,
      1964.,  3660.,  6424.,  9304.,  5592.,  7960.,  7448.,  10328., 9304.,
      12696., 6476.,  8428.,  4684.,  6636.,  8280.,  11672., 3352.,  6232.,
      5208.,  8600.,  6424.,  9304.,  2924.,  4108.,  2558.,  3470.,  6812.,
      8892.,  8252.,  10588., 9692.,  12284., 6396.,  8220.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12564., 13344., 14148.,
      14976., 17456., 18496., 19568., 20672., 22092., 23360., 24668., 26016.,
      21052., 22272., 23532., 24832., 14640., 15552., 16496., 17472., 11428.,
      12128., 12852., 13600., 9069.,  9612.,  10173., 10752., 10828., 11536.,
      12268., 13024., 13091., 13988., 14915., 15872., 11535., 12428., 13351.,
      14304., 4988.,  5648.,  6332.,  7040.,  4833.,  5364.,  5913.,  6480.,
      6189.,  6636.,  7101.,  7584.,  9356.,  10000., 10668., 11360., 13155.,
      14020., 14915., 15840., 14895., 15820., 16775., 17760., 13564., 14352.,
      15164., 16000., 11457., 12084., 12729., 13392., 8420.,  9024.,  9652.,
      10304., 12272., 13120., 14000., 14912., 16892., 18016., 19180., 20384.,
      18988., 20192., 21436., 22720., 15344., 16320., 17328., 18368., 13108.,
      13888., 14692., 15520., 8079.,  8908.,  9767.,  10656., 11876., 13040.,
      14244., 15488., 16689., 18164., 19689., 21264., 18965., 20476., 22037.,
      23648., 14260., 15472., 16724., 18016., 12139., 13076., 14043., 15040.,
      11351., 12156., 12991., 13856., 17028., 18160., 19332., 20544., 22409.,
      23844., 25329., 26864., 23405., 24876., 26397., 27968., 19284., 20464.,
      21684., 22944., 15219., 16132., 17075., 18048., 10516., 11168., 11844.,
      12544., 15024., 15936., 16880., 17856., 17740., 18880., 20060., 21280.,
      17276., 18432., 19628., 20864., 12080., 12992., 13936., 14912., 8740.,
      9440.,  10164., 10912., 7293.,  7852.,  8429.,  9024.,  9996.,  10768.,
      11564., 12384., 9491.,  10436., 11411., 12416., 11263., 12204., 13175.,
      14176., 10044., 10768., 11516., 12288., 8305.,  8852.,  9417.,  10000.,
      8445.,  8972.,  9517.,  10080., 11596., 12304., 13036., 13792., 15315.,
      16228., 17171., 18144., 14943., 15852., 16791., 17760., 11580., 12304.,
      13052., 13824., 9873.,  10452., 11049., 11664., 10468., 11200., 11956.,
      12736., 13168., 14144., 15152., 16192., 16636., 17888., 19180., 20512.,
      15340., 16608., 17916., 19264., 8688.,  9664.,  10672., 11712., 8116.,
      8896.,  9700.,  10528., 8895.,  9708.,  10551., 11424., 13988., 15088.,
      16228., 17408., 19969., 21396., 22873., 24400., 21989., 23452., 24965.,
      26528., 18676., 19824., 21012., 22240., 15899., 16820., 17771., 18752.,
      11143., 11932., 12751., 13600., 15556., 16624., 17732., 18880., 20825.,
      22212., 23649., 25136., 21565., 22988., 24461., 25984., 16020., 17136.,
      18292., 19488., 13859., 14756., 15683., 16640., 7316.,  7968.,  8644.,
      9344.,  10416., 11328., 12272., 13248., 14348., 15552., 16796., 18080.,
      16764., 18048., 19372., 20736., 12464., 13504., 14576., 15680., 11044.,
      11872., 12724., 13600., 7245.,  7756.,  8285.,  8832.,  10828., 11536.,
      12268., 13024., 15043., 15972., 16931., 17920., 16879., 17868., 18887.,
      19936., 14076., 14864., 15676., 16512., 11841., 12468., 13113., 13776.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   85.,    108.,   133.,   160.,   30.,    64.,    102.,
      144.,   188.,   272.,   364.,   464.,   300.,   400.,   508.,   624.,
      412.,   528.,   652.,   784.,   524.,   656.,   796.,   944.,   406.,
      480.,   558.,   640.,   230.,   304.,   382.,   464.,   748.,   912.,
      1084.,  1264.,  860.,   1040.,  1228.,  1424.,  972.,   1168.,  1372.,
      1584.,  1084.,  1296.,  1516.,  1744.,  766.,   880.,   998.,   1120.,
      430.,   544.,   662.,   784.,   1308.,  1552.,  1804.,  2064.,  1420.,
      1680.,  1948.,  2224.,  1532.,  1808.,  2092.,  2384.,  1644.,  1936.,
      2236.,  2544.,  1126.,  1280.,  1438.,  1600.,  630.,   784.,   942.,
      1104.,  1868.,  2192.,  2524.,  2864.,  1980.,  2320.,  2668.,  3024.,
      2092.,  2448.,  2812.,  3184.,  2204.,  2576.,  2956.,  3344.,  1486.,
      1680.,  1878.,  2080.,  729.,   820.,   913.,   1008.,  1818.,  2008.,
      2202.,  2400.,  1906.,  2104.,  2306.,  2512.,  1994.,  2200.,  2410.,
      2624.,  2082.,  2296.,  2514.,  2736.,  1261.,  1372.,  1485.,  1600.,
      17.,    36.,    57.,    80.,    106.,   152.,   202.,   256.,   258.,
      312.,   370.,   432.,   410.,   472.,   538.,   608.,   562.,   632.,
      706.,   784.,   357.,   396.,   437.,   480.,   382.,   448.,   518.,
      592.,   1020.,  1168.,  1324.,  1488.,  1388.,  1552.,  1724.,  1904.,
      1756.,  1936.,  2124.,  2320.,  2124.,  2320.,  2524.,  2736.,  1270.,
      1376.,  1486.,  1600.,  1222.,  1328.,  1438.,  1552.,  2860.,  3088.,
      3324.,  3568.,  3228.,  3472.,  3724.,  3984.,  3596.,  3856.,  4124.,
      4400.,  3964.,  4240.,  4524.,  4816.,  2270.,  2416.,  2566.,  2720.,
      2062.,  2208.,  2358.,  2512.,  4700.,  5008.,  5324.,  5648.,  5068.,
      5392.,  5724.,  6064.,  5436.,  5776.,  6124.,  6480.,  5804.,  6160.,
      6524.,  6896.,  3270.,  3456.,  3646.,  3840.,  2902.,  3088.,  3278.,
      3472.,  6540.,  6928.,  7324.,  7728.,  6908.,  7312.,  7724.,  8144.,
      7276.,  7696.,  8124.,  8560.,  7644.,  8080.,  8524.,  8976.,  4270.,
      4496.,  4726.,  4960.,  2025.,  2132.,  2241.,  2352.,  4474.,  4696.,
      4922.,  5152.,  4690.,  4920.,  5154.,  5392.,  4906.,  5144.,  5386.,
      5632.,  5122.,  5368.,  5618.,  5872.,  2813.,  2940.,  3069.,  3200.,
      33.,    68.,    105.,   144.,   202.,   280.,   362.,   448.,   482.,
      568.,   658.,   752.,   762.,   856.,   954.,   1056.,  1042.,  1144.,
      1250.,  1360.,  629.,   684.,   741.,   800.,   734.,   832.,   934.,
      1040.,  1852.,  2064.,  2284.,  2512.,  2476.,  2704.,  2940.,  3184.,
      3100.,  3344.,  3596.,  3856.,  3724.,  3984.,  4252.,  4528.,  2134.,
      2272.,  2414.,  2560.,  2214.,  2352.,  2494.,  2640.,  4972.,  5264.,
      5564.,  5872.,  5596.,  5904.,  6220.,  6544.,  6220.,  6544.,  6876.,
      7216.,  6844.,  7184.,  7532.,  7888.,  3774.,  3952.,  4134.,  4320.,
      3694.,  3872.,  4054.,  4240.,  8092.,  8464.,  8844.,  9232.,  8716.,
      9104.,  9500.,  9904.,  9340.,  9744.,  10156., 10576., 9964.,  10384.,
      10812., 11248., 5414.,  5632.,  5854.,  6080.,  5174.,  5392.,  5614.,
      5840.,  11212., 11664., 12124., 12592., 11836., 12304., 12780., 13264.,
      12460., 12944., 13436., 13936., 13084., 13584., 14092., 14608., 7054.,
      7312.,  7574.,  7840.,  3321.,  3444.,  3569.,  3696.,  7130.,  7384.,
      7642.,  7904.,  7474.,  7736.,  8002.,  8272.,  7818.,  8088.,  8362.,
      8640.,  8162.,  8440.,  8722.,  9008.,  4365.,  4508.,  4653.,  4800.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3692.,  5020.,  6540.,
      8252.,  5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 4556.,
      6012.,  7660.,  9500.,  3461.,  4441.,  5565.,  6833.,  4252.,  5644.,
      7228.,  9004.,  4739.,  6479.,  8459.,  10679., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.,
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3692.,  5020.,  6540.,
      8252.,  5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 4556.,
      6012.,  7660.,  9500.,  3461.,  4441.,  5565.,  6833.,  4252.,  5644.,
      7228.,  9004.,  4739.,  6479.,  8459.,  10679., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.,
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3692.,  5020.,  6540.,
      8252.,  5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 4556.,
      6012.,  7660.,  9500.,  3461.,  4441.,  5565.,  6833.,  4252.,  5644.,
      7228.,  9004.,  4739.,  6479.,  8459.,  10679., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      3076.,  3988.,  4964.,  6004.,  3940.,  4980.,  6084.,  7252.,  3106.,
      3690.,  4306.,  4954.,  1698.,  2282.,  2898.,  3546.,  5668.,  6964.,
      8324.,  9748.,  6532.,  7956.,  9444.,  10996., 7396.,  8948.,  10564.,
      12244., 8260.,  9940.,  11684., 13492., 5906.,  6810.,  7746.,  8714.,
      3218.,  4122.,  5058.,  6026.,  9604.,  11028., 12516., 14068., 8036.,
      9076.,  10180., 11348., 8900.,  10068., 11300., 12596., 9764.,  11060.,
      12420., 13844., 6274.,  6986.,  7730.,  8506.,  4354.,  5066.,  5810.,
      6586.,  7012.,  8052.,  9156.,  10324., 1348.,  2004.,  2724.,  3508.,
      2212.,  2996.,  3844.,  4756.,  3076.,  3988.,  4964.,  6004.,  2546.,
      3066.,  3618.,  4202.,  1173.,  1385.,  1613.,  1857.,  3162.,  3650.,
      4170.,  4722.,  3850.,  4402.,  4986.,  5602.,  4538.,  5154.,  5802.,
      6482.,  5226.,  5906.,  6618.,  7362.,  3341.,  3713.,  4101.,  4505.,
      101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  1962.,
      2386.,  2842.,  3330.,  3162.,  3650.,  4170.,  4722.,  4362.,  4914.,
      5498.,  6114.,  2781.,  3089.,  3413.,  3753.,  2930.,  3450.,  4002.,
      4586.,  7876.,  9044.,  10276., 11572., 10788., 12084., 13444., 14868.,
      13700., 15124., 16612., 18164., 16612., 18164., 19780., 21460., 9954.,
      10794., 11666., 12570., 9570.,  10410., 11282., 12186., 22436., 24244.,
      26116., 28052., 25348., 27284., 29284., 31348., 28260., 30324., 32452.,
      34644., 31172., 33364., 35620., 37940., 17874., 19034., 20226., 21450.,
      16210., 17370., 18562., 19786., 28420., 30356., 32356., 34420., 20708.,
      22260., 23876., 25556., 23620., 25300., 27044., 28852., 26532., 28340.,
      30212., 32148., 15170., 16138., 17138., 18170., 14274., 15242., 16242.,
      17274., 19684., 21236., 22852., 24532., 7876.,  9044.,  10276., 11572.,
      10788., 12084., 13444., 14868., 13700., 15124., 16612., 18164., 8370.,
      9146.,  9954.,  10794., 3317.,  3657.,  4013.,  4385.,  7962.,  8706.,
      9482.,  10290., 9674.,  10482., 11322., 12194., 11386., 12258., 13162.,
      14098., 13098., 14034., 15002., 16002., 7533.,  8033.,  8549.,  9081.,
      197.,   473.,   765.,   1073.,  1466.,  2082.,  2730.,  3410.,  3690.,
      4370.,  5082.,  5826.,  5914.,  6658.,  7434.,  8242.,  8138.,  8946.,
      9786.,  10658., 4925.,  5361.,  5813.,  6281.,  5682.,  6458.,  7266.,
      8106.,  14404., 16084., 17828., 19636., 19364., 21172., 23044., 24980.,
      24324., 26260., 28260., 30324., 29284., 31348., 33476., 35668., 16802.,
      17898., 19026., 20186., 17442., 18538., 19666., 20826., 39204., 41524.,
      43908., 46356., 44164., 46612., 49124., 51700., 49124., 51700., 54340.,
      57044., 54084., 56788., 59556., 62388., 29842., 31258., 32706., 34186.,
      29202., 30618., 32066., 33546., 47236., 49684., 52196., 54772., 33380.,
      35444., 37572., 39764., 38340., 40532., 42788., 45108., 43300., 45620.,
      48004., 50452., 24066., 25290., 26546., 27834., 24194., 25418., 26674.,
      27962., 32356., 34420., 36548., 38740., 14404., 16084., 17828., 19636.,
      19364., 21172., 23044., 24980., 24324., 26260., 28260., 30324., 14194.,
      15226., 16290., 17386., 5461.,  5929.,  6413.,  6913.,  12762., 13762.,
      14794., 15858., 15498., 16562., 17658., 18786., 18234., 19362., 20522.,
      21714., 20970., 22162., 23386., 24642., 11725., 12353., 12997., 13657.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2908.,  4476.,  6300.,  8380.,  11576., 15736.,
      20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720.,
      21880., 4792.,  7928.,  11576., 15736., 6300.,  8380.,  10716., 13308.,
      5276.,  7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936.,
      14072., 17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 7004.,  8572.,  10396.,
      12476., 10936., 14072., 17720., 21880., 4792.,  7928.,  11576., 15736.,
      11576., 15736., 20408., 25592., 17720., 21880., 26552., 31736., 10396.,
      12476., 14812., 17404., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,
      6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900.,
      23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2908.,  4476.,  6300.,  8380.,  11576., 15736.,
      20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720.,
      21880., 4792.,  7928.,  11576., 15736., 6300.,  8380.,  10716., 13308.,
      5276.,  7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936.,
      14072., 17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 7004.,  8572.,  10396.,
      12476., 10936., 14072., 17720., 21880., 4792.,  7928.,  11576., 15736.,
      11576., 15736., 20408., 25592., 17720., 21880., 26552., 31736., 10396.,
      12476., 14812., 17404., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,
      6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900.,
      23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2908.,  4476.,  6300.,  8380.,  11576., 15736.,
      20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720.,
      21880., 4792.,  7928.,  11576., 15736., 6300.,  8380.,  10716., 13308.,
      5276.,  7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936.,
      14072., 17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 7004.,  8572.,  10396.,
      12476., 10936., 14072., 17720., 21880., 4792.,  7928.,  11576., 15736.,
      11576., 15736., 20408., 25592., 17720., 21880., 26552., 31736., 10396.,
      12476., 14812., 17404., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,
      6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900.,
      23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,   560.,   820.,   940.,   1060.,  980.,   837.,   892.,   1360.,
      1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,
      4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,
      4610.,  4078.,  5760.,  7610.,  7920.,  8230.,  6960.,  5506.,  4374.,
      6110.,  7990.,  8260.,  8530.,  7142.,  5598.,  2997.,  4340.,  5860.,
      5980.,  6100.,  5264.,  4239.,  5680.,  8080.,  10740., 10950., 11160.,
      9488.,  7540.,  9380.,  13200., 17375., 17700., 18025., 15180., 11960.,
      10640., 14950., 19650., 19975., 20300., 17070., 13430., 11386., 15840.,
      20630., 20940., 21250., 17712., 13822., 10800., 14930., 19330., 19600.,
      19870., 16466., 12780., 5643.,  8120.,  10900., 11020., 11140., 9548.,
      7641.,  10468., 14800., 19560., 19770., 19980., 16880., 13336., 16940.,
      23700., 31025., 31350., 31675., 26520., 20780., 18200., 25450., 33300.,
      33625., 33950., 28410., 22250., 18694., 25920., 33650., 33960., 34270.,
      28464., 22138., 17226., 23750., 30670., 30940., 31210., 25790., 19962.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,
      89.,   110.,  96.,   60.,   35.,   92.,   173.,  194.,  215.,  176.,
      105.,  60.,   152.,  278.,  299.,  320.,  256.,  150.,  85.,   212.,
      383.,  404.,  425.,  336.,  195.,  84.,   193.,  328.,  343.,  358.,
      269.,  150.,  7.,    22.,   46.,   70.,   94.,   76.,   45.,   52.,
      128.,  230.,  287.,  344.,  264.,  150.,  137.,  308.,  515.,  572.,
      629.,  464.,  255.,  222.,  488.,  800.,  857.,  914.,  664.,  360.,
      307.,  668.,  1085., 1142., 1199., 864.,  465.,  210.,  451.,  724.,
      757.,  790.,  563.,  300.,  13.,   40.,   82.,   124.,  166.,  130.,
      75.,   94.,   224.,  392.,  485.,  578.,  432.,  240.,  239.,  524.,
      857.,  950.,  1043., 752.,  405.,  384.,  824.,  1322., 1415., 1508.,
      1072., 570.,  529.,  1124., 1787., 1880., 1973., 1392., 735.,  336.,
      709.,  1120., 1171., 1222., 857.,  450.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,  10160.,
      14420., 16060., 17700., 15920., 13292., 13735., 20460., 28133., 30235.,
      32081., 27308., 21235., 22261., 31876., 41183., 42005., 42571., 34980.,
      26065., 26468., 37328., 46508., 45940., 45116., 35984., 25652., 25131.,
      35196., 42113., 39955., 37541., 28700., 18879., 7389.,  11044., 15335.,
      16265., 17195., 15268., 12609., 14860., 21296., 28516., 28940., 30580.,
      26352., 21212., 23291., 32572., 42881., 42935., 45485., 38844., 31015.,
      25417., 35028., 45691., 44465., 47015., 40116., 32005., 22804., 30800.,
      39676., 37060., 39500., 33680., 26852., 13447., 17388., 21941., 17735.,
      19865., 17356., 14139., 10905., 15700., 21115., 20573., 19775., 16148.,
      11805., 17852., 25392., 33780., 32668., 31300., 25392., 18508., 26383.,
      37388., 49565., 48083., 46345., 37644., 27611., 23389., 33444., 44695.,
      41933., 38915., 31236., 22201., 15236., 22096., 29900., 32340., 34780.,
      30032., 24212., 19683., 27868., 36905., 39035., 41165., 34876., 27639.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,   101.,  143.,  150.,  105.,   58.,    204.,
      454.,   610.,   766.,  684.,  434.,  238.,  644.,   1234.,  1390.,
      1546.,  1284.,  774.,  418.,  1084., 2014., 2170.,  2326.,  1884.,
      1114.,  598.,   1524., 2794., 2950., 3106., 2484.,  1454.,  623.,
      1442.,  2465.,  2579., 2693., 2034., 1139., 41.,    142.,   311.,
      497.,   683.,   558.,  333.,  370.,  924.,  1678.,  2122.,  2566.,
      1980.,  1130.,  1030., 2324., 3898., 4342., 4786.,  3540.,  1950.,
      1690.,  3724.,  6118., 6562., 7006., 5100., 2770.,  2350.,  5124.,
      8338.,  8782.,  9226., 6660., 3590., 1619., 3482.,  5597.,  5855.,
      6113.,  4362.,  2327., 77.,   262.,  563.,  893.,   1223.,  966.,
      561.,   682.,   1644., 2902., 3634., 4366., 3276.,  1826.,  1822.,
      4004.,  6562.,  7294., 8026., 5796., 3126., 2962.,  6364.,  10222.,
      10954., 11686., 8316., 4426., 4102., 8724., 13882., 14614., 15346.,
      10836., 5726.,  2615., 5522., 8729., 9131., 9533.,  6690.,  3515.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776., 14048.,
      15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134.,
      23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536.,
      13354., 19912., 22816., 26424., 22488., 20600., 12000., 8328.,  14102.,
      18984., 18474., 17538., 15066., 11560., 7558.,  6030.,  9480.,  13874.,
      17610., 20002., 18184., 14142., 7784.,  12192., 17688., 20088., 20952.,
      20128., 17000., 13410., 16312., 23454., 27142., 28782., 23672., 19186.,
      15498., 18648., 22134., 23454., 27142., 21528., 18714., 15432., 17760.,
      20600., 17496., 19320., 15904., 13832., 9766.,  13992., 15066., 15154.,
      14538., 9768.,  9238.,  10590., 15304., 20002., 19002., 16658., 11144.,
      7118.,  12264., 17760., 20952., 24056., 23256., 17760., 10472., 15314.,
      23352., 28782., 28374., 29694., 23416., 18146., 12666., 19928., 27142.,
      28782., 28374., 24984., 18314., 11464., 13344., 19320., 24024., 27192.,
      21472., 16776., 6838.,  10536., 14538., 15266., 19386., 16104., 14310.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,   1432.,
      3284.,  4484.,  5684.,  5144.,  3292.,  1740.,  4792.,  9284.,  10484.,
      11684., 9784.,  5932.,  3100.,  7512.,  12980., 11492., 12692., 10072.,
      5884.,  3820.,  5496.,  7844.,  3284.,  4484.,  4216.,  2764.,  1078.,
      2684.,  4882.,  5770.,  6658.,  5308.,  3110.,  270.,   1004.,  2266.,
      3730.,  5194.,  4268.,  2558.,  2780.,  7000.,  12788., 16292., 19796.,
      15320., 8764.,  7980.,  18040., 30308., 33812., 37316., 27640., 15244.,
      13180., 22296., 33236., 27908., 31412., 23320., 12892., 11596., 15672.,
      21188., 12788., 16292., 12856., 7468.,  2854.,  6620.,  11362., 13402.,
      15442., 11548., 6422.,  510.,   1868.,  4138.,  6754.,  9370.,  7436.,
      4334.,  5180.,  11928., 19988., 23748., 27508., 17048., 9500.,  14220.,
      25528., 38788., 42548., 46308., 26808., 14700., 23260., 26200., 30708.,
      19492., 23252., 7640.,  4924.,  19372., 9848.,  17892., 19988., 23748.,
      15096., 8460.,  4630.,  5820.,  7346.,  8490.,  9634.,  1148.,  902.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 15340., 16312., 21712., 23040., 28740., 30440., 29940.,
      31680., 31140., 32920., 26384., 27840., 20908., 22024., 16659., 17496.,
      23300., 24440., 30505., 31960., 31555., 33040., 32605., 34120., 27332.,
      28568., 21447., 22392., 10953., 11988., 15956., 17360., 21655., 23440.,
      22105., 23920., 22555., 24400., 19556., 21056., 15813., 16956., 20684.,
      21952., 29104., 30784., 38292., 40400., 37940., 39960., 38740., 40800.,
      32688., 34368., 25804., 27088., 31211., 32656., 42940., 44864., 55557.,
      57980., 54375., 56720., 55625., 58020., 46476., 48432., 36359., 37856.,
      28489., 29760., 38652., 40344., 49587., 51720., 47125., 49180., 48375.,
      50480., 40444., 42168., 31661., 32984., 21548., 22504., 28560., 29824.,
      36132., 37720., 32340., 33840., 33540., 35080., 28112., 29376., 22060.,
      23032., 9351.,  9920.,  11364., 12104., 13677., 14600., 8455.,  9280.,
      9505.,  10360., 8324.,  9032.,  6795.,  7344.,  5805.,  6444.,  8564.,
      9440.,  11755., 12880., 12205., 13360., 12655., 13840., 11108., 12080.,
      9081.,  9828.,  11692., 12688., 16880., 18240., 22740., 24480., 23540.,
      25320., 24340., 26160., 20976., 22464., 16876., 18016., 20255., 21680.,
      28860., 30800., 38425., 40900., 39675., 42200., 40925., 43500., 34860.,
      36960., 27755., 29360., 25085., 26720., 35580., 37800., 47175., 50000.,
      48425., 51300., 49675., 52600., 42140., 44520., 33425., 35240., 28780.,
      30232., 40272., 42240., 52740., 55240., 53940., 56480., 55140., 57720.,
      46224., 48320., 36268., 37864., 28539., 29736., 39620., 41240., 51505.,
      53560., 52555., 54640., 53605., 55720., 44612., 46328., 34767., 36072.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      62.,   88.,   45.,   60.,   18.,   40.,   76.,   128.,  182.,  272.,
      254.,  356.,  326.,  440.,  300.,  384.,  194.,  240.,  98.,   140.,
      276.,  368.,  542.,  692.,  614.,  776.,  686.,  860.,  580.,  704.,
      354.,  420.,  178.,  240.,  476.,  608.,  902.,  1112., 974.,  1196.,
      1046., 1280., 860.,  1024., 514.,  600.,  258.,  340.,  676.,  848.,
      1262., 1532., 1334., 1616., 1406., 1700., 1140., 1344., 674.,  780.,
      287.,  336.,  670.,  772.,  1153., 1312., 1207., 1372., 1261., 1432.,
      958.,  1076., 539.,  600.,  13.,   28.,   54.,   88.,   127.,  184.,
      217.,  280.,  307.,  376.,  254.,  304.,  153.,  180.,  162.,  208.,
      412.,  512.,  758.,  920.,  974.,  1148., 1190., 1376., 924.,  1056.,
      530.,  600.,  482.,  548.,  1092., 1232., 1838., 2060., 2054., 2288.,
      2270., 2516., 1684., 1856., 930.,  1020., 802.,  888.,  1772., 1952.,
      2918., 3200., 3134., 3428., 3350., 3656., 2444., 2656., 1330., 1440.,
      1122., 1228., 2452., 2672., 3998., 4340., 4214., 4568., 4430., 4796.,
      3204., 3456., 1730., 1860., 779.,  840.,  1678., 1804., 2701., 2896.,
      2827., 3028., 2953., 3160., 2110., 2252., 1127., 1200., 25.,   52.,
      102.,  160.,  235.,  328.,  397.,  496.,  559.,  664.,  446.,  520.,
      261.,  300.,  306.,  376.,  748.,  896.,  1334., 1568., 1694., 1940.,
      2054., 2312., 1548., 1728., 866.,  960.,  866.,  956.,  1908., 2096.,
      3134., 3428., 3494., 3800., 3854., 4172., 2788., 3008., 1506., 1620.,
      1426., 1536., 3068., 3296., 4934., 5288., 5294., 5660., 5654., 6032.,
      4028., 4288., 2146., 2280., 1986., 2116., 4228., 4496., 6734., 7148.,
      7094., 7520., 7454., 7892., 5268., 5568., 2786., 2940., 1271., 1344.,
      2686., 2836., 4249., 4480., 4447., 4684., 4645., 4888., 3262., 3428.,
      1715., 1800.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 26732., 29852., 36752., 40912., 43092., 48164., 38404.,
      43284., 32692., 37380., 21008., 24656., 13004., 15740., 15721., 18029.,
      21532., 24716., 20887., 24787., 24427., 28311., 27455., 31323., 23132.,
      26060., 18225., 20373., 14925., 17025., 22476., 25468., 31475., 35455.,
      35015., 39235., 33243., 37447., 28876., 32380., 22677., 25385., 16092.,
      18764., 22544., 26192., 30500., 35252., 32532., 37348., 28932., 33812.,
      26832., 30736., 22908., 25964., 22587., 25895., 32660., 37220., 44677.,
      50649., 45169., 51285., 48221., 54481., 40084., 45156., 33139., 37119.,
      19719., 23171., 26788., 31284., 35385., 41085., 32101., 37689., 35665.,
      41397., 25508., 30004., 22783., 26395., 22860., 26108., 31632., 35792.,
      41780., 46980., 41188., 46196., 41812., 46884., 31440., 35344., 26732.,
      29852., 23521., 25989., 26940., 29996., 31199., 34939., 24307., 27775.,
      21191., 24643., 8636.,  11180., 8553.,  10605., 13701., 15705., 20716.,
      23580., 29115., 32935., 29903., 33707., 30179., 33967., 25644., 28764.,
      19341., 21697., 20156., 22956., 29392., 33296., 40388., 45524., 39348.,
      44548., 37796., 43060., 27536., 31696., 20316., 23500., 19971., 23119.,
      28340., 32772., 38717., 44593., 36137., 42157., 41237., 47401., 37044.,
      41988., 30907., 34727., 21711., 25003., 32388., 37012., 45169., 51285.,
      48221., 54481., 50761., 57165., 40964., 46100., 32711., 36675., 14316.,
      16924., 20496., 24144., 28308., 33124., 33220., 38356., 38132., 43588.,
      28752., 33168., 25100., 28604., 15577., 17693., 23132., 26060., 31975.,
      35811., 35707., 39783., 39439., 43755., 32476., 35916., 27105., 29829.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,   516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244.,  2900.,  1466.,
      1826.,  706.,   1034.,  2036.,  2756.,  4054.,  5230.,  4606.,  5878.,
      5158.,  6526.,  4404.,  5380.,  2706.,  3226.,  1306.,  1794.,  3556.,
      4596.,  6814.,  8470.,  7366.,  9118.,  7918.,  9766.,  6564.,  7860.,
      3946.,  4626.,  1906.,  2554.,  5076.,  6436.,  9574.,  11710., 10126.,
      12358., 10678., 13006., 8724.,  10340., 5186.,  6026.,  2201.,  2589.,
      5162.,  5970.,  8915.,  10175., 9335.,  10643., 9755.,  11111., 7434.,
      8370.,  4193.,  4677.,  77.,    193.,   370.,   634.,   911.,   1355.,
      1619.,  2111.,  2327.,  2867.,  1938.,  2330.,  1173.,  1385.,  1210.,
      1570.,  3108.,  3892.,  5758.,  7030.,  7462.,  8830.,  9166.,  10630.,
      7140.,  8180.,  4106.,  4658.,  3730.,  4250.,  8468.,  9572.,  14278.,
      16030., 15982., 17830., 17686., 19630., 13140., 14500., 7266.,  7978.,
      6250.,  6930.,  13828., 15252., 22798., 25030., 24502., 26830., 26206.,
      28630., 19140., 20820., 10426., 11298., 8770.,  9610.,  19188., 20932.,
      31318., 34030., 33022., 35830., 34726., 37630., 25140., 27140., 13586.,
      14618., 6113.,  6597.,  13178., 14178., 21227., 22775., 22223., 23819.,
      23219., 24863., 16602., 17730., 8873.,  9453.,  149.,   361.,   706.,
      1162.,  1703.,  2435.,  2987.,  3767.,  4271.,  5099.,  3426.,  4010.,
      2013.,  2321.,  2314.,  2866.,  5700.,  6868.,  10222., 12070., 13078.,
      15022., 15934., 17974., 12036., 13460., 6746.,  7490.,  6754.,  7466.,
      14900., 16388., 24502., 26830., 27358., 29782., 30214., 32734., 21876.,
      23620., 11826., 12730., 11194., 12066., 24100., 25908., 38782., 41590.,
      41638., 44542., 44494., 47494., 31716., 33780., 16906., 17970., 15634.,
      16666., 33300., 35428., 53062., 56350., 55918., 59302., 58774., 62254.,
      41556., 43940., 21986., 23210., 10025., 10605., 21194., 22386., 33539.,
      35375., 35111., 36995., 36683., 38615., 25770., 27090., 13553., 14229.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 11944., 18280., 12512., 20960., 17176., 27736., 15640.,
      26200., 19224., 29784., 12512., 20960., 9896.,  16232., 5342.,  9838.,
      10920., 17256., 12754., 20674., 12418., 20210., 11378., 19554., 10920.,
      17256., 8062.,  12814., 7630.,  12510., 8360.,  14696., 12770., 20306.,
      13266., 21186., 12418., 20210., 8360.,  14696., 8494.,  13118., 9384.,
      15720., 14560., 23008., 15640., 26200., 19224., 29784., 15640., 26200.,
      14560., 23008., 9384.,  15720., 14466., 22258., 16664., 27224., 21006.,
      34078., 18014., 31214., 22894., 35710., 16664., 27224., 13090., 21138.,
      11218., 19138., 18200., 28760., 19902., 32846., 21006., 34078., 18014.,
      31214., 18200., 28760., 13426., 21602., 9896.,  16232., 12512., 20960.,
      19224., 29784., 15640., 26200., 17176., 27736., 12512., 20960., 11944.,
      18280., 7550.,  12302., 10920., 17256., 11378., 19554., 15138., 23186.,
      12754., 20674., 10920., 17256., 7198.,  12206., 8494.,  13118., 10408.,
      16744., 12418., 20210., 9522.,  17186., 12770., 20306., 10408., 16744.,
      6286.,  10654., 9384.,  15720., 14560., 23008., 15640., 26200., 17176.,
      27736., 15640., 26200., 14560., 23008., 9384.,  15720., 10722., 18258.,
      14616., 25176., 22894., 35710., 19902., 32846., 21006., 34078., 14616.,
      25176., 14466., 22258., 11570., 19234., 18200., 28760., 18014., 31214.,
      22894., 35710., 19902., 32846., 18200., 28760., 10706., 18626., 11944.,
      18280., 12512., 20960., 17176., 27736., 15640., 26200., 19224., 29784.,
      12512., 20960., 9896.,  16232., 5342.,  9838.,  10920., 17256., 12754.,
      20674., 12418., 20210., 11378., 19554., 10920., 17256., 8062.,  12814.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3420.,  4988.,  2558.,  3470.,  700.,   2012.,  3768.,  6904.,
      9716.,  15188., 13396., 18612., 15028., 19988., 9912.,  13048., 6652.,
      8476.,  4700.,  6268.,  12280., 15928., 23252., 29492., 20788., 26772.,
      16276., 22004., 7160.,  10808., 5532.,  7612.,  2556.,  4380.,  7864.,
      11000., 15028., 19988., 14612., 19316., 18932., 24404., 16696., 20856.,
      10556., 12892., 6556.,  8636.,  10232., 13880., 16276., 22004., 9716.,
      15188., 13396., 18612., 11256., 14904., 4700.,  6268.,  3662.,  4702.,
      9276.,  11612., 17098., 20986., 20410., 24682., 16938., 20570., 10300.,
      12636., 430.,   1214.,  510.,   1422.,  2716.,  4796.,  6234.,  8714.,
      9802.,  12666., 13370., 16618., 8348.,  10428., 350.,   1006.,  8700.,
      10524., 20792., 24952., 25908., 31892., 18324., 24052., 8692.,  14164.,
      7864.,  11000., 3772.,  5084.,  5532.,  7612.,  14968., 19640., 24084.,
      30836., 26740., 33236., 27348., 33588., 13304., 16952., 1628.,  3196.,
      12604., 14940., 16696., 20856., 8692.,  14164., 13396., 18612., 18740.,
      24724., 14648., 18808., 5628.,  7452.,  9436.,  12028., 21112., 25784.,
      27348., 33588., 25908., 31892., 18324., 24052., 5112.,  8760.,  2844.,
      3900.,  1454.,  2238.,  4348.,  6172.,  8938.,  12058., 10714., 14218.,
      9802.,  12666., 6396.,  8220.,  270.,   798.,   350.,   1006.,  1884.,
      3452.,  4858.,  7594.,  8938.,  12058., 13018., 16522., 11228., 13820.,
      6974.,  8398.,  6460.,  8796.,  16696., 20856., 29812., 36308., 27348.,
      33588., 22836., 28820., 3768.,  6904.,  3580.,  5404.,  12508., 15100.,
      19064., 23736., 29012., 36276., 20404., 27412., 26132., 32884., 17400.,
      21048., 10652., 12732., 12412., 15260., 16696., 20856., 22836., 28820.,
      16276., 22004., 22644., 29140., 10552., 14712., 7484.,  9820.,  18460.,
      21564., 12920., 17592., 26132., 32884., 29812., 36308., 27348., 33588.,
      13304., 16952., 1628.,  3196.,  8078.,  9630.,  10300., 12636., 13706.,
      17082., 15994., 19754., 3306.,  6426.,  2492.,  3804.,  110.,   382.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 12988., 13744., 14524., 15328., 17872.,
      18880., 19920., 20992., 20932., 22160., 23428., 24736., 18612., 19792.,
      21012., 22272., 15780., 16912., 18084., 19296., 10064., 10944., 11856.,
      12800., 6172.,  6832.,  7516.,  8224.,  7581.,  8140.,  8717.,  9312.,
      10380., 11152., 11948., 12768., 9971.,  10916., 11891., 12896., 11743.,
      12684., 13655., 14656., 13259., 14196., 15163., 16160., 11212., 11920.,
      12652., 13408., 8853.,  9372.,  9909.,  10464., 7209.,  7716.,  8241.,
      8784.,  10876., 11600., 12348., 13120., 15255., 16220., 17215., 18240.,
      16995., 18020., 19075., 20160., 16111., 17132., 18183., 19264., 14012.,
      14864., 15740., 16640., 11009., 11668., 12345., 13040., 7724.,  8368.,
      9036.,  9728.,  10832., 11712., 12624., 13568., 14676., 15824., 17012.,
      18240., 15684., 16848., 18052., 19296., 13876., 15056., 16276., 17536.,
      12944., 13888., 14864., 15872., 11084., 11824., 12588., 13376., 10895.,
      11692., 12519., 13376., 15780., 16880., 18020., 19200., 21617., 23060.,
      24553., 26096., 21845., 23324., 24853., 26432., 23353., 24868., 26433.,
      28048., 19428., 20656., 21924., 23232., 16087., 17052., 18047., 19072.,
      9443.,  10276., 11139., 12032., 12852., 13936., 15060., 16224., 17005.,
      18380., 19805., 21280., 15377., 16724., 18121., 19568., 17141., 18524.,
      19957., 21440., 12212., 13296., 14420., 15584., 10955., 11828., 12731.,
      13664., 11036., 11824., 12636., 13472., 15312., 16320., 17360., 18432.,
      20260., 21520., 22820., 24160., 19988., 21200., 22452., 23744., 20292.,
      21520., 22788., 24096., 15248., 16192., 17168., 18176., 12988., 13744.,
      14524., 15328., 11461., 12060., 12677., 13312., 13100., 13840., 14604.,
      15392., 15147., 16052., 16987., 17952., 11735., 12572., 13439., 14336.,
      10179., 11012., 11875., 12768., 4012.,  4624.,  5260.,  5920.,  4029.,
      4524.,  5037.,  5568.,  6609.,  7092.,  7593.,  8112.,  10012., 10704.,
      11420., 12160., 14095., 15020., 15975., 16960., 14491., 15412., 16363.,
      17344., 14631., 15548., 16495., 17472., 12444., 13200., 13980., 14784.,
      9385.,  9956.,  10545., 11152., 9740.,  10416., 11116., 11840., 14224.,
      15168., 16144., 17152., 19572., 20816., 22100., 23424., 19044., 20304.,
      21604., 22944., 18260., 19536., 20852., 22208., 13264., 14272., 15312.,
      16384., 9772.,  10544., 11340., 12160., 9607.,  10364., 11151., 11968.,
      13636., 14704., 15812., 16960., 18649., 20068., 21537., 23056., 17341.,
      18796., 20301., 21856., 19873., 21364., 22905., 24496., 17924., 19120.,
      20356., 21632., 14991., 15916., 16871., 17856., 10459., 11252., 12075.,
      12928., 15636., 16752., 17908., 19104., 21845., 23324., 24853., 26432.,
      23353., 24868., 26433., 28048., 24605., 26156., 27757., 29408., 19860.,
      21104., 22388., 23712., 15875., 16836., 17827., 18848., 6844.,  7472.,
      8124.,  8800.,  9808.,  10688., 11600., 12544., 13572., 14736., 15940.,
      17184., 15988., 17232., 18516., 19840., 18404., 19728., 21092., 22496.,
      13840., 14912., 16016., 17152., 12124., 12976., 13852., 14752., 7533.,
      8044.,  8573.,  9120.,  11212., 11920., 12652., 13408., 15523., 16452.,
      17411., 18400., 17359., 18348., 19367., 20416., 19195., 20244., 21323.,
      22432., 15820., 16656., 17516., 18400., 13221., 13884., 14565., 15264.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   202.,   248.,   298.,   352.,   153.,   180.,   209.,
      240.,   34.,    72.,    114.,   160.,   212.,   304.,   404.,   512.,
      566.,   728.,   902.,   1088.,  830.,   1016.,  1214.,  1424.,  1094.,
      1304.,  1526.,  1760.,  1044.,  1200.,  1364.,  1536.,  690.,   776.,
      866.,   960.,   314.,   392.,   474.,   560.,   932.,   1104.,  1284.,
      1472.,  1886.,  2168.,  2462.,  2768.,  2150.,  2456.,  2774.,  3104.,
      2414.,  2744.,  3086.,  3440.,  2084.,  2320.,  2564.,  2816.,  1290.,
      1416.,  1546.,  1680.,  594.,   712.,   834.,   960.,   1652.,  1904.,
      2164.,  2432.,  3206.,  3608.,  4022.,  4448.,  3470.,  3896.,  4334.,
      4784.,  3734.,  4184.,  4646.,  5120.,  3124.,  3440.,  3764.,  4096.,
      1890.,  2056.,  2226.,  2400.,  874.,   1032.,  1194.,  1360.,  2372.,
      2704.,  3044.,  3392.,  4526.,  5048.,  5582.,  6128.,  4790.,  5336.,
      5894.,  6464.,  5054.,  5624.,  6206.,  6800.,  4164.,  4560.,  4964.,
      5376.,  2490.,  2696.,  2906.,  3120.,  1053.,  1148.,  1245.,  1344.,
      2482.,  2680.,  2882.,  3088.,  4303.,  4612.,  4927.,  5248.,  4507.,
      4828.,  5155.,  5488.,  4711.,  5044.,  5383.,  5728.,  3602.,  3832.,
      4066.,  4304.,  2037.,  2156.,  2277.,  2400.,  25.,    52.,    81.,
      112.,   154.,   216.,   282.,   352.,   403.,   508.,   619.,   736.,
      751.,   868.,   991.,   1120.,  1099.,  1228.,  1363.,  1504.,  922.,
      1016.,  1114.,  1216.,  561.,   612.,   665.,   720.,   562.,   648.,
      738.,   832.,   1460.,  1648.,  1844.,  2048.,  2726.,  3032.,  3350.,
      3680.,  3566.,  3896.,  4238.,  4592.,  4406.,  4760.,  5126.,  5504.,
      3444.,  3696.,  3956.,  4224.,  1986.,  2120.,  2258.,  2400.,  1802.,
      1928.,  2058.,  2192.,  4100.,  4368.,  4644.,  4928.,  6926.,  7352.,
      7790.,  8240.,  7766.,  8216.,  8678.,  9152.,  8606.,  9080.,  9566.,
      10064., 6404.,  6736.,  7076.,  7424.,  3546.,  3720.,  3898.,  4080.,
      3042.,  3208.,  3378.,  3552.,  6740.,  7088.,  7444.,  7808.,  11126.,
      11672., 12230., 12800., 11966., 12536., 13118., 13712., 12806., 13400.,
      14006., 14624., 9364.,  9776.,  10196., 10624., 5106.,  5320.,  5538.,
      5760.,  4282.,  4488.,  4698.,  4912.,  9380.,  9808.,  10244., 10688.,
      15326., 15992., 16670., 17360., 16166., 16856., 17558., 18272., 17006.,
      17720., 18446., 19184., 12324., 12816., 13316., 13824., 6666.,  6920.,
      7178.,  7440.,  2997.,  3116.,  3237.,  3360.,  6466.,  6712.,  6962.,
      7216.,  10423., 10804., 11191., 11584., 10915., 11308., 11707., 12112.,
      11407., 11812., 12223., 12640., 8162.,  8440.,  8722.,  9008.,  4365.,
      4508.,  4653.,  4800.,  49.,    100.,   153.,   208.,   298.,   408.,
      522.,   640.,   763.,   940.,   1123.,  1312.,  1399.,  1588.,  1783.,
      1984.,  2035.,  2236.,  2443.,  2656.,  1642.,  1784.,  1930.,  2080.,
      969.,   1044.,  1121.,  1200.,  1090.,  1224.,  1362.,  1504.,  2708.,
      2992.,  3284.,  3584.,  4886.,  5336.,  5798.,  6272.,  6302.,  6776.,
      7262.,  7760.,  7718.,  8216.,  8726.,  9248.,  5844.,  6192.,  6548.,
      6912.,  3282.,  3464.,  3650.,  3840.,  3290.,  3464.,  3642.,  3824.,
      7268.,  7632.,  8004.,  8384.,  11966., 12536., 13118., 13712., 13382.,
      13976., 14582., 15200., 14798., 15416., 16046., 16688., 10724., 11152.,
      11588., 12032., 5802.,  6024.,  6250.,  6480.,  5490.,  5704.,  5922.,
      6144.,  11828., 12272., 12724., 13184., 19046., 19736., 20438., 21152.,
      20462., 21176., 21902., 22640., 21878., 22616., 23366., 24128., 15604.,
      16112., 16628., 17152., 8322.,  8584.,  8850.,  9120.,  7690.,  7944.,
      8202.,  8464.,  16388., 16912., 17444., 17984., 26126., 26936., 27758.,
      28592., 27542., 28376., 29222., 30080., 28958., 29816., 30686., 31568.,
      20484., 21072., 21668., 22272., 10842., 11144., 11450., 11760., 4941.,
      5084.,  5229.,  5376.,  10450., 10744., 11042., 11344., 16543., 16996.,
      17455., 17920., 17323., 17788., 18259., 18736., 18103., 18580., 19063.,
      19552., 12722., 13048., 13378., 13712., 6693.,  6860.,  7029.,  7200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,
      7063.,  9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,
      9091.,  11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,
      5945.,  3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108.,
      14068., 10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241.,
      9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,
      8087.,  10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260.,
      12900., 15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      4483.,  6223.,  8203.,  10423., 5276.,  6668.,  8252.,  10028., 5328.,
      7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 6660.,  8980.,
      11620., 14580., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,
      11664., 4252.,  5644.,  7228.,  9004.,  2181.,  3161.,  4285.,  5553.,
      4764.,  6156.,  7740.,  9516.,  5507.,  7247.,  9227.,  11447., 5355.,
      7063.,  9011.,  11199., 4787.,  6591.,  8635.,  10919., 4764.,  6156.,
      7740.,  9516.,  3509.,  4553.,  5741.,  7073.,  3277.,  4353.,  5573.,
      6937.,  3484.,  4876.,  6460.,  8236.,  5563.,  7207.,  9091.,  11215.,
      5763.,  7503.,  9483.,  11703., 5355.,  7063.,  9011.,  11199., 3484.,
      4876.,  6460.,  8236.,  3741.,  4753.,  5909.,  7209.,  3996.,  5388.,
      6972.,  8748.,  6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620.,
      14580., 8452.,  10772., 13412., 16372., 6660.,  8980.,  11620., 14580.,
      6352.,  8208.,  10320., 12688., 3996.,  5388.,  6972.,  8748.,  6379.,
      8087.,  10035., 12223., 7172.,  9492.,  12132., 15092., 9069.,  11937.,
      15205., 18873., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 7172.,  9492.,  12132., 15092., 5659.,  7431.,  9443.,  11695.,
      4739.,  6479.,  8459.,  10679., 7940.,  10260., 12900., 15860., 8533.,
      11369., 14605., 18241., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 7940.,  10260., 12900., 15860., 5811.,  7615.,  9659.,
      11943., 4252.,  5644.,  7228.,  9004.,  5328.,  7184.,  9296.,  11664.,
      8452.,  10772., 13412., 16372., 6660.,  8980.,  11620., 14580., 7428.,
      9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664., 5276.,  6668.,
      8252.,  10028., 3253.,  4297.,  5485.,  6817.,  4764.,  6156.,  7740.,
      9516.,  4787.,  6591.,  8635.,  10919., 6683.,  8455.,  10467., 12719.,
      5507.,  7247.,  9227.,  11447., 4764.,  6156.,  7740.,  9516.,  3045.,
      4153.,  5405.,  6801.,  3741.,  4753.,  5909.,  7209.,  4508.,  5900.,
      7484.,  9260.,  5355.,  7063.,  9011.,  11199., 3923.,  5599.,  7515.,
      9671.,  5563.,  7207.,  9091.,  11215., 4508.,  5900.,  7484.,  9260.,
      2669.,  3617.,  4709.,  5945.,  3996.,  5388.,  6972.,  8748.,  6352.,
      8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 7428.,  9748.,
      12388., 15348., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320.,
      12688., 3996.,  5388.,  6972.,  8748.,  4539.,  6183.,  8067.,  10191.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 8533.,
      11369., 14605., 18241., 9069.,  11937., 15205., 18873., 6148.,  8468.,
      11108., 14068., 6379.,  8087.,  10035., 12223., 4947.,  6623.,  8539.,
      10695., 7940.,  10260., 12900., 15860., 7557.,  10457., 13757., 17457.,
      10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241., 7940.,
      10260., 12900., 15860., 4483.,  6223.,  8203.,  10423., 5276.,  6668.,
      8252.,  10028., 5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388.,
      15348., 6660.,  8980.,  11620., 14580., 8452.,  10772., 13412., 16372.,
      5328.,  7184.,  9296.,  11664., 4252.,  5644.,  7228.,  9004.,  2181.,
      3161.,  4285.,  5553.,  4764.,  6156.,  7740.,  9516.,  5507.,  7247.,
      9227.,  11447., 5355.,  7063.,  9011.,  11199., 4787.,  6591.,  8635.,
      10919., 4764.,  6156.,  7740.,  9516.,  3509.,  4553.,  5741.,  7073.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6094.,  7302.,  8606.,  10006., 6942.,
      8086.,  9326.,  10662., 4596.,  5316.,  6100.,  6948.,  3114.,  3538.,
      3994.,  4482.,  2170.,  2530.,  2922.,  3346.,  5716.,  6564.,  7476.,
      8452.,  10894., 12358., 13918., 15574., 9694.,  11094., 12590., 14182.,
      7470.,  8806.,  10238., 11766., 3156.,  4004.,  4916.,  5892.,  2522.,
      3010.,  3530.,  4082.,  1066.,  1490.,  1946.,  2434.,  3572.,  4292.,
      5076.,  5924.,  6942.,  8086.,  9326.,  10662., 6766.,  7846.,  9022.,
      10294., 8830.,  10102., 11470., 12934., 7860.,  8836.,  9876.,  10980.,
      5002.,  5554.,  6138.,  6754.,  3034.,  3522.,  4042.,  4594.,  4692.,
      5540.,  6452.,  7428.,  7470.,  8806.,  10238., 11766., 4222.,  5494.,
      6862.,  8326.,  6094.,  7302.,  8606.,  10006., 5204.,  6052.,  6964.,
      7940.,  2170.,  2530.,  2922.,  3346.,  1709.,  1953.,  2213.,  2489.,
      4362.,  4914.,  5498.,  6114.,  8087.,  9011.,  9983.,  11003., 9695.,
      10715., 11783., 12899., 8039.,  8899.,  9807.,  10763., 4874.,  5426.,
      6010.,  6626.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,
      833.,   1114.,  1602.,  2122.,  2674.,  2831.,  3403.,  4023.,  4691.,
      4567.,  5235.,  5951.,  6715.,  6303.,  7067.,  7879.,  8739.,  3930.,
      4418.,  4938.,  5490.,  101.,   249.,   413.,   593.,   4138.,  4562.,
      5018.,  5506.,  9908.,  10884., 11924., 13028., 12254., 13654., 15150.,
      16742., 8494.,  9830.,  11262., 12790., 3710.,  4982.,  6350.,  7814.,
      3572.,  4292.,  5076.,  5924.,  1738.,  2034.,  2362.,  2722.,  2522.,
      3010.,  3530.,  4082.,  6932.,  8036.,  9204.,  10436., 11246., 12838.,
      14526., 16310., 12606., 14134., 15758., 17478., 12942., 14406., 15966.,
      17622., 6228.,  7076.,  7988.,  8964.,  634.,   994.,   1386.,  1810.,
      6026.,  6578.,  7162.,  7778.,  7860.,  8836.,  9876.,  10980., 3710.,
      4982.,  6350.,  7814.,  6094.,  7302.,  8606.,  10006., 8670.,  10070.,
      11566., 13158., 6836.,  7812.,  8852.,  9956.,  2602.,  3026.,  3482.,
      3970.,  4410.,  5026.,  5674.,  6354.,  10004., 11108., 12276., 13508.,
      12942., 14406., 15966., 17622., 12254., 13654., 15150., 16742., 8494.,
      9830.,  11262., 12790., 2132.,  2980.,  3892.,  4868.,  1306.,  1538.,
      1802.,  2098.,  637.,   817.,   1013.,  1225.,  1962.,  2386.,  2842.,
      3330.,  4103.,  4835.,  5615.,  6443.,  4943.,  5771.,  6647.,  7571.,
      4567.,  5235.,  5951.,  6715.,  2986.,  3410.,  3866.,  4354.,  77.,
      193.,   325.,   473.,   101.,   249.,   413.,   593.,   762.,   1122.,
      1514.,  1938.,  2111.,  2747.,  3431.,  4163.,  4103.,  4835.,  5615.,
      6443.,  6095.,  6923.,  7799.,  8723.,  5306.,  5922.,  6570.,  7250.,
      3317.,  3657.,  4013.,  4385.,  2954.,  3506.,  4090.,  4706.,  7860.,
      8836.,  9876.,  10980., 14142., 15670., 17294., 19014., 12942., 14406.,
      15966., 17622., 10718., 12118., 13614., 15206., 1524.,  2244.,  3028.,
      3876.,  1578.,  2002.,  2458.,  2946.,  5946.,  6562.,  7210.,  7890.,
      8980.,  10084., 11252., 12484., 13646., 15366., 17182., 19094., 9374.,
      11030., 12782., 14630., 12270., 13862., 15550., 17334., 8276.,  9124.,
      10036., 11012., 5082.,  5570.,  6090.,  6642.,  5866.,  6546.,  7258.,
      8002.,  7860.,  8836.,  9876.,  10980., 10718., 12118., 13614., 15206.,
      7470.,  8806.,  10238., 11766., 10558., 12086., 13710., 15430., 4788.,
      5764.,  6804.,  7908.,  3466.,  4018.,  4602.,  5218.,  8858.,  9602.,
      10378., 11186., 5908.,  7012.,  8180.,  9412.,  12270., 13862., 15550.,
      17334., 14142., 15670., 17294., 19014., 12942., 14406., 15966., 17622.,
      6228.,  7076.,  7988.,  8964.,  634.,   994.,   1386.,  1810.,  3853.,
      4225.,  4613.,  5017.,  4874.,  5426.,  6010.,  6626.,  6455.,  7251.,
      8095.,  8987.,  7551.,  8443.,  9383.,  10371., 1287.,  2019.,  2799.,
      3627.,  1098.,  1394.,  1722.,  2082.,  29.,    81.,    149.,   233.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 8424.,  13224., 19560., 27432., 3040.,
      9440.,  17888., 28384., 14040., 22040., 32600., 45720., 3800.,  11800.,
      22360., 35480., 14040., 22040., 32600., 45720., 3040.,  9440.,  17888.,
      28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966.,
      8424.,  13224., 19560., 27432., 2850.,  8850.,  16770., 26610., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 8424.,  13224.,
      19560., 27432., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 9858.,  15602., 23266., 32850.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 2280.,
      7080.,  13416., 21288., 5646.,  8990.,  13486., 19134., 2280.,  7080.,
      13416., 21288., 11232., 17632., 26080., 36576., 3800.,  11800., 22360.,
      35480., 14040., 22040., 32600., 45720., 3800.,  11800., 22360., 35480.,
      11232., 17632., 26080., 36576., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 3800.,  11800., 22360., 35480., 16878., 26622.,
      39566., 55710., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 3800.,  11800., 22360., 35480., 9858.,  15602., 23266., 32850.,
      2850.,  8850.,  16770., 26610., 14040., 22040., 32600., 45720., 4750.,
      14750., 27950., 44350., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 14040., 22040., 32600., 45720., 2850.,  8850.,  16770.,
      26610., 8424.,  13224., 19560., 27432., 3040.,  9440.,  17888., 28384.,
      14040., 22040., 32600., 45720., 3800.,  11800., 22360., 35480., 14040.,
      22040., 32600., 45720., 3040.,  9440.,  17888., 28384., 8424.,  13224.,
      19560., 27432., 1710.,  5310.,  10062., 15966., 8424.,  13224., 19560.,
      27432., 2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850.,
      2850.,  8850.,  16770., 26610., 8424.,  13224., 19560., 27432., 1710.,
      5310.,  10062., 15966., 5646.,  8990.,  13486., 19134., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770.,
      26610., 9858.,  15602., 23266., 32850., 2280.,  7080.,  13416., 21288.,
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 11232.,
      17632., 26080., 36576., 3800.,  11800., 22360., 35480., 14040., 22040.,
      32600., 45720., 3800.,  11800., 22360., 35480., 11232., 17632., 26080.,
      36576., 2280.,  7080.,  13416., 21288., 9858.,  15602., 23266., 32850.,
      3800.,  11800., 22360., 35480., 16878., 26622., 39566., 55710., 4750.,
      14750., 27950., 44350., 16878., 26622., 39566., 55710., 3800.,  11800.,
      22360., 35480., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770.,
      26610., 14040., 22040., 32600., 45720., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350., 14040.,
      22040., 32600., 45720., 2850.,  8850.,  16770., 26610., 8424.,  13224.,
      19560., 27432., 3040.,  9440.,  17888., 28384., 14040., 22040., 32600.,
      45720., 3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720.,
      3040.,  9440.,  17888., 28384., 8424.,  13224., 19560., 27432., 1710.,
      5310.,  10062., 15966., 8424.,  13224., 19560., 27432., 2850.,  8850.,
      16770., 26610., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770.,
      26610., 8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,
      2702.,  700.,   2012.,  3580.,  5404.,  5496.,  8120.,  11256., 14904.,
      12980., 17940., 23668., 30164., 20468., 25940., 32180., 39188., 10932.,
      15892., 21620., 28116., 5496.,  8120.,  11256., 14904., 2748.,  4060.,
      5628.,  7452.,  4092.,  5916.,  7996.,  10332., 10232., 13880., 18040.,
      22712., 20468., 25940., 32180., 39188., 10932., 15892., 21620., 28116.,
      9588.,  14036., 19252., 25236., 5496.,  8120.,  11256., 14904., 6140.,
      7964.,  10044., 12380., 7484.,  9820.,  12412., 15260., 14328., 17976.,
      22136., 26808., 10932., 15892., 21620., 28116., 9588.,  14036., 19252.,
      25236., 12980., 17940., 23668., 30164., 10232., 13880., 18040., 22712.,
      9532.,  11868., 14460., 17308., 10236., 12060., 14140., 16476., 1400.,
      4024.,  7160.,  10808., 9588.,  14036., 19252., 25236., 12980., 17940.,
      23668., 30164., 20468., 25940., 32180., 39188., 10232., 13880., 18040.,
      22712., 4092.,  5916.,  7996.,  10332., 510.,   1422.,  2462.,  3630.,
      3772.,  5084.,  6652.,  8476.,  7354.,  9578.,  12186., 15178., 11930.,
      14922., 18298., 22058., 3578.,  6314.,  9434.,  12938., 3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8538.,  11018., 13882., 17130.,
      14138., 17386., 21018., 25034., 10906., 13898., 17274., 21034., 1020.,
      2844.,  4924.,  7260.,  30.,    174.,   446.,   846.,   2748.,  4060.,
      5628.,  7452.,  10232., 13880., 18040., 22712., 19764., 25748., 32500.,
      40020., 23156., 29652., 36916., 44948., 17716., 23700., 30452., 37972.,
      14328., 17976., 22136., 26808., 700.,   2012.,  3580.,  5404.,  6140.,
      7964.,  10044., 12380., 19064., 23736., 28920., 34616., 23156., 29652.,
      36916., 44948., 17716., 23700., 30452., 37972., 20468., 25940., 32180.,
      39188., 10232., 13880., 18040., 22712., 4092.,  5916.,  7996.,  10332.,
      9532.,  11868., 14460., 17308., 19064., 23736., 28920., 34616., 17716.,
      23700., 30452., 37972., 20468., 25940., 32180., 39188., 19764., 25748.,
      32500., 40020., 19064., 23736., 28920., 34616., 7484.,  9820.,  12412.,
      15260., 4092.,  5916.,  7996.,  10332., 10232., 13880., 18040., 22712.,
      20468., 25940., 32180., 39188., 19764., 25748., 32500., 40020., 23156.,
      29652., 36916., 44948., 14968., 19640., 24824., 30520., 10236., 12060.,
      14140., 16476., 190.,   590.,   1118.,  1774.,  1724.,  3036.,  4604.,
      6428.,  5626.,  8362.,  11482., 14986., 12250., 15754., 19642., 23914.,
      14138., 17386., 21018., 25034., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  2074.,  4042.,  6394.,  9130.,  5626.,  8362.,  11482.,
      14986., 8538.,  11018., 13882., 17130., 7164.,  8988.,  11068., 13404.,
      350.,   1006.,  1790.,  2702.,  700.,   2012.,  3580.,  5404.,  5496.,
      8120.,  11256., 14904., 12980., 17940., 23668., 30164., 20468., 25940.,
      32180., 39188., 10932., 15892., 21620., 28116., 5496.,  8120.,  11256.,
      14904., 2748.,  4060.,  5628.,  7452.,  4092.,  5916.,  7996.,  10332.,
      10232., 13880., 18040., 22712., 20468., 25940., 32180., 39188., 10932.,
      15892., 21620., 28116., 9588.,  14036., 19252., 25236., 5496.,  8120.,
      11256., 14904., 6140.,  7964.,  10044., 12380., 7484.,  9820.,  12412.,
      15260., 14328., 17976., 22136., 26808., 10932., 15892., 21620., 28116.,
      9588.,  14036., 19252., 25236., 12980., 17940., 23668., 30164., 10232.,
      13880., 18040., 22712., 9532.,  11868., 14460., 17308., 10236., 12060.,
      14140., 16476., 1400.,  4024.,  7160.,  10808., 9588.,  14036., 19252.,
      25236., 12980., 17940., 23668., 30164., 20468., 25940., 32180., 39188.,
      10232., 13880., 18040., 22712., 4092.,  5916.,  7996.,  10332., 510.,
      1422.,  2462.,  3630.,  3772.,  5084.,  6652.,  8476.,  7354.,  9578.,
      12186., 15178., 11930., 14922., 18298., 22058., 3578.,  6314.,  9434.,
      12938., 3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,   610.,   890.,   1010.,  1130.,  1250.,  1144.,  969.,   988.,
      1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,
      4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,
      7050.,  7375.,  7700.,  6610.,  5300.,  4612.,  6500.,  8570.,  8880.,
      9190.,  9500.,  8012.,  6322.,  4956.,  6910.,  9020.,  9290.,  9560.,
      9830.,  8212.,  6423.,  3408.,  4930.,  6650.,  6770.,  6890.,  7010.,
      6040.,  4857.,  6460.,  9180.,  12190., 12400., 12610., 12820., 10884.,
      8638.,  10670., 15000., 19725., 20050., 20375., 20700., 17410., 13700.,
      12110., 17000., 22325., 22650., 22975., 23300., 19570., 15380., 12964.,
      18020., 23450., 23760., 24070., 24380., 20300., 15826., 12300., 16990.,
      21980., 22250., 22520., 22790., 18868., 14631., 6432.,  9250.,  12410.,
      12530., 12650., 12770., 10936., 8745.,  11932., 16860., 22270., 22480.,
      22690., 22900., 19332., 15262., 19310., 27000., 35325., 35650., 35975.,
      36300., 30370., 23780., 20750., 29000., 37925., 38250., 38575., 38900.,
      32530., 25460., 21316., 29540., 38330., 38640., 38950., 39260., 32588.,
      25330., 19644., 27070., 34940., 35210., 35480., 35750., 29524., 22839.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,
      74.,   130.,  166.,  161.,  133.,  80.,   41.,   105.,  194.,  310.,
      346.,  311.,  243.,  140.,  71.,   175.,  314.,  490.,  526.,  461.,
      353.,  200.,  101.,  245.,  434.,  670.,  706.,  611.,  463.,  260.,
      105.,  236.,  394.,  580.,  606.,  502.,  367.,  200.,  9.,    28.,
      58.,   100.,  142.,  130.,  103.,  60.,   67.,   163.,  290.,  450.,
      550.,  473.,  357.,  200.,  177.,  393.,  650.,  950.,  1050., 863.,
      627.,  340.,  287.,  623.,  1010., 1450., 1550., 1253., 897.,  480.,
      397.,  853.,  1370., 1950., 2050., 1643., 1167., 620.,  273.,  580.,
      922.,  1300., 1358., 1078., 759.,  400.,  17.,   52.,   106.,  180.,
      254.,  226.,  175.,  100.,  123.,  291.,  506.,  770.,  934.,  785.,
      581.,  320.,  313.,  681.,  1106., 1590., 1754., 1415., 1011., 540.,
      503.,  1071., 1706., 2410., 2574., 2045., 1441., 760.,  693.,  1461.,
      2306., 3230., 3394., 2675., 1871., 980.,  441.,  924.,  1450., 2020.,
      2110., 1654., 1151., 600.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,  7352.,
      11232., 15880., 17520., 19160., 20800., 18560., 15392., 14011., 20476.,
      27905., 30455., 33005., 35555., 30852., 24985., 20107., 28732., 38385.,
      40935., 43485., 46035., 39364., 31465., 21632., 30592., 40480., 42920.,
      45360., 47800., 40480., 32072., 16851., 23836., 31545., 33675., 35805.,
      37935., 32084., 25389., 9207.,  13292., 17925., 18855., 19785., 20715.,
      17956., 14529., 15032., 21472., 28680., 30320., 31960., 33600., 28800.,
      23072., 22363., 31868., 42465., 45015., 47565., 50115., 42756., 34105.,
      20779., 29884., 40145., 42695., 45245., 47795., 41028., 32905., 13952.,
      20352., 27680., 30120., 32560., 35000., 30240., 24392., 19443., 27548.,
      36505., 38635., 40765., 42895., 36308., 28749., 2775.,  4460.,  6565.,
      7495.,  8425.,  9355.,  8612.,  7329.,  7352.,  11232., 15880., 17520.,
      19160., 20800., 18560., 15392., 14011., 20476., 27905., 30455., 33005.,
      35555., 30852., 24985., 20107., 28732., 38385., 40935., 43485., 46035.,
      39364., 31465., 21632., 30592., 40480., 42920., 45360., 47800., 40480.,
      32072., 16851., 23836., 31545., 33675., 35805., 37935., 32084., 25389.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   233.,   218.,   143.,   64.,
      224.,   496.,   896.,   1168.,  1156.,  968.,   588.,   284.,   744.,
      1396.,  2256.,  2528.,  2296.,  1808.,  1048.,  504.,   1264.,  2296.,
      3616.,  3888.,  3436.,  2648.,  1508.,  724.,   1784.,  3196.,  4976.,
      5248.,  4576.,  3488.,  1968.,  789.,   1782.,  2987.,  4412.,  4612.,
      3833.,  2810.,  1535.,  53.,    182.,   395.,   700.,   1028.,  953.,
      762.,   447.,   480.,   1184.,  2128.,  3328.,  4112.,  3556.,  2696.,
      1516.,  1340.,  2984.,  4948.,  7248.,  8032.,  6616.,  4816.,  2616.,
      2200.,  4784.,  7768.,  11168., 11952., 9676.,  6936.,  3716.,  3060.,
      6584.,  10588., 15088., 15872., 12736., 9056.,  4816.,  2117.,  4502.,
      7163.,  10108., 10564., 8393.,  5914.,  3119.,  101.,   342.,   731.,
      1276.,  1860.,  1673.,  1306.,  751.,   896.,   2144.,  3760.,  5760.,
      7056.,  5956.,  4424.,  2444.,  2396.,  5224.,  8500.,  12240., 13536.,
      10936., 7824.,  4184.,  3896.,  8304.,  13240., 18720., 20016., 15916.,
      11224., 5924.,  5396.,  11384., 17980., 25200., 26496., 20896., 14624.,
      7664.,  3445.,  7222.,  11339., 15804., 16516., 12953., 9018.,  4703.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366.,  6056.,  9498.,  13234., 16970., 20706., 19528., 16126., 4792.,
      8224.,  12616., 17384., 22152., 26920., 22560., 19352., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246.,
      23622., 29998., 36374., 31064., 26058., 6040.,  10400., 15656., 21192.,
      26728., 32264., 26464., 21560., 4086.,  7144.,  11018., 15138., 19258.,
      23378., 19272., 16974., 3366.,  6056.,  9498.,  13234., 16970., 20706.,
      19528., 16126., 4792.,  8224.,  12616., 17384., 22152., 26920., 22560.,
      19352., 6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058., 6040.,
      10400., 15656., 21192., 26728., 32264., 26464., 21560., 4086.,  7144.,
      11018., 15138., 19258., 23378., 19272., 16974., 3366.,  6056.,  9498.,
      13234., 16970., 20706., 19528., 16126., 4792.,  8224.,  12616., 17384.,
      22152., 26920., 22560., 19352., 6434.,  11256., 17246., 23622., 29998.,
      36374., 31064., 26058., 6434.,  11256., 17246., 23622., 29998., 36374.,
      31064., 26058., 6040.,  10400., 15656., 21192., 26728., 32264., 26464.,
      21560., 4086.,  7144.,  11018., 15138., 19258., 23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,  420.,
      1576.,  3596.,  6608.,  8720.,  8732.,  7368.,  4500.,  2100.,  5576.,
      10556., 17168., 19280., 17612., 13928., 8100.,  3780.,  8936.,  15212.,
      22736., 21136., 18428., 14088., 7988.,  4820.,  6536.,  8988.,  12304.,
      6608.,  6956.,  6056.,  3780.,  1374.,  3340.,  5962.,  9304.,  10872.,
      9586.,  7388.,  4214.,  350.,   1292.,  2890.,  5208.,  7800.,  7282.,
      5852.,  3446.,  3620.,  9000.,  16268., 25552., 31760., 27548., 20936.,
      11796., 10420., 23240., 38588., 56592., 62800., 51788., 37736., 20516.,
      17220., 28648., 42220., 58064., 52368., 43388., 31752., 17332., 15188.,
      20104., 26780., 35344., 25552., 22700., 17576., 10052., 3742.,  8588.,
      14602., 21848., 25464., 21298., 15708., 8630.,  30.,    140.,   394.,
      856.,   1400.,  1714.,  1628.,  1078.,  420.,   1576.,  3596.,  6608.,
      8720.,  8732.,  7368.,  4500.,  2100.,  5576.,  10556., 17168., 19280.,
      17612., 13928., 8100.,  3780.,  8936.,  15212., 22736., 21136., 18428.,
      14088., 7988.,  4820.,  6536.,  8988.,  12304., 6608.,  6956.,  6056.,
      3780.,  1374.,  3340.,  5962.,  9304.,  10872., 9586.,  7388.,  4214.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 17392., 18448., 24560., 26000., 32440., 34280., 33640., 35520.,
      34840., 36760., 36040., 38000., 30448., 32048., 24064., 25288., 18915.,
      19824., 26404., 27640., 34505., 36080., 35555., 37160., 36605., 38240.,
      37655., 39320., 31492., 32848., 24657., 25692., 11319., 12096., 16100.,
      17160., 21405., 22760., 21855., 23240., 22305., 23720., 22755., 24200.,
      19396., 20576., 15453., 16356., 17992., 18928., 25200., 26480., 33040.,
      34680., 33840., 35520., 34640., 36360., 35440., 37200., 29808., 31248.,
      23464., 24568., 25379., 26552., 35356., 36960., 46125., 48180., 47375.,
      49480., 48625., 50780., 49875., 52080., 41724., 43528., 32681., 34064.,
      18227., 19256., 25628., 27040., 33725., 35540., 34975., 36840., 36225.,
      38140., 37475., 39440., 31612., 33224., 24953., 26192., 6640.,  7312.,
      9712.,  10640., 13240., 14440., 14440., 15680., 15640., 16920., 16840.,
      18160., 14576., 15664., 11776., 12616., 9411.,  10032., 13348., 14200.,
      17705., 18800., 18755., 19880., 19805., 20960., 20855., 22040., 17668.,
      18640., 14001., 14748., 8727.,  9600.,  12772., 13960., 17405., 18920.,
      17855., 19400., 18305., 19880., 18755., 20360., 16324., 17632., 13245.,
      14244., 17224., 18544., 24688., 26480., 33040., 35320., 33840., 36160.,
      34640., 37000., 35440., 37840., 30320., 32272., 24232., 25720., 28163.,
      29624., 39452., 41440., 51725., 54260., 52975., 55560., 54225., 56860.,
      55475., 58160., 46588., 48776., 36617., 38288., 28691., 30008., 39964.,
      41760., 52125., 54420., 53375., 55720., 54625., 57020., 55875., 58320.,
      46716., 48712., 36569., 38096., 25072., 26128., 34800., 36240., 45240.,
      47080., 46440., 48320., 47640., 49560., 48840., 50800., 40688., 42288.,
      31744., 32968., 16419., 17136., 22820., 23800., 29705., 30960., 30755.,
      32040., 31805., 33120., 32855., 34200., 27396., 28496., 21393., 22236.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,     6.,     16.,    19.,    40.,    44.,    80.,   76.,
      120.,  97.,    136.,   94.,    124.,   63.,    80.,    20.,   44.,
      84.,   140.,   200.,   296.,   376.,   520.,   504.,   664.,  512.,
      644.,  436.,   532.,   268.,   320.,   120.,   164.,   324.,  420.,
      620.,  776.,   1016.,  1240.,  1144.,  1384.,  1052.,  1244., 836.,
      972.,  488.,   560.,   220.,   284.,   564.,   700.,   1040., 1256.,
      1656., 1960.,  1784.,  2104.,  1592.,  1844.,  1236.,  1412., 708.,
      800.,  320.,   404.,   804.,   980.,   1460.,  1736.,  2296., 2680.,
      2424., 2824.,  2132.,  2444.,  1636.,  1852.,  928.,   1040., 369.,
      420.,  838.,   944.,   1411.,  1576.,  2092.,  2320.,  2188., 2424.,
      1825., 2008.,  1342.,  1468.,  735.,   800.,   17.,    36.,   70.,
      112.,  163.,   232.,   300.,   400.,   460.,   568.,   433.,  520.,
      350.,  412.,   207.,   240.,   212.,   268.,   532.,   652.,  968.,
      1160., 1528.,  1800.,  1912.,  2200.,  1664.,  1892.,  1268., 1428.,
      716.,  800.,   632.,   708.,   1412.,  1572.,  2348.,  2600., 3448.,
      3800., 3832.,  4200.,  3164.,  3452.,  2308.,  2508.,  1256., 1360.,
      1052., 1148.,  2292.,  2492.,  3728.,  4040.,  5368.,  5800., 5752.,
      6200., 4664.,  5012.,  3348.,  3588.,  1796.,  1920.,  1472., 1588.,
      3172., 3412.,  5108.,  5480.,  7288.,  7800.,  7672.,  8200., 6164.,
      6572., 4388.,  4668.,  2336.,  2480.,  1025.,  1092.,  2182., 2320.,
      3475., 3688.,  4908.,  5200.,  5132.,  5432.,  4081.,  4312., 2878.,
      3036., 1519.,  1600.,  33.,    68.,    134.,   208.,   307.,  424.,
      556.,  720.,   844.,   1016.,  769.,   904.,   606.,   700.,  351.,
      400.,  404.,   492.,   980.,   1164.,  1736.,  2024.,  2680., 3080.,
      3320., 3736.,  2816.,  3140.,  2100.,  2324.,  1164.,  1280., 1144.,
      1252., 2500.,  2724.,  4076.,  4424.,  5880.,  6360.,  6520., 7016.,
      5276., 5660.,  3780.,  4044.,  2024.,  2160.,  1884.,  2012., 4020.,
      4284., 6416.,  6824.,  9080.,  9640.,  9720.,  10296., 7736., 8180.,
      5460., 5764.,  2884.,  3040.,  2624.,  2772.,  5540.,  5844., 8756.,
      9224., 12280., 12920., 12920., 13576., 10196., 10700., 7140., 7484.,
      3744., 3920.,  1681.,  1764.,  3526.,  3696.,  5539.,  5800., 7724.,
      8080., 8076.,  8440.,  6337.,  6616.,  4414.,  4604.,  2303., 2400.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13348., 15860., 19248., 22768., 26716., 31372., 31628., 36604.,
      36540., 41836., 41452., 47068., 31536., 36080., 27284., 30884., 16153.,
      18269., 23900., 26828., 32935., 36771., 36667., 40743., 40399., 44715.,
      44131., 48687., 36012., 39644., 29901., 32769., 7233.,  8805.,  11516.,
      13804., 16895., 19995., 20435., 23775., 23975., 27555., 27515., 31335.,
      25356., 28604., 21621., 24201., 13332., 15652., 20336., 23600., 28780.,
      33116., 33052., 37708., 37324., 42300., 41596., 46892., 34672., 38960.,
      29444., 32852., 13467., 16135., 19540., 23332., 27301., 32377., 32593.,
      38069., 37885., 43761., 43177., 49453., 33540., 38676., 29287., 33379.,
      18107., 21159., 27604., 31908., 39045., 44761., 44337., 50453., 49629.,
      56145., 54921., 61837., 46724., 52372., 39559., 44035., 13348., 15860.,
      19248., 22768., 26716., 31372., 31628., 36604., 36540., 41836., 41452.,
      47068., 31536., 36080., 27284., 30884., 16153., 18269., 23900., 26828.,
      32935., 36771., 36667., 40743., 40399., 44715., 44131., 48687., 36012.,
      39644., 29901., 32769., 7233.,  8805.,  11516., 13804., 16895., 19995.,
      20435., 23775., 23975., 27555., 27515., 31335., 25356., 28604., 21621.,
      24201., 13332., 15652., 20336., 23600., 28780., 33116., 33052., 37708.,
      37324., 42300., 41596., 46892., 34672., 38960., 29444., 32852., 13467.,
      16135., 19540., 23332., 27301., 32377., 32593., 38069., 37885., 43761.,
      43177., 49453., 33540., 38676., 29287., 33379., 18107., 21159., 27604.,
      31908., 39045., 44761., 44337., 50453., 49629., 56145., 54921., 61837.,
      46724., 52372., 39559., 44035., 13348., 15860., 19248., 22768., 26716.,
      31372., 31628., 36604., 36540., 41836., 41452., 47068., 31536., 36080.,
      27284., 30884., 16153., 18269., 23900., 26828., 32935., 36771., 36667.,
      40743., 40399., 44715., 44131., 48687., 36012., 39644., 29901., 32769.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  878.,   1222.,  2412.,  3164.,
      4666.,  5890.,  7704.,  9464.,  8696.,  10584., 8050.,  9562.,  6428.,
      7500.,  3766.,  4334.,  1638.,  2142.,  4060.,  4876.,  7010.,  8202.,
      10552., 12184., 9816.,  11320., 8602.,  9826.,  6604.,  7484.,  3758.,
      4230.,  2206.,  2614.,  2956.,  3580.,  4042.,  4946.,  5528.,  6776.,
      2744.,  3864.,  3010.,  3946.,  2684.,  3372.,  1702.,  2078.,  613.,
      761.,   1506.,  1834.,  2711.,  3251.,  4260.,  5044.,  5012.,  5860.,
      4451.,  5135.,  3450.,  3938.,  1977.,  2237.,  101.,   249.,   482.,
      810.,   1175.,  1715.,  2212.,  2996.,  3476.,  4324.,  3299.,  3983.,
      2682.,  3170.,  1593.,  1853.,  1590.,  2030.,  4028.,  4972.,  7378.,
      8890.,  11704., 13848., 14744., 17016., 12874., 14674., 9836.,  11100.,
      5566.,  6230.,  4910.,  5510.,  10988., 12252., 18298., 20290., 26904.,
      29688., 29944., 32856., 24754., 27034., 18076., 19660., 9846.,  10670.,
      8230.,  8990.,  13660., 14988., 20130., 22090., 27704., 30360., 24920.,
      27448., 20698., 22690., 15180., 16572., 8302.,  9030.,  7262.,  7926.,
      9484.,  10620., 12554., 14226., 16536., 18808., 11704., 13848., 10498.,
      12202., 8188.,  9388.,  4710.,  5342.,  1733.,  2009.,  4002.,  4586.,
      6839.,  7763.,  10276., 11572., 12052., 13412., 10115., 11183., 7482.,
      8226.,  4121.,  4509.,  5.,     25.,    34.,    106.,   119.,   275.,
      292.,   564.,   532.,   868.,   707.,   1007.,  698.,   930.,   473.,
      605.,   118.,   302.,   572.,   1004.,  1426.,  2170.,  2744.,  3864.,
      3736.,  4984.,  3850.,  4882.,  3308.,  4060.,  2046.,  2454.,  878.,
      1222.,  2412.,  3164.,  4666.,  5890.,  7704.,  9464.,  8696.,  10584.,
      8050.,  9562.,  6428.,  7500.,  3766.,  4334.,  1638.,  2142.,  4060.,
      4876.,  7010.,  8202.,  10552., 12184., 9816.,  11320., 8602.,  9826.,
      6604.,  7484.,  3758.,  4230.,  2206.,  2614.,  2956.,  3580.,  4042.,
      4946.,  5528.,  6776.,  2744.,  3864.,  3010.,  3946.,  2684.,  3372.,
      1702.,  2078.,  613.,   761.,   1506.,  1834.,  2711.,  3251.,  4260.,
      5044.,  5012.,  5860.,  4451.,  5135.,  3450.,  3938.,  1977.,  2237.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 7368.,  12936., 13536., 21984., 14136., 23928., 15992., 26296.,
      17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040., 5534.,
      9518.,  9896.,  16232., 9874.,  17282., 11906., 19698., 14962., 23138.,
      14946., 23506., 9384.,  15720., 9486.,  14878., 5182.,  9422.,  9896.,
      16232., 11762., 18914., 11234., 18770., 11730., 19650., 13250., 21554.,
      11432., 17768., 9326.,  14462., 7368.,  12936., 13536., 21984., 14136.,
      23928., 15992., 26296., 17848., 28664., 19704., 31032., 13536., 21984.,
      12936., 20040., 8194.,  14962., 15640., 26200., 17806., 29854., 20254.,
      32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922.,
      8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678.,
      35006., 22078., 36046., 17176., 27736., 16978., 25922., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,  16232.,
      9874.,  17282., 11906., 19698., 14962., 23138., 14946., 23506., 9384.,
      15720., 9486.,  14878., 5182.,  9422.,  9896.,  16232., 11762., 18914.,
      11234., 18770., 11730., 19650., 13250., 21554., 11432., 17768., 9326.,
      14462., 7368.,  12936., 13536., 21984., 14136., 23928., 15992., 26296.,
      17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040., 8194.,
      14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006.,
      22078., 36046., 17176., 27736., 16978., 25922., 8194.,  14962., 15640.,
      26200., 17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046.,
      17176., 27736., 16978., 25922., 7368.,  12936., 13536., 21984., 14136.,
      23928., 15992., 26296., 17848., 28664., 19704., 31032., 13536., 21984.,
      12936., 20040., 5534.,  9518.,  9896.,  16232., 9874.,  17282., 11906.,
      19698., 14962., 23138., 14946., 23506., 9384.,  15720., 9486.,  14878.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5386.,  7738.,  5372.,  7196.,  3662.,  4702.,  780.,   2220.,
      4184.,  7576.,  10724., 16580., 20272., 28080., 25392., 33200., 22404.,
      28516., 14232., 18136., 9196.,  11404., 6060.,  7756.,  15256., 19160.,
      28100., 34724., 36272., 45104., 33200., 42032., 24932., 31812., 10968.,
      15384., 7820.,  10284., 3148.,  5100.,  9304.,  12696., 17572., 22916.,
      28464., 36272., 29488., 37296., 28868., 35492., 24088., 29016., 14636.,
      17356., 8428.,  10636., 12184., 16088., 18564., 24676., 28080., 36912.,
      20272., 28080., 20516., 26884., 16088., 20504., 6476.,  8428.,  4766.,
      5934.,  11740., 14332., 21178., 25450., 33336., 39544., 30456., 36152.,
      24074., 28474., 14204., 17052., 590.,   1630.,  30.,    174.,   220.,
      764.,   826.,   2026.,  2104.,  4216.,  3960.,  6584.,  5386.,  7738.,
      5372.,  7196.,  3662.,  4702.,  780.,   2220.,  4184.,  7576.,  10724.,
      16580., 20272., 28080., 25392., 33200., 22404., 28516., 14232., 18136.,
      9196.,  11404., 6060.,  7756.,  15256., 19160., 28100., 34724., 36272.,
      45104., 33200., 42032., 24932., 31812., 10968., 15384., 7820.,  10284.,
      3148.,  5100.,  9304.,  12696., 17572., 22916., 28464., 36272., 29488.,
      37296., 28868., 35492., 24088., 29016., 14636., 17356., 8428.,  10636.,
      12184., 16088., 18564., 24676., 28080., 36912., 20272., 28080., 20516.,
      26884., 16088., 20504., 6476.,  8428.,  4766.,  5934.,  11740., 14332.,
      21178., 25450., 33336., 39544., 30456., 36152., 24074., 28474., 14204.,
      17052., 590.,   1630.,  30.,    174.,   220.,   764.,   826.,   2026.,
      2104.,  4216.,  3960.,  6584.,  5386.,  7738.,  5372.,  7196.,  3662.,
      4702.,  780.,   2220.,  4184.,  7576.,  10724., 16580., 20272., 28080.,
      25392., 33200., 22404., 28516., 14232., 18136., 9196.,  11404., 6060.,
      7756.,  15256., 19160., 28100., 34724., 36272., 45104., 33200., 42032.,
      24932., 31812., 10968., 15384., 7820.,  10284., 3148.,  5100.,  9304.,
      12696., 17572., 22916., 28464., 36272., 29488., 37296., 28868., 35492.,
      24088., 29016., 14636., 17356., 8428.,  10636., 12184., 16088., 18564.,
      24676., 28080., 36912., 20272., 28080., 20516., 26884., 16088., 20504.,
      6476.,  8428.,  4766.,  5934.,  11740., 14332., 21178., 25450., 33336.,
      39544., 30456., 36152., 24074., 28474., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6372.,  6976.,  7604.,  8256.,  9200.,  10048., 10928.,
      11840., 12796., 13920., 15084., 16288., 15212., 16416., 17660., 18944.,
      17628., 18912., 20236., 21600., 20044., 21408., 22812., 24256., 15216.,
      16320., 17456., 18624., 13204., 14080., 14980., 15904., 7821.,  8332.,
      8861.,  9408.,  11596., 12304., 13036., 13792., 16003., 16932., 17891.,
      18880., 17839., 18828., 19847., 20896., 19675., 20724., 21803., 22912.,
      21511., 22620., 23759., 24928., 17564., 18448., 19356., 20288., 14601.,
      15300., 16017., 16752., 3429.,  3804.,  4197.,  4608.,  5484.,  6032.,
      6604.,  7200.,  8075.,  8820.,  9595.,  10400., 9815.,  10620., 11455.,
      12320., 11555., 12420., 13315., 14240., 13295., 14220., 15175., 16160.,
      12284., 13072., 13884., 14720., 10497., 11124., 11769., 12432., 6388.,
      6944.,  7524.,  8128.,  9776.,  10560., 11376., 12224., 13868., 14912.,
      15996., 17120., 15964., 17088., 18252., 19456., 18060., 19264., 20508.,
      21792., 20156., 21440., 22764., 24128., 16816., 17856., 18928., 20032.,
      14308., 15136., 15988., 16864., 6415.,  7052.,  7719.,  8416.,  9316.,
      10224., 11172., 12160., 13041., 14260., 15529., 16848., 15637., 16956.,
      18325., 19744., 18233., 19652., 21121., 22640., 20829., 22348., 23917.,
      25536., 16148., 17392., 18676., 20000., 14147., 15140., 16163., 17216.,
      8687.,  9420.,  10183., 10976., 13284., 14320., 15396., 16512., 18833.,
      20212., 21641., 23120., 21429., 22908., 24437., 26016., 24025., 25604.,
      27233., 28912., 26621., 28300., 30029., 31808., 22676., 24048., 25460.,
      26912., 19235., 20324., 21443., 22592., 6372.,  6976.,  7604.,  8256.,
      9200.,  10048., 10928., 11840., 12796., 13920., 15084., 16288., 15212.,
      16416., 17660., 18944., 17628., 18912., 20236., 21600., 20044., 21408.,
      22812., 24256., 15216., 16320., 17456., 18624., 13204., 14080., 14980.,
      15904., 7821.,  8332.,  8861.,  9408.,  11596., 12304., 13036., 13792.,
      16003., 16932., 17891., 18880., 17839., 18828., 19847., 20896., 19675.,
      20724., 21803., 22912., 21511., 22620., 23759., 24928., 17564., 18448.,
      19356., 20288., 14601., 15300., 16017., 16752., 3429.,  3804.,  4197.,
      4608.,  5484.,  6032.,  6604.,  7200.,  8075.,  8820.,  9595.,  10400.,
      9815.,  10620., 11455., 12320., 11555., 12420., 13315., 14240., 13295.,
      14220., 15175., 16160., 12284., 13072., 13884., 14720., 10497., 11124.,
      11769., 12432., 6388.,  6944.,  7524.,  8128.,  9776.,  10560., 11376.,
      12224., 13868., 14912., 15996., 17120., 15964., 17088., 18252., 19456.,
      18060., 19264., 20508., 21792., 20156., 21440., 22764., 24128., 16816.,
      17856., 18928., 20032., 14308., 15136., 15988., 16864., 6415.,  7052.,
      7719.,  8416.,  9316.,  10224., 11172., 12160., 13041., 14260., 15529.,
      16848., 15637., 16956., 18325., 19744., 18233., 19652., 21121., 22640.,
      20829., 22348., 23917., 25536., 16148., 17392., 18676., 20000., 14147.,
      15140., 16163., 17216., 8687.,  9420.,  10183., 10976., 13284., 14320.,
      15396., 16512., 18833., 20212., 21641., 23120., 21429., 22908., 24437.,
      26016., 24025., 25604., 27233., 28912., 26621., 28300., 30029., 31808.,
      22676., 24048., 25460., 26912., 19235., 20324., 21443., 22592., 6372.,
      6976.,  7604.,  8256.,  9200.,  10048., 10928., 11840., 12796., 13920.,
      15084., 16288., 15212., 16416., 17660., 18944., 17628., 18912., 20236.,
      21600., 20044., 21408., 22812., 24256., 15216., 16320., 17456., 18624.,
      13204., 14080., 14980., 15904., 7821.,  8332.,  8861.,  9408.,  11596.,
      12304., 13036., 13792., 16003., 16932., 17891., 18880., 17839., 18828.,
      19847., 20896., 19675., 20724., 21803., 22912., 21511., 22620., 23759.,
      24928., 17564., 18448., 19356., 20288., 14601., 15300., 16017., 16752.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,
      496.,   221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,
      1504.,  1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,
      2306.,  2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,
      1280.,  398.,   480.,   566.,   656.,   1116.,  1296.,  1484.,  1680.,
      2186.,  2480.,  2786.,  3104.,  3640.,  4064.,  4504.,  4960.,  4120.,
      4576.,  5048.,  5536.,  3842.,  4208.,  4586.,  4976.,  3084.,  3344.,
      3612.,  3888.,  1814.,  1952.,  2094.,  2240.,  758.,   880.,   1006.,
      1136.,  1996.,  2256.,  2524.,  2800.,  3746.,  4160.,  4586.,  5024.,
      6040.,  6624.,  7224.,  7840.,  6520.,  7136.,  7768.,  8416.,  5882.,
      6368.,  6866.,  7376.,  4604.,  4944.,  5292.,  5648.,  2654.,  2832.,
      3014.,  3200.,  1118.,  1280.,  1446.,  1616.,  2876.,  3216.,  3564.,
      3920.,  5306.,  5840.,  6386.,  6944.,  8440.,  9184.,  9944.,  10720.,
      8920.,  9696.,  10488., 11296., 7922.,  8528.,  9146.,  9776.,  6124.,
      6544.,  6972.,  7408.,  3494.,  3712.,  3934.,  4160.,  1377.,  1476.,
      1577.,  1680.,  3146.,  3352.,  3562.,  3776.,  5323.,  5644.,  5971.,
      6304.,  7924.,  8368.,  8820.,  9280.,  8292.,  8752.,  9220.,  9696.,
      6943.,  7300.,  7663.,  8032.,  5122.,  5368.,  5618.,  5872.,  2813.,
      2940.,  3069.,  3200.,  33.,    68.,    105.,   144.,   202.,   280.,
      362.,   448.,   523.,   652.,   787.,   928.,   1012.,  1200.,  1396.,
      1600.,  1636.,  1840.,  2052.,  2272.,  1567.,  1732.,  1903.,  2080.,
      1282.,  1400.,  1522.,  1648.,  765.,   828.,   893.,   960.,   742.,
      848.,   958.,   1072.,  1900.,  2128.,  2364.,  2608.,  3506.,  3872.,
      4250.,  4640.,  5592.,  6112.,  6648.,  7200.,  7096.,  7648.,  8216.,
      8800.,  6218.,  6656.,  7106.,  7568.,  4764.,  5072.,  5388.,  5712.,
      2702.,  2864.,  3030.,  3200.,  2382.,  2528.,  2678.,  2832.,  5340.,
      5648.,  5964.,  6288.,  8906.,  9392.,  9890.,  10400., 13112., 13792.,
      14488., 15200., 14616., 15328., 16056., 16800., 12098., 12656., 13226.,
      13808., 8844.,  9232.,  9628.,  10032., 4822.,  5024.,  5230.,  5440.,
      4022.,  4208.,  4398.,  4592.,  8780.,  9168.,  9564.,  9968.,  14306.,
      14912., 15530., 16160., 20632., 21472., 22328., 23200., 22136., 23008.,
      23896., 24800., 17978., 18656., 19346., 20048., 12924., 13392., 13868.,
      14352., 6942.,  7184.,  7430.,  7680.,  5662.,  5888.,  6118.,  6352.,
      12220., 12688., 13164., 13648., 19706., 20432., 21170., 21920., 28152.,
      29152., 30168., 31200., 29656., 30688., 31736., 32800., 23858., 24656.,
      25466., 26288., 17004., 17552., 18108., 18672., 9062.,  9344.,  9630.,
      9920.,  3969.,  4100.,  4233.,  4368.,  8458.,  8728.,  9002.,  9280.,
      13483., 13900., 14323., 14752., 19060., 19632., 20212., 20800., 19940.,
      20528., 21124., 21728., 15871., 16324., 16783., 17248., 11202., 11512.,
      11826., 12144., 5917.,  6076.,  6237.,  6400.,  65.,    132.,   201.,
      272.,   394.,   536.,   682.,   832.,   1003.,  1228.,  1459.,  1696.,
      1908.,  2224.,  2548.,  2880.,  3044.,  3376.,  3716.,  4064.,  2815.,
      3076.,  3343.,  3616.,  2242.,  2424.,  2610.,  2800.,  1309.,  1404.,
      1501.,  1600.,  1446.,  1616.,  1790.,  1968.,  3564.,  3920.,  4284.,
      4656.,  6386.,  6944.,  7514.,  8096.,  9944.,  10720., 11512., 12320.,
      12472., 13280., 14104., 14944., 10634., 11264., 11906., 12560., 7964.,
      8400.,  8844.,  9296.,  4430.,  4656.,  4886.,  5120.,  4366.,  4576.,
      4790.,  5008.,  9564.,  10000., 10444., 10896., 15626., 16304., 16994.,
      17696., 22584., 23520., 24472., 25440., 25112., 26080., 27064., 28064.,
      20354., 21104., 21866., 22640., 14604., 15120., 15644., 16176., 7830.,
      8096.,  8366.,  8640.,  7286.,  7536.,  7790.,  8048.,  15564., 16080.,
      16604., 17136., 24866., 25664., 26474., 27296., 35224., 36320., 37432.,
      38560., 37752., 38880., 40024., 41184., 30074., 30944., 31826., 32720.,
      21244., 21840., 22444., 23056., 11230., 11536., 11846., 12160., 10206.,
      10496., 10790., 11088., 21564., 22160., 22764., 23376., 34106., 35024.,
      35954., 36896., 47864., 49120., 50392., 51680., 50392., 51680., 52984.,
      54304., 39794., 40784., 41786., 42800., 27884., 28560., 29244., 29936.,
      14630., 14976., 15326., 15680., 6561.,  6724.,  6889.,  7056.,  13770.,
      14104., 14442., 14784., 21643., 22156., 22675., 23200., 30196., 30896.,
      31604., 32320., 31588., 32304., 33028., 33760., 24799., 25348., 25903.,
      26464., 17282., 17656., 18034., 18416., 9021.,  9212.,  9405.,  9600.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3084.,  4284.,  5676.,  7260.,  5840.,  7696.,  9808.,
      12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700., 14596.,
      7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092., 5840.,
      7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 2341.,  3193.,
      4189.,  5329.,  4252.,  5644.,  7228.,  9004.,  4131.,  5743.,  7595.,
      9687.,  5099.,  6807.,  8755.,  10943., 6579.,  8383.,  10427., 12711.,
      6523.,  8423.,  10563., 12943., 3996.,  5388.,  6972.,  8748.,  4141.,
      5345.,  6693.,  8185.,  2133.,  3049.,  4109.,  5313.,  4252.,  5644.,
      7228.,  9004.,  5107.,  6655.,  8443.,  10471., 4795.,  6439.,  8323.,
      10447., 4995.,  6735.,  8715.,  10935., 5707.,  7543.,  9619.,  11935.,
      5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.,  3084.,
      4284.,  5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,
      10580., 13348., 6868.,  9124.,  11700., 14596., 7732.,  10116., 12820.,
      15844., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.,
      5676.,  7260.,  9036.,  11004., 3371.,  4823.,  6515.,  8447.,  6660.,
      8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8741.,  11513.,
      14685., 18257., 9373.,  12305., 15637., 19369., 9493.,  12585., 16077.,
      19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723., 14199.,
      3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,
      10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,  12305.,
      15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388.,
      15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,  7228.,  9004.,
      4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,  10943., 6579.,
      8383.,  10427., 12711., 6523.,  8423.,  10563., 12943., 3996.,  5388.,
      6972.,  8748.,  4141.,  5345.,  6693.,  8185.,  2133.,  3049.,  4109.,
      5313.,  4252.,  5644.,  7228.,  9004.,  5107.,  6655.,  8443.,  10471.,
      4795.,  6439.,  8323.,  10447., 4995.,  6735.,  8715.,  10935., 5707.,
      7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,
      6517.,  7945.,  3084.,  4284.,  5676.,  7260.,  5840.,  7696.,  9808.,
      12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700., 14596.,
      7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092., 5840.,
      7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 3371.,  4823.,
      6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221.,
      16633., 8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369.,
      9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,
      9487.,  11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,
      11620., 14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685.,
      18257., 9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969.,
      7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3084.,
      4284.,  5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,
      10580., 13348., 6868.,  9124.,  11700., 14596., 7732.,  10116., 12820.,
      15844., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.,
      5676.,  7260.,  9036.,  11004., 2341.,  3193.,  4189.,  5329.,  4252.,
      5644.,  7228.,  9004.,  4131.,  5743.,  7595.,  9687.,  5099.,  6807.,
      8755.,  10943., 6579.,  8383.,  10427., 12711., 6523.,  8423.,  10563.,
      12943., 3996.,  5388.,  6972.,  8748.,  4141.,  5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,
      11048., 13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918.,
      13446., 15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,
      5994.,  2834.,  3226.,  3650.,  4106.,  7172.,  8084.,  9060.,  10100.,
      13270., 14830., 16486., 18238., 17096., 19176., 21384., 23720., 15560.,
      17640., 19848., 22184., 11654., 13278., 14998., 16814., 4964.,  6004.,
      7108.,  8276.,  3618.,  4202.,  4818.,  5466.,  1346.,  1802.,  2290.,
      2810.,  4260.,  5044.,  5892.,  6804.,  8166.,  9406.,  10742., 12174.,
      13320., 15144., 17096., 19176., 13832., 15656., 17608., 19688., 13654.,
      15214., 16870., 18622., 11460., 12628., 13860., 15156., 6994.,  7642.,
      8322.,  9034.,  3954.,  4474.,  5026.,  5610.,  5636.,  6548.,  7524.,
      8564.,  8566.,  9998.,  11526., 13150., 13000., 15080., 17288., 19624.,
      9224.,  11048., 13000., 15080., 9510.,  11006., 12598., 14286., 7524.,
      8564.,  9668.,  10836., 3010.,  3466.,  3954.,  4474.,  2245.,  2521.,
      2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  10079., 11099., 12167.,
      13283., 15924., 17412., 18964., 20580., 14548., 15908., 17332., 18820.,
      11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,  173.,
      417.,   677.,   953.,   5.,     25.,    61.,    113.,   58.,    162.,
      298.,   466.,   287.,   539.,   839.,   1187.,  820.,   1284.,  1812.,
      2404.,  1684.,  2276.,  2932.,  3652.,  2423.,  2963.,  3551.,  4187.,
      2474.,  2898.,  3354.,  3842.,  1709.,  1953.,  2213.,  2489.,  226.,
      554.,   914.,   1306.,  1700.,  2484.,  3332.,  4244.,  4678.,  6046.,
      7510.,  9070.,  9224.,  11048., 13000., 15080., 11784., 13608., 15560.,
      17640., 10486., 11918., 13446., 15070., 6660.,  7572.,  8548.,  9588.,
      4338.,  4858.,  5410.,  5994.,  2834.,  3226.,  3650.,  4106.,  7172.,
      8084.,  9060.,  10100., 13270., 14830., 16486., 18238., 17096., 19176.,
      21384., 23720., 15560., 17640., 19848., 22184., 11654., 13278., 14998.,
      16814., 4964.,  6004.,  7108.,  8276.,  3618.,  4202.,  4818.,  5466.,
      1346.,  1802.,  2290.,  2810.,  4260.,  5044.,  5892.,  6804.,  8166.,
      9406.,  10742., 12174., 13320., 15144., 17096., 19176., 13832., 15656.,
      17608., 19688., 13654., 15214., 16870., 18622., 11460., 12628., 13860.,
      15156., 6994.,  7642.,  8322.,  9034.,  3954.,  4474.,  5026.,  5610.,
      5636.,  6548.,  7524.,  8564.,  8566.,  9998.,  11526., 13150., 13000.,
      15080., 17288., 19624., 9224.,  11048., 13000., 15080., 9510.,  11006.,
      12598., 14286., 7524.,  8564.,  9668.,  10836., 3010.,  3466.,  3954.,
      4474.,  2245.,  2521.,  2813.,  3121.,  5562.,  6178.,  6826.,  7506.,
      10079., 11099., 12167., 13283., 15924., 17412., 18964., 20580., 14548.,
      15908., 17332., 18820., 11511., 12563., 13663., 14811., 6762.,  7442.,
      8154.,  8898.,  173.,   417.,   677.,   953.,   5.,     25.,    61.,
      113.,   58.,    162.,   298.,   466.,   287.,   539.,   839.,   1187.,
      820.,   1284.,  1812.,  2404.,  1684.,  2276.,  2932.,  3652.,  2423.,
      2963.,  3551.,  4187.,  2474.,  2898.,  3354.,  3842.,  1709.,  1953.,
      2213.,  2489.,  226.,   554.,   914.,   1306.,  1700.,  2484.,  3332.,
      4244.,  4678.,  6046.,  7510.,  9070.,  9224.,  11048., 13000., 15080.,
      11784., 13608., 15560., 17640., 10486., 11918., 13446., 15070., 6660.,
      7572.,  8548.,  9588.,  4338.,  4858.,  5410.,  5994.,  2834.,  3226.,
      3650.,  4106.,  7172.,  8084.,  9060.,  10100., 13270., 14830., 16486.,
      18238., 17096., 19176., 21384., 23720., 15560., 17640., 19848., 22184.,
      11654., 13278., 14998., 16814., 4964.,  6004.,  7108.,  8276.,  3618.,
      4202.,  4818.,  5466.,  1346.,  1802.,  2290.,  2810.,  4260.,  5044.,
      5892.,  6804.,  8166.,  9406.,  10742., 12174., 13320., 15144., 17096.,
      19176., 13832., 15656., 17608., 19688., 13654., 15214., 16870., 18622.,
      11460., 12628., 13860., 15156., 6994.,  7642.,  8322.,  9034.,  3954.,
      4474.,  5026.,  5610.,  5636.,  6548.,  7524.,  8564.,  8566.,  9998.,
      11526., 13150., 13000., 15080., 17288., 19624., 9224.,  11048., 13000.,
      15080., 9510.,  11006., 12598., 14286., 7524.,  8564.,  9668.,  10836.,
      3010.,  3466.,  3954.,  4474.,  2245.,  2521.,  2813.,  3121.,  5562.,
      6178.,  6826.,  7506.,  10079., 11099., 12167., 13283., 15924., 17412.,
      18964., 20580., 14548., 15908., 17332., 18820., 11511., 12563., 13663.,
      14811., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,
      8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,  15064.,
      25112., 37720., 10264., 18776., 29848., 43480., 7576.,  15064., 25112.,
      37720., 10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480.,
      6696.,  12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,
      15896., 26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726.,
      35438., 52350., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414., 19646.,
      32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944., 28504.,
      41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336.,
      6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6626.,  12114., 19522., 28850., 6082.,
      12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 5442.,  10674.,
      17826., 26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078.,
      47710., 11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562., 4008.,
      8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,  15064.,
      25112., 37720., 10264., 18776., 29848., 43480., 7576.,  15064., 25112.,
      37720., 10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480.,
      6696.,  12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,
      9128.,  15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338.,
      20514., 30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.,  220.,   764.,   1564.,  2620.,
      2104.,  4216.,  6840.,  9976.,  7700.,  12404., 17876., 24116., 18416.,
      25712., 34032., 43376., 26608., 33904., 42224., 51568., 26068., 32308.,
      39316., 47092., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,
      11260., 540.,   1596.,  2908.,  4476.,  4792.,  7928.,  11576., 15736.,
      14164., 19380., 25364., 32116., 26608., 33904., 42224., 51568., 26608.,
      33904., 42224., 51568., 17556., 23284., 29780., 37044., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 15892., 20596., 26068., 32308.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 17876.,
      24116., 31124., 38900., 22456., 27640., 33336., 39544., 17180., 20284.,
      23644., 27260., 540.,   1596.,  2908.,  4476.,  4152.,  6264.,  8888.,
      12024., 9428.,  13620., 18580., 24308., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26388., 33140., 40660., 48948., 24504.,
      29688., 35384., 41592., 10716., 13308., 16156., 19260., 30.,    174.,
      446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,  4042.,  6394.,
      9130.,  6136.,  9784.,  13944., 18616., 12280., 15928., 20088., 24760.,
      14138., 17386., 21018., 25034., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  2074.,  4042.,  6394.,  9130.,  6136.,  9784.,  13944.,
      18616., 12280., 15928., 20088., 24760., 14138., 17386., 21018., 25034.,
      10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,  220.,
      764.,   1564.,  2620.,  2104.,  4216.,  6840.,  9976.,  7700.,  12404.,
      17876., 24116., 18416., 25712., 34032., 43376., 26608., 33904., 42224.,
      51568., 26068., 32308., 39316., 47092., 13624., 17784., 22456., 27640.,
      4252.,  6332.,  8668.,  11260., 540.,   1596.,  2908.,  4476.,  4792.,
      7928.,  11576., 15736., 14164., 19380., 25364., 32116., 26608., 33904.,
      42224., 51568., 26608., 33904., 42224., 51568., 17556., 23284., 29780.,
      37044., 11576., 15736., 20408., 25592., 10716., 13308., 16156., 19260.,
      860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784., 15892.,
      20596., 26068., 32308., 26608., 33904., 42224., 51568., 18416., 25712.,
      34032., 43376., 17876., 24116., 31124., 38900., 22456., 27640., 33336.,
      39544., 17180., 20284., 23644., 27260., 540.,   1596.,  2908.,  4476.,
      4152.,  6264.,  8888.,  12024., 9428.,  13620., 18580., 24308., 18416.,
      25712., 34032., 43376., 18416., 25712., 34032., 43376., 26388., 33140.,
      40660., 48948., 24504., 29688., 35384., 41592., 10716., 13308., 16156.,
      19260., 30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,
      2074.,  4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280.,
      15928., 20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892.,
      15484., 18332., 510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,
      846.,   380.,   1180.,  2236.,  3548.,  2074.,  4042.,  6394.,  9130.,
      6136.,  9784.,  13944., 18616., 12280., 15928., 20088., 24760., 14138.,
      17386., 21018., 25034., 10556., 12892., 15484., 18332., 510.,   1422.,
      2462.,  3630.,  220.,   764.,   1564.,  2620.,  2104.,  4216.,  6840.,
      9976.,  7700.,  12404., 17876., 24116., 18416., 25712., 34032., 43376.,
      26608., 33904., 42224., 51568., 26068., 32308., 39316., 47092., 13624.,
      17784., 22456., 27640., 4252.,  6332.,  8668.,  11260., 540.,   1596.,
      2908.,  4476.,  4792.,  7928.,  11576., 15736., 14164., 19380., 25364.,
      32116., 26608., 33904., 42224., 51568., 26608., 33904., 42224., 51568.,
      17556., 23284., 29780., 37044., 11576., 15736., 20408., 25592., 10716.,
      13308., 16156., 19260., 860.,   2428.,  4252.,  6332.,  6840.,  9976.,
      13624., 17784., 15892., 20596., 26068., 32308., 26608., 33904., 42224.,
      51568., 18416., 25712., 34032., 43376., 17876., 24116., 31124., 38900.,
      22456., 27640., 33336., 39544., 17180., 20284., 23644., 27260., 540.,
      1596.,  2908.,  4476.,  4152.,  6264.,  8888.,  12024., 9428.,  13620.,
      18580., 24308., 18416., 25712., 34032., 43376., 18416., 25712., 34032.,
      43376., 26388., 33140., 40660., 48948., 24504., 29688., 35384., 41592.,
      10716., 13308., 16156., 19260., 30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  2074.,  4042.,  6394.,  9130.,  6136.,  9784.,
      13944., 18616., 12280., 15928., 20088., 24760., 14138., 17386., 21018.,
      25034., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,   510.,   750.,   870.,   816.,   705.,   796.,   1220.,  1730.,
      1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,
      2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3770.,  5400.,  7225.,
      7550.,  6470.,  5180.,  4588.,  6460.,  8510.,  8820.,  7444.,  5878.,
      4710.,  6570.,  8580.,  8850.,  7404.,  5799.,  2964.,  4290.,  5790.,
      5910.,  5100.,  4107.,  5584.,  7940.,  10550., 10760., 9148.,  7270.,
      9170.,  12900., 16975., 17300., 14570., 11480., 10250., 14400., 18925.,
      19250., 16190., 12740., 11330., 15900., 20875., 21200., 17810., 14000.,
      11896., 16540., 21530., 21840., 18196., 14194., 11136., 15390., 19920.,
      20190., 16728., 12981., 5610.,  8070.,  10830., 10950., 9384.,  7509.,
      10372., 14660., 19370., 19580., 16540., 13066., 16730., 23400., 30625.,
      30950., 25910., 20300., 17810., 24900., 32575., 32900., 27530., 21560.,
      18890., 26400., 34525., 34850., 29150., 22820., 19204., 26620., 34550.,
      34860., 28948., 22510., 17562., 24210., 31260., 31530., 26052., 20163.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   10.,   9.,    29.,   39.,   49.,
      59.,   40.,   34.,   95.,   116.,  137.,  158.,  100.,  79.,   200.,
      221.,  242.,  263.,  160.,  124.,  305.,  326.,  347.,  368.,  220.,
      143.,  331.,  349.,  367.,  385.,  220.,  105.,  236.,  247.,  258.,
      269.,  150.,  7.,    22.,   37.,   52.,   67.,   40.,   51.,   125.,
      159.,  193.,  227.,  130.,  142.,  329.,  386.,  443.,  500.,  280.,
      277.,  614.,  671.,  728.,  785.,  430.,  412.,  899.,  956.,  1013.,
      1070., 580.,  365.,  787.,  829.,  871.,  913.,  490.,  231.,  494.,
      517.,  540.,  563.,  300.,  13.,   40.,   67.,   94.,   121.,  70.,
      93.,   221.,  279.,  337.,  395.,  220.,  250.,  563.,  656.,  749.,
      842.,  460.,  475.,  1028., 1121., 1214., 1307., 700.,  700.,  1493.,
      1586., 1679., 1772., 940.,  587.,  1243., 1309., 1375., 1441., 760.,
      357.,  752.,  787.,  822.,  857.,  450.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,  12960.,
      14600., 13280., 11192., 12115., 18140., 25225., 27775., 24660., 20365.,
      20383., 29260., 39181., 40771., 34052., 27385., 26219., 36156., 47121.,
      47431., 38324., 30565., 27736., 37088., 47336., 46256., 36032., 28592.,
      23751., 30508., 37941., 35271., 25716., 20469., 7143.,  10668., 14805.,
      15735., 14004., 11589., 14768., 21568., 29168., 30360., 25888., 20328.,
      24871., 35436., 45733., 46555., 38820., 29761., 28147., 39772., 49833.,
      49375., 40532., 30381., 27583., 38988., 47533., 45795., 37124., 27161.,
      22280., 31520., 36408., 33280., 26112., 17888., 10275., 14940., 20265.,
      22395., 19428., 15729., 10659., 15324., 20585., 21515., 18596., 15009.,
      17120., 24320., 32320., 33960., 29024., 23192., 24763., 35068., 46465.,
      49015., 41716., 33205., 20359., 29164., 39045., 41595., 35748., 28705.,
      12115., 18140., 25225., 27775., 24660., 20365., 19256., 27616., 37000.,
      39440., 33856., 27152., 22335., 31500., 41565., 43695., 36948., 29229.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    67.,   52.,   184.,   256.,
      328.,   400.,   280.,   221.,   646.,   802.,  958.,  1114.,  719.,
      551.,   1426.,  1582.,  1738.,  1894.,  1169., 881.,  2206.,  2362.,
      2518.,  2674.,  1619.,  1056.,  2464.,  2600., 2736., 2872.,  1652.,
      789.,   1782.,  1866.,  1950.,  2034.,  1139., 41.,   142.,   258.,
      374.,   490.,   295.,   364.,   904.,   1168., 1432., 1696.,  976.,
      1049.,  2446.,  2890.,  3334.,  3778.,  2123., 2099., 4666.,  5110.,
      5554.,  5998.,  3293.,  3149.,  6886.,  7330., 7774., 8218.,  4463.,
      2808.,  6064.,  6392.,  6720.,  7048.,  3788., 1785., 3822.,  4002.,
      4182.,  4362.,  2327.,  77.,    262.,   474.,  686.,  898.,   523.,
      676.,   1624.,  2080.,  2536.,  2992.,  1672., 1877., 4246.,  4978.,
      5710.,  6442.,  3527.,  3647.,  7906.,  8638., 9370., 10102., 5417.,
      5417.,  11566., 12298., 13030., 13762., 7307., 4560., 9664.,  10184.,
      10704., 11224., 5924.,  2781.,  5862.,  6138., 6414., 6690.,  3515.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734.,
      27078., 19992., 14170., 16120., 21920., 24968., 24232., 14944., 13272.,
      6758.,  11944., 16730., 17650., 12872., 9966.,  6310.,  10280., 15002.,
      16882., 14216., 12078., 12056., 13600., 16040., 19656., 15136., 12856.,
      17138., 23864., 28238., 28342., 19544., 17770., 11650., 18680., 25790.,
      28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034.,
      16376., 19872., 20104., 22440., 15968., 11480., 9078.,  13416., 17546.,
      18786., 12936., 11646., 8694.,  12904., 16906., 18786., 16328., 11646.,
      10264., 15648., 18344., 20936., 17184., 14136., 18018., 22904., 24734.,
      27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770.,
      11650., 18680., 25790., 28966., 23064., 17658., 14072., 19872., 19848.,
      21160., 19040., 15320., 9670.,  15016., 17146., 18386., 13000., 9422.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   486.,   340.,   1288.,  1832.,
      2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,  8324.,  5434.,
      4090.,  10084., 9620.,  10820., 12020., 7250.,  5970.,  11732., 9220.,
      10420., 11620., 7018.,  5412.,  7848.,  3144.,  4200.,  5256.,  3316.,
      1374.,  3340.,  3996.,  4652.,  5308.,  3110.,  270.,   1004.,  1916.,
      2828.,  3740.,  2262.,  2740.,  6856.,  8936.,  11016., 13096., 7556.,
      8050.,  18836., 22340., 25844., 29348., 16522., 16330., 29572., 25268.,
      28772., 32276., 17954., 17826., 30452., 24100., 27604., 31108., 17338.,
      13188., 18024., 8712.,  11304., 13896., 8020.,  3150.,  7276.,  8700.,
      10124., 11548., 6422.,  510.,   1868.,  3548.,  5228.,  6908.,  4038.,
      5140.,  12424., 16040., 19656., 23272., 13028., 13890., 30644., 34404.,
      38164., 41924., 22874., 22810., 36516., 26324., 30084., 33844., 18802.,
      18802., 26388., 14148., 17908., 21668., 12682., 4964.,  11560., 11976.,
      14056., 16136., 9012.,  190.,   716.,   860.,   1004.,  1148.,  902.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13955., 15080., 20060., 21600., 26925., 28900.,
      28175., 30200., 24220., 25880., 19445., 20720., 17320., 18352., 24432.,
      25840., 32240., 34040., 33440., 35280., 28272., 29776., 22360., 23512.,
      17967., 18840., 25092., 26280., 32805., 34320., 33855., 35400., 28356.,
      29616., 22233., 23196., 10839., 11856., 15780., 17160., 21405., 23160.,
      21855., 23640., 18948., 20400., 15321., 16428., 20848., 22336., 29744.,
      31760., 39512., 41944., 39928., 42272., 33456., 35312., 25936., 27288.,
      33503., 35144., 46812., 49040., 59817., 62524., 59403., 62032., 48764.,
      50856., 36961., 38496., 32651., 34088., 45404., 47360., 56437., 58804.,
      54743., 57032., 44252., 46072., 32733., 34064., 27959., 29192., 38876.,
      40560., 46657., 48684., 43683., 45632., 34620., 36168., 24665., 25792.,
      19048., 19936., 26544., 27760., 29392., 30824., 25088., 26432., 18736.,
      19792., 11736., 12488., 4899.,  5376.,  7140.,  7800.,  9705.,  10560.,
      10755., 11640., 9348.,  10080., 7581.,  8148.,  5691.,  6312.,  8388.,
      9240.,  11505., 12600., 11955., 13080., 10500., 11424., 8589.,  9300.,
      11344., 12304., 16368., 17680., 22040., 23720., 22840., 24560., 19696.,
      21104., 15856., 16936., 19475., 20840., 27740., 29600., 36925., 39300.,
      38175., 40600., 32540., 34520., 25925., 27440., 23615., 25160., 33500.,
      35600., 44425., 47100., 45675., 48400., 38780., 41000., 30785., 32480.,
      27755., 29480., 39260., 41600., 51925., 54900., 53175., 56200., 45020.,
      47480., 35645., 37520., 30760., 32272., 42992., 45040., 56240., 58840.,
      57440., 60080., 48112., 50256., 37720., 39352., 29847., 31080., 41412.,
      43080., 53805., 55920., 54855., 57000., 45636., 47376., 35553., 36876.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      27.,   40.,   16.,   36.,   68.,   116.,  100.,  156.,  132.,  196.,
      164.,  236.,  120.,  160.,  85.,   136.,  266.,  380.,  338.,  464.,
      410.,  548.,  482.,  632.,  319.,  400.,  235.,  316.,  626.,  800.,
      698.,  884.,  770.,  968.,  842.,  1052., 529.,  640.,  385.,  496.,
      986.,  1220., 1058., 1304., 1130., 1388., 1202., 1472., 739.,  880.,
      484.,  572.,  1140., 1324., 1204., 1396., 1268., 1468., 1332., 1540.,
      772.,  880.,  369.,  420.,  838.,  944.,  878.,  988.,  918.,  1032.,
      958.,  1076., 539.,  600.,  13.,   28.,   54.,   88.,   110.,  148.,
      166.,  208.,  222.,  268.,  135.,  160.,  160.,  204.,  404.,  500.,
      532.,  636.,  660.,  772.,  788.,  908.,  456.,  520.,  481.,  568.,
      1130., 1316., 1346., 1544., 1562., 1772., 1778., 2000., 1003., 1120.,
      991.,  1108., 2210., 2456., 2426., 2684., 2642., 2912., 2858., 3140.,
      1573., 1720., 1501., 1648., 3290., 3596., 3506., 3824., 3722., 4052.,
      3938., 4280., 2143., 2320., 1348., 1460., 2916., 3148., 3076., 3316.,
      3236., 3484., 3396., 3652., 1828., 1960., 861.,  924.,  1846., 1976.,
      1934., 2068., 2022., 2160., 2110., 2252., 1127., 1200., 25.,   52.,
      102.,  160.,  206.,  268.,  310.,  376.,  414.,  484.,  243.,  280.,
      304.,  372.,  740.,  884.,  964.,  1116., 1188., 1348., 1412., 1580.,
      792.,  880.,  877.,  1000., 1994., 2252., 2354., 2624., 2714., 2996.,
      3074., 3368., 1687., 1840., 1747., 1900., 3794., 4112., 4154., 4484.,
      4514., 4856., 4874., 5228., 2617., 2800., 2617., 2800., 5594., 5972.,
      5954., 6344., 6314., 6716., 6674., 7088., 3547., 3760., 2212., 2348.,
      4692., 4972., 4948., 5236., 5204., 5500., 5460., 5764., 2884., 3040.,
      1353., 1428., 2854., 3008., 2990., 3148., 3126., 3288., 3262., 3428.,
      1715., 1800.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 26555., 30119., 37204., 42020., 47557., 53529.,
      45809., 51669., 32932., 37428., 26207., 29691., 21908., 24740., 27376.,
      31152., 34284., 39132., 32348., 37260., 18416., 22192., 16868., 19892.,
      11585., 13925., 18492., 21548., 26495., 30363., 29011., 32863., 23404.,
      26268., 19869., 22161., 14049., 16005., 21116., 23916., 29535., 33275.,
      33075., 37055., 29932., 33308., 25149., 27825., 14276., 17172., 20656.,
      24688., 28668., 33708., 32236., 37340., 22960., 26992., 19348., 22436.,
      23507., 26847., 35188., 39876., 46253., 52193., 48281., 54365., 39748.,
      44628., 31351., 35123., 22859., 26103., 33172., 37732., 40245., 46025.,
      39713., 45637., 29284., 34036., 22127., 25803., 22595., 26255., 32052.,
      36996., 35645., 41777., 39017., 45037., 33156., 37780., 27751., 31331.,
      25908., 29124., 35952., 40240., 45452., 50684., 43324., 48364., 30192.,
      33968., 23556., 26452., 18681., 20925., 22364., 25292., 27079., 30787.,
      23963., 27655., 10636., 13372., 10197., 12393., 12825., 14685., 19356.,
      22028., 27175., 30755., 30715., 34535., 27916., 31164., 23541., 26121.,
      17444., 19956., 25392., 28912., 34908., 39564., 39180., 44156., 31664.,
      35696., 26996., 30212., 16987., 20423., 24916., 29732., 34853., 40953.,
      39441., 45685., 29732., 34740., 25215., 29083., 23507., 26847., 35188.,
      39876., 46253., 52193., 48281., 54365., 39748., 44628., 31351., 35123.,
      22859., 26103., 33172., 37732., 40245., 46025., 39713., 45637., 29284.,
      34036., 22127., 25803., 20820., 23908., 29296., 33584., 31852., 37212.,
      36572., 41996., 32624., 36912., 27044., 30324., 19313., 21717., 28156.,
      31468., 36239., 40299., 37219., 41263., 28460., 31580., 21709., 24065.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   193.,   293.,   94.,    246.,   460.,   828.,   700.,   1132.,
      940.,   1436.,  1180.,  1740.,  886.,   1198.,  587.,   983.,   1918.,
      2806.,  2470.,  3454.,  3022.,  4102.,  3574.,  4750.,  2399.,  3035.,
      1727.,  2363.,  4678.,  6046.,  5230.,  6694.,  5782.,  7342.,  6334.,
      7990.,  4019.,  4895.,  2867.,  3743.,  7438.,  9286.,  7990.,  9934.,
      8542.,  10582., 9094.,  11230., 5639.,  6755.,  3702.,  4398.,  8764.,
      10220., 9260.,  10780., 9756.,  11340., 10252., 11900., 5966.,  6822.,
      2853.,  3257.,  6498.,  7338.,  6810.,  7682.,  7122.,  8026.,  7434.,
      8370.,  4193.,  4677.,  77.,    193.,   370.,   634.,   810.,   1106.,
      1250.,  1578.,  1690.,  2050.,  1033.,  1229.,  1198.,  1542.,  3052.,
      3804.,  4060.,  4876.,  5068.,  5948.,  6076.,  7020.,  3526.,  4030.,
      3683.,  4367.,  8686.,  10150., 10390., 11950., 12094., 13750., 13798.,
      15550., 7799.,  8723.,  7703.,  8627.,  17206., 19150., 18910., 20950.,
      20614., 22750., 22318., 24550., 12299., 13463., 11723., 12887., 25726.,
      28150., 27430., 29950., 29134., 31750., 30838., 33550., 16799., 18203.,
      10566., 11454., 22876., 24716., 24140., 26044., 25404., 27372., 26668.,
      28700., 14366., 15414., 6765.,  7265.,  14514., 15546., 15210., 16274.,
      15906., 17002., 16602., 17730., 8873.,  9453.,  149.,   361.,   706.,
      1162.,  1530.,  2018.,  2354.,  2874.,  3178.,  3730.,  1873.,  2165.,
      2302.,  2838.,  5644.,  6780.,  7420.,  8620.,  9196.,  10460., 10972.,
      12300., 6166.,  6862.,  6779.,  7751.,  15454., 17494., 18310., 20446.,
      21166., 23398., 24022., 26350., 13199., 14411., 13679., 14891., 29734.,
      32254., 32590., 35206., 35446., 38158., 38302., 41110., 20579., 22031.,
      20579., 22031., 44014., 47014., 46870., 49966., 49726., 52918., 52582.,
      55870., 27959., 29651., 17430., 18510., 36988., 39212., 39020., 41308.,
      41052., 43404., 43084., 45500., 22766., 24006., 10677., 11273., 22530.,
      23754., 23610., 24866., 24690., 25978., 25770., 27090., 13553., 14229.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 9736.,  15816., 13536.,
      21984., 15480., 25784., 17336., 28152., 13536., 21984., 11592., 18184.,
      4670.,  8910.,  9896.,  16232., 13618., 21282., 13602., 21650., 9384.,
      15720., 7118.,  11998., 7550.,  12302., 9896.,  16232., 13106., 20770.,
      12578., 20626., 9384.,  15720., 8142.,  13022., 8712.,  14792., 13536.,
      21984., 16504., 26808., 18360., 29176., 13536., 21984., 10568., 17160.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 12258., 19794., 17688.,
      28248., 19310., 32126., 19710., 33166., 17176., 27736., 15634., 24066.,
      8712.,  14792., 13536., 21984., 16504., 26808., 18360., 29176., 13536.,
      21984., 10568., 17160., 7902.,  12398., 9896.,  16232., 11218., 19138.,
      13250., 21554., 11432., 17768., 9326.,  14462., 7390.,  11886., 9896.,
      16232., 10386., 17794., 11906., 19698., 11432., 17768., 6958.,  11582.,
      9736.,  15816., 13536., 21984., 15480., 25784., 17336., 28152., 13536.,
      21984., 11592., 18184., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 12258., 19794., 17688.,
      28248., 19310., 32126., 19710., 33166., 17176., 27736., 15634., 24066.,
      9538.,  16818., 15640., 26200., 20174., 32734., 22622., 35822., 17176.,
      27736., 11890., 20066., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 4670.,  8910.,  9896.,
      16232., 13618., 21282., 13602., 21650., 9384.,  15720., 7118.,  11998.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      6424.,  9304.,  5592.,  7960.,  4108.,  5548.,  3690.,  5786.,  11188.,
      16148., 15508., 21236., 15092., 20564., 12628., 17844., 9114.,  12106.,
      7834.,  10826., 20628., 26356., 22260., 27732., 17748., 22964., 11188.,
      16148., 8266.,  11130., 7242.,  10106., 15092., 20564., 12628., 17844.,
      16948., 22932., 20628., 26356., 11514., 14250., 10636., 13100., 17112.,
      21528., 10136., 14040., 14040., 18456., 13208., 17112., 4780.,  6476.,
      4766.,  5934.,  11740., 14332., 14204., 17052., 16668., 19772., 10300.,
      12636., 430.,   1214.,  510.,   1422.,  2716.,  4796.,  6204.,  8540.,
      9692.,  12284., 13180., 16028., 8078.,  9630.,  8620.,  10316., 20376.,
      24280., 24280., 28696., 15256., 19160., 4184.,  7576.,  3916.,  5868.,
      4362.,  6714.,  13044., 18516., 18388., 24628., 23092., 29076., 25748.,
      31476., 15930., 19178., 15162., 18410., 23508., 29748., 13876., 19860.,
      14484., 20212., 13044., 18516., 9450.,  12570., 8938.,  12058., 23092.,
      29076., 25748., 31476., 31092., 37588., 23508., 29748., 7066.,  10058.,
      4684.,  6636.,  8280.,  11672., 3352.,  6232.,  5208.,  8600.,  6424.,
      9304.,  2924.,  4108.,  2558.,  3470.,  6812.,  8892.,  8252.,  10588.,
      9692.,  12284., 6396.,  8220.,  270.,   798.,   350.,   1006.,  1884.,
      3452.,  4348.,  6172.,  6812.,  8892.,  9276.,  11612., 5870.,  7166.,
      6380.,  8588.,  16920., 21848., 22872., 28312., 19992., 24920., 15064.,
      19480., 9868.,  12332., 11178., 13786., 27188., 33172., 33556., 40308.,
      26996., 33492., 18388., 24628., 12506., 16010., 12250., 15754., 22292.,
      29044., 17780., 24276., 23508., 29748., 27188., 33172., 16778., 20154.,
      16778., 20154., 26996., 33492., 18388., 24628., 24756., 31764., 22292.,
      29044., 8762.,  12010., 7564.,  10028., 19160., 23576., 20376., 24280.,
      24280., 28696., 15256., 19160., 1708.,  3404.,  350.,   1006.,  1884.,
      3452.,  2300.,  4124.,  2716.,  4796.,  2492.,  3804.,  110.,   382.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12847., 13708., 14599.,
      15520., 18020., 19184., 20388., 21632., 23057., 24500., 25993., 27536.,
      22197., 23612., 25077., 26592., 15924., 17008., 18132., 19296., 12683.,
      13524., 14395., 15296., 10612., 11296., 12004., 12736., 13232., 14144.,
      15088., 16064., 16556., 17728., 18940., 20192., 15580., 16768., 17996.,
      19264., 8752.,  9664.,  10608., 11584., 8068.,  8800.,  9556.,  10336.,
      5509.,  6076.,  6661.,  7264.,  8876.,  9616.,  10380., 11168., 12779.,
      13716., 14683., 15680., 14039., 14972., 15935., 16928., 11356., 12048.,
      12764., 13504., 9657.,  10212., 10785., 11376., 6789.,  7260.,  7749.,
      8256.,  10220., 10896., 11596., 12320., 14315., 15220., 16155., 17120.,
      16055., 17020., 18015., 19040., 14556., 15376., 16220., 17088., 12249.,
      12900., 13569., 14256., 6788.,  7488.,  8212.,  8960.,  9840.,  10816.,
      11824., 12864., 13724., 14944., 16204., 17504., 15500., 16736., 18012.,
      19328., 10992., 11968., 12976., 14016., 9300.,  10048., 10820., 11616.,
      11351., 12156., 12991., 13856., 17028., 18160., 19332., 20544., 22409.,
      23844., 25329., 26864., 23405., 24876., 26397., 27968., 19284., 20464.,
      21684., 22944., 15219., 16132., 17075., 18048., 11039., 11820., 12631.,
      13472., 16036., 17136., 18276., 19456., 19425., 20820., 22265., 23760.,
      19141., 20572., 22053., 23584., 14068., 15216., 16404., 17632., 10619.,
      11508., 12427., 13376., 10855., 11740., 12655., 13600., 15428., 16624.,
      17860., 19136., 17081., 18564., 20097., 21680., 18781., 20236., 21741.,
      23296., 16020., 17136., 18292., 19488., 13443., 14308., 15203., 16128.,
      12564., 13344., 14148., 14976., 17456., 18496., 19568., 20672., 22092.,
      23360., 24668., 26016., 21052., 22272., 23532., 24832., 14640., 15552.,
      16496., 17472., 11428., 12128., 12852., 13600., 9069.,  9612.,  10173.,
      10752., 10828., 11536., 12268., 13024., 13091., 13988., 14915., 15872.,
      11535., 12428., 13351., 14304., 4988.,  5648.,  6332.,  7040.,  4833.,
      5364.,  5913.,  6480.,  6189.,  6636.,  7101.,  7584.,  9356.,  10000.,
      10668., 11360., 13155., 14020., 14915., 15840., 14895., 15820., 16775.,
      17760., 13564., 14352., 15164., 16000., 11457., 12084., 12729., 13392.,
      8420.,  9024.,  9652.,  10304., 12272., 13120., 14000., 14912., 16892.,
      18016., 19180., 20384., 18988., 20192., 21436., 22720., 15344., 16320.,
      17328., 18368., 13108., 13888., 14692., 15520., 8079.,  8908.,  9767.,
      10656., 11876., 13040., 14244., 15488., 16689., 18164., 19689., 21264.,
      18965., 20476., 22037., 23648., 14260., 15472., 16724., 18016., 12139.,
      13076., 14043., 15040., 11351., 12156., 12991., 13856., 17028., 18160.,
      19332., 20544., 22409., 23844., 25329., 26864., 23405., 24876., 26397.,
      27968., 19284., 20464., 21684., 22944., 15219., 16132., 17075., 18048.,
      11039., 11820., 12631., 13472., 16036., 17136., 18276., 19456., 19425.,
      20820., 22265., 23760., 19141., 20572., 22053., 23584., 14068., 15216.,
      16404., 17632., 10619., 11508., 12427., 13376., 10036., 10784., 11556.,
      12352., 14128., 15168., 16240., 17344., 15276., 16576., 17916., 19296.,
      17628., 18944., 20300., 21696., 15792., 16832., 17904., 19008., 13124.,
      13920., 14740., 15584., 9365.,  9948.,  10549., 11168., 13676., 14480.,
      15308., 16160., 17627., 18612., 19627., 20672., 18119., 19100., 20111.,
      21152., 13852., 14608., 15388., 16192., 10569., 11140., 11729., 12336.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   85.,    108.,   133.,   160.,   30.,    64.,    102.,
      144.,   188.,   272.,   364.,   464.,   300.,   400.,   508.,   624.,
      412.,   528.,   652.,   784.,   524.,   656.,   796.,   944.,   406.,
      480.,   558.,   640.,   247.,   340.,   439.,   544.,   854.,   1064.,
      1286.,  1520.,  1118.,  1352.,  1598.,  1856.,  1382.,  1640.,  1910.,
      2192.,  1646.,  1928.,  2222.,  2528.,  1123.,  1276.,  1435.,  1600.,
      787.,   940.,   1099.,  1264.,  2174.,  2504.,  2846.,  3200.,  2438.,
      2792.,  3158.,  3536.,  2702.,  3080.,  3470.,  3872.,  2966.,  3368.,
      3782.,  4208.,  1903.,  2116.,  2335.,  2560.,  1327.,  1540.,  1759.,
      1984.,  3494.,  3944.,  4406.,  4880.,  3758.,  4232.,  4718.,  5216.,
      4022.,  4520.,  5030.,  5552.,  4286.,  4808.,  5342.,  5888.,  2683.,
      2956.,  3235.,  3520.,  1766.,  1936.,  2110.,  2288.,  4204.,  4560.,
      4924.,  5296.,  4444.,  4816.,  5196.,  5584.,  4684.,  5072.,  5468.,
      5872.,  4924.,  5328.,  5740.,  6160.,  2878.,  3088.,  3302.,  3520.,
      1377.,  1476.,  1577.,  1680.,  3146.,  3352.,  3562.,  3776.,  3298.,
      3512.,  3730.,  3952.,  3450.,  3672.,  3898.,  4128.,  3602.,  3832.,
      4066.,  4304.,  2037.,  2156.,  2277.,  2400.,  25.,    52.,    81.,
      112.,   154.,   216.,   282.,   352.,   370.,   440.,   514.,   592.,
      586.,   664.,   746.,   832.,   802.,   888.,   978.,   1072.,  493.,
      540.,   589.,   640.,   558.,   640.,   726.,   816.,   1436.,  1616.,
      1804.,  2000.,  1932.,  2128.,  2332.,  2544.,  2428.,  2640.,  2860.,
      3088.,  2924.,  3152.,  3388.,  3632.,  1702.,  1824.,  1950.,  2080.,
      1759.,  1924.,  2095.,  2272.,  4166.,  4520.,  4886.,  5264.,  5006.,
      5384.,  5774.,  6176.,  5846.,  6248.,  6662.,  7088.,  6686.,  7112.,
      7550.,  8000.,  3787.,  4012.,  4243.,  4480.,  3739.,  3964.,  4195.,
      4432.,  8366.,  8840.,  9326.,  9824.,  9206.,  9704.,  10214., 10736.,
      10046., 10568., 11102., 11648., 10886., 11432., 11990., 12560., 6007.,
      6292.,  6583.,  6880.,  5719.,  6004.,  6295.,  6592.,  12566., 13160.,
      13766., 14384., 13406., 14024., 14654., 15296., 14246., 14888., 15542.,
      16208., 15086., 15752., 16430., 17120., 8227.,  8572.,  8923.,  9280.,
      5174.,  5392.,  5614.,  5840.,  11212., 11664., 12124., 12592., 11836.,
      12304., 12780., 13264., 12460., 12944., 13436., 13936., 13084., 13584.,
      14092., 14608., 7054.,  7312.,  7574.,  7840.,  3321.,  3444.,  3569.,
      3696.,  7130.,  7384.,  7642.,  7904.,  7474.,  7736.,  8002.,  8272.,
      7818.,  8088.,  8362.,  8640.,  8162.,  8440.,  8722.,  9008.,  4365.,
      4508.,  4653.,  4800.,  49.,    100.,   153.,   208.,   298.,   408.,
      522.,   640.,   706.,   824.,   946.,   1072.,  1114.,  1240.,  1370.,
      1504.,  1522.,  1656.,  1794.,  1936.,  901.,   972.,   1045.,  1120.,
      1086.,  1216.,  1350.,  1488.,  2684.,  2960.,  3244.,  3536.,  3564.,
      3856.,  4156.,  4464.,  4444.,  4752.,  5068.,  5392.,  5324.,  5648.,
      5980.,  6320.,  2998.,  3168.,  3342.,  3520.,  3271.,  3508.,  3751.,
      4000.,  7478.,  7976.,  8486.,  9008.,  8894.,  9416.,  9950.,  10496.,
      10310., 10856., 11414., 11984., 11726., 12296., 12878., 13472., 6451.,
      6748.,  7051.,  7360.,  6691.,  6988.,  7291.,  7600.,  14558., 15176.,
      15806., 16448., 15974., 16616., 17270., 17936., 17390., 18056., 18734.,
      19424., 18806., 19496., 20198., 20912., 10111., 10468., 10831., 11200.,
      10111., 10468., 10831., 11200., 21638., 22376., 23126., 23888., 23054.,
      23816., 24590., 25376., 24470., 25256., 26054., 26864., 25886., 26696.,
      27518., 28352., 13771., 14188., 14611., 15040., 8582.,  8848.,  9118.,
      9392.,  18220., 18768., 19324., 19888., 19228., 19792., 20364., 20944.,
      20236., 20816., 21404., 22000., 21244., 21840., 22444., 23056., 11230.,
      11536., 11846., 12160., 5265.,  5412.,  5561.,  5712.,  11114., 11416.,
      11722., 12032., 11650., 11960., 12274., 12592., 12186., 12504., 12826.,
      13152., 12722., 13048., 13378., 13712., 6693.,  6860.,  7029.,  7200.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 4204.,  5532.,  7052.,  8764.,  5840.,  7696.,
      9808.,  12176., 6612.,  8868.,  11444., 14340., 7476.,  9860.,  12564.,
      15588., 5840.,  7696.,  9808.,  12176., 5068.,  6524.,  8172.,  10012.,
      1877.,  2793.,  3853.,  5057.,  4252.,  5644.,  7228.,  9004.,  5971.,
      7647.,  9563.,  11719., 5915.,  7687.,  9699.,  11951., 3996.,  5388.,
      6972.,  8748.,  3021.,  4097.,  5317.,  6681.,  3253.,  4297.,  5485.,
      6817.,  4252.,  5644.,  7228.,  9004.,  5715.,  7391.,  9307.,  11463.,
      5403.,  7175.,  9187.,  11439., 3996.,  5388.,  6972.,  8748.,  3533.,
      4609.,  5829.,  7193.,  3692.,  5020.,  6540.,  8252.,  5840.,  7696.,
      9808.,  12176., 7124.,  9380.,  11956., 14852., 7988.,  10372., 13076.,
      16100., 5840.,  7696.,  9808.,  12176., 4556.,  6012.,  7660.,  9500.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 5307.,  6951.,  8835.,  10959., 7684.,  10004.,
      12644., 15604., 8253.,  11057., 14261., 17865., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 6883.,  8751.,  10859., 13207.,
      3692.,  5020.,  6540.,  8252.,  5840.,  7696.,  9808.,  12176., 7124.,
      9380.,  11956., 14852., 7988.,  10372., 13076., 16100., 5840.,  7696.,
      9808.,  12176., 4556.,  6012.,  7660.,  9500.,  3461.,  4441.,  5565.,
      6833.,  4252.,  5644.,  7228.,  9004.,  4739.,  6479.,  8459.,  10679.,
      5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,  4093.,
      5233.,  6517.,  7945.,  3205.,  4185.,  5309.,  6577.,  4252.,  5644.,
      7228.,  9004.,  4387.,  5999.,  7851.,  9943.,  5099.,  6807.,  8755.,
      10943., 5020.,  6412.,  7996.,  9772.,  2973.,  3985.,  5141.,  6441.,
      4204.,  5532.,  7052.,  8764.,  5840.,  7696.,  9808.,  12176., 6612.,
      8868.,  11444., 14340., 7476.,  9860.,  12564., 15588., 5840.,  7696.,
      9808.,  12176., 5068.,  6524.,  8172.,  10012., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 5307.,  6951.,  8835.,  10959., 7684.,  10004.,
      12644., 15604., 8253.,  11057., 14261., 17865., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 6883.,  8751.,  10859., 13207.,
      3979.,  5559.,  7379.,  9439.,  6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 9861.,  12761., 16061., 19761., 7428.,  9748.,
      12388., 15348., 5043.,  6847.,  8891.,  11175., 4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 1877.,  2793.,  3853.,  5057.,  4252.,  5644.,
      7228.,  9004.,  5971.,  7647.,  9563.,  11719., 5915.,  7687.,  9699.,
      11951., 3996.,  5388.,  6972.,  8748.,  3021.,  4097.,  5317.,  6681.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      2884.,  3540.,  4260.,  5044.,  2532.,  3060.,  3652.,  4308.,  1890.,
      2218.,  2578.,  2970.,  1607.,  2083.,  2607.,  3179.,  5022.,  6166.,
      7406.,  8742.,  7086.,  8422.,  9854.,  11382., 6910.,  8182.,  9550.,
      11014., 5710.,  6918.,  8222.,  9622.,  4207.,  4907.,  5655.,  6451.,
      3567.,  4267.,  5015.,  5811.,  9646.,  10982., 12414., 13942., 10494.,
      11766., 13134., 14598., 8270.,  9478.,  10782., 12182., 5022.,  6166.,
      7406.,  8742.,  3799.,  4467.,  5183.,  5947.,  3287.,  3955.,  4671.,
      5435.,  6910.,  8182.,  9550.,  11014., 5710.,  6918.,  8222.,  9622.,
      7774.,  9174.,  10670., 12262., 9646.,  10982., 12414., 13942., 5439.,
      6075.,  6759.,  7491.,  5026.,  5610.,  6226.,  6874.,  8036.,  9076.,
      10180., 11348., 4612.,  5524.,  6500.,  7540.,  6500.,  7540.,  8644.,
      9812.,  6148.,  7060.,  8036.,  9076.,  2194.,  2586.,  3010.,  3466.,
      2245.,  2521.,  2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  6762.,
      7442.,  8154.,  8898.,  7962.,  8706.,  9482.,  10290., 4874.,  5426.,
      6010.,  6626.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,
      833.,   1114.,  1602.,  2122.,  2674.,  2826.,  3378.,  3962.,  4578.,
      4538.,  5154.,  5802.,  6482.,  6250.,  6930.,  7642.,  8386.,  3853.,
      4225.,  4613.,  5017.,  4114.,  4506.,  4930.,  5386.,  9732.,  10644.,
      11620., 12660., 11620., 12660., 13764., 14932., 7172.,  8084.,  9060.,
      10100., 1700.,  2484.,  3332.,  4244.,  1730.,  2186.,  2674.,  3194.,
      1911.,  2451.,  3039.,  3675.,  5886.,  7158.,  8526.,  9990.,  8462.,
      9926.,  11486., 13142., 10846., 12246., 13742., 15334., 12206., 13542.,
      14974., 16502., 7583.,  8347.,  9159.,  10019., 7199.,  7963.,  8775.,
      9635.,  11022., 12486., 14046., 15702., 6238.,  7638.,  9134.,  10726.,
      6574.,  7910.,  9342.,  10870., 5886.,  7158.,  8526.,  9990.,  4359.,
      5091.,  5871.,  6699.,  4103.,  4835.,  5615.,  6443.,  10846., 12246.,
      13742., 15334., 12206., 13542., 14974., 16502., 14782., 16310., 17934.,
      19654., 11022., 12486., 14046., 15702., 3183.,  3883.,  4631.,  5427.,
      2114.,  2570.,  3058.,  3578.,  3748.,  4532.,  5380.,  6292.,  1348.,
      2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,  2884.,  3540.,
      4260.,  5044.,  1330.,  1594.,  1890.,  2218.,  1173.,  1385.,  1613.,
      1857.,  3162.,  3650.,  4170.,  4722.,  3850.,  4402.,  4986.,  5602.,
      4538.,  5154.,  5802.,  6482.,  2986.,  3410.,  3866.,  4354.,  77.,
      193.,   325.,   473.,   101.,   249.,   413.,   593.,   762.,   1122.,
      1514.,  1938.,  1962.,  2386.,  2842.,  3330.,  3162.,  3650.,  4170.,
      4722.,  4362.,  4914.,  5498.,  6114.,  2781.,  3089.,  3413.,  3753.,
      2930.,  3450.,  4002.,  4586.,  7876.,  9044.,  10276., 11572., 10788.,
      12084., 13444., 14868., 9412.,  10580., 11812., 13108., 7012.,  8052.,
      9156.,  10324., 4642.,  5226.,  5842.,  6490.,  5287.,  5891.,  6543.,
      7243.,  12894., 14294., 15790., 17382., 15982., 17574., 19262., 21046.,
      12734., 14262., 15886., 17606., 8462.,  9926.,  11486., 13142., 5839.,
      6667.,  7543.,  8467.,  5711.,  6539.,  7415.,  8339.,  10350., 11942.,
      13630., 15414., 8126.,  9654.,  11278., 12998., 11022., 12486., 14046.,
      15702., 12894., 14294., 15790., 17382., 7991.,  8787.,  9631.,  10523.,
      7991.,  8787.,  9631.,  10523., 12734., 14262., 15886., 17606., 8462.,
      9926.,  11486., 13142., 11550., 13206., 14958., 16806., 10350., 11942.,
      13630., 15414., 3999.,  4763.,  5575.,  6435.,  3490.,  4074.,  4690.,
      5338.,  9060.,  10100., 11204., 12372., 9732.,  10644., 11620., 12660.,
      11620., 12660., 13764., 14932., 7172.,  8084.,  9060.,  10100., 658.,
      1050.,  1474.,  1930.,  101.,   249.,   413.,   593.,   762.,   1122.,
      1514.,  1938.,  938.,   1362.,  1818.,  2306.,  1114.,  1602.,  2122.,
      2674.,  1098.,  1394.,  1722.,  2082.,  29.,    81.,    149.,   233.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2938.,  4650.,  6746.,  9226.,  11956., 16916.,
      22644., 29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692.,
      31188., 8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082.,
      5466.,  7946.,  10810., 14058., 19444., 24916., 31156., 38164., 14004.,
      18964., 24692., 31188., 8564.,  13012., 18228., 24212., 11956., 16916.,
      22644., 29140., 12090., 15338., 18970., 22986., 7354.,  9578.,  12186.,
      15178., 14004., 18964., 24692., 31188., 8564.,  13012., 18228., 24212.,
      11956., 16916., 22644., 29140., 19444., 24916., 31156., 38164., 12954.,
      15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,  6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832., 24504.,
      29688., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,  11260.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.,  2588.,  3644.,  4956.,  6524.,  8888.,  12024.,
      15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456.,
      27640., 6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,
      5306.,  7530.,  10138., 13130., 18740., 24724., 31476., 38996., 22132.,
      28628., 35892., 43924., 20788., 26772., 33524., 41044., 19444., 24916.,
      31156., 38164., 8858.,  11850., 15226., 18986., 9882.,  12874., 16250.,
      20010., 22132., 28628., 35892., 43924., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 18740., 24724., 31476., 38996., 16506.,
      20266., 24410., 28938., 5626.,  8362.,  11482., 14986., 20788., 26772.,
      33524., 41044., 19444., 24916., 31156., 38164., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 11226., 14730., 18618., 22890.,
      7004.,  8572.,  10396., 12476., 10936., 14072., 17720., 21880., 4792.,
      7928.,  11576., 15736., 11576., 15736., 20408., 25592., 17720., 21880.,
      26552., 31736., 10396., 12476., 14812., 17404., 350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.,
      540.,   1596.,  2908.,  4476.,  4792.,  7928.,  11576., 15736., 11576.,
      15736., 20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 1884.,  3452.,  5276.,  7356.,  2938.,  4650.,  6746.,
      9226.,  11956., 16916., 22644., 29140., 19444., 24916., 31156., 38164.,
      14004., 18964., 24692., 31188., 8564.,  13012., 18228., 24212., 6490.,
      8970.,  11834., 15082., 5466.,  7946.,  10810., 14058., 19444., 24916.,
      31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012., 18228.,
      24212., 11956., 16916., 22644., 29140., 12090., 15338., 18970., 22986.,
      7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188., 8564.,
      13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444., 24916.,
      31156., 38164., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 4252.,
      6332.,  8668.,  11260., 30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,   560.,   820.,   940.,   1060.,  980.,   837.,   892.,   1360.,
      1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,
      4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,
      4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5296.,
      7440.,  9780.,  10090., 10400., 8752.,  6892.,  5445.,  7580.,  9880.,
      10150., 10420., 8696.,  6795.,  3438.,  4970.,  6700.,  6820.,  6940.,
      5978.,  4806.,  6478.,  9200.,  12210., 12420., 12630., 10720., 8506.,
      10640., 14950., 19650., 19975., 20300., 17070., 13430., 11900., 16700.,
      21925., 22250., 22575., 18960., 14900., 13160., 18450., 24200., 24525.,
      24850., 20850., 16370., 13822., 19200., 24970., 25280., 25590., 21296.,
      16594., 12942., 17870., 23110., 23380., 23650., 19574., 15174., 6525.,
      9380.,  12580., 12700., 12820., 10976., 8775.,  12064., 17040., 22500.,
      22710., 22920., 19344., 15268., 19460., 27200., 35575., 35900., 36225.,
      30300., 23720., 20720., 28950., 37850., 38175., 38500., 32190., 25190.,
      21980., 30700., 40125., 40450., 40775., 34080., 26660., 22348., 30960.,
      40160., 40470., 40780., 33840., 26296., 20439., 28160., 36340., 36610.,
      36880., 30452., 23553.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,
      89.,   110.,  96.,   60.,   42.,   114.,  219.,  264.,  309.,  252.,
      150.,  102.,  249.,  444.,  489.,  534.,  417.,  240.,  162.,  384.,
      669.,  714.,  759.,  582.,  330.,  196.,  440.,  734.,  773.,  812.,
      600.,  330.,  147.,  322.,  526.,  550.,  574.,  416.,  225.,  10.,
      31.,   64.,   97.,   130.,  103.,  60.,   73.,   176.,  311.,  386.,
      461.,  348.,  195.,  204.,  465.,  786.,  912.,  1038., 765.,  420.,
      399.,  870.,  1416., 1542., 1668., 1200., 645.,  594.,  1275., 2046.,
      2172., 2298., 1635., 870.,  529.,  1124., 1787., 1880., 1973., 1392.,
      735.,  336.,  709.,  1120., 1171., 1222., 857.,  450.,  19.,   58.,
      118.,  178.,  238.,  184.,  105.,  136.,  320.,  554.,  683.,  812.,
      600.,  330.,  366.,  816.,  1353., 1560., 1767., 1278., 690.,  696.,
      1491., 2388., 2595., 2802., 1983., 1050., 1026., 2166., 3423., 3630.,
      3837., 2688., 1410., 862.,  1808., 2840., 2987., 3134., 2184., 1140.,
      525.,  1096., 1714., 1792., 1870., 1298., 675.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,  10160.,
      14420., 16060., 17700., 15920., 13292., 13735., 20460., 28133., 30235.,
      32081., 27308., 21235., 22261., 31876., 41183., 42005., 42571., 34980.,
      26065., 26947., 38172., 47833., 47375., 46661., 37532., 27055., 27020.,
      38000., 45988., 44140., 42036., 32688., 22172., 20709., 29124., 33023.,
      29585., 25891., 18436., 10089., 10151., 14572., 19541., 19255., 20185.,
      17484., 14139., 17172., 23888., 31356., 30500., 32140., 27536., 22052.,
      25417., 35028., 45691., 44465., 47015., 40116., 32005., 23703., 32364.,
      42101., 39595., 42145., 36268., 29155., 18149., 24580., 32111., 28133.,
      30235., 26148., 20801., 20708., 29648., 39660., 40628., 41340., 34384.,
      26228., 24507., 34492., 45425., 44803., 43925., 35612., 26255., 3501.,
      5476.,  7895.,  8825.,  9755.,  8932.,  7569.,  8396.,  12656., 17700.,
      19340., 20980., 18672., 15452., 16363., 23740., 32081., 33671., 35005.,
      30332., 24535., 23609., 32596., 42571., 42881., 42935., 36724., 29365.,
      27015., 36332., 46661., 45691., 44465., 37996., 30355., 25724., 33456.,
      42036., 39676., 37060., 31664., 25292., 17809., 21556., 25891., 21941.,
      17735., 15604., 12789.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   150.,   105.,   58.,    204.,
      454.,   610.,   766.,   684.,   434.,   279.,   786.,   1545.,  1887.,
      2229.,  1842.,  1107.,  729.,   1806.,  3255.,  3597.,  3939.,  3102.,
      1797.,  1179.,  2826.,  4965.,  5307.,  5649.,  4362.,  2487.,  1474.,
      3324.,  5566.,  5866.,  6166.,  4572.,  2522.,  1121.,  2462.,  4031.,
      4217.,  4403.,  3198.,  1733.,  59.,    202.,   437.,   695.,   953.,
      762.,   447.,   526.,   1284.,  2290.,  2878.,  3466.,  2628.,  1478.,
      1521.,  3486.,  5919.,  6909.,  7899.,  5838.,  3213.,  3051.,  6666.,
      10869., 11859., 12849., 9258.,  4983.,  4581.,  9846.,  15819., 16809.,
      17799., 12678., 6753.,  4102.,  8724.,  13882., 14614., 15346., 10836.,
      5726.,  2615.,  5522.,  8729.,  9131.,  9533.,  6690.,  3515.,  113.,
      382.,   815.,   1289.,  1763.,  1374.,  789.,   994.,   2364.,  4126.,
      5146.,  6166.,  4572.,  2522.,  2763.,  6186.,  10293., 11931., 13569.,
      9834.,  5319.,  5373.,  11526., 18483., 20121., 21759., 15414., 8169.,
      7983.,  16866., 26673., 28311., 29949., 20994., 11019., 6730.,  14124.,
      22198., 23362., 24526., 17100., 8930.,  4109.,  8582.,  13427., 14045.,
      14663., 10182., 5297.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776., 14048.,
      15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134.,
      23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536.,
      13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 18600.,
      24864., 25944., 26424., 22488., 16416., 8872.,  11694., 17928., 21138.,
      18474., 17538., 12424., 9758.,  5094.,  8424.,  12506., 13874., 17610.,
      16872., 14102., 9608.,  10144., 15608., 17688., 20088., 16736., 14920.,
      15498., 18648., 22134., 23454., 27142., 21528., 18714., 17074., 20792.,
      25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230.,
      22134., 16536., 13354., 19912., 22816., 26424., 22488., 20600., 12000.,
      8328.,  14102., 18984., 18474., 17538., 15066., 11560., 7558.,  6030.,
      9480.,  13874., 17610., 20002., 18184., 14142., 7784.,  12192., 17688.,
      20088., 20952., 20128., 17000., 13410., 16312., 23454., 27142., 28782.,
      23672., 19186., 15498., 18648., 22134., 23454., 27142., 21528., 18714.,
      17074., 20792., 25230., 22134., 23454., 18872., 14850., 16808., 22496.,
      22488., 20600., 17496., 12512., 10664., 14142., 15624., 17538., 15066.,
      15154., 9992.,  6702.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,   1432.,
      3284.,  4484.,  5684.,  5144.,  3292.,  2010.,  5796.,  11550., 14214.,
      16878., 14052., 8490.,  5490.,  13076., 22566., 22542., 25206., 19540.,
      11202., 8330.,  15620., 24750., 21654., 24318., 18884., 10842., 7708.,
      10584., 14516., 8036.,  10388., 8536.,  5116.,  1966.,  4652.,  8122.,
      9586.,  11050., 8428.,  4766.,  390.,   1436.,  3202.,  5242.,  7282.,
      5852.,  3446.,  3980.,  9784.,  17540., 22196., 26852., 20408., 11500.,
      11730., 26324., 43590., 49390., 55190., 37140., 20386., 23850., 36548.,
      51854., 45750., 51550., 31236., 17402., 26114., 32820., 42070., 32894.,
      38694., 19188., 11346., 19372., 9848.,  17892., 19988., 23748., 15096.,
      8460.,  4630.,  5820.,  7346.,  8490.,  9634.,  1148.,  902.,   110.,
      428.,   1018.,  1714.,  2410.,  2156.,  1374.,  1180.,  3288.,  6452.,
      8420.,  10388., 8536.,  5116.,  4170.,  10500., 19182., 22998., 26814.,
      21060., 12186., 9570.,  19572., 31862., 30942., 34758., 26292., 14770.,
      12282., 21860., 33662., 29670., 33486., 25380., 14282., 10300., 13976.,
      18964., 11204., 14324., 11416., 6684.,  2558.,  5964.,  10282., 12130.,
      13978., 10508., 5870.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 16115., 17360., 23100., 24800., 30925., 33100., 32175.,
      34400., 33425., 35700., 28620., 30480., 22895., 24320., 20044., 21184.,
      28208., 29760., 37140., 39120., 38340., 40360., 39540., 41600., 33328.,
      35008., 26284., 27568., 20817., 21780., 29012., 30320., 37855., 39520.,
      38905., 40600., 39955., 41680., 33380., 34784., 26109., 27180., 12079.,
      12984., 17156., 18344., 22757., 24240., 22055., 23440., 22505., 23920.,
      19172., 20328., 15267., 16152., 19996., 21048., 27472., 28864., 35572.,
      37320., 33940., 35600., 34740., 36440., 29200., 30592., 22972., 24040.,
      28489., 29760., 38652., 40344., 49587., 51720., 47125., 49180., 48375.,
      50480., 40444., 42168., 31661., 32984., 21927., 23024., 29244., 30704.,
      37217., 39060., 33475., 35240., 34725., 36540., 29292., 30784., 23123.,
      24272., 11525., 12448., 14716., 15944., 18447., 20000., 13425., 14900.,
      14675., 16200., 13020., 14280., 10745., 11720., 9964.,  10744., 14288.,
      15360., 19140., 20520., 20340., 21760., 21540., 23000., 18448., 19648.,
      14764., 15688., 11907., 12600., 16772., 17720., 22105., 23320., 23155.,
      24400., 24205., 25480., 20420., 21464., 16119., 16920., 9081.,  9972.,
      13268., 14480., 18055., 19600., 18505., 20080., 18955., 20560., 16484.,
      17792., 13365., 14364., 17740., 19072., 25392., 27200., 33940., 36240.,
      34740., 37080., 35540., 37920., 30384., 32320., 24268., 25744., 29787.,
      31504., 41788., 44032., 54773., 57564., 55127., 57840., 55225., 57860.,
      46348., 48496., 36407., 38048., 32185., 33728., 43900., 45912., 56483.,
      58984., 55557., 57980., 54375., 56720., 45436., 47352., 35549., 37016.,
      30743., 32112., 40892., 42672., 51793., 54004., 49587., 51720., 47125.,
      49180., 39404., 41088., 30851., 32144., 25100., 26160., 32112., 33472.,
      39668., 41344., 36132., 37720., 32340., 33840., 27120., 28352., 21292.,
      22240., 14261., 14940., 16308., 17152., 18643., 19664., 13677., 14600.,
      8455.,  9280.,  7460.,  8144.,  6129.,  6660.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,    64.,    55.,
      88.,    62.,    88.,    45.,    60.,    18.,    40.,    76.,    128.,
      182.,   272.,   254.,   356.,   326.,   440.,   300.,   384.,   194.,
      240.,   111.,   168.,   330.,   456.,   669.,   876.,   831.,   1056.,
      993.,   1236.,  834.,   1008.,  507.,   600.,   321.,   408.,   810.,
      996.,   1479.,  1776.,  1641.,  1956.,  1803.,  2136.,  1434.,  1668.,
      837.,   960.,   531.,   648.,   1290.,  1536.,  2289.,  2676.,  2451.,
      2856.,  2613.,  3036.,  2034.,  2328.,  1167.,  1320.,  690.,   784.,
      1564.,  1760.,  2630.,  2936.,  2774.,  3092.,  2918.,  3248.,  2172.,
      2400.,  1202.,  1320.,  533.,   588.,   1174.,  1288.,  1927.,  2104.,
      2017.,  2200.,  2107.,  2296.,  1534.,  1664.,  833.,   900.,   19.,
      40.,    78.,    124.,   181.,   256.,   307.,   388.,   433.,   520.,
      350.,   412.,   207.,   240.,   234.,   292.,   580.,   704.,   1046.,
      1244.,  1334.,  1544.,  1622.,  1844.,  1236.,  1392.,  698.,   780.,
      705.,   816.,   1626.,  1860.,  2775.,  3144.,  3261.,  3648.,  3747.,
      4152.,  2778.,  3060.,  1533.,  1680.,  1455.,  1596.,  3186.,  3480.,
      5205.,  5664.,  5691.,  6168.,  6177.,  6672.,  4458.,  4800.,  2403.,
      2580.,  2205.,  2376.,  4746.,  5100.,  7635.,  8184.,  8121.,  8688.,
      8607.,  9192.,  6138.,  6540.,  3273.,  3480.,  1986.,  2116.,  4228.,
      4496.,  6734.,  7148.,  7094.,  7520.,  7454.,  7892.,  5268.,  5568.,
      2786.,  2940.,  1271.,  1344.,  2686.,  2836.,  4249.,  4480.,  4447.,
      4684.,  4645.,  4888.,  3262.,  3428.,  1715.,  1800.,  37.,    76.,
      150.,   232.,   343.,   472.,   577.,   712.,   811.,   952.,   638.,
      736.,   369.,   420.,   450.,   544.,   1084.,  1280.,  1910.,  2216.,
      2414.,  2732.,  2918.,  3248.,  2172.,  2400.,  1202.,  1320.,  1299.,
      1464.,  2922.,  3264.,  4881.,  5412.,  5691.,  6240.,  6501.,  7068.,
      4722.,  5112.,  2559.,  2760.,  2589.,  2784.,  5562.,  5964.,  8931.,
      9552.,  9741.,  10380., 10551., 11208., 7482.,  7932.,  3969.,  4200.,
      3879.,  4104.,  8202.,  8664.,  12981., 13692., 13791., 14520., 14601.,
      15348., 10242., 10752., 5379.,  5640.,  3282.,  3448.,  6892.,  7232.,
      10838., 11360., 11414., 11948., 11990., 12536., 8364.,  8736.,  4370.,
      4560.,  2009.,  2100.,  4198.,  4384.,  6571.,  6856.,  6877.,  7168.,
      7183.,  7480.,  4990.,  5192.,  2597.,  2700.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 28171., 31927., 39444., 44516., 47477., 53769., 43169.,
      49349., 37645., 43457., 25620., 30180., 16707., 20111., 22620., 25804.,
      31824., 36240., 35172., 40692., 39892., 45476., 41348., 46740., 34704.,
      38864., 26748., 29804., 22045., 24593., 31820., 35324., 40931., 45231.,
      41911., 46195., 37067., 41079., 25164., 28156., 16101., 18233., 9409.,
      11237., 14524., 17068., 20735., 24091., 22035., 25375., 25575., 29155.,
      23612., 26668., 20169., 22605., 16780., 19260., 23888., 27280., 32372.,
      36804., 31844., 36340., 36116., 40932., 29904., 33808., 25580., 28700.,
      19719., 23171., 26788., 31284., 35385., 41085., 32101., 37689., 35665.,
      41397., 25508., 30004., 22783., 26395., 23507., 27103., 32884., 37572.,
      43885., 49825., 43673., 49501., 44677., 50649., 34548., 39236., 29707.,
      33463., 28319., 32059., 34884., 39764., 43169., 49349., 37645., 43457.,
      35385., 41085., 21188., 25556., 18327., 21715., 25388., 28764., 27728.,
      32144., 39892., 45476., 41348., 46740., 41780., 46980., 32976., 36880.,
      25484., 28476., 24201., 26893., 32476., 35916., 41911., 46195., 37067.,
      41079., 31199., 34939., 17308., 19980., 11473., 13493., 10029., 11745.,
      15436., 17916., 22035., 25375., 25575., 29155., 29115., 32935., 26636.,
      29884., 22581., 25161., 15388., 17804., 22864., 26256., 31844., 36340.,
      36116., 40932., 40388., 45524., 33168., 37328., 28220., 31532., 16091.,
      19271., 23252., 27556., 32101., 37689., 35665., 41397., 38717., 44593.,
      29652., 34468., 26131., 29983., 22951., 26275., 32420., 36916., 43673.,
      49501., 44677., 50649., 45169., 51285., 38692., 43700., 33055., 37051.,
      22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085., 32101.,
      37689., 23604., 28036., 19435., 22807., 20284., 23596., 31312., 35728.,
      41348., 46740., 41780., 46980., 41188., 46196., 32464., 36368., 23708.,
      26636., 24117., 26697., 32620., 35996., 37067., 41079., 31199., 34939.,
      24307., 27775., 13228., 15836., 6333.,  8241.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,   516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244.,  2900.,  1466.,
      1826.,  783.,   1227.,  2406.,  3390.,  4965.,  6585.,  6225.,  7989.,
      7485.,  9393.,  6342.,  7710.,  3879.,  4611.,  2403.,  3087.,  5934.,
      7142.,  10369., 12197., 10413., 12129., 11673., 13533., 9102.,  10438.,
      5243.,  5959.,  3831.,  4499.,  7222.,  8398.,  11485., 13265., 9993.,
      11661., 11253., 13065., 8790.,  10094., 5071.,  5771.,  3610.,  4098.,
      4900.,  5684.,  6686.,  7830.,  3526.,  4510.,  4654.,  5734.,  3876.,
      4660.,  2346.,  2770.,  893.,   1073.,  2130.,  2522.,  3743.,  4379.,
      4451.,  5135.,  5159.,  5891.,  3954.,  4474.,  2245.,  2521.,  113.,
      277.,   538.,   898.,   1307.,  1895.,  2303.,  2939.,  3299.,  3983.,
      2682.,  3170.,  1593.,  1853.,  1762.,  2218.,  4404.,  5380.,  7990.,
      9550.,  10270., 11926., 12550., 14302., 9588.,  10820., 5426.,  6074.,
      5427.,  6303.,  12366., 13958., 20593., 22997., 23421., 25969., 26249.,
      28941., 17710., 19430., 9739.,  10647., 11367., 12483., 17366., 19182.,
      24621., 27233., 21625., 24125., 24453., 27097., 14774., 16462., 8255.,
      9147.,  12507., 13607., 15518., 17302., 19753., 22317., 15221., 17673.,
      18049., 20645., 8766.,  10422., 5235.,  6111.,  9298.,  10074., 4372.,
      5476.,  8198.,  9694.,  9326.,  10662., 11158., 12590., 7124.,  7972.,
      4002.,  4458.,  2153.,  2477.,  2698.,  3122.,  3395.,  3951.,  3943.,
      4547.,  4491.,  5143.,  426.,   722.,   369.,   533.,   29.,    81.,
      146.,   282.,   383.,   635.,   707.,   1007.,  1031.,  1379.,  946.,
      1210.,  613.,   761.,   474.,   706.,   1380.,  1908.,  2782.,  3670.,
      3718.,  4702.,  4654.,  5734.,  3876.,  4660.,  2346.,  2770.,  1815.,
      2355.,  4662.,  5838.,  8637.,  10545., 10473., 12525., 12309., 14505.,
      9750.,  11310., 5679.,  6507.,  4395.,  5175.,  9086.,  10486., 14873.,
      16989., 14469., 16473., 16305., 18453., 12382., 13910., 6979.,  7791.,
      5759.,  6523.,  10246., 11614., 15797., 17865., 13857., 15813., 15693.,
      17793., 11942., 13438., 6743.,  7539.,  4874.,  5426.,  6532.,  7444.,
      8814.,  10150., 5014.,  6190.,  6526.,  7798.,  5252.,  6164.,  3098.,
      3586.,  1173.,  1385.,  2754.,  3210.,  4775.,  5507.,  5675.,  6455.,
      6575.,  7403.,  4962.,  5546.,  2781.,  3089.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 14466., 22258., 16664., 27224., 21006., 34078., 18014.,
      31214., 22894., 35710., 16664., 27224., 13090., 21138., 9384.,  15720.,
      14560., 23008., 15640., 26200., 17176., 27736., 15640., 26200., 14560.,
      23008., 9384.,  15720., 6286.,  10654., 8360.,  14696., 15138., 23186.,
      12754., 20674., 12418., 20210., 8360.,  14696., 8494.,  13118., 8062.,
      12814., 10920., 17256., 9522.,  17186., 12770., 20306., 13266., 21186.,
      10920., 17256., 5342.,  9838.,  11944., 18280., 12512., 20960., 17176.,
      27736., 15640., 26200., 19224., 29784., 12512., 20960., 9896.,  16232.,
      11218., 19138., 18200., 28760., 19902., 32846., 21006., 34078., 18014.,
      31214., 18200., 28760., 13426., 21602., 10722., 18258., 14616., 25176.,
      22894., 35710., 19902., 32846., 21006., 34078., 14616., 25176., 14466.,
      22258., 11570., 19234., 18200., 28760., 18014., 31214., 22894., 35710.,
      19902., 32846., 18200., 28760., 10706., 18626., 11944., 18280., 12512.,
      20960., 17176., 27736., 15640., 26200., 19224., 29784., 12512., 20960.,
      9896.,  16232., 5342.,  9838.,  10920., 17256., 12754., 20674., 12418.,
      20210., 11378., 19554., 10920., 17256., 8062.,  12814., 7630.,  12510.,
      8360.,  14696., 12770., 20306., 13266., 21186., 12418., 20210., 8360.,
      14696., 8494.,  13118., 9384.,  15720., 14560., 23008., 15640., 26200.,
      19224., 29784., 15640., 26200., 14560., 23008., 9384.,  15720., 14466.,
      22258., 16664., 27224., 21006., 34078., 18014., 31214., 22894., 35710.,
      16664., 27224., 13090., 21138., 11218., 19138., 18200., 28760., 19902.,
      32846., 21006., 34078., 18014., 31214., 18200., 28760., 13426., 21602.,
      10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846., 21006.,
      34078., 14616., 25176., 14466., 22258., 9384.,  15720., 14560., 23008.,
      15640., 26200., 19224., 29784., 15640., 26200., 14560., 23008., 9384.,
      15720., 8494.,  13118., 10408., 16744., 12418., 20210., 11378., 19554.,
      15138., 23186., 10408., 16744., 7630.,  12510.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3420.,  4988.,  2558.,  3470.,  700.,   2012.,  3768.,  6904.,
      9716.,  15188., 13396., 18612., 15028., 19988., 9912.,  13048., 6652.,
      8476.,  5210.,  7690.,  14996., 20724., 29486., 38206., 30590., 39438.,
      29646., 38622., 15508., 21236., 5882.,  8618.,  11146., 14522., 28020.,
      34516., 39102., 48462., 29326., 37790., 22238., 30830., 19188., 24660.,
      10666., 13274., 10298., 13546., 19924., 26164., 29646., 38622., 26654.,
      35758., 33902., 43134., 23508., 29748., 5210.,  7690.,  15484., 18332.,
      23480., 28664., 20404., 27412., 26644., 33396., 26740., 33236., 16696.,
      20856., 700.,   2012.,  6974.,  8398.,  16668., 19772., 20506., 24522.,
      24074., 28474., 14714., 18474., 1180.,  3260.,  30.,    174.,   110.,
      382.,   636.,   1436.,  1834.,  3418.,  3610.,  5578.,  5386.,  7738.,
      5372.,  7196.,  3662.,  4702.,  2140.,  3708.,  7160.,  10808., 15572.,
      21812., 18740., 24724., 19860., 25588., 12280., 15928., 8092.,  10172.,
      7242.,  10106., 19188., 24660., 35198., 44046., 34510., 43486., 31774.,
      40878., 12020., 17492., 8938.,  12058., 14970., 18730., 23508., 29748.,
      35854., 45342., 22238., 30830., 29742., 38462., 21332., 26548., 13466.,
      16458., 13866., 17498., 21044., 27028., 31774., 40878., 26990., 36222.,
      32446., 41806., 16948., 22932., 7754.,  10618., 18460., 21564., 12920.,
      17592., 26132., 32884., 29812., 36308., 27348., 33588., 13304., 16952.,
      1628.,  3196.,  8078.,  9630.,  10300., 12636., 13706., 17082., 15994.,
      19754., 3306.,  6426.,  2492.,  3804.,  110.,   382.,   190.,   590.,
      1052.,  2108.,  2842.,  4810.,  5386.,  7738.,  7930.,  10666., 7324.,
      9404.,  4766.,  5934.,  3580.,  5404.,  10552., 14712., 21428., 28436.,
      24084., 30836., 24692., 31188., 14648., 18808., 9532.,  11868., 8634.,
      10858., 21332., 26548., 38862., 47838., 36382., 45486., 31854., 41086.,
      17364., 23604., 11994., 15498., 7914.,  11034., 16948., 22932., 30558.,
      40174., 29486., 38206., 35198., 44046., 26164., 32148., 16266., 19642.,
      12698., 15690., 20116., 25844., 31854., 41086., 25278., 34638., 28942.,
      38430., 23316., 30068., 10298., 13546., 6460.,  8796.,  16696., 20856.,
      29812., 36308., 30932., 37172., 25908., 31892., 16696., 20856., 2556.,
      4380.,  350.,   1006.,  1884.,  3452.,  4858.,  7594.,  5866.,  8986.,
      6234.,  8714.,  4444.,  6012.,  190.,   590.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 13631., 14540., 15479., 16448., 19108.,
      20336., 21604., 22912., 22977., 24500., 26073., 27696., 20837., 22332.,
      23877., 25472., 18121., 19524., 20977., 22480., 12260., 13360., 14500.,
      15680., 7943.,  8764.,  9615.,  10496., 10924., 11696., 12492., 13312.,
      15376., 16448., 17552., 18688., 16916., 18256., 19636., 21056., 19268.,
      20624., 22020., 23456., 20020., 21328., 22676., 24064., 16848., 17856.,
      18896., 19968., 13004., 13744., 14508., 15296., 10713., 11332., 11969.,
      12624., 15484., 16336., 17212., 18112., 19943., 20988., 22063., 23168.,
      20435., 21476., 22547., 23648., 18047., 19020., 20023., 21056., 12220.,
      12944., 13692., 14464., 7793.,  8308.,  8841.,  9392.,  4485.,  4924.,
      5381.,  5856.,  6956.,  7568.,  8204.,  8864.,  9963.,  10772., 11611.,
      12480., 10615., 11420., 12255., 13120., 12355., 13220., 14115., 15040.,
      11436., 12176., 12940., 13728., 9789.,  10380., 10989., 11616., 8092.,
      8688.,  9308.,  9952.,  11536., 12352., 13200., 14080., 15652., 16720.,
      17828., 18976., 15380., 16464., 17588., 18752., 17476., 18640., 19844.,
      21088., 14480., 15424., 16400., 17408., 12412., 13168., 13948., 14752.,
      9443.,  10276., 11139., 12032., 12852., 13936., 15060., 16224., 17005.,
      18380., 19805., 21280., 15377., 16724., 18121., 19568., 17141., 18524.,
      19957., 21440., 12212., 13296., 14420., 15584., 10955., 11828., 12731.,
      13664., 11319., 12188., 13087., 14016., 15876., 17008., 18180., 19392.,
      21225., 22660., 24145., 25680., 21133., 22540., 23997., 25504., 21617.,
      23060., 24553., 26096., 16708., 17840., 19012., 20224., 14399., 15308.,
      16247., 17216., 13707., 14612., 15547., 16512., 16852., 18032., 19252.,
      20512., 20837., 22332., 23877., 25472., 18121., 19524., 20977., 22480.,
      17005., 18380., 19805., 21280., 10068., 11120., 12212., 13344., 8755.,
      9572.,  10419., 11296., 12284., 13104., 13948., 14816., 13328., 14400.,
      15504., 16640., 19268., 20624., 22020., 23456., 20020., 21328., 22676.,
      24064., 20260., 21520., 22820., 24160., 16016., 16960., 17936., 18944.,
      12380., 13104., 13852., 14624., 11773., 12428., 13101., 13792., 15820.,
      16656., 17516., 18400., 20435., 21476., 22547., 23648., 18047., 19020.,
      20023., 21056., 15147., 16052., 16987., 17952., 8332.,  8976.,  9644.,
      10336., 5493.,  5980.,  6485.,  7008.,  4809.,  5220.,  5649.,  6096.,
      7420.,  8016.,  8636.,  9280.,  10615., 11420., 12255., 13120., 12355.,
      13220., 14115., 15040., 14095., 15020., 15975., 16960., 12924., 13712.,
      14524., 15360., 10977., 11604., 12249., 12912., 7404.,  7984.,  8588.,
      9216.,  11024., 11840., 12688., 13568., 15380., 16464., 17588., 18752.,
      17476., 18640., 19844., 21088., 19572., 20816., 22100., 23424., 16080.,
      17088., 18128., 19200., 13708., 14512., 15340., 16192., 7663.,  8428.,
      9223.,  10048., 11108., 12144., 13220., 14336., 15377., 16724., 18121.,
      19568., 17141., 18524., 19957., 21440., 18649., 20068., 21537., 23056.,
      14244., 15408., 16612., 17856., 12599., 13532., 14495., 15488., 11075.,
      11876., 12707., 13568., 15668., 16752., 17876., 19040., 21133., 22540.,
      23997., 25504., 21617., 23060., 24553., 26096., 21845., 23324., 24853.,
      26432., 18740., 19952., 21204., 22496., 16043., 17012., 18011., 19040.,
      10903., 11740., 12607., 13504., 14084., 15216., 16388., 17600., 18121.,
      19524., 20977., 22480., 17005., 18380., 19805., 21280., 15377., 16724.,
      18121., 19568., 11268., 12336., 13444., 14592., 9311.,  10124., 10967.,
      11840., 9740.,  10544., 11372., 12224., 15120., 16192., 17296., 18432.,
      20020., 21328., 22676., 24064., 20260., 21520., 22820., 24160., 19988.,
      21200., 22452., 23744., 15760., 16704., 17680., 18688., 11500., 12208.,
      12940., 13696., 11745., 12372., 13017., 13680., 15900., 16720., 17564.,
      18432., 18047., 19020., 20023., 21056., 15147., 16052., 16987., 17952.,
      11735., 12572., 13439., 14336., 6300.,  6928.,  7580.,  8256.,  2937.,
      3396.,  3873.,  4368.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   202.,   248.,   298.,   352.,   153.,   180.,   209.,
      240.,   34.,    72.,    114.,   160.,   212.,   304.,   404.,   512.,
      566.,   728.,   902.,   1088.,  830.,   1016.,  1214.,  1424.,  1094.,
      1304.,  1526.,  1760.,  1044.,  1200.,  1364.,  1536.,  690.,   776.,
      866.,   960.,   339.,   444.,   555.,   672.,   1086.,  1320.,  1566.,
      1824.,  2289.,  2676.,  3081.,  3504.,  2901.,  3324.,  3765.,  4224.,
      3513.,  3972.,  4449.,  4944.,  3006.,  3336.,  3678.,  4032.,  1851.,
      2028.,  2211.,  2400.,  1119.,  1284.,  1455.,  1632.,  2886.,  3240.,
      3606.,  3984.,  5349.,  5916.,  6501.,  7104.,  5961.,  6564.,  7185.,
      7824.,  6573.,  7212.,  7869.,  8544.,  5286.,  5736.,  6198.,  6672.,
      3111.,  3348.,  3591.,  3840.,  1899.,  2124.,  2355.,  2592.,  4686.,
      5160.,  5646.,  6144.,  8409.,  9156.,  9921.,  10704., 9021.,  9804.,
      10605., 11424., 9633.,  10452., 11289., 12144., 7566.,  8136.,  8718.,
      9312.,  4371.,  4668.,  4971.,  5280.,  2578.,  2760.,  2946.,  3136.,
      5876.,  6256.,  6644.,  7040.,  9926.,  10520., 11126., 11744., 10478.,
      11096., 11726., 12368., 11030., 11672., 12326., 12992., 8244.,  8688.,
      9140.,  9600.,  4578.,  4808.,  5042.,  5280.,  2025.,  2132.,  2241.,
      2352.,  4474.,  4696.,  4922.,  5152.,  7363.,  7708.,  8059.,  8416.,
      7711.,  8068.,  8431.,  8800.,  8059.,  8428.,  8803.,  9184.,  5882.,
      6136.,  6394.,  6656.,  3201.,  3332.,  3465.,  3600.,  37.,    76.,
      117.,   160.,   226.,   312.,   402.,   496.,   583.,   724.,   871.,
      1024.,  1075.,  1228.,  1387.,  1552.,  1567.,  1732.,  1903.,  2080.,
      1282.,  1400.,  1522.,  1648.,  765.,   828.,   893.,   960.,   826.,
      936.,   1050.,  1168.,  2084.,  2320.,  2564.,  2816.,  3806.,  4184.,
      4574.,  4976.,  4934.,  5336.,  5750.,  6176.,  6062.,  6488.,  6926.,
      7376.,  4644.,  4944.,  5252.,  5568.,  2634.,  2792.,  2954.,  3120.,
      2607.,  2820.,  3039.,  3264.,  6054.,  6504.,  6966.,  7440.,  10389.,
      11100., 11829., 12576., 12297., 13044., 13809., 14592., 14205., 14988.,
      15789., 16608., 10566., 11112., 11670., 12240., 5847.,  6132.,  6423.,
      6720.,  5547.,  5820.,  6099.,  6384.,  12174., 12744., 13326., 13920.,
      19929., 20820., 21729., 22656., 21837., 22764., 23709., 24672., 23745.,
      24708., 25689., 26688., 17166., 17832., 18510., 19200., 9267.,  9612.,
      9963.,  10320., 8487.,  8820.,  9159.,  9504.,  18294., 18984., 19686.,
      20400., 29469., 30540., 31629., 32736., 31377., 32484., 33609., 34752.,
      33285., 34428., 35589., 36768., 23766., 24552., 25350., 26160., 12687.,
      13092., 13503., 13920., 7690.,  7944.,  8202.,  8464.,  16388., 16912.,
      17444., 17984., 26126., 26936., 27758., 28592., 27542., 28376., 29222.,
      30080., 28958., 29816., 30686., 31568., 20484., 21072., 21668., 22272.,
      10842., 11144., 11450., 11760., 4941.,  5084.,  5229.,  5376.,  10450.,
      10744., 11042., 11344., 16543., 16996., 17455., 17920., 17323., 17788.,
      18259., 18736., 18103., 18580., 19063., 19552., 12722., 13048., 13378.,
      13712., 6693.,  6860.,  7029.,  7200.,  73.,    148.,   225.,   304.,
      442.,   600.,   762.,   928.,   1123.,  1372.,  1627.,  1888.,  2047.,
      2308.,  2575.,  2848.,  2971.,  3244.,  3523.,  3808.,  2362.,  2552.,
      2746.,  2944.,  1377.,  1476.,  1577.,  1680.,  1618.,  1800.,  1986.,
      2176.,  3956.,  4336.,  4724.,  5120.,  7046.,  7640.,  8246.,  8864.,
      9038.,  9656.,  10286., 10928., 11030., 11672., 12326., 12992., 8244.,
      8688.,  9140.,  9600.,  4578.,  4808.,  5042.,  5280.,  4875.,  5196.,
      5523.,  5856.,  11022., 11688., 12366., 13056., 18489., 19524., 20577.,
      21648., 21693., 22764., 23853., 24960., 24897., 26004., 27129., 28272.,
      18126., 18888., 19662., 20448., 9843.,  10236., 10635., 11040., 9975.,
      10356., 10743., 11136., 21462., 22248., 23046., 23856., 34509., 35724.,
      36957., 38208., 37713., 38964., 40233., 41520., 40917., 42204., 43509.,
      44832., 29046., 29928., 30822., 31728., 15423., 15876., 16335., 16800.,
      15075., 15516., 15963., 16416., 31902., 32808., 33726., 34656., 50529.,
      51924., 53337., 54768., 53733., 55164., 56613., 58080., 56937., 58404.,
      59889., 61392., 39966., 40968., 41982., 43008., 21003., 21516., 22035.,
      22560., 12802., 13128., 13458., 13792., 26900., 27568., 28244., 28928.,
      42326., 43352., 44390., 45440., 44606., 45656., 46718., 47792., 46886.,
      47960., 49046., 50144., 32724., 33456., 34196., 34944., 17106., 17480.,
      17858., 18240., 7857.,  8036.,  8217.,  8400.,  16426., 16792., 17162.,
      17536., 25723., 26284., 26851., 27424., 26935., 27508., 28087., 28672.,
      28147., 28732., 29323., 29920., 19562., 19960., 20362., 20768., 10185.,
      10388., 10593., 10800.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,
      7063.,  9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,
      9091.,  11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,
      5945.,  3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108.,
      14068., 10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241.,
      9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,
      8087.,  10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260.,
      12900., 15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      4483.,  6223.,  8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,
      9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132.,
      15092., 5659.,  7431.,  9443.,  11695., 3996.,  5388.,  6972.,  8748.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 7428.,
      9748.,  12388., 15348., 6660.,  8980.,  11620., 14580., 6352.,  8208.,
      10320., 12688., 3996.,  5388.,  6972.,  8748.,  2669.,  3617.,  4709.,
      5945.,  3484.,  4876.,  6460.,  8236.,  6683.,  8455.,  10467., 12719.,
      5507.,  7247.,  9227.,  11447., 5355.,  7063.,  9011.,  11199., 3484.,
      4876.,  6460.,  8236.,  3741.,  4753.,  5909.,  7209.,  3509.,  4553.,
      5741.,  7073.,  4764.,  6156.,  7740.,  9516.,  3923.,  5599.,  7515.,
      9671.,  5563.,  7207.,  9091.,  11215., 5763.,  7503.,  9483.,  11703.,
      4764.,  6156.,  7740.,  9516.,  2181.,  3161.,  4285.,  5553.,  5276.,
      6668.,  8252.,  10028., 5328.,  7184.,  9296.,  11664., 7428.,  9748.,
      12388., 15348., 6660.,  8980.,  11620., 14580., 8452.,  10772., 13412.,
      16372., 5328.,  7184.,  9296.,  11664., 4252.,  5644.,  7228.,  9004.,
      4739.,  6479.,  8459.,  10679., 7940.,  10260., 12900., 15860., 8533.,
      11369., 14605., 18241., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 7940.,  10260., 12900., 15860., 5811.,  7615.,  9659.,
      11943., 4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108., 14068.,
      10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241., 9069.,
      11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,  8087.,
      10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260., 12900.,
      15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053., 19657.,
      8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860., 4483.,
      6223.,  8203.,  10423., 5276.,  6668.,  8252.,  10028., 5328.,  7184.,
      9296.,  11664., 7428.,  9748.,  12388., 15348., 6660.,  8980.,  11620.,
      14580., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.,
      4252.,  5644.,  7228.,  9004.,  2181.,  3161.,  4285.,  5553.,  4764.,
      6156.,  7740.,  9516.,  5507.,  7247.,  9227.,  11447., 5355.,  7063.,
      9011.,  11199., 4787.,  6591.,  8635.,  10919., 4764.,  6156.,  7740.,
      9516.,  3509.,  4553.,  5741.,  7073.,  3277.,  4353.,  5573.,  6937.,
      3484.,  4876.,  6460.,  8236.,  5563.,  7207.,  9091.,  11215., 5763.,
      7503.,  9483.,  11703., 5355.,  7063.,  9011.,  11199., 3484.,  4876.,
      6460.,  8236.,  3741.,  4753.,  5909.,  7209.,  3996.,  5388.,  6972.,
      8748.,  6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580.,
      8452.,  10772., 13412., 16372., 6660.,  8980.,  11620., 14580., 6352.,
      8208.,  10320., 12688., 3996.,  5388.,  6972.,  8748.,  6379.,  8087.,
      10035., 12223., 7172.,  9492.,  12132., 15092., 9069.,  11937., 15205.,
      18873., 7557.,  10457., 13757., 17457., 10045., 12849., 16053., 19657.,
      7172.,  9492.,  12132., 15092., 5659.,  7431.,  9443.,  11695., 4739.,
      6479.,  8459.,  10679., 7940.,  10260., 12900., 15860., 8533.,  11369.,
      14605., 18241., 9069.,  11937., 15205., 18873., 7557.,  10457., 13757.,
      17457., 7940.,  10260., 12900., 15860., 5811.,  7615.,  9659.,  11943.,
      4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108., 14068., 10045.,
      12849., 16053., 19657., 8533.,  11369., 14605., 18241., 9069.,  11937.,
      15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,  8087.,  10035.,
      12223., 3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 8452.,  10772., 13412., 16372., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,
      9260.,  5355.,  7063.,  9011.,  11199., 4787.,  6591.,  8635.,  10919.,
      6683.,  8455.,  10467., 12719., 4508.,  5900.,  7484.,  9260.,  3277.,
      4353.,  5573.,  6937.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6094.,  7302.,  8606.,  10006., 6942.,
      8086.,  9326.,  10662., 4596.,  5316.,  6100.,  6948.,  3114.,  3538.,
      3994.,  4482.,  2319.,  2891.,  3511.,  4179.,  6830.,  8166.,  9598.,
      11126., 13725., 15761., 17941., 20265., 14261., 16329., 18541., 20897.,
      13773., 15873., 18117., 20505., 7086.,  8422.,  9854.,  11382., 2623.,
      3259.,  3943.,  4675.,  5175.,  5971.,  6815.,  7707.,  13246., 14774.,
      16398., 18118., 18453., 20649., 22989., 25473., 13677., 15649., 17765.,
      20025., 10117., 12121., 14269., 16561., 8958.,  10230., 11598., 13062.,
      5031.,  5635.,  6287.,  6987.,  4767.,  5531.,  6343.,  7203.,  9230.,
      10694., 12254., 13910., 13773., 15873., 18117., 20505., 12261., 14393.,
      16669., 19089., 15869., 18033., 20341., 22793., 11022., 12486., 14046.,
      15702., 2319.,  2891.,  3511.,  4179.,  7402.,  8082.,  8794.,  9538.,
      11124., 12356., 13652., 15012., 9374.,  11030., 12782., 14630., 12526.,
      14118., 15806., 17590., 12606., 14134., 15758., 17478., 7860.,  8836.,
      9876.,  10980., 202.,   498.,   826.,   1186.,  3317.,  3657.,  4013.,
      4385.,  7962.,  8706.,  9482.,  10290., 9775.,  10731., 11735., 12787.,
      11511., 12563., 13663., 14811., 6911.,  7803.,  8743.,  9731.,  346.,
      834.,   1354.,  1906.,  5.,     25.,    61.,    113.,   29.,    81.,
      149.,   233.,   234.,   402.,   602.,   834.,   743.,   1091.,  1487.,
      1931.,  1583.,  2027.,  2519.,  3059.,  2423.,  2963.,  3551.,  4187.,
      2474.,  2898.,  3354.,  3842.,  1709.,  1953.,  2213.,  2489.,  890.,
      1250.,  1642.,  2066.,  3156.,  4004.,  4916.,  5892.,  7054.,  8518.,
      10078., 11734., 8670.,  10070., 11566., 13158., 9262.,  10598., 12030.,
      13558., 5716.,  6564.,  7476.,  8452.,  3802.,  4290.,  4810.,  5362.,
      3287.,  3955.,  4671.,  5435.,  8958.,  10230., 11598., 13062., 16565.,
      18633., 20845., 23201., 16205., 18305., 20549., 22937., 14821., 16953.,
      19229., 21649., 5374.,  6646.,  8014.,  9478.,  4103.,  4835.,  5615.,
      6443.,  7039.,  7931.,  8871.,  9859.,  11022., 12486., 14046., 15702.,
      16813., 19041., 21413., 23929., 10117., 12121., 14269., 16561., 13853.,
      15889., 18069., 20393., 10062., 11270., 12574., 13974., 6383.,  7083.,
      7831.,  8627.,  6503.,  7363.,  8271.,  9227.,  9822.,  11222., 12718.,
      14310., 14821., 16953., 19229., 21649., 12413., 14577., 16885., 19337.,
      15125., 17321., 19661., 22145., 7774.,  9174.,  10670., 12262., 3543.,
      4211.,  4927.,  5691.,  8858.,  9602.,  10378., 11186., 5908.,  7012.,
      8180.,  9412.,  12270., 13862., 15550., 17334., 14142., 15670., 17294.,
      19014., 12942., 14406., 15966., 17622., 6228.,  7076.,  7988.,  8964.,
      634.,   994.,   1386.,  1810.,  3853.,  4225.,  4613.,  5017.,  4874.,
      5426.,  6010.,  6626.,  6455.,  7251.,  8095.,  8987.,  7551.,  8443.,
      9383.,  10371., 1287.,  2019.,  2799.,  3627.,  1098.,  1394.,  1722.,
      2082.,  29.,    81.,    149.,   233.,   53.,    137.,   237.,   353.,
      410.,   642.,   906.,   1202.,  1199.,  1643.,  2135.,  2675.,  2423.,
      2963.,  3551.,  4187.,  3647.,  4283.,  4967.,  5699.,  3418.,  3906.,
      4426.,  4978.,  2245.,  2521.,  2813.,  3121.,  1578.,  2002.,  2458.,
      2946.,  4788.,  5764.,  6804.,  7908.,  9886.,  11542., 13294., 15142.,
      11246., 12838., 14526., 16310., 11582., 13110., 14734., 16454., 6836.,
      7812.,  8852.,  9956.,  4490.,  5042.,  5626.,  6242.,  4063.,  4571.,
      5127.,  5731.,  10062., 11270., 12574., 13974., 18381., 20481., 22725.,
      25113., 17125., 19257., 21533., 23953., 14845., 17009., 19317., 21769.,
      7950.,  9414.,  10974., 12630., 5583.,  6411.,  7287.,  8211.,  3591.,
      4323.,  5103.,  5931.,  7774.,  9174.,  10670., 12262., 14149., 16409.,
      18813., 21361., 13725., 15761., 17941., 20265., 16565., 18633., 20845.,
      23201., 12382., 13782., 15278., 16870., 7735.,  8531.,  9375.,  10267.,
      5999.,  6699.,  7447.,  8243.,  9390.,  10726., 12158., 13686., 14845.,
      17009., 19317., 21769., 11541., 13737., 16077., 18561., 13357., 15585.,
      17957., 20473., 10862., 12454., 14142., 15926., 4767.,  5531.,  6343.,
      7203.,  2954.,  3506.,  4090.,  4706.,  7860.,  8836.,  9876.,  10980.,
      14142., 15670., 17294., 19014., 14734., 16198., 17758., 19414., 12254.,
      13654., 15150., 16742., 7860.,  8836.,  9876.,  10980., 1066.,  1490.,
      1946.,  2434.,  101.,   249.,   413.,   593.,   762.,   1122.,  1514.,
      1938.,  2111.,  2747.,  3431.,  4163.,  2567.,  3299.,  4079.,  4907.,
      2831.,  3403.,  4023.,  4691.,  2042.,  2402.,  2794.,  3218.,  53.,
      137.,   237.,   353.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 3800.,
      11800., 22360., 35480., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 16878., 26622., 39566., 55710., 3800.,  11800., 22360.,
      35480., 9858.,  15602., 23266., 32850., 2280.,  7080.,  13416., 21288.,
      11232., 17632., 26080., 36576., 3800.,  11800., 22360., 35480., 14040.,
      22040., 32600., 45720., 3800.,  11800., 22360., 35480., 11232., 17632.,
      26080., 36576., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 9858.,  15602., 23266., 32850.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 2280.,
      7080.,  13416., 21288., 5646.,  8990.,  13486., 19134., 1710.,  5310.,
      10062., 15966., 8424.,  13224., 19560., 27432., 2850.,  8850.,  16770.,
      26610., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966., 8424.,
      13224., 19560., 27432., 3040.,  9440.,  17888., 28384., 14040., 22040.,
      32600., 45720., 3800.,  11800., 22360., 35480., 14040., 22040., 32600.,
      45720., 3040.,  9440.,  17888., 28384., 8424.,  13224., 19560., 27432.,
      2850.,  8850.,  16770., 26610., 14040., 22040., 32600., 45720., 4750.,
      14750., 27950., 44350., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 14040., 22040., 32600., 45720., 2850.,  8850.,  16770.,
      26610., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360., 35480.,
      16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350., 16878.,
      26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,  15602.,
      23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040., 32600.,
      45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566., 55710.,
      4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720., 2850.,
      8850.,  16770., 26610., 8424.,  13224., 19560., 27432., 3040.,  9440.,
      17888., 28384., 14040., 22040., 32600., 45720., 3800.,  11800., 22360.,
      35480., 14040., 22040., 32600., 45720., 3040.,  9440.,  17888., 28384.,
      8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966., 8424.,
      13224., 19560., 27432., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2850.,  8850.,  16770., 26610., 8424.,  13224., 19560.,
      27432., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486., 19134.,
      2280.,  7080.,  13416., 21288., 9858.,  15602., 23266., 32850., 2850.,
      8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 2280.,  7080.,
      13416., 21288., 5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416.,
      21288., 11232., 17632., 26080., 36576., 3800.,  11800., 22360., 35480.,
      14040., 22040., 32600., 45720., 3800.,  11800., 22360., 35480., 11232.,
      17632., 26080., 36576., 2280.,  7080.,  13416., 21288., 9858.,  15602.,
      23266., 32850., 3800.,  11800., 22360., 35480., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 16878., 26622., 39566., 55710.,
      3800.,  11800., 22360., 35480., 9858.,  15602., 23266., 32850., 2850.,
      8850.,  16770., 26610., 14040., 22040., 32600., 45720., 4750.,  14750.,
      27950., 44350., 16878., 26622., 39566., 55710., 4750.,  14750., 27950.,
      44350., 14040., 22040., 32600., 45720., 2850.,  8850.,  16770., 26610.,
      9858.,  15602., 23266., 32850., 3800.,  11800., 22360., 35480., 16878.,
      26622., 39566., 55710., 4750.,  14750., 27950., 44350., 16878., 26622.,
      39566., 55710., 3800.,  11800., 22360., 35480., 9858.,  15602., 23266.,
      32850., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416.,
      21288., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      9858.,  15602., 23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,
      8990.,  13486., 19134.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,
      2702.,  700.,   2012.,  3580.,  5404.,  5496.,  8120.,  11256., 14904.,
      12980., 17940., 23668., 30164., 20468., 25940., 32180., 39188., 10932.,
      15892., 21620., 28116., 5496.,  8120.,  11256., 14904., 2748.,  4060.,
      5628.,  7452.,  4442.,  6922.,  9786.,  13034., 13300., 18772., 25012.,
      32020., 29006., 36958., 46062., 56318., 25070., 33278., 42638., 53150.,
      20494., 27934., 36526., 46270., 6516.,  10964., 16180., 22164., 6170.,
      8138.,  10490., 13226., 10042., 13290., 16922., 20938., 22836., 28820.,
      35572., 43092., 25070., 33278., 42638., 53150., 20494., 27934., 36526.,
      46270., 16558., 24254., 33102., 43102., 14004., 18964., 24692., 31188.,
      9722.,  12458., 15578., 19082., 15002., 17994., 21370., 25130., 15348.,
      20820., 27060., 34068., 20494., 27934., 36526., 46270., 16558., 24254.,
      33102., 43102., 29006., 36958., 46062., 56318., 17396., 22868., 29108.,
      36116., 4442.,  6922.,  9786.,  13034., 7484.,  9820.,  12412., 15260.,
      14328., 17976., 22136., 26808., 10932., 15892., 21620., 28116., 20468.,
      25940., 32180., 39188., 17716., 23700., 30452., 37972., 14328., 17976.,
      22136., 26808., 700.,   2012.,  3580.,  5404.,  350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8538.,  11018., 13882., 17130.,
      14138., 17386., 21018., 25034., 10906., 13898., 17274., 21034., 1020.,
      2844.,  4924.,  7260.,  30.,    174.,   446.,   846.,   190.,   590.,
      1118.,  1774.,  1724.,  3036.,  4604.,  6428.,  5626.,  8362.,  11482.,
      14986., 12250., 15754., 19642., 23914., 14138., 17386., 21018., 25034.,
      10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,  1404.,
      2204.,  3260.,  4572.,  5496.,  8120.,  11256., 14904., 14324., 19796.,
      26036., 33044., 19764., 25748., 32500., 40020., 20468., 25940., 32180.,
      39188., 10232., 13880., 18040., 22712., 4092.,  5916.,  7996.,  10332.,
      3258.,  5482.,  8090.,  11082., 14004., 18964., 24692., 31188., 27118.,
      35326., 44686., 55198., 32398., 40862., 50478., 61246., 16558., 24254.,
      33102., 43102., 14004., 18964., 24692., 31188., 9722.,  12458., 15578.,
      19082., 7834.,  10826., 14202., 17962., 17396., 22868., 29108., 36116.,
      32398., 40862., 50478., 61246., 16558., 24254., 33102., 43102., 21838.,
      29790., 38894., 49150., 19444., 24916., 31156., 38164., 16346., 19850.,
      23738., 28010., 7674.,  10410., 13530., 17034., 16052., 21012., 26740.,
      33236., 16558., 24254., 33102., 43102., 21838., 29790., 38894., 49150.,
      27118., 35326., 44686., 55198., 20788., 26772., 33524., 41044., 10042.,
      13290., 16922., 20938., 10236., 12060., 14140., 16476., 1400.,  4024.,
      7160.,  10808., 9588.,  14036., 19252., 25236., 12980., 17940., 23668.,
      30164., 20468., 25940., 32180., 39188., 10232., 13880., 18040., 22712.,
      4092.,  5916.,  7996.,  10332., 510.,   1422.,  2462.,  3630.,  3772.,
      5084.,  6652.,  8476.,  7354.,  9578.,  12186., 15178., 11930., 14922.,
      18298., 22058., 3578.,  6314.,  9434.,  12938., 3772.,  5084.,  6652.,
      8476.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,
      3068.,  4892.,  6972.,  9308.,  8538.,  11018., 13882., 17130., 14138.,
      17386., 21018., 25034., 10906., 13898., 17274., 21034., 1020.,  2844.,
      4924.,  7260.,  30.,    174.,   446.,   846.,   2748.,  4060.,  5628.,
      7452.,  10232., 13880., 18040., 22712., 19764., 25748., 32500., 40020.,
      23156., 29652., 36916., 44948., 17716., 23700., 30452., 37972., 14328.,
      17976., 22136., 26808., 700.,   2012.,  3580.,  5404.,  6170.,  8138.,
      10490., 13226., 19444., 24916., 31156., 38164., 25230., 33694., 43310.,
      54078., 23342., 32062., 41934., 52958., 29006., 36958., 46062., 56318.,
      17396., 22868., 29108., 36116., 4442.,  6922.,  9786.,  13034., 9722.,
      12458., 15578., 19082., 20788., 26772., 33524., 41044., 23342., 32062.,
      41934., 52958., 29006., 36958., 46062., 56318., 27118., 35326., 44686.,
      55198., 20788., 26772., 33524., 41044., 10042., 13290., 16922., 20938.,
      4442.,  6922.,  9786.,  13034., 13300., 18772., 25012., 32020., 29006.,
      36958., 46062., 56318., 27118., 35326., 44686., 55198., 25230., 33694.,
      43310., 54078., 20084., 26580., 33844., 41876., 15002., 17994., 21370.,
      25130., 700.,   2012.,  3580.,  5404.,  5496.,  8120.,  11256., 14904.,
      12980., 17940., 23668., 30164., 14324., 19796., 26036., 33044., 19764.,
      25748., 32500., 40020., 19064., 23736., 28920., 34616., 7484.,  9820.,
      12412., 15260., 30.,    174.,   446.,   846.,   380.,   1180.,  2236.,
      3548.,  2074.,  4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986.,
      8538.,  11018., 13882., 17130., 7164.,  8988.,  11068., 13404., 350.,
      1006.,  1790.,  2702.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,   610.,   890.,   1010.,  1130.,  1250.,  1144.,  969.,   988.,
      1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,
      4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,
      7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,
      9975.,  10300., 8770.,  6980.,  6004.,  8420.,  11050., 11360., 11670.,
      11980., 10060., 7906.,  6180.,  8590.,  11180., 11450., 11720., 11990.,
      9988.,  7791.,  3912.,  5650.,  7610.,  7730.,  7850.,  7970.,  6856.,
      5505.,  7372.,  10460., 13870., 14080., 14290., 14500., 12292., 9742.,
      12110., 17000., 22325., 22650., 22975., 23300., 19570., 15380., 13550.,
      19000., 24925., 25250., 25575., 25900., 21730., 17060., 14990., 21000.,
      27525., 27850., 28175., 28500., 23890., 18740., 15748., 21860., 28410.,
      28720., 29030., 29340., 24396., 18994., 14748., 20350., 26300., 26570.,
      26840., 27110., 22420., 17367., 7440.,  10690., 14330., 14450., 14570.,
      14690., 12568., 10041., 13756., 19420., 25630., 25840., 26050., 26260.,
      22148., 17470., 22190., 31000., 40525., 40850., 41175., 41500., 34690.,
      27140., 23630., 33000., 43125., 43450., 43775., 44100., 36850., 28820.,
      25070., 35000., 45725., 46050., 46375., 46700., 39010., 30500., 25492.,
      35300., 45770., 46080., 46390., 46700., 38732., 30082., 23316., 32110.,
      41420., 41690., 41960., 42230., 34852., 26943.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,
      74.,   130.,  166.,  161.,  133.,  80.,   50.,   133.,  252.,  410.,
      488.,  441.,  346.,  200.,  125.,  298.,  522.,  800.,  878.,  756.,
      571.,  320.,  200.,  463.,  792.,  1190., 1268., 1071., 796.,  440.,
      249.,  549.,  902.,  1310., 1378., 1127., 815.,  440.,  189.,  408.,
      658.,  940.,  982.,  790.,  563.,  300.,  13.,   40.,   82.,   140.,
      198.,  178.,  139.,  80.,   95.,   227.,  398.,  610.,  742.,  629.,
      469.,  260.,  266.,  601.,  1008., 1490., 1712., 1413., 1030., 560.,
      521.,  1126., 1818., 2600., 2822., 2268., 1615., 860.,  776.,  1651.,
      2628., 3710., 3932., 3123., 2200., 1160., 693.,  1461., 2306., 3230.,
      3394., 2675., 1871., 980.,  441.,  924.,  1450., 2020., 2110., 1654.,
      1151., 600.,  25.,   76.,   154.,  260.,  366.,  322.,  247.,  140.,
      179.,  419.,  722.,  1090., 1318., 1097., 805.,  440.,  482.,  1069.,
      1764., 2570., 2936., 2385., 1714., 920.,  917.,  1954., 3114., 4400.,
      4766., 3780., 2659., 1400., 1352., 2839., 4464., 6230., 6596., 5175.,
      3604., 1880., 1137., 2373., 3710., 5150., 5410., 4223., 2927., 1520.,
      693.,  1440., 2242., 3100., 3238., 2518., 1739., 900.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,  7352.,
      11232., 15880., 17520., 19160., 20800., 18560., 15392., 14011., 20476.,
      27905., 30455., 33005., 35555., 30852., 24985., 20107., 28732., 38385.,
      40935., 43485., 46035., 39364., 31465., 22363., 31868., 42465., 45015.,
      47565., 50115., 42756., 34105., 19712., 28032., 37280., 39720., 42160.,
      44600., 37920., 30152., 9795.,  14300., 19465., 21595., 23725., 25855.,
      22292., 17949., 7911.,  11436., 15445., 16375., 17305., 18235., 15844.,
      12849., 13112., 18912., 25480., 27120., 28760., 30400., 26240., 21152.,
      20779., 29884., 40145., 42695., 45245., 47795., 41028., 32905., 14011.,
      20476., 27905., 30455., 33005., 35555., 30852., 24985., 20107., 28732.,
      38385., 40935., 43485., 46035., 39364., 31465., 21632., 30592., 40480.,
      42920., 45360., 47800., 40480., 32072., 16851., 23836., 31545., 33675.,
      35805., 37935., 32084., 25389., 9207.,  13292., 17925., 18855., 19785.,
      20715., 17956., 14529., 15032., 21472., 28680., 30320., 31960., 33600.,
      28800., 23072., 22363., 31868., 42465., 45015., 47565., 50115., 42756.,
      34105., 20779., 29884., 40145., 42695., 45245., 47795., 41028., 32905.,
      14011., 20476., 27905., 30455., 33005., 35555., 30852., 24985., 19712.,
      28032., 37280., 39720., 42160., 44600., 37920., 30152., 20067., 28252.,
      37225., 39355., 41485., 43615., 36756., 28989.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   233.,   218.,   143.,   64.,
      224.,   496.,   896.,   1168.,  1156.,  968.,   588.,   337.,   926.,
      1791.,  2956.,  3556.,  3249.,  2570.,  1495.,  907.,   2186.,  3861.,
      5956.,  6556.,  5679.,  4310.,  2425.,  1477.,  3446.,  5931.,  8956.,
      9556.,  8109.,  6050.,  3355.,  1892.,  4184.,  6892.,  10032., 10560.,
      8656.,  6272.,  3392.,  1453.,  3142.,  5075.,  7260.,  7588.,  6113.,
      4362.,  2327.,  77.,    262.,   563.,   988.,   1444.,  1313.,  1034.,
      599.,   688.,   1664.,  2944.,  4544.,  5584.,  4756.,  3560.,  1980.,
      1993.,  4526.,  7623.,  11308., 13060., 10809., 7898.,  4303.,  4003.,
      8666.,  14013., 20068., 21820., 17559., 12518., 6673.,  6013.,  12806.,
      20403., 28828., 30580., 24309., 17138., 9043.,  5396.,  11384., 17980.,
      25200., 26496., 20896., 14624., 7664.,  3445.,  7222.,  11339., 15804.,
      16516., 12953., 9018.,  4703.,  149.,   502.,   1067.,  1852.,  2692.,
      2393.,  1850.,  1055.,  1312.,  3104.,  5392.,  8192.,  10000., 8356.,
      6152.,  3372.,  3649.,  8126.,  13455., 19660., 22564., 18369., 13226.,
      7111.,  7099.,  15146., 24165., 34180., 37084., 29439., 20726., 10921.,
      10549., 22166., 34875., 48700., 51604., 40509., 28226., 14731., 8900.,
      18584., 29068., 40368., 42432., 33136., 22976., 11936., 5437.,  11302.,
      17603., 24348., 25444., 19793., 13674., 7079.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366.,  6056.,  9498.,  13234., 16970., 20706., 19528., 16126., 4792.,
      8224.,  12616., 17384., 22152., 26920., 22560., 19352., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246.,
      23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246., 23622.,
      29998., 36374., 31064., 26058., 6040.,  10400., 15656., 21192., 26728.,
      32264., 26464., 21560., 4086.,  7144.,  11018., 15138., 19258., 23378.,
      19272., 16974., 3366.,  6056.,  9498.,  13234., 16970., 20706., 19528.,
      16126., 4792.,  8224.,  12616., 17384., 22152., 26920., 22560., 19352.,
      6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058., 6434.,
      11256., 17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6040.,  10400., 15656.,
      21192., 26728., 32264., 26464., 21560., 4086.,  7144.,  11018., 15138.,
      19258., 23378., 19272., 16974., 3366.,  6056.,  9498.,  13234., 16970.,
      20706., 19528., 16126., 4792.,  8224.,  12616., 17384., 22152., 26920.,
      22560., 19352., 6434.,  11256., 17246., 23622., 29998., 36374., 31064.,
      26058., 6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058.,
      6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058., 6040.,
      10400., 15656., 21192., 26728., 32264., 26464., 21560., 4086.,  7144.,
      11018., 15138., 19258., 23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,  420.,
      1576.,  3596.,  6608.,  8720.,  8732.,  7368.,  4500.,  2450.,  6868.,
      13446., 22376., 27080., 24894., 19780., 11546., 6890.,  16068., 27342.,
      40904., 41896., 35910., 27060., 15154., 10690., 19508., 30358., 43432.,
      40328., 34638., 26148., 14666., 10004., 13320., 17884., 23824., 16080.,
      14828., 11816., 6916.,  2558.,  5964.,  10282., 15576., 18168., 15442.,
      11548., 6422.,  510.,   1868.,  4138.,  7384.,  11000., 10066., 7964.,
      4630.,  4580.,  10408., 17612., 26320., 30480., 25820., 19272., 10708.,
      9010.,  20244., 33894., 50152., 55880., 46878., 34692., 19130., 14730.,
      19716., 27054., 36936., 26664., 24870., 19956., 11730., 7522.,  17524.,
      29814., 44584., 46600., 39726., 29796., 16618., 4820.,  6536.,  8988.,
      12304., 6608.,  6956.,  6056.,  3780.,  1374.,  3340.,  5962.,  9304.,
      10872., 9586.,  7388.,  4214.,  350.,   1292.,  2890.,  5208.,  7800.,
      7282.,  5852.,  3446.,  3620.,  9000.,  16268., 25552., 31760., 27548.,
      20936., 11796., 10450., 23380., 38982., 57448., 64200., 53502., 39364.,
      21594., 17450., 29508., 44174., 61640., 56488., 47622., 35380., 19570.,
      15618., 21684., 30294., 41640., 32392., 29454., 23204., 13450., 4372.,
      10248., 17372., 25872., 26320., 22508., 16936., 9476.,  190.,   716.,
      1642.,  3032.,  3576.,  3730.,  3228.,  2006.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 18275., 19640., 26140., 28000., 34925., 37300., 36175., 38600.,
      37425., 39900., 38675., 41200., 33020., 35080., 26345., 27920., 22768.,
      24016., 31984., 33680., 42040., 44200., 43240., 45440., 44440., 46680.,
      45640., 47920., 38384., 40240., 30208., 31624., 23667., 24720., 32932.,
      34360., 42905., 44720., 43955., 45800., 45005., 46880., 46055., 47960.,
      38404., 39952., 29985., 31164., 8199.,  8736.,  11620., 12360., 15405.,
      16360., 15855., 16840., 16305., 17320., 16755., 17800., 14276., 15136.,
      11373., 12036., 12616., 13360., 17776., 18800., 23440., 24760., 24240.,
      25600., 25040., 26440., 25840., 27280., 21872., 23056., 17320., 18232.,
      18227., 19256., 25628., 27040., 33725., 35540., 34975., 36840., 36225.,
      38140., 37475., 39440., 31612., 33224., 24953., 26192., 7235.,  8120.,
      10780., 12000., 14925., 16500., 16175., 17800., 17425., 19100., 18675.,
      20400., 16380., 17800., 13385., 14480., 12755., 13880., 18460., 20000.,
      24925., 26900., 26175., 28200., 27425., 29500., 28675., 30800., 24700.,
      26440., 19865., 21200., 17392., 18448., 24560., 26000., 32440., 34280.,
      33640., 35520., 34840., 36760., 36040., 38000., 30448., 32048., 24064.,
      25288., 18915., 19824., 26404., 27640., 34505., 36080., 35555., 37160.,
      36605., 38240., 37655., 39320., 31492., 32848., 24657., 25692., 11319.,
      12096., 16100., 17160., 21405., 22760., 21855., 23240., 22305., 23720.,
      22755., 24200., 19396., 20576., 15453., 16356., 17992., 18928., 25200.,
      26480., 33040., 34680., 33840., 35520., 34640., 36360., 35440., 37200.,
      29808., 31248., 23464., 24568., 25379., 26552., 35356., 36960., 46125.,
      48180., 47375., 49480., 48625., 50780., 49875., 52080., 41724., 43528.,
      32681., 34064., 18227., 19256., 25628., 27040., 33725., 35540., 34975.,
      36840., 36225., 38140., 37475., 39440., 31612., 33224., 24953., 26192.,
      7235.,  8120.,  10780., 12000., 14925., 16500., 16175., 17800., 17425.,
      19100., 18675., 20400., 16380., 17800., 13385., 14480., 12016., 12880.,
      17136., 18320., 22840., 24360., 24040., 25600., 25240., 26840., 26440.,
      28080., 22512., 23856., 17920., 18952., 14163., 14928., 19876., 20920.,
      26105., 27440., 27155., 28520., 28205., 29600., 29255., 30680., 24580.,
      25744., 19329., 20220.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   97.,    136.,   94.,    124.,   63.,    80.,    20.,    44.,
      84.,    140.,   200.,   296.,   376.,   520.,   504.,   664.,   512.,
      644.,   436.,   532.,   268.,   320.,   137.,   200.,   394.,   532.,
      783.,   1008.,  1316.,  1640.,  1604.,  1952.,  1485.,  1764.,  1186.,
      1384.,  695.,   800.,   407.,   500.,   994.,   1192.,  1773.,  2088.,
      2756.,  3200.,  3044.,  3512.,  2655.,  3024.,  2026.,  2284.,  1145.,
      1280.,  677.,   800.,   1594.,  1852.,  2763.,  3168.,  4196.,  4760.,
      4484.,  5072.,  3825.,  4284.,  2866.,  3184.,  1595.,  1760.,  896.,
      996.,   1988.,  2196.,  3284.,  3608.,  4792.,  5240.,  5048.,  5512.,
      4148.,  4508.,  3012.,  3260.,  1632.,  1760.,  697.,   756.,   1510.,
      1632.,  2443.,  2632.,  3500.,  3760.,  3660.,  3928.,  2953.,  3160.,
      2110.,  2252.,  1127.,  1200.,  25.,    52.,    102.,   160.,   235.,
      328.,   428.,   560.,   652.,   792.,   601.,   712.,   478.,   556.,
      279.,   320.,   308.,   380.,   756.,   908.,   1352.,  1592.,  2104.,
      2440.,  2616.,  2968.,  2240.,  2516.,  1684.,  1876.,  940.,   1040.,
      929.,   1064.,  2122.,  2404.,  3591.,  4032.,  5348.,  5960.,  6212.,
      6848.,  5157.,  5652.,  3778.,  4120.,  2063.,  2240.,  1919.,  2084.,
      4162.,  4504.,  6741.,  7272.,  9668.,  10400., 10532., 11288., 8487.,
      9072.,  6058.,  6460.,  3233.,  3440.,  2909.,  3104.,  6202.,  6604.,
      9891.,  10512., 13988., 14840., 14852., 15728., 11817., 12492., 8338.,
      8800.,  4403.,  4640.,  2624.,  2772.,  5540.,  5844.,  8756.,  9224.,
      12280., 12920., 12920., 13576., 10196., 10700., 7140.,  7484.,  3744.,
      3920.,  1681.,  1764.,  3526.,  3696.,  5539.,  5800.,  7724.,  8080.,
      8076.,  8440.,  6337.,  6616.,  4414.,  4604.,  2303.,  2400.,  49.,
      100.,   198.,   304.,   451.,   616.,   812.,   1040.,  1228.,  1464.,
      1105.,  1288.,  862.,   988.,   495.,   560.,   596.,   716.,   1428.,
      1676.,  2504.,  2888.,  3832.,  4360.,  4728.,  5272.,  3968.,  4388.,
      2932.,  3220.,  1612.,  1760.,  1721.,  1928.,  3850.,  4276.,  6399.,
      7056.,  9380.,  10280., 10820., 11744., 8829.,  9540.,  6370.,  6856.,
      3431.,  3680.,  3431.,  3668.,  7330.,  7816.,  11709., 12456., 16580.,
      17600., 18020., 19064., 14319., 15120., 10090., 10636., 5321.,  5600.,
      5141.,  5408.,  10810., 11356., 17019., 17856., 23780., 24920., 25220.,
      26384., 19809., 20700., 13810., 14416., 7211.,  7520.,  4352.,  4548.,
      9092.,  9492.,  14228., 14840., 19768., 20600., 20792., 21640., 16244.,
      16892., 11268., 11708., 5856.,  6080.,  2665.,  2772.,  5542.,  5760.,
      8635.,  8968.,  11948., 12400., 12492., 12952., 9721.,  10072., 6718.,
      6956.,  3479.,  3600.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069.,
      37885., 43761., 43177., 49453., 33540., 38676., 29287., 33379., 16932.,
      19444., 25392., 28912., 35420., 40076., 40332., 45308., 45244., 50540.,
      50156., 55772., 41776., 46320., 34964., 38564., 7673.,  9405.,  10716.,
      13132., 14791., 17987., 18523., 21959., 22255., 25931., 25987., 29903.,
      17708., 20828., 15789., 18273., 12129., 14085., 18556., 21356., 26335.,
      30075., 29875., 33855., 33415., 37635., 36955., 41415., 33420., 37180.,
      28053., 31017., 12820., 15140., 18288., 21552., 25196., 29532., 29468.,
      34124., 33740., 38716., 38012., 43308., 28528., 32816., 24836., 28244.,
      18107., 21159., 27604., 31908., 39045., 44761., 44337., 50453., 49629.,
      56145., 54921., 61837., 46724., 52372., 39559., 44035., 13467., 16135.,
      19540., 23332., 27301., 32377., 32593., 38069., 37885., 43761., 43177.,
      49453., 33540., 38676., 29287., 33379., 18107., 21159., 27604., 31908.,
      39045., 44761., 44337., 50453., 49629., 56145., 54921., 61837., 46724.,
      52372., 39559., 44035., 13348., 15860., 19248., 22768., 26716., 31372.,
      31628., 36604., 36540., 41836., 41452., 47068., 31536., 36080., 27284.,
      30884., 16153., 18269., 23900., 26828., 32935., 36771., 36667., 40743.,
      40399., 44715., 44131., 48687., 36012., 39644., 29901., 32769., 7233.,
      8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975., 27555.,
      27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652., 20336.,
      23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596., 46892.,
      34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332., 27301.,
      32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540., 38676.,
      29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761., 44337.,
      50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559., 44035.,
      13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069., 37885.,
      43761., 43177., 49453., 33540., 38676., 29287., 33379., 16932., 19444.,
      25392., 28912., 35420., 40076., 40332., 45308., 45244., 50540., 50156.,
      55772., 41776., 46320., 34964., 38564., 7673.,  9405.,  10716., 13132.,
      14791., 17987., 18523., 21959., 22255., 25931., 25987., 29903., 17708.,
      20828., 15789., 18273.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  979.,   1471.,  2894.,  3974.,
      5841.,  7605.,  9916.,  12460., 12172., 14908., 11349., 13545., 9110.,
      10670., 5359.,  6187.,  3079.,  3811.,  7382.,  8686.,  12685., 14657.,
      19084., 21820., 19612., 22284., 16881., 19029., 12766., 14294., 7171.,
      7983.,  4987.,  5703.,  9118.,  10390., 14217., 16141., 20380., 23052.,
      18860., 21468., 16269., 18369., 12326., 13822., 6935.,  7731.,  4734.,
      5270.,  6220.,  7100.,  8298.,  9586.,  11032., 12792., 7224.,  8856.,
      6754.,  8074.,  5436.,  6380.,  3206.,  3710.,  1173.,  1385.,  2754.,
      3210.,  4775.,  5507.,  7268.,  8308.,  8532.,  9636.,  7283.,  8159.,
      5466.,  6082.,  3049.,  3373.,  149.,   361.,   706.,   1162.,  1703.,
      2435.,  3172.,  4212.,  4948.,  6052.,  4595.,  5471.,  3674.,  4290.,
      2153.,  2477.,  2134.,  2446.,  4860.,  5548.,  8242.,  9370.,  12344.,
      13976., 14360., 16120., 12202., 13618., 9132.,  10140., 5086.,  5622.,
      4227.,  4783.,  9518.,  10726., 15969., 17925., 23676., 26476., 26444.,
      29436., 22245., 24633., 16502., 18190., 9119.,  10011., 6967.,  7763.,
      9142.,  10574., 12445., 14609., 16972., 19964., 11868., 14796., 11265.,
      13605., 9150.,  10806., 5427.,  6303.,  3371.,  4151.,  8062.,  9462.,
      13849., 15965., 20828., 23756., 21868., 24732., 18717., 21009., 14086.,
      15710., 7879.,  8739.,  2206.,  2614.,  2956.,  3580.,  4042.,  4946.,
      5528.,  6776.,  2744.,  3864.,  3010.,  3946.,  2684.,  3372.,  1702.,
      2078.,  613.,   761.,   1506.,  1834.,  2711.,  3251.,  4260.,  5044.,
      5012.,  5860.,  4451.,  5135.,  3450.,  3938.,  1977.,  2237.,  101.,
      249.,   482.,   810.,   1175.,  1715.,  2212.,  2996.,  3476.,  4324.,
      3299.,  3983.,  2682.,  3170.,  1593.,  1853.,  1590.,  2030.,  4028.,
      4972.,  7378.,  8890.,  11704., 13848., 14744., 17016., 12874., 14674.,
      9836.,  11100., 5566.,  6230.,  4915.,  5535.,  11022., 12358., 18417.,
      20565., 27196., 30252., 30476., 33724., 25461., 28041., 18774., 20590.,
      10319., 11275., 8295.,  9155.,  13974., 15534., 20909., 23265., 29196.,
      32444., 26652., 29836., 22545., 25077., 16798., 18582., 9315.,  10255.,
      7387.,  8231.,  10078., 11606., 13993., 16301., 19228., 22412., 14636.,
      17756., 13485., 15969., 10726., 12478., 6263.,  7187.,  1918.,  2454.,
      4684.,  5564.,  8042.,  9330.,  12056., 13816., 12344., 13976., 10594.,
      11914., 7996.,  8940.,  4486.,  4990.,  53.,    137.,   258.,   458.,
      647.,   995.,   1252.,  1780.,  1492.,  2084.,  1619.,  2111.,  1434.,
      1794.,  905.,   1101.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942.,
      21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922., 7368.,
      12936., 13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664.,
      19704., 31032., 13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,
      16232., 9874.,  17282., 11906., 19698., 14962., 23138., 14946., 23506.,
      9384.,  15720., 9486.,  14878., 5182.,  9422.,  9896.,  16232., 11762.,
      18914., 11234., 18770., 11730., 19650., 13250., 21554., 11432., 17768.,
      9326.,  14462., 7368.,  12936., 13536., 21984., 14136., 23928., 15992.,
      26296., 17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040.,
      8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678.,
      35006., 22078., 36046., 17176., 27736., 16978., 25922., 8194.,  14962.,
      15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006., 22078.,
      36046., 17176., 27736., 16978., 25922., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 7368.,  12936., 13536., 21984., 14136., 23928.,
      15992., 26296., 17848., 28664., 19704., 31032., 13536., 21984., 12936.,
      20040., 5534.,  9518.,  9896.,  16232., 9874.,  17282., 11906., 19698.,
      14962., 23138., 14946., 23506., 9384.,  15720., 9486.,  14878., 5182.,
      9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730., 19650.,
      13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936., 13536.,
      21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704., 31032.,
      13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200., 17806.,
      29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736.,
      16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254.,
      32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922.,
      8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678.,
      35006., 22078., 36046., 17176., 27736., 16978., 25922., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,  16232.,
      9874.,  17282., 11906., 19698., 14962., 23138., 14946., 23506., 9384.,
      15720., 9486.,  14878.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,   140.,   556.,
      856.,   2200.,  2660.,  5444.,  5744.,  9968.,  7792.,  12016., 7492.,
      11044., 4056.,  6424.,  1388.,  2572.,  330.,   1146.,  1908.,  4308.,
      5182.,  9422.,  9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,
      10228., 3354.,  5322.,  570.,   1770.,  2836.,  5492.,  6542.,  10910.,
      11432., 17768., 9896.,  16232., 8894.,  14158., 7476.,  11412., 5898.,
      8250.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232.,
      9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,  7274.,  300.,
      972.,   1368.,  2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,
      7652.,  11460., 6936.,  9816.,  3084.,  4524.,  30.,    174.,   220.,
      764.,   826.,   2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,
      3004.,  4316.,  270.,   798.,   30.,    174.,   220.,   764.,   826.,
      2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.,   140.,   556.,   856.,   2200.,  2660.,  5444.,  5744.,
      9968.,  7792.,  12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,
      330.,   1146.,  1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432.,
      17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,  570.,   1770.,
      2836.,  5492.,  6542.,  10910., 11432., 17768., 9896.,  16232., 8894.,
      14158., 7476.,  11412., 5898.,  8250.,  490.,   1562.,  2420.,  4820.,
      5534.,  9518.,  9896.,  16232., 9384.,  15720., 9486.,  14878., 9428.,
      13620., 5050.,  7274.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,
      5744.,  9968.,  5744.,  9968.,  7652.,  11460., 6936.,  9816.,  3084.,
      4524.,  30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,
      3640.,  5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,   30.,
      174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,  5752.,
      4042.,  5882.,  3004.,  4316.,  270.,   798.,   140.,   556.,   856.,
      2200.,  2660.,  5444.,  5744.,  9968.,  7792.,  12016., 7492.,  11044.,
      4056.,  6424.,  1388.,  2572.,  330.,   1146.,  1908.,  4308.,  5182.,
      9422.,  9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,  10228.,
      3354.,  5322.,  570.,   1770.,  2836.,  5492.,  6542.,  10910., 11432.,
      17768., 9896.,  16232., 8894.,  14158., 7476.,  11412., 5898.,  8250.,
      490.,   1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,
      15720., 9486.,  14878., 9428.,  13620., 5050.,  7274.,  300.,   972.,
      1368.,  2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,  7652.,
      11460., 6936.,  9816.,  3084.,  4524.,  30.,    174.,   220.,   764.,
      826.,   2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,
      4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172.,
      12160., 13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744.,
      18233., 19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148.,
      17392., 18676., 20000., 14147., 15140., 16163., 17216., 8164.,  8768.,
      9396.,  10048., 12272., 13120., 14000., 14912., 17148., 18272., 19436.,
      20640., 19564., 20768., 22012., 23296., 21980., 23264., 24588., 25952.,
      24396., 25760., 27164., 28608., 20336., 21440., 22576., 23744., 17044.,
      17920., 18820., 19744., 3629.,  4044.,  4477.,  4928.,  5068.,  5648.,
      6252.,  6880.,  7011.,  7780.,  8579.,  9408.,  8847.,  9676.,  10535.,
      11424., 10683., 11572., 12491., 13440., 12519., 13468., 14447., 15456.,
      8476.,  9232.,  10012., 10816., 7593.,  8196.,  8817.,  9456.,  5829.,
      6300.,  6789.,  7296.,  8940.,  9616.,  10316., 11040., 12715., 13620.,
      14555., 15520., 14455., 15420., 16415., 17440., 16195., 17220., 18275.,
      19360., 17935., 19020., 20135., 21280., 16252., 17168., 18108., 19072.,
      13665., 14388., 15129., 15888., 6132.,  6688.,  7268.,  7872.,  8752.,
      9536.,  10352., 11200., 12076., 13120., 14204., 15328., 14172., 15296.,
      16460., 17664., 16268., 17472., 18716., 20000., 18364., 19648., 20972.,
      22336., 13744., 14784., 15856., 16960., 12004., 12832., 13684., 14560.,
      8687.,  9420.,  10183., 10976., 13284., 14320., 15396., 16512., 18833.,
      20212., 21641., 23120., 21429., 22908., 24437., 26016., 24025., 25604.,
      27233., 28912., 26621., 28300., 30029., 31808., 22676., 24048., 25460.,
      26912., 19235., 20324., 21443., 22592., 6415.,  7052.,  7719.,  8416.,
      9316.,  10224., 11172., 12160., 13041., 14260., 15529., 16848., 15637.,
      16956., 18325., 19744., 18233., 19652., 21121., 22640., 20829., 22348.,
      23917., 25536., 16148., 17392., 18676., 20000., 14147., 15140., 16163.,
      17216., 8687.,  9420.,  10183., 10976., 13284., 14320., 15396., 16512.,
      18833., 20212., 21641., 23120., 21429., 22908., 24437., 26016., 24025.,
      25604., 27233., 28912., 26621., 28300., 30029., 31808., 22676., 24048.,
      25460., 26912., 19235., 20324., 21443., 22592., 6372.,  6976.,  7604.,
      8256.,  9200.,  10048., 10928., 11840., 12796., 13920., 15084., 16288.,
      15212., 16416., 17660., 18944., 17628., 18912., 20236., 21600., 20044.,
      21408., 22812., 24256., 15216., 16320., 17456., 18624., 13204., 14080.,
      14980., 15904., 7821.,  8332.,  8861.,  9408.,  11596., 12304., 13036.,
      13792., 16003., 16932., 17891., 18880., 17839., 18828., 19847., 20896.,
      19675., 20724., 21803., 22912., 21511., 22620., 23759., 24928., 17564.,
      18448., 19356., 20288., 14601., 15300., 16017., 16752., 3429.,  3804.,
      4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,  8820.,  9595.,
      10400., 9815.,  10620., 11455., 12320., 11555., 12420., 13315., 14240.,
      13295., 14220., 15175., 16160., 12284., 13072., 13884., 14720., 10497.,
      11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,  9776.,  10560.,
      11376., 12224., 13868., 14912., 15996., 17120., 15964., 17088., 18252.,
      19456., 18060., 19264., 20508., 21792., 20156., 21440., 22764., 24128.,
      16816., 17856., 18928., 20032., 14308., 15136., 15988., 16864., 6415.,
      7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160., 13041., 14260.,
      15529., 16848., 15637., 16956., 18325., 19744., 18233., 19652., 21121.,
      22640., 20829., 22348., 23917., 25536., 16148., 17392., 18676., 20000.,
      14147., 15140., 16163., 17216., 8687.,  9420.,  10183., 10976., 13284.,
      14320., 15396., 16512., 18833., 20212., 21641., 23120., 21429., 22908.,
      24437., 26016., 24025., 25604., 27233., 28912., 26621., 28300., 30029.,
      31808., 22676., 24048., 25460., 26912., 19235., 20324., 21443., 22592.,
      6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160., 13041.,
      14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233., 19652.,
      21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392., 18676.,
      20000., 14147., 15140., 16163., 17216., 8164.,  8768.,  9396.,  10048.,
      12272., 13120., 14000., 14912., 17148., 18272., 19436., 20640., 19564.,
      20768., 22012., 23296., 21980., 23264., 24588., 25952., 24396., 25760.,
      27164., 28608., 20336., 21440., 22576., 23744., 17044., 17920., 18820.,
      19744., 3629.,  4044.,  4477.,  4928.,  5068.,  5648.,  6252.,  6880.,
      7011.,  7780.,  8579.,  9408.,  8847.,  9676.,  10535., 11424., 10683.,
      11572., 12491., 13440., 12519., 13468., 14447., 15456., 8476.,  9232.,
      10012., 10816., 7593.,  8196.,  8817.,  9456.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,
      496.,   221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,
      1504.,  1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,
      2306.,  2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,
      1280.,  431.,   548.,   671.,   800.,   1318.,  1576.,  1846.,  2128.,
      2709.,  3132.,  3573.,  4032.,  4652.,  5264.,  5900.,  6560.,  5756.,
      6416.,  7100.,  7808.,  5409.,  5940.,  6489.,  7056.,  4366.,  4744.,
      5134.,  5536.,  2579.,  2780.,  2987.,  3200.,  1451.,  1628.,  1811.,
      2000.,  3534.,  3848.,  4174.,  4512.,  6105.,  6580.,  7073.,  7584.,
      9212.,  9872.,  10556., 11264., 9484.,  10128., 10796., 11488., 8181.,
      8700.,  9237.,  9792.,  6198.,  6568.,  6950.,  7344.,  3487.,  3684.,
      3887.,  4096.,  2407.,  2580.,  2759.,  2944.,  4406.,  4712.,  5030.,
      5360.,  6877.,  7340.,  7821.,  8320.,  9868.,  10512., 11180., 11872.,
      9116.,  9744.,  10396., 11072., 7881.,  8388.,  8913.,  9456.,  5982.,
      6344.,  6718.,  7104.,  3371.,  3564.,  3763.,  3968.,  2302.,  2432.,
      2566.,  2704.,  3004.,  3216.,  3436.,  3664.,  3994.,  4304.,  4626.,
      4960.,  5304.,  5728.,  6168.,  6624.,  3416.,  3808.,  4216.,  4640.,
      3218.,  3536.,  3866.,  4208.,  2604.,  2832.,  3068.,  3312.,  1542.,
      1664.,  1790.,  1920.,  561.,   612.,   665.,   720.,   1322.,  1432.,
      1546.,  1664.,  2299.,  2476.,  2659.,  2848.,  3508.,  3760.,  4020.,
      4288.,  4132.,  4400.,  4676.,  4960.,  3535.,  3748.,  3967.,  4192.,
      2658.,  2808.,  2962.,  3120.,  1485.,  1564.,  1645.,  1728.,  49.,
      100.,   153.,   208.,   298.,   408.,   522.,   640.,   763.,   940.,
      1123.,  1312.,  1460.,  1712.,  1972.,  2240.,  2340.,  2608.,  2884.,
      3168.,  2191.,  2404.,  2623.,  2848.,  1762.,  1912.,  2066.,  2224.,
      1037.,  1116.,  1197.,  1280.,  1030.,  1104.,  1182.,  1264.,  2348.,
      2512.,  2684.,  2864.,  3986.,  4256.,  4538.,  4832.,  5976.,  6368.,
      6776.,  7200.,  6968.,  7392.,  7832.,  8288.,  5930.,  6272.,  6626.,
      6992.,  4444.,  4688.,  4940.,  5200.,  2478.,  2608.,  2742.,  2880.,
      2047.,  2180.,  2319.,  2464.,  4614.,  4904.,  5206.,  5520.,  7749.,
      8220.,  8709.,  9216.,  11500., 12176., 12876., 13600., 12860., 13584.,
      14332., 15104., 10833., 11412., 12009., 12624., 8046.,  8456.,  8878.,
      9312.,  4451.,  4668.,  4891.,  5120.,  3387.,  3580.,  3779.,  3984.,
      4398.,  4744.,  5102.,  5472.,  5961.,  6484.,  7025.,  7584.,  8124.,
      8848.,  9596.,  10368., 5580.,  6288.,  7020.,  7776.,  5349.,  5916.,
      6501.,  7104.,  4374.,  4776.,  5190.,  5616.,  2607.,  2820.,  3039.,
      3264.,  1591.,  1780.,  1975.,  2176.,  3862.,  4200.,  4550.,  4912.,
      6669.,  7180.,  7709.,  8256.,  10060., 10768., 11500., 12256., 10588.,
      11280., 11996., 12736., 9081.,  9636.,  10209., 10800., 6846.,  7240.,
      7646.,  8064.,  3835.,  4044.,  4259.,  4480.,  1054.,  1152.,  1254.,
      1360.,  1404.,  1552.,  1708.,  1872.,  1914.,  2128.,  2354.,  2592.,
      2616.,  2912.,  3224.,  3552.,  1240.,  1504.,  1784.,  2080.,  1394.,
      1616.,  1850.,  2096.,  1260.,  1424.,  1596.,  1776.,  806.,   896.,
      990.,   1088.,  289.,   324.,   361.,   400.,   714.,   792.,   874.,
      960.,   1291.,  1420.,  1555.,  1696.,  2036.,  2224.,  2420.,  2624.,
      2404.,  2608.,  2820.,  3040.,  2143.,  2308.,  2479.,  2656.,  1666.,
      1784.,  1906.,  2032.,  957.,   1020.,  1085.,  1152.,  33.,    68.,
      105.,   144.,   202.,   280.,   362.,   448.,   523.,   652.,   787.,
      928.,   1012.,  1200.,  1396.,  1600.,  1636.,  1840.,  2052.,  2272.,
      1567.,  1732.,  1903.,  2080.,  1282.,  1400.,  1522.,  1648.,  765.,
      828.,   893.,   960.,   742.,   848.,   958.,   1072.,  1900.,  2128.,
      2364.,  2608.,  3506.,  3872.,  4250.,  4640.,  5592.,  6112.,  6648.,
      7200.,  7096.,  7648.,  8216.,  8800.,  6218.,  6656.,  7106.,  7568.,
      4764.,  5072.,  5388.,  5712.,  2702.,  2864.,  3030.,  3200.,  2383.,
      2532.,  2687.,  2848.,  5350.,  5672.,  6006.,  6352.,  8949.,  9468.,
      10005., 10560., 13228., 13968., 14732., 15520., 14844., 15632., 16444.,
      17280., 12417., 13044., 13689., 14352., 9166.,  9608.,  10062., 10528.,
      5043.,  5276.,  5515.,  5760.,  4043.,  4252.,  4467.,  4688.,  6798.,
      7176.,  7566.,  7968.,  10169., 10740., 11329., 11936., 14204., 14992.,
      15804., 16640., 12940., 13712., 14508., 15328., 10965., 11580., 12213.,
      12864., 8182.,  8616.,  9062.,  9520.,  4543.,  4772.,  5007.,  5248.,
      3591.,  3796.,  4007.,  4224.,  4854.,  5224.,  5606.,  6000.,  6717.,
      7276.,  7853.,  8448.,  9228.,  10000., 10796., 11616., 6940.,  7696.,
      8476.,  9280.,  6441.,  7044.,  7665.,  8304.,  5150.,  5576.,  6014.,
      6464.,  3019.,  3244.,  3475.,  3712.,  894.,   1024.,  1158.,  1296.,
      2236.,  2448.,  2668.,  2896.,  3866.,  4176.,  4498.,  4832.,  5816.,
      6240.,  6680.,  7136.,  5976.,  6368.,  6776.,  7200.,  5138.,  5456.,
      5786.,  6128.,  3884.,  4112.,  4348.,  4592.,  2182.,  2304.,  2430.,
      2560.,  17.,    36.,    57.,    80.,    106.,   152.,   202.,   256.,
      283.,   364.,   451.,   544.,   564.,   688.,   820.,   960.,   676.,
      816.,   964.,   1120.,  751.,   868.,   991.,   1120.,  674.,   760.,
      850.,   944.,   429.,   476.,   525.,   576.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257.,
      9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,
      5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580.,
      13348., 6868.,  9124.,  11700., 14596., 7732.,  10116., 12820., 15844.,
      8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,
      7260.,  9036.,  11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,
      7228.,  9004.,  4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,
      10943., 6579.,  8383.,  10427., 12711., 6523.,  8423.,  10563., 12943.,
      3996.,  5388.,  6972.,  8748.,  4141.,  5345.,  6693.,  8185.,  2133.,
      3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,  6655.,
      8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,  8715.,
      10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,
      4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,  5840.,
      7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,
      11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004.,
      3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,
      10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,  12305.,
      15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388.,
      15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,  8447.,
      6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8741.,
      11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,  12585.,
      16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723.,
      14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,  5676.,
      7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348.,
      6868.,  9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,
      11108., 13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,
      9036.,  11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,  7228.,
      9004.,  4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,  10943.,
      6579.,  8383.,  10427., 12711., 6523.,  8423.,  10563., 12943., 3996.,
      5388.,  6972.,  8748.,  4141.,  5345.,  6693.,  8185.,  2133.,  3049.,
      4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,  6655.,  8443.,
      10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,  8715.,  10935.,
      5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,  4093.,
      5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,  5840.,  7696.,
      9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700.,
      14596., 7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 3371.,
      4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209.,
      13221., 16633., 8741.,  11513., 14685., 18257., 9373.,  12305., 15637.,
      19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348.,
      7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,
      8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8741.,  11513.,
      14685., 18257., 9373.,  12305., 15637., 19369., 9493.,  12585., 16077.,
      19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723., 14199.,
      3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,
      10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,  12305.,
      15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388.,
      15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,  7228.,  9004.,
      4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,  10943., 6579.,
      8383.,  10427., 12711., 6523.,  8423.,  10563., 12943., 3996.,  5388.,
      6972.,  8748.,  4141.,  5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,
      11048., 13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918.,
      13446., 15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,
      5994.,  2839.,  3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566.,
      13557., 15369., 17325., 19425., 17916., 20460., 23196., 26124., 17244.,
      19916., 22780., 25836., 14077., 16241., 18549., 21001., 7438.,  8902.,
      10462., 12118., 5327.,  6155.,  7031.,  7955.,  1471.,  2107.,  2791.,
      3523.,  5198.,  6406.,  7710.,  9110.,  10733., 12705., 14821., 17081.,
      18268., 20940., 23804., 26860., 18428., 20972., 23708., 26636., 16821.,
      18889., 21101., 23457., 11870., 13270., 14766., 16358., 7479.,  8275.,
      9119.,  10011., 4007.,  4611.,  5263.,  5963.,  6046.,  7190.,  8430.,
      9766.,  9765.,  11641., 13661., 15825., 15548., 18348., 21340., 24524.,
      12636., 15308., 18172., 21228., 13613., 15841., 18213., 20729., 11374.,
      12966., 14654., 16438., 5535.,  6299.,  7111.,  7971.,  2418.,  2938.,
      3490.,  4074.,  6660.,  7572.,  8548.,  9588.,  12150., 13582., 15110.,
      16734., 19144., 21224., 23432., 25768., 15368., 17192., 19144., 21224.,
      13094., 14590., 16182., 17870., 8548.,  9588.,  10692., 11860., 1474.,
      1930.,  2418.,  2938.,  101.,   249.,   413.,   593.,   762.,   1122.,
      1514.,  1938.,  2111.,  2747.,  3431.,  4163.,  4276.,  5252.,  6292.,
      7396.,  4948.,  5796.,  6708.,  7684.,  4567.,  5235.,  5951.,  6715.,
      2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,   101.,
      249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  2111.,  2747.,
      3431.,  4163.,  4276.,  5252.,  6292.,  7396.,  7188.,  8292.,  9460.,
      10692., 7319.,  8243.,  9215.,  10235., 6250.,  6930.,  7642.,  8386.,
      3853.,  4225.,  4613.,  5017.,  2786.,  3114.,  3474.,  3866.,  6820.,
      7604.,  8452.,  9364.,  12358., 13726., 15190., 16750., 15368., 17192.,
      19144., 21224., 13832., 15656., 17608., 19688., 9974.,  11406., 12934.,
      14558., 3588.,  4500.,  5476.,  6516.,  2802.,  3322.,  3874.,  4458.,
      1399.,  1939.,  2527.,  3163.,  4862.,  6134.,  7502.,  8966.,  10773.,
      12969., 15309., 17793., 19324., 22380., 25628., 29068., 24796., 27980.,
      31356., 34924., 22557., 25105., 27797., 30633., 16334., 18054., 19870.,
      21782., 10031., 10987., 11991., 13043., 6687.,  7451.,  8263.,  9123.,
      12046., 13510., 15070., 16726., 19725., 22081., 24581., 27225., 25820.,
      29004., 32380., 35948., 19836., 22892., 26140., 29580., 16597., 19049.,
      21645., 24385., 9502.,  11158., 12910., 14758., 6551.,  7475.,  8447.,
      9467.,  3591.,  4323.,  5103.,  5931.,  9822.,  11222., 12718., 14310.,
      18245., 20505., 22909., 25457., 29244., 32556., 36060., 39756., 28380.,
      31564., 34940., 38508., 25165., 27777., 30533., 33433., 18222., 20070.,
      22014., 24054., 7167.,  8059.,  8999.,  9987.,  3954.,  4474.,  5026.,
      5610.,  5636.,  6548.,  7524.,  8564.,  8566.,  9998.,  11526., 13150.,
      13000., 15080., 17288., 19624., 9224.,  11048., 13000., 15080., 9510.,
      11006., 12598., 14286., 7524.,  8564.,  9668.,  10836., 3010.,  3466.,
      3954.,  4474.,  2245.,  2521.,  2813.,  3121.,  5562.,  6178.,  6826.,
      7506.,  10079., 11099., 12167., 13283., 15924., 17412., 18964., 20580.,
      14548., 15908., 17332., 18820., 11511., 12563., 13663., 14811., 6762.,
      7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,   5.,     25.,
      61.,    113.,   58.,    162.,   298.,   466.,   287.,   539.,   839.,
      1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,  2932.,  3652.,
      2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,  3842.,  1709.,
      1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,  1700.,  2484.,
      3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,  11048., 13000.,
      15080., 11784., 13608., 15560., 17640., 10486., 11918., 13446., 15070.,
      6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,  5994.,  2839.,
      3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566., 13557., 15369.,
      17325., 19425., 17916., 20460., 23196., 26124., 17244., 19916., 22780.,
      25836., 14077., 16241., 18549., 21001., 7438.,  8902.,  10462., 12118.,
      5327.,  6155.,  7031.,  7955.,  1471.,  2107.,  2791.,  3523.,  5198.,
      6406.,  7710.,  9110.,  10733., 12705., 14821., 17081., 18268., 20940.,
      23804., 26860., 18428., 20972., 23708., 26636., 16821., 18889., 21101.,
      23457., 11870., 13270., 14766., 16358., 7479.,  8275.,  9119.,  10011.,
      4007.,  4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9765.,
      11641., 13661., 15825., 15548., 18348., 21340., 24524., 12636., 15308.,
      18172., 21228., 13613., 15841., 18213., 20729., 11374., 12966., 14654.,
      16438., 5535.,  6299.,  7111.,  7971.,  2418.,  2938.,  3490.,  4074.,
      6660.,  7572.,  8548.,  9588.,  12150., 13582., 15110., 16734., 19144.,
      21224., 23432., 25768., 15368., 17192., 19144., 21224., 13094., 14590.,
      16182., 17870., 8548.,  9588.,  10692., 11860., 1474.,  1930.,  2418.,
      2938.,  101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,
      2111.,  2747.,  3431.,  4163.,  4276.,  5252.,  6292.,  7396.,  4948.,
      5796.,  6708.,  7684.,  4567.,  5235.,  5951.,  6715.,  2986.,  3410.,
      3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456.,
      39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,
      17944., 28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,
      14120., 21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112.,
      37720., 10264., 18776., 29848., 43480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,
      13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414., 19646.,
      32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944., 28504.,
      41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826., 26898.,
      7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214., 21726.,
      35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210.,
      32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464.,
      23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610.,
      6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 5442.,
      10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414., 19646.,
      32078., 47710., 11214., 21726., 35438., 52350., 10414., 19646., 32078.,
      47710., 11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624.,
      7266.,  13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,
      15896., 26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726.,
      35438., 52350., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414., 19646.,
      32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944., 28504.,
      41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336.,
      6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,
      9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,
      5500.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,
      8756.,  12692., 1754.,  3210.,  5050.,  7274.,  410.,   1354.,  2682.,
      4394.,  3188.,  5588.,  8756.,  12692., 2574.,  5918.,  10414., 16062.,
      6376.,  11176., 17512., 25384., 4328.,  9128.,  15464., 23336., 6126.,
      10238., 15502., 21918., 2164.,  4564.,  7732.,  11668., 2938.,  4650.,
      6746.,  9226.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,
      11668., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,
      5588.,  8756.,  12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,
      1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,
      10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240.,
      3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,
      2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,  4472.,
      7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,
      13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,
      250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,
      12692., 1754.,  3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,
      3188.,  5588.,  8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,
      11176., 17512., 25384., 4328.,  9128.,  15464., 23336., 6126.,  10238.,
      15502., 21918., 2164.,  4564.,  7732.,  11668., 2938.,  4650.,  6746.,
      9226.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,
      8756.,  12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,   1564.,
      2620.,  1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740.,
      3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,
      6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,
      3932.,  5500.,  30.,    174.,   446.,   846.,   380.,   1180.,  2236.,
      3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,
      2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,    174.,
      446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,
      5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,  190.,
      590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,
      5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692.,
      1754.,  3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,
      5588.,  8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,  11176.,
      17512., 25384., 4328.,  9128.,  15464., 23336., 6126.,  10238., 15502.,
      21918., 2164.,  4564.,  7732.,  11668., 2938.,  4650.,  6746.,  9226.,
      250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,
      12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,
      9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,
      5500.,  30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,
      4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,
      3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      318.,   510.,   750.,   870.,   816.,   705.,   796.,   1220.,  1730.,
      1940.,  1756.,  1474.,  1610.,  2400.,  3325.,  3650.,  3230.,  2660.,
      2690.,  3900.,  5275.,  5600.,  4850.,  3920.,  3770.,  5400.,  7225.,
      7550.,  6470.,  5180.,  4850.,  6900.,  9175.,  9500.,  8090.,  6440.,
      5632.,  7900.,  10370., 10680., 8980.,  7066.,  5628.,  7830.,  10200.,
      10470., 8736.,  6825.,  3342.,  4830.,  6510.,  6630.,  5712.,  4593.,
      6268.,  8900.,  11810., 12020., 10204., 8098.,  10250., 14400., 18925.,
      19250., 16190., 12740., 11330., 15900., 20875., 21200., 17810., 14000.,
      12410., 17400., 22825., 23150., 19430., 15260., 13490., 18900., 24775.,
      25100., 21050., 16520., 13984., 19420., 25250., 25560., 21268., 16570.,
      12972., 17910., 23160., 23430., 19392., 15033., 6366.,  9150.,  12270.,
      12390., 10608., 8481.,  11740., 16580., 21890., 22100., 18652., 14722.,
      18890., 26400., 34525., 34850., 29150., 22820., 19970., 27900., 36475.,
      36800., 30770., 24080., 21050., 29400., 38425., 38750., 32390., 25340.,
      22130., 30900., 40375., 40700., 34010., 26600., 22336., 30940., 40130.,
      40440., 33556., 26074., 20316., 27990., 36120., 36390., 30048., 23241.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   10.,   9.,    29.,   39.,   49.,
      59.,   40.,   34.,   95.,   116.,  137.,  158.,  100.,  86.,   222.,
      258.,  294.,  330.,  200.,  166.,  402.,  438.,  474.,  510.,  300.,
      220.,  503.,  536.,  569.,  602.,  340.,  217.,  483.,  509.,  535.,
      561.,  310.,  147.,  322.,  337.,  352.,  367.,  200.,  9.,    28.,
      47.,   66.,   85.,   50.,   65.,   157.,  199.,  241.,  283.,  160.,
      178.,  407.,  476.,  545.,  614.,  340.,  358.,  798.,  898.,  998.,
      1098., 600.,  598.,  1298., 1398., 1498., 1598., 860.,  604.,  1295.,
      1376., 1457., 1538., 820.,  513.,  1091., 1149., 1207., 1265., 670.,
      315.,  666.,  697.,  728.,  759.,  400.,  17.,   52.,   87.,   122.,
      157.,  90.,   121.,  285.,  359.,  433.,  507.,  280.,  322.,  719.,
      836.,  953.,  1070., 580.,  630.,  1374., 1538., 1702., 1866., 1000.,
      1030., 2194., 2358., 2522., 2686., 1420., 988.,  2087., 2216., 2345.,
      2474., 1300., 809.,  1699., 1789., 1879., 1969., 1030., 483.,  1010.,
      1057., 1104., 1151., 600.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2283.,  3708.,  5505.,  6435.,  6084.,  5289.,  5888.,  9088.,  12960.,
      14600., 13280., 11192., 12115., 18140., 25225., 27775., 24660., 20365.,
      20383., 29260., 39181., 40771., 34052., 27385., 26219., 36156., 47121.,
      47431., 38324., 30565., 28215., 37932., 48661., 47691., 37476., 29905.,
      25640., 33312., 41816., 39456., 29440., 23552., 16843., 20220., 24161.,
      20211., 12420., 10329., 10059., 14844., 20193., 20675., 17604., 13705.,
      18752., 26752., 34208., 34120., 28256., 21368., 28147., 39772., 49833.,
      49375., 40532., 30381., 27583., 38988., 47533., 45795., 37124., 27161.,
      23179., 33084., 38833., 35815., 28596., 20101., 14935., 22060., 30325.,
      32875., 28900., 23665., 21992., 31392., 41880., 44320., 37888., 30272.,
      24747., 34812., 45825., 47955., 40452., 31929., 2283.,  3708.,  5505.,
      6435.,  6084.,  5289.,  5888.,  9088.,  12960., 14600., 13280., 11192.,
      12115., 18140., 25225., 27775., 24660., 20365., 20383., 29260., 39181.,
      40771., 34052., 27385., 26219., 36156., 47121., 47431., 38324., 30565.,
      28215., 37932., 48661., 47691., 37476., 29905., 25640., 33312., 41816.,
      39456., 29440., 23552., 16843., 20220., 24161., 20211., 12420., 10329.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    67.,    52.,    184.,   256.,
      328.,   400.,   280.,   221.,   646.,   802.,   958.,   1114.,  719.,
      592.,   1568.,  1840.,  2112.,  2384.,  1464.,  1192.,  2928.,  3200.,
      3472.,  3744.,  2224.,  1637.,  3766.,  4018.,  4270.,  4522.,  2567.,
      1640.,  3664.,  3864.,  4064.,  4264.,  2364.,  1121.,  2462.,  2578.,
      2694.,  2810.,  1535.,  53.,    182.,   330.,   478.,   626.,   371.,
      468.,   1144.,  1472.,  1800.,  2128.,  1208.,  1325.,  3046.,  3586.,
      4126.,  4666.,  2591.,  2704.,  6048.,  6832.,  7616.,  8400.,  4600.,
      4584.,  9968.,  10752., 11536., 12320., 6640.,  4661.,  10006., 10642.,
      11278., 11914., 6359.,  3976.,  8464.,  8920.,  9376.,  9832.,  5212.,
      2449.,  5182.,  5426.,  5670.,  5914.,  3119.,  101.,   342.,   618.,
      894.,   1170.,  675.,   884.,   2104.,  2688.,  3272.,  3856.,  2136.,
      2429.,  5446.,  6370.,  7294.,  8218.,  4463.,  4816.,  10528., 11824.,
      13120., 14416., 7736.,  7976.,  17008., 18304., 19600., 20896., 11056.,
      7685.,  16246., 17266., 18286., 19306., 10151., 6312.,  13264., 13976.,
      14688., 15400., 8060.,  3777.,  7902.,  8274.,  8646.,  9018.,  4703.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9366.,  9832.,  10858., 13442., 12104., 9630.,  13336., 17696., 20392.,
      18888., 11040., 11064., 11650., 18680., 25790., 28966., 23064., 17658.,
      16018., 22840., 23982., 24278., 20440., 17034., 18018., 22904., 24734.,
      27078., 19992., 14170., 17138., 23864., 28238., 28342., 19544., 17770.,
      11256., 17824., 24200., 26536., 20064., 14552., 12118., 16616., 15210.,
      15106., 13960., 11998., 9366.,  9832.,  10858., 13442., 12104., 9630.,
      13336., 17696., 20392., 18888., 11040., 11064., 11650., 18680., 25790.,
      28966., 23064., 17658., 16018., 22840., 23982., 24278., 20440., 17034.,
      18018., 22904., 24734., 27078., 19992., 14170., 17138., 23864., 28238.,
      28342., 19544., 17770., 11256., 17824., 24200., 26536., 20064., 14552.,
      12118., 16616., 15210., 15106., 13960., 11998., 9366.,  9832.,  10858.,
      13442., 12104., 9630.,  13336., 17696., 20392., 18888., 11040., 11064.,
      11650., 18680., 25790., 28966., 23064., 17658., 16018., 22840., 23982.,
      24278., 20440., 17034., 18018., 22904., 24734., 27078., 19992., 14170.,
      17138., 23864., 28238., 28342., 19544., 17770., 11256., 17824., 24200.,
      26536., 20064., 14552., 12118., 16616., 15210., 15106., 13960., 11998.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   486.,   340.,   1288.,  1832.,
      2376.,  2920.,  2084.,  1570.,  4724.,  5924.,  7124.,  8324.,  5434.,
      4360.,  11088., 11536., 13648., 15760., 9512.,  8360.,  17296., 15696.,
      17808., 19920., 11720., 9922.,  17972., 14180., 16148., 18116., 10458.,
      8004.,  11240., 5000.,  6568.,  8136.,  4884.,  1966.,  4652.,  5564.,
      6476.,  7388.,  4214.,  350.,   1292.,  2460.,  3628.,  4796.,  2854.,
      3540.,  8712.,  11304., 13896., 16488., 9380.,  10210., 23540., 27812.,
      32084., 36356., 20218., 21000., 38224., 34576., 40784., 46992., 26152.,
      27048., 48528., 42832., 49040., 55248., 30408., 25730., 42932., 34020.,
      39060., 44100., 24218., 18372., 24808., 12424., 16040., 19656., 11156.,
      4334.,  9900.,  11836., 13772., 15708., 8630.,  30.,    140.,   284.,
      428.,   572.,   486.,   340.,   1288.,  1832.,  2376.,  2920.,  2084.,
      1570.,  4724.,  5924.,  7124.,  8324.,  5434.,  4360.,  11088., 11536.,
      13648., 15760., 9512.,  8360.,  17296., 15696., 17808., 19920., 11720.,
      9922.,  17972., 14180., 16148., 18116., 10458., 8004.,  11240., 5000.,
      6568.,  8136.,  4884.,  1966.,  4652.,  5564.,  6476.,  7388.,  4214.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1011.,  1272.,  1668.,  2040.,  2505.,  3000.,  2955.,  3480.,  2820.,
      3264.,  2469.,  2820.,  2704.,  3184.,  4208.,  4880.,  6040.,  6920.,
      6840.,  7760.,  6256.,  7024.,  5296.,  5896.,  5675.,  6440.,  8540.,
      9600.,  11925., 13300., 13175., 14600., 11740., 12920., 9725.,  10640.,
      9815.,  10760., 14300., 15600., 19425., 21100., 20675., 22400., 17980.,
      19400., 14585., 15680., 13955., 15080., 20060., 21600., 26925., 28900.,
      28175., 30200., 24220., 25880., 19445., 20720., 18095., 19400., 25820.,
      27600., 34425., 36700., 35675., 38000., 30460., 32360., 24305., 25760.,
      21352., 22528., 30000., 31600., 39440., 41480., 40640., 42720., 34224.,
      35920., 26968., 28264., 21531., 22512., 29988., 31320., 39105., 40800.,
      40155., 41880., 33540., 34944., 26229., 27300., 12243., 13368., 17796.,
      19320., 23977., 25784., 24043., 25752., 20228., 21568., 15621., 16580.,
      22288., 23536., 31344., 33040., 39832., 41864., 38968., 40912., 31856.,
      33392., 23856., 24968., 32651., 34088., 45404., 47360., 56437., 58804.,
      54743., 57032., 44252., 46072., 32733., 34064., 27959., 29192., 38876.,
      40560., 46657., 48684., 43683., 45632., 34620., 36168., 24665., 25792.,
      19427., 20456., 27228., 28640., 30477., 32164., 26223., 27832., 19868.,
      21144., 12757., 13680., 7055.,  7880.,  10460., 11600., 14425., 15900.,
      15675., 17200., 13820., 15080., 11345., 12320., 10600., 11392., 15152.,
      16240., 20240., 21640., 21440., 22880., 18352., 19536., 14680., 15592.,
      12027., 12720., 16932., 17880., 22305., 23520., 23355., 24600., 19716.,
      20736., 15573., 16356., 8499.,  9336.,  12420., 13560., 16905., 18360.,
      17355., 18840., 15108., 16320., 12261., 13188., 16528., 17776., 23664.,
      25360., 31640., 33800., 32440., 34640., 27760., 29552., 22192., 23560.,
      27755., 29480., 39260., 41600., 51925., 54900., 53175., 56200., 45020.,
      47480., 35645., 37520., 31767., 33544., 44508., 46832., 58273., 61164.,
      58627., 61440., 48188., 50376., 37817., 39488., 33475., 35048., 45660.,
      47712., 58733., 61284., 57807., 60280., 46236., 48152., 36149., 37616.,
      31343., 32712., 41692., 43472., 52793., 55004., 50587., 52720., 39164.,
      40808., 30641., 31904., 25064., 26112., 32048., 33392., 39568., 41224.,
      36032., 37600., 26032., 27216., 20440., 21352., 13787., 14448., 15652.,
      16472., 17793., 18784., 12827., 13720., 5892.,  6528.,  4917.,  5412.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,    30.,    52.,
      27.,   40.,   16.,   36.,   68.,   116.,  100.,  156.,   132.,   196.,
      164.,  236.,  120.,  160.,  85.,   136.,  266.,  380.,   338.,   464.,
      410.,  548.,  482.,  632.,  319.,  400.,  248.,  344.,   680.,   888.,
      808.,  1032., 936.,  1176., 1064., 1320., 664.,  800.,   528.,   664.,
      1320., 1608., 1448., 1752., 1576., 1896., 1704., 2040.,  1024.,  1200.,
      757.,  880.,  1754., 2012., 1874., 2144., 1994., 2276.,  2114.,  2408.,
      1207., 1360., 772.,  868.,  1732., 1932., 1828., 2036.,  1924.,  2140.,
      2020., 2244., 1124., 1240., 533.,  588.,  1174., 1288.,  1230.,  1348.,
      1286., 1408., 1342., 1468., 735.,  800.,  17.,   36.,    70.,    112.,
      142.,  188.,  214.,  264.,  286.,  340.,  171.,  200.,   208.,   260.,
      516.,  628.,  676.,  796.,  836.,  964.,  996.,  1132.,  568.,   640.,
      613.,  712.,  1418., 1628., 1682., 1904., 1946., 2180.,  2210.,  2456.,
      1231., 1360., 1272., 1432., 2856., 3192., 3240., 3592.,  3624.,  3992.,
      4008., 4392., 2200., 2400., 2192., 2392., 4776., 5192.,  5160.,  5592.,
      5544., 5992., 5928., 6392., 3200., 3440., 2245., 2416.,  4826.,  5180.,
      5138., 5504., 5450., 5828., 5762., 6152., 3079., 3280.,  1924.,  2052.,
      4100., 4364., 4324., 4596., 4548., 4828., 4772., 5060.,  2532.,  2680.,
      1189., 1260., 2518., 2664., 2638., 2788., 2758., 2912.,  2878.,  3036.,
      1519., 1600., 33.,   68.,   134.,  208.,  270.,  348.,   406.,   488.,
      542.,  628.,  315.,  360.,  400.,  484.,  964.,  1140.,  1252.,  1436.,
      1540., 1732., 1828., 2028., 1016., 1120., 1141., 1288.,  2570.,  2876.,
      3026., 3344., 3482., 3812., 3938., 4280., 2143., 2320.,  2296.,  2520.,
      5032., 5496., 5672., 6152., 6312., 6808., 6952., 7464.,  3736.,  4000.,
      3856., 4120., 8232., 8776., 8872., 9432., 9512., 10088., 10152., 10744.,
      5376., 5680., 3733., 3952., 7898., 8348., 8402., 8864.,  8906.,  9380.,
      9410., 9896., 4951., 5200., 3076., 3236., 6468., 6796.,  6820.,  7156.,
      7172., 7516., 7524., 7876., 3940., 4120., 1845., 1932.,  3862.,  4040.,
      4046., 4228., 4230., 4416., 4414., 4604., 2303., 2400.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7593.,  9645.,  12636., 15564., 18903., 22547., 21739., 25367., 19788.,
      22780., 16133., 18393., 17700., 20212., 26416., 29936., 33948., 38348.,
      34956., 39420., 27696., 31216., 21236., 23940., 22859., 26103., 33172.,
      37732., 40245., 46025., 39713., 45637., 29284., 34036., 22127., 25803.,
      22595., 26255., 32052., 36996., 35645., 41777., 39017., 45037., 33156.,
      37780., 27751., 31331., 26555., 30119., 37204., 42020., 47557., 53529.,
      45809., 51669., 32932., 37428., 26207., 29691., 23347., 26815., 30068.,
      34756., 38669., 44737., 37113., 43325., 23364., 28244., 21463., 25363.,
      18484., 21700., 28784., 33072., 40780., 46268., 44476., 50028., 37232.,
      41520., 31364., 34772., 21385., 23821., 28956., 32140., 37687., 41715.,
      37643., 41655., 25932., 28924., 21861., 24249., 7593.,  9645.,  12636.,
      15564., 18903., 22547., 21739., 25367., 19788., 22780., 16133., 18393.,
      17700., 20212., 26416., 29936., 33948., 38348., 34956., 39420., 27696.,
      31216., 21236., 23940., 22859., 26103., 33172., 37732., 40245., 46025.,
      39713., 45637., 29284., 34036., 22127., 25803., 22595., 26255., 32052.,
      36996., 35645., 41777., 39017., 45037., 33156., 37780., 27751., 31331.,
      26555., 30119., 37204., 42020., 47557., 53529., 45809., 51669., 32932.,
      37428., 26207., 29691., 23347., 26815., 30068., 34756., 38669., 44737.,
      37113., 43325., 23364., 28244., 21463., 25363., 18484., 21700., 28784.,
      33072., 40780., 46268., 44476., 50028., 37232., 41520., 31364., 34772.,
      21385., 23821., 28956., 32140., 37687., 41715., 37643., 41655., 25932.,
      28924., 21861., 24249., 7593.,  9645.,  12636., 15564., 18903., 22547.,
      21739., 25367., 19788., 22780., 16133., 18393., 17700., 20212., 26416.,
      29936., 33948., 38348., 34956., 39420., 27696., 31216., 21236., 23940.,
      22859., 26103., 33172., 37732., 40245., 46025., 39713., 45637., 29284.,
      34036., 22127., 25803., 22595., 26255., 32052., 36996., 35645., 41777.,
      39017., 45037., 33156., 37780., 27751., 31331., 26555., 30119., 37204.,
      42020., 47557., 53529., 45809., 51669., 32932., 37428., 26207., 29691.,
      23347., 26815., 30068., 34756., 38669., 44737., 37113., 43325., 23364.,
      28244., 21463., 25363., 18484., 21700., 28784., 33072., 40780., 46268.,
      44476., 50028., 37232., 41520., 31364., 34772., 21385., 23821., 28956.,
      32140., 37687., 41715., 37643., 41655., 25932., 28924., 21861., 24249.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   193.,   293.,   94.,    246.,   460.,   828.,   700.,   1132.,
      940.,   1436.,  1180.,  1740.,  886.,   1198.,  587.,   983.,   1918.,
      2806.,  2470.,  3454.,  3022.,  4102.,  3574.,  4750.,  2399.,  3035.,
      1804.,  2556.,  4856.,  6232.,  5144.,  6392.,  6136.,  7512.,  7128.,
      8632.,  4348.,  5164.,  3772.,  4588.,  7896.,  9400.,  7160.,  8536.,
      8152.,  9656.,  9144.,  10776., 5420.,  6300.,  4603.,  5319.,  8350.,
      9622.,  6534.,  7646.,  7470.,  8678.,  8406.,  9710.,  4879.,  5579.,
      3750.,  4254.,  5212.,  6028.,  2188.,  2812.,  2940.,  3628.,  3692.,
      4444.,  2238.,  2646.,  893.,   1073.,  2130.,  2522.,  2570.,  2994.,
      3010.,  3466.,  3450.,  3938.,  1977.,  2237.,  101.,   249.,   482.,
      810.,   1050.,  1410.,  1618.,  2010.,  2186.,  2610.,  1313.,  1541.,
      1566.,  1974.,  3916.,  4796.,  5180.,  6124.,  6444.,  7452.,  7708.,
      8780.,  4406.,  4974.,  4715.,  5495.,  10942., 12598., 13030., 14782.,
      15118., 16966., 17206., 19150., 9599.,  10619., 9868.,  11132., 17912.,
      20312., 16152., 18424., 19192., 21592., 22232., 24760., 12412., 13740.,
      12860., 14188., 23000., 25528., 20216., 22616., 23256., 25784., 26296.,
      28952., 14508., 15900., 12315., 13415., 20446., 22486., 16070., 17950.,
      18542., 20518., 21014., 23086., 11567., 12651., 8806.,  9566.,  11740.,
      13068., 5644.,  6780.,  7420.,  8620.,  9196.,  10460., 5246.,  5910.,
      2013.,  2321.,  4626.,  5274.,  5578.,  6258.,  6530.,  7242.,  7482.,
      8226.,  4121.,  4509.,  5.,     25.,    34.,    106.,   90.,    194.,
      146.,   282.,   202.,   370.,   193.,   293.,   94.,    246.,   460.,
      828.,   700.,   1132.,  940.,   1436.,  1180.,  1740.,  886.,   1198.,
      587.,   983.,   1918.,  2806.,  2470.,  3454.,  3022.,  4102.,  3574.,
      4750.,  2399.,  3035.,  1804.,  2556.,  4856.,  6232.,  5144.,  6392.,
      6136.,  7512.,  7128.,  8632.,  4348.,  5164.,  3772.,  4588.,  7896.,
      9400.,  7160.,  8536.,  8152.,  9656.,  9144.,  10776., 5420.,  6300.,
      4603.,  5319.,  8350.,  9622.,  6534.,  7646.,  7470.,  8678.,  8406.,
      9710.,  4879.,  5579.,  3750.,  4254.,  5212.,  6028.,  2188.,  2812.,
      2940.,  3628.,  3692.,  4444.,  2238.,  2646.,  893.,   1073.,  2130.,
      2522.,  2570.,  2994.,  3010.,  3466.,  3450.,  3938.,  1977.,  2237.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  11886., 9896.,  16232., 10386., 17794., 11906., 19698., 11432.,
      17768., 6958.,  11582., 9736.,  15816., 13536., 21984., 15480., 25784.,
      17336., 28152., 13536., 21984., 11592., 18184., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 12258., 19794., 17688.,
      28248., 19310., 32126., 19710., 33166., 17176., 27736., 15634., 24066.,
      8712.,  14792., 13536., 21984., 16504., 26808., 18360., 29176., 13536.,
      21984., 10568., 17160., 7902.,  12398., 9896.,  16232., 11218., 19138.,
      13250., 21554., 11432., 17768., 9326.,  14462., 7390.,  11886., 9896.,
      16232., 10386., 17794., 11906., 19698., 11432., 17768., 6958.,  11582.,
      9736.,  15816., 13536., 21984., 15480., 25784., 17336., 28152., 13536.,
      21984., 11592., 18184., 9538.,  16818., 15640., 26200., 20174., 32734.,
      22622., 35822., 17176., 27736., 11890., 20066., 12258., 19794., 17688.,
      28248., 19310., 32126., 19710., 33166., 17176., 27736., 15634., 24066.,
      9538.,  16818., 15640., 26200., 20174., 32734., 22622., 35822., 17176.,
      27736., 11890., 20066., 12258., 19794., 17688., 28248., 19310., 32126.,
      19710., 33166., 17176., 27736., 15634., 24066., 8712.,  14792., 13536.,
      21984., 16504., 26808., 18360., 29176., 13536., 21984., 10568., 17160.,
      7902.,  12398., 9896.,  16232., 11218., 19138., 13250., 21554., 11432.,
      17768., 9326.,  14462., 7390.,  11886., 9896.,  16232., 10386., 17794.,
      11906., 19698., 11432., 17768., 6958.,  11582., 9736.,  15816., 13536.,
      21984., 15480., 25784., 17336., 28152., 13536., 21984., 11592., 18184.,
      9538.,  16818., 15640., 26200., 20174., 32734., 22622., 35822., 17176.,
      27736., 11890., 20066., 12258., 19794., 17688., 28248., 19310., 32126.,
      19710., 33166., 17176., 27736., 15634., 24066., 9538.,  16818., 15640.,
      26200., 20174., 32734., 22622., 35822., 17176., 27736., 11890., 20066.,
      12258., 19794., 17688., 28248., 19310., 32126., 19710., 33166., 17176.,
      27736., 15634., 24066., 8712.,  14792., 13536., 21984., 16504., 26808.,
      18360., 29176., 13536., 21984., 10568., 17160., 7902.,  12398., 9896.,
      16232., 11218., 19138., 13250., 21554., 11432., 17768., 9326.,  14462.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1454.,  2238.,  620.,   1804.,  3352.,  6232.,  5208.,  8600.,
      6424.,  9304.,  5592.,  7960.,  4108.,  5548.,  3690.,  5786.,  11188.,
      16148., 15508., 21236., 15092., 20564., 12628., 17844., 9114.,  12106.,
      8344.,  12248., 23344., 31152., 28464., 36272., 27440., 35248., 24368.,
      32176., 16344., 20760., 15832., 20248., 35248., 44080., 36272., 45104.,
      31152., 39984., 23344., 31152., 13976., 17880., 14378., 18010., 26804.,
      33812., 23316., 30068., 30708., 38228., 33364., 40628., 16602., 20106.,
      16588., 19564., 25944., 31384., 16920., 21848., 22872., 28312., 19992.,
      24920., 6636.,  8844.,  6974.,  8398.,  16668., 19772., 20156., 23516.,
      23644., 27260., 14204., 17052., 590.,   1630.,  30.,    174.,   220.,
      764.,   636.,   1436.,  1052.,  2108.,  1468.,  2780.,  1454.,  2238.,
      620.,   1804.,  3352.,  6232.,  5208.,  8600.,  6424.,  9304.,  5592.,
      7960.,  4108.,  5548.,  3690.,  5786.,  11188., 16148., 15508., 21236.,
      15092., 20564., 12628., 17844., 9114.,  12106., 8344.,  12248., 23344.,
      31152., 28464., 36272., 27440., 35248., 24368., 32176., 16344., 20760.,
      15832., 20248., 35248., 44080., 36272., 45104., 31152., 39984., 23344.,
      31152., 13976., 17880., 14378., 18010., 26804., 33812., 23316., 30068.,
      30708., 38228., 33364., 40628., 16602., 20106., 16588., 19564., 25944.,
      31384., 16920., 21848., 22872., 28312., 19992., 24920., 6636.,  8844.,
      6974.,  8398.,  16668., 19772., 20156., 23516., 23644., 27260., 14204.,
      17052., 590.,   1630.,  30.,    174.,   220.,   764.,   636.,   1436.,
      1052.,  2108.,  1468.,  2780.,  1454.,  2238.,  620.,   1804.,  3352.,
      6232.,  5208.,  8600.,  6424.,  9304.,  5592.,  7960.,  4108.,  5548.,
      3690.,  5786.,  11188., 16148., 15508., 21236., 15092., 20564., 12628.,
      17844., 9114.,  12106., 8344.,  12248., 23344., 31152., 28464., 36272.,
      27440., 35248., 24368., 32176., 16344., 20760., 15832., 20248., 35248.,
      44080., 36272., 45104., 31152., 39984., 23344., 31152., 13976., 17880.,
      14378., 18010., 26804., 33812., 23316., 30068., 30708., 38228., 33364.,
      40628., 16602., 20106., 16588., 19564., 25944., 31384., 16920., 21848.,
      22872., 28312., 19992., 24920., 6636.,  8844.,  6974.,  8398.,  16668.,
      19772., 20156., 23516., 23644., 27260., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3549.,  4044.,  4557.,  5088.,  5964.,  6672.,  7404.,  8160.,  9011.,
      9892.,  10803., 11744., 10431., 11308., 12215., 13152., 9532.,  10256.,
      11004., 11776., 7793.,  8340.,  8905.,  9488.,  8548.,  9152.,  9780.,
      10432., 12784., 13632., 14512., 15424., 16444., 17504., 18604., 19744.,
      16940., 18016., 19132., 20288., 13424., 14272., 15152., 16064., 10292.,
      10944., 11620., 12320., 11039., 11820., 12631., 13472., 16036., 17136.,
      18276., 19456., 19425., 20820., 22265., 23760., 19141., 20572., 22053.,
      23584., 14068., 15216., 16404., 17632., 10619., 11508., 12427., 13376.,
      10855., 11740., 12655., 13600., 15428., 16624., 17860., 19136., 17081.,
      18564., 20097., 21680., 18781., 20236., 21741., 23296., 16020., 17136.,
      18292., 19488., 13443., 14308., 15203., 16128., 12847., 13708., 14599.,
      15520., 18020., 19184., 20388., 21632., 23057., 24500., 25993., 27536.,
      22197., 23612., 25077., 26592., 15924., 17008., 18132., 19296., 12683.,
      13524., 14395., 15296., 11255., 12092., 12959., 13856., 14468., 15600.,
      16772., 17984., 18601., 20068., 21585., 23152., 17805., 19308., 20861.,
      22464., 11092., 12272., 13492., 14752., 10259., 11204., 12179., 13184.,
      8852.,  9632.,  10436., 11264., 13872., 14912., 15984., 17088., 19724.,
      21056., 22428., 23840., 21564., 22912., 24300., 25728., 18096., 19136.,
      20208., 21312., 15268., 16096., 16948., 17824., 10397., 10988., 11597.,
      12224., 14092., 14864., 15660., 16480., 18355., 19332., 20339., 21376.,
      18335., 19308., 20311., 21344., 12604., 13328., 14076., 14848., 10641.,
      11220., 11817., 12432., 3549.,  4044.,  4557.,  5088.,  5964.,  6672.,
      7404.,  8160.,  9011.,  9892.,  10803., 11744., 10431., 11308., 12215.,
      13152., 9532.,  10256., 11004., 11776., 7793.,  8340.,  8905.,  9488.,
      8548.,  9152.,  9780.,  10432., 12784., 13632., 14512., 15424., 16444.,
      17504., 18604., 19744., 16940., 18016., 19132., 20288., 13424., 14272.,
      15152., 16064., 10292., 10944., 11620., 12320., 11039., 11820., 12631.,
      13472., 16036., 17136., 18276., 19456., 19425., 20820., 22265., 23760.,
      19141., 20572., 22053., 23584., 14068., 15216., 16404., 17632., 10619.,
      11508., 12427., 13376., 10855., 11740., 12655., 13600., 15428., 16624.,
      17860., 19136., 17081., 18564., 20097., 21680., 18781., 20236., 21741.,
      23296., 16020., 17136., 18292., 19488., 13443., 14308., 15203., 16128.,
      12847., 13708., 14599., 15520., 18020., 19184., 20388., 21632., 23057.,
      24500., 25993., 27536., 22197., 23612., 25077., 26592., 15924., 17008.,
      18132., 19296., 12683., 13524., 14395., 15296., 11255., 12092., 12959.,
      13856., 14468., 15600., 16772., 17984., 18601., 20068., 21585., 23152.,
      17805., 19308., 20861., 22464., 11092., 12272., 13492., 14752., 10259.,
      11204., 12179., 13184., 8852.,  9632.,  10436., 11264., 13872., 14912.,
      15984., 17088., 19724., 21056., 22428., 23840., 21564., 22912., 24300.,
      25728., 18096., 19136., 20208., 21312., 15268., 16096., 16948., 17824.,
      10397., 10988., 11597., 12224., 14092., 14864., 15660., 16480., 18355.,
      19332., 20339., 21376., 18335., 19308., 20311., 21344., 12604., 13328.,
      14076., 14848., 10641., 11220., 11817., 12432., 3549.,  4044.,  4557.,
      5088.,  5964.,  6672.,  7404.,  8160.,  9011.,  9892.,  10803., 11744.,
      10431., 11308., 12215., 13152., 9532.,  10256., 11004., 11776., 7793.,
      8340.,  8905.,  9488.,  8548.,  9152.,  9780.,  10432., 12784., 13632.,
      14512., 15424., 16444., 17504., 18604., 19744., 16940., 18016., 19132.,
      20288., 13424., 14272., 15152., 16064., 10292., 10944., 11620., 12320.,
      11039., 11820., 12631., 13472., 16036., 17136., 18276., 19456., 19425.,
      20820., 22265., 23760., 19141., 20572., 22053., 23584., 14068., 15216.,
      16404., 17632., 10619., 11508., 12427., 13376., 10855., 11740., 12655.,
      13600., 15428., 16624., 17860., 19136., 17081., 18564., 20097., 21680.,
      18781., 20236., 21741., 23296., 16020., 17136., 18292., 19488., 13443.,
      14308., 15203., 16128., 12847., 13708., 14599., 15520., 18020., 19184.,
      20388., 21632., 23057., 24500., 25993., 27536., 22197., 23612., 25077.,
      26592., 15924., 17008., 18132., 19296., 12683., 13524., 14395., 15296.,
      11255., 12092., 12959., 13856., 14468., 15600., 16772., 17984., 18601.,
      20068., 21585., 23152., 17805., 19308., 20861., 22464., 11092., 12272.,
      13492., 14752., 10259., 11204., 12179., 13184., 8852.,  9632.,  10436.,
      11264., 13872., 14912., 15984., 17088., 19724., 21056., 22428., 23840.,
      21564., 22912., 24300., 25728., 18096., 19136., 20208., 21312., 15268.,
      16096., 16948., 17824., 10397., 10988., 11597., 12224., 14092., 14864.,
      15660., 16480., 18355., 19332., 20339., 21376., 18335., 19308., 20311.,
      21344., 12604., 13328., 14076., 14848., 10641., 11220., 11817., 12432.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   85.,    108.,   133.,   160.,   30.,    64.,    102.,
      144.,   188.,   272.,   364.,   464.,   300.,   400.,   508.,   624.,
      412.,   528.,   652.,   784.,   524.,   656.,   796.,   944.,   406.,
      480.,   558.,   640.,   247.,   340.,   439.,   544.,   854.,   1064.,
      1286.,  1520.,  1118.,  1352.,  1598.,  1856.,  1382.,  1640.,  1910.,
      2192.,  1646.,  1928.,  2222.,  2528.,  1123.,  1276.,  1435.,  1600.,
      812.,   992.,   1180.,  1376.,  2328.,  2720.,  3128.,  3552.,  2808.,
      3232.,  3672.,  4128.,  3288.,  3744.,  4216.,  4704.,  3768.,  4256.,
      4760.,  5280.,  2396.,  2656.,  2924.,  3200.,  1852.,  2112.,  2380.,
      2656.,  4728.,  5280.,  5848.,  6432.,  5208.,  5792.,  6392.,  7008.,
      5688.,  6304.,  6936.,  7584.,  6168.,  6816.,  7480.,  8160.,  3756.,
      4096.,  4444.,  4800.,  2791.,  3028.,  3271.,  3520.,  6518.,  7016.,
      7526.,  8048.,  6974.,  7496.,  8030.,  8576.,  7430.,  7976.,  8534.,
      9104.,  7886.,  8456.,  9038.,  9632.,  4531.,  4828.,  5131.,  5440.,
      2902.,  3088.,  3278.,  3472.,  6540.,  6928.,  7324.,  7728.,  6908.,
      7312.,  7724.,  8144.,  7276.,  7696.,  8124.,  8560.,  7644.,  8080.,
      8524.,  8976.,  4270.,  4496.,  4726.,  4960.,  2025.,  2132.,  2241.,
      2352.,  4474.,  4696.,  4922.,  5152.,  4690.,  4920.,  5154.,  5392.,
      4906.,  5144.,  5386.,  5632.,  5122.,  5368.,  5618.,  5872.,  2813.,
      2940.,  3069.,  3200.,  33.,    68.,    105.,   144.,   202.,   280.,
      362.,   448.,   482.,   568.,   658.,   752.,   762.,   856.,   954.,
      1056.,  1042.,  1144.,  1250.,  1360.,  629.,   684.,   741.,   800.,
      734.,   832.,   934.,   1040.,  1852.,  2064.,  2284.,  2512.,  2476.,
      2704.,  2940.,  3184.,  3100.,  3344.,  3596.,  3856.,  3724.,  3984.,
      4252.,  4528.,  2134.,  2272.,  2414.,  2560.,  2263.,  2452.,  2647.,
      2848.,  5270.,  5672.,  6086.,  6512.,  6302.,  6728.,  7166.,  7616.,
      7334.,  7784.,  8246.,  8720.,  8366.,  8840.,  9326.,  9824.,  4675.,
      4924.,  5179.,  5440.,  4780.,  5088.,  5404.,  5728.,  10776., 11424.,
      12088., 12768., 12280., 12960., 13656., 14368., 13784., 14496., 15224.,
      15968., 15288., 16032., 16792., 17568., 8412.,  8800.,  9196.,  9600.,
      8380.,  8768.,  9164.,  9568.,  18296., 19104., 19928., 20768., 19800.,
      20640., 21496., 22368., 21304., 22176., 23064., 23968., 22808., 23712.,
      24632., 25568., 12332., 12800., 13276., 13760., 8647.,  8980.,  9319.,
      9664.,  18614., 19304., 20006., 20720., 19838., 20552., 21278., 22016.,
      21062., 21800., 22550., 23312., 22286., 23048., 23822., 24608., 11923.,
      12316., 12715., 13120., 7446.,  7696.,  7950.,  8208.,  15884., 16400.,
      16924., 17456., 16764., 17296., 17836., 18384., 17644., 18192., 18748.,
      19312., 18524., 19088., 19660., 20240., 9838.,  10128., 10422., 10720.,
      4617.,  4756.,  4897.,  5040.,  9786.,  10072., 10362., 10656., 10258.,
      10552., 10850., 11152., 10730., 11032., 11338., 11648., 11202., 11512.,
      11826., 12144., 5917.,  6076.,  6237.,  6400.,  65.,    132.,   201.,
      272.,   394.,   536.,   682.,   832.,   930.,   1080.,  1234.,  1392.,
      1466.,  1624.,  1786.,  1952.,  2002.,  2168.,  2338.,  2512.,  1173.,
      1260.,  1349.,  1440.,  1438.,  1600.,  1766.,  1936.,  3516.,  3856.,
      4204.,  4560.,  4652.,  5008.,  5372.,  5744.,  5788.,  6160.,  6540.,
      6928.,  6924.,  7312.,  7708.,  8112.,  3862.,  4064.,  4270.,  4480.,
      4279.,  4564.,  4855.,  5152.,  9686.,  10280., 10886., 11504., 11486.,
      12104., 12734., 13376., 13286., 13928., 14582., 15248., 15086., 15752.,
      16430., 17120., 8227.,  8572.,  8923.,  9280.,  8748.,  9184.,  9628.,
      10080., 19224., 20128., 21048., 21984., 21752., 22688., 23640., 24608.,
      24280., 25248., 26232., 27232., 26808., 27808., 28824., 29856., 14428.,
      14944., 15468., 16000., 14908., 15424., 15948., 16480., 31864., 32928.,
      34008., 35104., 34392., 35488., 36600., 37728., 36920., 38048., 39192.,
      40352., 39448., 40608., 41784., 42976., 20908., 21504., 22108., 22720.,
      14503., 14932., 15367., 15808., 30710., 31592., 32486., 33392., 32702.,
      33608., 34526., 35456., 34694., 35624., 36566., 37520., 36686., 37640.,
      38606., 39584., 19315., 19804., 20299., 20800., 11990., 12304., 12622.,
      12944., 25228., 25872., 26524., 27184., 26620., 27280., 27948., 28624.,
      28012., 28688., 29372., 30064., 29404., 30096., 30796., 31504., 15406.,
      15760., 16118., 16480., 7209.,  7380.,  7553.,  7728.,  15098., 15448.,
      15802., 16160., 15826., 16184., 16546., 16912., 16554., 16920., 17290.,
      17664., 17282., 17656., 18034., 18416., 9021.,  9212.,  9405.,  9600.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3205.,  4185.,  5309.,  6577.,  4252.,  5644.,  7228.,  9004.,  4387.,
      5999.,  7851.,  9943.,  5099.,  6807.,  8755.,  10943., 5020.,  6412.,
      7996.,  9772.,  2973.,  3985.,  5141.,  6441.,  4204.,  5532.,  7052.,
      8764.,  5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 5068.,
      6524.,  8172.,  10012., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 5307.,  6951.,  8835.,  10959., 7684.,  10004.,
      12644., 15604., 8253.,  11057., 14261., 17865., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 6883.,  8751.,  10859., 13207.,
      3692.,  5020.,  6540.,  8252.,  5840.,  7696.,  9808.,  12176., 7124.,
      9380.,  11956., 14852., 7988.,  10372., 13076., 16100., 5840.,  7696.,
      9808.,  12176., 4556.,  6012.,  7660.,  9500.,  3461.,  4441.,  5565.,
      6833.,  4252.,  5644.,  7228.,  9004.,  4739.,  6479.,  8459.,  10679.,
      5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,  4093.,
      5233.,  6517.,  7945.,  3205.,  4185.,  5309.,  6577.,  4252.,  5644.,
      7228.,  9004.,  4387.,  5999.,  7851.,  9943.,  5099.,  6807.,  8755.,
      10943., 5020.,  6412.,  7996.,  9772.,  2973.,  3985.,  5141.,  6441.,
      4204.,  5532.,  7052.,  8764.,  5840.,  7696.,  9808.,  12176., 6612.,
      8868.,  11444., 14340., 7476.,  9860.,  12564., 15588., 5840.,  7696.,
      9808.,  12176., 5068.,  6524.,  8172.,  10012., 3979.,  5559.,  7379.,
      9439.,  6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137.,
      9861.,  12761., 16061., 19761., 7428.,  9748.,  12388., 15348., 5043.,
      6847.,  8891.,  11175., 5307.,  6951.,  8835.,  10959., 7684.,  10004.,
      12644., 15604., 8253.,  11057., 14261., 17865., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 6883.,  8751.,  10859., 13207.,
      3979.,  5559.,  7379.,  9439.,  6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 9861.,  12761., 16061., 19761., 7428.,  9748.,
      12388., 15348., 5043.,  6847.,  8891.,  11175., 5307.,  6951.,  8835.,
      10959., 7684.,  10004., 12644., 15604., 8253.,  11057., 14261., 17865.,
      8373.,  11337., 14701., 18465., 7428.,  9748.,  12388., 15348., 6883.,
      8751.,  10859., 13207., 3692.,  5020.,  6540.,  8252.,  5840.,  7696.,
      9808.,  12176., 7124.,  9380.,  11956., 14852., 7988.,  10372., 13076.,
      16100., 5840.,  7696.,  9808.,  12176., 4556.,  6012.,  7660.,  9500.,
      3461.,  4441.,  5565.,  6833.,  4252.,  5644.,  7228.,  9004.,  4739.,
      6479.,  8459.,  10679., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,
      7996.,  9772.,  4093.,  5233.,  6517.,  7945.,  3205.,  4185.,  5309.,
      6577.,  4252.,  5644.,  7228.,  9004.,  4387.,  5999.,  7851.,  9943.,
      5099.,  6807.,  8755.,  10943., 5020.,  6412.,  7996.,  9772.,  2973.,
      3985.,  5141.,  6441.,  4204.,  5532.,  7052.,  8764.,  5840.,  7696.,
      9808.,  12176., 6612.,  8868.,  11444., 14340., 7476.,  9860.,  12564.,
      15588., 5840.,  7696.,  9808.,  12176., 5068.,  6524.,  8172.,  10012.,
      3979.,  5559.,  7379.,  9439.,  6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 9861.,  12761., 16061., 19761., 7428.,  9748.,
      12388., 15348., 5043.,  6847.,  8891.,  11175., 5307.,  6951.,  8835.,
      10959., 7684.,  10004., 12644., 15604., 8253.,  11057., 14261., 17865.,
      8373.,  11337., 14701., 18465., 7428.,  9748.,  12388., 15348., 6883.,
      8751.,  10859., 13207., 3979.,  5559.,  7379.,  9439.,  6660.,  8980.,
      11620., 14580., 8717.,  11457., 14597., 18137., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5043.,  6847.,  8891.,  11175.,
      5307.,  6951.,  8835.,  10959., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 6883.,  8751.,  10859., 13207., 3692.,  5020.,  6540.,
      8252.,  5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 4556.,
      6012.,  7660.,  9500.,  3461.,  4441.,  5565.,  6833.,  4252.,  5644.,
      7228.,  9004.,  4739.,  6479.,  8459.,  10679., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  637.,   817.,   1013.,  1225.,  178.,   442.,   738.,
      1066.,  1348.,  2004.,  2724.,  3508.,  2212.,  2996.,  3844.,  4756.,
      2884.,  3540.,  4260.,  5044.,  2532.,  3060.,  3652.,  4308.,  1890.,
      2218.,  2578.,  2970.,  1607.,  2083.,  2607.,  3179.,  5022.,  6166.,
      7406.,  8742.,  7086.,  8422.,  9854.,  11382., 6910.,  8182.,  9550.,
      11014., 5710.,  6918.,  8222.,  9622.,  4207.,  4907.,  5655.,  6451.,
      3716.,  4628.,  5604.,  6644.,  10760., 12584., 14536., 16616., 13320.,
      15144., 17096., 19176., 12808., 14632., 16584., 18664., 11272., 13096.,
      15048., 17128., 7652.,  8692.,  9796.,  10964., 7396.,  8436.,  9540.,
      10708., 16584., 18664., 20872., 23208., 17096., 19176., 21384., 23720.,
      14536., 16616., 18824., 21160., 10760., 12584., 14536., 16616., 6532.,
      7444.,  8420.,  9460.,  6759.,  7619.,  8527.,  9483.,  12574., 14230.,
      15982., 17830., 10862., 12454., 14142., 15926., 14462., 16246., 18126.,
      20102., 15822., 17542., 19358., 21270., 7887.,  8715.,  9591.,  10515.,
      7938.,  8650.,  9394.,  10170., 12324., 13620., 14980., 16404., 7876.,
      9044.,  10276., 11572., 10788., 12084., 13444., 14868., 9412.,  10580.,
      11812., 13108., 3058.,  3578.,  4130.,  4714.,  3317.,  3657.,  4013.,
      4385.,  7962.,  8706.,  9482.,  10290., 9674.,  10482., 11322., 12194.,
      11386., 12258., 13162., 14098., 6762.,  7442.,  8154.,  8898.,  173.,
      417.,   677.,   953.,   5.,     25.,    61.,    113.,   58.,    162.,
      298.,   466.,   234.,   402.,   602.,   834.,   410.,   642.,   906.,
      1202.,  586.,   882.,   1210.,  1570.,  637.,   817.,   1013.,  1225.,
      178.,   442.,   738.,   1066.,  1348.,  2004.,  2724.,  3508.,  2212.,
      2996.,  3844.,  4756.,  2884.,  3540.,  4260.,  5044.,  2532.,  3060.,
      3652.,  4308.,  1890.,  2218.,  2578.,  2970.,  1607.,  2083.,  2607.,
      3179.,  5022.,  6166.,  7406.,  8742.,  7086.,  8422.,  9854.,  11382.,
      6910.,  8182.,  9550.,  11014., 5710.,  6918.,  8222.,  9622.,  4207.,
      4907.,  5655.,  6451.,  3716.,  4628.,  5604.,  6644.,  10760., 12584.,
      14536., 16616., 13320., 15144., 17096., 19176., 12808., 14632., 16584.,
      18664., 11272., 13096., 15048., 17128., 7652.,  8692.,  9796.,  10964.,
      7396.,  8436.,  9540.,  10708., 16584., 18664., 20872., 23208., 17096.,
      19176., 21384., 23720., 14536., 16616., 18824., 21160., 10760., 12584.,
      14536., 16616., 6532.,  7444.,  8420.,  9460.,  6759.,  7619.,  8527.,
      9483.,  12574., 14230., 15982., 17830., 10862., 12454., 14142., 15926.,
      14462., 16246., 18126., 20102., 15822., 17542., 19358., 21270., 7887.,
      8715.,  9591.,  10515., 7938.,  8650.,  9394.,  10170., 12324., 13620.,
      14980., 16404., 7876.,  9044.,  10276., 11572., 10788., 12084., 13444.,
      14868., 9412.,  10580., 11812., 13108., 3058.,  3578.,  4130.,  4714.,
      3317.,  3657.,  4013.,  4385.,  7962.,  8706.,  9482.,  10290., 9674.,
      10482., 11322., 12194., 11386., 12258., 13162., 14098., 6762.,  7442.,
      8154.,  8898.,  173.,   417.,   677.,   953.,   5.,     25.,    61.,
      113.,   58.,    162.,   298.,   466.,   234.,   402.,   602.,   834.,
      410.,   642.,   906.,   1202.,  586.,   882.,   1210.,  1570.,  637.,
      817.,   1013.,  1225.,  178.,   442.,   738.,   1066.,  1348.,  2004.,
      2724.,  3508.,  2212.,  2996.,  3844.,  4756.,  2884.,  3540.,  4260.,
      5044.,  2532.,  3060.,  3652.,  4308.,  1890.,  2218.,  2578.,  2970.,
      1607.,  2083.,  2607.,  3179.,  5022.,  6166.,  7406.,  8742.,  7086.,
      8422.,  9854.,  11382., 6910.,  8182.,  9550.,  11014., 5710.,  6918.,
      8222.,  9622.,  4207.,  4907.,  5655.,  6451.,  3716.,  4628.,  5604.,
      6644.,  10760., 12584., 14536., 16616., 13320., 15144., 17096., 19176.,
      12808., 14632., 16584., 18664., 11272., 13096., 15048., 17128., 7652.,
      8692.,  9796.,  10964., 7396.,  8436.,  9540.,  10708., 16584., 18664.,
      20872., 23208., 17096., 19176., 21384., 23720., 14536., 16616., 18824.,
      21160., 10760., 12584., 14536., 16616., 6532.,  7444.,  8420.,  9460.,
      6759.,  7619.,  8527.,  9483.,  12574., 14230., 15982., 17830., 10862.,
      12454., 14142., 15926., 14462., 16246., 18126., 20102., 15822., 17542.,
      19358., 21270., 7887.,  8715.,  9591.,  10515., 7938.,  8650.,  9394.,
      10170., 12324., 13620., 14980., 16404., 7876.,  9044.,  10276., 11572.,
      10788., 12084., 13444., 14868., 9412.,  10580., 11812., 13108., 3058.,
      3578.,  4130.,  4714.,  3317.,  3657.,  4013.,  4385.,  7962.,  8706.,
      9482.,  10290., 9674.,  10482., 11322., 12194., 11386., 12258., 13162.,
      14098., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896.,
      26456., 39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438.,
      52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210., 32562.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  4792.,  7928.,  11576., 15736., 11576., 15736., 20408., 25592.,
      17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880., 1884.,
      3452.,  5276.,  7356.,  2938.,  4650.,  6746.,  9226.,  11956., 16916.,
      22644., 29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692.,
      31188., 8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082.,
      5816.,  8952.,  12600., 16760., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 12600., 16760., 21432., 26616., 9912.,  13048., 16696.,
      20856., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 16696.,
      20856., 25528., 30712., 5626.,  8362.,  11482., 14986., 20788., 26772.,
      33524., 41044., 19444., 24916., 31156., 38164., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 11226., 14730., 18618., 22890.,
      7004.,  8572.,  10396., 12476., 10936., 14072., 17720., 21880., 4792.,
      7928.,  11576., 15736., 11576., 15736., 20408., 25592., 17720., 21880.,
      26552., 31736., 10396., 12476., 14812., 17404., 350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.,
      540.,   1596.,  2908.,  4476.,  4792.,  7928.,  11576., 15736., 11576.,
      15736., 20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 1884.,  3452.,  5276.,  7356.,  2938.,  4650.,  6746.,
      9226.,  11956., 16916., 22644., 29140., 19444., 24916., 31156., 38164.,
      14004., 18964., 24692., 31188., 8564.,  13012., 18228., 24212., 6490.,
      8970.,  11834., 15082., 5816.,  8952.,  12600., 16760., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 12600., 16760., 21432., 26616.,
      9912.,  13048., 16696., 20856., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 16696., 20856., 25528., 30712., 5626.,  8362.,  11482.,
      14986., 20788., 26772., 33524., 41044., 19444., 24916., 31156., 38164.,
      18740., 24724., 31476., 38996., 22132., 28628., 35892., 43924., 11226.,
      14730., 18618., 22890., 7004.,  8572.,  10396., 12476., 10936., 14072.,
      17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736., 20408.,
      25592., 17720., 21880., 26552., 31736., 10396., 12476., 14812., 17404.,
      350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,  8508.,
      10844., 13436., 16284., 13948., 16796., 19900., 23260., 10556., 12892.,
      15484., 18332., 510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,
      846.,   380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,  6428.,
      3068.,  4892.,  6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  190.,
      590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  4792.,  7928.,
      11576., 15736., 11576., 15736., 20408., 25592., 17720., 21880., 26552.,
      31736., 10936., 14072., 17720., 21880., 1884.,  3452.,  5276.,  7356.,
      2938.,  4650.,  6746.,  9226.,  11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5816.,  8952.,  12600.,
      16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600.,
      16760., 21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 16696., 20856., 25528., 30712.,
      5626.,  8362.,  11482., 14986., 20788., 26772., 33524., 41044., 19444.,
      24916., 31156., 38164., 18740., 24724., 31476., 38996., 22132., 28628.,
      35892., 43924., 11226., 14730., 18618., 22890., 7004.,  8572.,  10396.,
      12476., 10936., 14072., 17720., 21880., 4792.,  7928.,  11576., 15736.,
      11576., 15736., 20408., 25592., 17720., 21880., 26552., 31736., 10396.,
      12476., 14812., 17404., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,
      6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900.,
      23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      351.,   560.,   820.,   940.,   1060.,  980.,   837.,   892.,   1360.,
      1920.,  2130.,  2340.,  2096.,  1744.,  1820.,  2700.,  3725.,  4050.,
      4375.,  3840.,  3140.,  3080.,  4450.,  6000.,  6325.,  6650.,  5730.,
      4610.,  4340.,  6200.,  8275.,  8600.,  8925.,  7620.,  6080.,  5600.,
      7950.,  10550., 10875., 11200., 9510.,  7550.,  6514.,  9120.,  11950.,
      12260., 12570., 10544., 8278.,  6516.,  9050.,  11770., 12040., 12310.,
      10250., 7992.,  3879.,  5600.,  7540.,  7660.,  7780.,  6692.,  5373.,
      7276.,  10320., 13680., 13890., 14100., 11952., 9472.,  11900., 16700.,
      21925., 22250., 22575., 18960., 14900., 13160., 18450., 24200., 24525.,
      24850., 20850., 16370., 14420., 20200., 26475., 26800., 27125., 22740.,
      17840., 15680., 21950., 28750., 29075., 29400., 24630., 19310., 16258.,
      22560., 29310., 29620., 29930., 24880., 19366., 15084., 20810., 26890.,
      27160., 27430., 22682., 17568., 7407.,  10640., 14260., 14380., 14500.,
      12404., 9909.,  13660., 19280., 25440., 25650., 25860., 21808., 17200.,
      21980., 30700., 40125., 40450., 40775., 34080., 26660., 23240., 32450.,
      42400., 42725., 43050., 35970., 28130., 24500., 34200., 44675., 45000.,
      45325., 37860., 29600., 25760., 35950., 46950., 47275., 47600., 39750.,
      31070., 26002., 36000., 46670., 46980., 47290., 39216., 30454., 23652.,
      32570., 42010., 42280., 42550., 35114., 27144.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   22.,   15.,   10.,   32.,   68.,
      89.,   110.,  96.,   60.,   42.,   114.,  219.,  264.,  309.,  252.,
      150.,  112.,  280.,  508.,  586.,  664.,  520.,  300.,  222.,  520.,
      898.,  976.,  1054., 800.,  450.,  306.,  681.,  1128., 1200., 1272.,
      933.,  510.,  307.,  668.,  1085., 1142., 1199., 864.,  465.,  210.,
      451.,  724.,  757.,  790.,  563.,  300.,  13.,   40.,   82.,   124.,
      166.,  130.,  75.,   94.,   224.,  392.,  485.,  578.,  432.,  240.,
      258.,  582.,  975.,  1128., 1281., 936.,  510.,  520.,  1144., 1876.,
      2098., 2320., 1672., 900.,  870.,  1864., 2986., 3208., 3430., 2432.,
      1290., 882.,  1869., 2964., 3144., 3324., 2337., 1230., 751.,  1580.,
      2489., 2618., 2747., 1920., 1005., 462.,  967.,  1516., 1585., 1654.,
      1151., 600.,  25.,   76.,   154.,  232.,  310.,  238.,  135.,  178.,
      416.,  716.,  881.,  1046., 768.,  420.,  474.,  1050., 1731., 1992.,
      2253., 1620., 870.,  928.,  2008., 3244., 3610., 3976., 2824., 1500.,
      1518., 3208., 5074., 5440., 5806., 4064., 2130., 1458., 3057., 4800.,
      5088., 5376., 3741., 1950., 1195., 2492., 3893., 4094., 4295., 2976.,
      1545., 714.,  1483., 2308., 2413., 2518., 1739., 900.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2529.,  4084.,  6035.,  6965.,  7895.,  7348.,  6309.,  6620.,  10160.,
      14420., 16060., 17700., 15920., 13292., 13735., 20460., 28133., 30235.,
      32081., 27308., 21235., 22261., 31876., 41183., 42005., 42571., 34980.,
      26065., 26947., 38172., 47833., 47375., 46661., 37532., 27055., 27793.,
      39348., 48083., 46345., 44351., 34964., 24205., 23732., 33552., 39068.,
      35940., 32556., 24272., 14852., 12447., 17932., 24125., 26255., 28385.,
      24364., 19539., 9649.,  13300., 17411., 15845., 16775., 14580., 11829.,
      15644., 21360., 27796., 25660., 27300., 23600., 19052., 23703., 32364.,
      42101., 39595., 42145., 36268., 29155., 18149., 24580., 32111., 28133.,
      30235., 26148., 20801., 20851., 29916., 40105., 41183., 42005., 35100.,
      26911., 25537., 36212., 48035., 47833., 47375., 38932., 29181., 25652.,
      36112., 47580., 45988., 44140., 35472., 25668., 19503., 27468., 36205.,
      33023., 29585., 22764., 15075., 10113., 14580., 19571., 19541., 19255.,
      16692., 13509., 18012., 24624., 31956., 31356., 30500., 26160., 20972.,
      27015., 36332., 46661., 45691., 44465., 37996., 30355., 26581., 34948.,
      44351., 42101., 39595., 34148., 27505., 22307., 28444., 35641., 32111.,
      28133., 24732., 20111., 19441., 27956., 37555., 40105., 41183., 34964.,
      27501., 23732., 33552., 44380., 46820., 46508., 38736., 29828., 22719.,
      31884., 41885., 44015., 42113., 34540., 26035.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   150.,   105.,   58.,    204.,
      454.,   610.,   766.,   684.,   434.,   279.,   786.,   1545.,  1887.,
      2229.,  1842.,  1107.,  788.,   2008.,  3692.,  4292.,  4892.,  3864.,
      2244.,  1628.,  3848.,  6692.,  7292.,  7892.,  6024.,  3404.,  2313.,
      5166.,  8583.,  9141.,  9699.,  7134.,  3909.,  2350.,  5124.,  8338.,
      8782.,  9226.,  6660.,  3590.,  1619.,  3482.,  5597.,  5855.,  6113.,
      4362.,  2327.,  77.,    262.,   563.,   893.,   1223.,  966.,   561.,
      682.,   1644.,  2902.,  3634.,  4366.,  3276.,  1826.,  1935.,  4386.,
      7377.,  8583.,  9789.,  7170.,  3915.,  3956.,  8728.,  14348., 16100.,
      17852., 12888., 6948.,  6716.,  14408., 23108., 24860., 26612., 18888.,
      10028., 6849.,  14526., 23055., 24477., 25899., 18222., 9597.,  5854.,
      12324., 19426., 20446., 21466., 15012., 7862.,  3611.,  7562.,  11861.,
      12407., 12953., 9018.,  4703.,  149.,   502.,   1067.,  1685.,  2303.,
      1782.,  1017.,  1306.,  3084.,  5350.,  6658.,  7966.,  5868.,  3218.,
      3591.,  7986.,  13209., 15279., 17349., 12498., 6723.,  7124.,  15448.,
      25004., 27908., 30812., 21912., 11652., 11804., 24968., 39524., 42428.,
      45332., 31752., 16652., 11385., 23886., 37527., 39813., 42099., 29310.,
      15285., 9358.,  19524., 30514., 32110., 33706., 23364., 12134., 5603.,
      11642., 18125., 18959., 19793., 13674., 7079.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7550.,  7176.,  11458., 12506., 13874., 13704., 11694., 12776., 14048.,
      15896., 15608., 17688., 13024., 12008., 17074., 20792., 25230., 22134.,
      23454., 18872., 14850., 18138., 24984., 26598., 25230., 22134., 16536.,
      13354., 20930., 24760., 29694., 26598., 25230., 16568., 12178., 19306.,
      26264., 28374., 29694., 26598., 21016., 13370., 14920., 22496., 27192.,
      25944., 26424., 19616., 14344., 9286.,  14504., 19386., 21138., 18474.,
      15848., 11254., 7550.,  7176.,  11458., 12506., 13874., 13704., 11694.,
      12776., 14048., 15896., 15608., 17688., 13024., 12008., 17074., 20792.,
      25230., 22134., 23454., 18872., 14850., 18138., 24984., 26598., 25230.,
      22134., 16536., 13354., 20930., 24760., 29694., 26598., 25230., 16568.,
      12178., 19306., 26264., 28374., 29694., 26598., 21016., 13370., 14920.,
      22496., 27192., 25944., 26424., 19616., 14344., 9286.,  14504., 19386.,
      21138., 18474., 15848., 11254., 7550.,  7176.,  11458., 12506., 13874.,
      13704., 11694., 12776., 14048., 15896., 15608., 17688., 13024., 12008.,
      17074., 20792., 25230., 22134., 23454., 18872., 14850., 18138., 24984.,
      26598., 25230., 22134., 16536., 13354., 20930., 24760., 29694., 26598.,
      25230., 16568., 12178., 19306., 26264., 28374., 29694., 26598., 21016.,
      13370., 14920., 22496., 27192., 25944., 26424., 19616., 14344., 9286.,
      14504., 19386., 21138., 18474., 15848., 11254.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1100.,  782.,   380.,   1432.,
      3284.,  4484.,  5684.,  5144.,  3292.,  2010.,  5796.,  11550., 14214.,
      16878., 14052., 8490.,  5880.,  14512., 25768., 27784., 32488., 25392.,
      14648., 11800., 23536., 38152., 37096., 41800., 31856., 18008., 14258.,
      24980., 38118., 33678., 38070., 28628., 16002., 11596., 15672., 21188.,
      12788., 16292., 12856., 7468.,  2854.,  6620.,  11362., 13402., 15442.,
      11548., 6422.,  510.,   1868.,  4138.,  6754.,  9370.,  7436.,  4334.,
      5180.,  11928., 19988., 23748., 27508., 17048., 9500.,  14330., 25956.,
      39806., 44262., 48718., 28964., 16074., 24440., 29488., 37160., 27912.,
      33640., 16176., 10040., 23192., 19056., 34184., 38248., 43976., 30832.,
      17496., 11090., 18260., 27078., 25454., 28566., 15636., 9122.,  6412.,
      8888.,  12292., 6452.,  8420.,  7096.,  4332.,  1670.,  3996.,  7042.,
      8314.,  9586.,  7388.,  4214.,  350.,   1292.,  2890.,  4738.,  6586.,
      5324.,  3150.,  3580.,  8856.,  15956., 20228., 24500., 18712., 10588.,
      10650., 24612., 41438., 47686., 53934., 38372., 18538., 21880., 39344.,
      54696., 50568., 57320., 39344., 16696., 24728., 42224., 52744., 45544.,
      52296., 34544., 11864., 19186., 27156., 22054., 26318., 31222., 22996.,
      11074., 5964.,  12600., 15940., 14708., 17188., 10168., 1196.,  486.,
      1372.,  2722.,  3226.,  3730.,  3228.,  2006.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1125.,  1404.,  1844.,  2240.,  2755.,  3280.,  3205.,  3760.,  3655.,
      4240.,  3428.,  3920.,  2961.,  3348.,  3052.,  3568.,  4720.,  5440.,
      6740.,  7680.,  7540.,  8520.,  8340.,  9360.,  7536.,  8384.,  6316.,
      6976.,  6455.,  7280.,  9660.,  10800., 13425., 14900., 14675., 16200.,
      15925., 17500., 14060., 15360., 11555., 12560., 11285., 12320., 16380.,
      17800., 22175., 24000., 23425., 25300., 24675., 26600., 21340., 22920.,
      17225., 18440., 16115., 17360., 23100., 24800., 30925., 33100., 32175.,
      34400., 33425., 35700., 28620., 30480., 22895., 24320., 20945., 22400.,
      29820., 31800., 39675., 42200., 40925., 43500., 42175., 44800., 35900.,
      38040., 28565., 30200., 24748., 26056., 34704., 36480., 45540., 47800.,
      46740., 49040., 47940., 50280., 40272., 42176., 31660., 33112., 24975.,
      26064., 34724., 36200., 45205., 47080., 46255., 48160., 47305., 49240.,
      39428., 41000., 30771., 31968., 10005., 10652., 13620., 14464., 17587.,
      18640., 15605., 16560., 16055., 17040., 13668., 14480., 10881., 11508.,
      15468., 16304., 20720., 21824., 26452., 27840., 23540., 24840., 24340.,
      25680., 20592., 21696., 16300., 17152., 21927., 23024., 29244., 30704.,
      37217., 39060., 33475., 35240., 34725., 36540., 29292., 30784., 23123.,
      24272., 11525., 12448., 14716., 15944., 18447., 20000., 13425., 14900.,
      14675., 16200., 13020., 14280., 10745., 11720., 10595., 11600., 15420.,
      16800., 20925., 22700., 22175., 24000., 23425., 25300., 20300., 21840.,
      16415., 17600., 15425., 16640., 22140., 23800., 29675., 31800., 30925.,
      33100., 32175., 34400., 27580., 29400., 22085., 23480., 19372., 20488.,
      27280., 28800., 35940., 37880., 37140., 39120., 38340., 40360., 32336.,
      33984., 25516., 26776., 20223., 21168., 28196., 29480., 36805., 38440.,
      37855., 39520., 38905., 40600., 32516., 33896., 25443., 26496., 12229.,
      13244., 17460., 18752., 23203., 24784., 22757., 24240., 22055., 23440.,
      18788., 19920., 14961., 15828., 21228., 22384., 28784., 30272., 36948.,
      38784., 35572., 37320., 33940., 35600., 28528., 29888., 22444., 23488.,
      30743., 32112., 40892., 42672., 51793., 54004., 49587., 51720., 47125.,
      49180., 39404., 41088., 30851., 32144., 25461., 26656., 32764., 34312.,
      40703., 42624., 37217., 39060., 33475., 35240., 28252., 29704., 22313.,
      23432., 16339., 17360., 19516., 20832., 23213., 24844., 18447., 20000.,
      13425., 14900., 11980., 13200., 9935.,  10880., 9905.,  10880., 14460.,
      15800., 19675., 21400., 20925., 22700., 22175., 24000., 19260., 20760.,
      15605., 16760., 13996., 14920., 19856., 21120., 26340., 27960., 27540.,
      29200., 28740., 30440., 24400., 25792., 19372., 20440., 15471., 16272.,
      21668., 22760., 28405., 29800., 29455., 30880., 30505., 31960., 25604.,
      26792., 20115., 21024.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,    64.,    55.,
      88.,    62.,    88.,    45.,    60.,    18.,    40.,    76.,    128.,
      182.,   272.,   254.,   356.,   326.,   440.,   300.,   384.,   194.,
      240.,   111.,   168.,   330.,   456.,   669.,   876.,   831.,   1056.,
      993.,   1236.,  834.,   1008.,  507.,   600.,   340.,   448.,   888.,
      1120.,  1660.,  2032.,  1948.,  2344.,  2236.,  2656.,  1784.,  2080.,
      1044.,  1200.,  740.,   888.,   1768.,  2080.,  3100.,  3592.,  3388.,
      3904.,  3676.,  4216.,  2824.,  3200.,  1604.,  1800.,  1089.,  1224.,
      2442.,  2724.,  4071.,  4512.,  4341.,  4800.,  4611.,  5088.,  3402.,
      3732.,  1869.,  2040.,  1122.,  1228.,  2452.,  2672.,  3998.,  4340.,
      4214.,  4568.,  4430.,  4796.,  3204.,  3456.,  1730.,  1860.,  779.,
      840.,   1678.,  1804.,  2701.,  2896.,  2827.,  3028.,  2953.,  3160.,
      2110.,  2252.,  1127.,  1200.,  25.,    52.,    102.,   160.,   235.,
      328.,   397.,   496.,   559.,   664.,   446.,   520.,   261.,   300.,
      306.,   376.,   748.,   896.,   1334.,  1568.,  1694.,  1940.,  2054.,
      2312.,  1548.,  1728.,  866.,   960.,   903.,   1032.,  2058.,  2328.,
      3477.,  3900.,  4071.,  4512.,  4665.,  5124.,  3426.,  3744.,  1875.,
      2040.,  1876.,  2080.,  4152.,  4576.,  6844.,  7504.,  7708.,  8392.,
      8572.,  9280.,  6200.,  6688.,  3348.,  3600.,  3236.,  3480.,  6952.,
      7456.,  11164., 11944., 12028., 12832., 12892., 13720., 9160.,  9728.,
      4868.,  5160.,  3321.,  3528.,  7050.,  7476.,  11199., 11856., 11901.,
      12576., 12603., 13296., 8874.,  9348.,  4677.,  4920.,  2850.,  3004.,
      6004.,  6320.,  9470.,  9956.,  9974.,  10472., 10478., 10988., 7332.,
      7680.,  3842.,  4020.,  1763.,  1848.,  3694.,  3868.,  5797.,  6064.,
      6067.,  6340.,  6337.,  6616.,  4414.,  4604.,  2303.,  2400.,  49.,
      100.,   198.,   304.,   451.,   616.,   757.,   928.,   1063.,  1240.,
      830.,   952.,   477.,   540.,   594.,   712.,   1420.,  1664.,  2486.,
      2864.,  3134.,  3524.,  3782.,  4184.,  2796.,  3072.,  1538.,  1680.,
      1695.,  1896.,  3786.,  4200.,  6285.,  6924.,  7311.,  7968.,  8337.,
      9012.,  6018.,  6480.,  3243.,  3480.,  3412.,  3712.,  7416.,  8032.,
      12028., 12976., 13468., 14440., 14908., 15904., 10616., 11296., 5652.,
      6000.,  5732.,  6072.,  12136., 12832., 19228., 20296., 20668., 21760.,
      22108., 23224., 15496., 16256., 8132.,  8520.,  5553.,  5832.,  11658.,
      12228., 18327., 19200., 19461., 20352., 20595., 21504., 14346., 14964.,
      7485.,  7800.,  4578.,  4780.,  9556.,  9968.,  14942., 15572., 15734.,
      16376., 16526., 17180., 11460., 11904., 5954.,  6180.,  2747.,  2856.,
      5710.,  5932.,  8893.,  9232.,  9307.,  9652.,  9721.,  10072., 6718.,
      6956.,  3479.,  3600.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8277.,  10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035.,
      25375., 20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792.,
      32388., 36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940.,
      25868., 22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085.,
      32101., 37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324.,
      37204., 43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828.,
      26359., 29875., 28171., 31927., 39444., 44516., 47477., 53769., 43169.,
      49349., 37645., 43457., 25620., 30180., 16707., 20111., 22871., 26259.,
      32356., 37108., 36137., 42157., 41237., 47401., 43073., 49125., 36708.,
      41460., 28751., 32299., 23436., 26428., 34192., 38352., 44596., 49796.,
      46756., 52020., 43092., 48164., 30928., 34832., 21164., 24028., 11409.,
      13429., 15740., 18540., 21295., 24971., 25027., 28943., 20887., 24787.,
      19516., 22572., 16729., 19101., 15029., 17097., 21484., 24348., 29195.,
      32951., 27935., 31675., 31475., 35455., 28652., 32028., 24189., 26865.,
      18556., 21612., 24784., 28688., 32260., 37140., 27956., 32644., 30500.,
      35252., 20496., 24144., 18332., 21260., 23507., 27103., 32884., 37572.,
      43885., 49825., 43673., 49501., 44677., 50649., 34548., 39236., 29707.,
      33463., 28319., 32059., 34884., 39764., 43169., 49349., 37645., 43457.,
      35385., 41085., 21188., 25556., 18327., 21715., 25771., 29399., 28500.,
      33316., 41237., 47401., 43073., 49125., 43885., 49825., 35348., 39908.,
      27811., 31343., 27511., 31283., 38180., 43188., 50761., 57165., 47477.,
      53769., 43169., 49349., 29028., 33780., 21935., 25611., 19852., 22844.,
      28048., 32208., 38132., 43588., 35172., 40692., 39892., 45476., 35408.,
      39824., 29228., 32604., 19889., 22293., 28924., 32236., 39439., 43755.,
      40931., 45231., 41911., 46195., 31996., 35308., 24505., 27005., 8277.,
      10217., 13100., 15708., 18923., 22295., 20735., 24091., 22035., 25375.,
      20588., 23452., 17757., 20049., 17660., 20204., 24400., 27792., 32388.,
      36756., 32372., 36804., 31844., 36340., 26640., 30288., 22940., 25868.,
      22643., 26111., 29300., 33988., 37645., 43457., 35385., 41085., 32101.,
      37689., 23604., 28036., 19435., 22807., 20799., 24411., 32324., 37204.,
      43073., 49125., 43885., 49825., 43673., 49501., 35204., 39828., 26359.,
      29875., 28171., 31927., 39444., 44516., 47477., 53769., 43169., 49349.,
      37645., 43457., 25620., 30180., 16707., 20111., 22871., 26259., 32356.,
      37108., 36137., 42157., 41237., 47401., 43073., 49125., 36708., 41460.,
      28751., 32299., 23436., 26428., 34192., 38352., 44596., 49796., 46756.,
      52020., 43092., 48164., 30928., 34832., 21164., 24028., 11409., 13429.,
      15740., 18540., 21295., 24971., 25027., 28943., 20887., 24787., 19516.,
      22572., 16729., 19101.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   450.,   650.,   333.,   449.,   106.,   274.,   516.,   916.,
      1294.,  1990.,  1846.,  2638.,  2398.,  3286.,  2244.,  2900.,  1466.,
      1826.,  783.,   1227.,  2406.,  3390.,  4965.,  6585.,  6225.,  7989.,
      7485.,  9393.,  6342.,  7710.,  3879.,  4611.,  2516.,  3364.,  6472.,
      8040.,  11676., 14092., 12716., 15068., 14972., 17516., 11784., 13608.,
      6836.,  7812.,  5444.,  6356.,  10920., 12616., 17772., 20380., 17276.,
      19820., 19532., 22268., 14952., 16904., 8484.,  9524.,  6723.,  7535.,
      11758., 13222., 17953., 20165., 15789., 17889., 17913., 20157., 13518.,
      15110., 7579.,  8423.,  5506.,  6090.,  7348.,  8324.,  9878.,  11310.,
      5758.,  7030.,  7462.,  8830.,  5940.,  6916.,  3474.,  3994.,  1313.,
      1541.,  3066.,  3554.,  5291.,  6071.,  6287.,  7115.,  7283.,  8159.,
      5466.,  6082.,  3049.,  3373.,  149.,   361.,   706.,   1162.,  1703.,
      2435.,  2987.,  3767.,  4271.,  5099.,  3426.,  4010.,  2013.,  2321.,
      2314.,  2866.,  5508.,  6420.,  9326.,  10662., 11158., 12590., 12990.,
      14518., 8068.,  8980.,  4506.,  4994.,  6783.,  7547.,  12294., 13662.,
      18869., 20937., 21025., 23237., 23181., 25537., 13734., 15230., 7639.,
      8435.,  11668., 12772., 13832., 15656., 17244., 19916., 12652., 15260.,
      15420., 18220., 7176.,  9000.,  4532.,  5508.,  11012., 12180., 8552.,
      10504., 15660., 18524., 17724., 20524., 20492., 23484., 14440., 16392.,
      8228.,  9268.,  5107.,  5983.,  8462.,  9798.,  12593., 14485., 11837.,
      13617., 13321., 15245., 7214.,  8422.,  4235.,  4887.,  2978.,  3434.,
      4084.,  4804.,  5622.,  6670.,  2782.,  3670.,  3718.,  4702.,  3188.,
      3908.,  1970.,  2362.,  753.,   917.,   1818.,  2178.,  3227.,  3815.,
      3839.,  4475.,  4451.,  5135.,  3450.,  3938.,  1977.,  2237.,  101.,
      249.,   482.,   810.,   1175.,  1715.,  2075.,  2663.,  2975.,  3611.,
      2434.,  2890.,  1453.,  1697.,  1578.,  2002.,  3972.,  4884.,  7246.,
      8710.,  9334.,  10894., 11422., 13078., 8772.,  9940.,  4986.,  5602.,
      4911.,  5739.,  11430., 13182., 19461., 21977., 22513., 25173., 25565.,
      28369., 18246., 20126., 8839.,  9699.,  10388., 11492., 18632., 20712.,
      25884., 28812., 23852., 26716., 27132., 30188., 18632., 20712., 7860.,
      8836.,  11780., 12948., 20008., 22216., 24812., 27932., 21244., 24300.,
      24524., 27772., 16168., 18376., 5412.,  6452.,  9123.,  10063., 12718.,
      14438., 9857.,  12197., 12045., 14273., 14425., 16797., 10702., 12294.,
      5179.,  5895.,  2690.,  3274.,  5812.,  6788.,  7382.,  8558.,  6846.,
      7862.,  8038.,  9150.,  4724.,  5444.,  466.,   730.,   193.,   293.,
      570.,   802.,   1163.,  1559.,  1391.,  1835.,  1619.,  2111.,  1434.,
      1794.,  905.,   1101.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8494.,  13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770.,
      20306., 10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008.,
      15640., 26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,
      15720., 10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846.,
      21006., 34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200.,
      28760., 18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760.,
      10706., 18626., 14466., 22258., 16664., 27224., 21006., 34078., 18014.,
      31214., 22894., 35710., 16664., 27224., 13090., 21138., 11218., 19138.,
      18200., 28760., 19902., 32846., 21006., 34078., 18014., 31214., 18200.,
      28760., 13426., 21602., 9896.,  16232., 12512., 20960., 19224., 29784.,
      15640., 26200., 17176., 27736., 12512., 20960., 11944., 18280., 7550.,
      12302., 10920., 17256., 11378., 19554., 15138., 23186., 12754., 20674.,
      10920., 17256., 7198.,  12206., 8494.,  13118., 10408., 16744., 12418.,
      20210., 9522.,  17186., 12770., 20306., 10408., 16744., 6286.,  10654.,
      9384.,  15720., 14560., 23008., 15640., 26200., 17176., 27736., 15640.,
      26200., 14560., 23008., 9384.,  15720., 10722., 18258., 14616., 25176.,
      22894., 35710., 19902., 32846., 21006., 34078., 14616., 25176., 14466.,
      22258., 11570., 19234., 18200., 28760., 18014., 31214., 22894., 35710.,
      19902., 32846., 18200., 28760., 10706., 18626., 14466., 22258., 16664.,
      27224., 21006., 34078., 18014., 31214., 22894., 35710., 16664., 27224.,
      13090., 21138., 11218., 19138., 18200., 28760., 19902., 32846., 21006.,
      34078., 18014., 31214., 18200., 28760., 13426., 21602., 9896.,  16232.,
      12512., 20960., 19224., 29784., 15640., 26200., 17176., 27736., 12512.,
      20960., 11944., 18280., 7550.,  12302., 10920., 17256., 11378., 19554.,
      15138., 23186., 12754., 20674., 10920., 17256., 7198.,  12206., 8494.,
      13118., 10408., 16744., 12418., 20210., 9522.,  17186., 12770., 20306.,
      10408., 16744., 6286.,  10654., 9384.,  15720., 14560., 23008., 15640.,
      26200., 17176., 27736., 15640., 26200., 14560., 23008., 9384.,  15720.,
      10722., 18258., 14616., 25176., 22894., 35710., 19902., 32846., 21006.,
      34078., 14616., 25176., 14466., 22258., 11570., 19234., 18200., 28760.,
      18014., 31214., 22894., 35710., 19902., 32846., 18200., 28760., 10706.,
      18626., 14466., 22258., 16664., 27224., 21006., 34078., 18014., 31214.,
      22894., 35710., 16664., 27224., 13090., 21138., 11218., 19138., 18200.,
      28760., 19902., 32846., 21006., 34078., 18014., 31214., 18200., 28760.,
      13426., 21602., 9896.,  16232., 12512., 20960., 19224., 29784., 15640.,
      26200., 17176., 27736., 12512., 20960., 11944., 18280., 7550.,  12302.,
      10920., 17256., 11378., 19554., 15138., 23186., 12754., 20674., 10920.,
      17256., 7198.,  12206.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,
      3978.,  2076.,  3132.,  190.,   590.,   380.,   1180.,  1784.,  3384.,
      4020.,  6932.,  5972.,  9140.,  3508.,  6420.,  1784.,  3384.,  892.,
      1692.,  1498.,  2954.,  4180.,  7348.,  8494.,  13118., 7550.,  12302.,
      6286.,  10654., 2324.,  4980.,  1850.,  3050.,  3128.,  5240.,  7280.,
      11504., 9384.,  15720., 9896.,  16232., 9384.,  15720., 7280.,  11504.,
      3128.,  5240.,  4664.,  6776.,  6256.,  10480., 9896.,  16232., 9384.,
      15720., 11944., 18280., 6256.,  10480., 2616.,  4728.,  3018.,  4858.,
      6644.,  10068., 7550.,  12302., 9422.,  14302., 7198.,  12206., 6644.,
      10068., 2346.,  3930.,  1308.,  2364.,  3128.,  5240.,  5972.,  9140.,
      5876.,  9300.,  6804.,  10484., 4472.,  7096.,  2844.,  3900.,  110.,
      382.,   636.,   1436.,  1834.,  3418.,  3610.,  5578.,  4042.,  5882.,
      3004.,  4316.,  270.,   798.,   30.,    174.,   220.,   764.,   826.,
      2026.,  1834.,  3418.,  2522.,  3978.,  2076.,  3132.,  190.,   590.,
      380.,   1180.,  1784.,  3384.,  4020.,  6932.,  5972.,  9140.,  3508.,
      6420.,  1784.,  3384.,  892.,   1692.,  1498.,  2954.,  4180.,  7348.,
      8494.,  13118., 7550.,  12302., 6286.,  10654., 2324.,  4980.,  1850.,
      3050.,  3128.,  5240.,  7280.,  11504., 9384.,  15720., 9896.,  16232.,
      9384.,  15720., 7280.,  11504., 3128.,  5240.,  4664.,  6776.,  6256.,
      10480., 9896.,  16232., 9384.,  15720., 11944., 18280., 6256.,  10480.,
      2616.,  4728.,  3018.,  4858.,  6644.,  10068., 7550.,  12302., 9422.,
      14302., 7198.,  12206., 6644.,  10068., 2346.,  3930.,  1308.,  2364.,
      3128.,  5240.,  5972.,  9140.,  5876.,  9300.,  6804.,  10484., 4472.,
      7096.,  2844.,  3900.,  110.,   382.,   636.,   1436.,  1834.,  3418.,
      3610.,  5578.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,   30.,
      174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,  3978.,
      2076.,  3132.,  190.,   590.,   380.,   1180.,  1784.,  3384.,  4020.,
      6932.,  5972.,  9140.,  3508.,  6420.,  1784.,  3384.,  892.,   1692.,
      1498.,  2954.,  4180.,  7348.,  8494.,  13118., 7550.,  12302., 6286.,
      10654., 2324.,  4980.,  1850.,  3050.,  3128.,  5240.,  7280.,  11504.,
      9384.,  15720., 9896.,  16232., 9384.,  15720., 7280.,  11504., 3128.,
      5240.,  4664.,  6776.,  6256.,  10480., 9896.,  16232., 9384.,  15720.,
      11944., 18280., 6256.,  10480., 2616.,  4728.,  3018.,  4858.,  6644.,
      10068., 7550.,  12302., 9422.,  14302., 7198.,  12206., 6644.,  10068.,
      2346.,  3930.,  1308.,  2364.,  3128.,  5240.,  5972.,  9140.,  5876.,
      9300.,  6804.,  10484., 4472.,  7096.,  2844.,  3900.,  110.,   382.,
      636.,   1436.,  1834.,  3418.,  3610.,  5578.,  4042.,  5882.,  3004.,
      4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3905.,  4372.,  4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,
      9868.,  10711., 11584., 9963.,  10772., 11611., 12480., 10615., 11420.,
      12255., 13120., 9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,
      10320., 8524.,  9136.,  9772.,  10432., 11792., 12608., 13456., 14336.,
      15668., 16720., 17812., 18944., 15652., 16720., 17828., 18976., 15380.,
      16464., 17588., 18752., 12880., 13760., 14672., 15616., 11116., 11824.,
      12556., 13312., 10903., 11740., 12607., 13504., 14084., 15216., 16388.,
      17600., 18121., 19524., 20977., 22480., 17005., 18380., 19805., 21280.,
      15377., 16724., 18121., 19568., 11268., 12336., 13444., 14592., 9311.,
      10124., 10967., 11840., 9963.,  10836., 11739., 12672., 15572., 16752.,
      17972., 19232., 20805., 22268., 23781., 25344., 21225., 22660., 24145.,
      25680., 21133., 22540., 23997., 25504., 17044., 18160., 19316., 20512.,
      12755., 13604., 14483., 15392., 13631., 14540., 15479., 16448., 19108.,
      20336., 21604., 22912., 22977., 24500., 26073., 27696., 20837., 22332.,
      23877., 25472., 18121., 19524., 20977., 22480., 12260., 13360., 14500.,
      15680., 7943.,  8764.,  9615.,  10496., 11027., 11844., 12691., 13568.,
      15604., 16752., 17940., 19168., 17341., 18796., 20301., 21856., 19873.,
      21364., 22905., 24496., 20805., 22268., 23781., 25344., 17780., 18928.,
      20116., 21344., 13947., 14804., 15691., 16608., 11356., 12080., 12828.,
      13600., 16592., 17600., 18640., 19712., 21668., 22928., 24228., 25568.,
      22740., 24016., 25332., 26688., 20932., 22160., 23428., 24736., 14992.,
      15936., 16912., 17920., 10236., 10928., 11644., 12384., 5461.,  5948.,
      6453.,  6976.,  7532.,  8208.,  8908.,  9632.,  10203., 11092., 12011.,
      12960., 12039., 12988., 13967., 14976., 9971.,  10916., 11891., 12896.,
      9388.,  10128., 10892., 11680., 8077.,  8652.,  9245.,  9856.,  7265.,
      7764.,  8281.,  8816.,  10396., 11088., 11804., 12544., 14143., 15052.,
      15991., 16960., 13515., 14420., 15355., 16320., 15255., 16220., 17215.,
      18240., 13916., 14736., 15580., 16448., 11769., 12420., 13089., 13776.,
      8908.,  9648.,  10412., 11200., 11920., 12864., 13840., 14848., 15540.,
      16720., 17940., 19200., 13412., 14544., 15716., 16928., 14676., 15824.,
      17012., 18240., 9808.,  10688., 11600., 12544., 8812.,  9520.,  10252.,
      11008., 11319., 12188., 13087., 14016., 15876., 17008., 18180., 19392.,
      21225., 22660., 24145., 25680., 21133., 22540., 23997., 25504., 21617.,
      23060., 24553., 26096., 16708., 17840., 19012., 20224., 14399., 15308.,
      16247., 17216., 13707., 14612., 15547., 16512., 16852., 18032., 19252.,
      20512., 20837., 22332., 23877., 25472., 18121., 19524., 20977., 22480.,
      17005., 18380., 19805., 21280., 10068., 11120., 12212., 13344., 8755.,
      9572.,  10419., 11296., 12447., 13324., 14231., 15168., 13668., 14832.,
      16036., 17280., 19873., 21364., 22905., 24496., 20805., 22268., 23781.,
      25344., 21225., 22660., 24145., 25680., 17124., 18224., 19364., 20544.,
      13479., 14332., 15215., 16128., 13299., 14212., 15155., 16128., 18484.,
      19696., 20948., 22240., 24605., 26156., 27757., 29408., 22977., 24500.,
      26073., 27696., 20837., 22332., 23877., 25472., 13940., 15088., 16276.,
      17504., 10523., 11412., 12331., 13280., 9564.,  10288., 11036., 11808.,
      13520., 14528., 15568., 16640., 18404., 19728., 21092., 22496., 16916.,
      18256., 19636., 21056., 19268., 20624., 22020., 23456., 17168., 18240.,
      19344., 20480., 14204., 15024., 15868., 16736., 9653.,  10236., 10837.,
      11456., 14060., 14864., 15692., 16544., 19195., 20244., 21323., 22432.,
      19943., 20988., 22063., 23168., 20435., 21476., 22547., 23648., 15596.,
      16400., 17228., 18080., 11949., 12556., 13181., 13824., 3905.,  4372.,
      4857.,  5360.,  6236.,  6864.,  7516.,  8192.,  9055.,  9868.,  10711.,
      11584., 9963.,  10772., 11611., 12480., 10615., 11420., 12255., 13120.,
      9948.,  10640., 11356., 12096., 8601.,  9156.,  9729.,  10320., 8524.,
      9136.,  9772.,  10432., 11792., 12608., 13456., 14336., 15668., 16720.,
      17812., 18944., 15652., 16720., 17828., 18976., 15380., 16464., 17588.,
      18752., 12880., 13760., 14672., 15616., 11116., 11824., 12556., 13312.,
      10903., 11740., 12607., 13504., 14084., 15216., 16388., 17600., 18121.,
      19524., 20977., 22480., 17005., 18380., 19805., 21280., 15377., 16724.,
      18121., 19568., 11268., 12336., 13444., 14592., 9311.,  10124., 10967.,
      11840., 9963.,  10836., 11739., 12672., 15572., 16752., 17972., 19232.,
      20805., 22268., 23781., 25344., 21225., 22660., 24145., 25680., 21133.,
      22540., 23997., 25504., 17044., 18160., 19316., 20512., 12755., 13604.,
      14483., 15392., 13631., 14540., 15479., 16448., 19108., 20336., 21604.,
      22912., 22977., 24500., 26073., 27696., 20837., 22332., 23877., 25472.,
      18121., 19524., 20977., 22480., 12260., 13360., 14500., 15680., 7943.,
      8764.,  9615.,  10496., 11027., 11844., 12691., 13568., 15604., 16752.,
      17940., 19168., 17341., 18796., 20301., 21856., 19873., 21364., 22905.,
      24496., 20805., 22268., 23781., 25344., 17780., 18928., 20116., 21344.,
      13947., 14804., 15691., 16608., 11356., 12080., 12828., 13600., 16592.,
      17600., 18640., 19712., 21668., 22928., 24228., 25568., 22740., 24016.,
      25332., 26688., 20932., 22160., 23428., 24736., 14992., 15936., 16912.,
      17920., 10236., 10928., 11644., 12384., 5461.,  5948.,  6453.,  6976.,
      7532.,  8208.,  8908.,  9632.,  10203., 11092., 12011., 12960., 12039.,
      12988., 13967., 14976., 9971.,  10916., 11891., 12896., 9388.,  10128.,
      10892., 11680., 8077.,  8652.,  9245.,  9856.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   202.,   248.,   298.,   352.,   153.,   180.,   209.,
      240.,   34.,    72.,    114.,   160.,   212.,   304.,   404.,   512.,
      566.,   728.,   902.,   1088.,  830.,   1016.,  1214.,  1424.,  1094.,
      1304.,  1526.,  1760.,  1044.,  1200.,  1364.,  1536.,  690.,   776.,
      866.,   960.,   339.,   444.,   555.,   672.,   1086.,  1320.,  1566.,
      1824.,  2289.,  2676.,  3081.,  3504.,  2901.,  3324.,  3765.,  4224.,
      3513.,  3972.,  4449.,  4944.,  3006.,  3336.,  3678.,  4032.,  1851.,
      2028.,  2211.,  2400.,  1156.,  1360.,  1572.,  1792.,  3048.,  3424.,
      3816.,  4224.,  5548.,  6128.,  6732.,  7360.,  6076.,  6640.,  7228.,
      7840.,  7180.,  7792.,  8428.,  9088.,  5672.,  6112.,  6568.,  7040.,
      3300.,  3536.,  3780.,  4032.,  2612.,  2832.,  3060.,  3296.,  5256.,
      5664.,  6088.,  6528.,  8572.,  9200.,  9852.,  10528., 8332.,  8944.,
      9580.,  10240., 9436.,  10096., 10780., 11488., 7240.,  7712.,  8200.,
      8704.,  4116.,  4368.,  4628.,  4896.,  3263.,  3460.,  3663.,  3872.,
      5702.,  6056.,  6422.,  6800.,  8709.,  9244.,  9797.,  10368., 7641.,
      8148.,  8673.,  9216.,  8685.,  9228.,  9789.,  10368., 6566.,  6952.,
      7350.,  7760.,  3687.,  3892.,  4103.,  4320.,  2682.,  2824.,  2970.,
      3120.,  3556.,  3792.,  4036.,  4288.,  4766.,  5112.,  5470.,  5840.,
      2726.,  3032.,  3350.,  3680.,  3566.,  3896.,  4238.,  4592.,  2852.,
      3088.,  3332.,  3584.,  1674.,  1800.,  1930.,  2064.,  629.,   684.,
      741.,   800.,   1474.,  1592.,  1714.,  1840.,  2551.,  2740.,  2935.,
      3136.,  3043.,  3244.,  3451.,  3664.,  3535.,  3748.,  3967.,  4192.,
      2658.,  2808.,  2962.,  3120.,  1485.,  1564.,  1645.,  1728.,  49.,
      100.,   153.,   208.,   298.,   408.,   522.,   640.,   763.,   940.,
      1123.,  1312.,  1399.,  1588.,  1783.,  1984.,  2035.,  2236.,  2443.,
      2656.,  1642.,  1784.,  1930.,  2080.,  969.,   1044.,  1121.,  1200.,
      1090.,  1224.,  1362.,  1504.,  2644.,  2864.,  3092.,  3328.,  4502.,
      4824.,  5158.,  5504.,  5406.,  5752.,  6110.,  6480.,  6310.,  6680.,
      7062.,  7456.,  3924.,  4144.,  4372.,  4608.,  2194.,  2312.,  2434.,
      2560.,  3299.,  3484.,  3675.,  3872.,  5982.,  6312.,  6654.,  7008.,
      9185.,  9684.,  10201., 10736., 10245., 10780., 11333., 11904., 11305.,
      11876., 12465., 13072., 6686.,  7048.,  7422.,  7808.,  3723.,  3916.,
      4115.,  4320.,  5700.,  5968.,  6244.,  6528.,  6696.,  7136.,  7592.,
      8064.,  8300.,  8944.,  9612.,  10304., 6012.,  6640.,  7292.,  7968.,
      7372.,  8048.,  8748.,  9472.,  3368.,  3808.,  4264.,  4736.,  2148.,
      2384.,  2628.,  2880.,  5364.,  5648.,  5940.,  6240.,  4040.,  4512.,
      5000.,  5504.,  7484.,  8176.,  8892.,  9632.,  8524.,  9200.,  9900.,
      10624., 9884.,  10608., 11356., 12128., 6984.,  7456.,  7944.,  8448.,
      3988.,  4240.,  4500.,  4768.,  2447.,  2660.,  2879.,  3104.,  4070.,
      4392.,  4726.,  5072.,  6069.,  6524.,  6997.,  7488.,  5705.,  6132.,
      6577.,  7040.,  6429.,  6892.,  7373.,  7872.,  3462.,  3752.,  4054.,
      4368.,  2039.,  2196.,  2359.,  2528.,  1434.,  1544.,  1658.,  1776.,
      1956.,  2128.,  2308.,  2496.,  2686.,  2936.,  3198.,  3472.,  1286.,
      1496.,  1718.,  1952.,  1742.,  1976.,  2222.,  2480.,  1508.,  1680.,
      1860.,  2048.,  938.,   1032.,  1130.,  1232.,  357.,   396.,   437.,
      480.,   866.,   952.,   1042.,  1136.,  1543.,  1684.,  1831.,  1984.,
      1843.,  1996.,  2155.,  2320.,  2143.,  2308.,  2479.,  2656.,  1666.,
      1784.,  1906.,  2032.,  957.,   1020.,  1085.,  1152.,  33.,    68.,
      105.,   144.,   202.,   280.,   362.,   448.,   523.,   652.,   787.,
      928.,   967.,   1108.,  1255.,  1408.,  1411.,  1564.,  1723.,  1888.,
      1162.,  1272.,  1386.,  1504.,  697.,   756.,   817.,   880.,   738.,
      840.,   946.,   1056.,  1876.,  2096.,  2324.,  2560.,  3446.,  3800.,
      4166.,  4544.,  4478.,  4856.,  5246.,  5648.,  5510.,  5912.,  6326.,
      6752.,  4244.,  4528.,  4820.,  5120.,  2418.,  2568.,  2722.,  2880.,
      2355.,  2556.,  2763.,  2976.,  5502.,  5928.,  6366.,  6816.,  9425.,
      10036., 10665., 11312., 10933., 11580., 12245., 12928., 12441., 13124.,
      13825., 14544., 8894.,  9352.,  9822.,  10304., 4315.,  4524.,  4739.,
      4960.,  5060.,  5328.,  5604.,  5888.,  9064.,  9568.,  10088., 10624.,
      12588., 13296., 14028., 14784., 11580., 12272., 12988., 13728., 13196.,
      13936., 14700., 15488., 9064.,  9568.,  10088., 10624., 3812.,  4048.,
      4292.,  4544.,  5748.,  6032.,  6324.,  6624.,  9736.,  10272., 10824.,
      11392., 12028., 12784., 13564., 14368., 10252., 10992., 11756., 12544.,
      11868., 12656., 13468., 14304., 7816.,  8352.,  8904.,  9472.,  2580.,
      2832.,  3092.,  3360.,  4447.,  4676.,  4911.,  5152.,  6150.,  6568.,
      6998.,  7440.,  4645.,  5212.,  5797.,  6400.,  5753.,  6292.,  6849.,
      7424.,  6925.,  7500.,  8093.,  8704.,  5158.,  5544.,  5942.,  6352.,
      2503.,  2676.,  2855.,  3040.,  1274.,  1416.,  1562.,  1712.,  2788.,
      3024.,  3268.,  3520.,  3550.,  3832.,  4126.,  4432.,  3302.,  3544.,
      3798.,  4064.,  3886.,  4152.,  4430.,  4720.,  2276.,  2448.,  2628.,
      2816.,  202.,   264.,   330.,   400.,   85.,    108.,   133.,   160.,
      258.,   312.,   370.,   432.,   535.,   628.,   727.,   832.,   643.,
      748.,   859.,   976.,   751.,   868.,   991.,   1120.,  674.,   760.,
      850.,   944.,   429.,   476.,   525.,   576.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3741.,  4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,
      7063.,  9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,
      9091.,  11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,
      5945.,  3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,
      8980.,  11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,
      6972.,  8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108.,
      14068., 10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241.,
      9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,
      8087.,  10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260.,
      12900., 15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053.,
      19657., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      4483.,  6223.,  8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,
      9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 7557.,  10457.,
      13757., 17457., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132.,
      15092., 5659.,  7431.,  9443.,  11695., 4739.,  6479.,  8459.,  10679.,
      7940.,  10260., 12900., 15860., 8533.,  11369., 14605., 18241., 9069.,
      11937., 15205., 18873., 7557.,  10457., 13757., 17457., 7940.,  10260.,
      12900., 15860., 5811.,  7615.,  9659.,  11943., 4252.,  5644.,  7228.,
      9004.,  5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372.,
      6660.,  8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 5328.,
      7184.,  9296.,  11664., 5276.,  6668.,  8252.,  10028., 3253.,  4297.,
      5485.,  6817.,  4764.,  6156.,  7740.,  9516.,  4787.,  6591.,  8635.,
      10919., 6683.,  8455.,  10467., 12719., 5507.,  7247.,  9227.,  11447.,
      4764.,  6156.,  7740.,  9516.,  3045.,  4153.,  5405.,  6801.,  3741.,
      4753.,  5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,  7063.,
      9011.,  11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,  9091.,
      11215., 4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,  5945.,
      3996.,  5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688., 6660.,
      8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,  8980.,
      11620., 14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,  6972.,
      8748.,  4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108., 14068.,
      10045., 12849., 16053., 19657., 8533.,  11369., 14605., 18241., 9069.,
      11937., 15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,  8087.,
      10035., 12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260., 12900.,
      15860., 7557.,  10457., 13757., 17457., 10045., 12849., 16053., 19657.,
      8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860., 4483.,
      6223.,  8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,  9492.,
      12132., 15092., 9069.,  11937., 15205., 18873., 7557.,  10457., 13757.,
      17457., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132., 15092.,
      5659.,  7431.,  9443.,  11695., 4739.,  6479.,  8459.,  10679., 7940.,
      10260., 12900., 15860., 8533.,  11369., 14605., 18241., 9069.,  11937.,
      15205., 18873., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900.,
      15860., 5811.,  7615.,  9659.,  11943., 4252.,  5644.,  7228.,  9004.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 6660.,
      8980.,  11620., 14580., 7428.,  9748.,  12388., 15348., 5328.,  7184.,
      9296.,  11664., 5276.,  6668.,  8252.,  10028., 3253.,  4297.,  5485.,
      6817.,  4764.,  6156.,  7740.,  9516.,  4787.,  6591.,  8635.,  10919.,
      6683.,  8455.,  10467., 12719., 5507.,  7247.,  9227.,  11447., 4764.,
      6156.,  7740.,  9516.,  3045.,  4153.,  5405.,  6801.,  3741.,  4753.,
      5909.,  7209.,  4508.,  5900.,  7484.,  9260.,  5355.,  7063.,  9011.,
      11199., 3923.,  5599.,  7515.,  9671.,  5563.,  7207.,  9091.,  11215.,
      4508.,  5900.,  7484.,  9260.,  2669.,  3617.,  4709.,  5945.,  3996.,
      5388.,  6972.,  8748.,  6352.,  8208.,  10320., 12688., 6660.,  8980.,
      11620., 14580., 7428.,  9748.,  12388., 15348., 6660.,  8980.,  11620.,
      14580., 6352.,  8208.,  10320., 12688., 3996.,  5388.,  6972.,  8748.,
      4539.,  6183.,  8067.,  10191., 6148.,  8468.,  11108., 14068., 10045.,
      12849., 16053., 19657., 8533.,  11369., 14605., 18241., 9069.,  11937.,
      15205., 18873., 6148.,  8468.,  11108., 14068., 6379.,  8087.,  10035.,
      12223., 4947.,  6623.,  8539.,  10695., 7940.,  10260., 12900., 15860.,
      7557.,  10457., 13757., 17457., 10045., 12849., 16053., 19657., 8533.,
      11369., 14605., 18241., 7940.,  10260., 12900., 15860., 4483.,  6223.,
      8203.,  10423., 6379.,  8087.,  10035., 12223., 7172.,  9492.,  12132.,
      15092., 9069.,  11937., 15205., 18873., 7557.,  10457., 13757., 17457.,
      10045., 12849., 16053., 19657., 7172.,  9492.,  12132., 15092., 5659.,
      7431.,  9443.,  11695., 4739.,  6479.,  8459.,  10679., 7940.,  10260.,
      12900., 15860., 8533.,  11369., 14605., 18241., 9069.,  11937., 15205.,
      18873., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5811.,  7615.,  9659.,  11943., 4252.,  5644.,  7228.,  9004.,  5328.,
      7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 6660.,  8980.,
      11620., 14580., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,
      11664., 5276.,  6668.,  8252.,  10028., 3253.,  4297.,  5485.,  6817.,
      4764.,  6156.,  7740.,  9516.,  4787.,  6591.,  8635.,  10919., 6683.,
      8455.,  10467., 12719., 5507.,  7247.,  9227.,  11447., 4764.,  6156.,
      7740.,  9516.,  3045.,  4153.,  5405.,  6801.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,
      1857.,  202.,   498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,
      4222.,  5494.,  6862.,  8326.,  6094.,  7302.,  8606.,  10006., 6942.,
      8086.,  9326.,  10662., 4596.,  5316.,  6100.,  6948.,  3114.,  3538.,
      3994.,  4482.,  2319.,  2891.,  3511.,  4179.,  6830.,  8166.,  9598.,
      11126., 13725., 15761., 17941., 20265., 14261., 16329., 18541., 20897.,
      13773., 15873., 18117., 20505., 7086.,  8422.,  9854.,  11382., 2623.,
      3259.,  3943.,  4675.,  5204.,  6052.,  6964.,  7940.,  13480., 15176.,
      17000., 18952., 19196., 21740., 24476., 27404., 15260., 17676., 20284.,
      23084., 12540., 15084., 17820., 20748., 11432., 13128., 14952., 16904.,
      6740.,  7588.,  8500.,  9476.,  5556.,  6532.,  7572.,  8676.,  11624.,
      13576., 15656., 17864., 18716., 21644., 24764., 28076., 16828., 19628.,
      22620., 25804., 19036., 21708., 24572., 27628., 11432., 13128., 14952.,
      16904., 2804.,  3524.,  4308.,  5156.,  7735.,  8531.,  9375.,  10267.,
      12222., 13750., 15374., 17094., 11797., 13993., 16333., 18817., 15789.,
      18017., 20389., 22905., 16709., 18969., 21373., 23921., 11710., 13238.,
      14862., 16582., 2727.,  3331.,  3983.,  4683.,  4410.,  5026.,  5674.,
      6354.,  10004., 11108., 12276., 13508., 12942., 14406., 15966., 17622.,
      12254., 13654., 15150., 16742., 8494.,  9830.,  11262., 12790., 2132.,
      2980.,  3892.,  4868.,  1306.,  1538.,  1802.,  2098.,  637.,   817.,
      1013.,  1225.,  1962.,  2386.,  2842.,  3330.,  4103.,  4835.,  5615.,
      6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,  6715.,
      2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,   101.,
      249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  2111.,  2747.,
      3431.,  4163.,  4103.,  4835.,  5615.,  6443.,  6095.,  6923.,  7799.,
      8723.,  5306.,  5922.,  6570.,  7250.,  3317.,  3657.,  4013.,  4385.,
      2954.,  3506.,  4090.,  4706.,  7860.,  8836.,  9876.,  10980., 14142.,
      15670., 17294., 19014., 12942., 14406., 15966., 17622., 10718., 12118.,
      13614., 15206., 1524.,  2244.,  3028.,  3876.,  1578.,  2002.,  2458.,
      2946.,  5999.,  6699.,  7447.,  8243.,  9390.,  10726., 12158., 13686.,
      14845., 17009., 19317., 21769., 11797., 13993., 16333., 18817., 15917.,
      18145., 20517., 23033., 11694., 13030., 14462., 15990., 7327.,  8091.,
      8903.,  9763.,  7444.,  8548.,  9716.,  10948., 12648., 14600., 16680.,
      18888., 20604., 23660., 26908., 30348., 18716., 21644., 24764., 28076.,
      22140., 25196., 28444., 31884., 11624., 13576., 15656., 17864., 7956.,
      9060.,  10228., 11460., 12916., 14148., 15444., 16804., 15912., 18120.,
      20456., 22920., 30364., 33804., 37436., 41260., 30524., 33836., 37340.,
      41036., 26588., 29772., 33148., 36716., 12648., 14600., 16680., 18888.,
      5044.,  6020.,  7060.,  8164.,  7319.,  8243.,  9215.,  10235., 11710.,
      13238., 14862., 16582., 18037., 20361., 22829., 25441., 18445., 20801.,
      23301., 25945., 15781., 18169., 20701., 23377., 13246., 14774., 16398.,
      18118., 7431.,  8163.,  8943.,  9771.,  5946.,  6562.,  7210.,  7890.,
      8980.,  10084., 11252., 12484., 13646., 15366., 17182., 19094., 9886.,
      11542., 13294., 15142., 11246., 12838., 14526., 16310., 8468.,  9572.,
      10740., 11972., 3034.,  3522.,  4042.,  4594.,  2781.,  3089.,  3413.,
      3753.,  6762.,  7442.,  8154.,  8898.,  12071., 13187., 14351., 15563.,
      14447., 15659., 16919., 18227., 11511., 12563., 13663., 14811., 6762.,
      7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,   5.,     25.,
      61.,    113.,   58.,    162.,   298.,   466.,   287.,   539.,   839.,
      1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,  2135.,  2675.,
      1530.,  1890.,  2282.,  2706.,  1173.,  1385.,  1613.,  1857.,  202.,
      498.,   826.,   1186.,  1524.,  2244.,  3028.,  3876.,  4222.,  5494.,
      6862.,  8326.,  6094.,  7302.,  8606.,  10006., 6942.,  8086.,  9326.,
      10662., 4596.,  5316.,  6100.,  6948.,  3114.,  3538.,  3994.,  4482.,
      2319.,  2891.,  3511.,  4179.,  6830.,  8166.,  9598.,  11126., 13725.,
      15761., 17941., 20265., 14261., 16329., 18541., 20897., 13773., 15873.,
      18117., 20505., 7086.,  8422.,  9854.,  11382., 2623.,  3259.,  3943.,
      4675.,  5204.,  6052.,  6964.,  7940.,  13480., 15176., 17000., 18952.,
      19196., 21740., 24476., 27404., 15260., 17676., 20284., 23084., 12540.,
      15084., 17820., 20748., 11432., 13128., 14952., 16904., 6740.,  7588.,
      8500.,  9476.,  5556.,  6532.,  7572.,  8676.,  11624., 13576., 15656.,
      17864., 18716., 21644., 24764., 28076., 16828., 19628., 22620., 25804.,
      19036., 21708., 24572., 27628., 11432., 13128., 14952., 16904., 2804.,
      3524.,  4308.,  5156.,  7735.,  8531.,  9375.,  10267., 12222., 13750.,
      15374., 17094., 11797., 13993., 16333., 18817., 15789., 18017., 20389.,
      22905., 16709., 18969., 21373., 23921., 11710., 13238., 14862., 16582.,
      2727.,  3331.,  3983.,  4683.,  4410.,  5026.,  5674.,  6354.,  10004.,
      11108., 12276., 13508., 12942., 14406., 15966., 17622., 12254., 13654.,
      15150., 16742., 8494.,  9830.,  11262., 12790., 2132.,  2980.,  3892.,
      4868.,  1306.,  1538.,  1802.,  2098.,  637.,   817.,   1013.,  1225.,
      1962.,  2386.,  2842.,  3330.,  4103.,  4835.,  5615.,  6443.,  4943.,
      5771.,  6647.,  7571.,  4567.,  5235.,  5951.,  6715.,  2986.,  3410.,
      3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5646.,  8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602.,
      23266., 32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486.,
      19134., 2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,
      13416., 21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 3800.,
      11800., 22360., 35480., 16878., 26622., 39566., 55710., 4750.,  14750.,
      27950., 44350., 16878., 26622., 39566., 55710., 3800.,  11800., 22360.,
      35480., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      14040., 22040., 32600., 45720., 4750.,  14750., 27950., 44350., 16878.,
      26622., 39566., 55710., 4750.,  14750., 27950., 44350., 14040., 22040.,
      32600., 45720., 2850.,  8850.,  16770., 26610., 8424.,  13224., 19560.,
      27432., 3040.,  9440.,  17888., 28384., 14040., 22040., 32600., 45720.,
      3800.,  11800., 22360., 35480., 14040., 22040., 32600., 45720., 3040.,
      9440.,  17888., 28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,
      10062., 15966., 8424.,  13224., 19560., 27432., 2850.,  8850.,  16770.,
      26610., 9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610.,
      8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966., 5646.,
      8990.,  13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,  15602.,
      23266., 32850., 2850.,  8850.,  16770., 26610., 9858.,  15602., 23266.,
      32850., 2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486., 19134.,
      2280.,  7080.,  13416., 21288., 11232., 17632., 26080., 36576., 3800.,
      11800., 22360., 35480., 14040., 22040., 32600., 45720., 3800.,  11800.,
      22360., 35480., 11232., 17632., 26080., 36576., 2280.,  7080.,  13416.,
      21288., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360., 35480.,
      16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350., 16878.,
      26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,  15602.,
      23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040., 32600.,
      45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566., 55710.,
      4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720., 2850.,
      8850.,  16770., 26610., 9858.,  15602., 23266., 32850., 3800.,  11800.,
      22360., 35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950.,
      44350., 16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480.,
      9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040.,
      22040., 32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622.,
      39566., 55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600.,
      45720., 2850.,  8850.,  16770., 26610., 8424.,  13224., 19560., 27432.,
      3040.,  9440.,  17888., 28384., 14040., 22040., 32600., 45720., 3800.,
      11800., 22360., 35480., 14040., 22040., 32600., 45720., 3040.,  9440.,
      17888., 28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,  10062.,
      15966., 8424.,  13224., 19560., 27432., 2850.,  8850.,  16770., 26610.,
      9858.,  15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 8424.,
      13224., 19560., 27432., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 2280.,  7080.,  13416., 21288., 9858.,  15602., 23266.,
      32850., 2850.,  8850.,  16770., 26610., 9858.,  15602., 23266., 32850.,
      2280.,  7080.,  13416., 21288., 5646.,  8990.,  13486., 19134., 2280.,
      7080.,  13416., 21288., 11232., 17632., 26080., 36576., 3800.,  11800.,
      22360., 35480., 14040., 22040., 32600., 45720., 3800.,  11800., 22360.,
      35480., 11232., 17632., 26080., 36576., 2280.,  7080.,  13416., 21288.,
      9858.,  15602., 23266., 32850., 3800.,  11800., 22360., 35480., 16878.,
      26622., 39566., 55710., 4750.,  14750., 27950., 44350., 16878., 26622.,
      39566., 55710., 3800.,  11800., 22360., 35480., 9858.,  15602., 23266.,
      32850., 2850.,  8850.,  16770., 26610., 14040., 22040., 32600., 45720.,
      4750.,  14750., 27950., 44350., 16878., 26622., 39566., 55710., 4750.,
      14750., 27950., 44350., 14040., 22040., 32600., 45720., 2850.,  8850.,
      16770., 26610., 9858.,  15602., 23266., 32850., 3800.,  11800., 22360.,
      35480., 16878., 26622., 39566., 55710., 4750.,  14750., 27950., 44350.,
      16878., 26622., 39566., 55710., 3800.,  11800., 22360., 35480., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 14040., 22040.,
      32600., 45720., 4750.,  14750., 27950., 44350., 16878., 26622., 39566.,
      55710., 4750.,  14750., 27950., 44350., 14040., 22040., 32600., 45720.,
      2850.,  8850.,  16770., 26610., 8424.,  13224., 19560., 27432., 3040.,
      9440.,  17888., 28384., 14040., 22040., 32600., 45720., 3800.,  11800.,
      22360., 35480., 14040., 22040., 32600., 45720., 3040.,  9440.,  17888.,
      28384., 8424.,  13224., 19560., 27432., 1710.,  5310.,  10062., 15966.,
      8424.,  13224., 19560., 27432., 2850.,  8850.,  16770., 26610., 9858.,
      15602., 23266., 32850., 2850.,  8850.,  16770., 26610., 8424.,  13224.,
      19560., 27432., 1710.,  5310.,  10062., 15966.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,
      846.,   380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,
      1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,
      3540.,  6708.,  10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,
      2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,
      10644., 5646.,  8990.,  13486., 19134., 1710.,  5310.,  10062., 15966.,
      5646.,  8990.,  13486., 19134., 1140.,  3540.,  6708.,  10644., 1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  5616.,  8816.,
      13040., 18288., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 2280.,  7080.,  13416., 21288., 5616.,  8816.,  13040., 18288.,
      760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  1520.,
      4720.,  8944.,  14192., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 1520.,  4720.,  8944.,
      14192., 2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      4212.,  6612.,  9780.,  13716., 1710.,  5310.,  10062., 15966., 6990.,
      10846., 15854., 22014., 1710.,  5310.,  10062., 15966., 4212.,  6612.,
      9780.,  13716., 570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  760.,   2360.,  4472.,  7096.,  4212.,  6612.,  9780.,  13716.,
      1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 760.,
      2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,
      1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,   1770.,  3354.,
      5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,
      5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,
      3548.,  1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644.,
      5646.,  8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,
      8990.,  13486., 19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040.,
      18288., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560., 27432.,
      2280.,  7080.,  13416., 21288., 5616.,  8816.,  13040., 18288., 760.,
      2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  1520.,  4720.,
      8944.,  14192., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 8424.,  13224., 19560., 27432., 1520.,  4720.,  8944.,  14192.,
      2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,  4212.,
      6612.,  9780.,  13716., 1710.,  5310.,  10062., 15966., 6990.,  10846.,
      15854., 22014., 1710.,  5310.,  10062., 15966., 4212.,  6612.,  9780.,
      13716., 570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      760.,   2360.,  4472.,  7096.,  4212.,  6612.,  9780.,  13716., 1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 760.,   2360.,
      4472.,  7096.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,
      1774.,  1404.,  2204.,  3260.,  4572.,  570.,   1770.,  3354.,  5322.,
      2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,  5322.,  1404.,
      2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,    174.,
      446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,
      5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,  5418.,
      380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,  6708.,
      10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644., 5646.,
      8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,  3706.,
      5418.,  760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288.,
      2280.,  7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,
      7080.,  13416., 21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,
      14192., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416., 21288.,
      8424.,  13224., 19560., 27432., 1520.,  4720.,  8944.,  14192., 2808.,
      4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,  4212.,  6612.,
      9780.,  13716., 1710.,  5310.,  10062., 15966., 6990.,  10846., 15854.,
      22014., 1710.,  5310.,  10062., 15966., 4212.,  6612.,  9780.,  13716.,
      570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,  760.,
      2360.,  4472.,  7096.,  4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 760.,   2360.,  4472.,
      7096.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      1404.,  2204.,  3260.,  4572.,  570.,   1770.,  3354.,  5322.,  2778.,
      4234.,  6074.,  8298.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,
      3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      384.,   610.,   890.,   1010.,  1130.,  1250.,  1144.,  969.,   988.,
      1500.,  2110.,  2320.,  2530.,  2740.,  2436.,  2014.,  2030.,  3000.,
      4125.,  4450.,  4775.,  5100.,  4450.,  3620.,  3470.,  5000.,  6725.,
      7050.,  7375.,  7700.,  6610.,  5300.,  4910.,  7000.,  9325.,  9650.,
      9975.,  10300., 8770.,  6980.,  6350.,  9000.,  11925., 12250., 12575.,
      12900., 10930., 8660.,  7396.,  10340., 13530., 13840., 14150., 14460.,
      12108., 9490.,  7404.,  10270., 13340., 13610., 13880., 14150., 11764.,
      9159.,  4416.,  6370.,  8570.,  8690.,  8810.,  8930.,  7672.,  6153.,
      8284.,  11740., 15550., 15760., 15970., 16180., 13700., 10846., 13550.,
      19000., 24925., 25250., 25575., 25900., 21730., 17060., 14990., 21000.,
      27525., 27850., 28175., 28500., 23890., 18740., 16430., 23000., 30125.,
      30450., 30775., 31100., 26050., 20420., 17870., 25000., 32725., 33050.,
      33375., 33700., 28210., 22100., 18532., 25700., 33370., 33680., 33990.,
      34300., 28492., 22162., 17196., 23710., 30620., 30890., 31160., 31430.,
      25972., 20103., 8448.,  12130., 16250., 16370., 16490., 16610., 14200.,
      11337., 15580., 21980., 28990., 29200., 29410., 29620., 24964., 19678.,
      25070., 35000., 45725., 46050., 46375., 46700., 39010., 30500., 26510.,
      37000., 48325., 48650., 48975., 49300., 41170., 32180., 27950., 39000.,
      50925., 51250., 51575., 51900., 43330., 33860., 29390., 41000., 53525.,
      53850., 54175., 54500., 45490., 35540., 29668., 41060., 53210., 53520.,
      53830., 54140., 44876., 34834., 26988., 37150., 47900., 48170., 48440.,
      48710., 40180., 31047.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   34.,   31.,   20.,   11.,   35.,
      74.,   130.,  166.,  161.,  133.,  80.,   50.,   133.,  252.,  410.,
      488.,  441.,  346.,  200.,  138.,  338.,  604.,  940.,  1076., 934.,
      710.,  400.,  278.,  638.,  1084., 1620., 1756., 1474., 1090., 600.,
      392.,  859.,  1404., 2030., 2156., 1755., 1264., 680.,  397.,  853.,
      1370., 1950., 2050., 1643., 1167., 620.,  273.,  580.,  922.,  1300.,
      1358., 1078., 759.,  400.,  17.,   52.,   106.,  180.,  254.,  226.,
      175.,  100.,  123.,  291.,  506.,  770.,  934.,  785.,  581.,  320.,
      338.,  757.,  1260., 1850., 2120., 1737., 1258., 680.,  682.,  1490.,
      2428., 3500., 3892., 3142., 2246., 1200., 1142., 2430., 3868., 5460.,
      5852., 4642., 3266., 1720., 1160., 2443., 3852., 5390., 5708., 4491.,
      3136., 1640., 989.,  2069., 3242., 4510., 4738., 3707., 2575., 1340.,
      609.,  1268., 1978., 2740., 2862., 2230., 1543., 800.,  33.,   100.,
      202.,  340.,  478.,  418.,  319.,  180.,  235.,  547.,  938.,  1410.,
      1702., 1409., 1029., 560.,  626.,  1381., 2268., 3290., 3752., 3033.,
      2170., 1160., 1226., 2642., 4252., 6060., 6708., 5350., 3782., 2000.,
      2006., 4222., 6652., 9300., 9948., 7810., 5442., 2840., 1928., 4027.,
      6300., 8750., 9260., 7227., 5008., 2600., 1581., 3285., 5114., 7070.,
      7426., 5771., 3983., 2060., 945.,  1956., 3034., 4180., 4366., 3382.,
      2327., 1200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,  7352.,
      11232., 15880., 17520., 19160., 20800., 18560., 15392., 14011., 20476.,
      27905., 30455., 33005., 35555., 30852., 24985., 20107., 28732., 38385.,
      40935., 43485., 46035., 39364., 31465., 22363., 31868., 42465., 45015.,
      47565., 50115., 42756., 34105., 20779., 29884., 40145., 42695., 45245.,
      47795., 41028., 32905., 13952., 20352., 27680., 30120., 32560., 35000.,
      30240., 24392., 19443., 27548., 36505., 38635., 40765., 42895., 36308.,
      28749., 2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,  7329.,
      7352.,  11232., 15880., 17520., 19160., 20800., 18560., 15392., 14011.,
      20476., 27905., 30455., 33005., 35555., 30852., 24985., 20107., 28732.,
      38385., 40935., 43485., 46035., 39364., 31465., 22363., 31868., 42465.,
      45015., 47565., 50115., 42756., 34105., 20779., 29884., 40145., 42695.,
      45245., 47795., 41028., 32905., 13952., 20352., 27680., 30120., 32560.,
      35000., 30240., 24392., 19443., 27548., 36505., 38635., 40765., 42895.,
      36308., 28749., 2775.,  4460.,  6565.,  7495.,  8425.,  9355.,  8612.,
      7329.,  7352.,  11232., 15880., 17520., 19160., 20800., 18560., 15392.,
      14011., 20476., 27905., 30455., 33005., 35555., 30852., 24985., 20107.,
      28732., 38385., 40935., 43485., 46035., 39364., 31465., 22363., 31868.,
      42465., 45015., 47565., 50115., 42756., 34105., 20779., 29884., 40145.,
      42695., 45245., 47795., 41028., 32905., 13952., 20352., 27680., 30120.,
      32560., 35000., 30240., 24392., 19443., 27548., 36505., 38635., 40765.,
      42895., 36308., 28749.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   233.,   218.,   143.,   64.,
      224.,   496.,   896.,   1168.,  1156.,  968.,   588.,   337.,   926.,
      1791.,  2956.,  3556.,  3249.,  2570.,  1495.,  984.,   2448.,  4424.,
      6944.,  8000.,  6992.,  5344.,  3024.,  2064.,  4768.,  8144.,  12224.,
      13280., 11192., 8304.,  4584.,  2989.,  6566.,  10755., 15580., 16564.,
      13509., 9746.,  5251.,  3060.,  6584.,  10588., 15088., 15872., 12736.,
      9056.,  4816.,  2117.,  4502.,  7163.,  10108., 10564., 8393.,  5914.,
      3119.,  101.,   342.,   731.,   1276.,  1860.,  1673.,  1306.,  751.,
      896.,   2144.,  3760.,  5760.,  7056.,  5956.,  4424.,  2444.,  2545.,
      5726.,  9567.,  14092., 16228., 13329., 9674.,  5239.,  5208.,  11408.,
      18632., 26912., 30016., 24272., 17376., 9296.,  8848.,  18848., 30032.,
      42432., 45536., 36152., 25456., 13416., 9037.,  19046., 30051., 42076.,
      44596., 35109., 24530., 12835., 7732.,  16184., 25372., 35312., 37120.,
      29056., 20192., 10512., 4773.,  9942.,  15515., 21500., 22468., 17513.,
      12122., 6287.,  5.,     22.,    59.,    124.,   196.,   233.,   218.,
      143.,   64.,    224.,   496.,   896.,   1168.,  1156.,  968.,   588.,
      337.,   926.,   1791.,  2956.,  3556.,  3249.,  2570.,  1495.,  984.,
      2448.,  4424.,  6944.,  8000.,  6992.,  5344.,  3024.,  2064.,  4768.,
      8144.,  12224., 13280., 11192., 8304.,  4584.,  2989.,  6566.,  10755.,
      15580., 16564., 13509., 9746.,  5251.,  3060.,  6584.,  10588., 15088.,
      15872., 12736., 9056.,  4816.,  2117.,  4502.,  7163.,  10108., 10564.,
      8393.,  5914.,  3119.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3366.,  6056.,  9498.,  13234., 16970., 20706., 19528., 16126., 4792.,
      8224.,  12616., 17384., 22152., 26920., 22560., 19352., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246.,
      23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246., 23622.,
      29998., 36374., 31064., 26058., 6434.,  11256., 17246., 23622., 29998.,
      36374., 31064., 26058., 6040.,  10400., 15656., 21192., 26728., 32264.,
      26464., 21560., 4086.,  7144.,  11018., 15138., 19258., 23378., 19272.,
      16974., 3366.,  6056.,  9498.,  13234., 16970., 20706., 19528., 16126.,
      4792.,  8224.,  12616., 17384., 22152., 26920., 22560., 19352., 6434.,
      11256., 17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246.,
      23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246., 23622.,
      29998., 36374., 31064., 26058., 6040.,  10400., 15656., 21192., 26728.,
      32264., 26464., 21560., 4086.,  7144.,  11018., 15138., 19258., 23378.,
      19272., 16974., 3366.,  6056.,  9498.,  13234., 16970., 20706., 19528.,
      16126., 4792.,  8224.,  12616., 17384., 22152., 26920., 22560., 19352.,
      6434.,  11256., 17246., 23622., 29998., 36374., 31064., 26058., 6434.,
      11256., 17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256.,
      17246., 23622., 29998., 36374., 31064., 26058., 6434.,  11256., 17246.,
      23622., 29998., 36374., 31064., 26058., 6040.,  10400., 15656., 21192.,
      26728., 32264., 26464., 21560., 4086.,  7144.,  11018., 15138., 19258.,
      23378., 19272., 16974.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,  420.,
      1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,  4564.,
      8454.,  11304., 11080., 9022.,  5060.,  3418.,  1512.,  4432.,  8824.,
      14624., 16160., 14808., 10960., 6728.,  4232.,  8080.,  13656., 18848.,
      15968., 13432., 8144.,  4264.,  2466.,  6196.,  11190., 17640., 17096.,
      14958., 10788., 4394.,  2452.,  3656.,  5596.,  8400.,  6288.,  6124.,
      4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,  3996.,
      310.,   30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,  1078.,
      420.,   1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,  1810.,
      4564.,  8454.,  11304., 11080., 9022.,  5060.,  3418.,  1512.,  4432.,
      8824.,  14624., 16160., 14808., 10960., 6728.,  4232.,  8080.,  13656.,
      18848., 15968., 13432., 8144.,  4264.,  2466.,  6196.,  11190., 17640.,
      17096., 14958., 10788., 4394.,  2452.,  3656.,  5596.,  8400.,  6288.,
      6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,  6706.,
      3996.,  310.,   30.,    140.,   394.,   856.,   1400.,  1714.,  1628.,
      1078.,  420.,   1576.,  3596.,  6288.,  7568.,  6556.,  4168.,  2644.,
      1810.,  4564.,  8454.,  11304., 11080., 9022.,  5060.,  3418.,  1512.,
      4432.,  8824.,  14624., 16160., 14808., 10960., 6728.,  4232.,  8080.,
      13656., 18848., 15968., 13432., 8144.,  4264.,  2466.,  6196.,  11190.,
      17640., 17096., 14958., 10788., 4394.,  2452.,  3656.,  5596.,  8400.,
      6288.,  6124.,  4712.,  1924.,  1374.,  3340.,  5962.,  9304.,  8504.,
      6706.,  3996.,  310.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,  4040.,  3905.,
      4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,  3400.,  3952.,
      5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,  10120., 9840.,
      10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,  10780., 12000.,
      14925., 16500., 16175., 17800., 17425., 19100., 18675., 20400., 16380.,
      17800., 13385., 14480., 12755., 13880., 18460., 20000., 24925., 26900.,
      26175., 28200., 27425., 29500., 28675., 30800., 24700., 26440., 19865.,
      21200., 18275., 19640., 26140., 28000., 34925., 37300., 36175., 38600.,
      37425., 39900., 38675., 41200., 33020., 35080., 26345., 27920., 23795.,
      25400., 33820., 36000., 44925., 47700., 46175., 49000., 47425., 50300.,
      48675., 51600., 41340., 43720., 32825., 34640., 28144., 29584., 39408.,
      41360., 51640., 54120., 52840., 55360., 54040., 56600., 55240., 57840.,
      46320., 48432., 36352., 37960., 28419., 29616., 39460., 41080., 51305.,
      53360., 52355., 54440., 53405., 55520., 54455., 56600., 45316., 47056.,
      35313., 36636., 1239.,  1536.,  2020.,  2440.,  3005.,  3560.,  3455.,
      4040.,  3905.,  4520.,  4355.,  5000.,  4036.,  4576.,  3453.,  3876.,
      3400.,  3952.,  5232.,  6000.,  7440.,  8440.,  8240.,  9280.,  9040.,
      10120., 9840.,  10960., 8816.,  9744.,  7336.,  8056.,  7235.,  8120.,
      10780., 12000., 14925., 16500., 16175., 17800., 17425., 19100., 18675.,
      20400., 16380., 17800., 13385., 14480., 12755., 13880., 18460., 20000.,
      24925., 26900., 26175., 28200., 27425., 29500., 28675., 30800., 24700.,
      26440., 19865., 21200., 18275., 19640., 26140., 28000., 34925., 37300.,
      36175., 38600., 37425., 39900., 38675., 41200., 33020., 35080., 26345.,
      27920., 23795., 25400., 33820., 36000., 44925., 47700., 46175., 49000.,
      47425., 50300., 48675., 51600., 41340., 43720., 32825., 34640., 28144.,
      29584., 39408., 41360., 51640., 54120., 52840., 55360., 54040., 56600.,
      55240., 57840., 46320., 48432., 36352., 37960., 28419., 29616., 39460.,
      41080., 51305., 53360., 52355., 54440., 53405., 55520., 54455., 56600.,
      45316., 47056., 35313., 36636., 1239.,  1536.,  2020.,  2440.,  3005.,
      3560.,  3455.,  4040.,  3905.,  4520.,  4355.,  5000.,  4036.,  4576.,
      3453.,  3876.,  3400.,  3952.,  5232.,  6000.,  7440.,  8440.,  8240.,
      9280.,  9040.,  10120., 9840.,  10960., 8816.,  9744.,  7336.,  8056.,
      7235.,  8120.,  10780., 12000., 14925., 16500., 16175., 17800., 17425.,
      19100., 18675., 20400., 16380., 17800., 13385., 14480., 12755., 13880.,
      18460., 20000., 24925., 26900., 26175., 28200., 27425., 29500., 28675.,
      30800., 24700., 26440., 19865., 21200., 18275., 19640., 26140., 28000.,
      34925., 37300., 36175., 38600., 37425., 39900., 38675., 41200., 33020.,
      35080., 26345., 27920., 23795., 25400., 33820., 36000., 44925., 47700.,
      46175., 49000., 47425., 50300., 48675., 51600., 41340., 43720., 32825.,
      34640., 28144., 29584., 39408., 41360., 51640., 54120., 52840., 55360.,
      54040., 56600., 55240., 57840., 46320., 48432., 36352., 37960., 28419.,
      29616., 39460., 41080., 51305., 53360., 52355., 54440., 53405., 55520.,
      54455., 56600., 45316., 47056., 35313., 36636.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   97.,    136.,   94.,    124.,   63.,    80.,    20.,    44.,
      84.,    140.,   200.,   296.,   376.,   520.,   504.,   664.,   512.,
      644.,   436.,   532.,   268.,   320.,   137.,   200.,   394.,   532.,
      783.,   1008.,  1316.,  1640.,  1604.,  1952.,  1485.,  1764.,  1186.,
      1384.,  695.,   800.,   432.,   552.,   1096.,  1352.,  2008.,  2416.,
      3184.,  3760.,  3696.,  4304.,  3256.,  3736.,  2504.,  2840.,  1424.,
      1600.,  952.,   1112.,  2216.,  2552.,  3808.,  4336.,  5744.,  6480.,
      6256.,  7024.,  5296.,  5896.,  3944.,  4360.,  2184.,  2400.,  1421.,
      1568.,  3130.,  3436.,  5139.,  5616.,  7460.,  8120.,  7940.,  8624.,
      6489.,  7020.,  4690.,  5056.,  2531.,  2720.,  1472.,  1588.,  3172.,
      3412.,  5108.,  5480.,  7288.,  7800.,  7672.,  8200.,  6164.,  6572.,
      4388.,  4668.,  2336.,  2480.,  1025.,  1092.,  2182.,  2320.,  3475.,
      3688.,  4908.,  5200.,  5132.,  5432.,  4081.,  4312.,  2878.,  3036.,
      1519.,  1600.,  33.,    68.,    134.,   208.,   307.,   424.,   556.,
      720.,   844.,   1016.,  769.,   904.,   606.,   700.,   351.,   400.,
      404.,   492.,   980.,   1164.,  1736.,  2024.,  2680.,  3080.,  3320.,
      3736.,  2816.,  3140.,  2100.,  2324.,  1164.,  1280.,  1193.,  1352.,
      2698.,  3028.,  4527.,  5040.,  6692.,  7400.,  7748.,  8480.,  6381.,
      6948.,  4642.,  5032.,  2519.,  2720.,  2480.,  2728.,  5448.,  5960.,
      8920.,  9712.,  12912., 14000., 14448., 15568., 11704., 12568., 8392.,
      8984.,  4496.,  4800.,  4280.,  4568.,  9128.,  9720.,  14560., 15472.,
      20592., 21840., 22128., 23408., 17584., 18568., 12392., 13064., 6536.,
      6880.,  4397.,  4640.,  9274.,  9772.,  14643., 15408., 20516., 21560.,
      21764., 22832., 17145., 17964., 11986., 12544., 6275.,  6560.,  3776.,
      3956.,  7908.,  8276.,  12404., 12968., 17272., 18040., 18168., 18952.,
      14228., 14828., 9892.,  10300., 5152.,  5360.,  2337.,  2436.,  4870.,
      5072.,  7603.,  7912.,  10540., 10960., 11020., 11448., 8593.,  8920.,
      5950.,  6172.,  3087.,  3200.,  65.,    132.,   262.,   400.,   595.,
      808.,   1068.,  1360.,  1612.,  1912.,  1441.,  1672.,  1118.,  1276.,
      639.,   720.,   788.,   940.,   1876.,  2188.,  3272.,  3752.,  4984.,
      5640.,  6136.,  6808.,  5120.,  5636.,  3764.,  4116.,  2060.,  2240.,
      2249.,  2504.,  5002.,  5524.,  8271.,  9072.,  12068., 13160., 13892.,
      15008., 11277., 12132., 8098.,  8680.,  4343.,  4640.,  4528.,  4904.,
      9800.,  10568., 15832., 17008., 22640., 24240., 25200., 26832., 20152.,
      21400., 14280., 15128., 7568.,  8000.,  7608.,  8024.,  16040., 16888.,
      25312., 26608., 35440., 37200., 38000., 39792., 29872., 31240., 20840.,
      21768., 10888., 11360., 7373.,  7712.,  15418., 16108., 24147., 25200.,
      33572., 35000., 35588., 37040., 27801., 28908., 19282., 20032., 10019.,
      10400., 6080.,  6324.,  12644., 13140., 19700., 20456., 27256., 28280.,
      28664., 29704., 22292., 23084., 15396., 15932., 7968.,  8240.,  3649.,
      3780.,  7558.,  7824.,  11731., 12136., 16172., 16720., 16908., 17464.,
      13105., 13528., 9022.,  9308.,  4655.,  4800.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7233.,  8805.,  11516., 13804., 16895., 19995., 20435., 23775., 23975.,
      27555., 27515., 31335., 25356., 28604., 21621., 24201., 13332., 15652.,
      20336., 23600., 28780., 33116., 33052., 37708., 37324., 42300., 41596.,
      46892., 34672., 38960., 29444., 32852., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069.,
      37885., 43761., 43177., 49453., 33540., 38676., 29287., 33379., 18107.,
      21159., 27604., 31908., 39045., 44761., 44337., 50453., 49629., 56145.,
      54921., 61837., 46724., 52372., 39559., 44035., 13348., 15860., 19248.,
      22768., 26716., 31372., 31628., 36604., 36540., 41836., 41452., 47068.,
      31536., 36080., 27284., 30884., 16153., 18269., 23900., 26828., 32935.,
      36771., 36667., 40743., 40399., 44715., 44131., 48687., 36012., 39644.,
      29901., 32769., 7233.,  8805.,  11516., 13804., 16895., 19995., 20435.,
      23775., 23975., 27555., 27515., 31335., 25356., 28604., 21621., 24201.,
      13332., 15652., 20336., 23600., 28780., 33116., 33052., 37708., 37324.,
      42300., 41596., 46892., 34672., 38960., 29444., 32852., 13467., 16135.,
      19540., 23332., 27301., 32377., 32593., 38069., 37885., 43761., 43177.,
      49453., 33540., 38676., 29287., 33379., 18107., 21159., 27604., 31908.,
      39045., 44761., 44337., 50453., 49629., 56145., 54921., 61837., 46724.,
      52372., 39559., 44035., 13467., 16135., 19540., 23332., 27301., 32377.,
      32593., 38069., 37885., 43761., 43177., 49453., 33540., 38676., 29287.,
      33379., 18107., 21159., 27604., 31908., 39045., 44761., 44337., 50453.,
      49629., 56145., 54921., 61837., 46724., 52372., 39559., 44035., 13348.,
      15860., 19248., 22768., 26716., 31372., 31628., 36604., 36540., 41836.,
      41452., 47068., 31536., 36080., 27284., 30884., 16153., 18269., 23900.,
      26828., 32935., 36771., 36667., 40743., 40399., 44715., 44131., 48687.,
      36012., 39644., 29901., 32769., 7233.,  8805.,  11516., 13804., 16895.,
      19995., 20435., 23775., 23975., 27555., 27515., 31335., 25356., 28604.,
      21621., 24201., 13332., 15652., 20336., 23600., 28780., 33116., 33052.,
      37708., 37324., 42300., 41596., 46892., 34672., 38960., 29444., 32852.,
      13467., 16135., 19540., 23332., 27301., 32377., 32593., 38069., 37885.,
      43761., 43177., 49453., 33540., 38676., 29287., 33379., 18107., 21159.,
      27604., 31908., 39045., 44761., 44337., 50453., 49629., 56145., 54921.,
      61837., 46724., 52372., 39559., 44035., 13467., 16135., 19540., 23332.,
      27301., 32377., 32593., 38069., 37885., 43761., 43177., 49453., 33540.,
      38676., 29287., 33379., 18107., 21159., 27604., 31908., 39045., 44761.,
      44337., 50453., 49629., 56145., 54921., 61837., 46724., 52372., 39559.,
      44035., 13348., 15860., 19248., 22768., 26716., 31372., 31628., 36604.,
      36540., 41836., 41452., 47068., 31536., 36080., 27284., 30884., 16153.,
      18269., 23900., 26828., 32935., 36771., 36667., 40743., 40399., 44715.,
      44131., 48687., 36012., 39644., 29901., 32769.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   707.,   1007.,  698.,   930.,   473.,   605.,   118.,   302.,
      572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,  4984.,  3850.,
      4882.,  3308.,  4060.,  2046.,  2454.,  979.,   1471.,  2894.,  3974.,
      5841.,  7605.,  9916.,  12460., 12172., 14908., 11349., 13545., 9110.,
      10670., 5359.,  6187.,  3228.,  4172.,  8088.,  9848.,  14388., 17092.,
      22256., 26032., 24560., 28336., 21476., 24500., 16440., 18584., 9324.,
      10460., 7116.,  8124.,  13944., 15832., 22340., 25236., 32432., 36464.,
      32688., 36720., 27764., 30980., 20760., 23032., 11548., 12748., 8843.,
      9751.,  15166., 16822., 22841., 25341., 31964., 35404., 29932., 33308.,
      25149., 27825., 18630., 20510., 10279., 11267., 7262.,  7926.,  9484.,
      10620., 12554., 14226., 16536., 18808., 11704., 13848., 10498., 12202.,
      8188.,  9388.,  4710.,  5342.,  1733.,  2009.,  4002.,  4586.,  6839.,
      7763.,  10276., 11572., 12052., 13412., 10115., 11183., 7482.,  8226.,
      4121.,  4509.,  5.,     25.,    34.,    106.,   119.,   275.,   292.,
      564.,   532.,   868.,   707.,   1007.,  698.,   930.,   473.,   605.,
      118.,   302.,   572.,   1004.,  1426.,  2170.,  2744.,  3864.,  3736.,
      4984.,  3850.,  4882.,  3308.,  4060.,  2046.,  2454.,  979.,   1471.,
      2894.,  3974.,  5841.,  7605.,  9916.,  12460., 12172., 14908., 11349.,
      13545., 9110.,  10670., 5359.,  6187.,  3228.,  4172.,  8088.,  9848.,
      14388., 17092., 22256., 26032., 24560., 28336., 21476., 24500., 16440.,
      18584., 9324.,  10460., 7116.,  8124.,  13944., 15832., 22340., 25236.,
      32432., 36464., 32688., 36720., 27764., 30980., 20760., 23032., 11548.,
      12748., 8843.,  9751.,  15166., 16822., 22841., 25341., 31964., 35404.,
      29932., 33308., 25149., 27825., 18630., 20510., 10279., 11267., 7262.,
      7926.,  9484.,  10620., 12554., 14226., 16536., 18808., 11704., 13848.,
      10498., 12202., 8188.,  9388.,  4710.,  5342.,  1733.,  2009.,  4002.,
      4586.,  6839.,  7763.,  10276., 11572., 12052., 13412., 10115., 11183.,
      7482.,  8226.,  4121.,  4509.,  5.,     25.,    34.,    106.,   119.,
      275.,   292.,   564.,   532.,   868.,   707.,   1007.,  698.,   930.,
      473.,   605.,   118.,   302.,   572.,   1004.,  1426.,  2170.,  2744.,
      3864.,  3736.,  4984.,  3850.,  4882.,  3308.,  4060.,  2046.,  2454.,
      979.,   1471.,  2894.,  3974.,  5841.,  7605.,  9916.,  12460., 12172.,
      14908., 11349., 13545., 9110.,  10670., 5359.,  6187.,  3228.,  4172.,
      8088.,  9848.,  14388., 17092., 22256., 26032., 24560., 28336., 21476.,
      24500., 16440., 18584., 9324.,  10460., 7116.,  8124.,  13944., 15832.,
      22340., 25236., 32432., 36464., 32688., 36720., 27764., 30980., 20760.,
      23032., 11548., 12748., 8843.,  9751.,  15166., 16822., 22841., 25341.,
      31964., 35404., 29932., 33308., 25149., 27825., 18630., 20510., 10279.,
      11267., 7262.,  7926.,  9484.,  10620., 12554., 14226., 16536., 18808.,
      11704., 13848., 10498., 12202., 8188.,  9388.,  4710.,  5342.,  1733.,
      2009.,  4002.,  4586.,  6839.,  7763.,  10276., 11572., 12052., 13412.,
      10115., 11183., 7482.,  8226.,  4121.,  4509.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5182.,  9422.,  9896.,  16232., 11762., 18914., 11234., 18770., 11730.,
      19650., 13250., 21554., 11432., 17768., 9326.,  14462., 7368.,  12936.,
      13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704.,
      31032., 13536., 21984., 12936., 20040., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942.,
      21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922., 8194.,
      14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006.,
      22078., 36046., 17176., 27736., 16978., 25922., 7368.,  12936., 13536.,
      21984., 14136., 23928., 15992., 26296., 17848., 28664., 19704., 31032.,
      13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,  16232., 9874.,
      17282., 11906., 19698., 14962., 23138., 14946., 23506., 9384.,  15720.,
      9486.,  14878., 5182.,  9422.,  9896.,  16232., 11762., 18914., 11234.,
      18770., 11730., 19650., 13250., 21554., 11432., 17768., 9326.,  14462.,
      7368.,  12936., 13536., 21984., 14136., 23928., 15992., 26296., 17848.,
      28664., 19704., 31032., 13536., 21984., 12936., 20040., 8194.,  14962.,
      15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006., 22078.,
      36046., 17176., 27736., 16978., 25922., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942.,
      21678., 35006., 22078., 36046., 17176., 27736., 16978., 25922., 7368.,
      12936., 13536., 21984., 14136., 23928., 15992., 26296., 17848., 28664.,
      19704., 31032., 13536., 21984., 12936., 20040., 5534.,  9518.,  9896.,
      16232., 9874.,  17282., 11906., 19698., 14962., 23138., 14946., 23506.,
      9384.,  15720., 9486.,  14878., 5182.,  9422.,  9896.,  16232., 11762.,
      18914., 11234., 18770., 11730., 19650., 13250., 21554., 11432., 17768.,
      9326.,  14462., 7368.,  12936., 13536., 21984., 14136., 23928., 15992.,
      26296., 17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040.,
      8194.,  14962., 15640., 26200., 17806., 29854., 20254., 32942., 21678.,
      35006., 22078., 36046., 17176., 27736., 16978., 25922., 8194.,  14962.,
      15640., 26200., 17806., 29854., 20254., 32942., 21678., 35006., 22078.,
      36046., 17176., 27736., 16978., 25922., 8194.,  14962., 15640., 26200.,
      17806., 29854., 20254., 32942., 21678., 35006., 22078., 36046., 17176.,
      27736., 16978., 25922., 8194.,  14962., 15640., 26200., 17806., 29854.,
      20254., 32942., 21678., 35006., 22078., 36046., 17176., 27736., 16978.,
      25922., 7368.,  12936., 13536., 21984., 14136., 23928., 15992., 26296.,
      17848., 28664., 19704., 31032., 13536., 21984., 12936., 20040., 5534.,
      9518.,  9896.,  16232., 9874.,  17282., 11906., 19698., 14962., 23138.,
      14946., 23506., 9384.,  15720., 9486.,  14878.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,   140.,   556.,
      856.,   2200.,  2660.,  5444.,  5744.,  9968.,  7792.,  12016., 7492.,
      11044., 4056.,  6424.,  1388.,  2572.,  330.,   1146.,  1908.,  4308.,
      5182.,  9422.,  9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,
      10228., 3354.,  5322.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  490.,
      1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,  15720.,
      9486.,  14878., 9428.,  13620., 5050.,  7274.,  300.,   972.,   1368.,
      2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,  7652.,  11460.,
      6936.,  9816.,  3084.,  4524.,  30.,    174.,   220.,   764.,   826.,
      2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.,   30.,    174.,   220.,   764.,   826.,   2026.,  2104.,
      4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,
      140.,   556.,   856.,   2200.,  2660.,  5444.,  5744.,  9968.,  7792.,
      12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,  330.,   1146.,
      1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432., 17768., 9326.,
      14462., 6548.,  10228., 3354.,  5322.,  600.,   1944.,  3056.,  6256.,
      7368.,  12936., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232.,
      9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,  7274.,  300.,
      972.,   1368.,  2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,
      7652.,  11460., 6936.,  9816.,  3084.,  4524.,  30.,    174.,   220.,
      764.,   826.,   2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,
      3004.,  4316.,  270.,   798.,   30.,    174.,   220.,   764.,   826.,
      2026.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.,   140.,   556.,   856.,   2200.,  2660.,  5444.,  5744.,
      9968.,  7792.,  12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,
      330.,   1146.,  1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432.,
      17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,  600.,   1944.,
      3056.,  6256.,  7368.,  12936., 13536., 21984., 13536., 21984., 12936.,
      20040., 10480., 15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,
      7368.,  12936., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,
      9896.,  16232., 9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,
      7274.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,  9968.,
      5744.,  9968.,  7652.,  11460., 6936.,  9816.,  3084.,  4524.,  30.,
      174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,  5752.,
      4042.,  5882.,  3004.,  4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,
      8820.,  9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420.,
      13315., 14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884.,
      14720., 10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,
      9776.,  10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964.,
      17088., 18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440.,
      22764., 24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988.,
      16864., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172.,
      12160., 13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744.,
      18233., 19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148.,
      17392., 18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,
      10183., 10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641.,
      23120., 21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912.,
      26621., 28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235.,
      20324., 21443., 22592., 6372.,  6976.,  7604.,  8256.,  9200.,  10048.,
      10928., 11840., 12796., 13920., 15084., 16288., 15212., 16416., 17660.,
      18944., 17628., 18912., 20236., 21600., 20044., 21408., 22812., 24256.,
      15216., 16320., 17456., 18624., 13204., 14080., 14980., 15904., 7821.,
      8332.,  8861.,  9408.,  11596., 12304., 13036., 13792., 16003., 16932.,
      17891., 18880., 17839., 18828., 19847., 20896., 19675., 20724., 21803.,
      22912., 21511., 22620., 23759., 24928., 17564., 18448., 19356., 20288.,
      14601., 15300., 16017., 16752., 3429.,  3804.,  4197.,  4608.,  5484.,
      6032.,  6604.,  7200.,  8075.,  8820.,  9595.,  10400., 9815.,  10620.,
      11455., 12320., 11555., 12420., 13315., 14240., 13295., 14220., 15175.,
      16160., 12284., 13072., 13884., 14720., 10497., 11124., 11769., 12432.,
      6388.,  6944.,  7524.,  8128.,  9776.,  10560., 11376., 12224., 13868.,
      14912., 15996., 17120., 15964., 17088., 18252., 19456., 18060., 19264.,
      20508., 21792., 20156., 21440., 22764., 24128., 16816., 17856., 18928.,
      20032., 14308., 15136., 15988., 16864., 6415.,  7052.,  7719.,  8416.,
      9316.,  10224., 11172., 12160., 13041., 14260., 15529., 16848., 15637.,
      16956., 18325., 19744., 18233., 19652., 21121., 22640., 20829., 22348.,
      23917., 25536., 16148., 17392., 18676., 20000., 14147., 15140., 16163.,
      17216., 8687.,  9420.,  10183., 10976., 13284., 14320., 15396., 16512.,
      18833., 20212., 21641., 23120., 21429., 22908., 24437., 26016., 24025.,
      25604., 27233., 28912., 26621., 28300., 30029., 31808., 22676., 24048.,
      25460., 26912., 19235., 20324., 21443., 22592., 6415.,  7052.,  7719.,
      8416.,  9316.,  10224., 11172., 12160., 13041., 14260., 15529., 16848.,
      15637., 16956., 18325., 19744., 18233., 19652., 21121., 22640., 20829.,
      22348., 23917., 25536., 16148., 17392., 18676., 20000., 14147., 15140.,
      16163., 17216., 8687.,  9420.,  10183., 10976., 13284., 14320., 15396.,
      16512., 18833., 20212., 21641., 23120., 21429., 22908., 24437., 26016.,
      24025., 25604., 27233., 28912., 26621., 28300., 30029., 31808., 22676.,
      24048., 25460., 26912., 19235., 20324., 21443., 22592., 6372.,  6976.,
      7604.,  8256.,  9200.,  10048., 10928., 11840., 12796., 13920., 15084.,
      16288., 15212., 16416., 17660., 18944., 17628., 18912., 20236., 21600.,
      20044., 21408., 22812., 24256., 15216., 16320., 17456., 18624., 13204.,
      14080., 14980., 15904., 7821.,  8332.,  8861.,  9408.,  11596., 12304.,
      13036., 13792., 16003., 16932., 17891., 18880., 17839., 18828., 19847.,
      20896., 19675., 20724., 21803., 22912., 21511., 22620., 23759., 24928.,
      17564., 18448., 19356., 20288., 14601., 15300., 16017., 16752., 3429.,
      3804.,  4197.,  4608.,  5484.,  6032.,  6604.,  7200.,  8075.,  8820.,
      9595.,  10400., 9815.,  10620., 11455., 12320., 11555., 12420., 13315.,
      14240., 13295., 14220., 15175., 16160., 12284., 13072., 13884., 14720.,
      10497., 11124., 11769., 12432., 6388.,  6944.,  7524.,  8128.,  9776.,
      10560., 11376., 12224., 13868., 14912., 15996., 17120., 15964., 17088.,
      18252., 19456., 18060., 19264., 20508., 21792., 20156., 21440., 22764.,
      24128., 16816., 17856., 18928., 20032., 14308., 15136., 15988., 16864.,
      6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160., 13041.,
      14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233., 19652.,
      21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392., 18676.,
      20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183., 10976.,
      13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120., 21429.,
      22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621., 28300.,
      30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324., 21443.,
      22592., 6415.,  7052.,  7719.,  8416.,  9316.,  10224., 11172., 12160.,
      13041., 14260., 15529., 16848., 15637., 16956., 18325., 19744., 18233.,
      19652., 21121., 22640., 20829., 22348., 23917., 25536., 16148., 17392.,
      18676., 20000., 14147., 15140., 16163., 17216., 8687.,  9420.,  10183.,
      10976., 13284., 14320., 15396., 16512., 18833., 20212., 21641., 23120.,
      21429., 22908., 24437., 26016., 24025., 25604., 27233., 28912., 26621.,
      28300., 30029., 31808., 22676., 24048., 25460., 26912., 19235., 20324.,
      21443., 22592., 6372.,  6976.,  7604.,  8256.,  9200.,  10048., 10928.,
      11840., 12796., 13920., 15084., 16288., 15212., 16416., 17660., 18944.,
      17628., 18912., 20236., 21600., 20044., 21408., 22812., 24256., 15216.,
      16320., 17456., 18624., 13204., 14080., 14980., 15904., 7821.,  8332.,
      8861.,  9408.,  11596., 12304., 13036., 13792., 16003., 16932., 17891.,
      18880., 17839., 18828., 19847., 20896., 19675., 20724., 21803., 22912.,
      21511., 22620., 23759., 24928., 17564., 18448., 19356., 20288., 14601.,
      15300., 16017., 16752.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,
      496.,   221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,
      1504.,  1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,
      2306.,  2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,
      1280.,  431.,   548.,   671.,   800.,   1318.,  1576.,  1846.,  2128.,
      2709.,  3132.,  3573.,  4032.,  4652.,  5264.,  5900.,  6560.,  5756.,
      6416.,  7100.,  7808.,  5409.,  5940.,  6489.,  7056.,  4366.,  4744.,
      5134.,  5536.,  2579.,  2780.,  2987.,  3200.,  1500.,  1728.,  1964.,
      2208.,  3832.,  4256.,  4696.,  5152.,  6868.,  7520.,  8196.,  8896.,
      10672., 11584., 12528., 13504., 11824., 12736., 13680., 14656., 10372.,
      11104., 11860., 12640., 7960.,  8480.,  9016.,  9568.,  4524.,  4800.,
      5084.,  5376.,  3436.,  3680.,  3932.,  4192.,  6744.,  7200.,  7672.,
      8160.,  10820., 11520., 12244., 12992., 15728., 16704., 17712., 18752.,
      15856., 16832., 17840., 18880., 13492., 14272., 15076., 15904., 10104.,
      10656., 11224., 11808., 5628.,  5920.,  6220.,  6528.,  4311.,  4532.,
      4759.,  4992.,  7382.,  7784.,  8198.,  8624.,  11117., 11724., 12349.,
      12992., 15564., 16400., 17260., 18144., 14556., 15376., 16220., 17088.,
      12249., 12900., 13569., 14256., 9086.,  9544.,  10014., 10496., 5019.,
      5260.,  5507.,  5760.,  3550.,  3712.,  3878.,  4048.,  4604.,  4880.,
      5164.,  5456.,  6074.,  6480.,  6898.,  7328.,  7992.,  8544.,  9112.,
      9696.,  5592.,  6112.,  6648.,  7200.,  5042.,  5456.,  5882.,  6320.,
      3948.,  4240.,  4540.,  4848.,  2278.,  2432.,  2590.,  2752.,  833.,
      900.,   969.,   1040.,  1930.,  2072.,  2218.,  2368.,  3307.,  3532.,
      3763.,  4000.,  4980.,  5296.,  5620.,  5952.,  5860.,  6192.,  6532.,
      6880.,  4927.,  5188.,  5455.,  5728.,  3650.,  3832.,  4018.,  4208.,
      2013.,  2108.,  2205.,  2304.,  1.,     4.,     9.,     16.,    10.,
      24.,    42.,    64.,    43.,    76.,    115.,   160.,   116.,   176.,
      244.,   320.,   228.,   304.,   388.,   480.,   319.,   388.,   463.,
      544.,   322.,   376.,   434.,   496.,   221.,   252.,   285.,   320.,
      38.,    80.,    126.,   176.,   236.,   336.,   444.,   560.,   626.,
      800.,   986.,   1184.,  1240.,  1504.,  1784.,  2080.,  1720.,  2016.,
      2328.,  2656.,  1802.,  2048.,  2306.,  2576.,  1564.,  1744.,  1932.,
      2128.,  974.,   1072.,  1174.,  1280.,  431.,   548.,   671.,   800.,
      1318.,  1576.,  1846.,  2128.,  2709.,  3132.,  3573.,  4032.,  4652.,
      5264.,  5900.,  6560.,  5756.,  6416.,  7100.,  7808.,  5409.,  5940.,
      6489.,  7056.,  4366.,  4744.,  5134.,  5536.,  2579.,  2780.,  2987.,
      3200.,  1500.,  1728.,  1964.,  2208.,  3832.,  4256.,  4696.,  5152.,
      6868.,  7520.,  8196.,  8896.,  10672., 11584., 12528., 13504., 11824.,
      12736., 13680., 14656., 10372., 11104., 11860., 12640., 7960.,  8480.,
      9016.,  9568.,  4524.,  4800.,  5084.,  5376.,  3436.,  3680.,  3932.,
      4192.,  6744.,  7200.,  7672.,  8160.,  10820., 11520., 12244., 12992.,
      15728., 16704., 17712., 18752., 15856., 16832., 17840., 18880., 13492.,
      14272., 15076., 15904., 10104., 10656., 11224., 11808., 5628.,  5920.,
      6220.,  6528.,  4311.,  4532.,  4759.,  4992.,  7382.,  7784.,  8198.,
      8624.,  11117., 11724., 12349., 12992., 15564., 16400., 17260., 18144.,
      14556., 15376., 16220., 17088., 12249., 12900., 13569., 14256., 9086.,
      9544.,  10014., 10496., 5019.,  5260.,  5507.,  5760.,  3550.,  3712.,
      3878.,  4048.,  4604.,  4880.,  5164.,  5456.,  6074.,  6480.,  6898.,
      7328.,  7992.,  8544.,  9112.,  9696.,  5592.,  6112.,  6648.,  7200.,
      5042.,  5456.,  5882.,  6320.,  3948.,  4240.,  4540.,  4848.,  2278.,
      2432.,  2590.,  2752.,  833.,   900.,   969.,   1040.,  1930.,  2072.,
      2218.,  2368.,  3307.,  3532.,  3763.,  4000.,  4980.,  5296.,  5620.,
      5952.,  5860.,  6192.,  6532.,  6880.,  4927.,  5188.,  5455.,  5728.,
      3650.,  3832.,  4018.,  4208.,  2013.,  2108.,  2205.,  2304.,  1.,
      4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,    76.,
      115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,   388.,
      480.,   319.,   388.,   463.,   544.,   322.,   376.,   434.,   496.,
      221.,   252.,   285.,   320.,   38.,    80.,    126.,   176.,   236.,
      336.,   444.,   560.,   626.,   800.,   986.,   1184.,  1240.,  1504.,
      1784.,  2080.,  1720.,  2016.,  2328.,  2656.,  1802.,  2048.,  2306.,
      2576.,  1564.,  1744.,  1932.,  2128.,  974.,   1072.,  1174.,  1280.,
      431.,   548.,   671.,   800.,   1318.,  1576.,  1846.,  2128.,  2709.,
      3132.,  3573.,  4032.,  4652.,  5264.,  5900.,  6560.,  5756.,  6416.,
      7100.,  7808.,  5409.,  5940.,  6489.,  7056.,  4366.,  4744.,  5134.,
      5536.,  2579.,  2780.,  2987.,  3200.,  1500.,  1728.,  1964.,  2208.,
      3832.,  4256.,  4696.,  5152.,  6868.,  7520.,  8196.,  8896.,  10672.,
      11584., 12528., 13504., 11824., 12736., 13680., 14656., 10372., 11104.,
      11860., 12640., 7960.,  8480.,  9016.,  9568.,  4524.,  4800.,  5084.,
      5376.,  3436.,  3680.,  3932.,  4192.,  6744.,  7200.,  7672.,  8160.,
      10820., 11520., 12244., 12992., 15728., 16704., 17712., 18752., 15856.,
      16832., 17840., 18880., 13492., 14272., 15076., 15904., 10104., 10656.,
      11224., 11808., 5628.,  5920.,  6220.,  6528.,  4311.,  4532.,  4759.,
      4992.,  7382.,  7784.,  8198.,  8624.,  11117., 11724., 12349., 12992.,
      15564., 16400., 17260., 18144., 14556., 15376., 16220., 17088., 12249.,
      12900., 13569., 14256., 9086.,  9544.,  10014., 10496., 5019.,  5260.,
      5507.,  5760.,  3550.,  3712.,  3878.,  4048.,  4604.,  4880.,  5164.,
      5456.,  6074.,  6480.,  6898.,  7328.,  7992.,  8544.,  9112.,  9696.,
      5592.,  6112.,  6648.,  7200.,  5042.,  5456.,  5882.,  6320.,  3948.,
      4240.,  4540.,  4848.,  2278.,  2432.,  2590.,  2752.,  833.,   900.,
      969.,   1040.,  1930.,  2072.,  2218.,  2368.,  3307.,  3532.,  3763.,
      4000.,  4980.,  5296.,  5620.,  5952.,  5860.,  6192.,  6532.,  6880.,
      4927.,  5188.,  5455.,  5728.,  3650.,  3832.,  4018.,  4208.,  2013.,
      2108.,  2205.,  2304.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2133.,  3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,
      6655.,  8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,
      8715.,  10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,
      9772.,  4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,
      9124.,  11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,
      11004., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257.,
      9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,
      6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221.,
      16633., 8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369.,
      9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,
      9487.,  11723., 14199., 3084.,  4284.,  5676.,  7260.,  5840.,  7696.,
      9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700.,
      14596., 7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 2341.,
      3193.,  4189.,  5329.,  4252.,  5644.,  7228.,  9004.,  4131.,  5743.,
      7595.,  9687.,  5099.,  6807.,  8755.,  10943., 6579.,  8383.,  10427.,
      12711., 6523.,  8423.,  10563., 12943., 3996.,  5388.,  6972.,  8748.,
      4141.,  5345.,  6693.,  8185.,  2133.,  3049.,  4109.,  5313.,  4252.,
      5644.,  7228.,  9004.,  5107.,  6655.,  8443.,  10471., 4795.,  6439.,
      8323.,  10447., 4995.,  6735.,  8715.,  10935., 5707.,  7543.,  9619.,
      11935., 5020.,  6412.,  7996.,  9772.,  4093.,  5233.,  6517.,  7945.,
      3084.,  4284.,  5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 6868.,  9124.,  11700., 14596., 7732.,  10116.,
      12820., 15844., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,
      12176., 5676.,  7260.,  9036.,  11004., 3371.,  4823.,  6515.,  8447.,
      6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8741.,
      11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,  12585.,
      16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723.,
      14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257.,
      9373.,  12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 7491.,  9487.,  11723., 14199., 3084.,  4284.,
      5676.,  7260.,  5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580.,
      13348., 6868.,  9124.,  11700., 14596., 7732.,  10116., 12820., 15844.,
      8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176., 5676.,
      7260.,  9036.,  11004., 2341.,  3193.,  4189.,  5329.,  4252.,  5644.,
      7228.,  9004.,  4131.,  5743.,  7595.,  9687.,  5099.,  6807.,  8755.,
      10943., 6579.,  8383.,  10427., 12711., 6523.,  8423.,  10563., 12943.,
      3996.,  5388.,  6972.,  8748.,  4141.,  5345.,  6693.,  8185.,  2133.,
      3049.,  4109.,  5313.,  4252.,  5644.,  7228.,  9004.,  5107.,  6655.,
      8443.,  10471., 4795.,  6439.,  8323.,  10447., 4995.,  6735.,  8715.,
      10935., 5707.,  7543.,  9619.,  11935., 5020.,  6412.,  7996.,  9772.,
      4093.,  5233.,  6517.,  7945.,  3084.,  4284.,  5676.,  7260.,  5840.,
      7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,
      11700., 14596., 7732.,  10116., 12820., 15844., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004.,
      3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580., 7597.,
      10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,  12305.,
      15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388.,
      15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,  8447.,
      6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8741.,
      11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,  12585.,
      16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,  11723.,
      14199., 3371.,  4823.,  6515.,  8447.,  6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8741.,  11513., 14685., 18257., 9373.,
      12305., 15637., 19369., 9493.,  12585., 16077., 19969., 7428.,  9748.,
      12388., 15348., 7491.,  9487.,  11723., 14199., 3371.,  4823.,  6515.,
      8447.,  6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8741.,  11513., 14685., 18257., 9373.,  12305., 15637., 19369., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 7491.,  9487.,
      11723., 14199., 3084.,  4284.,  5676.,  7260.,  5840.,  7696.,  9808.,
      12176., 6004.,  8132.,  10580., 13348., 6868.,  9124.,  11700., 14596.,
      7732.,  10116., 12820., 15844., 8596.,  11108., 13940., 17092., 5840.,
      7696.,  9808.,  12176., 5676.,  7260.,  9036.,  11004., 2341.,  3193.,
      4189.,  5329.,  4252.,  5644.,  7228.,  9004.,  4131.,  5743.,  7595.,
      9687.,  5099.,  6807.,  8755.,  10943., 6579.,  8383.,  10427., 12711.,
      6523.,  8423.,  10563., 12943., 3996.,  5388.,  6972.,  8748.,  4141.,
      5345.,  6693.,  8185.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,
      3842.,  1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,
      11048., 13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918.,
      13446., 15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,
      5994.,  2839.,  3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566.,
      13557., 15369., 17325., 19425., 17916., 20460., 23196., 26124., 17244.,
      19916., 22780., 25836., 14077., 16241., 18549., 21001., 7438.,  8902.,
      10462., 12118., 5327.,  6155.,  7031.,  7955.,  1572.,  2356.,  3204.,
      4116.,  5960.,  7528.,  9224.,  11048., 12844., 15452., 18252., 21244.,
      22544., 26192., 30096., 34256., 25616., 29264., 33168., 37328., 24140.,
      27132., 30316., 33692., 18120., 20200., 22408., 24744., 11332., 12500.,
      13732., 15028., 6788.,  7700.,  8676.,  9716.,  12808., 14632., 16584.,
      18664., 21836., 24828., 28012., 31388., 30096., 34256., 38672., 43344.,
      24784., 28688., 32848., 37264., 21164., 24284., 27596., 31100., 12488.,
      14568., 16776., 19112., 6628.,  7668.,  8772.,  9940.,  3591.,  4323.,
      5103.,  5931.,  9822.,  11222., 12718., 14310., 18245., 20505., 22909.,
      25457., 29244., 32556., 36060., 39756., 28380., 31564., 34940., 38508.,
      25165., 27777., 30533., 33433., 18222., 20070., 22014., 24054., 7167.,
      8059.,  8999.,  9987.,  3954.,  4474.,  5026.,  5610.,  5636.,  6548.,
      7524.,  8564.,  8566.,  9998.,  11526., 13150., 13000., 15080., 17288.,
      19624., 9224.,  11048., 13000., 15080., 9510.,  11006., 12598., 14286.,
      7524.,  8564.,  9668.,  10836., 3010.,  3466.,  3954.,  4474.,  2245.,
      2521.,  2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  10079., 11099.,
      12167., 13283., 15924., 17412., 18964., 20580., 14548., 15908., 17332.,
      18820., 11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,
      173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,   58.,
      162.,   298.,   466.,   287.,   539.,   839.,   1187.,  820.,   1284.,
      1812.,  2404.,  1684.,  2276.,  2932.,  3652.,  2423.,  2963.,  3551.,
      4187.,  2474.,  2898.,  3354.,  3842.,  1709.,  1953.,  2213.,  2489.,
      226.,   554.,   914.,   1306.,  1700.,  2484.,  3332.,  4244.,  4678.,
      6046.,  7510.,  9070.,  9224.,  11048., 13000., 15080., 11784., 13608.,
      15560., 17640., 10486., 11918., 13446., 15070., 6660.,  7572.,  8548.,
      9588.,  4338.,  4858.,  5410.,  5994.,  2839.,  3251.,  3711.,  4219.,
      7230.,  8246.,  9358.,  10566., 13557., 15369., 17325., 19425., 17916.,
      20460., 23196., 26124., 17244., 19916., 22780., 25836., 14077., 16241.,
      18549., 21001., 7438.,  8902.,  10462., 12118., 5327.,  6155.,  7031.,
      7955.,  1572.,  2356.,  3204.,  4116.,  5960.,  7528.,  9224.,  11048.,
      12844., 15452., 18252., 21244., 22544., 26192., 30096., 34256., 25616.,
      29264., 33168., 37328., 24140., 27132., 30316., 33692., 18120., 20200.,
      22408., 24744., 11332., 12500., 13732., 15028., 6788.,  7700.,  8676.,
      9716.,  12808., 14632., 16584., 18664., 21836., 24828., 28012., 31388.,
      30096., 34256., 38672., 43344., 24784., 28688., 32848., 37264., 21164.,
      24284., 27596., 31100., 12488., 14568., 16776., 19112., 6628.,  7668.,
      8772.,  9940.,  3591.,  4323.,  5103.,  5931.,  9822.,  11222., 12718.,
      14310., 18245., 20505., 22909., 25457., 29244., 32556., 36060., 39756.,
      28380., 31564., 34940., 38508., 25165., 27777., 30533., 33433., 18222.,
      20070., 22014., 24054., 7167.,  8059.,  8999.,  9987.,  3954.,  4474.,
      5026.,  5610.,  5636.,  6548.,  7524.,  8564.,  8566.,  9998.,  11526.,
      13150., 13000., 15080., 17288., 19624., 9224.,  11048., 13000., 15080.,
      9510.,  11006., 12598., 14286., 7524.,  8564.,  9668.,  10836., 3010.,
      3466.,  3954.,  4474.,  2245.,  2521.,  2813.,  3121.,  5562.,  6178.,
      6826.,  7506.,  10079., 11099., 12167., 13283., 15924., 17412., 18964.,
      20580., 14548., 15908., 17332., 18820., 11511., 12563., 13663., 14811.,
      6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,   5.,
      25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,   539.,
      839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,  2932.,
      3652.,  2423.,  2963.,  3551.,  4187.,  2474.,  2898.,  3354.,  3842.,
      1709.,  1953.,  2213.,  2489.,  226.,   554.,   914.,   1306.,  1700.,
      2484.,  3332.,  4244.,  4678.,  6046.,  7510.,  9070.,  9224.,  11048.,
      13000., 15080., 11784., 13608., 15560., 17640., 10486., 11918., 13446.,
      15070., 6660.,  7572.,  8548.,  9588.,  4338.,  4858.,  5410.,  5994.,
      2839.,  3251.,  3711.,  4219.,  7230.,  8246.,  9358.,  10566., 13557.,
      15369., 17325., 19425., 17916., 20460., 23196., 26124., 17244., 19916.,
      22780., 25836., 14077., 16241., 18549., 21001., 7438.,  8902.,  10462.,
      12118., 5327.,  6155.,  7031.,  7955.,  1572.,  2356.,  3204.,  4116.,
      5960.,  7528.,  9224.,  11048., 12844., 15452., 18252., 21244., 22544.,
      26192., 30096., 34256., 25616., 29264., 33168., 37328., 24140., 27132.,
      30316., 33692., 18120., 20200., 22408., 24744., 11332., 12500., 13732.,
      15028., 6788.,  7700.,  8676.,  9716.,  12808., 14632., 16584., 18664.,
      21836., 24828., 28012., 31388., 30096., 34256., 38672., 43344., 24784.,
      28688., 32848., 37264., 21164., 24284., 27596., 31100., 12488., 14568.,
      16776., 19112., 6628.,  7668.,  8772.,  9940.,  3591.,  4323.,  5103.,
      5931.,  9822.,  11222., 12718., 14310., 18245., 20505., 22909., 25457.,
      29244., 32556., 36060., 39756., 28380., 31564., 34940., 38508., 25165.,
      27777., 30533., 33433., 18222., 20070., 22014., 24054., 7167.,  8059.,
      8999.,  9987.,  3954.,  4474.,  5026.,  5610.,  5636.,  6548.,  7524.,
      8564.,  8566.,  9998.,  11526., 13150., 13000., 15080., 17288., 19624.,
      9224.,  11048., 13000., 15080., 9510.,  11006., 12598., 14286., 7524.,
      8564.,  9668.,  10836., 3010.,  3466.,  3954.,  4474.,  2245.,  2521.,
      2813.,  3121.,  5562.,  6178.,  6826.,  7506.,  10079., 11099., 12167.,
      13283., 15924., 17412., 18964., 20580., 14548., 15908., 17332., 18820.,
      11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,  173.,
      417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,
      12114., 19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264.,
      18776., 29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456.,
      39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,
      17944., 28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674.,
      17826., 26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078.,
      47710., 11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,
      13778., 22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536.,
      21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3438.,  6526.,  10766., 16158., 4328.,
      9128.,  15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338.,
      20514., 30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7576.,
      15064., 25112., 37720., 10264., 18776., 29848., 43480., 7576.,  15064.,
      25112., 37720., 10264., 18776., 29848., 43480., 7136.,  13536., 21984.,
      32480., 6696.,  12008., 18856., 27240., 5442.,  10674., 17826., 26898.,
      7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214., 21726.,
      35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210.,
      32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456.,
      39576., 10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,
      17944., 28504., 41624., 7266.,  13778., 22210., 32562., 4008.,  8296.,
      14120., 21480., 7136.,  13536., 21984., 32480., 7576.,  15064., 25112.,
      37720., 10264., 18776., 29848., 43480., 7576.,  15064., 25112., 37720.,
      10264., 18776., 29848., 43480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3438.,  6526.,  10766., 16158., 4328.,  9128.,
      15464., 23336., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514.,
      30610., 6626.,  12114., 19522., 28850., 6082.,  12338., 20514., 30610.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114.,
      19522., 28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 4008.,  8296.,  14120., 21480., 7136.,
      13536., 21984., 32480., 7576.,  15064., 25112., 37720., 10264., 18776.,
      29848., 43480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848.,
      43480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240.,
      5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414., 19646.,
      32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944., 28504.,
      41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826., 26898.,
      7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214., 21726.,
      35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778., 22210.,
      32562., 5442.,  10674., 17826., 26898., 7896.,  15896., 26456., 39576.,
      10414., 19646., 32078., 47710., 11214., 21726., 35438., 52350., 10414.,
      19646., 32078., 47710., 11214., 21726., 35438., 52350., 9944.,  17944.,
      28504., 41624., 7266.,  13778., 22210., 32562., 5442.,  10674., 17826.,
      26898., 7896.,  15896., 26456., 39576., 10414., 19646., 32078., 47710.,
      11214., 21726., 35438., 52350., 10414., 19646., 32078., 47710., 11214.,
      21726., 35438., 52350., 9944.,  17944., 28504., 41624., 7266.,  13778.,
      22210., 32562., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480.,
      7576.,  15064., 25112., 37720., 10264., 18776., 29848., 43480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6626.,  12114., 19522.,
      28850., 6082.,  12338., 20514., 30610., 6626.,  12114., 19522., 28850.,
      6082.,  12338., 20514., 30610., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,
      4572.,  190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,
      9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,
      5500.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,
      8756.,  12692., 1754.,  3210.,  5050.,  7274.,  440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,
      6768.,  10992., 16240., 3128.,  5240.,  7864.,  11000., 250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,
      5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,
      4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,
      8120.,  1564.,  2620.,  3932.,  5500.,  250.,   938.,   2010.,  3466.,
      2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,
      7274.,  440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992., 16240.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,
      11668., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,
      5588.,  8756.,  12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,
      1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,
      10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240.,
      3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,
      2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,   380.,   1180.,
      2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,  4472.,
      7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,
      13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,
      250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,
      12692., 1754.,  3210.,  5050.,  7274.,  440.,   1528.,  3128.,  5240.,
      3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,
      11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992., 16240.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 250.,   938.,   2010.,
      3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,
      8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240.,
      3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,
      3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  30.,    174.,
      446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,
      5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,  190.,
      590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}