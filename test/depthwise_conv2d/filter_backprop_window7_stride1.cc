/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using FilterBackpropWindow7Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 7, 1>;
TYPED_TEST_SUITE(FilterBackpropWindow7Stride1, GTestTypePairs);
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5580.,  6833.,  8120.,  9436.,  8288.,  7121.,  5940.,  6480.,  7950.,
      9464.,  11016., 9688.,  8334.,  6960.,  9420.,  11467., 13552., 15668.,
      13720., 11755., 9780.,  14080., 17000., 19936., 22880., 19936., 17000.,
      14080., 9780.,  11755., 13720., 15668., 13552., 11467., 9420.,  6960.,
      8334.,  9688.,  11016., 9464.,  7950.,  6480.,  5940.,  7121.,  8288.,
      9436.,  8120.,  6833.,  5580.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      72.,  82.,  92.,  102., 112., 122., 132., 152., 162., 172.,
      182., 192., 202., 212., 232., 242., 252., 262., 272., 282.,
      292., 312., 322., 332., 342., 352., 362., 372., 392., 402.,
      412., 422., 432., 442., 452., 472., 482., 492., 502., 512.,
      522., 532., 552., 562., 572., 582., 592., 602., 612.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5565.,  5880.,  6649.,  7042.,  7700.,  8176.,  8708.,  9272.,  7329.,
      7840.,  6013.,  6466.,  4770.,  5160.,  8110.,  8480.,  9678.,  10140.,
      11200., 11760., 12664., 13328., 10710., 11312., 8838.,  9372.,  7060.,
      7520.,  8775.,  9240.,  10451., 11030., 12068., 12768., 13612., 14440.,
      11459., 12208., 9407.,  10070., 7470.,  8040.,  12840., 13440., 15208.,
      15952., 17472., 18368., 19616., 20672., 16520., 17472., 13576., 14416.,
      10800., 11520., 9855.,  10440., 11555., 12278., 13132., 14000., 14572.,
      15592., 12075., 12992., 9743.,  10550., 7590.,  8280.,  11150., 11680.,
      13134., 13788., 15008., 15792., 16760., 17680., 14070., 14896., 11526.,
      12252., 9140.,  9760.,  6645.,  7080.,  7753.,  8290.,  8764.,  9408.,
      9668.,  10424., 7945.,  8624.,  6349.,  6946.,  4890.,  5400.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122., 144.,  138., 164.,  154., 184.,  170., 204.,  186., 224.,
      202., 244.,  218., 264.,  250., 304.,  266., 324.,  282., 344.,
      298., 364.,  314., 384.,  330., 404.,  346., 424.,  378., 464.,
      394., 484.,  410., 504.,  426., 524.,  442., 544.,  458., 564.,
      474., 584.,  506., 624.,  522., 644.,  538., 664.,  554., 684.,
      570., 704.,  586., 724.,  602., 744.,  634., 784.,  650., 804.,
      666., 824.,  682., 844.,  698., 864.,  714., 884.,  730., 904.,
      762., 944.,  778., 964.,  794., 984.,  810., 1004., 826., 1024.,
      842., 1044., 858., 1064., 890., 1104., 906., 1124., 922., 1144.,
      938., 1164., 954., 1184., 970., 1204., 986., 1224.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6815.,  7130.,  7445.,  7760.,  7817.,  8210.,  8603.,  8996.,  8652.,
      9128.,  9604.,  10080., 9300.,  9864.,  10428., 10992., 7203.,  7714.,
      8225.,  8736.,  5333.,  5786.,  6239.,  6692.,  3710.,  4100.,  4490.,
      4880.,  8010.,  8380.,  8750.,  9120.,  9198.,  9660.,  10122., 10584.,
      10192., 10752., 11312., 11872., 10968., 11632., 12296., 12960., 8498.,
      9100.,  9702.,  10304., 6294.,  6828.,  7362.,  7896.,  4380.,  4840.,
      5300.,  5760.,  10045., 10510., 10975., 11440., 11491., 12070., 12649.,
      13228., 12684., 13384., 14084., 14784., 13596., 14424., 15252., 16080.,
      10521., 11270., 12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,
      5980.,  6550.,  7120.,  12920., 13520., 14120., 14720., 14696., 15440.,
      16184., 16928., 16128., 17024., 17920., 18816., 17184., 18240., 19296.,
      20352., 13272., 14224., 15176., 16128., 9800.,  10640., 11480., 12320.,
      6800.,  7520.,  8240.,  8960.,  12565., 13150., 13735., 14320., 14227.,
      14950., 15673., 16396., 15540., 16408., 17276., 18144., 16476., 17496.,
      18516., 19536., 12705., 13622., 14539., 15456., 9367.,  10174., 10981.,
      11788., 6490.,  7180.,  7870.,  8560.,  11370., 11900., 12430., 12960.,
      12846., 13500., 14154., 14808., 14000., 14784., 15568., 16352., 14808.,
      15728., 16648., 17568., 11410., 12236., 13062., 13888., 8406.,  9132.,
      9858.,  10584., 5820.,  6440.,  7060.,  7680.,  9335.,  9770.,  10205.,
      10640., 10553., 11090., 11627., 12164., 11508., 12152., 12796., 13440.,
      12180., 12936., 13692., 14448., 9387.,  10066., 10745., 11424., 6917.,
      7514.,  8111.,  8708.,  4790.,  5300.,  5810.,  6320.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      222.,  244.,  266.,  288.,  250.,  276.,  302.,  328.,  278.,  308.,
      338.,  368.,  306.,  340.,  374.,  408.,  334.,  372.,  410.,  448.,
      362.,  404.,  446.,  488.,  390.,  436.,  482.,  528.,  446.,  500.,
      554.,  608.,  474.,  532.,  590.,  648.,  502.,  564.,  626.,  688.,
      530.,  596.,  662.,  728.,  558.,  628.,  698.,  768.,  586.,  660.,
      734.,  808.,  614.,  692.,  770.,  848.,  670.,  756.,  842.,  928.,
      698.,  788.,  878.,  968.,  726.,  820.,  914.,  1008., 754.,  852.,
      950.,  1048., 782.,  884.,  986.,  1088., 810.,  916.,  1022., 1128.,
      838.,  948.,  1058., 1168., 894.,  1012., 1130., 1248., 922.,  1044.,
      1166., 1288., 950.,  1076., 1202., 1328., 978.,  1108., 1238., 1368.,
      1006., 1140., 1274., 1408., 1034., 1172., 1310., 1448., 1062., 1204.,
      1346., 1488., 1118., 1268., 1418., 1568., 1146., 1300., 1454., 1608.,
      1174., 1332., 1490., 1648., 1202., 1364., 1526., 1688., 1230., 1396.,
      1562., 1728., 1258., 1428., 1598., 1768., 1286., 1460., 1634., 1808.,
      1342., 1524., 1706., 1888., 1370., 1556., 1742., 1928., 1398., 1588.,
      1778., 1968., 1426., 1620., 1814., 2008., 1454., 1652., 1850., 2048.,
      1482., 1684., 1886., 2088., 1510., 1716., 1922., 2128., 1566., 1780.,
      1994., 2208., 1594., 1812., 2030., 2248., 1622., 1844., 2066., 2288.,
      1650., 1876., 2102., 2328., 1678., 1908., 2138., 2368., 1706., 1940.,
      2174., 2408., 1734., 1972., 2210., 2448.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4535.,  5360.,  5798.,  6788.,  7133.,  8288.,  8520.,  9840.,  7357.,
      8512.,  6182.,  7172.,  5015.,  5840.,  9570.,  10560., 11796., 12984.,
      14070., 15456., 16368., 17952., 14070., 15456., 11796., 12984., 9570.,
      10560., 6445.,  7600.,  8194.,  9580.,  10031., 11648., 11928., 13776.,
      10255., 11872., 8578.,  9964.,  6925.,  8080.,  12760., 14080., 15728.,
      17312., 18760., 20608., 21824., 23936., 18760., 20608., 15728., 17312.,
      12760., 14080., 6925.,  8080.,  8578.,  9964.,  10255., 11872., 11928.,
      13776., 10031., 11648., 8194.,  9580.,  6445.,  7600.,  9570.,  10560.,
      11796., 12984., 14070., 15456., 16368., 17952., 14070., 15456., 11796.,
      12984., 9570.,  10560., 5015.,  5840.,  6182.,  7172.,  7357.,  8512.,
      8520.,  9840.,  7133.,  8288.,  5798.,  6788.,  4535.,  5360.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      228.,  288.,  260.,  328.,  292.,  368.,  324.,  408.,  356.,  448.,
      388.,  488.,  420.,  528.,  484.,  608.,  516.,  648.,  548.,  688.,
      580.,  728.,  612.,  768.,  644.,  808.,  676.,  848.,  740.,  928.,
      772.,  968.,  804.,  1008., 836.,  1048., 868.,  1088., 900.,  1128.,
      932.,  1168., 996.,  1248., 1028., 1288., 1060., 1328., 1092., 1368.,
      1124., 1408., 1156., 1448., 1188., 1488., 1252., 1568., 1284., 1608.,
      1316., 1648., 1348., 1688., 1380., 1728., 1412., 1768., 1444., 1808.,
      1508., 1888., 1540., 1928., 1572., 1968., 1604., 2008., 1636., 2048.,
      1668., 2088., 1700., 2128., 1764., 2208., 1796., 2248., 1828., 2288.,
      1860., 2328., 1892., 2368., 1924., 2408., 1956., 2448.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6385.,  6670.,  7530.,  7840.,  7768.,  8140.,  9142.,  9544.,  9093.,
      9562.,  10696., 11200., 10320., 10896., 12152., 12768., 8127.,  8666.,
      9730.,  10304., 6112.,  6604.,  7486.,  8008.,  4315.,  4750.,  5460.,
      5920.,  8670.,  9060.,  10140., 10560., 10416., 10920., 12180., 12720.,
      12054., 12684., 14112., 14784., 13536., 14304., 15888., 16704., 10626.,
      11340., 12684., 13440., 7968.,  8616.,  9732.,  10416., 5610.,  6180.,
      7080.,  7680.,  9275.,  9690.,  10910., 11360., 11240., 11780., 13202.,
      13784., 13111., 13790., 15400., 16128., 14832., 15664., 17448., 18336.,
      11669., 12446., 13958., 14784., 8768.,  9476.,  10730., 11480., 6185.,
      6810.,  7820.,  8480.,  11560., 12080., 13520., 14080., 13888., 14560.,
      16240., 16960., 16072., 16912., 18816., 19712., 18048., 19072., 21184.,
      22272., 14168., 15120., 16912., 17920., 10624., 11488., 12976., 13888.,
      7480.,  8240.,  9440.,  10240., 10955., 11450., 12750., 13280., 13064.,
      13700., 15218., 15896., 15015., 15806., 17528., 18368., 16752., 17712.,
      19624., 20640., 13125., 14014., 15638., 16576., 9824.,  10628., 11978.,
      12824., 6905.,  7610.,  8700.,  9440.,  8670.,  9060.,  10140., 10560.,
      10416., 10920., 12180., 12720., 12054., 12684., 14112., 14784., 13536.,
      14304., 15888., 16704., 10626., 11340., 12684., 13440., 7968.,  8616.,
      9732.,  10416., 5610.,  6180.,  7080.,  7680.,  8065.,  8430.,  9370.,
      9760.,  9592.,  10060., 11158., 11656., 10997., 11578., 12824., 13440.,
      12240., 12944., 14328., 15072., 9583.,  10234., 11410., 12096., 7168.,
      7756.,  8734.,  9352.,  5035.,  5550.,  6340.,  6880.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      416.,  456.,  532.,  576.,  472.,  520.,  604.,  656.,  528.,  584.,
      676.,  736.,  584.,  648.,  748.,  816.,  640.,  712.,  820.,  896.,
      696.,  776.,  892.,  976.,  752.,  840.,  964.,  1056., 864.,  968.,
      1108., 1216., 920.,  1032., 1180., 1296., 976.,  1096., 1252., 1376.,
      1032., 1160., 1324., 1456., 1088., 1224., 1396., 1536., 1144., 1288.,
      1468., 1616., 1200., 1352., 1540., 1696., 1312., 1480., 1684., 1856.,
      1368., 1544., 1756., 1936., 1424., 1608., 1828., 2016., 1480., 1672.,
      1900., 2096., 1536., 1736., 1972., 2176., 1592., 1800., 2044., 2256.,
      1648., 1864., 2116., 2336., 1760., 1992., 2260., 2496., 1816., 2056.,
      2332., 2576., 1872., 2120., 2404., 2656., 1928., 2184., 2476., 2736.,
      1984., 2248., 2548., 2816., 2040., 2312., 2620., 2896., 2096., 2376.,
      2692., 2976., 2208., 2504., 2836., 3136., 2264., 2568., 2908., 3216.,
      2320., 2632., 2980., 3296., 2376., 2696., 3052., 3376., 2432., 2760.,
      3124., 3456., 2488., 2824., 3196., 3536., 2544., 2888., 3268., 3616.,
      2656., 3016., 3412., 3776., 2712., 3080., 3484., 3856., 2768., 3144.,
      3556., 3936., 2824., 3208., 3628., 4016., 2880., 3272., 3700., 4096.,
      2936., 3336., 3772., 4176., 2992., 3400., 3844., 4256., 3104., 3528.,
      3988., 4416., 3160., 3592., 4060., 4496., 3216., 3656., 4132., 4576.,
      3272., 3720., 4204., 4656., 3328., 3784., 4276., 4736., 3384., 3848.,
      4348., 4816., 3440., 3912., 4420., 4896.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4549.,  4834.,  5119.,  5404.,  6174.,  6484.,  6794.,  7104.,  5948.,
      6320.,  6692.,  7064.,  8026.,  8428.,  8830.,  9232.,  7221.,  7690.,
      8159.,  8628.,  9752.,  10256., 10760., 11264., 8288.,  8864.,  9440.,
      10016., 11272., 11888., 12504., 13120., 6403.,  6942.,  7481.,  8020.,
      9094.,  9668.,  10242., 10816., 5204.,  5696.,  6188.,  6680.,  7602.,
      8124.,  8646.,  9168.,  4771.,  5206.,  5641.,  6076.,  6876.,  7336.,
      7796.,  8256.,  6198.,  6588.,  6978.,  7368.,  8340.,  8760.,  9180.,
      9600.,  8040.,  8544.,  9048.,  9552.,  10764., 11304., 11844., 12384.,
      9654.,  10284., 10914., 11544., 12960., 13632., 14304., 14976., 10944.,
      11712., 12480., 13248., 14832., 15648., 16464., 17280., 8442.,  9156.,
      9870.,  10584., 11940., 12696., 13452., 14208., 6840.,  7488.,  8136.,
      8784.,  9948.,  10632., 11316., 12000., 6234.,  6804.,  7374.,  7944.,
      8952.,  9552.,  10152., 10752., 6615.,  7030.,  7445.,  7860.,  8954.,
      9404.,  9854.,  10304., 8628.,  9168.,  9708.,  10248., 11614., 12196.,
      12778., 13360., 10439., 11118., 11797., 12476., 14072., 14800., 15528.,
      16256., 11936., 12768., 13600., 14432., 16216., 17104., 17992., 18880.,
      9217.,  9994.,  10771., 11548., 13074., 13900., 14726., 15552., 7484.,
      8192.,  8900.,  9608.,  10918., 11668., 12418., 13168., 6849.,  7474.,
      8099.,  8724.,  9860.,  10520., 11180., 11840., 8264.,  8784.,  9304.,
      9824.,  11120., 11680., 12240., 12800., 10720., 11392., 12064., 12736.,
      14352., 15072., 15792., 16512., 12872., 13712., 14552., 15392., 17280.,
      18176., 19072., 19968., 14592., 15616., 16640., 17664., 19776., 20864.,
      21952., 23040., 11256., 12208., 13160., 14112., 15920., 16928., 17936.,
      18944., 9120.,  9984.,  10848., 11712., 13264., 14176., 15088., 16000.,
      8312.,  9072.,  9832.,  10592., 11936., 12736., 13536., 14336., 7847.,
      8342.,  8837.,  9332.,  10506., 11036., 11566., 12096., 10132., 10768.,
      11404., 12040., 13502., 14180., 14858., 15536., 12087., 12878., 13669.,
      14460., 16168., 17008., 17848., 18688., 13600., 14560., 15520., 16480.,
      18392., 19408., 20424., 21440., 10481., 11370., 12259., 13148., 14786.,
      15724., 16662., 17600., 8476.,  9280.,  10084., 10888., 12294., 13140.,
      13986., 14832., 7697.,  8402.,  9107.,  9812.,  11028., 11768., 12508.,
      13248., 6198.,  6588.,  6978.,  7368.,  8340.,  8760.,  9180.,  9600.,
      8040.,  8544.,  9048.,  9552.,  10764., 11304., 11844., 12384., 9654.,
      10284., 10914., 11544., 12960., 13632., 14304., 14976., 10944., 11712.,
      12480., 13248., 14832., 15648., 16464., 17280., 8442.,  9156.,  9870.,
      10584., 11940., 12696., 13452., 14208., 6840.,  7488.,  8136.,  8784.,
      9948.,  10632., 11316., 12000., 6234.,  6804.,  7374.,  7944.,  8952.,
      9552.,  10152., 10752., 5781.,  6146.,  6511.,  6876.,  7726.,  8116.,
      8506.,  8896.,  7452.,  7920.,  8388.,  8856.,  9914.,  10412., 10910.,
      11408., 8869.,  9450.,  10031., 10612., 11848., 12464., 13080., 13696.,
      9952.,  10656., 11360., 12064., 13448., 14192., 14936., 15680., 7667.,
      8318.,  8969.,  9620.,  10806., 11492., 12178., 12864., 6196.,  6784.,
      7372.,  7960.,  8978.,  9596.,  10214., 10832., 5619.,  6134.,  6649.,
      7164.,  8044.,  8584.,  9124.,  9664.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      792.,  832.,  872.,  912.,  1020., 1064., 1108., 1152., 896.,  944.,
      992.,  1040., 1156., 1208., 1260., 1312., 1000., 1056., 1112., 1168.,
      1292., 1352., 1412., 1472., 1104., 1168., 1232., 1296., 1428., 1496.,
      1564., 1632., 1208., 1280., 1352., 1424., 1564., 1640., 1716., 1792.,
      1312., 1392., 1472., 1552., 1700., 1784., 1868., 1952., 1416., 1504.,
      1592., 1680., 1836., 1928., 2020., 2112., 1624., 1728., 1832., 1936.,
      2108., 2216., 2324., 2432., 1728., 1840., 1952., 2064., 2244., 2360.,
      2476., 2592., 1832., 1952., 2072., 2192., 2380., 2504., 2628., 2752.,
      1936., 2064., 2192., 2320., 2516., 2648., 2780., 2912., 2040., 2176.,
      2312., 2448., 2652., 2792., 2932., 3072., 2144., 2288., 2432., 2576.,
      2788., 2936., 3084., 3232., 2248., 2400., 2552., 2704., 2924., 3080.,
      3236., 3392., 2456., 2624., 2792., 2960., 3196., 3368., 3540., 3712.,
      2560., 2736., 2912., 3088., 3332., 3512., 3692., 3872., 2664., 2848.,
      3032., 3216., 3468., 3656., 3844., 4032., 2768., 2960., 3152., 3344.,
      3604., 3800., 3996., 4192., 2872., 3072., 3272., 3472., 3740., 3944.,
      4148., 4352., 2976., 3184., 3392., 3600., 3876., 4088., 4300., 4512.,
      3080., 3296., 3512., 3728., 4012., 4232., 4452., 4672., 3288., 3520.,
      3752., 3984., 4284., 4520., 4756., 4992., 3392., 3632., 3872., 4112.,
      4420., 4664., 4908., 5152., 3496., 3744., 3992., 4240., 4556., 4808.,
      5060., 5312., 3600., 3856., 4112., 4368., 4692., 4952., 5212., 5472.,
      3704., 3968., 4232., 4496., 4828., 5096., 5364., 5632., 3808., 4080.,
      4352., 4624., 4964., 5240., 5516., 5792., 3912., 4192., 4472., 4752.,
      5100., 5384., 5668., 5952., 4120., 4416., 4712., 5008., 5372., 5672.,
      5972., 6272., 4224., 4528., 4832., 5136., 5508., 5816., 6124., 6432.,
      4328., 4640., 4952., 5264., 5644., 5960., 6276., 6592., 4432., 4752.,
      5072., 5392., 5780., 6104., 6428., 6752., 4536., 4864., 5192., 5520.,
      5916., 6248., 6580., 6912., 4640., 4976., 5312., 5648., 6052., 6392.,
      6732., 7072., 4744., 5088., 5432., 5776., 6188., 6536., 6884., 7232.,
      4952., 5312., 5672., 6032., 6460., 6824., 7188., 7552., 5056., 5424.,
      5792., 6160., 6596., 6968., 7340., 7712., 5160., 5536., 5912., 6288.,
      6732., 7112., 7492., 7872., 5264., 5648., 6032., 6416., 6868., 7256.,
      7644., 8032., 5368., 5760., 6152., 6544., 7004., 7400., 7796., 8192.,
      5472., 5872., 6272., 6672., 7140., 7544., 7948., 8352., 5576., 5984.,
      6392., 6800., 7276., 7688., 8100., 8512., 5784., 6208., 6632., 7056.,
      7548., 7976., 8404., 8832., 5888., 6320., 6752., 7184., 7684., 8120.,
      8556., 8992., 5992., 6432., 6872., 7312., 7820., 8264., 8708., 9152.,
      6096., 6544., 6992., 7440., 7956., 8408., 8860., 9312., 6200., 6656.,
      7112., 7568., 8092., 8552., 9012., 9472., 6304., 6768., 7232., 7696.,
      8228., 8696., 9164., 9632., 6408., 6880., 7352., 7824., 8364., 8840.,
      9316., 9792.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5525.,  6300.,  7125.,  8000.,  7670.,  8600.,  9590.,  10640., 9975.,
      11060., 12215., 13440., 12360., 13600., 14920., 16320., 9975.,  11060.,
      12215., 13440., 7670.,  8600.,  9590.,  10640., 5525.,  6300.,  7125.,
      8000.,  6630.,  7560.,  8550.,  9600.,  9204.,  10320., 11508., 12768.,
      11970., 13272., 14658., 16128., 14832., 16320., 17904., 19584., 11970.,
      13272., 14658., 16128., 9204.,  10320., 11508., 12768., 6630.,  7560.,
      8550.,  9600.,  7735.,  8820.,  9975.,  11200., 10738., 12040., 13426.,
      14896., 13965., 15484., 17101., 18816., 17304., 19040., 20888., 22848.,
      13965., 15484., 17101., 18816., 10738., 12040., 13426., 14896., 7735.,
      8820.,  9975.,  11200., 8840.,  10080., 11400., 12800., 12272., 13760.,
      15344., 17024., 15960., 17696., 19544., 21504., 19776., 21760., 23872.,
      26112., 15960., 17696., 19544., 21504., 12272., 13760., 15344., 17024.,
      8840.,  10080., 11400., 12800., 7735.,  8820.,  9975.,  11200., 10738.,
      12040., 13426., 14896., 13965., 15484., 17101., 18816., 17304., 19040.,
      20888., 22848., 13965., 15484., 17101., 18816., 10738., 12040., 13426.,
      14896., 7735.,  8820.,  9975.,  11200., 6630.,  7560.,  8550.,  9600.,
      9204.,  10320., 11508., 12768., 11970., 13272., 14658., 16128., 14832.,
      16320., 17904., 19584., 11970., 13272., 14658., 16128., 9204.,  10320.,
      11508., 12768., 6630.,  7560.,  8550.,  9600.,  5525.,  6300.,  7125.,
      8000.,  7670.,  8600.,  9590.,  10640., 9975.,  11060., 12215., 13440.,
      12360., 13600., 14920., 16320., 9975.,  11060., 12215., 13440., 7670.,
      8600.,  9590.,  10640., 5525.,  6300.,  7125.,  8000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      804.,  912.,  1028., 1152., 916.,  1040., 1172., 1312., 1028., 1168.,
      1316., 1472., 1140., 1296., 1460., 1632., 1252., 1424., 1604., 1792.,
      1364., 1552., 1748., 1952., 1476., 1680., 1892., 2112., 1700., 1936.,
      2180., 2432., 1812., 2064., 2324., 2592., 1924., 2192., 2468., 2752.,
      2036., 2320., 2612., 2912., 2148., 2448., 2756., 3072., 2260., 2576.,
      2900., 3232., 2372., 2704., 3044., 3392., 2596., 2960., 3332., 3712.,
      2708., 3088., 3476., 3872., 2820., 3216., 3620., 4032., 2932., 3344.,
      3764., 4192., 3044., 3472., 3908., 4352., 3156., 3600., 4052., 4512.,
      3268., 3728., 4196., 4672., 3492., 3984., 4484., 4992., 3604., 4112.,
      4628., 5152., 3716., 4240., 4772., 5312., 3828., 4368., 4916., 5472.,
      3940., 4496., 5060., 5632., 4052., 4624., 5204., 5792., 4164., 4752.,
      5348., 5952., 4388., 5008., 5636., 6272., 4500., 5136., 5780., 6432.,
      4612., 5264., 5924., 6592., 4724., 5392., 6068., 6752., 4836., 5520.,
      6212., 6912., 4948., 5648., 6356., 7072., 5060., 5776., 6500., 7232.,
      5284., 6032., 6788., 7552., 5396., 6160., 6932., 7712., 5508., 6288.,
      7076., 7872., 5620., 6416., 7220., 8032., 5732., 6544., 7364., 8192.,
      5844., 6672., 7508., 8352., 5956., 6800., 7652., 8512., 6180., 7056.,
      7940., 8832., 6292., 7184., 8084., 8992., 6404., 7312., 8228., 9152.,
      6516., 7440., 8372., 9312., 6628., 7568., 8516., 9472., 6740., 7696.,
      8660., 9632., 6852., 7824., 8804., 9792.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3785.,  4010.,  4670.,  4920.,  5655.,  5930.,  6740.,  7040.,  5410.,
      5740.,  6600.,  6960.,  7910.,  8300.,  9340.,  9760.,  7335.,  7790.,
      8830.,  9320.,  10465., 10990., 12240., 12800., 9400.,  10000., 11200.,
      11840., 13160., 13840., 15280., 16000., 7355.,  7950.,  9010.,  9640.,
      10805., 11470., 12740., 13440., 6130.,  6700.,  7640.,  8240.,  9270.,
      9900.,  11020., 11680., 5885.,  6410.,  7250.,  7800.,  8715.,  9290.,
      10280., 10880., 4542.,  4812.,  5604.,  5904.,  6786.,  7116.,  8088.,
      8448.,  6492.,  6888.,  7920.,  8352.,  9492.,  9960.,  11208., 11712.,
      8802.,  9348.,  10596., 11184., 12558., 13188., 14688., 15360., 11280.,
      12000., 13440., 14208., 15792., 16608., 18336., 19200., 8826.,  9540.,
      10812., 11568., 12966., 13764., 15288., 16128., 7356.,  8040.,  9168.,
      9888.,  11124., 11880., 13224., 14016., 7062.,  7692.,  8700.,  9360.,
      10458., 11148., 12336., 13056., 5299.,  5614.,  6538.,  6888.,  7917.,
      8302.,  9436.,  9856.,  7574.,  8036.,  9240.,  9744.,  11074., 11620.,
      13076., 13664., 10269., 10906., 12362., 13048., 14651., 15386., 17136.,
      17920., 13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400.,
      10297., 11130., 12614., 13496., 15127., 16058., 17836., 18816., 8582.,
      9380.,  10696., 11536., 12978., 13860., 15428., 16352., 8239.,  8974.,
      10150., 10920., 12201., 13006., 14392., 15232., 6056.,  6416.,  7472.,
      7872.,  9048.,  9488.,  10784., 11264., 8656.,  9184.,  10560., 11136.,
      12656., 13280., 14944., 15616., 11736., 12464., 14128., 14912., 16744.,
      17584., 19584., 20480., 15040., 16000., 17920., 18944., 21056., 22144.,
      24448., 25600., 11768., 12720., 14416., 15424., 17288., 18352., 20384.,
      21504., 9808.,  10720., 12224., 13184., 14832., 15840., 17632., 18688.,
      9416.,  10256., 11600., 12480., 13944., 14864., 16448., 17408., 5299.,
      5614.,  6538.,  6888.,  7917.,  8302.,  9436.,  9856.,  7574.,  8036.,
      9240.,  9744.,  11074., 11620., 13076., 13664., 10269., 10906., 12362.,
      13048., 14651., 15386., 17136., 17920., 13160., 14000., 15680., 16576.,
      18424., 19376., 21392., 22400., 10297., 11130., 12614., 13496., 15127.,
      16058., 17836., 18816., 8582.,  9380.,  10696., 11536., 12978., 13860.,
      15428., 16352., 8239.,  8974.,  10150., 10920., 12201., 13006., 14392.,
      15232., 4542.,  4812.,  5604.,  5904.,  6786.,  7116.,  8088.,  8448.,
      6492.,  6888.,  7920.,  8352.,  9492.,  9960.,  11208., 11712., 8802.,
      9348.,  10596., 11184., 12558., 13188., 14688., 15360., 11280., 12000.,
      13440., 14208., 15792., 16608., 18336., 19200., 8826.,  9540.,  10812.,
      11568., 12966., 13764., 15288., 16128., 7356.,  8040.,  9168.,  9888.,
      11124., 11880., 13224., 14016., 7062.,  7692.,  8700.,  9360.,  10458.,
      11148., 12336., 13056., 3785.,  4010.,  4670.,  4920.,  5655.,  5930.,
      6740.,  7040.,  5410.,  5740.,  6600.,  6960.,  7910.,  8300.,  9340.,
      9760.,  7335.,  7790.,  8830.,  9320.,  10465., 10990., 12240., 12800.,
      9400.,  10000., 11200., 11840., 13160., 13840., 15280., 16000., 7355.,
      7950.,  9010.,  9640.,  10805., 11470., 12740., 13440., 6130.,  6700.,
      7640.,  8240.,  9270.,  9900.,  11020., 11680., 5885.,  6410.,  7250.,
      7800.,  8715.,  9290.,  10280., 10880.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1532.,  1608.,  1744.,  1824.,  1972.,  2056.,  2216.,  2304.,  1740.,
      1832.,  1984.,  2080.,  2244.,  2344.,  2520.,  2624.,  1948.,  2056.,
      2224.,  2336.,  2516.,  2632.,  2824.,  2944.,  2156.,  2280.,  2464.,
      2592.,  2788.,  2920.,  3128.,  3264.,  2364.,  2504.,  2704.,  2848.,
      3060.,  3208.,  3432.,  3584.,  2572.,  2728.,  2944.,  3104.,  3332.,
      3496.,  3736.,  3904.,  2780.,  2952.,  3184.,  3360.,  3604.,  3784.,
      4040.,  4224.,  3196.,  3400.,  3664.,  3872.,  4148.,  4360.,  4648.,
      4864.,  3404.,  3624.,  3904.,  4128.,  4420.,  4648.,  4952.,  5184.,
      3612.,  3848.,  4144.,  4384.,  4692.,  4936.,  5256.,  5504.,  3820.,
      4072.,  4384.,  4640.,  4964.,  5224.,  5560.,  5824.,  4028.,  4296.,
      4624.,  4896.,  5236.,  5512.,  5864.,  6144.,  4236.,  4520.,  4864.,
      5152.,  5508.,  5800.,  6168.,  6464.,  4444.,  4744.,  5104.,  5408.,
      5780.,  6088.,  6472.,  6784.,  4860.,  5192.,  5584.,  5920.,  6324.,
      6664.,  7080.,  7424.,  5068.,  5416.,  5824.,  6176.,  6596.,  6952.,
      7384.,  7744.,  5276.,  5640.,  6064.,  6432.,  6868.,  7240.,  7688.,
      8064.,  5484.,  5864.,  6304.,  6688.,  7140.,  7528.,  7992.,  8384.,
      5692.,  6088.,  6544.,  6944.,  7412.,  7816.,  8296.,  8704.,  5900.,
      6312.,  6784.,  7200.,  7684.,  8104.,  8600.,  9024.,  6108.,  6536.,
      7024.,  7456.,  7956.,  8392.,  8904.,  9344.,  6524.,  6984.,  7504.,
      7968.,  8500.,  8968.,  9512.,  9984.,  6732.,  7208.,  7744.,  8224.,
      8772.,  9256.,  9816.,  10304., 6940.,  7432.,  7984.,  8480.,  9044.,
      9544.,  10120., 10624., 7148.,  7656.,  8224.,  8736.,  9316.,  9832.,
      10424., 10944., 7356.,  7880.,  8464.,  8992.,  9588.,  10120., 10728.,
      11264., 7564.,  8104.,  8704.,  9248.,  9860.,  10408., 11032., 11584.,
      7772.,  8328.,  8944.,  9504.,  10132., 10696., 11336., 11904., 8188.,
      8776.,  9424.,  10016., 10676., 11272., 11944., 12544., 8396.,  9000.,
      9664.,  10272., 10948., 11560., 12248., 12864., 8604.,  9224.,  9904.,
      10528., 11220., 11848., 12552., 13184., 8812.,  9448.,  10144., 10784.,
      11492., 12136., 12856., 13504., 9020.,  9672.,  10384., 11040., 11764.,
      12424., 13160., 13824., 9228.,  9896.,  10624., 11296., 12036., 12712.,
      13464., 14144., 9436.,  10120., 10864., 11552., 12308., 13000., 13768.,
      14464., 9852.,  10568., 11344., 12064., 12852., 13576., 14376., 15104.,
      10060., 10792., 11584., 12320., 13124., 13864., 14680., 15424., 10268.,
      11016., 11824., 12576., 13396., 14152., 14984., 15744., 10476., 11240.,
      12064., 12832., 13668., 14440., 15288., 16064., 10684., 11464., 12304.,
      13088., 13940., 14728., 15592., 16384., 10892., 11688., 12544., 13344.,
      14212., 15016., 15896., 16704., 11100., 11912., 12784., 13600., 14484.,
      15304., 16200., 17024., 11516., 12360., 13264., 14112., 15028., 15880.,
      16808., 17664., 11724., 12584., 13504., 14368., 15300., 16168., 17112.,
      17984., 11932., 12808., 13744., 14624., 15572., 16456., 17416., 18304.,
      12140., 13032., 13984., 14880., 15844., 16744., 17720., 18624., 12348.,
      13256., 14224., 15136., 16116., 17032., 18024., 18944., 12556., 13480.,
      14464., 15392., 16388., 17320., 18328., 19264., 12764., 13704., 14704.,
      15648., 16660., 17608., 18632., 19584.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2385.,  2610.,  2835.,  3060.,  3650.,  3900.,  4150.,  4400.,  5115.,
      5390.,  5665.,  5940.,  6780.,  7080.,  7380.,  7680.,  3450.,  3780.,
      4110.,  4440.,  5160.,  5520.,  5880.,  6240.,  7110.,  7500.,  7890.,
      8280.,  9300.,  9720.,  10140., 10560., 4615.,  5070.,  5525.,  5980.,
      6930.,  7420.,  7910.,  8400.,  9525.,  10050., 10575., 11100., 12400.,
      12960., 13520., 14080., 6040.,  6640.,  7240.,  7840.,  8960.,  9600.,
      10240., 10880., 12200., 12880., 13560., 14240., 15760., 16480., 17200.,
      17920., 4675.,  5270.,  5865.,  6460.,  7470.,  8100.,  8730.,  9360.,
      10545., 11210., 11875., 12540., 13900., 14600., 15300., 16000., 5610.,
      6180.,  6750.,  7320.,  8280.,  8880.,  9480.,  10080., 11190., 11820.,
      12450., 13080., 14340., 15000., 15660., 16320., 3885.,  4410.,  4935.,
      5460.,  6270.,  6820.,  7370.,  7920.,  8855.,  9430.,  10005., 10580.,
      11640., 12240., 12840., 13440., 2862.,  3132.,  3402.,  3672.,  4380.,
      4680.,  4980.,  5280.,  6138.,  6468.,  6798.,  7128.,  8136.,  8496.,
      8856.,  9216.,  4140.,  4536.,  4932.,  5328.,  6192.,  6624.,  7056.,
      7488.,  8532.,  9000.,  9468.,  9936.,  11160., 11664., 12168., 12672.,
      5538.,  6084.,  6630.,  7176.,  8316.,  8904.,  9492.,  10080., 11430.,
      12060., 12690., 13320., 14880., 15552., 16224., 16896., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 5610.,  6324.,  7038.,  7752.,
      8964.,  9720.,  10476., 11232., 12654., 13452., 14250., 15048., 16680.,
      17520., 18360., 19200., 6732.,  7416.,  8100.,  8784.,  9936.,  10656.,
      11376., 12096., 13428., 14184., 14940., 15696., 17208., 18000., 18792.,
      19584., 4662.,  5292.,  5922.,  6552.,  7524.,  8184.,  8844.,  9504.,
      10626., 11316., 12006., 12696., 13968., 14688., 15408., 16128., 3339.,
      3654.,  3969.,  4284.,  5110.,  5460.,  5810.,  6160.,  7161.,  7546.,
      7931.,  8316.,  9492.,  9912.,  10332., 10752., 4830.,  5292.,  5754.,
      6216.,  7224.,  7728.,  8232.,  8736.,  9954.,  10500., 11046., 11592.,
      13020., 13608., 14196., 14784., 6461.,  7098.,  7735.,  8372.,  9702.,
      10388., 11074., 11760., 13335., 14070., 14805., 15540., 17360., 18144.,
      18928., 19712., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      6545.,  7378.,  8211.,  9044.,  10458., 11340., 12222., 13104., 14763.,
      15694., 16625., 17556., 19460., 20440., 21420., 22400., 7854.,  8652.,
      9450.,  10248., 11592., 12432., 13272., 14112., 15666., 16548., 17430.,
      18312., 20076., 21000., 21924., 22848., 5439.,  6174.,  6909.,  7644.,
      8778.,  9548.,  10318., 11088., 12397., 13202., 14007., 14812., 16296.,
      17136., 17976., 18816., 3816.,  4176.,  4536.,  4896.,  5840.,  6240.,
      6640.,  7040.,  8184.,  8624.,  9064.,  9504.,  10848., 11328., 11808.,
      12288., 5520.,  6048.,  6576.,  7104.,  8256.,  8832.,  9408.,  9984.,
      11376., 12000., 12624., 13248., 14880., 15552., 16224., 16896., 7384.,
      8112.,  8840.,  9568.,  11088., 11872., 12656., 13440., 15240., 16080.,
      16920., 17760., 19840., 20736., 21632., 22528., 9664.,  10624., 11584.,
      12544., 14336., 15360., 16384., 17408., 19520., 20608., 21696., 22784.,
      25216., 26368., 27520., 28672., 7480.,  8432.,  9384.,  10336., 11952.,
      12960., 13968., 14976., 16872., 17936., 19000., 20064., 22240., 23360.,
      24480., 25600., 8976.,  9888.,  10800., 11712., 13248., 14208., 15168.,
      16128., 17904., 18912., 19920., 20928., 22944., 24000., 25056., 26112.,
      6216.,  7056.,  7896.,  8736.,  10032., 10912., 11792., 12672., 14168.,
      15088., 16008., 16928., 18624., 19584., 20544., 21504., 3339.,  3654.,
      3969.,  4284.,  5110.,  5460.,  5810.,  6160.,  7161.,  7546.,  7931.,
      8316.,  9492.,  9912.,  10332., 10752., 4830.,  5292.,  5754.,  6216.,
      7224.,  7728.,  8232.,  8736.,  9954.,  10500., 11046., 11592., 13020.,
      13608., 14196., 14784., 6461.,  7098.,  7735.,  8372.,  9702.,  10388.,
      11074., 11760., 13335., 14070., 14805., 15540., 17360., 18144., 18928.,
      19712., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232.,
      17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088., 6545.,
      7378.,  8211.,  9044.,  10458., 11340., 12222., 13104., 14763., 15694.,
      16625., 17556., 19460., 20440., 21420., 22400., 7854.,  8652.,  9450.,
      10248., 11592., 12432., 13272., 14112., 15666., 16548., 17430., 18312.,
      20076., 21000., 21924., 22848., 5439.,  6174.,  6909.,  7644.,  8778.,
      9548.,  10318., 11088., 12397., 13202., 14007., 14812., 16296., 17136.,
      17976., 18816., 2862.,  3132.,  3402.,  3672.,  4380.,  4680.,  4980.,
      5280.,  6138.,  6468.,  6798.,  7128.,  8136.,  8496.,  8856.,  9216.,
      4140.,  4536.,  4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,
      9000.,  9468.,  9936.,  11160., 11664., 12168., 12672., 5538.,  6084.,
      6630.,  7176.,  8316.,  8904.,  9492.,  10080., 11430., 12060., 12690.,
      13320., 14880., 15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 5610.,  6324.,  7038.,  7752.,  8964.,  9720.,
      10476., 11232., 12654., 13452., 14250., 15048., 16680., 17520., 18360.,
      19200., 6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096.,
      13428., 14184., 14940., 15696., 17208., 18000., 18792., 19584., 4662.,
      5292.,  5922.,  6552.,  7524.,  8184.,  8844.,  9504.,  10626., 11316.,
      12006., 12696., 13968., 14688., 15408., 16128., 2385.,  2610.,  2835.,
      3060.,  3650.,  3900.,  4150.,  4400.,  5115.,  5390.,  5665.,  5940.,
      6780.,  7080.,  7380.,  7680.,  3450.,  3780.,  4110.,  4440.,  5160.,
      5520.,  5880.,  6240.,  7110.,  7500.,  7890.,  8280.,  9300.,  9720.,
      10140., 10560., 4615.,  5070.,  5525.,  5980.,  6930.,  7420.,  7910.,
      8400.,  9525.,  10050., 10575., 11100., 12400., 12960., 13520., 14080.,
      6040.,  6640.,  7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200.,
      12880., 13560., 14240., 15760., 16480., 17200., 17920., 4675.,  5270.,
      5865.,  6460.,  7470.,  8100.,  8730.,  9360.,  10545., 11210., 11875.,
      12540., 13900., 14600., 15300., 16000., 5610.,  6180.,  6750.,  7320.,
      8280.,  8880.,  9480.,  10080., 11190., 11820., 12450., 13080., 14340.,
      15000., 15660., 16320., 3885.,  4410.,  4935.,  5460.,  6270.,  6820.,
      7370.,  7920.,  8855.,  9430.,  10005., 10580., 11640., 12240., 12840.,
      13440.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2988.,  3064.,  3140.,  3216.,  3408.,  3488.,  3568.,  3648.,  3860.,
      3944.,  4028.,  4112.,  4344.,  4432.,  4520.,  4608.,  3388.,  3480.,
      3572.,  3664.,  3872.,  3968.,  4064.,  4160.,  4388.,  4488.,  4588.,
      4688.,  4936.,  5040.,  5144.,  5248.,  3788.,  3896.,  4004.,  4112.,
      4336.,  4448.,  4560.,  4672.,  4916.,  5032.,  5148.,  5264.,  5528.,
      5648.,  5768.,  5888.,  4188.,  4312.,  4436.,  4560.,  4800.,  4928.,
      5056.,  5184.,  5444.,  5576.,  5708.,  5840.,  6120.,  6256.,  6392.,
      6528.,  4588.,  4728.,  4868.,  5008.,  5264.,  5408.,  5552.,  5696.,
      5972.,  6120.,  6268.,  6416.,  6712.,  6864.,  7016.,  7168.,  4988.,
      5144.,  5300.,  5456.,  5728.,  5888.,  6048.,  6208.,  6500.,  6664.,
      6828.,  6992.,  7304.,  7472.,  7640.,  7808.,  5388.,  5560.,  5732.,
      5904.,  6192.,  6368.,  6544.,  6720.,  7028.,  7208.,  7388.,  7568.,
      7896.,  8080.,  8264.,  8448.,  6188.,  6392.,  6596.,  6800.,  7120.,
      7328.,  7536.,  7744.,  8084.,  8296.,  8508.,  8720.,  9080.,  9296.,
      9512.,  9728.,  6588.,  6808.,  7028.,  7248.,  7584.,  7808.,  8032.,
      8256.,  8612.,  8840.,  9068.,  9296.,  9672.,  9904.,  10136., 10368.,
      6988.,  7224.,  7460.,  7696.,  8048.,  8288.,  8528.,  8768.,  9140.,
      9384.,  9628.,  9872.,  10264., 10512., 10760., 11008., 7388.,  7640.,
      7892.,  8144.,  8512.,  8768.,  9024.,  9280.,  9668.,  9928.,  10188.,
      10448., 10856., 11120., 11384., 11648., 7788.,  8056.,  8324.,  8592.,
      8976.,  9248.,  9520.,  9792.,  10196., 10472., 10748., 11024., 11448.,
      11728., 12008., 12288., 8188.,  8472.,  8756.,  9040.,  9440.,  9728.,
      10016., 10304., 10724., 11016., 11308., 11600., 12040., 12336., 12632.,
      12928., 8588.,  8888.,  9188.,  9488.,  9904.,  10208., 10512., 10816.,
      11252., 11560., 11868., 12176., 12632., 12944., 13256., 13568., 9388.,
      9720.,  10052., 10384., 10832., 11168., 11504., 11840., 12308., 12648.,
      12988., 13328., 13816., 14160., 14504., 14848., 9788.,  10136., 10484.,
      10832., 11296., 11648., 12000., 12352., 12836., 13192., 13548., 13904.,
      14408., 14768., 15128., 15488., 10188., 10552., 10916., 11280., 11760.,
      12128., 12496., 12864., 13364., 13736., 14108., 14480., 15000., 15376.,
      15752., 16128., 10588., 10968., 11348., 11728., 12224., 12608., 12992.,
      13376., 13892., 14280., 14668., 15056., 15592., 15984., 16376., 16768.,
      10988., 11384., 11780., 12176., 12688., 13088., 13488., 13888., 14420.,
      14824., 15228., 15632., 16184., 16592., 17000., 17408., 11388., 11800.,
      12212., 12624., 13152., 13568., 13984., 14400., 14948., 15368., 15788.,
      16208., 16776., 17200., 17624., 18048., 11788., 12216., 12644., 13072.,
      13616., 14048., 14480., 14912., 15476., 15912., 16348., 16784., 17368.,
      17808., 18248., 18688., 12588., 13048., 13508., 13968., 14544., 15008.,
      15472., 15936., 16532., 17000., 17468., 17936., 18552., 19024., 19496.,
      19968., 12988., 13464., 13940., 14416., 15008., 15488., 15968., 16448.,
      17060., 17544., 18028., 18512., 19144., 19632., 20120., 20608., 13388.,
      13880., 14372., 14864., 15472., 15968., 16464., 16960., 17588., 18088.,
      18588., 19088., 19736., 20240., 20744., 21248., 13788., 14296., 14804.,
      15312., 15936., 16448., 16960., 17472., 18116., 18632., 19148., 19664.,
      20328., 20848., 21368., 21888., 14188., 14712., 15236., 15760., 16400.,
      16928., 17456., 17984., 18644., 19176., 19708., 20240., 20920., 21456.,
      21992., 22528., 14588., 15128., 15668., 16208., 16864., 17408., 17952.,
      18496., 19172., 19720., 20268., 20816., 21512., 22064., 22616., 23168.,
      14988., 15544., 16100., 16656., 17328., 17888., 18448., 19008., 19700.,
      20264., 20828., 21392., 22104., 22672., 23240., 23808., 15788., 16376.,
      16964., 17552., 18256., 18848., 19440., 20032., 20756., 21352., 21948.,
      22544., 23288., 23888., 24488., 25088., 16188., 16792., 17396., 18000.,
      18720., 19328., 19936., 20544., 21284., 21896., 22508., 23120., 23880.,
      24496., 25112., 25728., 16588., 17208., 17828., 18448., 19184., 19808.,
      20432., 21056., 21812., 22440., 23068., 23696., 24472., 25104., 25736.,
      26368., 16988., 17624., 18260., 18896., 19648., 20288., 20928., 21568.,
      22340., 22984., 23628., 24272., 25064., 25712., 26360., 27008., 17388.,
      18040., 18692., 19344., 20112., 20768., 21424., 22080., 22868., 23528.,
      24188., 24848., 25656., 26320., 26984., 27648., 17788., 18456., 19124.,
      19792., 20576., 21248., 21920., 22592., 23396., 24072., 24748., 25424.,
      26248., 26928., 27608., 28288., 18188., 18872., 19556., 20240., 21040.,
      21728., 22416., 23104., 23924., 24616., 25308., 26000., 26840., 27536.,
      28232., 28928., 18988., 19704., 20420., 21136., 21968., 22688., 23408.,
      24128., 24980., 25704., 26428., 27152., 28024., 28752., 29480., 30208.,
      19388., 20120., 20852., 21584., 22432., 23168., 23904., 24640., 25508.,
      26248., 26988., 27728., 28616., 29360., 30104., 30848., 19788., 20536.,
      21284., 22032., 22896., 23648., 24400., 25152., 26036., 26792., 27548.,
      28304., 29208., 29968., 30728., 31488., 20188., 20952., 21716., 22480.,
      23360., 24128., 24896., 25664., 26564., 27336., 28108., 28880., 29800.,
      30576., 31352., 32128., 20588., 21368., 22148., 22928., 23824., 24608.,
      25392., 26176., 27092., 27880., 28668., 29456., 30392., 31184., 31976.,
      32768., 20988., 21784., 22580., 23376., 24288., 25088., 25888., 26688.,
      27620., 28424., 29228., 30032., 30984., 31792., 32600., 33408., 21388.,
      22200., 23012., 23824., 24752., 25568., 26384., 27200., 28148., 28968.,
      29788., 30608., 31576., 32400., 33224., 34048., 22188., 23032., 23876.,
      24720., 25680., 26528., 27376., 28224., 29204., 30056., 30908., 31760.,
      32760., 33616., 34472., 35328., 22588., 23448., 24308., 25168., 26144.,
      27008., 27872., 28736., 29732., 30600., 31468., 32336., 33352., 34224.,
      35096., 35968., 22988., 23864., 24740., 25616., 26608., 27488., 28368.,
      29248., 30260., 31144., 32028., 32912., 33944., 34832., 35720., 36608.,
      23388., 24280., 25172., 26064., 27072., 27968., 28864., 29760., 30788.,
      31688., 32588., 33488., 34536., 35440., 36344., 37248., 23788., 24696.,
      25604., 26512., 27536., 28448., 29360., 30272., 31316., 32232., 33148.,
      34064., 35128., 36048., 36968., 37888., 24188., 25112., 26036., 26960.,
      28000., 28928., 29856., 30784., 31844., 32776., 33708., 34640., 35720.,
      36656., 37592., 38528., 24588., 25528., 26468., 27408., 28464., 29408.,
      30352., 31296., 32372., 33320., 34268., 35216., 36312., 37264., 38216.,
      39168.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7989.,  8600.,  9260.,  10124., 8804.,  7514.,  6259.,  7450.,  8437.,
      9480.,  11021., 9928.,  8861.,  7826.,  9773.,  11550., 13372., 15968.,
      14580., 13232., 11931., 13512., 16316., 19168., 23084., 19168., 16316.,
      13512., 11931., 13232., 14580., 15968., 13372., 11550., 9773.,  7826.,
      8861.,  9928.,  11021., 9480.,  8437.,  7450.,  6259.,  7514.,  8804.,
      10124., 9260.,  8600.,  7989.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181.,  202.,  223.,  244.,  265.,  286.,  307.,  370.,  391.,  412.,
      433.,  454.,  475.,  496.,  559.,  580.,  601.,  622.,  643.,  664.,
      685.,  748.,  769.,  790.,  811.,  832.,  853.,  874.,  937.,  958.,
      979.,  1000., 1021., 1042., 1063., 1126., 1147., 1168., 1189., 1210.,
      1231., 1252., 1315., 1336., 1357., 1378., 1399., 1420., 1441.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6501.,  6922.,  7310.,  7792.,  8148.,  8696.,  9165.,  9784.,  7996.,
      8552.,  6956.,  7444.,  6055.,  6470.,  6764.,  7284.,  8529.,  9130.,
      10304., 10992., 12525., 13306., 11408., 12112., 10445., 11066., 8624.,
      9156.,  10265., 10938., 11629., 12412., 12980., 13880., 15040., 16064.,
      13452., 14376., 12079., 12896., 10615., 11318., 11360., 12080., 13908.,
      14744., 16448., 17408., 19988., 21080., 16576., 17536., 14372., 15224.,
      11792., 12528., 10075., 10774., 11832., 12640., 13580., 14504., 15305.,
      16352., 13668., 14584., 12658., 13468., 10977., 11674., 10100., 10724.,
      13005., 13722., 13856., 14672., 14689., 15610., 11920., 12720., 10217.,
      10922., 8568.,  9172.,  6743.,  7238.,  7681.,  8244.,  8620.,  9256.,
      9550.,  10264., 8596.,  9208.,  8087.,  8624.,  7297.,  7754.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      323.,  362.,  359.,  404.,  395.,  446.,  431.,  488.,  467.,  530.,
      503.,  572.,  539.,  614.,  647.,  740.,  683.,  782.,  719.,  824.,
      755.,  866.,  791.,  908.,  827.,  950.,  863.,  992.,  971.,  1118.,
      1007., 1160., 1043., 1202., 1079., 1244., 1115., 1286., 1151., 1328.,
      1187., 1370., 1295., 1496., 1331., 1538., 1367., 1580., 1403., 1622.,
      1439., 1664., 1475., 1706., 1511., 1748., 1619., 1874., 1655., 1916.,
      1691., 1958., 1727., 2000., 1763., 2042., 1799., 2084., 1835., 2126.,
      1943., 2252., 1979., 2294., 2015., 2336., 2051., 2378., 2087., 2420.,
      2123., 2462., 2159., 2504., 2267., 2630., 2303., 2672., 2339., 2714.,
      2375., 2756., 2411., 2798., 2447., 2840., 2483., 2882.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5573.,  5994.,  6415.,  6836.,  6202.,  6684.,  7166.,  7648.,  7684.,
      8232.,  8780.,  9328.,  9295.,  9914.,  10533., 11152., 8140.,  8696.,
      9252.,  9808.,  7312.,  7800.,  8288.,  8776.,  6831.,  7246.,  7661.,
      8076.,  6896.,  7416.,  7936.,  8456.,  8457.,  9058.,  9659.,  10260.,
      10096., 10784., 11472., 12160., 12109., 12890., 13671., 14452., 10848.,
      11552., 12256., 12960., 9997.,  10618., 11239., 11860., 8556.,  9088.,
      9620.,  10152., 9841.,  10514., 11187., 11860., 11595., 12378., 13161.,
      13944., 13636., 14536., 15436., 16336., 16256., 17280., 18304., 19328.,
      14716., 15640., 16564., 17488., 12685., 13502., 14319., 15136., 10895.,
      11598., 12301., 13004., 10128., 10848., 11568., 12288., 12036., 12872.,
      13708., 14544., 14528., 15488., 16448., 17408., 17892., 18984., 20076.,
      21168., 14912., 15872., 16832., 17792., 13108., 13960., 14812., 15664.,
      11264., 12000., 12736., 13472., 9723.,  10422., 11121., 11820., 11976.,
      12784., 13592., 14400., 15100., 16024., 16948., 17872., 16027., 17074.,
      18121., 19168., 13684., 14600., 15516., 16432., 12090., 12900., 13710.,
      14520., 10153., 10850., 11547., 12244., 9080.,  9704.,  10328., 10952.,
      11949., 12666., 13383., 14100., 12656., 13472., 14288., 15104., 13225.,
      14146., 15067., 15988., 11456., 12256., 13056., 13856., 9969.,  10674.,
      11379., 12084., 8820.,  9424.,  10028., 10632., 8415.,  8910.,  9405.,
      9900.,  8847.,  9410.,  9973.,  10536., 9212.,  9848.,  10484., 11120.,
      9490.,  10204., 10918., 11632., 8196.,  8808.,  9420.,  10032., 7701.,
      8238.,  8775.,  9312.,  7161.,  7618.,  8075.,  8532.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      607.,  646.,  685.,  724.,  673.,  718.,  763.,  808.,  739.,  790.,
      841.,  892.,  805.,  862.,  919.,  976.,  871.,  934.,  997.,  1060.,
      937.,  1006., 1075., 1144., 1003., 1078., 1153., 1228., 1201., 1294.,
      1387., 1480., 1267., 1366., 1465., 1564., 1333., 1438., 1543., 1648.,
      1399., 1510., 1621., 1732., 1465., 1582., 1699., 1816., 1531., 1654.,
      1777., 1900., 1597., 1726., 1855., 1984., 1795., 1942., 2089., 2236.,
      1861., 2014., 2167., 2320., 1927., 2086., 2245., 2404., 1993., 2158.,
      2323., 2488., 2059., 2230., 2401., 2572., 2125., 2302., 2479., 2656.,
      2191., 2374., 2557., 2740., 2389., 2590., 2791., 2992., 2455., 2662.,
      2869., 3076., 2521., 2734., 2947., 3160., 2587., 2806., 3025., 3244.,
      2653., 2878., 3103., 3328., 2719., 2950., 3181., 3412., 2785., 3022.,
      3259., 3496., 2983., 3238., 3493., 3748., 3049., 3310., 3571., 3832.,
      3115., 3382., 3649., 3916., 3181., 3454., 3727., 4000., 3247., 3526.,
      3805., 4084., 3313., 3598., 3883., 4168., 3379., 3670., 3961., 4252.,
      3577., 3886., 4195., 4504., 3643., 3958., 4273., 4588., 3709., 4030.,
      4351., 4672., 3775., 4102., 4429., 4756., 3841., 4174., 4507., 4840.,
      3907., 4246., 4585., 4924., 3973., 4318., 4663., 5008., 4171., 4534.,
      4897., 5260., 4237., 4606., 4975., 5344., 4303., 4678., 5053., 5428.,
      4369., 4750., 5131., 5512., 4435., 4822., 5209., 5596., 4501., 4894.,
      5287., 5680., 4567., 4966., 5365., 5764.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7734.,  8660.,  8589.,  9696.,  8776.,  10032., 9427.,  10864., 8328.,
      9616.,  7349.,  8488.,  6510.,  7500.,  7108.,  8232.,  9130.,  10452.,
      11088., 12576., 14110., 15796., 13392., 14880., 12842., 14132., 9412.,
      10504., 9898.,  11252., 11127., 12728., 11864., 13680., 13233., 15296.,
      11928., 13776., 10847., 12480., 9410.,  10796., 11088., 12576., 14424.,
      16176., 17856., 19840., 22504., 24752., 17856., 19840., 14424., 16176.,
      11088., 12576., 9410.,  10796., 10847., 12480., 11928., 13776., 13233.,
      15296., 11864., 13680., 11127., 12728., 9898.,  11252., 9412.,  10504.,
      12842., 14132., 13392., 14880., 14110., 15796., 11088., 12576., 9130.,
      10452., 7108.,  8232.,  6510.,  7500.,  7349.,  8488.,  8328.,  9616.,
      9427.,  10864., 8776.,  10032., 8589.,  9696.,  7734.,  8660.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      610.,  724.,  682.,  808.,  754.,  892.,  826.,  976.,  898.,  1060.,
      970.,  1144., 1042., 1228., 1258., 1480., 1330., 1564., 1402., 1648.,
      1474., 1732., 1546., 1816., 1618., 1900., 1690., 1984., 1906., 2236.,
      1978., 2320., 2050., 2404., 2122., 2488., 2194., 2572., 2266., 2656.,
      2338., 2740., 2554., 2992., 2626., 3076., 2698., 3160., 2770., 3244.,
      2842., 3328., 2914., 3412., 2986., 3496., 3202., 3748., 3274., 3832.,
      3346., 3916., 3418., 4000., 3490., 4084., 3562., 4168., 3634., 4252.,
      3850., 4504., 3922., 4588., 3994., 4672., 4066., 4756., 4138., 4840.,
      4210., 4924., 4282., 5008., 4498., 5260., 4570., 5344., 4642., 5428.,
      4714., 5512., 4786., 5596., 4858., 5680., 4930., 5764.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6528.,  6988.,  7934.,  8424.,  7417.,  7962.,  9084.,  9664.,  8560.,
      9168.,  10456., 11104., 10205., 10886., 12362., 13088., 9216.,  9840.,
      11144., 11808., 8605.,  9162.,  10304., 10896., 8412.,  8892.,  9882.,
      10392., 7068.,  7624.,  8768.,  9360.,  8364.,  9012.,  10358., 11048.,
      9648.,  10368., 11904., 12672., 12056., 12860., 14606., 15464., 11376.,
      12096., 13632., 14400., 11236., 11860., 13198., 13864., 8612.,  9128.,
      10280., 10832., 8956.,  9620.,  10982., 11688., 10721., 11502., 13106.,
      13936., 13152., 14032., 15864., 16800., 16225., 17218., 19296., 20352.,
      15664., 16560., 18408., 19360., 12685., 13470., 15102., 15936., 9808.,
      10468., 11866., 12568., 9648.,  10368., 11904., 12672., 12224., 13072.,
      14872., 15776., 15168., 16128., 18176., 19200., 19344., 20432., 22744.,
      23904., 15424., 16384., 18432., 19456., 12544., 13392., 15192., 16096.,
      10224., 10944., 12480., 13248., 9592.,  10276., 11650., 12376., 12223.,
      13022., 14640., 15488., 15920., 16816., 18664., 19616., 15763., 16770.,
      18834., 19904., 12576., 13456., 15288., 16224., 10731., 11502., 13116.,
      13936., 8844.,  9492.,  10870., 11560., 8012.,  8552.,  9680.,  10256.,
      11236., 11860., 13198., 13864., 11568., 12288., 13824., 14592., 12032.,
      12860., 14582., 15464., 10224., 10944., 12480., 13248., 8956.,  9588.,
      10950., 11624., 7988.,  8520.,  9688.,  10256., 8988.,  9468.,  10458.,
      10968., 8935.,  9482.,  10634., 11216., 9024.,  9648.,  10952., 11616.,
      9215.,  9926.,  11372., 12128., 7920.,  8528.,  9816.,  10464., 7435.,
      7962.,  9102.,  9664.,  6616.,  7052.,  8022.,  8488.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1148.,  1220.,  1370.,  1448.,  1280.,  1364.,  1526.,  1616.,  1412.,
      1508.,  1682.,  1784.,  1544.,  1652.,  1838.,  1952.,  1676.,  1796.,
      1994.,  2120.,  1808.,  1940.,  2150.,  2288.,  1940.,  2084.,  2306.,
      2456.,  2336.,  2516.,  2774.,  2960.,  2468.,  2660.,  2930.,  3128.,
      2600.,  2804.,  3086.,  3296.,  2732.,  2948.,  3242.,  3464.,  2864.,
      3092.,  3398.,  3632.,  2996.,  3236.,  3554.,  3800.,  3128.,  3380.,
      3710.,  3968.,  3524.,  3812.,  4178.,  4472.,  3656.,  3956.,  4334.,
      4640.,  3788.,  4100.,  4490.,  4808.,  3920.,  4244.,  4646.,  4976.,
      4052.,  4388.,  4802.,  5144.,  4184.,  4532.,  4958.,  5312.,  4316.,
      4676.,  5114.,  5480.,  4712.,  5108.,  5582.,  5984.,  4844.,  5252.,
      5738.,  6152.,  4976.,  5396.,  5894.,  6320.,  5108.,  5540.,  6050.,
      6488.,  5240.,  5684.,  6206.,  6656.,  5372.,  5828.,  6362.,  6824.,
      5504.,  5972.,  6518.,  6992.,  5900.,  6404.,  6986.,  7496.,  6032.,
      6548.,  7142.,  7664.,  6164.,  6692.,  7298.,  7832.,  6296.,  6836.,
      7454.,  8000.,  6428.,  6980.,  7610.,  8168.,  6560.,  7124.,  7766.,
      8336.,  6692.,  7268.,  7922.,  8504.,  7088.,  7700.,  8390.,  9008.,
      7220.,  7844.,  8546.,  9176.,  7352.,  7988.,  8702.,  9344.,  7484.,
      8132.,  8858.,  9512.,  7616.,  8276.,  9014.,  9680.,  7748.,  8420.,
      9170.,  9848.,  7880.,  8564.,  9326.,  10016., 8276.,  8996.,  9794.,
      10520., 8408.,  9140.,  9950.,  10688., 8540.,  9284.,  10106., 10856.,
      8672.,  9428.,  10262., 11024., 8804.,  9572.,  10418., 11192., 8936.,
      9716.,  10574., 11360., 9068.,  9860.,  10730., 11528.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6036.,  6496.,  6956.,  7416.,  8402.,  8892.,  9382.,  9872.,  7121.,
      7666.,  8211.,  8756.,  9908.,  10488., 11068., 11648., 8832.,  9440.,
      10048., 10656., 11944., 12592., 13240., 13888., 8977.,  9658.,  10339.,
      11020., 12478., 13204., 13930., 14656., 7568.,  8192.,  8816.,  9440.,
      10744., 11408., 12072., 12736., 7021.,  7578.,  8135.,  8692.,  9840.,
      10432., 11024., 11616., 6776.,  7256.,  7736.,  8216.,  9206.,  9716.,
      10226., 10736., 7436.,  7992.,  8548.,  9104.,  10288., 10880., 11472.,
      12064., 9424.,  10072., 10720., 11368., 12730., 13420., 14110., 14800.,
      8848.,  9568.,  10288., 11008., 12544., 13312., 14080., 14848., 9996.,
      10800., 11604., 12408., 14146., 15004., 15862., 16720., 9232.,  9952.,
      10672., 11392., 12928., 13696., 14464., 15232., 9080.,  9704.,  10328.,
      10952., 12290., 12956., 13622., 14288., 6948.,  7464.,  7980.,  8496.,
      9640.,  10192., 10744., 11296., 9568.,  10232., 10896., 11560., 12938.,
      13644., 14350., 15056., 9909.,  10690., 11471., 12252., 13862., 14692.,
      15522., 16352., 11088., 11968., 12848., 13728., 15560., 16496., 17432.,
      18368., 13025., 14018., 15011., 16004., 18080., 19136., 20192., 21248.,
      12512., 13408., 14304., 15200., 17048., 18000., 18952., 19904., 10217.,
      11002., 11787., 12572., 14202., 15036., 15870., 16704., 8076.,  8736.,
      9396.,  10056., 11446., 12148., 12850., 13552., 8848.,  9568.,  10288.,
      11008., 12544., 13312., 14080., 14848., 10288., 11136., 11984., 12832.,
      14632., 15536., 16440., 17344., 11968., 12928., 13888., 14848., 16896.,
      17920., 18944., 19968., 15584., 16672., 17760., 18848., 21160., 22320.,
      23480., 24640., 12480., 13440., 14400., 15360., 17408., 18432., 19456.,
      20480., 10416., 11264., 12112., 12960., 14760., 15664., 16568., 17472.,
      9488.,  10208., 10928., 11648., 13184., 13952., 14720., 15488., 8260.,
      8944.,  9628.,  10312., 11694., 12420., 13146., 13872., 9823.,  10622.,
      11421., 12220., 13840., 14688., 15536., 16384., 13024., 13920., 14816.,
      15712., 17560., 18512., 19464., 20416., 12631., 13638., 14645., 15652.,
      17718., 18788., 19858., 20928., 10448., 11328., 12208., 13088., 14920.,
      15856., 16792., 17728., 9843.,  10614., 11385., 12156., 13764., 14584.,
      15404., 16224., 9104.,  9752.,  10400., 11048., 12410., 13100., 13790.,
      14480., 6364.,  6904.,  7444.,  7984.,  9120.,  9696.,  10272., 10848.,
      9080.,  9704.,  10328., 10952., 12290., 12956., 13622., 14288., 9104.,
      9824.,  10544., 11264., 12800., 13568., 14336., 15104., 10052., 10880.,
      11708., 12536., 14266., 15148., 16030., 16912., 9488.,  10208., 10928.,
      11648., 13184., 13952., 14720., 15488., 8832.,  9464.,  10096., 10728.,
      12074., 12748., 13422., 14096., 6612.,  7144.,  7676.,  8208.,  9336.,
      9904.,  10472., 11040., 7416.,  7896.,  8376.,  8856.,  9846.,  10356.,
      10866., 11376., 7083.,  7630.,  8177.,  8724.,  9870.,  10452., 11034.,
      11616., 7696.,  8320.,  8944.,  9568.,  10872., 11536., 12200., 12864.,
      8791.,  9502.,  10213., 10924., 12388., 13144., 13900., 14656., 8576.,
      9184.,  9792.,  10400., 11688., 12336., 12984., 13632., 6695.,  7222.,
      7749.,  8276.,  9386.,  9948.,  10510., 11072., 5084.,  5520.,  5956.,
      6392.,  7322.,  7788.,  8254.,  8720.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2224.,  2296.,  2368.,  2440.,  2662.,  2740.,  2818.,  2896.,  2476.,
      2560.,  2644.,  2728.,  2962.,  3052.,  3142.,  3232.,  2728.,  2824.,
      2920.,  3016.,  3262.,  3364.,  3466.,  3568.,  2980.,  3088.,  3196.,
      3304.,  3562.,  3676.,  3790.,  3904.,  3232.,  3352.,  3472.,  3592.,
      3862.,  3988.,  4114.,  4240.,  3484.,  3616.,  3748.,  3880.,  4162.,
      4300.,  4438.,  4576.,  3736.,  3880.,  4024.,  4168.,  4462.,  4612.,
      4762.,  4912.,  4492.,  4672.,  4852.,  5032.,  5362.,  5548.,  5734.,
      5920.,  4744.,  4936.,  5128.,  5320.,  5662.,  5860.,  6058.,  6256.,
      4996.,  5200.,  5404.,  5608.,  5962.,  6172.,  6382.,  6592.,  5248.,
      5464.,  5680.,  5896.,  6262.,  6484.,  6706.,  6928.,  5500.,  5728.,
      5956.,  6184.,  6562.,  6796.,  7030.,  7264.,  5752.,  5992.,  6232.,
      6472.,  6862.,  7108.,  7354.,  7600.,  6004.,  6256.,  6508.,  6760.,
      7162.,  7420.,  7678.,  7936.,  6760.,  7048.,  7336.,  7624.,  8062.,
      8356.,  8650.,  8944.,  7012.,  7312.,  7612.,  7912.,  8362.,  8668.,
      8974.,  9280.,  7264.,  7576.,  7888.,  8200.,  8662.,  8980.,  9298.,
      9616.,  7516.,  7840.,  8164.,  8488.,  8962.,  9292.,  9622.,  9952.,
      7768.,  8104.,  8440.,  8776.,  9262.,  9604.,  9946.,  10288., 8020.,
      8368.,  8716.,  9064.,  9562.,  9916.,  10270., 10624., 8272.,  8632.,
      8992.,  9352.,  9862.,  10228., 10594., 10960., 9028.,  9424.,  9820.,
      10216., 10762., 11164., 11566., 11968., 9280.,  9688.,  10096., 10504.,
      11062., 11476., 11890., 12304., 9532.,  9952.,  10372., 10792., 11362.,
      11788., 12214., 12640., 9784.,  10216., 10648., 11080., 11662., 12100.,
      12538., 12976., 10036., 10480., 10924., 11368., 11962., 12412., 12862.,
      13312., 10288., 10744., 11200., 11656., 12262., 12724., 13186., 13648.,
      10540., 11008., 11476., 11944., 12562., 13036., 13510., 13984., 11296.,
      11800., 12304., 12808., 13462., 13972., 14482., 14992., 11548., 12064.,
      12580., 13096., 13762., 14284., 14806., 15328., 11800., 12328., 12856.,
      13384., 14062., 14596., 15130., 15664., 12052., 12592., 13132., 13672.,
      14362., 14908., 15454., 16000., 12304., 12856., 13408., 13960., 14662.,
      15220., 15778., 16336., 12556., 13120., 13684., 14248., 14962., 15532.,
      16102., 16672., 12808., 13384., 13960., 14536., 15262., 15844., 16426.,
      17008., 13564., 14176., 14788., 15400., 16162., 16780., 17398., 18016.,
      13816., 14440., 15064., 15688., 16462., 17092., 17722., 18352., 14068.,
      14704., 15340., 15976., 16762., 17404., 18046., 18688., 14320., 14968.,
      15616., 16264., 17062., 17716., 18370., 19024., 14572., 15232., 15892.,
      16552., 17362., 18028., 18694., 19360., 14824., 15496., 16168., 16840.,
      17662., 18340., 19018., 19696., 15076., 15760., 16444., 17128., 17962.,
      18652., 19342., 20032., 15832., 16552., 17272., 17992., 18862., 19588.,
      20314., 21040., 16084., 16816., 17548., 18280., 19162., 19900., 20638.,
      21376., 16336., 17080., 17824., 18568., 19462., 20212., 20962., 21712.,
      16588., 17344., 18100., 18856., 19762., 20524., 21286., 22048., 16840.,
      17608., 18376., 19144., 20062., 20836., 21610., 22384., 17092., 17872.,
      18652., 19432., 20362., 21148., 21934., 22720., 17344., 18136., 18928.,
      19720., 20662., 21460., 22258., 23056.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6454.,  7384.,  8374.,  9424.,  6647.,  7732.,  8887.,  10112., 7240.,
      8480.,  9800.,  11200., 8665.,  10060., 11545., 13120., 8520.,  9760.,
      11080., 12480., 8855.,  9940.,  11095., 12320., 9750.,  10680., 11670.,
      12720., 6836.,  7952.,  9140.,  10400., 7570.,  8872.,  10258., 11728.,
      9072.,  10560., 12144., 13824., 11758., 13432., 15214., 17104., 12144.,
      13632., 15216., 16896., 13202., 14504., 15890., 17360., 8884.,  10000.,
      11188., 12448., 7570.,  8872.,  10258., 11728., 9197.,  10716., 12333.,
      14048., 11928., 13664., 15512., 17472., 16163., 18116., 20195., 22400.,
      17304., 19040., 20888., 22848., 12173., 13692., 15309., 17024., 8690.,
      9992.,  11378., 12848., 9072.,  10560., 12144., 13824., 11928., 13664.,
      15512., 17472., 16192., 18176., 20288., 22528., 22248., 24480., 26856.,
      29376., 16192., 18176., 20288., 22528., 11928., 13664., 15512., 17472.,
      9072.,  10560., 12144., 13824., 8690.,  9992.,  11378., 12848., 12173.,
      13692., 15309., 17024., 17304., 19040., 20888., 22848., 16163., 18116.,
      20195., 22400., 11928., 13664., 15512., 17472., 9197.,  10716., 12333.,
      14048., 7570.,  8872.,  10258., 11728., 8884.,  10000., 11188., 12448.,
      13202., 14504., 15890., 17360., 12144., 13632., 15216., 16896., 11758.,
      13432., 15214., 17104., 9072.,  10560., 12144., 13824., 7570.,  8872.,
      10258., 11728., 6836.,  7952.,  9140.,  10400., 9750.,  10680., 11670.,
      12720., 8855.,  9940.,  11095., 12320., 8520.,  9760.,  11080., 12480.,
      8665.,  10060., 11545., 13120., 7240.,  8480.,  9800.,  11200., 6647.,
      7732.,  8887.,  10112., 6454.,  7384.,  8374.,  9424.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2230.,  2440.,  2662.,  2896.,  2494.,  2728.,  2974.,  3232.,  2758.,
      3016.,  3286.,  3568.,  3022.,  3304.,  3598.,  3904.,  3286.,  3592.,
      3910.,  4240.,  3550.,  3880.,  4222.,  4576.,  3814.,  4168.,  4534.,
      4912.,  4606.,  5032.,  5470.,  5920.,  4870.,  5320.,  5782.,  6256.,
      5134.,  5608.,  6094.,  6592.,  5398.,  5896.,  6406.,  6928.,  5662.,
      6184.,  6718.,  7264.,  5926.,  6472.,  7030.,  7600.,  6190.,  6760.,
      7342.,  7936.,  6982.,  7624.,  8278.,  8944.,  7246.,  7912.,  8590.,
      9280.,  7510.,  8200.,  8902.,  9616.,  7774.,  8488.,  9214.,  9952.,
      8038.,  8776.,  9526.,  10288., 8302.,  9064.,  9838.,  10624., 8566.,
      9352.,  10150., 10960., 9358.,  10216., 11086., 11968., 9622.,  10504.,
      11398., 12304., 9886.,  10792., 11710., 12640., 10150., 11080., 12022.,
      12976., 10414., 11368., 12334., 13312., 10678., 11656., 12646., 13648.,
      10942., 11944., 12958., 13984., 11734., 12808., 13894., 14992., 11998.,
      13096., 14206., 15328., 12262., 13384., 14518., 15664., 12526., 13672.,
      14830., 16000., 12790., 13960., 15142., 16336., 13054., 14248., 15454.,
      16672., 13318., 14536., 15766., 17008., 14110., 15400., 16702., 18016.,
      14374., 15688., 17014., 18352., 14638., 15976., 17326., 18688., 14902.,
      16264., 17638., 19024., 15166., 16552., 17950., 19360., 15430., 16840.,
      18262., 19696., 15694., 17128., 18574., 20032., 16486., 17992., 19510.,
      21040., 16750., 18280., 19822., 21376., 17014., 18568., 20134., 21712.,
      17278., 18856., 20446., 22048., 17542., 19144., 20758., 22384., 17806.,
      19432., 21070., 22720., 18070., 19720., 21382., 23056.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5874.,  6348.,  7288.,  7792.,  8822.,  9356.,  10476., 11040., 7119.,
      7662.,  8742.,  9320.,  10505., 11118., 12408., 13056., 9400.,  10000.,
      11200., 11840., 13160., 13840., 15280., 16000., 8237.,  8882.,  10214.,
      10904., 12371., 13106., 14708., 15488., 6840.,  7440.,  8640.,  9280.,
      10600., 11280., 12720., 13440., 6647.,  7182.,  8238.,  8808.,  9969.,
      10574., 11840., 12480., 7562.,  8012.,  8912.,  9392.,  10382., 10892.,
      11972., 12512., 7476.,  8040.,  9160.,  9760.,  10988., 11624., 12960.,
      13632., 10014., 10660., 11936., 12624., 14026., 14756., 16284., 17056.,
      8976.,  9696.,  11136., 11904., 13488., 14304., 16032., 16896., 9290.,
      10076., 11688., 12528., 14302., 15196., 17132., 18080., 8976.,  9696.,
      11136., 11904., 13488., 14304., 16032., 16896., 10126., 10756., 12016.,
      12688., 14074., 14788., 16300., 17056., 6532.,  7048.,  8120.,  8672.,
      9852.,  10440., 11728., 12352., 10014., 10660., 11936., 12624., 14026.,
      14756., 16284., 17056., 9201.,  9946.,  11422., 12216., 13839., 14682.,
      16452., 17344., 9576.,  10416., 12096., 12992., 14840., 15792., 17808.,
      18816., 11939., 12870., 14758., 15752., 17829., 18886., 21152., 22272.,
      13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400., 9001.,
      9722.,  11190., 11960., 13575., 14394., 16156., 17024., 6982.,  7588.,
      8840.,  9488.,  10866., 11556., 13060., 13792., 8976.,  9696.,  11136.,
      11904., 13488., 14304., 16032., 16896., 9576.,  10416., 12096., 12992.,
      14840., 15792., 17808., 18816., 11968., 12928., 14848., 15872., 17984.,
      19072., 21376., 22528., 16920., 18000., 20160., 21312., 23688., 24912.,
      27504., 28800., 11968., 12928., 14848., 15872., 17984., 19072., 21376.,
      22528., 9576.,  10416., 12096., 12992., 14840., 15792., 17808., 18816.,
      8976.,  9696.,  11136., 11904., 13488., 14304., 16032., 16896., 7126.,
      7780.,  9048.,  9744.,  11138., 11876., 13396., 14176., 9005.,  9754.,
      11226., 12024., 13643., 14490., 16256., 17152., 13160., 14000., 15680.,
      16576., 18424., 19376., 21392., 22400., 11943., 12902., 14794., 15816.,
      17897., 18982., 21252., 22400., 9576.,  10416., 12096., 12992., 14840.,
      15792., 17808., 18816., 9061.,  9786.,  11250., 12024., 13635., 14458.,
      16216., 17088., 9598.,  10212., 11456., 12112., 13482., 14180., 15676.,
      16416., 6676.,  7240.,  8328.,  8928.,  10124., 10760., 12064., 12736.,
      10126., 10756., 12016., 12688., 14074., 14788., 16300., 17056., 8976.,
      9696.,  11136., 11904., 13488., 14304., 16032., 16896., 9434.,  10268.,
      11896., 12784., 14574., 15516., 17468., 18464., 8976.,  9696.,  11136.,
      11904., 13488., 14304., 16032., 16896., 9598.,  10212., 11456., 12112.,
      13482., 14180., 15676., 16416., 6372.,  6888.,  7928.,  8480.,  9628.,
      10216., 11472., 12096., 7562.,  8012.,  8912.,  9392.,  10382., 10892.,
      11972., 12512., 6507.,  7022.,  8066.,  8616.,  9765.,  10350., 11604.,
      12224., 6840.,  7440.,  8640.,  9280.,  10600., 11280., 12720., 13440.,
      8657.,  9362.,  10730., 11480., 12983., 13778., 15416., 16256., 9400.,
      10000., 11200., 11840., 13160., 13840., 15280., 16000., 6291.,  6798.,
      7818.,  8360.,  9485.,  10062., 11292., 11904., 4770.,  5196.,  6056.,
      6512.,  7462.,  7948.,  8988.,  9504.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4322.,  4460.,  4736.,  4880.,  5174.,  5324.,  5636.,  5792.,  4826.,
      4988.,  5288.,  5456.,  5774.,  5948.,  6284.,  6464.,  5330.,  5516.,
      5840.,  6032.,  6374.,  6572.,  6932.,  7136.,  5834.,  6044.,  6392.,
      6608.,  6974.,  7196.,  7580.,  7808.,  6338.,  6572.,  6944.,  7184.,
      7574.,  7820.,  8228.,  8480.,  6842.,  7100.,  7496.,  7760.,  8174.,
      8444.,  8876.,  9152.,  7346.,  7628.,  8048.,  8336.,  8774.,  9068.,
      9524.,  9824.,  8858.,  9212.,  9704.,  10064., 10574., 10940., 11468.,
      11840., 9362.,  9740.,  10256., 10640., 11174., 11564., 12116., 12512.,
      9866.,  10268., 10808., 11216., 11774., 12188., 12764., 13184., 10370.,
      10796., 11360., 11792., 12374., 12812., 13412., 13856., 10874., 11324.,
      11912., 12368., 12974., 13436., 14060., 14528., 11378., 11852., 12464.,
      12944., 13574., 14060., 14708., 15200., 11882., 12380., 13016., 13520.,
      14174., 14684., 15356., 15872., 13394., 13964., 14672., 15248., 15974.,
      16556., 17300., 17888., 13898., 14492., 15224., 15824., 16574., 17180.,
      17948., 18560., 14402., 15020., 15776., 16400., 17174., 17804., 18596.,
      19232., 14906., 15548., 16328., 16976., 17774., 18428., 19244., 19904.,
      15410., 16076., 16880., 17552., 18374., 19052., 19892., 20576., 15914.,
      16604., 17432., 18128., 18974., 19676., 20540., 21248., 16418., 17132.,
      17984., 18704., 19574., 20300., 21188., 21920., 17930., 18716., 19640.,
      20432., 21374., 22172., 23132., 23936., 18434., 19244., 20192., 21008.,
      21974., 22796., 23780., 24608., 18938., 19772., 20744., 21584., 22574.,
      23420., 24428., 25280., 19442., 20300., 21296., 22160., 23174., 24044.,
      25076., 25952., 19946., 20828., 21848., 22736., 23774., 24668., 25724.,
      26624., 20450., 21356., 22400., 23312., 24374., 25292., 26372., 27296.,
      20954., 21884., 22952., 23888., 24974., 25916., 27020., 27968., 22466.,
      23468., 24608., 25616., 26774., 27788., 28964., 29984., 22970., 23996.,
      25160., 26192., 27374., 28412., 29612., 30656., 23474., 24524., 25712.,
      26768., 27974., 29036., 30260., 31328., 23978., 25052., 26264., 27344.,
      28574., 29660., 30908., 32000., 24482., 25580., 26816., 27920., 29174.,
      30284., 31556., 32672., 24986., 26108., 27368., 28496., 29774., 30908.,
      32204., 33344., 25490., 26636., 27920., 29072., 30374., 31532., 32852.,
      34016., 27002., 28220., 29576., 30800., 32174., 33404., 34796., 36032.,
      27506., 28748., 30128., 31376., 32774., 34028., 35444., 36704., 28010.,
      29276., 30680., 31952., 33374., 34652., 36092., 37376., 28514., 29804.,
      31232., 32528., 33974., 35276., 36740., 38048., 29018., 30332., 31784.,
      33104., 34574., 35900., 37388., 38720., 29522., 30860., 32336., 33680.,
      35174., 36524., 38036., 39392., 30026., 31388., 32888., 34256., 35774.,
      37148., 38684., 40064., 31538., 32972., 34544., 35984., 37574., 39020.,
      40628., 42080., 32042., 33500., 35096., 36560., 38174., 39644., 41276.,
      42752., 32546., 34028., 35648., 37136., 38774., 40268., 41924., 43424.,
      33050., 34556., 36200., 37712., 39374., 40892., 42572., 44096., 33554.,
      35084., 36752., 38288., 39974., 41516., 43220., 44768., 34058., 35612.,
      37304., 38864., 40574., 42140., 43868., 45440., 34562., 36140., 37856.,
      39440., 41174., 42764., 44516., 46112.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4618.,  5092.,  5566.,  6040.,  6904.,  7408.,  7912.,  8416.,  9430.,
      9964.,  10498., 11032., 12196., 12760., 13324., 13888., 4543.,  5086.,
      5629.,  6172.,  7178.,  7756.,  8334.,  8912.,  10093., 10706., 11319.,
      11932., 13288., 13936., 14584., 15232., 6040.,  6640.,  7240.,  7840.,
      8960.,  9600.,  10240., 10880., 12200., 12880., 13560., 14240., 15760.,
      16480., 17200., 17920., 5237.,  5882.,  6527.,  7172.,  8410.,  9100.,
      9790.,  10480., 11943., 12678., 13413., 14148., 15836., 16616., 17396.,
      18176., 6040.,  6640.,  7240.,  7840.,  8960.,  9600.,  10240., 10880.,
      12200., 12880., 13560., 14240., 15760., 16480., 17200., 17920., 4279.,
      4814.,  5349.,  5884.,  6882.,  7452.,  8022.,  8592.,  9765.,  10370.,
      10975., 11580., 12928., 13568., 14208., 14848., 4722.,  5172.,  5622.,
      6072.,  6912.,  7392.,  7872.,  8352.,  9342.,  9852.,  10362., 10872.,
      12012., 12552., 13092., 13632., 4564.,  5128.,  5692.,  6256.,  7288.,
      7888.,  8488.,  9088.,  10300., 10936., 11572., 12208., 13600., 14272.,
      14944., 15616., 6422.,  7068.,  7714.,  8360.,  9552.,  10240., 10928.,
      11616., 13018., 13748., 14478., 15208., 16820., 17592., 18364., 19136.,
      5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104.,
      13920., 14736., 15552., 17376., 18240., 19104., 19968., 7938.,  8724.,
      9510.,  10296., 11784., 12624., 13464., 14304., 16062., 16956., 17850.,
      18744., 20772., 21720., 22668., 23616., 5712.,  6432.,  7152.,  7872.,
      9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376.,
      18240., 19104., 19968., 6534.,  7164.,  7794.,  8424.,  9600.,  10272.,
      10944., 11616., 13002., 13716., 14430., 15144., 16740., 17496., 18252.,
      19008., 3876.,  4392.,  4908.,  5424.,  6408.,  6960.,  7512.,  8064.,
      9228.,  9816.,  10404., 10992., 12336., 12960., 13584., 14208., 6422.,
      7068.,  7714.,  8360.,  9552.,  10240., 10928., 11616., 13018., 13748.,
      14478., 15208., 16820., 17592., 18364., 19136., 6137.,  6882.,  7627.,
      8372.,  9762.,  10556., 11350., 12144., 13779., 14622., 15465., 16308.,
      18188., 19080., 19972., 20864., 8456.,  9296.,  10136., 10976., 12544.,
      13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072.,
      24080., 25088., 7587.,  8518.,  9449.,  10380., 12138., 13132., 14126.,
      15120., 17193., 18250., 19307., 20364., 22752., 23872., 24992., 26112.,
      8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080.,
      18032., 18984., 19936., 22064., 23072., 24080., 25088., 5729.,  6450.,
      7171.,  7892.,  9258.,  10028., 10798., 11568., 13179., 13998., 14817.,
      15636., 17492., 18360., 19228., 20096., 6126.,  6732.,  7338.,  7944.,
      9096.,  9744.,  10392., 11040., 12402., 13092., 13782., 14472., 16044.,
      16776., 17508., 18240., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,
      10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104.,
      19968., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232.,
      17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088., 7616.,
      8576.,  9536.,  10496., 12288., 13312., 14336., 15360., 17472., 18560.,
      19648., 20736., 23168., 24320., 25472., 26624., 10872., 11952., 13032.,
      14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632.,
      28368., 29664., 30960., 32256., 7616.,  8576.,  9536.,  10496., 12288.,
      13312., 14336., 15360., 17472., 18560., 19648., 20736., 23168., 24320.,
      25472., 26624., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104.,
      13920., 14736., 15552., 17376., 18240., 19104., 19968., 6558.,  7212.,
      7866.,  8520.,  9720.,  10416., 11112., 11808., 13218., 13956., 14694.,
      15432., 17052., 17832., 18612., 19392., 5741.,  6490.,  7239.,  7988.,
      9366.,  10164., 10962., 11760., 13383., 14230., 15077., 15924., 17792.,
      18688., 19584., 20480., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 7599.,  8558.,  9517.,  10476., 12246., 13268., 14290., 15312.,
      17397., 18482., 19567., 20652., 23052., 24200., 25348., 26496., 8456.,
      9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032.,
      18984., 19936., 22064., 23072., 24080., 25088., 5717.,  6442.,  7167.,
      7892.,  9246.,  10020., 10794., 11568., 13167., 13990., 14813., 15636.,
      17480., 18352., 19224., 20096., 6134.,  6748.,  7362.,  7976.,  9136.,
      9792.,  10448., 11104., 12474., 13172., 13870., 14568., 16148., 16888.,
      17628., 18368., 4308.,  4872.,  5436.,  6000.,  7032.,  7632.,  8232.,
      8832.,  10044., 10680., 11316., 11952., 13344., 14016., 14688., 15360.,
      6534.,  7164.,  7794.,  8424.,  9600.,  10272., 10944., 11616., 13002.,
      13716., 14430., 15144., 16740., 17496., 18252., 19008., 5712.,  6432.,
      7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736.,
      15552., 17376., 18240., 19104., 19968., 8370.,  9204.,  10038., 10872.,
      12408., 13296., 14184., 15072., 16878., 17820., 18762., 19704., 21780.,
      22776., 23772., 24768., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,
      10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104.,
      19968., 6134.,  6748.,  7362.,  7976.,  9136.,  9792.,  10448., 11104.,
      12474., 13172., 13870., 14568., 16148., 16888., 17628., 18368., 4132.,
      4648.,  5164.,  5680.,  6664.,  7216.,  7768.,  8320.,  9484.,  10072.,
      10660., 11248., 12592., 13216., 13840., 14464., 4722.,  5172.,  5622.,
      6072.,  6912.,  7392.,  7872.,  8352.,  9342.,  9852.,  10362., 10872.,
      12012., 12552., 13092., 13632., 3859.,  4374.,  4889.,  5404.,  6366.,
      6916.,  7466.,  8016.,  9153.,  9738.,  10323., 10908., 12220., 12840.,
      13460., 14080., 6040.,  6640.,  7240.,  7840.,  8960.,  9600.,  10240.,
      10880., 12200., 12880., 13560., 14240., 15760., 16480., 17200., 17920.,
      5537.,  6242.,  6947.,  7652.,  8934.,  9684.,  10434., 11184., 12691.,
      13486., 14281., 15076., 16808., 17648., 18488., 19328., 6040.,  6640.,
      7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200., 12880., 13560.,
      14240., 15760., 16480., 17200., 17920., 3979.,  4486.,  4993.,  5500.,
      6454.,  6996.,  7538.,  8080.,  9209.,  9786.,  10363., 10940., 12244.,
      12856., 13468., 14080., 4186.,  4612.,  5038.,  5464.,  6280.,  6736.,
      7192.,  7648.,  8614.,  9100.,  9586.,  10072., 11188., 11704., 12220.,
      12736.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8506.,  8644.,  8782.,  8920.,  9328.,  9472.,  9616.,  9760.,  10198.,
      10348., 10498., 10648., 11116., 11272., 11428., 11584., 9490.,  9652.,
      9814.,  9976.,  10408., 10576., 10744., 10912., 11374., 11548., 11722.,
      11896., 12388., 12568., 12748., 12928., 10474., 10660., 10846., 11032.,
      11488., 11680., 11872., 12064., 12550., 12748., 12946., 13144., 13660.,
      13864., 14068., 14272., 11458., 11668., 11878., 12088., 12568., 12784.,
      13000., 13216., 13726., 13948., 14170., 14392., 14932., 15160., 15388.,
      15616., 12442., 12676., 12910., 13144., 13648., 13888., 14128., 14368.,
      14902., 15148., 15394., 15640., 16204., 16456., 16708., 16960., 13426.,
      13684., 13942., 14200., 14728., 14992., 15256., 15520., 16078., 16348.,
      16618., 16888., 17476., 17752., 18028., 18304., 14410., 14692., 14974.,
      15256., 15808., 16096., 16384., 16672., 17254., 17548., 17842., 18136.,
      18748., 19048., 19348., 19648., 17362., 17716., 18070., 18424., 19048.,
      19408., 19768., 20128., 20782., 21148., 21514., 21880., 22564., 22936.,
      23308., 23680., 18346., 18724., 19102., 19480., 20128., 20512., 20896.,
      21280., 21958., 22348., 22738., 23128., 23836., 24232., 24628., 25024.,
      19330., 19732., 20134., 20536., 21208., 21616., 22024., 22432., 23134.,
      23548., 23962., 24376., 25108., 25528., 25948., 26368., 20314., 20740.,
      21166., 21592., 22288., 22720., 23152., 23584., 24310., 24748., 25186.,
      25624., 26380., 26824., 27268., 27712., 21298., 21748., 22198., 22648.,
      23368., 23824., 24280., 24736., 25486., 25948., 26410., 26872., 27652.,
      28120., 28588., 29056., 22282., 22756., 23230., 23704., 24448., 24928.,
      25408., 25888., 26662., 27148., 27634., 28120., 28924., 29416., 29908.,
      30400., 23266., 23764., 24262., 24760., 25528., 26032., 26536., 27040.,
      27838., 28348., 28858., 29368., 30196., 30712., 31228., 31744., 26218.,
      26788., 27358., 27928., 28768., 29344., 29920., 30496., 31366., 31948.,
      32530., 33112., 34012., 34600., 35188., 35776., 27202., 27796., 28390.,
      28984., 29848., 30448., 31048., 31648., 32542., 33148., 33754., 34360.,
      35284., 35896., 36508., 37120., 28186., 28804., 29422., 30040., 30928.,
      31552., 32176., 32800., 33718., 34348., 34978., 35608., 36556., 37192.,
      37828., 38464., 18802., 19316., 19830., 20344., 21128., 21648., 22168.,
      22688., 23502., 24028., 24554., 25080., 25924., 26456., 26988., 27520.,
      11466., 11876., 12286., 12696., 13376., 13792., 14208., 14624., 15334.,
      15756., 16178., 16600., 17340., 17768., 18196., 18624., 6178.,  6484.,
      6790.,  7096.,  7672.,  7984.,  8296.,  8608.,  9214.,  9532.,  9850.,
      10168., 10804., 11128., 11452., 11776., 7162.,  7492.,  7822.,  8152.,
      8752.,  9088.,  9424.,  9760.,  10390., 10732., 11074., 11416., 12076.,
      12424., 12772., 13120., 10114., 10516., 10918., 11320., 11992., 12400.,
      12808., 13216., 13918., 14332., 14746., 15160., 15892., 16312., 16732.,
      17152., 11098., 11524., 11950., 12376., 13072., 13504., 13936., 14368.,
      15094., 15532., 15970., 16408., 17164., 17608., 18052., 18496., 12082.,
      12532., 12982., 13432., 14152., 14608., 15064., 15520., 16270., 16732.,
      17194., 17656., 18436., 18904., 19372., 19840., 8842.,  9188.,  9534.,
      9880.,  10496., 10848., 11200., 11552., 12198., 12556., 12914., 13272.,
      13948., 14312., 14676., 15040., 7650.,  7892.,  8134.,  8376.,  8888.,
      9136.,  9384.,  9632.,  10174., 10428., 10682., 10936., 11508., 11768.,
      12028., 12288., 8506.,  8644.,  8782.,  8920.,  9328.,  9472.,  9616.,
      9760.,  10198., 10348., 10498., 10648., 11116., 11272., 11428., 11584.,
      9490.,  9652.,  9814.,  9976.,  10408., 10576., 10744., 10912., 11374.,
      11548., 11722., 11896., 12388., 12568., 12748., 12928., 12442., 12676.,
      12910., 13144., 13648., 13888., 14128., 14368., 14902., 15148., 15394.,
      15640., 16204., 16456., 16708., 16960., 13426., 13684., 13942., 14200.,
      14728., 14992., 15256., 15520., 16078., 16348., 16618., 16888., 17476.,
      17752., 18028., 18304., 14410., 14692., 14974., 15256., 15808., 16096.,
      16384., 16672., 17254., 17548., 17842., 18136., 18748., 19048., 19348.,
      19648., 15394., 15700., 16006., 16312., 16888., 17200., 17512., 17824.,
      18430., 18748., 19066., 19384., 20020., 20344., 20668., 20992., 16378.,
      16708., 17038., 17368., 17968., 18304., 18640., 18976., 19606., 19948.,
      20290., 20632., 21292., 21640., 21988., 22336., 17362., 17716., 18070.,
      18424., 19048., 19408., 19768., 20128., 20782., 21148., 21514., 21880.,
      22564., 22936., 23308., 23680., 18346., 18724., 19102., 19480., 20128.,
      20512., 20896., 21280., 21958., 22348., 22738., 23128., 23836., 24232.,
      24628., 25024., 21298., 21748., 22198., 22648., 23368., 23824., 24280.,
      24736., 25486., 25948., 26410., 26872., 27652., 28120., 28588., 29056.,
      22282., 22756., 23230., 23704., 24448., 24928., 25408., 25888., 26662.,
      27148., 27634., 28120., 28924., 29416., 29908., 30400., 23266., 23764.,
      24262., 24760., 25528., 26032., 26536., 27040., 27838., 28348., 28858.,
      29368., 30196., 30712., 31228., 31744., 24250., 24772., 25294., 25816.,
      26608., 27136., 27664., 28192., 29014., 29548., 30082., 30616., 31468.,
      32008., 32548., 33088., 25234., 25780., 26326., 26872., 27688., 28240.,
      28792., 29344., 30190., 30748., 31306., 31864., 32740., 33304., 33868.,
      34432., 26218., 26788., 27358., 27928., 28768., 29344., 29920., 30496.,
      31366., 31948., 32530., 33112., 34012., 34600., 35188., 35776., 27202.,
      27796., 28390., 28984., 29848., 30448., 31048., 31648., 32542., 33148.,
      33754., 34360., 35284., 35896., 36508., 37120., 11466., 11876., 12286.,
      12696., 13376., 13792., 14208., 14624., 15334., 15756., 16178., 16600.,
      17340., 17768., 18196., 18624., 6178.,  6484.,  6790.,  7096.,  7672.,
      7984.,  8296.,  8608.,  9214.,  9532.,  9850.,  10168., 10804., 11128.,
      11452., 11776., 7162.,  7492.,  7822.,  8152.,  8752.,  9088.,  9424.,
      9760.,  10390., 10732., 11074., 11416., 12076., 12424., 12772., 13120.,
      8146.,  8500.,  8854.,  9208.,  9832.,  10192., 10552., 10912., 11566.,
      11932., 12298., 12664., 13348., 13720., 14092., 14464., 9130.,  9508.,
      9886.,  10264., 10912., 11296., 11680., 12064., 12742., 13132., 13522.,
      13912., 14620., 15016., 15412., 15808., 10114., 10516., 10918., 11320.,
      11992., 12400., 12808., 13216., 13918., 14332., 14746., 15160., 15892.,
      16312., 16732., 17152., 11098., 11524., 11950., 12376., 13072., 13504.,
      13936., 14368., 15094., 15532., 15970., 16408., 17164., 17608., 18052.,
      18496.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8108.,  10140., 11212., 12343., 10418., 8540.,  7610.,  8266.,  9544.,
      11210., 12938., 11394., 9896.,  9026.,  9810.,  11412., 13738., 16141.,
      14560., 13044., 11856., 13992., 16736., 20520., 24376., 20520., 16736.,
      13992., 11856., 13044., 14560., 16141., 13738., 11412., 9810.,  9026.,
      9896.,  11394., 12938., 11210., 9544.,  8266.,  7610.,  8540.,  10418.,
      12343., 11212., 10140., 8108.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      360.,  396.,  432.,  468.,  504.,  540.,  576.,  720.,  756.,  792.,
      828.,  864.,  900.,  936.,  1080., 1116., 1152., 1188., 1224., 1260.,
      1296., 1440., 1476., 1512., 1548., 1584., 1620., 1656., 1800., 1836.,
      1872., 1908., 1944., 1980., 2016., 2160., 2196., 2232., 2268., 2304.,
      2340., 2376., 2520., 2556., 2592., 2628., 2664., 2700., 2736.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8336.,  8792.,  10340., 10872., 11347., 11960., 12371., 13070., 10706.,
      11332., 9204.,  9752.,  7939.,  8436.,  10546., 11156., 12168., 12880.,
      14112., 14932., 16046., 16980., 14810., 15652., 13768., 14512., 12036.,
      12708., 11458., 12196., 12636., 13480., 14487., 15444., 16357., 17434.,
      14212., 15168., 12332., 13160., 10923., 11648., 13032., 13840., 15520.,
      16448., 18992., 20048., 22472., 23664., 19112., 20176., 16032., 16960.,
      13504., 14320., 11284., 12064., 12780., 13672., 14541., 15552., 16297.,
      17434., 15074., 16084., 14140., 15016., 12805., 13572., 11834., 12516.,
      12328., 13104., 13400., 14276., 14462., 15444., 11890., 12756., 9576.,
      10320., 7916.,  8564.,  7250.,  7764.,  8020.,  8600.,  9721.,  10372.,
      11447., 12174., 10784., 11416., 10340., 10872., 8525.,  8984.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      660.,  720.,  724.,  792.,  788.,  864.,  852.,  936.,  916.,  1008.,
      980.,  1080., 1044., 1152., 1300., 1440., 1364., 1512., 1428., 1584.,
      1492., 1656., 1556., 1728., 1620., 1800., 1684., 1872., 1940., 2160.,
      2004., 2232., 2068., 2304., 2132., 2376., 2196., 2448., 2260., 2520.,
      2324., 2592., 2580., 2880., 2644., 2952., 2708., 3024., 2772., 3096.,
      2836., 3168., 2900., 3240., 2964., 3312., 3220., 3600., 3284., 3672.,
      3348., 3744., 3412., 3816., 3476., 3888., 3540., 3960., 3604., 4032.,
      3860., 4320., 3924., 4392., 3988., 4464., 4052., 4536., 4116., 4608.,
      4180., 4680., 4244., 4752., 4500., 5040., 4564., 5112., 4628., 5184.,
      4692., 5256., 4756., 5328., 4820., 5400., 4884., 5472.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7192.,  7648.,  8104.,  8560.,  8948.,  9480.,  10012., 10544., 9889.,
      10502., 11115., 11728., 10763., 11462., 12161., 12860., 9298.,  9924.,
      10550., 11176., 8228.,  8776.,  9324.,  9872.,  7317.,  7814.,  8311.,
      8808.,  10274., 10884., 11494., 12104., 11112., 11824., 12536., 13248.,
      12748., 13568., 14388., 15208., 14262., 15196., 16130., 17064., 12426.,
      13268., 14110., 14952., 11080., 11824., 12568., 13312., 9416.,  10088.,
      10760., 11432., 10562., 11300., 12038., 12776., 11468., 12312., 13156.,
      14000., 13841., 14798., 15755., 16712., 16117., 17194., 18271., 19348.,
      14284., 15240., 16196., 17152., 13084., 13912., 14740., 15568., 11137.,
      11862., 12587., 13312., 11048., 11856., 12664., 13472., 13216., 14144.,
      15072., 16000., 16448., 17504., 18560., 19616., 19560., 20752., 21944.,
      23136., 16552., 17616., 18680., 19744., 14240., 15168., 16096., 17024.,
      12368., 13184., 14000., 14816., 12316., 13096., 13876., 14656., 15068.,
      15960., 16852., 17744., 15911., 16922., 17933., 18944., 16609., 17746.,
      18883., 20020., 14450., 15460., 16470., 17480., 12972., 13848., 14724.,
      15600., 11019., 11786., 12553., 13320., 11434., 12116., 12798., 13480.,
      11816., 12592., 13368., 14144., 12676., 13552., 14428., 15304., 13414.,
      14396., 15378., 16360., 11682., 12548., 13414., 14280., 10568., 11312.,
      12056., 12800., 9040.,  9688.,  10336., 10984., 6978.,  7492.,  8006.,
      8520.,  7428.,  8008.,  8588.,  9168.,  8743.,  9394.,  10045., 10696.,
      10007., 10734., 11461., 12188., 9224.,  9856.,  10488., 11120., 8948.,
      9480.,  10012., 10544., 7247.,  7706.,  8165.,  8624.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1260.,  1320.,  1380.,  1440.,  1380.,  1448.,  1516.,  1584.,  1500.,
      1576.,  1652.,  1728.,  1620.,  1704.,  1788.,  1872.,  1740.,  1832.,
      1924.,  2016.,  1860.,  1960.,  2060.,  2160.,  1980.,  2088.,  2196.,
      2304.,  2460.,  2600.,  2740.,  2880.,  2580.,  2728.,  2876.,  3024.,
      2700.,  2856.,  3012.,  3168.,  2820.,  2984.,  3148.,  3312.,  2940.,
      3112.,  3284.,  3456.,  3060.,  3240.,  3420.,  3600.,  3180.,  3368.,
      3556.,  3744.,  3660.,  3880.,  4100.,  4320.,  3780.,  4008.,  4236.,
      4464.,  3900.,  4136.,  4372.,  4608.,  4020.,  4264.,  4508.,  4752.,
      4140.,  4392.,  4644.,  4896.,  4260.,  4520.,  4780.,  5040.,  4380.,
      4648.,  4916.,  5184.,  4860.,  5160.,  5460.,  5760.,  4980.,  5288.,
      5596.,  5904.,  5100.,  5416.,  5732.,  6048.,  5220.,  5544.,  5868.,
      6192.,  5340.,  5672.,  6004.,  6336.,  5460.,  5800.,  6140.,  6480.,
      5580.,  5928.,  6276.,  6624.,  6060.,  6440.,  6820.,  7200.,  6180.,
      6568.,  6956.,  7344.,  6300.,  6696.,  7092.,  7488.,  6420.,  6824.,
      7228.,  7632.,  6540.,  6952.,  7364.,  7776.,  6660.,  7080.,  7500.,
      7920.,  6780.,  7208.,  7636.,  8064.,  7260.,  7720.,  8180.,  8640.,
      7380.,  7848.,  8316.,  8784.,  7500.,  7976.,  8452.,  8928.,  7620.,
      8104.,  8588.,  9072.,  7740.,  8232.,  8724.,  9216.,  7860.,  8360.,
      8860.,  9360.,  7980.,  8488.,  8996.,  9504.,  8460.,  9000.,  9540.,
      10080., 8580.,  9128.,  9676.,  10224., 8700.,  9256.,  9812.,  10368.,
      8820.,  9384.,  9948.,  10512., 8940.,  9512.,  10084., 10656., 9060.,
      9640.,  10220., 10800., 9180.,  9768.,  10356., 10944.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11181., 12336., 13896., 15216., 13731., 15216., 13802., 15452., 11515.,
      13000., 9416.,  10736., 7973.,  9128.,  9086.,  10472., 10736., 12320.,
      12850., 14632., 15212., 17192., 14546., 16328., 14064., 15648., 12958.,
      14344., 12727., 14344., 13592., 15440., 14217., 16296., 15150., 17460.,
      13409., 15488., 11928., 13776., 10671., 12288., 14888., 16736., 18240.,
      20352., 22616., 24992., 27280., 29920., 22616., 24992., 18240., 20352.,
      14888., 16736., 10671., 12288., 11928., 13776., 13409., 15488., 15150.,
      17460., 14217., 16296., 13592., 15440., 12727., 14344., 12958., 14344.,
      14064., 15648., 14546., 16328., 15212., 17192., 12850., 14632., 10736.,
      12320., 9086.,  10472., 7973.,  9128.,  9416.,  10736., 11515., 13000.,
      13802., 15452., 13731., 15216., 13896., 15216., 11181., 12336.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1256., 1440.,  1384., 1584.,  1512., 1728.,  1640., 1872.,  1768., 2016.,
      1896., 2160.,  2024., 2304.,  2536., 2880.,  2664., 3024.,  2792., 3168.,
      2920., 3312.,  3048., 3456.,  3176., 3600.,  3304., 3744.,  3816., 4320.,
      3944., 4464.,  4072., 4608.,  4200., 4752.,  4328., 4896.,  4456., 5040.,
      4584., 5184.,  5096., 5760.,  5224., 5904.,  5352., 6048.,  5480., 6192.,
      5608., 6336.,  5736., 6480.,  5864., 6624.,  6376., 7200.,  6504., 7344.,
      6632., 7488.,  6760., 7632.,  6888., 7776.,  7016., 7920.,  7144., 8064.,
      7656., 8640.,  7784., 8784.,  7912., 8928.,  8040., 9072.,  8168., 9216.,
      8296., 9360.,  8424., 9504.,  8936., 10080., 9064., 10224., 9192., 10368.,
      9320., 10512., 9448., 10656., 9576., 10800., 9704., 10944.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9421.,  9978.,  11152., 11744., 11536., 12176., 13496., 14176., 11305.,
      12006., 13494., 14240., 11344., 12116., 13762., 14584., 9343.,  10038.,
      11500., 12240., 7856.,  8464.,  9752.,  10400., 7051.,  7594.,  8718.,
      9296.,  10146., 10780., 12140., 12816., 10880., 11616., 13168., 13952.,
      11858., 12676., 14440., 15312., 13128., 14040., 16004., 16976., 11846.,
      12676., 14428., 15312., 11136., 11872., 13424., 14208., 10278., 10940.,
      12304., 13008., 10491., 11246., 12844., 13648., 11600., 12464., 14280.,
      15200., 13527., 14482., 16534., 17552., 15800., 16860., 19134., 20264.,
      14953., 15906., 17928., 18944., 14832., 15664., 17448., 18336., 11781.,
      12510., 14070., 14848., 12632., 13520., 15376., 16320., 14976., 16000.,
      18112., 19200., 18616., 19760., 22144., 23360., 22560., 23840., 26480.,
      27840., 18344., 19504., 21872., 23104., 14976., 16000., 18112., 19200.,
      12360., 13264., 15104., 16064., 13495., 14334., 16008., 16896., 16752.,
      17712., 19624., 20640., 16667., 17730., 19866., 20992., 16832., 18012.,
      20358., 21608., 14285., 15346., 17452., 18576., 12560., 13488., 15368.,
      16352., 11041., 11854., 13490., 14352., 10962., 11644., 13052., 13776.,
      12096., 12896., 14512., 15360., 12738., 13636., 15448., 16400., 13544.,
      14552., 16548., 17616., 12342., 13252., 15052., 16016., 11840., 12640.,
      14256., 15104., 10902., 11612., 13024., 13776., 8009.,  8586.,  9772.,
      10384., 8816.,  9488.,  10840., 11552., 10029., 10774., 12282., 13072.,
      11416., 12244., 13898., 14776., 11171., 11910., 13392., 14176., 11536.,
      12176., 13496., 14176., 8807.,  9370.,  10506., 11104.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2400.,  2512.,  2760.,  2880.,  2640.,  2768.,  3032.,  3168.,  2880.,
      3024.,  3304.,  3456.,  3120.,  3280.,  3576.,  3744.,  3360.,  3536.,
      3848.,  4032.,  3600.,  3792.,  4120.,  4320.,  3840.,  4048.,  4392.,
      4608.,  4800.,  5072.,  5480.,  5760.,  5040.,  5328.,  5752.,  6048.,
      5280.,  5584.,  6024.,  6336.,  5520.,  5840.,  6296.,  6624.,  5760.,
      6096.,  6568.,  6912.,  6000.,  6352.,  6840.,  7200.,  6240.,  6608.,
      7112.,  7488.,  7200.,  7632.,  8200.,  8640.,  7440.,  7888.,  8472.,
      8928.,  7680.,  8144.,  8744.,  9216.,  7920.,  8400.,  9016.,  9504.,
      8160.,  8656.,  9288.,  9792.,  8400.,  8912.,  9560.,  10080., 8640.,
      9168.,  9832.,  10368., 9600.,  10192., 10920., 11520., 9840.,  10448.,
      11192., 11808., 10080., 10704., 11464., 12096., 10320., 10960., 11736.,
      12384., 10560., 11216., 12008., 12672., 10800., 11472., 12280., 12960.,
      11040., 11728., 12552., 13248., 12000., 12752., 13640., 14400., 12240.,
      13008., 13912., 14688., 12480., 13264., 14184., 14976., 12720., 13520.,
      14456., 15264., 12960., 13776., 14728., 15552., 13200., 14032., 15000.,
      15840., 13440., 14288., 15272., 16128., 14400., 15312., 16360., 17280.,
      14640., 15568., 16632., 17568., 14880., 15824., 16904., 17856., 15120.,
      16080., 17176., 18144., 15360., 16336., 17448., 18432., 15600., 16592.,
      17720., 18720., 15840., 16848., 17992., 19008., 16800., 17872., 19080.,
      20160., 17040., 18128., 19352., 20448., 17280., 18384., 19624., 20736.,
      17520., 18640., 19896., 21024., 17760., 18896., 20168., 21312., 18000.,
      19152., 20440., 21600., 18240., 19408., 20712., 21888.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7853.,  8410.,  8967.,  9524.,  10704., 11296., 11888., 12480., 9632.,
      10272., 10912., 11552., 12872., 13552., 14232., 14912., 9397.,  10098.,
      10799., 11500., 12994., 13740., 14486., 15232., 9500.,  10272., 11044.,
      11816., 13454., 14276., 15098., 15920., 8359.,  9054.,  9749.,  10444.,
      11892., 12632., 13372., 14112., 8448.,  9056.,  9664.,  10272., 11560.,
      12208., 12856., 13504., 6743.,  7286.,  7829.,  8372.,  9498.,  10076.,
      10654., 11232., 8170.,  8804.,  9438.,  10072., 11444., 12120., 12796.,
      13472., 8736.,  9472.,  10208., 10944., 12496., 13280., 14064., 14848.,
      10738., 11556., 12374., 13192., 14952., 15824., 16696., 17568., 13056.,
      13968., 14880., 15792., 17724., 18696., 19668., 20640., 10446., 11276.,
      12106., 12936., 14660., 15544., 16428., 17312., 9248.,  9984.,  10720.,
      11456., 13008., 13792., 14576., 15360., 8086.,  8748.,  9410.,  10072.,
      11424., 12128., 12832., 13536., 10371., 11126., 11881., 12636., 14260.,
      15064., 15868., 16672., 12608., 13472., 14336., 15200., 17016., 17936.,
      18856., 19776., 12659., 13614., 14569., 15524., 17586., 18604., 19622.,
      20640., 13132., 14192., 15252., 16312., 18578., 19708., 20838., 21968.,
      11673., 12626., 13579., 14532., 16536., 17552., 18568., 19584., 11936.,
      12768., 13600., 14432., 16216., 17104., 17992., 18880., 9105.,  9834.,
      10563., 11292., 12834., 13612., 14390., 15168., 11704., 12592., 13480.,
      14368., 16240., 17184., 18128., 19072., 12544., 13568., 14592., 15616.,
      17728., 18816., 19904., 20992., 15224., 16368., 17512., 18656., 21056.,
      22272., 23488., 24704., 18240., 19520., 20800., 22080., 24720., 26080.,
      27440., 28800., 14408., 15568., 16728., 17888., 20240., 21472., 22704.,
      23936., 12544., 13568., 14592., 15616., 17728., 18816., 19904., 20992.,
      10888., 11792., 12696., 13600., 15424., 16384., 17344., 18304., 11175.,
      12014., 12853., 13692., 15384., 16272., 17160., 18048., 13600., 14560.,
      15520., 16480., 18392., 19408., 20424., 21440., 13743., 14806., 15869.,
      16932., 19086., 20212., 21338., 22464., 14180., 15360., 16540., 17720.,
      20074., 21324., 22574., 23824., 12885., 13946., 15007., 16068., 18164.,
      19288., 20412., 21536., 13440., 14368., 15296., 16224., 18104., 19088.,
      20072., 21056., 9973.,  10786., 11599., 12412., 14022., 14884., 15746.,
      16608., 9114.,  9796.,  10478., 11160., 12580., 13304., 14028., 14752.,
      10080., 10880., 11680., 12480., 14096., 14944., 15792., 16640., 12098.,
      12996., 13894., 14792., 16632., 17584., 18536., 19488., 14304., 15312.,
      16320., 17328., 19356., 20424., 21492., 22560., 11166., 12076., 12986.,
      13896., 15700., 16664., 17628., 18592., 9568.,  10368., 11168., 11968.,
      13584., 14432., 15280., 16128., 8390.,  9100.,  9810.,  10520., 11920.,
      12672., 13424., 14176., 7569.,  8146.,  8723.,  9300.,  10484., 11096.,
      11708., 12320., 9280.,  9952.,  10624., 11296., 12648., 13360., 14072.,
      14784., 9393.,  10138., 10883., 11628., 13150., 13940., 14730., 15520.,
      9716.,  10544., 11372., 12200., 13862., 14740., 15618., 16496., 8995.,
      9734.,  10473., 11212., 12688., 13472., 14256., 15040., 9632.,  10272.,
      10912., 11552., 12872., 13552., 14232., 14912., 7035.,  7598.,  8161.,
      8724.,  9854.,  10452., 11050., 11648.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4688.,  4800.,  4912.,  5024.,  5400.,  5520.,  5640.,  5760.,  5152.,
      5280.,  5408.,  5536.,  5928.,  6064.,  6200.,  6336.,  5616.,  5760.,
      5904.,  6048.,  6456.,  6608.,  6760.,  6912.,  6080.,  6240.,  6400.,
      6560.,  6984.,  7152.,  7320.,  7488.,  6544.,  6720.,  6896.,  7072.,
      7512.,  7696.,  7880.,  8064.,  7008.,  7200.,  7392.,  7584.,  8040.,
      8240.,  8440.,  8640.,  7472.,  7680.,  7888.,  8096.,  8568.,  8784.,
      9000.,  9216.,  9328.,  9600.,  9872.,  10144., 10680., 10960., 11240.,
      11520., 9792.,  10080., 10368., 10656., 11208., 11504., 11800., 12096.,
      10256., 10560., 10864., 11168., 11736., 12048., 12360., 12672., 10720.,
      11040., 11360., 11680., 12264., 12592., 12920., 13248., 11184., 11520.,
      11856., 12192., 12792., 13136., 13480., 13824., 11648., 12000., 12352.,
      12704., 13320., 13680., 14040., 14400., 12112., 12480., 12848., 13216.,
      13848., 14224., 14600., 14976., 13968., 14400., 14832., 15264., 15960.,
      16400., 16840., 17280., 14432., 14880., 15328., 15776., 16488., 16944.,
      17400., 17856., 14896., 15360., 15824., 16288., 17016., 17488., 17960.,
      18432., 15360., 15840., 16320., 16800., 17544., 18032., 18520., 19008.,
      15824., 16320., 16816., 17312., 18072., 18576., 19080., 19584., 16288.,
      16800., 17312., 17824., 18600., 19120., 19640., 20160., 16752., 17280.,
      17808., 18336., 19128., 19664., 20200., 20736., 18608., 19200., 19792.,
      20384., 21240., 21840., 22440., 23040., 19072., 19680., 20288., 20896.,
      21768., 22384., 23000., 23616., 19536., 20160., 20784., 21408., 22296.,
      22928., 23560., 24192., 20000., 20640., 21280., 21920., 22824., 23472.,
      24120., 24768., 20464., 21120., 21776., 22432., 23352., 24016., 24680.,
      25344., 20928., 21600., 22272., 22944., 23880., 24560., 25240., 25920.,
      21392., 22080., 22768., 23456., 24408., 25104., 25800., 26496., 23248.,
      24000., 24752., 25504., 26520., 27280., 28040., 28800., 23712., 24480.,
      25248., 26016., 27048., 27824., 28600., 29376., 24176., 24960., 25744.,
      26528., 27576., 28368., 29160., 29952., 24640., 25440., 26240., 27040.,
      28104., 28912., 29720., 30528., 25104., 25920., 26736., 27552., 28632.,
      29456., 30280., 31104., 25568., 26400., 27232., 28064., 29160., 30000.,
      30840., 31680., 26032., 26880., 27728., 28576., 29688., 30544., 31400.,
      32256., 27888., 28800., 29712., 30624., 31800., 32720., 33640., 34560.,
      28352., 29280., 30208., 31136., 32328., 33264., 34200., 35136., 28816.,
      29760., 30704., 31648., 32856., 33808., 34760., 35712., 29280., 30240.,
      31200., 32160., 33384., 34352., 35320., 36288., 29744., 30720., 31696.,
      32672., 33912., 34896., 35880., 36864., 30208., 31200., 32192., 33184.,
      34440., 35440., 36440., 37440., 30672., 31680., 32688., 33696., 34968.,
      35984., 37000., 38016., 32528., 33600., 34672., 35744., 37080., 38160.,
      39240., 40320., 32992., 34080., 35168., 36256., 37608., 38704., 39800.,
      40896., 33456., 34560., 35664., 36768., 38136., 39248., 40360., 41472.,
      33920., 35040., 36160., 37280., 38664., 39792., 40920., 42048., 34384.,
      35520., 36656., 37792., 39192., 40336., 41480., 42624., 34848., 36000.,
      37152., 38304., 39720., 40880., 42040., 43200., 35312., 36480., 37648.,
      38816., 40248., 41424., 42600., 43776.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9271.,  10356., 11511., 12736., 12360., 13600., 14920., 16320., 10969.,
      12364., 13849., 15424., 10394., 11944., 13594., 15344., 8505.,  9900.,
      11385., 12960., 7240.,  8480.,  9800.,  11200., 6551.,  7636.,  8791.,
      10016., 10210., 11512., 12898., 14368., 10224., 11712., 13296., 14976.,
      10046., 11720., 13502., 15392., 10860., 12720., 14700., 16800., 10174.,
      11848., 13630., 15520., 10224., 11712., 13296., 14976., 10466., 11768.,
      13154., 14624., 9133.,  10652., 12269., 13984., 10136., 11872., 13720.,
      15680., 12099., 14052., 16131., 18336., 15166., 17336., 19646., 22096.,
      15779., 17732., 19811., 22016., 17304., 19040., 20888., 22848., 12557.,
      14076., 15693., 17408., 10712., 12448., 14296., 16256., 13632., 15616.,
      17728., 19968., 18600., 20832., 23208., 25728., 24720., 27200., 29840.,
      32640., 18600., 20832., 23208., 25728., 13632., 15616., 17728., 19968.,
      10712., 12448., 14296., 16256., 12557., 14076., 15693., 17408., 17304.,
      19040., 20888., 22848., 15779., 17732., 19811., 22016., 15166., 17336.,
      19646., 22096., 12099., 14052., 16131., 18336., 10136., 11872., 13720.,
      15680., 9133.,  10652., 12269., 13984., 10466., 11768., 13154., 14624.,
      10224., 11712., 13296., 14976., 10174., 11848., 13630., 15520., 10860.,
      12720., 14700., 16800., 10046., 11720., 13502., 15392., 10224., 11712.,
      13296., 14976., 10210., 11512., 12898., 14368., 6551.,  7636.,  8791.,
      10016., 7240.,  8480.,  9800.,  11200., 8505.,  9900.,  11385., 12960.,
      10394., 11944., 13594., 15344., 10969., 12364., 13849., 15424., 12360.,
      13600., 14920., 16320., 9271.,  10356., 11511., 12736.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4680.,  5024.,  5384.,  5760.,  5160.,  5536.,  5928.,  6336.,  5640.,
      6048.,  6472.,  6912.,  6120.,  6560.,  7016.,  7488.,  6600.,  7072.,
      7560.,  8064.,  7080.,  7584.,  8104.,  8640.,  7560.,  8096.,  8648.,
      9216.,  9480.,  10144., 10824., 11520., 9960.,  10656., 11368., 12096.,
      10440., 11168., 11912., 12672., 10920., 11680., 12456., 13248., 11400.,
      12192., 13000., 13824., 11880., 12704., 13544., 14400., 12360., 13216.,
      14088., 14976., 14280., 15264., 16264., 17280., 14760., 15776., 16808.,
      17856., 15240., 16288., 17352., 18432., 15720., 16800., 17896., 19008.,
      16200., 17312., 18440., 19584., 16680., 17824., 18984., 20160., 17160.,
      18336., 19528., 20736., 19080., 20384., 21704., 23040., 19560., 20896.,
      22248., 23616., 20040., 21408., 22792., 24192., 20520., 21920., 23336.,
      24768., 21000., 22432., 23880., 25344., 21480., 22944., 24424., 25920.,
      21960., 23456., 24968., 26496., 23880., 25504., 27144., 28800., 24360.,
      26016., 27688., 29376., 24840., 26528., 28232., 29952., 25320., 27040.,
      28776., 30528., 25800., 27552., 29320., 31104., 26280., 28064., 29864.,
      31680., 26760., 28576., 30408., 32256., 28680., 30624., 32584., 34560.,
      29160., 31136., 33128., 35136., 29640., 31648., 33672., 35712., 30120.,
      32160., 34216., 36288., 30600., 32672., 34760., 36864., 31080., 33184.,
      35304., 37440., 31560., 33696., 35848., 38016., 33480., 35744., 38024.,
      40320., 33960., 36256., 38568., 40896., 34440., 36768., 39112., 41472.,
      34920., 37280., 39656., 42048., 35400., 37792., 40200., 42624., 35880.,
      38304., 40744., 43200., 36360., 38816., 41288., 43776.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6967.,  7470.,  8526.,  9064.,  10225., 10798., 12064., 12672., 9400.,
      10000., 11200., 11840., 13160., 13840., 15280., 16000., 8261.,  8914.,
      10270., 10968., 12459., 13202., 14828., 15616., 8350.,  9076.,  10568.,
      11344., 12986., 13812., 15604., 16480., 8049.,  8722.,  10058., 10776.,
      12247., 13010., 14616., 15424., 9400.,  10000., 11200., 11840., 13160.,
      13840., 15280., 16000., 6643.,  7182.,  8234.,  8808.,  9965.,  10574.,
      11836., 12480., 7738.,  8356.,  9628.,  10288., 11686., 12388., 13912.,
      14656., 8208.,  8928.,  10368., 11136., 12720., 13536., 15264., 16128.,
      10222., 11004., 12620., 13456., 15234., 16124., 18064., 19008., 13684.,
      14552., 16320., 17248., 19196., 20184., 22312., 23360., 9942.,  10748.,
      12340., 13200., 14954., 15868., 17784., 18752., 8208.,  8928.,  10368.,
      11136., 12720., 13536., 15264., 16128., 7586.,  8228.,  9476.,  10160.,
      11534., 12260., 13760., 14528., 9861.,  10586., 12082., 12856., 14499.,
      15322., 17112., 17984., 13160., 14000., 15680., 16576., 18424., 19376.,
      21392., 22400., 11759., 12678., 14578., 15560., 17649., 18694., 20972.,
      22080., 12026., 13052., 15144., 16240., 18542., 19708., 22220., 23456.,
      11411., 12358., 14230., 15240., 17301., 18374., 20624., 21760., 13160.,
      14000., 15680., 16576., 18424., 19376., 21392., 22400., 8985.,  9722.,
      11174., 11960., 13559., 14394., 16140., 17024., 10488., 11312., 13008.,
      13888., 15752., 16688., 18720., 19712., 10944., 11904., 13824., 14848.,
      16960., 18048., 20352., 21504., 13992., 15056., 17232., 18368., 20760.,
      21968., 24576., 25856., 18800., 20000., 22400., 23680., 26320., 27680.,
      30560., 32000., 13448., 14544., 16688., 17856., 20216., 21456., 24032.,
      25344., 10944., 11904., 13824., 14848., 16960., 18048., 20352., 21504.,
      9944.,  10800., 12464., 13376., 15208., 16176., 18176., 19200., 9533.,
      10266., 11754., 12536., 14171., 15002., 16784., 17664., 13160., 14000.,
      15680., 16576., 18424., 19376., 21392., 22400., 11959., 12902., 14810.,
      15816., 17913., 18982., 21268., 22400., 12170., 13244., 15352., 16496.,
      18814., 20028., 22556., 23840., 11355., 12326., 14206., 15240., 17309.,
      18406., 20664., 21824., 13160., 14000., 15680., 16576., 18424., 19376.,
      21392., 22400., 9041.,  9786.,  11230., 12024., 13615., 14458., 16196.,
      17088., 7994.,  8612.,  9884.,  10544., 11942., 12644., 14168., 14912.,
      8208.,  8928.,  10368., 11136., 12720., 13536., 15264., 16128., 10766.,
      11580., 13228., 14096., 15906., 16828., 18800., 19776., 14516., 15448.,
      17280., 18272., 20284., 21336., 23528., 24640., 10230., 11068., 12692.,
      13584., 15370., 16316., 18264., 19264., 8208.,  8928.,  10368., 11136.,
      12720., 13536., 15264., 16128., 7330.,  7972.,  9220.,  9904.,  11278.,
      12004., 13504., 14272., 6639.,  7150.,  8198.,  8744.,  9897.,  10478.,
      11736., 12352., 9400.,  10000., 11200., 11840., 13160., 13840., 15280.,
      16000., 8461.,  9138.,  10502., 11224., 12723., 13490., 15124., 15936.,
      8494.,  9268.,  10776., 11600., 13258., 14132., 15940., 16864., 7993.,
      8690.,  10034., 10776., 12255., 13042., 14656., 15488., 9400.,  10000.,
      11200., 11840., 13160., 13840., 15280., 16000., 6699.,  7246.,  8290.,
      8872.,  10021., 10638., 11892., 12544.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9144.,  9360.,  9824.,  10048., 10536., 10768., 11280., 11520., 10072.,
      10320., 10816., 11072., 11592., 11856., 12400., 12672., 11000., 11280.,
      11808., 12096., 12648., 12944., 13520., 13824., 11928., 12240., 12800.,
      13120., 13704., 14032., 14640., 14976., 12856., 13200., 13792., 14144.,
      14760., 15120., 15760., 16128., 13784., 14160., 14784., 15168., 15816.,
      16208., 16880., 17280., 14712., 15120., 15776., 16192., 16872., 17296.,
      18000., 18432., 18424., 18960., 19744., 20288., 21096., 21648., 22480.,
      23040., 19352., 19920., 20736., 21312., 22152., 22736., 23600., 24192.,
      20280., 20880., 21728., 22336., 23208., 23824., 24720., 25344., 21208.,
      21840., 22720., 23360., 24264., 24912., 25840., 26496., 22136., 22800.,
      23712., 24384., 25320., 26000., 26960., 27648., 23064., 23760., 24704.,
      25408., 26376., 27088., 28080., 28800., 23992., 24720., 25696., 26432.,
      27432., 28176., 29200., 29952., 14136., 14736., 15584., 16192., 17064.,
      17680., 18576., 19200., 9816.,  10320., 11072., 11584., 12360., 12880.,
      13680., 14208., 6520.,  6928.,  7584.,  8000.,  8680.,  9104.,  9808.,
      10240., 7448.,  7888.,  8576.,  9024.,  9736.,  10192., 10928., 11392.,
      8376.,  8848.,  9568.,  10048., 10792., 11280., 12048., 12544., 9304.,
      9808.,  10560., 11072., 11848., 12368., 13168., 13696., 10232., 10768.,
      11552., 12096., 12904., 13456., 14288., 14848., 8568.,  8976.,  9632.,
      10048., 10728., 11152., 11856., 12288., 8344.,  8656.,  9216.,  9536.,
      10120., 10448., 11056., 11392., 9144.,  9360.,  9824.,  10048., 10536.,
      10768., 11280., 11520., 10072., 10320., 10816., 11072., 11592., 11856.,
      12400., 12672., 11000., 11280., 11808., 12096., 12648., 12944., 13520.,
      13824., 11928., 12240., 12800., 13120., 13704., 14032., 14640., 14976.,
      12856., 13200., 13792., 14144., 14760., 15120., 15760., 16128., 16568.,
      17040., 17760., 18240., 18984., 19472., 20240., 20736., 17496., 18000.,
      18752., 19264., 20040., 20560., 21360., 21888., 18424., 18960., 19744.,
      20288., 21096., 21648., 22480., 23040., 19352., 19920., 20736., 21312.,
      22152., 22736., 23600., 24192., 20280., 20880., 21728., 22336., 23208.,
      23824., 24720., 25344., 21208., 21840., 22720., 23360., 24264., 24912.,
      25840., 26496., 22136., 22800., 23712., 24384., 25320., 26000., 26960.,
      27648., 25848., 26640., 27680., 28480., 29544., 30352., 31440., 32256.,
      19480., 20176., 21120., 21824., 22792., 23504., 24496., 25216., 14136.,
      14736., 15584., 16192., 17064., 17680., 18576., 19200., 9816.,  10320.,
      11072., 11584., 12360., 12880., 13680., 14208., 6520.,  6928.,  7584.,
      8000.,  8680.,  9104.,  9808.,  10240., 7448.,  7888.,  8576.,  9024.,
      9736.,  10192., 10928., 11392., 8376.,  8848.,  9568.,  10048., 10792.,
      11280., 12048., 12544., 12088., 12688., 13536., 14144., 15016., 15632.,
      16528., 17152., 9816.,  10320., 11072., 11584., 12360., 12880., 13680.,
      14208., 8568.,  8976.,  9632.,  10048., 10728., 11152., 11856., 12288.,
      8344.,  8656.,  9216.,  9536.,  10120., 10448., 11056., 11392., 9144.,
      9360.,  9824.,  10048., 10536., 10768., 11280., 11520., 10072., 10320.,
      10816., 11072., 11592., 11856., 12400., 12672., 11000., 11280., 11808.,
      12096., 12648., 12944., 13520., 13824.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4663.,  5166.,  5669.,  6172.,  7170.,  7708.,  8246.,  8784.,  9957.,
      10530., 11103., 11676., 13024., 13632., 14240., 14848., 6040.,  6640.,
      7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200., 12880., 13560.,
      14240., 15760., 16480., 17200., 17920., 5661.,  6314.,  6967.,  7620.,
      8898.,  9596.,  10294., 10992., 12495., 13238., 13981., 14724., 16452.,
      17240., 18028., 18816., 7334.,  8060.,  8786.,  9512.,  10888., 11664.,
      12440., 13216., 14842., 15668., 16494., 17320., 19196., 20072., 20948.,
      21824., 4833.,  5506.,  6179.,  6852.,  8070.,  8788.,  9506.,  10224.,
      11667., 12430., 13193., 13956., 15624., 16432., 17240., 18048., 6040.,
      6640.,  7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200., 12880.,
      13560., 14240., 15760., 16480., 17200., 17920., 3723.,  4262.,  4801.,
      5340.,  6294.,  6868.,  7442.,  8016.,  9145.,  9754.,  10363., 10972.,
      12276., 12920., 13564., 14208., 5610.,  6228.,  6846.,  7464.,  8676.,
      9336.,  9996.,  10656., 12078., 12780., 13482., 14184., 15816., 16560.,
      17304., 18048., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      6766.,  7548.,  8330.,  9112.,  10644., 11480., 12316., 13152., 14954.,
      15844., 16734., 17624., 19696., 20640., 21584., 22528., 8772.,  9640.,
      10508., 11376., 13024., 13952., 14880., 15808., 17756., 18744., 19732.,
      20720., 22968., 24016., 25064., 26112., 5798.,  6604.,  7410.,  8216.,
      9676.,  10536., 11396., 12256., 13986., 14900., 15814., 16728., 18728.,
      19696., 20664., 21632., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 4386.,  5028.,  5670.,  6312.,  7452.,  8136.,  8820.,  9504.,
      10854., 11580., 12306., 13032., 14592., 15360., 16128., 16896., 6549.,
      7274.,  7999.,  8724.,  10142., 10916., 11690., 12464., 14127., 14950.,
      15773., 16596., 18504., 19376., 20248., 21120., 8456.,  9296.,  10136.,
      10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936.,
      22064., 23072., 24080., 25088., 8007.,  8926.,  9845.,  10764., 12558.,
      13540., 14522., 15504., 17613., 18658., 19703., 20748., 23172., 24280.,
      25388., 26496., 10354., 11380., 12406., 13432., 15368., 16464., 17560.,
      18656., 20942., 22108., 23274., 24440., 27076., 28312., 29548., 30784.,
      6771.,  7718.,  8665.,  9612.,  11322., 12332., 13342., 14352., 16377.,
      17450., 18523., 19596., 21936., 23072., 24208., 25344., 8456.,  9296.,
      10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984.,
      19936., 22064., 23072., 24080., 25088., 4913.,  5650.,  6387.,  7124.,
      8442.,  9228.,  10014., 10800., 12363., 13198., 14033., 14868., 16676.,
      17560., 18444., 19328., 7480.,  8304.,  9128.,  9952.,  11568., 12448.,
      13328., 14208., 16104., 17040., 17976., 18912., 21088., 22080., 23072.,
      24064., 9664.,  10624., 11584., 12544., 14336., 15360., 16384., 17408.,
      19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672., 9384.,
      10448., 11512., 12576., 14640., 15776., 16912., 18048., 20472., 21680.,
      22888., 24096., 26880., 28160., 29440., 30720., 12080., 13280., 14480.,
      15680., 17920., 19200., 20480., 21760., 24400., 25760., 27120., 28480.,
      31520., 32960., 34400., 35840., 7752.,  8848.,  9944.,  11040., 13008.,
      14176., 15344., 16512., 18840., 20080., 21320., 22560., 25248., 26560.,
      27872., 29184., 9664.,  10624., 11584., 12544., 14336., 15360., 16384.,
      17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672.,
      5848.,  6704.,  7560.,  8416.,  9936.,  10848., 11760., 12672., 14472.,
      15440., 16408., 17376., 19456., 20480., 21504., 22528., 6557.,  7290.,
      8023.,  8756.,  10182., 10964., 11746., 12528., 14199., 15030., 15861.,
      16692., 18608., 19488., 20368., 21248., 8456.,  9296.,  10136., 10976.,
      12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064.,
      23072., 24080., 25088., 8415.,  9358.,  10301., 11244., 13062., 14068.,
      15074., 16080., 18213., 19282., 20351., 21420., 23868., 25000., 26132.,
      27264., 10786., 11860., 12934., 14008., 15992., 17136., 18280., 19424.,
      21758., 22972., 24186., 25400., 28084., 29368., 30652., 31936., 6795.,
      7766.,  8737.,  9708.,  11442., 12476., 13510., 14544., 16593., 17690.,
      18787., 19884., 22248., 23408., 24568., 25728., 8456.,  9296.,  10136.,
      10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936.,
      22064., 23072., 24080., 25088., 5049.,  5794.,  6539.,  7284.,  8610.,
      9404.,  10198., 10992., 12563., 13406., 14249., 15092., 16908., 17800.,
      18692., 19584., 5610.,  6228.,  6846.,  7464.,  8676.,  9336.,  9996.,
      10656., 12078., 12780., 13482., 14184., 15816., 16560., 17304., 18048.,
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 7310.,  8124.,
      8938.,  9752.,  11316., 12184., 13052., 13920., 15754., 16676., 17598.,
      18520., 20624., 21600., 22576., 23552., 9348.,  10280., 11212., 12144.,
      13856., 14848., 15840., 16832., 18844., 19896., 20948., 22000., 24312.,
      25424., 26536., 27648., 5830.,  6668.,  7506.,  8344.,  9836.,  10728.,
      11620., 12512., 14274., 15220., 16166., 17112., 19144., 20144., 21144.,
      22144., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 4386.,
      5028.,  5670.,  6312.,  7452.,  8136.,  8820.,  9504.,  10854., 11580.,
      12306., 13032., 14592., 15360., 16128., 16896., 4671.,  5182.,  5693.,
      6204.,  7210.,  7756.,  8302.,  8848.,  10029., 10610., 11191., 11772.,
      13128., 13744., 14360., 14976., 6040.,  6640.,  7240.,  7840.,  8960.,
      9600.,  10240., 10880., 12200., 12880., 13560., 14240., 15760., 16480.,
      17200., 17920., 6069.,  6746.,  7423.,  8100.,  9402.,  10124., 10846.,
      11568., 13095., 13862., 14629., 15396., 17148., 17960., 18772., 19584.,
      7766.,  8540.,  9314.,  10088., 11512., 12336., 13160., 13984., 15658.,
      16532., 17406., 18280., 20204., 21128., 22052., 22976., 4857.,  5554.,
      6251.,  6948.,  8190.,  8932.,  9674.,  10416., 11883., 12670., 13457.,
      14244., 15936., 16768., 17600., 18432., 6040.,  6640.,  7240.,  7840.,
      8960.,  9600.,  10240., 10880., 12200., 12880., 13560., 14240., 15760.,
      16480., 17200., 17920., 3859.,  4406.,  4953.,  5500.,  6462.,  7044.,
      7626.,  8208.,  9345.,  9962.,  10579., 11196., 12508., 13160., 13812.,
      14464.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18072., 18288., 18504., 18720., 19424., 19648., 19872., 20096., 20840.,
      21072., 21304., 21536., 22320., 22560., 22800., 23040., 19896., 20144.,
      20392., 20640., 21376., 21632., 21888., 22144., 22920., 23184., 23448.,
      23712., 24528., 24800., 25072., 25344., 21720., 22000., 22280., 22560.,
      23328., 23616., 23904., 24192., 25000., 25296., 25592., 25888., 26736.,
      27040., 27344., 27648., 23544., 23856., 24168., 24480., 25280., 25600.,
      25920., 26240., 27080., 27408., 27736., 28064., 28944., 29280., 29616.,
      29952., 25368., 25712., 26056., 26400., 27232., 27584., 27936., 28288.,
      29160., 29520., 29880., 30240., 31152., 31520., 31888., 32256., 27192.,
      27568., 27944., 28320., 29184., 29568., 29952., 30336., 31240., 31632.,
      32024., 32416., 33360., 33760., 34160., 34560., 29016., 29424., 29832.,
      30240., 31136., 31552., 31968., 32384., 33320., 33744., 34168., 34592.,
      35568., 36000., 36432., 36864., 36312., 36848., 37384., 37920., 38944.,
      39488., 40032., 40576., 41640., 42192., 42744., 43296., 44400., 44960.,
      45520., 46080., 38136., 38704., 39272., 39840., 40896., 41472., 42048.,
      42624., 43720., 44304., 44888., 45472., 46608., 47200., 47792., 48384.,
      39960., 40560., 41160., 41760., 42848., 43456., 44064., 44672., 45800.,
      46416., 47032., 47648., 48816., 49440., 50064., 50688., 41784., 42416.,
      43048., 43680., 44800., 45440., 46080., 46720., 47880., 48528., 49176.,
      49824., 51024., 51680., 52336., 52992., 43608., 44272., 44936., 45600.,
      46752., 47424., 48096., 48768., 49960., 50640., 51320., 52000., 53232.,
      53920., 54608., 55296., 45432., 46128., 46824., 47520., 48704., 49408.,
      50112., 50816., 52040., 52752., 53464., 54176., 55440., 56160., 56880.,
      57600., 47256., 47984., 48712., 49440., 50656., 51392., 52128., 52864.,
      54120., 54864., 55608., 56352., 57648., 58400., 59152., 59904., 27672.,
      28272., 28872., 29472., 30560., 31168., 31776., 32384., 33512., 34128.,
      34744., 35360., 36528., 37152., 37776., 38400., 19128., 19632., 20136.,
      20640., 21632., 22144., 22656., 23168., 24200., 24720., 25240., 25760.,
      26832., 27360., 27888., 28416., 12632., 13040., 13448., 13856., 14752.,
      15168., 15584., 16000., 16936., 17360., 17784., 18208., 19184., 19616.,
      20048., 20480., 14456., 14896., 15336., 15776., 16704., 17152., 17600.,
      18048., 19016., 19472., 19928., 20384., 21392., 21856., 22320., 22784.,
      16280., 16752., 17224., 17696., 18656., 19136., 19616., 20096., 21096.,
      21584., 22072., 22560., 23600., 24096., 24592., 25088., 18104., 18608.,
      19112., 19616., 20608., 21120., 21632., 22144., 23176., 23696., 24216.,
      24736., 25808., 26336., 26864., 27392., 19928., 20464., 21000., 21536.,
      22560., 23104., 23648., 24192., 25256., 25808., 26360., 26912., 28016.,
      28576., 29136., 29696., 16728., 17136., 17544., 17952., 18848., 19264.,
      19680., 20096., 21032., 21456., 21880., 22304., 23280., 23712., 24144.,
      24576., 16376., 16688., 17000., 17312., 18112., 18432., 18752., 19072.,
      19912., 20240., 20568., 20896., 21776., 22112., 22448., 22784., 18072.,
      18288., 18504., 18720., 19424., 19648., 19872., 20096., 20840., 21072.,
      21304., 21536., 22320., 22560., 22800., 23040., 19896., 20144., 20392.,
      20640., 21376., 21632., 21888., 22144., 22920., 23184., 23448., 23712.,
      24528., 24800., 25072., 25344., 21720., 22000., 22280., 22560., 23328.,
      23616., 23904., 24192., 25000., 25296., 25592., 25888., 26736., 27040.,
      27344., 27648., 23544., 23856., 24168., 24480., 25280., 25600., 25920.,
      26240., 27080., 27408., 27736., 28064., 28944., 29280., 29616., 29952.,
      25368., 25712., 26056., 26400., 27232., 27584., 27936., 28288., 29160.,
      29520., 29880., 30240., 31152., 31520., 31888., 32256., 32664., 33136.,
      33608., 34080., 35040., 35520., 36000., 36480., 37480., 37968., 38456.,
      38944., 39984., 40480., 40976., 41472., 34488., 34992., 35496., 36000.,
      36992., 37504., 38016., 38528., 39560., 40080., 40600., 41120., 42192.,
      42720., 43248., 43776., 36312., 36848., 37384., 37920., 38944., 39488.,
      40032., 40576., 41640., 42192., 42744., 43296., 44400., 44960., 45520.,
      46080., 38136., 38704., 39272., 39840., 40896., 41472., 42048., 42624.,
      43720., 44304., 44888., 45472., 46608., 47200., 47792., 48384., 39960.,
      40560., 41160., 41760., 42848., 43456., 44064., 44672., 45800., 46416.,
      47032., 47648., 48816., 49440., 50064., 50688., 41784., 42416., 43048.,
      43680., 44800., 45440., 46080., 46720., 47880., 48528., 49176., 49824.,
      51024., 51680., 52336., 52992., 43608., 44272., 44936., 45600., 46752.,
      47424., 48096., 48768., 49960., 50640., 51320., 52000., 53232., 53920.,
      54608., 55296., 50904., 51696., 52488., 53280., 54560., 55360., 56160.,
      56960., 58280., 59088., 59896., 60704., 62064., 62880., 63696., 64512.,
      38264., 38960., 39656., 40352., 41536., 42240., 42944., 43648., 44872.,
      45584., 46296., 47008., 48272., 48992., 49712., 50432., 27672., 28272.,
      28872., 29472., 30560., 31168., 31776., 32384., 33512., 34128., 34744.,
      35360., 36528., 37152., 37776., 38400., 19128., 19632., 20136., 20640.,
      21632., 22144., 22656., 23168., 24200., 24720., 25240., 25760., 26832.,
      27360., 27888., 28416., 12632., 13040., 13448., 13856., 14752., 15168.,
      15584., 16000., 16936., 17360., 17784., 18208., 19184., 19616., 20048.,
      20480., 14456., 14896., 15336., 15776., 16704., 17152., 17600., 18048.,
      19016., 19472., 19928., 20384., 21392., 21856., 22320., 22784., 16280.,
      16752., 17224., 17696., 18656., 19136., 19616., 20096., 21096., 21584.,
      22072., 22560., 23600., 24096., 24592., 25088., 23576., 24176., 24776.,
      25376., 26464., 27072., 27680., 28288., 29416., 30032., 30648., 31264.,
      32432., 33056., 33680., 34304., 19128., 19632., 20136., 20640., 21632.,
      22144., 22656., 23168., 24200., 24720., 25240., 25760., 26832., 27360.,
      27888., 28416., 16728., 17136., 17544., 17952., 18848., 19264., 19680.,
      20096., 21032., 21456., 21880., 22304., 23280., 23712., 24144., 24576.,
      16376., 16688., 17000., 17312., 18112., 18432., 18752., 19072., 19912.,
      20240., 20568., 20896., 21776., 22112., 22448., 22784., 18072., 18288.,
      18504., 18720., 19424., 19648., 19872., 20096., 20840., 21072., 21304.,
      21536., 22320., 22560., 22800., 23040., 19896., 20144., 20392., 20640.,
      21376., 21632., 21888., 22144., 22920., 23184., 23448., 23712., 24528.,
      24800., 25072., 25344., 21720., 22000., 22280., 22560., 23328., 23616.,
      23904., 24192., 25000., 25296., 25592., 25888., 26736., 27040., 27344.,
      27648.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5920.,  7230.,  8568.,  9928.,  8680.,  7422.,  6160.,  7060.,  8611.,
      10192., 11796., 10304., 8803.,  7300.,  10240., 12392., 14560., 16736.,
      14560., 12392., 10240., 14180., 17133., 20104., 23084., 20104., 17133.,
      14180., 10240., 12392., 14560., 16736., 14560., 12392., 10240., 7300.,
      8803.,  10304., 11796., 10192., 8611.,  7060.,  6160.,  7422.,  8680.,
      9928.,  8568.,  7230.,  5920.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      265.,  286.,  307.,  328.,  349.,  370.,  391.,  433.,  454.,  475.,
      496.,  517.,  538.,  559.,  601.,  622.,  643.,  664.,  685.,  706.,
      727.,  769.,  790.,  811.,  832.,  853.,  874.,  895.,  937.,  958.,
      979.,  1000., 1021., 1042., 1063., 1105., 1126., 1147., 1168., 1189.,
      1210., 1231., 1273., 1294., 1315., 1336., 1357., 1378., 1399.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6190.,  6560.,  7374.,  7836.,  8512.,  9072.,  9592.,  10256., 8022.,
      8624.,  6534.,  7068.,  5140.,  5600.,  9175.,  9640.,  10883., 11462.,
      12516., 13216., 14060., 14888., 11795., 12544., 9647.,  10310., 7630.,
      8200.,  10280., 10880., 12136., 12880., 13888., 14784., 15520., 16576.,
      12936., 13888., 10504., 11344., 8240.,  8960.,  13025., 13640., 15453.,
      16218., 17780., 18704., 19988., 21080., 16821., 17808., 13809., 14682.,
      10970., 11720., 10280., 10880., 12136., 12880., 13888., 14784., 15520.,
      16576., 12936., 13888., 10504., 11344., 8240.,  8960.,  11335., 11880.,
      13379., 14054., 15316., 16128., 17132., 18088., 14371., 15232., 11759.,
      12518., 9310.,  9960.,  7070.,  7520.,  8334.,  8892.,  9520.,  10192.,
      10616., 11408., 8806.,  9520.,  7110.,  7740.,  5540.,  6080.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      473.,  530.,  509.,  572.,  545.,  614.,  581.,  656.,  617.,  698.,
      653.,  740.,  689.,  782.,  761.,  866.,  797.,  908.,  833.,  950.,
      869.,  992.,  905.,  1034., 941.,  1076., 977.,  1118., 1049., 1202.,
      1085., 1244., 1121., 1286., 1157., 1328., 1193., 1370., 1229., 1412.,
      1265., 1454., 1337., 1538., 1373., 1580., 1409., 1622., 1445., 1664.,
      1481., 1706., 1517., 1748., 1553., 1790., 1625., 1874., 1661., 1916.,
      1697., 1958., 1733., 2000., 1769., 2042., 1805., 2084., 1841., 2126.,
      1913., 2210., 1949., 2252., 1985., 2294., 2021., 2336., 2057., 2378.,
      2093., 2420., 2129., 2462., 2201., 2546., 2237., 2588., 2273., 2630.,
      2309., 2672., 2345., 2714., 2381., 2756., 2417., 2798.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8010.,  8380.,  8750.,  9120.,  9198.,  9660.,  10122., 10584., 10192.,
      10752., 11312., 11872., 10968., 11632., 12296., 12960., 8498.,  9100.,
      9702.,  10304., 6294.,  6828.,  7362.,  7896.,  4380.,  4840.,  5300.,
      5760.,  10045., 10510., 10975., 11440., 11491., 12070., 12649., 13228.,
      12684., 13384., 14084., 14784., 13596., 14424., 15252., 16080., 10521.,
      11270., 12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,  5980.,
      6550.,  7120.,  12920., 13520., 14120., 14720., 14696., 15440., 16184.,
      16928., 16128., 17024., 17920., 18816., 17184., 18240., 19296., 20352.,
      13272., 14224., 15176., 16128., 9800.,  10640., 11480., 12320., 6800.,
      7520.,  8240.,  8960.,  13275., 13890., 14505., 15120., 15165., 15930.,
      16695., 17460., 16716., 17640., 18564., 19488., 17892., 18984., 20076.,
      21168., 13839., 14826., 15813., 16800., 10233., 11106., 11979., 12852.,
      7110.,  7860.,  8610.,  9360.,  12920., 13520., 14120., 14720., 14696.,
      15440., 16184., 16928., 16128., 17024., 17920., 18816., 17184., 18240.,
      19296., 20352., 13272., 14224., 15176., 16128., 9800.,  10640., 11480.,
      12320., 6800.,  7520.,  8240.,  8960.,  11725., 12270., 12815., 13360.,
      13315., 13990., 14665., 15340., 14588., 15400., 16212., 17024., 15516.,
      16472., 17428., 18384., 11977., 12838., 13699., 14560., 8839.,  9598.,
      10357., 11116., 6130.,  6780.,  7430.,  8080.,  9690.,  10140., 10590.,
      11040., 11022., 11580., 12138., 12696., 12096., 12768., 13440., 14112.,
      12888., 13680., 14472., 15264., 9954.,  10668., 11382., 12096., 7350.,
      7980.,  8610.,  9240.,  5100.,  5640.,  6180.,  6720.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      889.,  946.,  1003., 1060., 955.,  1018., 1081., 1144., 1021., 1090.,
      1159., 1228., 1087., 1162., 1237., 1312., 1153., 1234., 1315., 1396.,
      1219., 1306., 1393., 1480., 1285., 1378., 1471., 1564., 1417., 1522.,
      1627., 1732., 1483., 1594., 1705., 1816., 1549., 1666., 1783., 1900.,
      1615., 1738., 1861., 1984., 1681., 1810., 1939., 2068., 1747., 1882.,
      2017., 2152., 1813., 1954., 2095., 2236., 1945., 2098., 2251., 2404.,
      2011., 2170., 2329., 2488., 2077., 2242., 2407., 2572., 2143., 2314.,
      2485., 2656., 2209., 2386., 2563., 2740., 2275., 2458., 2641., 2824.,
      2341., 2530., 2719., 2908., 2473., 2674., 2875., 3076., 2539., 2746.,
      2953., 3160., 2605., 2818., 3031., 3244., 2671., 2890., 3109., 3328.,
      2737., 2962., 3187., 3412., 2803., 3034., 3265., 3496., 2869., 3106.,
      3343., 3580., 3001., 3250., 3499., 3748., 3067., 3322., 3577., 3832.,
      3133., 3394., 3655., 3916., 3199., 3466., 3733., 4000., 3265., 3538.,
      3811., 4084., 3331., 3610., 3889., 4168., 3397., 3682., 3967., 4252.,
      3529., 3826., 4123., 4420., 3595., 3898., 4201., 4504., 3661., 3970.,
      4279., 4588., 3727., 4042., 4357., 4672., 3793., 4114., 4435., 4756.,
      3859., 4186., 4513., 4840., 3925., 4258., 4591., 4924., 4057., 4402.,
      4747., 5092., 4123., 4474., 4825., 5176., 4189., 4546., 4903., 5260.,
      4255., 4618., 4981., 5344., 4321., 4690., 5059., 5428., 4387., 4762.,
      5137., 5512., 4453., 4834., 5215., 5596.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5730.,  6720.,  7188.,  8376.,  8694.,  10080., 10224., 11808., 8694.,
      10080., 7188.,  8376.,  5730.,  6720.,  9885.,  10960., 12226., 13516.,
      14623., 16128., 17048., 18768., 14623., 16128., 12226., 13516., 9885.,
      10960., 7640.,  8960.,  9584.,  11168., 11592., 13440., 13632., 15744.,
      11592., 13440., 9584.,  11168., 7640.,  8960.,  13075., 14480., 16158.,
      17844., 19313., 21280., 22504., 24752., 19313., 21280., 16158., 17844.,
      13075., 14480., 7640.,  8960.,  9584.,  11168., 11592., 13440., 13632.,
      15744., 11592., 13440., 9584.,  11168., 7640.,  8960.,  9885.,  10960.,
      12226., 13516., 14623., 16128., 17048., 18768., 14623., 16128., 12226.,
      13516., 9885.,  10960., 5730.,  6720.,  7188.,  8376.,  8694.,  10080.,
      10224., 11808., 8694.,  10080., 7188.,  8376.,  5730.,  6720.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      910.,  1060., 982.,  1144., 1054., 1228., 1126., 1312., 1198., 1396.,
      1270., 1480., 1342., 1564., 1486., 1732., 1558., 1816., 1630., 1900.,
      1702., 1984., 1774., 2068., 1846., 2152., 1918., 2236., 2062., 2404.,
      2134., 2488., 2206., 2572., 2278., 2656., 2350., 2740., 2422., 2824.,
      2494., 2908., 2638., 3076., 2710., 3160., 2782., 3244., 2854., 3328.,
      2926., 3412., 2998., 3496., 3070., 3580., 3214., 3748., 3286., 3832.,
      3358., 3916., 3430., 4000., 3502., 4084., 3574., 4168., 3646., 4252.,
      3790., 4420., 3862., 4504., 3934., 4588., 4006., 4672., 4078., 4756.,
      4150., 4840., 4222., 4924., 4366., 5092., 4438., 5176., 4510., 5260.,
      4582., 5344., 4654., 5428., 4726., 5512., 4798., 5596.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8670.,  9060.,  10140., 10560., 10416., 10920., 12180., 12720., 12054.,
      12684., 14112., 14784., 13536., 14304., 15888., 16704., 10626., 11340.,
      12684., 13440., 7968.,  8616.,  9732.,  10416., 5610.,  6180.,  7080.,
      7680.,  9275.,  9690.,  10910., 11360., 11240., 11780., 13202., 13784.,
      13111., 13790., 15400., 16128., 14832., 15664., 17448., 18336., 11669.,
      12446., 13958., 14784., 8768.,  9476.,  10730., 11480., 6185.,  6810.,
      7820.,  8480.,  11560., 12080., 13520., 14080., 13888., 14560., 16240.,
      16960., 16072., 16912., 18816., 19712., 18048., 19072., 21184., 22272.,
      14168., 15120., 16912., 17920., 10624., 11488., 12976., 13888., 7480.,
      8240.,  9440.,  10240., 12165., 12710., 14290., 14880., 14712., 15420.,
      17262., 18024., 17129., 18018., 20104., 21056., 19344., 20432., 22744.,
      23904., 15211., 16226., 18186., 19264., 11424., 12348., 13974., 14952.,
      8055.,  8870.,  10180., 11040., 11560., 12080., 13520., 14080., 13888.,
      14560., 16240., 16960., 16072., 16912., 18816., 19712., 18048., 19072.,
      21184., 22272., 14168., 15120., 16912., 17920., 10624., 11488., 12976.,
      13888., 7480.,  8240.,  9440.,  10240., 9275.,  9690.,  10910., 11360.,
      11240., 11780., 13202., 13784., 13111., 13790., 15400., 16128., 14832.,
      15664., 17448., 18336., 11669., 12446., 13958., 14784., 8768.,  9476.,
      10730., 11480., 6185.,  6810.,  7820.,  8480.,  8670.,  9060.,  10140.,
      10560., 10416., 10920., 12180., 12720., 12054., 12684., 14112., 14784.,
      13536., 14304., 15888., 16704., 10626., 11340., 12684., 13440., 7968.,
      8616.,  9732.,  10416., 5610.,  6180.,  7080.,  7680.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1712.,  1820.,  2006.,  2120.,  1844.,  1964.,  2162.,  2288.,  1976.,
      2108.,  2318.,  2456.,  2108.,  2252.,  2474.,  2624.,  2240.,  2396.,
      2630.,  2792.,  2372.,  2540.,  2786.,  2960.,  2504.,  2684.,  2942.,
      3128.,  2768.,  2972.,  3254.,  3464.,  2900.,  3116.,  3410.,  3632.,
      3032.,  3260.,  3566.,  3800.,  3164.,  3404.,  3722.,  3968.,  3296.,
      3548.,  3878.,  4136.,  3428.,  3692.,  4034.,  4304.,  3560.,  3836.,
      4190.,  4472.,  3824.,  4124.,  4502.,  4808.,  3956.,  4268.,  4658.,
      4976.,  4088.,  4412.,  4814.,  5144.,  4220.,  4556.,  4970.,  5312.,
      4352.,  4700.,  5126.,  5480.,  4484.,  4844.,  5282.,  5648.,  4616.,
      4988.,  5438.,  5816.,  4880.,  5276.,  5750.,  6152.,  5012.,  5420.,
      5906.,  6320.,  5144.,  5564.,  6062.,  6488.,  5276.,  5708.,  6218.,
      6656.,  5408.,  5852.,  6374.,  6824.,  5540.,  5996.,  6530.,  6992.,
      5672.,  6140.,  6686.,  7160.,  5936.,  6428.,  6998.,  7496.,  6068.,
      6572.,  7154.,  7664.,  6200.,  6716.,  7310.,  7832.,  6332.,  6860.,
      7466.,  8000.,  6464.,  7004.,  7622.,  8168.,  6596.,  7148.,  7778.,
      8336.,  6728.,  7292.,  7934.,  8504.,  6992.,  7580.,  8246.,  8840.,
      7124.,  7724.,  8402.,  9008.,  7256.,  7868.,  8558.,  9176.,  7388.,
      8012.,  8714.,  9344.,  7520.,  8156.,  8870.,  9512.,  7652.,  8300.,
      9026.,  9680.,  7784.,  8444.,  9182.,  9848.,  8048.,  8732.,  9494.,
      10184., 8180.,  8876.,  9650.,  10352., 8312.,  9020.,  9806.,  10520.,
      8444.,  9164.,  9962.,  10688., 8576.,  9308.,  10118., 10856., 8708.,
      9452.,  10274., 11024., 8840.,  9596.,  10430., 11192.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6198.,  6588.,  6978.,  7368.,  8340.,  8760.,  9180.,  9600.,  8040.,
      8544.,  9048.,  9552.,  10764., 11304., 11844., 12384., 9654.,  10284.,
      10914., 11544., 12960., 13632., 14304., 14976., 10944., 11712., 12480.,
      13248., 14832., 15648., 16464., 17280., 8442.,  9156.,  9870.,  10584.,
      11940., 12696., 13452., 14208., 6840.,  7488.,  8136.,  8784.,  9948.,
      10632., 11316., 12000., 6234.,  6804.,  7374.,  7944.,  8952.,  9552.,
      10152., 10752., 6615.,  7030.,  7445.,  7860.,  8954.,  9404.,  9854.,
      10304., 8628.,  9168.,  9708.,  10248., 11614., 12196., 12778., 13360.,
      10439., 11118., 11797., 12476., 14072., 14800., 15528., 16256., 11936.,
      12768., 13600., 14432., 16216., 17104., 17992., 18880., 9217.,  9994.,
      10771., 11548., 13074., 13900., 14726., 15552., 7484.,  8192.,  8900.,
      9608.,  10918., 11668., 12418., 13168., 6849.,  7474.,  8099.,  8724.,
      9860.,  10520., 11180., 11840., 8264.,  8784.,  9304.,  9824.,  11120.,
      11680., 12240., 12800., 10720., 11392., 12064., 12736., 14352., 15072.,
      15792., 16512., 12872., 13712., 14552., 15392., 17280., 18176., 19072.,
      19968., 14592., 15616., 16640., 17664., 19776., 20864., 21952., 23040.,
      11256., 12208., 13160., 14112., 15920., 16928., 17936., 18944., 9120.,
      9984.,  10848., 11712., 13264., 14176., 15088., 16000., 8312.,  9072.,
      9832.,  10592., 11936., 12736., 13536., 14336., 8681.,  9226.,  9771.,
      10316., 11734., 12324., 12914., 13504., 11308., 12016., 12724., 13432.,
      15202., 15964., 16726., 17488., 13657., 14546., 15435., 16324., 18392.,
      19344., 20296., 21248., 15584., 16672., 17760., 18848., 21160., 22320.,
      23480., 24640., 12031., 13046., 14061., 15076., 17054., 18132., 19210.,
      20288., 9764.,  10688., 11612., 12536., 14234., 15212., 16190., 17168.,
      8927.,  9742.,  10557., 11372., 12844., 13704., 14564., 15424., 8264.,
      8784.,  9304.,  9824.,  11120., 11680., 12240., 12800., 10720., 11392.,
      12064., 12736., 14352., 15072., 15792., 16512., 12872., 13712., 14552.,
      15392., 17280., 18176., 19072., 19968., 14592., 15616., 16640., 17664.,
      19776., 20864., 21952., 23040., 11256., 12208., 13160., 14112., 15920.,
      16928., 17936., 18944., 9120.,  9984.,  10848., 11712., 13264., 14176.,
      15088., 16000., 8312.,  9072.,  9832.,  10592., 11936., 12736., 13536.,
      14336., 6615.,  7030.,  7445.,  7860.,  8954.,  9404.,  9854.,  10304.,
      8628.,  9168.,  9708.,  10248., 11614., 12196., 12778., 13360., 10439.,
      11118., 11797., 12476., 14072., 14800., 15528., 16256., 11936., 12768.,
      13600., 14432., 16216., 17104., 17992., 18880., 9217.,  9994.,  10771.,
      11548., 13074., 13900., 14726., 15552., 7484.,  8192.,  8900.,  9608.,
      10918., 11668., 12418., 13168., 6849.,  7474.,  8099.,  8724.,  9860.,
      10520., 11180., 11840., 6198.,  6588.,  6978.,  7368.,  8340.,  8760.,
      9180.,  9600.,  8040.,  8544.,  9048.,  9552.,  10764., 11304., 11844.,
      12384., 9654.,  10284., 10914., 11544., 12960., 13632., 14304., 14976.,
      10944., 11712., 12480., 13248., 14832., 15648., 16464., 17280., 8442.,
      9156.,  9870.,  10584., 11940., 12696., 13452., 14208., 6840.,  7488.,
      8136.,  8784.,  9948.,  10632., 11316., 12000., 6234.,  6804.,  7374.,
      7944.,  8952.,  9552.,  10152., 10752.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3316.,  3424.,  3532.,  3640.,  3898.,  4012.,  4126.,  4240.,  3568.,
      3688.,  3808.,  3928.,  4198.,  4324.,  4450.,  4576.,  3820.,  3952.,
      4084.,  4216.,  4498.,  4636.,  4774.,  4912.,  4072.,  4216.,  4360.,
      4504.,  4798.,  4948.,  5098.,  5248.,  4324.,  4480.,  4636.,  4792.,
      5098.,  5260.,  5422.,  5584.,  4576.,  4744.,  4912.,  5080.,  5398.,
      5572.,  5746.,  5920.,  4828.,  5008.,  5188.,  5368.,  5698.,  5884.,
      6070.,  6256.,  5332.,  5536.,  5740.,  5944.,  6298.,  6508.,  6718.,
      6928.,  5584.,  5800.,  6016.,  6232.,  6598.,  6820.,  7042.,  7264.,
      5836.,  6064.,  6292.,  6520.,  6898.,  7132.,  7366.,  7600.,  6088.,
      6328.,  6568.,  6808.,  7198.,  7444.,  7690.,  7936.,  6340.,  6592.,
      6844.,  7096.,  7498.,  7756.,  8014.,  8272.,  6592.,  6856.,  7120.,
      7384.,  7798.,  8068.,  8338.,  8608.,  6844.,  7120.,  7396.,  7672.,
      8098.,  8380.,  8662.,  8944.,  7348.,  7648.,  7948.,  8248.,  8698.,
      9004.,  9310.,  9616.,  7600.,  7912.,  8224.,  8536.,  8998.,  9316.,
      9634.,  9952.,  7852.,  8176.,  8500.,  8824.,  9298.,  9628.,  9958.,
      10288., 8104.,  8440.,  8776.,  9112.,  9598.,  9940.,  10282., 10624.,
      8356.,  8704.,  9052.,  9400.,  9898.,  10252., 10606., 10960., 8608.,
      8968.,  9328.,  9688.,  10198., 10564., 10930., 11296., 8860.,  9232.,
      9604.,  9976.,  10498., 10876., 11254., 11632., 9364.,  9760.,  10156.,
      10552., 11098., 11500., 11902., 12304., 9616.,  10024., 10432., 10840.,
      11398., 11812., 12226., 12640., 9868.,  10288., 10708., 11128., 11698.,
      12124., 12550., 12976., 10120., 10552., 10984., 11416., 11998., 12436.,
      12874., 13312., 10372., 10816., 11260., 11704., 12298., 12748., 13198.,
      13648., 10624., 11080., 11536., 11992., 12598., 13060., 13522., 13984.,
      10876., 11344., 11812., 12280., 12898., 13372., 13846., 14320., 11380.,
      11872., 12364., 12856., 13498., 13996., 14494., 14992., 11632., 12136.,
      12640., 13144., 13798., 14308., 14818., 15328., 11884., 12400., 12916.,
      13432., 14098., 14620., 15142., 15664., 12136., 12664., 13192., 13720.,
      14398., 14932., 15466., 16000., 12388., 12928., 13468., 14008., 14698.,
      15244., 15790., 16336., 12640., 13192., 13744., 14296., 14998., 15556.,
      16114., 16672., 12892., 13456., 14020., 14584., 15298., 15868., 16438.,
      17008., 13396., 13984., 14572., 15160., 15898., 16492., 17086., 17680.,
      13648., 14248., 14848., 15448., 16198., 16804., 17410., 18016., 13900.,
      14512., 15124., 15736., 16498., 17116., 17734., 18352., 14152., 14776.,
      15400., 16024., 16798., 17428., 18058., 18688., 14404., 15040., 15676.,
      16312., 17098., 17740., 18382., 19024., 14656., 15304., 15952., 16600.,
      17398., 18052., 18706., 19360., 14908., 15568., 16228., 16888., 17698.,
      18364., 19030., 19696., 15412., 16096., 16780., 17464., 18298., 18988.,
      19678., 20368., 15664., 16360., 17056., 17752., 18598., 19300., 20002.,
      20704., 15916., 16624., 17332., 18040., 18898., 19612., 20326., 21040.,
      16168., 16888., 17608., 18328., 19198., 19924., 20650., 21376., 16420.,
      17152., 17884., 18616., 19498., 20236., 20974., 21712., 16672., 17416.,
      18160., 18904., 19798., 20548., 21298., 22048., 16924., 17680., 18436.,
      19192., 20098., 20860., 21622., 22384.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6630.,  7560.,  8550.,  9600.,  9204.,  10320., 11508., 12768., 11970.,
      13272., 14658., 16128., 14832., 16320., 17904., 19584., 11970., 13272.,
      14658., 16128., 9204.,  10320., 11508., 12768., 6630.,  7560.,  8550.,
      9600.,  7735.,  8820.,  9975.,  11200., 10738., 12040., 13426., 14896.,
      13965., 15484., 17101., 18816., 17304., 19040., 20888., 22848., 13965.,
      15484., 17101., 18816., 10738., 12040., 13426., 14896., 7735.,  8820.,
      9975.,  11200., 8840.,  10080., 11400., 12800., 12272., 13760., 15344.,
      17024., 15960., 17696., 19544., 21504., 19776., 21760., 23872., 26112.,
      15960., 17696., 19544., 21504., 12272., 13760., 15344., 17024., 8840.,
      10080., 11400., 12800., 9945.,  11340., 12825., 14400., 13806., 15480.,
      17262., 19152., 17955., 19908., 21987., 24192., 22248., 24480., 26856.,
      29376., 17955., 19908., 21987., 24192., 13806., 15480., 17262., 19152.,
      9945.,  11340., 12825., 14400., 8840.,  10080., 11400., 12800., 12272.,
      13760., 15344., 17024., 15960., 17696., 19544., 21504., 19776., 21760.,
      23872., 26112., 15960., 17696., 19544., 21504., 12272., 13760., 15344.,
      17024., 8840.,  10080., 11400., 12800., 7735.,  8820.,  9975.,  11200.,
      10738., 12040., 13426., 14896., 13965., 15484., 17101., 18816., 17304.,
      19040., 20888., 22848., 13965., 15484., 17101., 18816., 10738., 12040.,
      13426., 14896., 7735.,  8820.,  9975.,  11200., 6630.,  7560.,  8550.,
      9600.,  9204.,  10320., 11508., 12768., 11970., 13272., 14658., 16128.,
      14832., 16320., 17904., 19584., 11970., 13272., 14658., 16128., 9204.,
      10320., 11508., 12768., 6630.,  7560.,  8550.,  9600.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3358.,  3640.,  3934.,  4240.,  3622.,  3928.,  4246.,  4576.,  3886.,
      4216.,  4558.,  4912.,  4150.,  4504.,  4870.,  5248.,  4414.,  4792.,
      5182.,  5584.,  4678.,  5080.,  5494.,  5920.,  4942.,  5368.,  5806.,
      6256.,  5470.,  5944.,  6430.,  6928.,  5734.,  6232.,  6742.,  7264.,
      5998.,  6520.,  7054.,  7600.,  6262.,  6808.,  7366.,  7936.,  6526.,
      7096.,  7678.,  8272.,  6790.,  7384.,  7990.,  8608.,  7054.,  7672.,
      8302.,  8944.,  7582.,  8248.,  8926.,  9616.,  7846.,  8536.,  9238.,
      9952.,  8110.,  8824.,  9550.,  10288., 8374.,  9112.,  9862.,  10624.,
      8638.,  9400.,  10174., 10960., 8902.,  9688.,  10486., 11296., 9166.,
      9976.,  10798., 11632., 9694.,  10552., 11422., 12304., 9958.,  10840.,
      11734., 12640., 10222., 11128., 12046., 12976., 10486., 11416., 12358.,
      13312., 10750., 11704., 12670., 13648., 11014., 11992., 12982., 13984.,
      11278., 12280., 13294., 14320., 11806., 12856., 13918., 14992., 12070.,
      13144., 14230., 15328., 12334., 13432., 14542., 15664., 12598., 13720.,
      14854., 16000., 12862., 14008., 15166., 16336., 13126., 14296., 15478.,
      16672., 13390., 14584., 15790., 17008., 13918., 15160., 16414., 17680.,
      14182., 15448., 16726., 18016., 14446., 15736., 17038., 18352., 14710.,
      16024., 17350., 18688., 14974., 16312., 17662., 19024., 15238., 16600.,
      17974., 19360., 15502., 16888., 18286., 19696., 16030., 17464., 18910.,
      20368., 16294., 17752., 19222., 20704., 16558., 18040., 19534., 21040.,
      16822., 18328., 19846., 21376., 17086., 18616., 20158., 21712., 17350.,
      18904., 20470., 22048., 17614., 19192., 20782., 22384.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4542.,  4812.,  5604.,  5904.,  6786.,  7116.,  8088.,  8448.,  6492.,
      6888.,  7920.,  8352.,  9492.,  9960.,  11208., 11712., 8802.,  9348.,
      10596., 11184., 12558., 13188., 14688., 15360., 11280., 12000., 13440.,
      14208., 15792., 16608., 18336., 19200., 8826.,  9540.,  10812., 11568.,
      12966., 13764., 15288., 16128., 7356.,  8040.,  9168.,  9888.,  11124.,
      11880., 13224., 14016., 7062.,  7692.,  8700.,  9360.,  10458., 11148.,
      12336., 13056., 5299.,  5614.,  6538.,  6888.,  7917.,  8302.,  9436.,
      9856.,  7574.,  8036.,  9240.,  9744.,  11074., 11620., 13076., 13664.,
      10269., 10906., 12362., 13048., 14651., 15386., 17136., 17920., 13160.,
      14000., 15680., 16576., 18424., 19376., 21392., 22400., 10297., 11130.,
      12614., 13496., 15127., 16058., 17836., 18816., 8582.,  9380.,  10696.,
      11536., 12978., 13860., 15428., 16352., 8239.,  8974.,  10150., 10920.,
      12201., 13006., 14392., 15232., 6056.,  6416.,  7472.,  7872.,  9048.,
      9488.,  10784., 11264., 8656.,  9184.,  10560., 11136., 12656., 13280.,
      14944., 15616., 11736., 12464., 14128., 14912., 16744., 17584., 19584.,
      20480., 15040., 16000., 17920., 18944., 21056., 22144., 24448., 25600.,
      11768., 12720., 14416., 15424., 17288., 18352., 20384., 21504., 9808.,
      10720., 12224., 13184., 14832., 15840., 17632., 18688., 9416.,  10256.,
      11600., 12480., 13944., 14864., 16448., 17408., 6813.,  7218.,  8406.,
      8856.,  10179., 10674., 12132., 12672., 9738.,  10332., 11880., 12528.,
      14238., 14940., 16812., 17568., 13203., 14022., 15894., 16776., 18837.,
      19782., 22032., 23040., 16920., 18000., 20160., 21312., 23688., 24912.,
      27504., 28800., 13239., 14310., 16218., 17352., 19449., 20646., 22932.,
      24192., 11034., 12060., 13752., 14832., 16686., 17820., 19836., 21024.,
      10593., 11538., 13050., 14040., 15687., 16722., 18504., 19584., 6056.,
      6416.,  7472.,  7872.,  9048.,  9488.,  10784., 11264., 8656.,  9184.,
      10560., 11136., 12656., 13280., 14944., 15616., 11736., 12464., 14128.,
      14912., 16744., 17584., 19584., 20480., 15040., 16000., 17920., 18944.,
      21056., 22144., 24448., 25600., 11768., 12720., 14416., 15424., 17288.,
      18352., 20384., 21504., 9808.,  10720., 12224., 13184., 14832., 15840.,
      17632., 18688., 9416.,  10256., 11600., 12480., 13944., 14864., 16448.,
      17408., 5299.,  5614.,  6538.,  6888.,  7917.,  8302.,  9436.,  9856.,
      7574.,  8036.,  9240.,  9744.,  11074., 11620., 13076., 13664., 10269.,
      10906., 12362., 13048., 14651., 15386., 17136., 17920., 13160., 14000.,
      15680., 16576., 18424., 19376., 21392., 22400., 10297., 11130., 12614.,
      13496., 15127., 16058., 17836., 18816., 8582.,  9380.,  10696., 11536.,
      12978., 13860., 15428., 16352., 8239.,  8974.,  10150., 10920., 12201.,
      13006., 14392., 15232., 4542.,  4812.,  5604.,  5904.,  6786.,  7116.,
      8088.,  8448.,  6492.,  6888.,  7920.,  8352.,  9492.,  9960.,  11208.,
      11712., 8802.,  9348.,  10596., 11184., 12558., 13188., 14688., 15360.,
      11280., 12000., 13440., 14208., 15792., 16608., 18336., 19200., 8826.,
      9540.,  10812., 11568., 12966., 13764., 15288., 16128., 7356.,  8040.,
      9168.,  9888.,  11124., 11880., 13224., 14016., 7062.,  7692.,  8700.,
      9360.,  10458., 11148., 12336., 13056.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6506.,  6716.,  7064.,  7280.,  7646.,  7868.,  8252.,  8480.,  7010.,
      7244.,  7616.,  7856.,  8246.,  8492.,  8900.,  9152.,  7514.,  7772.,
      8168.,  8432.,  8846.,  9116.,  9548.,  9824.,  8018.,  8300.,  8720.,
      9008.,  9446.,  9740.,  10196., 10496., 8522.,  8828.,  9272.,  9584.,
      10046., 10364., 10844., 11168., 9026.,  9356.,  9824.,  10160., 10646.,
      10988., 11492., 11840., 9530.,  9884.,  10376., 10736., 11246., 11612.,
      12140., 12512., 10538., 10940., 11480., 11888., 12446., 12860., 13436.,
      13856., 11042., 11468., 12032., 12464., 13046., 13484., 14084., 14528.,
      11546., 11996., 12584., 13040., 13646., 14108., 14732., 15200., 12050.,
      12524., 13136., 13616., 14246., 14732., 15380., 15872., 12554., 13052.,
      13688., 14192., 14846., 15356., 16028., 16544., 13058., 13580., 14240.,
      14768., 15446., 15980., 16676., 17216., 13562., 14108., 14792., 15344.,
      16046., 16604., 17324., 17888., 14570., 15164., 15896., 16496., 17246.,
      17852., 18620., 19232., 15074., 15692., 16448., 17072., 17846., 18476.,
      19268., 19904., 15578., 16220., 17000., 17648., 18446., 19100., 19916.,
      20576., 16082., 16748., 17552., 18224., 19046., 19724., 20564., 21248.,
      16586., 17276., 18104., 18800., 19646., 20348., 21212., 21920., 17090.,
      17804., 18656., 19376., 20246., 20972., 21860., 22592., 17594., 18332.,
      19208., 19952., 20846., 21596., 22508., 23264., 18602., 19388., 20312.,
      21104., 22046., 22844., 23804., 24608., 19106., 19916., 20864., 21680.,
      22646., 23468., 24452., 25280., 19610., 20444., 21416., 22256., 23246.,
      24092., 25100., 25952., 20114., 20972., 21968., 22832., 23846., 24716.,
      25748., 26624., 20618., 21500., 22520., 23408., 24446., 25340., 26396.,
      27296., 21122., 22028., 23072., 23984., 25046., 25964., 27044., 27968.,
      21626., 22556., 23624., 24560., 25646., 26588., 27692., 28640., 22634.,
      23612., 24728., 25712., 26846., 27836., 28988., 29984., 23138., 24140.,
      25280., 26288., 27446., 28460., 29636., 30656., 23642., 24668., 25832.,
      26864., 28046., 29084., 30284., 31328., 24146., 25196., 26384., 27440.,
      28646., 29708., 30932., 32000., 24650., 25724., 26936., 28016., 29246.,
      30332., 31580., 32672., 25154., 26252., 27488., 28592., 29846., 30956.,
      32228., 33344., 25658., 26780., 28040., 29168., 30446., 31580., 32876.,
      34016., 26666., 27836., 29144., 30320., 31646., 32828., 34172., 35360.,
      27170., 28364., 29696., 30896., 32246., 33452., 34820., 36032., 27674.,
      28892., 30248., 31472., 32846., 34076., 35468., 36704., 28178., 29420.,
      30800., 32048., 33446., 34700., 36116., 37376., 28682., 29948., 31352.,
      32624., 34046., 35324., 36764., 38048., 29186., 30476., 31904., 33200.,
      34646., 35948., 37412., 38720., 29690., 31004., 32456., 33776., 35246.,
      36572., 38060., 39392., 30698., 32060., 33560., 34928., 36446., 37820.,
      39356., 40736., 31202., 32588., 34112., 35504., 37046., 38444., 40004.,
      41408., 31706., 33116., 34664., 36080., 37646., 39068., 40652., 42080.,
      32210., 33644., 35216., 36656., 38246., 39692., 41300., 42752., 32714.,
      34172., 35768., 37232., 38846., 40316., 41948., 43424., 33218., 34700.,
      36320., 37808., 39446., 40940., 42596., 44096., 33722., 35228., 36872.,
      38384., 40046., 41564., 43244., 44768.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2862.,  3132.,  3402.,  3672.,  4380.,  4680.,  4980.,  5280.,  6138.,
      6468.,  6798.,  7128.,  8136.,  8496.,  8856.,  9216.,  4140.,  4536.,
      4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,
      9936.,  11160., 11664., 12168., 12672., 5538.,  6084.,  6630.,  7176.,
      8316.,  8904.,  9492.,  10080., 11430., 12060., 12690., 13320., 14880.,
      15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 5610.,  6324.,  7038.,  7752.,  8964.,  9720.,  10476., 11232.,
      12654., 13452., 14250., 15048., 16680., 17520., 18360., 19200., 6732.,
      7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096., 13428., 14184.,
      14940., 15696., 17208., 18000., 18792., 19584., 4662.,  5292.,  5922.,
      6552.,  7524.,  8184.,  8844.,  9504.,  10626., 11316., 12006., 12696.,
      13968., 14688., 15408., 16128., 3339.,  3654.,  3969.,  4284.,  5110.,
      5460.,  5810.,  6160.,  7161.,  7546.,  7931.,  8316.,  9492.,  9912.,
      10332., 10752., 4830.,  5292.,  5754.,  6216.,  7224.,  7728.,  8232.,
      8736.,  9954.,  10500., 11046., 11592., 13020., 13608., 14196., 14784.,
      6461.,  7098.,  7735.,  8372.,  9702.,  10388., 11074., 11760., 13335.,
      14070., 14805., 15540., 17360., 18144., 18928., 19712., 8456.,  9296.,
      10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984.,
      19936., 22064., 23072., 24080., 25088., 6545.,  7378.,  8211.,  9044.,
      10458., 11340., 12222., 13104., 14763., 15694., 16625., 17556., 19460.,
      20440., 21420., 22400., 7854.,  8652.,  9450.,  10248., 11592., 12432.,
      13272., 14112., 15666., 16548., 17430., 18312., 20076., 21000., 21924.,
      22848., 5439.,  6174.,  6909.,  7644.,  8778.,  9548.,  10318., 11088.,
      12397., 13202., 14007., 14812., 16296., 17136., 17976., 18816., 3816.,
      4176.,  4536.,  4896.,  5840.,  6240.,  6640.,  7040.,  8184.,  8624.,
      9064.,  9504.,  10848., 11328., 11808., 12288., 5520.,  6048.,  6576.,
      7104.,  8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624., 13248.,
      14880., 15552., 16224., 16896., 7384.,  8112.,  8840.,  9568.,  11088.,
      11872., 12656., 13440., 15240., 16080., 16920., 17760., 19840., 20736.,
      21632., 22528., 9664.,  10624., 11584., 12544., 14336., 15360., 16384.,
      17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672.,
      7480.,  8432.,  9384.,  10336., 11952., 12960., 13968., 14976., 16872.,
      17936., 19000., 20064., 22240., 23360., 24480., 25600., 8976.,  9888.,
      10800., 11712., 13248., 14208., 15168., 16128., 17904., 18912., 19920.,
      20928., 22944., 24000., 25056., 26112., 6216.,  7056.,  7896.,  8736.,
      10032., 10912., 11792., 12672., 14168., 15088., 16008., 16928., 18624.,
      19584., 20544., 21504., 4293.,  4698.,  5103.,  5508.,  6570.,  7020.,
      7470.,  7920.,  9207.,  9702.,  10197., 10692., 12204., 12744., 13284.,
      13824., 6210.,  6804.,  7398.,  7992.,  9288.,  9936.,  10584., 11232.,
      12798., 13500., 14202., 14904., 16740., 17496., 18252., 19008., 8307.,
      9126.,  9945.,  10764., 12474., 13356., 14238., 15120., 17145., 18090.,
      19035., 19980., 22320., 23328., 24336., 25344., 10872., 11952., 13032.,
      14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632.,
      28368., 29664., 30960., 32256., 8415.,  9486.,  10557., 11628., 13446.,
      14580., 15714., 16848., 18981., 20178., 21375., 22572., 25020., 26280.,
      27540., 28800., 10098., 11124., 12150., 13176., 14904., 15984., 17064.,
      18144., 20142., 21276., 22410., 23544., 25812., 27000., 28188., 29376.,
      6993.,  7938.,  8883.,  9828.,  11286., 12276., 13266., 14256., 15939.,
      16974., 18009., 19044., 20952., 22032., 23112., 24192., 3816.,  4176.,
      4536.,  4896.,  5840.,  6240.,  6640.,  7040.,  8184.,  8624.,  9064.,
      9504.,  10848., 11328., 11808., 12288., 5520.,  6048.,  6576.,  7104.,
      8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624., 13248., 14880.,
      15552., 16224., 16896., 7384.,  8112.,  8840.,  9568.,  11088., 11872.,
      12656., 13440., 15240., 16080., 16920., 17760., 19840., 20736., 21632.,
      22528., 9664.,  10624., 11584., 12544., 14336., 15360., 16384., 17408.,
      19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672., 7480.,
      8432.,  9384.,  10336., 11952., 12960., 13968., 14976., 16872., 17936.,
      19000., 20064., 22240., 23360., 24480., 25600., 8976.,  9888.,  10800.,
      11712., 13248., 14208., 15168., 16128., 17904., 18912., 19920., 20928.,
      22944., 24000., 25056., 26112., 6216.,  7056.,  7896.,  8736.,  10032.,
      10912., 11792., 12672., 14168., 15088., 16008., 16928., 18624., 19584.,
      20544., 21504., 3339.,  3654.,  3969.,  4284.,  5110.,  5460.,  5810.,
      6160.,  7161.,  7546.,  7931.,  8316.,  9492.,  9912.,  10332., 10752.,
      4830.,  5292.,  5754.,  6216.,  7224.,  7728.,  8232.,  8736.,  9954.,
      10500., 11046., 11592., 13020., 13608., 14196., 14784., 6461.,  7098.,
      7735.,  8372.,  9702.,  10388., 11074., 11760., 13335., 14070., 14805.,
      15540., 17360., 18144., 18928., 19712., 8456.,  9296.,  10136., 10976.,
      12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064.,
      23072., 24080., 25088., 6545.,  7378.,  8211.,  9044.,  10458., 11340.,
      12222., 13104., 14763., 15694., 16625., 17556., 19460., 20440., 21420.,
      22400., 7854.,  8652.,  9450.,  10248., 11592., 12432., 13272., 14112.,
      15666., 16548., 17430., 18312., 20076., 21000., 21924., 22848., 5439.,
      6174.,  6909.,  7644.,  8778.,  9548.,  10318., 11088., 12397., 13202.,
      14007., 14812., 16296., 17136., 17976., 18816., 2862.,  3132.,  3402.,
      3672.,  4380.,  4680.,  4980.,  5280.,  6138.,  6468.,  6798.,  7128.,
      8136.,  8496.,  8856.,  9216.,  4140.,  4536.,  4932.,  5328.,  6192.,
      6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,  11160., 11664.,
      12168., 12672., 5538.,  6084.,  6630.,  7176.,  8316.,  8904.,  9492.,
      10080., 11430., 12060., 12690., 13320., 14880., 15552., 16224., 16896.,
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 5610.,  6324.,
      7038.,  7752.,  8964.,  9720.,  10476., 11232., 12654., 13452., 14250.,
      15048., 16680., 17520., 18360., 19200., 6732.,  7416.,  8100.,  8784.,
      9936.,  10656., 11376., 12096., 13428., 14184., 14940., 15696., 17208.,
      18000., 18792., 19584., 4662.,  5292.,  5922.,  6552.,  7524.,  8184.,
      8844.,  9504.,  10626., 11316., 12006., 12696., 13968., 14688., 15408.,
      16128.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12802., 13012., 13222., 13432., 13912., 14128., 14344., 14560., 15070.,
      15292., 15514., 15736., 16276., 16504., 16732., 16960., 13786., 14020.,
      14254., 14488., 14992., 15232., 15472., 15712., 16246., 16492., 16738.,
      16984., 17548., 17800., 18052., 18304., 14770., 15028., 15286., 15544.,
      16072., 16336., 16600., 16864., 17422., 17692., 17962., 18232., 18820.,
      19096., 19372., 19648., 15754., 16036., 16318., 16600., 17152., 17440.,
      17728., 18016., 18598., 18892., 19186., 19480., 20092., 20392., 20692.,
      20992., 16738., 17044., 17350., 17656., 18232., 18544., 18856., 19168.,
      19774., 20092., 20410., 20728., 21364., 21688., 22012., 22336., 17722.,
      18052., 18382., 18712., 19312., 19648., 19984., 20320., 20950., 21292.,
      21634., 21976., 22636., 22984., 23332., 23680., 18706., 19060., 19414.,
      19768., 20392., 20752., 21112., 21472., 22126., 22492., 22858., 23224.,
      23908., 24280., 24652., 25024., 20674., 21076., 21478., 21880., 22552.,
      22960., 23368., 23776., 24478., 24892., 25306., 25720., 26452., 26872.,
      27292., 27712., 21658., 22084., 22510., 22936., 23632., 24064., 24496.,
      24928., 25654., 26092., 26530., 26968., 27724., 28168., 28612., 29056.,
      22642., 23092., 23542., 23992., 24712., 25168., 25624., 26080., 26830.,
      27292., 27754., 28216., 28996., 29464., 29932., 30400., 23626., 24100.,
      24574., 25048., 25792., 26272., 26752., 27232., 28006., 28492., 28978.,
      29464., 30268., 30760., 31252., 31744., 24610., 25108., 25606., 26104.,
      26872., 27376., 27880., 28384., 29182., 29692., 30202., 30712., 31540.,
      32056., 32572., 33088., 25594., 26116., 26638., 27160., 27952., 28480.,
      29008., 29536., 30358., 30892., 31426., 31960., 32812., 33352., 33892.,
      34432., 26578., 27124., 27670., 28216., 29032., 29584., 30136., 30688.,
      31534., 32092., 32650., 33208., 34084., 34648., 35212., 35776., 9858.,
      10196., 10534., 10872., 11480., 11824., 12168., 12512., 13150., 13500.,
      13850., 14200., 14868., 15224., 15580., 15936., 10842., 11204., 11566.,
      11928., 12560., 12928., 13296., 13664., 14326., 14700., 15074., 15448.,
      16140., 16520., 16900., 17280., 11826., 12212., 12598., 12984., 13640.,
      14032., 14424., 14816., 15502., 15900., 16298., 16696., 17412., 17816.,
      18220., 18624., 12810., 13220., 13630., 14040., 14720., 15136., 15552.,
      15968., 16678., 17100., 17522., 17944., 18684., 19112., 19540., 19968.,
      13794., 14228., 14662., 15096., 15800., 16240., 16680., 17120., 17854.,
      18300., 18746., 19192., 19956., 20408., 20860., 21312., 14778., 15236.,
      15694., 16152., 16880., 17344., 17808., 18272., 19030., 19500., 19970.,
      20440., 21228., 21704., 22180., 22656., 15762., 16244., 16726., 17208.,
      17960., 18448., 18936., 19424., 20206., 20700., 21194., 21688., 22500.,
      23000., 23500., 24000., 7234.,  7508.,  7782.,  8056.,  8600.,  8880.,
      9160.,  9440.,  10014., 10300., 10586., 10872., 11476., 11768., 12060.,
      12352., 8218.,  8516.,  8814.,  9112.,  9680.,  9984.,  10288., 10592.,
      11190., 11500., 11810., 12120., 12748., 13064., 13380., 13696., 9202.,
      9524.,  9846.,  10168., 10760., 11088., 11416., 11744., 12366., 12700.,
      13034., 13368., 14020., 14360., 14700., 15040., 10186., 10532., 10878.,
      11224., 11840., 12192., 12544., 12896., 13542., 13900., 14258., 14616.,
      15292., 15656., 16020., 16384., 11170., 11540., 11910., 12280., 12920.,
      13296., 13672., 14048., 14718., 15100., 15482., 15864., 16564., 16952.,
      17340., 17728., 12154., 12548., 12942., 13336., 14000., 14400., 14800.,
      15200., 15894., 16300., 16706., 17112., 17836., 18248., 18660., 19072.,
      13138., 13556., 13974., 14392., 15080., 15504., 15928., 16352., 17070.,
      17500., 17930., 18360., 19108., 19544., 19980., 20416., 12802., 13012.,
      13222., 13432., 13912., 14128., 14344., 14560., 15070., 15292., 15514.,
      15736., 16276., 16504., 16732., 16960., 13786., 14020., 14254., 14488.,
      14992., 15232., 15472., 15712., 16246., 16492., 16738., 16984., 17548.,
      17800., 18052., 18304., 14770., 15028., 15286., 15544., 16072., 16336.,
      16600., 16864., 17422., 17692., 17962., 18232., 18820., 19096., 19372.,
      19648., 15754., 16036., 16318., 16600., 17152., 17440., 17728., 18016.,
      18598., 18892., 19186., 19480., 20092., 20392., 20692., 20992., 16738.,
      17044., 17350., 17656., 18232., 18544., 18856., 19168., 19774., 20092.,
      20410., 20728., 21364., 21688., 22012., 22336., 17722., 18052., 18382.,
      18712., 19312., 19648., 19984., 20320., 20950., 21292., 21634., 21976.,
      22636., 22984., 23332., 23680., 18706., 19060., 19414., 19768., 20392.,
      20752., 21112., 21472., 22126., 22492., 22858., 23224., 23908., 24280.,
      24652., 25024., 20674., 21076., 21478., 21880., 22552., 22960., 23368.,
      23776., 24478., 24892., 25306., 25720., 26452., 26872., 27292., 27712.,
      21658., 22084., 22510., 22936., 23632., 24064., 24496., 24928., 25654.,
      26092., 26530., 26968., 27724., 28168., 28612., 29056., 22642., 23092.,
      23542., 23992., 24712., 25168., 25624., 26080., 26830., 27292., 27754.,
      28216., 28996., 29464., 29932., 30400., 23626., 24100., 24574., 25048.,
      25792., 26272., 26752., 27232., 28006., 28492., 28978., 29464., 30268.,
      30760., 31252., 31744., 24610., 25108., 25606., 26104., 26872., 27376.,
      27880., 28384., 29182., 29692., 30202., 30712., 31540., 32056., 32572.,
      33088., 25594., 26116., 26638., 27160., 27952., 28480., 29008., 29536.,
      30358., 30892., 31426., 31960., 32812., 33352., 33892., 34432., 26578.,
      27124., 27670., 28216., 29032., 29584., 30136., 30688., 31534., 32092.,
      32650., 33208., 34084., 34648., 35212., 35776., 9858.,  10196., 10534.,
      10872., 11480., 11824., 12168., 12512., 13150., 13500., 13850., 14200.,
      14868., 15224., 15580., 15936., 10842., 11204., 11566., 11928., 12560.,
      12928., 13296., 13664., 14326., 14700., 15074., 15448., 16140., 16520.,
      16900., 17280., 11826., 12212., 12598., 12984., 13640., 14032., 14424.,
      14816., 15502., 15900., 16298., 16696., 17412., 17816., 18220., 18624.,
      12810., 13220., 13630., 14040., 14720., 15136., 15552., 15968., 16678.,
      17100., 17522., 17944., 18684., 19112., 19540., 19968., 13794., 14228.,
      14662., 15096., 15800., 16240., 16680., 17120., 17854., 18300., 18746.,
      19192., 19956., 20408., 20860., 21312., 14778., 15236., 15694., 16152.,
      16880., 17344., 17808., 18272., 19030., 19500., 19970., 20440., 21228.,
      21704., 22180., 22656., 15762., 16244., 16726., 17208., 17960., 18448.,
      18936., 19424., 20206., 20700., 21194., 21688., 22500., 23000., 23500.,
      24000.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9442.,  10294., 11192., 12290., 10696., 9138.,  7622.,  9686.,  11013.,
      12384., 14240., 12720., 11241., 9810.,  10392., 12224., 14112., 16784.,
      15072., 13680., 12328., 14530., 17520., 20560., 24665., 20560., 17520.,
      14530., 12328., 13680., 15072., 16784., 14112., 12224., 10392., 9810.,
      11241., 12720., 14240., 12384., 11013., 9686.,  7622.,  9138.,  10696.,
      12290., 11192., 10294., 9442.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      663.,  708.,  753.,  798.,  843.,  888.,  933.,  1068., 1113., 1158.,
      1203., 1248., 1293., 1338., 1473., 1518., 1563., 1608., 1653., 1698.,
      1743., 1878., 1923., 1968., 2013., 2058., 2103., 2148., 2283., 2328.,
      2373., 2418., 2463., 2508., 2553., 2688., 2733., 2778., 2823., 2868.,
      2913., 2958., 3093., 3138., 3183., 3228., 3273., 3318., 3363.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8700.,  9220.,  9939.,  10540., 11200., 11888., 12631., 13412., 11632.,
      12336., 10071., 10692., 8664.,  9196.,  10187., 10860., 12571., 13354.,
      14940., 15840., 17728., 18752., 16772., 17696., 15009., 15826., 12421.,
      13124., 11296., 12016., 12732., 13568., 14176., 15136., 16348., 17440.,
      14400., 15360., 12940., 13792., 11376., 12112., 12879., 13668., 15752.,
      16672., 18620., 19680., 22489., 23698., 19252., 20320., 16682., 17632.,
      13741., 14564., 10800., 11568., 12644., 13536., 14464., 15488., 16532.,
      17696., 14720., 15744., 13556., 14464., 11744., 12528., 11791., 12484.,
      14993., 15794., 16140., 17056., 17266., 18304., 14164., 15072., 12135.,
      12938., 10169., 10860., 7192.,  7756.,  8445.,  9092.,  9712.,  10448.,
      10981., 11812., 9952.,  10672., 9393.,  10028., 8580.,  9124.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1227., 1326., 1308., 1416., 1389., 1506., 1470., 1596., 1551., 1686.,
      1632., 1776., 1713., 1866., 1956., 2136., 2037., 2226., 2118., 2316.,
      2199., 2406., 2280., 2496., 2361., 2586., 2442., 2676., 2685., 2946.,
      2766., 3036., 2847., 3126., 2928., 3216., 3009., 3306., 3090., 3396.,
      3171., 3486., 3414., 3756., 3495., 3846., 3576., 3936., 3657., 4026.,
      3738., 4116., 3819., 4206., 3900., 4296., 4143., 4566., 4224., 4656.,
      4305., 4746., 4386., 4836., 4467., 4926., 4548., 5016., 4629., 5106.,
      4872., 5376., 4953., 5466., 5034., 5556., 5115., 5646., 5196., 5736.,
      5277., 5826., 5358., 5916., 5601., 6186., 5682., 6276., 5763., 6366.,
      5844., 6456., 5925., 6546., 6006., 6636., 6087., 6726.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7312.,  7832.,  8352.,  8872.,  8173.,  8774.,  9375.,  9976.,  9840.,
      10528., 11216., 11904., 11585., 12366., 13147., 13928., 10528., 11232.,
      11936., 12640., 9153.,  9774.,  10395., 11016., 8188.,  8720.,  9252.,
      9784.,  9589.,  10262., 10935., 11608., 11463., 12246., 13029., 13812.,
      13332., 14232., 15132., 16032., 15488., 16512., 17536., 18560., 14316.,
      15240., 16164., 17088., 12657., 13474., 14291., 15108., 10507., 11210.,
      11913., 12616., 10512., 11232., 11952., 12672., 12244., 13080., 13916.,
      14752., 14272., 15232., 16192., 17152., 16884., 17976., 19068., 20160.,
      15424., 16384., 17344., 18304., 13252., 14104., 14956., 15808., 11328.,
      12064., 12800., 13536., 11337., 12126., 12915., 13704., 13432., 14352.,
      15272., 16192., 16084., 17144., 18204., 19264., 19577., 20786., 21995.,
      23204., 16700., 17768., 18836., 19904., 14494., 15444., 16394., 17344.,
      12291., 13114., 13937., 14760., 11104., 11872., 12640., 13408., 13516.,
      14408., 15300., 16192., 16768., 17792., 18816., 19840., 18076., 19240.,
      20404., 21568., 15360., 16384., 17408., 18432., 13436., 14344., 15252.,
      16160., 11216., 12000., 12784., 13568., 10185., 10878., 11571., 12264.,
      13153., 13954., 14755., 15556., 14212., 15128., 16044., 16960., 15126.,
      16164., 17202., 18240., 13052., 13960., 14868., 15776., 11307., 12110.,
      12913., 13716., 9951.,  10642., 11333., 12024., 9244.,  9808.,  10372.,
      10936., 10003., 10650., 11297., 11944., 10688., 11424., 12160., 12896.,
      11275., 12106., 12937., 13768., 9744.,  10464., 11184., 11904., 9063.,
      9698.,  10333., 10968., 8392.,  8936.,  9480.,  10024.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2355.,  2454.,  2553.,  2652.,  2508.,  2616.,  2724.,  2832.,  2661.,
      2778.,  2895.,  3012.,  2814.,  2940.,  3066.,  3192.,  2967.,  3102.,
      3237.,  3372.,  3120.,  3264.,  3408.,  3552.,  3273.,  3426.,  3579.,
      3732.,  3732.,  3912.,  4092.,  4272.,  3885.,  4074.,  4263.,  4452.,
      4038.,  4236.,  4434.,  4632.,  4191.,  4398.,  4605.,  4812.,  4344.,
      4560.,  4776.,  4992.,  4497.,  4722.,  4947.,  5172.,  4650.,  4884.,
      5118.,  5352.,  5109.,  5370.,  5631.,  5892.,  5262.,  5532.,  5802.,
      6072.,  5415.,  5694.,  5973.,  6252.,  5568.,  5856.,  6144.,  6432.,
      5721.,  6018.,  6315.,  6612.,  5874.,  6180.,  6486.,  6792.,  6027.,
      6342.,  6657.,  6972.,  6486.,  6828.,  7170.,  7512.,  6639.,  6990.,
      7341.,  7692.,  6792.,  7152.,  7512.,  7872.,  6945.,  7314.,  7683.,
      8052.,  7098.,  7476.,  7854.,  8232.,  7251.,  7638.,  8025.,  8412.,
      7404.,  7800.,  8196.,  8592.,  7863.,  8286.,  8709.,  9132.,  8016.,
      8448.,  8880.,  9312.,  8169.,  8610.,  9051.,  9492.,  8322.,  8772.,
      9222.,  9672.,  8475.,  8934.,  9393.,  9852.,  8628.,  9096.,  9564.,
      10032., 8781.,  9258.,  9735.,  10212., 9240.,  9744.,  10248., 10752.,
      9393.,  9906.,  10419., 10932., 9546.,  10068., 10590., 11112., 9699.,
      10230., 10761., 11292., 9852.,  10392., 10932., 11472., 10005., 10554.,
      11103., 11652., 10158., 10716., 11274., 11832., 10617., 11202., 11787.,
      12372., 10770., 11364., 11958., 12552., 10923., 11526., 12129., 12732.,
      11076., 11688., 12300., 12912., 11229., 11850., 12471., 13092., 11382.,
      12012., 12642., 13272., 11535., 12174., 12813., 13452.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10044., 11208., 10874., 12248., 11088., 12640., 11814., 13576., 10416.,
      12000., 8810.,  10184., 7372.,  8536.,  9466.,  10840., 12033., 13652.,
      14552., 16384., 18147., 20224., 17784., 19648., 16657., 18276., 12650.,
      14024., 11088., 12640., 12504., 14336., 13472., 15552., 15112., 17472.,
      13632., 15744., 12408., 14272., 10800., 12384., 13990., 15752., 17955.,
      20032., 22024., 24384., 27281., 29924., 22024., 24384., 17955., 20032.,
      13990., 15752., 10800., 12384., 12408., 14272., 13632., 15744., 15112.,
      17472., 13472., 15552., 12504., 14336., 11088., 12640., 12650., 14024.,
      16657., 18276., 17784., 19648., 18147., 20224., 14552., 16384., 12033.,
      13652., 9466.,  10840., 7372.,  8536.,  8810.,  10184., 10416., 12000.,
      11814., 13576., 11088., 12640., 10874., 12248., 10044., 11208.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2373.,  2652.,  2535.,  2832.,  2697.,  3012.,  2859.,  3192.,  3021.,
      3372.,  3183.,  3552.,  3345.,  3732.,  3831.,  4272.,  3993.,  4452.,
      4155.,  4632.,  4317.,  4812.,  4479.,  4992.,  4641.,  5172.,  4803.,
      5352.,  5289.,  5892.,  5451.,  6072.,  5613.,  6252.,  5775.,  6432.,
      5937.,  6612.,  6099.,  6792.,  6261.,  6972.,  6747.,  7512.,  6909.,
      7692.,  7071.,  7872.,  7233.,  8052.,  7395.,  8232.,  7557.,  8412.,
      7719.,  8592.,  8205.,  9132.,  8367.,  9312.,  8529.,  9492.,  8691.,
      9672.,  8853.,  9852.,  9015.,  10032., 9177.,  10212., 9663.,  10752.,
      9825.,  10932., 9987.,  11112., 10149., 11292., 10311., 11472., 10473.,
      11652., 10635., 11832., 11121., 12372., 11283., 12552., 11445., 12732.,
      11607., 12912., 11769., 13092., 11931., 13272., 12093., 13452.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8140.,  8696.,  9856.,  10448., 8812.,  9460.,  10814., 11504., 9776.,
      10496., 12032., 12800., 11272., 12076., 13814., 14672., 10224., 10944.,
      12480., 13248., 9316.,  9940.,  11254., 11920., 8948.,  9464.,  10568.,
      11120., 8956.,  9620.,  10990., 11696., 10581., 11362., 12970., 13800.,
      12160., 13040., 14872., 15808., 14821., 15814., 17888., 18944., 14352.,
      15248., 17096., 18048., 13553., 14338., 15942., 16776., 10336., 10996.,
      12370., 13072., 9776.,  10496., 12032., 12800., 11616., 12464., 14264.,
      15168., 14144., 15104., 17152., 18176., 17328., 18416., 20728., 21888.,
      16960., 17920., 19968., 20992., 13728., 14576., 16376., 17280., 10608.,
      11328., 12864., 13632., 11960., 12812., 14598., 15504., 14901., 15910.,
      18000., 19072., 18160., 19312., 21688., 22912., 22561., 23842., 26486.,
      27848., 17952., 19088., 21448., 22656., 14425., 15430., 17492., 18560.,
      11540., 12396., 14146., 15056., 12240., 13056., 14688., 15552., 15184.,
      16144., 18056., 19072., 19136., 20224., 22400., 23552., 18784., 19984.,
      22408., 23680., 15008., 16064., 18208., 19328., 12656., 13584., 15464.,
      16448., 10352., 11136., 12736., 13568., 10132., 10804., 12166., 12880.,
      13553., 14338., 15942., 16776., 14560., 15472., 17336., 18304., 14889.,
      15910., 17988., 19072., 12624., 13520., 15368., 16320., 10989., 11778.,
      13410., 14248., 9752.,  10420., 11818., 12528., 10580., 11192., 12392.,
      13040., 11152., 11860., 13282., 14032., 11856., 12672., 14304., 15168.,
      11972., 12876., 14674., 15632., 10352., 11136., 12736., 13568., 9640.,
      10324., 11738., 12464., 8700.,  9272.,  10480., 11088.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4557.,  4746.,  5106.,  5304.,  4863.,  5070.,  5448.,  5664.,  5169.,
      5394.,  5790.,  6024.,  5475.,  5718.,  6132.,  6384.,  5781.,  6042.,
      6474.,  6744.,  6087.,  6366.,  6816.,  7104.,  6393.,  6690.,  7158.,
      7464.,  7311.,  7662.,  8184.,  8544.,  7617.,  7986.,  8526.,  8904.,
      7923.,  8310.,  8868.,  9264.,  8229.,  8634.,  9210.,  9624.,  8535.,
      8958.,  9552.,  9984.,  8841.,  9282.,  9894.,  10344., 9147.,  9606.,
      10236., 10704., 10065., 10578., 11262., 11784., 10371., 10902., 11604.,
      12144., 10677., 11226., 11946., 12504., 10983., 11550., 12288., 12864.,
      11289., 11874., 12630., 13224., 11595., 12198., 12972., 13584., 11901.,
      12522., 13314., 13944., 12819., 13494., 14340., 15024., 13125., 13818.,
      14682., 15384., 13431., 14142., 15024., 15744., 13737., 14466., 15366.,
      16104., 14043., 14790., 15708., 16464., 14349., 15114., 16050., 16824.,
      14655., 15438., 16392., 17184., 15573., 16410., 17418., 18264., 15879.,
      16734., 17760., 18624., 16185., 17058., 18102., 18984., 16491., 17382.,
      18444., 19344., 16797., 17706., 18786., 19704., 17103., 18030., 19128.,
      20064., 17409., 18354., 19470., 20424., 18327., 19326., 20496., 21504.,
      18633., 19650., 20838., 21864., 18939., 19974., 21180., 22224., 19245.,
      20298., 21522., 22584., 19551., 20622., 21864., 22944., 19857., 20946.,
      22206., 23304., 20163., 21270., 22548., 23664., 21081., 22242., 23574.,
      24744., 21387., 22566., 23916., 25104., 21693., 22890., 24258., 25464.,
      21999., 23214., 24600., 25824., 22305., 23538., 24942., 26184., 22611.,
      23862., 25284., 26544., 22917., 24186., 25626., 26904.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7116.,  7672.,  8228.,  8784.,  9968.,  10560., 11152., 11744., 8528.,
      9176.,  9824.,  10472., 11850., 12540., 13230., 13920., 10640., 11360.,
      12080., 12800., 14336., 15104., 15872., 16640., 10220., 11024., 11828.,
      12632., 14354., 15212., 16070., 16928., 8464.,  9184.,  9904.,  10624.,
      12160., 12928., 13696., 14464., 7512.,  8136.,  8760.,  9384.,  10706.,
      11372., 12038., 12704., 7172.,  7688.,  8204.,  8720.,  9832.,  10384.,
      10936., 11488., 8800.,  9464.,  10128., 10792., 12186., 12892., 13598.,
      14304., 11165., 11946., 12727., 13508., 15126., 15956., 16786., 17616.,
      10896., 11776., 12656., 13536., 15368., 16304., 17240., 18176., 12265.,
      13258., 14251., 15244., 17312., 18368., 19424., 20480., 11680., 12576.,
      13472., 14368., 16216., 17168., 18120., 19072., 10961., 11746., 12531.,
      13316., 14922., 15756., 16590., 17424., 8460.,  9120.,  9780.,  10440.,
      11814., 12516., 13218., 13920., 10640., 11360., 12080., 12800., 14336.,
      15104., 15872., 16640., 10864., 11712., 12560., 13408., 15208., 16112.,
      17016., 17920., 11968., 12928., 13888., 14848., 16896., 17920., 18944.,
      19968., 13856., 14944., 16032., 17120., 19432., 20592., 21752., 22912.,
      13504., 14464., 15424., 16384., 18432., 19456., 20480., 21504., 10992.,
      11840., 12688., 13536., 15336., 16240., 17144., 18048., 8720.,  9440.,
      10160., 10880., 12416., 13184., 13952., 14720., 10524., 11376., 12228.,
      13080., 14850., 15756., 16662., 17568., 12409., 13418., 14427., 15436.,
      17520., 18592., 19664., 20736., 14432., 15584., 16736., 17888., 20264.,
      21488., 22712., 23936., 18241., 19522., 20803., 22084., 24730., 26092.,
      27454., 28816., 14544., 15680., 16816., 17952., 20312., 21520., 22728.,
      23936., 12069., 13074., 14079., 15084., 17148., 18216., 19284., 20352.,
      10960., 11816., 12672., 13528., 15286., 16196., 17106., 18016., 10352.,
      11168., 11984., 12800., 14432., 15296., 16160., 17024., 12256., 13216.,
      14176., 15136., 17048., 18064., 19080., 20096., 15680., 16768., 17856.,
      18944., 21120., 22272., 23424., 24576., 15120., 16320., 17520., 18720.,
      21144., 22416., 23688., 24960., 12576., 13632., 14688., 15744., 17888.,
      19008., 20128., 21248., 11840., 12768., 13696., 14624., 16504., 17488.,
      18472., 19456., 11216., 12000., 12784., 13568., 15168., 16000., 16832.,
      17664., 8072.,  8744.,  9416.,  10088., 11458., 12172., 12886., 13600.,
      10961., 11746., 12531., 13316., 14922., 15756., 16590., 17424., 11568.,
      12480., 13392., 14304., 16168., 17136., 18104., 19072., 12469., 13490.,
      14511., 15532., 17612., 18696., 19780., 20864., 11808., 12704., 13600.,
      14496., 16344., 17296., 18248., 19200., 11301., 12090., 12879., 13668.,
      15294., 16132., 16970., 17808., 8468.,  9136.,  9804.,  10472., 11854.,
      12564., 13274., 13984., 8804.,  9416.,  10028., 10640., 11848., 12496.,
      13144., 13792., 9020.,  9728.,  10436., 11144., 12566., 13316., 14066.,
      14816., 10096., 10912., 11728., 12544., 14176., 15040., 15904., 16768.,
      11264., 12168., 13072., 13976., 15782., 16740., 17698., 18656., 11216.,
      12000., 12784., 13568., 15168., 16000., 16832., 17664., 8740.,  9424.,
      10108., 10792., 12190., 12916., 13642., 14368., 6716.,  7288.,  7860.,
      8432.,  9600.,  10208., 10816., 11424.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8925.,  9114.,  9303.,  9492.,  10014., 10212., 10410., 10608., 9519.,
      9726.,  9933.,  10140., 10680., 10896., 11112., 11328., 10113., 10338.,
      10563., 10788., 11346., 11580., 11814., 12048., 10707., 10950., 11193.,
      11436., 12012., 12264., 12516., 12768., 11301., 11562., 11823., 12084.,
      12678., 12948., 13218., 13488., 11895., 12174., 12453., 12732., 13344.,
      13632., 13920., 14208., 12489., 12786., 13083., 13380., 14010., 14316.,
      14622., 14928., 14271., 14622., 14973., 15324., 16008., 16368., 16728.,
      17088., 14865., 15234., 15603., 15972., 16674., 17052., 17430., 17808.,
      15459., 15846., 16233., 16620., 17340., 17736., 18132., 18528., 16053.,
      16458., 16863., 17268., 18006., 18420., 18834., 19248., 16647., 17070.,
      17493., 17916., 18672., 19104., 19536., 19968., 17241., 17682., 18123.,
      18564., 19338., 19788., 20238., 20688., 17835., 18294., 18753., 19212.,
      20004., 20472., 20940., 21408., 19617., 20130., 20643., 21156., 22002.,
      22524., 23046., 23568., 20211., 20742., 21273., 21804., 22668., 23208.,
      23748., 24288., 20805., 21354., 21903., 22452., 23334., 23892., 24450.,
      25008., 21399., 21966., 22533., 23100., 24000., 24576., 25152., 25728.,
      21993., 22578., 23163., 23748., 24666., 25260., 25854., 26448., 22587.,
      23190., 23793., 24396., 25332., 25944., 26556., 27168., 23181., 23802.,
      24423., 25044., 25998., 26628., 27258., 27888., 24963., 25638., 26313.,
      26988., 27996., 28680., 29364., 30048., 25557., 26250., 26943., 27636.,
      28662., 29364., 30066., 30768., 26151., 26862., 27573., 28284., 29328.,
      30048., 30768., 31488., 26745., 27474., 28203., 28932., 29994., 30732.,
      31470., 32208., 27339., 28086., 28833., 29580., 30660., 31416., 32172.,
      32928., 27933., 28698., 29463., 30228., 31326., 32100., 32874., 33648.,
      28527., 29310., 30093., 30876., 31992., 32784., 33576., 34368., 30309.,
      31146., 31983., 32820., 33990., 34836., 35682., 36528., 30903., 31758.,
      32613., 33468., 34656., 35520., 36384., 37248., 31497., 32370., 33243.,
      34116., 35322., 36204., 37086., 37968., 32091., 32982., 33873., 34764.,
      35988., 36888., 37788., 38688., 32685., 33594., 34503., 35412., 36654.,
      37572., 38490., 39408., 33279., 34206., 35133., 36060., 37320., 38256.,
      39192., 40128., 33873., 34818., 35763., 36708., 37986., 38940., 39894.,
      40848., 35655., 36654., 37653., 38652., 39984., 40992., 42000., 43008.,
      36249., 37266., 38283., 39300., 40650., 41676., 42702., 43728., 36843.,
      37878., 38913., 39948., 41316., 42360., 43404., 44448., 37437., 38490.,
      39543., 40596., 41982., 43044., 44106., 45168., 38031., 39102., 40173.,
      41244., 42648., 43728., 44808., 45888., 38625., 39714., 40803., 41892.,
      43314., 44412., 45510., 46608., 39219., 40326., 41433., 42540., 43980.,
      45096., 46212., 47328., 41001., 42162., 43323., 44484., 45978., 47148.,
      48318., 49488., 41595., 42774., 43953., 45132., 46644., 47832., 49020.,
      50208., 42189., 43386., 44583., 45780., 47310., 48516., 49722., 50928.,
      42783., 43998., 45213., 46428., 47976., 49200., 50424., 51648., 43377.,
      44610., 45843., 47076., 48642., 49884., 51126., 52368., 43971., 45222.,
      46473., 47724., 49308., 50568., 51828., 53088., 44565., 45834., 47103.,
      48372., 49974., 51252., 52530., 53808.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7940.,  9072.,  10276., 11552., 8074.,  9384.,  10778., 12256., 8688.,
      10176., 11760., 13440., 10198., 11864., 13638., 15520., 10224., 11712.,
      13296., 14976., 10154., 11432., 12794., 14240., 10756., 11824., 12964.,
      14176., 8074.,  9384.,  10778., 12256., 8913.,  10436., 12057., 13776.,
      10584., 12320., 14168., 16128., 13487., 15436., 17511., 19712., 14168.,
      15904., 17752., 19712., 14833., 16324., 17913., 19600., 10154., 11432.,
      12794., 14240., 8688.,  10176., 11760., 13440., 10584., 12320., 14168.,
      16128., 13632., 15616., 17728., 19968., 18216., 20448., 22824., 25344.,
      19776., 21760., 23872., 26112., 14168., 15904., 17752., 19712., 10224.,
      11712., 13296., 14976., 10198., 11864., 13638., 15520., 13487., 15436.,
      17511., 19712., 18216., 20448., 22824., 25344., 24721., 27204., 29849.,
      32656., 18216., 20448., 22824., 25344., 13487., 15436., 17511., 19712.,
      10198., 11864., 13638., 15520., 10224., 11712., 13296., 14976., 14168.,
      15904., 17752., 19712., 19776., 21760., 23872., 26112., 18216., 20448.,
      22824., 25344., 13632., 15616., 17728., 19968., 10584., 12320., 14168.,
      16128., 8688.,  10176., 11760., 13440., 10154., 11432., 12794., 14240.,
      14833., 16324., 17913., 19600., 14168., 15904., 17752., 19712., 13487.,
      15436., 17511., 19712., 10584., 12320., 14168., 16128., 8913.,  10436.,
      12057., 13776., 8074.,  9384.,  10778., 12256., 10756., 11824., 12964.,
      14176., 10154., 11432., 12794., 14240., 10224., 11712., 13296., 14976.,
      10198., 11864., 13638., 15520., 8688.,  10176., 11760., 13440., 8074.,
      9384.,  10778., 12256., 7940.,  9072.,  10276., 11552.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8961.,  9492.,  10041., 10608., 9573.,  10140., 10725., 11328., 10185.,
      10788., 11409., 12048., 10797., 11436., 12093., 12768., 11409., 12084.,
      12777., 13488., 12021., 12732., 13461., 14208., 12633., 13380., 14145.,
      14928., 14469., 15324., 16197., 17088., 15081., 15972., 16881., 17808.,
      15693., 16620., 17565., 18528., 16305., 17268., 18249., 19248., 16917.,
      17916., 18933., 19968., 17529., 18564., 19617., 20688., 18141., 19212.,
      20301., 21408., 19977., 21156., 22353., 23568., 20589., 21804., 23037.,
      24288., 21201., 22452., 23721., 25008., 21813., 23100., 24405., 25728.,
      22425., 23748., 25089., 26448., 23037., 24396., 25773., 27168., 23649.,
      25044., 26457., 27888., 25485., 26988., 28509., 30048., 26097., 27636.,
      29193., 30768., 26709., 28284., 29877., 31488., 27321., 28932., 30561.,
      32208., 27933., 29580., 31245., 32928., 28545., 30228., 31929., 33648.,
      29157., 30876., 32613., 34368., 30993., 32820., 34665., 36528., 31605.,
      33468., 35349., 37248., 32217., 34116., 36033., 37968., 32829., 34764.,
      36717., 38688., 33441., 35412., 37401., 39408., 34053., 36060., 38085.,
      40128., 34665., 36708., 38769., 40848., 36501., 38652., 40821., 43008.,
      37113., 39300., 41505., 43728., 37725., 39948., 42189., 44448., 38337.,
      40596., 42873., 45168., 38949., 41244., 43557., 45888., 39561., 41892.,
      44241., 46608., 40173., 42540., 44925., 47328., 42009., 44484., 46977.,
      49488., 42621., 45132., 47661., 50208., 43233., 45780., 48345., 50928.,
      43845., 46428., 49029., 51648., 44457., 47076., 49713., 52368., 45069.,
      47724., 50397., 53088., 45681., 48372., 51081., 53808.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6836.,  7400.,  8520.,  9120.,  10348., 10984., 12320., 12992., 8462.,
      9108.,  10400., 11088., 12506., 13236., 14780., 15552., 11280., 12000.,
      13440., 14208., 15792., 16608., 18336., 19200., 9754.,  10540., 12136.,
      12976., 14734., 15628., 17548., 18496., 8208.,  8928.,  10368., 11136.,
      12720., 13536., 15264., 16128., 7518.,  8148.,  9392.,  10064., 11434.,
      12148., 13644., 14400., 8292.,  8808.,  9848.,  10400., 11548., 12136.,
      13392., 14016., 8462.,  9108.,  10400., 11088., 12506., 13236., 14780.,
      15552., 11705., 12450., 13934., 14728., 16359., 17202., 18980., 19872.,
      10472., 11312., 12992., 13888., 15736., 16688., 18704., 19712., 10683.,
      11614., 13494., 14488., 16557., 17614., 19872., 20992., 10472., 11312.,
      12992., 13888., 15736., 16688., 18704., 19712., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 7510.,  8116.,  9352.,  10000.,
      11362., 12052., 13540., 14272., 11280., 12000., 13440., 14208., 15792.,
      16608., 18336., 19200., 10472., 11312., 12992., 13888., 15736., 16688.,
      18704., 19712., 10944., 11904., 13824., 14848., 16960., 18048., 20352.,
      21504., 13464., 14544., 16704., 17856., 20232., 21456., 24048., 25344.,
      15040., 16000., 17920., 18944., 21056., 22144., 24448., 25600., 10472.,
      11312., 12992., 13888., 15736., 16688., 18704., 19712., 8208.,  8928.,
      10368., 11136., 12720., 13536., 15264., 16128., 9754.,  10540., 12136.,
      12976., 14734., 15628., 17548., 18496., 10683., 11614., 13494., 14488.,
      16557., 17614., 19872., 20992., 13464., 14544., 16704., 17856., 20232.,
      21456., 24048., 25344., 18801., 20002., 22406., 23688., 26335., 27698.,
      30588., 32032., 13464., 14544., 16704., 17856., 20232., 21456., 24048.,
      25344., 10819., 11774., 13662., 14680., 16757., 17838., 20104., 21248.,
      10162., 10988., 12608., 13488., 15270., 16204., 18148., 19136., 8208.,
      8928.,  10368., 11136., 12720., 13536., 15264., 16128., 10472., 11312.,
      12992., 13888., 15736., 16688., 18704., 19712., 15040., 16000., 17920.,
      18944., 21056., 22144., 24448., 25600., 13464., 14544., 16704., 17856.,
      20232., 21456., 24048., 25344., 10944., 11904., 13824., 14848., 16960.,
      18048., 20352., 21504., 10472., 11312., 12992., 13888., 15736., 16688.,
      18704., 19712., 11280., 12000., 13440., 14208., 15792., 16608., 18336.,
      19200., 7518.,  8148.,  9392.,  10064., 11434., 12148., 13644., 14400.,
      11281., 12002., 13446., 14216., 15807., 16626., 18364., 19232., 10472.,
      11312., 12992., 13888., 15736., 16688., 18704., 19712., 10819., 11774.,
      13662., 14680., 16757., 17838., 20104., 21248., 10472., 11312., 12992.,
      13888., 15736., 16688., 18704., 19712., 11433., 12162., 13630., 14408.,
      16023., 16850., 18612., 19488., 7782.,  8404.,  9656.,  10320., 11698.,
      12404., 13908., 14656., 8292.,  8808.,  9848.,  10400., 11548., 12136.,
      13392., 14016., 7510.,  8116.,  9352.,  10000., 11362., 12052., 13540.,
      14272., 8208.,  8928.,  10368., 11136., 12720., 13536., 15264., 16128.,
      10162., 10988., 12608., 13488., 15270., 16204., 18148., 19136., 11280.,
      12000., 13440., 14208., 15792., 16608., 18336., 19200., 7782.,  8404.,
      9656.,  10320., 11698., 12404., 13908., 14656., 6004.,  6536.,  7592.,
      8160.,  9324.,  9928.,  11200., 11840.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17553., 17922., 18606., 18984., 19695., 20082., 20820., 21216., 18741.,
      19146., 19866., 20280., 21027., 21450., 22224., 22656., 19929., 20370.,
      21126., 21576., 22359., 22818., 23628., 24096., 21117., 21594., 22386.,
      22872., 23691., 24186., 25032., 25536., 22305., 22818., 23646., 24168.,
      25023., 25554., 26436., 26976., 23493., 24042., 24906., 25464., 26355.,
      26922., 27840., 28416., 24681., 25266., 26166., 26760., 27687., 28290.,
      29244., 29856., 28245., 28938., 29946., 30648., 31683., 32394., 33456.,
      34176., 29433., 30162., 31206., 31944., 33015., 33762., 34860., 35616.,
      30621., 31386., 32466., 33240., 34347., 35130., 36264., 37056., 23489.,
      24162., 25150., 25832., 26847., 27538., 28580., 29280., 17381., 17962.,
      18858., 19448., 20371., 20970., 21920., 22528., 12297., 12786., 13590.,
      14088., 14919., 15426., 16284., 16800., 13485., 14010., 14850., 15384.,
      16251., 16794., 17688., 18240., 17049., 17682., 18630., 19272., 20247.,
      20898., 21900., 22560., 18237., 18906., 19890., 20568., 21579., 22266.,
      23304., 24000., 19425., 20130., 21150., 21864., 22911., 23634., 24708.,
      25440., 15365., 15978., 16906., 17528., 18483., 19114., 20096., 20736.,
      12329., 12850., 13686., 14216., 15079., 15618., 16508., 17056., 10317.,
      10746., 11490., 11928., 12699., 13146., 13944., 14400., 11505., 11970.,
      12750., 13224., 14031., 14514., 15348., 15840., 15069., 15642., 16530.,
      17112., 18027., 18618., 19560., 20160., 16257., 16866., 17790., 18408.,
      19359., 19986., 20964., 21600., 17445., 18090., 19050., 19704., 20691.,
      21354., 22368., 23040., 16457., 17010., 17878., 18440., 19335., 19906.,
      20828., 21408., 16493., 16954., 17730., 18200., 19003., 19482., 20312.,
      20800., 17553., 17922., 18606., 18984., 19695., 20082., 20820., 21216.,
      18741., 19146., 19866., 20280., 21027., 21450., 22224., 22656., 22305.,
      22818., 23646., 24168., 25023., 25554., 26436., 26976., 23493., 24042.,
      24906., 25464., 26355., 26922., 27840., 28416., 24681., 25266., 26166.,
      26760., 27687., 28290., 29244., 29856., 25869., 26490., 27426., 28056.,
      29019., 29658., 30648., 31296., 27057., 27714., 28686., 29352., 30351.,
      31026., 32052., 32736., 28245., 28938., 29946., 30648., 31683., 32394.,
      33456., 34176., 29433., 30162., 31206., 31944., 33015., 33762., 34860.,
      35616., 17381., 17962., 18858., 19448., 20371., 20970., 21920., 22528.,
      12297., 12786., 13590., 14088., 14919., 15426., 16284., 16800., 13485.,
      14010., 14850., 15384., 16251., 16794., 17688., 18240., 14673., 15234.,
      16110., 16680., 17583., 18162., 19092., 19680., 15861., 16458., 17370.,
      17976., 18915., 19530., 20496., 21120., 17049., 17682., 18630., 19272.,
      20247., 20898., 21900., 22560., 18237., 18906., 19890., 20568., 21579.,
      22266., 23304., 24000., 12329., 12850., 13686., 14216., 15079., 15618.,
      16508., 17056., 10317., 10746., 11490., 11928., 12699., 13146., 13944.,
      14400., 11505., 11970., 12750., 13224., 14031., 14514., 15348., 15840.,
      12693., 13194., 14010., 14520., 15363., 15882., 16752., 17280., 13881.,
      14418., 15270., 15816., 16695., 17250., 18156., 18720., 15069., 15642.,
      16530., 17112., 18027., 18618., 19560., 20160., 16257., 16866., 17790.,
      18408., 19359., 19986., 20964., 21600.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5588.,  6152.,  6716.,  7280.,  8312.,  8912.,  9512.,  10112., 11324.,
      11960., 12596., 13232., 14624., 15296., 15968., 16640., 5206.,  5852.,
      6498.,  7144.,  8336.,  9024.,  9712.,  10400., 11802., 12532., 13262.,
      13992., 15604., 16376., 17148., 17920., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 6210.,  6996.,  7782.,  8568.,  10056., 10896.,
      11736., 12576., 14334., 15228., 16122., 17016., 19044., 19992., 20940.,
      21888., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 4806.,
      5436.,  6066.,  6696.,  7872.,  8544.,  9216.,  9888.,  11274., 11988.,
      12702., 13416., 15012., 15768., 16524., 17280., 5412.,  5928.,  6444.,
      6960.,  7944.,  8496.,  9048.,  9600.,  10764., 11352., 11940., 12528.,
      13872., 14496., 15120., 15744., 5206.,  5852.,  6498.,  7144.,  8336.,
      9024.,  9712.,  10400., 11802., 12532., 13262., 13992., 15604., 16376.,
      17148., 17920., 7273.,  8018.,  8763.,  9508.,  10882., 11676., 12470.,
      13264., 14883., 15726., 16569., 17412., 19276., 20168., 21060., 21952.,
      6664.,  7504.,  8344.,  9184.,  10752., 11648., 12544., 13440., 15288.,
      16240., 17192., 18144., 20272., 21280., 22288., 23296., 9171.,  10102.,
      11033., 11964., 13706., 14700., 15694., 16688., 18745., 19802., 20859.,
      21916., 24288., 25408., 26528., 27648., 6664.,  7504.,  8344.,  9184.,
      10752., 11648., 12544., 13440., 15288., 16240., 17192., 18144., 20272.,
      21280., 22288., 23296., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 4782.,  5388.,  5994.,  6600.,  7752.,  8400.,  9048.,  9696.,
      11058., 11748., 12438., 13128., 14700., 15432., 16164., 16896., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 6664.,  7504.,  8344.,
      9184.,  10752., 11648., 12544., 13440., 15288., 16240., 17192., 18144.,
      20272., 21280., 22288., 23296., 9664.,  10624., 11584., 12544., 14336.,
      15360., 16384., 17408., 19520., 20608., 21696., 22784., 25216., 26368.,
      27520., 28672., 8568.,  9648.,  10728., 11808., 13824., 14976., 16128.,
      17280., 19656., 20880., 22104., 23328., 26064., 27360., 28656., 29952.,
      9664.,  10624., 11584., 12544., 14336., 15360., 16384., 17408., 19520.,
      20608., 21696., 22784., 25216., 26368., 27520., 28672., 6664.,  7504.,
      8344.,  9184.,  10752., 11648., 12544., 13440., 15288., 16240., 17192.,
      18144., 20272., 21280., 22288., 23296., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 6210.,  6996.,  7782.,  8568.,  10056., 10896.,
      11736., 12576., 14334., 15228., 16122., 17016., 19044., 19992., 20940.,
      21888., 9171.,  10102., 11033., 11964., 13706., 14700., 15694., 16688.,
      18745., 19802., 20859., 21916., 24288., 25408., 26528., 27648., 8568.,
      9648.,  10728., 11808., 13824., 14976., 16128., 17280., 19656., 20880.,
      22104., 23328., 26064., 27360., 28656., 29952., 12081., 13282., 14483.,
      15684., 17930., 19212., 20494., 21776., 24427., 25790., 27153., 28516.,
      31572., 33016., 34460., 35904., 8568.,  9648.,  10728., 11808., 13824.,
      14976., 16128., 17280., 19656., 20880., 22104., 23328., 26064., 27360.,
      28656., 29952., 9579.,  10534., 11489., 12444., 14210., 15228., 16246.,
      17264., 19345., 20426., 21507., 22588., 24984., 26128., 27272., 28416.,
      6506.,  7332.,  8158.,  8984.,  10512., 11392., 12272., 13152., 14950.,
      15884., 16818., 17752., 19820., 20808., 21796., 22784., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 6664.,  7504.,  8344.,  9184.,
      10752., 11648., 12544., 13440., 15288., 16240., 17192., 18144., 20272.,
      21280., 22288., 23296., 9664.,  10624., 11584., 12544., 14336., 15360.,
      16384., 17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520.,
      28672., 8568.,  9648.,  10728., 11808., 13824., 14976., 16128., 17280.,
      19656., 20880., 22104., 23328., 26064., 27360., 28656., 29952., 9664.,
      10624., 11584., 12544., 14336., 15360., 16384., 17408., 19520., 20608.,
      21696., 22784., 25216., 26368., 27520., 28672., 6664.,  7504.,  8344.,
      9184.,  10752., 11648., 12544., 13440., 15288., 16240., 17192., 18144.,
      20272., 21280., 22288., 23296., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 4806.,  5436.,  6066.,  6696.,  7872.,  8544.,  9216.,
      9888.,  11274., 11988., 12702., 13416., 15012., 15768., 16524., 17280.,
      7249.,  7970.,  8691.,  9412.,  10762., 11532., 12302., 13072., 14667.,
      15486., 16305., 17124., 18964., 19832., 20700., 21568., 6664.,  7504.,
      8344.,  9184.,  10752., 11648., 12544., 13440., 15288., 16240., 17192.,
      18144., 20272., 21280., 22288., 23296., 9579.,  10534., 11489., 12444.,
      14210., 15228., 16246., 17264., 19345., 20426., 21507., 22588., 24984.,
      26128., 27272., 28416., 6664.,  7504.,  8344.,  9184.,  10752., 11648.,
      12544., 13440., 15288., 16240., 17192., 18144., 20272., 21280., 22288.,
      23296., 7257.,  7986.,  8715.,  9444.,  10802., 11580., 12358., 13136.,
      14739., 15566., 16393., 17220., 19068., 19944., 20820., 21696., 4926.,
      5548.,  6170.,  6792.,  7960.,  8624.,  9288.,  9952.,  11330., 12036.,
      12742., 13448., 15036., 15784., 16532., 17280., 5412.,  5928.,  6444.,
      6960.,  7944.,  8496.,  9048.,  9600.,  10764., 11352., 11940., 12528.,
      13872., 14496., 15120., 15744., 4782.,  5388.,  5994.,  6600.,  7752.,
      8400.,  9048.,  9696.,  11058., 11748., 12438., 13128., 14700., 15432.,
      16164., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      6506.,  7332.,  8158.,  8984.,  10512., 11392., 12272., 13152., 14950.,
      15884., 16818., 17752., 19820., 20808., 21796., 22784., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 4926.,  5548.,  6170.,  6792.,
      7960.,  8624.,  9288.,  9952.,  11330., 12036., 12742., 13448., 15036.,
      15784., 16532., 17280., 5300.,  5832.,  6364.,  6896.,  7896.,  8464.,
      9032.,  9600.,  10780., 11384., 11988., 12592., 13952., 14592., 15232.,
      15872.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24369., 24738., 25107., 25476., 26338., 26716., 27094., 27472., 28379.,
      28766., 29153., 29540., 30492., 30888., 31284., 31680., 26197., 26602.,
      27007., 27412., 28310., 28724., 29138., 29552., 30495., 30918., 31341.,
      31764., 32752., 33184., 33616., 34048., 28025., 28466., 28907., 29348.,
      30282., 30732., 31182., 31632., 32611., 33070., 33529., 33988., 35012.,
      35480., 35948., 36416., 29853., 30330., 30807., 31284., 32254., 32740.,
      33226., 33712., 34727., 35222., 35717., 36212., 37272., 37776., 38280.,
      38784., 31681., 32194., 32707., 33220., 34226., 34748., 35270., 35792.,
      36843., 37374., 37905., 38436., 39532., 40072., 40612., 41152., 33509.,
      34058., 34607., 35156., 36198., 36756., 37314., 37872., 38959., 39526.,
      40093., 40660., 41792., 42368., 42944., 43520., 35337., 35922., 36507.,
      37092., 38170., 38764., 39358., 39952., 41075., 41678., 42281., 42884.,
      44052., 44664., 45276., 45888., 40821., 41514., 42207., 42900., 44086.,
      44788., 45490., 46192., 47423., 48134., 48845., 49556., 50832., 51552.,
      52272., 52992., 42649., 43378., 44107., 44836., 46058., 46796., 47534.,
      48272., 49539., 50286., 51033., 51780., 53092., 53848., 54604., 55360.,
      44477., 45242., 46007., 46772., 48030., 48804., 49578., 50352., 51655.,
      52438., 53221., 54004., 55352., 56144., 56936., 57728., 46177., 46850.,
      47523., 48196., 49362., 50044., 50726., 51408., 52619., 53310., 54001.,
      54692., 55948., 56648., 57348., 58048., 33541., 34122., 34703., 35284.,
      36358., 36948., 37538., 38128., 39247., 39846., 40445., 41044., 42208.,
      42816., 43424., 44032., 22953., 23442., 23931., 24420., 25402., 25900.,
      26398., 26896., 27923., 28430., 28937., 29444., 30516., 31032., 31548.,
      32064., 24781., 25306., 25831., 26356., 27374., 27908., 28442., 28976.,
      30039., 30582., 31125., 31668., 32776., 33328., 33880., 34432., 30265.,
      30898., 31531., 32164., 33290., 33932., 34574., 35216., 36387., 37038.,
      37689., 38340., 39556., 40216., 40876., 41536., 32093., 32762., 33431.,
      34100., 35262., 35940., 36618., 37296., 38503., 39190., 39877., 40564.,
      41816., 42512., 43208., 43904., 33921., 34626., 35331., 36036., 37234.,
      37948., 38662., 39376., 40619., 41342., 42065., 42788., 44076., 44808.,
      45540., 46272., 25381., 25994., 26607., 27220., 28326., 28948., 29570.,
      30192., 31343., 31974., 32605., 33236., 34432., 35072., 35712., 36352.,
      18889., 19410., 19931., 20452., 21466., 21996., 22526., 23056., 24115.,
      24654., 25193., 25732., 26836., 27384., 27932., 28480., 14445., 14874.,
      15303., 15732., 16654., 17092., 17530., 17968., 18935., 19382., 19829.,
      20276., 21288., 21744., 22200., 22656., 16273., 16738., 17203., 17668.,
      18626., 19100., 19574., 20048., 21051., 21534., 22017., 22500., 23548.,
      24040., 24532., 25024., 21757., 22330., 22903., 23476., 24542., 25124.,
      25706., 26288., 27399., 27990., 28581., 29172., 30328., 30928., 31528.,
      32128., 23585., 24194., 24803., 25412., 26514., 27132., 27750., 28368.,
      29515., 30142., 30769., 31396., 32588., 33224., 33860., 34496., 25413.,
      26058., 26703., 27348., 28486., 29140., 29794., 30448., 31631., 32294.,
      32957., 33620., 34848., 35520., 36192., 36864., 23017., 23570., 24123.,
      24676., 25722., 26284., 26846., 27408., 28499., 29070., 29641., 30212.,
      31348., 31928., 32508., 33088., 22669., 23130., 23591., 24052., 25006.,
      25476., 25946., 26416., 27415., 27894., 28373., 28852., 29896., 30384.,
      30872., 31360., 24369., 24738., 25107., 25476., 26338., 26716., 27094.,
      27472., 28379., 28766., 29153., 29540., 30492., 30888., 31284., 31680.,
      26197., 26602., 27007., 27412., 28310., 28724., 29138., 29552., 30495.,
      30918., 31341., 31764., 32752., 33184., 33616., 34048., 31681., 32194.,
      32707., 33220., 34226., 34748., 35270., 35792., 36843., 37374., 37905.,
      38436., 39532., 40072., 40612., 41152., 33509., 34058., 34607., 35156.,
      36198., 36756., 37314., 37872., 38959., 39526., 40093., 40660., 41792.,
      42368., 42944., 43520., 35337., 35922., 36507., 37092., 38170., 38764.,
      39358., 39952., 41075., 41678., 42281., 42884., 44052., 44664., 45276.,
      45888., 37165., 37786., 38407., 39028., 40142., 40772., 41402., 42032.,
      43191., 43830., 44469., 45108., 46312., 46960., 47608., 48256., 38993.,
      39650., 40307., 40964., 42114., 42780., 43446., 44112., 45307., 45982.,
      46657., 47332., 48572., 49256., 49940., 50624., 40821., 41514., 42207.,
      42900., 44086., 44788., 45490., 46192., 47423., 48134., 48845., 49556.,
      50832., 51552., 52272., 52992., 42649., 43378., 44107., 44836., 46058.,
      46796., 47534., 48272., 49539., 50286., 51033., 51780., 53092., 53848.,
      54604., 55360., 33541., 34122., 34703., 35284., 36358., 36948., 37538.,
      38128., 39247., 39846., 40445., 41044., 42208., 42816., 43424., 44032.,
      22953., 23442., 23931., 24420., 25402., 25900., 26398., 26896., 27923.,
      28430., 28937., 29444., 30516., 31032., 31548., 32064., 24781., 25306.,
      25831., 26356., 27374., 27908., 28442., 28976., 30039., 30582., 31125.,
      31668., 32776., 33328., 33880., 34432., 26609., 27170., 27731., 28292.,
      29346., 29916., 30486., 31056., 32155., 32734., 33313., 33892., 35036.,
      35624., 36212., 36800., 28437., 29034., 29631., 30228., 31318., 31924.,
      32530., 33136., 34271., 34886., 35501., 36116., 37296., 37920., 38544.,
      39168., 30265., 30898., 31531., 32164., 33290., 33932., 34574., 35216.,
      36387., 37038., 37689., 38340., 39556., 40216., 40876., 41536., 32093.,
      32762., 33431., 34100., 35262., 35940., 36618., 37296., 38503., 39190.,
      39877., 40564., 41816., 42512., 43208., 43904., 18889., 19410., 19931.,
      20452., 21466., 21996., 22526., 23056., 24115., 24654., 25193., 25732.,
      26836., 27384., 27932., 28480., 14445., 14874., 15303., 15732., 16654.,
      17092., 17530., 17968., 18935., 19382., 19829., 20276., 21288., 21744.,
      22200., 22656., 16273., 16738., 17203., 17668., 18626., 19100., 19574.,
      20048., 21051., 21534., 22017., 22500., 23548., 24040., 24532., 25024.,
      18101., 18602., 19103., 19604., 20598., 21108., 21618., 22128., 23167.,
      23686., 24205., 24724., 25808., 26336., 26864., 27392., 19929., 20466.,
      21003., 21540., 22570., 23116., 23662., 24208., 25283., 25838., 26393.,
      26948., 28068., 28632., 29196., 29760., 21757., 22330., 22903., 23476.,
      24542., 25124., 25706., 26288., 27399., 27990., 28581., 29172., 30328.,
      30928., 31528., 32128., 23585., 24194., 24803., 25412., 26514., 27132.,
      27750., 28368., 29515., 30142., 30769., 31396., 32588., 33224., 33860.,
      34496.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11678., 14232., 15826., 17478., 15014., 12600., 11138., 11046., 12300.,
      13964., 15711., 13560., 11468., 10018., 11448., 13344., 15976., 18696.,
      16888., 15136., 13704., 17240., 20468., 24738., 29081., 24738., 20468.,
      17240., 13704., 15136., 16888., 18696., 15976., 13344., 11448., 10018.,
      11468., 13560., 15711., 13964., 12300., 11046., 11138., 12600., 15014.,
      17478., 15826., 14232., 11678.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1310., 1388., 1466., 1544., 1622., 1700., 1778., 2090., 2168., 2246.,
      2324., 2402., 2480., 2558., 2870., 2948., 3026., 3104., 3182., 3260.,
      3338., 3650., 3728., 3806., 3884., 3962., 4040., 4118., 4430., 4508.,
      4586., 4664., 4742., 4820., 4898., 5210., 5288., 5366., 5444., 5522.,
      5600., 5678., 5990., 6068., 6146., 6224., 6302., 6380., 6458.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10394., 11004., 12584., 13296., 13744., 14564., 14886., 15820., 12770.,
      13612., 10856., 11600., 9220.,  9892.,  11882., 12620., 13324., 14168.,
      15099., 16056., 16873., 17950., 15380., 16336., 14140., 14968., 12271.,
      12996., 12424., 13232., 13728., 14656., 15696., 16752., 17672., 18864.,
      15304., 16368., 13216., 14144., 11616., 12432., 14908., 15856., 17572.,
      18664., 21191., 22436., 24787., 26194., 21014., 22276., 17556., 18664.,
      14687., 15664., 14840., 15760., 16800., 17856., 19008., 20208., 21192.,
      22544., 19352., 20560., 17824., 18880., 15920., 16848., 13134., 13956.,
      14188., 15128., 15815., 16880., 17425., 18622., 14704., 15768., 12284.,
      13208., 10563., 11372., 9686.,  10340., 10728., 11472., 12676., 13516.,
      14622., 15564., 13478., 14308., 12584., 13296., 10352., 10972.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2470.,  2620.,  2614.,  2776.,  2758.,  2932.,  2902.,  3088.,  3046.,
      3244.,  3190.,  3400.,  3334.,  3556.,  3910.,  4180.,  4054.,  4336.,
      4198.,  4492.,  4342.,  4648.,  4486.,  4804.,  4630.,  4960.,  4774.,
      5116.,  5350.,  5740.,  5494.,  5896.,  5638.,  6052.,  5782.,  6208.,
      5926.,  6364.,  6070.,  6520.,  6214.,  6676.,  6790.,  7300.,  6934.,
      7456.,  7078.,  7612.,  7222.,  7768.,  7366.,  7924.,  7510.,  8080.,
      7654.,  8236.,  8230.,  8860.,  8374.,  9016.,  8518.,  9172.,  8662.,
      9328.,  8806.,  9484.,  8950.,  9640.,  9094.,  9796.,  9670.,  10420.,
      9814.,  10576., 9958.,  10732., 10102., 10888., 10246., 11044., 10390.,
      11200., 10534., 11356., 11110., 11980., 11254., 12136., 11398., 12292.,
      11542., 12448., 11686., 12604., 11830., 12760., 11974., 12916.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9586.,  10196., 10806., 11416., 11624., 12336., 13048., 13760., 12780.,
      13600., 14420., 15240., 13798., 14732., 15666., 16600., 12314., 13156.,
      13998., 14840., 11336., 12080., 12824., 13568., 9704.,  10376., 11048.,
      11720., 12658., 13396., 14134., 14872., 13068., 13912., 14756., 15600.,
      14297., 15254., 16211., 17168., 15421., 16498., 17575., 18652., 13260.,
      14216., 15172., 16128., 11740., 12568., 13396., 14224., 9833.,  10558.,
      11283., 12008., 11624., 12432., 13240., 14048., 12704., 13632., 14560.,
      15488., 15232., 16288., 17344., 18400., 17640., 18832., 20024., 21216.,
      15848., 16912., 17976., 19040., 14752., 15680., 16608., 17536., 12432.,
      13248., 14064., 14880., 13220., 14168., 15116., 16064., 15652., 16744.,
      17836., 18928., 19089., 20334., 21579., 22824., 22343., 23750., 25157.,
      26564., 19326., 20588., 21850., 23112., 17108., 18216., 19324., 20432.,
      14573., 15550., 16527., 17504., 14808., 15728., 16648., 17568., 17696.,
      18752., 19808., 20864., 19152., 20352., 21552., 22752., 20424., 21776.,
      23128., 24480., 17656., 18864., 20072., 21280., 15648., 16704., 17760.,
      18816., 13248., 14176., 15104., 16032., 13350., 14172., 14994., 15816.,
      14252., 15192., 16132., 17072., 15589., 16654., 17719., 18784., 16757.,
      17954., 19151., 20348., 14616., 15680., 16744., 17808., 13180., 14104.,
      15028., 15952., 11421., 12230., 13039., 13848., 8958.,  9612.,  10266.,
      10920., 9800.,  10544., 11288., 12032., 11456., 12296., 13136., 13976.,
      13006., 13948., 14890., 15832., 12014., 12844., 13674., 14504., 11624.,
      12336., 13048., 13760., 9908.,  10528., 11148., 11768.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4790.,  4940.,  5090.,  5240.,  5066.,  5228.,  5390.,  5552.,  5342.,
      5516.,  5690.,  5864.,  5618.,  5804.,  5990.,  6176.,  5894.,  6092.,
      6290.,  6488.,  6170.,  6380.,  6590.,  6800.,  6446.,  6668.,  6890.,
      7112.,  7550.,  7820.,  8090.,  8360.,  7826.,  8108.,  8390.,  8672.,
      8102.,  8396.,  8690.,  8984.,  8378.,  8684.,  8990.,  9296.,  8654.,
      8972.,  9290.,  9608.,  8930.,  9260.,  9590.,  9920.,  9206.,  9548.,
      9890.,  10232., 10310., 10700., 11090., 11480., 10586., 10988., 11390.,
      11792., 10862., 11276., 11690., 12104., 11138., 11564., 11990., 12416.,
      11414., 11852., 12290., 12728., 11690., 12140., 12590., 13040., 11966.,
      12428., 12890., 13352., 13070., 13580., 14090., 14600., 13346., 13868.,
      14390., 14912., 13622., 14156., 14690., 15224., 13898., 14444., 14990.,
      15536., 14174., 14732., 15290., 15848., 14450., 15020., 15590., 16160.,
      14726., 15308., 15890., 16472., 15830., 16460., 17090., 17720., 16106.,
      16748., 17390., 18032., 16382., 17036., 17690., 18344., 16658., 17324.,
      17990., 18656., 16934., 17612., 18290., 18968., 17210., 17900., 18590.,
      19280., 17486., 18188., 18890., 19592., 18590., 19340., 20090., 20840.,
      18866., 19628., 20390., 21152., 19142., 19916., 20690., 21464., 19418.,
      20204., 20990., 21776., 19694., 20492., 21290., 22088., 19970., 20780.,
      21590., 22400., 20246., 21068., 21890., 22712., 21350., 22220., 23090.,
      23960., 21626., 22508., 23390., 24272., 21902., 22796., 23690., 24584.,
      22178., 23084., 23990., 24896., 22454., 23372., 24290., 25208., 22730.,
      23660., 24590., 25520., 23006., 23948., 24890., 25832.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12294., 13624., 15216., 16736., 15258., 16968., 15532., 17432., 12970.,
      14680., 10608., 12128., 8918.,  10248., 10387., 11992., 11928., 13744.,
      13957., 15984., 16254., 18492., 15317., 17312., 14616., 16368., 13347.,
      14856., 14568., 16416., 15680., 17792., 16536., 18912., 17680., 20320.,
      15512., 17888., 13632., 15744., 12008., 13856., 15637., 17632., 19176.,
      21456., 23747., 26312., 28610., 31460., 23747., 26312., 19176., 21456.,
      15637., 17632., 12008., 13856., 13632., 15744., 15512., 17888., 17680.,
      20320., 16536., 18912., 15680., 17792., 14568., 16416., 13347., 14856.,
      14616., 16368., 15317., 17312., 16254., 18492., 13957., 15984., 11928.,
      13744., 10387., 11992., 8918.,  10248., 10608., 12128., 12970., 14680.,
      15532., 17432., 15258., 16968., 15216., 16736., 12294., 13624.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4796.,  5240.,  5084.,  5552.,  5372.,  5864.,  5660.,  6176.,  5948.,
      6488.,  6236.,  6800.,  6524.,  7112.,  7676.,  8360.,  7964.,  8672.,
      8252.,  8984.,  8540.,  9296.,  8828.,  9608.,  9116.,  9920.,  9404.,
      10232., 10556., 11480., 10844., 11792., 11132., 12104., 11420., 12416.,
      11708., 12728., 11996., 13040., 12284., 13352., 13436., 14600., 13724.,
      14912., 14012., 15224., 14300., 15536., 14588., 15848., 14876., 16160.,
      15164., 16472., 16316., 17720., 16604., 18032., 16892., 18344., 17180.,
      18656., 17468., 18968., 17756., 19280., 18044., 19592., 19196., 20840.,
      19484., 21152., 19772., 21464., 20060., 21776., 20348., 22088., 20636.,
      22400., 20924., 22712., 22076., 23960., 22364., 24272., 22652., 24584.,
      22940., 24896., 23228., 25208., 23516., 25520., 23804., 25832.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10546., 11180., 12556., 13232., 12928., 13664., 15216., 16000., 12962.,
      13780., 15528., 16400., 13256., 14168., 16100., 17072., 11382., 12212.,
      13948., 14832., 10112., 10848., 12400., 13184., 8822.,  9484.,  10832.,
      11536., 12371., 13126., 14732., 15536., 12752., 13616., 15432., 16352.,
      13423., 14378., 16422., 17440., 14424., 15484., 17742., 18872., 12913.,
      13866., 15880., 16896., 12144., 12976., 14760., 15648., 10989., 11718.,
      13254., 14032., 12504., 13392., 15248., 16192., 13952., 14976., 17088.,
      18176., 16184., 17328., 19712., 20928., 18720., 20000., 22640., 24000.,
      17960., 19120., 21488., 22720., 18048., 19072., 21184., 22272., 14280.,
      15184., 17024., 17984., 13313., 14250., 16280., 17280., 15888., 16976.,
      19288., 20448., 19773., 20998., 23606., 24912., 23968., 25348., 28234.,
      29704., 19899., 21158., 23764., 25104., 16752., 17872., 20216., 21408.,
      13767., 14762., 16798., 17856., 14552., 15440., 17296., 18240., 18048.,
      19072., 21184., 22272., 18232., 19376., 21760., 22976., 18720., 20000.,
      22640., 24000., 15912., 17072., 19440., 20672., 13952., 14976., 17088.,
      18176., 12232., 13136., 14976., 15936., 11659., 12390., 13956., 14736.,
      13008., 13872., 15688., 16608., 13911., 14890., 16942., 17984., 15016.,
      16124., 18398., 19576., 13689., 14698., 16752., 17824., 13104., 14000.,
      15848., 16800., 12133., 12934., 14558., 15408., 8570.,  9196.,  10548.,
      11216., 9600.,  10336., 11888., 12672., 11066., 11892., 13632., 14512.,
      12728., 13656., 15572., 16560., 12494., 13332., 15060., 15952., 12928.,
      13664., 15216., 16000., 10334., 10988., 12344., 13040.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9304.,  9592.,  10180., 10480., 9856.,  10168., 10780., 11104., 10408.,
      10744., 11380., 11728., 10960., 11320., 11980., 12352., 11512., 11896.,
      12580., 12976., 12064., 12472., 13180., 13600., 12616., 13048., 13780.,
      14224., 14824., 15352., 16180., 16720., 15376., 15928., 16780., 17344.,
      15928., 16504., 17380., 17968., 16480., 17080., 17980., 18592., 17032.,
      17656., 18580., 19216., 17584., 18232., 19180., 19840., 18136., 18808.,
      19780., 20464., 20344., 21112., 22180., 22960., 20896., 21688., 22780.,
      23584., 21448., 22264., 23380., 24208., 22000., 22840., 23980., 24832.,
      22552., 23416., 24580., 25456., 23104., 23992., 25180., 26080., 23656.,
      24568., 25780., 26704., 25864., 26872., 28180., 29200., 26416., 27448.,
      28780., 29824., 26968., 28024., 29380., 30448., 27520., 28600., 29980.,
      31072., 28072., 29176., 30580., 31696., 28624., 29752., 31180., 32320.,
      29176., 30328., 31780., 32944., 31384., 32632., 34180., 35440., 31936.,
      33208., 34780., 36064., 32488., 33784., 35380., 36688., 33040., 34360.,
      35980., 37312., 33592., 34936., 36580., 37936., 34144., 35512., 37180.,
      38560., 34696., 36088., 37780., 39184., 36904., 38392., 40180., 41680.,
      37456., 38968., 40780., 42304., 38008., 39544., 41380., 42928., 38560.,
      40120., 41980., 43552., 39112., 40696., 42580., 44176., 39664., 41272.,
      43180., 44800., 40216., 41848., 43780., 45424., 42424., 44152., 46180.,
      47920., 42976., 44728., 46780., 48544., 43528., 45304., 47380., 49168.,
      44080., 45880., 47980., 49792., 44632., 46456., 48580., 50416., 45184.,
      47032., 49180., 51040., 45736., 47608., 49780., 51664.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8746.,  9380.,  10014., 10648., 12020., 12696., 13372., 14048., 10784.,
      11520., 12256., 12992., 14544., 15328., 16112., 16896., 10802., 11620.,
      12438., 13256., 15016., 15888., 16760., 17632., 11136., 12048., 12960.,
      13872., 15804., 16776., 17748., 18720., 9998.,  10828., 11658., 12488.,
      14212., 15096., 15980., 16864., 10272., 11008., 11744., 12480., 14032.,
      14816., 15600., 16384., 8150.,  8812.,  9474.,  10136., 11488., 12192.,
      12896., 13600., 9683.,  10438., 11193., 11948., 13556., 14360., 15164.,
      15968., 10304., 11168., 12032., 12896., 14712., 15632., 16552., 17472.,
      12451., 13406., 14361., 15316., 17362., 18380., 19398., 20416., 14988.,
      16048., 17108., 18168., 20402., 21532., 22662., 23792., 11689., 12642.,
      13595., 14548., 16536., 17552., 18568., 19584., 10144., 10976., 11808.,
      12640., 14424., 15312., 16200., 17088., 8577.,  9306.,  10035., 10764.,
      12290., 13068., 13846., 14624., 11960., 12848., 13736., 14624., 16496.,
      17440., 18384., 19328., 14592., 15616., 16640., 17664., 19776., 20864.,
      21952., 23040., 14968., 16112., 17256., 18400., 20800., 22016., 23232.,
      24448., 15680., 16960., 18240., 19520., 22160., 23520., 24880., 26240.,
      14152., 15312., 16472., 17632., 19984., 21216., 22448., 23680., 14592.,
      15616., 16640., 17664., 19776., 20864., 21952., 23040., 11144., 12048.,
      12952., 13856., 15680., 16640., 17600., 18560., 12249., 13186., 14123.,
      15060., 17096., 18096., 19096., 20096., 13280., 14368., 15456., 16544.,
      18856., 20016., 21176., 22336., 16177., 17402., 18627., 19852., 22482.,
      23788., 25094., 26400., 19420., 20800., 22180., 23560., 26454., 27924.,
      29394., 30864., 15627., 16886., 18145., 19404., 21996., 23336., 24676.,
      26016., 13952., 15072., 16192., 17312., 19656., 20848., 22040., 23232.,
      11979., 12974., 13969., 14964., 16986., 18044., 19102., 20160., 11960.,
      12848., 13736., 14624., 16496., 17440., 18384., 19328., 14592., 15616.,
      16640., 17664., 19776., 20864., 21952., 23040., 14968., 16112., 17256.,
      18400., 20800., 22016., 23232., 24448., 15680., 16960., 18240., 19520.,
      22160., 23520., 24880., 26240., 14152., 15312., 16472., 17632., 19984.,
      21216., 22448., 23680., 14592., 15616., 16640., 17664., 19776., 20864.,
      21952., 23040., 11144., 12048., 12952., 13856., 15680., 16640., 17600.,
      18560., 9659.,  10390., 11121., 11852., 13436., 14216., 14996., 15776.,
      10816., 11680., 12544., 13408., 15224., 16144., 17064., 17984., 13051.,
      14030., 15009., 15988., 18058., 19100., 20142., 21184., 15484., 16592.,
      17700., 18808., 21090., 22268., 23446., 24624., 12385., 13394., 14403.,
      15412., 17456., 18528., 19600., 20672., 10976., 11872., 12768., 13664.,
      15512., 16464., 17416., 18368., 9481.,  10282., 11083., 11884., 13482.,
      14332., 15182., 16032., 8354.,  8980.,  9606.,  10232., 11596., 12264.,
      12932., 13600., 10272., 11008., 11744., 12480., 14032., 14816., 15600.,
      16384., 10618., 11444., 12270., 13096., 14864., 15744., 16624., 17504.,
      11216., 12144., 13072., 14000., 15948., 16936., 17924., 18912., 10262.,
      11100., 11938., 12776., 14508., 15400., 16292., 17184., 10784., 11520.,
      12256., 12992., 14544., 15328., 16112., 16896., 8206.,  8860.,  9514.,
      10168., 11512., 12208., 12904., 13600.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7056.,  7344.,  7632.,  7920.,  8540.,  8840.,  9140.,  9440.,  7624.,
      7936.,  8248.,  8560.,  9204.,  9528.,  9852.,  10176., 8192.,  8528.,
      8864.,  9200.,  9868.,  10216., 10564., 10912., 8760.,  9120.,  9480.,
      9840.,  10532., 10904., 11276., 11648., 9328.,  9712.,  10096., 10480.,
      11196., 11592., 11988., 12384., 9896.,  10304., 10712., 11120., 11860.,
      12280., 12700., 13120., 10464., 10896., 11328., 11760., 12524., 12968.,
      13412., 13856., 10048., 10448., 10848., 11248., 11980., 12392., 12804.,
      13216., 10040., 10400., 10760., 11120., 11812., 12184., 12556., 12928.,
      10544., 10864., 11184., 11504., 12156., 12488., 12820., 13152., 11112.,
      11456., 11800., 12144., 12820., 13176., 13532., 13888., 11680., 12048.,
      12416., 12784., 13484., 13864., 14244., 14624., 12248., 12640., 13032.,
      13424., 14148., 14552., 14956., 15360., 12816., 13232., 13648., 14064.,
      14812., 15240., 15668., 16096., 8304.,  8688.,  9072.,  9456.,  10172.,
      10568., 10964., 11360., 6248.,  6592.,  6936.,  7280.,  7956.,  8312.,
      8668.,  9024.,  4704.,  5008.,  5312.,  5616.,  6252.,  6568.,  6884.,
      7200.,  5272.,  5600.,  5928.,  6256.,  6916.,  7256.,  7596.,  7936.,
      5840.,  6192.,  6544.,  6896.,  7580.,  7944.,  8308.,  8672.,  6408.,
      6784.,  7160.,  7536.,  8244.,  8632.,  9020.,  9408.,  6976.,  7376.,
      7776.,  8176.,  8908.,  9320.,  9732.,  10144., 6560.,  6928.,  7296.,
      7664.,  8364.,  8744.,  9124.,  9504.,  6552.,  6880.,  7208.,  7536.,
      8196.,  8536.,  8876.,  9216.,  7056.,  7344.,  7632.,  7920.,  8540.,
      8840.,  9140.,  9440.,  7624.,  7936.,  8248.,  8560.,  9204.,  9528.,
      9852.,  10176., 8192.,  8528.,  8864.,  9200.,  9868.,  10216., 10564.,
      10912., 8760.,  9120.,  9480.,  9840.,  10532., 10904., 11276., 11648.,
      9328.,  9712.,  10096., 10480., 11196., 11592., 11988., 12384., 11600.,
      12080., 12560., 13040., 13852., 14344., 14836., 15328., 10568., 11008.,
      11448., 11888., 12660., 13112., 13564., 14016., 10048., 10448., 10848.,
      11248., 11980., 12392., 12804., 13216., 10040., 10400., 10760., 11120.,
      11812., 12184., 12556., 12928., 10544., 10864., 11184., 11504., 12156.,
      12488., 12820., 13152., 11112., 11456., 11800., 12144., 12820., 13176.,
      13532., 13888., 11680., 12048., 12416., 12784., 13484., 13864., 14244.,
      14624., 13952., 14416., 14880., 15344., 16140., 16616., 17092., 17568.,
      10872., 11296., 11720., 12144., 12900., 13336., 13772., 14208., 8304.,
      8688.,  9072.,  9456.,  10172., 10568., 10964., 11360., 6248.,  6592.,
      6936.,  7280.,  7956.,  8312.,  8668.,  9024.,  4704.,  5008.,  5312.,
      5616.,  6252.,  6568.,  6884.,  7200.,  5272.,  5600.,  5928.,  6256.,
      6916.,  7256.,  7596.,  7936.,  5840.,  6192.,  6544.,  6896.,  7580.,
      7944.,  8308.,  8672.,  8112.,  8560.,  9008.,  9456.,  10236., 10696.,
      11156., 11616., 7080.,  7488.,  7896.,  8304.,  9044.,  9464.,  9884.,
      10304., 6560.,  6928.,  7296.,  7664.,  8364.,  8744.,  9124.,  9504.,
      6552.,  6880.,  7208.,  7536.,  8196.,  8536.,  8876.,  9216.,  7056.,
      7344.,  7632.,  7920.,  8540.,  8840.,  9140.,  9440.,  7624.,  7936.,
      8248.,  8560.,  9204.,  9528.,  9852.,  10176., 8192.,  8528.,  8864.,
      9200.,  9868.,  10216., 10564., 10912.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11250., 12568., 13970., 15456., 14832., 16320., 17904., 19584., 13038.,
      14696., 16462., 18336., 12172., 14000., 15948., 18016., 10030., 11688.,
      13454., 15328., 8688.,  10176., 11760., 13440., 7570.,  8856.,  10226.,
      11680., 12117., 13644., 15269., 16992., 11928., 13664., 15512., 17472.,
      11643., 13588., 15659., 17856., 12430., 14584., 16878., 19312., 11707.,
      13652., 15723., 17920., 11928., 13664., 15512., 17472., 11765., 13260.,
      14853., 16544., 10456., 12192., 14040., 16000., 11584., 13568., 15680.,
      17920., 13736., 15968., 18344., 20864., 17040., 19520., 22160., 24960.,
      17832., 20064., 22440., 24960., 19776., 21760., 23872., 26112., 14552.,
      16288., 18136., 20096., 11963., 13908., 15979., 18176., 15336., 17568.,
      19944., 22464., 20629., 23116., 25765., 28576., 27218., 29960., 32882.,
      35984., 20629., 23116., 25765., 28576., 15336., 17568., 19944., 22464.,
      11963., 13908., 15979., 18176., 14552., 16288., 18136., 20096., 19776.,
      21760., 23872., 26112., 17832., 20064., 22440., 24960., 17040., 19520.,
      22160., 24960., 13736., 15968., 18344., 20864., 11584., 13568., 15680.,
      17920., 10456., 12192., 14040., 16000., 11765., 13260., 14853., 16544.,
      11928., 13664., 15512., 17472., 11707., 13652., 15723., 17920., 12430.,
      14584., 16878., 19312., 11643., 13588., 15659., 17856., 11928., 13664.,
      15512., 17472., 12117., 13644., 15269., 16992., 7570.,  8856.,  10226.,
      11680., 8688.,  10176., 11760., 13440., 10030., 11688., 13454., 15328.,
      12172., 14000., 15948., 18016., 13038., 14696., 16462., 18336., 14832.,
      16320., 17904., 19584., 11250., 12568., 13970., 15456.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18332., 19184., 20060., 20960., 19436., 20336., 21260., 22208., 20540.,
      21488., 22460., 23456., 21644., 22640., 23660., 24704., 22748., 23792.,
      24860., 25952., 23852., 24944., 26060., 27200., 24956., 26096., 27260.,
      28448., 18364., 19440., 20540., 21664., 14732., 15728., 16748., 17792.,
      11612., 12528., 13468., 14432., 12716., 13680., 14668., 15680., 13820.,
      14832., 15868., 16928., 14924., 15984., 17068., 18176., 16028., 17136.,
      18268., 19424., 13532., 14576., 15644., 16736., 11948., 12912., 13900.,
      14912., 10876., 11760., 12668., 13600., 11980., 12912., 13868., 14848.,
      13084., 14064., 15068., 16096., 14188., 15216., 16268., 17344., 15292.,
      16368., 17468., 18592., 16892., 17904., 18940., 20000., 17356., 18288.,
      19244., 20224., 18332., 19184., 20060., 20960., 19436., 20336., 21260.,
      22208., 20540., 21488., 22460., 23456., 21644., 22640., 23660., 24704.,
      22748., 23792., 24860., 25952., 27164., 28400., 29660., 30944., 22508.,
      23664., 24844., 26048., 18364., 19440., 20540., 21664., 14732., 15728.,
      16748., 17792., 11612., 12528., 13468., 14432., 12716., 13680., 14668.,
      15680., 13820., 14832., 15868., 16928., 18236., 19440., 20668., 21920.,
      15628., 16752., 17900., 19072., 13532., 14576., 15644., 16736., 11948.,
      12912., 13900., 14912., 10876., 11760., 12668., 13600., 11980., 12912.,
      13868., 14848., 13084., 14064., 15068., 16096., 17500., 18672., 19868.,
      21088., 16940., 18032., 19148., 20288., 16892., 17904., 18940., 20000.,
      17356., 18288., 19244., 20224., 18332., 19184., 20060., 20960., 19436.,
      20336., 21260., 22208., 20540., 21488., 22460., 23456.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8378.,  8996.,  10268., 10928., 12326., 13028., 14552., 15296., 11280.,
      12000., 13440., 14208., 15792., 16608., 18336., 19200., 9838.,  10620.,
      12236., 13072., 14850., 15740., 17680., 18624., 9844.,  10712., 12480.,
      13408., 15356., 16344., 18472., 19520., 9558.,  10364., 11956., 12816.,
      14570., 15484., 17400., 18368., 11280., 12000., 13440., 14208., 15792.,
      16608., 18336., 19200., 7714.,  8356.,  9604.,  10288., 11662., 12388.,
      13888., 14656., 9013.,  9738.,  11218., 11992., 13619., 14442., 16216.,
      17088., 9576.,  10416., 12096., 12992., 14840., 15792., 17808., 18816.,
      11871., 12790., 14674., 15656., 17729., 18774., 21036., 22144., 15770.,
      16796., 18856., 19952., 22222., 23388., 25868., 27104., 11459., 12406.,
      14262., 15272., 17317., 18390., 20624., 21760., 9576.,  10416., 12096.,
      12992., 14840., 15792., 17808., 18816., 8457.,  9194.,  10630., 11416.,
      12999., 13834., 15564., 16448., 11000., 11824., 13520., 14400., 16264.,
      17200., 19232., 20224., 15040., 16000., 17920., 18944., 21056., 22144.,
      24448., 25600., 13480., 14544., 16720., 17856., 20248., 21456., 24064.,
      25344., 13680., 14880., 17280., 18560., 21200., 22560., 25440., 26880.,
      12936., 14032., 16176., 17344., 19704., 20944., 23520., 24832., 15040.,
      16000., 17920., 18944., 21056., 22144., 24448., 25600., 10456., 11312.,
      12976., 13888., 15720., 16688., 18688., 19712., 11491., 12406., 14294.,
      15272., 17349., 18390., 20656., 21760., 12312., 13392., 15552., 16704.,
      19080., 20304., 22896., 24192., 15497., 16682., 19110., 20376., 23047.,
      24394., 27308., 28736., 20726., 22052., 24712., 26128., 29058., 30564.,
      33764., 35360., 14949., 16170., 18562., 19864., 22499., 23882., 26760.,
      28224., 12312., 13392., 15552., 16704., 19080., 20304., 22896., 24192.,
      11215., 12182., 14050., 15080., 17137., 18230., 20476., 21632., 11000.,
      11824., 13520., 14400., 16264., 17200., 19232., 20224., 15040., 16000.,
      17920., 18944., 21056., 22144., 24448., 25600., 13480., 14544., 16720.,
      17856., 20248., 21456., 24064., 25344., 13680., 14880., 17280., 18560.,
      21200., 22560., 25440., 26880., 12936., 14032., 16176., 17344., 19704.,
      20944., 23520., 24832., 15040., 16000., 17920., 18944., 21056., 22144.,
      24448., 25600., 10456., 11312., 12976., 13888., 15720., 16688., 18688.,
      19712., 8997.,  9706.,  11170., 11928., 13539., 14346., 16104., 16960.,
      9576.,  10416., 12096., 12992., 14840., 15792., 17808., 18816., 12271.,
      13206., 15106., 16104., 18193., 19254., 21532., 22656., 16442., 17500.,
      19592., 20720., 23022., 24220., 26732., 28000., 11731., 12694., 14566.,
      15592., 17653., 18742., 20992., 22144., 9576.,  10416., 12096., 12992.,
      14840., 15792., 17808., 18816., 8601.,  9354.,  10806., 11608., 13207.,
      14058., 15804., 16704., 8106.,  8708.,  9964.,  10608., 11990., 12676.,
      14184., 14912., 11280., 12000., 13440., 14208., 15792., 16608., 18336.,
      19200., 9982.,  10780., 12412., 13264., 15058., 15964., 17920., 18880.,
      10004., 10904., 12704., 13664., 15644., 16664., 18824., 19904., 9574.,
      10396., 12004., 12880., 14650., 15580., 17512., 18496., 11280., 12000.,
      13440., 14208., 15792., 16608., 18336., 19200., 8114.,  8772.,  10036.,
      10736., 12126., 12868., 14384., 15168.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36100., 36664., 37792., 38368., 39532., 40120., 41320., 41920., 38260.,
      38872., 40048., 40672., 41884., 42520., 43768., 44416., 40420., 41080.,
      42304., 42976., 44236., 44920., 46216., 46912., 42580., 43288., 44560.,
      45280., 46588., 47320., 48664., 49408., 44740., 45496., 46816., 47584.,
      48940., 49720., 51112., 51904., 46900., 47704., 49072., 49888., 51292.,
      52120., 53560., 54400., 49060., 49912., 51328., 52192., 53644., 54520.,
      56008., 56896., 35940., 36728., 38080., 38880., 40268., 41080., 42504.,
      43328., 28756., 29464., 30736., 31456., 32764., 33496., 34840., 35584.,
      22596., 23224., 24416., 25056., 26284., 26936., 28200., 28864., 24756.,
      25432., 26672., 27360., 28636., 29336., 30648., 31360., 26916., 27640.,
      28928., 29664., 30988., 31736., 33096., 33856., 29076., 29848., 31184.,
      31968., 33340., 34136., 35544., 36352., 31236., 32056., 33440., 34272.,
      35692., 36536., 37992., 38848., 26308., 27064., 28384., 29152., 30508.,
      31288., 32680., 33472., 23220., 23896., 25136., 25824., 27100., 27800.,
      29112., 29824., 21156., 21752., 22912., 23520., 24716., 25336., 26568.,
      27200., 23316., 23960., 25168., 25824., 27068., 27736., 29016., 29696.,
      25476., 26168., 27424., 28128., 29420., 30136., 31464., 32192., 27636.,
      28376., 29680., 30432., 31772., 32536., 33912., 34688., 29796., 30584.,
      31936., 32736., 34124., 34936., 36360., 37184., 33060., 33784., 35072.,
      35808., 37132., 37880., 39240., 40000., 34068., 34712., 35920., 36576.,
      37820., 38488., 39768., 40448., 36100., 36664., 37792., 38368., 39532.,
      40120., 41320., 41920., 38260., 38872., 40048., 40672., 41884., 42520.,
      43768., 44416., 40420., 41080., 42304., 42976., 44236., 44920., 46216.,
      46912., 42580., 43288., 44560., 45280., 46588., 47320., 48664., 49408.,
      44740., 45496., 46816., 47584., 48940., 49720., 51112., 51904., 53380.,
      54328., 55840., 56800., 58348., 59320., 60904., 61888., 44148., 45016.,
      46448., 47328., 48796., 49688., 51192., 52096., 35940., 36728., 38080.,
      38880., 40268., 41080., 42504., 43328., 28756., 29464., 30736., 31456.,
      32764., 33496., 34840., 35584., 22596., 23224., 24416., 25056., 26284.,
      26936., 28200., 28864., 24756., 25432., 26672., 27360., 28636., 29336.,
      30648., 31360., 26916., 27640., 28928., 29664., 30988., 31736., 33096.,
      33856., 35556., 36472., 37952., 38880., 40396., 41336., 42888., 43840.,
      30420., 31256., 32656., 33504., 34940., 35800., 37272., 38144., 26308.,
      27064., 28384., 29152., 30508., 31288., 32680., 33472., 23220., 23896.,
      25136., 25824., 27100., 27800., 29112., 29824., 21156., 21752., 22912.,
      23520., 24716., 25336., 26568., 27200., 23316., 23960., 25168., 25824.,
      27068., 27736., 29016., 29696., 25476., 26168., 27424., 28128., 29420.,
      30136., 31464., 32192., 34116., 35000., 36448., 37344., 38828., 39736.,
      41256., 42176., 33076., 33880., 35248., 36064., 37468., 38296., 39736.,
      40576., 33060., 33784., 35072., 35808., 37132., 37880., 39240., 40000.,
      34068., 34712., 35920., 36576., 37820., 38488., 39768., 40448., 36100.,
      36664., 37792., 38368., 39532., 40120., 41320., 41920., 38260., 38872.,
      40048., 40672., 41884., 42520., 43768., 44416., 40420., 41080., 42304.,
      42976., 44236., 44920., 46216., 46912.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5610.,  6228.,  6846.,  7464.,  8676.,  9336.,  9996.,  10656., 12078.,
      12780., 13482., 14184., 15816., 16560., 17304., 18048., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 6766.,  7548.,  8330.,  9112.,
      10644., 11480., 12316., 13152., 14954., 15844., 16734., 17624., 19696.,
      20640., 21584., 22528., 8772.,  9640.,  10508., 11376., 13024., 13952.,
      14880., 15808., 17756., 18744., 19732., 20720., 22968., 24016., 25064.,
      26112., 5798.,  6604.,  7410.,  8216.,  9676.,  10536., 11396., 12256.,
      13986., 14900., 15814., 16728., 18728., 19696., 20664., 21632., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 4386.,  5028.,  5670.,
      6312.,  7452.,  8136.,  8820.,  9504.,  10854., 11580., 12306., 13032.,
      14592., 15360., 16128., 16896., 6549.,  7274.,  7999.,  8724.,  10142.,
      10916., 11690., 12464., 14127., 14950., 15773., 16596., 18504., 19376.,
      20248., 21120., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      8007.,  8926.,  9845.,  10764., 12558., 13540., 14522., 15504., 17613.,
      18658., 19703., 20748., 23172., 24280., 25388., 26496., 10354., 11380.,
      12406., 13432., 15368., 16464., 17560., 18656., 20942., 22108., 23274.,
      24440., 27076., 28312., 29548., 30784., 6771.,  7718.,  8665.,  9612.,
      11322., 12332., 13342., 14352., 16377., 17450., 18523., 19596., 21936.,
      23072., 24208., 25344., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 4913.,  5650.,  6387.,  7124.,  8442.,  9228.,  10014., 10800.,
      12363., 13198., 14033., 14868., 16676., 17560., 18444., 19328., 7480.,
      8304.,  9128.,  9952.,  11568., 12448., 13328., 14208., 16104., 17040.,
      17976., 18912., 21088., 22080., 23072., 24064., 9664.,  10624., 11584.,
      12544., 14336., 15360., 16384., 17408., 19520., 20608., 21696., 22784.,
      25216., 26368., 27520., 28672., 9384.,  10448., 11512., 12576., 14640.,
      15776., 16912., 18048., 20472., 21680., 22888., 24096., 26880., 28160.,
      29440., 30720., 12080., 13280., 14480., 15680., 17920., 19200., 20480.,
      21760., 24400., 25760., 27120., 28480., 31520., 32960., 34400., 35840.,
      7752.,  8848.,  9944.,  11040., 13008., 14176., 15344., 16512., 18840.,
      20080., 21320., 22560., 25248., 26560., 27872., 29184., 9664.,  10624.,
      11584., 12544., 14336., 15360., 16384., 17408., 19520., 20608., 21696.,
      22784., 25216., 26368., 27520., 28672., 5848.,  6704.,  7560.,  8416.,
      9936.,  10848., 11760., 12672., 14472., 15440., 16408., 17376., 19456.,
      20480., 21504., 22528., 8403.,  9318.,  10233., 11148., 12954., 13932.,
      14910., 15888., 18009., 19050., 20091., 21132., 23568., 24672., 25776.,
      26880., 10872., 11952., 13032., 14112., 16128., 17280., 18432., 19584.,
      21960., 23184., 24408., 25632., 28368., 29664., 30960., 32256., 10353.,
      11538., 12723., 13908., 16218., 17484., 18750., 20016., 22731., 24078.,
      25425., 26772., 29892., 31320., 32748., 34176., 13374., 14700., 16026.,
      17352., 19848., 21264., 22680., 24096., 27042., 28548., 30054., 31560.,
      34956., 36552., 38148., 39744., 8709.,  9930.,  11151., 12372., 14574.,
      15876., 17178., 18480., 21087., 22470., 23853., 25236., 28248., 29712.,
      31176., 32640., 10872., 11952., 13032., 14112., 16128., 17280., 18432.,
      19584., 21960., 23184., 24408., 25632., 28368., 29664., 30960., 32256.,
      6647.,  7614.,  8581.,  9548.,  11262., 12292., 13322., 14352., 16381.,
      17474., 18567., 19660., 22004., 23160., 24316., 25472., 7480.,  8304.,
      9128.,  9952.,  11568., 12448., 13328., 14208., 16104., 17040., 17976.,
      18912., 21088., 22080., 23072., 24064., 9664.,  10624., 11584., 12544.,
      14336., 15360., 16384., 17408., 19520., 20608., 21696., 22784., 25216.,
      26368., 27520., 28672., 9384.,  10448., 11512., 12576., 14640., 15776.,
      16912., 18048., 20472., 21680., 22888., 24096., 26880., 28160., 29440.,
      30720., 12080., 13280., 14480., 15680., 17920., 19200., 20480., 21760.,
      24400., 25760., 27120., 28480., 31520., 32960., 34400., 35840., 7752.,
      8848.,  9944.,  11040., 13008., 14176., 15344., 16512., 18840., 20080.,
      21320., 22560., 25248., 26560., 27872., 29184., 9664.,  10624., 11584.,
      12544., 14336., 15360., 16384., 17408., 19520., 20608., 21696., 22784.,
      25216., 26368., 27520., 28672., 5848.,  6704.,  7560.,  8416.,  9936.,
      10848., 11760., 12672., 14472., 15440., 16408., 17376., 19456., 20480.,
      21504., 22528., 6533.,  7242.,  7951.,  8660.,  10062., 10820., 11578.,
      12336., 13983., 14790., 15597., 16404., 18296., 19152., 20008., 20864.,
      8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080.,
      18032., 18984., 19936., 22064., 23072., 24080., 25088., 8279.,  9214.,
      10149., 11084., 12894., 13892., 14890., 15888., 18013., 19074., 20135.,
      21196., 23636., 24760., 25884., 27008., 10642., 11700., 12758., 13816.,
      15784., 16912., 18040., 19168., 21486., 22684., 23882., 25080., 27748.,
      29016., 30284., 31552., 6787.,  7750.,  8713.,  9676.,  11402., 12428.,
      13454., 14480., 16521., 17610., 18699., 19788., 22144., 23296., 24448.,
      25600., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232.,
      17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088., 5185.,
      5938.,  6691.,  7444.,  8778.,  9580.,  10382., 11184., 12763., 13614.,
      14465., 15316., 17140., 18040., 18940., 19840., 5594.,  6196.,  6798.,
      7400.,  8596.,  9240.,  9884.,  10528., 11934., 12620., 13306., 13992.,
      15608., 16336., 17064., 17792., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 7038.,  7836.,  8634.,  9432.,  10980., 11832., 12684.,
      13536., 15354., 16260., 17166., 18072., 20160., 21120., 22080., 23040.,
      9060.,  9960.,  10860., 11760., 13440., 14400., 15360., 16320., 18300.,
      19320., 20340., 21360., 23640., 24720., 25800., 26880., 5814.,  6636.,
      7458.,  8280.,  9756.,  10632., 11508., 12384., 14130., 15060., 15990.,
      16920., 18936., 19920., 20904., 21888., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 4658.,  5316.,  5974.,  6632.,  7788.,  8488.,
      9188.,  9888.,  11254., 11996., 12738., 13480., 15056., 15840., 16624.,
      17408.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8660.,  8968.,  9276.,  9584.,  10240., 10560., 10880., 11200., 11916.,
      12248., 12580., 12912., 13688., 14032., 14376., 14720., 9860.,  10216.,
      10572., 10928., 11632., 12000., 12368., 12736., 13500., 13880., 14260.,
      14640., 15464., 15856., 16248., 16640., 11060., 11464., 11868., 12272.,
      13024., 13440., 13856., 14272., 15084., 15512., 15940., 16368., 17240.,
      17680., 18120., 18560., 9124.,  9512.,  9900.,  10288., 11024., 11424.,
      11824., 12224., 13020., 13432., 13844., 14256., 15112., 15536., 15960.,
      16384., 8212.,  8584.,  8956.,  9328.,  10048., 10432., 10816., 11200.,
      11980., 12376., 12772., 13168., 14008., 14416., 14824., 15232., 8324.,
      8680.,  9036.,  9392.,  10096., 10464., 10832., 11200., 11964., 12344.,
      12724., 13104., 13928., 14320., 14712., 15104., 9460.,  9800.,  10140.,
      10480., 11168., 11520., 11872., 12224., 12972., 13336., 13700., 14064.,
      14872., 15248., 15624., 16000., 9012.,  9416.,  9820.,  10224., 10976.,
      11392., 11808., 12224., 13036., 13464., 13892., 14320., 15192., 15632.,
      16072., 16512., 9124.,  9512.,  9900.,  10288., 11024., 11424., 11824.,
      12224., 13020., 13432., 13844., 14256., 15112., 15536., 15960., 16384.,
      10260., 10632., 11004., 11376., 12096., 12480., 12864., 13248., 14028.,
      14424., 14820., 15216., 16056., 16464., 16872., 17280., 8324.,  8680.,
      9036.,  9392.,  10096., 10464., 10832., 11200., 11964., 12344., 12724.,
      13104., 13928., 14320., 14712., 15104., 7412.,  7752.,  8092.,  8432.,
      9120.,  9472.,  9824.,  10176., 10924., 11288., 11652., 12016., 12824.,
      13200., 13576., 13952., 7524.,  7848.,  8172.,  8496.,  9168.,  9504.,
      9840.,  10176., 10908., 11256., 11604., 11952., 12744., 13104., 13464.,
      13824., 8660.,  8968.,  9276.,  9584.,  10240., 10560., 10880., 11200.,
      11916., 12248., 12580., 12912., 13688., 14032., 14376., 14720., 8212.,
      8584.,  8956.,  9328.,  10048., 10432., 10816., 11200., 11980., 12376.,
      12772., 13168., 14008., 14416., 14824., 15232., 8324.,  8680.,  9036.,
      9392.,  10096., 10464., 10832., 11200., 11964., 12344., 12724., 13104.,
      13928., 14320., 14712., 15104., 9460.,  9800.,  10140., 10480., 11168.,
      11520., 11872., 12224., 12972., 13336., 13700., 14064., 14872., 15248.,
      15624., 16000., 10660., 11048., 11436., 11824., 12560., 12960., 13360.,
      13760., 14556., 14968., 15380., 15792., 16648., 17072., 17496., 17920.,
      11860., 12296., 12732., 13168., 13952., 14400., 14848., 15296., 16140.,
      16600., 17060., 17520., 18424., 18896., 19368., 19840., 9924.,  10344.,
      10764., 11184., 11952., 12384., 12816., 13248., 14076., 14520., 14964.,
      15408., 16296., 16752., 17208., 17664., 9012.,  9416.,  9820.,  10224.,
      10976., 11392., 11808., 12224., 13036., 13464., 13892., 14320., 15192.,
      15632., 16072., 16512., 7412.,  7752.,  8092.,  8432.,  9120.,  9472.,
      9824.,  10176., 10924., 11288., 11652., 12016., 12824., 13200., 13576.,
      13952., 7524.,  7848.,  8172.,  8496.,  9168.,  9504.,  9840.,  10176.,
      10908., 11256., 11604., 11952., 12744., 13104., 13464., 13824., 8660.,
      8968.,  9276.,  9584.,  10240., 10560., 10880., 11200., 11916., 12248.,
      12580., 12912., 13688., 14032., 14376., 14720., 9860.,  10216., 10572.,
      10928., 11632., 12000., 12368., 12736., 13500., 13880., 14260., 14640.,
      15464., 15856., 16248., 16640., 11060., 11464., 11868., 12272., 13024.,
      13440., 13856., 14272., 15084., 15512., 15940., 16368., 17240., 17680.,
      18120., 18560., 9124.,  9512.,  9900.,  10288., 11024., 11424., 11824.,
      12224., 13020., 13432., 13844., 14256., 15112., 15536., 15960., 16384.,
      8212.,  8584.,  8956.,  9328.,  10048., 10432., 10816., 11200., 11980.,
      12376., 12772., 13168., 14008., 14416., 14824., 15232., 11860., 12296.,
      12732., 13168., 13952., 14400., 14848., 15296., 16140., 16600., 17060.,
      17520., 18424., 18896., 19368., 19840., 9924.,  10344., 10764., 11184.,
      11952., 12384., 12816., 13248., 14076., 14520., 14964., 15408., 16296.,
      16752., 17208., 17664., 9012.,  9416.,  9820.,  10224., 10976., 11392.,
      11808., 12224., 13036., 13464., 13892., 14320., 15192., 15632., 16072.,
      16512., 9124.,  9512.,  9900.,  10288., 11024., 11424., 11824., 12224.,
      13020., 13432., 13844., 14256., 15112., 15536., 15960., 16384., 10260.,
      10632., 11004., 11376., 12096., 12480., 12864., 13248., 14028., 14424.,
      14820., 15216., 16056., 16464., 16872., 17280., 8324.,  8680.,  9036.,
      9392.,  10096., 10464., 10832., 11200., 11964., 12344., 12724., 13104.,
      13928., 14320., 14712., 15104., 7412.,  7752.,  8092.,  8432.,  9120.,
      9472.,  9824.,  10176., 10924., 11288., 11652., 12016., 12824., 13200.,
      13576., 13952., 11060., 11464., 11868., 12272., 13024., 13440., 13856.,
      14272., 15084., 15512., 15940., 16368., 17240., 17680., 18120., 18560.,
      9124.,  9512.,  9900.,  10288., 11024., 11424., 11824., 12224., 13020.,
      13432., 13844., 14256., 15112., 15536., 15960., 16384., 8212.,  8584.,
      8956.,  9328.,  10048., 10432., 10816., 11200., 11980., 12376., 12772.,
      13168., 14008., 14416., 14824., 15232., 8324.,  8680.,  9036.,  9392.,
      10096., 10464., 10832., 11200., 11964., 12344., 12724., 13104., 13928.,
      14320., 14712., 15104., 9460.,  9800.,  10140., 10480., 11168., 11520.,
      11872., 12224., 12972., 13336., 13700., 14064., 14872., 15248., 15624.,
      16000., 10660., 11048., 11436., 11824., 12560., 12960., 13360., 13760.,
      14556., 14968., 15380., 15792., 16648., 17072., 17496., 17920., 11860.,
      12296., 12732., 13168., 13952., 14400., 14848., 15296., 16140., 16600.,
      17060., 17520., 18424., 18896., 19368., 19840., 10260., 10632., 11004.,
      11376., 12096., 12480., 12864., 13248., 14028., 14424., 14820., 15216.,
      16056., 16464., 16872., 17280., 8324.,  8680.,  9036.,  9392.,  10096.,
      10464., 10832., 11200., 11964., 12344., 12724., 13104., 13928., 14320.,
      14712., 15104., 7412.,  7752.,  8092.,  8432.,  9120.,  9472.,  9824.,
      10176., 10924., 11288., 11652., 12016., 12824., 13200., 13576., 13952.,
      7524.,  7848.,  8172.,  8496.,  9168.,  9504.,  9840.,  10176., 10908.,
      11256., 11604., 11952., 12744., 13104., 13464., 13824., 8660.,  8968.,
      9276.,  9584.,  10240., 10560., 10880., 11200., 11916., 12248., 12580.,
      12912., 13688., 14032., 14376., 14720., 9860.,  10216., 10572., 10928.,
      11632., 12000., 12368., 12736., 13500., 13880., 14260., 14640., 15464.,
      15856., 16248., 16640., 11060., 11464., 11868., 12272., 13024., 13440.,
      13856., 14272., 15084., 15512., 15940., 16368., 17240., 17680., 18120.,
      18560.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,  8827.,  10416., 12020., 10472., 8923.,  7380.,  8960.,  10856.,
      12768., 14688., 12768., 10856., 8960.,  10460., 12693., 14952., 17228.,
      15008., 12789., 10580., 14960., 18082., 21224., 24376., 21224., 18082.,
      14960., 10580., 12789., 15008., 17228., 14952., 12693., 10460., 8960.,
      10856., 12768., 14688., 12768., 10856., 8960.,  7380.,  8923.,  10472.,
      12020., 10416., 8827.,  7260.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      648.,  684.,  720.,  756.,  792.,  828.,  864.,  936.,  972.,  1008.,
      1044., 1080., 1116., 1152., 1224., 1260., 1296., 1332., 1368., 1404.,
      1440., 1512., 1548., 1584., 1620., 1656., 1692., 1728., 1800., 1836.,
      1872., 1908., 1944., 1980., 2016., 2088., 2124., 2160., 2196., 2232.,
      2268., 2304., 2376., 2412., 2448., 2484., 2520., 2556., 2592.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8775.,  9240.,  10451., 11030., 12068., 12768., 13612., 14440., 11459.,
      12208., 9407.,  10070., 7470.,  8040.,  12840., 13440., 15208., 15952.,
      17472., 18368., 19616., 20672., 16520., 17472., 13576., 14416., 10800.,
      11520., 10705., 11320., 12717., 13482., 14644., 15568., 16468., 17560.,
      13797., 14784., 11265., 12138., 8890.,  9640.,  14530., 15200., 17282.,
      18116., 19936., 20944., 22472., 23664., 18970., 20048., 15626., 16580.,
      12460., 13280., 10905., 11560., 12861., 13674., 14700., 15680., 16404.,
      17560., 13629., 14672., 11025., 11946., 8610.,  9400.,  12840., 13440.,
      15208., 15952., 17472., 18368., 19616., 20672., 16520., 17472., 13576.,
      14416., 10800., 11520., 7695.,  8200.,  9059.,  9686.,  10332., 11088.,
      11500., 12392., 9499.,  10304., 7631.,  8342.,  5910.,  6520.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1188., 1296., 1252., 1368., 1316., 1440., 1380., 1512., 1444., 1584.,
      1508., 1656., 1572., 1728., 1700., 1872., 1764., 1944., 1828., 2016.,
      1892., 2088., 1956., 2160., 2020., 2232., 2084., 2304., 2212., 2448.,
      2276., 2520., 2340., 2592., 2404., 2664., 2468., 2736., 2532., 2808.,
      2596., 2880., 2724., 3024., 2788., 3096., 2852., 3168., 2916., 3240.,
      2980., 3312., 3044., 3384., 3108., 3456., 3236., 3600., 3300., 3672.,
      3364., 3744., 3428., 3816., 3492., 3888., 3556., 3960., 3620., 4032.,
      3748., 4176., 3812., 4248., 3876., 4320., 3940., 4392., 4004., 4464.,
      4068., 4536., 4132., 4608., 4260., 4752., 4324., 4824., 4388., 4896.,
      4452., 4968., 4516., 5040., 4580., 5112., 4644., 5184.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10045., 10510., 10975., 11440., 11491., 12070., 12649., 13228., 12684.,
      13384., 14084., 14784., 13596., 14424., 15252., 16080., 10521., 11270.,
      12019., 12768., 7783.,  8446.,  9109.,  9772.,  5410.,  5980.,  6550.,
      7120.,  12920., 13520., 14120., 14720., 14696., 15440., 16184., 16928.,
      16128., 17024., 17920., 18816., 17184., 18240., 19296., 20352., 13272.,
      14224., 15176., 16128., 9800.,  10640., 11480., 12320., 6800.,  7520.,
      8240.,  8960.,  13275., 13890., 14505., 15120., 15165., 15930., 16695.,
      17460., 16716., 17640., 18564., 19488., 17892., 18984., 20076., 21168.,
      13839., 14826., 15813., 16800., 10233., 11106., 11979., 12852., 7110.,
      7860.,  8610.,  9360.,  14470., 15140., 15810., 16480., 16546., 17380.,
      18214., 19048., 18256., 19264., 20272., 21280., 19560., 20752., 21944.,
      23136., 15134., 16212., 17290., 18368., 11194., 12148., 13102., 14056.,
      7780.,  8600.,  9420.,  10240., 14115., 14770., 15425., 16080., 16077.,
      16890., 17703., 18516., 17668., 18648., 19628., 20608., 18852., 20008.,
      21164., 22320., 14567., 15610., 16653., 17696., 10761., 11682., 12603.,
      13524., 7470.,  8260.,  9050.,  9840.,  12920., 13520., 14120., 14720.,
      14696., 15440., 16184., 16928., 16128., 17024., 17920., 18816., 17184.,
      18240., 19296., 20352., 13272., 14224., 15176., 16128., 9800.,  10640.,
      11480., 12320., 6800.,  7520.,  8240.,  8960.,  10885., 11390., 11895.,
      12400., 12403., 13030., 13657., 14284., 13636., 14392., 15148., 15904.,
      14556., 15448., 16340., 17232., 11249., 12054., 12859., 13664., 8311.,
      9022.,  9733.,  10444., 5770.,  6380.,  6990.,  7600.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2268., 2376.,  2484., 2592., 2388., 2504., 2620., 2736.,  2508., 2632.,
      2756., 2880.,  2628., 2760., 2892., 3024., 2748., 2888.,  3028., 3168.,
      2868., 3016.,  3164., 3312., 2988., 3144., 3300., 3456.,  3228., 3400.,
      3572., 3744.,  3348., 3528., 3708., 3888., 3468., 3656.,  3844., 4032.,
      3588., 3784.,  3980., 4176., 3708., 3912., 4116., 4320.,  3828., 4040.,
      4252., 4464.,  3948., 4168., 4388., 4608., 4188., 4424.,  4660., 4896.,
      4308., 4552.,  4796., 5040., 4428., 4680., 4932., 5184.,  4548., 4808.,
      5068., 5328.,  4668., 4936., 5204., 5472., 4788., 5064.,  5340., 5616.,
      4908., 5192.,  5476., 5760., 5148., 5448., 5748., 6048.,  5268., 5576.,
      5884., 6192.,  5388., 5704., 6020., 6336., 5508., 5832.,  6156., 6480.,
      5628., 5960.,  6292., 6624., 5748., 6088., 6428., 6768.,  5868., 6216.,
      6564., 6912.,  6108., 6472., 6836., 7200., 6228., 6600.,  6972., 7344.,
      6348., 6728.,  7108., 7488., 6468., 6856., 7244., 7632.,  6588., 6984.,
      7380., 7776.,  6708., 7112., 7516., 7920., 6828., 7240.,  7652., 8064.,
      7068., 7496.,  7924., 8352., 7188., 7624., 8060., 8496.,  7308., 7752.,
      8196., 8640.,  7428., 7880., 8332., 8784., 7548., 8008.,  8468., 8928.,
      7668., 8136.,  8604., 9072., 7788., 8264., 8740., 9216.,  8028., 8520.,
      9012., 9504.,  8148., 8648., 9148., 9648., 8268., 8776.,  9284., 9792.,
      8388., 8904.,  9420., 9936., 8508., 9032., 9556., 10080., 8628., 9160.,
      9692., 10224., 8748., 9288., 9828., 10368.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6445.,  7600.,  8194.,  9580.,  10031., 11648., 11928., 13776., 10255.,
      11872., 8578.,  9964.,  6925.,  8080.,  12760., 14080., 15728., 17312.,
      18760., 20608., 21824., 23936., 18760., 20608., 15728., 17312., 12760.,
      14080., 8355.,  9840.,  10590., 12372., 12929., 15008., 15336., 17712.,
      13153., 15232., 10974., 12756., 8835.,  10320., 15950., 17600., 19660.,
      21640., 23450., 25760., 27280., 29920., 23450., 25760., 19660., 21640.,
      15950., 17600., 8835.,  10320., 10974., 12756., 13153., 15232., 15336.,
      17712., 12929., 15008., 10590., 12372., 8355.,  9840.,  12760., 14080.,
      15728., 17312., 18760., 20608., 21824., 23936., 18760., 20608., 15728.,
      17312., 12760., 14080., 6925.,  8080.,  8578.,  9964.,  10255., 11872.,
      11928., 13776., 10031., 11648., 8194.,  9580.,  6445.,  7600.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2312., 2592., 2440., 2736.,  2568., 2880.,  2696., 3024., 2824., 3168.,
      2952., 3312., 3080., 3456.,  3336., 3744.,  3464., 3888., 3592., 4032.,
      3720., 4176., 3848., 4320.,  3976., 4464.,  4104., 4608., 4360., 4896.,
      4488., 5040., 4616., 5184.,  4744., 5328.,  4872., 5472., 5000., 5616.,
      5128., 5760., 5384., 6048.,  5512., 6192.,  5640., 6336., 5768., 6480.,
      5896., 6624., 6024., 6768.,  6152., 6912.,  6408., 7200., 6536., 7344.,
      6664., 7488., 6792., 7632.,  6920., 7776.,  7048., 7920., 7176., 8064.,
      7432., 8352., 7560., 8496.,  7688., 8640.,  7816., 8784., 7944., 8928.,
      8072., 9072., 8200., 9216.,  8456., 9504.,  8584., 9648., 8712., 9792.,
      8840., 9936., 8968., 10080., 9096., 10224., 9224., 10368.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9275.,  9690.,  10910., 11360., 11240., 11780., 13202., 13784., 13111.,
      13790., 15400., 16128., 14832., 15664., 17448., 18336., 11669., 12446.,
      13958., 14784., 8768.,  9476.,  10730., 11480., 6185.,  6810.,  7820.,
      8480.,  11560., 12080., 13520., 14080., 13888., 14560., 16240., 16960.,
      16072., 16912., 18816., 19712., 18048., 19072., 21184., 22272., 14168.,
      15120., 16912., 17920., 10624., 11488., 12976., 13888., 7480.,  8240.,
      9440.,  10240., 12165., 12710., 14290., 14880., 14712., 15420., 17262.,
      18024., 17129., 18018., 20104., 21056., 19344., 20432., 22744., 23904.,
      15211., 16226., 18186., 19264., 11424., 12348., 13974., 14952., 8055.,
      8870.,  10180., 11040., 14450., 15100., 16900., 17600., 17360., 18200.,
      20300., 21200., 20090., 21140., 23520., 24640., 22560., 23840., 26480.,
      27840., 17710., 18900., 21140., 22400., 13280., 14360., 16220., 17360.,
      9350.,  10300., 11800., 12800., 13845., 14470., 16130., 16800., 16536.,
      17340., 19278., 20136., 19033., 20034., 22232., 23296., 21264., 22480.,
      24920., 26208., 16667., 17794., 19866., 21056., 12480., 13500., 15222.,
      16296., 8775.,  9670.,  11060., 12000., 11560., 12080., 13520., 14080.,
      13888., 14560., 16240., 16960., 16072., 16912., 18816., 19712., 18048.,
      19072., 21184., 22272., 14168., 15120., 16912., 17920., 10624., 11488.,
      12976., 13888., 7480.,  8240.,  9440.,  10240., 10955., 11450., 12750.,
      13280., 13064., 13700., 15218., 15896., 15015., 15806., 17528., 18368.,
      16752., 17712., 19624., 20640., 13125., 14014., 15638., 16576., 9824.,
      10628., 11978., 12824., 6905.,  7610.,  8700.,  9440.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4416.,  4624.,  4968.,  5184.,  4656.,  4880.,  5240.,  5472.,  4896.,
      5136.,  5512.,  5760.,  5136.,  5392.,  5784.,  6048.,  5376.,  5648.,
      6056.,  6336.,  5616.,  5904.,  6328.,  6624.,  5856.,  6160.,  6600.,
      6912.,  6336.,  6672.,  7144.,  7488.,  6576.,  6928.,  7416.,  7776.,
      6816.,  7184.,  7688.,  8064.,  7056.,  7440.,  7960.,  8352.,  7296.,
      7696.,  8232.,  8640.,  7536.,  7952.,  8504.,  8928.,  7776.,  8208.,
      8776.,  9216.,  8256.,  8720.,  9320.,  9792.,  8496.,  8976.,  9592.,
      10080., 8736.,  9232.,  9864.,  10368., 8976.,  9488.,  10136., 10656.,
      9216.,  9744.,  10408., 10944., 9456.,  10000., 10680., 11232., 9696.,
      10256., 10952., 11520., 10176., 10768., 11496., 12096., 10416., 11024.,
      11768., 12384., 10656., 11280., 12040., 12672., 10896., 11536., 12312.,
      12960., 11136., 11792., 12584., 13248., 11376., 12048., 12856., 13536.,
      11616., 12304., 13128., 13824., 12096., 12816., 13672., 14400., 12336.,
      13072., 13944., 14688., 12576., 13328., 14216., 14976., 12816., 13584.,
      14488., 15264., 13056., 13840., 14760., 15552., 13296., 14096., 15032.,
      15840., 13536., 14352., 15304., 16128., 14016., 14864., 15848., 16704.,
      14256., 15120., 16120., 16992., 14496., 15376., 16392., 17280., 14736.,
      15632., 16664., 17568., 14976., 15888., 16936., 17856., 15216., 16144.,
      17208., 18144., 15456., 16400., 17480., 18432., 15936., 16912., 18024.,
      19008., 16176., 17168., 18296., 19296., 16416., 17424., 18568., 19584.,
      16656., 17680., 18840., 19872., 16896., 17936., 19112., 20160., 17136.,
      18192., 19384., 20448., 17376., 18448., 19656., 20736.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6615.,  7030.,  7445.,  7860.,  8954.,  9404.,  9854.,  10304., 8628.,
      9168.,  9708.,  10248., 11614., 12196., 12778., 13360., 10439., 11118.,
      11797., 12476., 14072., 14800., 15528., 16256., 11936., 12768., 13600.,
      14432., 16216., 17104., 17992., 18880., 9217.,  9994.,  10771., 11548.,
      13074., 13900., 14726., 15552., 7484.,  8192.,  8900.,  9608.,  10918.,
      11668., 12418., 13168., 6849.,  7474.,  8099.,  8724.,  9860.,  10520.,
      11180., 11840., 8264.,  8784.,  9304.,  9824.,  11120., 11680., 12240.,
      12800., 10720., 11392., 12064., 12736., 14352., 15072., 15792., 16512.,
      12872., 13712., 14552., 15392., 17280., 18176., 19072., 19968., 14592.,
      15616., 16640., 17664., 19776., 20864., 21952., 23040., 11256., 12208.,
      13160., 14112., 15920., 16928., 17936., 18944., 9120.,  9984.,  10848.,
      11712., 13264., 14176., 15088., 16000., 8312.,  9072.,  9832.,  10592.,
      11936., 12736., 13536., 14336., 8681.,  9226.,  9771.,  10316., 11734.,
      12324., 12914., 13504., 11308., 12016., 12724., 13432., 15202., 15964.,
      16726., 17488., 13657., 14546., 15435., 16324., 18392., 19344., 20296.,
      21248., 15584., 16672., 17760., 18848., 21160., 22320., 23480., 24640.,
      12031., 13046., 14061., 15076., 17054., 18132., 19210., 20288., 9764.,
      10688., 11612., 12536., 14234., 15212., 16190., 17168., 8927.,  9742.,
      10557., 11372., 12844., 13704., 14564., 15424., 10330., 10980., 11630.,
      12280., 13900., 14600., 15300., 16000., 13400., 14240., 15080., 15920.,
      17940., 18840., 19740., 20640., 16090., 17140., 18190., 19240., 21600.,
      22720., 23840., 24960., 18240., 19520., 20800., 22080., 24720., 26080.,
      27440., 28800., 14070., 15260., 16450., 17640., 19900., 21160., 22420.,
      23680., 11400., 12480., 13560., 14640., 16580., 17720., 18860., 20000.,
      10390., 11340., 12290., 13240., 14920., 15920., 16920., 17920., 9913.,
      10538., 11163., 11788., 13286., 13956., 14626., 15296., 12812., 13616.,
      14420., 15224., 17090., 17948., 18806., 19664., 15305., 16306., 17307.,
      18308., 20488., 21552., 22616., 23680., 17248., 18464., 19680., 20896.,
      23336., 24624., 25912., 27200., 13295., 14422., 15549., 16676., 18766.,
      19956., 21146., 22336., 10756., 11776., 12796., 13816., 15610., 16684.,
      17758., 18832., 9775.,  10670., 11565., 12460., 14012., 14952., 15892.,
      16832., 8264.,  8784.,  9304.,  9824.,  11120., 11680., 12240., 12800.,
      10720., 11392., 12064., 12736., 14352., 15072., 15792., 16512., 12872.,
      13712., 14552., 15392., 17280., 18176., 19072., 19968., 14592., 15616.,
      16640., 17664., 19776., 20864., 21952., 23040., 11256., 12208., 13160.,
      14112., 15920., 16928., 17936., 18944., 9120.,  9984.,  10848., 11712.,
      13264., 14176., 15088., 16000., 8312.,  9072.,  9832.,  10592., 11936.,
      12736., 13536., 14336., 7847.,  8342.,  8837.,  9332.,  10506., 11036.,
      11566., 12096., 10132., 10768., 11404., 12040., 13502., 14180., 14858.,
      15536., 12087., 12878., 13669., 14460., 16168., 17008., 17848., 18688.,
      13600., 14560., 15520., 16480., 18392., 19408., 20424., 21440., 10481.,
      11370., 12259., 13148., 14786., 15724., 16662., 17600., 8476.,  9280.,
      10084., 10888., 12294., 13140., 13986., 14832., 7697.,  8402.,  9107.,
      9812.,  11028., 11768., 12508., 13248.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8624.,  8832.,  9040.,  9248.,  9720.,  9936.,  10152., 10368., 9088.,
      9312.,  9536.,  9760.,  10248., 10480., 10712., 10944., 9552.,  9792.,
      10032., 10272., 10776., 11024., 11272., 11520., 10016., 10272., 10528.,
      10784., 11304., 11568., 11832., 12096., 10480., 10752., 11024., 11296.,
      11832., 12112., 12392., 12672., 10944., 11232., 11520., 11808., 12360.,
      12656., 12952., 13248., 11408., 11712., 12016., 12320., 12888., 13200.,
      13512., 13824., 12336., 12672., 13008., 13344., 13944., 14288., 14632.,
      14976., 12800., 13152., 13504., 13856., 14472., 14832., 15192., 15552.,
      13264., 13632., 14000., 14368., 15000., 15376., 15752., 16128., 13728.,
      14112., 14496., 14880., 15528., 15920., 16312., 16704., 14192., 14592.,
      14992., 15392., 16056., 16464., 16872., 17280., 14656., 15072., 15488.,
      15904., 16584., 17008., 17432., 17856., 15120., 15552., 15984., 16416.,
      17112., 17552., 17992., 18432., 16048., 16512., 16976., 17440., 18168.,
      18640., 19112., 19584., 16512., 16992., 17472., 17952., 18696., 19184.,
      19672., 20160., 16976., 17472., 17968., 18464., 19224., 19728., 20232.,
      20736., 17440., 17952., 18464., 18976., 19752., 20272., 20792., 21312.,
      17904., 18432., 18960., 19488., 20280., 20816., 21352., 21888., 18368.,
      18912., 19456., 20000., 20808., 21360., 21912., 22464., 18832., 19392.,
      19952., 20512., 21336., 21904., 22472., 23040., 19760., 20352., 20944.,
      21536., 22392., 22992., 23592., 24192., 20224., 20832., 21440., 22048.,
      22920., 23536., 24152., 24768., 20688., 21312., 21936., 22560., 23448.,
      24080., 24712., 25344., 21152., 21792., 22432., 23072., 23976., 24624.,
      25272., 25920., 21616., 22272., 22928., 23584., 24504., 25168., 25832.,
      26496., 22080., 22752., 23424., 24096., 25032., 25712., 26392., 27072.,
      22544., 23232., 23920., 24608., 25560., 26256., 26952., 27648., 23472.,
      24192., 24912., 25632., 26616., 27344., 28072., 28800., 23936., 24672.,
      25408., 26144., 27144., 27888., 28632., 29376., 24400., 25152., 25904.,
      26656., 27672., 28432., 29192., 29952., 24864., 25632., 26400., 27168.,
      28200., 28976., 29752., 30528., 25328., 26112., 26896., 27680., 28728.,
      29520., 30312., 31104., 25792., 26592., 27392., 28192., 29256., 30064.,
      30872., 31680., 26256., 27072., 27888., 28704., 29784., 30608., 31432.,
      32256., 27184., 28032., 28880., 29728., 30840., 31696., 32552., 33408.,
      27648., 28512., 29376., 30240., 31368., 32240., 33112., 33984., 28112.,
      28992., 29872., 30752., 31896., 32784., 33672., 34560., 28576., 29472.,
      30368., 31264., 32424., 33328., 34232., 35136., 29040., 29952., 30864.,
      31776., 32952., 33872., 34792., 35712., 29504., 30432., 31360., 32288.,
      33480., 34416., 35352., 36288., 29968., 30912., 31856., 32800., 34008.,
      34960., 35912., 36864., 30896., 31872., 32848., 33824., 35064., 36048.,
      37032., 38016., 31360., 32352., 33344., 34336., 35592., 36592., 37592.,
      38592., 31824., 32832., 33840., 34848., 36120., 37136., 38152., 39168.,
      32288., 33312., 34336., 35360., 36648., 37680., 38712., 39744., 32752.,
      33792., 34832., 35872., 37176., 38224., 39272., 40320., 33216., 34272.,
      35328., 36384., 37704., 38768., 39832., 40896., 33680., 34752., 35824.,
      36896., 38232., 39312., 40392., 41472.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7735.,  8820.,  9975.,  11200., 10738., 12040., 13426., 14896., 13965.,
      15484., 17101., 18816., 17304., 19040., 20888., 22848., 13965., 15484.,
      17101., 18816., 10738., 12040., 13426., 14896., 7735.,  8820.,  9975.,
      11200., 8840.,  10080., 11400., 12800., 12272., 13760., 15344., 17024.,
      15960., 17696., 19544., 21504., 19776., 21760., 23872., 26112., 15960.,
      17696., 19544., 21504., 12272., 13760., 15344., 17024., 8840.,  10080.,
      11400., 12800., 9945.,  11340., 12825., 14400., 13806., 15480., 17262.,
      19152., 17955., 19908., 21987., 24192., 22248., 24480., 26856., 29376.,
      17955., 19908., 21987., 24192., 13806., 15480., 17262., 19152., 9945.,
      11340., 12825., 14400., 11050., 12600., 14250., 16000., 15340., 17200.,
      19180., 21280., 19950., 22120., 24430., 26880., 24720., 27200., 29840.,
      32640., 19950., 22120., 24430., 26880., 15340., 17200., 19180., 21280.,
      11050., 12600., 14250., 16000., 9945.,  11340., 12825., 14400., 13806.,
      15480., 17262., 19152., 17955., 19908., 21987., 24192., 22248., 24480.,
      26856., 29376., 17955., 19908., 21987., 24192., 13806., 15480., 17262.,
      19152., 9945.,  11340., 12825., 14400., 8840.,  10080., 11400., 12800.,
      12272., 13760., 15344., 17024., 15960., 17696., 19544., 21504., 19776.,
      21760., 23872., 26112., 15960., 17696., 19544., 21504., 12272., 13760.,
      15344., 17024., 8840.,  10080., 11400., 12800., 7735.,  8820.,  9975.,
      11200., 10738., 12040., 13426., 14896., 13965., 15484., 17101., 18816.,
      17304., 19040., 20888., 22848., 13965., 15484., 17101., 18816., 10738.,
      12040., 13426., 14896., 7735.,  8820.,  9975.,  11200.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8712.,  9248.,  9800.,  10368., 9192.,  9760.,  10344., 10944., 9672.,
      10272., 10888., 11520., 10152., 10784., 11432., 12096., 10632., 11296.,
      11976., 12672., 11112., 11808., 12520., 13248., 11592., 12320., 13064.,
      13824., 12552., 13344., 14152., 14976., 13032., 13856., 14696., 15552.,
      13512., 14368., 15240., 16128., 13992., 14880., 15784., 16704., 14472.,
      15392., 16328., 17280., 14952., 15904., 16872., 17856., 15432., 16416.,
      17416., 18432., 16392., 17440., 18504., 19584., 16872., 17952., 19048.,
      20160., 17352., 18464., 19592., 20736., 17832., 18976., 20136., 21312.,
      18312., 19488., 20680., 21888., 18792., 20000., 21224., 22464., 19272.,
      20512., 21768., 23040., 20232., 21536., 22856., 24192., 20712., 22048.,
      23400., 24768., 21192., 22560., 23944., 25344., 21672., 23072., 24488.,
      25920., 22152., 23584., 25032., 26496., 22632., 24096., 25576., 27072.,
      23112., 24608., 26120., 27648., 24072., 25632., 27208., 28800., 24552.,
      26144., 27752., 29376., 25032., 26656., 28296., 29952., 25512., 27168.,
      28840., 30528., 25992., 27680., 29384., 31104., 26472., 28192., 29928.,
      31680., 26952., 28704., 30472., 32256., 27912., 29728., 31560., 33408.,
      28392., 30240., 32104., 33984., 28872., 30752., 32648., 34560., 29352.,
      31264., 33192., 35136., 29832., 31776., 33736., 35712., 30312., 32288.,
      34280., 36288., 30792., 32800., 34824., 36864., 31752., 33824., 35912.,
      38016., 32232., 34336., 36456., 38592., 32712., 34848., 37000., 39168.,
      33192., 35360., 37544., 39744., 33672., 35872., 38088., 40320., 34152.,
      36384., 38632., 40896., 34632., 36896., 39176., 41472.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5299.,  5614.,  6538.,  6888.,  7917.,  8302.,  9436.,  9856.,  7574.,
      8036.,  9240.,  9744.,  11074., 11620., 13076., 13664., 10269., 10906.,
      12362., 13048., 14651., 15386., 17136., 17920., 13160., 14000., 15680.,
      16576., 18424., 19376., 21392., 22400., 10297., 11130., 12614., 13496.,
      15127., 16058., 17836., 18816., 8582.,  9380.,  10696., 11536., 12978.,
      13860., 15428., 16352., 8239.,  8974.,  10150., 10920., 12201., 13006.,
      14392., 15232., 6056.,  6416.,  7472.,  7872.,  9048.,  9488.,  10784.,
      11264., 8656.,  9184.,  10560., 11136., 12656., 13280., 14944., 15616.,
      11736., 12464., 14128., 14912., 16744., 17584., 19584., 20480., 15040.,
      16000., 17920., 18944., 21056., 22144., 24448., 25600., 11768., 12720.,
      14416., 15424., 17288., 18352., 20384., 21504., 9808.,  10720., 12224.,
      13184., 14832., 15840., 17632., 18688., 9416.,  10256., 11600., 12480.,
      13944., 14864., 16448., 17408., 6813.,  7218.,  8406.,  8856.,  10179.,
      10674., 12132., 12672., 9738.,  10332., 11880., 12528., 14238., 14940.,
      16812., 17568., 13203., 14022., 15894., 16776., 18837., 19782., 22032.,
      23040., 16920., 18000., 20160., 21312., 23688., 24912., 27504., 28800.,
      13239., 14310., 16218., 17352., 19449., 20646., 22932., 24192., 11034.,
      12060., 13752., 14832., 16686., 17820., 19836., 21024., 10593., 11538.,
      13050., 14040., 15687., 16722., 18504., 19584., 7570.,  8020.,  9340.,
      9840.,  11310., 11860., 13480., 14080., 10820., 11480., 13200., 13920.,
      15820., 16600., 18680., 19520., 14670., 15580., 17660., 18640., 20930.,
      21980., 24480., 25600., 18800., 20000., 22400., 23680., 26320., 27680.,
      30560., 32000., 14710., 15900., 18020., 19280., 21610., 22940., 25480.,
      26880., 12260., 13400., 15280., 16480., 18540., 19800., 22040., 23360.,
      11770., 12820., 14500., 15600., 17430., 18580., 20560., 21760., 6813.,
      7218.,  8406.,  8856.,  10179., 10674., 12132., 12672., 9738.,  10332.,
      11880., 12528., 14238., 14940., 16812., 17568., 13203., 14022., 15894.,
      16776., 18837., 19782., 22032., 23040., 16920., 18000., 20160., 21312.,
      23688., 24912., 27504., 28800., 13239., 14310., 16218., 17352., 19449.,
      20646., 22932., 24192., 11034., 12060., 13752., 14832., 16686., 17820.,
      19836., 21024., 10593., 11538., 13050., 14040., 15687., 16722., 18504.,
      19584., 6056.,  6416.,  7472.,  7872.,  9048.,  9488.,  10784., 11264.,
      8656.,  9184.,  10560., 11136., 12656., 13280., 14944., 15616., 11736.,
      12464., 14128., 14912., 16744., 17584., 19584., 20480., 15040., 16000.,
      17920., 18944., 21056., 22144., 24448., 25600., 11768., 12720., 14416.,
      15424., 17288., 18352., 20384., 21504., 9808.,  10720., 12224., 13184.,
      14832., 15840., 17632., 18688., 9416.,  10256., 11600., 12480., 13944.,
      14864., 16448., 17408., 5299.,  5614.,  6538.,  6888.,  7917.,  8302.,
      9436.,  9856.,  7574.,  8036.,  9240.,  9744.,  11074., 11620., 13076.,
      13664., 10269., 10906., 12362., 13048., 14651., 15386., 17136., 17920.,
      13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400., 10297.,
      11130., 12614., 13496., 15127., 16058., 17836., 18816., 8582.,  9380.,
      10696., 11536., 12978., 13860., 15428., 16352., 8239.,  8974.,  10150.,
      10920., 12201., 13006., 14392., 15232.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17016., 17424., 18080., 18496., 19176., 19600., 20304., 20736., 17944.,
      18384., 19072., 19520., 20232., 20688., 21424., 21888., 18872., 19344.,
      20064., 20544., 21288., 21776., 22544., 23040., 19800., 20304., 21056.,
      21568., 22344., 22864., 23664., 24192., 20728., 21264., 22048., 22592.,
      23400., 23952., 24784., 25344., 21656., 22224., 23040., 23616., 24456.,
      25040., 25904., 26496., 22584., 23184., 24032., 24640., 25512., 26128.,
      27024., 27648., 24440., 25104., 26016., 26688., 27624., 28304., 29264.,
      29952., 25368., 26064., 27008., 27712., 28680., 29392., 30384., 31104.,
      26296., 27024., 28000., 28736., 29736., 30480., 31504., 32256., 27224.,
      27984., 28992., 29760., 30792., 31568., 32624., 33408., 28152., 28944.,
      29984., 30784., 31848., 32656., 33744., 34560., 29080., 29904., 30976.,
      31808., 32904., 33744., 34864., 35712., 30008., 30864., 31968., 32832.,
      33960., 34832., 35984., 36864., 31864., 32784., 33952., 34880., 36072.,
      37008., 38224., 39168., 32792., 33744., 34944., 35904., 37128., 38096.,
      39344., 40320., 33720., 34704., 35936., 36928., 38184., 39184., 40464.,
      41472., 34648., 35664., 36928., 37952., 39240., 40272., 41584., 42624.,
      35576., 36624., 37920., 38976., 40296., 41360., 42704., 43776., 36504.,
      37584., 38912., 40000., 41352., 42448., 43824., 44928., 37432., 38544.,
      39904., 41024., 42408., 43536., 44944., 46080., 39288., 40464., 41888.,
      43072., 44520., 45712., 47184., 48384., 40216., 41424., 42880., 44096.,
      45576., 46800., 48304., 49536., 41144., 42384., 43872., 45120., 46632.,
      47888., 49424., 50688., 42072., 43344., 44864., 46144., 47688., 48976.,
      50544., 51840., 43000., 44304., 45856., 47168., 48744., 50064., 51664.,
      52992., 43928., 45264., 46848., 48192., 49800., 51152., 52784., 54144.,
      44856., 46224., 47840., 49216., 50856., 52240., 53904., 55296., 46712.,
      48144., 49824., 51264., 52968., 54416., 56144., 57600., 47640., 49104.,
      50816., 52288., 54024., 55504., 57264., 58752., 48568., 50064., 51808.,
      53312., 55080., 56592., 58384., 59904., 49496., 51024., 52800., 54336.,
      56136., 57680., 59504., 61056., 50424., 51984., 53792., 55360., 57192.,
      58768., 60624., 62208., 51352., 52944., 54784., 56384., 58248., 59856.,
      61744., 63360., 52280., 53904., 55776., 57408., 59304., 60944., 62864.,
      64512., 27000., 28176., 29600., 30784., 32232., 33424., 34896., 36096.,
      27928., 29136., 30592., 31808., 33288., 34512., 36016., 37248., 28856.,
      30096., 31584., 32832., 34344., 35600., 37136., 38400., 29784., 31056.,
      32576., 33856., 35400., 36688., 38256., 39552., 30712., 32016., 33568.,
      34880., 36456., 37776., 39376., 40704., 31640., 32976., 34560., 35904.,
      37512., 38864., 40496., 41856., 32568., 33936., 35552., 36928., 38568.,
      39952., 41616., 43008., 15480., 16400., 17568., 18496., 19688., 20624.,
      21840., 22784., 16408., 17360., 18560., 19520., 20744., 21712., 22960.,
      23936., 17336., 18320., 19552., 20544., 21800., 22800., 24080., 25088.,
      18264., 19280., 20544., 21568., 22856., 23888., 25200., 26240., 19192.,
      20240., 21536., 22592., 23912., 24976., 26320., 27392., 20120., 21200.,
      22528., 23616., 24968., 26064., 27440., 28544., 21048., 22160., 23520.,
      24640., 26024., 27152., 28560., 29696.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3339.,  3654.,  3969.,  4284.,  5110.,  5460.,  5810.,  6160.,  7161.,
      7546.,  7931.,  8316.,  9492.,  9912.,  10332., 10752., 4830.,  5292.,
      5754.,  6216.,  7224.,  7728.,  8232.,  8736.,  9954.,  10500., 11046.,
      11592., 13020., 13608., 14196., 14784., 6461.,  7098.,  7735.,  8372.,
      9702.,  10388., 11074., 11760., 13335., 14070., 14805., 15540., 17360.,
      18144., 18928., 19712., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 6545.,  7378.,  8211.,  9044.,  10458., 11340., 12222., 13104.,
      14763., 15694., 16625., 17556., 19460., 20440., 21420., 22400., 7854.,
      8652.,  9450.,  10248., 11592., 12432., 13272., 14112., 15666., 16548.,
      17430., 18312., 20076., 21000., 21924., 22848., 5439.,  6174.,  6909.,
      7644.,  8778.,  9548.,  10318., 11088., 12397., 13202., 14007., 14812.,
      16296., 17136., 17976., 18816., 3816.,  4176.,  4536.,  4896.,  5840.,
      6240.,  6640.,  7040.,  8184.,  8624.,  9064.,  9504.,  10848., 11328.,
      11808., 12288., 5520.,  6048.,  6576.,  7104.,  8256.,  8832.,  9408.,
      9984.,  11376., 12000., 12624., 13248., 14880., 15552., 16224., 16896.,
      7384.,  8112.,  8840.,  9568.,  11088., 11872., 12656., 13440., 15240.,
      16080., 16920., 17760., 19840., 20736., 21632., 22528., 9664.,  10624.,
      11584., 12544., 14336., 15360., 16384., 17408., 19520., 20608., 21696.,
      22784., 25216., 26368., 27520., 28672., 7480.,  8432.,  9384.,  10336.,
      11952., 12960., 13968., 14976., 16872., 17936., 19000., 20064., 22240.,
      23360., 24480., 25600., 8976.,  9888.,  10800., 11712., 13248., 14208.,
      15168., 16128., 17904., 18912., 19920., 20928., 22944., 24000., 25056.,
      26112., 6216.,  7056.,  7896.,  8736.,  10032., 10912., 11792., 12672.,
      14168., 15088., 16008., 16928., 18624., 19584., 20544., 21504., 4293.,
      4698.,  5103.,  5508.,  6570.,  7020.,  7470.,  7920.,  9207.,  9702.,
      10197., 10692., 12204., 12744., 13284., 13824., 6210.,  6804.,  7398.,
      7992.,  9288.,  9936.,  10584., 11232., 12798., 13500., 14202., 14904.,
      16740., 17496., 18252., 19008., 8307.,  9126.,  9945.,  10764., 12474.,
      13356., 14238., 15120., 17145., 18090., 19035., 19980., 22320., 23328.,
      24336., 25344., 10872., 11952., 13032., 14112., 16128., 17280., 18432.,
      19584., 21960., 23184., 24408., 25632., 28368., 29664., 30960., 32256.,
      8415.,  9486.,  10557., 11628., 13446., 14580., 15714., 16848., 18981.,
      20178., 21375., 22572., 25020., 26280., 27540., 28800., 10098., 11124.,
      12150., 13176., 14904., 15984., 17064., 18144., 20142., 21276., 22410.,
      23544., 25812., 27000., 28188., 29376., 6993.,  7938.,  8883.,  9828.,
      11286., 12276., 13266., 14256., 15939., 16974., 18009., 19044., 20952.,
      22032., 23112., 24192., 4770.,  5220.,  5670.,  6120.,  7300.,  7800.,
      8300.,  8800.,  10230., 10780., 11330., 11880., 13560., 14160., 14760.,
      15360., 6900.,  7560.,  8220.,  8880.,  10320., 11040., 11760., 12480.,
      14220., 15000., 15780., 16560., 18600., 19440., 20280., 21120., 9230.,
      10140., 11050., 11960., 13860., 14840., 15820., 16800., 19050., 20100.,
      21150., 22200., 24800., 25920., 27040., 28160., 12080., 13280., 14480.,
      15680., 17920., 19200., 20480., 21760., 24400., 25760., 27120., 28480.,
      31520., 32960., 34400., 35840., 9350.,  10540., 11730., 12920., 14940.,
      16200., 17460., 18720., 21090., 22420., 23750., 25080., 27800., 29200.,
      30600., 32000., 11220., 12360., 13500., 14640., 16560., 17760., 18960.,
      20160., 22380., 23640., 24900., 26160., 28680., 30000., 31320., 32640.,
      7770.,  8820.,  9870.,  10920., 12540., 13640., 14740., 15840., 17710.,
      18860., 20010., 21160., 23280., 24480., 25680., 26880., 4293.,  4698.,
      5103.,  5508.,  6570.,  7020.,  7470.,  7920.,  9207.,  9702.,  10197.,
      10692., 12204., 12744., 13284., 13824., 6210.,  6804.,  7398.,  7992.,
      9288.,  9936.,  10584., 11232., 12798., 13500., 14202., 14904., 16740.,
      17496., 18252., 19008., 8307.,  9126.,  9945.,  10764., 12474., 13356.,
      14238., 15120., 17145., 18090., 19035., 19980., 22320., 23328., 24336.,
      25344., 10872., 11952., 13032., 14112., 16128., 17280., 18432., 19584.,
      21960., 23184., 24408., 25632., 28368., 29664., 30960., 32256., 8415.,
      9486.,  10557., 11628., 13446., 14580., 15714., 16848., 18981., 20178.,
      21375., 22572., 25020., 26280., 27540., 28800., 10098., 11124., 12150.,
      13176., 14904., 15984., 17064., 18144., 20142., 21276., 22410., 23544.,
      25812., 27000., 28188., 29376., 6993.,  7938.,  8883.,  9828.,  11286.,
      12276., 13266., 14256., 15939., 16974., 18009., 19044., 20952., 22032.,
      23112., 24192., 3816.,  4176.,  4536.,  4896.,  5840.,  6240.,  6640.,
      7040.,  8184.,  8624.,  9064.,  9504.,  10848., 11328., 11808., 12288.,
      5520.,  6048.,  6576.,  7104.,  8256.,  8832.,  9408.,  9984.,  11376.,
      12000., 12624., 13248., 14880., 15552., 16224., 16896., 7384.,  8112.,
      8840.,  9568.,  11088., 11872., 12656., 13440., 15240., 16080., 16920.,
      17760., 19840., 20736., 21632., 22528., 9664.,  10624., 11584., 12544.,
      14336., 15360., 16384., 17408., 19520., 20608., 21696., 22784., 25216.,
      26368., 27520., 28672., 7480.,  8432.,  9384.,  10336., 11952., 12960.,
      13968., 14976., 16872., 17936., 19000., 20064., 22240., 23360., 24480.,
      25600., 8976.,  9888.,  10800., 11712., 13248., 14208., 15168., 16128.,
      17904., 18912., 19920., 20928., 22944., 24000., 25056., 26112., 6216.,
      7056.,  7896.,  8736.,  10032., 10912., 11792., 12672., 14168., 15088.,
      16008., 16928., 18624., 19584., 20544., 21504., 3339.,  3654.,  3969.,
      4284.,  5110.,  5460.,  5810.,  6160.,  7161.,  7546.,  7931.,  8316.,
      9492.,  9912.,  10332., 10752., 4830.,  5292.,  5754.,  6216.,  7224.,
      7728.,  8232.,  8736.,  9954.,  10500., 11046., 11592., 13020., 13608.,
      14196., 14784., 6461.,  7098.,  7735.,  8372.,  9702.,  10388., 11074.,
      11760., 13335., 14070., 14805., 15540., 17360., 18144., 18928., 19712.,
      8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080.,
      18032., 18984., 19936., 22064., 23072., 24080., 25088., 6545.,  7378.,
      8211.,  9044.,  10458., 11340., 12222., 13104., 14763., 15694., 16625.,
      17556., 19460., 20440., 21420., 22400., 7854.,  8652.,  9450.,  10248.,
      11592., 12432., 13272., 14112., 15666., 16548., 17430., 18312., 20076.,
      21000., 21924., 22848., 5439.,  6174.,  6909.,  7644.,  8778.,  9548.,
      10318., 11088., 12397., 13202., 14007., 14812., 16296., 17136., 17976.,
      18816.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33624., 34032., 34440., 34848., 35744., 36160., 36576., 36992., 37928.,
      38352., 38776., 39200., 40176., 40608., 41040., 41472., 35448., 35888.,
      36328., 36768., 37696., 38144., 38592., 39040., 40008., 40464., 40920.,
      41376., 42384., 42848., 43312., 43776., 37272., 37744., 38216., 38688.,
      39648., 40128., 40608., 41088., 42088., 42576., 43064., 43552., 44592.,
      45088., 45584., 46080., 39096., 39600., 40104., 40608., 41600., 42112.,
      42624., 43136., 44168., 44688., 45208., 45728., 46800., 47328., 47856.,
      48384., 40920., 41456., 41992., 42528., 43552., 44096., 44640., 45184.,
      46248., 46800., 47352., 47904., 49008., 49568., 50128., 50688., 42744.,
      43312., 43880., 44448., 45504., 46080., 46656., 47232., 48328., 48912.,
      49496., 50080., 51216., 51808., 52400., 52992., 44568., 45168., 45768.,
      46368., 47456., 48064., 48672., 49280., 50408., 51024., 51640., 52256.,
      53424., 54048., 54672., 55296., 21336., 21744., 22152., 22560., 23456.,
      23872., 24288., 24704., 25640., 26064., 26488., 26912., 27888., 28320.,
      28752., 29184., 23160., 23600., 24040., 24480., 25408., 25856., 26304.,
      26752., 27720., 28176., 28632., 29088., 30096., 30560., 31024., 31488.,
      24984., 25456., 25928., 26400., 27360., 27840., 28320., 28800., 29800.,
      30288., 30776., 31264., 32304., 32800., 33296., 33792., 26808., 27312.,
      27816., 28320., 29312., 29824., 30336., 30848., 31880., 32400., 32920.,
      33440., 34512., 35040., 35568., 36096., 28632., 29168., 29704., 30240.,
      31264., 31808., 32352., 32896., 33960., 34512., 35064., 35616., 36720.,
      37280., 37840., 38400., 30456., 31024., 31592., 32160., 33216., 33792.,
      34368., 34944., 36040., 36624., 37208., 37792., 38928., 39520., 40112.,
      40704., 32280., 32880., 33480., 34080., 35168., 35776., 36384., 36992.,
      38120., 38736., 39352., 39968., 41136., 41760., 42384., 43008., 17240.,
      17648., 18056., 18464., 19360., 19776., 20192., 20608., 21544., 21968.,
      22392., 22816., 23792., 24224., 24656., 25088., 19064., 19504., 19944.,
      20384., 21312., 21760., 22208., 22656., 23624., 24080., 24536., 24992.,
      26000., 26464., 26928., 27392., 20888., 21360., 21832., 22304., 23264.,
      23744., 24224., 24704., 25704., 26192., 26680., 27168., 28208., 28704.,
      29200., 29696., 22712., 23216., 23720., 24224., 25216., 25728., 26240.,
      26752., 27784., 28304., 28824., 29344., 30416., 30944., 31472., 32000.,
      24536., 25072., 25608., 26144., 27168., 27712., 28256., 28800., 29864.,
      30416., 30968., 31520., 32624., 33184., 33744., 34304., 26360., 26928.,
      27496., 28064., 29120., 29696., 30272., 30848., 31944., 32528., 33112.,
      33696., 34832., 35424., 36016., 36608., 28184., 28784., 29384., 29984.,
      31072., 31680., 32288., 32896., 34024., 34640., 35256., 35872., 37040.,
      37664., 38288., 38912., 21336., 21744., 22152., 22560., 23456., 23872.,
      24288., 24704., 25640., 26064., 26488., 26912., 27888., 28320., 28752.,
      29184., 23160., 23600., 24040., 24480., 25408., 25856., 26304., 26752.,
      27720., 28176., 28632., 29088., 30096., 30560., 31024., 31488., 24984.,
      25456., 25928., 26400., 27360., 27840., 28320., 28800., 29800., 30288.,
      30776., 31264., 32304., 32800., 33296., 33792., 26808., 27312., 27816.,
      28320., 29312., 29824., 30336., 30848., 31880., 32400., 32920., 33440.,
      34512., 35040., 35568., 36096., 28632., 29168., 29704., 30240., 31264.,
      31808., 32352., 32896., 33960., 34512., 35064., 35616., 36720., 37280.,
      37840., 38400., 30456., 31024., 31592., 32160., 33216., 33792., 34368.,
      34944., 36040., 36624., 37208., 37792., 38928., 39520., 40112., 40704.,
      32280., 32880., 33480., 34080., 35168., 35776., 36384., 36992., 38120.,
      38736., 39352., 39968., 41136., 41760., 42384., 43008., 33624., 34032.,
      34440., 34848., 35744., 36160., 36576., 36992., 37928., 38352., 38776.,
      39200., 40176., 40608., 41040., 41472., 35448., 35888., 36328., 36768.,
      37696., 38144., 38592., 39040., 40008., 40464., 40920., 41376., 42384.,
      42848., 43312., 43776., 37272., 37744., 38216., 38688., 39648., 40128.,
      40608., 41088., 42088., 42576., 43064., 43552., 44592., 45088., 45584.,
      46080., 39096., 39600., 40104., 40608., 41600., 42112., 42624., 43136.,
      44168., 44688., 45208., 45728., 46800., 47328., 47856., 48384., 40920.,
      41456., 41992., 42528., 43552., 44096., 44640., 45184., 46248., 46800.,
      47352., 47904., 49008., 49568., 50128., 50688., 42744., 43312., 43880.,
      44448., 45504., 46080., 46656., 47232., 48328., 48912., 49496., 50080.,
      51216., 51808., 52400., 52992., 44568., 45168., 45768., 46368., 47456.,
      48064., 48672., 49280., 50408., 51024., 51640., 52256., 53424., 54048.,
      54672., 55296., 21336., 21744., 22152., 22560., 23456., 23872., 24288.,
      24704., 25640., 26064., 26488., 26912., 27888., 28320., 28752., 29184.,
      23160., 23600., 24040., 24480., 25408., 25856., 26304., 26752., 27720.,
      28176., 28632., 29088., 30096., 30560., 31024., 31488., 24984., 25456.,
      25928., 26400., 27360., 27840., 28320., 28800., 29800., 30288., 30776.,
      31264., 32304., 32800., 33296., 33792., 26808., 27312., 27816., 28320.,
      29312., 29824., 30336., 30848., 31880., 32400., 32920., 33440., 34512.,
      35040., 35568., 36096., 28632., 29168., 29704., 30240., 31264., 31808.,
      32352., 32896., 33960., 34512., 35064., 35616., 36720., 37280., 37840.,
      38400., 30456., 31024., 31592., 32160., 33216., 33792., 34368., 34944.,
      36040., 36624., 37208., 37792., 38928., 39520., 40112., 40704., 32280.,
      32880., 33480., 34080., 35168., 35776., 36384., 36992., 38120., 38736.,
      39352., 39968., 41136., 41760., 42384., 43008., 17240., 17648., 18056.,
      18464., 19360., 19776., 20192., 20608., 21544., 21968., 22392., 22816.,
      23792., 24224., 24656., 25088., 19064., 19504., 19944., 20384., 21312.,
      21760., 22208., 22656., 23624., 24080., 24536., 24992., 26000., 26464.,
      26928., 27392., 20888., 21360., 21832., 22304., 23264., 23744., 24224.,
      24704., 25704., 26192., 26680., 27168., 28208., 28704., 29200., 29696.,
      22712., 23216., 23720., 24224., 25216., 25728., 26240., 26752., 27784.,
      28304., 28824., 29344., 30416., 30944., 31472., 32000., 24536., 25072.,
      25608., 26144., 27168., 27712., 28256., 28800., 29864., 30416., 30968.,
      31520., 32624., 33184., 33744., 34304., 26360., 26928., 27496., 28064.,
      29120., 29696., 30272., 30848., 31944., 32528., 33112., 33696., 34832.,
      35424., 36016., 36608., 28184., 28784., 29384., 29984., 31072., 31680.,
      32288., 32896., 34024., 34640., 35256., 35872., 37040., 37664., 38288.,
      38912.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13055., 14508., 16004., 17696., 15468., 13282., 11145., 10728., 12164.,
      13664., 15668., 13536., 12004., 10504., 12031., 14184., 16404., 19418.,
      17436., 15766., 14129., 17438., 20929., 24472., 29081., 24472., 20929.,
      17438., 14129., 15766., 17436., 19418., 16404., 14184., 12031., 10504.,
      12004., 13536., 15668., 13664., 12164., 10728., 11145., 13282., 15468.,
      17696., 16004., 14508., 13055.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1622., 1700., 1778., 1856., 1934., 2012., 2090., 2324., 2402., 2480.,
      2558., 2636., 2714., 2792., 3026., 3104., 3182., 3260., 3338., 3416.,
      3494., 3728., 3806., 3884., 3962., 4040., 4118., 4196., 4430., 4508.,
      4586., 4664., 4742., 4820., 4898., 5132., 5210., 5288., 5366., 5444.,
      5522., 5600., 5834., 5912., 5990., 6068., 6146., 6224., 6302.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10877., 11550., 12361., 13144., 13828., 14728., 15424., 16448., 13916.,
      14840., 11891., 12708., 10067., 10770., 10720., 11440., 13124., 13960.,
      15520., 16480., 18340., 19432., 17216., 18176., 15380., 16232., 12720.,
      13456., 12297., 13086., 13880., 14800., 15460., 16520., 17755., 18964.,
      15564., 16632., 13878., 14828., 12107., 12930., 14636., 15548., 17719.,
      18786., 20768., 22000., 24787., 26194., 21136., 22384., 18187., 19298.,
      14904., 15868., 13543., 14434., 15901., 16940., 18220., 19416., 20770.,
      22132., 19124., 20328., 17315., 18384., 14881., 15806., 13056., 13872.,
      16372., 17320., 17600., 18688., 19348., 20584., 15936., 17024., 13636.,
      14600., 11440., 12272., 10179., 10866., 11882., 12676., 13580., 14488.,
      15259., 16288., 13636., 14536., 12508., 13304., 11153., 11838.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3058.,  3244.,  3202.,  3400.,  3346.,  3556.,  3490.,  3712.,  3634.,
      3868.,  3778.,  4024.,  3922.,  4180.,  4354.,  4648.,  4498.,  4804.,
      4642.,  4960.,  4786.,  5116.,  4930.,  5272.,  5074.,  5428.,  5218.,
      5584.,  5650.,  6052.,  5794.,  6208.,  5938.,  6364.,  6082.,  6520.,
      6226.,  6676.,  6370.,  6832.,  6514.,  6988.,  6946.,  7456.,  7090.,
      7612.,  7234.,  7768.,  7378.,  7924.,  7522.,  8080.,  7666.,  8236.,
      7810.,  8392.,  8242.,  8860.,  8386.,  9016.,  8530.,  9172.,  8674.,
      9328.,  8818.,  9484.,  8962.,  9640.,  9106.,  9796.,  9538.,  10264.,
      9682.,  10420., 9826.,  10576., 9970.,  10732., 10114., 10888., 10258.,
      11044., 10402., 11200., 10834., 11668., 10978., 11824., 11122., 11980.,
      11266., 12136., 11410., 12292., 11554., 12448., 11698., 12604.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9753.,  10426., 11099., 11772., 11011., 11794., 12577., 13360., 12996.,
      13896., 14796., 15696., 14976., 16000., 17024., 18048., 13884., 14808.,
      15732., 16656., 12597., 13414., 14231., 15048., 10823., 11526., 12229.,
      12932., 10320., 11040., 11760., 12480., 12164., 13000., 13836., 14672.,
      14016., 14976., 15936., 16896., 16164., 17256., 18348., 19440., 14912.,
      15872., 16832., 17792., 13364., 14216., 15068., 15920., 11072., 11808.,
      12544., 13280., 11581., 12370., 13159., 13948., 13528., 14448., 15368.,
      16288., 15748., 16808., 17868., 18928., 18525., 19734., 20943., 22152.,
      17100., 18168., 19236., 20304., 15030., 15980., 16930., 17880., 12703.,
      13526., 14349., 15172., 13288., 14200., 15112., 16024., 15715., 16782.,
      17849., 18916., 18640., 19872., 21104., 22336., 22343., 23750., 25157.,
      26564., 19456., 20704., 21952., 23200., 17343., 18454., 19565., 20676.,
      14476., 15440., 16404., 17368., 13267., 14158., 15049., 15940., 15947.,
      16986., 18025., 19064., 19404., 20600., 21796., 22992., 20850., 22212.,
      23574., 24936., 18228., 19432., 20636., 21840., 15641., 16710., 17779.,
      18848., 12837., 13762., 14687., 15612., 12592., 13408., 14224., 15040.,
      15764., 16712., 17660., 18608., 16960., 18048., 19136., 20224., 18516.,
      19752., 20988., 22224., 15808., 16896., 17984., 19072., 13508., 14472.,
      15436., 16400., 11680., 12512., 13344., 14176., 11159., 11846., 12533.,
      13220., 12026., 12820., 13614., 14408., 13324., 14232., 15140., 16048.,
      14481., 15510., 16539., 17568., 12420., 13320., 14220., 15120., 11292.,
      12088., 12884., 13680., 10261., 10946., 11631., 12316.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5930.,  6116.,  6302.,  6488.,  6206.,  6404.,  6602.,  6800.,  6482.,
      6692.,  6902.,  7112.,  6758.,  6980.,  7202.,  7424.,  7034.,  7268.,
      7502.,  7736.,  7310.,  7556.,  7802.,  8048.,  7586.,  7844.,  8102.,
      8360.,  8414.,  8708.,  9002.,  9296.,  8690.,  8996.,  9302.,  9608.,
      8966.,  9284.,  9602.,  9920.,  9242.,  9572.,  9902.,  10232., 9518.,
      9860.,  10202., 10544., 9794.,  10148., 10502., 10856., 10070., 10436.,
      10802., 11168., 10898., 11300., 11702., 12104., 11174., 11588., 12002.,
      12416., 11450., 11876., 12302., 12728., 11726., 12164., 12602., 13040.,
      12002., 12452., 12902., 13352., 12278., 12740., 13202., 13664., 12554.,
      13028., 13502., 13976., 13382., 13892., 14402., 14912., 13658., 14180.,
      14702., 15224., 13934., 14468., 15002., 15536., 14210., 14756., 15302.,
      15848., 14486., 15044., 15602., 16160., 14762., 15332., 15902., 16472.,
      15038., 15620., 16202., 16784., 15866., 16484., 17102., 17720., 16142.,
      16772., 17402., 18032., 16418., 17060., 17702., 18344., 16694., 17348.,
      18002., 18656., 16970., 17636., 18302., 18968., 17246., 17924., 18602.,
      19280., 17522., 18212., 18902., 19592., 18350., 19076., 19802., 20528.,
      18626., 19364., 20102., 20840., 18902., 19652., 20402., 21152., 19178.,
      19940., 20702., 21464., 19454., 20228., 21002., 21776., 19730., 20516.,
      21302., 22088., 20006., 20804., 21602., 22400., 20834., 21668., 22502.,
      23336., 21110., 21956., 22802., 23648., 21386., 22244., 23102., 23960.,
      21662., 22532., 23402., 24272., 21938., 22820., 23702., 24584., 22214.,
      23108., 24002., 24896., 22490., 23396., 24302., 25208.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11626., 12988., 12715., 14320., 13176., 14992., 14133., 16192., 12344.,
      14192., 10371., 11976., 8594.,  9956.,  10160., 11680., 12824., 14608.,
      15456., 17472., 19176., 21456., 18592., 20608., 17336., 19088., 13200.,
      14688., 13006., 14780., 14709., 16800., 15944., 18320., 17219., 19880.,
      15336., 17712., 13741., 15832., 11798., 13572., 14732., 16632., 18886.,
      21124., 23152., 25696., 28610., 31460., 23152., 25696., 18886., 21124.,
      14732., 16632., 11798., 13572., 13741., 15832., 15336., 17712., 17219.,
      19880., 15944., 18320., 14709., 16800., 13006., 14780., 13200., 14688.,
      17336., 19088., 18592., 20608., 19176., 21456., 15456., 17472., 12824.,
      14608., 10160., 11680., 8594.,  9956.,  10371., 11976., 12344., 14192.,
      14133., 16192., 13176., 14992., 12715., 14320., 11626., 12988.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5972.,  6488.,  6260.,  6800.,  6548.,  7112.,  6836.,  7424.,  7124.,
      7736.,  7412.,  8048.,  7700.,  8360.,  8564.,  9296.,  8852.,  9608.,
      9140.,  9920.,  9428.,  10232., 9716.,  10544., 10004., 10856., 10292.,
      11168., 11156., 12104., 11444., 12416., 11732., 12728., 12020., 13040.,
      12308., 13352., 12596., 13664., 12884., 13976., 13748., 14912., 14036.,
      15224., 14324., 15536., 14612., 15848., 14900., 16160., 15188., 16472.,
      15476., 16784., 16340., 17720., 16628., 18032., 16916., 18344., 17204.,
      18656., 17492., 18968., 17780., 19280., 18068., 19592., 18932., 20528.,
      19220., 20840., 19508., 21152., 19796., 21464., 20084., 21776., 20372.,
      22088., 20660., 22400., 21524., 23336., 21812., 23648., 22100., 23960.,
      22388., 24272., 22676., 24584., 22964., 24896., 23252., 25208.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9788.,  10452., 11830., 12536., 10825., 11606., 13218., 14048., 12128.,
      13008., 14840., 15776., 13929., 14922., 16992., 18048., 12976., 13872.,
      15720., 16672., 12277., 13062., 14670., 15504., 11248., 11908., 13258.,
      13960., 9776.,  10496., 12032., 12800., 11456., 12304., 14104., 15008.,
      13120., 14080., 16128., 17152., 15888., 16976., 19288., 20448., 15424.,
      16384., 18432., 19456., 14848., 15696., 17496., 18400., 11376., 12096.,
      13632., 14400., 11816., 12668., 14446., 15352., 14073., 15082., 17168.,
      18240., 16976., 18128., 20504., 21728., 20325., 21606., 24254., 25616.,
      20160., 21296., 23656., 24864., 16237., 17242., 19332., 20400., 12468.,
      13324., 15098., 16008., 12628., 13528., 15472., 16432., 15804., 16876.,
      19154., 20296., 19312., 20544., 23136., 24448., 23968., 25348., 28234.,
      29704., 19504., 20736., 23328., 24640., 16196., 17292., 19578., 20744.,
      12940., 13880., 15816., 16816., 13068., 13932., 15730., 16648., 16251.,
      17274., 19378., 20464., 20448., 21616., 24008., 25248., 20339., 21638.,
      24300., 25680., 16784., 17936., 20312., 21536., 14063., 15082., 17158.,
      18240., 11416., 12284., 14046., 14968., 11184., 11904., 13440., 14208.,
      14848., 15696., 17496., 18400., 16096., 17088., 19168., 20224., 16752.,
      17872., 20216., 21408., 14176., 15168., 17248., 18304., 12256., 13136.,
      14968., 15904., 10768., 11520., 13088., 13888., 11440., 12100., 13450.,
      14152., 12195., 12966., 14556., 15376., 13168., 14064., 15912., 16864.,
      13599., 14602., 16662., 17728., 11744., 12624., 14456., 15392., 10831.,
      11606., 13224., 14048., 9732.,  10388., 11774., 12472.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11584., 11944., 12604., 12976., 12136., 12520., 13204., 13600., 12688.,
      13096., 13804., 14224., 13240., 13672., 14404., 14848., 13792., 14248.,
      15004., 15472., 14344., 14824., 15604., 16096., 14896., 15400., 16204.,
      16720., 16552., 17128., 18004., 18592., 17104., 17704., 18604., 19216.,
      17656., 18280., 19204., 19840., 18208., 18856., 19804., 20464., 18760.,
      19432., 20404., 21088., 19312., 20008., 21004., 21712., 19864., 20584.,
      21604., 22336., 21520., 22312., 23404., 24208., 22072., 22888., 24004.,
      24832., 22624., 23464., 24604., 25456., 23176., 24040., 25204., 26080.,
      23728., 24616., 25804., 26704., 24280., 25192., 26404., 27328., 24832.,
      25768., 27004., 27952., 26488., 27496., 28804., 29824., 27040., 28072.,
      29404., 30448., 27592., 28648., 30004., 31072., 28144., 29224., 30604.,
      31696., 28696., 29800., 31204., 32320., 29248., 30376., 31804., 32944.,
      29800., 30952., 32404., 33568., 31456., 32680., 34204., 35440., 32008.,
      33256., 34804., 36064., 32560., 33832., 35404., 36688., 33112., 34408.,
      36004., 37312., 33664., 34984., 36604., 37936., 34216., 35560., 37204.,
      38560., 34768., 36136., 37804., 39184., 36424., 37864., 39604., 41056.,
      36976., 38440., 40204., 41680., 37528., 39016., 40804., 42304., 38080.,
      39592., 41404., 42928., 38632., 40168., 42004., 43552., 39184., 40744.,
      42604., 44176., 39736., 41320., 43204., 44800., 41392., 43048., 45004.,
      46672., 41944., 43624., 45604., 47296., 42496., 44200., 46204., 47920.,
      43048., 44776., 46804., 48544., 43600., 45352., 47404., 49168., 44152.,
      45928., 48004., 49792., 44704., 46504., 48604., 50416.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8256.,  8920.,  9584.,  10248., 11626., 12332., 13038., 13744., 10117.,
      10898., 11679., 12460., 14086., 14916., 15746., 16576., 12624., 13504.,
      14384., 15264., 17096., 18032., 18968., 19904., 12529., 13522., 14515.,
      15508., 17568., 18624., 19680., 20736., 10720., 11616., 12512., 13408.,
      15256., 16208., 17160., 18112., 9945.,  10730., 11515., 12300., 13914.,
      14748., 15582., 16416., 9036.,  9696.,  10356., 11016., 12374., 13076.,
      13778., 14480., 9104.,  9824.,  10544., 11264., 12800., 13568., 14336.,
      15104., 12336., 13184., 14032., 14880., 16680., 17584., 18488., 19392.,
      11968., 12928., 13888., 14848., 16896., 17920., 18944., 19968., 13280.,
      14368., 15456., 16544., 18856., 20016., 21176., 22336., 12480., 13440.,
      14400., 15360., 17408., 18432., 19456., 20480., 11952., 12800., 13648.,
      14496., 16296., 17200., 18104., 19008., 9232.,  9952.,  10672., 11392.,
      12928., 13696., 14464., 15232., 12028., 12880., 13732., 14584., 16338.,
      17244., 18150., 19056., 12801., 13810., 14819., 15828., 17904., 18976.,
      20048., 21120., 14368., 15520., 16672., 17824., 20200., 21424., 22648.,
      23872., 16329., 17610., 18891., 20172., 22826., 24188., 25550., 26912.,
      16144., 17280., 18416., 19552., 21912., 23120., 24328., 25536., 13037.,
      14042., 15047., 16052., 18140., 19208., 20276., 21344., 10352., 11208.,
      12064., 12920., 14694., 15604., 16514., 17424., 11044., 11944., 12844.,
      13744., 15648., 16608., 17568., 18528., 13128., 14200., 15272., 16344.,
      18606., 19748., 20890., 22032., 15376., 16608., 17840., 19072., 21664.,
      22976., 24288., 25600., 19420., 20800., 22180., 23560., 26454., 27924.,
      29394., 30864., 15760., 16992., 18224., 19456., 22048., 23360., 24672.,
      25984., 13472., 14568., 15664., 16760., 19046., 20212., 21378., 22544.,
      12044., 12984., 13924., 14864., 16808., 17808., 18808., 19808., 10936.,
      11800., 12664., 13528., 15310., 16228., 17146., 18064., 13047., 14070.,
      15093., 16116., 18214., 19300., 20386., 21472., 16688., 17856., 19024.,
      20192., 22584., 23824., 25064., 26304., 16339., 17638., 18937., 20236.,
      22900., 24280., 25660., 27040., 13984., 15136., 16288., 17440., 19816.,
      21040., 22264., 23488., 12931., 13950., 14969., 15988., 18066., 19148.,
      20230., 21312., 12108., 12976., 13844., 14712., 16482., 17404., 18326.,
      19248., 8848.,  9568.,  10288., 11008., 12544., 13312., 14080., 14848.,
      11952., 12800., 13648., 14496., 16296., 17200., 18104., 19008., 12768.,
      13760., 14752., 15744., 17824., 18880., 19936., 20992., 13952., 15072.,
      16192., 17312., 19656., 20848., 22040., 23232., 13024., 14016., 15008.,
      16000., 18080., 19136., 20192., 21248., 12368., 13248., 14128., 15008.,
      16840., 17776., 18712., 19648., 9520.,  10272., 11024., 11776., 13344.,
      14144., 14944., 15744., 9420.,  10080., 10740., 11400., 12758., 13460.,
      14162., 14864., 9795.,  10566., 11337., 12108., 13700., 14520., 15340.,
      16160., 11104., 12000., 12896., 13792., 15640., 16592., 17544., 18496.,
      12531., 13534., 14537., 15540., 17602., 18668., 19734., 20800., 12368.,
      13248., 14128., 15008., 16840., 17776., 18712., 19648., 9911.,  10686.,
      11461., 12236., 13848., 14672., 15496., 16320., 8056.,  8712.,  9368.,
      10024., 11394., 12092., 12790., 13488.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9240.,  9600.,  9960.,  10320., 11012., 11384., 11756., 12128., 9808.,
      10192., 10576., 10960., 11676., 12072., 12468., 12864., 10376., 10784.,
      11192., 11600., 12340., 12760., 13180., 13600., 9344.,  9712.,  10080.,
      10448., 11148., 11528., 11908., 12288., 8824.,  9152.,  9480.,  9808.,
      10468., 10808., 11148., 11488., 8816.,  9104.,  9392.,  9680.,  10300.,
      10600., 10900., 11200., 9384.,  9696.,  10008., 10320., 10964., 11288.,
      11612., 11936., 11088., 11472., 11856., 12240., 12956., 13352., 13748.,
      14144., 11656., 12064., 12472., 12880., 13620., 14040., 14460., 14880.,
      12224., 12656., 13088., 13520., 14284., 14728., 15172., 15616., 12728.,
      13120., 13512., 13904., 14628., 15032., 15436., 15840., 9648.,  10000.,
      10352., 10704., 11388., 11752., 12116., 12480., 7080.,  7392.,  7704.,
      8016.,  8660.,  8984.,  9308.,  9632.,  7648.,  7984.,  8320.,  8656.,
      9324.,  9672.,  10020., 10368., 9352.,  9760.,  10168., 10576., 11316.,
      11736., 12156., 12576., 9920.,  10352., 10784., 11216., 11980., 12424.,
      12868., 13312., 10488., 10944., 11400., 11856., 12644., 13112., 13580.,
      14048., 8432.,  8848.,  9264.,  9680.,  10428., 10856., 11284., 11712.,
      6888.,  7264.,  7640.,  8016.,  8724.,  9112.,  9500.,  9888.,  5856.,
      6192.,  6528.,  6864.,  7532.,  7880.,  8228.,  8576.,  6424.,  6784.,
      7144.,  7504.,  8196.,  8568.,  8940.,  9312.,  8128.,  8560.,  8992.,
      9424.,  10188., 10632., 11076., 11520., 8696.,  9152.,  9608.,  10064.,
      10852., 11320., 11788., 12256., 9264.,  9744.,  10224., 10704., 11516.,
      12008., 12500., 12992., 8744.,  9184.,  9624.,  10064., 10836., 11288.,
      11740., 12192., 8736.,  9136.,  9536.,  9936.,  10668., 11080., 11492.,
      11904., 9240.,  9600.,  9960.,  10320., 11012., 11384., 11756., 12128.,
      9808.,  10192., 10576., 10960., 11676., 12072., 12468., 12864., 8824.,
      9152.,  9480.,  9808.,  10468., 10808., 11148., 11488., 8816.,  9104.,
      9392.,  9680.,  10300., 10600., 10900., 11200., 9384.,  9696.,  10008.,
      10320., 10964., 11288., 11612., 11936., 9952.,  10288., 10624., 10960.,
      11628., 11976., 12324., 12672., 10520., 10880., 11240., 11600., 12292.,
      12664., 13036., 13408., 11088., 11472., 11856., 12240., 12956., 13352.,
      13748., 14144., 11656., 12064., 12472., 12880., 13620., 14040., 14460.,
      14880., 9648.,  10000., 10352., 10704., 11388., 11752., 12116., 12480.,
      7080.,  7392.,  7704.,  8016.,  8660.,  8984.,  9308.,  9632.,  7648.,
      7984.,  8320.,  8656.,  9324.,  9672.,  10020., 10368., 8216.,  8576.,
      8936.,  9296.,  9988.,  10360., 10732., 11104., 8784.,  9168.,  9552.,
      9936.,  10652., 11048., 11444., 11840., 9352.,  9760.,  10168., 10576.,
      11316., 11736., 12156., 12576., 9920.,  10352., 10784., 11216., 11980.,
      12424., 12868., 13312., 6888.,  7264.,  7640.,  8016.,  8724.,  9112.,
      9500.,  9888.,  5856.,  6192.,  6528.,  6864.,  7532.,  7880.,  8228.,
      8576.,  6424.,  6784.,  7144.,  7504.,  8196.,  8568.,  8940.,  9312.,
      6992.,  7376.,  7760.,  8144.,  8860.,  9256.,  9652.,  10048., 7560.,
      7968.,  8376.,  8784.,  9524.,  9944.,  10364., 10784., 8128.,  8560.,
      8992.,  9424.,  10188., 10632., 11076., 11520., 8696.,  9152.,  9608.,
      10064., 10852., 11320., 11788., 12256.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9218.,  10536., 11938., 13424., 9397.,  10924., 12549., 14272., 10136.,
      11872., 13720., 15680., 11835., 13780., 15851., 18048., 11928., 13664.,
      15512., 17472., 12149., 13644., 15237., 16928., 12386., 13640., 14978.,
      16400., 9072.,  10560., 12144., 13824., 10136., 11872., 13720., 15680.,
      12096., 14080., 16192., 18432., 15336., 17568., 19944., 22464., 16192.,
      18176., 20288., 22528., 17304., 19040., 20888., 22848., 12144., 13632.,
      15216., 16896., 9534.,  11192., 12958., 14832., 11835., 13780., 15851.,
      18048., 15336., 17568., 19944., 22464., 20245., 22732., 25381., 28192.,
      22248., 24480., 26856., 29376., 16187., 18164., 20267., 22496., 11774.,
      13464., 15262., 17168., 11436., 13296., 15276., 17376., 15182., 17368.,
      19694., 22160., 20240., 22720., 25360., 28160., 27218., 29960., 32882.,
      35984., 20240., 22720., 25360., 28160., 15182., 17368., 19694., 22160.,
      11436., 13296., 15276., 17376., 11774., 13464., 15262., 17168., 16187.,
      18164., 20267., 22496., 22248., 24480., 26856., 29376., 20245., 22732.,
      25381., 28192., 15336., 17568., 19944., 22464., 11835., 13780., 15851.,
      18048., 9534.,  11192., 12958., 14832., 12144., 13632., 15216., 16896.,
      17304., 19040., 20888., 22848., 16192., 18176., 20288., 22528., 15336.,
      17568., 19944., 22464., 12096., 14080., 16192., 18432., 10136., 11872.,
      13720., 15680., 9072.,  10560., 12144., 13824., 12386., 13640., 14978.,
      16400., 12149., 13644., 15237., 16928., 11928., 13664., 15512., 17472.,
      11835., 13780., 15851., 18048., 10136., 11872., 13720., 15680., 9397.,
      10924., 12549., 14272., 9218.,  10536., 11938., 13424.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22892., 23888., 24908., 25952., 23996., 25040., 26108., 27200., 25100.,
      26192., 27308., 28448., 20444., 21456., 22492., 23552., 16300., 17232.,
      18188., 19168., 12668., 13520., 14396., 15296., 13772., 14672., 15596.,
      16544., 17084., 18128., 19196., 20288., 18188., 19280., 20396., 21536.,
      19292., 20432., 21596., 22784., 16172., 17232., 18316., 19424., 13564.,
      14544., 15548., 16576., 11468., 12368., 13292., 14240., 12572., 13520.,
      14492., 15488., 15884., 16976., 18092., 19232., 16988., 18128., 19292.,
      20480., 18092., 19280., 20492., 21728., 16508., 17616., 18748., 19904.,
      15436., 16464., 17516., 18592., 14876., 15824., 16796., 17792., 15980.,
      16976., 17996., 19040., 19292., 20432., 21596., 22784., 20396., 21584.,
      22796., 24032., 21500., 22736., 23996., 25280., 21452., 22608., 23788.,
      24992., 21916., 22992., 24092., 25216., 22892., 23888., 24908., 25952.,
      23996., 25040., 26108., 27200., 16300., 17232., 18188., 19168., 12668.,
      13520., 14396., 15296., 13772., 14672., 15596., 16544., 14876., 15824.,
      16796., 17792., 15980., 16976., 17996., 19040., 17084., 18128., 19196.,
      20288., 18188., 19280., 20396., 21536., 13564., 14544., 15548., 16576.,
      11468., 12368., 13292., 14240., 12572., 13520., 14492., 15488., 13676.,
      14672., 15692., 16736., 14780., 15824., 16892., 17984., 15884., 16976.,
      18092., 19232., 16988., 18128., 19292., 20480., 15436., 16464., 17516.,
      18592., 14876., 15824., 16796., 17792., 15980., 16976., 17996., 19040.,
      17084., 18128., 19196., 20288., 18188., 19280., 20396., 21536., 19292.,
      20432., 21596., 22784., 20396., 21584., 22796., 24032.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7390.,  8036.,  9312.,  10000., 11402., 12132., 13660., 14432., 9601.,
      10346., 11838., 12632., 14271., 15114., 16900., 17792., 13160., 14000.,
      15680., 16576., 18424., 19376., 21392., 22400., 11475., 12406., 14278.,
      15272., 17333., 18390., 20640., 21760., 9576.,  10416., 12096., 12992.,
      14840., 15792., 17808., 18816., 8985.,  9706.,  11158., 11928., 13527.,
      14346., 16092., 16960., 9446.,  10052., 11272., 11920., 13266., 13956.,
      15428., 16160., 8976.,  9696.,  11136., 11904., 13488., 14304., 16032.,
      16896., 13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400.,
      11968., 12928., 14848., 15872., 17984., 19072., 21376., 22528., 12312.,
      13392., 15552., 16704., 19080., 20304., 22896., 24192., 11968., 12928.,
      14848., 15872., 17984., 19072., 21376., 22528., 13160., 14000., 15680.,
      16576., 18424., 19376., 21392., 22400., 8976.,  9696.,  11136., 11904.,
      13488., 14304., 16032., 16896., 12010., 12796., 14376., 15216., 16958.,
      17852., 19756., 20704., 11475., 12406., 14278., 15272., 17333., 18390.,
      20640., 21760., 12312., 13392., 15552., 16704., 19080., 20304., 22896.,
      24192., 14969., 16170., 18582., 19864., 22519., 23882., 26780., 28224.,
      16920., 18000., 20160., 21312., 23688., 24912., 27504., 28800., 11963.,
      12918., 14830., 15848., 17949., 19030., 21320., 22464., 9442.,  10268.,
      11904., 12784., 14582., 15516., 17476., 18464., 10732., 11608., 13368.,
      14304., 16244., 17240., 19360., 20416., 12034., 13084., 15184., 16304.,
      18614., 19804., 22324., 23584., 14960., 16160., 18560., 19840., 22480.,
      23840., 26720., 28160., 20726., 22052., 24712., 26128., 29058., 30564.,
      33764., 35360., 14960., 16160., 18560., 19840., 22480., 23840., 26720.,
      28160., 12178., 13244., 15360., 16496., 18822., 20028., 22564., 23840.,
      11420., 12344., 14152., 15136., 17124., 18168., 20336., 21440., 9298.,
      10108., 11728., 12592., 14374., 15292., 17236., 18208., 11959., 12918.,
      14826., 15848., 17945., 19030., 21316., 22464., 16920., 18000., 20160.,
      21312., 23688., 24912., 27504., 28800., 14965., 16170., 18578., 19864.,
      22515., 23882., 26776., 28224., 12312., 13392., 15552., 16704., 19080.,
      20304., 22896., 24192., 11743., 12694., 14578., 15592., 17665., 18742.,
      21004., 22144., 12682., 13500., 15112., 15984., 17758., 18684., 20620.,
      21600., 8976.,  9696.,  11136., 11904., 13488., 14304., 16032., 16896.,
      13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400., 11968.,
      12928., 14848., 15872., 17984., 19072., 21376., 22528., 12312., 13392.,
      15552., 16704., 19080., 20304., 22896., 24192., 11968., 12928., 14848.,
      15872., 17984., 19072., 21376., 22528., 13160., 14000., 15680., 16576.,
      18424., 19376., 21392., 22400., 8976.,  9696.,  11136., 11904., 13488.,
      14304., 16032., 16896., 9446.,  10052., 11272., 11920., 13266., 13956.,
      15428., 16160., 8981.,  9706.,  11154., 11928., 13523., 14346., 16088.,
      16960., 9576.,  10416., 12096., 12992., 14840., 15792., 17808., 18816.,
      11743., 12694., 14578., 15592., 17665., 18742., 21004., 22144., 13160.,
      14000., 15680., 16576., 18424., 19376., 21392., 22400., 9197.,  9930.,
      11402., 12184., 13803., 14634., 16400., 17280., 7246.,  7876.,  9136.,
      9808.,  11194., 11908., 13420., 14176.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45076., 45784., 47056., 47776., 49084., 49816., 51160., 51904., 47236.,
      47992., 49312., 50080., 51436., 52216., 53608., 54400., 49396., 50200.,
      51568., 52384., 53788., 54616., 56056., 56896., 40164., 40888., 42176.,
      42912., 44236., 44984., 46344., 47104., 31956., 32600., 33808., 34464.,
      35708., 36376., 37656., 38336., 24772., 25336., 26464., 27040., 28204.,
      28792., 29992., 30592., 26932., 27544., 28720., 29344., 30556., 31192.,
      32440., 33088., 33412., 34168., 35488., 36256., 37612., 38392., 39784.,
      40576., 35572., 36376., 37744., 38560., 39964., 40792., 42232., 43072.,
      37732., 38584., 40000., 40864., 42316., 43192., 44680., 45568., 31572.,
      32344., 33680., 34464., 35836., 36632., 38040., 38848., 26436., 27128.,
      28384., 29088., 30380., 31096., 32424., 33152., 22324., 22936., 24112.,
      24736., 25948., 26584., 27832., 28480., 24484., 25144., 26368., 27040.,
      28300., 28984., 30280., 30976., 30964., 31768., 33136., 33952., 35356.,
      36184., 37624., 38464., 33124., 33976., 35392., 36256., 37708., 38584.,
      40072., 40960., 35284., 36184., 37648., 38560., 40060., 40984., 42520.,
      43456., 32196., 33016., 34400., 35232., 36652., 37496., 38952., 39808.,
      30132., 30872., 32176., 32928., 34268., 35032., 36408., 37184., 29092.,
      29752., 30976., 31648., 32908., 33592., 34888., 35584., 31252., 31960.,
      33232., 33952., 35260., 35992., 37336., 38080., 37732., 38584., 40000.,
      40864., 42316., 43192., 44680., 45568., 39892., 40792., 42256., 43168.,
      44668., 45592., 47128., 48064., 42052., 43000., 44512., 45472., 47020.,
      47992., 49576., 50560., 42036., 42904., 44336., 45216., 46684., 47576.,
      49080., 49984., 43044., 43832., 45184., 45984., 47372., 48184., 49608.,
      50432., 45076., 45784., 47056., 47776., 49084., 49816., 51160., 51904.,
      47236., 47992., 49312., 50080., 51436., 52216., 53608., 54400., 31956.,
      32600., 33808., 34464., 35708., 36376., 37656., 38336., 24772., 25336.,
      26464., 27040., 28204., 28792., 29992., 30592., 26932., 27544., 28720.,
      29344., 30556., 31192., 32440., 33088., 29092., 29752., 30976., 31648.,
      32908., 33592., 34888., 35584., 31252., 31960., 33232., 33952., 35260.,
      35992., 37336., 38080., 33412., 34168., 35488., 36256., 37612., 38392.,
      39784., 40576., 35572., 36376., 37744., 38560., 39964., 40792., 42232.,
      43072., 26436., 27128., 28384., 29088., 30380., 31096., 32424., 33152.,
      22324., 22936., 24112., 24736., 25948., 26584., 27832., 28480., 24484.,
      25144., 26368., 27040., 28300., 28984., 30280., 30976., 26644., 27352.,
      28624., 29344., 30652., 31384., 32728., 33472., 28804., 29560., 30880.,
      31648., 33004., 33784., 35176., 35968., 30964., 31768., 33136., 33952.,
      35356., 36184., 37624., 38464., 33124., 33976., 35392., 36256., 37708.,
      38584., 40072., 40960., 30132., 30872., 32176., 32928., 34268., 35032.,
      36408., 37184., 29092., 29752., 30976., 31648., 32908., 33592., 34888.,
      35584., 31252., 31960., 33232., 33952., 35260., 35992., 37336., 38080.,
      33412., 34168., 35488., 36256., 37612., 38392., 39784., 40576., 35572.,
      36376., 37744., 38560., 39964., 40792., 42232., 43072., 37732., 38584.,
      40000., 40864., 42316., 43192., 44680., 45568., 39892., 40792., 42256.,
      43168., 44668., 45592., 47128., 48064.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6422.,  7068.,  7714.,  8360.,  9552.,  10240., 10928., 11616., 13018.,
      13748., 14478., 15208., 16820., 17592., 18364., 19136., 6137.,  6882.,
      7627.,  8372.,  9762.,  10556., 11350., 12144., 13779., 14622., 15465.,
      16308., 18188., 19080., 19972., 20864., 8456.,  9296.,  10136., 10976.,
      12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064.,
      23072., 24080., 25088., 7587.,  8518.,  9449.,  10380., 12138., 13132.,
      14126., 15120., 17193., 18250., 19307., 20364., 22752., 23872., 24992.,
      26112., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232.,
      17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088., 5729.,
      6450.,  7171.,  7892.,  9258.,  10028., 10798., 11568., 13179., 13998.,
      14817., 15636., 17492., 18360., 19228., 20096., 6126.,  6732.,  7338.,
      7944.,  9096.,  9744.,  10392., 11040., 12402., 13092., 13782., 14472.,
      16044., 16776., 17508., 18240., 5712.,  6432.,  7152.,  7872.,  9216.,
      9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240.,
      19104., 19968., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      7616.,  8576.,  9536.,  10496., 12288., 13312., 14336., 15360., 17472.,
      18560., 19648., 20736., 23168., 24320., 25472., 26624., 10872., 11952.,
      13032., 14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408.,
      25632., 28368., 29664., 30960., 32256., 7616.,  8576.,  9536.,  10496.,
      12288., 13312., 14336., 15360., 17472., 18560., 19648., 20736., 23168.,
      24320., 25472., 26624., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520.,
      13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968., 7938.,
      8724.,  9510.,  10296., 11784., 12624., 13464., 14304., 16062., 16956.,
      17850., 18744., 20772., 21720., 22668., 23616., 7587.,  8518.,  9449.,
      10380., 12138., 13132., 14126., 15120., 17193., 18250., 19307., 20364.,
      22752., 23872., 24992., 26112., 10872., 11952., 13032., 14112., 16128.,
      17280., 18432., 19584., 21960., 23184., 24408., 25632., 28368., 29664.,
      30960., 32256., 9537.,  10738., 11939., 13140., 15402., 16684., 17966.,
      19248., 21915., 23278., 24641., 26004., 29076., 30520., 31964., 33408.,
      10872., 11952., 13032., 14112., 16128., 17280., 18432., 19584., 21960.,
      23184., 24408., 25632., 28368., 29664., 30960., 32256., 7611.,  8566.,
      9521.,  10476., 12258., 13276., 14294., 15312., 17409., 18490., 19571.,
      20652., 23064., 24208., 25352., 26496., 8362.,  9188.,  10014., 10840.,
      12368., 13248., 14128., 15008., 16806., 17740., 18674., 19608., 21676.,
      22664., 23652., 24640., 7116.,  7992.,  8868.,  9744.,  11400., 12336.,
      13272., 14208., 16164., 17160., 18156., 19152., 21408., 22464., 23520.,
      24576., 10378., 11428., 12478., 13528., 15488., 16608., 17728., 18848.,
      21158., 22348., 23538., 24728., 27388., 28648., 29908., 31168., 9520.,
      10720., 11920., 13120., 15360., 16640., 17920., 19200., 21840., 23200.,
      24560., 25920., 28960., 30400., 31840., 33280., 13374., 14700., 16026.,
      17352., 19848., 21264., 22680., 24096., 27042., 28548., 30054., 31560.,
      34956., 36552., 38148., 39744., 9520.,  10720., 11920., 13120., 15360.,
      16640., 17920., 19200., 21840., 23200., 24560., 25920., 28960., 30400.,
      31840., 33280., 10778., 11844., 12910., 13976., 15952., 17088., 18224.,
      19360., 21686., 22892., 24098., 25304., 27980., 29256., 30532., 31808.,
      7292.,  8216.,  9140.,  10064., 11768., 12752., 13736., 14720., 16724.,
      17768., 18812., 19856., 22160., 23264., 24368., 25472., 7962.,  8772.,
      9582.,  10392., 11904., 12768., 13632., 14496., 16278., 17196., 18114.,
      19032., 21084., 22056., 23028., 24000., 7599.,  8558.,  9517.,  10476.,
      12246., 13268., 14290., 15312., 17397., 18482., 19567., 20652., 23052.,
      24200., 25348., 26496., 10872., 11952., 13032., 14112., 16128., 17280.,
      18432., 19584., 21960., 23184., 24408., 25632., 28368., 29664., 30960.,
      32256., 9525.,  10730., 11935., 13140., 15390., 16676., 17962., 19248.,
      21903., 23270., 24637., 26004., 29064., 30512., 31960., 33408., 10872.,
      11952., 13032., 14112., 16128., 17280., 18432., 19584., 21960., 23184.,
      24408., 25632., 28368., 29664., 30960., 32256., 7463.,  8414.,  9365.,
      10316., 12078., 13092., 14106., 15120., 17197., 18274., 19351., 20428.,
      22820., 23960., 25100., 26240., 8226.,  9044.,  9862.,  10680., 12200.,
      13072., 13944., 14816., 16606., 17532., 18458., 19384., 21444., 22424.,
      23404., 24384., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752.,
      11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968.,
      8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080.,
      18032., 18984., 19936., 22064., 23072., 24080., 25088., 7616.,  8576.,
      9536.,  10496., 12288., 13312., 14336., 15360., 17472., 18560., 19648.,
      20736., 23168., 24320., 25472., 26624., 10872., 11952., 13032., 14112.,
      16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632., 28368.,
      29664., 30960., 32256., 7616.,  8576.,  9536.,  10496., 12288., 13312.,
      14336., 15360., 17472., 18560., 19648., 20736., 23168., 24320., 25472.,
      26624., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336., 15232.,
      17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088., 5712.,
      6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920.,
      14736., 15552., 17376., 18240., 19104., 19968., 6126.,  6732.,  7338.,
      7944.,  9096.,  9744.,  10392., 11040., 12402., 13092., 13782., 14472.,
      16044., 16776., 17508., 18240., 5717.,  6442.,  7167.,  7892.,  9246.,
      10020., 10794., 11568., 13167., 13990., 14813., 15636., 17480., 18352.,
      19224., 20096., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      7463.,  8414.,  9365.,  10316., 12078., 13092., 14106., 15120., 17197.,
      18274., 19351., 20428., 22820., 23960., 25100., 26240., 8456.,  9296.,
      10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984.,
      19936., 22064., 23072., 24080., 25088., 5725.,  6458.,  7191.,  7924.,
      9286.,  10068., 10850., 11632., 13239., 14070., 14901., 15732., 17584.,
      18464., 19344., 20224., 6278.,  6908.,  7538.,  8168.,  9344.,  10016.,
      10688., 11360., 12746., 13460., 14174., 14888., 16484., 17240., 17996.,
      18752.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35684., 36392., 37100., 37808., 39120., 39840., 40560., 41280., 42652.,
      43384., 44116., 44848., 46280., 47024., 47768., 48512., 37908., 38664.,
      39420., 40176., 41536., 42304., 43072., 43840., 45260., 46040., 46820.,
      47600., 49080., 49872., 50664., 51456., 40132., 40936., 41740., 42544.,
      43952., 44768., 45584., 46400., 47868., 48696., 49524., 50352., 51880.,
      52720., 53560., 54400., 36084., 36808., 37532., 38256., 39584., 40320.,
      41056., 41792., 43180., 43928., 44676., 45424., 46872., 47632., 48392.,
      49152., 34084., 34728., 35372., 36016., 37264., 37920., 38576., 39232.,
      40540., 41208., 41876., 42544., 43912., 44592., 45272., 45952., 34132.,
      34696., 35260., 35824., 36992., 37568., 38144., 38720., 39948., 40536.,
      41124., 41712., 43000., 43600., 44200., 44800., 36356., 36968., 37580.,
      38192., 39408., 40032., 40656., 41280., 42556., 43192., 43828., 44464.,
      45800., 46448., 47096., 47744., 43028., 43784., 44540., 45296., 46656.,
      47424., 48192., 48960., 50380., 51160., 51940., 52720., 54200., 54992.,
      55784., 56576., 45252., 46056., 46860., 47664., 49072., 49888., 50704.,
      51520., 52988., 53816., 54644., 55472., 57000., 57840., 58680., 59520.,
      47476., 48328., 49180., 50032., 51488., 52352., 53216., 54080., 55596.,
      56472., 57348., 58224., 59800., 60688., 61576., 62464., 49572., 50344.,
      51116., 51888., 53264., 54048., 54832., 55616., 57052., 57848., 58644.,
      59440., 60936., 61744., 62552., 63360., 37332., 38024., 38716., 39408.,
      40704., 41408., 42112., 42816., 44172., 44888., 45604., 46320., 47736.,
      48464., 49192., 49920., 27140., 27752., 28364., 28976., 30192., 30816.,
      31440., 32064., 33340., 33976., 34612., 35248., 36584., 37232., 37880.,
      38528., 29364., 30024., 30684., 31344., 32608., 33280., 33952., 34624.,
      35948., 36632., 37316., 38000., 39384., 40080., 40776., 41472., 36036.,
      36840., 37644., 38448., 39856., 40672., 41488., 42304., 43772., 44600.,
      45428., 46256., 47784., 48624., 49464., 50304., 38260., 39112., 39964.,
      40816., 42272., 43136., 44000., 44864., 46380., 47256., 48132., 49008.,
      50584., 51472., 52360., 53248., 40484., 41384., 42284., 43184., 44688.,
      45600., 46512., 47424., 48988., 49912., 50836., 51760., 53384., 54320.,
      55256., 56192., 32340., 33160., 33980., 34800., 36224., 37056., 37888.,
      38720., 40204., 41048., 41892., 42736., 44280., 45136., 45992., 46848.,
      26244., 26984., 27724., 28464., 29808., 30560., 31312., 32064., 33468.,
      34232., 34996., 35760., 37224., 38000., 38776., 39552., 22196., 22856.,
      23516., 24176., 25440., 26112., 26784., 27456., 28780., 29464., 30148.,
      30832., 32216., 32912., 33608., 34304., 24420., 25128., 25836., 26544.,
      27856., 28576., 29296., 30016., 31388., 32120., 32852., 33584., 35016.,
      35760., 36504., 37248., 31092., 31944., 32796., 33648., 35104., 35968.,
      36832., 37696., 39212., 40088., 40964., 41840., 43416., 44304., 45192.,
      46080., 33316., 34216., 35116., 36016., 37520., 38432., 39344., 40256.,
      41820., 42744., 43668., 44592., 46216., 47152., 48088., 49024., 35540.,
      36488., 37436., 38384., 39936., 40896., 41856., 42816., 44428., 45400.,
      46372., 47344., 49016., 50000., 50984., 51968., 33540., 34408., 35276.,
      36144., 37616., 38496., 39376., 40256., 41788., 42680., 43572., 44464.,
      46056., 46960., 47864., 48768., 33588., 34376., 35164., 35952., 37344.,
      38144., 38944., 39744., 41196., 42008., 42820., 43632., 45144., 45968.,
      46792., 47616., 35684., 36392., 37100., 37808., 39120., 39840., 40560.,
      41280., 42652., 43384., 44116., 44848., 46280., 47024., 47768., 48512.,
      37908., 38664., 39420., 40176., 41536., 42304., 43072., 43840., 45260.,
      46040., 46820., 47600., 49080., 49872., 50664., 51456., 34084., 34728.,
      35372., 36016., 37264., 37920., 38576., 39232., 40540., 41208., 41876.,
      42544., 43912., 44592., 45272., 45952., 34132., 34696., 35260., 35824.,
      36992., 37568., 38144., 38720., 39948., 40536., 41124., 41712., 43000.,
      43600., 44200., 44800., 36356., 36968., 37580., 38192., 39408., 40032.,
      40656., 41280., 42556., 43192., 43828., 44464., 45800., 46448., 47096.,
      47744., 38580., 39240., 39900., 40560., 41824., 42496., 43168., 43840.,
      45164., 45848., 46532., 47216., 48600., 49296., 49992., 50688., 40804.,
      41512., 42220., 42928., 44240., 44960., 45680., 46400., 47772., 48504.,
      49236., 49968., 51400., 52144., 52888., 53632., 43028., 43784., 44540.,
      45296., 46656., 47424., 48192., 48960., 50380., 51160., 51940., 52720.,
      54200., 54992., 55784., 56576., 45252., 46056., 46860., 47664., 49072.,
      49888., 50704., 51520., 52988., 53816., 54644., 55472., 57000., 57840.,
      58680., 59520., 37332., 38024., 38716., 39408., 40704., 41408., 42112.,
      42816., 44172., 44888., 45604., 46320., 47736., 48464., 49192., 49920.,
      27140., 27752., 28364., 28976., 30192., 30816., 31440., 32064., 33340.,
      33976., 34612., 35248., 36584., 37232., 37880., 38528., 29364., 30024.,
      30684., 31344., 32608., 33280., 33952., 34624., 35948., 36632., 37316.,
      38000., 39384., 40080., 40776., 41472., 31588., 32296., 33004., 33712.,
      35024., 35744., 36464., 37184., 38556., 39288., 40020., 40752., 42184.,
      42928., 43672., 44416., 33812., 34568., 35324., 36080., 37440., 38208.,
      38976., 39744., 41164., 41944., 42724., 43504., 44984., 45776., 46568.,
      47360., 36036., 36840., 37644., 38448., 39856., 40672., 41488., 42304.,
      43772., 44600., 45428., 46256., 47784., 48624., 49464., 50304., 38260.,
      39112., 39964., 40816., 42272., 43136., 44000., 44864., 46380., 47256.,
      48132., 49008., 50584., 51472., 52360., 53248., 26244., 26984., 27724.,
      28464., 29808., 30560., 31312., 32064., 33468., 34232., 34996., 35760.,
      37224., 38000., 38776., 39552., 22196., 22856., 23516., 24176., 25440.,
      26112., 26784., 27456., 28780., 29464., 30148., 30832., 32216., 32912.,
      33608., 34304., 24420., 25128., 25836., 26544., 27856., 28576., 29296.,
      30016., 31388., 32120., 32852., 33584., 35016., 35760., 36504., 37248.,
      26644., 27400., 28156., 28912., 30272., 31040., 31808., 32576., 33996.,
      34776., 35556., 36336., 37816., 38608., 39400., 40192., 28868., 29672.,
      30476., 31280., 32688., 33504., 34320., 35136., 36604., 37432., 38260.,
      39088., 40616., 41456., 42296., 43136., 31092., 31944., 32796., 33648.,
      35104., 35968., 36832., 37696., 39212., 40088., 40964., 41840., 43416.,
      44304., 45192., 46080., 33316., 34216., 35116., 36016., 37520., 38432.,
      39344., 40256., 41820., 42744., 43668., 44592., 46216., 47152., 48088.,
      49024.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14522., 17988., 19502., 21105., 17840., 14660., 12468., 11912., 13472.,
      15464., 17560., 15528., 13568., 12264., 13344., 15836., 19076., 22415.,
      20686., 19036., 17730., 20038., 24056., 29150., 34350., 29150., 24056.,
      20038., 17730., 19036., 20686., 22415., 19076., 15836., 13344., 12264.,
      13568., 15528., 17560., 15464., 13472., 11912., 12468., 14660., 17840.,
      21105., 19502., 17988., 14522.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3200.,  3336.,  3472.,  3608.,  3744.,  3880.,  4016.,  4560.,  4696.,
      4832.,  4968.,  5104.,  5240.,  5376.,  5920.,  6056.,  6192.,  6328.,
      6464.,  6600.,  6736.,  7280.,  7416.,  7552.,  7688.,  7824.,  7960.,
      8096.,  8640.,  8776.,  8912.,  9048.,  9184.,  9320.,  9456.,  10000.,
      10136., 10272., 10408., 10544., 10680., 10816., 11360., 11496., 11632.,
      11768., 11904., 12040., 12176.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13074., 13812., 16060., 16904., 17023., 17980., 17997., 19074., 15140.,
      16096., 12556., 13384., 10323., 11048., 12776., 13584., 14496., 15424.,
      16560., 17616., 18632., 19824., 17192., 18256., 16032., 16960., 14272.,
      15088., 14348., 15296., 16180., 17272., 18667., 19912., 21151., 22558.,
      18766., 20028., 16708., 17816., 15187., 16164., 17638., 18764., 20920.,
      22192., 25192., 26620., 29474., 31068., 24846., 26268., 20600., 21840.,
      17012., 18092., 17018., 18116., 18660., 19896., 20565., 21948., 22459.,
      23998., 20272., 21640., 18452., 19640., 16313., 17344., 17448., 18448.,
      18208., 19328., 19568., 20816., 20936., 22320., 17544., 18768., 14496.,
      15552., 12192., 13104., 11304., 12136., 12908., 13832., 15457., 16480.,
      18041., 19170., 16894., 17884., 16060., 16904., 12929., 13652.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6120.,  6400.,  6376.,  6672.,  6632.,  6944.,  6888.,  7216.,  7144.,
      7488.,  7400.,  7760.,  7656.,  8032.,  8680.,  9120.,  8936.,  9392.,
      9192.,  9664.,  9448.,  9936.,  9704.,  10208., 9960.,  10480., 10216.,
      10752., 11240., 11840., 11496., 12112., 11752., 12384., 12008., 12656.,
      12264., 12928., 12520., 13200., 12776., 13472., 13800., 14560., 14056.,
      14832., 14312., 15104., 14568., 15376., 14824., 15648., 15080., 15920.,
      15336., 16192., 16360., 17280., 16616., 17552., 16872., 17824., 17128.,
      18096., 17384., 18368., 17640., 18640., 17896., 18912., 18920., 20000.,
      19176., 20272., 19432., 20544., 19688., 20816., 19944., 21088., 20200.,
      21360., 20456., 21632., 21480., 22720., 21736., 22992., 21992., 23264.,
      22248., 23536., 22504., 23808., 22760., 24080., 23016., 24352.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11938., 12676., 13414., 14152., 14540., 15384., 16228., 17072., 15265.,
      16222., 17179., 18136., 15877., 16954., 18031., 19108., 13772., 14728.,
      15684., 16640., 12316., 13144., 13972., 14800., 10353., 11078., 11803.,
      12528., 13608., 14416., 15224., 16032., 14240., 15168., 16096., 17024.,
      15680., 16736., 17792., 18848., 17000., 18192., 19384., 20576., 14760.,
      15824., 16888., 17952., 13216., 14144., 15072., 16000., 11344., 12160.,
      12976., 13792., 13604., 14552., 15500., 16448., 15076., 16168., 17260.,
      18352., 17945., 19190., 20435., 21680., 20639., 22046., 23453., 24860.,
      18638., 19900., 21162., 22424., 17428., 18536., 19644., 20752., 15093.,
      16070., 17047., 18024., 15814., 16940., 18066., 19192., 18520., 19792.,
      21064., 22336., 22268., 23696., 25124., 26552., 25866., 27460., 29054.,
      30648., 21998., 23420., 24842., 26264., 19064., 20304., 21544., 22784.,
      15952., 17032., 18112., 19192., 17930., 19028., 20126., 21224., 21140.,
      22376., 23612., 24848., 21923., 23306., 24689., 26072., 22547., 24086.,
      25625., 27164., 19208., 20576., 21944., 23312., 16772., 17960., 19148.,
      20336., 13931., 14962., 15993., 17024., 16104., 17104., 18104., 19104.,
      16352., 17472., 18592., 19712., 17920., 19168., 20416., 21664., 19368.,
      20752., 22136., 23520., 16840., 18064., 19288., 20512., 15136., 16192.,
      17248., 18304., 13232., 14144., 15056., 15968., 11152., 11984., 12816.,
      13648., 12220., 13144., 14068., 14992., 14147., 15170., 16193., 17216.,
      16009., 17138., 18267., 19396., 14910., 15900., 16890., 17880., 14540.,
      15384., 16228., 17072., 11951., 12674., 13397., 14120.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11960., 12240., 12520., 12800., 12456., 12752., 13048., 13344., 12952.,
      13264., 13576., 13888., 13448., 13776., 14104., 14432., 13944., 14288.,
      14632., 14976., 14440., 14800., 15160., 15520., 14936., 15312., 15688.,
      16064., 16920., 17360., 17800., 18240., 17416., 17872., 18328., 18784.,
      17912., 18384., 18856., 19328., 18408., 18896., 19384., 19872., 18904.,
      19408., 19912., 20416., 19400., 19920., 20440., 20960., 19896., 20432.,
      20968., 21504., 21880., 22480., 23080., 23680., 22376., 22992., 23608.,
      24224., 22872., 23504., 24136., 24768., 23368., 24016., 24664., 25312.,
      23864., 24528., 25192., 25856., 24360., 25040., 25720., 26400., 24856.,
      25552., 26248., 26944., 26840., 27600., 28360., 29120., 27336., 28112.,
      28888., 29664., 27832., 28624., 29416., 30208., 28328., 29136., 29944.,
      30752., 28824., 29648., 30472., 31296., 29320., 30160., 31000., 31840.,
      29816., 30672., 31528., 32384., 31800., 32720., 33640., 34560., 32296.,
      33232., 34168., 35104., 32792., 33744., 34696., 35648., 33288., 34256.,
      35224., 36192., 33784., 34768., 35752., 36736., 34280., 35280., 36280.,
      37280., 34776., 35792., 36808., 37824., 36760., 37840., 38920., 40000.,
      37256., 38352., 39448., 40544., 37752., 38864., 39976., 41088., 38248.,
      39376., 40504., 41632., 38744., 39888., 41032., 42176., 39240., 40400.,
      41560., 42720., 39736., 40912., 42088., 43264., 41720., 42960., 44200.,
      45440., 42216., 43472., 44728., 45984., 42712., 43984., 45256., 46528.,
      43208., 44496., 45784., 47072., 43704., 45008., 46312., 47616., 44200.,
      45520., 46840., 48160., 44696., 46032., 47368., 48704.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14735., 16296., 18456., 20240., 18337., 20344., 18510., 20740., 15337.,
      17344., 12440., 14224., 10295., 11856., 12072., 13920., 14144., 16256.,
      16728., 19104., 19600., 22240., 18776., 21152., 18240., 20352., 17192.,
      19040., 15017., 17024., 16360., 18672., 17495., 20112., 18962., 21884.,
      16991., 19640., 15336., 17712., 13969., 16072., 17922., 20184., 22032.,
      24608., 27246., 30136., 32820., 36024., 27246., 30136., 22032., 24608.,
      17922., 20184., 13969., 16072., 15336., 17712., 16991., 19640., 18962.,
      21884., 17495., 20112., 16360., 18672., 15017., 17024., 17192., 19040.,
      18240., 20352., 18776., 21152., 19600., 22240., 16728., 19104., 14144.,
      16256., 12072., 13920., 10295., 11856., 12440., 14224., 15337., 17344.,
      18510., 20740., 18337., 20344., 18456., 20240., 14735., 16296.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11984., 12800., 12496., 13344., 13008., 13888., 13520., 14432., 14032.,
      14976., 14544., 15520., 15056., 16064., 17104., 18240., 17616., 18784.,
      18128., 19328., 18640., 19872., 19152., 20416., 19664., 20960., 20176.,
      21504., 22224., 23680., 22736., 24224., 23248., 24768., 23760., 25312.,
      24272., 25856., 24784., 26400., 25296., 26944., 27344., 29120., 27856.,
      29664., 28368., 30208., 28880., 30752., 29392., 31296., 29904., 31840.,
      30416., 32384., 32464., 34560., 32976., 35104., 33488., 35648., 34000.,
      36192., 34512., 36736., 35024., 37280., 35536., 37824., 37584., 40000.,
      38096., 40544., 38608., 41088., 39120., 41632., 39632., 42176., 40144.,
      42720., 40656., 43264., 42704., 45440., 43216., 45984., 43728., 46528.,
      44240., 47072., 44752., 47616., 45264., 48160., 45776., 48704.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12715., 13470., 15084., 15888., 15696., 16560., 18376., 19296., 15367.,
      16322., 18358., 19376., 15352., 16412., 18654., 19784., 12921., 13874.,
      15880., 16896., 11248., 12080., 13864., 14752., 9717.,  10446., 11990.,
      12768., 14168., 15056., 16912., 17856., 14976., 16000., 18112., 19200.,
      16056., 17200., 19584., 20800., 17440., 18720., 21360., 22720., 15784.,
      16944., 19312., 20544., 14976., 16000., 18112., 19200., 13896., 14800.,
      16640., 17600., 13065., 14002., 16024., 17024., 14736., 15824., 18136.,
      19296., 17221., 18446., 21062., 22368., 20032., 21412., 24314., 25784.,
      19283., 20542., 23156., 24496., 19440., 20560., 22904., 24096., 15807.,
      16802., 18862., 19920., 15518., 16612., 18916., 20080., 18368., 19616.,
      22224., 23552., 22606., 23996., 26920., 28400., 27224., 28776., 31996.,
      33648., 22394., 23804., 26708., 28208., 18624., 19872., 22480., 23808.,
      15162., 16260., 18528., 19696., 17293., 18338., 20476., 21584., 21168.,
      22352., 24760., 26016., 20769., 22078., 24770., 26160., 20728., 22180.,
      25138., 26680., 17455., 18766., 21424., 22816., 15184., 16336., 18712.,
      19936., 13027., 14034., 16082., 17152., 14168., 15056., 16912., 17856.,
      14976., 16000., 18112., 19200., 16056., 17200., 19584., 20800., 17440.,
      18720., 21360., 22720., 15784., 16944., 19312., 20544., 14976., 16000.,
      18112., 19200., 13896., 14800., 16640., 17600., 10495., 11278., 12896.,
      13728., 11696., 12592., 14440., 15392., 13427., 14418., 16482., 17536.,
      15440., 16540., 18806., 19976., 15173., 16162., 18196., 19248., 15696.,
      16560., 18376., 19296., 12297., 13054., 14634., 15440.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23424., 23968., 25040., 25600., 24416., 24992., 26096., 26688., 25408.,
      26016., 27152., 27776., 26400., 27040., 28208., 28864., 27392., 28064.,
      29264., 29952., 28384., 29088., 30320., 31040., 29376., 30112., 31376.,
      32128., 33344., 34208., 35600., 36480., 34336., 35232., 36656., 37568.,
      35328., 36256., 37712., 38656., 36320., 37280., 38768., 39744., 37312.,
      38304., 39824., 40832., 38304., 39328., 40880., 41920., 39296., 40352.,
      41936., 43008., 43264., 44448., 46160., 47360., 44256., 45472., 47216.,
      48448., 45248., 46496., 48272., 49536., 46240., 47520., 49328., 50624.,
      47232., 48544., 50384., 51712., 48224., 49568., 51440., 52800., 49216.,
      50592., 52496., 53888., 53184., 54688., 56720., 58240., 46368., 47776.,
      49712., 51136., 40064., 41376., 43216., 44544., 34272., 35488., 37232.,
      38464., 28992., 30112., 31760., 32896., 29984., 31136., 32816., 33984.,
      30976., 32160., 33872., 35072., 34944., 36256., 38096., 39424., 30176.,
      31392., 33136., 34368., 25920., 27040., 28688., 29824., 22176., 23200.,
      24752., 25792., 18944., 19872., 21328., 22272., 19936., 20896., 22384.,
      23360., 20928., 21920., 23440., 24448., 24896., 26016., 27664., 28800.,
      22176., 23200., 24752., 25792., 19968., 20896., 22352., 23296., 18272.,
      19104., 20464., 21312., 17088., 17824., 19088., 19840., 18080., 18848.,
      20144., 20928., 19072., 19872., 21200., 22016., 23040., 23968., 25424.,
      26368., 22368., 23200., 24560., 25408., 22208., 22944., 24208., 24960.,
      22560., 23200., 24368., 25024., 23424., 23968., 25040., 25600., 24416.,
      24992., 26096., 26688., 25408., 26016., 27152., 27776.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10371., 11126., 11881., 12636., 14260., 15064., 15868., 16672., 12608.,
      13472., 14336., 15200., 17016., 17936., 18856., 19776., 12659., 13614.,
      14569., 15524., 17586., 18604., 19622., 20640., 13132., 14192., 15252.,
      16312., 18578., 19708., 20838., 21968., 11673., 12626., 13579., 14532.,
      16536., 17552., 18568., 19584., 11936., 12768., 13600., 14432., 16216.,
      17104., 17992., 18880., 9105.,  9834.,  10563., 11292., 12834., 13612.,
      14390., 15168., 11704., 12592., 13480., 14368., 16240., 17184., 18128.,
      19072., 12544., 13568., 14592., 15616., 17728., 18816., 19904., 20992.,
      15224., 16368., 17512., 18656., 21056., 22272., 23488., 24704., 18240.,
      19520., 20800., 22080., 24720., 26080., 27440., 28800., 14408., 15568.,
      16728., 17888., 20240., 21472., 22704., 23936., 12544., 13568., 14592.,
      15616., 17728., 18816., 19904., 20992., 10888., 11792., 12696., 13600.,
      15424., 16384., 17344., 18304., 12745., 13682., 14619., 15556., 17608.,
      18608., 19608., 20608., 15584., 16672., 17760., 18848., 21160., 22320.,
      23480., 24640., 16193., 17418., 18643., 19868., 22514., 23820., 25126.,
      26432., 17180., 18560., 19940., 21320., 24246., 25716., 27186., 28656.,
      15419., 16678., 17937., 19196., 21804., 23144., 24484., 25824., 15744.,
      16864., 17984., 19104., 21448., 22640., 23832., 25024., 12315., 13310.,
      14305., 15300., 17338., 18396., 19454., 20512., 14294., 15388., 16482.,
      17576., 19900., 21064., 22228., 23392., 15008., 16256., 17504., 18752.,
      21360., 22688., 24016., 25344., 18350., 19740., 21130., 22520., 25480.,
      26960., 28440., 29920., 22176., 23728., 25280., 26832., 30084., 31736.,
      33388., 35040., 17650., 19060., 20470., 21880., 24780., 26280., 27780.,
      29280., 15520., 16768., 18016., 19264., 21872., 23200., 24528., 25856.,
      13386., 14484., 15582., 16680., 18928., 20096., 21264., 22432., 13957.,
      15002., 16047., 17092., 19236., 20344., 21452., 22560., 17088., 18272.,
      19456., 20640., 23048., 24304., 25560., 26816., 17061., 18370., 19679.,
      20988., 23702., 25092., 26482., 27872., 17476., 18928., 20380., 21832.,
      24798., 26340., 27882., 29424., 15807., 17118., 18429., 19740., 22384.,
      23776., 25168., 26560., 16416., 17568., 18720., 19872., 22248., 23472.,
      24696., 25920., 12151., 13158., 14165., 15172., 17206., 18276., 19346.,
      20416., 11704., 12592., 13480., 14368., 16240., 17184., 18128., 19072.,
      12544., 13568., 14592., 15616., 17728., 18816., 19904., 20992., 15224.,
      16368., 17512., 18656., 21056., 22272., 23488., 24704., 18240., 19520.,
      20800., 22080., 24720., 26080., 27440., 28800., 14408., 15568., 16728.,
      17888., 20240., 21472., 22704., 23936., 12544., 13568., 14592., 15616.,
      17728., 18816., 19904., 20992., 10888., 11792., 12696., 13600., 15424.,
      16384., 17344., 18304., 10351., 11134., 11917., 12700., 14336., 15168.,
      16000., 16832., 12768., 13664., 14560., 15456., 17304., 18256., 19208.,
      20160., 12711., 13702., 14693., 15684., 17766., 18820., 19874., 20928.,
      13012., 14112., 15212., 16312., 18586., 19756., 20926., 22096., 11917.,
      12906., 13895., 14884., 16908., 17960., 19012., 20064., 12608., 13472.,
      14336., 15200., 17016., 17936., 18856., 19776., 9213.,  9970.,  10727.,
      11484., 13038., 13844., 14650., 15456.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11872., 12288., 12704., 13120., 14064., 14496., 14928., 15360., 10176.,
      10560., 10944., 11328., 12240., 12640., 13040., 13440., 8992.,  9344.,
      9696.,  10048., 10928., 11296., 11664., 12032., 9920.,  10304., 10688.,
      11072., 11984., 12384., 12784., 13184., 10848., 11264., 11680., 12096.,
      13040., 13472., 13904., 14336., 11776., 12224., 12672., 13120., 14096.,
      14560., 15024., 15488., 12704., 13184., 13664., 14144., 15152., 15648.,
      16144., 16640., 13728., 14208., 14688., 15168., 16176., 16672., 17168.,
      17664., 14080., 14528., 14976., 15424., 16400., 16864., 17328., 17792.,
      14944., 15360., 15776., 16192., 17136., 17568., 18000., 18432., 15872.,
      16320., 16768., 17216., 18192., 18656., 19120., 19584., 16800., 17280.,
      17760., 18240., 19248., 19744., 20240., 20736., 17728., 18240., 18752.,
      19264., 20304., 20832., 21360., 21888., 18656., 19200., 19744., 20288.,
      21360., 21920., 22480., 23040., 15584., 16128., 16672., 17216., 18288.,
      18848., 19408., 19968., 13888., 14400., 14912., 15424., 16464., 16992.,
      17520., 18048., 12704., 13184., 13664., 14144., 15152., 15648., 16144.,
      16640., 13632., 14144., 14656., 15168., 16208., 16736., 17264., 17792.,
      14560., 15104., 15648., 16192., 17264., 17824., 18384., 18944., 15488.,
      16064., 16640., 17216., 18320., 18912., 19504., 20096., 16416., 17024.,
      17632., 18240., 19376., 20000., 20624., 21248., 17440., 18048., 18656.,
      19264., 20400., 21024., 21648., 22272., 14144., 14656., 15168., 15680.,
      16720., 17248., 17776., 18304., 11872., 12288., 12704., 13120., 14064.,
      14496., 14928., 15360., 10176., 10560., 10944., 11328., 12240., 12640.,
      13040., 13440., 8992.,  9344.,  9696.,  10048., 10928., 11296., 11664.,
      12032., 9920.,  10304., 10688., 11072., 11984., 12384., 12784., 13184.,
      10848., 11264., 11680., 12096., 13040., 13472., 13904., 14336., 14560.,
      15104., 15648., 16192., 17264., 17824., 18384., 18944., 13888., 14400.,
      14912., 15424., 16464., 16992., 17520., 18048., 13728., 14208., 14688.,
      15168., 16176., 16672., 17168., 17664., 14080., 14528., 14976., 15424.,
      16400., 16864., 17328., 17792., 14944., 15360., 15776., 16192., 17136.,
      17568., 18000., 18432., 15872., 16320., 16768., 17216., 18192., 18656.,
      19120., 19584., 16800., 17280., 17760., 18240., 19248., 19744., 20240.,
      20736., 20512., 21120., 21728., 22336., 23472., 24096., 24720., 25344.,
      17792., 18368., 18944., 19520., 20624., 21216., 21808., 22400., 15584.,
      16128., 16672., 17216., 18288., 18848., 19408., 19968., 13888., 14400.,
      14912., 15424., 16464., 16992., 17520., 18048., 12704., 13184., 13664.,
      14144., 15152., 15648., 16144., 16640., 13632., 14144., 14656., 15168.,
      16208., 16736., 17264., 17792., 14560., 15104., 15648., 16192., 17264.,
      17824., 18384., 18944., 18272., 18944., 19616., 20288., 21488., 22176.,
      22864., 23552., 17600., 18240., 18880., 19520., 20688., 21344., 22000.,
      22656., 17440., 18048., 18656., 19264., 20400., 21024., 21648., 22272.,
      14144., 14656., 15168., 15680., 16720., 17248., 17776., 18304., 11872.,
      12288., 12704., 13120., 14064., 14496., 14928., 15360., 10176., 10560.,
      10944., 11328., 12240., 12640., 13040., 13440., 8992.,  9344.,  9696.,
      10048., 10928., 11296., 11664., 12032.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13053., 14588., 16221., 17952., 17304., 19040., 20888., 22848., 15283.,
      17220., 19283., 21472., 14302., 16440., 18718., 21136., 11731., 13668.,
      15731., 17920., 10136., 11872., 13720., 15680., 8957.,  10460., 12061.,
      13760., 13784., 15520., 17368., 19328., 13632., 15616., 17728., 19968.,
      13480., 15712., 18088., 20608., 14480., 16960., 19600., 22400., 13480.,
      15712., 18088., 20608., 13632., 15616., 17728., 19968., 13784., 15520.,
      17368., 19328., 11475., 13412., 15475., 17664., 13032., 15264., 17640.,
      20160., 15261., 17756., 20413., 23232., 18818., 21576., 24514., 27632.,
      19901., 22396., 25053., 27872., 22248., 24480., 26856., 29376., 16531.,
      18500., 20595., 22816., 13390., 15560., 17870., 20320., 17040., 19520.,
      22160., 24960., 22770., 25528., 28466., 31584., 29940., 32976., 36212.,
      39648., 22770., 25528., 28466., 31584., 17040., 19520., 22160., 24960.,
      13390., 15560., 17870., 20320., 16531., 18500., 20595., 22816., 22248.,
      24480., 26856., 29376., 19901., 22396., 25053., 27872., 18818., 21576.,
      24514., 27632., 15261., 17756., 20413., 23232., 13032., 15264., 17640.,
      20160., 11475., 13412., 15475., 17664., 13784., 15520., 17368., 19328.,
      13632., 15616., 17728., 19968., 13480., 15712., 18088., 20608., 14480.,
      16960., 19600., 22400., 13480., 15712., 18088., 20608., 13632., 15616.,
      17728., 19968., 13784., 15520., 17368., 19328., 8957.,  10460., 12061.,
      13760., 10136., 11872., 13720., 15680., 11731., 13668., 15731., 17920.,
      14302., 16440., 18718., 21136., 15283., 17220., 19283., 21472., 17304.,
      19040., 20888., 22848., 13053., 14588., 16221., 17952.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31248., 32576., 33936., 35328., 26448., 27712., 29008., 30336., 22160.,
      23360., 24592., 25856., 24144., 25408., 26704., 28032., 26128., 27456.,
      28816., 30208., 28112., 29504., 30928., 32384., 30096., 31552., 33040.,
      34560., 27024., 28480., 29968., 31488., 24272., 25664., 27088., 28544.,
      22032., 23360., 24720., 26112., 24016., 25408., 26832., 28288., 26000.,
      27456., 28944., 30464., 27984., 29504., 31056., 32640., 29968., 31552.,
      33168., 34816., 30992., 32576., 34192., 35840., 30288., 31808., 33360.,
      34944., 30096., 31552., 33040., 34560., 32080., 33600., 35152., 36736.,
      34064., 35648., 37264., 38912., 36048., 37696., 39376., 41088., 38032.,
      39744., 41488., 43264., 43152., 44864., 46608., 48384., 36688., 38208.,
      39760., 41344., 31248., 32576., 33936., 35328., 26448., 27712., 29008.,
      30336., 22160., 23360., 24592., 25856., 24144., 25408., 26704., 28032.,
      26128., 27456., 28816., 30208., 34064., 35648., 37264., 38912., 30288.,
      31808., 33360., 34944., 27024., 28480., 29968., 31488., 24272., 25664.,
      27088., 28544., 22032., 23360., 24720., 26112., 24016., 25408., 26832.,
      28288., 26000., 27456., 28944., 30464., 33936., 35648., 37392., 39168.,
      32208., 33856., 35536., 37248., 30992., 32576., 34192., 35840., 30288.,
      31808., 33360., 34944., 30096., 31552., 33040., 34560., 32080., 33600.,
      35152., 36736., 34064., 35648., 37264., 38912., 42000., 43840., 45712.,
      47616., 42320., 44096., 45904., 47744., 43152., 44864., 46608., 48384.,
      36688., 38208., 39760., 41344., 31248., 32576., 33936., 35328., 26448.,
      27712., 29008., 30336., 22160., 23360., 24592., 25856.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9861.,  10586., 12082., 12856., 14499., 15322., 17112., 17984., 13160.,
      14000., 15680., 16576., 18424., 19376., 21392., 22400., 11759., 12678.,
      14578., 15560., 17649., 18694., 20972., 22080., 12026., 13052., 15144.,
      16240., 18542., 19708., 22220., 23456., 11411., 12358., 14230., 15240.,
      17301., 18374., 20624., 21760., 13160., 14000., 15680., 16576., 18424.,
      19376., 21392., 22400., 8985.,  9722.,  11174., 11960., 13559., 14394.,
      16140., 17024., 10488., 11312., 13008., 13888., 15752., 16688., 18720.,
      19712., 10944., 11904., 13824., 14848., 16960., 18048., 20352., 21504.,
      13992., 15056., 17232., 18368., 20760., 21968., 24576., 25856., 18800.,
      20000., 22400., 23680., 26320., 27680., 30560., 32000., 13448., 14544.,
      16688., 17856., 20216., 21456., 24032., 25344., 10944., 11904., 13824.,
      14848., 16960., 18048., 20352., 21504., 9944.,  10800., 12464., 13376.,
      15208., 16176., 18176., 19200., 12467., 13382., 15286., 16264., 18357.,
      19398., 21680., 22784., 16920., 18000., 20160., 21312., 23688., 24912.,
      27504., 28800., 15001., 16186., 18630., 19896., 22583., 23930., 26860.,
      28288., 15190., 16516., 19208., 20624., 23586., 25092., 28324., 29920.,
      14517., 15738., 18146., 19448., 22099., 23482., 26376., 27840., 16920.,
      18000., 20160., 21312., 23688., 24912., 27504., 28800., 11871., 12838.,
      14722., 15752., 17825., 18918., 21180., 22336., 12982., 14012., 16132.,
      17232., 19562., 20732., 23272., 24512., 13680., 14880., 17280., 18560.,
      21200., 22560., 25440., 26880., 17218., 18532., 21236., 22640., 25614.,
      27108., 30352., 31936., 23084., 24552., 27520., 29088., 32356., 34024.,
      37592., 39360., 16666., 18020., 20684., 22128., 25062., 26596., 29800.,
      31424., 13680., 14880., 17280., 18560., 21200., 22560., 25440., 26880.,
      12558., 13628., 15708., 16848., 19138., 20348., 22848., 24128., 12411.,
      13350., 15262., 16264., 18365., 19430., 21720., 22848., 16920., 18000.,
      20160., 21312., 23688., 24912., 27504., 28800., 15057., 16250., 18686.,
      19960., 22639., 23994., 26916., 28352., 15174., 16516., 19192., 20624.,
      23570., 25092., 28308., 29920., 14445., 15674., 18074., 19384., 22027.,
      23418., 26304., 27776., 16920., 18000., 20160., 21312., 23688., 24912.,
      27504., 28800., 11527., 12486., 14346., 15368., 17417., 18502., 20740.,
      21888., 10488., 11312., 13008., 13888., 15752., 16688., 18720., 19712.,
      10944., 11904., 13824., 14848., 16960., 18048., 20352., 21504., 13992.,
      15056., 17232., 18368., 20760., 21968., 24576., 25856., 18800., 20000.,
      22400., 23680., 26320., 27680., 30560., 32000., 13448., 14544., 16688.,
      17856., 20216., 21456., 24032., 25344., 10944., 11904., 13824., 14848.,
      16960., 18048., 20352., 21504., 9944.,  10800., 12464., 13376., 15208.,
      16176., 18176., 19200., 9517.,  10234., 11706., 12472., 14091., 14906.,
      16672., 17536., 13160., 14000., 15680., 16576., 18424., 19376., 21392.,
      22400., 11559., 12486., 14378., 15368., 17449., 18502., 20772., 21888.,
      11498., 12540., 14616., 15728., 18014., 19196., 21692., 22944., 11083.,
      12038., 13902., 14920., 16973., 18054., 20296., 21440., 13160., 14000.,
      15680., 16576., 18424., 19376., 21392., 22400., 9185.,  9946.,  11406.,
      12216., 13823., 14682., 16436., 17344.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15216., 15648., 16576., 17024., 18000., 18464., 19488., 19968., 14448.,
      14880., 15808., 16256., 17232., 17696., 18720., 19200., 14192., 14624.,
      15552., 16000., 16976., 17440., 18464., 18944., 12400., 12832., 13760.,
      14208., 15184., 15648., 16672., 17152., 11120., 11552., 12480., 12928.,
      13904., 14368., 15392., 15872., 10352., 10784., 11712., 12160., 13136.,
      13600., 14624., 15104., 10096., 10528., 11456., 11904., 12880., 13344.,
      14368., 14848., 14832., 15392., 16448., 17024., 18128., 18720., 19872.,
      20480., 16112., 16672., 17728., 18304., 19408., 20000., 21152., 21760.,
      17904., 18464., 19520., 20096., 21200., 21792., 22944., 23552., 18160.,
      18720., 19776., 20352., 21456., 22048., 23200., 23808., 18928., 19488.,
      20544., 21120., 22224., 22816., 23968., 24576., 16560., 17056., 18048.,
      18560., 19600., 20128., 21216., 21760., 15216., 15648., 16576., 17024.,
      18000., 18464., 19488., 19968., 11120., 11552., 12480., 12928., 13904.,
      14368., 15392., 15872., 10352., 10784., 11712., 12160., 13136., 13600.,
      14624., 15104., 10096., 10528., 11456., 11904., 12880., 13344., 14368.,
      14848., 11952., 12448., 13440., 13952., 14992., 15520., 16608., 17152.,
      13808., 14368., 15424., 16000., 17104., 17696., 18848., 19456., 14064.,
      14624., 15680., 16256., 17360., 17952., 19104., 19712., 14832., 15392.,
      16448., 17024., 18128., 18720., 19872., 20480., 18928., 19488., 20544.,
      21120., 22224., 22816., 23968., 24576., 16560., 17056., 18048., 18560.,
      19600., 20128., 21216., 21760., 15216., 15648., 16576., 17024., 18000.,
      18464., 19488., 19968., 14448., 14880., 15808., 16256., 17232., 17696.,
      18720., 19200., 14192., 14624., 15552., 16000., 16976., 17440., 18464.,
      18944., 12400., 12832., 13760., 14208., 15184., 15648., 16672., 17152.,
      11120., 11552., 12480., 12928., 13904., 14368., 15392., 15872., 13808.,
      14368., 15424., 16000., 17104., 17696., 18848., 19456., 14064., 14624.,
      15680., 16256., 17360., 17952., 19104., 19712., 14832., 15392., 16448.,
      17024., 18128., 18720., 19872., 20480., 16112., 16672., 17728., 18304.,
      19408., 20000., 21152., 21760., 17904., 18464., 19520., 20096., 21200.,
      21792., 22944., 23552., 18160., 18720., 19776., 20352., 21456., 22048.,
      23200., 23808., 18928., 19488., 20544., 21120., 22224., 22816., 23968.,
      24576., 14192., 14624., 15552., 16000., 16976., 17440., 18464., 18944.,
      12400., 12832., 13760., 14208., 15184., 15648., 16672., 17152., 11120.,
      11552., 12480., 12928., 13904., 14368., 15392., 15872., 10352., 10784.,
      11712., 12160., 13136., 13600., 14624., 15104., 10096., 10528., 11456.,
      11904., 12880., 13344., 14368., 14848., 11952., 12448., 13440., 13952.,
      14992., 15520., 16608., 17152., 13808., 14368., 15424., 16000., 17104.,
      17696., 18848., 19456., 17904., 18464., 19520., 20096., 21200., 21792.,
      22944., 23552., 18160., 18720., 19776., 20352., 21456., 22048., 23200.,
      23808., 18928., 19488., 20544., 21120., 22224., 22816., 23968., 24576.,
      16560., 17056., 18048., 18560., 19600., 20128., 21216., 21760., 15216.,
      15648., 16576., 17024., 18000., 18464., 19488., 19968., 14448., 14880.,
      15808., 16256., 17232., 17696., 18720., 19200., 14192., 14624., 15552.,
      16000., 16976., 17440., 18464., 18944.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6549.,  7274.,  7999.,  8724.,  10142., 10916., 11690., 12464., 14127.,
      14950., 15773., 16596., 18504., 19376., 20248., 21120., 8456.,  9296.,
      10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032., 18984.,
      19936., 22064., 23072., 24080., 25088., 8007.,  8926.,  9845.,  10764.,
      12558., 13540., 14522., 15504., 17613., 18658., 19703., 20748., 23172.,
      24280., 25388., 26496., 10354., 11380., 12406., 13432., 15368., 16464.,
      17560., 18656., 20942., 22108., 23274., 24440., 27076., 28312., 29548.,
      30784., 6771.,  7718.,  8665.,  9612.,  11322., 12332., 13342., 14352.,
      16377., 17450., 18523., 19596., 21936., 23072., 24208., 25344., 8456.,
      9296.,  10136., 10976., 12544., 13440., 14336., 15232., 17080., 18032.,
      18984., 19936., 22064., 23072., 24080., 25088., 4913.,  5650.,  6387.,
      7124.,  8442.,  9228.,  10014., 10800., 12363., 13198., 14033., 14868.,
      16676., 17560., 18444., 19328., 7480.,  8304.,  9128.,  9952.,  11568.,
      12448., 13328., 14208., 16104., 17040., 17976., 18912., 21088., 22080.,
      23072., 24064., 9664.,  10624., 11584., 12544., 14336., 15360., 16384.,
      17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672.,
      9384.,  10448., 11512., 12576., 14640., 15776., 16912., 18048., 20472.,
      21680., 22888., 24096., 26880., 28160., 29440., 30720., 12080., 13280.,
      14480., 15680., 17920., 19200., 20480., 21760., 24400., 25760., 27120.,
      28480., 31520., 32960., 34400., 35840., 7752.,  8848.,  9944.,  11040.,
      13008., 14176., 15344., 16512., 18840., 20080., 21320., 22560., 25248.,
      26560., 27872., 29184., 9664.,  10624., 11584., 12544., 14336., 15360.,
      16384., 17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520.,
      28672., 5848.,  6704.,  7560.,  8416.,  9936.,  10848., 11760., 12672.,
      14472., 15440., 16408., 17376., 19456., 20480., 21504., 22528., 8403.,
      9318.,  10233., 11148., 12954., 13932., 14910., 15888., 18009., 19050.,
      20091., 21132., 23568., 24672., 25776., 26880., 10872., 11952., 13032.,
      14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632.,
      28368., 29664., 30960., 32256., 10353., 11538., 12723., 13908., 16218.,
      17484., 18750., 20016., 22731., 24078., 25425., 26772., 29892., 31320.,
      32748., 34176., 13374., 14700., 16026., 17352., 19848., 21264., 22680.,
      24096., 27042., 28548., 30054., 31560., 34956., 36552., 38148., 39744.,
      8709.,  9930.,  11151., 12372., 14574., 15876., 17178., 18480., 21087.,
      22470., 23853., 25236., 28248., 29712., 31176., 32640., 10872., 11952.,
      13032., 14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408.,
      25632., 28368., 29664., 30960., 32256., 6647.,  7614.,  8581.,  9548.,
      11262., 12292., 13322., 14352., 16381., 17474., 18567., 19660., 22004.,
      23160., 24316., 25472., 9350.,  10380., 11410., 12440., 14460., 15560.,
      16660., 17760., 20130., 21300., 22470., 23640., 26360., 27600., 28840.,
      30080., 12080., 13280., 14480., 15680., 17920., 19200., 20480., 21760.,
      24400., 25760., 27120., 28480., 31520., 32960., 34400., 35840., 11458.,
      12772., 14086., 15400., 17964., 19368., 20772., 22176., 25190., 26684.,
      28178., 29672., 33136., 34720., 36304., 37888., 14812., 16280., 17748.,
      19216., 21984., 23552., 25120., 26688., 29956., 31624., 33292., 34960.,
      38728., 40496., 42264., 44032., 9674.,  11028., 12382., 13736., 16180.,
      17624., 19068., 20512., 23406., 24940., 26474., 28008., 31352., 32976.,
      34600., 36224., 12080., 13280., 14480., 15680., 17920., 19200., 20480.,
      21760., 24400., 25760., 27120., 28480., 31520., 32960., 34400., 35840.,
      7310.,  8380.,  9450.,  10520., 12420., 13560., 14700., 15840., 18090.,
      19300., 20510., 21720., 24320., 25600., 26880., 28160., 8427.,  9366.,
      10305., 11244., 13074., 14076., 15078., 16080., 18225., 19290., 20355.,
      21420., 23880., 25008., 26136., 27264., 10872., 11952., 13032., 14112.,
      16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632., 28368.,
      29664., 30960., 32256., 10489., 11682., 12875., 14068., 16386., 17660.,
      18934., 20208., 22931., 24286., 25641., 26996., 30124., 31560., 32996.,
      34432., 13518., 14860., 16202., 17544., 20056., 21488., 22920., 24352.,
      27314., 28836., 30358., 31880., 35292., 36904., 38516., 40128., 8717.,
      9946.,  11175., 12404., 14614., 15924., 17234., 18544., 21159., 22550.,
      23941., 25332., 28352., 29824., 31296., 32768., 10872., 11952., 13032.,
      14112., 16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632.,
      28368., 29664., 30960., 32256., 6511.,  7470.,  8429.,  9388.,  11094.,
      12116., 13138., 14160., 16181., 17266., 18351., 19436., 21772., 22920.,
      24068., 25216., 7480.,  8304.,  9128.,  9952.,  11568., 12448., 13328.,
      14208., 16104., 17040., 17976., 18912., 21088., 22080., 23072., 24064.,
      9664.,  10624., 11584., 12544., 14336., 15360., 16384., 17408., 19520.,
      20608., 21696., 22784., 25216., 26368., 27520., 28672., 9384.,  10448.,
      11512., 12576., 14640., 15776., 16912., 18048., 20472., 21680., 22888.,
      24096., 26880., 28160., 29440., 30720., 12080., 13280., 14480., 15680.,
      17920., 19200., 20480., 21760., 24400., 25760., 27120., 28480., 31520.,
      32960., 34400., 35840., 7752.,  8848.,  9944.,  11040., 13008., 14176.,
      15344., 16512., 18840., 20080., 21320., 22560., 25248., 26560., 27872.,
      29184., 9664.,  10624., 11584., 12544., 14336., 15360., 16384., 17408.,
      19520., 20608., 21696., 22784., 25216., 26368., 27520., 28672., 5848.,
      6704.,  7560.,  8416.,  9936.,  10848., 11760., 12672., 14472., 15440.,
      16408., 17376., 19456., 20480., 21504., 22528., 6541.,  7258.,  7975.,
      8692.,  10102., 10868., 11634., 12400., 14055., 14870., 15685., 16500.,
      18400., 19264., 20128., 20992., 8456.,  9296.,  10136., 10976., 12544.,
      13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072.,
      24080., 25088., 8143.,  9070.,  9997.,  10924., 12726., 13716., 14706.,
      15696., 17813., 18866., 19919., 20972., 23404., 24520., 25636., 26752.,
      10498., 11540., 12582., 13624., 15576., 16688., 17800., 18912., 21214.,
      22396., 23578., 24760., 27412., 28664., 29916., 31168., 6779.,  7734.,
      8689.,  9644.,  11362., 12380., 13398., 14416., 16449., 17530., 18611.,
      19692., 22040., 23184., 24328., 25472., 8456.,  9296.,  10136., 10976.,
      12544., 13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064.,
      23072., 24080., 25088., 5321.,  6082.,  6843.,  7604.,  8946.,  9756.,
      10566., 11376., 12963., 13822., 14681., 15540., 17372., 18280., 19188.,
      20096.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10032., 10464., 10896., 11328., 12224., 12672., 13120., 13568., 14544.,
      15008., 15472., 15936., 16992., 17472., 17952., 18432., 10544., 10976.,
      11408., 11840., 12736., 13184., 13632., 14080., 15056., 15520., 15984.,
      16448., 17504., 17984., 18464., 18944., 12080., 12512., 12944., 13376.,
      14272., 14720., 15168., 15616., 16592., 17056., 17520., 17984., 19040.,
      19520., 20000., 20480., 10544., 10976., 11408., 11840., 12736., 13184.,
      13632., 14080., 15056., 15520., 15984., 16448., 17504., 17984., 18464.,
      18944., 10032., 10464., 10896., 11328., 12224., 12672., 13120., 13568.,
      14544., 15008., 15472., 15936., 16992., 17472., 17952., 18432., 10544.,
      10976., 11408., 11840., 12736., 13184., 13632., 14080., 15056., 15520.,
      15984., 16448., 17504., 17984., 18464., 18944., 12080., 12512., 12944.,
      13376., 14272., 14720., 15168., 15616., 16592., 17056., 17520., 17984.,
      19040., 19520., 20000., 20480., 13232., 13792., 14352., 14912., 15936.,
      16512., 17088., 17664., 18768., 19360., 19952., 20544., 21728., 22336.,
      22944., 23552., 13744., 14304., 14864., 15424., 16448., 17024., 17600.,
      18176., 19280., 19872., 20464., 21056., 22240., 22848., 23456., 24064.,
      15280., 15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816.,
      21408., 22000., 22592., 23776., 24384., 24992., 25600., 13744., 14304.,
      14864., 15424., 16448., 17024., 17600., 18176., 19280., 19872., 20464.,
      21056., 22240., 22848., 23456., 24064., 13232., 13792., 14352., 14912.,
      15936., 16512., 17088., 17664., 18768., 19360., 19952., 20544., 21728.,
      22336., 22944., 23552., 10608., 11104., 11600., 12096., 13056., 13568.,
      14080., 14592., 15632., 16160., 16688., 17216., 18336., 18880., 19424.,
      19968., 10032., 10464., 10896., 11328., 12224., 12672., 13120., 13568.,
      14544., 15008., 15472., 15936., 16992., 17472., 17952., 18432., 10032.,
      10464., 10896., 11328., 12224., 12672., 13120., 13568., 14544., 15008.,
      15472., 15936., 16992., 17472., 17952., 18432., 10544., 10976., 11408.,
      11840., 12736., 13184., 13632., 14080., 15056., 15520., 15984., 16448.,
      17504., 17984., 18464., 18944., 12080., 12512., 12944., 13376., 14272.,
      14720., 15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520.,
      20000., 20480., 13680., 14176., 14672., 15168., 16128., 16640., 17152.,
      17664., 18704., 19232., 19760., 20288., 21408., 21952., 22496., 23040.,
      15280., 15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816.,
      21408., 22000., 22592., 23776., 24384., 24992., 25600., 13744., 14304.,
      14864., 15424., 16448., 17024., 17600., 18176., 19280., 19872., 20464.,
      21056., 22240., 22848., 23456., 24064., 13232., 13792., 14352., 14912.,
      15936., 16512., 17088., 17664., 18768., 19360., 19952., 20544., 21728.,
      22336., 22944., 23552., 13232., 13792., 14352., 14912., 15936., 16512.,
      17088., 17664., 18768., 19360., 19952., 20544., 21728., 22336., 22944.,
      23552., 10608., 11104., 11600., 12096., 13056., 13568., 14080., 14592.,
      15632., 16160., 16688., 17216., 18336., 18880., 19424., 19968., 10032.,
      10464., 10896., 11328., 12224., 12672., 13120., 13568., 14544., 15008.,
      15472., 15936., 16992., 17472., 17952., 18432., 10544., 10976., 11408.,
      11840., 12736., 13184., 13632., 14080., 15056., 15520., 15984., 16448.,
      17504., 17984., 18464., 18944., 12080., 12512., 12944., 13376., 14272.,
      14720., 15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520.,
      20000., 20480., 10544., 10976., 11408., 11840., 12736., 13184., 13632.,
      14080., 15056., 15520., 15984., 16448., 17504., 17984., 18464., 18944.,
      10032., 10464., 10896., 11328., 12224., 12672., 13120., 13568., 14544.,
      15008., 15472., 15936., 16992., 17472., 17952., 18432., 15280., 15840.,
      16400., 16960., 17984., 18560., 19136., 19712., 20816., 21408., 22000.,
      22592., 23776., 24384., 24992., 25600., 13744., 14304., 14864., 15424.,
      16448., 17024., 17600., 18176., 19280., 19872., 20464., 21056., 22240.,
      22848., 23456., 24064., 13232., 13792., 14352., 14912., 15936., 16512.,
      17088., 17664., 18768., 19360., 19952., 20544., 21728., 22336., 22944.,
      23552., 13744., 14304., 14864., 15424., 16448., 17024., 17600., 18176.,
      19280., 19872., 20464., 21056., 22240., 22848., 23456., 24064., 15280.,
      15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816., 21408.,
      22000., 22592., 23776., 24384., 24992., 25600., 13744., 14304., 14864.,
      15424., 16448., 17024., 17600., 18176., 19280., 19872., 20464., 21056.,
      22240., 22848., 23456., 24064., 13232., 13792., 14352., 14912., 15936.,
      16512., 17088., 17664., 18768., 19360., 19952., 20544., 21728., 22336.,
      22944., 23552., 12080., 12512., 12944., 13376., 14272., 14720., 15168.,
      15616., 16592., 17056., 17520., 17984., 19040., 19520., 20000., 20480.,
      10544., 10976., 11408., 11840., 12736., 13184., 13632., 14080., 15056.,
      15520., 15984., 16448., 17504., 17984., 18464., 18944., 10032., 10464.,
      10896., 11328., 12224., 12672., 13120., 13568., 14544., 15008., 15472.,
      15936., 16992., 17472., 17952., 18432., 10544., 10976., 11408., 11840.,
      12736., 13184., 13632., 14080., 15056., 15520., 15984., 16448., 17504.,
      17984., 18464., 18944., 12080., 12512., 12944., 13376., 14272., 14720.,
      15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520., 20000.,
      20480., 13680., 14176., 14672., 15168., 16128., 16640., 17152., 17664.,
      18704., 19232., 19760., 20288., 21408., 21952., 22496., 23040., 15280.,
      15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816., 21408.,
      22000., 22592., 23776., 24384., 24992., 25600., 15280., 15840., 16400.,
      16960., 17984., 18560., 19136., 19712., 20816., 21408., 22000., 22592.,
      23776., 24384., 24992., 25600., 13744., 14304., 14864., 15424., 16448.,
      17024., 17600., 18176., 19280., 19872., 20464., 21056., 22240., 22848.,
      23456., 24064., 13232., 13792., 14352., 14912., 15936., 16512., 17088.,
      17664., 18768., 19360., 19952., 20544., 21728., 22336., 22944., 23552.,
      10608., 11104., 11600., 12096., 13056., 13568., 14080., 14592., 15632.,
      16160., 16688., 17216., 18336., 18880., 19424., 19968., 10032., 10464.,
      10896., 11328., 12224., 12672., 13120., 13568., 14544., 15008., 15472.,
      15936., 16992., 17472., 17952., 18432., 10544., 10976., 11408., 11840.,
      12736., 13184., 13632., 14080., 15056., 15520., 15984., 16448., 17504.,
      17984., 18464., 18944., 12080., 12512., 12944., 13376., 14272., 14720.,
      15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520., 20000.,
      20480.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4020.,  5091.,  6216.,  7380.,  6384.,  5379.,  4380.,  7920.,  9738.,
      11592., 13464., 11592., 9738.,  7920.,  5700.,  7185.,  8736.,  10332.,
      8904.,  7473.,  6060.,  10560., 12984., 15456., 17952., 15456., 12984.,
      10560., 6060.,  7473.,  8904.,  10332., 8736.,  7185.,  5700.,  7920.,
      9738.,  11592., 13464., 11592., 9738.,  7920.,  4380.,  5379.,  6384.,
      7380.,  6216.,  5091.,  4020.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7520.,  7598.,  7676.,  7754.,  7832.,  7910.,  7988.,  8144.,  8222.,
      8300.,  8378.,  8456.,  8534.,  8612.,  8768.,  8846.,  8924.,  9002.,
      9080.,  9158.,  9236.,  9392.,  9470.,  9548.,  9626.,  9704.,  9782.,
      9860.,  10016., 10094., 10172., 10250., 10328., 10406., 10484., 10640.,
      10718., 10796., 10874., 10952., 11030., 11108., 11264., 11342., 11420.,
      11498., 11576., 11654., 11732.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16695., 17640., 19947., 21126., 23100., 24528., 26124., 27816., 21987.,
      23520., 18039., 19398., 14310., 15480., 24330., 25440., 29034., 30420.,
      33600., 35280., 37992., 39984., 32130., 33936., 26514., 28116., 21180.,
      22560., 26325., 27720., 31353., 33090., 36204., 38304., 40836., 43320.,
      34377., 36624., 28221., 30210., 22410., 24120., 38520., 40320., 45624.,
      47856., 52416., 55104., 58848., 62016., 49560., 52416., 40728., 43248.,
      32400., 34560., 29565., 31320., 34665., 36834., 39396., 42000., 43716.,
      46776., 36225., 38976., 29229., 31650., 22770., 24840., 33450., 35040.,
      39402., 41364., 45024., 47376., 50280., 53040., 42210., 44688., 34578.,
      36756., 27420., 29280., 19935., 21240., 23259., 24870., 26292., 28224.,
      29004., 31272., 23835., 25872., 19047., 20838., 14670., 16200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14206., 15040., 14350., 15196., 14494., 15352., 14638., 15508., 14782.,
      15664., 14926., 15820., 15070., 15976., 15358., 16288., 15502., 16444.,
      15646., 16600., 15790., 16756., 15934., 16912., 16078., 17068., 16222.,
      17224., 16510., 17536., 16654., 17692., 16798., 17848., 16942., 18004.,
      17086., 18160., 17230., 18316., 17374., 18472., 17662., 18784., 17806.,
      18940., 17950., 19096., 18094., 19252., 18238., 19408., 18382., 19564.,
      18526., 19720., 18814., 20032., 18958., 20188., 19102., 20344., 19246.,
      20500., 19390., 20656., 19534., 20812., 19678., 20968., 19966., 21280.,
      20110., 21436., 20254., 21592., 20398., 21748., 20542., 21904., 20686.,
      22060., 20830., 22216., 21118., 22528., 21262., 22684., 21406., 22840.,
      21550., 22996., 21694., 23152., 21838., 23308., 21982., 23464.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20445., 21390., 22335., 23280., 23451., 24630., 25809., 26988., 25956.,
      27384., 28812., 30240., 27900., 29592., 31284., 32976., 21609., 23142.,
      24675., 26208., 15999., 17358., 18717., 20076., 11130., 12300., 13470.,
      14640., 24030., 25140., 26250., 27360., 27594., 28980., 30366., 31752.,
      30576., 32256., 33936., 35616., 32904., 34896., 36888., 38880., 25494.,
      27300., 29106., 30912., 18882., 20484., 22086., 23688., 13140., 14520.,
      15900., 17280., 30135., 31530., 32925., 34320., 34473., 36210., 37947.,
      39684., 38052., 40152., 42252., 44352., 40788., 43272., 45756., 48240.,
      31563., 33810., 36057., 38304., 23349., 25338., 27327., 29316., 16230.,
      17940., 19650., 21360., 38760., 40560., 42360., 44160., 44088., 46320.,
      48552., 50784., 48384., 51072., 53760., 56448., 51552., 54720., 57888.,
      61056., 39816., 42672., 45528., 48384., 29400., 31920., 34440., 36960.,
      20400., 22560., 24720., 26880., 37695., 39450., 41205., 42960., 42681.,
      44850., 47019., 49188., 46620., 49224., 51828., 54432., 49428., 52488.,
      55548., 58608., 38115., 40866., 43617., 46368., 28101., 30522., 32943.,
      35364., 19470., 21540., 23610., 25680., 34110., 35700., 37290., 38880.,
      38538., 40500., 42462., 44424., 42000., 44352., 46704., 49056., 44424.,
      47184., 49944., 52704., 34230., 36708., 39186., 41664., 25218., 27396.,
      29574., 31752., 17460., 19320., 21180., 23040., 28005., 29310., 30615.,
      31920., 31659., 33270., 34881., 36492., 34524., 36456., 38388., 40320.,
      36540., 38808., 41076., 43344., 28161., 30198., 32235., 34272., 20751.,
      22542., 24333., 26124., 14370., 15900., 17430., 18960.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27578., 28412., 29246., 30080., 27854., 28700., 29546., 30392., 28130.,
      28988., 29846., 30704., 28406., 29276., 30146., 31016., 28682., 29564.,
      30446., 31328., 28958., 29852., 30746., 31640., 29234., 30140., 31046.,
      31952., 29786., 30716., 31646., 32576., 30062., 31004., 31946., 32888.,
      30338., 31292., 32246., 33200., 30614., 31580., 32546., 33512., 30890.,
      31868., 32846., 33824., 31166., 32156., 33146., 34136., 31442., 32444.,
      33446., 34448., 31994., 33020., 34046., 35072., 32270., 33308., 34346.,
      35384., 32546., 33596., 34646., 35696., 32822., 33884., 34946., 36008.,
      33098., 34172., 35246., 36320., 33374., 34460., 35546., 36632., 33650.,
      34748., 35846., 36944., 34202., 35324., 36446., 37568., 34478., 35612.,
      36746., 37880., 34754., 35900., 37046., 38192., 35030., 36188., 37346.,
      38504., 35306., 36476., 37646., 38816., 35582., 36764., 37946., 39128.,
      35858., 37052., 38246., 39440., 36410., 37628., 38846., 40064., 36686.,
      37916., 39146., 40376., 36962., 38204., 39446., 40688., 37238., 38492.,
      39746., 41000., 37514., 38780., 40046., 41312., 37790., 39068., 40346.,
      41624., 38066., 39356., 40646., 41936., 38618., 39932., 41246., 42560.,
      38894., 40220., 41546., 42872., 39170., 40508., 41846., 43184., 39446.,
      40796., 42146., 43496., 39722., 41084., 42446., 43808., 39998., 41372.,
      42746., 44120., 40274., 41660., 43046., 44432., 40826., 42236., 43646.,
      45056., 41102., 42524., 43946., 45368., 41378., 42812., 44246., 45680.,
      41654., 43100., 44546., 45992., 41930., 43388., 44846., 46304., 42206.,
      43676., 45146., 46616., 42482., 43964., 45446., 46928.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4725.,  6000.,  6450.,  7980.,  8295.,  10080., 10200., 12240., 8295.,
      10080., 6450.,  7980.,  4725.,  6000.,  5670.,  7200.,  7740.,  9576.,
      9954.,  12096., 12240., 14688., 9954.,  12096., 7740.,  9576.,  5670.,
      7200.,  6615.,  8400.,  9030.,  11172., 11613., 14112., 14280., 17136.,
      11613., 14112., 9030.,  11172., 6615.,  8400.,  7560.,  9600.,  10320.,
      12768., 13272., 16128., 16320., 19584., 13272., 16128., 10320., 12768.,
      7560.,  9600.,  6615.,  8400.,  9030.,  11172., 11613., 14112., 14280.,
      17136., 11613., 14112., 9030.,  11172., 6615.,  8400.,  5670.,  7200.,
      7740.,  9576.,  9954.,  12096., 12240., 14688., 9954.,  12096., 7740.,
      9576.,  5670.,  7200.,  4725.,  6000.,  6450.,  7980.,  8295.,  10080.,
      10200., 12240., 8295.,  10080., 6450.,  7980.,  4725.,  6000.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28268., 30080., 28556., 30392., 28844., 30704., 29132., 31016., 29420.,
      31328., 29708., 31640., 29996., 31952., 30572., 32576., 30860., 32888.,
      31148., 33200., 31436., 33512., 31724., 33824., 32012., 34136., 32300.,
      34448., 32876., 35072., 33164., 35384., 33452., 35696., 33740., 36008.,
      34028., 36320., 34316., 36632., 34604., 36944., 35180., 37568., 35468.,
      37880., 35756., 38192., 36044., 38504., 36332., 38816., 36620., 39128.,
      36908., 39440., 37484., 40064., 37772., 40376., 38060., 40688., 38348.,
      41000., 38636., 41312., 38924., 41624., 39212., 41936., 39788., 42560.,
      40076., 42872., 40364., 43184., 40652., 43496., 40940., 43808., 41228.,
      44120., 41516., 44432., 42092., 45056., 42380., 45368., 42668., 45680.,
      42956., 45992., 43244., 46304., 43532., 46616., 43820., 46928.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3315.,  3690.,  4830.,  5280.,  4680.,  5220.,  6690.,  7320.,  6255.,
      6990.,  8760.,  9600.,  7920.,  8880.,  10920., 12000., 6285.,  7230.,
      9030.,  10080., 5280.,  6180.,  7770.,  8760.,  5025.,  5850.,  7260.,
      8160.,  3978.,  4428.,  5796.,  6336.,  5616.,  6264.,  8028.,  8784.,
      7506.,  8388.,  10512., 11520., 9504.,  10656., 13104., 14400., 7542.,
      8676.,  10836., 12096., 6336.,  7416.,  9324.,  10512., 6030.,  7020.,
      8712.,  9792.,  4641.,  5166.,  6762.,  7392.,  6552.,  7308.,  9366.,
      10248., 8757.,  9786.,  12264., 13440., 11088., 12432., 15288., 16800.,
      8799.,  10122., 12642., 14112., 7392.,  8652.,  10878., 12264., 7035.,
      8190.,  10164., 11424., 5304.,  5904.,  7728.,  8448.,  7488.,  8352.,
      10704., 11712., 10008., 11184., 14016., 15360., 12672., 14208., 17472.,
      19200., 10056., 11568., 14448., 16128., 8448.,  9888.,  12432., 14016.,
      8040.,  9360.,  11616., 13056., 4641.,  5166.,  6762.,  7392.,  6552.,
      7308.,  9366.,  10248., 8757.,  9786.,  12264., 13440., 11088., 12432.,
      15288., 16800., 8799.,  10122., 12642., 14112., 7392.,  8652.,  10878.,
      12264., 7035.,  8190.,  10164., 11424., 3978.,  4428.,  5796.,  6336.,
      5616.,  6264.,  8028.,  8784.,  7506.,  8388.,  10512., 11520., 9504.,
      10656., 13104., 14400., 7542.,  8676.,  10836., 12096., 6336.,  7416.,
      9324.,  10512., 6030.,  7020.,  8712.,  9792.,  3315.,  3690.,  4830.,
      5280.,  4680.,  5220.,  6690.,  7320.,  6255.,  6990.,  8760.,  9600.,
      7920.,  8880.,  10920., 12000., 6285.,  7230.,  9030.,  10080., 5280.,
      6180.,  7770.,  8760.,  5025.,  5850.,  7260.,  8160.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14944., 15576., 16508., 17152., 15496., 16152., 17108., 17776., 16048.,
      16728., 17708., 18400., 16600., 17304., 18308., 19024., 17152., 17880.,
      18908., 19648., 17704., 18456., 19508., 20272., 18256., 19032., 20108.,
      20896., 19360., 20184., 21308., 22144., 19912., 20760., 21908., 22768.,
      20464., 21336., 22508., 23392., 21016., 21912., 23108., 24016., 21568.,
      22488., 23708., 24640., 22120., 23064., 24308., 25264., 22672., 23640.,
      24908., 25888., 23776., 24792., 26108., 27136., 24328., 25368., 26708.,
      27760., 24880., 25944., 27308., 28384., 25432., 26520., 27908., 29008.,
      25984., 27096., 28508., 29632., 26536., 27672., 29108., 30256., 27088.,
      28248., 29708., 30880., 28192., 29400., 30908., 32128., 28744., 29976.,
      31508., 32752., 29296., 30552., 32108., 33376., 29848., 31128., 32708.,
      34000., 30400., 31704., 33308., 34624., 30952., 32280., 33908., 35248.,
      31504., 32856., 34508., 35872., 32608., 34008., 35708., 37120., 33160.,
      34584., 36308., 37744., 33712., 35160., 36908., 38368., 34264., 35736.,
      37508., 38992., 34816., 36312., 38108., 39616., 35368., 36888., 38708.,
      40240., 35920., 37464., 39308., 40864., 37024., 38616., 40508., 42112.,
      37576., 39192., 41108., 42736., 38128., 39768., 41708., 43360., 38680.,
      40344., 42308., 43984., 39232., 40920., 42908., 44608., 39784., 41496.,
      43508., 45232., 40336., 42072., 44108., 45856., 41440., 43224., 45308.,
      47104., 41992., 43800., 45908., 47728., 42544., 44376., 46508., 48352.,
      43096., 44952., 47108., 48976., 43648., 45528., 47708., 49600., 44200.,
      46104., 48308., 50224., 44752., 46680., 48908., 50848.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2175.,  2550.,  2925.,  3300.,  4410.,  4860.,  5310.,  5760.,  3060.,
      3600.,  4140.,  4680.,  6030.,  6660.,  7290.,  7920.,  4095.,  4830.,
      5565.,  6300.,  8040.,  8880.,  9720.,  10560., 5280.,  6240.,  7200.,
      8160.,  10200., 11280., 12360., 13440., 4185.,  5130.,  6075.,  7020.,
      8850.,  9900.,  10950., 12000., 4860.,  5760.,  6660.,  7560.,  9270.,
      10260., 11250., 12240., 3465.,  4290.,  5115.,  5940.,  7380.,  8280.,
      9180.,  10080., 2610.,  3060.,  3510.,  3960.,  5292.,  5832.,  6372.,
      6912.,  3672.,  4320.,  4968.,  5616.,  7236.,  7992.,  8748.,  9504.,
      4914.,  5796.,  6678.,  7560.,  9648.,  10656., 11664., 12672., 6336.,
      7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 5022.,  6156.,
      7290.,  8424.,  10620., 11880., 13140., 14400., 5832.,  6912.,  7992.,
      9072.,  11124., 12312., 13500., 14688., 4158.,  5148.,  6138.,  7128.,
      8856.,  9936.,  11016., 12096., 3045.,  3570.,  4095.,  4620.,  6174.,
      6804.,  7434.,  8064.,  4284.,  5040.,  5796.,  6552.,  8442.,  9324.,
      10206., 11088., 5733.,  6762.,  7791.,  8820.,  11256., 12432., 13608.,
      14784., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      5859.,  7182.,  8505.,  9828.,  12390., 13860., 15330., 16800., 6804.,
      8064.,  9324.,  10584., 12978., 14364., 15750., 17136., 4851.,  6006.,
      7161.,  8316.,  10332., 11592., 12852., 14112., 3480.,  4080.,  4680.,
      5280.,  7056.,  7776.,  8496.,  9216.,  4896.,  5760.,  6624.,  7488.,
      9648.,  10656., 11664., 12672., 6552.,  7728.,  8904.,  10080., 12864.,
      14208., 15552., 16896., 8448.,  9984.,  11520., 13056., 16320., 18048.,
      19776., 21504., 6696.,  8208.,  9720.,  11232., 14160., 15840., 17520.,
      19200., 7776.,  9216.,  10656., 12096., 14832., 16416., 18000., 19584.,
      5544.,  6864.,  8184.,  9504.,  11808., 13248., 14688., 16128., 3045.,
      3570.,  4095.,  4620.,  6174.,  6804.,  7434.,  8064.,  4284.,  5040.,
      5796.,  6552.,  8442.,  9324.,  10206., 11088., 5733.,  6762.,  7791.,
      8820.,  11256., 12432., 13608., 14784., 7392.,  8736.,  10080., 11424.,
      14280., 15792., 17304., 18816., 5859.,  7182.,  8505.,  9828.,  12390.,
      13860., 15330., 16800., 6804.,  8064.,  9324.,  10584., 12978., 14364.,
      15750., 17136., 4851.,  6006.,  7161.,  8316.,  10332., 11592., 12852.,
      14112., 2610.,  3060.,  3510.,  3960.,  5292.,  5832.,  6372.,  6912.,
      3672.,  4320.,  4968.,  5616.,  7236.,  7992.,  8748.,  9504.,  4914.,
      5796.,  6678.,  7560.,  9648.,  10656., 11664., 12672., 6336.,  7488.,
      8640.,  9792.,  12240., 13536., 14832., 16128., 5022.,  6156.,  7290.,
      8424.,  10620., 11880., 13140., 14400., 5832.,  6912.,  7992.,  9072.,
      11124., 12312., 13500., 14688., 4158.,  5148.,  6138.,  7128.,  8856.,
      9936.,  11016., 12096., 2175.,  2550.,  2925.,  3300.,  4410.,  4860.,
      5310.,  5760.,  3060.,  3600.,  4140.,  4680.,  6030.,  6660.,  7290.,
      7920.,  4095.,  4830.,  5565.,  6300.,  8040.,  8880.,  9720.,  10560.,
      5280.,  6240.,  7200.,  8160.,  10200., 11280., 12360., 13440., 4185.,
      5130.,  6075.,  7020.,  8850.,  9900.,  10950., 12000., 4860.,  5760.,
      6660.,  7560.,  9270.,  10260., 11250., 12240., 3465.,  4290.,  5115.,
      5940.,  7380.,  8280.,  9180.,  10080.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3656.,  3776.,  3896.,  4016.,  4468.,  4600.,  4732.,  4864.,  4224.,
      4368.,  4512.,  4656.,  5132.,  5288.,  5444.,  5600.,  4792.,  4960.,
      5128.,  5296.,  5796.,  5976.,  6156.,  6336.,  5360.,  5552.,  5744.,
      5936.,  6460.,  6664.,  6868.,  7072.,  5928.,  6144.,  6360.,  6576.,
      7124.,  7352.,  7580.,  7808.,  6496.,  6736.,  6976.,  7216.,  7788.,
      8040.,  8292.,  8544.,  7064.,  7328.,  7592.,  7856.,  8452.,  8728.,
      9004.,  9280.,  8200.,  8512.,  8824.,  9136.,  9780.,  10104., 10428.,
      10752., 8768.,  9104.,  9440.,  9776.,  10444., 10792., 11140., 11488.,
      9336.,  9696.,  10056., 10416., 11108., 11480., 11852., 12224., 9904.,
      10288., 10672., 11056., 11772., 12168., 12564., 12960., 10472., 10880.,
      11288., 11696., 12436., 12856., 13276., 13696., 11040., 11472., 11904.,
      12336., 13100., 13544., 13988., 14432., 11608., 12064., 12520., 12976.,
      13764., 14232., 14700., 15168., 12744., 13248., 13752., 14256., 15092.,
      15608., 16124., 16640., 13312., 13840., 14368., 14896., 15756., 16296.,
      16836., 17376., 13880., 14432., 14984., 15536., 16420., 16984., 17548.,
      18112., 14448., 15024., 15600., 16176., 17084., 17672., 18260., 18848.,
      15016., 15616., 16216., 16816., 17748., 18360., 18972., 19584., 15584.,
      16208., 16832., 17456., 18412., 19048., 19684., 20320., 16152., 16800.,
      17448., 18096., 19076., 19736., 20396., 21056., 5128.,  5440.,  5752.,
      6064.,  6708.,  7032.,  7356.,  7680.,  5696.,  6032.,  6368.,  6704.,
      7372.,  7720.,  8068.,  8416.,  6264.,  6624.,  6984.,  7344.,  8036.,
      8408.,  8780.,  9152.,  6832.,  7216.,  7600.,  7984.,  8700.,  9096.,
      9492.,  9888.,  7400.,  7808.,  8216.,  8624.,  9364.,  9784.,  10204.,
      10624., 7968.,  8400.,  8832.,  9264.,  10028., 10472., 10916., 11360.,
      8536.,  8992.,  9448.,  9904.,  10692., 11160., 11628., 12096., 3656.,
      3776.,  3896.,  4016.,  4468.,  4600.,  4732.,  4864.,  4224.,  4368.,
      4512.,  4656.,  5132.,  5288.,  5444.,  5600.,  4792.,  4960.,  5128.,
      5296.,  5796.,  5976.,  6156.,  6336.,  5360.,  5552.,  5744.,  5936.,
      6460.,  6664.,  6868.,  7072.,  5928.,  6144.,  6360.,  6576.,  7124.,
      7352.,  7580.,  7808.,  6496.,  6736.,  6976.,  7216.,  7788.,  8040.,
      8292.,  8544.,  7064.,  7328.,  7592.,  7856.,  8452.,  8728.,  9004.,
      9280.,  8200.,  8512.,  8824.,  9136.,  9780.,  10104., 10428., 10752.,
      8768.,  9104.,  9440.,  9776.,  10444., 10792., 11140., 11488., 9336.,
      9696.,  10056., 10416., 11108., 11480., 11852., 12224., 9904.,  10288.,
      10672., 11056., 11772., 12168., 12564., 12960., 10472., 10880., 11288.,
      11696., 12436., 12856., 13276., 13696., 11040., 11472., 11904., 12336.,
      13100., 13544., 13988., 14432., 11608., 12064., 12520., 12976., 13764.,
      14232., 14700., 15168., 12744., 13248., 13752., 14256., 15092., 15608.,
      16124., 16640., 13312., 13840., 14368., 14896., 15756., 16296., 16836.,
      17376., 13880., 14432., 14984., 15536., 16420., 16984., 17548., 18112.,
      14448., 15024., 15600., 16176., 17084., 17672., 18260., 18848., 15016.,
      15616., 16216., 16816., 17748., 18360., 18972., 19584., 15584., 16208.,
      16832., 17456., 18412., 19048., 19684., 20320., 16152., 16800., 17448.,
      18096., 19076., 19736., 20396., 21056.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2895.,  4020.,  5295.,  6720.,  3330.,  4680.,  6210.,  7920.,  5205.,
      6780.,  8565.,  10560., 8280.,  10080., 12120., 14400., 5205.,  6780.,
      8565.,  10560., 3330.,  4680.,  6210.,  7920.,  2895.,  4020.,  5295.,
      6720.,  3474.,  4824.,  6354.,  8064.,  3996.,  5616.,  7452.,  9504.,
      6246.,  8136.,  10278., 12672., 9936.,  12096., 14544., 17280., 6246.,
      8136.,  10278., 12672., 3996.,  5616.,  7452.,  9504.,  3474.,  4824.,
      6354.,  8064.,  4053.,  5628.,  7413.,  9408.,  4662.,  6552.,  8694.,
      11088., 7287.,  9492.,  11991., 14784., 11592., 14112., 16968., 20160.,
      7287.,  9492.,  11991., 14784., 4662.,  6552.,  8694.,  11088., 4053.,
      5628.,  7413.,  9408.,  4632.,  6432.,  8472.,  10752., 5328.,  7488.,
      9936.,  12672., 8328.,  10848., 13704., 16896., 13248., 16128., 19392.,
      23040., 8328.,  10848., 13704., 16896., 5328.,  7488.,  9936.,  12672.,
      4632.,  6432.,  8472.,  10752., 4053.,  5628.,  7413.,  9408.,  4662.,
      6552.,  8694.,  11088., 7287.,  9492.,  11991., 14784., 11592., 14112.,
      16968., 20160., 7287.,  9492.,  11991., 14784., 4662.,  6552.,  8694.,
      11088., 4053.,  5628.,  7413.,  9408.,  3474.,  4824.,  6354.,  8064.,
      3996.,  5616.,  7452.,  9504.,  6246.,  8136.,  10278., 12672., 9936.,
      12096., 14544., 17280., 6246.,  8136.,  10278., 12672., 3996.,  5616.,
      7452.,  9504.,  3474.,  4824.,  6354.,  8064.,  2895.,  4020.,  5295.,
      6720.,  3330.,  4680.,  6210.,  7920.,  5205.,  6780.,  8565.,  10560.,
      8280.,  10080., 12120., 14400., 5205.,  6780.,  8565.,  10560., 3330.,
      4680.,  6210.,  7920.,  2895.,  4020.,  5295.,  6720.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6060.,  6576.,  7116.,  7680.,  7164.,  7728.,  8316.,  8928.,  8268.,
      8880.,  9516.,  10176., 9372.,  10032., 10716., 11424., 10476., 11184.,
      11916., 12672., 11580., 12336., 13116., 13920., 12684., 13488., 14316.,
      15168., 14892., 15792., 16716., 17664., 15996., 16944., 17916., 18912.,
      17100., 18096., 19116., 20160., 18204., 19248., 20316., 21408., 19308.,
      20400., 21516., 22656., 20412., 21552., 22716., 23904., 21516., 22704.,
      23916., 25152., 23724., 25008., 26316., 27648., 24828., 26160., 27516.,
      28896., 25932., 27312., 28716., 30144., 27036., 28464., 29916., 31392.,
      28140., 29616., 31116., 32640., 29244., 30768., 32316., 33888., 30348.,
      31920., 33516., 35136., 11820., 12720., 13644., 14592., 12924., 13872.,
      14844., 15840., 14028., 15024., 16044., 17088., 15132., 16176., 17244.,
      18336., 16236., 17328., 18444., 19584., 17340., 18480., 19644., 20832.,
      18444., 19632., 20844., 22080., 6060.,  6576.,  7116.,  7680.,  7164.,
      7728.,  8316.,  8928.,  8268.,  8880.,  9516.,  10176., 9372.,  10032.,
      10716., 11424., 10476., 11184., 11916., 12672., 11580., 12336., 13116.,
      13920., 12684., 13488., 14316., 15168., 14892., 15792., 16716., 17664.,
      15996., 16944., 17916., 18912., 17100., 18096., 19116., 20160., 18204.,
      19248., 20316., 21408., 19308., 20400., 21516., 22656., 20412., 21552.,
      22716., 23904., 21516., 22704., 23916., 25152., 23724., 25008., 26316.,
      27648., 24828., 26160., 27516., 28896., 25932., 27312., 28716., 30144.,
      27036., 28464., 29916., 31392., 28140., 29616., 31116., 32640., 29244.,
      30768., 32316., 33888., 30348., 31920., 33516., 35136.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2190.,  3210.,  3720.,  4965.,  5550.,  7020.,  7680.,  3270.,
      3780.,  4920.,  5520.,  6930.,  7620.,  9300.,  10080., 3045.,  3690.,
      5130.,  5880.,  7635.,  8490.,  10560., 11520., 5160.,  6000.,  7680.,
      8640.,  10680., 11760., 14160., 15360., 3105.,  3930.,  5430.,  6360.,
      8175.,  9210.,  11340., 12480., 4470.,  5220.,  6600.,  7440.,  9090.,
      10020., 11940., 12960., 1815.,  2430.,  3510.,  4200.,  5505.,  6270.,
      7800.,  8640.,  2106.,  2628.,  3852.,  4464.,  5958.,  6660.,  8424.,
      9216.,  3924.,  4536.,  5904.,  6624.,  8316.,  9144.,  11160., 12096.,
      3654.,  4428.,  6156.,  7056.,  9162.,  10188., 12672., 13824., 6192.,
      7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 3726.,  4716.,
      6516.,  7632.,  9810.,  11052., 13608., 14976., 5364.,  6264.,  7920.,
      8928.,  10908., 12024., 14328., 15552., 2178.,  2916.,  4212.,  5040.,
      6606.,  7524.,  9360.,  10368., 2457.,  3066.,  4494.,  5208.,  6951.,
      7770.,  9828.,  10752., 4578.,  5292.,  6888.,  7728.,  9702.,  10668.,
      13020., 14112., 4263.,  5166.,  7182.,  8232.,  10689., 11886., 14784.,
      16128., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      4347.,  5502.,  7602.,  8904.,  11445., 12894., 15876., 17472., 6258.,
      7308.,  9240.,  10416., 12726., 14028., 16716., 18144., 2541.,  3402.,
      4914.,  5880.,  7707.,  8778.,  10920., 12096., 2808.,  3504.,  5136.,
      5952.,  7944.,  8880.,  11232., 12288., 5232.,  6048.,  7872.,  8832.,
      11088., 12192., 14880., 16128., 4872.,  5904.,  8208.,  9408.,  12216.,
      13584., 16896., 18432., 8256.,  9600.,  12288., 13824., 17088., 18816.,
      22656., 24576., 4968.,  6288.,  8688.,  10176., 13080., 14736., 18144.,
      19968., 7152.,  8352.,  10560., 11904., 14544., 16032., 19104., 20736.,
      2904.,  3888.,  5616.,  6720.,  8808.,  10032., 12480., 13824., 2457.,
      3066.,  4494.,  5208.,  6951.,  7770.,  9828.,  10752., 4578.,  5292.,
      6888.,  7728.,  9702.,  10668., 13020., 14112., 4263.,  5166.,  7182.,
      8232.,  10689., 11886., 14784., 16128., 7224.,  8400.,  10752., 12096.,
      14952., 16464., 19824., 21504., 4347.,  5502.,  7602.,  8904.,  11445.,
      12894., 15876., 17472., 6258.,  7308.,  9240.,  10416., 12726., 14028.,
      16716., 18144., 2541.,  3402.,  4914.,  5880.,  7707.,  8778.,  10920.,
      12096., 2106.,  2628.,  3852.,  4464.,  5958.,  6660.,  8424.,  9216.,
      3924.,  4536.,  5904.,  6624.,  8316.,  9144.,  11160., 12096., 3654.,
      4428.,  6156.,  7056.,  9162.,  10188., 12672., 13824., 6192.,  7200.,
      9216.,  10368., 12816., 14112., 16992., 18432., 3726.,  4716.,  6516.,
      7632.,  9810.,  11052., 13608., 14976., 5364.,  6264.,  7920.,  8928.,
      10908., 12024., 14328., 15552., 2178.,  2916.,  4212.,  5040.,  6606.,
      7524.,  9360.,  10368., 1755.,  2190.,  3210.,  3720.,  4965.,  5550.,
      7020.,  7680.,  3270.,  3780.,  4920.,  5520.,  6930.,  7620.,  9300.,
      10080., 3045.,  3690.,  5130.,  5880.,  7635.,  8490.,  10560., 11520.,
      5160.,  6000.,  7680.,  8640.,  10680., 11760., 14160., 15360., 3105.,
      3930.,  5430.,  6360.,  8175.,  9210.,  11340., 12480., 4470.,  5220.,
      6600.,  7440.,  9090.,  10020., 11940., 12960., 1815.,  2430.,  3510.,
      4200.,  5505.,  6270.,  7800.,  8640.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7028.,  7256.,  7792.,  8032.,  8604.,  8856.,  9464.,  9728.,  8164.,
      8440.,  9024.,  9312.,  9932.,  10232., 10888., 11200., 9300.,  9624.,
      10256., 10592., 11260., 11608., 12312., 12672., 10436., 10808., 11488.,
      11872., 12588., 12984., 13736., 14144., 11572., 11992., 12720., 13152.,
      13916., 14360., 15160., 15616., 12708., 13176., 13952., 14432., 15244.,
      15736., 16584., 17088., 13844., 14360., 15184., 15712., 16572., 17112.,
      18008., 18560., 3956.,  4184.,  4720.,  4960.,  5532.,  5784.,  6392.,
      6656.,  5092.,  5368.,  5952.,  6240.,  6860.,  7160.,  7816.,  8128.,
      6228.,  6552.,  7184.,  7520.,  8188.,  8536.,  9240.,  9600.,  7364.,
      7736.,  8416.,  8800.,  9516.,  9912.,  10664., 11072., 8500.,  8920.,
      9648.,  10080., 10844., 11288., 12088., 12544., 9636.,  10104., 10880.,
      11360., 12172., 12664., 13512., 14016., 10772., 11288., 12112., 12640.,
      13500., 14040., 14936., 15488., 7028.,  7256.,  7792.,  8032.,  8604.,
      8856.,  9464.,  9728.,  8164.,  8440.,  9024.,  9312.,  9932.,  10232.,
      10888., 11200., 9300.,  9624.,  10256., 10592., 11260., 11608., 12312.,
      12672., 10436., 10808., 11488., 11872., 12588., 12984., 13736., 14144.,
      11572., 11992., 12720., 13152., 13916., 14360., 15160., 15616., 12708.,
      13176., 13952., 14432., 15244., 15736., 16584., 17088., 13844., 14360.,
      15184., 15712., 16572., 17112., 18008., 18560., 3956.,  4184.,  4720.,
      4960.,  5532.,  5784.,  6392.,  6656.,  5092.,  5368.,  5952.,  6240.,
      6860.,  7160.,  7816.,  8128.,  6228.,  6552.,  7184.,  7520.,  8188.,
      8536.,  9240.,  9600.,  7364.,  7736.,  8416.,  8800.,  9516.,  9912.,
      10664., 11072., 8500.,  8920.,  9648.,  10080., 10844., 11288., 12088.,
      12544., 9636.,  10104., 10880., 11360., 12172., 12664., 13512., 14016.,
      10772., 11288., 12112., 12640., 13500., 14040., 14936., 15488., 7028.,
      7256.,  7792.,  8032.,  8604.,  8856.,  9464.,  9728.,  8164.,  8440.,
      9024.,  9312.,  9932.,  10232., 10888., 11200., 9300.,  9624.,  10256.,
      10592., 11260., 11608., 12312., 12672., 10436., 10808., 11488., 11872.,
      12588., 12984., 13736., 14144., 11572., 11992., 12720., 13152., 13916.,
      14360., 15160., 15616., 12708., 13176., 13952., 14432., 15244., 15736.,
      16584., 17088., 13844., 14360., 15184., 15712., 16572., 17112., 18008.,
      18560., 3956.,  4184.,  4720.,  4960.,  5532.,  5784.,  6392.,  6656.,
      5092.,  5368.,  5952.,  6240.,  6860.,  7160.,  7816.,  8128.,  6228.,
      6552.,  7184.,  7520.,  8188.,  8536.,  9240.,  9600.,  7364.,  7736.,
      8416.,  8800.,  9516.,  9912.,  10664., 11072., 8500.,  8920.,  9648.,
      10080., 10844., 11288., 12088., 12544., 9636.,  10104., 10880., 11360.,
      12172., 12664., 13512., 14016., 10772., 11288., 12112., 12640., 13500.,
      14040., 14936., 15488., 7028.,  7256.,  7792.,  8032.,  8604.,  8856.,
      9464.,  9728.,  8164.,  8440.,  9024.,  9312.,  9932.,  10232., 10888.,
      11200., 9300.,  9624.,  10256., 10592., 11260., 11608., 12312., 12672.,
      10436., 10808., 11488., 11872., 12588., 12984., 13736., 14144., 11572.,
      11992., 12720., 13152., 13916., 14360., 15160., 15616., 12708., 13176.,
      13952., 14432., 15244., 15736., 16584., 17088., 13844., 14360., 15184.,
      15712., 16572., 17112., 18008., 18560.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      435.,   870.,   1305.,  1740.,  2550.,  3060.,  3570.,  4080.,  5265.,
      5850.,  6435.,  7020.,  8580.,  9240.,  9900.,  10560., 510.,   1020.,
      1530.,  2040.,  3000.,  3600.,  4200.,  4800.,  6210.,  6900.,  7590.,
      8280.,  10140., 10920., 11700., 12480., 645.,   1290.,  1935.,  2580.,
      3750.,  4500.,  5250.,  6000.,  7695.,  8550.,  9405.,  10260., 12480.,
      13440., 14400., 15360., 840.,   1680.,  2520.,  3360.,  4800.,  5760.,
      6720.,  7680.,  9720.,  10800., 11880., 12960., 15600., 16800., 18000.,
      19200., 825.,   1650.,  2475.,  3300.,  4650.,  5580.,  6510.,  7440.,
      9315.,  10350., 11385., 12420., 14820., 15960., 17100., 18240., 750.,
      1500.,  2250.,  3000.,  4200.,  5040.,  5880.,  6720.,  8370.,  9300.,
      10230., 11160., 13260., 14280., 15300., 16320., 615.,   1230.,  1845.,
      2460.,  3450.,  4140.,  4830.,  5520.,  6885.,  7650.,  8415.,  9180.,
      10920., 11760., 12600., 13440., 522.,   1044.,  1566.,  2088.,  3060.,
      3672.,  4284.,  4896.,  6318.,  7020.,  7722.,  8424.,  10296., 11088.,
      11880., 12672., 612.,   1224.,  1836.,  2448.,  3600.,  4320.,  5040.,
      5760.,  7452.,  8280.,  9108.,  9936.,  12168., 13104., 14040., 14976.,
      774.,   1548.,  2322.,  3096.,  4500.,  5400.,  6300.,  7200.,  9234.,
      10260., 11286., 12312., 14976., 16128., 17280., 18432., 1008.,  2016.,
      3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256.,
      15552., 18720., 20160., 21600., 23040., 990.,   1980.,  2970.,  3960.,
      5580.,  6696.,  7812.,  8928.,  11178., 12420., 13662., 14904., 17784.,
      19152., 20520., 21888., 900.,   1800.,  2700.,  3600.,  5040.,  6048.,
      7056.,  8064.,  10044., 11160., 12276., 13392., 15912., 17136., 18360.,
      19584., 738.,   1476.,  2214.,  2952.,  4140.,  4968.,  5796.,  6624.,
      8262.,  9180.,  10098., 11016., 13104., 14112., 15120., 16128., 609.,
      1218.,  1827.,  2436.,  3570.,  4284.,  4998.,  5712.,  7371.,  8190.,
      9009.,  9828.,  12012., 12936., 13860., 14784., 714.,   1428.,  2142.,
      2856.,  4200.,  5040.,  5880.,  6720.,  8694.,  9660.,  10626., 11592.,
      14196., 15288., 16380., 17472., 903.,   1806.,  2709.,  3612.,  5250.,
      6300.,  7350.,  8400.,  10773., 11970., 13167., 14364., 17472., 18816.,
      20160., 21504., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1155.,  2310.,  3465.,  4620.,  6510.,  7812.,  9114.,  10416., 13041.,
      14490., 15939., 17388., 20748., 22344., 23940., 25536., 1050.,  2100.,
      3150.,  4200.,  5880.,  7056.,  8232.,  9408.,  11718., 13020., 14322.,
      15624., 18564., 19992., 21420., 22848., 861.,   1722.,  2583.,  3444.,
      4830.,  5796.,  6762.,  7728.,  9639.,  10710., 11781., 12852., 15288.,
      16464., 17640., 18816., 696.,   1392.,  2088.,  2784.,  4080.,  4896.,
      5712.,  6528.,  8424.,  9360.,  10296., 11232., 13728., 14784., 15840.,
      16896., 816.,   1632.,  2448.,  3264.,  4800.,  5760.,  6720.,  7680.,
      9936.,  11040., 12144., 13248., 16224., 17472., 18720., 19968., 1032.,
      2064.,  3096.,  4128.,  6000.,  7200.,  8400.,  9600.,  12312., 13680.,
      15048., 16416., 19968., 21504., 23040., 24576., 1344.,  2688.,  4032.,
      5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736.,
      24960., 26880., 28800., 30720., 1320.,  2640.,  3960.,  5280.,  7440.,
      8928.,  10416., 11904., 14904., 16560., 18216., 19872., 23712., 25536.,
      27360., 29184., 1200.,  2400.,  3600.,  4800.,  6720.,  8064.,  9408.,
      10752., 13392., 14880., 16368., 17856., 21216., 22848., 24480., 26112.,
      984.,   1968.,  2952.,  3936.,  5520.,  6624.,  7728.,  8832.,  11016.,
      12240., 13464., 14688., 17472., 18816., 20160., 21504., 609.,   1218.,
      1827.,  2436.,  3570.,  4284.,  4998.,  5712.,  7371.,  8190.,  9009.,
      9828.,  12012., 12936., 13860., 14784., 714.,   1428.,  2142.,  2856.,
      4200.,  5040.,  5880.,  6720.,  8694.,  9660.,  10626., 11592., 14196.,
      15288., 16380., 17472., 903.,   1806.,  2709.,  3612.,  5250.,  6300.,
      7350.,  8400.,  10773., 11970., 13167., 14364., 17472., 18816., 20160.,
      21504., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752.,
      13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880., 1155.,
      2310.,  3465.,  4620.,  6510.,  7812.,  9114.,  10416., 13041., 14490.,
      15939., 17388., 20748., 22344., 23940., 25536., 1050.,  2100.,  3150.,
      4200.,  5880.,  7056.,  8232.,  9408.,  11718., 13020., 14322., 15624.,
      18564., 19992., 21420., 22848., 861.,   1722.,  2583.,  3444.,  4830.,
      5796.,  6762.,  7728.,  9639.,  10710., 11781., 12852., 15288., 16464.,
      17640., 18816., 522.,   1044.,  1566.,  2088.,  3060.,  3672.,  4284.,
      4896.,  6318.,  7020.,  7722.,  8424.,  10296., 11088., 11880., 12672.,
      612.,   1224.,  1836.,  2448.,  3600.,  4320.,  5040.,  5760.,  7452.,
      8280.,  9108.,  9936.,  12168., 13104., 14040., 14976., 774.,   1548.,
      2322.,  3096.,  4500.,  5400.,  6300.,  7200.,  9234.,  10260., 11286.,
      12312., 14976., 16128., 17280., 18432., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 990.,   1980.,  2970.,  3960.,  5580.,  6696.,
      7812.,  8928.,  11178., 12420., 13662., 14904., 17784., 19152., 20520.,
      21888., 900.,   1800.,  2700.,  3600.,  5040.,  6048.,  7056.,  8064.,
      10044., 11160., 12276., 13392., 15912., 17136., 18360., 19584., 738.,
      1476.,  2214.,  2952.,  4140.,  4968.,  5796.,  6624.,  8262.,  9180.,
      10098., 11016., 13104., 14112., 15120., 16128., 435.,   870.,   1305.,
      1740.,  2550.,  3060.,  3570.,  4080.,  5265.,  5850.,  6435.,  7020.,
      8580.,  9240.,  9900.,  10560., 510.,   1020.,  1530.,  2040.,  3000.,
      3600.,  4200.,  4800.,  6210.,  6900.,  7590.,  8280.,  10140., 10920.,
      11700., 12480., 645.,   1290.,  1935.,  2580.,  3750.,  4500.,  5250.,
      6000.,  7695.,  8550.,  9405.,  10260., 12480., 13440., 14400., 15360.,
      840.,   1680.,  2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,
      10800., 11880., 12960., 15600., 16800., 18000., 19200., 825.,   1650.,
      2475.,  3300.,  4650.,  5580.,  6510.,  7440.,  9315.,  10350., 11385.,
      12420., 14820., 15960., 17100., 18240., 750.,   1500.,  2250.,  3000.,
      4200.,  5040.,  5880.,  6720.,  8370.,  9300.,  10230., 11160., 13260.,
      14280., 15300., 16320., 615.,   1230.,  1845.,  2460.,  3450.,  4140.,
      4830.,  5520.,  6885.,  7650.,  8415.,  9180.,  10920., 11760., 12600.,
      13440.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8964.,  9192.,  9420.,  9648.,  10224., 10464., 10704., 10944., 11580.,
      11832., 12084., 12336., 13032., 13296., 13560., 13824., 10164., 10440.,
      10716., 10992., 11616., 11904., 12192., 12480., 13164., 13464., 13764.,
      14064., 14808., 15120., 15432., 15744., 11364., 11688., 12012., 12336.,
      13008., 13344., 13680., 14016., 14748., 15096., 15444., 15792., 16584.,
      16944., 17304., 17664., 12564., 12936., 13308., 13680., 14400., 14784.,
      15168., 15552., 16332., 16728., 17124., 17520., 18360., 18768., 19176.,
      19584., 13764., 14184., 14604., 15024., 15792., 16224., 16656., 17088.,
      17916., 18360., 18804., 19248., 20136., 20592., 21048., 21504., 14964.,
      15432., 15900., 16368., 17184., 17664., 18144., 18624., 19500., 19992.,
      20484., 20976., 21912., 22416., 22920., 23424., 16164., 16680., 17196.,
      17712., 18576., 19104., 19632., 20160., 21084., 21624., 22164., 22704.,
      23688., 24240., 24792., 25344., 2820.,  3048.,  3276.,  3504.,  4080.,
      4320.,  4560.,  4800.,  5436.,  5688.,  5940.,  6192.,  6888.,  7152.,
      7416.,  7680.,  4020.,  4296.,  4572.,  4848.,  5472.,  5760.,  6048.,
      6336.,  7020.,  7320.,  7620.,  7920.,  8664.,  8976.,  9288.,  9600.,
      5220.,  5544.,  5868.,  6192.,  6864.,  7200.,  7536.,  7872.,  8604.,
      8952.,  9300.,  9648.,  10440., 10800., 11160., 11520., 6420.,  6792.,
      7164.,  7536.,  8256.,  8640.,  9024.,  9408.,  10188., 10584., 10980.,
      11376., 12216., 12624., 13032., 13440., 7620.,  8040.,  8460.,  8880.,
      9648.,  10080., 10512., 10944., 11772., 12216., 12660., 13104., 13992.,
      14448., 14904., 15360., 8820.,  9288.,  9756.,  10224., 11040., 11520.,
      12000., 12480., 13356., 13848., 14340., 14832., 15768., 16272., 16776.,
      17280., 10020., 10536., 11052., 11568., 12432., 12960., 13488., 14016.,
      14940., 15480., 16020., 16560., 17544., 18096., 18648., 19200., 8964.,
      9192.,  9420.,  9648.,  10224., 10464., 10704., 10944., 11580., 11832.,
      12084., 12336., 13032., 13296., 13560., 13824., 10164., 10440., 10716.,
      10992., 11616., 11904., 12192., 12480., 13164., 13464., 13764., 14064.,
      14808., 15120., 15432., 15744., 11364., 11688., 12012., 12336., 13008.,
      13344., 13680., 14016., 14748., 15096., 15444., 15792., 16584., 16944.,
      17304., 17664., 12564., 12936., 13308., 13680., 14400., 14784., 15168.,
      15552., 16332., 16728., 17124., 17520., 18360., 18768., 19176., 19584.,
      13764., 14184., 14604., 15024., 15792., 16224., 16656., 17088., 17916.,
      18360., 18804., 19248., 20136., 20592., 21048., 21504., 14964., 15432.,
      15900., 16368., 17184., 17664., 18144., 18624., 19500., 19992., 20484.,
      20976., 21912., 22416., 22920., 23424., 16164., 16680., 17196., 17712.,
      18576., 19104., 19632., 20160., 21084., 21624., 22164., 22704., 23688.,
      24240., 24792., 25344., 2820.,  3048.,  3276.,  3504.,  4080.,  4320.,
      4560.,  4800.,  5436.,  5688.,  5940.,  6192.,  6888.,  7152.,  7416.,
      7680.,  4020.,  4296.,  4572.,  4848.,  5472.,  5760.,  6048.,  6336.,
      7020.,  7320.,  7620.,  7920.,  8664.,  8976.,  9288.,  9600.,  5220.,
      5544.,  5868.,  6192.,  6864.,  7200.,  7536.,  7872.,  8604.,  8952.,
      9300.,  9648.,  10440., 10800., 11160., 11520., 6420.,  6792.,  7164.,
      7536.,  8256.,  8640.,  9024.,  9408.,  10188., 10584., 10980., 11376.,
      12216., 12624., 13032., 13440., 7620.,  8040.,  8460.,  8880.,  9648.,
      10080., 10512., 10944., 11772., 12216., 12660., 13104., 13992., 14448.,
      14904., 15360., 8820.,  9288.,  9756.,  10224., 11040., 11520., 12000.,
      12480., 13356., 13848., 14340., 14832., 15768., 16272., 16776., 17280.,
      10020., 10536., 11052., 11568., 12432., 12960., 13488., 14016., 14940.,
      15480., 16020., 16560., 17544., 18096., 18648., 19200., 8964.,  9192.,
      9420.,  9648.,  10224., 10464., 10704., 10944., 11580., 11832., 12084.,
      12336., 13032., 13296., 13560., 13824., 10164., 10440., 10716., 10992.,
      11616., 11904., 12192., 12480., 13164., 13464., 13764., 14064., 14808.,
      15120., 15432., 15744., 11364., 11688., 12012., 12336., 13008., 13344.,
      13680., 14016., 14748., 15096., 15444., 15792., 16584., 16944., 17304.,
      17664., 12564., 12936., 13308., 13680., 14400., 14784., 15168., 15552.,
      16332., 16728., 17124., 17520., 18360., 18768., 19176., 19584., 13764.,
      14184., 14604., 15024., 15792., 16224., 16656., 17088., 17916., 18360.,
      18804., 19248., 20136., 20592., 21048., 21504., 14964., 15432., 15900.,
      16368., 17184., 17664., 18144., 18624., 19500., 19992., 20484., 20976.,
      21912., 22416., 22920., 23424., 16164., 16680., 17196., 17712., 18576.,
      19104., 19632., 20160., 21084., 21624., 22164., 22704., 23688., 24240.,
      24792., 25344., 2820.,  3048.,  3276.,  3504.,  4080.,  4320.,  4560.,
      4800.,  5436.,  5688.,  5940.,  6192.,  6888.,  7152.,  7416.,  7680.,
      4020.,  4296.,  4572.,  4848.,  5472.,  5760.,  6048.,  6336.,  7020.,
      7320.,  7620.,  7920.,  8664.,  8976.,  9288.,  9600.,  5220.,  5544.,
      5868.,  6192.,  6864.,  7200.,  7536.,  7872.,  8604.,  8952.,  9300.,
      9648.,  10440., 10800., 11160., 11520., 6420.,  6792.,  7164.,  7536.,
      8256.,  8640.,  9024.,  9408.,  10188., 10584., 10980., 11376., 12216.,
      12624., 13032., 13440., 7620.,  8040.,  8460.,  8880.,  9648.,  10080.,
      10512., 10944., 11772., 12216., 12660., 13104., 13992., 14448., 14904.,
      15360., 8820.,  9288.,  9756.,  10224., 11040., 11520., 12000., 12480.,
      13356., 13848., 14340., 14832., 15768., 16272., 16776., 17280., 10020.,
      10536., 11052., 11568., 12432., 12960., 13488., 14016., 14940., 15480.,
      16020., 16560., 17544., 18096., 18648., 19200., 8964.,  9192.,  9420.,
      9648.,  10224., 10464., 10704., 10944., 11580., 11832., 12084., 12336.,
      13032., 13296., 13560., 13824., 10164., 10440., 10716., 10992., 11616.,
      11904., 12192., 12480., 13164., 13464., 13764., 14064., 14808., 15120.,
      15432., 15744., 11364., 11688., 12012., 12336., 13008., 13344., 13680.,
      14016., 14748., 15096., 15444., 15792., 16584., 16944., 17304., 17664.,
      12564., 12936., 13308., 13680., 14400., 14784., 15168., 15552., 16332.,
      16728., 17124., 17520., 18360., 18768., 19176., 19584., 13764., 14184.,
      14604., 15024., 15792., 16224., 16656., 17088., 17916., 18360., 18804.,
      19248., 20136., 20592., 21048., 21504., 14964., 15432., 15900., 16368.,
      17184., 17664., 18144., 18624., 19500., 19992., 20484., 20976., 21912.,
      22416., 22920., 23424., 16164., 16680., 17196., 17712., 18576., 19104.,
      19632., 20160., 21084., 21624., 22164., 22704., 23688., 24240., 24792.,
      25344.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7039.,  7680.,  8068.,  8556.,  7484.,  6502.,  5625.,  6718.,  8383.,
      10248., 12663., 11976., 11415., 8694.,  8711.,  9682.,  10532., 11608.,
      10332., 9224.,  8097.,  10248., 12948., 15968., 19652., 15968., 12948.,
      10248., 8097.,  9224.,  10332., 11608., 10532., 9682.,  8711.,  8694.,
      11415., 11976., 12663., 10248., 8383.,  6718.,  5625.,  6502.,  7484.,
      8556.,  8068.,  7680.,  7039.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18741., 18912., 19083., 19254., 19425., 19596., 19767., 20280., 20451.,
      20622., 20793., 20964., 21135., 21306., 21819., 21990., 22161., 22332.,
      22503., 22674., 22845., 23358., 23529., 23700., 23871., 24042., 24213.,
      24384., 24897., 25068., 25239., 25410., 25581., 25752., 25923., 26436.,
      26607., 26778., 26949., 27120., 27291., 27462., 27975., 28146., 28317.,
      28488., 28659., 28830., 29001.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5759.,  6526.,  6498.,  7392.,  7452.,  8456.,  8799.,  9912.,  7940.,
      8952.,  7388.,  8284.,  7173.,  7938.,  6516.,  7436.,  7587.,  8654.,
      8880.,  10080., 10791., 12126., 10080., 11280., 9783.,  10830., 7632.,
      8508.,  7739.,  8814.,  9231.,  10484., 11180., 12600., 13688., 15280.,
      13156., 14584., 10581., 11824., 8421.,  9474.,  8880.,  10080., 10940.,
      12344., 13440., 15040., 16700., 18504., 13504., 15104., 11020., 12424.,
      9024.,  10224., 8145.,  9234.,  10336., 11600., 13220., 14648., 13443.,
      15056., 11036., 12456., 9326.,  10564., 7859.,  8910.,  7260.,  8172.,
      9783.,  10830., 10128., 11328., 10563., 11934., 9024.,  10224., 7883.,
      8926.,  6968.,  7852.,  7317.,  8082.,  7563.,  8444.,  7892.,  8904.,
      8274.,  9432.,  7292.,  8296.,  6669.,  7536.,  6003.,  6734.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36069., 37482., 36393., 37824., 36717., 38166., 37041., 38508., 37365.,
      38850., 37689., 39192., 38013., 39534., 38985., 40560., 39309., 40902.,
      39633., 41244., 39957., 41586., 40281., 41928., 40605., 42270., 40929.,
      42612., 41901., 43638., 42225., 43980., 42549., 44322., 42873., 44664.,
      43197., 45006., 43521., 45348., 43845., 45690., 44817., 46716., 45141.,
      47058., 45465., 47400., 45789., 47742., 46113., 48084., 46437., 48426.,
      46761., 48768., 47733., 49794., 48057., 50136., 48381., 50478., 48705.,
      50820., 49029., 51162., 49353., 51504., 49677., 51846., 50649., 52872.,
      50973., 53214., 51297., 53556., 51621., 53898., 51945., 54240., 52269.,
      54582., 52593., 54924., 53565., 55950., 53889., 56292., 54213., 56634.,
      54537., 56976., 54861., 57318., 55185., 57660., 55509., 58002.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5391.,  6158.,  6925.,  7692.,  6342.,  7236.,  8130.,  9024.,  7660.,
      8664.,  9668.,  10672., 7845.,  8958.,  10071., 11184., 6708.,  7720.,
      8732.,  9744.,  6120.,  7016.,  7912.,  8808.,  5917.,  6682.,  7447.,
      8212.,  6608.,  7528.,  8448.,  9368.,  8123.,  9190.,  10257., 11324.,
      8176.,  9376.,  10576., 11776., 9079.,  10414., 11749., 13084., 8272.,
      9472.,  10672., 11872., 8055.,  9102.,  10149., 11196., 6228.,  7104.,
      7980.,  8856.,  8163.,  9238.,  10313., 11388., 8569.,  9822.,  11075.,
      12328., 9516.,  10936., 12356., 13776., 11192., 12784., 14376., 15968.,
      10772., 12200., 13628., 15056., 8671.,  9914.,  11157., 12400., 7101.,
      8154.,  9207.,  10260., 8176.,  9376.,  10576., 11776., 9308.,  10712.,
      12116., 13520., 10944., 12544., 14144., 15744., 13708., 15512., 17316.,
      19120., 11072., 12672., 14272., 15872., 9340.,  10744., 12148., 13552.,
      8336.,  9536.,  10736., 11936., 7041.,  8130.,  9219.,  10308., 8464.,
      9728.,  10992., 12256., 10900., 12328., 13756., 15184., 10985., 12598.,
      14211., 15824., 9356.,  10776., 12196., 13616., 8550.,  9788.,  11026.,
      12264., 7931.,  8982.,  10033., 11084., 5976.,  6888.,  7800.,  8712.,
      8055.,  9102.,  10149., 11196., 8240.,  9440.,  10640., 11840., 8987.,
      10358., 11729., 13100., 8336.,  9536.,  10736., 11936., 7859.,  8902.,
      9945.,  10988., 5948.,  6832.,  7716.,  8600.,  6077.,  6842.,  7607.,
      8372.,  6133.,  7014.,  7895.,  8776.,  6740.,  7752.,  8764.,  9776.,
      7806.,  8964.,  10122., 11280., 7596.,  8600.,  9604.,  10608., 5895.,
      6762.,  7629.,  8496.,  4699.,  5430.,  6161.,  6892.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25413., 26058., 26703., 27348., 26043., 26706., 27369., 28032., 26673.,
      27354., 28035., 28716., 27303., 28002., 28701., 29400., 27933., 28650.,
      29367., 30084., 28563., 29298., 30033., 30768., 29193., 29946., 30699.,
      31452., 31083., 31890., 32697., 33504., 31713., 32538., 33363., 34188.,
      32343., 33186., 34029., 34872., 32973., 33834., 34695., 35556., 33603.,
      34482., 35361., 36240., 34233., 35130., 36027., 36924., 34863., 35778.,
      36693., 37608., 36753., 37722., 38691., 39660., 37383., 38370., 39357.,
      40344., 38013., 39018., 40023., 41028., 38643., 39666., 40689., 41712.,
      39273., 40314., 41355., 42396., 39903., 40962., 42021., 43080., 40533.,
      41610., 42687., 43764., 42423., 43554., 44685., 45816., 43053., 44202.,
      45351., 46500., 43683., 44850., 46017., 47184., 44313., 45498., 46683.,
      47868., 44943., 46146., 47349., 48552., 45573., 46794., 48015., 49236.,
      46203., 47442., 48681., 49920., 48093., 49386., 50679., 51972., 48723.,
      50034., 51345., 52656., 49353., 50682., 52011., 53340., 49983., 51330.,
      52677., 54024., 50613., 51978., 53343., 54708., 51243., 52626., 54009.,
      55392., 51873., 53274., 54675., 56076., 48003., 49330., 50657., 51984.,
      43385., 44602., 45819., 47036., 39279., 40386., 41493., 42600., 39909.,
      41034., 42159., 43284., 40539., 41682., 42825., 43968., 41169., 42330.,
      43491., 44652., 41799., 42978., 44157., 45336., 39465., 40570., 41675.,
      42780., 36383., 37378., 38373., 39368., 33813., 34698., 35583., 36468.,
      34443., 35346., 36249., 37152., 35073., 35994., 36915., 37836., 35703.,
      36642., 37581., 38520., 36333., 37290., 38247., 39204.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5538.,  7068.,  5799.,  7584.,  6360.,  8400.,  7545.,  9840.,  7320.,
      9360.,  7455.,  9240.,  8010.,  9540.,  5964.,  7800.,  6654.,  8796.,
      7920.,  10368., 10074., 12828., 10224., 12672., 10878., 13020., 7500.,
      9336.,  6654.,  8796.,  8037.,  10536., 10248., 13104., 13587., 16800.,
      14280., 17136., 10269., 12768., 7494.,  9636.,  7920.,  10368., 10248.,
      13104., 13632., 16896., 18360., 22032., 13632., 16896., 10248., 13104.,
      7920.,  10368., 7494.,  9636.,  10269., 12768., 14280., 17136., 13587.,
      16800., 10248., 13104., 8037.,  10536., 6654.,  8796.,  7500.,  9336.,
      10878., 13020., 10224., 12672., 10074., 12828., 7920.,  10368., 6654.,
      8796.,  5964.,  7800.,  8010.,  9540.,  7455.,  9240.,  7320.,  9360.,
      7545.,  9840.,  6360.,  8400.,  5799.,  7584.,  5538.,  7068.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25734., 27348., 26382., 28032., 27030., 28716., 27678., 29400., 28326.,
      30084., 28974., 30768., 29622., 31452., 31566., 33504., 32214., 34188.,
      32862., 34872., 33510., 35556., 34158., 36240., 34806., 36924., 35454.,
      37608., 37398., 39660., 38046., 40344., 38694., 41028., 39342., 41712.,
      39990., 42396., 40638., 43080., 41286., 43764., 43230., 45816., 43878.,
      46500., 44526., 47184., 45174., 47868., 45822., 48552., 46470., 49236.,
      47118., 49920., 49062., 51972., 49710., 52656., 50358., 53340., 51006.,
      54024., 51654., 54708., 52302., 55392., 52950., 56076., 49006., 51984.,
      44278., 47036., 40062., 42600., 40710., 43284., 41358., 43968., 42006.,
      44652., 42654., 45336., 40246., 42780., 37054., 39368., 34374., 36468.,
      35022., 37152., 35670., 37836., 36318., 38520., 36966., 39204.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5088.,  5844.,  7434.,  8280.,  6123.,  6990.,  8820.,  9792.,  7920.,
      8880.,  10920., 12000., 7143.,  8178.,  10446., 11616., 6000.,  6960.,
      9000.,  10080., 5751.,  6606.,  8400.,  9360.,  6324.,  7044.,  8574.,
      9384.,  6420.,  7320.,  9216.,  10224., 8436.,  9468.,  11634., 12792.,
      7776.,  8928.,  11376., 12672., 8136.,  9396.,  12138., 13560., 7776.,
      8928.,  11376., 12672., 8508.,  9516.,  11658., 12792., 5676.,  6504.,
      8328.,  9264.,  8436.,  9468.,  11634., 12792., 7971.,  9162.,  11670.,
      13008., 8400.,  9744.,  12600., 14112., 10323., 11814., 15024., 16704.,
      11088., 12432., 15288., 16800., 7815.,  8970.,  11466., 12768., 6144.,
      7116.,  9246.,  10344., 7776.,  8928.,  11376., 12672., 8400.,  9744.,
      12600., 14112., 10368., 11904., 15168., 16896., 14256., 15984., 19656.,
      21600., 10368., 11904., 15168., 16896., 8400.,  9744.,  12600., 14112.,
      7776.,  8928.,  11376., 12672., 6264.,  7308.,  9462.,  10632., 7821.,
      9018.,  11520., 12864., 11088., 12432., 15288., 16800., 10329., 11862.,
      15078., 16800., 8400.,  9744.,  12600., 14112., 7857.,  9018.,  11508.,
      12816., 8100.,  9084.,  11202., 12312., 5796.,  6696.,  8544.,  9552.,
      8508.,  9516.,  11658., 12792., 7776.,  8928.,  11376., 12672., 8256.,
      9588.,  12354., 13848., 7776.,  8928.,  11376., 12672., 8100.,  9084.,
      11202., 12312., 5532.,  6360.,  8136.,  9072.,  6324.,  7044.,  8574.,
      9384.,  5637.,  6462.,  8238.,  9168.,  6000.,  6960.,  9000.,  10080.,
      7485.,  8610.,  10932., 12192., 7920.,  8880.,  10920., 12000., 5457.,
      6270.,  8010.,  8928.,  4200.,  4884.,  6354.,  7128.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16404., 16908., 17950., 18472., 17408., 17948., 19026., 19584., 18412.,
      18988., 20102., 20696., 19416., 20028., 21178., 21808., 20420., 21068.,
      22254., 22920., 21104., 21724., 22882., 23520., 22044., 22636., 23766.,
      24376., 21152., 21788., 22962., 23616., 22156., 22828., 24038., 24728.,
      23160., 23868., 25114., 25840., 24164., 24908., 26190., 26952., 22288.,
      23004., 24258., 24992., 17020., 17644., 18806., 19448., 12264., 12796.,
      13866., 14416., 12140., 12716., 13830., 14424., 13144., 13756., 14906.,
      15536., 14148., 14796., 15982., 16648., 13808., 14428., 15586., 16224.,
      11612., 12140., 13206., 13752., 9928.,  10364., 11338., 11792., 9332.,
      9740.,  10686., 11112., 12344., 12860., 13914., 14448., 13348., 13900.,
      14990., 15560., 14352., 14940., 16066., 16672., 14780., 15340., 16438.,
      17016., 15464., 15996., 17066., 17616., 16404., 16908., 17950., 18472.,
      17408., 17948., 19026., 19584., 20420., 21068., 22254., 22920., 21104.,
      21724., 22882., 23520., 22044., 22636., 23766., 24376., 19144., 19708.,
      20810., 21392., 20148., 20748., 21886., 22504., 21152., 21788., 22962.,
      23616., 22156., 22828., 24038., 24728., 22288., 23004., 24258., 24992.,
      17020., 17644., 18806., 19448., 12264., 12796., 13866., 14416., 10132.,
      10636., 11678., 12200., 11136., 11676., 12754., 13312., 12140., 12716.,
      13830., 14424., 13144., 13756., 14906., 15536., 11612., 12140., 13206.,
      13752., 9928.,  10364., 11338., 11792., 9332.,  9740.,  10686., 11112.,
      10336., 10780., 11762., 12224., 11340., 11820., 12838., 13336., 12344.,
      12860., 13914., 14448., 13348., 13900., 14990., 15560.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4044.,  4800.,  5556.,  6312.,  7878.,  8724.,  9570.,  10416., 4083.,
      4950.,  5817.,  6684.,  8508.,  9480.,  10452., 11424., 5280.,  6240.,
      7200.,  8160.,  10200., 11280., 12360., 13440., 4755.,  5790.,  6825.,
      7860.,  10122., 11292., 12462., 13632., 5280.,  6240.,  7200.,  8160.,
      10200., 11280., 12360., 13440., 3879.,  4734.,  5589.,  6444.,  8256.,
      9216.,  10176., 11136., 4104.,  4824.,  5544.,  6264.,  7794.,  8604.,
      9414.,  10224., 4116.,  5016.,  5916.,  6816.,  8688.,  9696.,  10704.,
      11712., 5616.,  6648.,  7680.,  8712.,  10878., 12036., 13194., 14352.,
      5184.,  6336.,  7488.,  8640.,  11088., 12384., 13680., 14976., 6948.,
      8208.,  9468.,  10728., 13446., 14868., 16290., 17712., 5184.,  6336.,
      7488.,  8640.,  11088., 12384., 13680., 14976., 5688.,  6696.,  7704.,
      8712.,  10854., 11988., 13122., 14256., 3564.,  4392.,  5220.,  6048.,
      7848.,  8784.,  9720.,  10656., 5616.,  6648.,  7680.,  8712.,  10878.,
      12036., 13194., 14352., 5535.,  6726.,  7917.,  9108.,  11634., 12972.,
      14310., 15648., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304.,
      18816., 6867.,  8358.,  9849.,  11340., 14544., 16224., 17904., 19584.,
      7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816., 5211.,
      6366.,  7521.,  8676.,  11166., 12468., 13770., 15072., 5364.,  6336.,
      7308.,  8280.,  10386., 11484., 12582., 13680., 5184.,  6336.,  7488.,
      8640.,  11088., 12384., 13680., 14976., 7392.,  8736.,  10080., 11424.,
      14280., 15792., 17304., 18816., 6912.,  8448.,  9984.,  11520., 14784.,
      16512., 18240., 19968., 9504.,  11232., 12960., 14688., 18360., 20304.,
      22248., 24192., 6912.,  8448.,  9984.,  11520., 14784., 16512., 18240.,
      19968., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      5184.,  6336.,  7488.,  8640.,  11088., 12384., 13680., 14976., 5724.,
      6768.,  7812.,  8856.,  11034., 12204., 13374., 14544., 5229.,  6426.,
      7623.,  8820.,  11328., 12672., 14016., 15360., 7392.,  8736.,  10080.,
      11424., 14280., 15792., 17304., 18816., 6885.,  8418.,  9951.,  11484.,
      14706., 16428., 18150., 19872., 7392.,  8736.,  10080., 11424., 14280.,
      15792., 17304., 18816., 5193.,  6354.,  7515.,  8676.,  11148., 12456.,
      13764., 15072., 5376.,  6360.,  7344.,  8328.,  10446., 11556., 12666.,
      13776., 3924.,  4824.,  5724.,  6624.,  8496.,  9504.,  10512., 11520.,
      5688.,  6696.,  7704.,  8712.,  10854., 11988., 13122., 14256., 5184.,
      6336.,  7488.,  8640.,  11088., 12384., 13680., 14976., 7308.,  8640.,
      9972.,  11304., 14094., 15588., 17082., 18576., 5184.,  6336.,  7488.,
      8640.,  11088., 12384., 13680., 14976., 5376.,  6360.,  7344.,  8328.,
      10446., 11556., 12666., 13776., 3756.,  4584.,  5412.,  6240.,  8040.,
      8976.,  9912.,  10848., 4104.,  4824.,  5544.,  6264.,  7794.,  8604.,
      9414.,  10224., 3537.,  4362.,  5187.,  6012.,  7770.,  8700.,  9630.,
      10560., 5280.,  6240.,  7200.,  8160.,  10200., 11280., 12360., 13440.,
      5013.,  6138.,  7263.,  8388.,  10716., 11976., 13236., 14496., 5280.,
      6240.,  7200.,  8160.,  10200., 11280., 12360., 13440., 3621.,  4434.,
      5247.,  6060.,  7806.,  8724.,  9642.,  10560., 3684.,  4368.,  5052.,
      5736.,  7230.,  8004.,  8778.,  9552.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13872., 14376., 14880., 15384., 16434., 16956., 17478., 18000., 14820.,
      15360., 15900., 16440., 17526., 18084., 18642., 19200., 15768., 16344.,
      16920., 17496., 18618., 19212., 19806., 20400., 16716., 17328., 17940.,
      18552., 19710., 20340., 20970., 21600., 17664., 18312., 18960., 19608.,
      20802., 21468., 22134., 22800., 18036., 18656., 19276., 19896., 21062.,
      21700., 22338., 22976., 18920., 19512., 20104., 20696., 21834., 22444.,
      23054., 23664., 18116., 18752., 19388., 20024., 21206., 21860., 22514.,
      23168., 19064., 19736., 20408., 21080., 22298., 22988., 23678., 24368.,
      20012., 20720., 21428., 22136., 23390., 24116., 24842., 25568., 20960.,
      21704., 22448., 23192., 24482., 25244., 26006., 26768., 20308., 21024.,
      21740., 22456., 23718., 24452., 25186., 25920., 17032., 17656., 18280.,
      18904., 20074., 20716., 21358., 22000., 14780., 15312., 15844., 16376.,
      17454., 18004., 18554., 19104., 15512., 16088., 16664., 17240., 18362.,
      18956., 19550., 20144., 16460., 17072., 17684., 18296., 19454., 20084.,
      20714., 21344., 17408., 18056., 18704., 19352., 20546., 21212., 21878.,
      22544., 15732., 16352., 16972., 17592., 18758., 19396., 20034., 20672.,
      14504., 15032., 15560., 16088., 17162., 17708., 18254., 18800., 10204.,
      10640., 11076., 11512., 12494., 12948., 13402., 13856., 8016.,  8424.,
      8832.,  9240.,  10194., 10620., 11046., 11472., 10860., 11376., 11892.,
      12408., 13470., 14004., 14538., 15072., 11808., 12360., 12912., 13464.,
      14562., 15132., 15702., 16272., 12756., 13344., 13932., 14520., 15654.,
      16260., 16866., 17472., 12616., 13176., 13736., 14296., 15402., 15980.,
      16558., 17136., 12988., 13520., 14052., 14584., 15662., 16212., 16762.,
      17312., 13872., 14376., 14880., 15384., 16434., 16956., 17478., 18000.,
      14820., 15360., 15900., 16440., 17526., 18084., 18642., 19200., 17664.,
      18312., 18960., 19608., 20802., 21468., 22134., 22800., 18036., 18656.,
      19276., 19896., 21062., 21700., 22338., 22976., 18920., 19512., 20104.,
      20696., 21834., 22444., 23054., 23664., 16220., 16784., 17348., 17912.,
      19022., 19604., 20186., 20768., 17168., 17768., 18368., 18968., 20114.,
      20732., 21350., 21968., 18116., 18752., 19388., 20024., 21206., 21860.,
      22514., 23168., 19064., 19736., 20408., 21080., 22298., 22988., 23678.,
      24368., 20308., 21024., 21740., 22456., 23718., 24452., 25186., 25920.,
      17032., 17656., 18280., 18904., 20074., 20716., 21358., 22000., 14780.,
      15312., 15844., 16376., 17454., 18004., 18554., 19104., 13616., 14120.,
      14624., 15128., 16178., 16700., 17222., 17744., 14564., 15104., 15644.,
      16184., 17270., 17828., 18386., 18944., 15512., 16088., 16664., 17240.,
      18362., 18956., 19550., 20144., 16460., 17072., 17684., 18296., 19454.,
      20084., 20714., 21344., 14504., 15032., 15560., 16088., 17162., 17708.,
      18254., 18800., 10204., 10640., 11076., 11512., 12494., 12948., 13402.,
      13856., 8016.,  8424.,  8832.,  9240.,  10194., 10620., 11046., 11472.,
      8964.,  9408.,  9852.,  10296., 11286., 11748., 12210., 12672., 9912.,
      10392., 10872., 11352., 12378., 12876., 13374., 13872., 10860., 11376.,
      11892., 12408., 13470., 14004., 14538., 15072., 11808., 12360., 12912.,
      13464., 14562., 15132., 15702., 16272.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3330.,  4680.,  6210.,  7920.,  4821.,  6396.,  8181.,  10176., 8280.,
      10080., 12120., 14400., 5979.,  8004.,  10299., 12864., 4440.,  6240.,
      8280.,  10560., 4725.,  6300.,  8085.,  10080., 6306.,  7656.,  9186.,
      10896., 4956.,  6576.,  8412.,  10464., 8598.,  10488., 12630., 15024.,
      6480.,  8640.,  11088., 13824., 5994.,  8424.,  11178., 14256., 6480.,
      8640.,  11088., 13824., 8790.,  10680., 12822., 15216., 4764.,  6384.,
      8220.,  10272., 8598.,  10488., 12630., 15024., 6615.,  8820.,  11319.,
      14112., 6216.,  8736.,  11592., 14784., 8601.,  11436., 14649., 18240.,
      11592., 14112., 16968., 20160., 6519.,  8724.,  11223., 14016., 4662.,
      6552.,  8694.,  11088., 6480.,  8640.,  11088., 13824., 6216.,  8736.,
      11592., 14784., 8640.,  11520., 14784., 18432., 14904., 18144., 21816.,
      25920., 8640.,  11520., 14784., 18432., 6216.,  8736.,  11592., 14784.,
      6480.,  8640.,  11088., 13824., 4662.,  6552.,  8694.,  11088., 6519.,
      8724.,  11223., 14016., 11592., 14112., 16968., 20160., 8601.,  11436.,
      14649., 18240., 6216.,  8736.,  11592., 14784., 6615.,  8820.,  11319.,
      14112., 8598.,  10488., 12630., 15024., 4764.,  6384.,  8220.,  10272.,
      8790.,  10680., 12822., 15216., 6480.,  8640.,  11088., 13824., 5994.,
      8424.,  11178., 14256., 6480.,  8640.,  11088., 13824., 8598.,  10488.,
      12630., 15024., 4956.,  6576.,  8412.,  10464., 6306.,  7656.,  9186.,
      10896., 4725.,  6300.,  8085.,  10080., 4440.,  6240.,  8280.,  10560.,
      5979.,  8004.,  10299., 12864., 8280.,  10080., 12120., 14400., 4821.,
      6396.,  8181.,  10176., 3330.,  4680.,  6210.,  7920.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      46002., 47640., 49314., 51024., 48522., 50232., 51978., 53760., 51042.,
      52824., 54642., 56496., 53562., 55416., 57306., 59232., 56082., 58008.,
      59970., 61968., 49770., 51640., 53546., 55488., 43970., 45784., 47634.,
      49520., 43722., 45624., 47562., 49536., 46242., 48216., 50226., 52272.,
      48762., 50808., 52890., 55008., 51282., 53400., 55554., 57744., 48042.,
      50104., 52202., 54336., 38018., 39896., 41810., 43760., 29018., 30712.,
      32442., 34208., 30306., 32088., 33906., 35760., 32826., 34680., 36570.,
      38496., 35346., 37272., 39234., 41232., 35178., 37048., 38954., 40896.,
      31298., 32984., 34706., 36464., 28442., 29944., 31482., 33056., 27762.,
      29208., 30690., 32208., 35322., 36984., 38682., 40416., 37842., 39576.,
      41346., 43152., 40362., 42168., 44010., 45888., 41730., 43480., 45266.,
      47088., 43610., 45304., 47034., 48800., 46002., 47640., 49314., 51024.,
      48522., 50232., 51978., 53760., 56082., 58008., 59970., 61968., 49770.,
      51640., 53546., 55488., 43970., 45784., 47634., 49520., 38682., 40440.,
      42234., 44064., 41202., 43032., 44898., 46800., 43722., 45624., 47562.,
      49536., 46242., 48216., 50226., 52272., 48042., 50104., 52202., 54336.,
      38018., 39896., 41810., 43760., 29018., 30712., 32442., 34208., 25266.,
      26904., 28578., 30288., 27786., 29496., 31242., 33024., 30306., 32088.,
      33906., 35760., 32826., 34680., 36570., 38496., 31298., 32984., 34706.,
      36464., 28442., 29944., 31482., 33056., 27762., 29208., 30690., 32208.,
      30282., 31800., 33354., 34944., 32802., 34392., 36018., 37680., 35322.,
      36984., 38682., 40416., 37842., 39576., 41346., 43152.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3750.,  4356.,  5592.,  6288.,  7794.,  8580.,  10356., 11232., 2877.,
      3594.,  5058.,  5880.,  7659.,  8586.,  10680., 11712., 5160.,  6000.,
      7680.,  8640.,  10680., 11760., 14160., 15360., 3591.,  4518.,  6402.,
      7464.,  9753.,  10950., 13644., 14976., 5160.,  6000.,  7680.,  8640.,
      10680., 11760., 14160., 15360., 2901.,  3642.,  5130.,  5976.,  7779.,
      8730.,  10848., 11904., 3966.,  4596.,  5856.,  6576.,  8106.,  8916.,
      10716., 11616., 2892.,  3624.,  5112.,  5952.,  7764.,  8712.,  10848.,
      11904., 5322.,  6204.,  7968.,  8976.,  11118., 12252., 14772., 16032.,
      3888.,  4896.,  6912.,  8064.,  10512., 11808., 14688., 16128., 6846.,
      7956.,  10200., 11472., 14202., 15636., 18852., 20448., 3888.,  4896.,
      6912.,  8064.,  10512., 11808., 14688., 16128., 5514.,  6396.,  8160.,
      9168.,  11310., 12444., 14964., 16224., 2700.,  3432.,  4920.,  5760.,
      7572.,  8520.,  10656., 11712., 5322.,  6204.,  7968.,  8976.,  11118.,
      12252., 14772., 16032., 4131.,  5166.,  7242.,  8424.,  10941., 12270.,
      15228., 16704., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824.,
      21504., 5145.,  6450.,  9090.,  10584., 13791., 15474., 19248., 21120.,
      7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504., 3915.,
      4926.,  6978.,  8136.,  10629., 11934., 14868., 16320., 5298.,  6156.,
      7896.,  8880.,  10998., 12108., 14604., 15840., 3888.,  4896.,  6912.,
      8064.,  10512., 11808., 14688., 16128., 7224.,  8400.,  10752., 12096.,
      14952., 16464., 19824., 21504., 5184.,  6528.,  9216.,  10752., 14016.,
      15744., 19584., 21504., 9288.,  10800., 13824., 15552., 19224., 21168.,
      25488., 27648., 5184.,  6528.,  9216.,  10752., 14016., 15744., 19584.,
      21504., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      3888.,  4896.,  6912.,  8064.,  10512., 11808., 14688., 16128., 5538.,
      6444.,  8232.,  9264.,  11430., 12588., 15132., 16416., 3927.,  4974.,
      7038.,  8232.,  10737., 12078., 15024., 16512., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 5157.,  6498.,  9150.,  10680.,
      13899., 15618., 19404., 21312., 7224.,  8400.,  10752., 12096., 14952.,
      16464., 19824., 21504., 3903.,  4926.,  6966.,  8136.,  10617., 11934.,
      14856., 16320., 5322.,  6204.,  7968.,  8976.,  11118., 12252., 14772.,
      16032., 2940.,  3720.,  5256.,  6144.,  8004.,  9000.,  11184., 12288.,
      5514.,  6396.,  8160.,  9168.,  11310., 12444., 14964., 16224., 3888.,
      4896.,  6912.,  8064.,  10512., 11808., 14688., 16128., 7086.,  8244.,
      10536., 11856., 14634., 16116., 19380., 21024., 3888.,  4896.,  6912.,
      8064.,  10512., 11808., 14688., 16128., 5322.,  6204.,  7968.,  8976.,
      11118., 12252., 14772., 16032., 3132.,  3912.,  5448.,  6336.,  8196.,
      9192.,  11376., 12480., 3966.,  4596.,  5856.,  6576.,  8106.,  8916.,
      10716., 11616., 2673.,  3402.,  4854.,  5688.,  7455.,  8394.,  10476.,
      11520., 5160.,  6000.,  7680.,  8640.,  10680., 11760., 14160., 15360.,
      3603.,  4566.,  6462.,  7560.,  9861.,  11094., 13800., 15168., 5160.,
      6000.,  7680.,  8640.,  10680., 11760., 14160., 15360., 2889.,  3642.,
      5118.,  5976.,  7767.,  8730.,  10836., 11904., 3990.,  4644.,  5928.,
      6672.,  8226.,  9060.,  10884., 11808.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11846., 12260., 13184., 13616., 14594., 15044., 16076., 16544., 13742.,
      14228., 15224., 15728., 16778., 17300., 18404., 18944., 15638., 16196.,
      17264., 17840., 18962., 19556., 20732., 21344., 17534., 18164., 19304.,
      19952., 21146., 21812., 23060., 23744., 19430., 20132., 21344., 22064.,
      23330., 24068., 25388., 26144., 18126., 18772., 19928., 20592., 21802.,
      22484., 23748., 24448., 17782., 18308., 19344., 19888., 20978., 21540.,
      22684., 23264., 11438., 11924., 12920., 13424., 14474., 14996., 16100.,
      16640., 13334., 13892., 14960., 15536., 16658., 17252., 18428., 19040.,
      15230., 15860., 17000., 17648., 18842., 19508., 20756., 21440., 17126.,
      17828., 19040., 19760., 21026., 21764., 23084., 23840., 17422., 18132.,
      19352., 20080., 21354., 22100., 23428., 24192., 14006., 14596., 15696.,
      16304., 17458., 18084., 19292., 19936., 12126., 12596., 13576., 14064.,
      15098., 15604., 16692., 17216., 15638., 16196., 17264., 17840., 18962.,
      19556., 20732., 21344., 17534., 18164., 19304., 19952., 21146., 21812.,
      23060., 23744., 19430., 20132., 21344., 22064., 23330., 24068., 25388.,
      26144., 18126., 18772., 19928., 20592., 21802., 22484., 23748., 24448.,
      17782., 18308., 19344., 19888., 20978., 21540., 22684., 23264., 10782.,
      11188., 12104., 12528., 13498., 13940., 14964., 15424., 9542.,  9956.,
      10880., 11312., 12290., 12740., 13772., 14240., 15230., 15860., 17000.,
      17648., 18842., 19508., 20756., 21440., 17126., 17828., 19040., 19760.,
      21026., 21764., 23084., 23840., 17422., 18132., 19352., 20080., 21354.,
      22100., 23428., 24192., 14006., 14596., 15696., 16304., 17458., 18084.,
      19292., 19936., 12126., 12596., 13576., 14064., 15098., 15604., 16692.,
      17216., 11846., 12260., 13184., 13616., 14594., 15044., 16076., 16544.,
      13742., 14228., 15224., 15728., 16778., 17300., 18404., 18944., 19430.,
      20132., 21344., 22064., 23330., 24068., 25388., 26144., 18126., 18772.,
      19928., 20592., 21802., 22484., 23748., 24448., 17782., 18308., 19344.,
      19888., 20978., 21540., 22684., 23264., 10782., 11188., 12104., 12528.,
      13498., 13940., 14964., 15424., 9542.,  9956.,  10880., 11312., 12290.,
      12740., 13772., 14240., 11438., 11924., 12920., 13424., 14474., 14996.,
      16100., 16640., 13334., 13892., 14960., 15536., 16658., 17252., 18428.,
      19040., 17422., 18132., 19352., 20080., 21354., 22100., 23428., 24192.,
      14006., 14596., 15696., 16304., 17458., 18084., 19292., 19936., 12126.,
      12596., 13576., 14064., 15098., 15604., 16692., 17216., 11846., 12260.,
      13184., 13616., 14594., 15044., 16076., 16544., 13742., 14228., 15224.,
      15728., 16778., 17300., 18404., 18944., 15638., 16196., 17264., 17840.,
      18962., 19556., 20732., 21344., 17534., 18164., 19304., 19952., 21146.,
      21812., 23060., 23744., 17782., 18308., 19344., 19888., 20978., 21540.,
      22684., 23264., 10782., 11188., 12104., 12528., 13498., 13940., 14964.,
      15424., 9542.,  9956.,  10880., 11312., 12290., 12740., 13772., 14240.,
      11438., 11924., 12920., 13424., 14474., 14996., 16100., 16640., 13334.,
      13892., 14960., 15536., 16658., 17252., 18428., 19040., 15230., 15860.,
      17000., 17648., 18842., 19508., 20756., 21440., 17126., 17828., 19040.,
      19760., 21026., 21764., 23084., 23840.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      606.,   1212.,  1818.,  2424.,  3480.,  4176.,  4872.,  5568.,  7074.,
      7860.,  8646.,  9432.,  11388., 12264., 13140., 14016., 717.,   1434.,
      2151.,  2868.,  4110.,  4932.,  5754.,  6576.,  8343.,  9270.,  10197.,
      11124., 13416., 14448., 15480., 16512., 840.,   1680.,  2520.,  3360.,
      4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880., 12960., 15600.,
      16800., 18000., 19200., 927.,   1854.,  2781.,  3708.,  5310.,  6372.,
      7434.,  8496.,  10773., 11970., 13167., 14364., 17316., 18648., 19980.,
      21312., 840.,   1680.,  2520.,  3360.,  4800.,  5760.,  6720.,  7680.,
      9720.,  10800., 11880., 12960., 15600., 16800., 18000., 19200., 741.,
      1482.,  2223.,  2964.,  4230.,  5076.,  5922.,  6768.,  8559.,  9510.,
      10461., 11412., 13728., 14784., 15840., 16896., 630.,   1260.,  1890.,
      2520.,  3600.,  4320.,  5040.,  5760.,  7290.,  8100.,  8910.,  9720.,
      11700., 12600., 13500., 14400., 732.,   1464.,  2196.,  2928.,  4200.,
      5040.,  5880.,  6720.,  8532.,  9480.,  10428., 11376., 13728., 14784.,
      15840., 16896., 882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,
      8064.,  10206., 11340., 12474., 13608., 16380., 17640., 18900., 20160.,
      1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664.,
      12960., 14256., 15552., 18720., 20160., 21600., 23040., 1110.,  2220.,
      3330.,  4440.,  6360.,  7632.,  8904.,  10176., 12906., 14340., 15774.,
      17208., 20748., 22344., 23940., 25536., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 882.,   1764.,  2646.,  3528.,  5040.,  6048.,
      7056.,  8064.,  10206., 11340., 12474., 13608., 16380., 17640., 18900.,
      20160., 732.,   1464.,  2196.,  2928.,  4200.,  5040.,  5880.,  6720.,
      8532.,  9480.,  10428., 11376., 13728., 14784., 15840., 16896., 882.,
      1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,  10206., 11340.,
      12474., 13608., 16380., 17640., 18900., 20160., 1035.,  2070.,  3105.,
      4140.,  5910.,  7092.,  8274.,  9456.,  11961., 13290., 14619., 15948.,
      19188., 20664., 22140., 23616., 1176.,  2352.,  3528.,  4704.,  6720.,
      8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520.,
      25200., 26880., 1305.,  2610.,  3915.,  5220.,  7470.,  8964.,  10458.,
      11952., 15147., 16830., 18513., 20196., 24336., 26208., 28080., 29952.,
      1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608.,
      15120., 16632., 18144., 21840., 23520., 25200., 26880., 1011.,  2022.,
      3033.,  4044.,  5790.,  6948.,  8106.,  9264.,  11745., 13050., 14355.,
      15660., 18876., 20328., 21780., 23232., 858.,   1716.,  2574.,  3432.,
      4920.,  5904.,  6888.,  7872.,  9990.,  11100., 12210., 13320., 16068.,
      17304., 18540., 19776., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,
      8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600.,
      23040., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752.,
      13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880., 1344.,
      2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552., 17280.,
      19008., 20736., 24960., 26880., 28800., 30720., 1512.,  3024.,  4536.,
      6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328.,
      28080., 30240., 32400., 34560., 1344.,  2688.,  4032.,  5376.,  7680.,
      9216.,  10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880.,
      28800., 30720., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664.,
      12960., 14256., 15552., 18720., 20160., 21600., 23040., 906.,   1812.,
      2718.,  3624.,  5160.,  6192.,  7224.,  8256.,  10422., 11580., 12738.,
      13896., 16692., 17976., 19260., 20544., 1047.,  2094.,  3141.,  4188.,
      5970.,  7164.,  8358.,  9552.,  12069., 13410., 14751., 16092., 19344.,
      20832., 22320., 23808., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1341.,  2682.,  4023.,  5364.,  7650.,  9180.,  10710., 12240.,
      15471., 17190., 18909., 20628., 24804., 26712., 28620., 30528., 1176.,
      2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120.,
      16632., 18144., 21840., 23520., 25200., 26880., 1023.,  2046.,  3069.,
      4092.,  5850.,  7020.,  8190.,  9360.,  11853., 13170., 14487., 15804.,
      19032., 20496., 21960., 23424., 882.,   1764.,  2646.,  3528.,  5040.,
      6048.,  7056.,  8064.,  10206., 11340., 12474., 13608., 16380., 17640.,
      18900., 20160., 780.,   1560.,  2340.,  3120.,  4440.,  5328.,  6216.,
      7104.,  8964.,  9960.,  10956., 11952., 14352., 15456., 16560., 17664.,
      882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,  10206.,
      11340., 12474., 13608., 16380., 17640., 18900., 20160., 1008.,  2016.,
      3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256.,
      15552., 18720., 20160., 21600., 23040., 1158.,  2316.,  3474.,  4632.,
      6600.,  7920.,  9240.,  10560., 13338., 14820., 16302., 17784., 21372.,
      23016., 24660., 26304., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,
      8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600.,
      23040., 882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,
      10206., 11340., 12474., 13608., 16380., 17640., 18900., 20160., 780.,
      1560.,  2340.,  3120.,  4440.,  5328.,  6216.,  7104.,  8964.,  9960.,
      10956., 11952., 14352., 15456., 16560., 17664., 630.,   1260.,  1890.,
      2520.,  3600.,  4320.,  5040.,  5760.,  7290.,  8100.,  8910.,  9720.,
      11700., 12600., 13500., 14400., 729.,   1458.,  2187.,  2916.,  4170.,
      5004.,  5838.,  6672.,  8451.,  9390.,  10329., 11268., 13572., 14616.,
      15660., 16704., 840.,   1680.,  2520.,  3360.,  4800.,  5760.,  6720.,
      7680.,  9720.,  10800., 11880., 12960., 15600., 16800., 18000., 19200.,
      963.,   1926.,  2889.,  3852.,  5490.,  6588.,  7686.,  8784.,  11097.,
      12330., 13563., 14796., 17784., 19152., 20520., 21888., 840.,   1680.,
      2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880.,
      12960., 15600., 16800., 18000., 19200., 753.,   1506.,  2259.,  3012.,
      4290.,  5148.,  6006.,  6864.,  8667.,  9630.,  10593., 11556., 13884.,
      14952., 16020., 17088., 654.,   1308.,  1962.,  2616.,  3720.,  4464.,
      5208.,  5952.,  7506.,  8340.,  9174.,  10008., 12012., 12936., 13860.,
      14784.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9966.,  10380., 10794., 11208., 12112., 12544., 12976., 13408., 14402.,
      14852., 15302., 15752., 16836., 17304., 17772., 18240., 11638., 12124.,
      12610., 13096., 14072., 14576., 15080., 15584., 16650., 17172., 17694.,
      18216., 19372., 19912., 20452., 20992., 13310., 13868., 14426., 14984.,
      16032., 16608., 17184., 17760., 18898., 19492., 20086., 20680., 21908.,
      22520., 23132., 23744., 14982., 15612., 16242., 16872., 17992., 18640.,
      19288., 19936., 21146., 21812., 22478., 23144., 24444., 25128., 25812.,
      26496., 16654., 17356., 18058., 18760., 19952., 20672., 21392., 22112.,
      23394., 24132., 24870., 25608., 26980., 27736., 28492., 29248., 16150.,
      16796., 17442., 18088., 19224., 19888., 20552., 21216., 22442., 23124.,
      23806., 24488., 25804., 26504., 27204., 27904., 17630., 18156., 18682.,
      19208., 20224., 20768., 21312., 21856., 22962., 23524., 24086., 24648.,
      25844., 26424., 27004., 27584., 11126., 11612., 12098., 12584., 13560.,
      14064., 14568., 15072., 16138., 16660., 17182., 17704., 18860., 19400.,
      19940., 20480., 12798., 13356., 13914., 14472., 15520., 16096., 16672.,
      17248., 18386., 18980., 19574., 20168., 21396., 22008., 22620., 23232.,
      14470., 15100., 15730., 16360., 17480., 18128., 18776., 19424., 20634.,
      21300., 21966., 22632., 23932., 24616., 25300., 25984., 16142., 16844.,
      17546., 18248., 19440., 20160., 20880., 21600., 22882., 23620., 24358.,
      25096., 26468., 27224., 27980., 28736., 14678., 15388., 16098., 16808.,
      18008., 18736., 19464., 20192., 21482., 22228., 22974., 23720., 25100.,
      25864., 26628., 27392., 10014., 10604., 11194., 11784., 12864., 13472.,
      14080., 14688., 15858., 16484., 17110., 17736., 18996., 19640., 20284.,
      20928., 8422.,  8892.,  9362.,  9832.,  10792., 11280., 11768., 12256.,
      13306., 13812., 14318., 14824., 15964., 16488., 17012., 17536., 13310.,
      13868., 14426., 14984., 16032., 16608., 17184., 17760., 18898., 19492.,
      20086., 20680., 21908., 22520., 23132., 23744., 14982., 15612., 16242.,
      16872., 17992., 18640., 19288., 19936., 21146., 21812., 22478., 23144.,
      24444., 25128., 25812., 26496., 16654., 17356., 18058., 18760., 19952.,
      20672., 21392., 22112., 23394., 24132., 24870., 25608., 26980., 27736.,
      28492., 29248., 16150., 16796., 17442., 18088., 19224., 19888., 20552.,
      21216., 22442., 23124., 23806., 24488., 25804., 26504., 27204., 27904.,
      17630., 18156., 18682., 19208., 20224., 20768., 21312., 21856., 22962.,
      23524., 24086., 24648., 25844., 26424., 27004., 27584., 9894.,  10300.,
      10706., 11112., 12008., 12432., 12856., 13280., 14266., 14708., 15150.,
      15592., 16668., 17128., 17588., 18048., 9454.,  9868.,  10282., 10696.,
      11600., 12032., 12464., 12896., 13890., 14340., 14790., 15240., 16324.,
      16792., 17260., 17728., 14470., 15100., 15730., 16360., 17480., 18128.,
      18776., 19424., 20634., 21300., 21966., 22632., 23932., 24616., 25300.,
      25984., 16142., 16844., 17546., 18248., 19440., 20160., 20880., 21600.,
      22882., 23620., 24358., 25096., 26468., 27224., 27980., 28736., 14678.,
      15388., 16098., 16808., 18008., 18736., 19464., 20192., 21482., 22228.,
      22974., 23720., 25100., 25864., 26628., 27392., 10014., 10604., 11194.,
      11784., 12864., 13472., 14080., 14688., 15858., 16484., 17110., 17736.,
      18996., 19640., 20284., 20928., 8422.,  8892.,  9362.,  9832.,  10792.,
      11280., 11768., 12256., 13306., 13812., 14318., 14824., 15964., 16488.,
      17012., 17536., 9966.,  10380., 10794., 11208., 12112., 12544., 12976.,
      13408., 14402., 14852., 15302., 15752., 16836., 17304., 17772., 18240.,
      11638., 12124., 12610., 13096., 14072., 14576., 15080., 15584., 16650.,
      17172., 17694., 18216., 19372., 19912., 20452., 20992., 16654., 17356.,
      18058., 18760., 19952., 20672., 21392., 22112., 23394., 24132., 24870.,
      25608., 26980., 27736., 28492., 29248., 16150., 16796., 17442., 18088.,
      19224., 19888., 20552., 21216., 22442., 23124., 23806., 24488., 25804.,
      26504., 27204., 27904., 17630., 18156., 18682., 19208., 20224., 20768.,
      21312., 21856., 22962., 23524., 24086., 24648., 25844., 26424., 27004.,
      27584., 9894.,  10300., 10706., 11112., 12008., 12432., 12856., 13280.,
      14266., 14708., 15150., 15592., 16668., 17128., 17588., 18048., 9454.,
      9868.,  10282., 10696., 11600., 12032., 12464., 12896., 13890., 14340.,
      14790., 15240., 16324., 16792., 17260., 17728., 11126., 11612., 12098.,
      12584., 13560., 14064., 14568., 15072., 16138., 16660., 17182., 17704.,
      18860., 19400., 19940., 20480., 12798., 13356., 13914., 14472., 15520.,
      16096., 16672., 17248., 18386., 18980., 19574., 20168., 21396., 22008.,
      22620., 23232., 14678., 15388., 16098., 16808., 18008., 18736., 19464.,
      20192., 21482., 22228., 22974., 23720., 25100., 25864., 26628., 27392.,
      10014., 10604., 11194., 11784., 12864., 13472., 14080., 14688., 15858.,
      16484., 17110., 17736., 18996., 19640., 20284., 20928., 8422.,  8892.,
      9362.,  9832.,  10792., 11280., 11768., 12256., 13306., 13812., 14318.,
      14824., 15964., 16488., 17012., 17536., 9966.,  10380., 10794., 11208.,
      12112., 12544., 12976., 13408., 14402., 14852., 15302., 15752., 16836.,
      17304., 17772., 18240., 11638., 12124., 12610., 13096., 14072., 14576.,
      15080., 15584., 16650., 17172., 17694., 18216., 19372., 19912., 20452.,
      20992., 13310., 13868., 14426., 14984., 16032., 16608., 17184., 17760.,
      18898., 19492., 20086., 20680., 21908., 22520., 23132., 23744., 14982.,
      15612., 16242., 16872., 17992., 18640., 19288., 19936., 21146., 21812.,
      22478., 23144., 24444., 25128., 25812., 26496., 17630., 18156., 18682.,
      19208., 20224., 20768., 21312., 21856., 22962., 23524., 24086., 24648.,
      25844., 26424., 27004., 27584., 9894.,  10300., 10706., 11112., 12008.,
      12432., 12856., 13280., 14266., 14708., 15150., 15592., 16668., 17128.,
      17588., 18048., 9454.,  9868.,  10282., 10696., 11600., 12032., 12464.,
      12896., 13890., 14340., 14790., 15240., 16324., 16792., 17260., 17728.,
      11126., 11612., 12098., 12584., 13560., 14064., 14568., 15072., 16138.,
      16660., 17182., 17704., 18860., 19400., 19940., 20480., 12798., 13356.,
      13914., 14472., 15520., 16096., 16672., 17248., 18386., 18980., 19574.,
      20168., 21396., 22008., 22620., 23232., 14470., 15100., 15730., 16360.,
      17480., 18128., 18776., 19424., 20634., 21300., 21966., 22632., 23932.,
      24616., 25300., 25984., 16142., 16844., 17546., 18248., 19440., 20160.,
      20880., 21600., 22882., 23620., 24358., 25096., 26468., 27224., 27980.,
      28736.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9252.,  11412., 11412., 11589., 9750.,  8052.,  6846.,  7854.,  9240.,
      10974., 12894., 12246., 11736., 10758., 10758., 11580., 12222., 13095.,
      11616., 10332., 9216.,  12552., 15264., 18744., 22440., 18744., 15264.,
      12552., 9216.,  10332., 11616., 13095., 12222., 11580., 10758., 10758.,
      11736., 12246., 12894., 10974., 9240.,  7854.,  6846.,  8052.,  9750.,
      11589., 11412., 11412., 9252.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36760., 37060., 37360., 37660., 37960., 38260., 38560., 39760., 40060.,
      40360., 40660., 40960., 41260., 41560., 42760., 43060., 43360., 43660.,
      43960., 44260., 44560., 45760., 46060., 46360., 46660., 46960., 47260.,
      47560., 48760., 49060., 49360., 49660., 49960., 50260., 50560., 51760.,
      52060., 52360., 52660., 52960., 53260., 53560., 54760., 55060., 55360.,
      55660., 55960., 56260., 56560.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7920.,  8808.,  9612.,  10632., 9561.,  10680., 9705.,  10938., 8070.,
      9180.,  6828.,  7800.,  6105.,  6972.,  8598.,  9612.,  9288.,  10464.,
      10176., 11484., 11274., 12732., 10158., 11484., 9480.,  10656., 8700.,
      9756.,  9030.,  10236., 10020., 11400., 11637., 13164., 13503., 15198.,
      12684., 14208., 12420., 13752., 9969.,  11136., 10824., 12240., 12768.,
      14400., 15696., 17520., 18840., 20880., 15480., 17328., 12768., 14400.,
      10608., 12048., 11340., 12672., 13956., 15480., 14055., 15744., 14331.,
      16206., 12246., 13932., 10788., 12264., 9471.,  10764., 9246.,  10332.,
      10248., 11520., 10872., 12300., 11610., 13212., 10566., 12012., 10056.,
      11328., 9204.,  10332., 6870.,  7788.,  7596.,  8664.,  8619.,  9804.,
      9765.,  11082., 9456.,  10632., 9612.,  10632., 7431.,  8328.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30460., 31536., 31036., 32136., 31612., 32736., 32188., 33336., 32764.,
      33936., 33340., 34536., 33916., 35136., 36220., 37536., 36796., 38136.,
      37372., 38736., 37948., 39336., 38524., 39936., 39100., 40536., 39676.,
      41136., 41980., 43536., 42556., 44136., 43132., 44736., 43708., 45336.,
      44284., 45936., 44860., 46536., 45436., 47136., 47740., 49536., 48316.,
      50136., 48892., 50736., 49468., 51336., 50044., 51936., 46652., 48440.,
      43516., 45200., 39164., 40688., 39740., 41288., 40316., 41888., 40892.,
      42488., 41468., 43088., 39100., 40616., 36988., 38400., 34684., 35936.,
      35260., 36536., 35836., 37136., 36412., 37736., 36988., 38336., 37564.,
      38936., 38140., 39536., 40444., 41936., 41020., 42536., 41596., 43136.,
      42172., 43736., 42748., 44336., 43324., 44936., 43900., 45536.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6696.,  7584.,  8472.,  9360.,  8124.,  9144.,  10164., 11184., 8067.,
      9186.,  10305., 11424., 8241.,  9474.,  10707., 11940., 7254.,  8364.,
      9474.,  10584., 7212.,  8184.,  9156.,  10128., 5823.,  6690.,  7557.,
      8424.,  7062.,  8076.,  9090.,  10104., 7608.,  8784.,  9960.,  11136.,
      9252.,  10560., 11868., 13176., 11106., 12564., 14022., 15480., 9006.,
      10332., 11658., 12984., 7992.,  9168.,  10344., 11520., 6984.,  8040.,
      9096.,  10152., 8886.,  10092., 11298., 12504., 10692., 12072., 13452.,
      14832., 10899., 12426., 13953., 15480., 11391., 13086., 14781., 16476.,
      10116., 11640., 13164., 14688., 10164., 11496., 12828., 14160., 7875.,
      9042.,  10209., 11376., 10056., 11472., 12888., 14304., 10848., 12480.,
      14112., 15744., 13056., 14880., 16704., 18528., 15480., 17520., 19560.,
      21600., 12408., 14256., 16104., 17952., 10848., 12480., 14112., 15744.,
      9408.,  10848., 12288., 13728., 9540.,  10872., 12204., 13536., 11508.,
      13032., 14556., 16080., 11781., 13470., 15159., 16848., 12243., 14118.,
      15993., 17868., 11094., 12780., 14466., 16152., 11364., 12840., 14316.,
      15792., 8577.,  9870.,  11163., 12456., 7806.,  8892.,  9978.,  11064.,
      8664.,  9936.,  11208., 12480., 10332., 11760., 13188., 14616., 12114.,
      13716., 15318., 16920., 9606.,  11052., 12498., 13944., 8280.,  9552.,
      10824., 12096., 7248.,  8376.,  9504.,  10632., 6486.,  7404.,  8322.,
      9240.,  7884.,  8952.,  10020., 11088., 8085.,  9270.,  10455., 11640.,
      8421.,  9738.,  11055., 12372., 7752.,  8928.,  10104., 11280., 8124.,
      9144.,  10164., 11184., 6045.,  6942.,  7839.,  8736.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15556., 16120., 16684., 17248., 16172., 16760., 17348., 17936., 16788.,
      17400., 18012., 18624., 17404., 18040., 18676., 19312., 18020., 18680.,
      19340., 20000., 18636., 19320., 20004., 20688., 19252., 19960., 20668.,
      21376., 21716., 22520., 23324., 24128., 22332., 23160., 23988., 24816.,
      22948., 23800., 24652., 25504., 23564., 24440., 25316., 26192., 24180.,
      25080., 25980., 26880., 24796., 25720., 26644., 27568., 25412., 26360.,
      27308., 28256., 24420., 25336., 26252., 27168., 23692., 24568., 25444.,
      26320., 23220., 24056., 24892., 25728., 23836., 24696., 25556., 26416.,
      24452., 25336., 26220., 27104., 25068., 25976., 26884., 27792., 25684.,
      26616., 27548., 28480., 26740., 27640., 28540., 29440., 27036., 27896.,
      28756., 29616., 27588., 28408., 29228., 30048., 28204., 29048., 29892.,
      30736., 28820., 29688., 30556., 31424., 25532., 26360., 27188., 28016.,
      22500., 23288., 24076., 24864., 18436., 19192., 19948., 20704., 19052.,
      19832., 20612., 21392., 19668., 20472., 21276., 22080., 20284., 21112.,
      21940., 22768., 20900., 21752., 22604., 23456., 18636., 19448., 20260.,
      21072., 16628., 17400., 18172., 18944., 14612., 15352., 16092., 16832.,
      13372., 14072., 14772., 15472., 12388., 13048., 13708., 14368., 11660.,
      12280., 12900., 13520., 11188., 11768., 12348., 12928., 11804., 12408.,
      13012., 13616., 12420., 13048., 13676., 14304., 14884., 15608., 16332.,
      17056., 14668., 15352., 16036., 16720., 14708., 15352., 15996., 16640.,
      15004., 15608., 16212., 16816., 15556., 16120., 16684., 17248., 16172.,
      16760., 17348., 17936., 16788., 17400., 18012., 18624.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7767.,  9552.,  10200., 12240., 9273.,  11568., 8958.,  11508., 7425.,
      9720.,  6360.,  8400.,  5727.,  7512.,  8634.,  10776., 8784.,  11232.,
      8790.,  11544., 9540.,  12600., 8886.,  11640., 8784.,  11232., 8826.,
      10968., 7989.,  10488., 8904.,  11760., 10539., 13752., 13002., 16572.,
      13299., 16512., 14280., 17136., 10557., 13056., 9336.,  12192., 11712.,
      14976., 15624., 19296., 20400., 24480., 15624., 19296., 11712., 14976.,
      9336.,  12192., 10557., 13056., 14280., 17136., 13299., 16512., 13002.,
      16572., 10539., 13752., 8904.,  11760., 7989.,  10488., 8826.,  10968.,
      8784.,  11232., 8886.,  11640., 9540.,  12600., 8790.,  11544., 8784.,
      11232., 8634.,  10776., 5727.,  7512.,  6360.,  8400.,  7425.,  9720.,
      8958.,  11508., 9273.,  11568., 10200., 12240., 7767.,  9552.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35768., 37472., 36920., 38672., 38072., 39872., 39224., 41072., 40376.,
      42272., 41528., 43472., 42680., 44672., 47288., 49472., 48440., 50672.,
      49592., 51872., 50744., 53072., 51896., 54272., 53048., 55472., 54200.,
      56672., 47032., 49440., 42680., 45008., 38584., 40832., 39736., 42032.,
      40888., 43232., 42040., 44432., 43192., 45632., 38072., 40448., 34744.,
      37040., 31672., 33888., 32824., 35088., 33976., 36288., 31160., 33392.,
      28600., 30752., 26552., 28640., 27704., 29840., 28856., 31040., 30008.,
      32240., 31160., 33440., 29368., 31568., 27832., 29952., 27832., 29888.,
      27064., 29040., 26552., 28448., 26296., 28112., 26296., 28032., 27448.,
      29232., 28600., 30432., 33208., 35232., 33464., 35408., 33976., 35840.,
      34744., 36528., 35768., 37472., 36920., 38672., 38072., 39872.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5991.,  6798.,  8592.,  9504.,  7920.,  8880.,  10920., 12000., 7179.,
      8226.,  10530., 11712., 7344.,  8508.,  11046., 12360., 7005.,  8082.,
      10356., 11568., 7920.,  8880.,  10920., 12000., 5745.,  6606.,  8394.,
      9360.,  6726.,  7716.,  9876.,  10992., 7200.,  8352.,  10800., 12096.,
      8838.,  10092., 12840., 14256., 11544., 12936., 15948., 17520., 8610.,
      9900.,  12612., 14064., 7200.,  8352.,  10800., 12096., 6594.,  7620.,
      9744.,  10896., 8481.,  9642.,  12180., 13488., 11088., 12432., 15288.,
      16800., 10197., 11670., 14898., 16560., 10536., 12180., 15738., 17592.,
      9915.,  11430., 14616., 16320., 11088., 12432., 15288., 16800., 7791.,
      8970.,  11442., 12768., 9096.,  10416., 13296., 14784., 9600.,  11136.,
      14400., 16128., 12072., 13776., 17472., 19392., 15840., 17760., 21840.,
      24000., 11640., 13392., 17040., 19008., 9600.,  11136., 14400., 16128.,
      8664.,  10032., 12864., 14400., 8229.,  9402.,  11928., 13248., 11088.,
      12432., 15288., 16800., 10353., 11862., 15102., 16800., 10656., 12372.,
      15954., 17880., 9879.,  11430., 14628., 16368., 11088., 12432., 15288.,
      16800., 7827.,  9018.,  11478., 12816., 6918.,  7908.,  10068., 11184.,
      7200.,  8352.,  10800., 12096., 9270.,  10572., 13368., 14832., 12216.,
      13704., 16812., 18480., 8850.,  10188., 12948., 14448., 7200.,  8352.,
      10800., 12096., 6402.,  7428.,  9552.,  10704., 5739.,  6558.,  8340.,
      9264.,  7920.,  8880.,  10920., 12000., 7335.,  8418.,  10734., 11952.,
      7464.,  8700.,  11262., 12648., 6969.,  8082.,  10368., 11616., 7920.,
      8880.,  10920., 12000., 5781.,  6654.,  8430.,  9408.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22816., 23408., 24664., 25280., 24048., 24688., 25992., 26656., 25280.,
      25968., 27320., 28032., 22608., 23280., 24616., 25312., 20192., 20848.,
      22168., 22848., 18032., 18672., 19976., 20640., 16128., 16752., 18040.,
      18688., 21056., 21872., 23352., 24192., 22288., 23152., 24680., 25568.,
      23520., 24432., 26008., 26944., 21872., 22768., 24328., 25248., 20480.,
      21360., 22904., 23808., 19344., 20208., 21736., 22624., 18464., 19312.,
      20824., 21696., 16480., 17264., 18712., 19520., 15024., 15728., 17096.,
      17824., 14080., 14704., 15992., 16640., 15312., 15984., 17320., 18016.,
      16544., 17264., 18648., 19392., 17776., 18544., 19976., 20768., 19008.,
      19824., 21304., 22144., 21120., 21872., 23288., 24064., 21712., 22384.,
      23720., 24416., 22816., 23408., 24664., 25280., 24048., 24688., 25992.,
      26656., 25280., 25968., 27320., 28032., 22608., 23280., 24616., 25312.,
      20192., 20848., 22168., 22848., 18592., 19312., 20696., 21440., 19824.,
      20592., 22024., 22816., 21056., 21872., 23352., 24192., 22288., 23152.,
      24680., 25568., 23520., 24432., 26008., 26944., 21872., 22768., 24328.,
      25248., 20480., 21360., 22904., 23808., 20928., 21872., 23480., 24448.,
      18448., 19312., 20840., 21728., 16480., 17264., 18712., 19520., 15024.,
      15728., 17096., 17824., 14080., 14704., 15992., 16640., 15312., 15984.,
      17320., 18016., 16544., 17264., 18648., 19392., 21472., 22384., 23960.,
      24896., 21040., 21872., 23368., 24224., 21120., 21872., 23288., 24064.,
      21712., 22384., 23720., 24416., 22816., 23408., 24664., 25280., 24048.,
      24688., 25992., 26656., 25280., 25968., 27320., 28032.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4167.,  4974.,  5781.,  6588.,  8400.,  9312.,  10224., 11136., 5280.,
      6240.,  7200.,  8160.,  10200., 11280., 12360., 13440., 5103.,  6150.,
      7197.,  8244.,  10566., 11748., 12930., 14112., 6420.,  7584.,  8748.,
      9912.,  12426., 13740., 15054., 16368., 4437.,  5514.,  6591.,  7668.,
      9900.,  11112., 12324., 13536., 5280.,  6240.,  7200.,  8160.,  10200.,
      11280., 12360., 13440., 3429.,  4290.,  5151.,  6012.,  7758.,  8724.,
      9690.,  10656., 5022.,  6012.,  7002.,  7992.,  10188., 11304., 12420.,
      13536., 6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832., 16128.,
      6102.,  7356.,  8610.,  9864.,  12648., 14064., 15480., 16896., 7680.,
      9072.,  10464., 11856., 14868., 16440., 18012., 19584., 5322.,  6612.,
      7902.,  9192.,  11868., 13320., 14772., 16224., 6336.,  7488.,  8640.,
      9792.,  12240., 13536., 14832., 16128., 4050.,  5076.,  6102.,  7128.,
      9216.,  10368., 11520., 12672., 5865.,  7026.,  8187.,  9348.,  11916.,
      13224., 14532., 15840., 7392.,  8736.,  10080., 11424., 14280., 15792.,
      17304., 18816., 7209.,  8682.,  10155., 11628., 14886., 16548., 18210.,
      19872., 9060.,  10704., 12348., 13992., 17526., 19380., 21234., 23088.,
      6219.,  7734.,  9249.,  10764., 13896., 15600., 17304., 19008., 7392.,
      8736.,  10080., 11424., 14280., 15792., 17304., 18816., 4563.,  5742.,
      6921.,  8100.,  10518., 11844., 13170., 14496., 6696.,  8016.,  9336.,
      10656., 13584., 15072., 16560., 18048., 8448.,  9984.,  11520., 13056.,
      16320., 18048., 19776., 21504., 8424.,  10128., 11832., 13536., 17280.,
      19200., 21120., 23040., 10560., 12480., 14400., 16320., 20400., 22560.,
      24720., 26880., 7128.,  8880.,  10632., 12384., 15984., 17952., 19920.,
      21888., 8448.,  9984.,  11520., 13056., 16320., 18048., 19776., 21504.,
      5400.,  6768.,  8136.,  9504.,  12288., 13824., 15360., 16896., 5877.,
      7050.,  8223.,  9396.,  11976., 13296., 14616., 15936., 7392.,  8736.,
      10080., 11424., 14280., 15792., 17304., 18816., 7533.,  9042.,  10551.,
      12060., 15354., 17052., 18750., 20448., 9420.,  11136., 12852., 14568.,
      18174., 20100., 22026., 23952., 6255.,  7806.,  9357.,  10908., 14076.,
      15816., 17556., 19296., 7392.,  8736.,  10080., 11424., 14280., 15792.,
      17304., 18816., 4671.,  5862.,  7053.,  8244.,  10674., 12012., 13350.,
      14688., 5022.,  6012.,  7002.,  7992.,  10188., 11304., 12420., 13536.,
      6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 6534.,
      7836.,  9138.,  10440., 13272., 14736., 16200., 17664., 8160.,  9648.,
      11136., 12624., 15732., 17400., 19068., 20736., 5370.,  6708.,  8046.,
      9384.,  12108., 13608., 15108., 16608., 6336.,  7488.,  8640.,  9792.,
      12240., 13536., 14832., 16128., 4050.,  5076.,  6102.,  7128.,  9216.,
      10368., 11520., 12672., 4179.,  4998.,  5817.,  6636.,  8460.,  9384.,
      10308., 11232., 5280.,  6240.,  7200.,  8160.,  10200., 11280., 12360.,
      13440., 5427.,  6510.,  7593.,  8676.,  11034., 12252., 13470., 14688.,
      6780.,  8016.,  9252.,  10488., 13074., 14460., 15846., 17232., 4473.,
      5586.,  6699.,  7812.,  10080., 11328., 12576., 13824., 5280.,  6240.,
      7200.,  8160.,  10200., 11280., 12360., 13440., 3537.,  4410.,  5283.,
      6156.,  7914.,  8892.,  9870.,  10848.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21488., 22080., 22672., 23264., 24648., 25264., 25880., 26496., 22880.,
      23520., 24160., 24800., 26232., 26896., 27560., 28224., 24272., 24960.,
      25648., 26336., 27816., 28528., 29240., 29952., 22016., 22688., 23360.,
      24032., 25496., 26192., 26888., 27584., 20272., 20928., 21584., 22240.,
      23688., 24368., 25048., 25728., 19040., 19680., 20320., 20960., 22392.,
      23056., 23720., 24384., 18320., 18944., 19568., 20192., 21608., 22256.,
      22904., 23552., 23888., 24704., 25520., 26336., 27944., 28784., 29624.,
      30464., 25280., 26144., 27008., 27872., 29528., 30416., 31304., 32192.,
      26672., 27584., 28496., 29408., 31112., 32048., 32984., 33920., 26464.,
      27360., 28256., 29152., 30840., 31760., 32680., 33600., 26768., 27648.,
      28528., 29408., 31080., 31984., 32888., 33792., 27584., 28448., 29312.,
      30176., 31832., 32720., 33608., 34496., 28912., 29760., 30608., 31456.,
      33096., 33968., 34840., 35712., 20912., 21696., 22480., 23264., 24840.,
      25648., 26456., 27264., 17056., 17760., 18464., 19168., 20664., 21392.,
      22120., 22848., 14224., 14848., 15472., 16096., 17512., 18160., 18808.,
      19456., 15616., 16288., 16960., 17632., 19096., 19792., 20488., 21184.,
      17008., 17728., 18448., 19168., 20680., 21424., 22168., 22912., 18400.,
      19168., 19936., 20704., 22264., 23056., 23848., 24640., 19792., 20608.,
      21424., 22240., 23848., 24688., 25528., 26368., 19984., 20736., 21488.,
      22240., 23784., 24560., 25336., 26112., 20224., 20896., 21568., 22240.,
      23704., 24400., 25096., 25792., 21488., 22080., 22672., 23264., 24648.,
      25264., 25880., 26496., 22880., 23520., 24160., 24800., 26232., 26896.,
      27560., 28224., 24272., 24960., 25648., 26336., 27816., 28528., 29240.,
      29952., 22016., 22688., 23360., 24032., 25496., 26192., 26888., 27584.,
      20272., 20928., 21584., 22240., 23688., 24368., 25048., 25728., 21104.,
      21824., 22544., 23264., 24776., 25520., 26264., 27008., 22496., 23264.,
      24032., 24800., 26360., 27152., 27944., 28736., 23888., 24704., 25520.,
      26336., 27944., 28784., 29624., 30464., 25280., 26144., 27008., 27872.,
      29528., 30416., 31304., 32192., 26672., 27584., 28496., 29408., 31112.,
      32048., 32984., 33920., 26464., 27360., 28256., 29152., 30840., 31760.,
      32680., 33600., 26768., 27648., 28528., 29408., 31080., 31984., 32888.,
      33792., 31696., 32640., 33584., 34528., 36264., 37232., 38200., 39168.,
      25792., 26656., 27520., 28384., 30040., 30928., 31816., 32704., 20912.,
      21696., 22480., 23264., 24840., 25648., 26456., 27264., 17056., 17760.,
      18464., 19168., 20664., 21392., 22120., 22848., 14224., 14848., 15472.,
      16096., 17512., 18160., 18808., 19456., 15616., 16288., 16960., 17632.,
      19096., 19792., 20488., 21184., 17008., 17728., 18448., 19168., 20680.,
      21424., 22168., 22912., 22576., 23488., 24400., 25312., 27016., 27952.,
      28888., 29824., 20768., 21600., 22432., 23264., 24888., 25744., 26600.,
      27456., 19984., 20736., 21488., 22240., 23784., 24560., 25336., 26112.,
      20224., 20896., 21568., 22240., 23704., 24400., 25096., 25792., 21488.,
      22080., 22672., 23264., 24648., 25264., 25880., 26496., 22880., 23520.,
      24160., 24800., 26232., 26896., 27560., 28224., 24272., 24960., 25648.,
      26336., 27816., 28528., 29240., 29952.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5013.,  6588.,  8373.,  10368., 8280.,  10080., 12120., 14400., 5787.,
      7812.,  10107., 12672., 5550.,  7800.,  10350., 13200., 5883.,  7908.,
      10203., 12768., 8280.,  10080., 12120., 14400., 4917.,  6492.,  8277.,
      10272., 5382.,  7272.,  9414.,  11808., 5328.,  7488.,  9936.,  12672.,
      7578.,  10008., 12762., 15840., 12420., 15120., 18180., 21600., 7578.,
      10008., 12762., 15840., 5328.,  7488.,  9936.,  12672., 5382.,  7272.,
      9414.,  11808., 6999.,  9204.,  11703., 14496., 11592., 14112., 16968.,
      20160., 8121.,  10956., 14169., 17760., 7770.,  10920., 14490., 18480.,
      8217.,  11052., 14265., 17856., 11592., 14112., 16968., 20160., 6903.,
      9108.,  11607., 14400., 7176.,  9696.,  12552., 15744., 7104.,  9984.,
      13248., 16896., 10104., 13344., 17016., 21120., 16560., 20160., 24240.,
      28800., 10104., 13344., 17016., 21120., 7104.,  9984.,  13248., 16896.,
      7176.,  9696.,  12552., 15744., 6903.,  9108.,  11607., 14400., 11592.,
      14112., 16968., 20160., 8217.,  11052., 14265., 17856., 7770.,  10920.,
      14490., 18480., 8121.,  10956., 14169., 17760., 11592., 14112., 16968.,
      20160., 6999.,  9204.,  11703., 14496., 5382.,  7272.,  9414.,  11808.,
      5328.,  7488.,  9936.,  12672., 7578.,  10008., 12762., 15840., 12420.,
      15120., 18180., 21600., 7578.,  10008., 12762., 15840., 5328.,  7488.,
      9936.,  12672., 5382.,  7272.,  9414.,  11808., 4917.,  6492.,  8277.,
      10272., 8280.,  10080., 12120., 14400., 5883.,  7908.,  10203., 12768.,
      5550.,  7800.,  10350., 13200., 5787.,  7812.,  10107., 12672., 8280.,
      10080., 12120., 14400., 5013.,  6588.,  8373.,  10368.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20952., 22240., 23576., 24960., 23416., 24800., 26232., 27712., 25880.,
      27360., 28888., 30464., 20728., 22112., 23544., 25024., 16344., 17632.,
      18968., 20352., 12728., 13920., 15160., 16448., 9880.,  10976., 12120.,
      13312., 19736., 21216., 22744., 24320., 22200., 23776., 25400., 27072.,
      24664., 26336., 28056., 29824., 22584., 24160., 25784., 27456., 21272.,
      22752., 24280., 25856., 20728., 22112., 23544., 25024., 20952., 22240.,
      23576., 24960., 16344., 17632., 18968., 20352., 12728., 13920., 15160.,
      16448., 9880.,  10976., 12120., 13312., 12344., 13536., 14776., 16064.,
      14808., 16096., 17432., 18816., 17272., 18656., 20088., 21568., 19736.,
      21216., 22744., 24320., 21272., 22752., 24280., 25856., 20728., 22112.,
      23544., 25024., 20952., 22240., 23576., 24960., 23416., 24800., 26232.,
      27712., 25880., 27360., 28888., 30464., 20728., 22112., 23544., 25024.,
      16344., 17632., 18968., 20352., 14808., 16096., 17432., 18816., 17272.,
      18656., 20088., 21568., 19736., 21216., 22744., 24320., 22200., 23776.,
      25400., 27072., 24664., 26336., 28056., 29824., 22584., 24160., 25784.,
      27456., 21272., 22752., 24280., 25856., 25880., 27360., 28888., 30464.,
      20728., 22112., 23544., 25024., 16344., 17632., 18968., 20352., 12728.,
      13920., 15160., 16448., 9880.,  10976., 12120., 13312., 12344., 13536.,
      14776., 16064., 14808., 16096., 17432., 18816., 24664., 26336., 28056.,
      29824., 22584., 24160., 25784., 27456., 21272., 22752., 24280., 25856.,
      20728., 22112., 23544., 25024., 20952., 22240., 23576., 24960., 23416.,
      24800., 26232., 27712., 25880., 27360., 28888., 30464.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3093.,  3786.,  5274.,  6072.,  7875.,  8778.,  10896., 11904., 5160.,
      6000.,  7680.,  8640.,  10680., 11760., 14160., 15360., 3807.,  4710.,
      6618.,  7656.,  9969.,  11142., 13860., 15168., 6330.,  7356.,  9432.,
      10608., 13134., 14460., 17436., 18912., 3363.,  4326.,  6174.,  7272.,
      9525.,  10758., 13416., 14784., 5160.,  6000.,  7680.,  8640.,  10680.,
      11760., 14160., 15360., 2457.,  3210.,  4638.,  5496.,  7239.,  8202.,
      10260., 11328., 3726.,  4572.,  6372.,  7344.,  9522.,  10620., 13176.,
      14400., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992., 18432.,
      4698.,  5796.,  8100.,  9360.,  12150., 13572., 16848., 18432., 7740.,
      9000.,  11520., 12960., 16020., 17640., 21240., 23040., 4050.,  5220.,
      7452.,  8784.,  11502., 12996., 16200., 17856., 6192.,  7200.,  9216.,
      10368., 12816., 14112., 16992., 18432., 3078.,  3996.,  5724.,  6768.,
      8874.,  10044., 12528., 13824., 4335.,  5310.,  7398.,  8520.,  11049.,
      12318., 15288., 16704., 7224.,  8400.,  10752., 12096., 14952., 16464.,
      19824., 21504., 5373.,  6642.,  9318.,  10776., 14019., 15666., 19476.,
      21312., 8910.,  10356., 13272., 14928., 18474., 20340., 24516., 26592.,
      4713.,  6066.,  8658.,  10200., 13359., 15090., 18816., 20736., 7224.,
      8400.,  10752., 12096., 14952., 16464., 19824., 21504., 3483.,  4542.,
      6546.,  7752.,  10197., 11550., 14436., 15936., 4968.,  6096.,  8496.,
      9792.,  12696., 14160., 17568., 19200., 8256.,  9600.,  12288., 13824.,
      17088., 18816., 22656., 24576., 6264.,  7728.,  10800., 12480., 16200.,
      18096., 22464., 24576., 10320., 12000., 15360., 17280., 21360., 23520.,
      28320., 30720., 5400.,  6960.,  9936.,  11712., 15336., 17328., 21600.,
      23808., 8256.,  9600.,  12288., 13824., 17088., 18816., 22656., 24576.,
      4104.,  5328.,  7632.,  9024.,  11832., 13392., 16704., 18432., 4359.,
      5358.,  7470.,  8616.,  11169., 12462., 15456., 16896., 7224.,  8400.,
      10752., 12096., 14952., 16464., 19824., 21504., 5589.,  6882.,  9582.,
      11064., 14331., 16002., 19836., 21696., 9150.,  10644., 13608., 15312.,
      18906., 20820., 25044., 27168., 4737.,  6114.,  8730.,  10296., 13479.,
      15234., 18984., 20928., 7224.,  8400.,  10752., 12096., 14952., 16464.,
      19824., 21504., 3699.,  4782.,  6810.,  8040.,  10509., 11886., 14796.,
      16320., 3726.,  4572.,  6372.,  7344.,  9522.,  10620., 13176., 14400.,
      6192.,  7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 4698.,
      5796.,  8100.,  9360.,  12150., 13572., 16848., 18432., 7740.,  9000.,
      11520., 12960., 16020., 17640., 21240., 23040., 4050.,  5220.,  7452.,
      8784.,  11502., 12996., 16200., 17856., 6192.,  7200.,  9216.,  10368.,
      12816., 14112., 16992., 18432., 3078.,  3996.,  5724.,  6768.,  8874.,
      10044., 12528., 13824., 3117.,  3834.,  5346.,  6168.,  7995.,  8922.,
      11064., 12096., 5160.,  6000.,  7680.,  8640.,  10680., 11760., 14160.,
      15360., 4023.,  4950.,  6882.,  7944.,  10281., 11478., 14220., 15552.,
      6570.,  7644.,  9768.,  10992., 13566., 14940., 17964., 19488., 3387.,
      4374.,  6246.,  7368.,  9645.,  10902., 13584., 14976., 5160.,  6000.,
      7680.,  8640.,  10680., 11760., 14160., 15360., 2673.,  3450.,  4902.,
      5784.,  7551.,  8538.,  10620., 11712.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27432., 28080., 29472., 30144., 31608., 32304., 33840., 34560., 30216.,
      30960., 32448., 33216., 34776., 35568., 37200., 38016., 33000., 33840.,
      35424., 36288., 37944., 38832., 40560., 41472., 24840., 25584., 27072.,
      27840., 29400., 30192., 31824., 32640., 18216., 18864., 20256., 20928.,
      22392., 23088., 24624., 25344., 13128., 13680., 14976., 15552., 16920.,
      17520., 18960., 19584., 9576.,  10032., 11232., 11712., 12984., 13488.,
      14832., 15360., 20712., 21552., 23136., 24000., 25656., 26544., 28272.,
      29184., 23496., 24432., 26112., 27072., 28824., 29808., 31632., 32640.,
      26280., 27312., 29088., 30144., 31992., 33072., 34992., 36096., 24264.,
      25200., 26880., 27840., 29592., 30576., 32400., 33408., 23784., 24624.,
      26208., 27072., 28728., 29616., 31344., 32256., 24840., 25584., 27072.,
      27840., 29400., 30192., 31824., 32640., 27432., 28080., 29472., 30144.,
      31608., 32304., 33840., 34560., 18216., 18864., 20256., 20928., 22392.,
      23088., 24624., 25344., 13128., 13680., 14976., 15552., 16920., 17520.,
      18960., 19584., 9576.,  10032., 11232., 11712., 12984., 13488., 14832.,
      15360., 12360., 12912., 14208., 14784., 16152., 16752., 18192., 18816.,
      15144., 15792., 17184., 17856., 19320., 20016., 21552., 22272., 17928.,
      18672., 20160., 20928., 22488., 23280., 24912., 25728., 20712., 21552.,
      23136., 24000., 25656., 26544., 28272., 29184., 23784., 24624., 26208.,
      27072., 28728., 29616., 31344., 32256., 24840., 25584., 27072., 27840.,
      29400., 30192., 31824., 32640., 27432., 28080., 29472., 30144., 31608.,
      32304., 33840., 34560., 30216., 30960., 32448., 33216., 34776., 35568.,
      37200., 38016., 33000., 33840., 35424., 36288., 37944., 38832., 40560.,
      41472., 24840., 25584., 27072., 27840., 29400., 30192., 31824., 32640.,
      18216., 18864., 20256., 20928., 22392., 23088., 24624., 25344., 15144.,
      15792., 17184., 17856., 19320., 20016., 21552., 22272., 17928., 18672.,
      20160., 20928., 22488., 23280., 24912., 25728., 20712., 21552., 23136.,
      24000., 25656., 26544., 28272., 29184., 23496., 24432., 26112., 27072.,
      28824., 29808., 31632., 32640., 26280., 27312., 29088., 30144., 31992.,
      33072., 34992., 36096., 24264., 25200., 26880., 27840., 29592., 30576.,
      32400., 33408., 23784., 24624., 26208., 27072., 28728., 29616., 31344.,
      32256., 33000., 33840., 35424., 36288., 37944., 38832., 40560., 41472.,
      24840., 25584., 27072., 27840., 29400., 30192., 31824., 32640., 18216.,
      18864., 20256., 20928., 22392., 23088., 24624., 25344., 13128., 13680.,
      14976., 15552., 16920., 17520., 18960., 19584., 9576.,  10032., 11232.,
      11712., 12984., 13488., 14832., 15360., 12360., 12912., 14208., 14784.,
      16152., 16752., 18192., 18816., 15144., 15792., 17184., 17856., 19320.,
      20016., 21552., 22272., 26280., 27312., 29088., 30144., 31992., 33072.,
      34992., 36096., 24264., 25200., 26880., 27840., 29592., 30576., 32400.,
      33408., 23784., 24624., 26208., 27072., 28728., 29616., 31344., 32256.,
      24840., 25584., 27072., 27840., 29400., 30192., 31824., 32640., 27432.,
      28080., 29472., 30144., 31608., 32304., 33840., 34560., 30216., 30960.,
      32448., 33216., 34776., 35568., 37200., 38016., 33000., 33840., 35424.,
      36288., 37944., 38832., 40560., 41472.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      693.,   1386.,  2079.,  2772.,  3990.,  4788.,  5586.,  6384.,  8127.,
      9030.,  9933.,  10836., 13104., 14112., 15120., 16128., 840.,   1680.,
      2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880.,
      12960., 15600., 16800., 18000., 19200., 903.,   1806.,  2709.,  3612.,
      5190.,  6228.,  7266.,  8304.,  10557., 11730., 12903., 14076., 17004.,
      18312., 19620., 20928., 1026.,  2052.,  3078.,  4104.,  5880.,  7056.,
      8232.,  9408.,  11934., 13260., 14586., 15912., 19188., 20664., 22140.,
      23616., 963.,   1926.,  2889.,  3852.,  5490.,  6588.,  7686.,  8784.,
      11097., 12330., 13563., 14796., 17784., 19152., 20520., 21888., 840.,
      1680.,  2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,  10800.,
      11880., 12960., 15600., 16800., 18000., 19200., 753.,   1506.,  2259.,
      3012.,  4290.,  5148.,  6006.,  6864.,  8667.,  9630.,  10593., 11556.,
      13884., 14952., 16020., 17088., 846.,   1692.,  2538.,  3384.,  4860.,
      5832.,  6804.,  7776.,  9882.,  10980., 12078., 13176., 15912., 17136.,
      18360., 19584., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,
      9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040.,
      1098.,  2196.,  3294.,  4392.,  6300.,  7560.,  8820.,  10080., 12798.,
      14220., 15642., 17064., 20592., 22176., 23760., 25344., 1260.,  2520.,
      3780.,  5040.,  7200.,  8640.,  10080., 11520., 14580., 16200., 17820.,
      19440., 23400., 25200., 27000., 28800., 1170.,  2340.,  3510.,  4680.,
      6660.,  7992.,  9324.,  10656., 13446., 14940., 16434., 17928., 21528.,
      23184., 24840., 26496., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,
      8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600.,
      23040., 918.,   1836.,  2754.,  3672.,  5220.,  6264.,  7308.,  8352.,
      10530., 11700., 12870., 14040., 16848., 18144., 19440., 20736., 975.,
      1950.,  2925.,  3900.,  5610.,  6732.,  7854.,  8976.,  11421., 12690.,
      13959., 15228., 18408., 19824., 21240., 22656., 1176.,  2352.,  3528.,
      4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144.,
      21840., 23520., 25200., 26880., 1269.,  2538.,  3807.,  5076.,  7290.,
      8748.,  10206., 11664., 14823., 16470., 18117., 19764., 23868., 25704.,
      27540., 29376., 1446.,  2892.,  4338.,  5784.,  8280.,  9936.,  11592.,
      13248., 16794., 18660., 20526., 22392., 26988., 29064., 31140., 33216.,
      1353.,  2706.,  4059.,  5412.,  7710.,  9252.,  10794., 12336., 15579.,
      17310., 19041., 20772., 24960., 26880., 28800., 30720., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1059.,  2118.,  3177.,  4236.,
      6030.,  7236.,  8442.,  9648.,  12177., 13530., 14883., 16236., 19500.,
      21000., 22500., 24000., 1128.,  2256.,  3384.,  4512.,  6480.,  7776.,
      9072.,  10368., 13176., 14640., 16104., 17568., 21216., 22848., 24480.,
      26112., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288.,
      15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720., 1464.,
      2928.,  4392.,  5856.,  8400.,  10080., 11760., 13440., 17064., 18960.,
      20856., 22752., 27456., 29568., 31680., 33792., 1680.,  3360.,  5040.,
      6720.,  9600.,  11520., 13440., 15360., 19440., 21600., 23760., 25920.,
      31200., 33600., 36000., 38400., 1560.,  3120.,  4680.,  6240.,  8880.,
      10656., 12432., 14208., 17928., 19920., 21912., 23904., 28704., 30912.,
      33120., 35328., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752.,
      12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720.,
      1224.,  2448.,  3672.,  4896.,  6960.,  8352.,  9744.,  11136., 14040.,
      15600., 17160., 18720., 22464., 24192., 25920., 27648., 999.,   1998.,
      2997.,  3996.,  5730.,  6876.,  8022.,  9168.,  11637., 12930., 14223.,
      15516., 18720., 20160., 21600., 23040., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1293.,  2586.,  3879.,  5172.,  7410.,  8892.,
      10374., 11856., 15039., 16710., 18381., 20052., 24180., 26040., 27900.,
      29760., 1494.,  2988.,  4482.,  5976.,  8520.,  10224., 11928., 13632.,
      17226., 19140., 21054., 22968., 27612., 29736., 31860., 33984., 1377.,
      2754.,  4131.,  5508.,  7830.,  9396.,  10962., 12528., 15795., 17550.,
      19305., 21060., 25272., 27216., 29160., 31104., 1176.,  2352.,  3528.,
      4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144.,
      21840., 23520., 25200., 26880., 1083.,  2166.,  3249.,  4332.,  6150.,
      7380.,  8610.,  9840.,  12393., 13770., 15147., 16524., 19812., 21336.,
      22860., 24384., 846.,   1692.,  2538.,  3384.,  4860.,  5832.,  6804.,
      7776.,  9882.,  10980., 12078., 13176., 15912., 17136., 18360., 19584.,
      1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664.,
      12960., 14256., 15552., 18720., 20160., 21600., 23040., 1098.,  2196.,
      3294.,  4392.,  6300.,  7560.,  8820.,  10080., 12798., 14220., 15642.,
      17064., 20592., 22176., 23760., 25344., 1260.,  2520.,  3780.,  5040.,
      7200.,  8640.,  10080., 11520., 14580., 16200., 17820., 19440., 23400.,
      25200., 27000., 28800., 1170.,  2340.,  3510.,  4680.,  6660.,  7992.,
      9324.,  10656., 13446., 14940., 16434., 17928., 21528., 23184., 24840.,
      26496., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,
      11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040., 918.,
      1836.,  2754.,  3672.,  5220.,  6264.,  7308.,  8352.,  10530., 11700.,
      12870., 14040., 16848., 18144., 19440., 20736., 717.,   1434.,  2151.,
      2868.,  4110.,  4932.,  5754.,  6576.,  8343.,  9270.,  10197., 11124.,
      13416., 14448., 15480., 16512., 840.,   1680.,  2520.,  3360.,  4800.,
      5760.,  6720.,  7680.,  9720.,  10800., 11880., 12960., 15600., 16800.,
      18000., 19200., 927.,   1854.,  2781.,  3708.,  5310.,  6372.,  7434.,
      8496.,  10773., 11970., 13167., 14364., 17316., 18648., 19980., 21312.,
      1074.,  2148.,  3222.,  4296.,  6120.,  7344.,  8568.,  9792.,  12366.,
      13740., 15114., 16488., 19812., 21336., 22860., 24384., 987.,   1974.,
      2961.,  3948.,  5610.,  6732.,  7854.,  8976.,  11313., 12570., 13827.,
      15084., 18096., 19488., 20880., 22272., 840.,   1680.,  2520.,  3360.,
      4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880., 12960., 15600.,
      16800., 18000., 19200., 777.,   1554.,  2331.,  3108.,  4410.,  5292.,
      6174.,  7056.,  8883.,  9870.,  10857., 11844., 14196., 15288., 16380.,
      17472.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18120., 18768., 19416., 20064., 21408., 22080., 22752., 23424., 24888.,
      25584., 26280., 26976., 28560., 29280., 30000., 30720., 20520., 21264.,
      22008., 22752., 24192., 24960., 25728., 26496., 28056., 28848., 29640.,
      30432., 32112., 32928., 33744., 34560., 22920., 23760., 24600., 25440.,
      26976., 27840., 28704., 29568., 31224., 32112., 33000., 33888., 35664.,
      36576., 37488., 38400., 15912., 16656., 17400., 18144., 19584., 20352.,
      21120., 21888., 23448., 24240., 25032., 25824., 27504., 28320., 29136.,
      29952., 11976., 12624., 13272., 13920., 15264., 15936., 16608., 17280.,
      18744., 19440., 20136., 20832., 22416., 23136., 23856., 24576., 11112.,
      11664., 12216., 12768., 14016., 14592., 15168., 15744., 17112., 17712.,
      18312., 18912., 20400., 21024., 21648., 22272., 13320., 13776., 14232.,
      14688., 15840., 16320., 16800., 17280., 18552., 19056., 19560., 20064.,
      21456., 21984., 22512., 23040., 22920., 23760., 24600., 25440., 26976.,
      27840., 28704., 29568., 31224., 32112., 33000., 33888., 35664., 36576.,
      37488., 38400., 25320., 26256., 27192., 28128., 29760., 30720., 31680.,
      32640., 34392., 35376., 36360., 37344., 39216., 40224., 41232., 42240.,
      27720., 28752., 29784., 30816., 32544., 33600., 34656., 35712., 37560.,
      38640., 39720., 40800., 42768., 43872., 44976., 46080., 20712., 21648.,
      22584., 23520., 25152., 26112., 27072., 28032., 29784., 30768., 31752.,
      32736., 34608., 35616., 36624., 37632., 16776., 17616., 18456., 19296.,
      20832., 21696., 22560., 23424., 25080., 25968., 26856., 27744., 29520.,
      30432., 31344., 32256., 15912., 16656., 17400., 18144., 19584., 20352.,
      21120., 21888., 23448., 24240., 25032., 25824., 27504., 28320., 29136.,
      29952., 18120., 18768., 19416., 20064., 21408., 22080., 22752., 23424.,
      24888., 25584., 26280., 26976., 28560., 29280., 30000., 30720., 11976.,
      12624., 13272., 13920., 15264., 15936., 16608., 17280., 18744., 19440.,
      20136., 20832., 22416., 23136., 23856., 24576., 11112., 11664., 12216.,
      12768., 14016., 14592., 15168., 15744., 17112., 17712., 18312., 18912.,
      20400., 21024., 21648., 22272., 13320., 13776., 14232., 14688., 15840.,
      16320., 16800., 17280., 18552., 19056., 19560., 20064., 21456., 21984.,
      22512., 23040., 15720., 16272., 16824., 17376., 18624., 19200., 19776.,
      20352., 21720., 22320., 22920., 23520., 25008., 25632., 26256., 26880.,
      18120., 18768., 19416., 20064., 21408., 22080., 22752., 23424., 24888.,
      25584., 26280., 26976., 28560., 29280., 30000., 30720., 20520., 21264.,
      22008., 22752., 24192., 24960., 25728., 26496., 28056., 28848., 29640.,
      30432., 32112., 32928., 33744., 34560., 22920., 23760., 24600., 25440.,
      26976., 27840., 28704., 29568., 31224., 32112., 33000., 33888., 35664.,
      36576., 37488., 38400., 16776., 17616., 18456., 19296., 20832., 21696.,
      22560., 23424., 25080., 25968., 26856., 27744., 29520., 30432., 31344.,
      32256., 15912., 16656., 17400., 18144., 19584., 20352., 21120., 21888.,
      23448., 24240., 25032., 25824., 27504., 28320., 29136., 29952., 18120.,
      18768., 19416., 20064., 21408., 22080., 22752., 23424., 24888., 25584.,
      26280., 26976., 28560., 29280., 30000., 30720., 20520., 21264., 22008.,
      22752., 24192., 24960., 25728., 26496., 28056., 28848., 29640., 30432.,
      32112., 32928., 33744., 34560., 22920., 23760., 24600., 25440., 26976.,
      27840., 28704., 29568., 31224., 32112., 33000., 33888., 35664., 36576.,
      37488., 38400., 15912., 16656., 17400., 18144., 19584., 20352., 21120.,
      21888., 23448., 24240., 25032., 25824., 27504., 28320., 29136., 29952.,
      11976., 12624., 13272., 13920., 15264., 15936., 16608., 17280., 18744.,
      19440., 20136., 20832., 22416., 23136., 23856., 24576., 18120., 18768.,
      19416., 20064., 21408., 22080., 22752., 23424., 24888., 25584., 26280.,
      26976., 28560., 29280., 30000., 30720., 20520., 21264., 22008., 22752.,
      24192., 24960., 25728., 26496., 28056., 28848., 29640., 30432., 32112.,
      32928., 33744., 34560., 22920., 23760., 24600., 25440., 26976., 27840.,
      28704., 29568., 31224., 32112., 33000., 33888., 35664., 36576., 37488.,
      38400., 25320., 26256., 27192., 28128., 29760., 30720., 31680., 32640.,
      34392., 35376., 36360., 37344., 39216., 40224., 41232., 42240., 27720.,
      28752., 29784., 30816., 32544., 33600., 34656., 35712., 37560., 38640.,
      39720., 40800., 42768., 43872., 44976., 46080., 20712., 21648., 22584.,
      23520., 25152., 26112., 27072., 28032., 29784., 30768., 31752., 32736.,
      34608., 35616., 36624., 37632., 16776., 17616., 18456., 19296., 20832.,
      21696., 22560., 23424., 25080., 25968., 26856., 27744., 29520., 30432.,
      31344., 32256., 22920., 23760., 24600., 25440., 26976., 27840., 28704.,
      29568., 31224., 32112., 33000., 33888., 35664., 36576., 37488., 38400.,
      15912., 16656., 17400., 18144., 19584., 20352., 21120., 21888., 23448.,
      24240., 25032., 25824., 27504., 28320., 29136., 29952., 11976., 12624.,
      13272., 13920., 15264., 15936., 16608., 17280., 18744., 19440., 20136.,
      20832., 22416., 23136., 23856., 24576., 11112., 11664., 12216., 12768.,
      14016., 14592., 15168., 15744., 17112., 17712., 18312., 18912., 20400.,
      21024., 21648., 22272., 13320., 13776., 14232., 14688., 15840., 16320.,
      16800., 17280., 18552., 19056., 19560., 20064., 21456., 21984., 22512.,
      23040., 15720., 16272., 16824., 17376., 18624., 19200., 19776., 20352.,
      21720., 22320., 22920., 23520., 25008., 25632., 26256., 26880., 18120.,
      18768., 19416., 20064., 21408., 22080., 22752., 23424., 24888., 25584.,
      26280., 26976., 28560., 29280., 30000., 30720., 27720., 28752., 29784.,
      30816., 32544., 33600., 34656., 35712., 37560., 38640., 39720., 40800.,
      42768., 43872., 44976., 46080., 20712., 21648., 22584., 23520., 25152.,
      26112., 27072., 28032., 29784., 30768., 31752., 32736., 34608., 35616.,
      36624., 37632., 16776., 17616., 18456., 19296., 20832., 21696., 22560.,
      23424., 25080., 25968., 26856., 27744., 29520., 30432., 31344., 32256.,
      15912., 16656., 17400., 18144., 19584., 20352., 21120., 21888., 23448.,
      24240., 25032., 25824., 27504., 28320., 29136., 29952., 18120., 18768.,
      19416., 20064., 21408., 22080., 22752., 23424., 24888., 25584., 26280.,
      26976., 28560., 29280., 30000., 30720., 20520., 21264., 22008., 22752.,
      24192., 24960., 25728., 26496., 28056., 28848., 29640., 30432., 32112.,
      32928., 33744., 34560., 22920., 23760., 24600., 25440., 26976., 27840.,
      28704., 29568., 31224., 32112., 33000., 33888., 35664., 36576., 37488.,
      38400.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5040.,  6282.,  7560.,  8856.,  7560.,  6282.,  5040.,  8900.,  10953.,
      13048., 15164., 13048., 10953., 8900.,  6720.,  8376.,  10080., 11808.,
      10080., 8376.,  6720.,  11540., 14199., 16912., 19652., 16912., 14199.,
      11540., 6720.,  8376.,  10080., 11808., 10080., 8376.,  6720.,  8900.,
      10953., 13048., 15164., 13048., 10953., 8900.,  5040.,  6282.,  7560.,
      8856.,  7560.,  6282.,  5040.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19317., 19488., 19659., 19830., 20001., 20172., 20343., 20685., 20856.,
      21027., 21198., 21369., 21540., 21711., 22053., 22224., 22395., 22566.,
      22737., 22908., 23079., 23421., 23592., 23763., 23934., 24105., 24276.,
      24447., 24789., 24960., 25131., 25302., 25473., 25644., 25815., 26157.,
      26328., 26499., 26670., 26841., 27012., 27183., 27525., 27696., 27867.,
      28038., 28209., 28380., 28551.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7290.,  7920.,  8730.,  9540.,  10080., 11088., 11304., 12528., 8946.,
      10080., 6786.,  7812.,  4860.,  5760.,  8285.,  9000.,  9945.,  10866.,
      11508., 12656., 12932., 14328., 10241., 11536., 7773.,  8946.,  5570.,
      6600.,  9720.,  10560., 11640., 12720., 13440., 14784., 15072., 16704.,
      11928., 13440., 9048.,  10416., 6480.,  7680.,  10715., 11640., 12855.,
      14046., 14868., 16352., 16700., 18504., 13223., 14896., 10035., 11550.,
      7190.,  8520.,  9720.,  10560., 11640., 12720., 13440., 14784., 15072.,
      16704., 11928., 13440., 9048.,  10416., 6480.,  7680.,  8285.,  9000.,
      9945.,  10866., 11508., 12656., 12932., 14328., 10241., 11536., 7773.,
      8946.,  5570.,  6600.,  7290.,  7920.,  8730.,  9540.,  10080., 11088.,
      11304., 12528., 8946.,  10080., 6786.,  7812.,  4860.,  5760.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37167., 38634., 37491., 38976., 37815., 39318., 38139., 39660., 38463.,
      40002., 38787., 40344., 39111., 40686., 39759., 41370., 40083., 41712.,
      40407., 42054., 40731., 42396., 41055., 42738., 41379., 43080., 41703.,
      43422., 42351., 44106., 42675., 44448., 42999., 44790., 43323., 45132.,
      43647., 45474., 43971., 45816., 44295., 46158., 44943., 46842., 45267.,
      47184., 45591., 47526., 45915., 47868., 46239., 48210., 46563., 48552.,
      46887., 48894., 47535., 49578., 47859., 49920., 48183., 50262., 48507.,
      50604., 48831., 50946., 49155., 51288., 49479., 51630., 50127., 52314.,
      50451., 52656., 50775., 52998., 51099., 53340., 51423., 53682., 51747.,
      54024., 52071., 54366., 52719., 55050., 53043., 55392., 53367., 55734.,
      53691., 56076., 54015., 56418., 54339., 56760., 54663., 57102.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5310.,  5940.,  6570.,  7200.,  6858.,  7668.,  8478.,  9288.,  8208.,
      9216.,  10224., 11232., 9288.,  10512., 11736., 12960., 7254.,  8388.,
      9522.,  10656., 5922.,  6948.,  7974.,  9000.,  5364.,  6264.,  7164.,
      8064.,  6031.,  6746.,  7461.,  8176.,  7801.,  8722.,  9643.,  10564.,
      9356.,  10504., 11652., 12800., 10612., 12008., 13404., 14800., 8291.,
      9586.,  10881., 12176., 6773.,  7946.,  9119.,  10292., 6142.,  7172.,
      8202.,  9232.,  7080.,  7920.,  8760.,  9600.,  9144.,  10224., 11304.,
      12384., 10944., 12288., 13632., 14976., 12384., 14016., 15648., 17280.,
      9672.,  11184., 12696., 14208., 7896.,  9264.,  10632., 12000., 7152.,
      8352.,  9552.,  10752., 7801.,  8726.,  9651.,  10576., 10087., 11278.,
      12469., 13660., 12092., 13576., 15060., 16544., 13708., 15512., 17316.,
      19120., 10709., 12382., 14055., 15728., 8747.,  10262., 11777., 13292.,
      7930.,  9260.,  10590., 11920., 7080.,  7920.,  8760.,  9600.,  9144.,
      10224., 11304., 12384., 10944., 12288., 13632., 14976., 12384., 14016.,
      15648., 17280., 9672.,  11184., 12696., 14208., 7896.,  9264.,  10632.,
      12000., 7152.,  8352.,  9552.,  10752., 6031.,  6746.,  7461.,  8176.,
      7801.,  8722.,  9643.,  10564., 9356.,  10504., 11652., 12800., 10612.,
      12008., 13404., 14800., 8291.,  9586.,  10881., 12176., 6773.,  7946.,
      9119.,  10292., 6142.,  7172.,  8202.,  9232.,  5310.,  5940.,  6570.,
      7200.,  6858.,  7668.,  8478.,  9288.,  8208.,  9216.,  10224., 11232.,
      9288.,  10512., 11736., 12960., 7254.,  8388.,  9522.,  10656., 5922.,
      6948.,  7974.,  9000.,  5364.,  6264.,  7164.,  8064.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27555., 28254., 28953., 29652., 28185., 28902., 29619., 30336., 28815.,
      29550., 30285., 31020., 29445., 30198., 30951., 31704., 30075., 30846.,
      31617., 32388., 30705., 31494., 32283., 33072., 31335., 32142., 32949.,
      33756., 32595., 33438., 34281., 35124., 33225., 34086., 34947., 35808.,
      33855., 34734., 35613., 36492., 34485., 35382., 36279., 37176., 35115.,
      36030., 36945., 37860., 35745., 36678., 37611., 38544., 36375., 37326.,
      38277., 39228., 37635., 38622., 39609., 40596., 38265., 39270., 40275.,
      41280., 38895., 39918., 40941., 41964., 39525., 40566., 41607., 42648.,
      40155., 41214., 42273., 43332., 40785., 41862., 42939., 44016., 41415.,
      42510., 43605., 44700., 42675., 43806., 44937., 46068., 43305., 44454.,
      45603., 46752., 43935., 45102., 46269., 47436., 44565., 45750., 46935.,
      48120., 45195., 46398., 47601., 48804., 45825., 47046., 48267., 49488.,
      46455., 47694., 48933., 50172., 47715., 48990., 50265., 51540., 48345.,
      49638., 50931., 52224., 48975., 50286., 51597., 52908., 49605., 50934.,
      52263., 53592., 50235., 51582., 52929., 54276., 50865., 52230., 53595.,
      54960., 51495., 52878., 54261., 55644., 41747., 42910., 44073., 45236.,
      42377., 43558., 44739., 45920., 43007., 44206., 45405., 46604., 43637.,
      44854., 46071., 47288., 44267., 45502., 46737., 47972., 44897., 46150.,
      47403., 48656., 45527., 46798., 48069., 49340., 37827., 38878., 39929.,
      40980., 38457., 39526., 40595., 41664., 39087., 40174., 41261., 42348.,
      39717., 40822., 41927., 43032., 40347., 41470., 42593., 43716., 40977.,
      42118., 43259., 44400., 41607., 42766., 43925., 45084.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5670.,  7200.,  7740.,  9576.,  9954.,  12096., 12240., 14688., 9954.,
      12096., 7740.,  9576.,  5670.,  7200.,  6615.,  8400.,  9030.,  11172.,
      11613., 14112., 14280., 17136., 11613., 14112., 9030.,  11172., 6615.,
      8400.,  7560.,  9600.,  10320., 12768., 13272., 16128., 16320., 19584.,
      13272., 16128., 10320., 12768., 7560.,  9600.,  8505.,  10800., 11610.,
      14364., 14931., 18144., 18360., 22032., 14931., 18144., 11610., 14364.,
      8505.,  10800., 7560.,  9600.,  10320., 12768., 13272., 16128., 16320.,
      19584., 13272., 16128., 10320., 12768., 7560.,  9600.,  6615.,  8400.,
      9030.,  11172., 11613., 14112., 14280., 17136., 11613., 14112., 9030.,
      11172., 6615.,  8400.,  5670.,  7200.,  7740.,  9576.,  9954.,  12096.,
      12240., 14688., 9954.,  12096., 7740.,  9576.,  5670.,  7200.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27930., 29652., 28578., 30336., 29226., 31020., 29874., 31704., 30522.,
      32388., 31170., 33072., 31818., 33756., 33114., 35124., 33762., 35808.,
      34410., 36492., 35058., 37176., 35706., 37860., 36354., 38544., 37002.,
      39228., 38298., 40596., 38946., 41280., 39594., 41964., 40242., 42648.,
      40890., 43332., 41538., 44016., 42186., 44700., 43482., 46068., 44130.,
      46752., 44778., 47436., 45426., 48120., 46074., 48804., 46722., 49488.,
      47370., 50172., 48666., 51540., 49314., 52224., 49962., 52908., 50610.,
      53592., 51258., 54276., 51906., 54960., 52554., 55644., 42586., 45236.,
      43234., 45920., 43882., 46604., 44530., 47288., 45178., 47972., 45826.,
      48656., 46474., 49340., 38554., 40980., 39202., 41664., 39850., 42348.,
      40498., 43032., 41146., 43716., 41794., 44400., 42442., 45084.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3978.,  4428.,  5796.,  6336.,  5616.,  6264.,  8028.,  8784.,  7506.,
      8388.,  10512., 11520., 9504.,  10656., 13104., 14400., 7542.,  8676.,
      10836., 12096., 6336.,  7416.,  9324.,  10512., 6030.,  7020.,  8712.,
      9792.,  4641.,  5166.,  6762.,  7392.,  6552.,  7308.,  9366.,  10248.,
      8757.,  9786.,  12264., 13440., 11088., 12432., 15288., 16800., 8799.,
      10122., 12642., 14112., 7392.,  8652.,  10878., 12264., 7035.,  8190.,
      10164., 11424., 5304.,  5904.,  7728.,  8448.,  7488.,  8352.,  10704.,
      11712., 10008., 11184., 14016., 15360., 12672., 14208., 17472., 19200.,
      10056., 11568., 14448., 16128., 8448.,  9888.,  12432., 14016., 8040.,
      9360.,  11616., 13056., 5967.,  6642.,  8694.,  9504.,  8424.,  9396.,
      12042., 13176., 11259., 12582., 15768., 17280., 14256., 15984., 19656.,
      21600., 11313., 13014., 16254., 18144., 9504.,  11124., 13986., 15768.,
      9045.,  10530., 13068., 14688., 5304.,  5904.,  7728.,  8448.,  7488.,
      8352.,  10704., 11712., 10008., 11184., 14016., 15360., 12672., 14208.,
      17472., 19200., 10056., 11568., 14448., 16128., 8448.,  9888.,  12432.,
      14016., 8040.,  9360.,  11616., 13056., 4641.,  5166.,  6762.,  7392.,
      6552.,  7308.,  9366.,  10248., 8757.,  9786.,  12264., 13440., 11088.,
      12432., 15288., 16800., 8799.,  10122., 12642., 14112., 7392.,  8652.,
      10878., 12264., 7035.,  8190.,  10164., 11424., 3978.,  4428.,  5796.,
      6336.,  5616.,  6264.,  8028.,  8784.,  7506.,  8388.,  10512., 11520.,
      9504.,  10656., 13104., 14400., 7542.,  8676.,  10836., 12096., 6336.,
      7416.,  9324.,  10512., 6030.,  7020.,  8712.,  9792.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18768., 19252., 20274., 20776., 19772., 20292., 21350., 21888., 20776.,
      21332., 22426., 23000., 21780., 22372., 23502., 24112., 22784., 23412.,
      24578., 25224., 23788., 24452., 25654., 26336., 24792., 25492., 26730.,
      27448., 13744., 14260., 15314., 15848., 14748., 15300., 16390., 16960.,
      15752., 16340., 17466., 18072., 16756., 17380., 18542., 19184., 17760.,
      18420., 19618., 20296., 18764., 19460., 20694., 21408., 19768., 20500.,
      21770., 22520., 8336.,  8756.,  9714.,  10152., 9340.,  9796.,  10790.,
      11264., 10344., 10836., 11866., 12376., 11348., 11876., 12942., 13488.,
      12352., 12916., 14018., 14600., 13356., 13956., 15094., 15712., 14360.,
      14996., 16170., 16824., 11504., 11956., 12946., 13416., 12508., 12996.,
      14022., 14528., 13512., 14036., 15098., 15640., 14516., 15076., 16174.,
      16752., 15520., 16116., 17250., 17864., 16524., 17156., 18326., 18976.,
      17528., 18196., 19402., 20088., 18768., 19252., 20274., 20776., 19772.,
      20292., 21350., 21888., 20776., 21332., 22426., 23000., 21780., 22372.,
      23502., 24112., 22784., 23412., 24578., 25224., 23788., 24452., 25654.,
      26336., 24792., 25492., 26730., 27448., 13744., 14260., 15314., 15848.,
      14748., 15300., 16390., 16960., 15752., 16340., 17466., 18072., 16756.,
      17380., 18542., 19184., 17760., 18420., 19618., 20296., 18764., 19460.,
      20694., 21408., 19768., 20500., 21770., 22520., 8336.,  8756.,  9714.,
      10152., 9340.,  9796.,  10790., 11264., 10344., 10836., 11866., 12376.,
      11348., 11876., 12942., 13488., 12352., 12916., 14018., 14600., 13356.,
      13956., 15094., 15712., 14360., 14996., 16170., 16824.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2610.,  3060.,  3510.,  3960.,  5292.,  5832.,  6372.,  6912.,  3672.,
      4320.,  4968.,  5616.,  7236.,  7992.,  8748.,  9504.,  4914.,  5796.,
      6678.,  7560.,  9648.,  10656., 11664., 12672., 6336.,  7488.,  8640.,
      9792.,  12240., 13536., 14832., 16128., 5022.,  6156.,  7290.,  8424.,
      10620., 11880., 13140., 14400., 5832.,  6912.,  7992.,  9072.,  11124.,
      12312., 13500., 14688., 4158.,  5148.,  6138.,  7128.,  8856.,  9936.,
      11016., 12096., 3045.,  3570.,  4095.,  4620.,  6174.,  6804.,  7434.,
      8064.,  4284.,  5040.,  5796.,  6552.,  8442.,  9324.,  10206., 11088.,
      5733.,  6762.,  7791.,  8820.,  11256., 12432., 13608., 14784., 7392.,
      8736.,  10080., 11424., 14280., 15792., 17304., 18816., 5859.,  7182.,
      8505.,  9828.,  12390., 13860., 15330., 16800., 6804.,  8064.,  9324.,
      10584., 12978., 14364., 15750., 17136., 4851.,  6006.,  7161.,  8316.,
      10332., 11592., 12852., 14112., 3480.,  4080.,  4680.,  5280.,  7056.,
      7776.,  8496.,  9216.,  4896.,  5760.,  6624.,  7488.,  9648.,  10656.,
      11664., 12672., 6552.,  7728.,  8904.,  10080., 12864., 14208., 15552.,
      16896., 8448.,  9984.,  11520., 13056., 16320., 18048., 19776., 21504.,
      6696.,  8208.,  9720.,  11232., 14160., 15840., 17520., 19200., 7776.,
      9216.,  10656., 12096., 14832., 16416., 18000., 19584., 5544.,  6864.,
      8184.,  9504.,  11808., 13248., 14688., 16128., 3915.,  4590.,  5265.,
      5940.,  7938.,  8748.,  9558.,  10368., 5508.,  6480.,  7452.,  8424.,
      10854., 11988., 13122., 14256., 7371.,  8694.,  10017., 11340., 14472.,
      15984., 17496., 19008., 9504.,  11232., 12960., 14688., 18360., 20304.,
      22248., 24192., 7533.,  9234.,  10935., 12636., 15930., 17820., 19710.,
      21600., 8748.,  10368., 11988., 13608., 16686., 18468., 20250., 22032.,
      6237.,  7722.,  9207.,  10692., 13284., 14904., 16524., 18144., 3480.,
      4080.,  4680.,  5280.,  7056.,  7776.,  8496.,  9216.,  4896.,  5760.,
      6624.,  7488.,  9648.,  10656., 11664., 12672., 6552.,  7728.,  8904.,
      10080., 12864., 14208., 15552., 16896., 8448.,  9984.,  11520., 13056.,
      16320., 18048., 19776., 21504., 6696.,  8208.,  9720.,  11232., 14160.,
      15840., 17520., 19200., 7776.,  9216.,  10656., 12096., 14832., 16416.,
      18000., 19584., 5544.,  6864.,  8184.,  9504.,  11808., 13248., 14688.,
      16128., 3045.,  3570.,  4095.,  4620.,  6174.,  6804.,  7434.,  8064.,
      4284.,  5040.,  5796.,  6552.,  8442.,  9324.,  10206., 11088., 5733.,
      6762.,  7791.,  8820.,  11256., 12432., 13608., 14784., 7392.,  8736.,
      10080., 11424., 14280., 15792., 17304., 18816., 5859.,  7182.,  8505.,
      9828.,  12390., 13860., 15330., 16800., 6804.,  8064.,  9324.,  10584.,
      12978., 14364., 15750., 17136., 4851.,  6006.,  7161.,  8316.,  10332.,
      11592., 12852., 14112., 2610.,  3060.,  3510.,  3960.,  5292.,  5832.,
      6372.,  6912.,  3672.,  4320.,  4968.,  5616.,  7236.,  7992.,  8748.,
      9504.,  4914.,  5796.,  6678.,  7560.,  9648.,  10656., 11664., 12672.,
      6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 5022.,
      6156.,  7290.,  8424.,  10620., 11880., 13140., 14400., 5832.,  6912.,
      7992.,  9072.,  11124., 12312., 13500., 14688., 4158.,  5148.,  6138.,
      7128.,  8856.,  9936.,  11016., 12096.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15548., 16032., 16516., 17000., 18030., 18532., 19034., 19536., 16496.,
      17016., 17536., 18056., 19122., 19660., 20198., 20736., 17444., 18000.,
      18556., 19112., 20214., 20788., 21362., 21936., 18392., 18984., 19576.,
      20168., 21306., 21916., 22526., 23136., 19340., 19968., 20596., 21224.,
      22398., 23044., 23690., 24336., 20288., 20952., 21616., 22280., 23490.,
      24172., 24854., 25536., 21236., 21936., 22636., 23336., 24582., 25300.,
      26018., 26736., 13660., 14176., 14692., 15208., 16270., 16804., 17338.,
      17872., 14608., 15160., 15712., 16264., 17362., 17932., 18502., 19072.,
      15556., 16144., 16732., 17320., 18454., 19060., 19666., 20272., 16504.,
      17128., 17752., 18376., 19546., 20188., 20830., 21472., 17452., 18112.,
      18772., 19432., 20638., 21316., 21994., 22672., 18400., 19096., 19792.,
      20488., 21730., 22444., 23158., 23872., 19348., 20080., 20812., 21544.,
      22822., 23572., 24322., 25072., 11132., 11552., 11972., 12392., 13358.,
      13796., 14234., 14672., 12080., 12536., 12992., 13448., 14450., 14924.,
      15398., 15872., 13028., 13520., 14012., 14504., 15542., 16052., 16562.,
      17072., 13976., 14504., 15032., 15560., 16634., 17180., 17726., 18272.,
      14924., 15488., 16052., 16616., 17726., 18308., 18890., 19472., 15872.,
      16472., 17072., 17672., 18818., 19436., 20054., 20672., 16820., 17456.,
      18092., 18728., 19910., 20564., 21218., 21872., 9244.,  9696.,  10148.,
      10600., 11598., 12068., 12538., 13008., 10192., 10680., 11168., 11656.,
      12690., 13196., 13702., 14208., 11140., 11664., 12188., 12712., 13782.,
      14324., 14866., 15408., 12088., 12648., 13208., 13768., 14874., 15452.,
      16030., 16608., 13036., 13632., 14228., 14824., 15966., 16580., 17194.,
      17808., 13984., 14616., 15248., 15880., 17058., 17708., 18358., 19008.,
      14932., 15600., 16268., 16936., 18150., 18836., 19522., 20208., 15548.,
      16032., 16516., 17000., 18030., 18532., 19034., 19536., 16496., 17016.,
      17536., 18056., 19122., 19660., 20198., 20736., 17444., 18000., 18556.,
      19112., 20214., 20788., 21362., 21936., 18392., 18984., 19576., 20168.,
      21306., 21916., 22526., 23136., 19340., 19968., 20596., 21224., 22398.,
      23044., 23690., 24336., 20288., 20952., 21616., 22280., 23490., 24172.,
      24854., 25536., 21236., 21936., 22636., 23336., 24582., 25300., 26018.,
      26736., 13660., 14176., 14692., 15208., 16270., 16804., 17338., 17872.,
      14608., 15160., 15712., 16264., 17362., 17932., 18502., 19072., 15556.,
      16144., 16732., 17320., 18454., 19060., 19666., 20272., 16504., 17128.,
      17752., 18376., 19546., 20188., 20830., 21472., 17452., 18112., 18772.,
      19432., 20638., 21316., 21994., 22672., 18400., 19096., 19792., 20488.,
      21730., 22444., 23158., 23872., 19348., 20080., 20812., 21544., 22822.,
      23572., 24322., 25072., 11132., 11552., 11972., 12392., 13358., 13796.,
      14234., 14672., 12080., 12536., 12992., 13448., 14450., 14924., 15398.,
      15872., 13028., 13520., 14012., 14504., 15542., 16052., 16562., 17072.,
      13976., 14504., 15032., 15560., 16634., 17180., 17726., 18272., 14924.,
      15488., 16052., 16616., 17726., 18308., 18890., 19472., 15872., 16472.,
      17072., 17672., 18818., 19436., 20054., 20672., 16820., 17456., 18092.,
      18728., 19910., 20564., 21218., 21872.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3474.,  4824.,  6354.,  8064.,  3996.,  5616.,  7452.,  9504.,  6246.,
      8136.,  10278., 12672., 9936.,  12096., 14544., 17280., 6246.,  8136.,
      10278., 12672., 3996.,  5616.,  7452.,  9504.,  3474.,  4824.,  6354.,
      8064.,  4053.,  5628.,  7413.,  9408.,  4662.,  6552.,  8694.,  11088.,
      7287.,  9492.,  11991., 14784., 11592., 14112., 16968., 20160., 7287.,
      9492.,  11991., 14784., 4662.,  6552.,  8694.,  11088., 4053.,  5628.,
      7413.,  9408.,  4632.,  6432.,  8472.,  10752., 5328.,  7488.,  9936.,
      12672., 8328.,  10848., 13704., 16896., 13248., 16128., 19392., 23040.,
      8328.,  10848., 13704., 16896., 5328.,  7488.,  9936.,  12672., 4632.,
      6432.,  8472.,  10752., 5211.,  7236.,  9531.,  12096., 5994.,  8424.,
      11178., 14256., 9369.,  12204., 15417., 19008., 14904., 18144., 21816.,
      25920., 9369.,  12204., 15417., 19008., 5994.,  8424.,  11178., 14256.,
      5211.,  7236.,  9531.,  12096., 4632.,  6432.,  8472.,  10752., 5328.,
      7488.,  9936.,  12672., 8328.,  10848., 13704., 16896., 13248., 16128.,
      19392., 23040., 8328.,  10848., 13704., 16896., 5328.,  7488.,  9936.,
      12672., 4632.,  6432.,  8472.,  10752., 4053.,  5628.,  7413.,  9408.,
      4662.,  6552.,  8694.,  11088., 7287.,  9492.,  11991., 14784., 11592.,
      14112., 16968., 20160., 7287.,  9492.,  11991., 14784., 4662.,  6552.,
      8694.,  11088., 4053.,  5628.,  7413.,  9408.,  3474.,  4824.,  6354.,
      8064.,  3996.,  5616.,  7452.,  9504.,  6246.,  8136.,  10278., 12672.,
      9936.,  12096., 14544., 17280., 6246.,  8136.,  10278., 12672., 3996.,
      5616.,  7452.,  9504.,  3474.,  4824.,  6354.,  8064.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37418., 39016., 40650., 42320., 39938., 41608., 43314., 45056., 42458.,
      44200., 45978., 47792., 44978., 46792., 48642., 50528., 47498., 49384.,
      51306., 53264., 50018., 51976., 53970., 56000., 52538., 54568., 56634.,
      58736., 31466., 33128., 34826., 36560., 33986., 35720., 37490., 39296.,
      36506., 38312., 40154., 42032., 39026., 40904., 42818., 44768., 41546.,
      43496., 45482., 47504., 44066., 46088., 48146., 50240., 46586., 48680.,
      50810., 52976., 24746., 26216., 27722., 29264., 27266., 28808., 30386.,
      32000., 29786., 31400., 33050., 34736., 32306., 33992., 35714., 37472.,
      34826., 36584., 38378., 40208., 37346., 39176., 41042., 42944., 39866.,
      41768., 43706., 45680., 35178., 36712., 38282., 39888., 37698., 39304.,
      40946., 42624., 40218., 41896., 43610., 45360., 42738., 44488., 46274.,
      48096., 45258., 47080., 48938., 50832., 47778., 49672., 51602., 53568.,
      50298., 52264., 54266., 56304., 37418., 39016., 40650., 42320., 39938.,
      41608., 43314., 45056., 42458., 44200., 45978., 47792., 44978., 46792.,
      48642., 50528., 47498., 49384., 51306., 53264., 50018., 51976., 53970.,
      56000., 52538., 54568., 56634., 58736., 31466., 33128., 34826., 36560.,
      33986., 35720., 37490., 39296., 36506., 38312., 40154., 42032., 39026.,
      40904., 42818., 44768., 41546., 43496., 45482., 47504., 44066., 46088.,
      48146., 50240., 46586., 48680., 50810., 52976., 24746., 26216., 27722.,
      29264., 27266., 28808., 30386., 32000., 29786., 31400., 33050., 34736.,
      32306., 33992., 35714., 37472., 34826., 36584., 38378., 40208., 37346.,
      39176., 41042., 42944., 39866., 41768., 43706., 45680.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2106.,  2628.,  3852.,  4464.,  5958.,  6660.,  8424.,  9216.,  3924.,
      4536.,  5904.,  6624.,  8316.,  9144.,  11160., 12096., 3654.,  4428.,
      6156.,  7056.,  9162.,  10188., 12672., 13824., 6192.,  7200.,  9216.,
      10368., 12816., 14112., 16992., 18432., 3726.,  4716.,  6516.,  7632.,
      9810.,  11052., 13608., 14976., 5364.,  6264.,  7920.,  8928.,  10908.,
      12024., 14328., 15552., 2178.,  2916.,  4212.,  5040.,  6606.,  7524.,
      9360.,  10368., 2457.,  3066.,  4494.,  5208.,  6951.,  7770.,  9828.,
      10752., 4578.,  5292.,  6888.,  7728.,  9702.,  10668., 13020., 14112.,
      4263.,  5166.,  7182.,  8232.,  10689., 11886., 14784., 16128., 7224.,
      8400.,  10752., 12096., 14952., 16464., 19824., 21504., 4347.,  5502.,
      7602.,  8904.,  11445., 12894., 15876., 17472., 6258.,  7308.,  9240.,
      10416., 12726., 14028., 16716., 18144., 2541.,  3402.,  4914.,  5880.,
      7707.,  8778.,  10920., 12096., 2808.,  3504.,  5136.,  5952.,  7944.,
      8880.,  11232., 12288., 5232.,  6048.,  7872.,  8832.,  11088., 12192.,
      14880., 16128., 4872.,  5904.,  8208.,  9408.,  12216., 13584., 16896.,
      18432., 8256.,  9600.,  12288., 13824., 17088., 18816., 22656., 24576.,
      4968.,  6288.,  8688.,  10176., 13080., 14736., 18144., 19968., 7152.,
      8352.,  10560., 11904., 14544., 16032., 19104., 20736., 2904.,  3888.,
      5616.,  6720.,  8808.,  10032., 12480., 13824., 3159.,  3942.,  5778.,
      6696.,  8937.,  9990.,  12636., 13824., 5886.,  6804.,  8856.,  9936.,
      12474., 13716., 16740., 18144., 5481.,  6642.,  9234.,  10584., 13743.,
      15282., 19008., 20736., 9288.,  10800., 13824., 15552., 19224., 21168.,
      25488., 27648., 5589.,  7074.,  9774.,  11448., 14715., 16578., 20412.,
      22464., 8046.,  9396.,  11880., 13392., 16362., 18036., 21492., 23328.,
      3267.,  4374.,  6318.,  7560.,  9909.,  11286., 14040., 15552., 2808.,
      3504.,  5136.,  5952.,  7944.,  8880.,  11232., 12288., 5232.,  6048.,
      7872.,  8832.,  11088., 12192., 14880., 16128., 4872.,  5904.,  8208.,
      9408.,  12216., 13584., 16896., 18432., 8256.,  9600.,  12288., 13824.,
      17088., 18816., 22656., 24576., 4968.,  6288.,  8688.,  10176., 13080.,
      14736., 18144., 19968., 7152.,  8352.,  10560., 11904., 14544., 16032.,
      19104., 20736., 2904.,  3888.,  5616.,  6720.,  8808.,  10032., 12480.,
      13824., 2457.,  3066.,  4494.,  5208.,  6951.,  7770.,  9828.,  10752.,
      4578.,  5292.,  6888.,  7728.,  9702.,  10668., 13020., 14112., 4263.,
      5166.,  7182.,  8232.,  10689., 11886., 14784., 16128., 7224.,  8400.,
      10752., 12096., 14952., 16464., 19824., 21504., 4347.,  5502.,  7602.,
      8904.,  11445., 12894., 15876., 17472., 6258.,  7308.,  9240.,  10416.,
      12726., 14028., 16716., 18144., 2541.,  3402.,  4914.,  5880.,  7707.,
      8778.,  10920., 12096., 2106.,  2628.,  3852.,  4464.,  5958.,  6660.,
      8424.,  9216.,  3924.,  4536.,  5904.,  6624.,  8316.,  9144.,  11160.,
      12096., 3654.,  4428.,  6156.,  7056.,  9162.,  10188., 12672., 13824.,
      6192.,  7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 3726.,
      4716.,  6516.,  7632.,  9810.,  11052., 13608., 14976., 5364.,  6264.,
      7920.,  8928.,  10908., 12024., 14328., 15552., 2178.,  2916.,  4212.,
      5040.,  6606.,  7524.,  9360.,  10368.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11038., 11348., 12168., 12496., 13370., 13716., 14644., 15008., 12934.,
      13316., 14208., 14608., 15554., 15972., 16972., 17408., 14830., 15284.,
      16248., 16720., 17738., 18228., 19300., 19808., 16726., 17252., 18288.,
      18832., 19922., 20484., 21628., 22208., 18622., 19220., 20328., 20944.,
      22106., 22740., 23956., 24608., 20518., 21188., 22368., 23056., 24290.,
      24996., 26284., 27008., 22414., 23156., 24408., 25168., 26474., 27252.,
      28612., 29408., 7262.,  7636.,  8520.,  8912.,  9850.,  10260., 11252.,
      11680., 9158.,  9604.,  10560., 11024., 12034., 12516., 13580., 14080.,
      11054., 11572., 12600., 13136., 14218., 14772., 15908., 16480., 12950.,
      13540., 14640., 15248., 16402., 17028., 18236., 18880., 14846., 15508.,
      16680., 17360., 18586., 19284., 20564., 21280., 16742., 17476., 18720.,
      19472., 20770., 21540., 22892., 23680., 18638., 19444., 20760., 21584.,
      22954., 23796., 25220., 26080., 11038., 11348., 12168., 12496., 13370.,
      13716., 14644., 15008., 12934., 13316., 14208., 14608., 15554., 15972.,
      16972., 17408., 14830., 15284., 16248., 16720., 17738., 18228., 19300.,
      19808., 16726., 17252., 18288., 18832., 19922., 20484., 21628., 22208.,
      18622., 19220., 20328., 20944., 22106., 22740., 23956., 24608., 20518.,
      21188., 22368., 23056., 24290., 24996., 26284., 27008., 22414., 23156.,
      24408., 25168., 26474., 27252., 28612., 29408., 7262.,  7636.,  8520.,
      8912.,  9850.,  10260., 11252., 11680., 9158.,  9604.,  10560., 11024.,
      12034., 12516., 13580., 14080., 11054., 11572., 12600., 13136., 14218.,
      14772., 15908., 16480., 12950., 13540., 14640., 15248., 16402., 17028.,
      18236., 18880., 14846., 15508., 16680., 17360., 18586., 19284., 20564.,
      21280., 16742., 17476., 18720., 19472., 20770., 21540., 22892., 23680.,
      18638., 19444., 20760., 21584., 22954., 23796., 25220., 26080., 11038.,
      11348., 12168., 12496., 13370., 13716., 14644., 15008., 12934., 13316.,
      14208., 14608., 15554., 15972., 16972., 17408., 14830., 15284., 16248.,
      16720., 17738., 18228., 19300., 19808., 16726., 17252., 18288., 18832.,
      19922., 20484., 21628., 22208., 18622., 19220., 20328., 20944., 22106.,
      22740., 23956., 24608., 20518., 21188., 22368., 23056., 24290., 24996.,
      26284., 27008., 22414., 23156., 24408., 25168., 26474., 27252., 28612.,
      29408., 7262.,  7636.,  8520.,  8912.,  9850.,  10260., 11252., 11680.,
      9158.,  9604.,  10560., 11024., 12034., 12516., 13580., 14080., 11054.,
      11572., 12600., 13136., 14218., 14772., 15908., 16480., 12950., 13540.,
      14640., 15248., 16402., 17028., 18236., 18880., 14846., 15508., 16680.,
      17360., 18586., 19284., 20564., 21280., 16742., 17476., 18720., 19472.,
      20770., 21540., 22892., 23680., 18638., 19444., 20760., 21584., 22954.,
      23796., 25220., 26080., 11038., 11348., 12168., 12496., 13370., 13716.,
      14644., 15008., 12934., 13316., 14208., 14608., 15554., 15972., 16972.,
      17408., 14830., 15284., 16248., 16720., 17738., 18228., 19300., 19808.,
      16726., 17252., 18288., 18832., 19922., 20484., 21628., 22208., 18622.,
      19220., 20328., 20944., 22106., 22740., 23956., 24608., 20518., 21188.,
      22368., 23056., 24290., 24996., 26284., 27008., 22414., 23156., 24408.,
      25168., 26474., 27252., 28612., 29408.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      522.,   1044.,  1566.,  2088.,  3060.,  3672.,  4284.,  4896.,  6318.,
      7020.,  7722.,  8424.,  10296., 11088., 11880., 12672., 612.,   1224.,
      1836.,  2448.,  3600.,  4320.,  5040.,  5760.,  7452.,  8280.,  9108.,
      9936.,  12168., 13104., 14040., 14976., 774.,   1548.,  2322.,  3096.,
      4500.,  5400.,  6300.,  7200.,  9234.,  10260., 11286., 12312., 14976.,
      16128., 17280., 18432., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,
      8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600.,
      23040., 990.,   1980.,  2970.,  3960.,  5580.,  6696.,  7812.,  8928.,
      11178., 12420., 13662., 14904., 17784., 19152., 20520., 21888., 900.,
      1800.,  2700.,  3600.,  5040.,  6048.,  7056.,  8064.,  10044., 11160.,
      12276., 13392., 15912., 17136., 18360., 19584., 738.,   1476.,  2214.,
      2952.,  4140.,  4968.,  5796.,  6624.,  8262.,  9180.,  10098., 11016.,
      13104., 14112., 15120., 16128., 609.,   1218.,  1827.,  2436.,  3570.,
      4284.,  4998.,  5712.,  7371.,  8190.,  9009.,  9828.,  12012., 12936.,
      13860., 14784., 714.,   1428.,  2142.,  2856.,  4200.,  5040.,  5880.,
      6720.,  8694.,  9660.,  10626., 11592., 14196., 15288., 16380., 17472.,
      903.,   1806.,  2709.,  3612.,  5250.,  6300.,  7350.,  8400.,  10773.,
      11970., 13167., 14364., 17472., 18816., 20160., 21504., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1155.,  2310.,  3465.,  4620.,
      6510.,  7812.,  9114.,  10416., 13041., 14490., 15939., 17388., 20748.,
      22344., 23940., 25536., 1050.,  2100.,  3150.,  4200.,  5880.,  7056.,
      8232.,  9408.,  11718., 13020., 14322., 15624., 18564., 19992., 21420.,
      22848., 861.,   1722.,  2583.,  3444.,  4830.,  5796.,  6762.,  7728.,
      9639.,  10710., 11781., 12852., 15288., 16464., 17640., 18816., 696.,
      1392.,  2088.,  2784.,  4080.,  4896.,  5712.,  6528.,  8424.,  9360.,
      10296., 11232., 13728., 14784., 15840., 16896., 816.,   1632.,  2448.,
      3264.,  4800.,  5760.,  6720.,  7680.,  9936.,  11040., 12144., 13248.,
      16224., 17472., 18720., 19968., 1032.,  2064.,  3096.,  4128.,  6000.,
      7200.,  8400.,  9600.,  12312., 13680., 15048., 16416., 19968., 21504.,
      23040., 24576., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752.,
      12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720.,
      1320.,  2640.,  3960.,  5280.,  7440.,  8928.,  10416., 11904., 14904.,
      16560., 18216., 19872., 23712., 25536., 27360., 29184., 1200.,  2400.,
      3600.,  4800.,  6720.,  8064.,  9408.,  10752., 13392., 14880., 16368.,
      17856., 21216., 22848., 24480., 26112., 984.,   1968.,  2952.,  3936.,
      5520.,  6624.,  7728.,  8832.,  11016., 12240., 13464., 14688., 17472.,
      18816., 20160., 21504., 783.,   1566.,  2349.,  3132.,  4590.,  5508.,
      6426.,  7344.,  9477.,  10530., 11583., 12636., 15444., 16632., 17820.,
      19008., 918.,   1836.,  2754.,  3672.,  5400.,  6480.,  7560.,  8640.,
      11178., 12420., 13662., 14904., 18252., 19656., 21060., 22464., 1161.,
      2322.,  3483.,  4644.,  6750.,  8100.,  9450.,  10800., 13851., 15390.,
      16929., 18468., 22464., 24192., 25920., 27648., 1512.,  3024.,  4536.,
      6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328.,
      28080., 30240., 32400., 34560., 1485.,  2970.,  4455.,  5940.,  8370.,
      10044., 11718., 13392., 16767., 18630., 20493., 22356., 26676., 28728.,
      30780., 32832., 1350.,  2700.,  4050.,  5400.,  7560.,  9072.,  10584.,
      12096., 15066., 16740., 18414., 20088., 23868., 25704., 27540., 29376.,
      1107.,  2214.,  3321.,  4428.,  6210.,  7452.,  8694.,  9936.,  12393.,
      13770., 15147., 16524., 19656., 21168., 22680., 24192., 696.,   1392.,
      2088.,  2784.,  4080.,  4896.,  5712.,  6528.,  8424.,  9360.,  10296.,
      11232., 13728., 14784., 15840., 16896., 816.,   1632.,  2448.,  3264.,
      4800.,  5760.,  6720.,  7680.,  9936.,  11040., 12144., 13248., 16224.,
      17472., 18720., 19968., 1032.,  2064.,  3096.,  4128.,  6000.,  7200.,
      8400.,  9600.,  12312., 13680., 15048., 16416., 19968., 21504., 23040.,
      24576., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288.,
      15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720., 1320.,
      2640.,  3960.,  5280.,  7440.,  8928.,  10416., 11904., 14904., 16560.,
      18216., 19872., 23712., 25536., 27360., 29184., 1200.,  2400.,  3600.,
      4800.,  6720.,  8064.,  9408.,  10752., 13392., 14880., 16368., 17856.,
      21216., 22848., 24480., 26112., 984.,   1968.,  2952.,  3936.,  5520.,
      6624.,  7728.,  8832.,  11016., 12240., 13464., 14688., 17472., 18816.,
      20160., 21504., 609.,   1218.,  1827.,  2436.,  3570.,  4284.,  4998.,
      5712.,  7371.,  8190.,  9009.,  9828.,  12012., 12936., 13860., 14784.,
      714.,   1428.,  2142.,  2856.,  4200.,  5040.,  5880.,  6720.,  8694.,
      9660.,  10626., 11592., 14196., 15288., 16380., 17472., 903.,   1806.,
      2709.,  3612.,  5250.,  6300.,  7350.,  8400.,  10773., 11970., 13167.,
      14364., 17472., 18816., 20160., 21504., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1155.,  2310.,  3465.,  4620.,  6510.,  7812.,
      9114.,  10416., 13041., 14490., 15939., 17388., 20748., 22344., 23940.,
      25536., 1050.,  2100.,  3150.,  4200.,  5880.,  7056.,  8232.,  9408.,
      11718., 13020., 14322., 15624., 18564., 19992., 21420., 22848., 861.,
      1722.,  2583.,  3444.,  4830.,  5796.,  6762.,  7728.,  9639.,  10710.,
      11781., 12852., 15288., 16464., 17640., 18816., 522.,   1044.,  1566.,
      2088.,  3060.,  3672.,  4284.,  4896.,  6318.,  7020.,  7722.,  8424.,
      10296., 11088., 11880., 12672., 612.,   1224.,  1836.,  2448.,  3600.,
      4320.,  5040.,  5760.,  7452.,  8280.,  9108.,  9936.,  12168., 13104.,
      14040., 14976., 774.,   1548.,  2322.,  3096.,  4500.,  5400.,  6300.,
      7200.,  9234.,  10260., 11286., 12312., 14976., 16128., 17280., 18432.,
      1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664.,
      12960., 14256., 15552., 18720., 20160., 21600., 23040., 990.,   1980.,
      2970.,  3960.,  5580.,  6696.,  7812.,  8928.,  11178., 12420., 13662.,
      14904., 17784., 19152., 20520., 21888., 900.,   1800.,  2700.,  3600.,
      5040.,  6048.,  7056.,  8064.,  10044., 11160., 12276., 13392., 15912.,
      17136., 18360., 19584., 738.,   1476.,  2214.,  2952.,  4140.,  4968.,
      5796.,  6624.,  8262.,  9180.,  10098., 11016., 13104., 14112., 15120.,
      16128.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12038., 12348., 12658., 12968., 13768., 14096., 14424., 14752., 15642.,
      15988., 16334., 16680., 17660., 18024., 18388., 18752., 13710., 14092.,
      14474., 14856., 15728., 16128., 16528., 16928., 17890., 18308., 18726.,
      19144., 20196., 20632., 21068., 21504., 15382., 15836., 16290., 16744.,
      17688., 18160., 18632., 19104., 20138., 20628., 21118., 21608., 22732.,
      23240., 23748., 24256., 17054., 17580., 18106., 18632., 19648., 20192.,
      20736., 21280., 22386., 22948., 23510., 24072., 25268., 25848., 26428.,
      27008., 18726., 19324., 19922., 20520., 21608., 22224., 22840., 23456.,
      24634., 25268., 25902., 26536., 27804., 28456., 29108., 29760., 20398.,
      21068., 21738., 22408., 23568., 24256., 24944., 25632., 26882., 27588.,
      28294., 29000., 30340., 31064., 31788., 32512., 22070., 22812., 23554.,
      24296., 25528., 26288., 27048., 27808., 29130., 29908., 30686., 31464.,
      32876., 33672., 34468., 35264., 4422.,  4796.,  5170.,  5544.,  6408.,
      6800.,  7192.,  7584.,  8538.,  8948.,  9358.,  9768.,  10812., 11240.,
      11668., 12096., 6094.,  6540.,  6986.,  7432.,  8368.,  8832.,  9296.,
      9760.,  10786., 11268., 11750., 12232., 13348., 13848., 14348., 14848.,
      7766.,  8284.,  8802.,  9320.,  10328., 10864., 11400., 11936., 13034.,
      13588., 14142., 14696., 15884., 16456., 17028., 17600., 9438.,  10028.,
      10618., 11208., 12288., 12896., 13504., 14112., 15282., 15908., 16534.,
      17160., 18420., 19064., 19708., 20352., 11110., 11772., 12434., 13096.,
      14248., 14928., 15608., 16288., 17530., 18228., 18926., 19624., 20956.,
      21672., 22388., 23104., 12782., 13516., 14250., 14984., 16208., 16960.,
      17712., 18464., 19778., 20548., 21318., 22088., 23492., 24280., 25068.,
      25856., 14454., 15260., 16066., 16872., 18168., 18992., 19816., 20640.,
      22026., 22868., 23710., 24552., 26028., 26888., 27748., 28608., 12038.,
      12348., 12658., 12968., 13768., 14096., 14424., 14752., 15642., 15988.,
      16334., 16680., 17660., 18024., 18388., 18752., 13710., 14092., 14474.,
      14856., 15728., 16128., 16528., 16928., 17890., 18308., 18726., 19144.,
      20196., 20632., 21068., 21504., 15382., 15836., 16290., 16744., 17688.,
      18160., 18632., 19104., 20138., 20628., 21118., 21608., 22732., 23240.,
      23748., 24256., 17054., 17580., 18106., 18632., 19648., 20192., 20736.,
      21280., 22386., 22948., 23510., 24072., 25268., 25848., 26428., 27008.,
      18726., 19324., 19922., 20520., 21608., 22224., 22840., 23456., 24634.,
      25268., 25902., 26536., 27804., 28456., 29108., 29760., 20398., 21068.,
      21738., 22408., 23568., 24256., 24944., 25632., 26882., 27588., 28294.,
      29000., 30340., 31064., 31788., 32512., 22070., 22812., 23554., 24296.,
      25528., 26288., 27048., 27808., 29130., 29908., 30686., 31464., 32876.,
      33672., 34468., 35264., 4422.,  4796.,  5170.,  5544.,  6408.,  6800.,
      7192.,  7584.,  8538.,  8948.,  9358.,  9768.,  10812., 11240., 11668.,
      12096., 6094.,  6540.,  6986.,  7432.,  8368.,  8832.,  9296.,  9760.,
      10786., 11268., 11750., 12232., 13348., 13848., 14348., 14848., 7766.,
      8284.,  8802.,  9320.,  10328., 10864., 11400., 11936., 13034., 13588.,
      14142., 14696., 15884., 16456., 17028., 17600., 9438.,  10028., 10618.,
      11208., 12288., 12896., 13504., 14112., 15282., 15908., 16534., 17160.,
      18420., 19064., 19708., 20352., 11110., 11772., 12434., 13096., 14248.,
      14928., 15608., 16288., 17530., 18228., 18926., 19624., 20956., 21672.,
      22388., 23104., 12782., 13516., 14250., 14984., 16208., 16960., 17712.,
      18464., 19778., 20548., 21318., 22088., 23492., 24280., 25068., 25856.,
      14454., 15260., 16066., 16872., 18168., 18992., 19816., 20640., 22026.,
      22868., 23710., 24552., 26028., 26888., 27748., 28608., 12038., 12348.,
      12658., 12968., 13768., 14096., 14424., 14752., 15642., 15988., 16334.,
      16680., 17660., 18024., 18388., 18752., 13710., 14092., 14474., 14856.,
      15728., 16128., 16528., 16928., 17890., 18308., 18726., 19144., 20196.,
      20632., 21068., 21504., 15382., 15836., 16290., 16744., 17688., 18160.,
      18632., 19104., 20138., 20628., 21118., 21608., 22732., 23240., 23748.,
      24256., 17054., 17580., 18106., 18632., 19648., 20192., 20736., 21280.,
      22386., 22948., 23510., 24072., 25268., 25848., 26428., 27008., 18726.,
      19324., 19922., 20520., 21608., 22224., 22840., 23456., 24634., 25268.,
      25902., 26536., 27804., 28456., 29108., 29760., 20398., 21068., 21738.,
      22408., 23568., 24256., 24944., 25632., 26882., 27588., 28294., 29000.,
      30340., 31064., 31788., 32512., 22070., 22812., 23554., 24296., 25528.,
      26288., 27048., 27808., 29130., 29908., 30686., 31464., 32876., 33672.,
      34468., 35264., 4422.,  4796.,  5170.,  5544.,  6408.,  6800.,  7192.,
      7584.,  8538.,  8948.,  9358.,  9768.,  10812., 11240., 11668., 12096.,
      6094.,  6540.,  6986.,  7432.,  8368.,  8832.,  9296.,  9760.,  10786.,
      11268., 11750., 12232., 13348., 13848., 14348., 14848., 7766.,  8284.,
      8802.,  9320.,  10328., 10864., 11400., 11936., 13034., 13588., 14142.,
      14696., 15884., 16456., 17028., 17600., 9438.,  10028., 10618., 11208.,
      12288., 12896., 13504., 14112., 15282., 15908., 16534., 17160., 18420.,
      19064., 19708., 20352., 11110., 11772., 12434., 13096., 14248., 14928.,
      15608., 16288., 17530., 18228., 18926., 19624., 20956., 21672., 22388.,
      23104., 12782., 13516., 14250., 14984., 16208., 16960., 17712., 18464.,
      19778., 20548., 21318., 22088., 23492., 24280., 25068., 25856., 14454.,
      15260., 16066., 16872., 18168., 18992., 19816., 20640., 22026., 22868.,
      23710., 24552., 26028., 26888., 27748., 28608., 12038., 12348., 12658.,
      12968., 13768., 14096., 14424., 14752., 15642., 15988., 16334., 16680.,
      17660., 18024., 18388., 18752., 13710., 14092., 14474., 14856., 15728.,
      16128., 16528., 16928., 17890., 18308., 18726., 19144., 20196., 20632.,
      21068., 21504., 15382., 15836., 16290., 16744., 17688., 18160., 18632.,
      19104., 20138., 20628., 21118., 21608., 22732., 23240., 23748., 24256.,
      17054., 17580., 18106., 18632., 19648., 20192., 20736., 21280., 22386.,
      22948., 23510., 24072., 25268., 25848., 26428., 27008., 18726., 19324.,
      19922., 20520., 21608., 22224., 22840., 23456., 24634., 25268., 25902.,
      26536., 27804., 28456., 29108., 29760., 20398., 21068., 21738., 22408.,
      23568., 24256., 24944., 25632., 26882., 27588., 28294., 29000., 30340.,
      31064., 31788., 32512., 22070., 22812., 23554., 24296., 25528., 26288.,
      27048., 27808., 29130., 29908., 30686., 31464., 32876., 33672., 34468.,
      35264.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8306.,  8832.,  9352.,  10184., 8760.,  7444.,  6286.,  8384.,  10298.,
      12488., 15221., 14648., 13766., 10724., 9352.,  10472., 11680., 13128.,
      11808., 10680., 9528.,  11896., 14965., 18376., 22454., 18376., 14965.,
      11896., 9528.,  10680., 11808., 13128., 11680., 10472., 9352.,  10724.,
      13766., 14648., 15221., 12488., 10298., 8384.,  6286.,  7444.,  8760.,
      10184., 9352.,  8832.,  8306.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21906., 22284., 22662., 23040., 23418., 23796., 24174., 25308., 25686.,
      26064., 26442., 26820., 27198., 27576., 28710., 29088., 29466., 29844.,
      30222., 30600., 30978., 29808., 28010., 26340., 26718., 27096., 27474.,
      27852., 27066., 25652., 24366., 24744., 25122., 25500., 25878., 25476.,
      24446., 23544., 23922., 24300., 24678., 25056., 26190., 26568., 26946.,
      27324., 27702., 28080., 28458.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7136.,  8020.,  7591.,  8608.,  8432.,  9584.,  9767.,  11072., 8896.,
      10048., 8083.,  9080.,  7332.,  8172.,  8015.,  9088.,  9172.,  10420.,
      10652., 12080., 12701., 14314., 12084., 13520., 11398., 12652., 8749.,
      9816.,  8432.,  9584.,  9996.,  11344., 12112., 13664., 14764., 16528.,
      14336., 15904., 11644., 13024., 9376.,  10560., 10335., 11712., 12629.,
      14234., 15372., 17200., 18862., 20908., 15332., 17152., 12571., 14170.,
      10201., 11568., 10256., 11552., 12692., 14192., 15808., 17504., 15812.,
      17696., 12832., 14496., 10612., 12064., 8832.,  10064., 8747.,  9816.,
      11398., 12652., 12124., 13568., 12723., 14346., 10724., 12160., 9336.,
      10596., 8297.,  9376.,  8596.,  9548.,  9157.,  10264., 9776.,  11040.,
      10321., 11728., 8832.,  10064., 8017.,  9088.,  7448.,  8356.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42480., 43812., 43209., 44568., 43938., 45324., 44667., 46080., 45396.,
      46836., 46125., 47592., 46854., 48348., 49041., 50616., 49770., 51372.,
      50499., 52128., 51228., 52884., 51957., 53640., 52686., 54396., 53415.,
      55152., 55602., 57420., 56331., 58176., 57060., 58932., 57789., 59688.,
      58518., 60444., 59247., 61200., 59976., 61956., 57683., 59616., 54188.,
      56020., 50949., 52680., 51678., 53436., 52407., 54192., 53136., 54948.,
      53865., 55704., 52340., 54132., 49613., 51304., 47142., 48732., 47871.,
      49488., 48600., 50244., 49329., 51000., 50058., 51756., 49301., 50952.,
      47342., 48892., 45639., 47088., 46368., 47844., 47097., 48600., 47826.,
      49356., 48555., 50112., 50742., 52380., 51471., 53136., 52200., 53892.,
      52929., 54648., 53658., 55404., 54387., 56160., 55116., 56916.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5756.,  6640.,  7524.,  8408.,  6949.,  7966.,  8983.,  10000., 8864.,
      10016., 11168., 12320., 8949.,  10254., 11559., 12864., 7616.,  8768.,
      9920.,  11072., 6817.,  7814.,  8811.,  9808.,  6272.,  7112.,  7952.,
      8792.,  7357.,  8430.,  9503.,  10576., 9464.,  10712., 11960., 13208.,
      9796.,  11224., 12652., 14080., 10733., 12346., 13959., 15572., 9964.,
      11400., 12836., 14272., 9446.,  10700., 11954., 13208., 7295.,  8362.,
      9429.,  10496., 8864.,  10016., 11168., 12320., 9332.,  10680., 12028.,
      13376., 10384., 11936., 13488., 15040., 12116., 13880., 15644., 17408.,
      11744., 13312., 14880., 16448., 9524.,  10904., 12284., 13664., 7904.,
      9088.,  10272., 11456., 9373.,  10750., 12127., 13504., 10597., 12202.,
      13807., 15412., 12500., 14328., 16156., 17984., 15518., 17564., 19610.,
      21656., 12556., 14376., 16196., 18016., 10647., 12246., 13845., 15444.,
      9467.,  10834., 12201., 13568., 8656.,  9952.,  11248., 12544., 10348.,
      11848., 13348., 14848., 13024., 14720., 16416., 18112., 12940., 14824.,
      16708., 18592., 10944., 12608., 14272., 15936., 9948.,  11400., 12852.,
      14304., 9456.,  10688., 11920., 13152., 7305.,  8374.,  9443.,  10512.,
      9446.,  10700., 11954., 13208., 9908.,  11352., 12796., 14240., 10799.,
      12422., 14045., 15668., 9932.,  11368., 12804., 14240., 9556.,  10816.,
      12076., 13336., 7467.,  8546.,  9625.,  10704., 7280.,  8232.,  9184.,
      10136., 7559.,  8666.,  9773.,  10880., 8368.,  9632.,  10896., 12160.,
      9667.,  11074., 12481., 13888., 9456.,  10688., 11920., 13152., 7427.,
      8498.,  9569.,  10640., 6100.,  7008.,  7916.,  8824.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22380., 23136., 23892., 24648., 23107., 23890., 24673., 25456., 23834.,
      24644., 25454., 26264., 24561., 25398., 26235., 27072., 25288., 26152.,
      27016., 27880., 26015., 26906., 27797., 28688., 26742., 27660., 28578.,
      29496., 28923., 29922., 30921., 31920., 27026., 27988., 28950., 29912.,
      25385., 26310., 27235., 28160., 24000., 24888., 25776., 26664., 24727.,
      25642., 26557., 27472., 25454., 26396., 27338., 28280., 26181., 27150.,
      28119., 29088., 28362., 29412., 30462., 31512., 27233., 28246., 29259.,
      30272., 26360., 27336., 28312., 29288., 25743., 26682., 27621., 28560.,
      26470., 27436., 28402., 29368., 27197., 28190., 29183., 30176., 27924.,
      28944., 29964., 30984., 29785., 30822., 31859., 32896., 29360., 30296.,
      31232., 32168., 25351., 26186., 27021., 27856., 25502., 26300., 27098.,
      27896., 26229., 27054., 27879., 28704., 26956., 27808., 28660., 29512.,
      27683., 28562., 29441., 30320., 26216., 27112., 28008., 28904., 23551.,
      24410., 25269., 26128., 21142., 21964., 22786., 23608., 21869., 22718.,
      23567., 24416., 22596., 23472., 24348., 25224., 23323., 24226., 25129.,
      26032., 24050., 24980., 25910., 26840., 19383., 20202., 21021., 21840.,
      15886., 16604., 17322., 18040., 14245., 14926., 15607., 16288., 14972.,
      15680., 16388., 17096., 15699., 16434., 17169., 17904., 16426., 17188.,
      17950., 18712., 17153., 17942., 18731., 19520., 16902., 17644., 18386.,
      19128., 16797., 17502., 18207., 18912., 17524., 18256., 18988., 19720.,
      18251., 19010., 19769., 20528., 18978., 19764., 20550., 21336., 19705.,
      20518., 21331., 22144., 20432., 21272., 22112., 22952.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7108.,  9000.,  7118.,  9280.,  7632.,  10080., 9010.,  11776., 8784.,
      11232., 8606.,  10704., 8548.,  10296., 7118.,  9280.,  7811.,  10312.,
      9240.,  12096., 11641., 14868., 11928., 14784., 12275., 14744., 8606.,
      10704., 7632.,  10080., 9240.,  12096., 11712., 14976., 15336., 19008.,
      16320., 19584., 11928., 14784., 8784.,  11232., 9010.,  11776., 11641.,
      14868., 15336., 19008., 20435., 24536., 15336., 19008., 11641., 14868.,
      9010.,  11776., 8784.,  11232., 11928., 14784., 16320., 19584., 15336.,
      19008., 11712., 14976., 9240.,  12096., 7632.,  10080., 8606.,  10704.,
      12275., 14744., 11928., 14784., 11641., 14868., 9240.,  12096., 7811.,
      10312., 7118.,  9280.,  8548.,  10296., 8606.,  10704., 8784.,  11232.,
      9010.,  11776., 7632.,  10080., 7118.,  9280.,  7108.,  9000.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20871., 22344., 22329., 23856., 23787., 25368., 25245., 26880., 24847.,
      26472., 24577., 26192., 24435., 26040., 28809., 30576., 26875., 28632.,
      25069., 26816., 22303., 23976., 21329., 22928., 20611., 22136., 20853.,
      22368., 25227., 26904., 23677., 25344., 22255., 23912., 20257., 21840.,
      21139., 22712., 22149., 23712., 23607., 25224., 25741., 27456., 22463.,
      24104., 19441., 21008., 18211., 19704., 19477., 20960., 20871., 22344.,
      22329., 23856., 24847., 26472., 24577., 26192., 24435., 26040., 25893.,
      27552., 27351., 29064., 28809., 30576., 26875., 28632., 21329., 22928.,
      20611., 22136., 20853., 22368., 22311., 23880., 23769., 25392., 25227.,
      26904., 23677., 25344., 21139., 22712., 22149., 23712., 23607., 25224.,
      25065., 26736., 26523., 28248., 25741., 27456., 22463., 24104.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5596.,  6504.,  8376.,  9392.,  6952.,  7980.,  10142., 11296., 9504.,
      10656., 13104., 14400., 8708.,  10004., 12750., 14208., 7200.,  8352.,
      10800., 12096., 6624.,  7612.,  9734.,  10848., 6820.,  7640.,  9424.,
      10352., 6952.,  7980.,  10142., 11296., 9817.,  10998., 13504., 14832.,
      9072.,  10416., 13272., 14784., 9477.,  10994., 14206., 15912., 9072.,
      10416., 13272., 14784., 9565.,  10726., 13204., 14512., 6612.,  7596.,
      9706.,  10816., 9504.,  10656., 13104., 14400., 9072.,  10416., 13272.,
      14784., 9600.,  11136., 14400., 16128., 11664., 13392., 17064., 19008.,
      12672., 14208., 17472., 19200., 9072.,  10416., 13272., 14784., 7200.,
      8352.,  10800., 12096., 8708.,  10004., 12750., 14208., 9477.,  10994.,
      14206., 15912., 11664., 13392., 17064., 19008., 15901., 17830., 21940.,
      24112., 11664., 13392., 17064., 19008., 9521.,  11042., 14266., 15976.,
      8856.,  10164., 12930., 14400., 7200.,  8352.,  10800., 12096., 9072.,
      10416., 13272., 14784., 12672., 14208., 17472., 19200., 11664., 13392.,
      17064., 19008., 9600.,  11136., 14400., 16128., 9072.,  10416., 13272.,
      14784., 9504.,  10656., 13104., 14400., 6624.,  7612.,  9734.,  10848.,
      9565.,  10726., 13204., 14512., 9072.,  10416., 13272., 14784., 9521.,
      11042., 14266., 15976., 9072.,  10416., 13272., 14784., 9649.,  10822.,
      13320., 14640., 6876.,  7884.,  10034., 11168., 6820.,  7640.,  9424.,
      10352., 6612.,  7596.,  9706.,  10816., 7200.,  8352.,  10800., 12096.,
      8856.,  10164., 12930., 14400., 9504.,  10656., 13104., 14400., 6876.,
      7884.,  10034., 11168., 5676.,  6552.,  8408.,  9392.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25345., 26062., 27560., 28304., 26799., 27570., 29122., 29920., 28253.,
      29078., 30684., 31536., 29707., 30586., 32246., 33152., 27513., 28382.,
      30032., 30928., 25575., 26434., 28074., 28960., 23893., 24742., 26372.,
      27248., 28255., 29266., 31058., 32096., 27085., 28086., 29868., 30896.,
      26171., 27162., 28934., 29952., 23401., 24318., 26016., 26960., 20119.,
      20962., 22586., 23456., 17349., 18118., 19668., 20464., 16435., 17194.,
      18734., 19520., 20797., 21718., 23420., 24368., 20395., 21306., 22998.,
      23936., 20249., 21150., 22832., 23760., 19015., 19842., 21450., 22304.,
      19381., 20198., 21796., 22640., 20003., 20810., 22398., 23232., 21457.,
      22318., 23960., 24848., 25499., 26458., 28198., 29184., 25801., 26686.,
      28352., 29264., 22519., 23330., 24922., 25760., 22821., 23558., 25076.,
      25840., 23955., 24682., 26190., 26944., 25345., 26062., 27560., 28304.,
      26799., 27570., 29122., 29920., 27513., 28382., 30032., 30928., 25575.,
      26434., 28074., 28960., 23893., 24742., 26372., 27248., 25347., 26250.,
      27934., 28864., 26801., 27758., 29496., 30480., 28255., 29266., 31058.,
      32096., 27085., 28086., 29868., 30896., 20119., 20962., 22586., 23456.,
      17349., 18118., 19668., 20464., 16435., 17194., 18734., 19520., 17889.,
      18702., 20296., 21136., 19343., 20210., 21858., 22752., 20797., 21718.,
      23420., 24368., 20395., 21306., 22998., 23936., 19381., 20198., 21796.,
      22640., 20003., 20810., 22398., 23232., 21457., 22318., 23960., 24848.,
      22911., 23826., 25522., 26464., 24365., 25334., 27084., 28080., 25499.,
      26458., 28198., 29184., 25801., 26686., 28352., 29264.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4988.,  5896.,  6804.,  7712.,  9592.,  10608., 11624., 12640., 4604.,
      5632.,  6660.,  7688.,  9850.,  11004., 12158., 13312., 6336.,  7488.,
      8640.,  9792.,  12240., 13536., 14832., 16128., 5880.,  7176.,  8472.,
      9768.,  12522., 13980., 15438., 16896., 6336.,  7488.,  8640.,  9792.,
      12240., 13536., 14832., 16128., 4404.,  5392.,  6380.,  7368.,  9490.,
      10604., 11718., 12832., 4548.,  5368.,  6188.,  7008.,  8800.,  9728.,
      10656., 11584., 4604.,  5632.,  6660.,  7688.,  9850.,  11004., 12158.,
      13312., 6485.,  7666.,  8847.,  10028., 12528., 13856., 15184., 16512.,
      6048.,  7392.,  8736.,  10080., 12936., 14448., 15960., 17472., 8285.,
      9802.,  11319., 12836., 16050., 17756., 19462., 21168., 6048.,  7392.,
      8736.,  10080., 12936., 14448., 15960., 17472., 6369.,  7530.,  8691.,
      9852.,  12332., 13640., 14948., 16256., 4432.,  5416.,  6400.,  7384.,
      9502.,  10612., 11722., 12832., 6336.,  7488.,  8640.,  9792.,  12240.,
      13536., 14832., 16128., 6048.,  7392.,  8736.,  10080., 12936., 14448.,
      15960., 17472., 8448.,  9984.,  11520., 13056., 16320., 18048., 19776.,
      21504., 7776.,  9504.,  11232., 12960., 16632., 18576., 20520., 22464.,
      8448.,  9984.,  11520., 13056., 16320., 18048., 19776., 21504., 6048.,
      7392.,  8736.,  10080., 12936., 14448., 15960., 17472., 6336.,  7488.,
      8640.,  9792.,  12240., 13536., 14832., 16128., 5880.,  7176.,  8472.,
      9768.,  12522., 13980., 15438., 16896., 8285.,  9802.,  11319., 12836.,
      16050., 17756., 19462., 21168., 7776.,  9504.,  11232., 12960., 16632.,
      18576., 20520., 22464., 10593., 12522., 14451., 16380., 20492., 22664.,
      24836., 27008., 7776.,  9504.,  11232., 12960., 16632., 18576., 20520.,
      22464., 8353.,  9874.,  11395., 12916., 16134., 17844., 19554., 21264.,
      5860.,  7168.,  8476.,  9784.,  12550., 14020., 15490., 16960., 6336.,
      7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 6048.,  7392.,
      8736.,  10080., 12936., 14448., 15960., 17472., 8448.,  9984.,  11520.,
      13056., 16320., 18048., 19776., 21504., 7776.,  9504.,  11232., 12960.,
      16632., 18576., 20520., 22464., 8448.,  9984.,  11520., 13056., 16320.,
      18048., 19776., 21504., 6048.,  7392.,  8736.,  10080., 12936., 14448.,
      15960., 17472., 6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832.,
      16128., 4404.,  5392.,  6380.,  7368.,  9490.,  10604., 11718., 12832.,
      6369.,  7530.,  8691.,  9852.,  12332., 13640., 14948., 16256., 6048.,
      7392.,  8736.,  10080., 12936., 14448., 15960., 17472., 8353.,  9874.,
      11395., 12916., 16134., 17844., 19554., 21264., 6048.,  7392.,  8736.,
      10080., 12936., 14448., 15960., 17472., 6413.,  7586.,  8759.,  9932.,
      12424., 13744., 15064., 16384., 4552.,  5560.,  6568.,  7576.,  9718.,
      10852., 11986., 13120., 4548.,  5368.,  6188.,  7008.,  8800.,  9728.,
      10656., 11584., 4432.,  5416.,  6400.,  7384.,  9502.,  10612., 11722.,
      12832., 6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832., 16128.,
      5860.,  7168.,  8476.,  9784.,  12550., 14020., 15490., 16960., 6336.,
      7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 4552.,  5560.,
      6568.,  7576.,  9718.,  10852., 11986., 13120., 4764.,  5640.,  6516.,
      7392.,  9240.,  10224., 11208., 12192.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20981., 21698., 22415., 23132., 24680., 25424., 26168., 26912., 22427.,
      23198., 23969., 24740., 26342., 27140., 27938., 28736., 23873., 24698.,
      25523., 26348., 28004., 28856., 29708., 30560., 25319., 26198., 27077.,
      27956., 29666., 30572., 31478., 32384., 23629., 24498., 25367., 26236.,
      27936., 28832., 29728., 30624., 22451., 23310., 24169., 25028., 26718.,
      27604., 28490., 29376., 21785., 22634., 23483., 24332., 26012., 26888.,
      27764., 28640., 26123., 27134., 28145., 29156., 30998., 32036., 33074.,
      34112., 26481., 27482., 28483., 29484., 31316., 32344., 33372., 34400.,
      27351., 28342., 29333., 30324., 32146., 33164., 34182., 35200., 28669.,
      29586., 30503., 31420., 33168., 34112., 35056., 36000., 24867., 25710.,
      26553., 27396., 29070., 29940., 30810., 31680., 22089., 22858., 23627.,
      24396., 25996., 26792., 27588., 28384., 22959., 23718., 24477., 25236.,
      26826., 27612., 28398., 29184., 27297., 28218., 29139., 30060., 31812.,
      32760., 33708., 34656., 25095., 26006., 26917., 27828., 29570., 30508.,
      31446., 32384., 23405., 24306., 25207., 26108., 27840., 28768., 29696.,
      30624., 19603., 20430., 21257., 22084., 23742., 24596., 25450., 26304.,
      18937., 19754., 20571., 21388., 23036., 23880., 24724., 25568., 18783.,
      19590., 20397., 21204., 22842., 23676., 24510., 25344., 20229., 21090.,
      21951., 22812., 24504., 25392., 26280., 27168., 23991., 24950., 25909.,
      26868., 28658., 29644., 30630., 31616., 23261., 24146., 25031., 25916.,
      27632., 28544., 29456., 30368., 19459., 20270., 21081., 21892., 23534.,
      24372., 25210., 26048., 18729., 19466., 20203., 20940., 22508., 23272.,
      24036., 24800., 19599., 20326., 21053., 21780., 23338., 24092., 24846.,
      25600., 20981., 21698., 22415., 23132., 24680., 25424., 26168., 26912.,
      22427., 23198., 23969., 24740., 26342., 27140., 27938., 28736., 23629.,
      24498., 25367., 26236., 27936., 28832., 29728., 30624., 22451., 23310.,
      24169., 25028., 26718., 27604., 28490., 29376., 21785., 22634., 23483.,
      24332., 26012., 26888., 27764., 28640., 23231., 24134., 25037., 25940.,
      27674., 28604., 29534., 30464., 24677., 25634., 26591., 27548., 29336.,
      30320., 31304., 32288., 26123., 27134., 28145., 29156., 30998., 32036.,
      33074., 34112., 26481., 27482., 28483., 29484., 31316., 32344., 33372.,
      34400., 24867., 25710., 26553., 27396., 29070., 29940., 30810., 31680.,
      22089., 22858., 23627., 24396., 25996., 26792., 27588., 28384., 22959.,
      23718., 24477., 25236., 26826., 27612., 28398., 29184., 24405., 25218.,
      26031., 26844., 28488., 29328., 30168., 31008., 25851., 26718., 27585.,
      28452., 30150., 31044., 31938., 32832., 27297., 28218., 29139., 30060.,
      31812., 32760., 33708., 34656., 25095., 26006., 26917., 27828., 29570.,
      30508., 31446., 32384., 18937., 19754., 20571., 21388., 23036., 23880.,
      24724., 25568., 18783., 19590., 20397., 21204., 22842., 23676., 24510.,
      25344., 20229., 21090., 21951., 22812., 24504., 25392., 26280., 27168.,
      21675., 22590., 23505., 24420., 26166., 27108., 28050., 28992., 23121.,
      24090., 25059., 26028., 27828., 28824., 29820., 30816., 23991., 24950.,
      25909., 26868., 28658., 29644., 30630., 31616., 23261., 24146., 25031.,
      25916., 27632., 28544., 29456., 30368.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3996.,  5616.,  7452.,  9504.,  5710.,  7608.,  9758.,  12160., 9936.,
      12096., 14544., 17280., 7250.,  9672.,  12418., 15488., 5328.,  7488.,
      9936.,  12672., 5630.,  7512.,  9646.,  12032., 7308.,  8912.,  10732.,
      12768., 5710.,  7608.,  9758.,  12160., 10187., 12396., 14899., 17696.,
      7560.,  10080., 12936., 16128., 6965.,  9796.,  13005., 16592., 7560.,
      10080., 12936., 16128., 10043., 12236., 14723., 17504., 5630.,  7512.,
      9646.,  12032., 9936.,  12096., 14544., 17280., 7560.,  10080., 12936.,
      16128., 7104.,  9984.,  13248., 16896., 9720.,  12960., 16632., 20736.,
      13248., 16128., 19392., 23040., 7560.,  10080., 12936., 16128., 5328.,
      7488.,  9936.,  12672., 7250.,  9672.,  12418., 15488., 6965.,  9796.,
      13005., 16592., 9720.,  12960., 16632., 20736., 16667., 20300., 24419.,
      29024., 9720.,  12960., 16632., 20736., 6965.,  9796.,  13005., 16592.,
      7250.,  9672.,  12418., 15488., 5328.,  7488.,  9936.,  12672., 7560.,
      10080., 12936., 16128., 13248., 16128., 19392., 23040., 9720.,  12960.,
      16632., 20736., 7104.,  9984.,  13248., 16896., 7560.,  10080., 12936.,
      16128., 9936.,  12096., 14544., 17280., 5630.,  7512.,  9646.,  12032.,
      10043., 12236., 14723., 17504., 7560.,  10080., 12936., 16128., 6965.,
      9796.,  13005., 16592., 7560.,  10080., 12936., 16128., 10187., 12396.,
      14899., 17696., 5710.,  7608.,  9758.,  12160., 7308.,  8912.,  10732.,
      12768., 5630.,  7512.,  9646.,  12032., 5328.,  7488.,  9936.,  12672.,
      7250.,  9672.,  12418., 15488., 9936.,  12096., 14544., 17280., 5710.,
      7608.,  9758.,  12160., 3996.,  5616.,  7452.,  9504.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19243., 20636., 22083., 23584., 22151., 23652., 25207., 26816., 25059.,
      26668., 28331., 30048., 26111., 27764., 29471., 31232., 23771., 25404.,
      27091., 28832., 20599., 22148., 23751., 25408., 19283., 20812., 22395.,
      24032., 27175., 28964., 30807., 32704., 27459., 29292., 31179., 33120.,
      27679., 29492., 31359., 33280., 25211., 26876., 28595., 30368., 18647.,
      20164., 21735., 23360., 16179., 17548., 18971., 20448., 16399., 17748.,
      19151., 20608., 25059., 26668., 28331., 30048., 26111., 27764., 29471.,
      31232., 23771., 25404., 27091., 28832., 20599., 22148., 23751., 25408.,
      19283., 20812., 22395., 24032., 21359., 22932., 24559., 26240., 24267.,
      25948., 27683., 29472., 27679., 29492., 31359., 33280., 25211., 26876.,
      28595., 30368., 18647., 20164., 21735., 23360., 16179., 17548., 18971.,
      20448., 16399., 17748., 19151., 20608., 19243., 20636., 22083., 23584.,
      22151., 23652., 25207., 26816., 23771., 25404., 27091., 28832., 20599.,
      22148., 23751., 25408., 19283., 20812., 22395., 24032., 21359., 22932.,
      24559., 26240., 24267., 25948., 27683., 29472., 27175., 28964., 30807.,
      32704., 27459., 29292., 31179., 33120., 18647., 20164., 21735., 23360.,
      16179., 17548., 18971., 20448., 16399., 17748., 19151., 20608., 19243.,
      20636., 22083., 23584., 22151., 23652., 25207., 26816., 25059., 26668.,
      28331., 30048., 26111., 27764., 29471., 31232., 19283., 20812., 22395.,
      24032., 21359., 22932., 24559., 26240., 24267., 25948., 27683., 29472.,
      27175., 28964., 30807., 32704., 27459., 29292., 31179., 33120., 27679.,
      29492., 31359., 33280., 25211., 26876., 28595., 30368.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4652.,  5416.,  6936.,  7808.,  9652.,  10632., 12800., 13888., 3442.,
      4332.,  6104.,  7120.,  9270.,  10412., 12940., 14208., 6192.,  7200.,
      9216.,  10368., 12816., 14112., 16992., 18432., 4406.,  5540.,  7808.,
      9104.,  11858., 13316., 16556., 18176., 6192.,  7200.,  9216.,  10368.,
      12816., 14112., 16992., 18432., 3362.,  4236.,  5992.,  6992.,  9126.,
      10252., 12764., 14016., 4572.,  5320.,  6824.,  7680.,  9508.,  10472.,
      12624., 13696., 3442.,  4332.,  6104.,  7120.,  9270.,  10412., 12940.,
      14208., 6319.,  7350.,  9406.,  10584., 13081., 14406., 17344., 18816.,
      4536.,  5712.,  8064.,  9408.,  12264., 13776., 17136., 18816., 8093.,
      9418.,  12062., 13576., 16787., 18490., 22268., 24160., 4536.,  5712.,
      8064.,  9408.,  12264., 13776., 17136., 18816., 6247.,  7270.,  9318.,
      10488., 12977., 14294., 17224., 18688., 3434.,  4316.,  6080.,  7088.,
      9230.,  10364., 12884., 14144., 6192.,  7200.,  9216.,  10368., 12816.,
      14112., 16992., 18432., 4536.,  5712.,  8064.,  9408.,  12264., 13776.,
      17136., 18816., 8256.,  9600.,  12288., 13824., 17088., 18816., 22656.,
      24576., 5832.,  7344.,  10368., 12096., 15768., 17712., 22032., 24192.,
      8256.,  9600.,  12288., 13824., 17088., 18816., 22656., 24576., 4536.,
      5712.,  8064.,  9408.,  12264., 13776., 17136., 18816., 6192.,  7200.,
      9216.,  10368., 12816., 14112., 16992., 18432., 4406.,  5540.,  7808.,
      9104.,  11858., 13316., 16556., 18176., 8093.,  9418.,  12062., 13576.,
      16787., 18490., 22268., 24160., 5832.,  7344.,  10368., 12096., 15768.,
      17712., 22032., 24192., 10375., 12070., 15462., 17400., 21521., 23702.,
      28552., 30976., 5832.,  7344.,  10368., 12096., 15768., 17712., 22032.,
      24192., 8085.,  9402.,  12038., 13544., 16747., 18442., 22212., 24096.,
      4334.,  5460.,  7720.,  9008.,  11754., 13204., 16436., 18048., 6192.,
      7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 4536.,  5712.,
      8064.,  9408.,  12264., 13776., 17136., 18816., 8256.,  9600.,  12288.,
      13824., 17088., 18816., 22656., 24576., 5832.,  7344.,  10368., 12096.,
      15768., 17712., 22032., 24192., 8256.,  9600.,  12288., 13824., 17088.,
      18816., 22656., 24576., 4536.,  5712.,  8064.,  9408.,  12264., 13776.,
      17136., 18816., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992.,
      18432., 3362.,  4236.,  5992.,  6992.,  9126.,  10252., 12764., 14016.,
      6247.,  7270.,  9318.,  10488., 12977., 14294., 17224., 18688., 4536.,
      5712.,  8064.,  9408.,  12264., 13776., 17136., 18816., 8085.,  9402.,
      12038., 13544., 16747., 18442., 22212., 24096., 4536.,  5712.,  8064.,
      9408.,  12264., 13776., 17136., 18816., 6319.,  7350.,  9406.,  10584.,
      13081., 14406., 17344., 18816., 3370.,  4252.,  6016.,  7024.,  9166.,
      10300., 12820., 14080., 4572.,  5320.,  6824.,  7680.,  9508.,  10472.,
      12624., 13696., 3434.,  4316.,  6080.,  7088.,  9230.,  10364., 12884.,
      14144., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992., 18432.,
      4334.,  5460.,  7720.,  9008.,  11754., 13204., 16436., 18048., 6192.,
      7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 3370.,  4252.,
      6016.,  7024.,  9166.,  10300., 12820., 14080., 4636.,  5384.,  6888.,
      7744.,  9572.,  10536., 12688., 13760.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21527., 22166., 23582., 24248., 25745., 26438., 28016., 28736., 24419.,
      25166., 26690., 27464., 29069., 29870., 31556., 32384., 27311., 28166.,
      29798., 30680., 32393., 33302., 35096., 36032., 26555., 27454., 29130.,
      30056., 31813., 32766., 34604., 35584., 23175., 24054., 25710., 26616.,
      28353., 29286., 31104., 32064., 18195., 18990., 20562., 21384., 23037.,
      23886., 25620., 26496., 16863., 17638., 19190., 19992., 21625., 22454.,
      24168., 25024., 23939., 24974., 26786., 27848., 29741., 30830., 32804.,
      33920., 25743., 26822., 28678., 29784., 31721., 32854., 34872., 36032.,
      27483., 28542., 30378., 31464., 33381., 34494., 36492., 37632., 28071.,
      28982., 30670., 31608., 33377., 34342., 36192., 37184., 20467., 21230.,
      22770., 23560., 25181., 25998., 27700., 28544., 16959., 17574., 18966.,
      19608., 21081., 21750., 23304., 24000., 18699., 19294., 20666., 21288.,
      22741., 23390., 24924., 25600., 27311., 28166., 29798., 30680., 32393.,
      33302., 35096., 36032., 26555., 27454., 29130., 30056., 31813., 32766.,
      34604., 35584., 23175., 24054., 25710., 26616., 28353., 29286., 31104.,
      32064., 18195., 18990., 20562., 21384., 23037., 23886., 25620., 26496.,
      16863., 17638., 19190., 19992., 21625., 22454., 24168., 25024., 18155.,
      18974., 20570., 21416., 23093., 23966., 25724., 26624., 21047., 21974.,
      23678., 24632., 26417., 27398., 29264., 30272., 27483., 28542., 30378.,
      31464., 33381., 34494., 36492., 37632., 28071., 28982., 30670., 31608.,
      33377., 34342., 36192., 37184., 20467., 21230., 22770., 23560., 25181.,
      25998., 27700., 28544., 16959., 17574., 18966., 19608., 21081., 21750.,
      23304., 24000., 18699., 19294., 20666., 21288., 22741., 23390., 24924.,
      25600., 21527., 22166., 23582., 24248., 25745., 26438., 28016., 28736.,
      24419., 25166., 26690., 27464., 29069., 29870., 31556., 32384., 23175.,
      24054., 25710., 26616., 28353., 29286., 31104., 32064., 18195., 18990.,
      20562., 21384., 23037., 23886., 25620., 26496., 16863., 17638., 19190.,
      19992., 21625., 22454., 24168., 25024., 18155., 18974., 20570., 21416.,
      23093., 23966., 25724., 26624., 21047., 21974., 23678., 24632., 26417.,
      27398., 29264., 30272., 23939., 24974., 26786., 27848., 29741., 30830.,
      32804., 33920., 25743., 26822., 28678., 29784., 31721., 32854., 34872.,
      36032., 20467., 21230., 22770., 23560., 25181., 25998., 27700., 28544.,
      16959., 17574., 18966., 19608., 21081., 21750., 23304., 24000., 18699.,
      19294., 20666., 21288., 22741., 23390., 24924., 25600., 21527., 22166.,
      23582., 24248., 25745., 26438., 28016., 28736., 24419., 25166., 26690.,
      27464., 29069., 29870., 31556., 32384., 27311., 28166., 29798., 30680.,
      32393., 33302., 35096., 36032., 26555., 27454., 29130., 30056., 31813.,
      32766., 34604., 35584., 16863., 17638., 19190., 19992., 21625., 22454.,
      24168., 25024., 18155., 18974., 20570., 21416., 23093., 23966., 25724.,
      26624., 21047., 21974., 23678., 24632., 26417., 27398., 29264., 30272.,
      23939., 24974., 26786., 27848., 29741., 30830., 32804., 33920., 25743.,
      26822., 28678., 29784., 31721., 32854., 34872., 36032., 27483., 28542.,
      30378., 31464., 33381., 34494., 36492., 37632., 28071., 28982., 30670.,
      31608., 33377., 34342., 36192., 37184.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      764.,   1528.,  2292.,  3056.,  4360.,  5232.,  6104.,  6976.,  8820.,
      9800.,  10780., 11760., 14144., 15232., 16320., 17408., 890.,   1780.,
      2670.,  3560.,  5080.,  6096.,  7112.,  8128.,  10278., 11420., 12562.,
      13704., 16484., 17752., 19020., 20288., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 1134.,  2268.,  3402.,  4536.,  6480.,  7776.,
      9072.,  10368., 13122., 14580., 16038., 17496., 21060., 22680., 24300.,
      25920., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,
      11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040., 874.,
      1748.,  2622.,  3496.,  5000.,  6000.,  7000.,  8000.,  10134., 11260.,
      12386., 13512., 16276., 17528., 18780., 20032., 748.,   1496.,  2244.,
      2992.,  4280.,  5136.,  5992.,  6848.,  8676.,  9640.,  10604., 11568.,
      13936., 15008., 16080., 17152., 890.,   1780.,  2670.,  3560.,  5080.,
      6096.,  7112.,  8128.,  10278., 11420., 12562., 13704., 16484., 17752.,
      19020., 20288., 1031.,  2062.,  3093.,  4124.,  5890.,  7068.,  8246.,
      9424.,  11925., 13250., 14575., 15900., 19136., 20608., 22080., 23552.,
      1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608.,
      15120., 16632., 18144., 21840., 23520., 25200., 26880., 1325.,  2650.,
      3975.,  5300.,  7570.,  9084.,  10598., 12112., 15327., 17030., 18733.,
      20436., 24596., 26488., 28380., 30272., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1023.,  2046.,  3069.,  4092.,  5850.,  7020.,
      8190.,  9360.,  11853., 13170., 14487., 15804., 19032., 20496., 21960.,
      23424., 882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,
      10206., 11340., 12474., 13608., 16380., 17640., 18900., 20160., 1008.,
      2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960.,
      14256., 15552., 18720., 20160., 21600., 23040., 1176.,  2352.,  3528.,
      4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144.,
      21840., 23520., 25200., 26880., 1344.,  2688.,  4032.,  5376.,  7680.,
      9216.,  10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880.,
      28800., 30720., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096.,
      13824., 17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560.,
      1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552.,
      17280., 19008., 20736., 24960., 26880., 28800., 30720., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 1134.,  2268.,  3402.,  4536.,  6480.,  7776.,
      9072.,  10368., 13122., 14580., 16038., 17496., 21060., 22680., 24300.,
      25920., 1325.,  2650.,  3975.,  5300.,  7570.,  9084.,  10598., 12112.,
      15327., 17030., 18733., 20436., 24596., 26488., 28380., 30272., 1512.,
      3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824., 17496., 19440.,
      21384., 23328., 28080., 30240., 32400., 34560., 1695.,  3390.,  5085.,
      6780.,  9690.,  11628., 13566., 15504., 19629., 21810., 23991., 26172.,
      31512., 33936., 36360., 38784., 1512.,  3024.,  4536.,  6048.,  8640.,
      10368., 12096., 13824., 17496., 19440., 21384., 23328., 28080., 30240.,
      32400., 34560., 1317.,  2634.,  3951.,  5268.,  7530.,  9036.,  10542.,
      12048., 15255., 16950., 18645., 20340., 24492., 26376., 28260., 30144.,
      1126.,  2252.,  3378.,  4504.,  6440.,  7728.,  9016.,  10304., 13050.,
      14500., 15950., 17400., 20956., 22568., 24180., 25792., 1008.,  2016.,
      3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256.,
      15552., 18720., 20160., 21600., 23040., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,
      10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800.,
      30720., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824.,
      17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560., 1344.,
      2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552., 17280.,
      19008., 20736., 24960., 26880., 28800., 30720., 1176.,  2352.,  3528.,
      4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144.,
      21840., 23520., 25200., 26880., 1008.,  2016.,  3024.,  4032.,  5760.,
      6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160.,
      21600., 23040., 874.,   1748.,  2622.,  3496.,  5000.,  6000.,  7000.,
      8000.,  10134., 11260., 12386., 13512., 16276., 17528., 18780., 20032.,
      1023.,  2046.,  3069.,  4092.,  5850.,  7020.,  8190.,  9360.,  11853.,
      13170., 14487., 15804., 19032., 20496., 21960., 23424., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1317.,  2634.,  3951.,  5268.,
      7530.,  9036.,  10542., 12048., 15255., 16950., 18645., 20340., 24492.,
      26376., 28260., 30144., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1031.,  2062.,  3093.,  4124.,  5890.,  7068.,  8246.,  9424.,
      11925., 13250., 14575., 15900., 19136., 20608., 22080., 23552., 882.,
      1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,  10206., 11340.,
      12474., 13608., 16380., 17640., 18900., 20160., 748.,   1496.,  2244.,
      2992.,  4280.,  5136.,  5992.,  6848.,  8676.,  9640.,  10604., 11568.,
      13936., 15008., 16080., 17152., 882.,   1764.,  2646.,  3528.,  5040.,
      6048.,  7056.,  8064.,  10206., 11340., 12474., 13608., 16380., 17640.,
      18900., 20160., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,
      9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040.,
      1126.,  2252.,  3378.,  4504.,  6440.,  7728.,  9016.,  10304., 13050.,
      14500., 15950., 17400., 20956., 22568., 24180., 25792., 1008.,  2016.,
      3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256.,
      15552., 18720., 20160., 21600., 23040., 882.,   1764.,  2646.,  3528.,
      5040.,  6048.,  7056.,  8064.,  10206., 11340., 12474., 13608., 16380.,
      17640., 18900., 20160., 748.,   1496.,  2244.,  2992.,  4280.,  5136.,
      5992.,  6848.,  8676.,  9640.,  10604., 11568., 13936., 15008., 16080.,
      17152.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15535., 16174., 16813., 17452., 18850., 19516., 20182., 20848., 22381.,
      23074., 23767., 24460., 26128., 26848., 27568., 28288., 18139., 18886.,
      19633., 20380., 21886., 22660., 23434., 24208., 25849., 26650., 27451.,
      28252., 30028., 30856., 31684., 32512., 20743., 21598., 22453., 23308.,
      24922., 25804., 26686., 27568., 29317., 30226., 31135., 32044., 33928.,
      34864., 35800., 36736., 20211., 21110., 22009., 22908., 24566., 25492.,
      26418., 27344., 29137., 30090., 31043., 31996., 33924., 34904., 35884.,
      36864., 18591., 19470., 20349., 21228., 22866., 23772., 24678., 25584.,
      27357., 28290., 29223., 30156., 32064., 33024., 33984., 34944., 17931.,
      18726., 19521., 20316., 21870., 22692., 23514., 24336., 26025., 26874.,
      27723., 28572., 30396., 31272., 32148., 33024., 20407., 21182., 21957.,
      22732., 24266., 25068., 25870., 26672., 28341., 29170., 29999., 30828.,
      32632., 33488., 34344., 35200., 25083., 26118., 27153., 28188., 29982.,
      31044., 32106., 33168., 35097., 36186., 37275., 38364., 40428., 41544.,
      42660., 43776., 25575., 26654., 27733., 28812., 30650., 31756., 32862.,
      33968., 35941., 37074., 38207., 39340., 41448., 42608., 43768., 44928.,
      26003., 27062., 28121., 29180., 30998., 32084., 33170., 34256., 36209.,
      37322., 38435., 39548., 41636., 42776., 43916., 45056., 28351., 29262.,
      30173., 31084., 32754., 33692., 34630., 35568., 37373., 38338., 39303.,
      40268., 42208., 43200., 44192., 45184., 18411., 19174., 19937., 20700.,
      22222., 23012., 23802., 24592., 26249., 27066., 27883., 28700., 30492.,
      31336., 32180., 33024., 12567., 13182., 13797., 14412., 15786., 16428.,
      17070., 17712., 19221., 19890., 20559., 21228., 22872., 23568., 24264.,
      24960., 12995., 13590., 14185., 14780., 16134., 16756., 17378., 18000.,
      19489., 20138., 20787., 21436., 23060., 23736., 24412., 25088., 20743.,
      21598., 22453., 23308., 24922., 25804., 26686., 27568., 29317., 30226.,
      31135., 32044., 33928., 34864., 35800., 36736., 20211., 21110., 22009.,
      22908., 24566., 25492., 26418., 27344., 29137., 30090., 31043., 31996.,
      33924., 34904., 35884., 36864., 18591., 19470., 20349., 21228., 22866.,
      23772., 24678., 25584., 27357., 28290., 29223., 30156., 32064., 33024.,
      33984., 34944., 17931., 18726., 19521., 20316., 21870., 22692., 23514.,
      24336., 26025., 26874., 27723., 28572., 30396., 31272., 32148., 33024.,
      20407., 21182., 21957., 22732., 24266., 25068., 25870., 26672., 28341.,
      29170., 29999., 30828., 32632., 33488., 34344., 35200., 19875., 20694.,
      21513., 22332., 23910., 24756., 25602., 26448., 28161., 29034., 29907.,
      30780., 32628., 33528., 34428., 35328., 22479., 23406., 24333., 25260.,
      26946., 27900., 28854., 29808., 31629., 32610., 33591., 34572., 36528.,
      37536., 38544., 39552., 26003., 27062., 28121., 29180., 30998., 32084.,
      33170., 34256., 36209., 37322., 38435., 39548., 41636., 42776., 43916.,
      45056., 28351., 29262., 30173., 31084., 32754., 33692., 34630., 35568.,
      37373., 38338., 39303., 40268., 42208., 43200., 44192., 45184., 18411.,
      19174., 19937., 20700., 22222., 23012., 23802., 24592., 26249., 27066.,
      27883., 28700., 30492., 31336., 32180., 33024., 12567., 13182., 13797.,
      14412., 15786., 16428., 17070., 17712., 19221., 19890., 20559., 21228.,
      22872., 23568., 24264., 24960., 12995., 13590., 14185., 14780., 16134.,
      16756., 17378., 18000., 19489., 20138., 20787., 21436., 23060., 23736.,
      24412., 25088., 15535., 16174., 16813., 17452., 18850., 19516., 20182.,
      20848., 22381., 23074., 23767., 24460., 26128., 26848., 27568., 28288.,
      18139., 18886., 19633., 20380., 21886., 22660., 23434., 24208., 25849.,
      26650., 27451., 28252., 30028., 30856., 31684., 32512., 18591., 19470.,
      20349., 21228., 22866., 23772., 24678., 25584., 27357., 28290., 29223.,
      30156., 32064., 33024., 33984., 34944., 17931., 18726., 19521., 20316.,
      21870., 22692., 23514., 24336., 26025., 26874., 27723., 28572., 30396.,
      31272., 32148., 33024., 20407., 21182., 21957., 22732., 24266., 25068.,
      25870., 26672., 28341., 29170., 29999., 30828., 32632., 33488., 34344.,
      35200., 19875., 20694., 21513., 22332., 23910., 24756., 25602., 26448.,
      28161., 29034., 29907., 30780., 32628., 33528., 34428., 35328., 22479.,
      23406., 24333., 25260., 26946., 27900., 28854., 29808., 31629., 32610.,
      33591., 34572., 36528., 37536., 38544., 39552., 25083., 26118., 27153.,
      28188., 29982., 31044., 32106., 33168., 35097., 36186., 37275., 38364.,
      40428., 41544., 42660., 43776., 25575., 26654., 27733., 28812., 30650.,
      31756., 32862., 33968., 35941., 37074., 38207., 39340., 41448., 42608.,
      43768., 44928., 18411., 19174., 19937., 20700., 22222., 23012., 23802.,
      24592., 26249., 27066., 27883., 28700., 30492., 31336., 32180., 33024.,
      12567., 13182., 13797., 14412., 15786., 16428., 17070., 17712., 19221.,
      19890., 20559., 21228., 22872., 23568., 24264., 24960., 12995., 13590.,
      14185., 14780., 16134., 16756., 17378., 18000., 19489., 20138., 20787.,
      21436., 23060., 23736., 24412., 25088., 15535., 16174., 16813., 17452.,
      18850., 19516., 20182., 20848., 22381., 23074., 23767., 24460., 26128.,
      26848., 27568., 28288., 18139., 18886., 19633., 20380., 21886., 22660.,
      23434., 24208., 25849., 26650., 27451., 28252., 30028., 30856., 31684.,
      32512., 20743., 21598., 22453., 23308., 24922., 25804., 26686., 27568.,
      29317., 30226., 31135., 32044., 33928., 34864., 35800., 36736., 20211.,
      21110., 22009., 22908., 24566., 25492., 26418., 27344., 29137., 30090.,
      31043., 31996., 33924., 34904., 35884., 36864., 20407., 21182., 21957.,
      22732., 24266., 25068., 25870., 26672., 28341., 29170., 29999., 30828.,
      32632., 33488., 34344., 35200., 19875., 20694., 21513., 22332., 23910.,
      24756., 25602., 26448., 28161., 29034., 29907., 30780., 32628., 33528.,
      34428., 35328., 22479., 23406., 24333., 25260., 26946., 27900., 28854.,
      29808., 31629., 32610., 33591., 34572., 36528., 37536., 38544., 39552.,
      25083., 26118., 27153., 28188., 29982., 31044., 32106., 33168., 35097.,
      36186., 37275., 38364., 40428., 41544., 42660., 43776., 25575., 26654.,
      27733., 28812., 30650., 31756., 32862., 33968., 35941., 37074., 38207.,
      39340., 41448., 42608., 43768., 44928., 26003., 27062., 28121., 29180.,
      30998., 32084., 33170., 34256., 36209., 37322., 38435., 39548., 41636.,
      42776., 43916., 45056., 28351., 29262., 30173., 31084., 32754., 33692.,
      34630., 35568., 37373., 38338., 39303., 40268., 42208., 43200., 44192.,
      45184.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11078., 13704., 13898., 14250., 11894., 9704.,  8114.,  9232.,  10820.,
      12598., 14561., 13818., 13268., 12308., 12312., 13344., 14184., 15240.,
      13416., 11808., 10392., 14058., 17084., 20900., 24951., 20900., 17084.,
      14058., 10392., 11808., 13416., 15240., 14184., 13344., 12312., 12308.,
      13268., 13818., 14561., 12598., 10820., 9232.,  8114.,  9704.,  11894.,
      14250., 13898., 13704., 11078.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48342., 49008., 49674., 50340., 51006., 51672., 52338., 55002., 55668.,
      56334., 57000., 57666., 55260., 52982., 50142., 50808., 51474., 52140.,
      52806., 50912., 49146., 47330., 47996., 48662., 49328., 49994., 48612.,
      47358., 46566., 47232., 47898., 48564., 49230., 49896., 50562., 53226.,
      53892., 54558., 50616., 46802., 43116., 39558., 42222., 42888., 43554.,
      40124., 36822., 33648., 30602.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9258.,  10332., 11400., 12640., 11524., 12900., 11818., 13348., 10138.,
      11516., 8968.,  10176., 7896.,  8964.,  10556., 11792., 11300., 12728.,
      12067., 13660., 13023., 14802., 11758., 13364., 11076., 12488., 10107.,
      11352., 10728., 12144., 12000., 13632., 13872., 15696., 15960., 18000.,
      15192., 17040., 15072., 16704., 12048., 13488., 12070., 13652., 14268.,
      16088., 17475., 19512., 20917., 23198., 17312., 19384., 14428., 16264.,
      11999., 13620., 12264., 13680., 15072., 16704., 15408., 17232., 15960.,
      18000., 13656., 15504., 12000., 13632., 10512., 11952., 10376., 11608.,
      11236., 12664., 12119., 13716., 13191., 14978., 11922., 13548., 11204.,
      12648., 10359., 11632., 7742.,  8788.,  8712.,  9920.,  10224., 11580.,
      11890., 13412., 11414., 12804., 11400., 12640., 9116.,  10204.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38850., 39852., 36114., 37088., 33506., 34452., 34546., 35528., 35586.,
      36604., 36626., 37680., 37666., 38756., 34914., 36020., 32690., 33768.,
      30594., 31644., 31634., 32720., 32674., 33796., 30706., 31800., 28866.,
      29932., 27650., 28732., 28690., 29808., 29730., 30884., 30770., 31960.,
      31810., 33036., 30354., 31552., 29026., 30196., 28834., 30020., 29874.,
      31096., 30914., 32172., 31954., 33248., 32994., 34324., 32050., 33352.,
      31234., 32508., 32066., 33356., 31634., 32896., 31330., 32564., 31154.,
      32360., 31106., 32284., 32146., 33360., 33186., 34436., 37346., 38740.,
      37426., 38792., 37634., 38972., 37522., 38768., 37666., 38820., 38514.,
      39640., 39490., 40588., 43650., 44892., 44242., 45456., 44962., 46148.,
      41778., 42872., 38850., 39852., 36114., 37088., 33506., 34452.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7842.,  8916.,  9990.,  11064., 9464.,  10704., 11944., 13184., 9704.,
      11080., 12456., 13832., 10138., 11668., 13198., 14728., 9106.,  10484.,
      11862., 13240., 9240.,  10448., 11656., 12864., 7188.,  8256.,  9324.,
      10392., 8740.,  9976.,  11212., 12448., 9492.,  10920., 12348., 13776.,
      11373., 12966., 14559., 16152., 13451., 15230., 17009., 18788., 10710.,
      12316., 13922., 15528., 9316.,  10728., 12140., 13552., 8041.,  9286.,
      10531., 11776., 10248., 11664., 13080., 14496., 12384., 14016., 15648.,
      17280., 12864., 14688., 16512., 18336., 13560., 15600., 17640., 19680.,
      12216., 14064., 15912., 17760., 12384., 14016., 15648., 17280., 9600.,
      11040., 12480., 13920., 11166., 12748., 14330., 15912., 12028., 13848.,
      15668., 17488., 14497., 16534., 18571., 20608., 17201., 19482., 21763.,
      24044., 13928., 16000., 18072., 20144., 12332., 14168., 16004., 17840.,
      10617., 12238., 13859., 15480., 10248., 11664., 13080., 14496., 12384.,
      14016., 15648., 17280., 12864., 14688., 16512., 18336., 13560., 15600.,
      17640., 19680., 12216., 14064., 15912., 17760., 12384., 14016., 15648.,
      17280., 9600.,  11040., 12480., 13920., 8768.,  10000., 11232., 12464.,
      9620.,  11048., 12476., 13904., 11457., 13054., 14651., 16248., 13475.,
      15262., 17049., 18836., 10858., 12484., 14110., 15736., 9540.,  10984.,
      12428., 13872., 8277.,  9550.,  10823., 12096., 7494.,  8540.,  9586.,
      10632., 8984.,  10192., 11400., 12608., 9508.,  10864., 12220., 13576.,
      10178., 11700., 13222., 14744., 9278.,  10668., 12058., 13448., 9464.,
      10704., 11944., 13184., 7224.,  8312.,  9400.,  10488.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32154., 33156., 34158., 35160., 29782., 30756., 31730., 32704., 27666.,
      28612., 29558., 30504., 28686., 29668., 30650., 31632., 29706., 30724.,
      31742., 32760., 30726., 31780., 32834., 33888., 31746., 32836., 33926.,
      35016., 30322., 31428., 32534., 33640., 28974., 30052., 31130., 32208.,
      27882., 28932., 29982., 31032., 28902., 29988., 31074., 32160., 29922.,
      31044., 32166., 33288., 29086., 30180., 31274., 32368., 28506., 29572.,
      30638., 31704., 30154., 31236., 32318., 33400., 31174., 32292., 33410.,
      34528., 32194., 33348., 34502., 35656., 33214., 34404., 35594., 36784.,
      34234., 35460., 36686., 37912., 34422., 35620., 36818., 38016., 34866.,
      36036., 37206., 38376., 38562., 39748., 40934., 42120., 39582., 40804.,
      42026., 43248., 40602., 41860., 43118., 44376., 41622., 42916., 44210.,
      45504., 42642., 43972., 45302., 46632., 39758., 41060., 42362., 43664.,
      37130., 38404., 39678., 40952., 34682., 35972., 37262., 38552., 32822.,
      34084., 35346., 36608., 31218., 32452., 33686., 34920., 29870., 31076.,
      32282., 33488., 28778., 29956., 31134., 32312., 29798., 31012., 32226.,
      33440., 30818., 32068., 33318., 34568., 34898., 36292., 37686., 39080.,
      34062., 35428., 36794., 38160., 33482., 34820., 36158., 37496., 32326.,
      33572., 34818., 36064., 31682., 32836., 33990., 35144., 32382., 33508.,
      34634., 35760., 33338., 34436., 35534., 36632., 37418., 38660., 39902.,
      41144., 37606., 38820., 40034., 41248., 38050., 39236., 40422., 41608.,
      34846., 35940., 37034., 38128., 32154., 33156., 34158., 35160., 29782.,
      30756., 31730., 32704., 27666., 28612., 29558., 30504.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9202.,  11352., 12240., 14688., 11246., 13992., 10884., 13928., 8926.,
      11672., 7632.,  10080., 6802.,  8936.,  10233., 12736., 10248., 13104.,
      10287., 13496., 11066., 14628., 10271., 13480., 10248., 13104., 10073.,
      12560., 9144.,  12000., 10176., 13440., 11976., 15648., 14640., 18720.,
      15048., 18720., 16320., 19584., 12216., 15072., 10463., 13672., 13176.,
      16848., 17465., 21584., 22726., 27292., 17465., 21584., 13176., 16848.,
      10463., 13672., 12216., 15072., 16320., 19584., 15048., 18720., 14640.,
      18720., 11976., 15648., 10176., 13440., 9144.,  12000., 10073., 12560.,
      10248., 13104., 10271., 13480., 11066., 14628., 10287., 13496., 10248.,
      13104., 10233., 12736., 6802.,  8936.,  7632.,  10080., 8926.,  11672.,
      10884., 13928., 11246., 13992., 12240., 14688., 9202.,  11352.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35444., 37592., 33748., 35904., 32180., 34344., 32276., 34448., 32500.,
      34680., 32852., 35040., 33332., 35528., 31924., 34152., 29524., 31696.,
      27380., 29496., 29460., 31648., 31540., 33800., 30612., 32880., 29812.,
      32088., 30964., 33272., 31892., 34144., 33076., 35272., 34964., 37168.,
      36980., 39192., 36564., 38784., 36276., 38504., 39476., 41736., 37332.,
      39536., 35444., 37592., 33748., 35904., 32180., 34344., 32276., 34448.,
      32500., 34680., 37492., 39832., 34580., 36864., 31924., 34152., 29524.,
      31696., 27380., 29496., 29460., 31648., 31540., 33800., 28596., 30888.,
      29716., 32016., 30964., 33272., 31892., 34144., 33076., 35272., 34964.,
      37168., 36980., 39192., 36084., 38328., 37716., 39968., 39476., 41736.,
      37332., 39536., 35444., 37592., 33748., 35904., 32180., 34344.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7150.,  8148.,  10316., 11440., 9504.,  10656., 13104., 14400., 8798.,
      10076., 12848., 14288., 9064.,  10504., 13564., 15184., 8474.,  9788.,
      12524., 14000., 9504.,  10656., 13104., 14400., 6714.,  7732.,  9848.,
      10992., 7949.,  9106.,  11624., 12928., 8400.,  9744.,  12600., 14112.,
      10537., 12030., 15262., 16944., 13792., 15476., 19042., 20936., 10143.,
      11678., 14868., 16592., 8400.,  9744.,  12600., 14112., 7483.,  8674.,
      11142., 12480., 9480.,  10800., 13680., 15168., 12672., 14208., 17472.,
      19200., 11688., 13392., 17088., 19008., 12000., 13920., 18000., 20160.,
      11256., 13008., 16656., 18624., 12672., 14208., 17472., 19200., 9048.,
      10416., 13248., 14784., 10191., 11678., 14916., 16592., 10800., 12528.,
      16200., 18144., 13483., 15394., 19542., 21696., 17640., 19788., 24358.,
      26776., 13013., 14978., 19072., 21280., 10800., 12528., 16200., 18144.,
      9681.,  11214., 14390., 16112., 9480.,  10800., 13680., 15168., 12672.,
      14208., 17472., 19200., 11688., 13392., 17088., 19008., 12000., 13920.,
      18000., 20160., 11256., 13008., 16656., 18624., 12672., 14208., 17472.,
      19200., 9048.,  10416., 13248., 14784., 7877.,  9026.,  11536., 12832.,
      8400.,  9744.,  12600., 14112., 10497., 11982., 15206., 16880., 13744.,
      15412., 18962., 20840., 10135., 11662., 14844., 16560., 8400.,  9744.,
      12600., 14112., 7587.,  8786.,  11262., 12608., 7142.,  8132.,  10292.,
      11408., 9504.,  10656., 13104., 14400., 8694.,  9964.,  12728., 14160.,
      8888.,  10312., 13356., 14960., 8402.,  9708.,  12436., 13904., 9504.,
      10656., 13104., 14400., 6754.,  7780.,  9904.,  11056.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      39096., 40168., 42332., 43440., 37744., 38824., 40996., 42112., 36648.,
      37736., 39916., 41040., 34784., 35880., 38068., 39200., 33176., 34280.,
      36476., 37616., 31824., 32936., 35140., 36288., 30728., 31848., 34060.,
      35216., 27880., 29032., 31276., 32464., 25184., 26280., 28468., 29600.,
      23000., 24040., 26172., 27248., 25040., 26152., 28356., 29504., 27080.,
      28264., 30540., 31760., 27264., 28456., 30740., 31968., 27704., 28904.,
      31196., 32432., 29976., 31208., 33532., 34800., 29840., 31016., 33284.,
      34496., 30216., 31336., 33548., 34704., 31936., 33064., 35284., 36448.,
      33912., 35048., 37276., 38448., 35120., 36264., 38500., 39680., 36584.,
      37736., 39980., 41168., 42952., 44136., 46412., 47632., 40768., 41896.,
      44116., 45280., 39096., 40168., 42332., 43440., 37744., 38824., 40996.,
      42112., 36648., 37736., 39916., 41040., 34784., 35880., 38068., 39200.,
      33176., 34280., 36476., 37616., 34808., 36072., 38428., 39728., 31088.,
      32296., 34596., 35840., 27880., 29032., 31276., 32464., 25184., 26280.,
      28468., 29600., 23000., 24040., 26172., 27248., 25040., 26152., 28356.,
      29504., 27080., 28264., 30540., 31760., 29352., 30568., 32876., 34128.,
      29536., 30760., 33076., 34336., 29976., 31208., 33532., 34800., 29840.,
      31016., 33284., 34496., 30216., 31336., 33548., 34704., 31936., 33064.,
      35284., 36448., 33912., 35048., 37276., 38448., 40280., 41448., 43708.,
      44912., 41488., 42664., 44932., 46144., 42952., 44136., 46412., 47632.,
      40768., 41896., 44116., 45280., 39096., 40168., 42332., 43440., 37744.,
      38824., 40996., 42112., 36648., 37736., 39916., 41040.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5030.,  6028.,  7026.,  8024.,  10228., 11352., 12476., 13600., 6336.,
      7488.,  8640.,  9792.,  12240., 13536., 14832., 16128., 6318.,  7596.,
      8874.,  10152., 12960., 14400., 15840., 17280., 7920.,  9360.,  10800.,
      12240., 15300., 16920., 18540., 20160., 5346.,  6660.,  7974.,  9288.,
      11988., 13464., 14940., 16416., 6336.,  7488.,  8640.,  9792.,  12240.,
      13536., 14832., 16128., 3978.,  4996.,  6014.,  7032.,  9112.,  10256.,
      11400., 12544., 5861.,  7018.,  8175.,  9332.,  11896., 13200., 14504.,
      15808., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      7389.,  8882.,  10375., 11868., 15146., 16828., 18510., 20192., 9260.,
      10944., 12628., 14312., 17886., 19780., 21674., 23568., 6239.,  7774.,
      9309.,  10844., 13996., 15720., 17444., 19168., 7392.,  8736.,  10080.,
      11424., 14280., 15792., 17304., 18816., 4671.,  5862.,  7053.,  8244.,
      10674., 12012., 13350., 14688., 6696.,  8016.,  9336.,  10656., 13584.,
      15072., 16560., 18048., 8448.,  9984.,  11520., 13056., 16320., 18048.,
      19776., 21504., 8424.,  10128., 11832., 13536., 17280., 19200., 21120.,
      23040., 10560., 12480., 14400., 16320., 20400., 22560., 24720., 26880.,
      7128.,  8880.,  10632., 12384., 15984., 17952., 19920., 21888., 8448.,
      9984.,  11520., 13056., 16320., 18048., 19776., 21504., 5400.,  6768.,
      8136.,  9504.,  12288., 13824., 15360., 16896., 7535.,  9022.,  10509.,
      11996., 15292., 16968., 18644., 20320., 9504.,  11232., 12960., 14688.,
      18360., 20304., 22248., 24192., 9423.,  11334., 13245., 15156., 19362.,
      21516., 23670., 25824., 11820., 13968., 16116., 18264., 22842., 25260.,
      27678., 30096., 8013.,  9978.,  11943., 13908., 17952., 20160., 22368.,
      24576., 9504.,  11232., 12960., 14688., 18360., 20304., 22248., 24192.,
      6021.,  7554.,  9087.,  10620., 13746., 15468., 17190., 18912., 6696.,
      8016.,  9336.,  10656., 13584., 15072., 16560., 18048., 8448.,  9984.,
      11520., 13056., 16320., 18048., 19776., 21504., 8424.,  10128., 11832.,
      13536., 17280., 19200., 21120., 23040., 10560., 12480., 14400., 16320.,
      20400., 22560., 24720., 26880., 7128.,  8880.,  10632., 12384., 15984.,
      17952., 19920., 21888., 8448.,  9984.,  11520., 13056., 16320., 18048.,
      19776., 21504., 5400.,  6768.,  8136.,  9504.,  12288., 13824., 15360.,
      16896., 5853.,  7002.,  8151.,  9300.,  11856., 13152., 14448., 15744.,
      7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816., 7317.,
      8802.,  10287., 11772., 15042., 16716., 18390., 20064., 9180.,  10848.,
      12516., 14184., 17742., 19620., 21498., 23376., 6231.,  7758.,  9285.,
      10812., 13956., 15672., 17388., 19104., 7392.,  8736.,  10080., 11424.,
      14280., 15792., 17304., 18816., 4743.,  5942.,  7141.,  8340.,  10778.,
      12124., 13470., 14816., 5022.,  6012.,  7002.,  7992.,  10188., 11304.,
      12420., 13536., 6336.,  7488.,  8640.,  9792.,  12240., 13536., 14832.,
      16128., 6246.,  7516.,  8786.,  10056., 12856., 14288., 15720., 17152.,
      7840.,  9264.,  10688., 12112., 15156., 16760., 18364., 19968., 5338.,
      6644.,  7950.,  9256.,  11948., 13416., 14884., 16352., 6336.,  7488.,
      8640.,  9792.,  12240., 13536., 14832., 16128., 4050.,  5076.,  6102.,
      7128.,  9216.,  10368., 11520., 12672.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32064., 33136., 34208., 35280., 37476., 38584., 39692., 40800., 31400.,
      32480., 33560., 34640., 36844., 37960., 39076., 40192., 31248., 32336.,
      33424., 34512., 36724., 37848., 38972., 40096., 29560., 30656., 31752.,
      32848., 35068., 36200., 37332., 38464., 28384., 29488., 30592., 31696.,
      33924., 35064., 36204., 37344., 27720., 28832., 29944., 31056., 33292.,
      34440., 35588., 36736., 27568., 28688., 29808., 30928., 33172., 34328.,
      35484., 36640., 30032., 31184., 32336., 33488., 35764., 36952., 38140.,
      39328., 30840., 31936., 33032., 34128., 36348., 37480., 38612., 39744.,
      32672., 33712., 34752., 35792., 37956., 39032., 40108., 41184., 34632.,
      35744., 36856., 37968., 40204., 41352., 42500., 43648., 36592., 37776.,
      38960., 40144., 42452., 43672., 44892., 46112., 34904., 36096., 37288.,
      38480., 40796., 42024., 43252., 44480., 33728., 34928., 36128., 37328.,
      39652., 40888., 42124., 43360., 30048., 31280., 32512., 33744., 36100.,
      37368., 38636., 39904., 27784., 28960., 30136., 31312., 33612., 34824.,
      36036., 37248., 26544., 27664., 28784., 29904., 32148., 33304., 34460.,
      35616., 27928., 29056., 30184., 31312., 33564., 34728., 35892., 37056.,
      29824., 30960., 32096., 33232., 35492., 36664., 37836., 39008., 30184.,
      31328., 32472., 33616., 35884., 37064., 38244., 39424., 31056., 32208.,
      33360., 34512., 36788., 37976., 39164., 40352., 35568., 36752., 37936.,
      39120., 41428., 42648., 43868., 45088., 33304., 34432., 35560., 36688.,
      38940., 40104., 41268., 42432., 32064., 33136., 34208., 35280., 37476.,
      38584., 39692., 40800., 31400., 32480., 33560., 34640., 36844., 37960.,
      39076., 40192., 31248., 32336., 33424., 34512., 36724., 37848., 38972.,
      40096., 29560., 30656., 31752., 32848., 35068., 36200., 37332., 38464.,
      28384., 29488., 30592., 31696., 33924., 35064., 36204., 37344., 31488.,
      32752., 34016., 35280., 37668., 38968., 40268., 41568., 30248., 31456.,
      32664., 33872., 36204., 37448., 38692., 39936., 30032., 31184., 32336.,
      33488., 35764., 36952., 38140., 39328., 30840., 31936., 33032., 34128.,
      36348., 37480., 38612., 39744., 32672., 33712., 34752., 35792., 37956.,
      39032., 40108., 41184., 34632., 35744., 36856., 37968., 40204., 41352.,
      42500., 43648., 36592., 37776., 38960., 40144., 42452., 43672., 44892.,
      46112., 32912., 34128., 35344., 36560., 38900., 40152., 41404., 42656.,
      31224., 32448., 33672., 34896., 37244., 38504., 39764., 41024., 30048.,
      31280., 32512., 33744., 36100., 37368., 38636., 39904., 27784., 28960.,
      30136., 31312., 33612., 34824., 36036., 37248., 26544., 27664., 28784.,
      29904., 32148., 33304., 34460., 35616., 27928., 29056., 30184., 31312.,
      33564., 34728., 35892., 37056., 29824., 30960., 32096., 33232., 35492.,
      36664., 37836., 39008., 34336., 35504., 36672., 37840., 40132., 41336.,
      42540., 43744., 34696., 35872., 37048., 38224., 40524., 41736., 42948.,
      44160., 35568., 36752., 37936., 39120., 41428., 42648., 43868., 45088.,
      33304., 34432., 35560., 36688., 38940., 40104., 41268., 42432., 32064.,
      33136., 34208., 35280., 37476., 38584., 39692., 40800., 31400., 32480.,
      33560., 34640., 36844., 37960., 39076., 40192., 31248., 32336., 33424.,
      34512., 36724., 37848., 38972., 40096.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5958.,  7848.,  9990.,  12384., 9936.,  12096., 14544., 17280., 7002.,
      9432.,  12186., 15264., 6660.,  9360.,  12420., 15840., 7002.,  9432.,
      12186., 15264., 9936.,  12096., 14544., 17280., 5958.,  7848.,  9990.,
      12384., 6223.,  8420.,  10911., 13696., 6216.,  8736.,  11592., 14784.,
      8785.,  11612., 14817., 18400., 14378., 17512., 21066., 25040., 8785.,
      11612., 14817., 18400., 6216.,  8736.,  11592., 14784., 6223.,  8420.,
      10911., 13696., 7944.,  10464., 13320., 16512., 13248., 16128., 19392.,
      23040., 9336.,  12576., 16248., 20352., 8880.,  12480., 16560., 21120.,
      9336.,  12576., 16248., 20352., 13248., 16128., 19392., 23040., 7944.,
      10464., 13320., 16512., 8017.,  10844., 14049., 17632., 7992.,  11232.,
      14904., 19008., 11311., 14948., 19071., 23680., 18518., 22552., 27126.,
      32240., 11311., 14948., 19071., 23680., 7992.,  11232., 14904., 19008.,
      8017.,  10844., 14049., 17632., 7944.,  10464., 13320., 16512., 13248.,
      16128., 19392., 23040., 9336.,  12576., 16248., 20352., 8880.,  12480.,
      16560., 21120., 9336.,  12576., 16248., 20352., 13248., 16128., 19392.,
      23040., 7944.,  10464., 13320., 16512., 6223.,  8420.,  10911., 13696.,
      6216.,  8736.,  11592., 14784., 8785.,  11612., 14817., 18400., 14378.,
      17512., 21066., 25040., 8785.,  11612., 14817., 18400., 6216.,  8736.,
      11592., 14784., 6223.,  8420.,  10911., 13696., 5958.,  7848.,  9990.,
      12384., 9936.,  12096., 14544., 17280., 7002.,  9432.,  12186., 15264.,
      6660.,  9360.,  12420., 15840., 7002.,  9432.,  12186., 15264., 9936.,
      12096., 14544., 17280., 5958.,  7848.,  9990.,  12384.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33140., 35280., 37492., 39776., 32484., 34640., 36868., 39168., 32340.,
      34512., 36756., 39072., 30660., 32848., 35108., 37440., 29492., 31696.,
      33972., 36320., 28004., 30160., 32388., 34688., 27284., 29392., 31572.,
      33824., 30804., 32976., 35220., 37536., 29828., 31952., 34148., 36416.,
      29620., 31696., 33844., 36064., 32868., 35024., 37252., 39552., 36372.,
      38608., 40916., 43296., 34372., 36560., 38820., 41152., 33140., 35280.,
      37492., 39776., 29492., 31696., 33972., 36320., 28004., 30160., 32388.,
      34688., 27284., 29392., 31572., 33824., 31044., 33232., 35492., 37824.,
      35060., 37328., 39668., 42080., 32548., 34768., 37060., 39424., 30804.,
      32976., 35220., 37536., 36372., 38608., 40916., 43296., 34372., 36560.,
      38820., 41152., 33140., 35280., 37492., 39776., 32484., 34640., 36868.,
      39168., 32340., 34512., 36756., 39072., 30660., 32848., 35108., 37440.,
      29492., 31696., 33972., 36320., 35060., 37328., 39668., 42080., 32548.,
      34768., 37060., 39424., 30804., 32976., 35220., 37536., 29828., 31952.,
      34148., 36416., 29620., 31696., 33844., 36064., 32868., 35024., 37252.,
      39552., 36372., 38608., 40916., 43296., 32340., 34512., 36756., 39072.,
      30660., 32848., 35108., 37440., 29492., 31696., 33972., 36320., 28004.,
      30160., 32388., 34688., 27284., 29392., 31572., 33824., 31044., 33232.,
      35492., 37824., 35060., 37328., 39668., 42080., 29620., 31696., 33844.,
      36064., 32868., 35024., 37252., 39552., 36372., 38608., 40916., 43296.,
      34372., 36560., 38820., 41152., 33140., 35280., 37492., 39776., 32484.,
      34640., 36868., 39168., 32340., 34512., 36756., 39072.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3726.,  4572.,  6372.,  7344.,  9522.,  10620., 13176., 14400., 6192.,
      7200.,  9216.,  10368., 12816., 14112., 16992., 18432., 4698.,  5796.,
      8100.,  9360.,  12150., 13572., 16848., 18432., 7740.,  9000.,  11520.,
      12960., 16020., 17640., 21240., 23040., 4050.,  5220.,  7452.,  8784.,
      11502., 12996., 16200., 17856., 6192.,  7200.,  9216.,  10368., 12816.,
      14112., 16992., 18432., 3078.,  3996.,  5724.,  6768.,  8874.,  10044.,
      12528., 13824., 4343.,  5326.,  7422.,  8552.,  11089., 12366., 15344.,
      16768., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      5445.,  6722.,  9406.,  10872., 14123., 15778., 19596., 21440., 8990.,
      10452., 13384., 15056., 18618., 20500., 24692., 26784., 4721.,  6082.,
      8682.,  10232., 13399., 15138., 18872., 20800., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 3555.,  4622.,  6634.,  7848.,
      10301., 11662., 14556., 16064., 4968.,  6096.,  8496.,  9792.,  12696.,
      14160., 17568., 19200., 8256.,  9600.,  12288., 13824., 17088., 18816.,
      22656., 24576., 6264.,  7728.,  10800., 12480., 16200., 18096., 22464.,
      24576., 10320., 12000., 15360., 17280., 21360., 23520., 28320., 30720.,
      5400.,  6960.,  9936.,  11712., 15336., 17328., 21600., 23808., 8256.,
      9600.,  12288., 13824., 17088., 18816., 22656., 24576., 4104.,  5328.,
      7632.,  9024.,  11832., 13392., 16704., 18432., 5585.,  6850.,  9546.,
      11000., 14263., 15906., 19736., 21568., 9288.,  10800., 13824., 15552.,
      19224., 21168., 25488., 27648., 7011.,  8654.,  12106., 13992., 18173.,
      20302., 25212., 27584., 11570., 13452., 17224., 19376., 23958., 26380.,
      31772., 34464., 6071.,  7822.,  11166., 13160., 17233., 19470., 24272.,
      26752., 9288.,  10800., 13824., 15552., 19224., 21168., 25488., 27648.,
      4581.,  5954.,  8542.,  10104., 13259., 15010., 18732., 20672., 4968.,
      6096.,  8496.,  9792.,  12696., 14160., 17568., 19200., 8256.,  9600.,
      12288., 13824., 17088., 18816., 22656., 24576., 6264.,  7728.,  10800.,
      12480., 16200., 18096., 22464., 24576., 10320., 12000., 15360., 17280.,
      21360., 23520., 28320., 30720., 5400.,  6960.,  9936.,  11712., 15336.,
      17328., 21600., 23808., 8256.,  9600.,  12288., 13824., 17088., 18816.,
      22656., 24576., 4104.,  5328.,  7632.,  9024.,  11832., 13392., 16704.,
      18432., 4343.,  5326.,  7422.,  8552.,  11089., 12366., 15344., 16768.,
      7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504., 5445.,
      6722.,  9406.,  10872., 14123., 15778., 19596., 21440., 8990.,  10452.,
      13384., 15056., 18618., 20500., 24692., 26784., 4721.,  6082.,  8682.,
      10232., 13399., 15138., 18872., 20800., 7224.,  8400.,  10752., 12096.,
      14952., 16464., 19824., 21504., 3555.,  4622.,  6634.,  7848.,  10301.,
      11662., 14556., 16064., 3726.,  4572.,  6372.,  7344.,  9522.,  10620.,
      13176., 14400., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992.,
      18432., 4698.,  5796.,  8100.,  9360.,  12150., 13572., 16848., 18432.,
      7740.,  9000.,  11520., 12960., 16020., 17640., 21240., 23040., 4050.,
      5220.,  7452.,  8784.,  11502., 12996., 16200., 17856., 6192.,  7200.,
      9216.,  10368., 12816., 14112., 16992., 18432., 3078.,  3996.,  5724.,
      6768.,  8874.,  10044., 12528., 13824.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33452., 34536., 36672., 37792., 40036., 41192., 43544., 44736., 32124.,
      33224., 35376., 36512., 38772., 39944., 42312., 43520., 31820., 32936.,
      35104., 36256., 38532., 39720., 42104., 43328., 28444., 29576., 31760.,
      32928., 35220., 36424., 38824., 40064., 26092., 27240., 29440., 30624.,
      32932., 34152., 36568., 37824., 23164., 24264., 26416., 27552., 29812.,
      30984., 33352., 34560., 21772., 22824., 24928., 26016., 28228., 29352.,
      31672., 32832., 28748., 29864., 32032., 33184., 35460., 36648., 39032.,
      40256., 30940., 32008., 34128., 35232., 37460., 38600., 40936., 42112.,
      34668., 35688., 37760., 38816., 40996., 42088., 44376., 45504., 36988.,
      38088., 40240., 41376., 43636., 44808., 47176., 48384., 39820., 41000.,
      43232., 44448., 46788., 48040., 50488., 51776., 35868., 37000., 39184.,
      40352., 42644., 43848., 46248., 47488., 33452., 34536., 36672., 37792.,
      40036., 41192., 43544., 44736., 26092., 27240., 29440., 30624., 32932.,
      34152., 36568., 37824., 23164., 24264., 26416., 27552., 29812., 30984.,
      33352., 34560., 21772., 22824., 24928., 26016., 28228., 29352., 31672.,
      32832., 25116., 26248., 28432., 29600., 31892., 33096., 35496., 36736.,
      28972., 30184., 32448., 33696., 36068., 37352., 39832., 41152., 28092.,
      29256., 31472., 32672., 34996., 36232., 38664., 39936., 28748., 29864.,
      32032., 33184., 35460., 36648., 39032., 40256., 39820., 41000., 43232.,
      44448., 46788., 48040., 50488., 51776., 35868., 37000., 39184., 40352.,
      42644., 43848., 46248., 47488., 33452., 34536., 36672., 37792., 40036.,
      41192., 43544., 44736., 32124., 33224., 35376., 36512., 38772., 39944.,
      42312., 43520., 31820., 32936., 35104., 36256., 38532., 39720., 42104.,
      43328., 28444., 29576., 31760., 32928., 35220., 36424., 38824., 40064.,
      26092., 27240., 29440., 30624., 32932., 34152., 36568., 37824., 28972.,
      30184., 32448., 33696., 36068., 37352., 39832., 41152., 28092., 29256.,
      31472., 32672., 34996., 36232., 38664., 39936., 28748., 29864., 32032.,
      33184., 35460., 36648., 39032., 40256., 30940., 32008., 34128., 35232.,
      37460., 38600., 40936., 42112., 34668., 35688., 37760., 38816., 40996.,
      42088., 44376., 45504., 36988., 38088., 40240., 41376., 43636., 44808.,
      47176., 48384., 39820., 41000., 43232., 44448., 46788., 48040., 50488.,
      51776., 31820., 32936., 35104., 36256., 38532., 39720., 42104., 43328.,
      28444., 29576., 31760., 32928., 35220., 36424., 38824., 40064., 26092.,
      27240., 29440., 30624., 32932., 34152., 36568., 37824., 23164., 24264.,
      26416., 27552., 29812., 30984., 33352., 34560., 21772., 22824., 24928.,
      26016., 28228., 29352., 31672., 32832., 25116., 26248., 28432., 29600.,
      31892., 33096., 35496., 36736., 28972., 30184., 32448., 33696., 36068.,
      37352., 39832., 41152., 34668., 35688., 37760., 38816., 40996., 42088.,
      44376., 45504., 36988., 38088., 40240., 41376., 43636., 44808., 47176.,
      48384., 39820., 41000., 43232., 44448., 46788., 48040., 50488., 51776.,
      35868., 37000., 39184., 40352., 42644., 43848., 46248., 47488., 33452.,
      34536., 36672., 37792., 40036., 41192., 43544., 44736., 32124., 33224.,
      35376., 36512., 38772., 39944., 42312., 43520., 31820., 32936., 35104.,
      36256., 38532., 39720., 42104., 43328.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      846.,   1692.,  2538.,  3384.,  4860.,  5832.,  6804.,  7776.,  9882.,
      10980., 12078., 13176., 15912., 17136., 18360., 19584., 1008.,  2016.,
      3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256.,
      15552., 18720., 20160., 21600., 23040., 1098.,  2196.,  3294.,  4392.,
      6300.,  7560.,  8820.,  10080., 12798., 14220., 15642., 17064., 20592.,
      22176., 23760., 25344., 1260.,  2520.,  3780.,  5040.,  7200.,  8640.,
      10080., 11520., 14580., 16200., 17820., 19440., 23400., 25200., 27000.,
      28800., 1170.,  2340.,  3510.,  4680.,  6660.,  7992.,  9324.,  10656.,
      13446., 14940., 16434., 17928., 21528., 23184., 24840., 26496., 1008.,
      2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960.,
      14256., 15552., 18720., 20160., 21600., 23040., 918.,   1836.,  2754.,
      3672.,  5220.,  6264.,  7308.,  8352.,  10530., 11700., 12870., 14040.,
      16848., 18144., 19440., 20736., 983.,   1966.,  2949.,  3932.,  5650.,
      6780.,  7910.,  9040.,  11493., 12770., 14047., 15324., 18512., 19936.,
      21360., 22784., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1277.,  2554.,  3831.,  5108.,  7330.,  8796.,  10262., 11728., 14895.,
      16550., 18205., 19860., 23972., 25816., 27660., 29504., 1462.,  2924.,
      4386.,  5848.,  8360.,  10032., 11704., 13376., 16938., 18820., 20702.,
      22584., 27196., 29288., 31380., 33472., 1361.,  2722.,  4083.,  5444.,
      7750.,  9300.,  10850., 12400., 15651., 17390., 19129., 20868., 25064.,
      26992., 28920., 30848., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1067.,  2134.,  3201.,  4268.,  6070.,  7284.,  8498.,  9712.,
      12249., 13610., 14971., 16332., 19604., 21112., 22620., 24128., 1128.,
      2256.,  3384.,  4512.,  6480.,  7776.,  9072.,  10368., 13176., 14640.,
      16104., 17568., 21216., 22848., 24480., 26112., 1344.,  2688.,  4032.,
      5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736.,
      24960., 26880., 28800., 30720., 1464.,  2928.,  4392.,  5856.,  8400.,
      10080., 11760., 13440., 17064., 18960., 20856., 22752., 27456., 29568.,
      31680., 33792., 1680.,  3360.,  5040.,  6720.,  9600.,  11520., 13440.,
      15360., 19440., 21600., 23760., 25920., 31200., 33600., 36000., 38400.,
      1560.,  3120.,  4680.,  6240.,  8880.,  10656., 12432., 14208., 17928.,
      19920., 21912., 23904., 28704., 30912., 33120., 35328., 1344.,  2688.,
      4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008.,
      20736., 24960., 26880., 28800., 30720., 1224.,  2448.,  3672.,  4896.,
      6960.,  8352.,  9744.,  11136., 14040., 15600., 17160., 18720., 22464.,
      24192., 25920., 27648., 1265.,  2530.,  3795.,  5060.,  7270.,  8724.,
      10178., 11632., 14787., 16430., 18073., 19716., 23816., 25648., 27480.,
      29312., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824.,
      17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560., 1643.,
      3286.,  4929.,  6572.,  9430.,  11316., 13202., 15088., 19161., 21290.,
      23419., 25548., 30836., 33208., 35580., 37952., 1882.,  3764.,  5646.,
      7528.,  10760., 12912., 15064., 17216., 21798., 24220., 26642., 29064.,
      34996., 37688., 40380., 43072., 1751.,  3502.,  5253.,  7004.,  9970.,
      11964., 13958., 15952., 20133., 22370., 24607., 26844., 32240., 34720.,
      37200., 39680., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096.,
      13824., 17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560.,
      1373.,  2746.,  4119.,  5492.,  7810.,  9372.,  10934., 12496., 15759.,
      17510., 19261., 21012., 25220., 27160., 29100., 31040., 1128.,  2256.,
      3384.,  4512.,  6480.,  7776.,  9072.,  10368., 13176., 14640., 16104.,
      17568., 21216., 22848., 24480., 26112., 1344.,  2688.,  4032.,  5376.,
      7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736., 24960.,
      26880., 28800., 30720., 1464.,  2928.,  4392.,  5856.,  8400.,  10080.,
      11760., 13440., 17064., 18960., 20856., 22752., 27456., 29568., 31680.,
      33792., 1680.,  3360.,  5040.,  6720.,  9600.,  11520., 13440., 15360.,
      19440., 21600., 23760., 25920., 31200., 33600., 36000., 38400., 1560.,
      3120.,  4680.,  6240.,  8880.,  10656., 12432., 14208., 17928., 19920.,
      21912., 23904., 28704., 30912., 33120., 35328., 1344.,  2688.,  4032.,
      5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736.,
      24960., 26880., 28800., 30720., 1224.,  2448.,  3672.,  4896.,  6960.,
      8352.,  9744.,  11136., 14040., 15600., 17160., 18720., 22464., 24192.,
      25920., 27648., 983.,   1966.,  2949.,  3932.,  5650.,  6780.,  7910.,
      9040.,  11493., 12770., 14047., 15324., 18512., 19936., 21360., 22784.,
      1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608.,
      15120., 16632., 18144., 21840., 23520., 25200., 26880., 1277.,  2554.,
      3831.,  5108.,  7330.,  8796.,  10262., 11728., 14895., 16550., 18205.,
      19860., 23972., 25816., 27660., 29504., 1462.,  2924.,  4386.,  5848.,
      8360.,  10032., 11704., 13376., 16938., 18820., 20702., 22584., 27196.,
      29288., 31380., 33472., 1361.,  2722.,  4083.,  5444.,  7750.,  9300.,
      10850., 12400., 15651., 17390., 19129., 20868., 25064., 26992., 28920.,
      30848., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752.,
      13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880., 1067.,
      2134.,  3201.,  4268.,  6070.,  7284.,  8498.,  9712.,  12249., 13610.,
      14971., 16332., 19604., 21112., 22620., 24128., 846.,   1692.,  2538.,
      3384.,  4860.,  5832.,  6804.,  7776.,  9882.,  10980., 12078., 13176.,
      15912., 17136., 18360., 19584., 1008.,  2016.,  3024.,  4032.,  5760.,
      6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160.,
      21600., 23040., 1098.,  2196.,  3294.,  4392.,  6300.,  7560.,  8820.,
      10080., 12798., 14220., 15642., 17064., 20592., 22176., 23760., 25344.,
      1260.,  2520.,  3780.,  5040.,  7200.,  8640.,  10080., 11520., 14580.,
      16200., 17820., 19440., 23400., 25200., 27000., 28800., 1170.,  2340.,
      3510.,  4680.,  6660.,  7992.,  9324.,  10656., 13446., 14940., 16434.,
      17928., 21528., 23184., 24840., 26496., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 918.,   1836.,  2754.,  3672.,  5220.,  6264.,
      7308.,  8352.,  10530., 11700., 12870., 14040., 16848., 18144., 19440.,
      20736.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25884., 26968., 28052., 29136., 31264., 32384., 33504., 34624., 36932.,
      38088., 39244., 40400., 42888., 44080., 45272., 46464., 27308., 28408.,
      29508., 30608., 32752., 33888., 35024., 36160., 38484., 39656., 40828.,
      42000., 44504., 45712., 46920., 48128., 30780., 31896., 33012., 34128.,
      36288., 37440., 38592., 39744., 42084., 43272., 44460., 45648., 48168.,
      49392., 50616., 51840., 28108., 29240., 30372., 31504., 33680., 34848.,
      36016., 37184., 39540., 40744., 41948., 43152., 45688., 46928., 48168.,
      49408., 27484., 28632., 29780., 30928., 33120., 34304., 35488., 36672.,
      39044., 40264., 41484., 42704., 45256., 46512., 47768., 49024., 25772.,
      26872., 27972., 29072., 31216., 32352., 33488., 34624., 36948., 38120.,
      39292., 40464., 42968., 44176., 45384., 46592., 27132., 28184., 29236.,
      30288., 32384., 33472., 34560., 35648., 37924., 39048., 40172., 41296.,
      43752., 44912., 46072., 47232., 24636., 25752., 26868., 27984., 30144.,
      31296., 32448., 33600., 35940., 37128., 38316., 39504., 42024., 43248.,
      44472., 45696., 24972., 26040., 27108., 28176., 30288., 31392., 32496.,
      33600., 35892., 37032., 38172., 39312., 41784., 42960., 44136., 45312.,
      28380., 29400., 30420., 31440., 33504., 34560., 35616., 36672., 38916.,
      40008., 41100., 42192., 44616., 45744., 46872., 48000., 28844., 29944.,
      31044., 32144., 34288., 35424., 36560., 37696., 40020., 41192., 42364.,
      43536., 46040., 47248., 48456., 49664., 30332., 31512., 32692., 33872.,
      36096., 37312., 38528., 39744., 42148., 43400., 44652., 45904., 48488.,
      49776., 51064., 52352., 26572., 27704., 28836., 29968., 32144., 33312.,
      34480., 35648., 38004., 39208., 40412., 41616., 44152., 45392., 46632.,
      47872., 25884., 26968., 28052., 29136., 31264., 32384., 33504., 34624.,
      36932., 38088., 39244., 40400., 42888., 44080., 45272., 46464., 27484.,
      28632., 29780., 30928., 33120., 34304., 35488., 36672., 39044., 40264.,
      41484., 42704., 45256., 46512., 47768., 49024., 25772., 26872., 27972.,
      29072., 31216., 32352., 33488., 34624., 36948., 38120., 39292., 40464.,
      42968., 44176., 45384., 46592., 27132., 28184., 29236., 30288., 32384.,
      33472., 34560., 35648., 37924., 39048., 40172., 41296., 43752., 44912.,
      46072., 47232., 29644., 30776., 31908., 33040., 35216., 36384., 37552.,
      38720., 41076., 42280., 43484., 44688., 47224., 48464., 49704., 50944.,
      33180., 34392., 35604., 36816., 39072., 40320., 41568., 42816., 45252.,
      46536., 47820., 49104., 51720., 53040., 54360., 55680., 27372., 28536.,
      29700., 30864., 33072., 34272., 35472., 36672., 39060., 40296., 41532.,
      42768., 45336., 46608., 47880., 49152., 24636., 25752., 26868., 27984.,
      30144., 31296., 32448., 33600., 35940., 37128., 38316., 39504., 42024.,
      43248., 44472., 45696., 30332., 31512., 32692., 33872., 36096., 37312.,
      38528., 39744., 42148., 43400., 44652., 45904., 48488., 49776., 51064.,
      52352., 26572., 27704., 28836., 29968., 32144., 33312., 34480., 35648.,
      38004., 39208., 40412., 41616., 44152., 45392., 46632., 47872., 25884.,
      26968., 28052., 29136., 31264., 32384., 33504., 34624., 36932., 38088.,
      39244., 40400., 42888., 44080., 45272., 46464., 27308., 28408., 29508.,
      30608., 32752., 33888., 35024., 36160., 38484., 39656., 40828., 42000.,
      44504., 45712., 46920., 48128., 30780., 31896., 33012., 34128., 36288.,
      37440., 38592., 39744., 42084., 43272., 44460., 45648., 48168., 49392.,
      50616., 51840., 28108., 29240., 30372., 31504., 33680., 34848., 36016.,
      37184., 39540., 40744., 41948., 43152., 45688., 46928., 48168., 49408.,
      27484., 28632., 29780., 30928., 33120., 34304., 35488., 36672., 39044.,
      40264., 41484., 42704., 45256., 46512., 47768., 49024., 33180., 34392.,
      35604., 36816., 39072., 40320., 41568., 42816., 45252., 46536., 47820.,
      49104., 51720., 53040., 54360., 55680., 27372., 28536., 29700., 30864.,
      33072., 34272., 35472., 36672., 39060., 40296., 41532., 42768., 45336.,
      46608., 47880., 49152., 24636., 25752., 26868., 27984., 30144., 31296.,
      32448., 33600., 35940., 37128., 38316., 39504., 42024., 43248., 44472.,
      45696., 24972., 26040., 27108., 28176., 30288., 31392., 32496., 33600.,
      35892., 37032., 38172., 39312., 41784., 42960., 44136., 45312., 28380.,
      29400., 30420., 31440., 33504., 34560., 35616., 36672., 38916., 40008.,
      41100., 42192., 44616., 45744., 46872., 48000., 28844., 29944., 31044.,
      32144., 34288., 35424., 36560., 37696., 40020., 41192., 42364., 43536.,
      46040., 47248., 48456., 49664., 30332., 31512., 32692., 33872., 36096.,
      37312., 38528., 39744., 42148., 43400., 44652., 45904., 48488., 49776.,
      51064., 52352., 30780., 31896., 33012., 34128., 36288., 37440., 38592.,
      39744., 42084., 43272., 44460., 45648., 48168., 49392., 50616., 51840.,
      28108., 29240., 30372., 31504., 33680., 34848., 36016., 37184., 39540.,
      40744., 41948., 43152., 45688., 46928., 48168., 49408., 27484., 28632.,
      29780., 30928., 33120., 34304., 35488., 36672., 39044., 40264., 41484.,
      42704., 45256., 46512., 47768., 49024., 25772., 26872., 27972., 29072.,
      31216., 32352., 33488., 34624., 36948., 38120., 39292., 40464., 42968.,
      44176., 45384., 46592., 27132., 28184., 29236., 30288., 32384., 33472.,
      34560., 35648., 37924., 39048., 40172., 41296., 43752., 44912., 46072.,
      47232., 29644., 30776., 31908., 33040., 35216., 36384., 37552., 38720.,
      41076., 42280., 43484., 44688., 47224., 48464., 49704., 50944., 33180.,
      34392., 35604., 36816., 39072., 40320., 41568., 42816., 45252., 46536.,
      47820., 49104., 51720., 53040., 54360., 55680., 28380., 29400., 30420.,
      31440., 33504., 34560., 35616., 36672., 38916., 40008., 41100., 42192.,
      44616., 45744., 46872., 48000., 28844., 29944., 31044., 32144., 34288.,
      35424., 36560., 37696., 40020., 41192., 42364., 43536., 46040., 47248.,
      48456., 49664., 30332., 31512., 32692., 33872., 36096., 37312., 38528.,
      39744., 42148., 43400., 44652., 45904., 48488., 49776., 51064., 52352.,
      26572., 27704., 28836., 29968., 32144., 33312., 34480., 35648., 38004.,
      39208., 40412., 41616., 44152., 45392., 46632., 47872., 25884., 26968.,
      28052., 29136., 31264., 32384., 33504., 34624., 36932., 38088., 39244.,
      40400., 42888., 44080., 45272., 46464., 27308., 28408., 29508., 30608.,
      32752., 33888., 35024., 36160., 38484., 39656., 40828., 42000., 44504.,
      45712., 46920., 48128., 30780., 31896., 33012., 34128., 36288., 37440.,
      38592., 39744., 42084., 43272., 44460., 45648., 48168., 49392., 50616.,
      51840.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5700.,  7185.,  8736.,  10332., 8904.,  7473.,  6060.,  10560., 12984.,
      15456., 17952., 15456., 12984., 10560., 7380.,  9279.,  11256., 13284.,
      11424., 9567.,  7740.,  13200., 16230., 19320., 22440., 19320., 16230.,
      13200., 7740.,  9567.,  11424., 13284., 11256., 9279.,  7380.,  10560.,
      12984., 15456., 17952., 15456., 12984., 10560., 6060.,  7473.,  8904.,
      10332., 8736.,  7185.,  5700.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38776., 39076., 39376., 39676., 39976., 40276., 40576., 41176., 41476.,
      41776., 42076., 42376., 42676., 42976., 43576., 43876., 44176., 44476.,
      44776., 45076., 45376., 45976., 46276., 46576., 46876., 47176., 47476.,
      47776., 48376., 48676., 48976., 49276., 49576., 49876., 50176., 50776.,
      51076., 51376., 51676., 51976., 52276., 52576., 53176., 53476., 53776.,
      54076., 54376., 54676., 54976.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7845.,  8520.,  9465.,  10338., 11004., 12096., 12420., 13752., 9849.,
      11088., 7485.,  8610.,  5370.,  6360.,  9720.,  10560., 11640., 12720.,
      13440., 14784., 15072., 16704., 11928., 13440., 9048.,  10416., 6480.,
      7680.,  10275., 11160., 12375., 13518., 14364., 15792., 16188., 17928.,
      12831., 14448., 9747.,  11214., 6990.,  8280.,  12150., 13200., 14550.,
      15900., 16800., 18480., 18840., 20880., 14910., 16800., 11310., 13020.,
      8100.,  9600.,  11595., 12600., 13815., 15102., 15876., 17472., 17724.,
      19656., 14007., 15792., 10611., 12222., 7590.,  9000.,  9720.,  10560.,
      11640., 12720., 13440., 14784., 15072., 16704., 11928., 13440., 9048.,
      10416., 6480.,  7680.,  9165.,  9960.,  10905., 11922., 12516., 13776.,
      13956., 15480., 11025., 12432., 8349.,  9618.,  5970.,  7080.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34348., 35568., 34924., 36168., 35500., 36768., 36076., 37368., 36652.,
      37968., 37228., 38568., 37804., 39168., 38956., 40368., 39532., 40968.,
      40108., 41568., 40684., 42168., 41260., 42768., 41836., 43368., 42412.,
      43968., 43564., 45168., 44140., 45768., 44716., 46368., 45292., 46968.,
      45868., 47568., 46444., 48168., 47020., 48768., 40492., 42032., 41068.,
      42632., 41644., 43232., 42220., 43832., 42796., 44432., 43372., 45032.,
      43948., 45632., 38444., 39920., 39020., 40520., 39596., 41120., 40172.,
      41720., 40748., 42320., 41324., 42920., 41900., 43520., 37420., 38832.,
      37996., 39432., 38572., 40032., 39148., 40632., 39724., 41232., 40300.,
      41832., 40876., 42432., 37420., 38768., 37996., 39368., 38572., 39968.,
      39148., 40568., 39724., 41168., 40300., 41768., 40876., 42368.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5703.,  6378.,  7053.,  7728.,  7401.,  8274.,  9147.,  10020., 8916.,
      10008., 11100., 12192., 10164., 11496., 12828., 14160., 7947.,  9186.,
      10425., 11664., 6501.,  7626.,  8751.,  9876.,  5910.,  6900.,  7890.,
      8880.,  7080.,  7920.,  8760.,  9600.,  9144.,  10224., 11304., 12384.,
      10944., 12288., 13632., 14976., 12384., 14016., 15648., 17280., 9672.,
      11184., 12696., 14208., 7896.,  9264.,  10632., 12000., 7152.,  8352.,
      9552.,  10752., 7473.,  8358.,  9243.,  10128., 9687.,  10830., 11973.,
      13116., 11652., 13080., 14508., 15936., 13260., 15000., 16740., 18480.,
      10365., 11982., 13599., 15216., 8475.,  9942.,  11409., 12876., 7698.,
      8988.,  10278., 11568., 8850.,  9900.,  10950., 12000., 11430., 12780.,
      14130., 15480., 13680., 15360., 17040., 18720., 15480., 17520., 19560.,
      21600., 12090., 13980., 15870., 17760., 9870.,  11580., 13290., 15000.,
      8940.,  10440., 11940., 13440., 8457.,  9462.,  10467., 11472., 10887.,
      12174., 13461., 14748., 12972., 14568., 16164., 17760., 14604., 16536.,
      18468., 20400., 11397., 13182., 14967., 16752., 9291.,  10902., 12513.,
      14124., 8394.,  9804.,  11214., 12624., 7080.,  7920.,  8760.,  9600.,
      9144.,  10224., 11304., 12384., 10944., 12288., 13632., 14976., 12384.,
      14016., 15648., 17280., 9672.,  11184., 12696., 14208., 7896.,  9264.,
      10632., 12000., 7152.,  8352.,  9552.,  10752., 6687.,  7482.,  8277.,
      9072.,  8601.,  9618.,  10635., 11652., 10236., 11496., 12756., 14016.,
      11508., 13032., 14556., 16080., 8979.,  10386., 11793., 13200., 7317.,
      8586.,  9855.,  11124., 6606.,  7716.,  8826.,  9936.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20116., 20824., 21532., 22240., 20732., 21464., 22196., 22928., 21348.,
      22104., 22860., 23616., 21964., 22744., 23524., 24304., 22580., 23384.,
      24188., 24992., 23196., 24024., 24852., 25680., 23812., 24664., 25516.,
      26368., 21588., 22360., 23132., 23904., 22204., 23000., 23796., 24592.,
      22820., 23640., 24460., 25280., 23436., 24280., 25124., 25968., 24052.,
      24920., 25788., 26656., 24668., 25560., 26452., 27344., 25284., 26200.,
      27116., 28032., 24084., 24920., 25756., 26592., 24700., 25560., 26420.,
      27280., 25316., 26200., 27084., 27968., 25932., 26840., 27748., 28656.,
      26548., 27480., 28412., 29344., 27164., 28120., 29076., 30032., 27780.,
      28760., 29740., 30720., 20052., 20824., 21596., 22368., 20668., 21464.,
      22260., 23056., 21284., 22104., 22924., 23744., 21900., 22744., 23588.,
      24432., 22516., 23384., 24252., 25120., 23132., 24024., 24916., 25808.,
      23748., 24664., 25580., 26496., 18068., 18776., 19484., 20192., 18684.,
      19416., 20148., 20880., 19300., 20056., 20812., 21568., 19916., 20696.,
      21476., 22256., 20532., 21336., 22140., 22944., 21148., 21976., 22804.,
      23632., 21764., 22616., 23468., 24320., 14036., 14680., 15324., 15968.,
      14652., 15320., 15988., 16656., 15268., 15960., 16652., 17344., 15884.,
      16600., 17316., 18032., 16500., 17240., 17980., 18720., 17116., 17880.,
      18644., 19408., 17732., 18520., 19308., 20096., 12052., 12632., 13212.,
      13792., 12668., 13272., 13876., 14480., 13284., 13912., 14540., 15168.,
      13900., 14552., 15204., 15856., 14516., 15192., 15868., 16544., 15132.,
      15832., 16532., 17232., 15748., 16472., 17196., 17920.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6615.,  8400.,  9030.,  11172., 11613., 14112., 14280., 17136., 11613.,
      14112., 9030.,  11172., 6615.,  8400.,  7560.,  9600.,  10320., 12768.,
      13272., 16128., 16320., 19584., 13272., 16128., 10320., 12768., 7560.,
      9600.,  8505.,  10800., 11610., 14364., 14931., 18144., 18360., 22032.,
      14931., 18144., 11610., 14364., 8505.,  10800., 9450.,  12000., 12900.,
      15960., 16590., 20160., 20400., 24480., 16590., 20160., 12900., 15960.,
      9450.,  12000., 8505.,  10800., 11610., 14364., 14931., 18144., 18360.,
      22032., 14931., 18144., 11610., 14364., 8505.,  10800., 7560.,  9600.,
      10320., 12768., 13272., 16128., 16320., 19584., 13272., 16128., 10320.,
      12768., 7560.,  9600.,  6615.,  8400.,  9030.,  11172., 11613., 14112.,
      14280., 17136., 11613., 14112., 9030.,  11172., 6615.,  8400.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43544., 45536., 44696., 46736., 45848., 47936., 47000., 49136., 48152.,
      50336., 49304., 51536., 50456., 52736., 40984., 43104., 42136., 44304.,
      43288., 45504., 44440., 46704., 45592., 47904., 46744., 49104., 47896.,
      50304., 39448., 41696., 40600., 42896., 41752., 44096., 42904., 45296.,
      44056., 46496., 45208., 47696., 46360., 48896., 31256., 33376., 32408.,
      34576., 33560., 35776., 34712., 36976., 35864., 38176., 37016., 39376.,
      38168., 40576., 25112., 27104., 26264., 28304., 27416., 29504., 28568.,
      30704., 29720., 31904., 30872., 33104., 32024., 34304., 25112., 26976.,
      26264., 28176., 27416., 29376., 28568., 30576., 29720., 31776., 30872.,
      32976., 32024., 34176., 27160., 28896., 28312., 30096., 29464., 31296.,
      30616., 32496., 31768., 33696., 32920., 34896., 34072., 36096.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4641.,  5166.,  6762.,  7392.,  6552.,  7308.,  9366.,  10248., 8757.,
      9786.,  12264., 13440., 11088., 12432., 15288., 16800., 8799.,  10122.,
      12642., 14112., 7392.,  8652.,  10878., 12264., 7035.,  8190.,  10164.,
      11424., 5304.,  5904.,  7728.,  8448.,  7488.,  8352.,  10704., 11712.,
      10008., 11184., 14016., 15360., 12672., 14208., 17472., 19200., 10056.,
      11568., 14448., 16128., 8448.,  9888.,  12432., 14016., 8040.,  9360.,
      11616., 13056., 5967.,  6642.,  8694.,  9504.,  8424.,  9396.,  12042.,
      13176., 11259., 12582., 15768., 17280., 14256., 15984., 19656., 21600.,
      11313., 13014., 16254., 18144., 9504.,  11124., 13986., 15768., 9045.,
      10530., 13068., 14688., 6630.,  7380.,  9660.,  10560., 9360.,  10440.,
      13380., 14640., 12510., 13980., 17520., 19200., 15840., 17760., 21840.,
      24000., 12570., 14460., 18060., 20160., 10560., 12360., 15540., 17520.,
      10050., 11700., 14520., 16320., 5967.,  6642.,  8694.,  9504.,  8424.,
      9396.,  12042., 13176., 11259., 12582., 15768., 17280., 14256., 15984.,
      19656., 21600., 11313., 13014., 16254., 18144., 9504.,  11124., 13986.,
      15768., 9045.,  10530., 13068., 14688., 5304.,  5904.,  7728.,  8448.,
      7488.,  8352.,  10704., 11712., 10008., 11184., 14016., 15360., 12672.,
      14208., 17472., 19200., 10056., 11568., 14448., 16128., 8448.,  9888.,
      12432., 14016., 8040.,  9360.,  11616., 13056., 4641.,  5166.,  6762.,
      7392.,  6552.,  7308.,  9366.,  10248., 8757.,  9786.,  12264., 13440.,
      11088., 12432., 15288., 16800., 8799.,  10122., 12642., 14112., 7392.,
      8652.,  10878., 12264., 7035.,  8190.,  10164., 11424.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17856., 18480., 19768., 20416., 19088., 19760., 21096., 21792., 20320.,
      21040., 22424., 23168., 21552., 22320., 23752., 24544., 22784., 23600.,
      25080., 25920., 24016., 24880., 26408., 27296., 25248., 26160., 27736.,
      28672., 15296., 15920., 17208., 17856., 16528., 17200., 18536., 19232.,
      17760., 18480., 19864., 20608., 18992., 19760., 21192., 21984., 20224.,
      21040., 22520., 23360., 21456., 22320., 23848., 24736., 22688., 23600.,
      25176., 26112., 15808., 16432., 17720., 18368., 17040., 17712., 19048.,
      19744., 18272., 18992., 20376., 21120., 19504., 20272., 21704., 22496.,
      20736., 21552., 23032., 23872., 21968., 22832., 24360., 25248., 23200.,
      24112., 25688., 26624., 15296., 15920., 17208., 17856., 16528., 17200.,
      18536., 19232., 17760., 18480., 19864., 20608., 18992., 19760., 21192.,
      21984., 20224., 21040., 22520., 23360., 21456., 22320., 23848., 24736.,
      22688., 23600., 25176., 26112., 17856., 18480., 19768., 20416., 19088.,
      19760., 21096., 21792., 20320., 21040., 22424., 23168., 21552., 22320.,
      23752., 24544., 22784., 23600., 25080., 25920., 24016., 24880., 26408.,
      27296., 25248., 26160., 27736., 28672., 15296., 15920., 17208., 17856.,
      16528., 17200., 18536., 19232., 17760., 18480., 19864., 20608., 18992.,
      19760., 21192., 21984., 20224., 21040., 22520., 23360., 21456., 22320.,
      23848., 24736., 22688., 23600., 25176., 26112., 15808., 16432., 17720.,
      18368., 17040., 17712., 19048., 19744., 18272., 18992., 20376., 21120.,
      19504., 20272., 21704., 22496., 20736., 21552., 23032., 23872., 21968.,
      22832., 24360., 25248., 23200., 24112., 25688., 26624.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3045.,  3570.,  4095.,  4620.,  6174.,  6804.,  7434.,  8064.,  4284.,
      5040.,  5796.,  6552.,  8442.,  9324.,  10206., 11088., 5733.,  6762.,
      7791.,  8820.,  11256., 12432., 13608., 14784., 7392.,  8736.,  10080.,
      11424., 14280., 15792., 17304., 18816., 5859.,  7182.,  8505.,  9828.,
      12390., 13860., 15330., 16800., 6804.,  8064.,  9324.,  10584., 12978.,
      14364., 15750., 17136., 4851.,  6006.,  7161.,  8316.,  10332., 11592.,
      12852., 14112., 3480.,  4080.,  4680.,  5280.,  7056.,  7776.,  8496.,
      9216.,  4896.,  5760.,  6624.,  7488.,  9648.,  10656., 11664., 12672.,
      6552.,  7728.,  8904.,  10080., 12864., 14208., 15552., 16896., 8448.,
      9984.,  11520., 13056., 16320., 18048., 19776., 21504., 6696.,  8208.,
      9720.,  11232., 14160., 15840., 17520., 19200., 7776.,  9216.,  10656.,
      12096., 14832., 16416., 18000., 19584., 5544.,  6864.,  8184.,  9504.,
      11808., 13248., 14688., 16128., 3915.,  4590.,  5265.,  5940.,  7938.,
      8748.,  9558.,  10368., 5508.,  6480.,  7452.,  8424.,  10854., 11988.,
      13122., 14256., 7371.,  8694.,  10017., 11340., 14472., 15984., 17496.,
      19008., 9504.,  11232., 12960., 14688., 18360., 20304., 22248., 24192.,
      7533.,  9234.,  10935., 12636., 15930., 17820., 19710., 21600., 8748.,
      10368., 11988., 13608., 16686., 18468., 20250., 22032., 6237.,  7722.,
      9207.,  10692., 13284., 14904., 16524., 18144., 4350.,  5100.,  5850.,
      6600.,  8820.,  9720.,  10620., 11520., 6120.,  7200.,  8280.,  9360.,
      12060., 13320., 14580., 15840., 8190.,  9660.,  11130., 12600., 16080.,
      17760., 19440., 21120., 10560., 12480., 14400., 16320., 20400., 22560.,
      24720., 26880., 8370.,  10260., 12150., 14040., 17700., 19800., 21900.,
      24000., 9720.,  11520., 13320., 15120., 18540., 20520., 22500., 24480.,
      6930.,  8580.,  10230., 11880., 14760., 16560., 18360., 20160., 3915.,
      4590.,  5265.,  5940.,  7938.,  8748.,  9558.,  10368., 5508.,  6480.,
      7452.,  8424.,  10854., 11988., 13122., 14256., 7371.,  8694.,  10017.,
      11340., 14472., 15984., 17496., 19008., 9504.,  11232., 12960., 14688.,
      18360., 20304., 22248., 24192., 7533.,  9234.,  10935., 12636., 15930.,
      17820., 19710., 21600., 8748.,  10368., 11988., 13608., 16686., 18468.,
      20250., 22032., 6237.,  7722.,  9207.,  10692., 13284., 14904., 16524.,
      18144., 3480.,  4080.,  4680.,  5280.,  7056.,  7776.,  8496.,  9216.,
      4896.,  5760.,  6624.,  7488.,  9648.,  10656., 11664., 12672., 6552.,
      7728.,  8904.,  10080., 12864., 14208., 15552., 16896., 8448.,  9984.,
      11520., 13056., 16320., 18048., 19776., 21504., 6696.,  8208.,  9720.,
      11232., 14160., 15840., 17520., 19200., 7776.,  9216.,  10656., 12096.,
      14832., 16416., 18000., 19584., 5544.,  6864.,  8184.,  9504.,  11808.,
      13248., 14688., 16128., 3045.,  3570.,  4095.,  4620.,  6174.,  6804.,
      7434.,  8064.,  4284.,  5040.,  5796.,  6552.,  8442.,  9324.,  10206.,
      11088., 5733.,  6762.,  7791.,  8820.,  11256., 12432., 13608., 14784.,
      7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816., 5859.,
      7182.,  8505.,  9828.,  12390., 13860., 15330., 16800., 6804.,  8064.,
      9324.,  10584., 12978., 14364., 15750., 17136., 4851.,  6006.,  7161.,
      8316.,  10332., 11592., 12852., 14112.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21776., 22400., 23024., 23648., 25064., 25712., 26360., 27008., 23168.,
      23840., 24512., 25184., 26648., 27344., 28040., 28736., 24560., 25280.,
      26000., 26720., 28232., 28976., 29720., 30464., 25952., 26720., 27488.,
      28256., 29816., 30608., 31400., 32192., 27344., 28160., 28976., 29792.,
      31400., 32240., 33080., 33920., 28736., 29600., 30464., 31328., 32984.,
      33872., 34760., 35648., 30128., 31040., 31952., 32864., 34568., 35504.,
      36440., 37376., 16656., 17280., 17904., 18528., 19944., 20592., 21240.,
      21888., 18048., 18720., 19392., 20064., 21528., 22224., 22920., 23616.,
      19440., 20160., 20880., 21600., 23112., 23856., 24600., 25344., 20832.,
      21600., 22368., 23136., 24696., 25488., 26280., 27072., 22224., 23040.,
      23856., 24672., 26280., 27120., 27960., 28800., 23616., 24480., 25344.,
      26208., 27864., 28752., 29640., 30528., 25008., 25920., 26832., 27744.,
      29448., 30384., 31320., 32256., 17680., 18304., 18928., 19552., 20968.,
      21616., 22264., 22912., 19072., 19744., 20416., 21088., 22552., 23248.,
      23944., 24640., 20464., 21184., 21904., 22624., 24136., 24880., 25624.,
      26368., 21856., 22624., 23392., 24160., 25720., 26512., 27304., 28096.,
      23248., 24064., 24880., 25696., 27304., 28144., 28984., 29824., 24640.,
      25504., 26368., 27232., 28888., 29776., 30664., 31552., 26032., 26944.,
      27856., 28768., 30472., 31408., 32344., 33280., 16656., 17280., 17904.,
      18528., 19944., 20592., 21240., 21888., 18048., 18720., 19392., 20064.,
      21528., 22224., 22920., 23616., 19440., 20160., 20880., 21600., 23112.,
      23856., 24600., 25344., 20832., 21600., 22368., 23136., 24696., 25488.,
      26280., 27072., 22224., 23040., 23856., 24672., 26280., 27120., 27960.,
      28800., 23616., 24480., 25344., 26208., 27864., 28752., 29640., 30528.,
      25008., 25920., 26832., 27744., 29448., 30384., 31320., 32256., 21776.,
      22400., 23024., 23648., 25064., 25712., 26360., 27008., 23168., 23840.,
      24512., 25184., 26648., 27344., 28040., 28736., 24560., 25280., 26000.,
      26720., 28232., 28976., 29720., 30464., 25952., 26720., 27488., 28256.,
      29816., 30608., 31400., 32192., 27344., 28160., 28976., 29792., 31400.,
      32240., 33080., 33920., 28736., 29600., 30464., 31328., 32984., 33872.,
      34760., 35648., 30128., 31040., 31952., 32864., 34568., 35504., 36440.,
      37376., 16656., 17280., 17904., 18528., 19944., 20592., 21240., 21888.,
      18048., 18720., 19392., 20064., 21528., 22224., 22920., 23616., 19440.,
      20160., 20880., 21600., 23112., 23856., 24600., 25344., 20832., 21600.,
      22368., 23136., 24696., 25488., 26280., 27072., 22224., 23040., 23856.,
      24672., 26280., 27120., 27960., 28800., 23616., 24480., 25344., 26208.,
      27864., 28752., 29640., 30528., 25008., 25920., 26832., 27744., 29448.,
      30384., 31320., 32256., 17680., 18304., 18928., 19552., 20968., 21616.,
      22264., 22912., 19072., 19744., 20416., 21088., 22552., 23248., 23944.,
      24640., 20464., 21184., 21904., 22624., 24136., 24880., 25624., 26368.,
      21856., 22624., 23392., 24160., 25720., 26512., 27304., 28096., 23248.,
      24064., 24880., 25696., 27304., 28144., 28984., 29824., 24640., 25504.,
      26368., 27232., 28888., 29776., 30664., 31552., 26032., 26944., 27856.,
      28768., 30472., 31408., 32344., 33280.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4053.,  5628.,  7413.,  9408.,  4662.,  6552.,  8694.,  11088., 7287.,
      9492.,  11991., 14784., 11592., 14112., 16968., 20160., 7287.,  9492.,
      11991., 14784., 4662.,  6552.,  8694.,  11088., 4053.,  5628.,  7413.,
      9408.,  4632.,  6432.,  8472.,  10752., 5328.,  7488.,  9936.,  12672.,
      8328.,  10848., 13704., 16896., 13248., 16128., 19392., 23040., 8328.,
      10848., 13704., 16896., 5328.,  7488.,  9936.,  12672., 4632.,  6432.,
      8472.,  10752., 5211.,  7236.,  9531.,  12096., 5994.,  8424.,  11178.,
      14256., 9369.,  12204., 15417., 19008., 14904., 18144., 21816., 25920.,
      9369.,  12204., 15417., 19008., 5994.,  8424.,  11178., 14256., 5211.,
      7236.,  9531.,  12096., 5790.,  8040.,  10590., 13440., 6660.,  9360.,
      12420., 15840., 10410., 13560., 17130., 21120., 16560., 20160., 24240.,
      28800., 10410., 13560., 17130., 21120., 6660.,  9360.,  12420., 15840.,
      5790.,  8040.,  10590., 13440., 5211.,  7236.,  9531.,  12096., 5994.,
      8424.,  11178., 14256., 9369.,  12204., 15417., 19008., 14904., 18144.,
      21816., 25920., 9369.,  12204., 15417., 19008., 5994.,  8424.,  11178.,
      14256., 5211.,  7236.,  9531.,  12096., 4632.,  6432.,  8472.,  10752.,
      5328.,  7488.,  9936.,  12672., 8328.,  10848., 13704., 16896., 13248.,
      16128., 19392., 23040., 8328.,  10848., 13704., 16896., 5328.,  7488.,
      9936.,  12672., 4632.,  6432.,  8472.,  10752., 4053.,  5628.,  7413.,
      9408.,  4662.,  6552.,  8694.,  11088., 7287.,  9492.,  11991., 14784.,
      11592., 14112., 16968., 20160., 7287.,  9492.,  11991., 14784., 4662.,
      6552.,  8694.,  11088., 4053.,  5628.,  7413.,  9408.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13336., 14432., 15576., 16768., 15800., 16992., 18232., 19520., 18264.,
      19552., 20888., 22272., 20728., 22112., 23544., 25024., 23192., 24672.,
      26200., 27776., 25656., 27232., 28856., 30528., 28120., 29792., 31512.,
      33280., 10264., 11360., 12504., 13696., 12728., 13920., 15160., 16448.,
      15192., 16480., 17816., 19200., 17656., 19040., 20472., 21952., 20120.,
      21600., 23128., 24704., 22584., 24160., 25784., 27456., 25048., 26720.,
      28440., 30208., 13336., 14432., 15576., 16768., 15800., 16992., 18232.,
      19520., 18264., 19552., 20888., 22272., 20728., 22112., 23544., 25024.,
      23192., 24672., 26200., 27776., 25656., 27232., 28856., 30528., 28120.,
      29792., 31512., 33280., 10264., 11360., 12504., 13696., 12728., 13920.,
      15160., 16448., 15192., 16480., 17816., 19200., 17656., 19040., 20472.,
      21952., 20120., 21600., 23128., 24704., 22584., 24160., 25784., 27456.,
      25048., 26720., 28440., 30208., 13336., 14432., 15576., 16768., 15800.,
      16992., 18232., 19520., 18264., 19552., 20888., 22272., 20728., 22112.,
      23544., 25024., 23192., 24672., 26200., 27776., 25656., 27232., 28856.,
      30528., 28120., 29792., 31512., 33280., 10264., 11360., 12504., 13696.,
      12728., 13920., 15160., 16448., 15192., 16480., 17816., 19200., 17656.,
      19040., 20472., 21952., 20120., 21600., 23128., 24704., 22584., 24160.,
      25784., 27456., 25048., 26720., 28440., 30208., 13336., 14432., 15576.,
      16768., 15800., 16992., 18232., 19520., 18264., 19552., 20888., 22272.,
      20728., 22112., 23544., 25024., 23192., 24672., 26200., 27776., 25656.,
      27232., 28856., 30528., 28120., 29792., 31512., 33280.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2457.,  3066.,  4494.,  5208.,  6951.,  7770.,  9828.,  10752., 4578.,
      5292.,  6888.,  7728.,  9702.,  10668., 13020., 14112., 4263.,  5166.,
      7182.,  8232.,  10689., 11886., 14784., 16128., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 4347.,  5502.,  7602.,  8904.,
      11445., 12894., 15876., 17472., 6258.,  7308.,  9240.,  10416., 12726.,
      14028., 16716., 18144., 2541.,  3402.,  4914.,  5880.,  7707.,  8778.,
      10920., 12096., 2808.,  3504.,  5136.,  5952.,  7944.,  8880.,  11232.,
      12288., 5232.,  6048.,  7872.,  8832.,  11088., 12192., 14880., 16128.,
      4872.,  5904.,  8208.,  9408.,  12216., 13584., 16896., 18432., 8256.,
      9600.,  12288., 13824., 17088., 18816., 22656., 24576., 4968.,  6288.,
      8688.,  10176., 13080., 14736., 18144., 19968., 7152.,  8352.,  10560.,
      11904., 14544., 16032., 19104., 20736., 2904.,  3888.,  5616.,  6720.,
      8808.,  10032., 12480., 13824., 3159.,  3942.,  5778.,  6696.,  8937.,
      9990.,  12636., 13824., 5886.,  6804.,  8856.,  9936.,  12474., 13716.,
      16740., 18144., 5481.,  6642.,  9234.,  10584., 13743., 15282., 19008.,
      20736., 9288.,  10800., 13824., 15552., 19224., 21168., 25488., 27648.,
      5589.,  7074.,  9774.,  11448., 14715., 16578., 20412., 22464., 8046.,
      9396.,  11880., 13392., 16362., 18036., 21492., 23328., 3267.,  4374.,
      6318.,  7560.,  9909.,  11286., 14040., 15552., 3510.,  4380.,  6420.,
      7440.,  9930.,  11100., 14040., 15360., 6540.,  7560.,  9840.,  11040.,
      13860., 15240., 18600., 20160., 6090.,  7380.,  10260., 11760., 15270.,
      16980., 21120., 23040., 10320., 12000., 15360., 17280., 21360., 23520.,
      28320., 30720., 6210.,  7860.,  10860., 12720., 16350., 18420., 22680.,
      24960., 8940.,  10440., 13200., 14880., 18180., 20040., 23880., 25920.,
      3630.,  4860.,  7020.,  8400.,  11010., 12540., 15600., 17280., 3159.,
      3942.,  5778.,  6696.,  8937.,  9990.,  12636., 13824., 5886.,  6804.,
      8856.,  9936.,  12474., 13716., 16740., 18144., 5481.,  6642.,  9234.,
      10584., 13743., 15282., 19008., 20736., 9288.,  10800., 13824., 15552.,
      19224., 21168., 25488., 27648., 5589.,  7074.,  9774.,  11448., 14715.,
      16578., 20412., 22464., 8046.,  9396.,  11880., 13392., 16362., 18036.,
      21492., 23328., 3267.,  4374.,  6318.,  7560.,  9909.,  11286., 14040.,
      15552., 2808.,  3504.,  5136.,  5952.,  7944.,  8880.,  11232., 12288.,
      5232.,  6048.,  7872.,  8832.,  11088., 12192., 14880., 16128., 4872.,
      5904.,  8208.,  9408.,  12216., 13584., 16896., 18432., 8256.,  9600.,
      12288., 13824., 17088., 18816., 22656., 24576., 4968.,  6288.,  8688.,
      10176., 13080., 14736., 18144., 19968., 7152.,  8352.,  10560., 11904.,
      14544., 16032., 19104., 20736., 2904.,  3888.,  5616.,  6720.,  8808.,
      10032., 12480., 13824., 2457.,  3066.,  4494.,  5208.,  6951.,  7770.,
      9828.,  10752., 4578.,  5292.,  6888.,  7728.,  9702.,  10668., 13020.,
      14112., 4263.,  5166.,  7182.,  8232.,  10689., 11886., 14784., 16128.,
      7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504., 4347.,
      5502.,  7602.,  8904.,  11445., 12894., 15876., 17472., 6258.,  7308.,
      9240.,  10416., 12726., 14028., 16716., 18144., 2541.,  3402.,  4914.,
      5880.,  7707.,  8778.,  10920., 12096.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16488., 16944., 18144., 18624., 19896., 20400., 21744., 22272., 19272.,
      19824., 21120., 21696., 23064., 23664., 25104., 25728., 22056., 22704.,
      24096., 24768., 26232., 26928., 28464., 29184., 24840., 25584., 27072.,
      27840., 29400., 30192., 31824., 32640., 27624., 28464., 30048., 30912.,
      32568., 33456., 35184., 36096., 30408., 31344., 33024., 33984., 35736.,
      36720., 38544., 39552., 33192., 34224., 36000., 37056., 38904., 39984.,
      41904., 43008., 10344., 10800., 12000., 12480., 13752., 14256., 15600.,
      16128., 13128., 13680., 14976., 15552., 16920., 17520., 18960., 19584.,
      15912., 16560., 17952., 18624., 20088., 20784., 22320., 23040., 18696.,
      19440., 20928., 21696., 23256., 24048., 25680., 26496., 21480., 22320.,
      23904., 24768., 26424., 27312., 29040., 29952., 24264., 25200., 26880.,
      27840., 29592., 30576., 32400., 33408., 27048., 28080., 29856., 30912.,
      32760., 33840., 35760., 36864., 16488., 16944., 18144., 18624., 19896.,
      20400., 21744., 22272., 19272., 19824., 21120., 21696., 23064., 23664.,
      25104., 25728., 22056., 22704., 24096., 24768., 26232., 26928., 28464.,
      29184., 24840., 25584., 27072., 27840., 29400., 30192., 31824., 32640.,
      27624., 28464., 30048., 30912., 32568., 33456., 35184., 36096., 30408.,
      31344., 33024., 33984., 35736., 36720., 38544., 39552., 33192., 34224.,
      36000., 37056., 38904., 39984., 41904., 43008., 10344., 10800., 12000.,
      12480., 13752., 14256., 15600., 16128., 13128., 13680., 14976., 15552.,
      16920., 17520., 18960., 19584., 15912., 16560., 17952., 18624., 20088.,
      20784., 22320., 23040., 18696., 19440., 20928., 21696., 23256., 24048.,
      25680., 26496., 21480., 22320., 23904., 24768., 26424., 27312., 29040.,
      29952., 24264., 25200., 26880., 27840., 29592., 30576., 32400., 33408.,
      27048., 28080., 29856., 30912., 32760., 33840., 35760., 36864., 16488.,
      16944., 18144., 18624., 19896., 20400., 21744., 22272., 19272., 19824.,
      21120., 21696., 23064., 23664., 25104., 25728., 22056., 22704., 24096.,
      24768., 26232., 26928., 28464., 29184., 24840., 25584., 27072., 27840.,
      29400., 30192., 31824., 32640., 27624., 28464., 30048., 30912., 32568.,
      33456., 35184., 36096., 30408., 31344., 33024., 33984., 35736., 36720.,
      38544., 39552., 33192., 34224., 36000., 37056., 38904., 39984., 41904.,
      43008., 10344., 10800., 12000., 12480., 13752., 14256., 15600., 16128.,
      13128., 13680., 14976., 15552., 16920., 17520., 18960., 19584., 15912.,
      16560., 17952., 18624., 20088., 20784., 22320., 23040., 18696., 19440.,
      20928., 21696., 23256., 24048., 25680., 26496., 21480., 22320., 23904.,
      24768., 26424., 27312., 29040., 29952., 24264., 25200., 26880., 27840.,
      29592., 30576., 32400., 33408., 27048., 28080., 29856., 30912., 32760.,
      33840., 35760., 36864., 16488., 16944., 18144., 18624., 19896., 20400.,
      21744., 22272., 19272., 19824., 21120., 21696., 23064., 23664., 25104.,
      25728., 22056., 22704., 24096., 24768., 26232., 26928., 28464., 29184.,
      24840., 25584., 27072., 27840., 29400., 30192., 31824., 32640., 27624.,
      28464., 30048., 30912., 32568., 33456., 35184., 36096., 30408., 31344.,
      33024., 33984., 35736., 36720., 38544., 39552., 33192., 34224., 36000.,
      37056., 38904., 39984., 41904., 43008.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      609.,   1218.,  1827.,  2436.,  3570.,  4284.,  4998.,  5712.,  7371.,
      8190.,  9009.,  9828.,  12012., 12936., 13860., 14784., 714.,   1428.,
      2142.,  2856.,  4200.,  5040.,  5880.,  6720.,  8694.,  9660.,  10626.,
      11592., 14196., 15288., 16380., 17472., 903.,   1806.,  2709.,  3612.,
      5250.,  6300.,  7350.,  8400.,  10773., 11970., 13167., 14364., 17472.,
      18816., 20160., 21504., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1155.,  2310.,  3465.,  4620.,  6510.,  7812.,  9114.,  10416.,
      13041., 14490., 15939., 17388., 20748., 22344., 23940., 25536., 1050.,
      2100.,  3150.,  4200.,  5880.,  7056.,  8232.,  9408.,  11718., 13020.,
      14322., 15624., 18564., 19992., 21420., 22848., 861.,   1722.,  2583.,
      3444.,  4830.,  5796.,  6762.,  7728.,  9639.,  10710., 11781., 12852.,
      15288., 16464., 17640., 18816., 696.,   1392.,  2088.,  2784.,  4080.,
      4896.,  5712.,  6528.,  8424.,  9360.,  10296., 11232., 13728., 14784.,
      15840., 16896., 816.,   1632.,  2448.,  3264.,  4800.,  5760.,  6720.,
      7680.,  9936.,  11040., 12144., 13248., 16224., 17472., 18720., 19968.,
      1032.,  2064.,  3096.,  4128.,  6000.,  7200.,  8400.,  9600.,  12312.,
      13680., 15048., 16416., 19968., 21504., 23040., 24576., 1344.,  2688.,
      4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008.,
      20736., 24960., 26880., 28800., 30720., 1320.,  2640.,  3960.,  5280.,
      7440.,  8928.,  10416., 11904., 14904., 16560., 18216., 19872., 23712.,
      25536., 27360., 29184., 1200.,  2400.,  3600.,  4800.,  6720.,  8064.,
      9408.,  10752., 13392., 14880., 16368., 17856., 21216., 22848., 24480.,
      26112., 984.,   1968.,  2952.,  3936.,  5520.,  6624.,  7728.,  8832.,
      11016., 12240., 13464., 14688., 17472., 18816., 20160., 21504., 783.,
      1566.,  2349.,  3132.,  4590.,  5508.,  6426.,  7344.,  9477.,  10530.,
      11583., 12636., 15444., 16632., 17820., 19008., 918.,   1836.,  2754.,
      3672.,  5400.,  6480.,  7560.,  8640.,  11178., 12420., 13662., 14904.,
      18252., 19656., 21060., 22464., 1161.,  2322.,  3483.,  4644.,  6750.,
      8100.,  9450.,  10800., 13851., 15390., 16929., 18468., 22464., 24192.,
      25920., 27648., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096.,
      13824., 17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560.,
      1485.,  2970.,  4455.,  5940.,  8370.,  10044., 11718., 13392., 16767.,
      18630., 20493., 22356., 26676., 28728., 30780., 32832., 1350.,  2700.,
      4050.,  5400.,  7560.,  9072.,  10584., 12096., 15066., 16740., 18414.,
      20088., 23868., 25704., 27540., 29376., 1107.,  2214.,  3321.,  4428.,
      6210.,  7452.,  8694.,  9936.,  12393., 13770., 15147., 16524., 19656.,
      21168., 22680., 24192., 870.,   1740.,  2610.,  3480.,  5100.,  6120.,
      7140.,  8160.,  10530., 11700., 12870., 14040., 17160., 18480., 19800.,
      21120., 1020.,  2040.,  3060.,  4080.,  6000.,  7200.,  8400.,  9600.,
      12420., 13800., 15180., 16560., 20280., 21840., 23400., 24960., 1290.,
      2580.,  3870.,  5160.,  7500.,  9000.,  10500., 12000., 15390., 17100.,
      18810., 20520., 24960., 26880., 28800., 30720., 1680.,  3360.,  5040.,
      6720.,  9600.,  11520., 13440., 15360., 19440., 21600., 23760., 25920.,
      31200., 33600., 36000., 38400., 1650.,  3300.,  4950.,  6600.,  9300.,
      11160., 13020., 14880., 18630., 20700., 22770., 24840., 29640., 31920.,
      34200., 36480., 1500.,  3000.,  4500.,  6000.,  8400.,  10080., 11760.,
      13440., 16740., 18600., 20460., 22320., 26520., 28560., 30600., 32640.,
      1230.,  2460.,  3690.,  4920.,  6900.,  8280.,  9660.,  11040., 13770.,
      15300., 16830., 18360., 21840., 23520., 25200., 26880., 783.,   1566.,
      2349.,  3132.,  4590.,  5508.,  6426.,  7344.,  9477.,  10530., 11583.,
      12636., 15444., 16632., 17820., 19008., 918.,   1836.,  2754.,  3672.,
      5400.,  6480.,  7560.,  8640.,  11178., 12420., 13662., 14904., 18252.,
      19656., 21060., 22464., 1161.,  2322.,  3483.,  4644.,  6750.,  8100.,
      9450.,  10800., 13851., 15390., 16929., 18468., 22464., 24192., 25920.,
      27648., 1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824.,
      17496., 19440., 21384., 23328., 28080., 30240., 32400., 34560., 1485.,
      2970.,  4455.,  5940.,  8370.,  10044., 11718., 13392., 16767., 18630.,
      20493., 22356., 26676., 28728., 30780., 32832., 1350.,  2700.,  4050.,
      5400.,  7560.,  9072.,  10584., 12096., 15066., 16740., 18414., 20088.,
      23868., 25704., 27540., 29376., 1107.,  2214.,  3321.,  4428.,  6210.,
      7452.,  8694.,  9936.,  12393., 13770., 15147., 16524., 19656., 21168.,
      22680., 24192., 696.,   1392.,  2088.,  2784.,  4080.,  4896.,  5712.,
      6528.,  8424.,  9360.,  10296., 11232., 13728., 14784., 15840., 16896.,
      816.,   1632.,  2448.,  3264.,  4800.,  5760.,  6720.,  7680.,  9936.,
      11040., 12144., 13248., 16224., 17472., 18720., 19968., 1032.,  2064.,
      3096.,  4128.,  6000.,  7200.,  8400.,  9600.,  12312., 13680., 15048.,
      16416., 19968., 21504., 23040., 24576., 1344.,  2688.,  4032.,  5376.,
      7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736., 24960.,
      26880., 28800., 30720., 1320.,  2640.,  3960.,  5280.,  7440.,  8928.,
      10416., 11904., 14904., 16560., 18216., 19872., 23712., 25536., 27360.,
      29184., 1200.,  2400.,  3600.,  4800.,  6720.,  8064.,  9408.,  10752.,
      13392., 14880., 16368., 17856., 21216., 22848., 24480., 26112., 984.,
      1968.,  2952.,  3936.,  5520.,  6624.,  7728.,  8832.,  11016., 12240.,
      13464., 14688., 17472., 18816., 20160., 21504., 609.,   1218.,  1827.,
      2436.,  3570.,  4284.,  4998.,  5712.,  7371.,  8190.,  9009.,  9828.,
      12012., 12936., 13860., 14784., 714.,   1428.,  2142.,  2856.,  4200.,
      5040.,  5880.,  6720.,  8694.,  9660.,  10626., 11592., 14196., 15288.,
      16380., 17472., 903.,   1806.,  2709.,  3612.,  5250.,  6300.,  7350.,
      8400.,  10773., 11970., 13167., 14364., 17472., 18816., 20160., 21504.,
      1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608.,
      15120., 16632., 18144., 21840., 23520., 25200., 26880., 1155.,  2310.,
      3465.,  4620.,  6510.,  7812.,  9114.,  10416., 13041., 14490., 15939.,
      17388., 20748., 22344., 23940., 25536., 1050.,  2100.,  3150.,  4200.,
      5880.,  7056.,  8232.,  9408.,  11718., 13020., 14322., 15624., 18564.,
      19992., 21420., 22848., 861.,   1722.,  2583.,  3444.,  4830.,  5796.,
      6762.,  7728.,  9639.,  10710., 11781., 12852., 15288., 16464., 17640.,
      18816.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17928., 18384., 18840., 19296., 20448., 20928., 21408., 21888., 23160.,
      23664., 24168., 24672., 26064., 26592., 27120., 27648., 20328., 20880.,
      21432., 21984., 23232., 23808., 24384., 24960., 26328., 26928., 27528.,
      28128., 29616., 30240., 30864., 31488., 22728., 23376., 24024., 24672.,
      26016., 26688., 27360., 28032., 29496., 30192., 30888., 31584., 33168.,
      33888., 34608., 35328., 25128., 25872., 26616., 27360., 28800., 29568.,
      30336., 31104., 32664., 33456., 34248., 35040., 36720., 37536., 38352.,
      39168., 27528., 28368., 29208., 30048., 31584., 32448., 33312., 34176.,
      35832., 36720., 37608., 38496., 40272., 41184., 42096., 43008., 29928.,
      30864., 31800., 32736., 34368., 35328., 36288., 37248., 39000., 39984.,
      40968., 41952., 43824., 44832., 45840., 46848., 32328., 33360., 34392.,
      35424., 37152., 38208., 39264., 40320., 42168., 43248., 44328., 45408.,
      47376., 48480., 49584., 50688., 5640.,  6096.,  6552.,  7008.,  8160.,
      8640.,  9120.,  9600.,  10872., 11376., 11880., 12384., 13776., 14304.,
      14832., 15360., 8040.,  8592.,  9144.,  9696.,  10944., 11520., 12096.,
      12672., 14040., 14640., 15240., 15840., 17328., 17952., 18576., 19200.,
      10440., 11088., 11736., 12384., 13728., 14400., 15072., 15744., 17208.,
      17904., 18600., 19296., 20880., 21600., 22320., 23040., 12840., 13584.,
      14328., 15072., 16512., 17280., 18048., 18816., 20376., 21168., 21960.,
      22752., 24432., 25248., 26064., 26880., 15240., 16080., 16920., 17760.,
      19296., 20160., 21024., 21888., 23544., 24432., 25320., 26208., 27984.,
      28896., 29808., 30720., 17640., 18576., 19512., 20448., 22080., 23040.,
      24000., 24960., 26712., 27696., 28680., 29664., 31536., 32544., 33552.,
      34560., 20040., 21072., 22104., 23136., 24864., 25920., 26976., 28032.,
      29880., 30960., 32040., 33120., 35088., 36192., 37296., 38400., 17928.,
      18384., 18840., 19296., 20448., 20928., 21408., 21888., 23160., 23664.,
      24168., 24672., 26064., 26592., 27120., 27648., 20328., 20880., 21432.,
      21984., 23232., 23808., 24384., 24960., 26328., 26928., 27528., 28128.,
      29616., 30240., 30864., 31488., 22728., 23376., 24024., 24672., 26016.,
      26688., 27360., 28032., 29496., 30192., 30888., 31584., 33168., 33888.,
      34608., 35328., 25128., 25872., 26616., 27360., 28800., 29568., 30336.,
      31104., 32664., 33456., 34248., 35040., 36720., 37536., 38352., 39168.,
      27528., 28368., 29208., 30048., 31584., 32448., 33312., 34176., 35832.,
      36720., 37608., 38496., 40272., 41184., 42096., 43008., 29928., 30864.,
      31800., 32736., 34368., 35328., 36288., 37248., 39000., 39984., 40968.,
      41952., 43824., 44832., 45840., 46848., 32328., 33360., 34392., 35424.,
      37152., 38208., 39264., 40320., 42168., 43248., 44328., 45408., 47376.,
      48480., 49584., 50688., 5640.,  6096.,  6552.,  7008.,  8160.,  8640.,
      9120.,  9600.,  10872., 11376., 11880., 12384., 13776., 14304., 14832.,
      15360., 8040.,  8592.,  9144.,  9696.,  10944., 11520., 12096., 12672.,
      14040., 14640., 15240., 15840., 17328., 17952., 18576., 19200., 10440.,
      11088., 11736., 12384., 13728., 14400., 15072., 15744., 17208., 17904.,
      18600., 19296., 20880., 21600., 22320., 23040., 12840., 13584., 14328.,
      15072., 16512., 17280., 18048., 18816., 20376., 21168., 21960., 22752.,
      24432., 25248., 26064., 26880., 15240., 16080., 16920., 17760., 19296.,
      20160., 21024., 21888., 23544., 24432., 25320., 26208., 27984., 28896.,
      29808., 30720., 17640., 18576., 19512., 20448., 22080., 23040., 24000.,
      24960., 26712., 27696., 28680., 29664., 31536., 32544., 33552., 34560.,
      20040., 21072., 22104., 23136., 24864., 25920., 26976., 28032., 29880.,
      30960., 32040., 33120., 35088., 36192., 37296., 38400., 17928., 18384.,
      18840., 19296., 20448., 20928., 21408., 21888., 23160., 23664., 24168.,
      24672., 26064., 26592., 27120., 27648., 20328., 20880., 21432., 21984.,
      23232., 23808., 24384., 24960., 26328., 26928., 27528., 28128., 29616.,
      30240., 30864., 31488., 22728., 23376., 24024., 24672., 26016., 26688.,
      27360., 28032., 29496., 30192., 30888., 31584., 33168., 33888., 34608.,
      35328., 25128., 25872., 26616., 27360., 28800., 29568., 30336., 31104.,
      32664., 33456., 34248., 35040., 36720., 37536., 38352., 39168., 27528.,
      28368., 29208., 30048., 31584., 32448., 33312., 34176., 35832., 36720.,
      37608., 38496., 40272., 41184., 42096., 43008., 29928., 30864., 31800.,
      32736., 34368., 35328., 36288., 37248., 39000., 39984., 40968., 41952.,
      43824., 44832., 45840., 46848., 32328., 33360., 34392., 35424., 37152.,
      38208., 39264., 40320., 42168., 43248., 44328., 45408., 47376., 48480.,
      49584., 50688., 5640.,  6096.,  6552.,  7008.,  8160.,  8640.,  9120.,
      9600.,  10872., 11376., 11880., 12384., 13776., 14304., 14832., 15360.,
      8040.,  8592.,  9144.,  9696.,  10944., 11520., 12096., 12672., 14040.,
      14640., 15240., 15840., 17328., 17952., 18576., 19200., 10440., 11088.,
      11736., 12384., 13728., 14400., 15072., 15744., 17208., 17904., 18600.,
      19296., 20880., 21600., 22320., 23040., 12840., 13584., 14328., 15072.,
      16512., 17280., 18048., 18816., 20376., 21168., 21960., 22752., 24432.,
      25248., 26064., 26880., 15240., 16080., 16920., 17760., 19296., 20160.,
      21024., 21888., 23544., 24432., 25320., 26208., 27984., 28896., 29808.,
      30720., 17640., 18576., 19512., 20448., 22080., 23040., 24000., 24960.,
      26712., 27696., 28680., 29664., 31536., 32544., 33552., 34560., 20040.,
      21072., 22104., 23136., 24864., 25920., 26976., 28032., 29880., 30960.,
      32040., 33120., 35088., 36192., 37296., 38400., 17928., 18384., 18840.,
      19296., 20448., 20928., 21408., 21888., 23160., 23664., 24168., 24672.,
      26064., 26592., 27120., 27648., 20328., 20880., 21432., 21984., 23232.,
      23808., 24384., 24960., 26328., 26928., 27528., 28128., 29616., 30240.,
      30864., 31488., 22728., 23376., 24024., 24672., 26016., 26688., 27360.,
      28032., 29496., 30192., 30888., 31584., 33168., 33888., 34608., 35328.,
      25128., 25872., 26616., 27360., 28800., 29568., 30336., 31104., 32664.,
      33456., 34248., 35040., 36720., 37536., 38352., 39168., 27528., 28368.,
      29208., 30048., 31584., 32448., 33312., 34176., 35832., 36720., 37608.,
      38496., 40272., 41184., 42096., 43008., 29928., 30864., 31800., 32736.,
      34368., 35328., 36288., 37248., 39000., 39984., 40968., 41952., 43824.,
      44832., 45840., 46848., 32328., 33360., 34392., 35424., 37152., 38208.,
      39264., 40320., 42168., 43248., 44328., 45408., 47376., 48480., 49584.,
      50688.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10025., 10786., 11532., 12386., 10660., 9060.,  7639.,  9528.,  11708.,
      14112., 17084., 16432., 15516., 12200., 11265., 12538., 13724., 15004.,
      13284., 11780., 10279., 13202., 16647., 20456., 24951., 20456., 16647.,
      13202., 10279., 11780., 13284., 15004., 13724., 12538., 11265., 12200.,
      15516., 16432., 17084., 14112., 11708., 9528.,  7639.,  9060.,  10660.,
      12386., 11532., 10786., 10025.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50574., 51240., 51906., 52572., 53238., 53904., 54570., 53496., 51218.,
      49068., 49734., 50400., 51066., 51732., 51042., 49148., 47382., 48048.,
      48714., 49380., 50046., 49740., 48230., 46848., 47514., 48180., 48846.,
      49512., 49590., 48464., 47466., 48132., 48798., 49464., 50130., 52128.,
      52794., 48852., 45038., 41352., 42018., 42684., 44682., 45348., 41790.,
      38360., 35058., 35724., 36390.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8435.,  9506.,  9369.,  10612., 10492., 11912., 11970., 13572., 11156.,
      12584., 10487., 11736., 9717.,  10782., 9120.,  10336., 10492., 11912.,
      12080., 13696., 14268., 16088., 13648., 15264., 13068., 14488., 10192.,
      11408., 10047., 11426., 11978., 13588., 14380., 16216., 17295., 19352.,
      16900., 18728., 13572., 15176., 10741., 12110., 11292., 12820., 13929.,
      15710., 17040., 19072., 20917., 23198., 17056., 19088., 14037., 15822.,
      11488., 13012., 10857., 12238., 13593., 15208., 17012., 18856., 17316.,
      19384., 14364., 16200., 12059., 13668., 10119., 11490., 10176., 11392.,
      13068., 14488., 13792., 15424., 14428., 16264., 12256., 13888., 10572.,
      12008., 9216.,  10448., 9733.,  10798., 10412., 11656., 11172., 12600.,
      11907., 13508., 10364., 11784., 9250.,  10500., 8399.,  9474.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42054., 43164., 39318., 40400., 36710., 37764., 34230., 35256., 35270.,
      36332., 36310., 37408., 37350., 38484., 37462., 38640., 32230., 33316.,
      27254., 28248., 25158., 26124., 26198., 27200., 27238., 28276., 28278.,
      29352., 28774., 29892., 27318., 28408., 25990., 27052., 27030., 28128.,
      28070., 29204., 29110., 30280., 30150., 31356., 31030., 32280., 29958.,
      31180., 29014., 30208., 30054., 31284., 31094., 32360., 32134., 33436.,
      33174., 34512., 31622., 32876., 29718., 30880., 29158., 30292., 30198.,
      31368., 31238., 32444., 32278., 33520., 33318., 34596., 34390., 35648.,
      34598., 35828., 35190., 36392., 35910., 37084., 36758., 37904., 37798.,
      38980., 38838., 40056., 40678., 41876., 41270., 42440., 42246., 43388.,
      39254., 40368., 36390., 37476., 37430., 38552., 38470., 39628.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7095.,  8166.,  9237.,  10308., 8663.,  9906.,  11149., 12392., 10828.,
      12248., 13668., 15088., 11042., 12644., 14246., 15848., 9460.,  10888.,
      12316., 13744., 8573.,  9822.,  11071., 12320., 7985.,  9050.,  10115.,
      11180., 8384.,  9600.,  10816., 12032., 10828., 12248., 13668., 15088.,
      11024., 12640., 14256., 15872., 12028., 13848., 15668., 17488., 11088.,
      12704., 14320., 15936., 10732., 12152., 13572., 14992., 8352.,  9568.,
      10784., 12000., 10395., 11774., 13153., 14532., 11050., 12660., 14270.,
      15880., 12236., 14072., 15908., 17744., 14213., 16270., 18327., 20384.,
      13956., 15784., 17612., 19440., 11172., 12776., 14380., 15984., 9089.,
      10458., 11827., 13196., 10416., 11944., 13472., 15000., 11837., 13618.,
      15399., 17180., 13936., 15968., 18000., 20032., 17201., 19482., 21763.,
      24044., 13968., 16000., 18032., 20064., 11873., 13658., 15443., 17228.,
      10444., 11968., 13492., 15016., 9229.,  10610., 11991., 13372., 11059.,
      12674., 14289., 15904., 13908., 15752., 17596., 19440., 14100., 16168.,
      18236., 20304., 12204., 14040., 15876., 17712., 11037., 12646., 14255.,
      15864., 10371., 11742., 13113., 14484., 8320.,  9536.,  10752., 11968.,
      10732., 12152., 13572., 14992., 11360., 12992., 14624., 16256., 12332.,
      14168., 16004., 17840., 11360., 12992., 14624., 16256., 10844., 12280.,
      13716., 15152., 8432.,  9664.,  10896., 12128., 8017.,  9082.,  10147.,
      11212., 8540.,  9784.,  11028., 12272., 9492.,  10920., 12348., 13776.,
      10869., 12470., 14071., 15672., 10700., 12120., 13540., 14960., 8546.,
      9796.,  11046., 12296., 7195.,  8270.,  9345.,  10420.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35382., 36492., 37602., 38712., 33010., 34092., 35174., 36256., 30894.,
      31948., 33002., 34056., 29034., 30060., 31086., 32112., 30054., 31116.,
      32178., 33240., 31074., 32172., 33270., 34368., 32094., 33228., 34362.,
      35496., 33298., 34476., 35654., 36832., 30094., 31180., 32266., 33352.,
      27402., 28396., 29390., 30384., 26310., 27276., 28242., 29208., 27330.,
      28332., 29334., 30336., 28350., 29388., 30426., 31464., 29370., 30444.,
      31518., 32592., 31342., 32460., 33578., 34696., 31530., 32620., 33710.,
      34800., 31974., 33036., 34098., 35160., 32994., 34092., 35190., 36288.,
      34014., 35148., 36282., 37416., 35034., 36204., 37374., 38544., 36054.,
      37260., 38466., 39672., 38794., 40044., 41294., 42544., 39750., 40972.,
      42194., 43416., 36866., 38060., 39254., 40448., 37886., 39116., 40346.,
      41576., 38906., 40172., 41438., 42704., 39926., 41228., 42530., 43832.,
      40946., 42284., 43622., 44960., 34854., 36108., 37362., 38616., 30114.,
      31276., 32438., 33600., 27998., 29132., 30266., 31400., 29018., 30188.,
      31358., 32528., 30038., 31244., 32450., 33656., 31058., 32300., 33542.,
      34784., 32078., 33356., 34634., 35912., 31170., 32428., 33686., 34944.,
      30590., 31820., 33050., 34280., 30778., 31980., 33182., 34384., 31222.,
      32396., 33570., 34744., 31922., 33068., 34214., 35360., 32942., 34124.,
      35306., 36488., 33962., 35180., 36398., 37616., 34590., 35788., 36986.,
      38184., 34778., 35948., 37118., 38288., 35734., 36876., 38018., 39160.,
      32850., 33964., 35078., 36192., 30222., 31308., 32394., 33480., 31242.,
      32364., 33486., 34608., 32262., 33420., 34578., 35736.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7742.,  9892.,  8097.,  10600., 8904.,  11760., 10367., 13576., 10248.,
      13104., 10361., 12848., 10486., 12604., 7920.,  10368., 8904.,  11760.,
      10560., 13824., 13176., 16848., 13632., 16896., 14280., 17136., 10224.,
      12672., 8522.,  11268., 10367., 13576., 13176., 16848., 17177., 21296.,
      18360., 22032., 13495., 16720., 9938.,  12700., 9876.,  12936., 12866.,
      16444., 17040., 21120., 22726., 27292., 17040., 21120., 12866., 16444.,
      9876.,  12936., 9938.,  12700., 13495., 16720., 18360., 22032., 17177.,
      21296., 13176., 16848., 10367., 13576., 8522.,  11268., 10224., 12672.,
      14280., 17136., 13632., 16896., 13176., 16848., 10560., 13824., 8904.,
      11760., 7920.,  10368., 10486., 12604., 10361., 12848., 10248., 13104.,
      10367., 13576., 8904.,  11760., 8097.,  10600., 7742.,  9892.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      39868., 42168., 38172., 40480., 36604., 38920., 33692., 35952., 32572.,
      34776., 31708., 33856., 32188., 34344., 35420., 37728., 31228., 33480.,
      27292., 29488., 25148., 27288., 26268., 28416., 27516., 29672., 29148.,
      31312., 32252., 34440., 31836., 34032., 31548., 33752., 32924., 35136.,
      34428., 36648., 36060., 38288., 38076., 40312., 34140., 36400., 34108.,
      36376., 34204., 36480., 35964., 38248., 37852., 40144., 39868., 42168.,
      38172., 40480., 32572., 34776., 31708., 33856., 32188., 34344., 34268.,
      36496., 36348., 38648., 35420., 37728., 31228., 33480., 26268., 28416.,
      27516., 29672., 29148., 31312., 30908., 33080., 32796., 34976., 32252.,
      34440., 31836., 34032., 34428., 36648., 36060., 38288., 38076., 40312.,
      36124., 38368., 34300., 36552., 34140., 36400., 34108., 36376.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6284.,  7292.,  9434.,  10568., 8015.,  9186.,  11690., 13008., 11088.,
      12432., 15288., 16800., 10167., 11678., 14892., 16592., 8400.,  9744.,
      12600., 14112., 7891.,  9058.,  11550., 12864., 8136.,  9132.,  11254.,
      12376., 7776.,  8928.,  11376., 12672., 11088., 12432., 15288., 16800.,
      10368., 11904., 15168., 16896., 10800., 12528., 16200., 18144., 10368.,
      11904., 15168., 16896., 11088., 12432., 15288., 16800., 7776.,  8928.,
      11376., 12672., 10624., 11924., 14674., 16136., 10167., 11678., 14892.,
      16592., 10800., 12528., 16200., 18144., 13075., 15010., 19134., 21312.,
      14256., 15984., 19656., 21600., 10291., 11806., 15032., 16736., 8084.,
      9380.,  12134., 13592., 9708.,  11160., 14224., 15856., 10556., 12244.,
      15822., 17720., 12960., 14880., 18960., 21120., 17640., 19788., 24358.,
      26776., 12960., 14880., 18960., 21120., 10484., 12164., 15734., 17624.,
      9556.,  10984., 14024., 15632., 8156.,  9460.,  12222., 13688., 10253.,
      11774., 14994., 16704., 14256., 15984., 19656., 21600., 13037., 14978.,
      19096., 21280., 10800., 12528., 16200., 18144., 10089., 11598., 14798.,
      16496., 10576., 11860., 14594., 16040., 7776.,  8928.,  11376., 12672.,
      11088., 12432., 15288., 16800., 10368., 11904., 15168., 16896., 10800.,
      12528., 16200., 18144., 10368., 11904., 15168., 16896., 11088., 12432.,
      15288., 16800., 7776.,  8928.,  11376., 12672., 8136.,  9132.,  11254.,
      12376., 7853.,  9026.,  11512., 12832., 8400.,  9744.,  12600., 14112.,
      10089., 11598., 14798., 16496., 11088., 12432., 15288., 16800., 7985.,
      9170.,  11676., 13008., 6356.,  7372.,  9522.,  10664.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41648., 42872., 45188., 46448., 40296., 41528., 43852., 45120., 39200.,
      40440., 42772., 44048., 35480., 36664., 38940., 40160., 31248., 32376.,
      34596., 35760., 27528., 28600., 30764., 31872., 26432., 27512., 29684.,
      30800., 30696., 31928., 34252., 35520., 28512., 29688., 31956., 33168.,
      26840., 27960., 30172., 31328., 24656., 25720., 27876., 28976., 24840.,
      25912., 28076., 29184., 25280., 26360., 28532., 29648., 26488., 27576.,
      29756., 30880., 30624., 31736., 33940., 35088., 31832., 32952., 35164.,
      36320., 33296., 34424., 36644., 37808., 33992., 35128., 37356., 38528.,
      34944., 36088., 38324., 39504., 36152., 37304., 39548., 40736., 38128.,
      39288., 41540., 42736., 36376., 37560., 39836., 41056., 38352., 39544.,
      41828., 43056., 36488., 37688., 39980., 41216., 37952., 39160., 41460.,
      42704., 39672., 40888., 43196., 44448., 41648., 42872., 45188., 46448.,
      40296., 41528., 43852., 45120., 31248., 32376., 34596., 35760., 27528.,
      28600., 30764., 31872., 26432., 27512., 29684., 30800., 28472., 29624.,
      31868., 33056., 30512., 31736., 34052., 35312., 30696., 31928., 34252.,
      35520., 28512., 29688., 31956., 33168., 24840., 25912., 28076., 29184.,
      25280., 26360., 28532., 29648., 26488., 27576., 29756., 30880., 27952.,
      29048., 31236., 32368., 29672., 30776., 32972., 34112., 30624., 31736.,
      33940., 35088., 31832., 32952., 35164., 36320., 34944., 36088., 38324.,
      39504., 36152., 37304., 39548., 40736., 38128., 39288., 41540., 42736.,
      36264., 37432., 39692., 40896., 34656., 35832., 38100., 39312., 36376.,
      37560., 39836., 41056., 38352., 39544., 41828., 43056.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5560.,  6568.,  7576.,  8584.,  10726., 11860., 12994., 14128., 5355.,
      6526.,  7697.,  8868.,  11374., 12692., 14010., 15328., 7392.,  8736.,
      10080., 11424., 14280., 15792., 17304., 18816., 6887.,  8398.,  9909.,
      11420., 14644., 16344., 18044., 19744., 7392.,  8736.,  10080., 11424.,
      14280., 15792., 17304., 18816., 5319.,  6486.,  7653.,  8820.,  11322.,
      12636., 13950., 15264., 5484.,  6480.,  7476.,  8472.,  10602., 11724.,
      12846., 13968., 5184.,  6336.,  7488.,  8640.,  11088., 12384., 13680.,
      14976., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      6912.,  8448.,  9984.,  11520., 14784., 16512., 18240., 19968., 9504.,
      11232., 12960., 14688., 18360., 20304., 22248., 24192., 6912.,  8448.,
      9984.,  11520., 14784., 16512., 18240., 19968., 7392.,  8736.,  10080.,
      11424., 14280., 15792., 17304., 18816., 5184.,  6336.,  7488.,  8640.,
      11088., 12384., 13680., 14976., 7148.,  8448.,  9748.,  11048., 13806.,
      15268., 16730., 18192., 6887.,  8398.,  9909.,  11420., 14644., 16344.,
      18044., 19744., 9504.,  11232., 12960., 14688., 18360., 20304., 22248.,
      24192., 8775.,  10710., 12645., 14580., 18714., 20892., 23070., 25248.,
      9504.,  11232., 12960., 14688., 18360., 20304., 22248., 24192., 6891.,
      8406.,  9921.,  11436., 14664., 16368., 18072., 19776., 7176.,  8472.,
      9768.,  11064., 13818., 15276., 16734., 18192., 6556.,  8008.,  9460.,
      10912., 13984., 15616., 17248., 18880., 9264.,  10952., 12640., 14328.,
      17906., 19804., 21702., 23600., 8640.,  10560., 12480., 14400., 18480.,
      20640., 22800., 24960., 11820., 13968., 16116., 18264., 22842., 25260.,
      27678., 30096., 8640.,  10560., 12480., 14400., 18480., 20640., 22800.,
      24960., 9288.,  10968., 12648., 14328., 17898., 19788., 21678., 23568.,
      6372.,  7800.,  9228.,  10656., 13704., 15312., 16920., 18528., 7152.,
      8456.,  9760.,  11064., 13826., 15292., 16758., 18224., 6777.,  8298.,
      9819.,  11340., 14550., 16260., 17970., 19680., 9504.,  11232., 12960.,
      14688., 18360., 20304., 22248., 24192., 8661.,  10602., 12543., 14484.,
      18600., 20784., 22968., 25152., 9504.,  11232., 12960., 14688., 18360.,
      20304., 22248., 24192., 6669.,  8178.,  9687.,  11196., 14394., 16092.,
      17790., 19488., 7068.,  8352.,  9636.,  10920., 13662., 15108., 16554.,
      18000., 5184.,  6336.,  7488.,  8640.,  11088., 12384., 13680., 14976.,
      7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816., 6912.,
      8448.,  9984.,  11520., 14784., 16512., 18240., 19968., 9504.,  11232.,
      12960., 14688., 18360., 20304., 22248., 24192., 6912.,  8448.,  9984.,
      11520., 14784., 16512., 18240., 19968., 7392.,  8736.,  10080., 11424.,
      14280., 15792., 17304., 18816., 5184.,  6336.,  7488.,  8640.,  11088.,
      12384., 13680., 14976., 5484.,  6480.,  7476.,  8472.,  10602., 11724.,
      12846., 13968., 5205.,  6378.,  7551.,  8724.,  11208., 12528., 13848.,
      15168., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      6669.,  8178.,  9687.,  11196., 14394., 16092., 17790., 19488., 7392.,
      8736.,  10080., 11424., 14280., 15792., 17304., 18816., 5217.,  6402.,
      7587.,  8772.,  11268., 12600., 13932., 15264., 5600.,  6616.,  7632.,
      8648.,  10798., 11940., 13082., 14224.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35736., 36960., 38184., 39408., 41756., 43016., 44276., 45536., 35072.,
      36304., 37536., 38768., 41124., 42392., 43660., 44928., 34920., 36160.,
      37400., 38640., 41004., 42280., 43556., 44832., 33680., 34864., 36048.,
      37232., 39540., 40760., 41980., 43200., 31416., 32544., 33672., 34800.,
      37052., 38216., 39380., 40544., 30176., 31248., 32320., 33392., 35588.,
      36696., 37804., 38912., 30024., 31104., 32184., 33264., 35468., 36584.,
      37700., 38816., 32256., 33488., 34720., 35952., 38308., 39576., 40844.,
      42112., 29992., 31168., 32344., 33520., 35820., 37032., 38244., 39456.,
      28752., 29872., 30992., 32112., 34356., 35512., 36668., 37824., 30584.,
      31648., 32712., 33776., 35964., 37064., 38164., 39264., 28896., 29968.,
      31040., 32112., 34308., 35416., 36524., 37632., 27720., 28800., 29880.,
      30960., 33164., 34280., 35396., 36512., 28080., 29168., 30256., 31344.,
      33556., 34680., 35804., 36928., 30184., 31296., 32408., 33520., 35756.,
      36904., 38052., 39200., 30544., 31664., 32784., 33904., 36148., 37304.,
      38460., 39616., 31416., 32544., 33672., 34800., 37052., 38216., 39380.,
      40544., 30752., 31888., 33024., 34160., 36420., 37592., 38764., 39936.,
      30600., 31744., 32888., 34032., 36300., 37480., 38660., 39840., 30960.,
      32112., 33264., 34416., 36692., 37880., 39068., 40256., 32856., 34016.,
      35176., 36336., 38620., 39816., 41012., 42208., 31376., 32560., 33744.,
      34928., 37236., 38456., 39676., 40896., 33272., 34464., 35656., 36848.,
      39164., 40392., 41620., 42848., 31584., 32784., 33984., 35184., 37508.,
      38744., 39980., 41216., 32456., 33664., 34872., 36080., 38412., 39656.,
      40900., 42144., 33840., 35056., 36272., 37488., 39828., 41080., 42332.,
      43584., 35736., 36960., 38184., 39408., 41756., 43016., 44276., 45536.,
      35072., 36304., 37536., 38768., 41124., 42392., 43660., 44928., 31416.,
      32544., 33672., 34800., 37052., 38216., 39380., 40544., 30176., 31248.,
      32320., 33392., 35588., 36696., 37804., 38912., 30024., 31104., 32184.,
      33264., 35468., 36584., 37700., 38816., 31984., 33136., 34288., 35440.,
      37716., 38904., 40092., 41280., 33944., 35168., 36392., 37616., 39964.,
      41224., 42484., 43744., 32256., 33488., 34720., 35952., 38308., 39576.,
      40844., 42112., 29992., 31168., 32344., 33520., 35820., 37032., 38244.,
      39456., 28896., 29968., 31040., 32112., 34308., 35416., 36524., 37632.,
      27720., 28800., 29880., 30960., 33164., 34280., 35396., 36512., 28080.,
      29168., 30256., 31344., 33556., 34680., 35804., 36928., 28952., 30048.,
      31144., 32240., 34460., 35592., 36724., 37856., 30336., 31440., 32544.,
      33648., 35876., 37016., 38156., 39296., 30184., 31296., 32408., 33520.,
      35756., 36904., 38052., 39200., 30544., 31664., 32784., 33904., 36148.,
      37304., 38460., 39616., 30600., 31744., 32888., 34032., 36300., 37480.,
      38660., 39840., 30960., 32112., 33264., 34416., 36692., 37880., 39068.,
      40256., 32856., 34016., 35176., 36336., 38620., 39816., 41012., 42208.,
      31168., 32336., 33504., 34672., 36964., 38168., 39372., 40576., 29992.,
      31168., 32344., 33520., 35820., 37032., 38244., 39456., 31376., 32560.,
      33744., 34928., 37236., 38456., 39676., 40896., 33272., 34464., 35656.,
      36848., 39164., 40392., 41620., 42848.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4662.,  6552.,  8694.,  11088., 6719.,  8932.,  11439., 14240., 11592.,
      14112., 16968., 20160., 8401.,  11228., 14433., 18016., 6216.,  8736.,
      11592., 14784., 6607.,  8804.,  11295., 14080., 8582.,  10456., 12582.,
      14960., 6480.,  8640.,  11088., 13824., 11592., 14112., 16968., 20160.,
      8640.,  11520., 14784., 18432., 7992.,  11232., 14904., 19008., 8640.,
      11520., 14784., 18432., 11592., 14112., 16968., 20160., 6480.,  8640.,
      11088., 13824., 11066., 13480., 16218., 19280., 8401.,  11228., 14433.,
      18016., 7992.,  11232., 14904., 19008., 10927., 14564., 18687., 23296.,
      14904., 18144., 21816., 25920., 8513.,  11356., 14577., 18176., 5994.,
      8424.,  11178., 14256., 7988.,  10672., 13716., 17120., 7770.,  10920.,
      14490., 18480., 10800., 14400., 18480., 23040., 18518., 22552., 27126.,
      32240., 10800., 14400., 18480., 23040., 7770.,  10920., 14490., 18480.,
      7988.,  10672., 13716., 17120., 5994.,  8424.,  11178., 14256., 8513.,
      11356., 14577., 18176., 14904., 18144., 21816., 25920., 10927., 14564.,
      18687., 23296., 7992.,  11232., 14904., 19008., 8401.,  11228., 14433.,
      18016., 11066., 13480., 16218., 19280., 6480.,  8640.,  11088., 13824.,
      11592., 14112., 16968., 20160., 8640.,  11520., 14784., 18432., 7992.,
      11232., 14904., 19008., 8640.,  11520., 14784., 18432., 11592., 14112.,
      16968., 20160., 6480.,  8640.,  11088., 13824., 8582.,  10456., 12582.,
      14960., 6607.,  8804.,  11295., 14080., 6216.,  8736.,  11592., 14784.,
      8401.,  11228., 14433., 18016., 11592., 14112., 16968., 20160., 6719.,
      8932.,  11439., 14240., 4662.,  6552.,  8694.,  11088.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35940., 38128., 40388., 42720., 36308., 38512., 40788., 43136., 36164.,
      38384., 40676., 43040., 33652., 35824., 38068., 40384., 30884., 33008.,
      35204., 37472., 27860., 29936., 32084., 34304., 27716., 29808., 31972.,
      34208., 33300., 35568., 37908., 40320., 29508., 31728., 34020., 36384.,
      29556., 31728., 33972., 36288., 29348., 31472., 33668., 35936., 27668.,
      29808., 32020., 34304., 29572., 31728., 33956., 36256., 32500., 34672.,
      36916., 39232., 36164., 38384., 40676., 43040., 33652., 35824., 38068.,
      40384., 30884., 33008., 35204., 37472., 27860., 29936., 32084., 34304.,
      27716., 29808., 31972., 34208., 30964., 33136., 35380., 37696., 34980.,
      37232., 39556., 41952., 29556., 31728., 33972., 36288., 29348., 31472.,
      33668., 35936., 27668., 29808., 32020., 34304., 29572., 31728., 33956.,
      36256., 32500., 34672., 36916., 39232., 35940., 38128., 40388., 42720.,
      36308., 38512., 40788., 43136., 30884., 33008., 35204., 37472., 27860.,
      29936., 32084., 34304., 27716., 29808., 31972., 34208., 30964., 33136.,
      35380., 37696., 34980., 37232., 39556., 41952., 33300., 35568., 37908.,
      40320., 29508., 31728., 34020., 36384., 27668., 29808., 32020., 34304.,
      29572., 31728., 33956., 36256., 32500., 34672., 36916., 39232., 35940.,
      38128., 40388., 42720., 36308., 38512., 40788., 43136., 36164., 38384.,
      40676., 43040., 33652., 35824., 38068., 40384., 27716., 29808., 31972.,
      34208., 30964., 33136., 35380., 37696., 34980., 37232., 39556., 41952.,
      33300., 35568., 37908., 40320., 29508., 31728., 34020., 36384., 29556.,
      31728., 33972., 36288., 29348., 31472., 33668., 35936.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5386.,  6268.,  8032.,  9040.,  11182., 12316., 14836., 16096., 4059.,
      5086.,  7154.,  8328.,  10837., 12158., 15108., 16576., 7224.,  8400.,
      10752., 12096., 14952., 16464., 19824., 21504., 5153.,  6466.,  9114.,
      10616., 13831., 15522., 19304., 21184., 7224.,  8400.,  10752., 12096.,
      14952., 16464., 19824., 21504., 3987.,  5006.,  7066.,  8232.,  10733.,
      12046., 14988., 16448., 5378.,  6252.,  8008.,  9008.,  11142., 12268.,
      14780., 16032., 3888.,  4896.,  6912.,  8064.,  10512., 11808., 14688.,
      16128., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      5184.,  6528.,  9216.,  10752., 14016., 15744., 19584., 21504., 9288.,
      10800., 13824., 15552., 19224., 21168., 25488., 27648., 5184.,  6528.,
      9216.,  10752., 14016., 15744., 19584., 21504., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 3888.,  4896.,  6912.,  8064.,
      10512., 11808., 14688., 16128., 6926.,  8052.,  10312., 11600., 14346.,
      15796., 19028., 20640., 5153.,  6466.,  9114.,  10616., 13831., 15522.,
      19304., 21184., 9288.,  10800., 13824., 15552., 19224., 21168., 25488.,
      27648., 6579.,  8270.,  11674., 13608., 17741., 19918., 24780., 27200.,
      9288.,  10800., 13824., 15552., 19224., 21168., 25488., 27648., 5161.,
      6482.,  9138.,  10648., 13871., 15570., 19360., 21248., 6998.,  8132.,
      10400., 11696., 14450., 15908., 19148., 20768., 4852.,  6104.,  8616.,
      10048., 13100., 14712., 18304., 20096., 8998.,  10468., 13408., 15088.,
      18658., 20548., 24748., 26848., 6480.,  8160.,  11520., 13440., 17520.,
      19680., 24480., 26880., 11570., 13452., 17224., 19376., 23958., 26380.,
      31772., 34464., 6480.,  8160.,  11520., 13440., 17520., 19680., 24480.,
      26880., 9062.,  10532., 13472., 15152., 18722., 20612., 24812., 26912.,
      4788.,  6040.,  8552.,  9984.,  13036., 14648., 18240., 20032., 6934.,
      8068.,  10336., 11632., 14386., 15844., 19084., 20704., 5085.,  6418.,
      9062.,  10584., 13795., 15506., 19284., 21184., 9288.,  10800., 13824.,
      15552., 19224., 21168., 25488., 27648., 6503.,  8206.,  11598., 13544.,
      17665., 19854., 24704., 27136., 9288.,  10800., 13824., 15552., 19224.,
      21168., 25488., 27648., 5013.,  6338.,  8974.,  10488., 13691., 15394.,
      19164., 21056., 6926.,  8052.,  10312., 11600., 14346., 15796., 19028.,
      20640., 3888.,  4896.,  6912.,  8064.,  10512., 11808., 14688., 16128.,
      7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504., 5184.,
      6528.,  9216.,  10752., 14016., 15744., 19584., 21504., 9288.,  10800.,
      13824., 15552., 19224., 21168., 25488., 27648., 5184.,  6528.,  9216.,
      10752., 14016., 15744., 19584., 21504., 7224.,  8400.,  10752., 12096.,
      14952., 16464., 19824., 21504., 3888.,  4896.,  6912.,  8064.,  10512.,
      11808., 14688., 16128., 5378.,  6252.,  8008.,  9008.,  11142., 12268.,
      14780., 16032., 3911.,  4942.,  6990.,  8168.,  10657., 11982., 14912.,
      16384., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      5013.,  6338.,  8974.,  10488., 13691., 15394., 19164., 21056., 7224.,
      8400.,  10752., 12096., 14952., 16464., 19824., 21504., 3919.,  4958.,
      7014.,  8200.,  10697., 12030., 14968., 16448., 5450.,  6332.,  8096.,
      9104.,  11246., 12380., 14900., 16160.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32348., 33480., 35664., 36832., 39124., 40328., 42728., 43968., 33068.,
      34216., 36416., 37600., 39908., 41128., 43544., 44800., 32764., 33928.,
      36144., 37344., 39668., 40904., 43336., 44608., 31884., 33000., 35168.,
      36320., 38596., 39784., 42168., 43392., 30492., 31560., 33680., 34784.,
      37012., 38152., 40488., 41664., 28588., 29608., 31680., 32736., 34916.,
      36008., 38296., 39424., 28284., 29320., 31408., 32480., 34676., 35784.,
      38088., 39232., 31084., 32296., 34560., 35808., 38180., 39464., 41944.,
      43264., 27644., 28808., 31024., 32224., 34548., 35784., 38216., 39488.,
      27788., 28904., 31072., 32224., 34500., 35688., 38072., 39296., 31516.,
      32584., 34704., 35808., 38036., 39176., 41512., 42688., 28140., 29224.,
      31360., 32480., 34724., 35880., 38232., 39424., 27836., 28936., 31088.,
      32224., 34484., 35656., 38024., 39232., 29580., 30696., 32864., 34016.,
      36292., 37480., 39864., 41088., 32764., 33928., 36144., 37344., 39668.,
      40904., 43336., 44608., 31884., 33000., 35168., 36320., 38596., 39784.,
      42168., 43392., 30492., 31560., 33680., 34784., 37012., 38152., 40488.,
      41664., 28588., 29608., 31680., 32736., 34916., 36008., 38296., 39424.,
      28284., 29320., 31408., 32480., 34676., 35784., 38088., 39232., 30604.,
      31720., 33888., 35040., 37316., 38504., 40888., 42112., 34460., 35656.,
      37904., 39136., 41492., 42760., 45224., 46528., 27788., 28904., 31072.,
      32224., 34500., 35688., 38072., 39296., 31516., 32584., 34704., 35808.,
      38036., 39176., 41512., 42688., 28140., 29224., 31360., 32480., 34724.,
      35880., 38232., 39424., 27836., 28936., 31088., 32224., 34484., 35656.,
      38024., 39232., 29580., 30696., 32864., 34016., 36292., 37480., 39864.,
      41088., 32348., 33480., 35664., 36832., 39124., 40328., 42728., 43968.,
      33068., 34216., 36416., 37600., 39908., 41128., 43544., 44800., 30492.,
      31560., 33680., 34784., 37012., 38152., 40488., 41664., 28588., 29608.,
      31680., 32736., 34916., 36008., 38296., 39424., 28284., 29320., 31408.,
      32480., 34676., 35784., 38088., 39232., 30604., 31720., 33888., 35040.,
      37316., 38504., 40888., 42112., 34460., 35656., 37904., 39136., 41492.,
      42760., 45224., 46528., 31084., 32296., 34560., 35808., 38180., 39464.,
      41944., 43264., 27644., 28808., 31024., 32224., 34548., 35784., 38216.,
      39488., 28140., 29224., 31360., 32480., 34724., 35880., 38232., 39424.,
      27836., 28936., 31088., 32224., 34484., 35656., 38024., 39232., 29580.,
      30696., 32864., 34016., 36292., 37480., 39864., 41088., 32348., 33480.,
      35664., 36832., 39124., 40328., 42728., 43968., 33068., 34216., 36416.,
      37600., 39908., 41128., 43544., 44800., 32764., 33928., 36144., 37344.,
      39668., 40904., 43336., 44608., 31884., 33000., 35168., 36320., 38596.,
      39784., 42168., 43392., 28284., 29320., 31408., 32480., 34676., 35784.,
      38088., 39232., 30604., 31720., 33888., 35040., 37316., 38504., 40888.,
      42112., 34460., 35656., 37904., 39136., 41492., 42760., 45224., 46528.,
      31084., 32296., 34560., 35808., 38180., 39464., 41944., 43264., 27644.,
      28808., 31024., 32224., 34548., 35784., 38216., 39488., 27788., 28904.,
      31072., 32224., 34500., 35688., 38072., 39296., 31516., 32584., 34704.,
      35808., 38036., 39176., 41512., 42688.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,  10206.,
      11340., 12474., 13608., 16380., 17640., 18900., 20160., 1027.,  2054.,
      3081.,  4108.,  5870.,  7044.,  8218.,  9392.,  11889., 13210., 14531.,
      15852., 19084., 20552., 22020., 23488., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1313.,  2626.,  3939.,  5252.,  7510.,  9012.,
      10514., 12016., 15219., 16910., 18601., 20292., 24440., 26320., 28200.,
      30080., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752.,
      13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880., 1019.,
      2038.,  3057.,  4076.,  5830.,  6996.,  8162.,  9328.,  11817., 13130.,
      14443., 15756., 18980., 20440., 21900., 23360., 874.,   1748.,  2622.,
      3496.,  5000.,  6000.,  7000.,  8000.,  10134., 11260., 12386., 13512.,
      16276., 17528., 18780., 20032., 1008.,  2016.,  3024.,  4032.,  5760.,
      6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160.,
      21600., 23040., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552.,
      17280., 19008., 20736., 24960., 26880., 28800., 30720., 1512.,  3024.,
      4536.,  6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384.,
      23328., 28080., 30240., 32400., 34560., 1344.,  2688.,  4032.,  5376.,
      7680.,  9216.,  10752., 12288., 15552., 17280., 19008., 20736., 24960.,
      26880., 28800., 30720., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,
      11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040., 1126.,
      2252.,  3378.,  4504.,  6440.,  7728.,  9016.,  10304., 13050., 14500.,
      15950., 17400., 20956., 22568., 24180., 25792., 1313.,  2626.,  3939.,
      5252.,  7510.,  9012.,  10514., 12016., 15219., 16910., 18601., 20292.,
      24440., 26320., 28200., 30080., 1512.,  3024.,  4536.,  6048.,  8640.,
      10368., 12096., 13824., 17496., 19440., 21384., 23328., 28080., 30240.,
      32400., 34560., 1691.,  3382.,  5073.,  6764.,  9670.,  11604., 13538.,
      15472., 19593., 21770., 23947., 26124., 31460., 33880., 36300., 38720.,
      1512.,  3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824., 17496.,
      19440., 21384., 23328., 28080., 30240., 32400., 34560., 1321.,  2642.,
      3963.,  5284.,  7550.,  9060.,  10570., 12080., 15291., 16990., 18689.,
      20388., 24544., 26432., 28320., 30208., 1134.,  2268.,  3402.,  4536.,
      6480.,  7776.,  9072.,  10368., 13122., 14580., 16038., 17496., 21060.,
      22680., 24300., 25920., 1252.,  2504.,  3756.,  5008.,  7160.,  8592.,
      10024., 11456., 14508., 16120., 17732., 19344., 23296., 25088., 26880.,
      28672., 1470.,  2940.,  4410.,  5880.,  8400.,  10080., 11760., 13440.,
      17010., 18900., 20790., 22680., 27300., 29400., 31500., 33600., 1680.,
      3360.,  5040.,  6720.,  9600.,  11520., 13440., 15360., 19440., 21600.,
      23760., 25920., 31200., 33600., 36000., 38400., 1882.,  3764.,  5646.,
      7528.,  10760., 12912., 15064., 17216., 21798., 24220., 26642., 29064.,
      34996., 37688., 40380., 43072., 1680.,  3360.,  5040.,  6720.,  9600.,
      11520., 13440., 15360., 19440., 21600., 23760., 25920., 31200., 33600.,
      36000., 38400., 1470.,  2940.,  4410.,  5880.,  8400.,  10080., 11760.,
      13440., 17010., 18900., 20790., 22680., 27300., 29400., 31500., 33600.,
      1252.,  2504.,  3756.,  5008.,  7160.,  8592.,  10024., 11456., 14508.,
      16120., 17732., 19344., 23296., 25088., 26880., 28672., 1134.,  2268.,
      3402.,  4536.,  6480.,  7776.,  9072.,  10368., 13122., 14580., 16038.,
      17496., 21060., 22680., 24300., 25920., 1333.,  2666.,  3999.,  5332.,
      7610.,  9132.,  10654., 12176., 15399., 17110., 18821., 20532., 24700.,
      26600., 28500., 30400., 1512.,  3024.,  4536.,  6048.,  8640.,  10368.,
      12096., 13824., 17496., 19440., 21384., 23328., 28080., 30240., 32400.,
      34560., 1703.,  3406.,  5109.,  6812.,  9730.,  11676., 13622., 15568.,
      19701., 21890., 24079., 26268., 31616., 34048., 36480., 38912., 1512.,
      3024.,  4536.,  6048.,  8640.,  10368., 12096., 13824., 17496., 19440.,
      21384., 23328., 28080., 30240., 32400., 34560., 1325.,  2650.,  3975.,
      5300.,  7570.,  9084.,  10598., 12112., 15327., 17030., 18733., 20436.,
      24596., 26488., 28380., 30272., 1126.,  2252.,  3378.,  4504.,  6440.,
      7728.,  9016.,  10304., 13050., 14500., 15950., 17400., 20956., 22568.,
      24180., 25792., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,
      9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040.,
      1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608.,
      15120., 16632., 18144., 21840., 23520., 25200., 26880., 1344.,  2688.,
      4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552., 17280., 19008.,
      20736., 24960., 26880., 28800., 30720., 1512.,  3024.,  4536.,  6048.,
      8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328., 28080.,
      30240., 32400., 34560., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,
      10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800.,
      30720., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752.,
      13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880., 1008.,
      2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,  11664., 12960.,
      14256., 15552., 18720., 20160., 21600., 23040., 874.,   1748.,  2622.,
      3496.,  5000.,  6000.,  7000.,  8000.,  10134., 11260., 12386., 13512.,
      16276., 17528., 18780., 20032., 1031.,  2062.,  3093.,  4124.,  5890.,
      7068.,  8246.,  9424.,  11925., 13250., 14575., 15900., 19136., 20608.,
      22080., 23552., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1325.,  2650.,  3975.,  5300.,  7570.,  9084.,  10598., 12112., 15327.,
      17030., 18733., 20436., 24596., 26488., 28380., 30272., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1039.,  2078.,  3117.,  4156.,
      5930.,  7116.,  8302.,  9488.,  11997., 13330., 14663., 15996., 19240.,
      20720., 22200., 23680., 882.,   1764.,  2646.,  3528.,  5040.,  6048.,
      7056.,  8064.,  10206., 11340., 12474., 13608., 16380., 17640., 18900.,
      20160.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27724., 28856., 29988., 31120., 33296., 34464., 35632., 36800., 39156.,
      40360., 41564., 42768., 45304., 46544., 47784., 49024., 29148., 30296.,
      31444., 32592., 34784., 35968., 37152., 38336., 40708., 41928., 43148.,
      44368., 46920., 48176., 49432., 50688., 32620., 33784., 34948., 36112.,
      38320., 39520., 40720., 41920., 44308., 45544., 46780., 48016., 50584.,
      51856., 53128., 54400., 26812., 27928., 29044., 30160., 32320., 33472.,
      34624., 35776., 38116., 39304., 40492., 41680., 44200., 45424., 46648.,
      47872., 24076., 25144., 26212., 27280., 29392., 30496., 31600., 32704.,
      34996., 36136., 37276., 38416., 40888., 42064., 43240., 44416., 24412.,
      25432., 26452., 27472., 29536., 30592., 31648., 32704., 34948., 36040.,
      37132., 38224., 40648., 41776., 42904., 44032., 27884., 28920., 29956.,
      30992., 33072., 34144., 35216., 36288., 38548., 39656., 40764., 41872.,
      44312., 45456., 46600., 47744., 29212., 30424., 31636., 32848., 35104.,
      36352., 37600., 38848., 41284., 42568., 43852., 45136., 47752., 49072.,
      50392., 51712., 26476., 27640., 28804., 29968., 32176., 33376., 34576.,
      35776., 38164., 39400., 40636., 41872., 44440., 45712., 46984., 48256.,
      26812., 27928., 29044., 30160., 32320., 33472., 34624., 35776., 38116.,
      39304., 40492., 41680., 44200., 45424., 46648., 47872., 30220., 31288.,
      32356., 33424., 35536., 36640., 37744., 38848., 41140., 42280., 43420.,
      44560., 47032., 48208., 49384., 50560., 27548., 28632., 29716., 30800.,
      32928., 34048., 35168., 36288., 38596., 39752., 40908., 42064., 44552.,
      45744., 46936., 48128., 26924., 28024., 29124., 30224., 32368., 33504.,
      34640., 35776., 38100., 39272., 40444., 41616., 44120., 45328., 46536.,
      47744., 26300., 27416., 28532., 29648., 31808., 32960., 34112., 35264.,
      37604., 38792., 39980., 41168., 43688., 44912., 46136., 47360., 32620.,
      33784., 34948., 36112., 38320., 39520., 40720., 41920., 44308., 45544.,
      46780., 48016., 50584., 51856., 53128., 54400., 26812., 27928., 29044.,
      30160., 32320., 33472., 34624., 35776., 38116., 39304., 40492., 41680.,
      44200., 45424., 46648., 47872., 24076., 25144., 26212., 27280., 29392.,
      30496., 31600., 32704., 34996., 36136., 37276., 38416., 40888., 42064.,
      43240., 44416., 24412., 25432., 26452., 27472., 29536., 30592., 31648.,
      32704., 34948., 36040., 37132., 38224., 40648., 41776., 42904., 44032.,
      27884., 28920., 29956., 30992., 33072., 34144., 35216., 36288., 38548.,
      39656., 40764., 41872., 44312., 45456., 46600., 47744., 28348., 29464.,
      30580., 31696., 33856., 35008., 36160., 37312., 39652., 40840., 42028.,
      43216., 45736., 46960., 48184., 49408., 31884., 33080., 34276., 35472.,
      37712., 38944., 40176., 41408., 43828., 45096., 46364., 47632., 50232.,
      51536., 52840., 54144., 26812., 27928., 29044., 30160., 32320., 33472.,
      34624., 35776., 38116., 39304., 40492., 41680., 44200., 45424., 46648.,
      47872., 30220., 31288., 32356., 33424., 35536., 36640., 37744., 38848.,
      41140., 42280., 43420., 44560., 47032., 48208., 49384., 50560., 27548.,
      28632., 29716., 30800., 32928., 34048., 35168., 36288., 38596., 39752.,
      40908., 42064., 44552., 45744., 46936., 48128., 26924., 28024., 29124.,
      30224., 32368., 33504., 34640., 35776., 38100., 39272., 40444., 41616.,
      44120., 45328., 46536., 47744., 26300., 27416., 28532., 29648., 31808.,
      32960., 34112., 35264., 37604., 38792., 39980., 41168., 43688., 44912.,
      46136., 47360., 27724., 28856., 29988., 31120., 33296., 34464., 35632.,
      36800., 39156., 40360., 41564., 42768., 45304., 46544., 47784., 49024.,
      29148., 30296., 31444., 32592., 34784., 35968., 37152., 38336., 40708.,
      41928., 43148., 44368., 46920., 48176., 49432., 50688., 24076., 25144.,
      26212., 27280., 29392., 30496., 31600., 32704., 34996., 36136., 37276.,
      38416., 40888., 42064., 43240., 44416., 24412., 25432., 26452., 27472.,
      29536., 30592., 31648., 32704., 34948., 36040., 37132., 38224., 40648.,
      41776., 42904., 44032., 27884., 28920., 29956., 30992., 33072., 34144.,
      35216., 36288., 38548., 39656., 40764., 41872., 44312., 45456., 46600.,
      47744., 28348., 29464., 30580., 31696., 33856., 35008., 36160., 37312.,
      39652., 40840., 42028., 43216., 45736., 46960., 48184., 49408., 31884.,
      33080., 34276., 35472., 37712., 38944., 40176., 41408., 43828., 45096.,
      46364., 47632., 50232., 51536., 52840., 54144., 29212., 30424., 31636.,
      32848., 35104., 36352., 37600., 38848., 41284., 42568., 43852., 45136.,
      47752., 49072., 50392., 51712., 26476., 27640., 28804., 29968., 32176.,
      33376., 34576., 35776., 38164., 39400., 40636., 41872., 44440., 45712.,
      46984., 48256., 27548., 28632., 29716., 30800., 32928., 34048., 35168.,
      36288., 38596., 39752., 40908., 42064., 44552., 45744., 46936., 48128.,
      26924., 28024., 29124., 30224., 32368., 33504., 34640., 35776., 38100.,
      39272., 40444., 41616., 44120., 45328., 46536., 47744., 26300., 27416.,
      28532., 29648., 31808., 32960., 34112., 35264., 37604., 38792., 39980.,
      41168., 43688., 44912., 46136., 47360., 27724., 28856., 29988., 31120.,
      33296., 34464., 35632., 36800., 39156., 40360., 41564., 42768., 45304.,
      46544., 47784., 49024., 29148., 30296., 31444., 32592., 34784., 35968.,
      37152., 38336., 40708., 41928., 43148., 44368., 46920., 48176., 49432.,
      50688., 32620., 33784., 34948., 36112., 38320., 39520., 40720., 41920.,
      44308., 45544., 46780., 48016., 50584., 51856., 53128., 54400., 26812.,
      27928., 29044., 30160., 32320., 33472., 34624., 35776., 38116., 39304.,
      40492., 41680., 44200., 45424., 46648., 47872., 27884., 28920., 29956.,
      30992., 33072., 34144., 35216., 36288., 38548., 39656., 40764., 41872.,
      44312., 45456., 46600., 47744., 28348., 29464., 30580., 31696., 33856.,
      35008., 36160., 37312., 39652., 40840., 42028., 43216., 45736., 46960.,
      48184., 49408., 31884., 33080., 34276., 35472., 37712., 38944., 40176.,
      41408., 43828., 45096., 46364., 47632., 50232., 51536., 52840., 54144.,
      29212., 30424., 31636., 32848., 35104., 36352., 37600., 38848., 41284.,
      42568., 43852., 45136., 47752., 49072., 50392., 51712., 26476., 27640.,
      28804., 29968., 32176., 33376., 34576., 35776., 38164., 39400., 40636.,
      41872., 44440., 45712., 46984., 48256., 26812., 27928., 29044., 30160.,
      32320., 33472., 34624., 35776., 38116., 39304., 40492., 41680., 44200.,
      45424., 46648., 47872., 30220., 31288., 32356., 33424., 35536., 36640.,
      37744., 38848., 41140., 42280., 43420., 44560., 47032., 48208., 49384.,
      50560.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12554., 15340., 15726., 16299., 13796., 11468., 9560.,  10440., 12192.,
      14328., 16680., 15864., 15264., 14280., 13556., 14804., 15752., 16949.,
      14998., 13284., 11786., 15466., 18744., 23026., 27578., 23026., 18744.,
      15466., 11786., 13284., 14998., 16949., 15752., 14804., 13556., 14280.,
      15264., 15864., 16680., 14328., 12192., 10440., 9560.,  11468., 13796.,
      16299., 15726., 15340., 12554.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34528., 35704., 36880., 38056., 39232., 38616., 38064., 39504., 40680.,
      41856., 43032., 44208., 43848., 43552., 45504., 46680., 47856., 45960.,
      44128., 41080., 38160., 40624., 40776., 40992., 38456., 36048., 34536.,
      33088., 37792., 38200., 38672., 36648., 34752., 33496., 32304., 37008.,
      37672., 38400., 36888., 35504., 34504., 33568., 34240., 33240., 32368.,
      33416., 34528., 35704., 36880.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10626., 11844., 12964., 14376., 13313., 14892., 13855., 15622., 11968.,
      13576., 10628., 12056., 9317.,  10576., 11976., 13392., 12768., 14400.,
      13776., 15600., 15000., 17040., 13560., 15408., 12768., 14400., 11760.,
      13200., 12088., 13672., 13628., 15464., 15725., 17776., 18069., 20362.,
      17174., 19260., 16988., 18840., 13709., 15348., 13354., 15108., 15736.,
      17760., 19312., 21572., 23158., 25684., 19074., 21364., 15800., 17824.,
      13204., 14996., 13714., 15300., 16924., 18744., 17179., 19212., 17673.,
      19946., 15084., 17136., 13244., 15048., 11503., 13096., 11976., 13392.,
      12768., 14400., 13776., 15600., 15000., 17040., 13560., 15408., 12768.,
      14400., 11760., 13200., 9108.,  10320., 10244., 11640., 11815., 13384.,
      13555., 15318., 12974., 14572., 12964., 14376., 10479., 11732.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41656., 42944., 42936., 44272., 44216., 45600., 45496., 46928., 46776.,
      48256., 44536., 46000., 42424., 43872., 41144., 42656., 42424., 43984.,
      43704., 45312., 44984., 46640., 46264., 47968., 44536., 46224., 42936.,
      44608., 42680., 44416., 43960., 45744., 45240., 47072., 44536., 46352.,
      43960., 45760., 41016., 42736., 38328., 39968., 39096., 40800., 38392.,
      40080., 37816., 39488., 35896., 37488., 34232., 35744., 34296., 35792.,
      34488., 35968., 39608., 41280., 39416., 41072., 39352., 40992., 38456.,
      40016., 37816., 39296., 38392., 39856., 39096., 40544., 44216., 45856.,
      44536., 46160., 44984., 46592., 45112., 46640., 45496., 46944., 46584.,
      48016., 47800., 49216., 44984., 46464., 42040., 43440., 39352., 40672.,
      40440., 41744., 41656., 42944., 42936., 44272., 44216., 45600.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8930.,  10148., 11366., 12584., 10660., 12072., 13484., 14896., 11223.,
      12802., 14381., 15960., 11991., 13758., 15525., 17292., 10776., 12384.,
      13992., 15600., 10836., 12264., 13692., 15120., 8495.,  9754.,  11013.,
      12272., 10056., 11472., 12888., 14304., 10848., 12480., 14112., 15744.,
      13056., 14880., 16704., 18528., 15480., 17520., 19560., 21600., 12408.,
      14256., 16104., 17952., 10848., 12480., 14112., 15744., 9408.,  10848.,
      12288., 13728., 11616., 13200., 14784., 16368., 13932., 15768., 17604.,
      19440., 14567., 16618., 18669., 20720., 15461., 17754., 20047., 22340.,
      13894., 15980., 18066., 20152., 13980., 15832., 17684., 19536., 11011.,
      12650., 14289., 15928., 12410., 14164., 15918., 17672., 13384., 15408.,
      17432., 19456., 16140., 18400., 20660., 22920., 19182., 21708., 24234.,
      26760., 15410., 17700., 19990., 22280., 13512., 15536., 17560., 19584.,
      11736., 13528., 15320., 17112., 11378., 12964., 14550., 16136., 13884.,
      15704., 17524., 19344., 14261., 16294., 18327., 20360., 14881., 17154.,
      19427., 21700., 13428., 15480., 17532., 19584., 13708., 15512., 17316.,
      19120., 10533., 12126., 13719., 15312., 10056., 11472., 12888., 14304.,
      10848., 12480., 14112., 15744., 13056., 14880., 16704., 18528., 15480.,
      17520., 19560., 21600., 12408., 14256., 16104., 17952., 10848., 12480.,
      14112., 15744., 9408.,  10848., 12288., 13728., 8652.,  9864.,  11076.,
      12288., 10612., 12008., 13404., 14800., 10989., 12558., 14127., 15696.,
      11523., 13286., 15049., 16812., 10430., 12028., 13626., 15224., 10660.,
      12072., 13484., 14896., 8249.,  9502.,  10755., 12008.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10024., 10736., 11448., 12160., 9656.,  10352., 11048., 11744., 9544.,
      10224., 10904., 11584., 10104., 10800., 11496., 12192., 10792., 11504.,
      12216., 12928., 11096., 11824., 12552., 13280., 11528., 12272., 13016.,
      13760., 13512., 14320., 15128., 15936., 13144., 13936., 14728., 15520.,
      13032., 13808., 14584., 15360., 13080., 13872., 14664., 15456., 13256.,
      14064., 14872., 15680., 13048., 13872., 14696., 15520., 12968., 13808.,
      14648., 15488., 12904., 13808., 14712., 15616., 12536., 13424., 14312.,
      15200., 12424., 13296., 14168., 15040., 12056., 12912., 13768., 14624.,
      11944., 12784., 13624., 14464., 11576., 12400., 13224., 14048., 11464.,
      12272., 13080., 13888., 10504., 11248., 11992., 12736., 10136., 10864.,
      11592., 12320., 10024., 10736., 11448., 12160., 9656.,  10352., 11048.,
      11744., 9544.,  10224., 10904., 11584., 10104., 10800., 11496., 12192.,
      10792., 11504., 12216., 12928., 12776., 13552., 14328., 15104., 13080.,
      13872., 14664., 15456., 13512., 14320., 15128., 15936., 13144., 13936.,
      14728., 15520., 13032., 13808., 14584., 15360., 13080., 13872., 14664.,
      15456., 13256., 14064., 14872., 15680., 13192., 14064., 14936., 15808.,
      12984., 13872., 14760., 15648., 12904., 13808., 14712., 15616., 12536.,
      13424., 14312., 15200., 12424., 13296., 14168., 15040., 12056., 12912.,
      13768., 14624., 11944., 12784., 13624., 14464., 10984., 11760., 12536.,
      13312., 10616., 11376., 12136., 12896., 10504., 11248., 11992., 12736.,
      10136., 10864., 11592., 12320., 10024., 10736., 11448., 12160., 9656.,
      10352., 11048., 11744., 9544.,  10224., 10904., 11584.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10813., 13320., 14280., 17136., 13043., 16248., 12586., 16140., 10379.,
      13584., 8904.,  11760., 7973.,  10464., 11640., 14496., 11712., 14976.,
      11784., 15456., 12720., 16800., 11784., 15456., 11712., 14976., 11640.,
      14496., 10187., 13392., 11448., 15120., 13445., 17568., 16438., 21012.,
      16925., 21048., 18360., 22032., 13747., 16968., 11670., 15240., 14640.,
      18720., 19402., 23976., 25244., 30312., 19402., 23976., 14640., 18720.,
      11670., 15240., 13747., 16968., 18360., 22032., 16925., 21048., 16438.,
      21012., 13445., 17568., 11448., 15120., 10187., 13392., 11640., 14496.,
      11712., 14976., 11784., 15456., 12720., 16800., 11784., 15456., 11712.,
      14976., 11640., 14496., 7973.,  10464., 8904.,  11760., 10379., 13584.,
      12586., 16140., 13043., 16248., 14280., 17136., 10813., 13320.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37232., 39936., 36592., 39264., 36208., 38848., 37552., 40224., 39024.,
      41728., 38064., 40800., 37232., 40000., 38256., 41152., 38640., 41504.,
      39280., 42112., 41136., 44000., 43120., 46016., 42672., 45600., 42352.,
      45312., 45424., 48512., 46832., 49888., 48496., 51520., 48880., 51872.,
      49520., 52480., 47856., 50784., 46448., 49344., 36208., 38976., 36592.,
      39328., 37232., 39936., 36592., 39264., 36208., 38848., 37552., 40224.,
      39024., 41728., 35952., 38784., 37040., 39904., 38256., 41152., 38640.,
      41504., 39280., 42112., 41136., 44000., 43120., 46016., 42096., 45120.,
      43696., 46752., 45424., 48512., 46832., 49888., 48496., 51520., 48880.,
      51872., 49520., 52480., 39280., 42112., 37616., 40416., 36208., 38976.,
      36592., 39328., 37232., 39936., 36592., 39264., 36208., 38848.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8409.,  9562.,  12092., 13392., 11088., 12432., 15288., 16800., 10237.,
      11718., 14954., 16624., 10584., 12244., 15818., 17688., 9923.,  11446.,
      14640., 16352., 11088., 12432., 15288., 16800., 7895.,  9082.,  11562.,
      12896., 9096.,  10416., 13296., 14784., 9600.,  11136., 14400., 16128.,
      12072., 13776., 17472., 19392., 15840., 17760., 21840., 24000., 11640.,
      13392., 17040., 19008., 9600.,  11136., 14400., 16128., 8664.,  10032.,
      12864., 14400., 10739., 12214., 15456., 17120., 14256., 15984., 19656.,
      21600., 13127., 15034., 19194., 21344., 13520., 15660., 20254., 22664.,
      12705., 14666., 18772., 20976., 14256., 15984., 19656., 21600., 10229.,
      11766., 14962., 16688., 11338., 12988., 16588., 18448., 12000., 13920.,
      18000., 20160., 15018., 17140., 21752., 24144., 19688., 22072., 27156.,
      29840., 14510., 16692., 21244., 23696., 12000., 13920., 18000., 20160.,
      10862., 12572., 16112., 18032., 10623., 12118., 15356., 17040., 14256.,
      15984., 19656., 21600., 13099., 15018., 19166., 21328., 13368., 15532.,
      20102., 22536., 12581., 14554., 18648., 20864., 14256., 15984., 19656.,
      21600., 10097., 11638., 14814., 16544., 9096.,  10416., 13296., 14784.,
      9600.,  11136., 14400., 16128., 12072., 13776., 17472., 19392., 15840.,
      17760., 21840., 24000., 11640., 13392., 17040., 19008., 9600.,  11136.,
      14400., 16128., 8664.,  10032., 12864., 14400., 8213.,  9370.,  11880.,
      13184., 11088., 12432., 15288., 16800., 10145., 11638., 14862., 16544.,
      10304., 11988., 15538., 17432., 9735.,  11270., 14452., 16176., 11088.,
      12432., 15288., 16800., 7907.,  9114.,  11590., 12944.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      46464., 47840., 50800., 52224., 43168., 44512., 47440., 48832., 40384.,
      41696., 44592., 45952., 40992., 42336., 45264., 46656., 41856., 43232.,
      46192., 47616., 41952., 43360., 46352., 47808., 42304., 43744., 46768.,
      48256., 44224., 45792., 48944., 50560., 42976., 44512., 47632., 49216.,
      42240., 43744., 46832., 48384., 43872., 45408., 48528., 50112., 45760.,
      47328., 50480., 52096., 46880., 48480., 51664., 53312., 48256., 49888.,
      53104., 54784., 54272., 56032., 59376., 61184., 55072., 56800., 60112.,
      61888., 56384., 58080., 61360., 63104., 55136., 56800., 60048., 61760.,
      54400., 56032., 59248., 60928., 53152., 54752., 57936., 59584., 52416.,
      53984., 57136., 58752., 48448., 49888., 52912., 54400., 47200., 48608.,
      51600., 53056., 46464., 47840., 50800., 52224., 43168., 44512., 47440.,
      48832., 40384., 41696., 44592., 45952., 40992., 42336., 45264., 46656.,
      41856., 43232., 46192., 47616., 43776., 45280., 48368., 49920., 43872.,
      45408., 48528., 50112., 44224., 45792., 48944., 50560., 42976., 44512.,
      47632., 49216., 42240., 43744., 46832., 48384., 43872., 45408., 48528.,
      50112., 45760., 47328., 50480., 52096., 51776., 53472., 56752., 58496.,
      52896., 54624., 57936., 59712., 54272., 56032., 59376., 61184., 55072.,
      56800., 60112., 61888., 56384., 58080., 61360., 63104., 55136., 56800.,
      60048., 61760., 54400., 56032., 59248., 60928., 50432., 51936., 55024.,
      56576., 49184., 50656., 53712., 55232., 48448., 49888., 52912., 54400.,
      47200., 48608., 51600., 53056., 46464., 47840., 50800., 52224., 43168.,
      44512., 47440., 48832., 40384., 41696., 44592., 45952.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5857.,  7010.,  8163.,  9316.,  11876., 13176., 14476., 15776., 7392.,
      8736.,  10080., 11424., 14280., 15792., 17304., 18816., 7281.,  8762.,
      10243., 11724., 14990., 16660., 18330., 20000., 9140.,  10800., 12460.,
      14120., 17670., 19540., 21410., 23280., 6227.,  7750.,  9273.,  10796.,
      13936., 15648., 17360., 19072., 7392.,  8736.,  10080., 11424., 14280.,
      15792., 17304., 18816., 4635.,  5822.,  7009.,  8196.,  10622., 11956.,
      13290., 14624., 6696.,  8016.,  9336.,  10656., 13584., 15072., 16560.,
      18048., 8448.,  9984.,  11520., 13056., 16320., 18048., 19776., 21504.,
      8424.,  10128., 11832., 13536., 17280., 19200., 21120., 23040., 10560.,
      12480., 14400., 16320., 20400., 22560., 24720., 26880., 7128.,  8880.,
      10632., 12384., 15984., 17952., 19920., 21888., 8448.,  9984.,  11520.,
      13056., 16320., 18048., 19776., 21504., 5400.,  6768.,  8136.,  9504.,
      12288., 13824., 15360., 16896., 7523.,  8998.,  10473., 11948., 15232.,
      16896., 18560., 20224., 9504.,  11232., 12960., 14688., 18360., 20304.,
      22248., 24192., 9387.,  11294., 13201., 15108., 19310., 21460., 23610.,
      25760., 11780., 13920., 16060., 18200., 22770., 25180., 27590., 30000.,
      8009.,  9970.,  11931., 13892., 17932., 20136., 22340., 24544., 9504.,
      11232., 12960., 14688., 18360., 20304., 22248., 24192., 6057.,  7594.,
      9131.,  10668., 13798., 15524., 17250., 18976., 8370.,  10020., 11670.,
      13320., 16980., 18840., 20700., 22560., 10560., 12480., 14400., 16320.,
      20400., 22560., 24720., 26880., 10458., 12580., 14702., 16824., 21496.,
      23888., 26280., 28672., 13120., 15504., 17888., 20272., 25356., 28040.,
      30724., 33408., 8902.,  11084., 13266., 15448., 19940., 22392., 24844.,
      27296., 10560., 12480., 14400., 16320., 20400., 22560., 24720., 26880.,
      6750.,  8460.,  10170., 11880., 15360., 17280., 19200., 21120., 7543.,
      9038.,  10533., 12028., 15332., 17016., 18700., 20384., 9504.,  11232.,
      12960., 14688., 18360., 20304., 22248., 24192., 9495.,  11414., 13333.,
      15252., 19466., 21628., 23790., 25952., 11900., 14064., 16228., 18392.,
      22986., 25420., 27854., 30288., 8021.,  9994.,  11967., 13940., 17992.,
      20208., 22424., 24640., 9504.,  11232., 12960., 14688., 18360., 20304.,
      22248., 24192., 6093.,  7634.,  9175.,  10716., 13850., 15580., 17310.,
      19040., 6696.,  8016.,  9336.,  10656., 13584., 15072., 16560., 18048.,
      8448.,  9984.,  11520., 13056., 16320., 18048., 19776., 21504., 8424.,
      10128., 11832., 13536., 17280., 19200., 21120., 23040., 10560., 12480.,
      14400., 16320., 20400., 22560., 24720., 26880., 7128.,  8880.,  10632.,
      12384., 15984., 17952., 19920., 21888., 8448.,  9984.,  11520., 13056.,
      16320., 18048., 19776., 21504., 5400.,  6768.,  8136.,  9504.,  12288.,
      13824., 15360., 16896., 5861.,  7018.,  8175.,  9332.,  11896., 13200.,
      14504., 15808., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304.,
      18816., 7389.,  8882.,  10375., 11868., 15146., 16828., 18510., 20192.,
      9260.,  10944., 12628., 14312., 17886., 19780., 21674., 23568., 6239.,
      7774.,  9309.,  10844., 13996., 15720., 17444., 19168., 7392.,  8736.,
      10080., 11424., 14280., 15792., 17304., 18816., 4815.,  6022.,  7229.,
      8436.,  10882., 12236., 13590., 14944.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37280., 38656., 40032., 41408., 44368., 45792., 47216., 48640., 35840.,
      37184., 38528., 39872., 42800., 44192., 45584., 46976., 35424., 36736.,
      38048., 39360., 42256., 43616., 44976., 46336., 37632., 38976., 40320.,
      41664., 44592., 45984., 47376., 48768., 40352., 41728., 43104., 44480.,
      47440., 48864., 50288., 51712., 41536., 42944., 44352., 45760., 48752.,
      50208., 51664., 53120., 43232., 44672., 46112., 47552., 50576., 52064.,
      53552., 55040., 51040., 52608., 54176., 55744., 58896., 60512., 62128.,
      63744., 49600., 51136., 52672., 54208., 57328., 58912., 60496., 62080.,
      49184., 50688., 52192., 53696., 56784., 58336., 59888., 61440., 49344.,
      50880., 52416., 53952., 57072., 58656., 60240., 61824., 50016., 51584.,
      53152., 54720., 57872., 59488., 61104., 62720., 49152., 50752., 52352.,
      53952., 57136., 58784., 60432., 62080., 48800., 50432., 52064., 53696.,
      56912., 58592., 60272., 61952., 48416., 50176., 51936., 53696., 57040.,
      58848., 60656., 62464., 46976., 48704., 50432., 52160., 55472., 57248.,
      59024., 60800., 46560., 48256., 49952., 51648., 54928., 56672., 58416.,
      60160., 45120., 46784., 48448., 50112., 53360., 55072., 56784., 58496.,
      44704., 46336., 47968., 49600., 52816., 54496., 56176., 57856., 43264.,
      44864., 46464., 48064., 51248., 52896., 54544., 56192., 42848., 44416.,
      45984., 47552., 50704., 52320., 53936., 55552., 39136., 40576., 42016.,
      43456., 46480., 47968., 49456., 50944., 37696., 39104., 40512., 41920.,
      44912., 46368., 47824., 49280., 37280., 38656., 40032., 41408., 44368.,
      45792., 47216., 48640., 35840., 37184., 38528., 39872., 42800., 44192.,
      45584., 46976., 35424., 36736., 38048., 39360., 42256., 43616., 44976.,
      46336., 37632., 38976., 40320., 41664., 44592., 45984., 47376., 48768.,
      40352., 41728., 43104., 44480., 47440., 48864., 50288., 51712., 48160.,
      49664., 51168., 52672., 55760., 57312., 58864., 60416., 49344., 50880.,
      52416., 53952., 57072., 58656., 60240., 61824., 51040., 52608., 54176.,
      55744., 58896., 60512., 62128., 63744., 49600., 51136., 52672., 54208.,
      57328., 58912., 60496., 62080., 49184., 50688., 52192., 53696., 56784.,
      58336., 59888., 61440., 49344., 50880., 52416., 53952., 57072., 58656.,
      60240., 61824., 50016., 51584., 53152., 54720., 57872., 59488., 61104.,
      62720., 49632., 51328., 53024., 54720., 58000., 59744., 61488., 63232.,
      48768., 50496., 52224., 53952., 57264., 59040., 60816., 62592., 48416.,
      50176., 51936., 53696., 57040., 58848., 60656., 62464., 46976., 48704.,
      50432., 52160., 55472., 57248., 59024., 60800., 46560., 48256., 49952.,
      51648., 54928., 56672., 58416., 60160., 45120., 46784., 48448., 50112.,
      53360., 55072., 56784., 58496., 44704., 46336., 47968., 49600., 52816.,
      54496., 56176., 57856., 40992., 42496., 44000., 45504., 48592., 50144.,
      51696., 53248., 39552., 41024., 42496., 43968., 47024., 48544., 50064.,
      51584., 39136., 40576., 42016., 43456., 46480., 47968., 49456., 50944.,
      37696., 39104., 40512., 41920., 44912., 46368., 47824., 49280., 37280.,
      38656., 40032., 41408., 44368., 45792., 47216., 48640., 35840., 37184.,
      38528., 39872., 42800., 44192., 45584., 46976., 35424., 36736., 38048.,
      39360., 42256., 43616., 44976., 46336.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6999.,  9204.,  11703., 14496., 11592., 14112., 16968., 20160., 8121.,
      10956., 14169., 17760., 7770.,  10920., 14490., 18480., 8217.,  11052.,
      14265., 17856., 11592., 14112., 16968., 20160., 6903.,  9108.,  11607.,
      14400., 7176.,  9696.,  12552., 15744., 7104.,  9984.,  13248., 16896.,
      10104., 13344., 17016., 21120., 16560., 20160., 24240., 28800., 10104.,
      13344., 17016., 21120., 7104.,  9984.,  13248., 16896., 7176.,  9696.,
      12552., 15744., 8985.,  11820., 15033., 18624., 14904., 18144., 21816.,
      25920., 10455., 14100., 18231., 22848., 9990.,  14040., 18630., 23760.,
      10551., 14196., 18327., 22944., 14904., 18144., 21816., 25920., 8889.,
      11724., 14937., 18528., 8970.,  12120., 15690., 19680., 8880.,  12480.,
      16560., 21120., 12630., 16680., 21270., 26400., 20700., 25200., 30300.,
      36000., 12630., 16680., 21270., 26400., 8880.,  12480., 16560., 21120.,
      8970.,  12120., 15690., 19680., 8889.,  11724., 14937., 18528., 14904.,
      18144., 21816., 25920., 10551., 14196., 18327., 22944., 9990.,  14040.,
      18630., 23760., 10455., 14100., 18231., 22848., 14904., 18144., 21816.,
      25920., 8985.,  11820., 15033., 18624., 7176.,  9696.,  12552., 15744.,
      7104.,  9984.,  13248., 16896., 10104., 13344., 17016., 21120., 16560.,
      20160., 24240., 28800., 10104., 13344., 17016., 21120., 7104.,  9984.,
      13248., 16896., 7176.,  9696.,  12552., 15744., 6903.,  9108.,  11607.,
      14400., 11592., 14112., 16968., 20160., 8217.,  11052., 14265., 17856.,
      7770.,  10920., 14490., 18480., 8121.,  10956., 14169., 17760., 11592.,
      14112., 16968., 20160., 6999.,  9204.,  11703., 14496.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45616., 48576., 51632., 54784., 43952., 46912., 49968., 53120., 43056.,
      46016., 49072., 52224., 44784., 47808., 50928., 54144., 47024., 50112.,
      53296., 56576., 47920., 51008., 54192., 57472., 49584., 52672., 55856.,
      59136., 47536., 50624., 53808., 57088., 45040., 48064., 51184., 54400.,
      43568., 46528., 49584., 52736., 43952., 46912., 49968., 53120., 45104.,
      48064., 51120., 54272., 44976., 47936., 50992., 54144., 45616., 48576.,
      51632., 54784., 47024., 50112., 53296., 56576., 47920., 51008., 54192.,
      57472., 49584., 52672., 55856., 59136., 48944., 52032., 55216., 58496.,
      49072., 52160., 55344., 58624., 47920., 51008., 54192., 57472., 47536.,
      50624., 53808., 57088., 45104., 48064., 51120., 54272., 44976., 47936.,
      50992., 54144., 45616., 48576., 51632., 54784., 43952., 46912., 49968.,
      53120., 43056., 46016., 49072., 52224., 44784., 47808., 50928., 54144.,
      47024., 50112., 53296., 56576., 49072., 52160., 55344., 58624., 47920.,
      51008., 54192., 57472., 47536., 50624., 53808., 57088., 45040., 48064.,
      51184., 54400., 43568., 46528., 49584., 52736., 43952., 46912., 49968.,
      53120., 45104., 48064., 51120., 54272., 43056., 46016., 49072., 52224.,
      44784., 47808., 50928., 54144., 47024., 50112., 53296., 56576., 47920.,
      51008., 54192., 57472., 49584., 52672., 55856., 59136., 48944., 52032.,
      55216., 58496., 49072., 52160., 55344., 58624., 43568., 46528., 49584.,
      52736., 43952., 46912., 49968., 53120., 45104., 48064., 51120., 54272.,
      44976., 47936., 50992., 54144., 45616., 48576., 51632., 54784., 43952.,
      46912., 49968., 53120., 43056., 46016., 49072., 52224.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4335.,  5310.,  7398.,  8520.,  11049., 12318., 15288., 16704., 7224.,
      8400.,  10752., 12096., 14952., 16464., 19824., 21504., 5373.,  6642.,
      9318.,  10776., 14019., 15666., 19476., 21312., 8910.,  10356., 13272.,
      14928., 18474., 20340., 24516., 26592., 4713.,  6066.,  8658.,  10200.,
      13359., 15090., 18816., 20736., 7224.,  8400.,  10752., 12096., 14952.,
      16464., 19824., 21504., 3483.,  4542.,  6546.,  7752.,  10197., 11550.,
      14436., 15936., 4968.,  6096.,  8496.,  9792.,  12696., 14160., 17568.,
      19200., 8256.,  9600.,  12288., 13824., 17088., 18816., 22656., 24576.,
      6264.,  7728.,  10800., 12480., 16200., 18096., 22464., 24576., 10320.,
      12000., 15360., 17280., 21360., 23520., 28320., 30720., 5400.,  6960.,
      9936.,  11712., 15336., 17328., 21600., 23808., 8256.,  9600.,  12288.,
      13824., 17088., 18816., 22656., 24576., 4104.,  5328.,  7632.,  9024.,
      11832., 13392., 16704., 18432., 5577.,  6834.,  9522.,  10968., 14223.,
      15858., 19680., 21504., 9288.,  10800., 13824., 15552., 19224., 21168.,
      25488., 27648., 6939.,  8574.,  12018., 13896., 18069., 20190., 25092.,
      27456., 11490., 13356., 17112., 19248., 23814., 26220., 31596., 34272.,
      6063.,  7806.,  11142., 13128., 17193., 19422., 24216., 26688., 9288.,
      10800., 13824., 15552., 19224., 21168., 25488., 27648., 4509.,  5874.,
      8454.,  10008., 13155., 14898., 18612., 20544., 6210.,  7620.,  10620.,
      12240., 15870., 17700., 21960., 24000., 10320., 12000., 15360., 17280.,
      21360., 23520., 28320., 30720., 7830.,  9660.,  13500., 15600., 20250.,
      22620., 28080., 30720., 12900., 15000., 19200., 21600., 26700., 29400.,
      35400., 38400., 6750.,  8700.,  12420., 14640., 19170., 21660., 27000.,
      29760., 10320., 12000., 15360., 17280., 21360., 23520., 28320., 30720.,
      5130.,  6660.,  9540.,  11280., 14790., 16740., 20880., 23040., 5601.,
      6882.,  9594.,  11064., 14343., 16002., 19848., 21696., 9288.,  10800.,
      13824., 15552., 19224., 21168., 25488., 27648., 7155.,  8814.,  12282.,
      14184., 18381., 20526., 25452., 27840., 11730., 13644., 17448., 19632.,
      24246., 26700., 32124., 34848., 6087.,  7854.,  11214., 13224., 17313.,
      19566., 24384., 26880., 9288.,  10800., 13824., 15552., 19224., 21168.,
      25488., 27648., 4725.,  6114.,  8718.,  10296., 13467., 15234., 18972.,
      20928., 4968.,  6096.,  8496.,  9792.,  12696., 14160., 17568., 19200.,
      8256.,  9600.,  12288., 13824., 17088., 18816., 22656., 24576., 6264.,
      7728.,  10800., 12480., 16200., 18096., 22464., 24576., 10320., 12000.,
      15360., 17280., 21360., 23520., 28320., 30720., 5400.,  6960.,  9936.,
      11712., 15336., 17328., 21600., 23808., 8256.,  9600.,  12288., 13824.,
      17088., 18816., 22656., 24576., 4104.,  5328.,  7632.,  9024.,  11832.,
      13392., 16704., 18432., 4359.,  5358.,  7470.,  8616.,  11169., 12462.,
      15456., 16896., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824.,
      21504., 5589.,  6882.,  9582.,  11064., 14331., 16002., 19836., 21696.,
      9150.,  10644., 13608., 15312., 18906., 20820., 25044., 27168., 4737.,
      6114.,  8730.,  10296., 13479., 15234., 18984., 20928., 7224.,  8400.,
      10752., 12096., 14952., 16464., 19824., 21504., 3699.,  4782.,  6810.,
      8040.,  10509., 11886., 14796., 16320.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      40144., 41568., 44480., 45952., 49008., 50528., 53728., 55296., 38864.,
      40288., 43200., 44672., 47728., 49248., 52448., 54016., 39120., 40544.,
      43456., 44928., 47984., 49504., 52704., 54272., 40464., 41952., 44928.,
      46464., 49584., 51168., 54432., 56064., 42832., 44384., 47424., 49024.,
      52208., 53856., 57184., 58880., 42576., 44128., 47168., 48768., 51952.,
      53600., 56928., 58624., 43856., 45408., 48448., 50048., 53232., 54880.,
      58208., 59904., 47952., 49504., 52544., 54144., 57328., 58976., 62304.,
      64000., 45072., 46560., 49536., 51072., 54192., 55776., 59040., 60672.,
      44240., 45664., 48576., 50048., 53104., 54624., 57824., 59392., 42960.,
      44384., 47296., 48768., 51824., 53344., 56544., 58112., 43216., 44640.,
      47552., 49024., 52080., 53600., 56800., 58368., 40912., 42336., 45248.,
      46720., 49776., 51296., 54496., 56064., 40144., 41568., 44480., 45952.,
      49008., 50528., 53728., 55296., 42832., 44384., 47424., 49024., 52208.,
      53856., 57184., 58880., 42576., 44128., 47168., 48768., 51952., 53600.,
      56928., 58624., 43856., 45408., 48448., 50048., 53232., 54880., 58208.,
      59904., 44624., 46176., 49216., 50816., 54000., 55648., 58976., 60672.,
      46928., 48480., 51520., 53120., 56304., 57952., 61280., 62976., 46672.,
      48224., 51264., 52864., 56048., 57696., 61024., 62720., 47952., 49504.,
      52544., 54144., 57328., 58976., 62304., 64000., 43216., 44640., 47552.,
      49024., 52080., 53600., 56800., 58368., 40912., 42336., 45248., 46720.,
      49776., 51296., 54496., 56064., 40144., 41568., 44480., 45952., 49008.,
      50528., 53728., 55296., 38864., 40288., 43200., 44672., 47728., 49248.,
      52448., 54016., 39120., 40544., 43456., 44928., 47984., 49504., 52704.,
      54272., 40464., 41952., 44928., 46464., 49584., 51168., 54432., 56064.,
      42832., 44384., 47424., 49024., 52208., 53856., 57184., 58880., 46928.,
      48480., 51520., 53120., 56304., 57952., 61280., 62976., 46672., 48224.,
      51264., 52864., 56048., 57696., 61024., 62720., 47952., 49504., 52544.,
      54144., 57328., 58976., 62304., 64000., 45072., 46560., 49536., 51072.,
      54192., 55776., 59040., 60672., 44240., 45664., 48576., 50048., 53104.,
      54624., 57824., 59392., 42960., 44384., 47296., 48768., 51824., 53344.,
      56544., 58112., 43216., 44640., 47552., 49024., 52080., 53600., 56800.,
      58368., 39120., 40544., 43456., 44928., 47984., 49504., 52704., 54272.,
      40464., 41952., 44928., 46464., 49584., 51168., 54432., 56064., 42832.,
      44384., 47424., 49024., 52208., 53856., 57184., 58880., 42576., 44128.,
      47168., 48768., 51952., 53600., 56928., 58624., 43856., 45408., 48448.,
      50048., 53232., 54880., 58208., 59904., 44624., 46176., 49216., 50816.,
      54000., 55648., 58976., 60672., 46928., 48480., 51520., 53120., 56304.,
      57952., 61280., 62976., 44240., 45664., 48576., 50048., 53104., 54624.,
      57824., 59392., 42960., 44384., 47296., 48768., 51824., 53344., 56544.,
      58112., 43216., 44640., 47552., 49024., 52080., 53600., 56800., 58368.,
      40912., 42336., 45248., 46720., 49776., 51296., 54496., 56064., 40144.,
      41568., 44480., 45952., 49008., 50528., 53728., 55296., 38864., 40288.,
      43200., 44672., 47728., 49248., 52448., 54016., 39120., 40544., 43456.,
      44928., 47984., 49504., 52704., 54272.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      975.,   1950.,  2925.,  3900.,  5610.,  6732.,  7854.,  8976.,  11421.,
      12690., 13959., 15228., 18408., 19824., 21240., 22656., 1176.,  2352.,
      3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120., 16632.,
      18144., 21840., 23520., 25200., 26880., 1269.,  2538.,  3807.,  5076.,
      7290.,  8748.,  10206., 11664., 14823., 16470., 18117., 19764., 23868.,
      25704., 27540., 29376., 1446.,  2892.,  4338.,  5784.,  8280.,  9936.,
      11592., 13248., 16794., 18660., 20526., 22392., 26988., 29064., 31140.,
      33216., 1353.,  2706.,  4059.,  5412.,  7710.,  9252.,  10794., 12336.,
      15579., 17310., 19041., 20772., 24960., 26880., 28800., 30720., 1176.,
      2352.,  3528.,  4704.,  6720.,  8064.,  9408.,  10752., 13608., 15120.,
      16632., 18144., 21840., 23520., 25200., 26880., 1059.,  2118.,  3177.,
      4236.,  6030.,  7236.,  8442.,  9648.,  12177., 13530., 14883., 16236.,
      19500., 21000., 22500., 24000., 1128.,  2256.,  3384.,  4512.,  6480.,
      7776.,  9072.,  10368., 13176., 14640., 16104., 17568., 21216., 22848.,
      24480., 26112., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752.,
      12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720.,
      1464.,  2928.,  4392.,  5856.,  8400.,  10080., 11760., 13440., 17064.,
      18960., 20856., 22752., 27456., 29568., 31680., 33792., 1680.,  3360.,
      5040.,  6720.,  9600.,  11520., 13440., 15360., 19440., 21600., 23760.,
      25920., 31200., 33600., 36000., 38400., 1560.,  3120.,  4680.,  6240.,
      8880.,  10656., 12432., 14208., 17928., 19920., 21912., 23904., 28704.,
      30912., 33120., 35328., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,
      10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800.,
      30720., 1224.,  2448.,  3672.,  4896.,  6960.,  8352.,  9744.,  11136.,
      14040., 15600., 17160., 18720., 22464., 24192., 25920., 27648., 1257.,
      2514.,  3771.,  5028.,  7230.,  8676.,  10122., 11568., 14715., 16350.,
      17985., 19620., 23712., 25536., 27360., 29184., 1512.,  3024.,  4536.,
      6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328.,
      28080., 30240., 32400., 34560., 1635.,  3270.,  4905.,  6540.,  9390.,
      11268., 13146., 15024., 19089., 21210., 23331., 25452., 30732., 33096.,
      35460., 37824., 1866.,  3732.,  5598.,  7464.,  10680., 12816., 14952.,
      17088., 21654., 24060., 26466., 28872., 34788., 37464., 40140., 42816.,
      1743.,  3486.,  5229.,  6972.,  9930.,  11916., 13902., 15888., 20061.,
      22290., 24519., 26748., 32136., 34608., 37080., 39552., 1512.,  3024.,
      4536.,  6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384.,
      23328., 28080., 30240., 32400., 34560., 1365.,  2730.,  4095.,  5460.,
      7770.,  9324.,  10878., 12432., 15687., 17430., 19173., 20916., 25116.,
      27048., 28980., 30912., 1410.,  2820.,  4230.,  5640.,  8100.,  9720.,
      11340., 12960., 16470., 18300., 20130., 21960., 26520., 28560., 30600.,
      32640., 1680.,  3360.,  5040.,  6720.,  9600.,  11520., 13440., 15360.,
      19440., 21600., 23760., 25920., 31200., 33600., 36000., 38400., 1830.,
      3660.,  5490.,  7320.,  10500., 12600., 14700., 16800., 21330., 23700.,
      26070., 28440., 34320., 36960., 39600., 42240., 2100.,  4200.,  6300.,
      8400.,  12000., 14400., 16800., 19200., 24300., 27000., 29700., 32400.,
      39000., 42000., 45000., 48000., 1950.,  3900.,  5850.,  7800.,  11100.,
      13320., 15540., 17760., 22410., 24900., 27390., 29880., 35880., 38640.,
      41400., 44160., 1680.,  3360.,  5040.,  6720.,  9600.,  11520., 13440.,
      15360., 19440., 21600., 23760., 25920., 31200., 33600., 36000., 38400.,
      1530.,  3060.,  4590.,  6120.,  8700.,  10440., 12180., 13920., 17550.,
      19500., 21450., 23400., 28080., 30240., 32400., 34560., 1281.,  2562.,
      3843.,  5124.,  7350.,  8820.,  10290., 11760., 14931., 16590., 18249.,
      19908., 24024., 25872., 27720., 29568., 1512.,  3024.,  4536.,  6048.,
      8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328., 28080.,
      30240., 32400., 34560., 1659.,  3318.,  4977.,  6636.,  9510.,  11412.,
      13314., 15216., 19305., 21450., 23595., 25740., 31044., 33432., 35820.,
      38208., 1914.,  3828.,  5742.,  7656.,  10920., 13104., 15288., 17472.,
      22086., 24540., 26994., 29448., 35412., 38136., 40860., 43584., 1767.,
      3534.,  5301.,  7068.,  10050., 12060., 14070., 16080., 20277., 22530.,
      24783., 27036., 32448., 34944., 37440., 39936., 1512.,  3024.,  4536.,
      6048.,  8640.,  10368., 12096., 13824., 17496., 19440., 21384., 23328.,
      28080., 30240., 32400., 34560., 1389.,  2778.,  4167.,  5556.,  7890.,
      9468.,  11046., 12624., 15903., 17670., 19437., 21204., 25428., 27384.,
      29340., 31296., 1128.,  2256.,  3384.,  4512.,  6480.,  7776.,  9072.,
      10368., 13176., 14640., 16104., 17568., 21216., 22848., 24480., 26112.,
      1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288., 15552.,
      17280., 19008., 20736., 24960., 26880., 28800., 30720., 1464.,  2928.,
      4392.,  5856.,  8400.,  10080., 11760., 13440., 17064., 18960., 20856.,
      22752., 27456., 29568., 31680., 33792., 1680.,  3360.,  5040.,  6720.,
      9600.,  11520., 13440., 15360., 19440., 21600., 23760., 25920., 31200.,
      33600., 36000., 38400., 1560.,  3120.,  4680.,  6240.,  8880.,  10656.,
      12432., 14208., 17928., 19920., 21912., 23904., 28704., 30912., 33120.,
      35328., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,  10752., 12288.,
      15552., 17280., 19008., 20736., 24960., 26880., 28800., 30720., 1224.,
      2448.,  3672.,  4896.,  6960.,  8352.,  9744.,  11136., 14040., 15600.,
      17160., 18720., 22464., 24192., 25920., 27648., 999.,   1998.,  2997.,
      3996.,  5730.,  6876.,  8022.,  9168.,  11637., 12930., 14223., 15516.,
      18720., 20160., 21600., 23040., 1176.,  2352.,  3528.,  4704.,  6720.,
      8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520.,
      25200., 26880., 1293.,  2586.,  3879.,  5172.,  7410.,  8892.,  10374.,
      11856., 15039., 16710., 18381., 20052., 24180., 26040., 27900., 29760.,
      1494.,  2988.,  4482.,  5976.,  8520.,  10224., 11928., 13632., 17226.,
      19140., 21054., 22968., 27612., 29736., 31860., 33984., 1377.,  2754.,
      4131.,  5508.,  7830.,  9396.,  10962., 12528., 15795., 17550., 19305.,
      21060., 25272., 27216., 29160., 31104., 1176.,  2352.,  3528.,  4704.,
      6720.,  8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840.,
      23520., 25200., 26880., 1083.,  2166.,  3249.,  4332.,  6150.,  7380.,
      8610.,  9840.,  12393., 13770., 15147., 16524., 19812., 21336., 22860.,
      24384.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,
      7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736.,
      15552., 17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,
      10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104.,
      19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 5712.,
      6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920.,
      14736., 15552., 17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,
      9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088.,
      18912., 19776., 20640., 21504., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752.,
      11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968.,
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,
      7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736.,
      15552., 17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,
      10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104.,
      19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,
      7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552.,
      17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752.,
      11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968.,
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,
      7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736.,
      15552., 17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520.,
      13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,
      7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552.,
      17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752.,
      11520., 13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968.,
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,
      9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376.,
      18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520.,
      13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,
      7872.,  9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552.,
      17376., 18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104.,
      13920., 14736., 15552., 17376., 18240., 19104., 19968., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,
      9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376.,
      18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520.,
      13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968., 7248.,
      7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456.,
      16272., 17088., 18912., 19776., 20640., 21504., 7248.,  7968.,  8688.,
      9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088.,
      18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,  9216.,
      9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376., 18240.,
      19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520., 13104.,
      13920., 14736., 15552., 17376., 18240., 19104., 19968., 7248.,  7968.,
      8688.,  9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272.,
      17088., 18912., 19776., 20640., 21504., 5712.,  6432.,  7152.,  7872.,
      9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376.,
      18240., 19104., 19968., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}